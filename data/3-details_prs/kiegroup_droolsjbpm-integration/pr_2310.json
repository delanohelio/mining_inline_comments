{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MDA4NzY2", "number": 2310, "title": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection", "bodyText": "Jira: https://issues.redhat.com/browse/JBPM-9399\ndepends on:\nkiegroup/droolsjbpm-build-bootstrap#1521\nkiegroup/droolsjbpm-knowledge#468\nkiegroup/jbpm#1765", "createdAt": "2020-11-05T11:55:17Z", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310", "merged": true, "mergeCommit": {"oid": "8534772ba17c762f3bcf85fed1023aba04340b4f"}, "closed": true, "closedAt": "2020-12-09T10:52:24Z", "author": {"login": "elguardian"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbxK3AABqjM5ODgyODQzNjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdj3qvjgFqTU0NjI4NjEwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f63c139f94a2a40002004647b5ff415494631061", "author": {"user": {"login": "elguardian", "name": "Enrique Gonz\u00e1lez Mart\u00ednez"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/f63c139f94a2a40002004647b5ff415494631061", "committedDate": "2020-11-05T11:53:00Z", "message": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection"}, "afterCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd", "author": {"user": {"login": "elguardian", "name": "Enrique Gonz\u00e1lez Mart\u00ednez"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/4872bb018b6c6d3493e38edaa46a1b66777a73fd", "committedDate": "2020-11-12T11:50:13Z", "message": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5OTk0ODEx", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#pullrequestreview-529994811", "createdAt": "2020-11-13T11:43:41Z", "commit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMTo0Mzo0MVrOHyrPyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNTo0NzoyM1rOHyzkRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5OTQwMg==", "bodyText": "There is no unit test so far. So this is not really needed", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r522899402", "createdAt": "2020-11-13T11:43:41Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/pom.xml", "diffHunk": "@@ -0,0 +1,68 @@\n+<?xml version=\"1.0\"?>\n+<project\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"\n+    xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+\n+    <parent>\n+        <groupId>org.kie.server</groupId>\n+        <artifactId>kie-server-services</artifactId>\n+        <version>7.46.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>kie-server-services-jbpm-cluster</artifactId>\n+\n+    <name>KIE :: Execution Server :: Services :: jBPM Cluster Extension</name>\n+    <description>KIE jBPM Cluster Execution Server Extension</description>\n+\n+    <properties>\n+        <java.module.name>org.kie.server.services.jbpm.cluster</java.module.name>\n+    </properties>\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.kie</groupId>\n+            <artifactId>kie-api</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.jbpm</groupId>\n+            <artifactId>jbpm-executor</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.jboss.spec.javax.ejb</groupId>\n+            <artifactId>jboss-ejb-api_3.2_spec</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.kie.server</groupId>\n+            <artifactId>kie-server-services-common</artifactId>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>javax.xml.stream</groupId>\n+                    <artifactId>stax-api</artifactId>\n+                </exclusion>\n+                <exclusion>\n+                    <groupId>javax.activation</groupId>\n+                    <artifactId>activation</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.infinispan</groupId>\n+            <artifactId>infinispan-commons</artifactId>\n+            <scope>provided</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.infinispan</groupId>\n+            <artifactId>infinispan-core</artifactId>\n+            <scope>provided</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <scope>test</scope>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkwMjE3Ng==", "bodyText": "Needs to be upgraded to 7.47.0-SNAPSHOT", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r522902176", "createdAt": "2020-11-13T11:50:04Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/pom.xml", "diffHunk": "@@ -0,0 +1,68 @@\n+<?xml version=\"1.0\"?>\n+<project\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"\n+    xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+\n+    <parent>\n+        <groupId>org.kie.server</groupId>\n+        <artifactId>kie-server-services</artifactId>\n+        <version>7.46.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkwMjkxMA==", "bodyText": "RH copyright is missing", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r522902910", "createdAt": "2020-11-13T11:51:49Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/ClusteredJobFailOverListener.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.kie.server.services.jbpm.cluster;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkwMzAxMw==", "bodyText": "RH copyright header is missing", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r522903013", "createdAt": "2020-11-13T11:52:05Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/EJBCacheInitializer.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.kie.server.services.jbpm.cluster;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkxMjY5Mg==", "bodyText": "no need to use the full qualified name of the class. Use imports section instead\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ClusterAwareService clusterService = org.kie.api.internal.utils.ServiceRegistry.getService(ClusterAwareService.class);\n          \n          \n            \n                    ClusterAwareService clusterService = ServiceRegistry.getService(ClusterAwareService.class);", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r522912692", "createdAt": "2020-11-13T12:13:20Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/EJBCacheInitializer.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.kie.server.services.jbpm.cluster;\n+\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+import javax.annotation.Resource;\n+import javax.ejb.Singleton;\n+import javax.ejb.Startup;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.jgroups.Address;\n+import org.kie.api.cluster.ClusterAwareService;\n+import org.kie.api.cluster.ClusterNode;\n+\n+@Singleton\n+@Startup\n+public class EJBCacheInitializer {\n+\n+    public static final String CACHE_NAME_LOOKUP = \"java:jboss/infinispan/container/jbpm\";\n+    \n+    public static final String CACHE_NODES_NAME_LOOKUP = \"java:jboss/infinispan/cache/jbpm/nodes\";\n+    \n+    public static final String CACHE_JOBS_NAME_LOOKUP = \"java:jboss/infinispan/cache/jbpm/jobs\";\n+    \n+    // this enforce the cache initializer\n+\n+    @Resource(lookup = CACHE_NAME_LOOKUP)\n+    private EmbeddedCacheManager cacheManager;\n+\n+    @Resource(lookup = CACHE_NODES_NAME_LOOKUP)\n+    private Cache<Address, ClusterNode> nodesCache;\n+\n+    @Resource(lookup = CACHE_JOBS_NAME_LOOKUP)\n+    private Cache<String, List<Long>> jobsCache;\n+\n+    @PostConstruct\n+    public void init() {\n+        ClusterAwareService clusterService = org.kie.api.internal.utils.ServiceRegistry.getService(ClusterAwareService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkyNDgyMA==", "bodyText": "This check is not needed. We're inside the loop where changeManager.isCoordinator() is true\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (cacheManager.isCoordinator()) {\n          \n          \n            \n                            // address change we remove the nodes from the cache\n          \n          \n            \n                            membersLeft.forEach(node -> nodes.remove(node));\n          \n          \n            \n                        }\n          \n          \n            \n                        // address change we remove the nodes from the cache\n          \n          \n            \n                        membersLeft.forEach(node -> nodes.remove(node));", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r522924820", "createdAt": "2020-11-13T12:39:33Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/InfinispanClusterAwareService.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.jbpm.cluster;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.CacheCollection;\n+import org.infinispan.CacheSet;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.infinispan.notifications.Listener;\n+import org.infinispan.notifications.cachelistener.annotation.CacheEntryCreated;\n+import org.infinispan.notifications.cachelistener.annotation.CacheEntryRemoved;\n+import org.infinispan.notifications.cachelistener.event.CacheEntryCreatedEvent;\n+import org.infinispan.notifications.cachelistener.event.CacheEntryRemovedEvent;\n+import org.infinispan.notifications.cachemanagerlistener.annotation.ViewChanged;\n+import org.infinispan.notifications.cachemanagerlistener.event.Event;\n+import org.infinispan.notifications.cachemanagerlistener.event.ViewChangedEvent;\n+import org.infinispan.remoting.transport.Address;\n+import org.kie.api.cluster.ClusterAwareService;\n+import org.kie.api.cluster.ClusterListener;\n+import org.kie.api.cluster.ClusterNode;\n+import org.kie.server.api.KieServerConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Listener\n+public class InfinispanClusterAwareService implements ClusterAwareService {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(InfinispanClusterAwareService.class);\n+\n+    private List<ClusterListener> listeners;\n+    private EmbeddedCacheManager cacheManager;\n+\n+    private String kieServerId = System.getProperty(KieServerConstants.KIE_SERVER_ID);\n+    private String kieServerLocation = System.getProperty(KieServerConstants.KIE_SERVER_LOCATION);\n+\n+    public InfinispanClusterAwareService() {\n+        listeners = new ArrayList<>();\n+    }\n+\n+    \n+    @Override\n+    public ClusterNode getThisNode() {\n+        return new ClusterNode(kieServerId, kieServerLocation);\n+    }\n+\n+    public void init(EmbeddedCacheManager cacheManager) {\n+        this.cacheManager = cacheManager;\n+        cacheManager.addListener(this);\n+        Cache<Address, ClusterNode> nodes = cacheManager.<Address, ClusterNode> getCache(CLUSTER_NODES_KEY);\n+        nodes.addListener(this);\n+        logger.info(\"This node is about to join the jBPM cluster {}-{}\", kieServerId, kieServerLocation);\n+        nodes.put(cacheManager.getAddress(), getThisNode());\n+\n+    }\n+\n+    @CacheEntryCreated\n+    public void nodeJoin(CacheEntryCreatedEvent<Address, ClusterNode> event) {\n+        if(event.isPre()) {\n+            return;\n+        }\n+        logger.info(\"jBPM cluster member joined {}\", event.getValue());\n+        synchronized (listeners) {\n+            listeners.forEach(listener -> listener.nodeJoined(event.getValue()));\n+        }\n+    }\n+\n+    @CacheEntryRemoved\n+    public void nodeLeft(CacheEntryRemovedEvent<Address, ClusterNode> event) {\n+        if(event.isPre()) {\n+            return;\n+        }\n+        logger.info(\"jBPM cluster member left {}\", event.getOldValue());\n+        synchronized (listeners) {\n+            listeners.forEach(listener -> listener.nodeLeft(event.getOldValue()));\n+        }\n+    }\n+\n+    @ViewChanged\n+    public void viewChanged(ViewChangedEvent event) {\n+        logger.info(\"jBPM cluster view changed. Current active nodes: {}\", event.getNewMembers());\n+        if (Event.Type.VIEW_CHANGED.equals(event.getType()) && cacheManager.isCoordinator()) {\n+            List<Address> changedAddress = event.getNewMembers();\n+            Cache<Address, ClusterNode> nodes = cacheManager.<Address, ClusterNode> getCache(CLUSTER_NODES_KEY);\n+            CacheSet<Address> currentView = cacheManager.<Address, ClusterNode> getCache(CLUSTER_NODES_KEY).keySet();\n+\n+            List<Address> membersLeft = currentView.stream().filter(e -> !changedAddress.contains(e)).collect(toList());\n+\n+            // forcefully removed\n+            if (cacheManager.isCoordinator()) {\n+                // address change we remove the nodes from the cache\n+                membersLeft.forEach(node -> nodes.remove(node));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkyNzI5Nw==", "bodyText": "might be final\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private List<ClusterListener> listeners;\n          \n          \n            \n                private final List<ClusterListener> listeners;", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r522927297", "createdAt": "2020-11-13T12:44:35Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/InfinispanClusterAwareService.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.jbpm.cluster;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.CacheCollection;\n+import org.infinispan.CacheSet;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.infinispan.notifications.Listener;\n+import org.infinispan.notifications.cachelistener.annotation.CacheEntryCreated;\n+import org.infinispan.notifications.cachelistener.annotation.CacheEntryRemoved;\n+import org.infinispan.notifications.cachelistener.event.CacheEntryCreatedEvent;\n+import org.infinispan.notifications.cachelistener.event.CacheEntryRemovedEvent;\n+import org.infinispan.notifications.cachemanagerlistener.annotation.ViewChanged;\n+import org.infinispan.notifications.cachemanagerlistener.event.Event;\n+import org.infinispan.notifications.cachemanagerlistener.event.ViewChangedEvent;\n+import org.infinispan.remoting.transport.Address;\n+import org.kie.api.cluster.ClusterAwareService;\n+import org.kie.api.cluster.ClusterListener;\n+import org.kie.api.cluster.ClusterNode;\n+import org.kie.server.api.KieServerConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Listener\n+public class InfinispanClusterAwareService implements ClusterAwareService {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(InfinispanClusterAwareService.class);\n+\n+    private List<ClusterListener> listeners;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkyNzM3NA==", "bodyText": "same as above", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r522927374", "createdAt": "2020-11-13T12:44:44Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/InfinispanClusterAwareService.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.jbpm.cluster;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.CacheCollection;\n+import org.infinispan.CacheSet;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.infinispan.notifications.Listener;\n+import org.infinispan.notifications.cachelistener.annotation.CacheEntryCreated;\n+import org.infinispan.notifications.cachelistener.annotation.CacheEntryRemoved;\n+import org.infinispan.notifications.cachelistener.event.CacheEntryCreatedEvent;\n+import org.infinispan.notifications.cachelistener.event.CacheEntryRemovedEvent;\n+import org.infinispan.notifications.cachemanagerlistener.annotation.ViewChanged;\n+import org.infinispan.notifications.cachemanagerlistener.event.Event;\n+import org.infinispan.notifications.cachemanagerlistener.event.ViewChangedEvent;\n+import org.infinispan.remoting.transport.Address;\n+import org.kie.api.cluster.ClusterAwareService;\n+import org.kie.api.cluster.ClusterListener;\n+import org.kie.api.cluster.ClusterNode;\n+import org.kie.server.api.KieServerConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Listener\n+public class InfinispanClusterAwareService implements ClusterAwareService {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(InfinispanClusterAwareService.class);\n+\n+    private List<ClusterListener> listeners;\n+    private EmbeddedCacheManager cacheManager;\n+\n+    private String kieServerId = System.getProperty(KieServerConstants.KIE_SERVER_ID);\n+    private String kieServerLocation = System.getProperty(KieServerConstants.KIE_SERVER_LOCATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkzMDc3MQ==", "bodyText": "Do we really need these two resources here in this EJB?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r522930771", "createdAt": "2020-11-13T12:51:54Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/EJBCacheInitializer.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.kie.server.services.jbpm.cluster;\n+\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+import javax.annotation.Resource;\n+import javax.ejb.Singleton;\n+import javax.ejb.Startup;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.jgroups.Address;\n+import org.kie.api.cluster.ClusterAwareService;\n+import org.kie.api.cluster.ClusterNode;\n+\n+@Singleton\n+@Startup\n+public class EJBCacheInitializer {\n+\n+    public static final String CACHE_NAME_LOOKUP = \"java:jboss/infinispan/container/jbpm\";\n+    \n+    public static final String CACHE_NODES_NAME_LOOKUP = \"java:jboss/infinispan/cache/jbpm/nodes\";\n+    \n+    public static final String CACHE_JOBS_NAME_LOOKUP = \"java:jboss/infinispan/cache/jbpm/jobs\";\n+    \n+    // this enforce the cache initializer\n+\n+    @Resource(lookup = CACHE_NAME_LOOKUP)\n+    private EmbeddedCacheManager cacheManager;\n+\n+    @Resource(lookup = CACHE_NODES_NAME_LOOKUP)\n+    private Cache<Address, ClusterNode> nodesCache;\n+\n+    @Resource(lookup = CACHE_JOBS_NAME_LOOKUP)\n+    private Cache<String, List<Long>> jobsCache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAwMDM0MQ==", "bodyText": "node.toString() returns Cluster Node [\" +serverId \"-\" + location + \"] - so maybe it's clearer something like\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"Node left in cluster {} node {}, failing over and requeuing {}\", node.getServerId(), node, Arrays.toString(jobs.toArray()));\n          \n          \n            \n                    logger.info(\"Node left cluster {}, failing over and requeuing {}\", node, Arrays.toString(jobs.toArray()));", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r523000341", "createdAt": "2020-11-13T14:53:33Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/ClusteredJobFailOverListener.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.kie.server.services.jbpm.cluster;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.jbpm.executor.AsynchronousJobEvent;\n+import org.jbpm.executor.AsynchronousJobListener;\n+import org.jbpm.executor.RequeueAware;\n+import org.kie.api.cluster.ClusterAwareService;\n+import org.kie.api.cluster.ClusterListener;\n+import org.kie.api.cluster.ClusterNode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ClusteredJobFailOverListener implements ClusterListener, AsynchronousJobListener{\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ClusteredJobFailOverListener.class);\n+\n+    private ClusterAwareService clusterService;\n+    private RequeueAware executorService;\n+    \n+    public ClusteredJobFailOverListener(ClusterAwareService clusterService, RequeueAware executorService) {\n+        this.clusterService = clusterService;\n+        this.executorService = executorService;\n+    }\n+\n+    @Override\n+    public void nodeJoined(ClusterNode node) {\n+        logger.info(\"Node joined in cluster {} node {}\", node.getServerId(), node);\n+    }\n+\n+    @Override\n+    public void nodeLeft(ClusterNode node) {\n+        // all the jobs belonging to the partition need to be requeued\n+        List<Long> jobs = clusterService.getDataFromPartition(ClusterAwareService.CLUSTER_JOBS_KEY, node.toKey());\n+        if(jobs == null || jobs.isEmpty()) {\n+            return;\n+        }\n+        if(!clusterService.isCoordinator()) {\n+            return;\n+        }\n+        logger.info(\"Node left in cluster {} node {}, failing over and requeuing {}\", node.getServerId(), node, Arrays.toString(jobs.toArray()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAwNTc0OA==", "bodyText": "Shouldn't this logic be placed inside afterJobCancelled method instead? What if the job is properly cancel for any reason?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r523005748", "createdAt": "2020-11-13T15:01:32Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/ClusteredJobFailOverListener.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.kie.server.services.jbpm.cluster;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.jbpm.executor.AsynchronousJobEvent;\n+import org.jbpm.executor.AsynchronousJobListener;\n+import org.jbpm.executor.RequeueAware;\n+import org.kie.api.cluster.ClusterAwareService;\n+import org.kie.api.cluster.ClusterListener;\n+import org.kie.api.cluster.ClusterNode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ClusteredJobFailOverListener implements ClusterListener, AsynchronousJobListener{\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ClusteredJobFailOverListener.class);\n+\n+    private ClusterAwareService clusterService;\n+    private RequeueAware executorService;\n+    \n+    public ClusteredJobFailOverListener(ClusterAwareService clusterService, RequeueAware executorService) {\n+        this.clusterService = clusterService;\n+        this.executorService = executorService;\n+    }\n+\n+    @Override\n+    public void nodeJoined(ClusterNode node) {\n+        logger.info(\"Node joined in cluster {} node {}\", node.getServerId(), node);\n+    }\n+\n+    @Override\n+    public void nodeLeft(ClusterNode node) {\n+        // all the jobs belonging to the partition need to be requeued\n+        List<Long> jobs = clusterService.getDataFromPartition(ClusterAwareService.CLUSTER_JOBS_KEY, node.toKey());\n+        if(jobs == null || jobs.isEmpty()) {\n+            return;\n+        }\n+        if(!clusterService.isCoordinator()) {\n+            return;\n+        }\n+        logger.info(\"Node left in cluster {} node {}, failing over and requeuing {}\", node.getServerId(), node, Arrays.toString(jobs.toArray()));\n+        jobs.forEach(jobId -> executorService.requeueById(jobId));\n+    }\n+\n+    @Override\n+    public void beforeJobScheduled(AsynchronousJobEvent event) {\n+        // do nothing\n+    }\n+\n+    @Override\n+    public void beforeJobExecuted(AsynchronousJobEvent event) {\n+        logger.debug(\"Adding job executed {} for failover\", event);\n+        Long data = event.getJob().getId();\n+        clusterService.addData(ClusterAwareService.CLUSTER_JOBS_KEY, clusterService.getThisNode().toKey(), data);\n+    }\n+\n+    @Override\n+    public void afterJobExecuted(AsynchronousJobEvent event) {\n+        logger.info(\"Removing executed job {} from failover\", event);\n+        Long data = event.getJob().getId();\n+        clusterService.removeData(ClusterAwareService.CLUSTER_JOBS_KEY, clusterService.getThisNode().toKey(), data);\n+    }\n+\n+    @Override\n+    public void beforeJobCancelled(AsynchronousJobEvent event) {\n+        logger.debug(\"Removing cancelled job {} from failover\", event);\n+        Long data = event.getJob().getId();\n+        clusterService.removeData(ClusterAwareService.CLUSTER_JOBS_KEY, clusterService.getThisNode().toKey(), data);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAwNzAyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.debug(\"Adding job executed {} for failover\", event);\n          \n          \n            \n                    logger.debug(\"Adding job executed {} for failover\", event.getJob());", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r523007021", "createdAt": "2020-11-13T15:03:27Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/ClusteredJobFailOverListener.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.kie.server.services.jbpm.cluster;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.jbpm.executor.AsynchronousJobEvent;\n+import org.jbpm.executor.AsynchronousJobListener;\n+import org.jbpm.executor.RequeueAware;\n+import org.kie.api.cluster.ClusterAwareService;\n+import org.kie.api.cluster.ClusterListener;\n+import org.kie.api.cluster.ClusterNode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ClusteredJobFailOverListener implements ClusterListener, AsynchronousJobListener{\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ClusteredJobFailOverListener.class);\n+\n+    private ClusterAwareService clusterService;\n+    private RequeueAware executorService;\n+    \n+    public ClusteredJobFailOverListener(ClusterAwareService clusterService, RequeueAware executorService) {\n+        this.clusterService = clusterService;\n+        this.executorService = executorService;\n+    }\n+\n+    @Override\n+    public void nodeJoined(ClusterNode node) {\n+        logger.info(\"Node joined in cluster {} node {}\", node.getServerId(), node);\n+    }\n+\n+    @Override\n+    public void nodeLeft(ClusterNode node) {\n+        // all the jobs belonging to the partition need to be requeued\n+        List<Long> jobs = clusterService.getDataFromPartition(ClusterAwareService.CLUSTER_JOBS_KEY, node.toKey());\n+        if(jobs == null || jobs.isEmpty()) {\n+            return;\n+        }\n+        if(!clusterService.isCoordinator()) {\n+            return;\n+        }\n+        logger.info(\"Node left in cluster {} node {}, failing over and requeuing {}\", node.getServerId(), node, Arrays.toString(jobs.toArray()));\n+        jobs.forEach(jobId -> executorService.requeueById(jobId));\n+    }\n+\n+    @Override\n+    public void beforeJobScheduled(AsynchronousJobEvent event) {\n+        // do nothing\n+    }\n+\n+    @Override\n+    public void beforeJobExecuted(AsynchronousJobEvent event) {\n+        logger.debug(\"Adding job executed {} for failover\", event);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAwNzQzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"Removing executed job {} from failover\", event);\n          \n          \n            \n                    logger.debug(\"Removing executed job {} from failover\", event.getJob());", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r523007431", "createdAt": "2020-11-13T15:04:10Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/ClusteredJobFailOverListener.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.kie.server.services.jbpm.cluster;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.jbpm.executor.AsynchronousJobEvent;\n+import org.jbpm.executor.AsynchronousJobListener;\n+import org.jbpm.executor.RequeueAware;\n+import org.kie.api.cluster.ClusterAwareService;\n+import org.kie.api.cluster.ClusterListener;\n+import org.kie.api.cluster.ClusterNode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ClusteredJobFailOverListener implements ClusterListener, AsynchronousJobListener{\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ClusteredJobFailOverListener.class);\n+\n+    private ClusterAwareService clusterService;\n+    private RequeueAware executorService;\n+    \n+    public ClusteredJobFailOverListener(ClusterAwareService clusterService, RequeueAware executorService) {\n+        this.clusterService = clusterService;\n+        this.executorService = executorService;\n+    }\n+\n+    @Override\n+    public void nodeJoined(ClusterNode node) {\n+        logger.info(\"Node joined in cluster {} node {}\", node.getServerId(), node);\n+    }\n+\n+    @Override\n+    public void nodeLeft(ClusterNode node) {\n+        // all the jobs belonging to the partition need to be requeued\n+        List<Long> jobs = clusterService.getDataFromPartition(ClusterAwareService.CLUSTER_JOBS_KEY, node.toKey());\n+        if(jobs == null || jobs.isEmpty()) {\n+            return;\n+        }\n+        if(!clusterService.isCoordinator()) {\n+            return;\n+        }\n+        logger.info(\"Node left in cluster {} node {}, failing over and requeuing {}\", node.getServerId(), node, Arrays.toString(jobs.toArray()));\n+        jobs.forEach(jobId -> executorService.requeueById(jobId));\n+    }\n+\n+    @Override\n+    public void beforeJobScheduled(AsynchronousJobEvent event) {\n+        // do nothing\n+    }\n+\n+    @Override\n+    public void beforeJobExecuted(AsynchronousJobEvent event) {\n+        logger.debug(\"Adding job executed {} for failover\", event);\n+        Long data = event.getJob().getId();\n+        clusterService.addData(ClusterAwareService.CLUSTER_JOBS_KEY, clusterService.getThisNode().toKey(), data);\n+    }\n+\n+    @Override\n+    public void afterJobExecuted(AsynchronousJobEvent event) {\n+        logger.info(\"Removing executed job {} from failover\", event);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAwNzU1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.debug(\"Removing cancelled job {} from failover\", event);\n          \n          \n            \n                    logger.debug(\"Removing cancelled job {} from failover\", event.getJob());", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r523007553", "createdAt": "2020-11-13T15:04:22Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/ClusteredJobFailOverListener.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.kie.server.services.jbpm.cluster;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.jbpm.executor.AsynchronousJobEvent;\n+import org.jbpm.executor.AsynchronousJobListener;\n+import org.jbpm.executor.RequeueAware;\n+import org.kie.api.cluster.ClusterAwareService;\n+import org.kie.api.cluster.ClusterListener;\n+import org.kie.api.cluster.ClusterNode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ClusteredJobFailOverListener implements ClusterListener, AsynchronousJobListener{\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ClusteredJobFailOverListener.class);\n+\n+    private ClusterAwareService clusterService;\n+    private RequeueAware executorService;\n+    \n+    public ClusteredJobFailOverListener(ClusterAwareService clusterService, RequeueAware executorService) {\n+        this.clusterService = clusterService;\n+        this.executorService = executorService;\n+    }\n+\n+    @Override\n+    public void nodeJoined(ClusterNode node) {\n+        logger.info(\"Node joined in cluster {} node {}\", node.getServerId(), node);\n+    }\n+\n+    @Override\n+    public void nodeLeft(ClusterNode node) {\n+        // all the jobs belonging to the partition need to be requeued\n+        List<Long> jobs = clusterService.getDataFromPartition(ClusterAwareService.CLUSTER_JOBS_KEY, node.toKey());\n+        if(jobs == null || jobs.isEmpty()) {\n+            return;\n+        }\n+        if(!clusterService.isCoordinator()) {\n+            return;\n+        }\n+        logger.info(\"Node left in cluster {} node {}, failing over and requeuing {}\", node.getServerId(), node, Arrays.toString(jobs.toArray()));\n+        jobs.forEach(jobId -> executorService.requeueById(jobId));\n+    }\n+\n+    @Override\n+    public void beforeJobScheduled(AsynchronousJobEvent event) {\n+        // do nothing\n+    }\n+\n+    @Override\n+    public void beforeJobExecuted(AsynchronousJobEvent event) {\n+        logger.debug(\"Adding job executed {} for failover\", event);\n+        Long data = event.getJob().getId();\n+        clusterService.addData(ClusterAwareService.CLUSTER_JOBS_KEY, clusterService.getThisNode().toKey(), data);\n+    }\n+\n+    @Override\n+    public void afterJobExecuted(AsynchronousJobEvent event) {\n+        logger.info(\"Removing executed job {} from failover\", event);\n+        Long data = event.getJob().getId();\n+        clusterService.removeData(ClusterAwareService.CLUSTER_JOBS_KEY, clusterService.getThisNode().toKey(), data);\n+    }\n+\n+    @Override\n+    public void beforeJobCancelled(AsynchronousJobEvent event) {\n+        logger.debug(\"Removing cancelled job {} from failover\", event);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAwOTUzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ExecutionResults execute(CommandContext ctx) throws InterruptedException {\n          \n          \n            \n                @Override\n          \n          \n            \n                public ExecutionResults execute(CommandContext ctx) throws InterruptedException {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r523009535", "createdAt": "2020-11-13T15:07:27Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/ReoccurringLongPrintOutCommand.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.jbpm.cluster;\n+\n+import java.util.Date;\n+\n+import org.kie.api.executor.Command;\n+import org.kie.api.executor.CommandContext;\n+import org.kie.api.executor.ExecutionResults;\n+import org.kie.api.executor.Reoccurring;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Simple command to log the contextual data and return empty results as reoccurring job. \n+ * Just for demo purpose.\n+ * \n+ */\n+public class ReoccurringLongPrintOutCommand implements Command, Reoccurring {\n+    \n+    private static final Logger logger = LoggerFactory.getLogger(ReoccurringLongPrintOutCommand.class);\n+\n+    public ExecutionResults execute(CommandContext ctx) throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAxOTQ5Ng==", "bodyText": "unused import\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.jbpm.services.api.RuntimeDataService;", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r523019496", "createdAt": "2020-11-13T15:22:24Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/JBPMClusterKieServerExtension.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.services.jbpm.cluster;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+\n+import org.jbpm.executor.impl.ExecutorServiceImpl;\n+import org.jbpm.services.api.RuntimeDataService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAyNDQwMw==", "bodyText": "do we want this extension to be enabled by default?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r523024403", "createdAt": "2020-11-13T15:29:47Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/JBPMClusterKieServerExtension.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.services.jbpm.cluster;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+\n+import org.jbpm.executor.impl.ExecutorServiceImpl;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.kie.api.cluster.ClusterAwareService;\n+import org.kie.api.executor.ExecutorService;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.Message;\n+import org.kie.server.api.model.Severity;\n+import org.kie.server.services.api.KieContainerInstance;\n+import org.kie.server.services.api.KieServerApplicationComponentsService;\n+import org.kie.server.services.api.KieServerExtension;\n+import org.kie.server.services.api.KieServerRegistry;\n+import org.kie.server.services.api.SupportedTransports;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JBPMClusterKieServerExtension implements KieServerExtension {\n+\n+    public static final String EXTENSION_NAME = \"jBPM-Cluster\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(JBPMClusterKieServerExtension.class);\n+\n+    private static final Boolean disabled = Boolean.parseBoolean(System.getProperty(KieServerConstants.KIE_JBPM_CLUSTER_SERVER_EXT_DISABLED, \"false\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAyNjgyNA==", "bodyText": "not needed\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            continue;", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r523026824", "createdAt": "2020-11-13T15:33:34Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/JBPMClusterKieServerExtension.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.services.jbpm.cluster;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+\n+import org.jbpm.executor.impl.ExecutorServiceImpl;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.kie.api.cluster.ClusterAwareService;\n+import org.kie.api.executor.ExecutorService;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.Message;\n+import org.kie.server.api.model.Severity;\n+import org.kie.server.services.api.KieContainerInstance;\n+import org.kie.server.services.api.KieServerApplicationComponentsService;\n+import org.kie.server.services.api.KieServerExtension;\n+import org.kie.server.services.api.KieServerRegistry;\n+import org.kie.server.services.api.SupportedTransports;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JBPMClusterKieServerExtension implements KieServerExtension {\n+\n+    public static final String EXTENSION_NAME = \"jBPM-Cluster\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(JBPMClusterKieServerExtension.class);\n+\n+    private static final Boolean disabled = Boolean.parseBoolean(System.getProperty(KieServerConstants.KIE_JBPM_CLUSTER_SERVER_EXT_DISABLED, \"false\"));\n+    private static final Boolean jbpmDisabled = Boolean.parseBoolean(System.getProperty(KieServerConstants.KIE_JBPM_SERVER_EXT_DISABLED, \"false\"));\n+\n+    private List<Object> services = new ArrayList<Object>();\n+    private boolean initialized = false;\n+\n+    private KieServerRegistry registry;\n+\n+    private ExecutorService jbpmExecutorService;\n+    private ClusterAwareService clusterService;\n+\n+    @Override\n+    public boolean isInitialized() {\n+        return initialized;\n+    }\n+\n+    @Override\n+    public boolean isActive() {\n+        return !disabled && !jbpmDisabled;\n+    }\n+\n+    @Override\n+    public void init(KieServerImpl kieServer, KieServerRegistry registry) {\n+\n+        this.registry = registry;\n+        KieServerExtension jbpmExtension = registry.getServerExtension(\"jBPM\");\n+        if (jbpmExtension == null) {\n+            initialized = false;\n+            logger.warn(\"jBPM extension not found, jBPM Cluster cannot work without jBPM extension, disabling itself\");\n+            return;\n+        }\n+\n+        configureServices();\n+\n+        // this implements fail over for jobs\n+        ExecutorServiceImpl service = (ExecutorServiceImpl) jbpmExecutorService;\n+        ClusteredJobFailOverListener clusteredJobFailOverListener = new ClusteredJobFailOverListener(clusterService, service);\n+        service.addAsyncJobListener(clusteredJobFailOverListener);\n+        clusterService.addClusterListener(clusteredJobFailOverListener);\n+\n+        initialized = true;\n+    }\n+\n+    private void configureServices () {\n+        KieServerExtension jbpmExtension = registry.getServerExtension(\"jBPM\");\n+        List<Object> jbpmServices = jbpmExtension.getServices();\n+        \n+\n+        for (Object object : jbpmServices) {\n+            // in case given service is null (meaning was not configured) continue with next one\n+            if (object == null) {\n+                continue;\n+            }\n+            if (ExecutorService.class.isAssignableFrom(object.getClass())) {\n+                this.jbpmExecutorService = (ExecutorService) object;\n+                continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAyNzQ2OA==", "bodyText": "we can make use of import\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    clusterService = org.kie.api.internal.utils.ServiceRegistry.getService(ClusterAwareService.class);\n          \n          \n            \n                    clusterService = ServiceRegistry.getService(ClusterAwareService.class);", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r523027468", "createdAt": "2020-11-13T15:34:28Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/JBPMClusterKieServerExtension.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.services.jbpm.cluster;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+\n+import org.jbpm.executor.impl.ExecutorServiceImpl;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.kie.api.cluster.ClusterAwareService;\n+import org.kie.api.executor.ExecutorService;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.Message;\n+import org.kie.server.api.model.Severity;\n+import org.kie.server.services.api.KieContainerInstance;\n+import org.kie.server.services.api.KieServerApplicationComponentsService;\n+import org.kie.server.services.api.KieServerExtension;\n+import org.kie.server.services.api.KieServerRegistry;\n+import org.kie.server.services.api.SupportedTransports;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JBPMClusterKieServerExtension implements KieServerExtension {\n+\n+    public static final String EXTENSION_NAME = \"jBPM-Cluster\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(JBPMClusterKieServerExtension.class);\n+\n+    private static final Boolean disabled = Boolean.parseBoolean(System.getProperty(KieServerConstants.KIE_JBPM_CLUSTER_SERVER_EXT_DISABLED, \"false\"));\n+    private static final Boolean jbpmDisabled = Boolean.parseBoolean(System.getProperty(KieServerConstants.KIE_JBPM_SERVER_EXT_DISABLED, \"false\"));\n+\n+    private List<Object> services = new ArrayList<Object>();\n+    private boolean initialized = false;\n+\n+    private KieServerRegistry registry;\n+\n+    private ExecutorService jbpmExecutorService;\n+    private ClusterAwareService clusterService;\n+\n+    @Override\n+    public boolean isInitialized() {\n+        return initialized;\n+    }\n+\n+    @Override\n+    public boolean isActive() {\n+        return !disabled && !jbpmDisabled;\n+    }\n+\n+    @Override\n+    public void init(KieServerImpl kieServer, KieServerRegistry registry) {\n+\n+        this.registry = registry;\n+        KieServerExtension jbpmExtension = registry.getServerExtension(\"jBPM\");\n+        if (jbpmExtension == null) {\n+            initialized = false;\n+            logger.warn(\"jBPM extension not found, jBPM Cluster cannot work without jBPM extension, disabling itself\");\n+            return;\n+        }\n+\n+        configureServices();\n+\n+        // this implements fail over for jobs\n+        ExecutorServiceImpl service = (ExecutorServiceImpl) jbpmExecutorService;\n+        ClusteredJobFailOverListener clusteredJobFailOverListener = new ClusteredJobFailOverListener(clusterService, service);\n+        service.addAsyncJobListener(clusteredJobFailOverListener);\n+        clusterService.addClusterListener(clusteredJobFailOverListener);\n+\n+        initialized = true;\n+    }\n+\n+    private void configureServices () {\n+        KieServerExtension jbpmExtension = registry.getServerExtension(\"jBPM\");\n+        List<Object> jbpmServices = jbpmExtension.getServices();\n+        \n+\n+        for (Object object : jbpmServices) {\n+            // in case given service is null (meaning was not configured) continue with next one\n+            if (object == null) {\n+                continue;\n+            }\n+            if (ExecutorService.class.isAssignableFrom(object.getClass())) {\n+                this.jbpmExecutorService = (ExecutorService) object;\n+                continue;\n+            } \n+        }\n+\n+        clusterService = org.kie.api.internal.utils.ServiceRegistry.getService(ClusterAwareService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAzMDQwNA==", "bodyText": "this code is not needed", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r523030404", "createdAt": "2020-11-13T15:39:11Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/JBPMClusterKieServerExtension.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.services.jbpm.cluster;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+\n+import org.jbpm.executor.impl.ExecutorServiceImpl;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.kie.api.cluster.ClusterAwareService;\n+import org.kie.api.executor.ExecutorService;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.Message;\n+import org.kie.server.api.model.Severity;\n+import org.kie.server.services.api.KieContainerInstance;\n+import org.kie.server.services.api.KieServerApplicationComponentsService;\n+import org.kie.server.services.api.KieServerExtension;\n+import org.kie.server.services.api.KieServerRegistry;\n+import org.kie.server.services.api.SupportedTransports;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JBPMClusterKieServerExtension implements KieServerExtension {\n+\n+    public static final String EXTENSION_NAME = \"jBPM-Cluster\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(JBPMClusterKieServerExtension.class);\n+\n+    private static final Boolean disabled = Boolean.parseBoolean(System.getProperty(KieServerConstants.KIE_JBPM_CLUSTER_SERVER_EXT_DISABLED, \"false\"));\n+    private static final Boolean jbpmDisabled = Boolean.parseBoolean(System.getProperty(KieServerConstants.KIE_JBPM_SERVER_EXT_DISABLED, \"false\"));\n+\n+    private List<Object> services = new ArrayList<Object>();\n+    private boolean initialized = false;\n+\n+    private KieServerRegistry registry;\n+\n+    private ExecutorService jbpmExecutorService;\n+    private ClusterAwareService clusterService;\n+\n+    @Override\n+    public boolean isInitialized() {\n+        return initialized;\n+    }\n+\n+    @Override\n+    public boolean isActive() {\n+        return !disabled && !jbpmDisabled;\n+    }\n+\n+    @Override\n+    public void init(KieServerImpl kieServer, KieServerRegistry registry) {\n+\n+        this.registry = registry;\n+        KieServerExtension jbpmExtension = registry.getServerExtension(\"jBPM\");\n+        if (jbpmExtension == null) {\n+            initialized = false;\n+            logger.warn(\"jBPM extension not found, jBPM Cluster cannot work without jBPM extension, disabling itself\");\n+            return;\n+        }\n+\n+        configureServices();\n+\n+        // this implements fail over for jobs\n+        ExecutorServiceImpl service = (ExecutorServiceImpl) jbpmExecutorService;\n+        ClusteredJobFailOverListener clusteredJobFailOverListener = new ClusteredJobFailOverListener(clusterService, service);\n+        service.addAsyncJobListener(clusteredJobFailOverListener);\n+        clusterService.addClusterListener(clusteredJobFailOverListener);\n+\n+        initialized = true;\n+    }\n+\n+    private void configureServices () {\n+        KieServerExtension jbpmExtension = registry.getServerExtension(\"jBPM\");\n+        List<Object> jbpmServices = jbpmExtension.getServices();\n+        \n+\n+        for (Object object : jbpmServices) {\n+            // in case given service is null (meaning was not configured) continue with next one\n+            if (object == null) {\n+                continue;\n+            }\n+            if (ExecutorService.class.isAssignableFrom(object.getClass())) {\n+                this.jbpmExecutorService = (ExecutorService) object;\n+                continue;\n+            } \n+        }\n+\n+        clusterService = org.kie.api.internal.utils.ServiceRegistry.getService(ClusterAwareService.class);\n+    }\n+    \n+    @Override\n+    public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {\n+        if (!initialized) {\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAzMDQ3Ng==", "bodyText": "same as above", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r523030476", "createdAt": "2020-11-13T15:39:19Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/JBPMClusterKieServerExtension.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.services.jbpm.cluster;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+\n+import org.jbpm.executor.impl.ExecutorServiceImpl;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.kie.api.cluster.ClusterAwareService;\n+import org.kie.api.executor.ExecutorService;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.Message;\n+import org.kie.server.api.model.Severity;\n+import org.kie.server.services.api.KieContainerInstance;\n+import org.kie.server.services.api.KieServerApplicationComponentsService;\n+import org.kie.server.services.api.KieServerExtension;\n+import org.kie.server.services.api.KieServerRegistry;\n+import org.kie.server.services.api.SupportedTransports;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JBPMClusterKieServerExtension implements KieServerExtension {\n+\n+    public static final String EXTENSION_NAME = \"jBPM-Cluster\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(JBPMClusterKieServerExtension.class);\n+\n+    private static final Boolean disabled = Boolean.parseBoolean(System.getProperty(KieServerConstants.KIE_JBPM_CLUSTER_SERVER_EXT_DISABLED, \"false\"));\n+    private static final Boolean jbpmDisabled = Boolean.parseBoolean(System.getProperty(KieServerConstants.KIE_JBPM_SERVER_EXT_DISABLED, \"false\"));\n+\n+    private List<Object> services = new ArrayList<Object>();\n+    private boolean initialized = false;\n+\n+    private KieServerRegistry registry;\n+\n+    private ExecutorService jbpmExecutorService;\n+    private ClusterAwareService clusterService;\n+\n+    @Override\n+    public boolean isInitialized() {\n+        return initialized;\n+    }\n+\n+    @Override\n+    public boolean isActive() {\n+        return !disabled && !jbpmDisabled;\n+    }\n+\n+    @Override\n+    public void init(KieServerImpl kieServer, KieServerRegistry registry) {\n+\n+        this.registry = registry;\n+        KieServerExtension jbpmExtension = registry.getServerExtension(\"jBPM\");\n+        if (jbpmExtension == null) {\n+            initialized = false;\n+            logger.warn(\"jBPM extension not found, jBPM Cluster cannot work without jBPM extension, disabling itself\");\n+            return;\n+        }\n+\n+        configureServices();\n+\n+        // this implements fail over for jobs\n+        ExecutorServiceImpl service = (ExecutorServiceImpl) jbpmExecutorService;\n+        ClusteredJobFailOverListener clusteredJobFailOverListener = new ClusteredJobFailOverListener(clusterService, service);\n+        service.addAsyncJobListener(clusteredJobFailOverListener);\n+        clusterService.addClusterListener(clusteredJobFailOverListener);\n+\n+        initialized = true;\n+    }\n+\n+    private void configureServices () {\n+        KieServerExtension jbpmExtension = registry.getServerExtension(\"jBPM\");\n+        List<Object> jbpmServices = jbpmExtension.getServices();\n+        \n+\n+        for (Object object : jbpmServices) {\n+            // in case given service is null (meaning was not configured) continue with next one\n+            if (object == null) {\n+                continue;\n+            }\n+            if (ExecutorService.class.isAssignableFrom(object.getClass())) {\n+                this.jbpmExecutorService = (ExecutorService) object;\n+                continue;\n+            } \n+        }\n+\n+        clusterService = org.kie.api.internal.utils.ServiceRegistry.getService(ClusterAwareService.class);\n+    }\n+    \n+    @Override\n+    public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {\n+        if (!initialized) {\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public void createContainer(String id, KieContainerInstance kieContainerInstance, Map<String, Object> parameters) {\n+        if (!initialized) {\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAzMTIzNw==", "bodyText": "same as above", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r523031237", "createdAt": "2020-11-13T15:40:24Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/JBPMClusterKieServerExtension.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.services.jbpm.cluster;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+\n+import org.jbpm.executor.impl.ExecutorServiceImpl;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.kie.api.cluster.ClusterAwareService;\n+import org.kie.api.executor.ExecutorService;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.Message;\n+import org.kie.server.api.model.Severity;\n+import org.kie.server.services.api.KieContainerInstance;\n+import org.kie.server.services.api.KieServerApplicationComponentsService;\n+import org.kie.server.services.api.KieServerExtension;\n+import org.kie.server.services.api.KieServerRegistry;\n+import org.kie.server.services.api.SupportedTransports;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JBPMClusterKieServerExtension implements KieServerExtension {\n+\n+    public static final String EXTENSION_NAME = \"jBPM-Cluster\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(JBPMClusterKieServerExtension.class);\n+\n+    private static final Boolean disabled = Boolean.parseBoolean(System.getProperty(KieServerConstants.KIE_JBPM_CLUSTER_SERVER_EXT_DISABLED, \"false\"));\n+    private static final Boolean jbpmDisabled = Boolean.parseBoolean(System.getProperty(KieServerConstants.KIE_JBPM_SERVER_EXT_DISABLED, \"false\"));\n+\n+    private List<Object> services = new ArrayList<Object>();\n+    private boolean initialized = false;\n+\n+    private KieServerRegistry registry;\n+\n+    private ExecutorService jbpmExecutorService;\n+    private ClusterAwareService clusterService;\n+\n+    @Override\n+    public boolean isInitialized() {\n+        return initialized;\n+    }\n+\n+    @Override\n+    public boolean isActive() {\n+        return !disabled && !jbpmDisabled;\n+    }\n+\n+    @Override\n+    public void init(KieServerImpl kieServer, KieServerRegistry registry) {\n+\n+        this.registry = registry;\n+        KieServerExtension jbpmExtension = registry.getServerExtension(\"jBPM\");\n+        if (jbpmExtension == null) {\n+            initialized = false;\n+            logger.warn(\"jBPM extension not found, jBPM Cluster cannot work without jBPM extension, disabling itself\");\n+            return;\n+        }\n+\n+        configureServices();\n+\n+        // this implements fail over for jobs\n+        ExecutorServiceImpl service = (ExecutorServiceImpl) jbpmExecutorService;\n+        ClusteredJobFailOverListener clusteredJobFailOverListener = new ClusteredJobFailOverListener(clusterService, service);\n+        service.addAsyncJobListener(clusteredJobFailOverListener);\n+        clusterService.addClusterListener(clusteredJobFailOverListener);\n+\n+        initialized = true;\n+    }\n+\n+    private void configureServices () {\n+        KieServerExtension jbpmExtension = registry.getServerExtension(\"jBPM\");\n+        List<Object> jbpmServices = jbpmExtension.getServices();\n+        \n+\n+        for (Object object : jbpmServices) {\n+            // in case given service is null (meaning was not configured) continue with next one\n+            if (object == null) {\n+                continue;\n+            }\n+            if (ExecutorService.class.isAssignableFrom(object.getClass())) {\n+                this.jbpmExecutorService = (ExecutorService) object;\n+                continue;\n+            } \n+        }\n+\n+        clusterService = org.kie.api.internal.utils.ServiceRegistry.getService(ClusterAwareService.class);\n+    }\n+    \n+    @Override\n+    public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {\n+        if (!initialized) {\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public void createContainer(String id, KieContainerInstance kieContainerInstance, Map<String, Object> parameters) {\n+        if (!initialized) {\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public void updateContainer(String id, KieContainerInstance kieContainerInstance, Map<String, Object> parameters) {\n+        // recreate configuration for updated container\n+        disposeContainer(id, kieContainerInstance, parameters);\n+        createContainer(id, kieContainerInstance, parameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAzMTMyMw==", "bodyText": "same as above", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r523031323", "createdAt": "2020-11-13T15:40:32Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/JBPMClusterKieServerExtension.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.services.jbpm.cluster;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+\n+import org.jbpm.executor.impl.ExecutorServiceImpl;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.kie.api.cluster.ClusterAwareService;\n+import org.kie.api.executor.ExecutorService;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.Message;\n+import org.kie.server.api.model.Severity;\n+import org.kie.server.services.api.KieContainerInstance;\n+import org.kie.server.services.api.KieServerApplicationComponentsService;\n+import org.kie.server.services.api.KieServerExtension;\n+import org.kie.server.services.api.KieServerRegistry;\n+import org.kie.server.services.api.SupportedTransports;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JBPMClusterKieServerExtension implements KieServerExtension {\n+\n+    public static final String EXTENSION_NAME = \"jBPM-Cluster\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(JBPMClusterKieServerExtension.class);\n+\n+    private static final Boolean disabled = Boolean.parseBoolean(System.getProperty(KieServerConstants.KIE_JBPM_CLUSTER_SERVER_EXT_DISABLED, \"false\"));\n+    private static final Boolean jbpmDisabled = Boolean.parseBoolean(System.getProperty(KieServerConstants.KIE_JBPM_SERVER_EXT_DISABLED, \"false\"));\n+\n+    private List<Object> services = new ArrayList<Object>();\n+    private boolean initialized = false;\n+\n+    private KieServerRegistry registry;\n+\n+    private ExecutorService jbpmExecutorService;\n+    private ClusterAwareService clusterService;\n+\n+    @Override\n+    public boolean isInitialized() {\n+        return initialized;\n+    }\n+\n+    @Override\n+    public boolean isActive() {\n+        return !disabled && !jbpmDisabled;\n+    }\n+\n+    @Override\n+    public void init(KieServerImpl kieServer, KieServerRegistry registry) {\n+\n+        this.registry = registry;\n+        KieServerExtension jbpmExtension = registry.getServerExtension(\"jBPM\");\n+        if (jbpmExtension == null) {\n+            initialized = false;\n+            logger.warn(\"jBPM extension not found, jBPM Cluster cannot work without jBPM extension, disabling itself\");\n+            return;\n+        }\n+\n+        configureServices();\n+\n+        // this implements fail over for jobs\n+        ExecutorServiceImpl service = (ExecutorServiceImpl) jbpmExecutorService;\n+        ClusteredJobFailOverListener clusteredJobFailOverListener = new ClusteredJobFailOverListener(clusterService, service);\n+        service.addAsyncJobListener(clusteredJobFailOverListener);\n+        clusterService.addClusterListener(clusteredJobFailOverListener);\n+\n+        initialized = true;\n+    }\n+\n+    private void configureServices () {\n+        KieServerExtension jbpmExtension = registry.getServerExtension(\"jBPM\");\n+        List<Object> jbpmServices = jbpmExtension.getServices();\n+        \n+\n+        for (Object object : jbpmServices) {\n+            // in case given service is null (meaning was not configured) continue with next one\n+            if (object == null) {\n+                continue;\n+            }\n+            if (ExecutorService.class.isAssignableFrom(object.getClass())) {\n+                this.jbpmExecutorService = (ExecutorService) object;\n+                continue;\n+            } \n+        }\n+\n+        clusterService = org.kie.api.internal.utils.ServiceRegistry.getService(ClusterAwareService.class);\n+    }\n+    \n+    @Override\n+    public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {\n+        if (!initialized) {\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public void createContainer(String id, KieContainerInstance kieContainerInstance, Map<String, Object> parameters) {\n+        if (!initialized) {\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public void updateContainer(String id, KieContainerInstance kieContainerInstance, Map<String, Object> parameters) {\n+        // recreate configuration for updated container\n+        disposeContainer(id, kieContainerInstance, parameters);\n+        createContainer(id, kieContainerInstance, parameters);\n+    }\n+\n+    @Override\n+    public boolean isUpdateContainerAllowed(String id, KieContainerInstance kieContainerInstance, Map<String, Object> parameters) {\n+        return true;\n+    }\n+\n+    @Override\n+    public void disposeContainer(String id, KieContainerInstance kieContainerInstance, Map<String, Object> parameters) {\n+        if (!initialized) {\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAzMjU4OQ==", "bodyText": "not needed\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!initialized) {\n          \n          \n            \n                        return null;\n          \n          \n            \n                    }", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r523032589", "createdAt": "2020-11-13T15:42:34Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/JBPMClusterKieServerExtension.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.services.jbpm.cluster;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+\n+import org.jbpm.executor.impl.ExecutorServiceImpl;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.kie.api.cluster.ClusterAwareService;\n+import org.kie.api.executor.ExecutorService;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.Message;\n+import org.kie.server.api.model.Severity;\n+import org.kie.server.services.api.KieContainerInstance;\n+import org.kie.server.services.api.KieServerApplicationComponentsService;\n+import org.kie.server.services.api.KieServerExtension;\n+import org.kie.server.services.api.KieServerRegistry;\n+import org.kie.server.services.api.SupportedTransports;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JBPMClusterKieServerExtension implements KieServerExtension {\n+\n+    public static final String EXTENSION_NAME = \"jBPM-Cluster\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(JBPMClusterKieServerExtension.class);\n+\n+    private static final Boolean disabled = Boolean.parseBoolean(System.getProperty(KieServerConstants.KIE_JBPM_CLUSTER_SERVER_EXT_DISABLED, \"false\"));\n+    private static final Boolean jbpmDisabled = Boolean.parseBoolean(System.getProperty(KieServerConstants.KIE_JBPM_SERVER_EXT_DISABLED, \"false\"));\n+\n+    private List<Object> services = new ArrayList<Object>();\n+    private boolean initialized = false;\n+\n+    private KieServerRegistry registry;\n+\n+    private ExecutorService jbpmExecutorService;\n+    private ClusterAwareService clusterService;\n+\n+    @Override\n+    public boolean isInitialized() {\n+        return initialized;\n+    }\n+\n+    @Override\n+    public boolean isActive() {\n+        return !disabled && !jbpmDisabled;\n+    }\n+\n+    @Override\n+    public void init(KieServerImpl kieServer, KieServerRegistry registry) {\n+\n+        this.registry = registry;\n+        KieServerExtension jbpmExtension = registry.getServerExtension(\"jBPM\");\n+        if (jbpmExtension == null) {\n+            initialized = false;\n+            logger.warn(\"jBPM extension not found, jBPM Cluster cannot work without jBPM extension, disabling itself\");\n+            return;\n+        }\n+\n+        configureServices();\n+\n+        // this implements fail over for jobs\n+        ExecutorServiceImpl service = (ExecutorServiceImpl) jbpmExecutorService;\n+        ClusteredJobFailOverListener clusteredJobFailOverListener = new ClusteredJobFailOverListener(clusterService, service);\n+        service.addAsyncJobListener(clusteredJobFailOverListener);\n+        clusterService.addClusterListener(clusteredJobFailOverListener);\n+\n+        initialized = true;\n+    }\n+\n+    private void configureServices () {\n+        KieServerExtension jbpmExtension = registry.getServerExtension(\"jBPM\");\n+        List<Object> jbpmServices = jbpmExtension.getServices();\n+        \n+\n+        for (Object object : jbpmServices) {\n+            // in case given service is null (meaning was not configured) continue with next one\n+            if (object == null) {\n+                continue;\n+            }\n+            if (ExecutorService.class.isAssignableFrom(object.getClass())) {\n+                this.jbpmExecutorService = (ExecutorService) object;\n+                continue;\n+            } \n+        }\n+\n+        clusterService = org.kie.api.internal.utils.ServiceRegistry.getService(ClusterAwareService.class);\n+    }\n+    \n+    @Override\n+    public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {\n+        if (!initialized) {\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public void createContainer(String id, KieContainerInstance kieContainerInstance, Map<String, Object> parameters) {\n+        if (!initialized) {\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public void updateContainer(String id, KieContainerInstance kieContainerInstance, Map<String, Object> parameters) {\n+        // recreate configuration for updated container\n+        disposeContainer(id, kieContainerInstance, parameters);\n+        createContainer(id, kieContainerInstance, parameters);\n+    }\n+\n+    @Override\n+    public boolean isUpdateContainerAllowed(String id, KieContainerInstance kieContainerInstance, Map<String, Object> parameters) {\n+        return true;\n+    }\n+\n+    @Override\n+    public void disposeContainer(String id, KieContainerInstance kieContainerInstance, Map<String, Object> parameters) {\n+        if (!initialized) {\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public List<Object> getAppComponents(SupportedTransports type) {\n+        List<Object> appComponentsList = new ArrayList<Object>();\n+        if (!initialized) {\n+            return appComponentsList;\n+        }\n+\n+        services.add(clusterService);\n+        ServiceLoader<KieServerApplicationComponentsService> appComponentsServices = ServiceLoader.load(KieServerApplicationComponentsService.class);\n+\n+        for( KieServerApplicationComponentsService appComponentsService : appComponentsServices ) {\n+            appComponentsList.addAll(appComponentsService.getAppComponents(EXTENSION_NAME, type, services));\n+        }\n+        return appComponentsList;\n+\n+\n+    }\n+\n+    @Override\n+    public <T> T getAppComponents(Class<T> serviceType) {\n+        if (!initialized) {\n+            return null;\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAzNTcxNw==", "bodyText": "we may end up having added the same object clusterService several times in the same list, when method getAppComponents is called several times", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r523035717", "createdAt": "2020-11-13T15:47:23Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/JBPMClusterKieServerExtension.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.services.jbpm.cluster;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+\n+import org.jbpm.executor.impl.ExecutorServiceImpl;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.kie.api.cluster.ClusterAwareService;\n+import org.kie.api.executor.ExecutorService;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.Message;\n+import org.kie.server.api.model.Severity;\n+import org.kie.server.services.api.KieContainerInstance;\n+import org.kie.server.services.api.KieServerApplicationComponentsService;\n+import org.kie.server.services.api.KieServerExtension;\n+import org.kie.server.services.api.KieServerRegistry;\n+import org.kie.server.services.api.SupportedTransports;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JBPMClusterKieServerExtension implements KieServerExtension {\n+\n+    public static final String EXTENSION_NAME = \"jBPM-Cluster\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(JBPMClusterKieServerExtension.class);\n+\n+    private static final Boolean disabled = Boolean.parseBoolean(System.getProperty(KieServerConstants.KIE_JBPM_CLUSTER_SERVER_EXT_DISABLED, \"false\"));\n+    private static final Boolean jbpmDisabled = Boolean.parseBoolean(System.getProperty(KieServerConstants.KIE_JBPM_SERVER_EXT_DISABLED, \"false\"));\n+\n+    private List<Object> services = new ArrayList<Object>();\n+    private boolean initialized = false;\n+\n+    private KieServerRegistry registry;\n+\n+    private ExecutorService jbpmExecutorService;\n+    private ClusterAwareService clusterService;\n+\n+    @Override\n+    public boolean isInitialized() {\n+        return initialized;\n+    }\n+\n+    @Override\n+    public boolean isActive() {\n+        return !disabled && !jbpmDisabled;\n+    }\n+\n+    @Override\n+    public void init(KieServerImpl kieServer, KieServerRegistry registry) {\n+\n+        this.registry = registry;\n+        KieServerExtension jbpmExtension = registry.getServerExtension(\"jBPM\");\n+        if (jbpmExtension == null) {\n+            initialized = false;\n+            logger.warn(\"jBPM extension not found, jBPM Cluster cannot work without jBPM extension, disabling itself\");\n+            return;\n+        }\n+\n+        configureServices();\n+\n+        // this implements fail over for jobs\n+        ExecutorServiceImpl service = (ExecutorServiceImpl) jbpmExecutorService;\n+        ClusteredJobFailOverListener clusteredJobFailOverListener = new ClusteredJobFailOverListener(clusterService, service);\n+        service.addAsyncJobListener(clusteredJobFailOverListener);\n+        clusterService.addClusterListener(clusteredJobFailOverListener);\n+\n+        initialized = true;\n+    }\n+\n+    private void configureServices () {\n+        KieServerExtension jbpmExtension = registry.getServerExtension(\"jBPM\");\n+        List<Object> jbpmServices = jbpmExtension.getServices();\n+        \n+\n+        for (Object object : jbpmServices) {\n+            // in case given service is null (meaning was not configured) continue with next one\n+            if (object == null) {\n+                continue;\n+            }\n+            if (ExecutorService.class.isAssignableFrom(object.getClass())) {\n+                this.jbpmExecutorService = (ExecutorService) object;\n+                continue;\n+            } \n+        }\n+\n+        clusterService = org.kie.api.internal.utils.ServiceRegistry.getService(ClusterAwareService.class);\n+    }\n+    \n+    @Override\n+    public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {\n+        if (!initialized) {\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public void createContainer(String id, KieContainerInstance kieContainerInstance, Map<String, Object> parameters) {\n+        if (!initialized) {\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public void updateContainer(String id, KieContainerInstance kieContainerInstance, Map<String, Object> parameters) {\n+        // recreate configuration for updated container\n+        disposeContainer(id, kieContainerInstance, parameters);\n+        createContainer(id, kieContainerInstance, parameters);\n+    }\n+\n+    @Override\n+    public boolean isUpdateContainerAllowed(String id, KieContainerInstance kieContainerInstance, Map<String, Object> parameters) {\n+        return true;\n+    }\n+\n+    @Override\n+    public void disposeContainer(String id, KieContainerInstance kieContainerInstance, Map<String, Object> parameters) {\n+        if (!initialized) {\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public List<Object> getAppComponents(SupportedTransports type) {\n+        List<Object> appComponentsList = new ArrayList<Object>();\n+        if (!initialized) {\n+            return appComponentsList;\n+        }\n+\n+        services.add(clusterService);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd"}, "originalPosition": 147}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4872bb018b6c6d3493e38edaa46a1b66777a73fd", "author": {"user": {"login": "elguardian", "name": "Enrique Gonz\u00e1lez Mart\u00ednez"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/4872bb018b6c6d3493e38edaa46a1b66777a73fd", "committedDate": "2020-11-12T11:50:13Z", "message": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection"}, "afterCommit": {"oid": "504732f3d74a794ec2d7ff10579f3241825f39a8", "author": {"user": {"login": "elguardian", "name": "Enrique Gonz\u00e1lez Mart\u00ednez"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/504732f3d74a794ec2d7ff10579f3241825f39a8", "committedDate": "2020-11-24T08:12:51Z", "message": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "504732f3d74a794ec2d7ff10579f3241825f39a8", "author": {"user": {"login": "elguardian", "name": "Enrique Gonz\u00e1lez Mart\u00ednez"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/504732f3d74a794ec2d7ff10579f3241825f39a8", "committedDate": "2020-11-24T08:12:51Z", "message": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection"}, "afterCommit": {"oid": "ea239e61cd51a32f881c2490622b3773c373d06f", "author": {"user": {"login": "elguardian", "name": "Enrique Gonz\u00e1lez Mart\u00ednez"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/ea239e61cd51a32f881c2490622b3773c373d06f", "committedDate": "2020-11-24T08:52:51Z", "message": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea239e61cd51a32f881c2490622b3773c373d06f", "author": {"user": {"login": "elguardian", "name": "Enrique Gonz\u00e1lez Mart\u00ednez"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/ea239e61cd51a32f881c2490622b3773c373d06f", "committedDate": "2020-11-24T08:52:51Z", "message": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection"}, "afterCommit": {"oid": "1edd83c4e2e2ed313ed9dc2bfccb63952c95a64f", "author": {"user": {"login": "elguardian", "name": "Enrique Gonz\u00e1lez Mart\u00ednez"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/1edd83c4e2e2ed313ed9dc2bfccb63952c95a64f", "committedDate": "2020-11-24T08:54:36Z", "message": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MzQ2MzAx", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#pullrequestreview-537346301", "createdAt": "2020-11-24T10:23:17Z", "commit": {"oid": "1edd83c4e2e2ed313ed9dc2bfccb63952c95a64f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1edd83c4e2e2ed313ed9dc2bfccb63952c95a64f", "author": {"user": {"login": "elguardian", "name": "Enrique Gonz\u00e1lez Mart\u00ednez"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/1edd83c4e2e2ed313ed9dc2bfccb63952c95a64f", "committedDate": "2020-11-24T08:54:36Z", "message": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection"}, "afterCommit": {"oid": "7de3160f1bfbbe763afe9ae5043b72f1bf303e3a", "author": {"user": {"login": "elguardian", "name": "Enrique Gonz\u00e1lez Mart\u00ednez"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/7de3160f1bfbbe763afe9ae5043b72f1bf303e3a", "committedDate": "2020-11-24T12:35:48Z", "message": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7de3160f1bfbbe763afe9ae5043b72f1bf303e3a", "author": {"user": {"login": "elguardian", "name": "Enrique Gonz\u00e1lez Mart\u00ednez"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/7de3160f1bfbbe763afe9ae5043b72f1bf303e3a", "committedDate": "2020-11-24T12:35:48Z", "message": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection"}, "afterCommit": {"oid": "6a6a66e8a6d234b5fe10f81ac48708c8dd5f84b5", "author": {"user": {"login": "elguardian", "name": "Enrique Gonz\u00e1lez Mart\u00ednez"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/6a6a66e8a6d234b5fe10f81ac48708c8dd5f84b5", "committedDate": "2020-11-30T10:15:42Z", "message": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6a6a66e8a6d234b5fe10f81ac48708c8dd5f84b5", "author": {"user": {"login": "elguardian", "name": "Enrique Gonz\u00e1lez Mart\u00ednez"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/6a6a66e8a6d234b5fe10f81ac48708c8dd5f84b5", "committedDate": "2020-11-30T10:15:42Z", "message": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection"}, "afterCommit": {"oid": "b82b2f8e104aaa212cdcc8c51a45cb063e8f61ee", "author": {"user": {"login": "elguardian", "name": "Enrique Gonz\u00e1lez Mart\u00ednez"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/b82b2f8e104aaa212cdcc8c51a45cb063e8f61ee", "committedDate": "2020-11-30T10:18:25Z", "message": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b82b2f8e104aaa212cdcc8c51a45cb063e8f61ee", "author": {"user": {"login": "elguardian", "name": "Enrique Gonz\u00e1lez Mart\u00ednez"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/b82b2f8e104aaa212cdcc8c51a45cb063e8f61ee", "committedDate": "2020-11-30T10:18:25Z", "message": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection"}, "afterCommit": {"oid": "cc753277f380fcbe9a1202a80f7e025da1e096ea", "author": {"user": {"login": "elguardian", "name": "Enrique Gonz\u00e1lez Mart\u00ednez"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/cc753277f380fcbe9a1202a80f7e025da1e096ea", "committedDate": "2020-11-30T10:41:02Z", "message": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc753277f380fcbe9a1202a80f7e025da1e096ea", "author": {"user": {"login": "elguardian", "name": "Enrique Gonz\u00e1lez Mart\u00ednez"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/cc753277f380fcbe9a1202a80f7e025da1e096ea", "committedDate": "2020-11-30T10:41:02Z", "message": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection"}, "afterCommit": {"oid": "488bd38d83708957c0e7939bdc03039b3f8e6786", "author": {"user": {"login": "elguardian", "name": "Enrique Gonz\u00e1lez Mart\u00ednez"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/488bd38d83708957c0e7939bdc03039b3f8e6786", "committedDate": "2020-11-30T10:51:37Z", "message": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNzY0Njg0", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#pullrequestreview-541764684", "createdAt": "2020-12-01T10:35:51Z", "commit": {"oid": "488bd38d83708957c0e7939bdc03039b3f8e6786"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMDozNTo1MVrOH8mG8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMTozNDoxNVrOH8oidw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMwMDk3OQ==", "bodyText": "please upgrade to 7.48.0-SNAPSHOT\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    <version>7.47.0-SNAPSHOT</version>\n          \n          \n            \n                    <version>7.48.0-SNAPSHOT</version>", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r533300979", "createdAt": "2020-12-01T10:35:51Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/pom.xml", "diffHunk": "@@ -0,0 +1,69 @@\n+<?xml version=\"1.0\"?>\n+<project\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"\n+    xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+\n+    <parent>\n+        <groupId>org.kie.server</groupId>\n+        <artifactId>kie-server-services</artifactId>\n+        <version>7.47.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "488bd38d83708957c0e7939bdc03039b3f8e6786"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyNTg5MQ==", "bodyText": "typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void nodeJoin(CacheEntryCreatedEvent<Address, ClusterNode> event) {\n          \n          \n            \n                public void nodeJoined(CacheEntryCreatedEvent<Address, ClusterNode> event) {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r533325891", "createdAt": "2020-12-01T11:07:52Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/InfinispanClusterAwareService.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.jbpm.cluster;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.CacheCollection;\n+import org.infinispan.CacheSet;\n+import org.infinispan.commons.util.CloseableIterator;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.infinispan.notifications.Listener;\n+import org.infinispan.notifications.Listener.Observation;\n+import org.infinispan.notifications.cachelistener.annotation.CacheEntryCreated;\n+import org.infinispan.notifications.cachelistener.annotation.CacheEntryRemoved;\n+import org.infinispan.notifications.cachelistener.event.CacheEntryCreatedEvent;\n+import org.infinispan.notifications.cachelistener.event.CacheEntryRemovedEvent;\n+import org.infinispan.notifications.cachemanagerlistener.annotation.ViewChanged;\n+import org.infinispan.notifications.cachemanagerlistener.event.Event;\n+import org.infinispan.notifications.cachemanagerlistener.event.ViewChangedEvent;\n+import org.infinispan.remoting.transport.Address;\n+import org.kie.api.cluster.ClusterAwareService;\n+import org.kie.api.cluster.ClusterListener;\n+import org.kie.api.cluster.ClusterNode;\n+import org.kie.server.api.KieServerConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.stream.Collectors.toList;\n+\n+@Listener(observation = Observation.POST)\n+public class InfinispanClusterAwareService implements ClusterAwareService {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(InfinispanClusterAwareService.class);\n+\n+    private List<ClusterListener> listeners;\n+    private EmbeddedCacheManager cacheManager;\n+\n+    private String kieServerId;\n+    private String kieServerLocation;\n+\n+    public InfinispanClusterAwareService(String kieServerId, String kieServerLocation) {\n+        this.kieServerId = kieServerId;\n+        this.kieServerLocation = kieServerLocation;\n+        listeners = new ArrayList<>();\n+    }\n+\n+    public InfinispanClusterAwareService() {\n+        this(System.getProperty(KieServerConstants.KIE_SERVER_ID), System.getProperty(KieServerConstants.KIE_SERVER_LOCATION));\n+    }\n+\n+    \n+    @Override\n+    public ClusterNode getThisNode() {\n+        return new ClusterNode(kieServerId, kieServerLocation);\n+    }\n+\n+    public void init(EmbeddedCacheManager cacheManager) {\n+        this.cacheManager = cacheManager;\n+        cacheManager.addListener(this);\n+        Cache<Address, ClusterNode> nodes = cacheManager.<Address, ClusterNode> getCache(CLUSTER_NODES_KEY);\n+        nodes.addListener(this);\n+        logger.info(\"This node is about to join the jBPM cluster {}-{}\", kieServerId, kieServerLocation);\n+        nodes.put(cacheManager.getAddress(), getThisNode());\n+\n+    }\n+\n+    @CacheEntryCreated\n+    public void nodeJoin(CacheEntryCreatedEvent<Address, ClusterNode> event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "488bd38d83708957c0e7939bdc03039b3f8e6786"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyNzQwNA==", "bodyText": "currently we're only updating those members who left the cluster - but if I'm not wrong, this method may be called when new members joined the cluster also. Shouldn't we also add those in the cache?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r533327404", "createdAt": "2020-12-01T11:10:33Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/InfinispanClusterAwareService.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.jbpm.cluster;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.CacheCollection;\n+import org.infinispan.CacheSet;\n+import org.infinispan.commons.util.CloseableIterator;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.infinispan.notifications.Listener;\n+import org.infinispan.notifications.Listener.Observation;\n+import org.infinispan.notifications.cachelistener.annotation.CacheEntryCreated;\n+import org.infinispan.notifications.cachelistener.annotation.CacheEntryRemoved;\n+import org.infinispan.notifications.cachelistener.event.CacheEntryCreatedEvent;\n+import org.infinispan.notifications.cachelistener.event.CacheEntryRemovedEvent;\n+import org.infinispan.notifications.cachemanagerlistener.annotation.ViewChanged;\n+import org.infinispan.notifications.cachemanagerlistener.event.Event;\n+import org.infinispan.notifications.cachemanagerlistener.event.ViewChangedEvent;\n+import org.infinispan.remoting.transport.Address;\n+import org.kie.api.cluster.ClusterAwareService;\n+import org.kie.api.cluster.ClusterListener;\n+import org.kie.api.cluster.ClusterNode;\n+import org.kie.server.api.KieServerConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.stream.Collectors.toList;\n+\n+@Listener(observation = Observation.POST)\n+public class InfinispanClusterAwareService implements ClusterAwareService {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(InfinispanClusterAwareService.class);\n+\n+    private List<ClusterListener> listeners;\n+    private EmbeddedCacheManager cacheManager;\n+\n+    private String kieServerId;\n+    private String kieServerLocation;\n+\n+    public InfinispanClusterAwareService(String kieServerId, String kieServerLocation) {\n+        this.kieServerId = kieServerId;\n+        this.kieServerLocation = kieServerLocation;\n+        listeners = new ArrayList<>();\n+    }\n+\n+    public InfinispanClusterAwareService() {\n+        this(System.getProperty(KieServerConstants.KIE_SERVER_ID), System.getProperty(KieServerConstants.KIE_SERVER_LOCATION));\n+    }\n+\n+    \n+    @Override\n+    public ClusterNode getThisNode() {\n+        return new ClusterNode(kieServerId, kieServerLocation);\n+    }\n+\n+    public void init(EmbeddedCacheManager cacheManager) {\n+        this.cacheManager = cacheManager;\n+        cacheManager.addListener(this);\n+        Cache<Address, ClusterNode> nodes = cacheManager.<Address, ClusterNode> getCache(CLUSTER_NODES_KEY);\n+        nodes.addListener(this);\n+        logger.info(\"This node is about to join the jBPM cluster {}-{}\", kieServerId, kieServerLocation);\n+        nodes.put(cacheManager.getAddress(), getThisNode());\n+\n+    }\n+\n+    @CacheEntryCreated\n+    public void nodeJoin(CacheEntryCreatedEvent<Address, ClusterNode> event) {\n+        if(event.isPre()) {\n+            return;\n+        }\n+        logger.info(\"jBPM cluster member joined {}\", event.getValue());\n+        synchronized (listeners) {\n+            listeners.forEach(listener -> listener.nodeJoined(event.getValue()));\n+        }\n+    }\n+\n+    @CacheEntryRemoved\n+    public void nodeLeft(CacheEntryRemovedEvent<Address, ClusterNode> event) {\n+        if(event.isPre()) {\n+            return;\n+        }\n+        logger.info(\"jBPM cluster member left {}\", event.getOldValue());\n+        synchronized (listeners) {\n+            listeners.forEach(listener -> listener.nodeLeft(event.getOldValue()));\n+        }\n+    }\n+\n+    @ViewChanged\n+    public void viewChanged(ViewChangedEvent event) {\n+        logger.info(\"jBPM cluster view changed. Current active nodes: {}\", event.getNewMembers());\n+        if (Event.Type.VIEW_CHANGED.equals(event.getType())) {\n+            List<Address> changedAddress = event.getNewMembers();\n+            Cache<Address, ClusterNode> nodes = cacheManager.<Address, ClusterNode> getCache(CLUSTER_NODES_KEY);\n+            CacheSet<Address> currentView = cacheManager.<Address, ClusterNode> getCache(CLUSTER_NODES_KEY).keySet();\n+\n+            List<Address> membersLeft = new ArrayList<>();\n+            Iterator<Address> addresses = currentView.iterator();\n+            while(addresses.hasNext()) {\n+                Address address = addresses.next();\n+                if(!changedAddress.contains(address)) {\n+                    membersLeft.add(address);\n+                }\n+            }\n+\n+\n+            // forcefully removed\n+            // address change we remove the nodes from the cache\n+            membersLeft.forEach(node -> nodes.remove(node));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "488bd38d83708957c0e7939bdc03039b3f8e6786"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMzMDU5Mg==", "bodyText": "can be replaced with method reference\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return values.stream().flatMap(e -> e.stream()).collect(toList());\n          \n          \n            \n                    return values.stream().flatMap(Collection::stream).collect(toList());", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r533330592", "createdAt": "2020-12-01T11:16:03Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/main/java/org/kie/server/services/jbpm/cluster/InfinispanClusterAwareService.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.jbpm.cluster;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.CacheCollection;\n+import org.infinispan.CacheSet;\n+import org.infinispan.commons.util.CloseableIterator;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.infinispan.notifications.Listener;\n+import org.infinispan.notifications.Listener.Observation;\n+import org.infinispan.notifications.cachelistener.annotation.CacheEntryCreated;\n+import org.infinispan.notifications.cachelistener.annotation.CacheEntryRemoved;\n+import org.infinispan.notifications.cachelistener.event.CacheEntryCreatedEvent;\n+import org.infinispan.notifications.cachelistener.event.CacheEntryRemovedEvent;\n+import org.infinispan.notifications.cachemanagerlistener.annotation.ViewChanged;\n+import org.infinispan.notifications.cachemanagerlistener.event.Event;\n+import org.infinispan.notifications.cachemanagerlistener.event.ViewChangedEvent;\n+import org.infinispan.remoting.transport.Address;\n+import org.kie.api.cluster.ClusterAwareService;\n+import org.kie.api.cluster.ClusterListener;\n+import org.kie.api.cluster.ClusterNode;\n+import org.kie.server.api.KieServerConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.stream.Collectors.toList;\n+\n+@Listener(observation = Observation.POST)\n+public class InfinispanClusterAwareService implements ClusterAwareService {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(InfinispanClusterAwareService.class);\n+\n+    private List<ClusterListener> listeners;\n+    private EmbeddedCacheManager cacheManager;\n+\n+    private String kieServerId;\n+    private String kieServerLocation;\n+\n+    public InfinispanClusterAwareService(String kieServerId, String kieServerLocation) {\n+        this.kieServerId = kieServerId;\n+        this.kieServerLocation = kieServerLocation;\n+        listeners = new ArrayList<>();\n+    }\n+\n+    public InfinispanClusterAwareService() {\n+        this(System.getProperty(KieServerConstants.KIE_SERVER_ID), System.getProperty(KieServerConstants.KIE_SERVER_LOCATION));\n+    }\n+\n+    \n+    @Override\n+    public ClusterNode getThisNode() {\n+        return new ClusterNode(kieServerId, kieServerLocation);\n+    }\n+\n+    public void init(EmbeddedCacheManager cacheManager) {\n+        this.cacheManager = cacheManager;\n+        cacheManager.addListener(this);\n+        Cache<Address, ClusterNode> nodes = cacheManager.<Address, ClusterNode> getCache(CLUSTER_NODES_KEY);\n+        nodes.addListener(this);\n+        logger.info(\"This node is about to join the jBPM cluster {}-{}\", kieServerId, kieServerLocation);\n+        nodes.put(cacheManager.getAddress(), getThisNode());\n+\n+    }\n+\n+    @CacheEntryCreated\n+    public void nodeJoin(CacheEntryCreatedEvent<Address, ClusterNode> event) {\n+        if(event.isPre()) {\n+            return;\n+        }\n+        logger.info(\"jBPM cluster member joined {}\", event.getValue());\n+        synchronized (listeners) {\n+            listeners.forEach(listener -> listener.nodeJoined(event.getValue()));\n+        }\n+    }\n+\n+    @CacheEntryRemoved\n+    public void nodeLeft(CacheEntryRemovedEvent<Address, ClusterNode> event) {\n+        if(event.isPre()) {\n+            return;\n+        }\n+        logger.info(\"jBPM cluster member left {}\", event.getOldValue());\n+        synchronized (listeners) {\n+            listeners.forEach(listener -> listener.nodeLeft(event.getOldValue()));\n+        }\n+    }\n+\n+    @ViewChanged\n+    public void viewChanged(ViewChangedEvent event) {\n+        logger.info(\"jBPM cluster view changed. Current active nodes: {}\", event.getNewMembers());\n+        if (Event.Type.VIEW_CHANGED.equals(event.getType())) {\n+            List<Address> changedAddress = event.getNewMembers();\n+            Cache<Address, ClusterNode> nodes = cacheManager.<Address, ClusterNode> getCache(CLUSTER_NODES_KEY);\n+            CacheSet<Address> currentView = cacheManager.<Address, ClusterNode> getCache(CLUSTER_NODES_KEY).keySet();\n+\n+            List<Address> membersLeft = new ArrayList<>();\n+            Iterator<Address> addresses = currentView.iterator();\n+            while(addresses.hasNext()) {\n+                Address address = addresses.next();\n+                if(!changedAddress.contains(address)) {\n+                    membersLeft.add(address);\n+                }\n+            }\n+\n+\n+            // forcefully removed\n+            // address change we remove the nodes from the cache\n+            membersLeft.forEach(node -> nodes.remove(node));\n+        }\n+    }\n+\n+    @Override\n+    public boolean isCoordinator() {\n+        return cacheManager.isCoordinator();\n+    }\n+\n+    @Override\n+    public Collection<ClusterNode> getActiveClusterNodes() {\n+        return cacheManager.<Address, ClusterNode> getCache(CLUSTER_NODES_KEY).values();\n+    }\n+\n+    @Override\n+    public <T> void removeData(String key, String partition, T value) {\n+        if (!cacheManager.cacheExists(key)) {\n+            return;\n+        }\n+        Cache<String, List<T>> cache = cacheManager.<String, List<T>> getCache(key);\n+        List<T> values = cache.get(partition);\n+        if(values == null) {\n+            return;\n+        }\n+        values.remove(value);\n+        cache.put(partition, values);\n+    }\n+\n+    @Override\n+    public <T> void addData(String key, String partition, T value) {\n+        if (!cacheManager.cacheExists(key)) {\n+            return;\n+        }\n+        Cache<String, List<T>> cache = cacheManager.<String, List<T>> getCache(key);\n+        List<T> values = cache.get(partition);\n+        if(values == null) {\n+            values = new ArrayList<>();\n+        }\n+        values.add(value);\n+        cache.put(partition, values);\n+    }\n+\n+    @Override\n+    public <T> List<T> getData(String key) {\n+        if (!cacheManager.cacheExists(key)) {\n+            return emptyList();\n+        }\n+        CacheCollection<List<T>> values = cacheManager.<String, List<T>> getCache(key).values();\n+        return values.stream().flatMap(e -> e.stream()).collect(toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "488bd38d83708957c0e7939bdc03039b3f8e6786"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMzOTcwOA==", "bodyText": "Please, change log4j.properties to a logback-test.xml file instead. Mainly to keep consistency across test cases in all projects.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r533339708", "createdAt": "2020-12-01T11:32:10Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/test/resources/log4j.properties", "diffHunk": "@@ -0,0 +1,6 @@\n+log4j.rootLogger=INFO, STDOUT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "488bd38d83708957c0e7939bdc03039b3f8e6786"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM0MDc5MQ==", "bodyText": "RH header is missing", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r533340791", "createdAt": "2020-12-01T11:34:15Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/test/java/org/kie/server/services/jbpm/cluster/InfinispanClusterAwareServiceTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.kie.server.services.jbpm.cluster;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "488bd38d83708957c0e7939bdc03039b3f8e6786"}, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "488bd38d83708957c0e7939bdc03039b3f8e6786", "author": {"user": {"login": "elguardian", "name": "Enrique Gonz\u00e1lez Mart\u00ednez"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/488bd38d83708957c0e7939bdc03039b3f8e6786", "committedDate": "2020-11-30T10:51:37Z", "message": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection"}, "afterCommit": {"oid": "92fe066c118a793e897694b377fc3a856bcd2c3c", "author": {"user": {"login": "elguardian", "name": "Enrique Gonz\u00e1lez Mart\u00ednez"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/92fe066c118a793e897694b377fc3a856bcd2c3c", "committedDate": "2020-12-02T11:04:42Z", "message": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0OTI4MTc4", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#pullrequestreview-544928178", "createdAt": "2020-12-04T12:46:59Z", "commit": {"oid": "92fe066c118a793e897694b377fc3a856bcd2c3c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMjo0Njo1OVrOH_Pajw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMjo0NzowNVrOH_Pazg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA3NDg5NQ==", "bodyText": "same as above", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r536074895", "createdAt": "2020-12-04T12:46:59Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/test/java/org/kie/server/services/jbpm/cluster/InfinispanClusterAwareServiceTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.jbpm.cluster;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.infinispan.manager.DefaultCacheManager;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.kie.api.cluster.ClusterListener;\n+import org.kie.api.cluster.ClusterNode;\n+\n+\n+public class InfinispanClusterAwareServiceTest {\n+\n+    \n+    public static class ClusterTrackerListener implements ClusterListener {\n+\n+        private AtomicInteger joined = new AtomicInteger();\n+        private AtomicInteger left = new AtomicInteger();\n+\n+        @Override\n+        public void nodeJoined(ClusterNode node) {\n+            joined.incrementAndGet();\n+            System.out.println(\"JOINED \" + node);\n+        }\n+\n+        @Override\n+        public void nodeLeft(ClusterNode node) {\n+            left.incrementAndGet();\n+            System.out.println(\"LEFT \" + node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92fe066c118a793e897694b377fc3a856bcd2c3c"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA3NDk1OA==", "bodyText": "please, remove and try to use a logger instead", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#discussion_r536074958", "createdAt": "2020-12-04T12:47:05Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm-cluster/src/test/java/org/kie/server/services/jbpm/cluster/InfinispanClusterAwareServiceTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.jbpm.cluster;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.infinispan.manager.DefaultCacheManager;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.kie.api.cluster.ClusterListener;\n+import org.kie.api.cluster.ClusterNode;\n+\n+\n+public class InfinispanClusterAwareServiceTest {\n+\n+    \n+    public static class ClusterTrackerListener implements ClusterListener {\n+\n+        private AtomicInteger joined = new AtomicInteger();\n+        private AtomicInteger left = new AtomicInteger();\n+\n+        @Override\n+        public void nodeJoined(ClusterNode node) {\n+            joined.incrementAndGet();\n+            System.out.println(\"JOINED \" + node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92fe066c118a793e897694b377fc3a856bcd2c3c"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5e2ea76ab124a8c34f6fccd1d093c28edd13af0", "author": {"user": {"login": "elguardian", "name": "Enrique Gonz\u00e1lez Mart\u00ednez"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/e5e2ea76ab124a8c34f6fccd1d093c28edd13af0", "committedDate": "2020-12-07T13:31:40Z", "message": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "92fe066c118a793e897694b377fc3a856bcd2c3c", "author": {"user": {"login": "elguardian", "name": "Enrique Gonz\u00e1lez Mart\u00ednez"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/92fe066c118a793e897694b377fc3a856bcd2c3c", "committedDate": "2020-12-02T11:04:42Z", "message": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection"}, "afterCommit": {"oid": "e5e2ea76ab124a8c34f6fccd1d093c28edd13af0", "author": {"user": {"login": "elguardian", "name": "Enrique Gonz\u00e1lez Mart\u00ednez"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/e5e2ea76ab124a8c34f6fccd1d093c28edd13af0", "committedDate": "2020-12-07T13:31:40Z", "message": "[JBPM-9399] Add support to jBPM and runtime/cluster environments detection"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2Mjg2MTA2", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2310#pullrequestreview-546286106", "createdAt": "2020-12-07T15:56:03Z", "commit": {"oid": "e5e2ea76ab124a8c34f6fccd1d093c28edd13af0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1242, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}