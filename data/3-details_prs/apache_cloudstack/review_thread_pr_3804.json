{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMTIyMDEx", "number": 3804, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzo0MDozM1rODitHHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNlQxODowOTo0MFrOGDFFFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzE3Mjc3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/api/ApiResponseHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzo0MDozM1rOFuGZXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDozNToyMFrOFv2-8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4MzYxNQ==", "bodyText": "@ravening the rest is ok for me, except this line.", "url": "https://github.com/apache/cloudstack/pull/3804#discussion_r383883615", "createdAt": "2020-02-25T13:40:33Z", "author": {"login": "weizhouapache"}, "path": "server/src/main/java/com/cloud/api/ApiResponseHelper.java", "diffHunk": "@@ -2187,13 +2188,75 @@ public NetworkResponse createNetworkResponse(ResponseView view, Network network)\n                         CapabilityResponse capabilityResponse = new CapabilityResponse();\n                         String capabilityValue = ser_cap_entries.getValue();\n                         capabilityResponse.setName(capability.getName());\n-                        capabilityResponse.setValue(capabilityValue);\n+                        if (Service.Lb == service && capability.getName().equals(Capability.SupportedLBIsolation.getName())) {\n+                            // capabilityResponse.setValue(networkOffering.getDedicatedLB() ? \"dedicated\" : \"shared\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af4ef9f5d70d7d9c3725b7524960e092ee7136e9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyODI0MA==", "bodyText": "@weizhouapache fixed it.", "url": "https://github.com/apache/cloudstack/pull/3804#discussion_r385728240", "createdAt": "2020-02-28T14:35:20Z", "author": {"login": "ravening"}, "path": "server/src/main/java/com/cloud/api/ApiResponseHelper.java", "diffHunk": "@@ -2187,13 +2188,75 @@ public NetworkResponse createNetworkResponse(ResponseView view, Network network)\n                         CapabilityResponse capabilityResponse = new CapabilityResponse();\n                         String capabilityValue = ser_cap_entries.getValue();\n                         capabilityResponse.setName(capability.getName());\n-                        capabilityResponse.setValue(capabilityValue);\n+                        if (Service.Lb == service && capability.getName().equals(Capability.SupportedLBIsolation.getName())) {\n+                            // capabilityResponse.setValue(networkOffering.getDedicatedLB() ? \"dedicated\" : \"shared\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4MzYxNQ=="}, "originalCommit": {"oid": "af4ef9f5d70d7d9c3725b7524960e092ee7136e9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA1ODc4NDgzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/api/ApiResponseHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNlQxODowMjo0OFrOJiWwfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0xOFQxMzoyOTowM1rOKTN2FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDAwNDIyMA==", "bodyText": "I think that it is possible to extract most of the \"duplicated\" lines by creating a method that returns a CapabilityResponse based on name, value, and canChoose.", "url": "https://github.com/apache/cloudstack/pull/3804#discussion_r640004220", "createdAt": "2021-05-26T18:02:48Z", "author": {"login": "GabrielBrascher"}, "path": "server/src/main/java/com/cloud/api/ApiResponseHelper.java", "diffHunk": "@@ -2213,13 +2214,75 @@ public NetworkResponse createNetworkResponse(ResponseView view, Network network)\n                         CapabilityResponse capabilityResponse = new CapabilityResponse();\n                         String capabilityValue = ser_cap_entries.getValue();\n                         capabilityResponse.setName(capability.getName());\n-                        capabilityResponse.setValue(capabilityValue);\n+                        if (Service.Lb == service && capability.getName().equals(Capability.SupportedLBIsolation.getName())) {\n+                             capabilityResponse.setValue(networkOffering.isDedicatedLB() ? \"dedicated\" : \"shared\");\n+                        } else {\n+                            capabilityResponse.setValue(capabilityValue);\n+                        }\n+                        if (capability.getName().equals(Capability.SupportedLBIsolation.getName()) || capability.getName().equals(Capability.SupportedSourceNatTypes.getName())\n+                                || capability.getName().equals(Capability.RedundantRouter.getName())) {\n+                            capabilityResponse.setCanChoose(true);\n+                        } else {\n+                            capabilityResponse.setCanChoose(false);\n+                        }\n                         capabilityResponse.setObjectName(\"capability\");\n                         capabilityResponses.add(capabilityResponse);\n                     }\n-                    serviceResponse.setCapabilities(capabilityResponses);\n                 }\n \n+                if (Service.SourceNat == service) {\n+                    // overwrite\n+                    capabilityResponses = new ArrayList<CapabilityResponse>();\n+                    CapabilityResponse sharedSourceNat = new CapabilityResponse();\n+                    sharedSourceNat.setName(Capability.SupportedSourceNatTypes.getName());\n+                    sharedSourceNat.setValue(networkOffering.isSharedSourceNat() ? \"perzone\" : \"peraccount\");\n+                    sharedSourceNat.setCanChoose(true);\n+                    capabilityResponses.add(sharedSourceNat);\n+\n+                    CapabilityResponse redundantRouter = new CapabilityResponse();\n+                    redundantRouter.setName(Capability.RedundantRouter.getName());\n+                    redundantRouter.setValue(networkOffering.isRedundantRouter() ? \"true\" : \"false\");\n+                    redundantRouter.setCanChoose(true);\n+                    capabilityResponses.add(redundantRouter);\n+\n+                } else if (service == Service.StaticNat) {\n+                    CapabilityResponse eIp = new CapabilityResponse();\n+                    eIp.setName(Capability.ElasticIp.getName());\n+                    eIp.setValue(networkOffering.isElasticIp() ? \"true\" : \"false\");\n+                    eIp.setCanChoose(false);\n+                    capabilityResponses.add(eIp);\n+\n+                    CapabilityResponse associatePublicIp = new CapabilityResponse();\n+                    associatePublicIp.setName(Capability.AssociatePublicIP.getName());\n+                    associatePublicIp.setValue(networkOffering.isAssociatePublicIP() ? \"true\" : \"false\");\n+                    associatePublicIp.setCanChoose(false);\n+                    capabilityResponses.add(associatePublicIp);\n+\n+                } else if (Service.Lb == service) {\n+                    CapabilityResponse eLb = new CapabilityResponse();\n+                    eLb.setName(Capability.ElasticLb.getName());\n+                    eLb.setValue(networkOffering.isElasticLb() ? \"true\" : \"false\");\n+                    eLb.setCanChoose(false);\n+                    capabilityResponses.add(eLb);\n+\n+                    CapabilityResponse inline = new CapabilityResponse();\n+                    inline.setName(Capability.InlineMode.getName());\n+                    inline.setValue(networkOffering.isInline() ? \"true\" : \"false\");\n+                    inline.setCanChoose(false);\n+                    capabilityResponses.add(inline);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b58eea2f12b75f96de731d173ef8e573c408ee"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MTIzODQyMQ==", "bodyText": "@GabrielBrascher  please review it again. made some changes to the code", "url": "https://github.com/apache/cloudstack/pull/3804#discussion_r691238421", "createdAt": "2021-08-18T13:29:03Z", "author": {"login": "ravening"}, "path": "server/src/main/java/com/cloud/api/ApiResponseHelper.java", "diffHunk": "@@ -2213,13 +2214,75 @@ public NetworkResponse createNetworkResponse(ResponseView view, Network network)\n                         CapabilityResponse capabilityResponse = new CapabilityResponse();\n                         String capabilityValue = ser_cap_entries.getValue();\n                         capabilityResponse.setName(capability.getName());\n-                        capabilityResponse.setValue(capabilityValue);\n+                        if (Service.Lb == service && capability.getName().equals(Capability.SupportedLBIsolation.getName())) {\n+                             capabilityResponse.setValue(networkOffering.isDedicatedLB() ? \"dedicated\" : \"shared\");\n+                        } else {\n+                            capabilityResponse.setValue(capabilityValue);\n+                        }\n+                        if (capability.getName().equals(Capability.SupportedLBIsolation.getName()) || capability.getName().equals(Capability.SupportedSourceNatTypes.getName())\n+                                || capability.getName().equals(Capability.RedundantRouter.getName())) {\n+                            capabilityResponse.setCanChoose(true);\n+                        } else {\n+                            capabilityResponse.setCanChoose(false);\n+                        }\n                         capabilityResponse.setObjectName(\"capability\");\n                         capabilityResponses.add(capabilityResponse);\n                     }\n-                    serviceResponse.setCapabilities(capabilityResponses);\n                 }\n \n+                if (Service.SourceNat == service) {\n+                    // overwrite\n+                    capabilityResponses = new ArrayList<CapabilityResponse>();\n+                    CapabilityResponse sharedSourceNat = new CapabilityResponse();\n+                    sharedSourceNat.setName(Capability.SupportedSourceNatTypes.getName());\n+                    sharedSourceNat.setValue(networkOffering.isSharedSourceNat() ? \"perzone\" : \"peraccount\");\n+                    sharedSourceNat.setCanChoose(true);\n+                    capabilityResponses.add(sharedSourceNat);\n+\n+                    CapabilityResponse redundantRouter = new CapabilityResponse();\n+                    redundantRouter.setName(Capability.RedundantRouter.getName());\n+                    redundantRouter.setValue(networkOffering.isRedundantRouter() ? \"true\" : \"false\");\n+                    redundantRouter.setCanChoose(true);\n+                    capabilityResponses.add(redundantRouter);\n+\n+                } else if (service == Service.StaticNat) {\n+                    CapabilityResponse eIp = new CapabilityResponse();\n+                    eIp.setName(Capability.ElasticIp.getName());\n+                    eIp.setValue(networkOffering.isElasticIp() ? \"true\" : \"false\");\n+                    eIp.setCanChoose(false);\n+                    capabilityResponses.add(eIp);\n+\n+                    CapabilityResponse associatePublicIp = new CapabilityResponse();\n+                    associatePublicIp.setName(Capability.AssociatePublicIP.getName());\n+                    associatePublicIp.setValue(networkOffering.isAssociatePublicIP() ? \"true\" : \"false\");\n+                    associatePublicIp.setCanChoose(false);\n+                    capabilityResponses.add(associatePublicIp);\n+\n+                } else if (Service.Lb == service) {\n+                    CapabilityResponse eLb = new CapabilityResponse();\n+                    eLb.setName(Capability.ElasticLb.getName());\n+                    eLb.setValue(networkOffering.isElasticLb() ? \"true\" : \"false\");\n+                    eLb.setCanChoose(false);\n+                    capabilityResponses.add(eLb);\n+\n+                    CapabilityResponse inline = new CapabilityResponse();\n+                    inline.setName(Capability.InlineMode.getName());\n+                    inline.setValue(networkOffering.isInline() ? \"true\" : \"false\");\n+                    inline.setCanChoose(false);\n+                    capabilityResponses.add(inline);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDAwNDIyMA=="}, "originalCommit": {"oid": "c8b58eea2f12b75f96de731d173ef8e573c408ee"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA1ODgyMTMzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/api/ApiResponseHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNlQxODowOTo0MFrOJiXGMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNlQxODowOTo0MFrOJiXGMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDAwOTc3Nw==", "bodyText": "Maybe an alternative would be creating a variable in this class defining a Set of Strings that fit in this conditional.\nThis would look something similar to:\nprivate final Set<String> <insertNameHere> = new HashSet<>(Arrays.asList(Capability.SupportedLBIsolation.getName(),\n                                                                          Capability.SupportedSourceNatTypes.getName(),\n                                                                          Capability.RedundantRouter.getName()));\n...\n...\n...\n     if (<insertNameHere>.contains(capability.getName())) {\n          capabilityResponse.setCanChoose(true);\n     }\n...\n...", "url": "https://github.com/apache/cloudstack/pull/3804#discussion_r640009777", "createdAt": "2021-05-26T18:09:40Z", "author": {"login": "GabrielBrascher"}, "path": "server/src/main/java/com/cloud/api/ApiResponseHelper.java", "diffHunk": "@@ -2213,13 +2214,75 @@ public NetworkResponse createNetworkResponse(ResponseView view, Network network)\n                         CapabilityResponse capabilityResponse = new CapabilityResponse();\n                         String capabilityValue = ser_cap_entries.getValue();\n                         capabilityResponse.setName(capability.getName());\n-                        capabilityResponse.setValue(capabilityValue);\n+                        if (Service.Lb == service && capability.getName().equals(Capability.SupportedLBIsolation.getName())) {\n+                             capabilityResponse.setValue(networkOffering.isDedicatedLB() ? \"dedicated\" : \"shared\");\n+                        } else {\n+                            capabilityResponse.setValue(capabilityValue);\n+                        }\n+                        if (capability.getName().equals(Capability.SupportedLBIsolation.getName()) || capability.getName().equals(Capability.SupportedSourceNatTypes.getName())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b58eea2f12b75f96de731d173ef8e573c408ee"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3990, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}