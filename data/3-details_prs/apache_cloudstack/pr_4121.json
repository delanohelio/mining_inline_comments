{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MTAzNjgx", "number": 4121, "title": "server: fix TransactionLegacy DB connection leaks due to DB switching by B&R thread", "bodyText": "The TransactionLegacy instances are tracked by TransactionMBeanImpl in a\nconcurrent hashmap. Even when TransactionLegacy instances are closed,\nthe hashmap keep the references and makes it hard for the closed instances\nto be garbage collected. This adds code to remove the TransactionLegacy\ninstance from the mbean when the instance is close().\nNOTE: This only happens when the new B&R feature is enabled in 4.14.0.0, the sync thread seems to get stuck while performing DB query and ends up consuming most of the TransactionLegacy instances\n\nRelated: #3987\nLeaks seen by MAT:\n\nThe MBean explore shows a steady increase in  the leaks:\n\nserver: fix leak by moving backup usage updation via usage events\nBackupSync task would switch between databases to update backup usage\nmetrics in the cloud_usage.usage_backup table. The current framework\nand the usage in ManagedContext causes database connection\n(LegacyTransaction) leaks. When the thread runs faster, the issue is\neasily reproducible and checking via heap dump analysis or using JMX\nMBeans. This fixes by moving the task of backup data updation for\nusage data to the usage server by publishing usage events instead of\nswitching between databases in a local thread while in a\nManagedContextRunnable.\nTypes of changes\n\n\n Breaking change (fix or feature that would cause existing functionality to change)\n New feature (non-breaking change which adds functionality)\n Bug fix (non-breaking change which fixes an issue)\n Enhancement (improves an existing feature and functionality)\n Cleanup (Code refactoring and cleanup, that may add test cases)\n\nWith this PR, graph over a 24+hrs period shows no leaks:", "createdAt": "2020-06-01T17:00:30Z", "url": "https://github.com/apache/cloudstack/pull/4121", "merged": true, "mergeCommit": {"oid": "b54d19b3b9a66adbb8f5681005160ca549f35e33"}, "closed": true, "closedAt": "2020-06-16T08:00:31Z", "author": {"login": "rhtyd"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnQQBzgFqTQyMjQyOTMwOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrvV4kAFqTQzMTE5Njk5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNDI5MzA5", "url": "https://github.com/apache/cloudstack/pull/4121#pullrequestreview-422429309", "createdAt": "2020-06-02T07:55:50Z", "commit": {"oid": "21dd3bcdc6f0dd53e322592ed650398ee75276a4"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzo1NTo1MVrOGdmPyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODowMzoyMFrOGdmgeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY4ODUyMw==", "bodyText": "should we add some trace logging here?", "url": "https://github.com/apache/cloudstack/pull/4121#discussion_r433688523", "createdAt": "2020-06-02T07:55:51Z", "author": {"login": "DaanHoogland"}, "path": "engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java", "diffHunk": "@@ -4564,10 +4558,6 @@ private void scanStalledVMInTransitionStateOnDisconnectedHosts() {\n             } catch (final Throwable e) {\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21dd3bcdc6f0dd53e322592ed650398ee75276a4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY4ODkzMg==", "bodyText": "let's log before ignoring", "url": "https://github.com/apache/cloudstack/pull/4121#discussion_r433688932", "createdAt": "2020-06-02T07:56:33Z", "author": {"login": "DaanHoogland"}, "path": "engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java", "diffHunk": "@@ -4599,10 +4584,6 @@ private void scanStalledVMInTransitionStateOnDisconnectedHosts() {\n             } catch (final Throwable e) {\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21dd3bcdc6f0dd53e322592ed650398ee75276a4"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY4OTMwMw==", "bodyText": "unintended change?", "url": "https://github.com/apache/cloudstack/pull/4121#discussion_r433689303", "createdAt": "2020-06-02T07:57:14Z", "author": {"login": "DaanHoogland"}, "path": "framework/db/src/main/java/com/cloud/utils/db/DbUtil.java", "diffHunk": "@@ -16,6 +16,8 @@\n // under the License.\n package com.cloud.utils.db;\n \n+import static com.cloud.utils.AutoCloseableUtil.closeAutoCloseable;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21dd3bcdc6f0dd53e322592ed650398ee75276a4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY5MTk3OA==", "bodyText": "I would expect a decrement-call in the removeTransaction(..)", "url": "https://github.com/apache/cloudstack/pull/4121#discussion_r433691978", "createdAt": "2020-06-02T08:01:58Z", "author": {"login": "DaanHoogland"}, "path": "framework/db/src/main/java/com/cloud/utils/db/TransactionMBeanImpl.java", "diffHunk": "@@ -45,14 +48,15 @@ public void removeTransaction(TransactionLegacy txn) {\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21dd3bcdc6f0dd53e322592ed650398ee75276a4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY5Mjc5NA==", "bodyText": "change to getTransactionCount()?", "url": "https://github.com/apache/cloudstack/pull/4121#discussion_r433692794", "createdAt": "2020-06-02T08:03:20Z", "author": {"login": "DaanHoogland"}, "path": "framework/db/src/main/java/com/cloud/utils/db/TransactionMBeanImpl.java", "diffHunk": "@@ -45,14 +48,15 @@ public void removeTransaction(TransactionLegacy txn) {\n \n     @Override\n     public int getTransactionCount() {\n-        return _txns.size();\n+        return totalTransactionCount.intValue();\n     }\n \n     @Override\n     public int[] getActiveTransactionCount() {\n-        int[] count = new int[2];\n+        int[] count = new int[3];\n         count[0] = 0;\n         count[1] = 0;\n+        count[2] = _txns.size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21dd3bcdc6f0dd53e322592ed650398ee75276a4"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNTU2MTgz", "url": "https://github.com/apache/cloudstack/pull/4121#pullrequestreview-422556183", "createdAt": "2020-06-02T10:44:56Z", "commit": {"oid": "70fd44787aa9bd6c4f952c6497b881937af7176e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMDo0NDo1NlrOGdsGmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMDo0NDo1NlrOGdsGmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc4NDQ3Mw==", "bodyText": "afaict these can be combined in the same try clause", "url": "https://github.com/apache/cloudstack/pull/4121#discussion_r433784473", "createdAt": "2020-06-02T10:44:56Z", "author": {"login": "DaanHoogland"}, "path": "engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java", "diffHunk": "@@ -4545,14 +4545,8 @@ private void scanStalledVMInTransitionStateOnDisconnectedHosts() {\n                 \"AND i.removed IS NULL\";\n \n         final List<Long> l = new ArrayList<Long>();\n-        TransactionLegacy txn = null;\n-        try {\n-            txn = TransactionLegacy.open(TransactionLegacy.CLOUD_DB);\n-\n-            PreparedStatement pstmt = null;\n-            try {\n-                pstmt = txn.prepareAutoCloseStatement(sql);\n-\n+        try (TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.CLOUD_DB)) {\n+            try (PreparedStatement pstmt = txn.prepareAutoCloseStatement(sql)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fd44787aa9bd6c4f952c6497b881937af7176e"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a79a05893bce1016df75218b882dead359a074c", "author": {"user": {"login": "rhtyd", "name": "Rohit Yadav"}}, "url": "https://github.com/apache/cloudstack/commit/1a79a05893bce1016df75218b882dead359a074c", "committedDate": "2020-06-03T00:09:13Z", "message": "server: fix leak by moving backup usage updation via usage events\n\nBackupSync task would switch between databases to update backup usage\nmetrics in the cloud_usage.usage_backup table. The current framework\nand the usage in ManagedContext causes database connection\n(LegacyTransaction) leaks. When the thread runs faster, the issue is\neasily reproducible and checking via heap dump analysis or using JMX\nMBeans. This fixes by moving the task of backup data updation for\nusage data to the usage server by publishing usage events instead of\nswitching between databases in a local thread while in a\nManagedContextRunnable.\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "239fe1ee0c3daa77e8695840f3e85b2a5f576b11", "author": {"user": {"login": "rhtyd", "name": "Rohit Yadav"}}, "url": "https://github.com/apache/cloudstack/commit/239fe1ee0c3daa77e8695840f3e85b2a5f576b11", "committedDate": "2020-06-02T23:51:53Z", "message": "wip usage-event based solution\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>"}, "afterCommit": {"oid": "1a79a05893bce1016df75218b882dead359a074c", "author": {"user": {"login": "rhtyd", "name": "Rohit Yadav"}}, "url": "https://github.com/apache/cloudstack/commit/1a79a05893bce1016df75218b882dead359a074c", "committedDate": "2020-06-03T00:09:13Z", "message": "server: fix leak by moving backup usage updation via usage events\n\nBackupSync task would switch between databases to update backup usage\nmetrics in the cloud_usage.usage_backup table. The current framework\nand the usage in ManagedContext causes database connection\n(LegacyTransaction) leaks. When the thread runs faster, the issue is\neasily reproducible and checking via heap dump analysis or using JMX\nMBeans. This fixes by moving the task of backup data updation for\nusage data to the usage server by publishing usage events instead of\nswitching between databases in a local thread while in a\nManagedContextRunnable.\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMjIxNDcy", "url": "https://github.com/apache/cloudstack/pull/4121#pullrequestreview-423221472", "createdAt": "2020-06-03T05:08:49Z", "commit": {"oid": "1a79a05893bce1016df75218b882dead359a074c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTowODo0OVrOGeMN0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNToyMDoyMFrOGeMZ7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMDYwOA==", "bodyText": "Not locking now, how are the metrics update and backup sync affected by this?", "url": "https://github.com/apache/cloudstack/pull/4121#discussion_r434310608", "createdAt": "2020-06-03T05:08:49Z", "author": {"login": "nvazquez"}, "path": "server/src/main/java/org/apache/cloudstack/backup/BackupManagerImpl.java", "diffHunk": "@@ -1022,31 +1018,23 @@ protected void runInContext() {\n                         continue;\n                     }\n \n-                    // Sync backup usage metrics\n                     final Map<VirtualMachine, Backup.Metric> metrics = backupProvider.getBackupMetrics(dataCenter.getId(), new ArrayList<>(vms));\n-                    final GlobalLock syncBackupMetricsLock = GlobalLock.getInternLock(\"BackupSyncTask_metrics_zone_\" + dataCenter.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a79a05893bce1016df75218b882dead359a074c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMzcxMQ==", "bodyText": "+1 to explicitly close the transaction. The Transaction.execute() method is being used widely over the codebase, looks strange that closing has not been handled on it", "url": "https://github.com/apache/cloudstack/pull/4121#discussion_r434313711", "createdAt": "2020-06-03T05:20:20Z", "author": {"login": "nvazquez"}, "path": "engine/schema/src/main/java/com/cloud/usage/dao/UsageBackupDaoImpl.java", "diffHunk": "@@ -19,69 +19,71 @@\n \n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n+import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n import java.util.TimeZone;\n \n-import org.apache.cloudstack.backup.Backup;\n import org.apache.log4j.Logger;\n import org.springframework.stereotype.Component;\n \n+import com.cloud.exception.CloudException;\n import com.cloud.usage.UsageBackupVO;\n import com.cloud.utils.DateUtil;\n import com.cloud.utils.db.GenericDaoBase;\n-import com.cloud.utils.db.QueryBuilder;\n import com.cloud.utils.db.SearchCriteria;\n-import com.cloud.utils.db.Transaction;\n-import com.cloud.utils.db.TransactionCallback;\n import com.cloud.utils.db.TransactionLegacy;\n-import com.cloud.utils.db.TransactionStatus;\n-import com.cloud.vm.VirtualMachine;\n \n @Component\n public class UsageBackupDaoImpl extends GenericDaoBase<UsageBackupVO, Long> implements UsageBackupDao {\n     public static final Logger LOGGER = Logger.getLogger(UsageBackupDaoImpl.class);\n-    protected static final String GET_USAGE_RECORDS_BY_ACCOUNT = \"SELECT id, zone_id, account_id, domain_id, vm_id, backup_offering_id, size, protected_size, created, removed FROM cloud_usage.usage_backup WHERE \" +\n+    protected static final String UPDATE_DELETED = \"UPDATE usage_backup SET removed = ? WHERE account_id = ? AND vm_id = ? and removed IS NULL\";\n+    protected static final String GET_USAGE_RECORDS_BY_ACCOUNT = \"SELECT id, zone_id, account_id, domain_id, vm_id, backup_offering_id, size, protected_size, created, removed FROM usage_backup WHERE \" +\n             \" account_id = ? AND ((removed IS NULL AND created <= ?) OR (created BETWEEN ? AND ?) OR (removed BETWEEN ? AND ?) \" +\n             \" OR ((created <= ?) AND (removed >= ?)))\";\n \n     @Override\n-    public void updateMetrics(final VirtualMachine vm, Backup.Metric metric) {\n-        boolean result = Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<Boolean>() {\n-            @Override\n-            public Boolean doInTransaction(final TransactionStatus status) {\n-                final QueryBuilder<UsageBackupVO> qb = QueryBuilder.create(UsageBackupVO.class);\n-                qb.and(qb.entity().getVmId(), SearchCriteria.Op.EQ, vm.getId());\n-                final UsageBackupVO entry = findOneBy(qb.create());\n-                if (entry == null) {\n-                    return false;\n-                }\n-                entry.setSize(metric.getBackupSize());\n-                entry.setProtectedSize(metric.getDataSize());\n-                return update(entry.getId(), entry);\n+    public void updateMetrics(final Long vmId, final Long size, final Long virtualSize) {\n+        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.USAGE_DB);\n+        try {\n+            SearchCriteria<UsageBackupVO> sc = this.createSearchCriteria();\n+            sc.addAnd(\"vmId\", SearchCriteria.Op.EQ, vmId);\n+            UsageBackupVO vo = findOneBy(sc);\n+            if (vo != null) {\n+                vo.setSize(size);\n+                vo.setProtectedSize(virtualSize);\n+                update(vo.getId(), vo);\n             }\n-        });\n-        if (!result) {\n-            LOGGER.trace(\"Failed to update backup metrics for VM ID: \" + vm.getId());\n+        } catch (final Exception e) {\n+            LOGGER.error(\"Error updating backup metrics: \" + e.getMessage(), e);\n+        } finally {\n+            txn.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a79a05893bce1016df75218b882dead359a074c"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNDczMDc5", "url": "https://github.com/apache/cloudstack/pull/4121#pullrequestreview-423473079", "createdAt": "2020-06-03T11:48:47Z", "commit": {"oid": "1a79a05893bce1016df75218b882dead359a074c"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMTo0ODo0N1rOGeYOlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMTo0OTozM1rOGeYQEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwNzQxNQ==", "bodyText": "can we use try-with-resource in this case?", "url": "https://github.com/apache/cloudstack/pull/4121#discussion_r434507415", "createdAt": "2020-06-03T11:48:47Z", "author": {"login": "DaanHoogland"}, "path": "engine/schema/src/main/java/com/cloud/usage/dao/UsageBackupDaoImpl.java", "diffHunk": "@@ -19,69 +19,71 @@\n \n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n+import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n import java.util.TimeZone;\n \n-import org.apache.cloudstack.backup.Backup;\n import org.apache.log4j.Logger;\n import org.springframework.stereotype.Component;\n \n+import com.cloud.exception.CloudException;\n import com.cloud.usage.UsageBackupVO;\n import com.cloud.utils.DateUtil;\n import com.cloud.utils.db.GenericDaoBase;\n-import com.cloud.utils.db.QueryBuilder;\n import com.cloud.utils.db.SearchCriteria;\n-import com.cloud.utils.db.Transaction;\n-import com.cloud.utils.db.TransactionCallback;\n import com.cloud.utils.db.TransactionLegacy;\n-import com.cloud.utils.db.TransactionStatus;\n-import com.cloud.vm.VirtualMachine;\n \n @Component\n public class UsageBackupDaoImpl extends GenericDaoBase<UsageBackupVO, Long> implements UsageBackupDao {\n     public static final Logger LOGGER = Logger.getLogger(UsageBackupDaoImpl.class);\n-    protected static final String GET_USAGE_RECORDS_BY_ACCOUNT = \"SELECT id, zone_id, account_id, domain_id, vm_id, backup_offering_id, size, protected_size, created, removed FROM cloud_usage.usage_backup WHERE \" +\n+    protected static final String UPDATE_DELETED = \"UPDATE usage_backup SET removed = ? WHERE account_id = ? AND vm_id = ? and removed IS NULL\";\n+    protected static final String GET_USAGE_RECORDS_BY_ACCOUNT = \"SELECT id, zone_id, account_id, domain_id, vm_id, backup_offering_id, size, protected_size, created, removed FROM usage_backup WHERE \" +\n             \" account_id = ? AND ((removed IS NULL AND created <= ?) OR (created BETWEEN ? AND ?) OR (removed BETWEEN ? AND ?) \" +\n             \" OR ((created <= ?) AND (removed >= ?)))\";\n \n     @Override\n-    public void updateMetrics(final VirtualMachine vm, Backup.Metric metric) {\n-        boolean result = Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<Boolean>() {\n-            @Override\n-            public Boolean doInTransaction(final TransactionStatus status) {\n-                final QueryBuilder<UsageBackupVO> qb = QueryBuilder.create(UsageBackupVO.class);\n-                qb.and(qb.entity().getVmId(), SearchCriteria.Op.EQ, vm.getId());\n-                final UsageBackupVO entry = findOneBy(qb.create());\n-                if (entry == null) {\n-                    return false;\n-                }\n-                entry.setSize(metric.getBackupSize());\n-                entry.setProtectedSize(metric.getDataSize());\n-                return update(entry.getId(), entry);\n+    public void updateMetrics(final Long vmId, final Long size, final Long virtualSize) {\n+        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.USAGE_DB);\n+        try {\n+            SearchCriteria<UsageBackupVO> sc = this.createSearchCriteria();\n+            sc.addAnd(\"vmId\", SearchCriteria.Op.EQ, vmId);\n+            UsageBackupVO vo = findOneBy(sc);\n+            if (vo != null) {\n+                vo.setSize(size);\n+                vo.setProtectedSize(virtualSize);\n+                update(vo.getId(), vo);\n             }\n-        });\n-        if (!result) {\n-            LOGGER.trace(\"Failed to update backup metrics for VM ID: \" + vm.getId());\n+        } catch (final Exception e) {\n+            LOGGER.error(\"Error updating backup metrics: \" + e.getMessage(), e);\n+        } finally {\n+            txn.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMzcxMQ=="}, "originalCommit": {"oid": "1a79a05893bce1016df75218b882dead359a074c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwNzc5Mw==", "bodyText": "again, can we use try-with-resource", "url": "https://github.com/apache/cloudstack/pull/4121#discussion_r434507793", "createdAt": "2020-06-03T11:49:33Z", "author": {"login": "DaanHoogland"}, "path": "engine/schema/src/main/java/com/cloud/usage/dao/UsageBackupDaoImpl.java", "diffHunk": "@@ -19,69 +19,71 @@\n \n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n+import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n import java.util.TimeZone;\n \n-import org.apache.cloudstack.backup.Backup;\n import org.apache.log4j.Logger;\n import org.springframework.stereotype.Component;\n \n+import com.cloud.exception.CloudException;\n import com.cloud.usage.UsageBackupVO;\n import com.cloud.utils.DateUtil;\n import com.cloud.utils.db.GenericDaoBase;\n-import com.cloud.utils.db.QueryBuilder;\n import com.cloud.utils.db.SearchCriteria;\n-import com.cloud.utils.db.Transaction;\n-import com.cloud.utils.db.TransactionCallback;\n import com.cloud.utils.db.TransactionLegacy;\n-import com.cloud.utils.db.TransactionStatus;\n-import com.cloud.vm.VirtualMachine;\n \n @Component\n public class UsageBackupDaoImpl extends GenericDaoBase<UsageBackupVO, Long> implements UsageBackupDao {\n     public static final Logger LOGGER = Logger.getLogger(UsageBackupDaoImpl.class);\n-    protected static final String GET_USAGE_RECORDS_BY_ACCOUNT = \"SELECT id, zone_id, account_id, domain_id, vm_id, backup_offering_id, size, protected_size, created, removed FROM cloud_usage.usage_backup WHERE \" +\n+    protected static final String UPDATE_DELETED = \"UPDATE usage_backup SET removed = ? WHERE account_id = ? AND vm_id = ? and removed IS NULL\";\n+    protected static final String GET_USAGE_RECORDS_BY_ACCOUNT = \"SELECT id, zone_id, account_id, domain_id, vm_id, backup_offering_id, size, protected_size, created, removed FROM usage_backup WHERE \" +\n             \" account_id = ? AND ((removed IS NULL AND created <= ?) OR (created BETWEEN ? AND ?) OR (removed BETWEEN ? AND ?) \" +\n             \" OR ((created <= ?) AND (removed >= ?)))\";\n \n     @Override\n-    public void updateMetrics(final VirtualMachine vm, Backup.Metric metric) {\n-        boolean result = Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<Boolean>() {\n-            @Override\n-            public Boolean doInTransaction(final TransactionStatus status) {\n-                final QueryBuilder<UsageBackupVO> qb = QueryBuilder.create(UsageBackupVO.class);\n-                qb.and(qb.entity().getVmId(), SearchCriteria.Op.EQ, vm.getId());\n-                final UsageBackupVO entry = findOneBy(qb.create());\n-                if (entry == null) {\n-                    return false;\n-                }\n-                entry.setSize(metric.getBackupSize());\n-                entry.setProtectedSize(metric.getDataSize());\n-                return update(entry.getId(), entry);\n+    public void updateMetrics(final Long vmId, final Long size, final Long virtualSize) {\n+        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.USAGE_DB);\n+        try {\n+            SearchCriteria<UsageBackupVO> sc = this.createSearchCriteria();\n+            sc.addAnd(\"vmId\", SearchCriteria.Op.EQ, vmId);\n+            UsageBackupVO vo = findOneBy(sc);\n+            if (vo != null) {\n+                vo.setSize(size);\n+                vo.setProtectedSize(virtualSize);\n+                update(vo.getId(), vo);\n             }\n-        });\n-        if (!result) {\n-            LOGGER.trace(\"Failed to update backup metrics for VM ID: \" + vm.getId());\n+        } catch (final Exception e) {\n+            LOGGER.error(\"Error updating backup metrics: \" + e.getMessage(), e);\n+        } finally {\n+            txn.close();\n         }\n     }\n \n     @Override\n-    public void removeUsage(Long accountId, Long zoneId, Long vmId) {\n-        boolean result = Transaction.execute(TransactionLegacy.USAGE_DB, new TransactionCallback<Boolean>() {\n-            @Override\n-            public Boolean doInTransaction(final TransactionStatus status) {\n-                final QueryBuilder<UsageBackupVO> qb = QueryBuilder.create(UsageBackupVO.class);\n-                qb.and(qb.entity().getAccountId(), SearchCriteria.Op.EQ, accountId);\n-                qb.and(qb.entity().getZoneId(), SearchCriteria.Op.EQ, zoneId);\n-                qb.and(qb.entity().getVmId(), SearchCriteria.Op.EQ, vmId);\n-                final UsageBackupVO entry = findOneBy(qb.create());\n-                return remove(qb.create()) > 0;\n+    public void removeUsage(Long accountId, Long vmId, Date eventDate) {\n+        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.USAGE_DB);\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a79a05893bce1016df75218b882dead359a074c"}, "originalPosition": 83}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bead0470521d45a9dcdb7018f9f7912fb5681f4c", "author": {"user": {"login": "rhtyd", "name": "Rohit Yadav"}}, "url": "https://github.com/apache/cloudstack/commit/bead0470521d45a9dcdb7018f9f7912fb5681f4c", "committedDate": "2020-06-04T01:32:32Z", "message": "address Daan's review comment\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMTk2OTk2", "url": "https://github.com/apache/cloudstack/pull/4121#pullrequestreview-431196996", "createdAt": "2020-06-16T06:34:16Z", "commit": {"oid": "bead0470521d45a9dcdb7018f9f7912fb5681f4c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4334, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}