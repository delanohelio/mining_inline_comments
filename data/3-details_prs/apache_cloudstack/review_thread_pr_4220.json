{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MDEzODc0", "number": 4220, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDoxNzoyMVrOERERFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDoxNzoyMVrOERERFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzMxMTU4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDoxNzoyMVrOG1kjSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODo1OToyOVrOG7ta9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNjU3MQ==", "bodyText": "I see 100f a couple of times on the code, there is also 100.0f.\nWhat do you think of extracting these magic 100f/100.0f into a constant?\nAnother approach that would be even nicer would be to have these pieces extracted to a method like calculateResourceAllocatedPercentage, and add a few unit test case methods.\npublic String calculateResourceAllocatedPercentage(float resource, float resourceWithOverprovisioning) {\n\t    return decimalFormat.format(((float)resource / resourceWithOverprovisioning * 100f)) + **\"%\"**\n}", "url": "https://github.com/apache/cloudstack/pull/4220#discussion_r458826571", "createdAt": "2020-07-22T14:17:21Z", "author": {"login": "GabrielBrascher"}, "path": "server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java", "diffHunk": "@@ -330,10 +330,10 @@ public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, Enu\n \n                 hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n \n-                Float cpuWithOverprovisioning = new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId()));\n-                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)).toString() + \"%\";\n+                float cpuWithOverprovisioning = new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId()));\n+                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)) + \"%\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9500dfa627be8efea0ab96bf6691801c8a56b2e4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI4NzIzNg==", "bodyText": "@GabrielBrascher I made the changes. Also can you look into the issue #4221 ?", "url": "https://github.com/apache/cloudstack/pull/4220#discussion_r459287236", "createdAt": "2020-07-23T08:21:10Z", "author": {"login": "ravening"}, "path": "server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java", "diffHunk": "@@ -330,10 +330,10 @@ public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, Enu\n \n                 hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n \n-                Float cpuWithOverprovisioning = new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId()));\n-                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)).toString() + \"%\";\n+                float cpuWithOverprovisioning = new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId()));\n+                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)) + \"%\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNjU3MQ=="}, "originalCommit": {"oid": "9500dfa627be8efea0ab96bf6691801c8a56b2e4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgzODQ3Mg==", "bodyText": "@ravening thanks +1 :)\nCan you please take a look at line 314, I think that it could also benefit from the created method calculateResourceAllocatedPercentage.", "url": "https://github.com/apache/cloudstack/pull/4220#discussion_r459838472", "createdAt": "2020-07-24T03:43:04Z", "author": {"login": "GabrielBrascher"}, "path": "server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java", "diffHunk": "@@ -330,10 +330,10 @@ public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, Enu\n \n                 hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n \n-                Float cpuWithOverprovisioning = new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId()));\n-                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)).toString() + \"%\";\n+                float cpuWithOverprovisioning = new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId()));\n+                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)) + \"%\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNjU3MQ=="}, "originalCommit": {"oid": "9500dfa627be8efea0ab96bf6691801c8a56b2e4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MzkwOA==", "bodyText": "@GabrielBrascher I didn't make changes in line 314 because it has different behavior compared to line 165.\nI have mentioned the same in issue #4221 also. list hosts api returns absolute value where as findhostsformigration returns percentage. If we decided what to return then I can make changes in these two places also", "url": "https://github.com/apache/cloudstack/pull/4220#discussion_r459883908", "createdAt": "2020-07-24T07:03:38Z", "author": {"login": "ravening"}, "path": "server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java", "diffHunk": "@@ -330,10 +330,10 @@ public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, Enu\n \n                 hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n \n-                Float cpuWithOverprovisioning = new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId()));\n-                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)).toString() + \"%\";\n+                float cpuWithOverprovisioning = new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId()));\n+                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)) + \"%\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNjU3MQ=="}, "originalCommit": {"oid": "9500dfa627be8efea0ab96bf6691801c8a56b2e4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2MzM0OA==", "bodyText": "@ravening sorry for the delay. I think that I was not clear about my point.\n\n\nthe method that you extract L464:\ndecimalFormat.format(((float)resource / resourceWithOverProvision * 100.0f)) + \"%\"\n\n\nline 314 that I mentioned:\ndecimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\"\n\n\nThat is why I thought that it could also benefit from calculateResourceAllocatedPercentage.", "url": "https://github.com/apache/cloudstack/pull/4220#discussion_r465263348", "createdAt": "2020-08-04T18:59:29Z", "author": {"login": "GabrielBrascher"}, "path": "server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java", "diffHunk": "@@ -330,10 +330,10 @@ public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, Enu\n \n                 hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n \n-                Float cpuWithOverprovisioning = new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId()));\n-                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)).toString() + \"%\";\n+                float cpuWithOverprovisioning = new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId()));\n+                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)) + \"%\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNjU3MQ=="}, "originalCommit": {"oid": "9500dfa627be8efea0ab96bf6691801c8a56b2e4"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3757, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}