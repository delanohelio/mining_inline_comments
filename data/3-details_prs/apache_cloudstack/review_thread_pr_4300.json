{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2OTM4OTIz", "number": 4300, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNjozNDowOVrOE7Zy2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQwMzo1Mzo0NFrOFj2Diw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzI0MDU2OnYy", "diffSide": "RIGHT", "path": "engine/schema/src/main/resources/META-INF/db/schema-41400to41500.sql", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNjozNDowOVrOH3CKbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMzowOToyNFrOH3mSLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ2OTE2NQ==", "bodyText": "new guest os support in VMware 7.0 will be addressed here?", "url": "https://github.com/apache/cloudstack/pull/4300#discussion_r527469165", "createdAt": "2020-11-20T06:34:09Z", "author": {"login": "sureshanaparti"}, "path": "engine/schema/src/main/resources/META-INF/db/schema-41400to41500.sql", "diffHunk": "@@ -19,6 +19,10 @@\n -- Schema upgrade from 4.14.0.0 to 4.15.0.0\n --;\n \n+-- Add support for VMware 7.0\n+INSERT IGNORE INTO `cloud`.`hypervisor_capabilities` (uuid, hypervisor_type, hypervisor_version, max_guests_limit, security_group_enabled, max_data_volumes_limit, max_hosts_per_cluster, storage_motion_supported, vm_snapshot_enabled) values (UUID(), 'VMware', '7.0', 1024, 0, 59, 64, 1, 1);\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) SELECT UUID(),'VMware', '7.0', guest_os_name, guest_os_id, utc_timestamp(), 0  FROM `cloud`.`guest_os_hypervisor` WHERE hypervisor_type='VMware' AND hypervisor_version='6.7';\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "803f925da65f8dbc7b2823a60d37ba42fa173410"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA2MDk3NA==", "bodyText": "\ud83d\udc4d yes", "url": "https://github.com/apache/cloudstack/pull/4300#discussion_r528060974", "createdAt": "2020-11-21T03:09:24Z", "author": {"login": "nvazquez"}, "path": "engine/schema/src/main/resources/META-INF/db/schema-41400to41500.sql", "diffHunk": "@@ -19,6 +19,10 @@\n -- Schema upgrade from 4.14.0.0 to 4.15.0.0\n --;\n \n+-- Add support for VMware 7.0\n+INSERT IGNORE INTO `cloud`.`hypervisor_capabilities` (uuid, hypervisor_type, hypervisor_version, max_guests_limit, security_group_enabled, max_data_volumes_limit, max_hosts_per_cluster, storage_motion_supported, vm_snapshot_enabled) values (UUID(), 'VMware', '7.0', 1024, 0, 59, 64, 1, 1);\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) SELECT UUID(),'VMware', '7.0', guest_os_name, guest_os_id, utc_timestamp(), 0  FROM `cloud`.`guest_os_hypervisor` WHERE hypervisor_type='VMware' AND hypervisor_version='6.7';\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ2OTE2NQ=="}, "originalCommit": {"oid": "803f925da65f8dbc7b2823a60d37ba42fa173410"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNjEzMjY1OnYy", "diffSide": "RIGHT", "path": "services/console-proxy/server/src/main/java/com/cloud/consoleproxy/ConsoleProxy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwODoxNjoyMlrOIWCyjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwODoxNjoyMlrOIWCyjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk4NTI5NA==", "bodyText": "remove the comment if not required here", "url": "https://github.com/apache/cloudstack/pull/4300#discussion_r559985294", "createdAt": "2021-01-19T08:16:22Z", "author": {"login": "sureshanaparti"}, "path": "services/console-proxy/server/src/main/java/com/cloud/consoleproxy/ConsoleProxy.java", "diffHunk": "@@ -537,10 +545,14 @@ public static ConsoleProxyNoVncClient getNoVncViewer(ConsoleProxyClientParam par\n             Session session) throws AuthenticationException {\n         boolean reportLoadChange = false;\n         String clientKey = param.getClientMapKey();\n+        String ticketAcquired = param.getTicketAcquired();\n+        if (StringUtils.isNotBlank(ticketAcquired)) {\n+            s_logger.info(\">>>>> NO VNC Viewer received ticket acquired: \" + param.getTicketAcquired());\n+        }\n         synchronized (connectionMap) {\n             ConsoleProxyClient viewer = connectionMap.get(clientKey);\n             if (viewer == null || viewer.getClass() != ConsoleProxyNoVncClient.class) {\n-                authenticationExternally(param);\n+                //authenticationExternally(param);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c58e9d00e4d6494ad08dbda67fe1771f8277861"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNjE0NzU3OnYy", "diffSide": "RIGHT", "path": "services/console-proxy/server/src/main/java/com/cloud/consoleproxy/ConsoleProxy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwODoyMDoxN1rOIWC7Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwODoyMDoxN1rOIWC7Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk4NzQ5NQ==", "bodyText": "@nvazquez is this port customizable at vCenter / host (or) fixed ?", "url": "https://github.com/apache/cloudstack/pull/4300#discussion_r559987495", "createdAt": "2021-01-19T08:20:17Z", "author": {"login": "sureshanaparti"}, "path": "services/console-proxy/server/src/main/java/com/cloud/consoleproxy/ConsoleProxy.java", "diffHunk": "@@ -170,6 +171,13 @@ public static ConsoleProxyAuthenticationResult authenticateConsoleAccess(Console\n         authResult.setReauthentication(reauthentication);\n         authResult.setHost(param.getClientHostAddress());\n         authResult.setPort(param.getClientHostPort());\n+        if (StringUtils.isNotBlank(param.getTicketAcquired())) {\n+            s_logger.info(\"Host = \" + param.getClientHostAddress() + \", hypervhost = \" + param.getHypervHost() +\n+                    \" pass = \" + param.getPassword() + \" hostpass = \" + param.getClientHostPassword() +\n+                    \" asd = \" + param.getClientHostPort());\n+            s_logger.info(\"Connecting using ticket \" + param.getTicketAcquired() + \" port 443\");\n+            authResult.setPort(443);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c58e9d00e4d6494ad08dbda67fe1771f8277861"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNjgzOTAxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwODoxNDozNlrOIXp-kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwODoxNDozNlrOIXp-kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY3NTkyMA==", "bodyText": "@nvazquez declare a constant for port 443 in some common class (may be ConsoleProxyManager), and use it across.", "url": "https://github.com/apache/cloudstack/pull/4300#discussion_r561675920", "createdAt": "2021-01-21T08:14:36Z", "author": {"login": "sureshanaparti"}, "path": "server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java", "diffHunk": "@@ -500,6 +526,20 @@ private String composeConsoleAccessUrl(String rootUrl, VirtualMachine vm, HostVO\n         return sb.toString();\n     }\n \n+    /**\n+     * Generates an extra parameter to be passed to noVNC server to connect to WebSocket exposed on Vmware hosts.\n+     * This method has been introduced as Vmware 7 has deprecated the previous VNC approach to connect to VMs console.\n+     * Please check: https://docs.vmware.com/en/VMware-vSphere/7.0/rn/vsphere-esxi-vcenter-server-70-release-notes.html\n+     */\n+    private String generateExtraNoVNCParameter(ConsoleProxyClientParam param) {\n+        String extraParam = null;\n+        if (StringUtils.isNotBlank(param.getTicketAcquired())) {\n+            extraParam = \"wss://\" + param.getClientHostAddress() + \":443/ticket/\" + param.getTicketAcquired();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3878fbddbf4778dc7382b78ccd3178463f9cb4a1"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYzMjk3MzI1OnYy", "diffSide": "RIGHT", "path": "engine/schema/src/main/resources/META-INF/db/schema-41500to41510.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNVQxMjoyODo1OVrOIld6WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNVQwNToyMzo0NlrOIrkQkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjE1ODI5Ng==", "bodyText": "@nvazquez do we (codewise) differentiate between 7.0 and 7.0.1.0? Pl check otherwise there is no need of adding support for 7.0.1.0 if it would fallback and use 7.0. Also can you check and add support for new guest OSs which are missing in the sql upgrade path.", "url": "https://github.com/apache/cloudstack/pull/4300#discussion_r576158296", "createdAt": "2021-02-15T12:28:59Z", "author": {"login": "rhtyd"}, "path": "engine/schema/src/main/resources/META-INF/db/schema-41500to41510.sql", "diffHunk": "@@ -18,4 +18,10 @@\n --;\n -- Schema upgrade from 4.15.0.0 to 4.15.1.0\n --;\n+-- Add support for VMware 7.0\n+INSERT IGNORE INTO `cloud`.`hypervisor_capabilities` (uuid, hypervisor_type, hypervisor_version, max_guests_limit, security_group_enabled, max_data_volumes_limit, max_hosts_per_cluster, storage_motion_supported, vm_snapshot_enabled) values (UUID(), 'VMware', '7.0', 1024, 0, 59, 64, 1, 1);\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) SELECT UUID(),'VMware', '7.0', guest_os_name, guest_os_id, utc_timestamp(), 0  FROM `cloud`.`guest_os_hypervisor` WHERE hypervisor_type='VMware' AND hypervisor_version='6.7';\n \n+-- Add support for VMware 7.0.1.0\n+INSERT IGNORE INTO `cloud`.`hypervisor_capabilities` (uuid, hypervisor_type, hypervisor_version, max_guests_limit, security_group_enabled, max_data_volumes_limit, max_hosts_per_cluster, storage_motion_supported, vm_snapshot_enabled) values (UUID(), 'VMware', '7.0.1.0', 1024, 0, 59, 64, 1, 1);\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) SELECT UUID(),'VMware', '7.0.1.0', guest_os_name, guest_os_id, utc_timestamp(), 0  FROM `cloud`.`guest_os_hypervisor` WHERE hypervisor_type='VMware' AND hypervisor_version='7.0';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431ba0327eb064c10ad7f8a0514b740cdd841f7b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjU1Mzc0NQ==", "bodyText": "@rhtyd yes - hosts on 7.0 u1 report the version 7.0.1.0", "url": "https://github.com/apache/cloudstack/pull/4300#discussion_r582553745", "createdAt": "2021-02-25T05:23:46Z", "author": {"login": "nvazquez"}, "path": "engine/schema/src/main/resources/META-INF/db/schema-41500to41510.sql", "diffHunk": "@@ -18,4 +18,10 @@\n --;\n -- Schema upgrade from 4.15.0.0 to 4.15.1.0\n --;\n+-- Add support for VMware 7.0\n+INSERT IGNORE INTO `cloud`.`hypervisor_capabilities` (uuid, hypervisor_type, hypervisor_version, max_guests_limit, security_group_enabled, max_data_volumes_limit, max_hosts_per_cluster, storage_motion_supported, vm_snapshot_enabled) values (UUID(), 'VMware', '7.0', 1024, 0, 59, 64, 1, 1);\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) SELECT UUID(),'VMware', '7.0', guest_os_name, guest_os_id, utc_timestamp(), 0  FROM `cloud`.`guest_os_hypervisor` WHERE hypervisor_type='VMware' AND hypervisor_version='6.7';\n \n+-- Add support for VMware 7.0.1.0\n+INSERT IGNORE INTO `cloud`.`hypervisor_capabilities` (uuid, hypervisor_type, hypervisor_version, max_guests_limit, security_group_enabled, max_data_volumes_limit, max_hosts_per_cluster, storage_motion_supported, vm_snapshot_enabled) values (UUID(), 'VMware', '7.0.1.0', 1024, 0, 59, 64, 1, 1);\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) SELECT UUID(),'VMware', '7.0.1.0', guest_os_name, guest_os_id, utc_timestamp(), 0  FROM `cloud`.`guest_os_hypervisor` WHERE hypervisor_type='VMware' AND hypervisor_version='7.0';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjE1ODI5Ng=="}, "originalCommit": {"oid": "431ba0327eb064c10ad7f8a0514b740cdd841f7b"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1OTgyNjY3OnYy", "diffSide": "RIGHT", "path": "engine/schema/src/main/resources/META-INF/db/schema-41500to41510.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxMjoxMTo1OFrOIpUunQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNVQwNToyNDowM1rOIrkQ4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDIwMjE0MQ==", "bodyText": "@nvazquez any new OS supported with 7.0 / 7.0.1.0 to be added to guest os mappings", "url": "https://github.com/apache/cloudstack/pull/4300#discussion_r580202141", "createdAt": "2021-02-22T12:11:58Z", "author": {"login": "sureshanaparti"}, "path": "engine/schema/src/main/resources/META-INF/db/schema-41500to41510.sql", "diffHunk": "@@ -18,4 +18,10 @@\n --;\n -- Schema upgrade from 4.15.0.0 to 4.15.1.0\n --;\n+-- Add support for VMware 7.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431ba0327eb064c10ad7f8a0514b740cdd841f7b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjU1MzgyNw==", "bodyText": "@sureshanaparti yes - added on the last commit", "url": "https://github.com/apache/cloudstack/pull/4300#discussion_r582553827", "createdAt": "2021-02-25T05:24:03Z", "author": {"login": "nvazquez"}, "path": "engine/schema/src/main/resources/META-INF/db/schema-41500to41510.sql", "diffHunk": "@@ -18,4 +18,10 @@\n --;\n -- Schema upgrade from 4.15.0.0 to 4.15.1.0\n --;\n+-- Add support for VMware 7.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDIwMjE0MQ=="}, "originalCommit": {"oid": "431ba0327eb064c10ad7f8a0514b740cdd841f7b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1OTg3Mzg1OnYy", "diffSide": "RIGHT", "path": "services/console-proxy/server/src/main/java/com/cloud/consoleproxy/vnc/NoVncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxMjoyNDoxN1rOIpVKsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxMjoyNDoxN1rOIpVKsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDIwOTMyOA==", "bodyText": "Non websocket connections, will cause NPE for the below methods. Either add a comment here to use these methods for isVncOverWebSocketConnection() true, or explicitly add a check.", "url": "https://github.com/apache/cloudstack/pull/4300#discussion_r580209328", "createdAt": "2021-02-22T12:24:17Z", "author": {"login": "sureshanaparti"}, "path": "services/console-proxy/server/src/main/java/com/cloud/consoleproxy/vnc/NoVncClient.java", "diffHunk": "@@ -62,6 +69,27 @@ public void connectTo(String host, int port) throws UnknownHostException, IOExce\n         setStreams();\n     }\n \n+    public void connectToWebSocket(String websocketUrl, Session session) throws URISyntaxException {\n+        webSocketReverseProxy = new WebSocketReverseProxy(new URI(websocketUrl), session);\n+        webSocketReverseProxy.connect();\n+    }\n+\n+    public boolean isVncOverWebSocketConnection() {\n+        return webSocketReverseProxy != null;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431ba0327eb064c10ad7f8a0514b740cdd841f7b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1OTkwMzI0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxMjozMTozOFrOIpVb_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxMjozMTozOFrOIpVb_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDIxMzc1Ng==", "bodyText": "acquireVncTicketForVmwareVm() returns null, in case of any errors/exceptions, check for the same ?", "url": "https://github.com/apache/cloudstack/pull/4300#discussion_r580213756", "createdAt": "2021-02-22T12:31:38Z", "author": {"login": "sureshanaparti"}, "path": "server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java", "diffHunk": "@@ -417,6 +425,40 @@ private String composeThumbnailUrl(String rootUrl, VirtualMachine vm, HostVO hos\n         return sb.toString();\n     }\n \n+    /**\n+     * Sets the URL to establish a VNC over websocket connection\n+     */\n+    private void setWebsocketUrl(VirtualMachine vm, ConsoleProxyClientParam param) {\n+        String ticket = acquireVncTicketForVmwareVm(vm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431ba0327eb064c10ad7f8a0514b740cdd841f7b"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1OTkxNTQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/cloud/agent/api/GetVmVncTicketAnswer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxMjozNTowMlrOIpVjNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxMjozNTowMlrOIpVjNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDIxNTYwNQ==", "bodyText": "cmd result (success / failed - with the reason) in the answer?", "url": "https://github.com/apache/cloudstack/pull/4300#discussion_r580215605", "createdAt": "2021-02-22T12:35:02Z", "author": {"login": "sureshanaparti"}, "path": "core/src/main/java/com/cloud/agent/api/GetVmVncTicketAnswer.java", "diffHunk": "@@ -0,0 +1,32 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.agent.api;\n+\n+public class GetVmVncTicketAnswer extends Answer {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431ba0327eb064c10ad7f8a0514b740cdd841f7b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1OTkyNjUxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxMjozNzozMlrOIpVpsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxMjozNzozMlrOIpVpsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDIxNzI2NA==", "bodyText": "better check for the answer result before continuing with the ticket, as the ticket can be null in case of error scenarios", "url": "https://github.com/apache/cloudstack/pull/4300#discussion_r580217264", "createdAt": "2021-02-22T12:37:32Z", "author": {"login": "sureshanaparti"}, "path": "server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java", "diffHunk": "@@ -417,6 +425,40 @@ private String composeThumbnailUrl(String rootUrl, VirtualMachine vm, HostVO hos\n         return sb.toString();\n     }\n \n+    /**\n+     * Sets the URL to establish a VNC over websocket connection\n+     */\n+    private void setWebsocketUrl(VirtualMachine vm, ConsoleProxyClientParam param) {\n+        String ticket = acquireVncTicketForVmwareVm(vm);\n+        String wsUrl = composeWebsocketUrlForVmwareVm(ticket, param);\n+        param.setWebsocketUrl(wsUrl);\n+    }\n+\n+    /**\n+     * Format expected: wss://<ESXi_HOST_IP>:443/ticket/<TICKET_ID>\n+     */\n+    private String composeWebsocketUrlForVmwareVm(String ticket, ConsoleProxyClientParam param) {\n+        param.setClientHostPort(443);\n+        return String.format(\"wss://%s:%s/ticket/%s\", param.getClientHostAddress(), param.getClientHostPort(), ticket);\n+    }\n+\n+    /**\n+     * Acquires a ticket to be used for console proxy as described in 'Removal of VNC Server from ESXi' on:\n+     * https://docs.vmware.com/en/VMware-vSphere/7.0/rn/vsphere-esxi-vcenter-server-70-release-notes.html\n+     */\n+    private String acquireVncTicketForVmwareVm(VirtualMachine vm) {\n+        try {\n+            s_logger.info(\"Acquiring VNC ticket for VM = \" + vm.getHostName());\n+            GetVmVncTicketCommand cmd = new GetVmVncTicketCommand(vm.getInstanceName());\n+            Answer answer = agentManager.send(vm.getHostId(), cmd);\n+            GetVmVncTicketAnswer ans = (GetVmVncTicketAnswer) answer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431ba0327eb064c10ad7f8a0514b740cdd841f7b"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1OTk0MDE1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxMjo0MDo1MFrOIpVxlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxMjo0MDo1MFrOIpVxlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDIxOTI4NQ==", "bodyText": "in case of failure, better send the error msg with result as fail in the answer, and process accordingly on the receiving side.", "url": "https://github.com/apache/cloudstack/pull/4300#discussion_r580219285", "createdAt": "2021-02-22T12:40:50Z", "author": {"login": "sureshanaparti"}, "path": "server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java", "diffHunk": "@@ -417,6 +425,40 @@ private String composeThumbnailUrl(String rootUrl, VirtualMachine vm, HostVO hos\n         return sb.toString();\n     }\n \n+    /**\n+     * Sets the URL to establish a VNC over websocket connection\n+     */\n+    private void setWebsocketUrl(VirtualMachine vm, ConsoleProxyClientParam param) {\n+        String ticket = acquireVncTicketForVmwareVm(vm);\n+        String wsUrl = composeWebsocketUrlForVmwareVm(ticket, param);\n+        param.setWebsocketUrl(wsUrl);\n+    }\n+\n+    /**\n+     * Format expected: wss://<ESXi_HOST_IP>:443/ticket/<TICKET_ID>\n+     */\n+    private String composeWebsocketUrlForVmwareVm(String ticket, ConsoleProxyClientParam param) {\n+        param.setClientHostPort(443);\n+        return String.format(\"wss://%s:%s/ticket/%s\", param.getClientHostAddress(), param.getClientHostPort(), ticket);\n+    }\n+\n+    /**\n+     * Acquires a ticket to be used for console proxy as described in 'Removal of VNC Server from ESXi' on:\n+     * https://docs.vmware.com/en/VMware-vSphere/7.0/rn/vsphere-esxi-vcenter-server-70-release-notes.html\n+     */\n+    private String acquireVncTicketForVmwareVm(VirtualMachine vm) {\n+        try {\n+            s_logger.info(\"Acquiring VNC ticket for VM = \" + vm.getHostName());\n+            GetVmVncTicketCommand cmd = new GetVmVncTicketCommand(vm.getInstanceName());\n+            Answer answer = agentManager.send(vm.getHostId(), cmd);\n+            GetVmVncTicketAnswer ans = (GetVmVncTicketAnswer) answer;\n+            return ans.getTicket();\n+        } catch (AgentUnavailableException | OperationTimedoutException e) {\n+            s_logger.error(\"Error acquiring ticket\", e);\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431ba0327eb064c10ad7f8a0514b740cdd841f7b"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY4MDQxODE0OnYy", "diffSide": "RIGHT", "path": "engine/schema/src/main/resources/META-INF/db/schema-41500to41510.sql", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNlQwNzowMTowMlrOIsZTxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwMzoyMzo0MlrOIuG_HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MzQyMjkxNw==", "bodyText": "@nvazquez does CloudStack/VMware plugin make a difference between 7.0 and 7.0.1.0 from the DB?", "url": "https://github.com/apache/cloudstack/pull/4300#discussion_r583422917", "createdAt": "2021-02-26T07:01:02Z", "author": {"login": "rhtyd"}, "path": "engine/schema/src/main/resources/META-INF/db/schema-41500to41510.sql", "diffHunk": "@@ -18,4 +18,85 @@\n --;\n -- Schema upgrade from 4.15.0.0 to 4.15.1.0\n --;\n+-- Add support for VMware 7.0\n+INSERT IGNORE INTO `cloud`.`hypervisor_capabilities` (uuid, hypervisor_type, hypervisor_version, max_guests_limit, security_group_enabled, max_data_volumes_limit, max_hosts_per_cluster, storage_motion_supported, vm_snapshot_enabled) values (UUID(), 'VMware', '7.0', 1024, 0, 59, 64, 1, 1);\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) SELECT UUID(),'VMware', '7.0', guest_os_name, guest_os_id, utc_timestamp(), 0  FROM `cloud`.`guest_os_hypervisor` WHERE hypervisor_type='VMware' AND hypervisor_version='6.7';\n+\n+-- Add support for crxPod1Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (330, UUID(), 7, 'crxPod1Guest', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'darwin19_64Guest', 330, now(), 0);\n+\n+-- Add support for darwin19_64Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (331, UUID(), 7, 'macOS 10.15 (64 bit)', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'darwin19_64Guest', 331, now(), 0);\n+\n+-- Add support for debian11_64Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (332, UUID(), 2, 'Debian GNU/Linux 11 (64-bit)', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'debian11_64Guest', 332, now(), 0);\n+\n+-- Add support for debian11Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (333, UUID(), 2, 'Debian GNU/Linux 11 (32-bit)', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'debian11Guest', 333, now(), 0);\n+\n+-- Add support for vmkernel7Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (334, UUID(), 7, 'vmkernel7Guest', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'vmkernel7Guest', 334, now(), 0);\n+\n+-- Add support for windows2019srv_64Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'windows2019srv_64Guest', 276, now(), 0);\n+\n+\n+-- Add support for VMware 7.0.1.0\n+INSERT IGNORE INTO `cloud`.`hypervisor_capabilities` (uuid, hypervisor_type, hypervisor_version, max_guests_limit, security_group_enabled, max_data_volumes_limit, max_hosts_per_cluster, storage_motion_supported, vm_snapshot_enabled) values (UUID(), 'VMware', '7.0.1.0', 1024, 0, 59, 64, 1, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "633c42bafa325ce74a5f688503e312e58c2e6c25"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTIxOTg2OQ==", "bodyText": "@rhtyd yes - hosts on 7.0 u1 report the version 7.0.1.0", "url": "https://github.com/apache/cloudstack/pull/4300#discussion_r585219869", "createdAt": "2021-03-02T03:23:42Z", "author": {"login": "nvazquez"}, "path": "engine/schema/src/main/resources/META-INF/db/schema-41500to41510.sql", "diffHunk": "@@ -18,4 +18,85 @@\n --;\n -- Schema upgrade from 4.15.0.0 to 4.15.1.0\n --;\n+-- Add support for VMware 7.0\n+INSERT IGNORE INTO `cloud`.`hypervisor_capabilities` (uuid, hypervisor_type, hypervisor_version, max_guests_limit, security_group_enabled, max_data_volumes_limit, max_hosts_per_cluster, storage_motion_supported, vm_snapshot_enabled) values (UUID(), 'VMware', '7.0', 1024, 0, 59, 64, 1, 1);\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) SELECT UUID(),'VMware', '7.0', guest_os_name, guest_os_id, utc_timestamp(), 0  FROM `cloud`.`guest_os_hypervisor` WHERE hypervisor_type='VMware' AND hypervisor_version='6.7';\n+\n+-- Add support for crxPod1Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (330, UUID(), 7, 'crxPod1Guest', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'darwin19_64Guest', 330, now(), 0);\n+\n+-- Add support for darwin19_64Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (331, UUID(), 7, 'macOS 10.15 (64 bit)', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'darwin19_64Guest', 331, now(), 0);\n+\n+-- Add support for debian11_64Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (332, UUID(), 2, 'Debian GNU/Linux 11 (64-bit)', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'debian11_64Guest', 332, now(), 0);\n+\n+-- Add support for debian11Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (333, UUID(), 2, 'Debian GNU/Linux 11 (32-bit)', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'debian11Guest', 333, now(), 0);\n+\n+-- Add support for vmkernel7Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (334, UUID(), 7, 'vmkernel7Guest', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'vmkernel7Guest', 334, now(), 0);\n+\n+-- Add support for windows2019srv_64Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'windows2019srv_64Guest', 276, now(), 0);\n+\n+\n+-- Add support for VMware 7.0.1.0\n+INSERT IGNORE INTO `cloud`.`hypervisor_capabilities` (uuid, hypervisor_type, hypervisor_version, max_guests_limit, security_group_enabled, max_data_volumes_limit, max_hosts_per_cluster, storage_motion_supported, vm_snapshot_enabled) values (UUID(), 'VMware', '7.0.1.0', 1024, 0, 59, 64, 1, 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MzQyMjkxNw=="}, "originalCommit": {"oid": "633c42bafa325ce74a5f688503e312e58c2e6c25"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5NDc3MDQ4OnYy", "diffSide": "RIGHT", "path": "services/console-proxy/server/src/main/java/com/cloud/consoleproxy/ConsoleProxyNoVncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQxMzoxMDoxNFrOIubLVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNlQwNTozOTo1OVrOI3UTXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTU1MDY3Nw==", "bodyText": "could you disect initlient() into multiple methods, it is sneakily growing too complex.", "url": "https://github.com/apache/cloudstack/pull/4300#discussion_r585550677", "createdAt": "2021-03-02T13:10:14Z", "author": {"login": "DaanHoogland"}, "path": "services/console-proxy/server/src/main/java/com/cloud/consoleproxy/ConsoleProxyNoVncClient.java", "diffHunk": "@@ -121,22 +126,33 @@ public void run() {\n                         s_logger.error(\"Unexpected exception\", e);\n                     }\n \n-                    String ver = client.handshake();\n-                    session.getRemote().sendBytes(ByteBuffer.wrap(ver.getBytes(), 0, ver.length()));\n+                    String ver;\n+                    byte[] b;\n+                    if (!client.isVncOverWebSocketConnection()) {\n+                        ver = client.handshake();\n+                        session.getRemote().sendBytes(ByteBuffer.wrap(ver.getBytes(), 0, ver.length()));\n \n-                    byte[] b = client.authenticate(getClientHostPassword());\n-                    session.getRemote().sendBytes(ByteBuffer.wrap(b, 0, 4));\n+                        b = client.authenticate(getClientHostPassword());\n+                        session.getRemote().sendBytes(ByteBuffer.wrap(b, 0, 4));\n+                    }\n \n                     int readBytes;\n                     while (connectionAlive) {\n-                        b = new byte[100];\n-                        readBytes = client.read(b);\n-                        if (readBytes == -1) {\n-                            break;\n-                        }\n-                        if (readBytes > 0) {\n-                            session.getRemote().sendBytes(ByteBuffer.wrap(b, 0, readBytes));\n-                            updateFrontEndActivityTime();\n+                        if (client.isVncOverWebSocketConnection()) {\n+                            if (client.isVncOverWebSocketConnectionOpen()) {\n+                                updateFrontEndActivityTime();\n+                            }\n+                            connectionAlive = client.isVncOverWebSocketConnectionAlive();\n+                        } else {\n+                            b = new byte[100];\n+                            readBytes = client.read(b);\n+                            if (readBytes == -1) {\n+                                break;\n+                            }\n+                            if (readBytes > 0) {\n+                                session.getRemote().sendBytes(ByteBuffer.wrap(b, 0, readBytes));\n+                                updateFrontEndActivityTime();\n+                            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "633c42bafa325ce74a5f688503e312e58c2e6c25"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDg3NTIzMQ==", "bodyText": "Done, thanks", "url": "https://github.com/apache/cloudstack/pull/4300#discussion_r594875231", "createdAt": "2021-03-16T05:39:59Z", "author": {"login": "nvazquez"}, "path": "services/console-proxy/server/src/main/java/com/cloud/consoleproxy/ConsoleProxyNoVncClient.java", "diffHunk": "@@ -121,22 +126,33 @@ public void run() {\n                         s_logger.error(\"Unexpected exception\", e);\n                     }\n \n-                    String ver = client.handshake();\n-                    session.getRemote().sendBytes(ByteBuffer.wrap(ver.getBytes(), 0, ver.length()));\n+                    String ver;\n+                    byte[] b;\n+                    if (!client.isVncOverWebSocketConnection()) {\n+                        ver = client.handshake();\n+                        session.getRemote().sendBytes(ByteBuffer.wrap(ver.getBytes(), 0, ver.length()));\n \n-                    byte[] b = client.authenticate(getClientHostPassword());\n-                    session.getRemote().sendBytes(ByteBuffer.wrap(b, 0, 4));\n+                        b = client.authenticate(getClientHostPassword());\n+                        session.getRemote().sendBytes(ByteBuffer.wrap(b, 0, 4));\n+                    }\n \n                     int readBytes;\n                     while (connectionAlive) {\n-                        b = new byte[100];\n-                        readBytes = client.read(b);\n-                        if (readBytes == -1) {\n-                            break;\n-                        }\n-                        if (readBytes > 0) {\n-                            session.getRemote().sendBytes(ByteBuffer.wrap(b, 0, readBytes));\n-                            updateFrontEndActivityTime();\n+                        if (client.isVncOverWebSocketConnection()) {\n+                            if (client.isVncOverWebSocketConnectionOpen()) {\n+                                updateFrontEndActivityTime();\n+                            }\n+                            connectionAlive = client.isVncOverWebSocketConnectionAlive();\n+                        } else {\n+                            b = new byte[100];\n+                            readBytes = client.read(b);\n+                            if (readBytes == -1) {\n+                                break;\n+                            }\n+                            if (readBytes > 0) {\n+                                session.getRemote().sendBytes(ByteBuffer.wrap(b, 0, readBytes));\n+                                updateFrontEndActivityTime();\n+                            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTU1MDY3Nw=="}, "originalCommit": {"oid": "633c42bafa325ce74a5f688503e312e58c2e6c25"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcyNzg0MzUyOnYy", "diffSide": "RIGHT", "path": "engine/schema/src/main/resources/META-INF/db/schema-41500to41510.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wOVQxNTo1ODowOFrOIzJGrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNlQwNToyOToxMFrOI3UFYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDQ5NzQ1Mg==", "bodyText": "This is not necessary", "url": "https://github.com/apache/cloudstack/pull/4300#discussion_r590497452", "createdAt": "2021-03-09T15:58:08Z", "author": {"login": "rhtyd"}, "path": "engine/schema/src/main/resources/META-INF/db/schema-41500to41510.sql", "diffHunk": "@@ -18,4 +18,85 @@\n --;\n -- Schema upgrade from 4.15.0.0 to 4.15.1.0\n --;\n+-- Add support for VMware 7.0\n+INSERT IGNORE INTO `cloud`.`hypervisor_capabilities` (uuid, hypervisor_type, hypervisor_version, max_guests_limit, security_group_enabled, max_data_volumes_limit, max_hosts_per_cluster, storage_motion_supported, vm_snapshot_enabled) values (UUID(), 'VMware', '7.0', 1024, 0, 59, 64, 1, 1);\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) SELECT UUID(),'VMware', '7.0', guest_os_name, guest_os_id, utc_timestamp(), 0  FROM `cloud`.`guest_os_hypervisor` WHERE hypervisor_type='VMware' AND hypervisor_version='6.7';\n+\n+-- Add support for crxPod1Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (330, UUID(), 7, 'crxPod1Guest', now());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "633c42bafa325ce74a5f688503e312e58c2e6c25"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDg3MTY1MA==", "bodyText": "Thanks", "url": "https://github.com/apache/cloudstack/pull/4300#discussion_r594871650", "createdAt": "2021-03-16T05:29:10Z", "author": {"login": "nvazquez"}, "path": "engine/schema/src/main/resources/META-INF/db/schema-41500to41510.sql", "diffHunk": "@@ -18,4 +18,85 @@\n --;\n -- Schema upgrade from 4.15.0.0 to 4.15.1.0\n --;\n+-- Add support for VMware 7.0\n+INSERT IGNORE INTO `cloud`.`hypervisor_capabilities` (uuid, hypervisor_type, hypervisor_version, max_guests_limit, security_group_enabled, max_data_volumes_limit, max_hosts_per_cluster, storage_motion_supported, vm_snapshot_enabled) values (UUID(), 'VMware', '7.0', 1024, 0, 59, 64, 1, 1);\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) SELECT UUID(),'VMware', '7.0', guest_os_name, guest_os_id, utc_timestamp(), 0  FROM `cloud`.`guest_os_hypervisor` WHERE hypervisor_type='VMware' AND hypervisor_version='6.7';\n+\n+-- Add support for crxPod1Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (330, UUID(), 7, 'crxPod1Guest', now());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDQ5NzQ1Mg=="}, "originalCommit": {"oid": "633c42bafa325ce74a5f688503e312e58c2e6c25"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzczMTMwMTIzOnYy", "diffSide": "RIGHT", "path": "engine/schema/src/main/resources/META-INF/db/schema-41500to41510.sql", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQwMzo1Mzo0NFrOIznuVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNlQwNToyMzoxNVrOI3T9aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDk5OTEyNQ==", "bodyText": "Should the version be just 7.0.1?\nI see this on esxi - /resourceGroups/version = \"7.0.1\"", "url": "https://github.com/apache/cloudstack/pull/4300#discussion_r590999125", "createdAt": "2021-03-10T03:53:44Z", "author": {"login": "rhtyd"}, "path": "engine/schema/src/main/resources/META-INF/db/schema-41500to41510.sql", "diffHunk": "@@ -18,4 +18,85 @@\n --;\n -- Schema upgrade from 4.15.0.0 to 4.15.1.0\n --;\n+-- Add support for VMware 7.0\n+INSERT IGNORE INTO `cloud`.`hypervisor_capabilities` (uuid, hypervisor_type, hypervisor_version, max_guests_limit, security_group_enabled, max_data_volumes_limit, max_hosts_per_cluster, storage_motion_supported, vm_snapshot_enabled) values (UUID(), 'VMware', '7.0', 1024, 0, 59, 64, 1, 1);\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) SELECT UUID(),'VMware', '7.0', guest_os_name, guest_os_id, utc_timestamp(), 0  FROM `cloud`.`guest_os_hypervisor` WHERE hypervisor_type='VMware' AND hypervisor_version='6.7';\n+\n+-- Add support for crxPod1Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (330, UUID(), 7, 'crxPod1Guest', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'darwin19_64Guest', 330, now(), 0);\n+\n+-- Add support for darwin19_64Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (331, UUID(), 7, 'macOS 10.15 (64 bit)', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'darwin19_64Guest', 331, now(), 0);\n+\n+-- Add support for debian11_64Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (332, UUID(), 2, 'Debian GNU/Linux 11 (64-bit)', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'debian11_64Guest', 332, now(), 0);\n+\n+-- Add support for debian11Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (333, UUID(), 2, 'Debian GNU/Linux 11 (32-bit)', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'debian11Guest', 333, now(), 0);\n+\n+-- Add support for vmkernel7Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (334, UUID(), 7, 'vmkernel7Guest', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'vmkernel7Guest', 334, now(), 0);\n+\n+-- Add support for windows2019srv_64Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'windows2019srv_64Guest', 276, now(), 0);\n+\n+\n+-- Add support for VMware 7.0.1.0\n+INSERT IGNORE INTO `cloud`.`hypervisor_capabilities` (uuid, hypervisor_type, hypervisor_version, max_guests_limit, security_group_enabled, max_data_volumes_limit, max_hosts_per_cluster, storage_motion_supported, vm_snapshot_enabled) values (UUID(), 'VMware', '7.0.1.0', 1024, 0, 59, 64, 1, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "633c42bafa325ce74a5f688503e312e58c2e6c25"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDk5OTI4Mg==", "bodyText": "or is it the version returned by vcenter?", "url": "https://github.com/apache/cloudstack/pull/4300#discussion_r590999282", "createdAt": "2021-03-10T03:53:59Z", "author": {"login": "rhtyd"}, "path": "engine/schema/src/main/resources/META-INF/db/schema-41500to41510.sql", "diffHunk": "@@ -18,4 +18,85 @@\n --;\n -- Schema upgrade from 4.15.0.0 to 4.15.1.0\n --;\n+-- Add support for VMware 7.0\n+INSERT IGNORE INTO `cloud`.`hypervisor_capabilities` (uuid, hypervisor_type, hypervisor_version, max_guests_limit, security_group_enabled, max_data_volumes_limit, max_hosts_per_cluster, storage_motion_supported, vm_snapshot_enabled) values (UUID(), 'VMware', '7.0', 1024, 0, 59, 64, 1, 1);\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) SELECT UUID(),'VMware', '7.0', guest_os_name, guest_os_id, utc_timestamp(), 0  FROM `cloud`.`guest_os_hypervisor` WHERE hypervisor_type='VMware' AND hypervisor_version='6.7';\n+\n+-- Add support for crxPod1Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (330, UUID(), 7, 'crxPod1Guest', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'darwin19_64Guest', 330, now(), 0);\n+\n+-- Add support for darwin19_64Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (331, UUID(), 7, 'macOS 10.15 (64 bit)', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'darwin19_64Guest', 331, now(), 0);\n+\n+-- Add support for debian11_64Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (332, UUID(), 2, 'Debian GNU/Linux 11 (64-bit)', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'debian11_64Guest', 332, now(), 0);\n+\n+-- Add support for debian11Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (333, UUID(), 2, 'Debian GNU/Linux 11 (32-bit)', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'debian11Guest', 333, now(), 0);\n+\n+-- Add support for vmkernel7Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (334, UUID(), 7, 'vmkernel7Guest', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'vmkernel7Guest', 334, now(), 0);\n+\n+-- Add support for windows2019srv_64Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'windows2019srv_64Guest', 276, now(), 0);\n+\n+\n+-- Add support for VMware 7.0.1.0\n+INSERT IGNORE INTO `cloud`.`hypervisor_capabilities` (uuid, hypervisor_type, hypervisor_version, max_guests_limit, security_group_enabled, max_data_volumes_limit, max_hosts_per_cluster, storage_motion_supported, vm_snapshot_enabled) values (UUID(), 'VMware', '7.0.1.0', 1024, 0, 59, 64, 1, 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDk5OTEyNQ=="}, "originalCommit": {"oid": "633c42bafa325ce74a5f688503e312e58c2e6c25"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDg2OTYxMQ==", "bodyText": "I've checked the code and this value comes from the SDK interaction to the hostMO.getHostAboutInfo().getApiVersion();\nIn a test environment I get:\nMariaDB [cloud]> select id,name,status,version, hypervisor_version, hypervisor_type from host where type = 'Routing';\n+----+-------------+--------+-------------------+--------------------+-----------------+\n| id | name        | status | version           | hypervisor_version | hypervisor_type |\n+----+-------------+--------+-------------------+--------------------+-----------------+\n|  1 | 10.0.33.193 | Up     | 4.15.1.0-SNAPSHOT | 7.0.1.0            | VMware          |\n|  2 | 10.0.35.144 | Up     | 4.15.1.0-SNAPSHOT | 7.0.1.0            | VMware          |\n+----+-------------+--------+-------------------+--------------------+-----------------+\n2 rows in set (0.00 sec)", "url": "https://github.com/apache/cloudstack/pull/4300#discussion_r594869611", "createdAt": "2021-03-16T05:23:15Z", "author": {"login": "nvazquez"}, "path": "engine/schema/src/main/resources/META-INF/db/schema-41500to41510.sql", "diffHunk": "@@ -18,4 +18,85 @@\n --;\n -- Schema upgrade from 4.15.0.0 to 4.15.1.0\n --;\n+-- Add support for VMware 7.0\n+INSERT IGNORE INTO `cloud`.`hypervisor_capabilities` (uuid, hypervisor_type, hypervisor_version, max_guests_limit, security_group_enabled, max_data_volumes_limit, max_hosts_per_cluster, storage_motion_supported, vm_snapshot_enabled) values (UUID(), 'VMware', '7.0', 1024, 0, 59, 64, 1, 1);\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) SELECT UUID(),'VMware', '7.0', guest_os_name, guest_os_id, utc_timestamp(), 0  FROM `cloud`.`guest_os_hypervisor` WHERE hypervisor_type='VMware' AND hypervisor_version='6.7';\n+\n+-- Add support for crxPod1Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (330, UUID(), 7, 'crxPod1Guest', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'darwin19_64Guest', 330, now(), 0);\n+\n+-- Add support for darwin19_64Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (331, UUID(), 7, 'macOS 10.15 (64 bit)', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'darwin19_64Guest', 331, now(), 0);\n+\n+-- Add support for debian11_64Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (332, UUID(), 2, 'Debian GNU/Linux 11 (64-bit)', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'debian11_64Guest', 332, now(), 0);\n+\n+-- Add support for debian11Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (333, UUID(), 2, 'Debian GNU/Linux 11 (32-bit)', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'debian11Guest', 333, now(), 0);\n+\n+-- Add support for vmkernel7Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (334, UUID(), 7, 'vmkernel7Guest', now());\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'vmkernel7Guest', 334, now(), 0);\n+\n+-- Add support for windows2019srv_64Guest from VMware 7.0\n+INSERT INTO `cloud`.`guest_os_hypervisor` (uuid,hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(),'VMware', '7.0', 'windows2019srv_64Guest', 276, now(), 0);\n+\n+\n+-- Add support for VMware 7.0.1.0\n+INSERT IGNORE INTO `cloud`.`hypervisor_capabilities` (uuid, hypervisor_type, hypervisor_version, max_guests_limit, security_group_enabled, max_data_volumes_limit, max_hosts_per_cluster, storage_motion_supported, vm_snapshot_enabled) values (UUID(), 'VMware', '7.0.1.0', 1024, 0, 59, 64, 1, 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDk5OTEyNQ=="}, "originalCommit": {"oid": "633c42bafa325ce74a5f688503e312e58c2e6c25"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3806, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}