{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4Mzk3MzY4", "number": 4385, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDo0MDozN1rOE3Kl-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxMjoxMzowN1rOFTD3Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjgwNjk2OnYy", "diffSide": "RIGHT", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/util/VmwareHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDo0MDozN1rOHwWdgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMToyNjo1NFrOH3L51A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ2MTY5Nw==", "bodyText": "check that split has two length", "url": "https://github.com/apache/cloudstack/pull/4385#discussion_r520461697", "createdAt": "2020-11-10T10:40:37Z", "author": {"login": "rhtyd"}, "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/util/VmwareHelper.java", "diffHunk": "@@ -744,4 +744,18 @@ public static XMLGregorianCalendar getXMLGregorianCalendar(final Date date, fina\n         return DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianCalendar);\n     }\n \n+    public static HostMO getHostMOFromHostName(final VmwareContext context, final String hostName) {\n+        HostMO host = null;\n+        if (com.cloud.utils.StringUtils.isNotBlank(hostName) && hostName.contains(\"@\")) {\n+            String hostMorInfo = hostName.split(\"@\")[0];\n+            if (hostMorInfo.contains(\":\")) {\n+                ManagedObjectReference morHost = new ManagedObjectReference();\n+                morHost.setType(hostMorInfo.split(\":\")[0]);\n+                morHost.setValue(hostMorInfo.split(\":\")[1]);\n+                host = new HostMO(context, morHost);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a2ec53cddcd132e038d2a762d9441a7bd74efc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYyODc1Ng==", "bodyText": "@rhtyd did that at line 751", "url": "https://github.com/apache/cloudstack/pull/4385#discussion_r527628756", "createdAt": "2020-11-20T11:26:54Z", "author": {"login": "shwstppr"}, "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/util/VmwareHelper.java", "diffHunk": "@@ -744,4 +744,18 @@ public static XMLGregorianCalendar getXMLGregorianCalendar(final Date date, fina\n         return DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianCalendar);\n     }\n \n+    public static HostMO getHostMOFromHostName(final VmwareContext context, final String hostName) {\n+        HostMO host = null;\n+        if (com.cloud.utils.StringUtils.isNotBlank(hostName) && hostName.contains(\"@\")) {\n+            String hostMorInfo = hostName.split(\"@\")[0];\n+            if (hostMorInfo.contains(\":\")) {\n+                ManagedObjectReference morHost = new ManagedObjectReference();\n+                morHost.setType(hostMorInfo.split(\":\")[0]);\n+                morHost.setValue(hostMorInfo.split(\":\")[1]);\n+                host = new HostMO(context, morHost);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ2MTY5Nw=="}, "originalCommit": {"oid": "d2a2ec53cddcd132e038d2a762d9441a7bd74efc"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODI5MzQxOnYy", "diffSide": "RIGHT", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMTozMDozNVrOH3MBFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMTozMDozNVrOH3MBFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYzMDYxNQ==", "bodyText": "@nvazquez @rhtyd @sureshanaparti can you please comment if this is okay. As per our interactions, I tried to get host harwdwareVersion using SDK but it still returns null. By default, VMware is creating VM with highest available hardwareVersion which creates an issue while migrating detached disks across cluster", "url": "https://github.com/apache/cloudstack/pull/4385#discussion_r527630615", "createdAt": "2020-11-20T11:30:35Z", "author": {"login": "shwstppr"}, "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -2207,4 +2208,44 @@ public static void createBaseFolderInDatastore(DatastoreMO dsMo, VmwareHyperviso\n             dsMo.makeDirectory(hiddenFolderPath, hyperHost.getHyperHostDatacenter());\n         }\n     }\n+\n+    public static Integer getHostHardwareVersion(VmwareHypervisorHost host) {\n+        Integer version = null;\n+        HostMO hostMo = new HostMO(host.getContext(), host.getMor());\n+        ComputeResourceConfigInfo info = null;\n+        try {\n+            info = hostMo.getHostConfigInfo();\n+        } catch (Exception ignored) {}\n+        if (info != null) {\n+            version = Integer.valueOf(info.getDefaultHardwareVersionKey());\n+        } else {\n+            String hostApiVersion = \"\";\n+            try {\n+                hostApiVersion = hostMo.getHostAboutInfo().getApiVersion();\n+            } catch (Exception ignored) {}\n+            if (hostApiVersion == null) {\n+                hostApiVersion = \"\";\n+            }\n+            if (hostApiVersion.equalsIgnoreCase(\"7.0\")) {\n+                version = 17;\n+            } else if (hostApiVersion.equalsIgnoreCase(\"6.7\")) {\n+                version = 14;\n+            } else if (hostApiVersion.equalsIgnoreCase(\"6.5\")) {\n+                version = 13;\n+            } else if (hostApiVersion.equalsIgnoreCase(\"6.0\")) {\n+                version = 11;\n+            } else if (hostApiVersion.equalsIgnoreCase(\"5.5\")) {\n+                version = 10;\n+            } else if (hostApiVersion.equalsIgnoreCase(\"5.1\")) {\n+                version = 9;\n+            } else if (hostApiVersion.equalsIgnoreCase(\"5.0\")) {\n+                version = 8;\n+            } else if (hostApiVersion.startsWith(\"4.\")) {\n+                version = 7;\n+            } else if (hostApiVersion.equalsIgnoreCase(\"3.5\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6b1d16b4b44336cfe70d0eb6979742fb314172"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjkzMzkzOnYy", "diffSide": "RIGHT", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzo0NDoyMVrOH4YoDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjowNDowOVrOIAjmcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg4NTc3NQ==", "bodyText": "@shwstppr is it possible move this to a static map with hypervisor version & its hardware version, in this helper class ? so that it will be easy to maintain and access these versions across the VMware resource.", "url": "https://github.com/apache/cloudstack/pull/4385#discussion_r528885775", "createdAt": "2020-11-23T17:44:21Z", "author": {"login": "sureshanaparti"}, "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -2207,4 +2207,36 @@ public static void createBaseFolderInDatastore(DatastoreMO dsMo, VmwareHyperviso\n             dsMo.makeDirectory(hiddenFolderPath, hyperHost.getHyperHostDatacenter());\n         }\n     }\n+\n+    public static Integer getHostHardwareVersion(VmwareHypervisorHost host) {\n+        Integer version = null;\n+        HostMO hostMo = new HostMO(host.getContext(), host.getMor());\n+        String hostApiVersion = \"\";\n+        try {\n+            hostApiVersion = hostMo.getHostAboutInfo().getApiVersion();\n+        } catch (Exception ignored) {}\n+        if (hostApiVersion == null) {\n+            hostApiVersion = \"\";\n+        }\n+        if (hostApiVersion.equalsIgnoreCase(\"7.0\")) {\n+            version = 17;\n+        } else if (hostApiVersion.equalsIgnoreCase(\"6.7\")) {\n+            version = 14;\n+        } else if (hostApiVersion.equalsIgnoreCase(\"6.5\")) {\n+            version = 13;\n+        } else if (hostApiVersion.equalsIgnoreCase(\"6.0\")) {\n+            version = 11;\n+        } else if (hostApiVersion.equalsIgnoreCase(\"5.5\")) {\n+            version = 10;\n+        } else if (hostApiVersion.equalsIgnoreCase(\"5.1\")) {\n+            version = 9;\n+        } else if (hostApiVersion.equalsIgnoreCase(\"5.0\")) {\n+            version = 8;\n+        } else if (hostApiVersion.startsWith(\"4.\")) {\n+            version = 7;\n+        } else if (hostApiVersion.equalsIgnoreCase(\"3.5\")) {\n+            version = 4;\n+        }\n+        return version;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d50e3acd4b854d7f52244eeb64c43588ee5ef2be"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE4OTIwNA==", "bodyText": "@sureshanaparti will look into that", "url": "https://github.com/apache/cloudstack/pull/4385#discussion_r530189204", "createdAt": "2020-11-25T08:33:25Z", "author": {"login": "shwstppr"}, "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -2207,4 +2207,36 @@ public static void createBaseFolderInDatastore(DatastoreMO dsMo, VmwareHyperviso\n             dsMo.makeDirectory(hiddenFolderPath, hyperHost.getHyperHostDatacenter());\n         }\n     }\n+\n+    public static Integer getHostHardwareVersion(VmwareHypervisorHost host) {\n+        Integer version = null;\n+        HostMO hostMo = new HostMO(host.getContext(), host.getMor());\n+        String hostApiVersion = \"\";\n+        try {\n+            hostApiVersion = hostMo.getHostAboutInfo().getApiVersion();\n+        } catch (Exception ignored) {}\n+        if (hostApiVersion == null) {\n+            hostApiVersion = \"\";\n+        }\n+        if (hostApiVersion.equalsIgnoreCase(\"7.0\")) {\n+            version = 17;\n+        } else if (hostApiVersion.equalsIgnoreCase(\"6.7\")) {\n+            version = 14;\n+        } else if (hostApiVersion.equalsIgnoreCase(\"6.5\")) {\n+            version = 13;\n+        } else if (hostApiVersion.equalsIgnoreCase(\"6.0\")) {\n+            version = 11;\n+        } else if (hostApiVersion.equalsIgnoreCase(\"5.5\")) {\n+            version = 10;\n+        } else if (hostApiVersion.equalsIgnoreCase(\"5.1\")) {\n+            version = 9;\n+        } else if (hostApiVersion.equalsIgnoreCase(\"5.0\")) {\n+            version = 8;\n+        } else if (hostApiVersion.startsWith(\"4.\")) {\n+            version = 7;\n+        } else if (hostApiVersion.equalsIgnoreCase(\"3.5\")) {\n+            version = 4;\n+        }\n+        return version;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg4NTc3NQ=="}, "originalCommit": {"oid": "d50e3acd4b854d7f52244eeb64c43588ee5ef2be"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1NDE5NA==", "bodyText": "@sureshanaparti added change here, fa661f3\nplease check", "url": "https://github.com/apache/cloudstack/pull/4385#discussion_r537454194", "createdAt": "2020-12-07T12:04:09Z", "author": {"login": "shwstppr"}, "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -2207,4 +2207,36 @@ public static void createBaseFolderInDatastore(DatastoreMO dsMo, VmwareHyperviso\n             dsMo.makeDirectory(hiddenFolderPath, hyperHost.getHyperHostDatacenter());\n         }\n     }\n+\n+    public static Integer getHostHardwareVersion(VmwareHypervisorHost host) {\n+        Integer version = null;\n+        HostMO hostMo = new HostMO(host.getContext(), host.getMor());\n+        String hostApiVersion = \"\";\n+        try {\n+            hostApiVersion = hostMo.getHostAboutInfo().getApiVersion();\n+        } catch (Exception ignored) {}\n+        if (hostApiVersion == null) {\n+            hostApiVersion = \"\";\n+        }\n+        if (hostApiVersion.equalsIgnoreCase(\"7.0\")) {\n+            version = 17;\n+        } else if (hostApiVersion.equalsIgnoreCase(\"6.7\")) {\n+            version = 14;\n+        } else if (hostApiVersion.equalsIgnoreCase(\"6.5\")) {\n+            version = 13;\n+        } else if (hostApiVersion.equalsIgnoreCase(\"6.0\")) {\n+            version = 11;\n+        } else if (hostApiVersion.equalsIgnoreCase(\"5.5\")) {\n+            version = 10;\n+        } else if (hostApiVersion.equalsIgnoreCase(\"5.1\")) {\n+            version = 9;\n+        } else if (hostApiVersion.equalsIgnoreCase(\"5.0\")) {\n+            version = 8;\n+        } else if (hostApiVersion.startsWith(\"4.\")) {\n+            version = 7;\n+        } else if (hostApiVersion.equalsIgnoreCase(\"3.5\")) {\n+            version = 4;\n+        }\n+        return version;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg4NTc3NQ=="}, "originalCommit": {"oid": "d50e3acd4b854d7f52244eeb64c43588ee5ef2be"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NTMwNTcxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/cloudstack/api/command/admin/systemvm/MigrateSystemVMCmd.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxMjoxMzowN1rOIaUMfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxMjoxMzowN1rOIaUMfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDQ2NDc2Nw==", "bodyText": "@shwstppr possible to optimise multiple checks for getHostId() and getStorageId() not null here ?", "url": "https://github.com/apache/cloudstack/pull/4385#discussion_r564464767", "createdAt": "2021-01-26T12:13:07Z", "author": {"login": "sureshanaparti"}, "path": "api/src/main/java/org/apache/cloudstack/api/command/admin/systemvm/MigrateSystemVMCmd.java", "diffHunk": "@@ -109,15 +122,43 @@ public String getEventDescription() {\n \n     @Override\n     public void execute() {\n+        if (getHostId() == null && getStorageId() == null) {\n+            throw new InvalidParameterValueException(\"Either hostId or storageId must be specified\");\n+        }\n \n-        Host destinationHost = _resourceService.getHost(getHostId());\n-        if (destinationHost == null) {\n-            throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id=\" + getHostId());\n+        if (getHostId() != null && getStorageId() != null) {\n+            throw new InvalidParameterValueException(\"Only one of hostId and storageId can be specified\");\n+        }\n+\n+        Host destinationHost = null;\n+        if (getHostId() != null) {\n+            destinationHost = _resourceService.getHost(getHostId());\n+            if (destinationHost == null) {\n+                throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id=\" + getHostId());\n+            }\n+            if (destinationHost.getType() != Host.Type.Routing) {\n+                throw new InvalidParameterValueException(\"The specified host(\" + destinationHost.getName() + \") is not suitable to migrate the VM, please specify another one\");\n+            }\n+            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to host Id: \" + getHostId());\n+        }\n+\n+        // OfflineMigration performed when this parameter is specified\n+        StoragePool destStoragePool = null;\n+        if (getStorageId() != null) {\n+            destStoragePool = _storageService.getStoragePool(getStorageId());\n+            if (destStoragePool == null) {\n+                throw new InvalidParameterValueException(\"Unable to find the storage pool to migrate the VM\");\n+            }\n+            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to storage pool Id: \" + getStorageId());\n         }\n         try {\n-            CallContext.current().setEventDetails(\"VM Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getVirtualMachineId()) + \" to host Id: \" + this._uuidMgr.getUuid(Host.class, getHostId()));\n             //FIXME : Should not be calling UserVmService to migrate all types of VMs - need a generic VM layer\n-            VirtualMachine migratedVm = _userVmService.migrateVirtualMachine(getVirtualMachineId(), destinationHost);\n+            VirtualMachine migratedVm = null;\n+            if (getHostId() != null) {\n+                migratedVm = _userVmService.migrateVirtualMachineWithVolume(getVirtualMachineId(), destinationHost, new HashMap<String, String>());\n+            } else if (getStorageId() != null) {\n+                migratedVm = _userVmService.vmStorageMigration(getVirtualMachineId(), destStoragePool);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "099d170d6c4202211ab55dcf8b091e8bb50973c2"}, "originalPosition": 105}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4056, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}