{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NjczMTc2", "number": 3976, "reviewThreads": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDo0NjozNVrODqaNuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOToyODo0MVrOEKb4-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzk2MjgwOnYy", "diffSide": "RIGHT", "path": "engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDo0NjozNVrOF6Ixeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDo0NjozNVrOF6Ixeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwNTQ2Ng==", "bodyText": "Minor comment: will you consider removing 'account' from the config name?", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r396505466", "createdAt": "2020-03-23T14:46:35Z", "author": {"login": "nvazquez"}, "path": "engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java", "diffHunk": "@@ -61,6 +61,12 @@\n     ConfigKey<Boolean> ResoureCountRunningVMsonly = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"resource.count.running.vms.only\", \"false\",\n             \"Count the resources of only running VMs in resource limitation.\", true);\n \n+    ConfigKey<Boolean> AllowExposeHypervisorHostnameAccoutLevel = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"allow.expose.host.hostname.account\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1262fa26d67261922b591fcc7021c114aa71f66b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDg5NTYwOnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/cloud/agent/api/routing/VmDataCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMToyNjozNVrOF8tJIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMToyNjozNVrOF8tJIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE5ODQ5Ng==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399198496", "createdAt": "2020-03-27T11:26:35Z", "author": {"login": "DaanHoogland"}, "path": "core/src/main/java/com/cloud/agent/api/routing/VmDataCommand.java", "diffHunk": "@@ -72,5 +72,4 @@ public String getVmIpAddress() {\n     public void addVmData(String folder, String file, String contents) {\n         vmData.add(new String[] {folder, file, contents});\n     }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6679e3dd4fd6f5254b6e80391ea84fdbc496848a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDkwMDQ4OnYy", "diffSide": "RIGHT", "path": "engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMToyODoyMVrOF8tMOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoxNjo1M1rOF8wpuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE5OTI5MQ==", "bodyText": "spello : var name ending in AccoutLevel, missing an 'n'", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399199291", "createdAt": "2020-03-27T11:28:21Z", "author": {"login": "DaanHoogland"}, "path": "engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java", "diffHunk": "@@ -61,6 +61,12 @@\n     ConfigKey<Boolean> ResoureCountRunningVMsonly = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"resource.count.running.vms.only\", \"false\",\n             \"Count the resources of only running VMs in resource limitation.\", true);\n \n+    ConfigKey<Boolean> AllowExposeHypervisorHostnameAccoutLevel = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"allow.expose.host.hostname\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6679e3dd4fd6f5254b6e80391ea84fdbc496848a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1NTk5Mg==", "bodyText": "also, I know this was countered before, but I woud like to see account in the name of this setting. i.e. \"account.allow.expose.host.hostname\" and \"general.allow.expose.host.hostname\"", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399255992", "createdAt": "2020-03-27T13:16:53Z", "author": {"login": "DaanHoogland"}, "path": "engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java", "diffHunk": "@@ -61,6 +61,12 @@\n     ConfigKey<Boolean> ResoureCountRunningVMsonly = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"resource.count.running.vms.only\", \"false\",\n             \"Count the resources of only running VMs in resource limitation.\", true);\n \n+    ConfigKey<Boolean> AllowExposeHypervisorHostnameAccoutLevel = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"allow.expose.host.hostname\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE5OTI5MQ=="}, "originalCommit": {"oid": "6679e3dd4fd6f5254b6e80391ea84fdbc496848a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDkwNDU5OnYy", "diffSide": "RIGHT", "path": "engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMToyOTozNVrOF8tOrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTowMzowM1rOF-kBEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE5OTkxOQ==", "bodyText": "Two config keys at different scopes, with the same name. I will want to see tests for that (unit and integration)\nIt might work but is not by design and we need to protect this or signal if it fails after any kind of refactor.", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399199919", "createdAt": "2020-03-27T11:29:35Z", "author": {"login": "DaanHoogland"}, "path": "engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java", "diffHunk": "@@ -61,6 +61,12 @@\n     ConfigKey<Boolean> ResoureCountRunningVMsonly = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"resource.count.running.vms.only\", \"false\",\n             \"Count the resources of only running VMs in resource limitation.\", true);\n \n+    ConfigKey<Boolean> AllowExposeHypervisorHostnameAccoutLevel = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"allow.expose.host.hostname\",\n+            \"false\", \"If set to true, it allows the hypervisor host name on which the VM is spawned on to be exposed to the VM\", true, ConfigKey.Scope.Account);\n+\n+    ConfigKey<Boolean> AllowExposeHypervisorHostname = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"allow.expose.host.hostname\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6679e3dd4fd6f5254b6e80391ea84fdbc496848a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0NDEzNg==", "bodyText": "This is why I asked to remove the 'account' name from the configuration. It was only one configuration with scope = 'Account' so it could be overridden per account, and if not, the global value is used", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r401144136", "createdAt": "2020-03-31T18:59:34Z", "author": {"login": "nvazquez"}, "path": "engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java", "diffHunk": "@@ -61,6 +61,12 @@\n     ConfigKey<Boolean> ResoureCountRunningVMsonly = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"resource.count.running.vms.only\", \"false\",\n             \"Count the resources of only running VMs in resource limitation.\", true);\n \n+    ConfigKey<Boolean> AllowExposeHypervisorHostnameAccoutLevel = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"allow.expose.host.hostname\",\n+            \"false\", \"If set to true, it allows the hypervisor host name on which the VM is spawned on to be exposed to the VM\", true, ConfigKey.Scope.Account);\n+\n+    ConfigKey<Boolean> AllowExposeHypervisorHostname = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"allow.expose.host.hostname\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE5OTkxOQ=="}, "originalCommit": {"oid": "6679e3dd4fd6f5254b6e80391ea84fdbc496848a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0NjEzMQ==", "bodyText": "Ignore my comment, went through the requirements and both are needed", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r401146131", "createdAt": "2020-03-31T19:03:03Z", "author": {"login": "nvazquez"}, "path": "engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java", "diffHunk": "@@ -61,6 +61,12 @@\n     ConfigKey<Boolean> ResoureCountRunningVMsonly = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"resource.count.running.vms.only\", \"false\",\n             \"Count the resources of only running VMs in resource limitation.\", true);\n \n+    ConfigKey<Boolean> AllowExposeHypervisorHostnameAccoutLevel = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"allow.expose.host.hostname\",\n+            \"false\", \"If set to true, it allows the hypervisor host name on which the VM is spawned on to be exposed to the VM\", true, ConfigKey.Scope.Account);\n+\n+    ConfigKey<Boolean> AllowExposeHypervisorHostname = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"allow.expose.host.hostname\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE5OTkxOQ=="}, "originalCommit": {"oid": "6679e3dd4fd6f5254b6e80391ea84fdbc496848a"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTI4NDYxOnYy", "diffSide": "RIGHT", "path": "engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoyMTo1MlrOF8w1Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNToyMTo1NFrOF81_SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1ODkyMg==", "bodyText": "it looks like both must be true so the account level cannot be used to override the global setting. Is that intentional? (this is both a functional as well as a technical question)", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399258922", "createdAt": "2020-03-27T13:21:52Z", "author": {"login": "DaanHoogland"}, "path": "engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java", "diffHunk": "@@ -2802,9 +2802,10 @@ private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHo\n                 if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                     final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                     boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n-\n+                    final Account caller = CallContext.current().getCallingAccount();\n+                    String destHostname = (VirtualMachineManager.AllowExposeHypervisorHostname.value() && VirtualMachineManager.AllowExposeHypervisorHostnameAccoutLevel.valueIn(caller.getId())) ? destination.getHost().getName() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6679e3dd4fd6f5254b6e80391ea84fdbc496848a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0MzQzMw==", "bodyText": "Yes @DaanHoogland , both need to be true (i.e., the Global value and the account scope level) for it to show the hypervisor hostname", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399343433", "createdAt": "2020-03-27T15:21:54Z", "author": {"login": "Pearl1594"}, "path": "engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java", "diffHunk": "@@ -2802,9 +2802,10 @@ private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHo\n                 if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                     final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                     boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n-\n+                    final Account caller = CallContext.current().getCallingAccount();\n+                    String destHostname = (VirtualMachineManager.AllowExposeHypervisorHostname.value() && VirtualMachineManager.AllowExposeHypervisorHostnameAccoutLevel.valueIn(caller.getId())) ? destination.getHost().getName() : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1ODkyMg=="}, "originalCommit": {"oid": "6679e3dd4fd6f5254b6e80391ea84fdbc496848a"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTMzODgzOnYy", "diffSide": "RIGHT", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzozNDoxMFrOF8xVuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNToyMzowN1rOF82C0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2NzI1OQ==", "bodyText": "in view of what this method does, the name \"addNewDisk\" seems completely wrong. Why is it named like this?", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399267259", "createdAt": "2020-03-27T13:34:10Z", "author": {"login": "DaanHoogland"}, "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -1610,6 +1612,26 @@ public void finalizeUpdateInSequence(Network network, boolean success) {\n         }\n     }\n \n+    @Override\n+    public void addNewDisk(VirtualMachineProfile vm, DeployDestination dest) throws ResourceUnavailableException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6679e3dd4fd6f5254b6e80391ea84fdbc496848a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0NDMzNg==", "bodyText": "I'll change the name of this function - meant for mainly configDrive , but it's part of UserDataServiceProvider - will make it more meaningful.", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399344336", "createdAt": "2020-03-27T15:23:07Z", "author": {"login": "Pearl1594"}, "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -1610,6 +1612,26 @@ public void finalizeUpdateInSequence(Network network, boolean success) {\n         }\n     }\n \n+    @Override\n+    public void addNewDisk(VirtualMachineProfile vm, DeployDestination dest) throws ResourceUnavailableException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2NzI1OQ=="}, "originalCommit": {"oid": "6679e3dd4fd6f5254b6e80391ea84fdbc496848a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTM3MDk3OnYy", "diffSide": "RIGHT", "path": "engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzo0MjowMlrOF8xp4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzo0MjowMlrOF8xp4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI3MjQxOA==", "bodyText": "please add javadoc. the purpose of this method is not obvious from the name, parameters or return type.", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399272418", "createdAt": "2020-03-27T13:42:02Z", "author": {"login": "DaanHoogland"}, "path": "engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java", "diffHunk": "@@ -294,6 +294,8 @@ void implementNetworkElementsAndResources(DeployDestination dest, ReservationCon\n \n     void finalizeUpdateInSequence(Network network, boolean success);\n \n+    void addNewDisk(VirtualMachineProfile vm, DeployDestination dest) throws ResourceUnavailableException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6679e3dd4fd6f5254b6e80391ea84fdbc496848a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTM5Mzk4OnYy", "diffSide": "RIGHT", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzo0Nzo0OFrOF8x4Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzo0Nzo0OFrOF8x4Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI3NjExOQ==", "bodyText": "so if we have an element that fits, do we still iterate over the rest, or should we break on the outer if? which makes me think this method has a high complexity can you disect it for readability, please?", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399276119", "createdAt": "2020-03-27T13:47:48Z", "author": {"login": "DaanHoogland"}, "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -1610,6 +1612,26 @@ public void finalizeUpdateInSequence(Network network, boolean success) {\n         }\n     }\n \n+    @Override\n+    public void addNewDisk(VirtualMachineProfile vm, DeployDestination dest) throws ResourceUnavailableException {\n+        final List<NicVO> nics = _nicDao.listByVmId(vm.getId());\n+        for (final NicVO nic : nics) {\n+            final NetworkVO network = _networksDao.findById(nic.getNetworkId());\n+            final Integer networkRate = _networkModel.getNetworkRate(network.getId(), vm.getId());\n+            final NicProfile profile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), networkRate, _networkModel.isSecurityGroupSupportedInNetwork(network),\n+                    _networkModel.getNetworkTag(vm.getHypervisorType(), network));\n+            for (final NetworkElement element : networkElements) {\n+                if (_networkModel.areServicesSupportedInNetwork(network.getId(), Service.UserData)\n+                        && element instanceof UserDataServiceProvider &&\n+                        (element instanceof ConfigDriveNetworkElement || element instanceof VirtualRouterElement)) {\n+                    final UserDataServiceProvider sp = (UserDataServiceProvider) element;\n+                    if (!sp.addNewDisk(profile, network, vm, dest)) {\n+                        throw new CloudRuntimeException(\"Failed to create New Iso Disk\");\n+                    }\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6679e3dd4fd6f5254b6e80391ea84fdbc496848a"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTM5ODAxOnYy", "diffSide": "RIGHT", "path": "engine/schema/src/main/java/com/cloud/vm/dao/UserVmDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzo0ODozN1rOF8x6uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzo0ODozN1rOF8x6uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI3NjcyOA==", "bodyText": "space spilled over in the file ;)", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399276728", "createdAt": "2020-03-27T13:48:37Z", "author": {"login": "DaanHoogland"}, "path": "engine/schema/src/main/java/com/cloud/vm/dao/UserVmDaoImpl.java", "diffHunk": "@@ -1,4 +1,4 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n+    // Licensed to the Apache Software Foundation (ASF) under one", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6679e3dd4fd6f5254b6e80391ea84fdbc496848a"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTQxNjI3OnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzo1MzowM1rOF8yGRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzo1MzowM1rOF8yGRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI3OTY4NA==", "bodyText": "this method is already 200 lines, please add your logic in a new method/class or module.", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399279684", "createdAt": "2020-03-27T13:53:03Z", "author": {"login": "DaanHoogland"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -115,6 +118,30 @@ public Answer execute(final MigrateCommand command, final LibvirtComputingResour\n             conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n             ifaces = libvirtComputingResource.getInterfaces(conn, vmName);\n             disks = libvirtComputingResource.getDisks(conn, vmName);\n+\n+            String oldIsoVolumePath = null;\n+            for (DiskDef disk : disks) {\n+                if (disk.getDiskPath() != null && disk.getDiskPath().contains(vmName)) {\n+                    oldIsoVolumePath = disk.getDiskPath();\n+                    break;\n+                }\n+            }\n+\n+            VirtualMachineTO to = command.getVirtualMachine();\n+\n+            DiskTO newDisk = null;\n+            for (DiskTO disk : to.getDisks()) {\n+                if (disk.getPath() != null && disk.getPath().contains(\"configdrive\")) {\n+                    newDisk = disk;\n+                    break;\n+                }\n+            }\n+\n+            String newIsoVolumePath = null;\n+            if (newDisk != null) {\n+                 newIsoVolumePath = libvirtComputingResource.getVolumePath(conn, newDisk);\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTQ0NjgxOnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDowMDoxOFrOF8yZzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo0NDoxOFrOF8285Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI4NDY4Nw==", "bodyText": "this means the VM could not have another iso mounted?", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399284687", "createdAt": "2020-03-27T14:00:18Z", "author": {"login": "DaanHoogland"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -115,6 +118,30 @@ public Answer execute(final MigrateCommand command, final LibvirtComputingResour\n             conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n             ifaces = libvirtComputingResource.getInterfaces(conn, vmName);\n             disks = libvirtComputingResource.getDisks(conn, vmName);\n+\n+            String oldIsoVolumePath = null;\n+            for (DiskDef disk : disks) {\n+                if (disk.getDiskPath() != null && disk.getDiskPath().contains(vmName)) {\n+                    oldIsoVolumePath = disk.getDiskPath();\n+                    break;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1OTIwNQ==", "bodyText": "@DaanHoogland This actually tries to address an issue that exists which is that when there is more than 1 datastore to chose from and the disk gets added to one that isn't the same as before, it'll change the following mount point to the new value:", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399359205", "createdAt": "2020-03-27T15:44:18Z", "author": {"login": "Pearl1594"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -115,6 +118,30 @@ public Answer execute(final MigrateCommand command, final LibvirtComputingResour\n             conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n             ifaces = libvirtComputingResource.getInterfaces(conn, vmName);\n             disks = libvirtComputingResource.getDisks(conn, vmName);\n+\n+            String oldIsoVolumePath = null;\n+            for (DiskDef disk : disks) {\n+                if (disk.getDiskPath() != null && disk.getDiskPath().contains(vmName)) {\n+                    oldIsoVolumePath = disk.getDiskPath();\n+                    break;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI4NDY4Nw=="}, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTQ3MDI1OnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDowNTo1MVrOF8yofw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDowNTo1MVrOF8yofw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI4ODQ0Nw==", "bodyText": "please extract, and if not to much trouble other bits as well.", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399288447", "createdAt": "2020-03-27T14:05:51Z", "author": {"login": "DaanHoogland"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -141,6 +168,10 @@ Use VIR_DOMAIN_XML_SECURE (value = 1) prior to v1.0.0.\n             xmlDesc = dm.getXMLDesc(xmlFlag);\n             xmlDesc = replaceIpForVNCInDescFile(xmlDesc, target);\n \n+            if (newIsoVolumePath != null && oldIsoVolumePath != newIsoVolumePath) {\n+                s_logger.debug(\"editing mount path\");\n+                xmlDesc = replaceDiskSourceFile(xmlDesc, newIsoVolumePath, vmName);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTU0MDc5OnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyMjowNVrOF8zUaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyMjowNVrOF8zUaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5OTY4OQ==", "bodyText": "this is a c&p of a bad pattern for two reasons:\n\nthe message if available should be explaining that it is a uri syntax issue.\nas in most of the other catch clauses this can be replaced by something like String.format(\"%s: %s\", e.getClass().getSimpleName(), e.getMessage()). And we should then unify the catch clauses.\n\nI suggest replacing with (something like):\n        } catch (final TimeoutException e) {\n            s_logger.debug(\"Timed out while migrating domain: \" + e.getMessage());\n            result = e.getMessage();\n        } catch (final IOException\n                | ParserConfigurationException\n                | SAXException\n                | TransformerException\n                | URISyntaxException e) {\n            s_logger.debug(String.format(\"%s: %s\", e.getClass().getSimpleName(), e.getMessage()));\n            result = \"Exception during migrate, see hypervisor for details; \" + e.getMessage();\n        } finally {", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399299689", "createdAt": "2020-03-27T14:22:05Z", "author": {"login": "DaanHoogland"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -250,6 +281,9 @@ Use VIR_DOMAIN_XML_SECURE (value = 1) prior to v1.0.0.\n         } catch (final TransformerException e) {\n             s_logger.debug(\"TransformerException: \" + e.getMessage());\n             result = e.getMessage();\n+        } catch (URISyntaxException e) {\n+            s_logger.debug(\"UriSyntaxException: \"+ e.getMessage());\n+            result = e.getMessage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTU0ODkyOnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyMzo1NVrOF8zZeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyMzo1NVrOF8zZeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwMDk4NA==", "bodyText": "for - if - for - if - for - if - if, this should definitely be dissected and simplified.", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399300984", "createdAt": "2020-03-27T14:23:55Z", "author": {"login": "DaanHoogland"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -572,4 +606,49 @@ private String getXml(Document doc) throws TransformerException {\n \n         return byteArrayOutputStream.toString();\n     }\n+\n+    private String replaceDiskSourceFile(String xmlDesc, String isoPath, String vmName) throws IOException, SAXException, ParserConfigurationException, TransformerException {\n+        InputStream in = IOUtils.toInputStream(xmlDesc);\n+\n+        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n+        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n+        Document doc = docBuilder.parse(in);\n+\n+        // Get the root element\n+        Node domainNode = doc.getFirstChild();\n+\n+        NodeList domainChildNodes = domainNode.getChildNodes();\n+\n+        for (int i = 0; i < domainChildNodes.getLength(); i++) {\n+            Node domainChildNode = domainChildNodes.item(i);\n+\n+            if (\"devices\".equals(domainChildNode.getNodeName())) {\n+                NodeList devicesChildNodes = domainChildNode.getChildNodes();\n+\n+                for (int x = 0; x < devicesChildNodes.getLength(); x++) {\n+                    Node deviceChildNode = devicesChildNodes.item(x);\n+                    if (\"disk\".equals(deviceChildNode.getNodeName())) {\n+                        Node diskNode = deviceChildNode;\n+                        String sourceText = getSourceText(diskNode);\n+                        NodeList diskChildNodes = diskNode.getChildNodes();\n+                        for (int z = 0; z < diskChildNodes.getLength(); z++) {\n+                            Node diskChildNode = diskChildNodes.item(z);\n+                            if (\"source\".equals(diskChildNode.getNodeName())) {\n+                                Node sourceNode = diskChildNode;\n+                                NamedNodeMap sourceNodeAttributes = sourceNode.getAttributes();\n+                                Node sourceNodeAttribute = sourceNodeAttributes.getNamedItem(\"file\");\n+                                if ( sourceNodeAttribute.getNodeValue().contains(vmName)) {\n+                                    diskNode.removeChild(diskChildNode);\n+                                    Element newChildSourceNode = doc.createElement(\"source\");\n+                                    newChildSourceNode.setAttribute(\"file\", isoPath);\n+                                    diskNode.appendChild(newChildSourceNode);\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return getXml(doc);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTU2NjkxOnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyNzozNlrOF8zkMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyNzozNlrOF8zkMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwMzczMA==", "bodyText": "and finally for (Node diskChildNode : diskChildNodes)", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399303730", "createdAt": "2020-03-27T14:27:36Z", "author": {"login": "DaanHoogland"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -572,4 +606,49 @@ private String getXml(Document doc) throws TransformerException {\n \n         return byteArrayOutputStream.toString();\n     }\n+\n+    private String replaceDiskSourceFile(String xmlDesc, String isoPath, String vmName) throws IOException, SAXException, ParserConfigurationException, TransformerException {\n+        InputStream in = IOUtils.toInputStream(xmlDesc);\n+\n+        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n+        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n+        Document doc = docBuilder.parse(in);\n+\n+        // Get the root element\n+        Node domainNode = doc.getFirstChild();\n+\n+        NodeList domainChildNodes = domainNode.getChildNodes();\n+\n+        for (int i = 0; i < domainChildNodes.getLength(); i++) {\n+            Node domainChildNode = domainChildNodes.item(i);\n+\n+            if (\"devices\".equals(domainChildNode.getNodeName())) {\n+                NodeList devicesChildNodes = domainChildNode.getChildNodes();\n+\n+                for (int x = 0; x < devicesChildNodes.getLength(); x++) {\n+                    Node deviceChildNode = devicesChildNodes.item(x);\n+                    if (\"disk\".equals(deviceChildNode.getNodeName())) {\n+                        Node diskNode = deviceChildNode;\n+                        String sourceText = getSourceText(diskNode);\n+                        NodeList diskChildNodes = diskNode.getChildNodes();\n+                        for (int z = 0; z < diskChildNodes.getLength(); z++) {\n+                            Node diskChildNode = diskChildNodes.item(z);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTU3NTQ4OnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyOToxMFrOF8zpPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyOToxMFrOF8zpPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwNTAyMQ==", "bodyText": "extract from here? by name of process- or search- or replaceChildDevices()?", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399305021", "createdAt": "2020-03-27T14:29:10Z", "author": {"login": "DaanHoogland"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -572,4 +606,49 @@ private String getXml(Document doc) throws TransformerException {\n \n         return byteArrayOutputStream.toString();\n     }\n+\n+    private String replaceDiskSourceFile(String xmlDesc, String isoPath, String vmName) throws IOException, SAXException, ParserConfigurationException, TransformerException {\n+        InputStream in = IOUtils.toInputStream(xmlDesc);\n+\n+        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n+        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n+        Document doc = docBuilder.parse(in);\n+\n+        // Get the root element\n+        Node domainNode = doc.getFirstChild();\n+\n+        NodeList domainChildNodes = domainNode.getChildNodes();\n+\n+        for (int i = 0; i < domainChildNodes.getLength(); i++) {\n+            Node domainChildNode = domainChildNodes.item(i);\n+\n+            if (\"devices\".equals(domainChildNode.getNodeName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTU4MjQ4OnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDozMDozNVrOF8zthg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDozMDozNVrOF8zthg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwNjExOA==", "bodyText": "extract here again (as process, search, replaceChildDisks())?", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399306118", "createdAt": "2020-03-27T14:30:35Z", "author": {"login": "DaanHoogland"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -572,4 +606,49 @@ private String getXml(Document doc) throws TransformerException {\n \n         return byteArrayOutputStream.toString();\n     }\n+\n+    private String replaceDiskSourceFile(String xmlDesc, String isoPath, String vmName) throws IOException, SAXException, ParserConfigurationException, TransformerException {\n+        InputStream in = IOUtils.toInputStream(xmlDesc);\n+\n+        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n+        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n+        Document doc = docBuilder.parse(in);\n+\n+        // Get the root element\n+        Node domainNode = doc.getFirstChild();\n+\n+        NodeList domainChildNodes = domainNode.getChildNodes();\n+\n+        for (int i = 0; i < domainChildNodes.getLength(); i++) {\n+            Node domainChildNode = domainChildNodes.item(i);\n+\n+            if (\"devices\".equals(domainChildNode.getNodeName())) {\n+                NodeList devicesChildNodes = domainChildNode.getChildNodes();\n+\n+                for (int x = 0; x < devicesChildNodes.getLength(); x++) {\n+                    Node deviceChildNode = devicesChildNodes.item(x);\n+                    if (\"disk\".equals(deviceChildNode.getNodeName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTYwMDQ1OnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDozNDoyOVrOF8z4Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDozNDoyOVrOF8z4Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwODg5OA==", "bodyText": "are we sure there will be only one? how about a VM with multiple disks/isos mounted? are we sure this contains() is selective enough?", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399308898", "createdAt": "2020-03-27T14:34:29Z", "author": {"login": "DaanHoogland"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -572,4 +606,49 @@ private String getXml(Document doc) throws TransformerException {\n \n         return byteArrayOutputStream.toString();\n     }\n+\n+    private String replaceDiskSourceFile(String xmlDesc, String isoPath, String vmName) throws IOException, SAXException, ParserConfigurationException, TransformerException {\n+        InputStream in = IOUtils.toInputStream(xmlDesc);\n+\n+        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n+        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n+        Document doc = docBuilder.parse(in);\n+\n+        // Get the root element\n+        Node domainNode = doc.getFirstChild();\n+\n+        NodeList domainChildNodes = domainNode.getChildNodes();\n+\n+        for (int i = 0; i < domainChildNodes.getLength(); i++) {\n+            Node domainChildNode = domainChildNodes.item(i);\n+\n+            if (\"devices\".equals(domainChildNode.getNodeName())) {\n+                NodeList devicesChildNodes = domainChildNode.getChildNodes();\n+\n+                for (int x = 0; x < devicesChildNodes.getLength(); x++) {\n+                    Node deviceChildNode = devicesChildNodes.item(x);\n+                    if (\"disk\".equals(deviceChildNode.getNodeName())) {\n+                        Node diskNode = deviceChildNode;\n+                        String sourceText = getSourceText(diskNode);\n+                        NodeList diskChildNodes = diskNode.getChildNodes();\n+                        for (int z = 0; z < diskChildNodes.getLength(); z++) {\n+                            Node diskChildNode = diskChildNodes.item(z);\n+                            if (\"source\".equals(diskChildNode.getNodeName())) {\n+                                Node sourceNode = diskChildNode;\n+                                NamedNodeMap sourceNodeAttributes = sourceNode.getAttributes();\n+                                Node sourceNodeAttribute = sourceNodeAttributes.getNamedItem(\"file\");\n+                                if ( sourceNodeAttribute.getNodeValue().contains(vmName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTYwNDYwOnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDozNToyNVrOF8z6zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDozNToyNVrOF8z6zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwOTUxOA==", "bodyText": "and how about when we are sure we have the right disk, do we just continue processing or should we escape somehow and not process the rest?", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399309518", "createdAt": "2020-03-27T14:35:25Z", "author": {"login": "DaanHoogland"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -572,4 +606,49 @@ private String getXml(Document doc) throws TransformerException {\n \n         return byteArrayOutputStream.toString();\n     }\n+\n+    private String replaceDiskSourceFile(String xmlDesc, String isoPath, String vmName) throws IOException, SAXException, ParserConfigurationException, TransformerException {\n+        InputStream in = IOUtils.toInputStream(xmlDesc);\n+\n+        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n+        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n+        Document doc = docBuilder.parse(in);\n+\n+        // Get the root element\n+        Node domainNode = doc.getFirstChild();\n+\n+        NodeList domainChildNodes = domainNode.getChildNodes();\n+\n+        for (int i = 0; i < domainChildNodes.getLength(); i++) {\n+            Node domainChildNode = domainChildNodes.item(i);\n+\n+            if (\"devices\".equals(domainChildNode.getNodeName())) {\n+                NodeList devicesChildNodes = domainChildNode.getChildNodes();\n+\n+                for (int x = 0; x < devicesChildNodes.getLength(); x++) {\n+                    Node deviceChildNode = devicesChildNodes.item(x);\n+                    if (\"disk\".equals(deviceChildNode.getNodeName())) {\n+                        Node diskNode = deviceChildNode;\n+                        String sourceText = getSourceText(diskNode);\n+                        NodeList diskChildNodes = diskNode.getChildNodes();\n+                        for (int z = 0; z < diskChildNodes.getLength(); z++) {\n+                            Node diskChildNode = diskChildNodes.item(z);\n+                            if (\"source\".equals(diskChildNode.getNodeName())) {\n+                                Node sourceNode = diskChildNode;\n+                                NamedNodeMap sourceNodeAttributes = sourceNode.getAttributes();\n+                                Node sourceNodeAttribute = sourceNodeAttributes.getNamedItem(\"file\");\n+                                if ( sourceNodeAttribute.getNodeValue().contains(vmName)) {\n+                                    diskNode.removeChild(diskChildNode);\n+                                    Element newChildSourceNode = doc.createElement(\"source\");\n+                                    newChildSourceNode.setAttribute(\"file\", isoPath);\n+                                    diskNode.appendChild(newChildSourceNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTYxNzE1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/network/element/CloudZonesNetworkElement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDozODoxN1rOF80Cog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDozODoxN1rOF80Cog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxMTUyMg==", "bodyText": "again, no override but a double condition. It also constitutes double code, this is a value that should be returned by the VirtualMachineManager and not be implemented in two places, obviously.", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399311522", "createdAt": "2020-03-27T14:38:17Z", "author": {"login": "DaanHoogland"}, "path": "server/src/main/java/com/cloud/network/element/CloudZonesNetworkElement.java", "diffHunk": "@@ -217,11 +220,12 @@ public boolean addPasswordAndUserdata(Network network, NicProfile nic, VirtualMa\n             }\n             String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(uservm.getServiceOfferingId()).getDisplayText();\n             String zoneName = _dcDao.findById(network.getDataCenterId()).getName();\n-\n+            final Account caller = CallContext.current().getCallingAccount();\n+            String destHostname = (VirtualMachineManager.AllowExposeHypervisorHostname.value() && VirtualMachineManager.AllowExposeHypervisorHostnameAccountLevel.valueIn(caller.getId())) ? dest.getHost().getName() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTYzMTgwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo0MToyOFrOF80L-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo0MToyOFrOF80L-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxMzkxNA==", "bodyText": "triple code ;)", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399313914", "createdAt": "2020-03-27T14:41:28Z", "author": {"login": "DaanHoogland"}, "path": "server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java", "diffHunk": "@@ -327,6 +355,30 @@ public void rollbackMigration(NicProfile nic, Network network, VirtualMachinePro\n     public void commitMigration(NicProfile nic, Network network, VirtualMachineProfile vm, ReservationContext src, ReservationContext dst) {\n     }\n \n+    private void recreateConfigDriveIso(NicProfile nic, Network network, VirtualMachineProfile vm, DeployDestination dest) throws ResourceUnavailableException {\n+        if (nic.isDefaultNic() && _networkModel.getUserDataUpdateProvider(network).getProvider().equals(Provider.ConfigDrive)) {\n+            DiskTO diskToUse = null;\n+            for (DiskTO disk : vm.getDisks()) {\n+                if (disk.getType() == Volume.Type.ISO && disk.getPath() != null && disk.getPath().contains(\"configdrive\")) {\n+                    diskToUse = disk;\n+                    break;\n+                }\n+            }\n+            final UserVmVO userVm = _userVmDao.findById(vm.getId());\n+            final Account caller = CallContext.current().getCallingAccount();\n+\n+            if (userVm != null) {\n+                final boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(userVm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n+                String destHostname = (VirtualMachineManager.AllowExposeHypervisorHostname.value() && VirtualMachineManager.AllowExposeHypervisorHostnameAccountLevel.valueIn(caller.getId())) ? dest.getHost().getName() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTYzNzA1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo0MjozNVrOF80PRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo0MjozNVrOF80PRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxNDc1OA==", "bodyText": "seems like this statement could do with its own method for readability (will be optimised out by the compiler anyway).", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399314758", "createdAt": "2020-03-27T14:42:35Z", "author": {"login": "DaanHoogland"}, "path": "server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java", "diffHunk": "@@ -327,6 +355,30 @@ public void rollbackMigration(NicProfile nic, Network network, VirtualMachinePro\n     public void commitMigration(NicProfile nic, Network network, VirtualMachineProfile vm, ReservationContext src, ReservationContext dst) {\n     }\n \n+    private void recreateConfigDriveIso(NicProfile nic, Network network, VirtualMachineProfile vm, DeployDestination dest) throws ResourceUnavailableException {\n+        if (nic.isDefaultNic() && _networkModel.getUserDataUpdateProvider(network).getProvider().equals(Provider.ConfigDrive)) {\n+            DiskTO diskToUse = null;\n+            for (DiskTO disk : vm.getDisks()) {\n+                if (disk.getType() == Volume.Type.ISO && disk.getPath() != null && disk.getPath().contains(\"configdrive\")) {\n+                    diskToUse = disk;\n+                    break;\n+                }\n+            }\n+            final UserVmVO userVm = _userVmDao.findById(vm.getId());\n+            final Account caller = CallContext.current().getCallingAccount();\n+\n+            if (userVm != null) {\n+                final boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(userVm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTY3MDA4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo0OTo0MlrOF80kKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo0OTo0MlrOF80kKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyMDEwNA==", "bodyText": "can you put in getOrDecideOnWhichDataStoreToUseOrSomeNameLikeThat()?", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399320104", "createdAt": "2020-03-27T14:49:42Z", "author": {"login": "DaanHoogland"}, "path": "server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java", "diffHunk": "@@ -424,8 +476,25 @@ private Long findAgentId(VirtualMachineProfile profile, DeployDestination dest,\n         return agentId;\n     }\n \n-    private boolean createConfigDriveIso(VirtualMachineProfile profile, DeployDestination dest) throws ResourceUnavailableException {\n-        final DataStore dataStore = findDataStore(profile, dest);\n+    private boolean createConfigDriveIso(VirtualMachineProfile profile, DeployDestination dest, DiskTO disk) throws ResourceUnavailableException {\n+        DataStore dataStore = null;\n+        if (disk != null) {\n+            String dId = disk.getData().getDataStore().getUuid();\n+            if (VirtualMachineManager.VmConfigDriveOnPrimaryPool.value()) {\n+                dataStore = _dataStoreMgr.getDataStore(dId, DataStoreRole.Primary);\n+            } else {\n+                List<DataStore> dataStores = _dataStoreMgr.listImageStores();\n+                String url = disk.getData().getDataStore().getUrl();\n+                for(DataStore ds : dataStores) {\n+                    if (url.equals(ds.getUri()) && DataStoreRole.Image.equals(ds.getRole())) {\n+                        dataStore = ds;\n+                        break;\n+                    }\n+                }\n+            }\n+        } else {\n+            dataStore = findDataStore(profile, dest);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTY3MzE1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo1MDoyNFrOF80mKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo1MToxNFrOF80obw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyMDYxNw==", "bodyText": "quadruple code...", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399320617", "createdAt": "2020-03-27T14:50:24Z", "author": {"login": "DaanHoogland"}, "path": "server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java", "diffHunk": "@@ -514,9 +584,11 @@ private boolean configureConfigDriveData(final VirtualMachineProfile profile, fi\n             final String sshPublicKey = getSshKey(profile);\n             final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n             boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n-\n+            String hostname = _hostDao.findById(vm.getHostId()).getName();\n+            final Account caller = CallContext.current().getCallingAccount();\n+            String destHostname = (VirtualMachineManager.AllowExposeHypervisorHostname.value() && VirtualMachineManager.AllowExposeHypervisorHostnameAccountLevel.valueIn(caller.getId())) ? hostname : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyMTE5OQ==", "bodyText": "maybe the hostname retrieval and caller account should be added inside the call as well.", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399321199", "createdAt": "2020-03-27T14:51:14Z", "author": {"login": "DaanHoogland"}, "path": "server/src/main/java/com/cloud/network/element/ConfigDriveNetworkElement.java", "diffHunk": "@@ -514,9 +584,11 @@ private boolean configureConfigDriveData(final VirtualMachineProfile profile, fi\n             final String sshPublicKey = getSshKey(profile);\n             final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n             boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n-\n+            String hostname = _hostDao.findById(vm.getHostId()).getName();\n+            final Account caller = CallContext.current().getCallingAccount();\n+            String destHostname = (VirtualMachineManager.AllowExposeHypervisorHostname.value() && VirtualMachineManager.AllowExposeHypervisorHostnameAccountLevel.valueIn(caller.getId())) ? hostname : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyMDYxNw=="}, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTcwODMzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/network/element/VirtualRouterElement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo1ODowM1rOF808Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo1ODowM1rOF808Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyNjI3MA==", "bodyText": "this one is certainly not adding any disk. we need to change that name.", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399326270", "createdAt": "2020-03-27T14:58:03Z", "author": {"login": "DaanHoogland"}, "path": "server/src/main/java/com/cloud/network/element/VirtualRouterElement.java", "diffHunk": "@@ -765,6 +772,33 @@ public boolean saveSSHKey(final Network network, final NicProfile nic, final Vir\n         return result;\n     }\n \n+    @Override\n+    public boolean addNewDisk(NicProfile nicProfile, Network network, VirtualMachineProfile vm, DeployDestination dest) throws ResourceUnavailableException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTcxNjA0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/network/element/VpcVirtualRouterElement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo1OTo0OVrOF81BOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo1OTo0OVrOF81BOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyNzU0Ng==", "bodyText": "\ud83d\udc4e", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399327546", "createdAt": "2020-03-27T14:59:49Z", "author": {"login": "DaanHoogland"}, "path": "server/src/main/java/com/cloud/network/element/VpcVirtualRouterElement.java", "diffHunk": "@@ -711,4 +711,5 @@ public boolean stopVpn(final RemoteAccessVpn vpn) throws ResourceUnavailableExce\n         }\n         return result;\n     }\n-}\n\\ No newline at end of file\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTcyMTYxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/network/router/CommandSetupHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTowMTowMlrOF81Exg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTowMTowMlrOF81Exg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyODQ1NA==", "bodyText": "fifth", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399328454", "createdAt": "2020-03-27T15:01:02Z", "author": {"login": "DaanHoogland"}, "path": "server/src/main/java/com/cloud/network/router/CommandSetupHelper.java", "diffHunk": "@@ -177,23 +180,30 @@\n     private VlanDao _vlanDao;\n     @Inject\n     private IPAddressDao _ipAddressDao;\n-\n     @Inject\n     private RouterControlHelper _routerControlHelper;\n+    @Inject\n+    private HostDao _hostDao;\n \n     @Autowired\n     @Qualifier(\"networkHelper\")\n     protected NetworkHelper _networkHelper;\n \n     public void createVmDataCommand(final VirtualRouter router, final UserVm vm, final NicVO nic, final String publicKey, final Commands cmds) {\n-        final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n-        final String zoneName = _dcDao.findById(router.getDataCenterId()).getName();\n-        final IPAddressVO staticNatIp = _ipAddressDao.findByVmIdAndNetworkId(nic.getNetworkId(), vm.getId());\n-        cmds.addCommand(\n-                \"vmdata\",\n-                generateVmDataCommand(router, nic.getIPv4Address(), vm.getUserData(), serviceOffering, zoneName,\n-                        staticNatIp == null || staticNatIp.getState() != IpAddress.State.Allocated ? null : staticNatIp.getAddress().addr(), vm.getHostName(), vm.getInstanceName(),\n-                        vm.getId(), vm.getUuid(), publicKey, nic.getNetworkId()));\n+        if (vm != null && router != null && nic != null) {\n+            final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n+            final String zoneName = _dcDao.findById(router.getDataCenterId()).getName();\n+            final IPAddressVO staticNatIp = _ipAddressDao.findByVmIdAndNetworkId(nic.getNetworkId(), vm.getId());\n+\n+            Host host = _hostDao.findById(vm.getHostId());\n+            final Account caller = CallContext.current().getCallingAccount();\n+            String destHostname = (VirtualMachineManager.AllowExposeHypervisorHostname.value() && VirtualMachineManager.AllowExposeHypervisorHostnameAccountLevel.valueIn(caller.getId())) ? host.getName() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTcyODMxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/network/router/CommandSetupHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTowMjoxOFrOF81IuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNToyNTozNFrOF82JnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyOTQ2NQ==", "bodyText": "so why wasn't this needed before?", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399329465", "createdAt": "2020-03-27T15:02:18Z", "author": {"login": "DaanHoogland"}, "path": "server/src/main/java/com/cloud/network/router/CommandSetupHelper.java", "diffHunk": "@@ -177,23 +180,30 @@\n     private VlanDao _vlanDao;\n     @Inject\n     private IPAddressDao _ipAddressDao;\n-\n     @Inject\n     private RouterControlHelper _routerControlHelper;\n+    @Inject\n+    private HostDao _hostDao;\n \n     @Autowired\n     @Qualifier(\"networkHelper\")\n     protected NetworkHelper _networkHelper;\n \n     public void createVmDataCommand(final VirtualRouter router, final UserVm vm, final NicVO nic, final String publicKey, final Commands cmds) {\n-        final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n-        final String zoneName = _dcDao.findById(router.getDataCenterId()).getName();\n-        final IPAddressVO staticNatIp = _ipAddressDao.findByVmIdAndNetworkId(nic.getNetworkId(), vm.getId());\n-        cmds.addCommand(\n-                \"vmdata\",\n-                generateVmDataCommand(router, nic.getIPv4Address(), vm.getUserData(), serviceOffering, zoneName,\n-                        staticNatIp == null || staticNatIp.getState() != IpAddress.State.Allocated ? null : staticNatIp.getAddress().addr(), vm.getHostName(), vm.getInstanceName(),\n-                        vm.getId(), vm.getUuid(), publicKey, nic.getNetworkId()));\n+        if (vm != null && router != null && nic != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0NjA3Nw==", "bodyText": "I put this check because I noticed a NPE during migration of Routers after adding my changes, as I'm calling \"saveUserDataToRouter\"", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399346077", "createdAt": "2020-03-27T15:25:34Z", "author": {"login": "Pearl1594"}, "path": "server/src/main/java/com/cloud/network/router/CommandSetupHelper.java", "diffHunk": "@@ -177,23 +180,30 @@\n     private VlanDao _vlanDao;\n     @Inject\n     private IPAddressDao _ipAddressDao;\n-\n     @Inject\n     private RouterControlHelper _routerControlHelper;\n+    @Inject\n+    private HostDao _hostDao;\n \n     @Autowired\n     @Qualifier(\"networkHelper\")\n     protected NetworkHelper _networkHelper;\n \n     public void createVmDataCommand(final VirtualRouter router, final UserVm vm, final NicVO nic, final String publicKey, final Commands cmds) {\n-        final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n-        final String zoneName = _dcDao.findById(router.getDataCenterId()).getName();\n-        final IPAddressVO staticNatIp = _ipAddressDao.findByVmIdAndNetworkId(nic.getNetworkId(), vm.getId());\n-        cmds.addCommand(\n-                \"vmdata\",\n-                generateVmDataCommand(router, nic.getIPv4Address(), vm.getUserData(), serviceOffering, zoneName,\n-                        staticNatIp == null || staticNatIp.getState() != IpAddress.State.Allocated ? null : staticNatIp.getAddress().addr(), vm.getHostName(), vm.getInstanceName(),\n-                        vm.getId(), vm.getUuid(), publicKey, nic.getNetworkId()));\n+        if (vm != null && router != null && nic != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyOTQ2NQ=="}, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTczMDc3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/network/rules/UserdataToRouterRules.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTowMjo1MFrOF81KPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTowMjo1MFrOF81KPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyOTg1NA==", "bodyText": "Why?", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399329854", "createdAt": "2020-03-27T15:02:50Z", "author": {"login": "DaanHoogland"}, "path": "server/src/main/java/com/cloud/network/rules/UserdataToRouterRules.java", "diffHunk": "@@ -50,6 +50,7 @@ public boolean accept(final NetworkTopologyVisitor visitor, final VirtualRouter\n \n         UserVmDao userVmDao = visitor.getVirtualNetworkApplianceFactory().getUserVmDao();\n         _userVM = userVmDao.findById(_profile.getVirtualMachine().getId());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTczNDk4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/vm/UserVmManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTowMzozOFrOF81MuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTowMzozOFrOF81MuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMzMDQ4OQ==", "bodyText": "method (sixth use)", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399330489", "createdAt": "2020-03-27T15:03:38Z", "author": {"login": "DaanHoogland"}, "path": "server/src/main/java/com/cloud/vm/UserVmManagerImpl.java", "diffHunk": "@@ -4352,9 +4352,10 @@ public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, Depl\n             if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                 final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                 boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n-\n+                final Account caller = CallContext.current().getCallingAccount();\n+                String destHostname = (VirtualMachineManager.AllowExposeHypervisorHostname.value() && VirtualMachineManager.AllowExposeHypervisorHostnameAccountLevel.valueIn(caller.getId())) ? dest.getHost().getName() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTc1Mjg0OnYy", "diffSide": "RIGHT", "path": "test/integration/component/test_vr_metadata.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTowNzozN1rOF81X8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTowNzozN1rOF81X8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMzMzM2MQ==", "bodyText": "same name as the next (line 243)", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399333361", "createdAt": "2020-03-27T15:07:37Z", "author": {"login": "DaanHoogland"}, "path": "test/integration/component/test_vr_metadata.py", "diffHunk": "@@ -0,0 +1,347 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+# this script will cover VMdeployment  with Userdata tests\n+\n+from marvin.cloudstackTestCase import cloudstackTestCase\n+from marvin.lib.base import *\n+from marvin.lib.utils import (validateList, cleanup_resources)\n+from marvin.lib.common import *\n+from nose.plugins.attrib import attr\n+from marvin.codes import PASS,FAIL\n+\n+_multiprocess_shared_ = True\n+\n+class Services:\n+    def __init__(self):\n+        self.services = {\n+            \"virtual_machine\": {\n+                \"displayname\": \"TesVM1\",\n+                \"username\": \"root\",\n+                \"password\": \"password\",\n+                \"ssh_port\": 22,\n+                \"hypervisor\": 'XenServer',\n+                \"privateport\": 22,\n+                \"publicport\": 22,\n+                \"protocol\": 'TCP',\n+                },\n+            \"ostype\": 'CentOS 5.5 (64-bit)',\n+            \"service_offering\": {\n+                \"name\": \"Tiny Instance\",\n+                \"displaytext\": \"Tiny Instance\",\n+                \"cpunumber\": 1,\n+                \"cpuspeed\": 100,\n+                \"memory\": 256,\n+                },\n+            }\n+\n+class TestDeployVmWithMetaData(cloudstackTestCase):\n+    @classmethod\n+    def setUpClass(cls):\n+        cls.testclient = super(TestDeployVmWithMetaData, cls).getClsTestClient()\n+        cls.apiclient = cls.testclient.getApiClient()\n+        cls._cleanup = []\n+        #cls.services = Services().services\n+        cls.services = cls.testclient.getParsedTestDataConfig()\n+        cls.zone = get_zone(cls.apiclient, cls.testclient.getZoneForTests())\n+        cls.service_offering = ServiceOffering.create(\n+            cls.apiclient,\n+            cls.services[\"service_offering\"]\n+        )\n+\n+        cls.template = get_template(\n+            cls.apiclient,\n+            cls.zone.id,\n+            cls.services[\"ostype\"]\n+        )\n+\n+\n+    @classmethod\n+    def tearDownClass(cls):\n+        try:\n+            cls._cleanup = cls._cleanup[::-1]\n+            cleanup_resources(cls.apiclient, cls._cleanup)\n+        except Exception as e:\n+            raise Exception(\"Warning: Exception during cleanup : %s\" % e)\n+\n+    def setUp(self):\n+        self.apiclient = self.testClient.getApiClient()\n+        self.cleanup = []\n+\n+    def tearDown(self):\n+        try:\n+            self.cleanup = self.cleanup[::-1]\n+            cleanup_resources(self.apiclient, self.cleanup)\n+        except Exception as e:\n+            raise Exception(\"Warning: Exception during cleanup : %s\" % e)\n+        return\n+\n+    def migrate_VM(self, vm):\n+        \"\"\"Migrates VM to another host, if available\"\"\"\n+        self.debug(\"+++ Migrating one of the VMs in the created \"\n+                   \"VPC Tier network to another host, if available...\")\n+        self.debug(\"Checking if a host is available for migration...\")\n+        hosts = Host.listForMigration(self.apiclient, virtualmachineid=vm.id)\n+        if hosts:\n+            self.assertEqual(isinstance(hosts, list), True,\n+                             \"List hosts should return a valid list\"\n+                             )\n+            host = hosts[0]\n+            self.debug(\"Migrating VM with ID: \"\n+                       \"%s to Host: %s\" % (vm.id, host.id))\n+            try:\n+                vm.migrate(self.apiclient, hostid=host.id)\n+            except Exception as e:\n+                self.fail(\"Failed to migrate instance, %s\" % e)\n+            self.debug(\"Migrated VM with ID: \"\n+                       \"%s to Host: %s\" % (vm.id, host.id))\n+        else:\n+            self.debug(\"No host available for migration. \"\n+                       \"Test requires at-least 2 hosts\")\n+        return host\n+\n+    def list_nics(self, vm_id):\n+        list_vm_res = VirtualMachine.list(self.apiclient, id=vm_id)\n+        self.assertEqual(validateList(list_vm_res)[0], PASS, \"List vms returned invalid response\")\n+        nics = list_vm_res[0].nic\n+        for nic in nics:\n+            if nic.type == \"Shared\":\n+                nic_res = NIC.list(\n+                    self.apiclient,\n+                    virtualmachineid=vm_id,\n+                    nicid=nic.id\n+                )\n+                nic_ip = nic_res[0].ipaddress\n+                self.assertIsNotNone(nic_ip, \"listNics API response does not have the ip address\")\n+            else:\n+                continue\n+        return\n+\n+    @attr(tags=[\"advanced\"], required_hardware='True')\n+    def test_deployVM_verify_metadata_in_VR(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTc1NDI5OnYy", "diffSide": "RIGHT", "path": "test/integration/component/test_vr_metadata.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTowNzo1NVrOF81YxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTowNzo1NVrOF81YxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMzMzU3Mg==", "bodyText": "this method has the same name as the previous (line 136)", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r399333572", "createdAt": "2020-03-27T15:07:55Z", "author": {"login": "DaanHoogland"}, "path": "test/integration/component/test_vr_metadata.py", "diffHunk": "@@ -0,0 +1,347 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+# this script will cover VMdeployment  with Userdata tests\n+\n+from marvin.cloudstackTestCase import cloudstackTestCase\n+from marvin.lib.base import *\n+from marvin.lib.utils import (validateList, cleanup_resources)\n+from marvin.lib.common import *\n+from nose.plugins.attrib import attr\n+from marvin.codes import PASS,FAIL\n+\n+_multiprocess_shared_ = True\n+\n+class Services:\n+    def __init__(self):\n+        self.services = {\n+            \"virtual_machine\": {\n+                \"displayname\": \"TesVM1\",\n+                \"username\": \"root\",\n+                \"password\": \"password\",\n+                \"ssh_port\": 22,\n+                \"hypervisor\": 'XenServer',\n+                \"privateport\": 22,\n+                \"publicport\": 22,\n+                \"protocol\": 'TCP',\n+                },\n+            \"ostype\": 'CentOS 5.5 (64-bit)',\n+            \"service_offering\": {\n+                \"name\": \"Tiny Instance\",\n+                \"displaytext\": \"Tiny Instance\",\n+                \"cpunumber\": 1,\n+                \"cpuspeed\": 100,\n+                \"memory\": 256,\n+                },\n+            }\n+\n+class TestDeployVmWithMetaData(cloudstackTestCase):\n+    @classmethod\n+    def setUpClass(cls):\n+        cls.testclient = super(TestDeployVmWithMetaData, cls).getClsTestClient()\n+        cls.apiclient = cls.testclient.getApiClient()\n+        cls._cleanup = []\n+        #cls.services = Services().services\n+        cls.services = cls.testclient.getParsedTestDataConfig()\n+        cls.zone = get_zone(cls.apiclient, cls.testclient.getZoneForTests())\n+        cls.service_offering = ServiceOffering.create(\n+            cls.apiclient,\n+            cls.services[\"service_offering\"]\n+        )\n+\n+        cls.template = get_template(\n+            cls.apiclient,\n+            cls.zone.id,\n+            cls.services[\"ostype\"]\n+        )\n+\n+\n+    @classmethod\n+    def tearDownClass(cls):\n+        try:\n+            cls._cleanup = cls._cleanup[::-1]\n+            cleanup_resources(cls.apiclient, cls._cleanup)\n+        except Exception as e:\n+            raise Exception(\"Warning: Exception during cleanup : %s\" % e)\n+\n+    def setUp(self):\n+        self.apiclient = self.testClient.getApiClient()\n+        self.cleanup = []\n+\n+    def tearDown(self):\n+        try:\n+            self.cleanup = self.cleanup[::-1]\n+            cleanup_resources(self.apiclient, self.cleanup)\n+        except Exception as e:\n+            raise Exception(\"Warning: Exception during cleanup : %s\" % e)\n+        return\n+\n+    def migrate_VM(self, vm):\n+        \"\"\"Migrates VM to another host, if available\"\"\"\n+        self.debug(\"+++ Migrating one of the VMs in the created \"\n+                   \"VPC Tier network to another host, if available...\")\n+        self.debug(\"Checking if a host is available for migration...\")\n+        hosts = Host.listForMigration(self.apiclient, virtualmachineid=vm.id)\n+        if hosts:\n+            self.assertEqual(isinstance(hosts, list), True,\n+                             \"List hosts should return a valid list\"\n+                             )\n+            host = hosts[0]\n+            self.debug(\"Migrating VM with ID: \"\n+                       \"%s to Host: %s\" % (vm.id, host.id))\n+            try:\n+                vm.migrate(self.apiclient, hostid=host.id)\n+            except Exception as e:\n+                self.fail(\"Failed to migrate instance, %s\" % e)\n+            self.debug(\"Migrated VM with ID: \"\n+                       \"%s to Host: %s\" % (vm.id, host.id))\n+        else:\n+            self.debug(\"No host available for migration. \"\n+                       \"Test requires at-least 2 hosts\")\n+        return host\n+\n+    def list_nics(self, vm_id):\n+        list_vm_res = VirtualMachine.list(self.apiclient, id=vm_id)\n+        self.assertEqual(validateList(list_vm_res)[0], PASS, \"List vms returned invalid response\")\n+        nics = list_vm_res[0].nic\n+        for nic in nics:\n+            if nic.type == \"Shared\":\n+                nic_res = NIC.list(\n+                    self.apiclient,\n+                    virtualmachineid=vm_id,\n+                    nicid=nic.id\n+                )\n+                nic_ip = nic_res[0].ipaddress\n+                self.assertIsNotNone(nic_ip, \"listNics API response does not have the ip address\")\n+            else:\n+                continue\n+        return\n+\n+    @attr(tags=[\"advanced\"], required_hardware='True')\n+    def test_deployVM_verify_metadata_in_VR(self):\n+        \"\"\"\n+        1. Create a network (VR as a provider)\n+        2. Deploy a VM in the network\n+        3. Verify VM deployment\n+        4. From the VM, curl the gateway of the VR to verify the corresponding metadata - hypervisor host name\n+            if the respective Global level and account level flags are set to true\n+        \"\"\"\n+        # Update global setting for \"allow.expose.host.hostname\"\n+        Configurations.update(self.apiclient,\n+                              name=\"allow.expose.host.hostname\",\n+                              value=\"true\"\n+                              )\n+\n+        # Update Account level setting\n+        Configurations.update(self.apiclient,\n+                              name=\"allow.expose.host.hostname\",\n+                              value=\"true\",\n+                              accountid=1\n+                              )\n+\n+        # Verify that the above mentioned settings are set to true before proceeding\n+        if not is_config_suitable(\n+                apiclient=self.apiclient,\n+                name='allow.expose.host.hostname',\n+                value='true'):\n+            self.skipTest('allow.expose.host.hostname should be true. skipping')\n+\n+        if not is_config_suitable(\n+                apiclient=self.apiclient,\n+                name='allow.expose.host.hostname',\n+                value='true'):\n+            self.skipTest('allow.expose.host.hostname should be true. skipping')\n+\n+        self.no_isolate = NetworkOffering.create(\n+            self.apiclient,\n+            self.services[\"isolated_network_offering\"]\n+        )\n+        self.no_isolate.update(self.apiclient, state='Enabled')\n+        self.isolated_network = Network.create(\n+            self.apiclient,\n+            self.services[\"network\"],\n+            networkofferingid=self.no_isolate.id,\n+            zoneid=self.zone.id,\n+            accountid=\"admin\",\n+            domainid=1\n+        )\n+        self.cleanup.append(self.isolated_network)\n+\n+        self.vm = VirtualMachine.create(\n+            self.apiclient,\n+            self.services[\"virtual_machine\"],\n+            templateid=self.template.id,\n+            accountid=\"admin\",\n+            domainid=1,\n+            serviceofferingid=self.service_offering.id,\n+            zoneid=self.zone.id,\n+            networkids=[self.isolated_network.id],\n+        )\n+        self.assertIsNotNone(\n+            self.vm,\n+            \"VM creation failed in the isolated network\"\n+        )\n+        self.cleanup.append(self.vm)\n+\n+        ip_addr = self.vm.ipaddress\n+        self.debug(\"VM ip address = %s\" % ip_addr)\n+        # ip_status, ip_addr = self.getVMIPAddress(self.vm.id)\n+        # self.assertEqual(\n+        #     ip_status,\n+        #     1,\n+        #     \"Failed to retrieve vm ip address\"\n+        # )\n+\n+        # Verify the retrieved ip address in listNICs API response\n+        self.list_nics(self.vm.id)\n+        vr_res = Router.list(\n+            self.apiclient,\n+            networkid=self.isolated_network.id,\n+            listAll=True\n+        )\n+        self.assertEqual(validateList(vr_res)[0], PASS, \"List Routers returned invalid response\")\n+        vr_ip = vr_res[0].guestipaddress\n+        ssh = self.vm.get_ssh_client(ipaddress=ip_addr)\n+        cmd = \"curl http://%s/latest/hypervisor-host-name\" % vr_ip\n+        res = ssh.execute(cmd)\n+        self.debug(\"Verifying hypervisor hostname details in the VR\")\n+        self.assertEqual(\n+            str(res),\n+            self.vm.hostname,\n+            \"Failed to get the hypervisor host name from VR in isolated network\"\n+        )\n+        # Reset configuration values to default values i.e., false\n+        Configurations.update(self.apiclient,\n+                              name=\"allow.expose.host.hostname\",\n+                              value=\"false\"\n+                              )\n+\n+        # Update Account level setting\n+        Configurations.update(self.apiclient,\n+                              name=\"allow.expose.host.hostname\",\n+                              value=\"false\",\n+                              accountid=1\n+                              )\n+        return\n+\n+    @attr(tags=[\"advanced\"], required_hardware='True')\n+    def test_deployVM_verify_metadata_in_VR(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ba9b7dcb459922020d4f89a61c9367dad7c2c"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzcyMjU4OnYy", "diffSide": "RIGHT", "path": "engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTowNToyOVrOF-kGvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTowNToyOVrOF-kGvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0NzU4MQ==", "bodyText": "Javadoc still missing - suggested on prior comment from Daan", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r401147581", "createdAt": "2020-03-31T19:05:29Z", "author": {"login": "nvazquez"}, "path": "engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java", "diffHunk": "@@ -294,6 +294,8 @@ void implementNetworkElementsAndResources(DeployDestination dest, ReservationCon\n \n     void finalizeUpdateInSequence(Network network, boolean success);\n \n+    void addHypervisorHostname(VirtualMachineProfile vm, DeployDestination dest) throws ResourceUnavailableException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "699661d73e3df09a6b6a53fef04682dc1678933a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjMwMTY3OnYy", "diffSide": "RIGHT", "path": "engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTo1ODowN1rOF_QZkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTo1ODowN1rOF_QZkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg3MzI5OQ==", "bodyText": "please remove or add description of use/reason for throwing", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r401873299", "createdAt": "2020-04-01T19:58:07Z", "author": {"login": "DaanHoogland"}, "path": "engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java", "diffHunk": "@@ -294,6 +294,15 @@ void implementNetworkElementsAndResources(DeployDestination dest, ReservationCon\n \n     void finalizeUpdateInSequence(Network network, boolean success);\n \n+    /**\n+     * Adds hypervisor hostname to a file - hypervisor-host-name if the userdata\n+     * service provider is ConfigDrive or VirtualRouter\n+     * @param vm\n+     * @param dest\n+     * @throws ResourceUnavailableException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb12eaed23ab1f98b1bb18dec36b146d4ab9edfd"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjMyOTY5OnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDowNjo1OVrOF_Qrzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDowNjo1OVrOF_Qrzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg3Nzk2Ng==", "bodyText": "I think even this part could be factorred out. the method is still almost 200 lines. (no biggy)", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r401877966", "createdAt": "2020-04-01T20:06:59Z", "author": {"login": "DaanHoogland"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -141,6 +146,12 @@ Use VIR_DOMAIN_XML_SECURE (value = 1) prior to v1.0.0.\n             xmlDesc = dm.getXMLDesc(xmlFlag);\n             xmlDesc = replaceIpForVNCInDescFile(xmlDesc, target);\n \n+            String oldIsoVolumePath = getOldVolumePath(disks, vmName);\n+            String newIsoVolumePath = getNewVolumePathIfDatastoreHasChanged(libvirtComputingResource, conn, to);\n+            if (newIsoVolumePath != null && !newIsoVolumePath.equals(oldIsoVolumePath)) {\n+                s_logger.debug(\"Editing mount path\");\n+                xmlDesc = replaceDiskSourceFile(xmlDesc, newIsoVolumePath, vmName);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb12eaed23ab1f98b1bb18dec36b146d4ab9edfd"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTE3NDE3OnYy", "diffSide": "RIGHT", "path": "engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMTozNToxNVrOGARs6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMTozNToxNVrOGARs6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk0MzIxMQ==", "bodyText": "please add descriptions or remove", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r402943211", "createdAt": "2020-04-03T11:35:15Z", "author": {"login": "DaanHoogland"}, "path": "engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/NetworkOrchestrationService.java", "diffHunk": "@@ -299,7 +299,7 @@ void implementNetworkElementsAndResources(DeployDestination dest, ReservationCon\n      * service provider is ConfigDrive or VirtualRouter\n      * @param vm\n      * @param dest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d223178815332fa786395259c4f199f509587ad9"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Mzc4MTcwOnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOToyODo0MVrOGreO6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTo1ODo1OFrOGrfSLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzNzI5MQ==", "bodyText": "this part aims to fix another issue, right ?", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r448237291", "createdAt": "2020-07-01T09:28:41Z", "author": {"login": "weizhouapache"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -141,6 +146,12 @@ Use VIR_DOMAIN_XML_SECURE (value = 1) prior to v1.0.0.\n             xmlDesc = dm.getXMLDesc(xmlFlag);\n             xmlDesc = replaceIpForVNCInDescFile(xmlDesc, target);\n \n+            String oldIsoVolumePath = getOldVolumePath(disks, vmName);\n+            String newIsoVolumePath = getNewVolumePathIfDatastoreHasChanged(libvirtComputingResource, conn, to);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec609a5334adc597ac0973cc1b4ef7985e58345"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI1NDUwOA==", "bodyText": "@weizhouapache Yes, it does... (identified while working on this feature)", "url": "https://github.com/apache/cloudstack/pull/3976#discussion_r448254508", "createdAt": "2020-07-01T09:58:58Z", "author": {"login": "Pearl1594"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -141,6 +146,12 @@ Use VIR_DOMAIN_XML_SECURE (value = 1) prior to v1.0.0.\n             xmlDesc = dm.getXMLDesc(xmlFlag);\n             xmlDesc = replaceIpForVNCInDescFile(xmlDesc, target);\n \n+            String oldIsoVolumePath = getOldVolumePath(disks, vmName);\n+            String newIsoVolumePath = getNewVolumePathIfDatastoreHasChanged(libvirtComputingResource, conn, to);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzNzI5MQ=="}, "originalCommit": {"oid": "7ec609a5334adc597ac0973cc1b4ef7985e58345"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3976, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}