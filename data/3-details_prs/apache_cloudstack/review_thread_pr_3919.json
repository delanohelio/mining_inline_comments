{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMzYxMjEz", "number": 3919, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODoxMTo1NlrODkLJUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMTozMjozMVrODknSHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjU3OTM2OnYy", "diffSide": "RIGHT", "path": "utils/src/main/java/com/cloud/utils/ssh/SshHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODoxMTo1NlrOFwWfJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODoxNzowNVrOFwWmyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI0NDM5MQ==", "bodyText": "@Pearl1594 what's this magic number?", "url": "https://github.com/apache/cloudstack/pull/3919#discussion_r386244391", "createdAt": "2020-03-02T08:11:56Z", "author": {"login": "rhtyd"}, "path": "utils/src/main/java/com/cloud/utils/ssh/SshHelper.java", "diffHunk": "@@ -184,12 +185,11 @@ public static void scpTo(String host, int port, String user, File pemKeyFile, St\n \n             sess.execCommand(command);\n \n-            InputStream stdout = sess.getStdout();\n-            InputStream stderr = sess.getStderr();\n-\n-            byte[] buffer = new byte[8192];\n-            StringBuffer sbResult = new StringBuffer();\n+            StreamGobbler stdout = new StreamGobbler(sess.getStdout());\n+            StreamGobbler stderr = new StreamGobbler(sess.getStderr());\n \n+            byte[] buffer = new byte[16384];\n+            StringBuffer sbResult = new StringBuffer(214748364);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6af6c9f360a16920a2edb6ce9bb68a8c5345513"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI0NjM0Ng==", "bodyText": "@rhtyd the number represents the number of characters that corresponds to 200MB", "url": "https://github.com/apache/cloudstack/pull/3919#discussion_r386246346", "createdAt": "2020-03-02T08:17:05Z", "author": {"login": "Pearl1594"}, "path": "utils/src/main/java/com/cloud/utils/ssh/SshHelper.java", "diffHunk": "@@ -184,12 +185,11 @@ public static void scpTo(String host, int port, String user, File pemKeyFile, St\n \n             sess.execCommand(command);\n \n-            InputStream stdout = sess.getStdout();\n-            InputStream stderr = sess.getStderr();\n-\n-            byte[] buffer = new byte[8192];\n-            StringBuffer sbResult = new StringBuffer();\n+            StreamGobbler stdout = new StreamGobbler(sess.getStdout());\n+            StreamGobbler stderr = new StreamGobbler(sess.getStderr());\n \n+            byte[] buffer = new byte[16384];\n+            StringBuffer sbResult = new StringBuffer(214748364);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI0NDM5MQ=="}, "originalCommit": {"oid": "e6af6c9f360a16920a2edb6ce9bb68a8c5345513"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzE4OTQyOnYy", "diffSide": "RIGHT", "path": "utils/src/main/java/com/cloud/utils/ssh/SshHelper.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMTozMjozMVrOFxCMuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjoxOTo1NFrOFxDiKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk2MDU2OA==", "bodyText": "@Pearl1594 instead of > 0 we probably want to check for readbytes != -1. For example: (comments only for your understanding)\ncurrentReadBytes = stdout.read(buffer);\nwhile (currentReadBytes >= 0) { // or check for != -1\n  sbResult.append(new String(buffer, 0, currentReadBytes));\n  currentReadBytes = stdout.read(buffer); // read() will return -1 on eof/complete\n}\n\nThe other option is to use a more modern java-way to use BufferedReader for example like:\n BufferedReader bufferedStdOut = new BufferedReader(stdout);\n.... use", "url": "https://github.com/apache/cloudstack/pull/3919#discussion_r386960568", "createdAt": "2020-03-03T11:32:31Z", "author": {"login": "rhtyd"}, "path": "utils/src/main/java/com/cloud/utils/ssh/SshHelper.java", "diffHunk": "@@ -207,22 +206,18 @@ public static void scpTo(String host, int port, String user, File pemKeyFile, St\n                     if (canEndTheSshConnection(waitResultTimeoutInMs, sess, conditions)) {\n                         break;\n                     }\n-\n                 }\n \n-                while (stdout.available() > 0) {\n-                    currentReadBytes = stdout.read(buffer);\n-                    sbResult.append(new String(buffer, 0, currentReadBytes));\n+               while((currentReadBytes = stdout.read(buffer)) > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d94aa9ecc30bea11bd2ff1aa7e9d9a9349551d0c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk2NDgzMA==", "bodyText": "@rhtyd I did consider using that, however decided against it so at to avoid wrapping the Input Stream. Also used the readAllBytes() but that would increase the memory footprint as indicated earlier. So, went ahead with this approach.", "url": "https://github.com/apache/cloudstack/pull/3919#discussion_r386964830", "createdAt": "2020-03-03T11:41:00Z", "author": {"login": "Pearl1594"}, "path": "utils/src/main/java/com/cloud/utils/ssh/SshHelper.java", "diffHunk": "@@ -207,22 +206,18 @@ public static void scpTo(String host, int port, String user, File pemKeyFile, St\n                     if (canEndTheSshConnection(waitResultTimeoutInMs, sess, conditions)) {\n                         break;\n                     }\n-\n                 }\n \n-                while (stdout.available() > 0) {\n-                    currentReadBytes = stdout.read(buffer);\n-                    sbResult.append(new String(buffer, 0, currentReadBytes));\n+               while((currentReadBytes = stdout.read(buffer)) > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk2MDU2OA=="}, "originalCommit": {"oid": "d94aa9ecc30bea11bd2ff1aa7e9d9a9349551d0c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk4MTg4OQ==", "bodyText": "@Pearl1594 long shot but you are using a test for '> 0'. What if the stream is blocking due to timing issues but not ended yet? Wouldn't we still end reading before end of stream?", "url": "https://github.com/apache/cloudstack/pull/3919#discussion_r386981889", "createdAt": "2020-03-03T12:18:46Z", "author": {"login": "DaanHoogland"}, "path": "utils/src/main/java/com/cloud/utils/ssh/SshHelper.java", "diffHunk": "@@ -207,22 +206,18 @@ public static void scpTo(String host, int port, String user, File pemKeyFile, St\n                     if (canEndTheSshConnection(waitResultTimeoutInMs, sess, conditions)) {\n                         break;\n                     }\n-\n                 }\n \n-                while (stdout.available() > 0) {\n-                    currentReadBytes = stdout.read(buffer);\n-                    sbResult.append(new String(buffer, 0, currentReadBytes));\n+               while((currentReadBytes = stdout.read(buffer)) > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk2MDU2OA=="}, "originalCommit": {"oid": "d94aa9ecc30bea11bd2ff1aa7e9d9a9349551d0c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk4MjQ0Mw==", "bodyText": "never mind, guess you already changed that.", "url": "https://github.com/apache/cloudstack/pull/3919#discussion_r386982443", "createdAt": "2020-03-03T12:19:54Z", "author": {"login": "DaanHoogland"}, "path": "utils/src/main/java/com/cloud/utils/ssh/SshHelper.java", "diffHunk": "@@ -207,22 +206,18 @@ public static void scpTo(String host, int port, String user, File pemKeyFile, St\n                     if (canEndTheSshConnection(waitResultTimeoutInMs, sess, conditions)) {\n                         break;\n                     }\n-\n                 }\n \n-                while (stdout.available() > 0) {\n-                    currentReadBytes = stdout.read(buffer);\n-                    sbResult.append(new String(buffer, 0, currentReadBytes));\n+               while((currentReadBytes = stdout.read(buffer)) > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk2MDU2OA=="}, "originalCommit": {"oid": "d94aa9ecc30bea11bd2ff1aa7e9d9a9349551d0c"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3955, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}