{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3OTUzNTg5", "number": 3847, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMToyOTozOFrODbigpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToyNzoxMVrODbxhhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjAzNTU2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/network/router/CommandSetupHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMToyOTozOFrOFjFL-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMToyOTozOFrOFjFL-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMyOTQ2Nw==", "bodyText": "could this be a aeparate method? getVlanLastIpMapForGuestNetwork();?\nand than later", "url": "https://github.com/apache/cloudstack/pull/3847#discussion_r372329467", "createdAt": "2020-01-29T11:29:38Z", "author": {"login": "DaanHoogland"}, "path": "server/src/main/java/com/cloud/network/router/CommandSetupHelper.java", "diffHunk": "@@ -670,7 +670,20 @@ public void createVpcAssociatePublicIPCommands(final VirtualRouter router, final\n             vlanIpMap.put(vlanTag, ipList);\n         }\n \n+        Long guestNetworkId = null;\n+        final List<NicVO> nics = _nicDao.listByVmId(router.getId());\n+        for (final NicVO nic : nics) {\n+            final NetworkVO nw = _networkDao.findById(nic.getNetworkId());\n+            if (nw.getTrafficType() == TrafficType.Guest) {\n+                guestNetworkId = nw.getId();\n+                break;\n+            }\n+        }\n+\n+        Map<String, Boolean> vlanLastIp = getVlanLastIpMap(router.getVpcId(), guestNetworkId);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "127199ba82ea29b468b5615777a6e1740edcb03d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjAzOTQyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/network/router/CommandSetupHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMTozMTowNlrOFjFOcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMTozMTowNlrOFjFOcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMzMDA5Ng==", "bodyText": "here useAccessDetailsAccordingToVlanLastIpForGuestNetwork(); (long names just to be descriptive", "url": "https://github.com/apache/cloudstack/pull/3847#discussion_r372330096", "createdAt": "2020-01-29T11:31:06Z", "author": {"login": "DaanHoogland"}, "path": "server/src/main/java/com/cloud/network/router/CommandSetupHelper.java", "diffHunk": "@@ -728,6 +741,13 @@ public int compare(final PublicIpAddress o1, final PublicIpAddress o2) {\n             final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n             cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n \n+            Boolean lastIp = vlanLastIp.get(vlanTagKey);\n+            if (lastIp == null) {\n+                cmd.setAccessDetail(NetworkElementCommand.NETWORK_PUB_LAST_IP, \"true\");\n+            } else {\n+                cmd.setAccessDetail(NetworkElementCommand.NETWORK_PUB_LAST_IP, \"false\");\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "127199ba82ea29b468b5615777a6e1740edcb03d"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDQ4MDczOnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToxODoxNVrOFjc2fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToxODoxNVrOFjc2fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNzE4MA==", "bodyText": "Duplicated lines (1797 - 1805 = 1838 - 1847). Can you please extract them into a method?", "url": "https://github.com/apache/cloudstack/pull/3847#discussion_r372717180", "createdAt": "2020-01-30T01:18:15Z", "author": {"login": "GabrielBrascher"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java", "diffHunk": "@@ -1794,35 +1794,26 @@ public ExecutionResult prepareNetworkElementCommand(final IpAssocCommand cmd) {\n         final String routerIp = cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP);\n         Connect conn;\n         try {\n-            conn = LibvirtConnection.getConnectionByVmName(routerName);\n-            final List<InterfaceDef> nics = getInterfaces(conn, routerName);\n-            final Map<String, Integer> broadcastUriAllocatedToVM = new HashMap<String, Integer>();\n-            Integer nicPos = 0;\n-            for (final InterfaceDef nic : nics) {\n-                if (nic.getBrName().equalsIgnoreCase(_linkLocalBridgeName)) {\n-                    broadcastUriAllocatedToVM.put(\"LinkLocal\", nicPos);\n-                } else {\n-                    if (nic.getBrName().equalsIgnoreCase(_publicBridgeName) || nic.getBrName().equalsIgnoreCase(_privBridgeName) ||\n-                            nic.getBrName().equalsIgnoreCase(_guestBridgeName)) {\n-                        broadcastUriAllocatedToVM.put(BroadcastDomainType.Vlan.toUri(Vlan.UNTAGGED).toString(), nicPos);\n-                    } else {\n-                        final String broadcastUri = getBroadcastUriFromBridge(nic.getBrName());\n-                        broadcastUriAllocatedToVM.put(broadcastUri, nicPos);\n-                    }\n-                }\n-                nicPos++;\n+            conn = getLibvirtUtilitiesHelper().getConnectionByVmName(routerName);\n+            Integer devNum = 0;\n+            final List<InterfaceDef> pluggedNics = getInterfaces(conn, routerName);\n+            final Map<String, Integer> macAddressToNicNum = new HashMap<>(pluggedNics.size());\n+            for (final InterfaceDef pluggedNic : pluggedNics) {\n+                final String pluggedVlan = pluggedNic.getBrName();\n+                macAddressToNicNum.put(pluggedNic.getMacAddress(), devNum);\n+                devNum++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "127199ba82ea29b468b5615777a6e1740edcb03d"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDQ5NTQwOnYy", "diffSide": "RIGHT", "path": "systemvm/debian/etc/sysctl.conf", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToyNzoxMVrOFjc_UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToyNzoxMVrOFjc_UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxOTQ0MA==", "bodyText": "There is a typo at line 30", "url": "https://github.com/apache/cloudstack/pull/3847#discussion_r372719440", "createdAt": "2020-01-30T01:27:11Z", "author": {"login": "GabrielBrascher"}, "path": "systemvm/debian/etc/sysctl.conf", "diffHunk": "@@ -27,6 +27,10 @@ net.ipv4.conf.default.send_redirects = 0\n net.ipv4.conf.all.secure_redirects = 0\n net.ipv4.conf.default.secure_redirects = 0\n \n+# Prmote secondary ip to be primary if primary IP is removed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "127199ba82ea29b468b5615777a6e1740edcb03d"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4013, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}