{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1Njc0ODYw", "number": 3828, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTozOToxOVrODZxBOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTo0MjoxMFrODZxEug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzQ0MTIxOnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTozOToxOVrOFgVsxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTozOToxOVrOFgVsxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ1NDI3OQ==", "bodyText": "seems like a debug message to me. Why does the operator want to see this?", "url": "https://github.com/apache/cloudstack/pull/3828#discussion_r369454279", "createdAt": "2020-01-22T09:39:19Z", "author": {"login": "DaanHoogland"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java", "diffHunk": "@@ -1693,38 +1696,77 @@ private DirectTemplateDownloader getDirectTemplateDownloaderFromCommand(DirectDo\n     @Override\n     public Answer handleDownloadTemplateToPrimaryStorage(DirectDownloadCommand cmd) {\n         final PrimaryDataStoreTO pool = cmd.getDestPool();\n-        if (!pool.getPoolType().equals(StoragePoolType.NetworkFilesystem)) {\n-            return new DirectDownloadAnswer(false, \"Unsupported pool type \" + pool.getPoolType().toString(), true);\n-        }\n-        KVMStoragePool destPool = storagePoolMgr.getStoragePool(pool.getPoolType(), pool.getUuid());\n         DirectTemplateDownloader downloader;\n+        KVMPhysicalDisk template;\n \n         try {\n-            downloader = getDirectTemplateDownloaderFromCommand(cmd, destPool);\n-        } catch (IllegalArgumentException e) {\n-            return new DirectDownloadAnswer(false, \"Unable to create direct downloader: \" + e.getMessage(), true);\n-        }\n+            s_logger.info(\"Verifying temporary location for downloading the template exists on the host\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0881b2073f30e55f71f82cb8612d892c7b6b6880"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzQ0NTc1OnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTo0MDo0MlrOFgVvdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTo0MDo0MlrOFgVvdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ1NDk2NA==", "bodyText": "in this case i would say that if the operator wants info it would be the actual size found and not an announcement that it is going to be calculated. also seems debug to me.", "url": "https://github.com/apache/cloudstack/pull/3828#discussion_r369454964", "createdAt": "2020-01-22T09:40:42Z", "author": {"login": "DaanHoogland"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java", "diffHunk": "@@ -1693,38 +1696,77 @@ private DirectTemplateDownloader getDirectTemplateDownloaderFromCommand(DirectDo\n     @Override\n     public Answer handleDownloadTemplateToPrimaryStorage(DirectDownloadCommand cmd) {\n         final PrimaryDataStoreTO pool = cmd.getDestPool();\n-        if (!pool.getPoolType().equals(StoragePoolType.NetworkFilesystem)) {\n-            return new DirectDownloadAnswer(false, \"Unsupported pool type \" + pool.getPoolType().toString(), true);\n-        }\n-        KVMStoragePool destPool = storagePoolMgr.getStoragePool(pool.getPoolType(), pool.getUuid());\n         DirectTemplateDownloader downloader;\n+        KVMPhysicalDisk template;\n \n         try {\n-            downloader = getDirectTemplateDownloaderFromCommand(cmd, destPool);\n-        } catch (IllegalArgumentException e) {\n-            return new DirectDownloadAnswer(false, \"Unable to create direct downloader: \" + e.getMessage(), true);\n-        }\n+            s_logger.info(\"Verifying temporary location for downloading the template exists on the host\");\n+            String temporaryDownloadPath = resource.getDirectDownloadTemporaryDownloadPath();\n+            if (!isLocationAccessible(temporaryDownloadPath)) {\n+                String msg = \"The temporary location path for downloading templates does not exist: \" +\n+                        temporaryDownloadPath + \" on this host\";\n+                s_logger.error(msg);\n+                return new DirectDownloadAnswer(false, msg, true);\n+            }\n \n-        try {\n+            s_logger.info(\"Checking for free space on the host for downloading the template\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0881b2073f30e55f71f82cb8612d892c7b6b6880"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzQ0ODMyOnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTo0MTozMVrOFgVw9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTo0MTozMVrOFgVw9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ1NTM1MQ==", "bodyText": "maybe change this one to debug as well, or move and add the resulting path to the message", "url": "https://github.com/apache/cloudstack/pull/3828#discussion_r369455351", "createdAt": "2020-01-22T09:41:31Z", "author": {"login": "DaanHoogland"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java", "diffHunk": "@@ -1693,38 +1696,77 @@ private DirectTemplateDownloader getDirectTemplateDownloaderFromCommand(DirectDo\n     @Override\n     public Answer handleDownloadTemplateToPrimaryStorage(DirectDownloadCommand cmd) {\n         final PrimaryDataStoreTO pool = cmd.getDestPool();\n-        if (!pool.getPoolType().equals(StoragePoolType.NetworkFilesystem)) {\n-            return new DirectDownloadAnswer(false, \"Unsupported pool type \" + pool.getPoolType().toString(), true);\n-        }\n-        KVMStoragePool destPool = storagePoolMgr.getStoragePool(pool.getPoolType(), pool.getUuid());\n         DirectTemplateDownloader downloader;\n+        KVMPhysicalDisk template;\n \n         try {\n-            downloader = getDirectTemplateDownloaderFromCommand(cmd, destPool);\n-        } catch (IllegalArgumentException e) {\n-            return new DirectDownloadAnswer(false, \"Unable to create direct downloader: \" + e.getMessage(), true);\n-        }\n+            s_logger.info(\"Verifying temporary location for downloading the template exists on the host\");\n+            String temporaryDownloadPath = resource.getDirectDownloadTemporaryDownloadPath();\n+            if (!isLocationAccessible(temporaryDownloadPath)) {\n+                String msg = \"The temporary location path for downloading templates does not exist: \" +\n+                        temporaryDownloadPath + \" on this host\";\n+                s_logger.error(msg);\n+                return new DirectDownloadAnswer(false, msg, true);\n+            }\n \n-        try {\n+            s_logger.info(\"Checking for free space on the host for downloading the template\");\n+            if (!isEnoughSpaceForDownloadTemplateOnTemporaryLocation(cmd.getTemplateSize())) {\n+                String msg = \"Not enough space on the defined temporary location to download the template \" + cmd.getTemplateId();\n+                s_logger.error(msg);\n+                return new DirectDownloadAnswer(false, msg, true);\n+            }\n+\n+            KVMStoragePool destPool = storagePoolMgr.getStoragePool(pool.getPoolType(), pool.getUuid());\n+            downloader = getDirectTemplateDownloaderFromCommand(cmd, destPool, temporaryDownloadPath);\n             s_logger.info(\"Trying to download template\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0881b2073f30e55f71f82cb8612d892c7b6b6880"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzQ1MDE4OnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTo0MjoxMFrOFgVyIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTo0MjoxMFrOFgVyIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ1NTY1MA==", "bodyText": "\ud83d\udc4d this one I agree is good for the operator to have.", "url": "https://github.com/apache/cloudstack/pull/3828#discussion_r369455650", "createdAt": "2020-01-22T09:42:10Z", "author": {"login": "DaanHoogland"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java", "diffHunk": "@@ -1693,38 +1696,77 @@ private DirectTemplateDownloader getDirectTemplateDownloaderFromCommand(DirectDo\n     @Override\n     public Answer handleDownloadTemplateToPrimaryStorage(DirectDownloadCommand cmd) {\n         final PrimaryDataStoreTO pool = cmd.getDestPool();\n-        if (!pool.getPoolType().equals(StoragePoolType.NetworkFilesystem)) {\n-            return new DirectDownloadAnswer(false, \"Unsupported pool type \" + pool.getPoolType().toString(), true);\n-        }\n-        KVMStoragePool destPool = storagePoolMgr.getStoragePool(pool.getPoolType(), pool.getUuid());\n         DirectTemplateDownloader downloader;\n+        KVMPhysicalDisk template;\n \n         try {\n-            downloader = getDirectTemplateDownloaderFromCommand(cmd, destPool);\n-        } catch (IllegalArgumentException e) {\n-            return new DirectDownloadAnswer(false, \"Unable to create direct downloader: \" + e.getMessage(), true);\n-        }\n+            s_logger.info(\"Verifying temporary location for downloading the template exists on the host\");\n+            String temporaryDownloadPath = resource.getDirectDownloadTemporaryDownloadPath();\n+            if (!isLocationAccessible(temporaryDownloadPath)) {\n+                String msg = \"The temporary location path for downloading templates does not exist: \" +\n+                        temporaryDownloadPath + \" on this host\";\n+                s_logger.error(msg);\n+                return new DirectDownloadAnswer(false, msg, true);\n+            }\n \n-        try {\n+            s_logger.info(\"Checking for free space on the host for downloading the template\");\n+            if (!isEnoughSpaceForDownloadTemplateOnTemporaryLocation(cmd.getTemplateSize())) {\n+                String msg = \"Not enough space on the defined temporary location to download the template \" + cmd.getTemplateId();\n+                s_logger.error(msg);\n+                return new DirectDownloadAnswer(false, msg, true);\n+            }\n+\n+            KVMStoragePool destPool = storagePoolMgr.getStoragePool(pool.getPoolType(), pool.getUuid());\n+            downloader = getDirectTemplateDownloaderFromCommand(cmd, destPool, temporaryDownloadPath);\n             s_logger.info(\"Trying to download template\");\n-            if (!downloader.downloadTemplate()) {\n+            Pair<Boolean, String> result = downloader.downloadTemplate();\n+            if (!result.first()) {\n                 s_logger.warn(\"Couldn't download template\");\n                 return new DirectDownloadAnswer(false, \"Unable to download template\", true);\n             }\n+            String tempFilePath = result.second();\n             if (!downloader.validateChecksum()) {\n                 s_logger.warn(\"Couldn't validate template checksum\");\n                 return new DirectDownloadAnswer(false, \"Checksum validation failed\", false);\n             }\n-            if (!downloader.extractAndInstallDownloadedTemplate()) {\n-                s_logger.warn(\"Couldn't extract and install template\");\n-                return new DirectDownloadAnswer(false, \"Extraction and installation failed\", false);\n-            }\n+            template = storagePoolMgr.createPhysicalDiskFromDirectDownloadTemplate(tempFilePath, destPool, 100);\n         } catch (CloudRuntimeException e) {\n             s_logger.warn(\"Error downloading template \" + cmd.getTemplateId() + \" due to: \" + e.getMessage());\n             return new DirectDownloadAnswer(false, \"Unable to download template: \" + e.getMessage(), true);\n+        } catch (IllegalArgumentException e) {\n+            return new DirectDownloadAnswer(false, \"Unable to create direct downloader: \" + e.getMessage(), true);\n         }\n \n-        DirectTemplateInformation info = downloader.getTemplateInformation();\n-        return new DirectDownloadAnswer(true, info.getSize(), info.getInstallPath());\n+        return new DirectDownloadAnswer(true, template.getSize(), template.getName());\n+    }\n+\n+    /**\n+     * True if location exists\n+     */\n+    private boolean isLocationAccessible(String temporaryDownloadPath) {\n+        File dir = new File(temporaryDownloadPath);\n+        return dir.exists();\n+    }\n+\n+    /**\n+     * Perform a free space check on the host for downloading the direct download templates\n+     * @param templateSize template size obtained from remote server when registering the template (in bytes)\n+     */\n+    protected boolean isEnoughSpaceForDownloadTemplateOnTemporaryLocation(Long templateSize) {\n+        if (templateSize == null || templateSize == 0L) {\n+            s_logger.info(\"The server did not provide the template size, assuming there is enough space to download it\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0881b2073f30e55f71f82cb8612d892c7b6b6880"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4000, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}