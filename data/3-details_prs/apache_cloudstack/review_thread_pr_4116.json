{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NjAxMDI0", "number": 4116, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMTo1NTo0M1rOEDR_uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMDoyNzowMlrOEHOqqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODc2MDI0OnYy", "diffSide": "RIGHT", "path": "engine/schema/src/main/java/com/cloud/storage/dao/VMTemplateDao.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMTo1NTo0M1rOGgNXwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNToyNTo1OVrOGgPl3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyNjY4OQ==", "bodyText": "Remove unused/commented method", "url": "https://github.com/apache/cloudstack/pull/4116#discussion_r436426689", "createdAt": "2020-06-08T01:55:43Z", "author": {"login": "rhtyd"}, "path": "engine/schema/src/main/java/com/cloud/storage/dao/VMTemplateDao.java", "diffHunk": "@@ -36,6 +36,8 @@\n \n     public VMTemplateVO findByTemplateName(String templateName);\n \n+    public VMTemplateVO findValidByTemplateName(String templateName);\n+\n     // public void update(VMTemplateVO template);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c6861bdc0f6b9fbf58a1c099f36ba08348dd204"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2MzA2OA==", "bodyText": "done", "url": "https://github.com/apache/cloudstack/pull/4116#discussion_r436463068", "createdAt": "2020-06-08T05:25:59Z", "author": {"login": "shwstppr"}, "path": "engine/schema/src/main/java/com/cloud/storage/dao/VMTemplateDao.java", "diffHunk": "@@ -36,6 +36,8 @@\n \n     public VMTemplateVO findByTemplateName(String templateName);\n \n+    public VMTemplateVO findValidByTemplateName(String templateName);\n+\n     // public void update(VMTemplateVO template);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyNjY4OQ=="}, "originalCommit": {"oid": "8c6861bdc0f6b9fbf58a1c099f36ba08348dd204"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODc2MTAyOnYy", "diffSide": "RIGHT", "path": "plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/KubernetesClusterManagerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMTo1NjoxM1rOGgNYIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNToyNTozMVrOGgPlZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyNjc4Nw==", "bodyText": "Is logAndThrow a new utility?", "url": "https://github.com/apache/cloudstack/pull/4116#discussion_r436426787", "createdAt": "2020-06-08T01:56:13Z", "author": {"login": "rhtyd"}, "path": "plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/KubernetesClusterManagerImpl.java", "diffHunk": "@@ -908,6 +910,10 @@ private void validateKubernetesClusterUpgradeParameters(UpgradeKubernetesCluster\n         if (!KubernetesCluster.State.Running.equals(kubernetesCluster.getState())) {\n             throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s is not in running state\", kubernetesCluster.getUuid()));\n         }\n+        final DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n+        if (zone == null) {\n+            logAndThrow(Level.WARN, String.format(\"Unable to find zone for Kubernetes cluster ID: %s\", kubernetesCluster.getUuid()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c6861bdc0f6b9fbf58a1c099f36ba08348dd204"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2Mjk1MQ==", "bodyText": "Just some helper methods to log and throw exceptions for similar error \n  \n    \n      cloudstack/plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/KubernetesClusterManagerImpl.java\n    \n    \n        Lines 216 to 249\n      in\n      8c6861b\n    \n    \n    \n    \n\n        \n          \n           private void logMessage(final Level logLevel, final String message, final Exception e) { \n        \n\n        \n          \n               if (logLevel == Level.WARN) { \n        \n\n        \n          \n                   if (e != null) { \n        \n\n        \n          \n                       LOGGER.warn(message, e); \n        \n\n        \n          \n                   } else { \n        \n\n        \n          \n                       LOGGER.warn(message); \n        \n\n        \n          \n                   } \n        \n\n        \n          \n               } else { \n        \n\n        \n          \n                   if (e != null) { \n        \n\n        \n          \n                       LOGGER.error(message, e); \n        \n\n        \n          \n                   } else { \n        \n\n        \n          \n                       LOGGER.error(message); \n        \n\n        \n          \n                   } \n        \n\n        \n          \n               } \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           private void logTransitStateAndThrow(final Level logLevel, final String message, final Long kubernetesClusterId, final KubernetesCluster.Event event, final Exception e) throws CloudRuntimeException { \n        \n\n        \n          \n               logMessage(logLevel, message, e); \n        \n\n        \n          \n               if (kubernetesClusterId != null && event != null) { \n        \n\n        \n          \n                   stateTransitTo(kubernetesClusterId, event); \n        \n\n        \n          \n               } \n        \n\n        \n          \n               if (e == null) { \n        \n\n        \n          \n                   throw new CloudRuntimeException(message); \n        \n\n        \n          \n               } \n        \n\n        \n          \n               throw new CloudRuntimeException(message, e); \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           private void logAndThrow(final Level logLevel, final String message) throws CloudRuntimeException { \n        \n\n        \n          \n               logTransitStateAndThrow(logLevel, message, null, null, null); \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           private void logAndThrow(final Level logLevel, final String message, final Exception ex) throws CloudRuntimeException { \n        \n\n        \n          \n               logTransitStateAndThrow(logLevel, message, null, null, ex); \n        \n\n        \n          \n           }", "url": "https://github.com/apache/cloudstack/pull/4116#discussion_r436462951", "createdAt": "2020-06-08T05:25:31Z", "author": {"login": "shwstppr"}, "path": "plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/KubernetesClusterManagerImpl.java", "diffHunk": "@@ -908,6 +910,10 @@ private void validateKubernetesClusterUpgradeParameters(UpgradeKubernetesCluster\n         if (!KubernetesCluster.State.Running.equals(kubernetesCluster.getState())) {\n             throw new InvalidParameterValueException(String.format(\"Kubernetes cluster ID: %s is not in running state\", kubernetesCluster.getUuid()));\n         }\n+        final DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n+        if (zone == null) {\n+            logAndThrow(Level.WARN, String.format(\"Unable to find zone for Kubernetes cluster ID: %s\", kubernetesCluster.getUuid()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyNjc4Nw=="}, "originalCommit": {"oid": "8c6861bdc0f6b9fbf58a1c099f36ba08348dd204"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDE1Nzg1OnYy", "diffSide": "RIGHT", "path": "plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/KubernetesClusterManagerImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMDoyNzowMlrOGmgbig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzoxODoxMlrOG5W6YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAzMDQxMA==", "bodyText": "The call public List<TemplateJoinVO> newTemplateView(VirtualMachineTemplate template, long zoneId, boolean readyOnly) as implemented in TemplateJoinDaoImpl, does a search including removed leading to a hit for a template that is not available. Is this intended?", "url": "https://github.com/apache/cloudstack/pull/4116#discussion_r443030410", "createdAt": "2020-06-19T20:27:02Z", "author": {"login": "DaanHoogland"}, "path": "plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/KubernetesClusterManagerImpl.java", "diffHunk": "@@ -300,8 +294,7 @@ private boolean isKubernetesServiceTemplateConfigured(DataCenter zone) {\n                 LOGGER.warn(String.format(\"Unable to find the template %s to be used for provisioning Kubernetes cluster nodes\", templateName));\n                 return false;\n             }\n-            List<VMTemplateZoneVO> listZoneTemplate = templateZoneDao.listByZoneTemplate(zone.getId(), template.getId());\n-            if (listZoneTemplate == null || listZoneTemplate.isEmpty()) {\n+            if (CollectionUtils.isEmpty(templateJoinDao.newTemplateView(template, zone.getId(), true))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b763f79146fafee693af54132f2290b9597b28"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExNTg4Mw==", "bodyText": "@DaanHoogland thanks for pointing it. I'll check that again", "url": "https://github.com/apache/cloudstack/pull/4116#discussion_r445115883", "createdAt": "2020-06-24T19:17:35Z", "author": {"login": "shwstppr"}, "path": "plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/KubernetesClusterManagerImpl.java", "diffHunk": "@@ -300,8 +294,7 @@ private boolean isKubernetesServiceTemplateConfigured(DataCenter zone) {\n                 LOGGER.warn(String.format(\"Unable to find the template %s to be used for provisioning Kubernetes cluster nodes\", templateName));\n                 return false;\n             }\n-            List<VMTemplateZoneVO> listZoneTemplate = templateZoneDao.listByZoneTemplate(zone.getId(), template.getId());\n-            if (listZoneTemplate == null || listZoneTemplate.isEmpty()) {\n+            if (CollectionUtils.isEmpty(templateJoinDao.newTemplateView(template, zone.getId(), true))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAzMDQxMA=="}, "originalCommit": {"oid": "d4b763f79146fafee693af54132f2290b9597b28"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5NDU2NA==", "bodyText": "any resolution on this @shwstppr ?", "url": "https://github.com/apache/cloudstack/pull/4116#discussion_r462494564", "createdAt": "2020-07-29T18:15:38Z", "author": {"login": "DaanHoogland"}, "path": "plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/KubernetesClusterManagerImpl.java", "diffHunk": "@@ -300,8 +294,7 @@ private boolean isKubernetesServiceTemplateConfigured(DataCenter zone) {\n                 LOGGER.warn(String.format(\"Unable to find the template %s to be used for provisioning Kubernetes cluster nodes\", templateName));\n                 return false;\n             }\n-            List<VMTemplateZoneVO> listZoneTemplate = templateZoneDao.listByZoneTemplate(zone.getId(), template.getId());\n-            if (listZoneTemplate == null || listZoneTemplate.isEmpty()) {\n+            if (CollectionUtils.isEmpty(templateJoinDao.newTemplateView(template, zone.getId(), true))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAzMDQxMA=="}, "originalCommit": {"oid": "d4b763f79146fafee693af54132f2290b9597b28"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5NzQwOQ==", "bodyText": "@DaanHoogland I've checked this. newTemplateView is called here with readyOnly=true and deleted templates have state=NULL.", "url": "https://github.com/apache/cloudstack/pull/4116#discussion_r462797409", "createdAt": "2020-07-30T07:18:12Z", "author": {"login": "shwstppr"}, "path": "plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/KubernetesClusterManagerImpl.java", "diffHunk": "@@ -300,8 +294,7 @@ private boolean isKubernetesServiceTemplateConfigured(DataCenter zone) {\n                 LOGGER.warn(String.format(\"Unable to find the template %s to be used for provisioning Kubernetes cluster nodes\", templateName));\n                 return false;\n             }\n-            List<VMTemplateZoneVO> listZoneTemplate = templateZoneDao.listByZoneTemplate(zone.getId(), template.getId());\n-            if (listZoneTemplate == null || listZoneTemplate.isEmpty()) {\n+            if (CollectionUtils.isEmpty(templateJoinDao.newTemplateView(template, zone.getId(), true))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAzMDQxMA=="}, "originalCommit": {"oid": "d4b763f79146fafee693af54132f2290b9597b28"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3915, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}