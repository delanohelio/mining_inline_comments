{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MDI1MjU4", "number": 4071, "title": "Dynamic roles improvements", "bodyText": "Description\n\nThis PR addresses the below improvements for current Dynamic roles functionality.\n\n\nCreate a role from any of the existing role, using new parameter roleid in createRole API.\n\n\nImport a role with its rules, using a new importRole API.\n\n\nNew default roles for Read-Only and Support Admin & User.\n\n\nNo modifications (update or delete) allowed for Default roles.\n\n\nCleanup of old NetApp APIs from role_permissions table.\n\n\nUI changes PR: apache/cloudstack-primate#353\n\n\n\n\n\nTypes of changes\n\n\n Breaking change (fix or feature that would cause existing functionality to change)\n New feature (non-breaking change which adds functionality)\n Bug fix (non-breaking change which fixes an issue)\n Enhancement (improves an existing feature and functionality)\n Cleanup (Code refactoring and cleanup, that may add test cases)\n\nScreenshots (if appropriate):\nHow Has This Been Tested?\n\n\n\nManual Tests using API\n\nCreate a role using existing role.\n\nhttp://myms:8080/client/api?command=createRole&response=json&name=Test%20CloneUser01&description=Test%20CloneUser01&roleid=ca9871c2-8ea7-11ea-944e-c2865825b006\n{\"createroleresponse\":{\"role\":{\"id\":\"c3888c27-66b6-4a39-96ee-9883fef326ba\",\"name\":\"Test CloneUser01\",\"type\":\"User\",\"description\":\"Test CloneUser01\"}}}\n\nCreate a role using both role type and role id.\n\nhttp://myms:8080/client/api?command=createRole&response=json&type=Admin&name=Test%20CloneResourceAdmin&description=Test%20CloneResourceAdmin&roleid=ca984d00-8ea7-11ea-944e-c2865825b006\n{\"createroleresponse\":{\"uuidList\":[],\"errorcode\":431,\"cserrorcode\":9999,\"errortext\":\"Both role type and role ID should not be specified\"}}\n\nCreate a role without role type and role id.\n\nhttp://myms:8080/client/api?command=createRole&response=json&name=Test%20CloneResourceAdmin&description=Test%20CloneResourceAdmin\n{\"createroleresponse\":{\"uuidList\":[],\"errorcode\":431,\"cserrorcode\":9999,\"errortext\":\"Neither role type nor role ID is provided\"}}\n\nImport role\n\nhttp://myms:8080/client/api?command=importRole&response=json&name=ImportTestUser&type=User&description=Test%20Import%20Role&rules[0].rule=create*&rules[0].permission=allow&rules[0].description=create%20rule&rules[1].rule=list*&rules[1].permission=allow&rules[1].description=listing&forced=true\n{\"importroleresponse\":{\"role\":{\"id\":\"8306f86d-ab33-48b8-8263-535a0da5be04\",\"name\":\"ImportTestUser\",\"type\":\"User\",\"description\":\"Test Import Role\"}}}\n\nImport role with same name without force\n\nhttp://myms:8080/client/api?command=importRole&response=json&name=ImportTestUser&type=User&description=Test%20Import1%20Role&rules[0].rule=create*&rules[0].permission=allow&rules[0].description=create%20rule&rules[1].rule=list*&rules[1].permission=allow&rules[1].description=listings\n{\"importroleresponse\":{\"uuidList\":[],\"errorcode\":530,\"cserrorcode\":4250,\"errortext\":\"Role already exists\"}}\nUnit Tests\n[INFO] Running org.apache.cloudstack.api.command.test.ImportRoleCmdTest\n[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.032 s - in org.apache.cloudstack.api.command.test.ImportRoleCmdTest\n[INFO] Running org.apache.cloudstack.api.command.test.CreateRoleCmdTest\n[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.018 s - in org.apache.cloudstack.api.command.test.CreateRoleCmdTest\nSmoke Tests\n=== TestName: test_default_role_deletion | Status : SUCCESS ===\n=== TestName: test_role_account_acls | Status : SUCCESS ===\n=== TestName: test_role_account_acls_multiple_mgmt_servers | Status : SUCCESS ===\n=== TestName: test_role_inuse_deletion | Status : SUCCESS ===\n=== TestName: test_role_lifecycle_clone | Status : SUCCESS ===\n=== TestName: test_role_lifecycle_create | Status : SUCCESS ===\n=== TestName: test_role_lifecycle_delete | Status : SUCCESS ===\n=== TestName: test_role_lifecycle_import | Status : SUCCESS ===\n=== TestName: test_role_lifecycle_list | Status : SUCCESS ===\n=== TestName: test_role_lifecycle_update | Status : SUCCESS ===\n=== TestName: test_role_lifecycle_update_role_inuse | Status : SUCCESS ===\n=== TestName: test_rolepermission_lifecycle_concurrent_updates | Status : SUCCESS ===\n=== TestName: test_rolepermission_lifecycle_create | Status : SUCCESS ===\n=== TestName: test_rolepermission_lifecycle_delete | Status : SUCCESS ===\n=== TestName: test_rolepermission_lifecycle_list | Status : SUCCESS ===\n=== TestName: test_rolepermission_lifecycle_update | Status : SUCCESS ===\n=== TestName: test_rolepermission_lifecycle_update_permission | Status : SUCCESS ===\n=== TestName: test_rolepermission_lifecycle_update_permission_negative | Status : SUCCESS ===", "createdAt": "2020-05-11T10:50:25Z", "url": "https://github.com/apache/cloudstack/pull/4071", "merged": true, "mergeCommit": {"oid": "5040283db9744175402b53ba9a6c701b9d8e3436"}, "closed": true, "closedAt": "2020-07-07T05:26:44Z", "author": {"login": "sureshanaparti"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcg69y7gBqjMzMzI3NTU4NDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcw-3dKAFqTQ0MTY3ODUzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f284169273fa04be85d722e93a5ee6e999da0ce6", "author": {"user": {"login": "sureshanaparti", "name": null}}, "url": "https://github.com/apache/cloudstack/commit/f284169273fa04be85d722e93a5ee6e999da0ce6", "committedDate": "2020-05-11T10:19:26Z", "message": "Dynamic roles improvements"}, "afterCommit": {"oid": "f6c039147273a307175aec30583ec22fc6acc940", "author": {"user": {"login": "sureshanaparti", "name": null}}, "url": "https://github.com/apache/cloudstack/commit/f6c039147273a307175aec30583ec22fc6acc940", "committedDate": "2020-05-13T15:48:55Z", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNDc3MTM4", "url": "https://github.com/apache/cloudstack/pull/4071#pullrequestreview-413477138", "createdAt": "2020-05-18T10:44:13Z", "commit": {"oid": "f6c039147273a307175aec30583ec22fc6acc940"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDo0NTozOFrOGWxpkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDo1NzowOVrOGWyBmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzNTMxNA==", "bodyText": "nit - Make description more verbose, something like 'Imports a role based on provided map of rule permissions...'", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426535314", "createdAt": "2020-05-18T10:45:38Z", "author": {"login": "rhtyd"}, "path": "api/src/main/java/org/apache/cloudstack/api/command/admin/acl/ImportRoleCmd.java", "diffHunk": "@@ -0,0 +1,139 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.api.command.admin.acl;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.cloudstack.acl.Role;\n+import org.apache.cloudstack.acl.RoleType;\n+import org.apache.cloudstack.acl.Rule;\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiArgValidator;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.RoleResponse;\n+import org.apache.cloudstack.context.CallContext;\n+import org.apache.commons.collections.MapUtils;\n+\n+import com.cloud.user.Account;\n+import com.google.common.base.Strings;\n+\n+@APICommand(name = ImportRoleCmd.APINAME, description = \"Imports a role\", responseObject = RoleResponse.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c039147273a307175aec30583ec22fc6acc940"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzNjEzNQ==", "bodyText": "nit - fix description to say what happens in case of a role name matches (i.e. explain for the users that it will override/replace the previosly created role with the provided parameters).", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426536135", "createdAt": "2020-05-18T10:47:09Z", "author": {"login": "rhtyd"}, "path": "api/src/main/java/org/apache/cloudstack/api/command/admin/acl/ImportRoleCmd.java", "diffHunk": "@@ -0,0 +1,139 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.api.command.admin.acl;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.cloudstack.acl.Role;\n+import org.apache.cloudstack.acl.RoleType;\n+import org.apache.cloudstack.acl.Rule;\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiArgValidator;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.RoleResponse;\n+import org.apache.cloudstack.context.CallContext;\n+import org.apache.commons.collections.MapUtils;\n+\n+import com.cloud.user.Account;\n+import com.google.common.base.Strings;\n+\n+@APICommand(name = ImportRoleCmd.APINAME, description = \"Imports a role\", responseObject = RoleResponse.class,\n+        requestHasSensitiveInfo = false, responseHasSensitiveInfo = false,\n+        since = \"4.15.0\",\n+        authorized = {RoleType.Admin})\n+public class ImportRoleCmd extends RoleCmd {\n+    public static final String APINAME = \"importRole\";\n+\n+    /////////////////////////////////////////////////////\n+    //////////////// API parameters /////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    @Parameter(name = ApiConstants.NAME, type = CommandType.STRING, required = true,\n+            description = \"Creates a role with this unique name\", validations = {ApiArgValidator.NotNullOrEmpty})\n+    private String roleName;\n+\n+    @Parameter(name = ApiConstants.RULES, type = CommandType.MAP, required = true,\n+            description = \"Rules param list, rule and permission is must. Example: rules[0].rule=create*&rules[0].permission=allow&rules[0].description=create%20rule&rules[1].rule=list*&rules[1].permission=allow&rules[1].description=listing\")\n+    private Map rules;\n+\n+    @Parameter(name = ApiConstants.FORCED, type = CommandType.BOOLEAN,\n+            description = \"Force create a role\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c039147273a307175aec30583ec22fc6acc940"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzNzE1Nw==", "bodyText": "I get the reuse with the createRole API, but do we want these parameters for the updateRole API?", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426537157", "createdAt": "2020-05-18T10:49:01Z", "author": {"login": "rhtyd"}, "path": "api/src/main/java/org/apache/cloudstack/api/command/admin/acl/RoleCmd.java", "diffHunk": "@@ -18,11 +18,41 @@\n package org.apache.cloudstack.api.command.admin.acl;\n \n import org.apache.cloudstack.acl.Role;\n+import org.apache.cloudstack.acl.RoleType;\n+import org.apache.cloudstack.api.ApiConstants;\n import org.apache.cloudstack.api.BaseCmd;\n+import org.apache.cloudstack.api.Parameter;\n import org.apache.cloudstack.api.response.RoleResponse;\n \n+import com.google.common.base.Strings;\n+\n public abstract class RoleCmd extends BaseCmd {\n \n+    /////////////////////////////////////////////////////\n+    //////////////// API parameters /////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    @Parameter(name = ApiConstants.TYPE, type = CommandType.STRING, description = \"The type of the role, valid options are: Admin, ResourceAdmin, DomainAdmin, User\")\n+    private String roleType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c039147273a307175aec30583ec22fc6acc940"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzNzQ5MQ==", "bodyText": "nit - can you also explain what it means for a role to be default (default could be misleading, perhaps what you mean is if the role is built-in).", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426537491", "createdAt": "2020-05-18T10:49:43Z", "author": {"login": "rhtyd"}, "path": "api/src/main/java/org/apache/cloudstack/api/response/RoleResponse.java", "diffHunk": "@@ -43,6 +43,10 @@\n     @Param(description = \"the description of the role\")\n     private String roleDescription;\n \n+    @SerializedName(ApiConstants.IS_DEFAULT)\n+    @Param(description = \"true if role is default, false otherwise\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c039147273a307175aec30583ec22fc6acc940"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzODA1MQ==", "bodyText": "We want the DB changes in the 4.14 -> 4.15 upgrade path.", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426538051", "createdAt": "2020-05-18T10:50:50Z", "author": {"login": "rhtyd"}, "path": "engine/schema/src/main/resources/META-INF/db/schema-41310to41400-cleanup.sql", "diffHunk": "@@ -26,3 +26,6 @@ UPDATE `cloud`.`storage_pool` SET path=\"/var/lib/libvirt/images\" WHERE path=\"/va\n \n -- remove (one of) duplicate unique indexes from Region table\n ALTER TABLE `region` DROP INDEX `id_3`;\n+\n+-- remove the old NetApp storage APIs (unsupported since 4.12) from role_permissions\n+DELETE from `cloud`.`role_permissions` WHERE rule IN ('createPool', 'modifyPool', 'deletePool', 'listPools', 'associateLun', 'dissociateLun', 'createLunOnFiler', 'destroyLunOnFiler', 'listLunsOnFiler', 'createVolumeOnFiler', 'destroyVolumeOnFiler', 'listVolumesOnFiler');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c039147273a307175aec30583ec22fc6acc940"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzODEwNA==", "bodyText": "We want the DB changes in the 4.14 -> 4.15 upgrade path.", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426538104", "createdAt": "2020-05-18T10:50:56Z", "author": {"login": "rhtyd"}, "path": "engine/schema/src/main/resources/META-INF/db/schema-41310to41400.sql", "diffHunk": "@@ -379,3 +379,81 @@ CREATE TABLE IF NOT EXISTS `cloud`.`kubernetes_cluster_details` (\n     PRIMARY KEY(`id`),\n     CONSTRAINT `fk_kubernetes_cluster_details__cluster_id` FOREIGN KEY `fk_kubernetes_cluster_details__cluster_id`(`cluster_id`) REFERENCES `kubernetes_cluster`(`id`) ON DELETE CASCADE\n ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c039147273a307175aec30583ec22fc6acc940"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzODM5NQ==", "bodyText": "Please check in code if there exists any restriction on ID for default/built-in roles.", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426538395", "createdAt": "2020-05-18T10:51:29Z", "author": {"login": "rhtyd"}, "path": "engine/schema/src/main/resources/META-INF/db/schema-41310to41400.sql", "diffHunk": "@@ -379,3 +379,81 @@ CREATE TABLE IF NOT EXISTS `cloud`.`kubernetes_cluster_details` (\n     PRIMARY KEY(`id`),\n     CONSTRAINT `fk_kubernetes_cluster_details__cluster_id` FOREIGN KEY `fk_kubernetes_cluster_details__cluster_id`(`cluster_id`) REFERENCES `kubernetes_cluster`(`id`) ON DELETE CASCADE\n ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n+\n+ALTER TABLE `cloud`.`roles` ADD COLUMN `is_default` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'is this a default role';\n+UPDATE `cloud`.`roles` SET `is_default` = 1 WHERE id IN (1, 2, 3, 4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c039147273a307175aec30583ec22fc6acc940"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzODk0OA==", "bodyText": "Why not change the name to reflect these are default or built-in roles, should we be renaming any existing roles matching this? It could lead to side-effects, I would've preferred failing an upgrade instead of silent override.", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426538948", "createdAt": "2020-05-18T10:52:36Z", "author": {"login": "rhtyd"}, "path": "engine/schema/src/main/resources/META-INF/db/schema-41310to41400.sql", "diffHunk": "@@ -379,3 +379,81 @@ CREATE TABLE IF NOT EXISTS `cloud`.`kubernetes_cluster_details` (\n     PRIMARY KEY(`id`),\n     CONSTRAINT `fk_kubernetes_cluster_details__cluster_id` FOREIGN KEY `fk_kubernetes_cluster_details__cluster_id`(`cluster_id`) REFERENCES `kubernetes_cluster`(`id`) ON DELETE CASCADE\n ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n+\n+ALTER TABLE `cloud`.`roles` ADD COLUMN `is_default` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'is this a default role';\n+UPDATE `cloud`.`roles` SET `is_default` = 1 WHERE id IN (1, 2, 3, 4);\n+\n+-- Updated Default CloudStack roles with read-only and support admin and user roles\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Read-Only Admin', 'Admin', 'Default read-only admin role', 1) ON DUPLICATE KEY UPDATE name=name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c039147273a307175aec30583ec22fc6acc940"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzOTYxNw==", "bodyText": "Should the rule here be list* or get* etc.? Or was rule declared somewhere I missed ?", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426539617", "createdAt": "2020-05-18T10:53:48Z", "author": {"login": "rhtyd"}, "path": "engine/schema/src/main/resources/META-INF/db/schema-41310to41400.sql", "diffHunk": "@@ -379,3 +379,81 @@ CREATE TABLE IF NOT EXISTS `cloud`.`kubernetes_cluster_details` (\n     PRIMARY KEY(`id`),\n     CONSTRAINT `fk_kubernetes_cluster_details__cluster_id` FOREIGN KEY `fk_kubernetes_cluster_details__cluster_id`(`cluster_id`) REFERENCES `kubernetes_cluster`(`id`) ON DELETE CASCADE\n ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n+\n+ALTER TABLE `cloud`.`roles` ADD COLUMN `is_default` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'is this a default role';\n+UPDATE `cloud`.`roles` SET `is_default` = 1 WHERE id IN (1, 2, 3, 4);\n+\n+-- Updated Default CloudStack roles with read-only and support admin and user roles\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Read-Only Admin', 'Admin', 'Default read-only admin role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Read-Only User', 'User', 'Default read-only user role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Admin-Support', 'Admin', 'Default admin support role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'User-Support', 'User', 'Default user support role', 1) ON DUPLICATE KEY UPDATE name=name;\n+\n+-- Role permissions for Read-Only Admin\n+SELECT id INTO @ReadOnlyAdminRoleId FROM `cloud`.`roles` WHERE name = 'Read-Only Admin' AND is_default = 1;\n+SELECT @ReadOnlyAdminSortOrder:=-1;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'list*', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'getUploadParamsFor*', 'DENY', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'get*', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'cloudianIsEnabled', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'quotaIsEnabled', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'quotaTariffList', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'quotaSummary', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, '*', 'DENY', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+\n+-- Role permissions for Read-Only User\n+SELECT id INTO @ReadOnlyUserRoleId FROM `cloud`.`roles` WHERE name = 'Read-Only User' AND is_default = 1;\n+SELECT @ReadOnlyUserSortOrder:=-1;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) SELECT UUID(), @ReadOnlyUserRoleId, rule, 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1 FROM `cloud`.`role_permissions` WHERE role_id = 4 AND permission = 'ALLOW' AND rule LIKE 'list%';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c039147273a307175aec30583ec22fc6acc940"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzOTk1NA==", "bodyText": "Same as above about the rule use?", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426539954", "createdAt": "2020-05-18T10:54:21Z", "author": {"login": "rhtyd"}, "path": "engine/schema/src/main/resources/META-INF/db/schema-41310to41400.sql", "diffHunk": "@@ -379,3 +379,81 @@ CREATE TABLE IF NOT EXISTS `cloud`.`kubernetes_cluster_details` (\n     PRIMARY KEY(`id`),\n     CONSTRAINT `fk_kubernetes_cluster_details__cluster_id` FOREIGN KEY `fk_kubernetes_cluster_details__cluster_id`(`cluster_id`) REFERENCES `kubernetes_cluster`(`id`) ON DELETE CASCADE\n ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n+\n+ALTER TABLE `cloud`.`roles` ADD COLUMN `is_default` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'is this a default role';\n+UPDATE `cloud`.`roles` SET `is_default` = 1 WHERE id IN (1, 2, 3, 4);\n+\n+-- Updated Default CloudStack roles with read-only and support admin and user roles\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Read-Only Admin', 'Admin', 'Default read-only admin role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Read-Only User', 'User', 'Default read-only user role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Admin-Support', 'Admin', 'Default admin support role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'User-Support', 'User', 'Default user support role', 1) ON DUPLICATE KEY UPDATE name=name;\n+\n+-- Role permissions for Read-Only Admin\n+SELECT id INTO @ReadOnlyAdminRoleId FROM `cloud`.`roles` WHERE name = 'Read-Only Admin' AND is_default = 1;\n+SELECT @ReadOnlyAdminSortOrder:=-1;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'list*', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'getUploadParamsFor*', 'DENY', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'get*', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'cloudianIsEnabled', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'quotaIsEnabled', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'quotaTariffList', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'quotaSummary', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, '*', 'DENY', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+\n+-- Role permissions for Read-Only User\n+SELECT id INTO @ReadOnlyUserRoleId FROM `cloud`.`roles` WHERE name = 'Read-Only User' AND is_default = 1;\n+SELECT @ReadOnlyUserSortOrder:=-1;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) SELECT UUID(), @ReadOnlyUserRoleId, rule, 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1 FROM `cloud`.`role_permissions` WHERE role_id = 4 AND permission = 'ALLOW' AND rule LIKE 'list%';\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) SELECT UUID(), @ReadOnlyUserRoleId, rule, 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1 FROM `cloud`.`role_permissions` WHERE role_id = 4 AND permission = 'ALLOW' AND rule LIKE 'get%' AND rule NOT LIKE 'getUploadParamsFor%';\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyUserRoleId, 'cloudianIsEnabled', 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyUserRoleId, 'quotaIsEnabled', 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyUserRoleId, 'quotaTariffList', 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyUserRoleId, 'quotaSummary', 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyUserRoleId, '*', 'DENY', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+\n+-- Role permissions for Admin-Support\n+SELECT id INTO @AdminSupportRoleId FROM `cloud`.`roles` WHERE name = 'Admin-Support' AND is_default = 1;\n+SELECT @AdminSupportSortOrder:=-1;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) SELECT UUID(), @AdminSupportRoleId, rule, 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1 FROM `cloud`.`role_permissions` WHERE role_id = @ReadOnlyAdminRoleId AND permission = 'ALLOW';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c039147273a307175aec30583ec22fc6acc940"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0MDA0OA==", "bodyText": "Same as above about the rule use?", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426540048", "createdAt": "2020-05-18T10:54:30Z", "author": {"login": "rhtyd"}, "path": "engine/schema/src/main/resources/META-INF/db/schema-41310to41400.sql", "diffHunk": "@@ -379,3 +379,81 @@ CREATE TABLE IF NOT EXISTS `cloud`.`kubernetes_cluster_details` (\n     PRIMARY KEY(`id`),\n     CONSTRAINT `fk_kubernetes_cluster_details__cluster_id` FOREIGN KEY `fk_kubernetes_cluster_details__cluster_id`(`cluster_id`) REFERENCES `kubernetes_cluster`(`id`) ON DELETE CASCADE\n ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n+\n+ALTER TABLE `cloud`.`roles` ADD COLUMN `is_default` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'is this a default role';\n+UPDATE `cloud`.`roles` SET `is_default` = 1 WHERE id IN (1, 2, 3, 4);\n+\n+-- Updated Default CloudStack roles with read-only and support admin and user roles\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Read-Only Admin', 'Admin', 'Default read-only admin role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Read-Only User', 'User', 'Default read-only user role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Admin-Support', 'Admin', 'Default admin support role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'User-Support', 'User', 'Default user support role', 1) ON DUPLICATE KEY UPDATE name=name;\n+\n+-- Role permissions for Read-Only Admin\n+SELECT id INTO @ReadOnlyAdminRoleId FROM `cloud`.`roles` WHERE name = 'Read-Only Admin' AND is_default = 1;\n+SELECT @ReadOnlyAdminSortOrder:=-1;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'list*', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'getUploadParamsFor*', 'DENY', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'get*', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'cloudianIsEnabled', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'quotaIsEnabled', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'quotaTariffList', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'quotaSummary', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, '*', 'DENY', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+\n+-- Role permissions for Read-Only User\n+SELECT id INTO @ReadOnlyUserRoleId FROM `cloud`.`roles` WHERE name = 'Read-Only User' AND is_default = 1;\n+SELECT @ReadOnlyUserSortOrder:=-1;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) SELECT UUID(), @ReadOnlyUserRoleId, rule, 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1 FROM `cloud`.`role_permissions` WHERE role_id = 4 AND permission = 'ALLOW' AND rule LIKE 'list%';\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) SELECT UUID(), @ReadOnlyUserRoleId, rule, 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1 FROM `cloud`.`role_permissions` WHERE role_id = 4 AND permission = 'ALLOW' AND rule LIKE 'get%' AND rule NOT LIKE 'getUploadParamsFor%';\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyUserRoleId, 'cloudianIsEnabled', 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyUserRoleId, 'quotaIsEnabled', 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyUserRoleId, 'quotaTariffList', 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyUserRoleId, 'quotaSummary', 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyUserRoleId, '*', 'DENY', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+\n+-- Role permissions for Admin-Support\n+SELECT id INTO @AdminSupportRoleId FROM `cloud`.`roles` WHERE name = 'Admin-Support' AND is_default = 1;\n+SELECT @AdminSupportSortOrder:=-1;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) SELECT UUID(), @AdminSupportRoleId, rule, 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1 FROM `cloud`.`role_permissions` WHERE role_id = @ReadOnlyAdminRoleId AND permission = 'ALLOW';\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'prepareHostForMaintenance', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'cancelHostMaintenance', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'enableStorageMaintenance', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'cancelStorageMaintenance', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'createServiceOffering', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'createDiskOffering', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'createNetworkOffering', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'createVPCOffering', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'startVirtualMachine', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'stopVirtualMachine', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'rebootVirtualMachine', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'startKubernetesCluster', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'stopKubernetesCluster', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'attachVolume', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'detachVolume', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'uploadVolume', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'attachIso', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'detachIso', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'registerTemplate', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'registerIso', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'getUploadParamsFor*', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, '*', 'DENY', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+\n+-- Role permissions for User-Support\n+SELECT id INTO @UserSupportRoleId FROM `cloud`.`roles` WHERE name = 'User-Support' AND is_default = 1;\n+SELECT @UserSupportSortOrder:=-1;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) SELECT UUID(), @UserSupportRoleId, rule, 'ALLOW', @UserSupportSortOrder:=@UserSupportSortOrder+1 FROM `cloud`.`role_permissions` WHERE role_id = @ReadOnlyUserRoleId AND permission = 'ALLOW';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c039147273a307175aec30583ec22fc6acc940"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0MDQ4NQ==", "bodyText": "nit - Can you improve the exception message?", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426540485", "createdAt": "2020-05-18T10:55:18Z", "author": {"login": "rhtyd"}, "path": "server/src/main/java/org/apache/cloudstack/acl/RoleManagerImpl.java", "diffHunk": "@@ -146,10 +150,89 @@ public RoleVO doInTransaction(TransactionStatus status) {\n         });\n     }\n \n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_ROLE_CREATE, eventDescription = \"creating Role\")\n+    public Role createRole(String name, Role role, String description) {\n+        checkCallerAccess();\n+        return Transaction.execute(new TransactionCallback<RoleVO>() {\n+            @Override\n+            public RoleVO doInTransaction(TransactionStatus status) {\n+                RoleVO newRoleVO = roleDao.persist(new RoleVO(name, role.getRoleType(), description));\n+                if (newRoleVO == null) {\n+                    throw new CloudRuntimeException(\"Unable to add role into DB, is DB full?\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c039147273a307175aec30583ec22fc6acc940"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0MTQ2NQ==", "bodyText": "Here was a check which determined that the role was built-in, i.e. the first 4 roles treated as built-in and no changes to these 4 roles were allowed by using enum idx without requiring a db column for that.", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426541465", "createdAt": "2020-05-18T10:57:09Z", "author": {"login": "rhtyd"}, "path": "server/src/main/java/org/apache/cloudstack/acl/RoleManagerImpl.java", "diffHunk": "@@ -159,9 +242,6 @@ public Role updateRole(final Role role, final String name, final RoleType roleTy\n             roleVO.setName(name);\n         }\n         if (roleType != null) {\n-            if (role.getId() <= RoleType.User.getId()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c039147273a307175aec30583ec22fc6acc940"}, "originalPosition": 123}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f6c039147273a307175aec30583ec22fc6acc940", "author": {"user": {"login": "sureshanaparti", "name": null}}, "url": "https://github.com/apache/cloudstack/commit/f6c039147273a307175aec30583ec22fc6acc940", "committedDate": "2020-05-13T15:48:55Z", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table."}, "afterCommit": {"oid": "7bb7f956fa4af56777fef3889cabd2d5cbd75f2e", "author": {"user": {"login": "sureshanaparti", "name": null}}, "url": "https://github.com/apache/cloudstack/commit/7bb7f956fa4af56777fef3889cabd2d5cbd75f2e", "committedDate": "2020-06-01T17:59:17Z", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7bb7f956fa4af56777fef3889cabd2d5cbd75f2e", "author": {"user": {"login": "sureshanaparti", "name": null}}, "url": "https://github.com/apache/cloudstack/commit/7bb7f956fa4af56777fef3889cabd2d5cbd75f2e", "committedDate": "2020-06-01T17:59:17Z", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table."}, "afterCommit": {"oid": "80aaeaca55ae1638dbc7b39c255f5c26753248e4", "author": {"user": {"login": "sureshanaparti", "name": null}}, "url": "https://github.com/apache/cloudstack/commit/80aaeaca55ae1638dbc7b39c255f5c26753248e4", "committedDate": "2020-06-01T18:31:17Z", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "80aaeaca55ae1638dbc7b39c255f5c26753248e4", "author": {"user": {"login": "sureshanaparti", "name": null}}, "url": "https://github.com/apache/cloudstack/commit/80aaeaca55ae1638dbc7b39c255f5c26753248e4", "committedDate": "2020-06-01T18:31:17Z", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table."}, "afterCommit": {"oid": "51b45949a42e12f8e420ca1d96c8249e536b2c23", "author": {"user": {"login": "sureshanaparti", "name": null}}, "url": "https://github.com/apache/cloudstack/commit/51b45949a42e12f8e420ca1d96c8249e536b2c23", "committedDate": "2020-06-09T07:01:00Z", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2ODcyNjk1", "url": "https://github.com/apache/cloudstack/pull/4071#pullrequestreview-426872695", "createdAt": "2020-06-09T07:47:56Z", "commit": {"oid": "51b45949a42e12f8e420ca1d96c8249e536b2c23"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNzo0Nzo1NlrOGg8zqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNzo0Nzo1NlrOGg8zqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIwMzg4MQ==", "bodyText": "With a debugger I found that execution fails for mvn deploydb with:\n========> Processing upgrade: com.cloud.upgrade.DatabaseUpgradeChecker\n[WARNING] \njava.lang.reflect.InvocationTargetException\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)\n    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke (Method.java:566)\n    at org.codehaus.mojo.exec.ExecJavaMojo$1.run (ExecJavaMojo.java:297)\n    at java.lang.Thread.run (Thread.java:834)\nCaused by: com.cloud.utils.exception.CloudRuntimeException: Unable to upgrade the database\n    at com.cloud.upgrade.DatabaseUpgradeChecker.upgrade (DatabaseUpgradeChecker.java:271)\n    at com.cloud.upgrade.DatabaseUpgradeChecker.check (DatabaseUpgradeChecker.java:342)\n    at com.cloud.upgrade.DatabaseCreator.main (DatabaseCreator.java:217)\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)\n    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke (Method.java:566)\n    at org.codehaus.mojo.exec.ExecJavaMojo$1.run (ExecJavaMojo.java:297)\n    at java.lang.Thread.run (Thread.java:834)\nCaused by: com.cloud.utils.exception.CloudRuntimeException: Unable to execute upgrade script\n    at com.cloud.upgrade.DatabaseUpgradeChecker.runScript (DatabaseUpgradeChecker.java:209)\n    at com.cloud.upgrade.DatabaseUpgradeChecker.upgrade (DatabaseUpgradeChecker.java:258)\n    at com.cloud.upgrade.DatabaseUpgradeChecker.check (DatabaseUpgradeChecker.java:342)\n    at com.cloud.upgrade.DatabaseCreator.main (DatabaseCreator.java:217)\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)\n    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke (Method.java:566)\n    at org.codehaus.mojo.exec.ExecJavaMojo$1.run (ExecJavaMojo.java:297)\n    at java.lang.Thread.run (Thread.java:834)\nCaused by: java.sql.SQLException: Column index out of range.\n    at com.cloud.utils.db.ScriptRunner.runScript (ScriptRunner.java:185)\n    at com.cloud.utils.db.ScriptRunner.runScript (ScriptRunner.java:87)\n    at com.cloud.upgrade.DatabaseUpgradeChecker.runScript (DatabaseUpgradeChecker.java:203)\n    at com.cloud.upgrade.DatabaseUpgradeChecker.upgrade (DatabaseUpgradeChecker.java:258)\n    at com.cloud.upgrade.DatabaseUpgradeChecker.check (DatabaseUpgradeChecker.java:342)\n    at com.cloud.upgrade.DatabaseCreator.main (DatabaseCreator.java:217)\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)\n    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke (Method.java:566)\n    at org.codehaus.mojo.exec.ExecJavaMojo$1.run (ExecJavaMojo.java:297)\n    at java.lang.Thread.run (Thread.java:834)", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r437203881", "createdAt": "2020-06-09T07:47:56Z", "author": {"login": "rhtyd"}, "path": "engine/schema/src/main/resources/META-INF/db/schema-41400to41500.sql", "diffHunk": "@@ -18,3 +18,81 @@\n --;\n -- Schema upgrade from 4.14.0.0 to 4.15.0.0\n --;\n+\n+ALTER TABLE `cloud`.`roles` ADD COLUMN `is_default` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'is this a default role';\n+UPDATE `cloud`.`roles` SET `is_default` = 1 WHERE id IN (1, 2, 3, 4);\n+\n+-- Updated Default CloudStack roles with read-only and support admin and user roles\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Read-Only Admin', 'Admin', 'Default read-only admin role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Read-Only User', 'User', 'Default read-only user role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Admin-Support', 'Admin', 'Default admin support role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'User-Support', 'User', 'Default user support role', 1) ON DUPLICATE KEY UPDATE name=name;\n+\n+-- Role permissions for Read-Only Admin\n+SELECT id INTO @ReadOnlyAdminRoleId FROM `cloud`.`roles` WHERE name = 'Read-Only Admin' AND is_default = 1;\n+SELECT @ReadOnlyAdminSortOrder:=-1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b45949a42e12f8e420ca1d96c8249e536b2c23"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "51b45949a42e12f8e420ca1d96c8249e536b2c23", "author": {"user": {"login": "sureshanaparti", "name": null}}, "url": "https://github.com/apache/cloudstack/commit/51b45949a42e12f8e420ca1d96c8249e536b2c23", "committedDate": "2020-06-09T07:01:00Z", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table."}, "afterCommit": {"oid": "794c215503d1b55b97119c91d072c2d3b1760c17", "author": {"user": {"login": "sureshanaparti", "name": null}}, "url": "https://github.com/apache/cloudstack/commit/794c215503d1b55b97119c91d072c2d3b1760c17", "committedDate": "2020-06-11T07:03:57Z", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NTYxMzk1", "url": "https://github.com/apache/cloudstack/pull/4071#pullrequestreview-429561395", "createdAt": "2020-06-12T08:35:54Z", "commit": {"oid": "794c215503d1b55b97119c91d072c2d3b1760c17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODozNTo1NFrOGi711Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODozNTo1NFrOGi711Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4NTIwNQ==", "bodyText": "Minor nit - can we call the role 'SupportAdmin' and 'SupportUser'?", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r439285205", "createdAt": "2020-06-12T08:35:54Z", "author": {"login": "rhtyd"}, "path": "engine/schema/src/main/java/com/cloud/upgrade/dao/Upgrade41400to41500.java", "diffHunk": "@@ -235,6 +238,267 @@ private void updateSystemVmTemplates(final Connection conn) {\n         LOG.debug(\"Updating System Vm Template IDs Complete\");\n     }\n \n+    private void addRolePermissionsForNewReadOnlyAndSupportRoles(final Connection conn) {\n+        addRolePermissionsForReadOnlyAdmin(conn);\n+        addRolePermissionsForReadOnlyUser(conn);\n+        addRolePermissionsForAdminSupport(conn);\n+        addRolePermissionsForUserSupport(conn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "794c215503d1b55b97119c91d072c2d3b1760c17"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NTYyMDc2", "url": "https://github.com/apache/cloudstack/pull/4071#pullrequestreview-429562076", "createdAt": "2020-06-12T08:36:54Z", "commit": {"oid": "794c215503d1b55b97119c91d072c2d3b1760c17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODozNjo1NVrOGi73xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODozNjo1NVrOGi73xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4NTcwMA==", "bodyText": "nit - Could be made less verbose by doing a loop on the API strings and add the string to the collection/list. Same for other parts of code.", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r439285700", "createdAt": "2020-06-12T08:36:55Z", "author": {"login": "rhtyd"}, "path": "engine/schema/src/main/java/com/cloud/upgrade/dao/Upgrade41400to41500.java", "diffHunk": "@@ -235,6 +238,267 @@ private void updateSystemVmTemplates(final Connection conn) {\n         LOG.debug(\"Updating System Vm Template IDs Complete\");\n     }\n \n+    private void addRolePermissionsForNewReadOnlyAndSupportRoles(final Connection conn) {\n+        addRolePermissionsForReadOnlyAdmin(conn);\n+        addRolePermissionsForReadOnlyUser(conn);\n+        addRolePermissionsForAdminSupport(conn);\n+        addRolePermissionsForUserSupport(conn);\n+    }\n+\n+    private void addRolePermissionsForReadOnlyAdmin(final Connection conn) {\n+        LOG.debug(\"Adding role permissions for new read-only admin role\");\n+        try {\n+            PreparedStatement pstmt = conn.prepareStatement(\"SELECT id FROM `cloud`.`roles` WHERE name = 'Read-Only Admin (Default)' AND is_default = 1\");\n+            ResultSet rs = pstmt.executeQuery();\n+            if (rs.next()) {\n+                long readOnlyAdminRoleId = rs.getLong(1);\n+                int readOnlyAdminSortOrder = 0;\n+                List<String> insertSqlForReadOnlyAdminRolePermissions = new ArrayList<String>();\n+                insertSqlForReadOnlyAdminRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'list*', 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                insertSqlForReadOnlyAdminRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'getUploadParamsFor*', 'DENY', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                insertSqlForReadOnlyAdminRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'get*', 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                insertSqlForReadOnlyAdminRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'cloudianIsEnabled', 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                insertSqlForReadOnlyAdminRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'quotaIsEnabled', 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                insertSqlForReadOnlyAdminRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'quotaTariffList', 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                insertSqlForReadOnlyAdminRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'quotaSummary', 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                insertSqlForReadOnlyAdminRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, '*', 'DENY', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+\n+                for(String insertSqlForReadOnlyAdmin : insertSqlForReadOnlyAdminRolePermissions) {\n+                    pstmt = conn.prepareStatement(insertSqlForReadOnlyAdmin);\n+                    pstmt.setLong(1, readOnlyAdminRoleId);\n+                    pstmt.setLong(2, readOnlyAdminSortOrder++);\n+                    pstmt.executeUpdate();\n+                }\n+            }\n+\n+            if (rs != null && !rs.isClosed())  {\n+                rs.close();\n+            }\n+            if (pstmt != null && !pstmt.isClosed())  {\n+                pstmt.close();\n+            }\n+            LOG.debug(\"Successfully added role permissions for new read-only admin role\");\n+        } catch (final SQLException e) {\n+            LOG.error(\"Exception while adding role permissions for read-only admin role: \" + e.getMessage());\n+            throw new CloudRuntimeException(\"Exception while adding role permissions for read-only admin role: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private void addRolePermissionsForReadOnlyUser(final Connection conn) {\n+        LOG.debug(\"Adding role permissions for new read-only user role\");\n+        try {\n+            PreparedStatement pstmt = conn.prepareStatement(\"SELECT id FROM `cloud`.`roles` WHERE name = 'Read-Only User (Default)' AND is_default = 1\");\n+            ResultSet rs = pstmt.executeQuery();\n+            if (rs.next()) {\n+                long readOnlyUserRoleId = rs.getLong(1);\n+                int readOnlyUserSortOrder = 0;\n+\n+                pstmt = conn.prepareStatement(\"SELECT rule FROM `cloud`.`role_permissions` WHERE role_id = 4 AND permission = 'ALLOW' AND rule LIKE 'list%' ORDER BY sort_order\");\n+                ResultSet rsRolePermissions = pstmt.executeQuery();\n+\n+                while (rsRolePermissions.next()) {\n+                    String rule = rsRolePermissions.getString(1);\n+                    pstmt = conn.prepareStatement(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, ?, 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                    pstmt.setLong(1, readOnlyUserRoleId);\n+                    pstmt.setString(2, rule);\n+                    pstmt.setLong(3, readOnlyUserSortOrder++);\n+                    pstmt.executeUpdate();\n+                }\n+\n+                pstmt = conn.prepareStatement(\"SELECT rule FROM `cloud`.`role_permissions` WHERE role_id = 4 AND permission = 'ALLOW' AND rule LIKE 'get%' AND rule NOT LIKE 'getUploadParamsFor%' ORDER BY sort_order\");\n+                rsRolePermissions = pstmt.executeQuery();\n+\n+                while (rsRolePermissions.next()) {\n+                    String rule = rsRolePermissions.getString(1);\n+                    pstmt = conn.prepareStatement(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, ?, 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                    pstmt.setLong(1, readOnlyUserRoleId);\n+                    pstmt.setString(2, rule);\n+                    pstmt.setLong(3, readOnlyUserSortOrder++);\n+                    pstmt.executeUpdate();\n+                }\n+\n+                List<String> insertSqlForReadOnlyUserRolePermissions = new ArrayList<String>();\n+                insertSqlForReadOnlyUserRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'cloudianIsEnabled', 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                insertSqlForReadOnlyUserRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'quotaIsEnabled', 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                insertSqlForReadOnlyUserRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'quotaTariffList', 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                insertSqlForReadOnlyUserRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'quotaSummary', 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                insertSqlForReadOnlyUserRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, '*', 'DENY', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+\n+                for(String insertSqlForReadOnlyUser : insertSqlForReadOnlyUserRolePermissions) {\n+                    pstmt = conn.prepareStatement(insertSqlForReadOnlyUser);\n+                    pstmt.setLong(1, readOnlyUserRoleId);\n+                    pstmt.setLong(2, readOnlyUserSortOrder++);\n+                    pstmt.executeUpdate();\n+                }\n+\n+                if (rsRolePermissions != null && !rsRolePermissions.isClosed())  {\n+                    rsRolePermissions.close();\n+                }\n+            }\n+\n+            if (rs != null && !rs.isClosed())  {\n+                rs.close();\n+            }\n+            if (pstmt != null && !pstmt.isClosed())  {\n+                pstmt.close();\n+            }\n+            LOG.debug(\"Successfully added role permissions for new read-only user role\");\n+        } catch (final SQLException e) {\n+            LOG.error(\"Exception while adding role permissions for read-only user role: \" + e.getMessage());\n+            throw new CloudRuntimeException(\"Exception while adding role permissions for read-only user role: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private void addRolePermissionsForAdminSupport(final Connection conn) {\n+        LOG.debug(\"Adding role permissions for new admin support role\");\n+        try {\n+            PreparedStatement pstmt = conn.prepareStatement(\"SELECT id FROM `cloud`.`roles` WHERE name = 'Admin-Support (Default)' AND is_default = 1\");\n+            ResultSet rs = pstmt.executeQuery();\n+            if (rs.next()) {\n+                long adminSupportRoleId = rs.getLong(1);\n+                int adminSupportSortOrder = 0;\n+\n+                pstmt = conn.prepareStatement(\"SELECT id FROM `cloud`.`roles` WHERE name = 'Read-Only Admin (Default)' AND is_default = 1\");\n+                ResultSet rsReadOnlyAdmin = pstmt.executeQuery();\n+                if (rsReadOnlyAdmin.next()) {\n+                    long readOnlyAdminRoleId = rsReadOnlyAdmin.getLong(1);\n+                    pstmt = conn.prepareStatement(\"SELECT rule FROM `cloud`.`role_permissions` WHERE role_id = ? AND permission = 'ALLOW' ORDER BY sort_order\");\n+                    pstmt.setLong(1, readOnlyAdminRoleId);\n+                    ResultSet rsRolePermissions = pstmt.executeQuery();\n+\n+                    while (rsRolePermissions.next()) {\n+                        String rule = rsRolePermissions.getString(1);\n+                        pstmt = conn.prepareStatement(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, ?, 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                        pstmt.setLong(1, adminSupportRoleId);\n+                        pstmt.setString(2, rule);\n+                        pstmt.setLong(3, adminSupportSortOrder++);\n+                        pstmt.executeUpdate();\n+                    }\n+\n+                    List<String> insertSqlForAdminSupportRolePermissions = new ArrayList<String>();\n+                    insertSqlForAdminSupportRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'prepareHostForMaintenance', 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "794c215503d1b55b97119c91d072c2d3b1760c17"}, "originalPosition": 161}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NTYyOTI4", "url": "https://github.com/apache/cloudstack/pull/4071#pullrequestreview-429562928", "createdAt": "2020-06-12T08:38:04Z", "commit": {"oid": "794c215503d1b55b97119c91d072c2d3b1760c17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODozODowNFrOGi76WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODozODowNFrOGi76WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4NjM2MQ==", "bodyText": "Should the description say we're creating a role by cloning another role ?", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r439286361", "createdAt": "2020-06-12T08:38:04Z", "author": {"login": "rhtyd"}, "path": "server/src/main/java/org/apache/cloudstack/acl/RoleManagerImpl.java", "diffHunk": "@@ -146,10 +150,89 @@ public RoleVO doInTransaction(TransactionStatus status) {\n         });\n     }\n \n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_ROLE_CREATE, eventDescription = \"creating Role\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "794c215503d1b55b97119c91d072c2d3b1760c17"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NTY1OTI1", "url": "https://github.com/apache/cloudstack/pull/4071#pullrequestreview-429565925", "createdAt": "2020-06-12T08:42:41Z", "commit": {"oid": "794c215503d1b55b97119c91d072c2d3b1760c17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODo0Mjo0MlrOGi8DSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODo0Mjo0MlrOGi8DSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4ODY0OA==", "bodyText": "@sureshanaparti why not process rules and convert into a list of TOs/VOs, or something simpler that service layer can easily consume? Can you make the iteration logic simpler? Thanks.", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r439288648", "createdAt": "2020-06-12T08:42:42Z", "author": {"login": "rhtyd"}, "path": "api/src/main/java/org/apache/cloudstack/api/command/admin/acl/ImportRoleCmd.java", "diffHunk": "@@ -0,0 +1,139 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.api.command.admin.acl;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.cloudstack.acl.Role;\n+import org.apache.cloudstack.acl.RoleType;\n+import org.apache.cloudstack.acl.Rule;\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiArgValidator;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.RoleResponse;\n+import org.apache.cloudstack.context.CallContext;\n+import org.apache.commons.collections.MapUtils;\n+\n+import com.cloud.user.Account;\n+import com.google.common.base.Strings;\n+\n+@APICommand(name = ImportRoleCmd.APINAME, description = \"Imports a role based on provided map of rule permissions\", responseObject = RoleResponse.class,\n+        requestHasSensitiveInfo = false, responseHasSensitiveInfo = false,\n+        since = \"4.15.0\",\n+        authorized = {RoleType.Admin})\n+public class ImportRoleCmd extends RoleCmd {\n+    public static final String APINAME = \"importRole\";\n+\n+    /////////////////////////////////////////////////////\n+    //////////////// API parameters /////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    @Parameter(name = ApiConstants.NAME, type = CommandType.STRING, required = true,\n+            description = \"Creates a role with this unique name\", validations = {ApiArgValidator.NotNullOrEmpty})\n+    private String roleName;\n+\n+    @Parameter(name = ApiConstants.RULES, type = CommandType.MAP, required = true,\n+            description = \"Rules param list, rule and permission is must. Example: rules[0].rule=create*&rules[0].permission=allow&rules[0].description=create%20rule&rules[1].rule=list*&rules[1].permission=allow&rules[1].description=listing\")\n+    private Map rules;\n+\n+    @Parameter(name = ApiConstants.FORCED, type = CommandType.BOOLEAN,\n+            description = \"Force create a role with the same name. This overrides the role type, description and rule permissions for the existing role. Default is false.\")\n+    private Boolean forced;\n+\n+    /////////////////////////////////////////////////////\n+    /////////////////// Accessors ///////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    public String getRoleName() {\n+        return roleName;\n+    }\n+\n+    public List<Map<String, Object>> getRules() {\n+        if (MapUtils.isEmpty(rules)) {\n+            return null;\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "794c215503d1b55b97119c91d072c2d3b1760c17"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NTY2OTIw", "url": "https://github.com/apache/cloudstack/pull/4071#pullrequestreview-429566920", "createdAt": "2020-06-12T08:44:09Z", "commit": {"oid": "794c215503d1b55b97119c91d072c2d3b1760c17"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NzA1NzM5", "url": "https://github.com/apache/cloudstack/pull/4071#pullrequestreview-429705739", "createdAt": "2020-06-12T12:38:59Z", "commit": {"oid": "794c215503d1b55b97119c91d072c2d3b1760c17"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "794c215503d1b55b97119c91d072c2d3b1760c17", "author": {"user": {"login": "sureshanaparti", "name": null}}, "url": "https://github.com/apache/cloudstack/commit/794c215503d1b55b97119c91d072c2d3b1760c17", "committedDate": "2020-06-11T07:03:57Z", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table."}, "afterCommit": {"oid": "ab3274680e864c71d48f2f3bac0142b1a1661660", "author": {"user": {"login": "sureshanaparti", "name": null}}, "url": "https://github.com/apache/cloudstack/commit/ab3274680e864c71d48f2f3bac0142b1a1661660", "committedDate": "2020-06-15T04:37:01Z", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab3274680e864c71d48f2f3bac0142b1a1661660", "author": {"user": {"login": "sureshanaparti", "name": null}}, "url": "https://github.com/apache/cloudstack/commit/ab3274680e864c71d48f2f3bac0142b1a1661660", "committedDate": "2020-06-15T04:37:01Z", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table."}, "afterCommit": {"oid": "547d48ec8a1ebe415a65d15b66d96e19bf25a4ec", "author": {"user": {"login": "sureshanaparti", "name": null}}, "url": "https://github.com/apache/cloudstack/commit/547d48ec8a1ebe415a65d15b66d96e19bf25a4ec", "committedDate": "2020-06-30T10:54:45Z", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "547d48ec8a1ebe415a65d15b66d96e19bf25a4ec", "author": {"user": {"login": "sureshanaparti", "name": null}}, "url": "https://github.com/apache/cloudstack/commit/547d48ec8a1ebe415a65d15b66d96e19bf25a4ec", "committedDate": "2020-06-30T10:54:45Z", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table."}, "afterCommit": {"oid": "2749808bd2c54e1cdb90cd8774d1888e0ec7e716", "author": {"user": {"login": "sureshanaparti", "name": null}}, "url": "https://github.com/apache/cloudstack/commit/2749808bd2c54e1cdb90cd8774d1888e0ec7e716", "committedDate": "2020-06-30T23:38:11Z", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTQyMzUw", "url": "https://github.com/apache/cloudstack/pull/4071#pullrequestreview-440542350", "createdAt": "2020-07-01T04:45:18Z", "commit": {"oid": "2749808bd2c54e1cdb90cd8774d1888e0ec7e716"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNDo0NToxOFrOGrWm9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNDo0NToxOFrOGrWm9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExMjM3Mg==", "bodyText": "Since roleType and roleDescription have been moved to RoleCmd class, can we not remove getRoleDescription() from this class?", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r448112372", "createdAt": "2020-07-01T04:45:18Z", "author": {"login": "Pearl1594"}, "path": "api/src/main/java/org/apache/cloudstack/api/command/admin/acl/UpdateRoleCmd.java", "diffHunk": "@@ -67,13 +63,6 @@ public String getRoleName() {\n         return roleName;\n     }\n \n-    public RoleType getRoleType() {\n-        if (!Strings.isNullOrEmpty(roleType)) {\n-            return RoleType.fromString(roleType);\n-        }\n-        return null;\n-    }\n-\n     public String getRoleDescription() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2749808bd2c54e1cdb90cd8774d1888e0ec7e716"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d719c81efb732296eab4c641c2c33866efd47bb7", "author": {"user": {"login": "sureshanaparti", "name": null}}, "url": "https://github.com/apache/cloudstack/commit/d719c81efb732296eab4c641c2c33866efd47bb7", "committedDate": "2020-07-02T08:39:32Z", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2749808bd2c54e1cdb90cd8774d1888e0ec7e716", "author": {"user": {"login": "sureshanaparti", "name": null}}, "url": "https://github.com/apache/cloudstack/commit/2749808bd2c54e1cdb90cd8774d1888e0ec7e716", "committedDate": "2020-06-30T23:38:11Z", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table."}, "afterCommit": {"oid": "d719c81efb732296eab4c641c2c33866efd47bb7", "author": {"user": {"login": "sureshanaparti", "name": null}}, "url": "https://github.com/apache/cloudstack/commit/d719c81efb732296eab4c641c2c33866efd47bb7", "committedDate": "2020-07-02T08:39:32Z", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNjc4NTMw", "url": "https://github.com/apache/cloudstack/pull/4071#pullrequestreview-441678530", "createdAt": "2020-07-02T13:29:08Z", "commit": {"oid": "d719c81efb732296eab4c641c2c33866efd47bb7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4284, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}