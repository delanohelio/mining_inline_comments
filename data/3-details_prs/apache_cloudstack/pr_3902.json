{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NjY5MDI1", "number": 3902, "title": "vrouter: Save PlaceHolder nic for VR if network does not have source nat", "bodyText": "Description\n\nThis PR aims to fix the issue below\n\nCreate a network offering for isolated network, services: Dns/Dhcp/Userdata, and enable it\ncreate a isolated network with the new offering\ncreate a vm\ncheck the guest IP of virtual router,\nrestart network with cleanup\ncheck the guest IP of new virtual router\nThe IP in step4 and step6 should be the same, but they are different actually.\n\n\n\n\n\n\nTypes of changes\n\n\n Breaking change (fix or feature that would cause existing functionality to change)\n New feature (non-breaking change which adds functionality)\n Bug fix (non-breaking change which fixes an issue)\n Enhancement (improves an existing feature and functionality)\n Cleanup (Code refactoring and cleanup, that may add test cases)\n\nScreenshots (if appropriate):\nHow Has This Been Tested?\n\n\n\ntested with steps above, the IPs are same in step 7.\nchange network to another offering with public ip, the placeholder ip is removed from database.\ntested with shared networks and L2 network as well.", "createdAt": "2020-02-20T10:20:28Z", "url": "https://github.com/apache/cloudstack/pull/3902", "merged": true, "mergeCommit": {"oid": "8dfc11a57ce8d210661e37897c0fc14dd26d3d73"}, "closed": true, "closedAt": "2020-08-28T09:14:00Z", "author": {"login": "ustcweizhou"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcM4bqGABqjMxMjIwNjU4Njc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5Wv-sgFqTQ1NjY0ODA4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6843d49314933f10daaf4b0d4d0372cce35866a8", "author": {"user": {"login": "ustcweizhou", "name": "Wei Zhou"}}, "url": "https://github.com/apache/cloudstack/commit/6843d49314933f10daaf4b0d4d0372cce35866a8", "committedDate": "2020-03-12T09:35:58Z", "message": "server: do not save Placeholder ip for vpc routers"}, "afterCommit": {"oid": "93123a95cd5008d94f3daf4764a99a2a49312387", "author": {"user": {"login": "ustcweizhou", "name": "Wei Zhou"}}, "url": "https://github.com/apache/cloudstack/commit/93123a95cd5008d94f3daf4764a99a2a49312387", "committedDate": "2020-03-12T09:37:55Z", "message": "server: do not save Placeholder ip for vpc routers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60b7848544aebd45fc25a82382518f09ff638636", "author": {"user": {"login": "ustcweizhou", "name": "Wei Zhou"}}, "url": "https://github.com/apache/cloudstack/commit/60b7848544aebd45fc25a82382518f09ff638636", "committedDate": "2020-03-16T10:08:55Z", "message": "vrouter: Save PlaceHolder nic for VR if network does not have source nat"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "93123a95cd5008d94f3daf4764a99a2a49312387", "author": {"user": {"login": "ustcweizhou", "name": "Wei Zhou"}}, "url": "https://github.com/apache/cloudstack/commit/93123a95cd5008d94f3daf4764a99a2a49312387", "committedDate": "2020-03-12T09:37:55Z", "message": "server: do not save Placeholder ip for vpc routers"}, "afterCommit": {"oid": "60b7848544aebd45fc25a82382518f09ff638636", "author": {"user": {"login": "ustcweizhou", "name": "Wei Zhou"}}, "url": "https://github.com/apache/cloudstack/commit/60b7848544aebd45fc25a82382518f09ff638636", "committedDate": "2020-03-16T10:08:55Z", "message": "vrouter: Save PlaceHolder nic for VR if network does not have source nat"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNjIyNTEy", "url": "https://github.com/apache/cloudstack/pull/3902#pullrequestreview-443622512", "createdAt": "2020-07-07T07:18:21Z", "commit": {"oid": "60b7848544aebd45fc25a82382518f09ff638636"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NjQ4MDg1", "url": "https://github.com/apache/cloudstack/pull/3902#pullrequestreview-456648085", "createdAt": "2020-07-28T13:47:45Z", "commit": {"oid": "60b7848544aebd45fc25a82382518f09ff638636"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzo0Nzo0NlrOG4NahQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzo0ODo0MFrOG4NdBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU5MzIyMQ==", "bodyText": "allocateRegularVrNic(...)", "url": "https://github.com/apache/cloudstack/pull/3902#discussion_r461593221", "createdAt": "2020-07-28T13:47:46Z", "author": {"login": "DaanHoogland"}, "path": "server/src/main/java/com/cloud/network/guru/ExternalGuestNetworkGuru.java", "diffHunk": "@@ -261,6 +265,17 @@ public NicProfile allocate(Network config, NicProfile nic, VirtualMachineProfile\n             profile.setIPv4Netmask(null);\n         }\n \n+        if (config.getVpcId() == null && vm.getType() == VirtualMachine.Type.DomainRouter) {\n+            boolean isPublicNetwork = _networkModel.isProviderSupportServiceInNetwork(config.getId(), Service.SourceNat, Provider.VirtualRouter);\n+            if (!isPublicNetwork) {\n+                Nic placeholderNic = _networkModel.getPlaceholderNicForRouter(config, null);\n+                if (placeholderNic == null) {\n+                    s_logger.debug(\"Saving placeholder nic with ip4 address \" + profile.getIPv4Address() +\n+                            \" and ipv6 address \" + profile.getIPv6Address() + \" for the network \" + config);\n+                    _networkMgr.savePlaceholderNic(config, profile.getIPv4Address(), profile.getIPv6Address(), VirtualMachine.Type.DomainRouter);\n+                }\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60b7848544aebd45fc25a82382518f09ff638636"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU5Mzg2MQ==", "bodyText": "allocateRegularVrNic(...)", "url": "https://github.com/apache/cloudstack/pull/3902#discussion_r461593861", "createdAt": "2020-07-28T13:48:40Z", "author": {"login": "DaanHoogland"}, "path": "server/src/main/java/com/cloud/network/guru/GuestNetworkGuru.java", "diffHunk": "@@ -372,15 +373,25 @@ public NicProfile allocate(final Network network, NicProfile nic, final VirtualM\n \n                 if (isGateway) {\n                     guestIp = network.getGateway();\n-                } else if (vm.getVirtualMachine().getType() == VirtualMachine.Type.DomainRouter) {\n-                    guestIp = _ipAddrMgr.acquireGuestIpAddressByPlacement(network, nic.getRequestedIPv4());\n                 } else {\n-                    guestIp = _ipAddrMgr.acquireGuestIpAddress(network, nic.getRequestedIPv4());\n-                }\n-\n-                if (!isGateway && guestIp == null && network.getGuestType() != GuestType.L2 && !_networkModel.listNetworkOfferingServices(network.getNetworkOfferingId()).isEmpty()) {\n-                    throw new InsufficientVirtualNetworkCapacityException(\"Unable to acquire Guest IP\" + \" address for network \" + network, DataCenter.class,\n-                            dc.getId());\n+                    if (network.getGuestType() != GuestType.L2 && vm.getType() == VirtualMachine.Type.DomainRouter) {\n+                        Nic placeholderNic = _networkModel.getPlaceholderNicForRouter(network, null);\n+                        if (placeholderNic != null) {\n+                            s_logger.debug(\"Nic got an ip address \" + placeholderNic.getIPv4Address() + \" stored in placeholder nic for the network \" + network);\n+                            guestIp = placeholderNic.getIPv4Address();\n+                        }\n+                    }\n+                    if (guestIp == null) {\n+                        if (vm.getVirtualMachine().getType() == VirtualMachine.Type.DomainRouter) {\n+                            guestIp = _ipAddrMgr.acquireGuestIpAddressByPlacement(network, nic.getRequestedIPv4());\n+                        } else {\n+                            guestIp = _ipAddrMgr.acquireGuestIpAddress(network, nic.getRequestedIPv4());\n+                        }\n+                    }\n+                    if (guestIp == null && network.getGuestType() != GuestType.L2 && !_networkModel.listNetworkOfferingServices(network.getNetworkOfferingId()).isEmpty()) {\n+                        throw new InsufficientVirtualNetworkCapacityException(\"Unable to acquire Guest IP\" + \" address for network \" + network, DataCenter.class,\n+                                dc.getId());\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60b7848544aebd45fc25a82382518f09ff638636"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4426, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}