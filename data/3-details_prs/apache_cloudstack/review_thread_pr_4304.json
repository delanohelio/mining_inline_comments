{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4Nzg4NDkz", "number": 4304, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMTozMzo0M1rOE3qqCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xM1QxNTowOTo0OFrOFaH9JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODA2MDI3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/cloudstack/api/command/admin/offering/CreateDiskOfferingCmd.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMTozMzo0M1rOHxJYdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMTozMzo0M1rOHxJYdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI5NTk5MQ==", "bodyText": "will be good to add a since tag here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Parameter(name = ApiConstants.DETAILS, type = CommandType.MAP, description = \"details to specify disk offering parameters\")\n          \n          \n            \n                @Parameter(name = ApiConstants.DETAILS, type = CommandType.MAP, description = \"details to specify disk offering parameters\", since=\"4.16)", "url": "https://github.com/apache/cloudstack/pull/4304#discussion_r521295991", "createdAt": "2020-11-11T11:33:43Z", "author": {"login": "shwstppr"}, "path": "api/src/main/java/org/apache/cloudstack/api/command/admin/offering/CreateDiskOfferingCmd.java", "diffHunk": "@@ -152,6 +156,9 @@\n             since = \"4.14\")\n     private String cacheMode;\n \n+    @Parameter(name = ApiConstants.DETAILS, type = CommandType.MAP, description = \"details to specify disk offering parameters\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0185a0f3f4464e741e21f16f46fc7f951250e8a1"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODA2NTM1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/cloudstack/api/response/UserVmResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMTozNToxN1rOHxJbjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMTozNToxN1rOHxJbjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI5Njc4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Param(description = \"the pool type of the virtual machine\")\n          \n          \n            \n                @Param(description = \"the pool type of the virtual machine\", since=\"4.16)", "url": "https://github.com/apache/cloudstack/pull/4304#discussion_r521296782", "createdAt": "2020-11-11T11:35:17Z", "author": {"login": "shwstppr"}, "path": "api/src/main/java/org/apache/cloudstack/api/response/UserVmResponse.java", "diffHunk": "@@ -310,6 +310,10 @@\n     @Param(description = \"Guest vm Boot Type\")\n     private String bootType;\n \n+    @SerializedName(ApiConstants.POOL_TYPE)\n+    @Param(description = \"the pool type of the virtual machine\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0185a0f3f4464e741e21f16f46fc7f951250e8a1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODE2NjEzOnYy", "diffSide": "RIGHT", "path": "engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjowNjo0OFrOHxKZNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzowODo0MFrOHz9-RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxMjU2NQ==", "bodyText": "@sureshanaparti this config is changed from global scope to zone. Will that affect the existing setup in any way?", "url": "https://github.com/apache/cloudstack/pull/4304#discussion_r521312565", "createdAt": "2020-11-11T12:06:48Z", "author": {"login": "shwstppr"}, "path": "engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java", "diffHunk": "@@ -59,7 +59,13 @@\n             \"The default label name for the config drive\", false);\n \n     ConfigKey<Boolean> VmConfigDriveOnPrimaryPool = new ConfigKey<>(\"Advanced\", Boolean.class, \"vm.configdrive.primarypool.enabled\", \"false\",\n-            \"If config drive need to be created and hosted on primary storage pool. Currently only supported for KVM.\", true);\n+            \"If config drive need to be created and hosted on primary storage pool. Currently only supported for KVM.\", true, ConfigKey.Scope.Zone);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0185a0f3f4464e741e21f16f46fc7f951250e8a1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI1NDc4OQ==", "bodyText": "@sureshanaparti this config is changed from global scope to zone. Will that affect the existing setup in any way?\n\n@shwstppr no, the existing config would always fallback to the global scope, as zone scope setting is not defined initially.", "url": "https://github.com/apache/cloudstack/pull/4304#discussion_r524254789", "createdAt": "2020-11-16T13:08:40Z", "author": {"login": "sureshanaparti"}, "path": "engine/api/src/main/java/com/cloud/vm/VirtualMachineManager.java", "diffHunk": "@@ -59,7 +59,13 @@\n             \"The default label name for the config drive\", false);\n \n     ConfigKey<Boolean> VmConfigDriveOnPrimaryPool = new ConfigKey<>(\"Advanced\", Boolean.class, \"vm.configdrive.primarypool.enabled\", \"false\",\n-            \"If config drive need to be created and hosted on primary storage pool. Currently only supported for KVM.\", true);\n+            \"If config drive need to be created and hosted on primary storage pool. Currently only supported for KVM.\", true, ConfigKey.Scope.Zone);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxMjU2NQ=="}, "originalCommit": {"oid": "0185a0f3f4464e741e21f16f46fc7f951250e8a1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODQ3NTYyOnYy", "diffSide": "RIGHT", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzozMjo1OVrOHxNS3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzoxNzoyOVrOHz-SxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2MDA5NQ==", "bodyText": "Curious, why we need to catch all Exception here? And we are not even logging it then", "url": "https://github.com/apache/cloudstack/pull/4304#discussion_r521360095", "createdAt": "2020-11-11T13:32:59Z", "author": {"login": "shwstppr"}, "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java", "diffHunk": "@@ -1465,11 +1543,17 @@ public void prepareForMigration(VirtualMachineProfile vm, DeployDestination dest\n                     long hostId = vm.getVirtualMachine().getHostId();\n                     Host host = _hostDao.findById(hostId);\n \n-                    volService.grantAccess(volFactory.getVolume(newVol.getId()), host, destPool);\n+                    try {\n+                        volService.grantAccess(volFactory.getVolume(newVol.getId()), host, destPool);\n+                    } catch (Exception e) {\n+                        throw new StorageAccessException(\"Unable to grant access to volume: \" + newVol.getId() + \" on host: \" + host.getId());\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0185a0f3f4464e741e21f16f46fc7f951250e8a1"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI2MDAzNg==", "bodyText": "Curious, why we need to catch all Exception here? And we are not even logging it then\n\n@shwstppr in order to retry the deployment, whenever granting access to a disk fails in any case (chances are storage temporarily inaccessible, failure, etc); and this is being logged in \"VirtualMachineManagerImpl orchestrateStart()\"", "url": "https://github.com/apache/cloudstack/pull/4304#discussion_r524260036", "createdAt": "2020-11-16T13:17:29Z", "author": {"login": "sureshanaparti"}, "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java", "diffHunk": "@@ -1465,11 +1543,17 @@ public void prepareForMigration(VirtualMachineProfile vm, DeployDestination dest\n                     long hostId = vm.getVirtualMachine().getHostId();\n                     Host host = _hostDao.findById(hostId);\n \n-                    volService.grantAccess(volFactory.getVolume(newVol.getId()), host, destPool);\n+                    try {\n+                        volService.grantAccess(volFactory.getVolume(newVol.getId()), host, destPool);\n+                    } catch (Exception e) {\n+                        throw new StorageAccessException(\"Unable to grant access to volume: \" + newVol.getId() + \" on host: \" + host.getId());\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2MDA5NQ=="}, "originalCommit": {"oid": "0185a0f3f4464e741e21f16f46fc7f951250e8a1"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODQ4NDk5OnYy", "diffSide": "RIGHT", "path": "engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/StorageSystemDataMotionStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzozNTozMVrOHxNYuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzoxOTozN1rOHz-XiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2MTU5Mg==", "bodyText": "Is this message in-line with the fact that we support PowerFlex only for KVM right now?", "url": "https://github.com/apache/cloudstack/pull/4304#discussion_r521361592", "createdAt": "2020-11-11T13:35:31Z", "author": {"login": "shwstppr"}, "path": "engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/StorageSystemDataMotionStrategy.java", "diffHunk": "@@ -574,6 +574,14 @@ private void handleVolumeMigrationFromManagedStorageToNonManagedStorage(VolumeIn\n         }\n     }\n \n+    private void verifyFormatWithPoolType(ImageFormat imageFormat, StoragePoolType poolType) {\n+        if (imageFormat != ImageFormat.VHD && imageFormat != ImageFormat.OVA && imageFormat != ImageFormat.QCOW2 &&\n+                !(imageFormat == ImageFormat.RAW && StoragePoolType.PowerFlex == poolType)) {\n+            throw new CloudRuntimeException(\"Only the following image types are currently supported: \" +\n+                    ImageFormat.VHD.toString() + \", \" + ImageFormat.OVA.toString() + \", \" + ImageFormat.QCOW2.toString() + \", and \" + ImageFormat.RAW.toString() + \"(for PowerFlex)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0185a0f3f4464e741e21f16f46fc7f951250e8a1"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI2MTI1Ng==", "bodyText": "Is this message in-line with the fact that we support PowerFlex only for KVM right now?\n\nyes, in-line with the RAW disk support with PowerFlex storage, for KVM.", "url": "https://github.com/apache/cloudstack/pull/4304#discussion_r524261256", "createdAt": "2020-11-16T13:19:37Z", "author": {"login": "sureshanaparti"}, "path": "engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/StorageSystemDataMotionStrategy.java", "diffHunk": "@@ -574,6 +574,14 @@ private void handleVolumeMigrationFromManagedStorageToNonManagedStorage(VolumeIn\n         }\n     }\n \n+    private void verifyFormatWithPoolType(ImageFormat imageFormat, StoragePoolType poolType) {\n+        if (imageFormat != ImageFormat.VHD && imageFormat != ImageFormat.OVA && imageFormat != ImageFormat.QCOW2 &&\n+                !(imageFormat == ImageFormat.RAW && StoragePoolType.PowerFlex == poolType)) {\n+            throw new CloudRuntimeException(\"Only the following image types are currently supported: \" +\n+                    ImageFormat.VHD.toString() + \", \" + ImageFormat.OVA.toString() + \", \" + ImageFormat.QCOW2.toString() + \", and \" + ImageFormat.RAW.toString() + \"(for PowerFlex)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2MTU5Mg=="}, "originalCommit": {"oid": "0185a0f3f4464e741e21f16f46fc7f951250e8a1"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODQ5MzcxOnYy", "diffSide": "RIGHT", "path": "engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/StorageSystemDataMotionStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzozNzo0OVrOHxNeCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzoyMjowOVrOHz-drg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2Mjk1Mg==", "bodyText": "We listed couple of more image formats with powerflex support", "url": "https://github.com/apache/cloudstack/pull/4304#discussion_r521362952", "createdAt": "2020-11-11T13:37:49Z", "author": {"login": "shwstppr"}, "path": "engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/StorageSystemDataMotionStrategy.java", "diffHunk": "@@ -2301,7 +2325,9 @@ private void handleCreateTemplateFromManagedVolume(VolumeInfo volumeInfo, Templa\n         CopyCmdAnswer copyCmdAnswer = null;\n \n         try {\n-            if (!ImageFormat.QCOW2.equals(volumeInfo.getFormat())) {\n+            StoragePoolVO storagePoolVO = _storagePoolDao.findById(volumeInfo.getPoolId());\n+\n+            if (!ImageFormat.QCOW2.equals(volumeInfo.getFormat()) && !(ImageFormat.RAW.equals(volumeInfo.getFormat()) && StoragePoolType.PowerFlex == storagePoolVO.getPoolType())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0185a0f3f4464e741e21f16f46fc7f951250e8a1"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI2MjgzMA==", "bodyText": "We listed couple of more image formats with powerflex support\n\nRAW format is the only supported disk format with PowerFlex storage", "url": "https://github.com/apache/cloudstack/pull/4304#discussion_r524262830", "createdAt": "2020-11-16T13:22:09Z", "author": {"login": "sureshanaparti"}, "path": "engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/StorageSystemDataMotionStrategy.java", "diffHunk": "@@ -2301,7 +2325,9 @@ private void handleCreateTemplateFromManagedVolume(VolumeInfo volumeInfo, Templa\n         CopyCmdAnswer copyCmdAnswer = null;\n \n         try {\n-            if (!ImageFormat.QCOW2.equals(volumeInfo.getFormat())) {\n+            StoragePoolVO storagePoolVO = _storagePoolDao.findById(volumeInfo.getPoolId());\n+\n+            if (!ImageFormat.QCOW2.equals(volumeInfo.getFormat()) && !(ImageFormat.RAW.equals(volumeInfo.getFormat()) && StoragePoolType.PowerFlex == storagePoolVO.getPoolType())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2Mjk1Mg=="}, "originalCommit": {"oid": "0185a0f3f4464e741e21f16f46fc7f951250e8a1"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODUwMDU0OnYy", "diffSide": "RIGHT", "path": "ui/scripts/instances.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzozOTozOVrOHxNiYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMTozNDozMlrOH1pkug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2NDA2NQ==", "bodyText": "@sureshanaparti do we need a Primate change for this or is it already handled there?", "url": "https://github.com/apache/cloudstack/pull/4304#discussion_r521364065", "createdAt": "2020-11-11T13:39:39Z", "author": {"login": "shwstppr"}, "path": "ui/scripts/instances.js", "diffHunk": "@@ -4189,6 +4189,10 @@\n                 allowedActions.push(\"storageSnapshot\");\n             }\n \n+            if (jsonObj.hypervisor == 'KVM' && jsonObj.pooltype == 'PowerFlex') {\n+                allowedActions.push(\"snapshot\");\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0185a0f3f4464e741e21f16f46fc7f951250e8a1"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAxNzcyMg==", "bodyText": "@sureshanaparti do we need a Primate change for this or is it already handled there?\n\n@shwstppr Updated this change in primate. PR: apache/cloudstack-primate#863.", "url": "https://github.com/apache/cloudstack/pull/4304#discussion_r526017722", "createdAt": "2020-11-18T11:34:32Z", "author": {"login": "sureshanaparti"}, "path": "ui/scripts/instances.js", "diffHunk": "@@ -4189,6 +4189,10 @@\n                 allowedActions.push(\"storageSnapshot\");\n             }\n \n+            if (jsonObj.hypervisor == 'KVM' && jsonObj.pooltype == 'PowerFlex') {\n+                allowedActions.push(\"snapshot\");\n+            }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2NDA2NQ=="}, "originalCommit": {"oid": "0185a0f3f4464e741e21f16f46fc7f951250e8a1"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYyOTEyNjA2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/vm/snapshot/VMSnapshotManagerImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xM1QxMDowMTo0N1rOIk-xiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQxMToyNDoyNlrOIoSYeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTY0ODEzOQ==", "bodyText": "Hi @sureshanaparti, may I suggest here to get the VMSnapshotStrategy instead of checking which is the storage pool type? If it's an instance of DefaultVMSnapshotStrategy to get into the statement. In this case, the other storage plugins could implement their own VM snapshot strategy, without checking here which is the storage pool type. I saw that Solidfire's API has a group snapshot (maybe and others have it). We at StorPool also have this functionality (but for now we have a workaround for this). I guess someday it will be easier for the plugins to adopt this functionality", "url": "https://github.com/apache/cloudstack/pull/4304#discussion_r575648139", "createdAt": "2021-02-13T10:01:47Z", "author": {"login": "slavkap"}, "path": "server/src/main/java/com/cloud/vm/snapshot/VMSnapshotManagerImpl.java", "diffHunk": "@@ -358,9 +363,33 @@ public VMSnapshot allocVMSnapshot(Long vmId, String vsDisplayName, String vsDesc\n             throw new InvalidParameterValueException(\"Can not snapshot memory when VM is not in Running state\");\n         }\n \n+        List<VolumeVO> rootVolumes = _volumeDao.findReadyRootVolumesByInstance(userVmVo.getId());\n+        if (rootVolumes == null || rootVolumes.isEmpty()) {\n+            throw new CloudRuntimeException(\"Unable to find root volume for the user vm:\" + userVmVo.getUuid());\n+        }\n+\n+        VolumeVO rootVolume = rootVolumes.get(0);\n+        StoragePoolVO rootVolumePool = _storagePoolDao.findById(rootVolume.getPoolId());\n+        if (rootVolumePool == null) {\n+            throw new CloudRuntimeException(\"Unable to find root volume storage pool for the user vm:\" + userVmVo.getUuid());\n+        }\n+\n         // for KVM, only allow snapshot with memory when VM is in running state\n-        if (userVmVo.getHypervisorType() == HypervisorType.KVM && userVmVo.getState() == State.Running && !snapshotMemory) {\n-            throw new InvalidParameterValueException(\"KVM VM does not allow to take a disk-only snapshot when VM is in running state\");\n+        if (userVmVo.getHypervisorType() == HypervisorType.KVM) {\n+            if (rootVolumePool.getPoolType() != Storage.StoragePoolType.PowerFlex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4bce2737ee97e91c5e0fc478e85c6cbe925e3b"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTA5MDI3OA==", "bodyText": "@slavkap Thanks for the review and suggestions. Can not get the VMSnapshotStrategy to use here, as VMSnapshot object is not yet created. The check here is a pre-creation phase check, and  VMSnapshot object is not created when it is not supported. VMSnapshotStrategy is currently being used to check (canHandle(VMSnapshot)) and perform the operations (take VM snapshot, revert VM snapshots, delete VM snapshot) allowed, on the VMSnapshot object.", "url": "https://github.com/apache/cloudstack/pull/4304#discussion_r579090278", "createdAt": "2021-02-19T10:40:25Z", "author": {"login": "sureshanaparti"}, "path": "server/src/main/java/com/cloud/vm/snapshot/VMSnapshotManagerImpl.java", "diffHunk": "@@ -358,9 +363,33 @@ public VMSnapshot allocVMSnapshot(Long vmId, String vsDisplayName, String vsDesc\n             throw new InvalidParameterValueException(\"Can not snapshot memory when VM is not in Running state\");\n         }\n \n+        List<VolumeVO> rootVolumes = _volumeDao.findReadyRootVolumesByInstance(userVmVo.getId());\n+        if (rootVolumes == null || rootVolumes.isEmpty()) {\n+            throw new CloudRuntimeException(\"Unable to find root volume for the user vm:\" + userVmVo.getUuid());\n+        }\n+\n+        VolumeVO rootVolume = rootVolumes.get(0);\n+        StoragePoolVO rootVolumePool = _storagePoolDao.findById(rootVolume.getPoolId());\n+        if (rootVolumePool == null) {\n+            throw new CloudRuntimeException(\"Unable to find root volume storage pool for the user vm:\" + userVmVo.getUuid());\n+        }\n+\n         // for KVM, only allow snapshot with memory when VM is in running state\n-        if (userVmVo.getHypervisorType() == HypervisorType.KVM && userVmVo.getState() == State.Running && !snapshotMemory) {\n-            throw new InvalidParameterValueException(\"KVM VM does not allow to take a disk-only snapshot when VM is in running state\");\n+        if (userVmVo.getHypervisorType() == HypervisorType.KVM) {\n+            if (rootVolumePool.getPoolType() != Storage.StoragePoolType.PowerFlex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTY0ODEzOQ=="}, "originalCommit": {"oid": "bc4bce2737ee97e91c5e0fc478e85c6cbe925e3b"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTExNTEyOA==", "bodyText": "Thanks, @sureshanaparti, for the reply! My bad that I didn't look below in the code, where the VMSnapshot object is created. My suggestion about this functionality was to be more general for the rest of the plugins if somebody wants to integrate with it. I will try to find a solution in our PR", "url": "https://github.com/apache/cloudstack/pull/4304#discussion_r579115128", "createdAt": "2021-02-19T11:24:26Z", "author": {"login": "slavkap"}, "path": "server/src/main/java/com/cloud/vm/snapshot/VMSnapshotManagerImpl.java", "diffHunk": "@@ -358,9 +363,33 @@ public VMSnapshot allocVMSnapshot(Long vmId, String vsDisplayName, String vsDesc\n             throw new InvalidParameterValueException(\"Can not snapshot memory when VM is not in Running state\");\n         }\n \n+        List<VolumeVO> rootVolumes = _volumeDao.findReadyRootVolumesByInstance(userVmVo.getId());\n+        if (rootVolumes == null || rootVolumes.isEmpty()) {\n+            throw new CloudRuntimeException(\"Unable to find root volume for the user vm:\" + userVmVo.getUuid());\n+        }\n+\n+        VolumeVO rootVolume = rootVolumes.get(0);\n+        StoragePoolVO rootVolumePool = _storagePoolDao.findById(rootVolume.getPoolId());\n+        if (rootVolumePool == null) {\n+            throw new CloudRuntimeException(\"Unable to find root volume storage pool for the user vm:\" + userVmVo.getUuid());\n+        }\n+\n         // for KVM, only allow snapshot with memory when VM is in running state\n-        if (userVmVo.getHypervisorType() == HypervisorType.KVM && userVmVo.getState() == State.Running && !snapshotMemory) {\n-            throw new InvalidParameterValueException(\"KVM VM does not allow to take a disk-only snapshot when VM is in running state\");\n+        if (userVmVo.getHypervisorType() == HypervisorType.KVM) {\n+            if (rootVolumePool.getPoolType() != Storage.StoragePoolType.PowerFlex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTY0ODEzOQ=="}, "originalCommit": {"oid": "bc4bce2737ee97e91c5e0fc478e85c6cbe925e3b"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYyOTM3NjM3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/vm/snapshot/VMSnapshotManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xM1QxNTowOTo0OFrOIlAieg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQxMDo0MDo0MVrOIoQ35A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTY3NzA1MA==", "bodyText": "If you consider using VMSnapshotStrategy, this check won't be needed because you're checking in ScaleIOVMSnapshotStrategy.canHandle() that all volumes are on PowerFlex. Also, this PR #3724 (if it gets in someday) will handle snapshots of the volumes with different storage pool types", "url": "https://github.com/apache/cloudstack/pull/4304#discussion_r575677050", "createdAt": "2021-02-13T15:09:48Z", "author": {"login": "slavkap"}, "path": "server/src/main/java/com/cloud/vm/snapshot/VMSnapshotManagerImpl.java", "diffHunk": "@@ -358,9 +363,33 @@ public VMSnapshot allocVMSnapshot(Long vmId, String vsDisplayName, String vsDesc\n             throw new InvalidParameterValueException(\"Can not snapshot memory when VM is not in Running state\");\n         }\n \n+        List<VolumeVO> rootVolumes = _volumeDao.findReadyRootVolumesByInstance(userVmVo.getId());\n+        if (rootVolumes == null || rootVolumes.isEmpty()) {\n+            throw new CloudRuntimeException(\"Unable to find root volume for the user vm:\" + userVmVo.getUuid());\n+        }\n+\n+        VolumeVO rootVolume = rootVolumes.get(0);\n+        StoragePoolVO rootVolumePool = _storagePoolDao.findById(rootVolume.getPoolId());\n+        if (rootVolumePool == null) {\n+            throw new CloudRuntimeException(\"Unable to find root volume storage pool for the user vm:\" + userVmVo.getUuid());\n+        }\n+\n         // for KVM, only allow snapshot with memory when VM is in running state\n-        if (userVmVo.getHypervisorType() == HypervisorType.KVM && userVmVo.getState() == State.Running && !snapshotMemory) {\n-            throw new InvalidParameterValueException(\"KVM VM does not allow to take a disk-only snapshot when VM is in running state\");\n+        if (userVmVo.getHypervisorType() == HypervisorType.KVM) {\n+            if (rootVolumePool.getPoolType() != Storage.StoragePoolType.PowerFlex) {\n+                if (userVmVo.getState() == State.Running && !snapshotMemory) {\n+                    throw new InvalidParameterValueException(\"KVM VM does not allow to take a disk-only snapshot when VM is in running state\");\n+                }\n+            } else {\n+                if (snapshotMemory) {\n+                    throw new InvalidParameterValueException(\"Can not snapshot memory for PowerFlex storage pool\");\n+                }\n+\n+                // All volumes should be on the same PowerFlex storage pool for VM Snapshot\n+                if (!isVolumesOfUserVmOnSameStoragePool(userVmVo.getId(), rootVolumePool.getId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4bce2737ee97e91c5e0fc478e85c6cbe925e3b"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTA5MDQwNA==", "bodyText": "The check here does't allow to create a VMSnapshot object when all the volumes are not on the PowerFlex/ScaleIO pool. ScaleIOVMSnapshotStrategy.canHandle() re-confirms and allows the VM Snapshot operations that are supported by ScaleIOVMSnapshotStrategy.", "url": "https://github.com/apache/cloudstack/pull/4304#discussion_r579090404", "createdAt": "2021-02-19T10:40:41Z", "author": {"login": "sureshanaparti"}, "path": "server/src/main/java/com/cloud/vm/snapshot/VMSnapshotManagerImpl.java", "diffHunk": "@@ -358,9 +363,33 @@ public VMSnapshot allocVMSnapshot(Long vmId, String vsDisplayName, String vsDesc\n             throw new InvalidParameterValueException(\"Can not snapshot memory when VM is not in Running state\");\n         }\n \n+        List<VolumeVO> rootVolumes = _volumeDao.findReadyRootVolumesByInstance(userVmVo.getId());\n+        if (rootVolumes == null || rootVolumes.isEmpty()) {\n+            throw new CloudRuntimeException(\"Unable to find root volume for the user vm:\" + userVmVo.getUuid());\n+        }\n+\n+        VolumeVO rootVolume = rootVolumes.get(0);\n+        StoragePoolVO rootVolumePool = _storagePoolDao.findById(rootVolume.getPoolId());\n+        if (rootVolumePool == null) {\n+            throw new CloudRuntimeException(\"Unable to find root volume storage pool for the user vm:\" + userVmVo.getUuid());\n+        }\n+\n         // for KVM, only allow snapshot with memory when VM is in running state\n-        if (userVmVo.getHypervisorType() == HypervisorType.KVM && userVmVo.getState() == State.Running && !snapshotMemory) {\n-            throw new InvalidParameterValueException(\"KVM VM does not allow to take a disk-only snapshot when VM is in running state\");\n+        if (userVmVo.getHypervisorType() == HypervisorType.KVM) {\n+            if (rootVolumePool.getPoolType() != Storage.StoragePoolType.PowerFlex) {\n+                if (userVmVo.getState() == State.Running && !snapshotMemory) {\n+                    throw new InvalidParameterValueException(\"KVM VM does not allow to take a disk-only snapshot when VM is in running state\");\n+                }\n+            } else {\n+                if (snapshotMemory) {\n+                    throw new InvalidParameterValueException(\"Can not snapshot memory for PowerFlex storage pool\");\n+                }\n+\n+                // All volumes should be on the same PowerFlex storage pool for VM Snapshot\n+                if (!isVolumesOfUserVmOnSameStoragePool(userVmVo.getId(), rootVolumePool.getId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTY3NzA1MA=="}, "originalCommit": {"oid": "bc4bce2737ee97e91c5e0fc478e85c6cbe925e3b"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3813, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}