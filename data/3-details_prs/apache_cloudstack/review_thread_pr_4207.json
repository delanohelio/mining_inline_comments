{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MzQ2ODYy", "number": 4207, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMTowODozNVrOESVz5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjoyMDoxM1rOETp4gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjY3MTc1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/cloud/agent/transport/Request.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMTowODozNVrOG3d6dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMTowODozNVrOG3d6dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgxNDk2Nw==", "bodyText": "extra space", "url": "https://github.com/apache/cloudstack/pull/4207#discussion_r460814967", "createdAt": "2020-07-27T11:08:35Z", "author": {"login": "DaanHoogland"}, "path": "core/src/main/java/com/cloud/agent/transport/Request.java", "diffHunk": "@@ -395,7 +396,7 @@ public String toString() {\n         return log(\"\", true, Level.DEBUG);\n     }\n \n-    protected String log(String msg, boolean logContent, Level level) {\n+    protected String  log(String msg, boolean logContent, Level level) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b99a0bf4f278717175e3380e010047b3e2d05a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDg1MDA4OnYy", "diffSide": "RIGHT", "path": "utils/src/test/java/com/cloud/utils/HumanReadableJsonTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzowMDowNVrOG4rKoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToyOTowNlrOG4wWJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4MDY3Mg==", "bodyText": "@Spaceman1984 can you add tests for non zero values, and see if the expected results match? (for kbs, mbs, gbs)", "url": "https://github.com/apache/cloudstack/pull/4207#discussion_r462080672", "createdAt": "2020-07-29T07:00:05Z", "author": {"login": "rhtyd"}, "path": "utils/src/test/java/com/cloud/utils/HumanReadableJsonTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.utils;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static com.cloud.utils.HumanReadableJson.getHumanReadableBytesJson;\n+\n+public class HumanReadableJsonTest {\n+\n+    @Test\n+    public void parseJsonObjectTest() {\n+        assertEquals(\"{}\", getHumanReadableBytesJson(\"{}\"));\n+    }\n+    @Test\n+    public void parseJsonArrayTest() {\n+        assertEquals(\"[]\", getHumanReadableBytesJson(\"[]\"));\n+        assertEquals(\"[{},{}]\", getHumanReadableBytesJson(\"[{},{}]\"));\n+    }\n+    @Test\n+    public void parseSimpleJsonTest() {\n+        assertEquals(\"[{\\\"object\\\":{}}]\", getHumanReadableBytesJson(\"[{\\\"object\\\":{}}]\"));\n+    }\n+    @Test\n+    public void parseComplexJsonTest() {\n+        assertEquals(\"[{\\\"object\\\":[]}]\", getHumanReadableBytesJson(\"[{\\\"object\\\":[]}]\"));\n+        assertEquals(\"[{\\\"object\\\":[{},{}]}]\", getHumanReadableBytesJson(\"[{\\\"object\\\":[{},{}]}]\"));\n+        assertEquals(\"[{\\\"object\\\":[]},{\\\"object\\\":[]}]\", getHumanReadableBytesJson(\"[{\\\"object\\\":[]},{\\\"object\\\":[]}]\"));\n+        assertEquals(\"[{\\\"object\\\":[{\\\"object\\\":[]}]},{\\\"object\\\":[]}]\", getHumanReadableBytesJson(\"[{\\\"object\\\":[{\\\"object\\\":[]}]},{\\\"object\\\":[]}]\"));\n+    }\n+    @Test\n+    public void parseMatchJsonTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276c4344c1313ab64311f2660d4fbfea6520d40d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2NTU0Mg==", "bodyText": "@rhtyd these tests already exist in NumbersUtilTest.java", "url": "https://github.com/apache/cloudstack/pull/4207#discussion_r462165542", "createdAt": "2020-07-29T09:29:06Z", "author": {"login": "Spaceman1984"}, "path": "utils/src/test/java/com/cloud/utils/HumanReadableJsonTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.utils;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static com.cloud.utils.HumanReadableJson.getHumanReadableBytesJson;\n+\n+public class HumanReadableJsonTest {\n+\n+    @Test\n+    public void parseJsonObjectTest() {\n+        assertEquals(\"{}\", getHumanReadableBytesJson(\"{}\"));\n+    }\n+    @Test\n+    public void parseJsonArrayTest() {\n+        assertEquals(\"[]\", getHumanReadableBytesJson(\"[]\"));\n+        assertEquals(\"[{},{}]\", getHumanReadableBytesJson(\"[{},{}]\"));\n+    }\n+    @Test\n+    public void parseSimpleJsonTest() {\n+        assertEquals(\"[{\\\"object\\\":{}}]\", getHumanReadableBytesJson(\"[{\\\"object\\\":{}}]\"));\n+    }\n+    @Test\n+    public void parseComplexJsonTest() {\n+        assertEquals(\"[{\\\"object\\\":[]}]\", getHumanReadableBytesJson(\"[{\\\"object\\\":[]}]\"));\n+        assertEquals(\"[{\\\"object\\\":[{},{}]}]\", getHumanReadableBytesJson(\"[{\\\"object\\\":[{},{}]}]\"));\n+        assertEquals(\"[{\\\"object\\\":[]},{\\\"object\\\":[]}]\", getHumanReadableBytesJson(\"[{\\\"object\\\":[]},{\\\"object\\\":[]}]\"));\n+        assertEquals(\"[{\\\"object\\\":[{\\\"object\\\":[]}]},{\\\"object\\\":[]}]\", getHumanReadableBytesJson(\"[{\\\"object\\\":[{\\\"object\\\":[]}]},{\\\"object\\\":[]}]\"));\n+    }\n+    @Test\n+    public void parseMatchJsonTest() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4MDY3Mg=="}, "originalCommit": {"oid": "276c4344c1313ab64311f2660d4fbfea6520d40d"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDg1ODA4OnYy", "diffSide": "RIGHT", "path": "utils/src/main/java/com/cloud/utils/NumbersUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzowMjoyN1rOG4rPDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTozMTowMFrOG4watg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4MTgwNw==", "bodyText": "@Spaceman1984 can you add unit test for this method, giving some values such as zero and non-zero (to test KB, MB, GB, TB). Have you verified that all consumes would pass long to it and not Long which may potentially cause a NPE?", "url": "https://github.com/apache/cloudstack/pull/4207#discussion_r462081807", "createdAt": "2020-07-29T07:02:27Z", "author": {"login": "rhtyd"}, "path": "utils/src/main/java/com/cloud/utils/NumbersUtil.java", "diffHunk": "@@ -93,6 +95,13 @@ public static String toReadableSize(long bytes) {\n         return builder.toString();\n     }\n \n+    public static String toHumanReadableSize(long size) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276c4344c1313ab64311f2660d4fbfea6520d40d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2NjcxMA==", "bodyText": "I have added a check and a test for null which prevents an NPE.", "url": "https://github.com/apache/cloudstack/pull/4207#discussion_r462166710", "createdAt": "2020-07-29T09:31:00Z", "author": {"login": "Spaceman1984"}, "path": "utils/src/main/java/com/cloud/utils/NumbersUtil.java", "diffHunk": "@@ -93,6 +95,13 @@ public static String toReadableSize(long bytes) {\n         return builder.toString();\n     }\n \n+    public static String toHumanReadableSize(long size) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4MTgwNw=="}, "originalCommit": {"oid": "276c4344c1313ab64311f2660d4fbfea6520d40d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTUxMzg3OnYy", "diffSide": "RIGHT", "path": "utils/src/test/java/com/cloud/utils/HumanReadableJsonTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDowMTowMVrOG4xe9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOTowNjoyN1rOG7XzZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE4NDE4Mw==", "bodyText": "@Spaceman1984 what's the default locale for CloudStack, is there a global setting or does it pick it up from OS?", "url": "https://github.com/apache/cloudstack/pull/4207#discussion_r462184183", "createdAt": "2020-07-29T10:01:01Z", "author": {"login": "rhtyd"}, "path": "utils/src/test/java/com/cloud/utils/HumanReadableJsonTest.java", "diffHunk": "@@ -50,4 +51,14 @@ public void parseMatchJsonTest() {\n         assertEquals(\"[{\\\"size\\\":\\\"(0 bytes) 0\\\"}]\", getHumanReadableBytesJson(\"[{\\\"size\\\": \\\"0\\\"}]\"));\n         assertEquals(\"[{\\\"size\\\":\\\"(0 bytes) 0\\\",\\\"bytesSent\\\":\\\"(0 bytes) 0\\\"}]\", getHumanReadableBytesJson(\"[{\\\"size\\\": \\\"0\\\", \\\"bytesSent\\\": \\\"0\\\"}]\"));\n     }\n+\n+    @Test\n+    public void localeTest() {\n+        Locale.setDefault(Locale.UK); // UK test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6725f53c287b95b3f38c0473bf1d2904e455a2af"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE4NzY2NA==", "bodyText": "@rhtyd From Java Docs:\n\"The Java Virtual Machine sets the default locale during startup based on the host environment. It is used by many locale-sensitive methods if no locale is explicitly specified. It can be changed using the setDefault method.\"", "url": "https://github.com/apache/cloudstack/pull/4207#discussion_r462187664", "createdAt": "2020-07-29T10:07:04Z", "author": {"login": "Spaceman1984"}, "path": "utils/src/test/java/com/cloud/utils/HumanReadableJsonTest.java", "diffHunk": "@@ -50,4 +51,14 @@ public void parseMatchJsonTest() {\n         assertEquals(\"[{\\\"size\\\":\\\"(0 bytes) 0\\\"}]\", getHumanReadableBytesJson(\"[{\\\"size\\\": \\\"0\\\"}]\"));\n         assertEquals(\"[{\\\"size\\\":\\\"(0 bytes) 0\\\",\\\"bytesSent\\\":\\\"(0 bytes) 0\\\"}]\", getHumanReadableBytesJson(\"[{\\\"size\\\": \\\"0\\\", \\\"bytesSent\\\": \\\"0\\\"}]\"));\n     }\n+\n+    @Test\n+    public void localeTest() {\n+        Locale.setDefault(Locale.UK); // UK test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE4NDE4Mw=="}, "originalCommit": {"oid": "6725f53c287b95b3f38c0473bf1d2904e455a2af"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NjcwNA==", "bodyText": "I think \"C\" is the default locale. maybe this or some other more worldly locale is a good idea?", "url": "https://github.com/apache/cloudstack/pull/4207#discussion_r463546704", "createdAt": "2020-07-31T11:01:41Z", "author": {"login": "DaanHoogland"}, "path": "utils/src/test/java/com/cloud/utils/HumanReadableJsonTest.java", "diffHunk": "@@ -50,4 +51,14 @@ public void parseMatchJsonTest() {\n         assertEquals(\"[{\\\"size\\\":\\\"(0 bytes) 0\\\"}]\", getHumanReadableBytesJson(\"[{\\\"size\\\": \\\"0\\\"}]\"));\n         assertEquals(\"[{\\\"size\\\":\\\"(0 bytes) 0\\\",\\\"bytesSent\\\":\\\"(0 bytes) 0\\\"}]\", getHumanReadableBytesJson(\"[{\\\"size\\\": \\\"0\\\", \\\"bytesSent\\\": \\\"0\\\"}]\"));\n     }\n+\n+    @Test\n+    public void localeTest() {\n+        Locale.setDefault(Locale.UK); // UK test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE4NDE4Mw=="}, "originalCommit": {"oid": "6725f53c287b95b3f38c0473bf1d2904e455a2af"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkwOTE1OA==", "bodyText": "@DaanHoogland I searched the code base, Cloudstack doesn't set a default locale, it will be picked up from the environment, which I believe is the correct behaviour.", "url": "https://github.com/apache/cloudstack/pull/4207#discussion_r464909158", "createdAt": "2020-08-04T09:06:27Z", "author": {"login": "Spaceman1984"}, "path": "utils/src/test/java/com/cloud/utils/HumanReadableJsonTest.java", "diffHunk": "@@ -50,4 +51,14 @@ public void parseMatchJsonTest() {\n         assertEquals(\"[{\\\"size\\\":\\\"(0 bytes) 0\\\"}]\", getHumanReadableBytesJson(\"[{\\\"size\\\": \\\"0\\\"}]\"));\n         assertEquals(\"[{\\\"size\\\":\\\"(0 bytes) 0\\\",\\\"bytesSent\\\":\\\"(0 bytes) 0\\\"}]\", getHumanReadableBytesJson(\"[{\\\"size\\\": \\\"0\\\", \\\"bytesSent\\\": \\\"0\\\"}]\"));\n     }\n+\n+    @Test\n+    public void localeTest() {\n+        Locale.setDefault(Locale.UK); // UK test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE4NDE4Mw=="}, "originalCommit": {"oid": "6725f53c287b95b3f38c0473bf1d2904e455a2af"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDQ0NjExOnYy", "diffSide": "RIGHT", "path": "test/integration/smoke/test_certauthority_root.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjoyMDoxM1rOG5gk6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjozNzoyNVrOG5hIgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1NTc1Mg==", "bodyText": "@Spaceman1984 why do we need changes in this file?", "url": "https://github.com/apache/cloudstack/pull/4207#discussion_r462955752", "createdAt": "2020-07-30T12:20:13Z", "author": {"login": "borisstoyanov"}, "path": "test/integration/smoke/test_certauthority_root.py", "diffHunk": "@@ -16,11 +16,10 @@\n # under the License.\n \n from nose.plugins.attrib import attr\n-from marvin.cloudstackTestCase import *\n-from marvin.cloudstackAPI import *\n-from marvin.lib.utils import *\n+from marvin.cloudstackTestCase import cloudstackTestCase\n+from marvin.lib.utils import cleanup_resources\n from marvin.lib.base import *\n-from marvin.lib.common import *\n+from marvin.lib.common import list_hosts\n \n from cryptography import x509", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6725f53c287b95b3f38c0473bf1d2904e455a2af"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2NDg2Nw==", "bodyText": "@borisstoyanov tests were failing when run outside of Travis.", "url": "https://github.com/apache/cloudstack/pull/4207#discussion_r462964867", "createdAt": "2020-07-30T12:37:25Z", "author": {"login": "Spaceman1984"}, "path": "test/integration/smoke/test_certauthority_root.py", "diffHunk": "@@ -16,11 +16,10 @@\n # under the License.\n \n from nose.plugins.attrib import attr\n-from marvin.cloudstackTestCase import *\n-from marvin.cloudstackAPI import *\n-from marvin.lib.utils import *\n+from marvin.cloudstackTestCase import cloudstackTestCase\n+from marvin.lib.utils import cleanup_resources\n from marvin.lib.base import *\n-from marvin.lib.common import *\n+from marvin.lib.common import list_hosts\n \n from cryptography import x509", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1NTc1Mg=="}, "originalCommit": {"oid": "6725f53c287b95b3f38c0473bf1d2904e455a2af"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3739, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}