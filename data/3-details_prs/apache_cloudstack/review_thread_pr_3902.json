{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NjY5MDI1", "number": 3902, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzo0Nzo0NVrOES0d_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzo0ODo0MFrOES0fbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTY5NDY5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/network/guru/ExternalGuestNetworkGuru.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzo0Nzo0NlrOG4NahQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzo0Nzo0NlrOG4NahQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU5MzIyMQ==", "bodyText": "allocateRegularVrNic(...)", "url": "https://github.com/apache/cloudstack/pull/3902#discussion_r461593221", "createdAt": "2020-07-28T13:47:46Z", "author": {"login": "DaanHoogland"}, "path": "server/src/main/java/com/cloud/network/guru/ExternalGuestNetworkGuru.java", "diffHunk": "@@ -261,6 +265,17 @@ public NicProfile allocate(Network config, NicProfile nic, VirtualMachineProfile\n             profile.setIPv4Netmask(null);\n         }\n \n+        if (config.getVpcId() == null && vm.getType() == VirtualMachine.Type.DomainRouter) {\n+            boolean isPublicNetwork = _networkModel.isProviderSupportServiceInNetwork(config.getId(), Service.SourceNat, Provider.VirtualRouter);\n+            if (!isPublicNetwork) {\n+                Nic placeholderNic = _networkModel.getPlaceholderNicForRouter(config, null);\n+                if (placeholderNic == null) {\n+                    s_logger.debug(\"Saving placeholder nic with ip4 address \" + profile.getIPv4Address() +\n+                            \" and ipv6 address \" + profile.getIPv6Address() + \" for the network \" + config);\n+                    _networkMgr.savePlaceholderNic(config, profile.getIPv4Address(), profile.getIPv6Address(), VirtualMachine.Type.DomainRouter);\n+                }\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60b7848544aebd45fc25a82382518f09ff638636"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTY5ODM5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/network/guru/GuestNetworkGuru.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzo0ODo0MFrOG4NdBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzo0ODo0MFrOG4NdBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU5Mzg2MQ==", "bodyText": "allocateRegularVrNic(...)", "url": "https://github.com/apache/cloudstack/pull/3902#discussion_r461593861", "createdAt": "2020-07-28T13:48:40Z", "author": {"login": "DaanHoogland"}, "path": "server/src/main/java/com/cloud/network/guru/GuestNetworkGuru.java", "diffHunk": "@@ -372,15 +373,25 @@ public NicProfile allocate(final Network network, NicProfile nic, final VirtualM\n \n                 if (isGateway) {\n                     guestIp = network.getGateway();\n-                } else if (vm.getVirtualMachine().getType() == VirtualMachine.Type.DomainRouter) {\n-                    guestIp = _ipAddrMgr.acquireGuestIpAddressByPlacement(network, nic.getRequestedIPv4());\n                 } else {\n-                    guestIp = _ipAddrMgr.acquireGuestIpAddress(network, nic.getRequestedIPv4());\n-                }\n-\n-                if (!isGateway && guestIp == null && network.getGuestType() != GuestType.L2 && !_networkModel.listNetworkOfferingServices(network.getNetworkOfferingId()).isEmpty()) {\n-                    throw new InsufficientVirtualNetworkCapacityException(\"Unable to acquire Guest IP\" + \" address for network \" + network, DataCenter.class,\n-                            dc.getId());\n+                    if (network.getGuestType() != GuestType.L2 && vm.getType() == VirtualMachine.Type.DomainRouter) {\n+                        Nic placeholderNic = _networkModel.getPlaceholderNicForRouter(network, null);\n+                        if (placeholderNic != null) {\n+                            s_logger.debug(\"Nic got an ip address \" + placeholderNic.getIPv4Address() + \" stored in placeholder nic for the network \" + network);\n+                            guestIp = placeholderNic.getIPv4Address();\n+                        }\n+                    }\n+                    if (guestIp == null) {\n+                        if (vm.getVirtualMachine().getType() == VirtualMachine.Type.DomainRouter) {\n+                            guestIp = _ipAddrMgr.acquireGuestIpAddressByPlacement(network, nic.getRequestedIPv4());\n+                        } else {\n+                            guestIp = _ipAddrMgr.acquireGuestIpAddress(network, nic.getRequestedIPv4());\n+                        }\n+                    }\n+                    if (guestIp == null && network.getGuestType() != GuestType.L2 && !_networkModel.listNetworkOfferingServices(network.getNetworkOfferingId()).isEmpty()) {\n+                        throw new InsufficientVirtualNetworkCapacityException(\"Unable to acquire Guest IP\" + \" address for network \" + network, DataCenter.class,\n+                                dc.getId());\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60b7848544aebd45fc25a82382518f09ff638636"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3946, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}