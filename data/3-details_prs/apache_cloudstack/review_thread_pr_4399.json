{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyMDI4NjY1", "number": 4399, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDowMToyOFrOEtDijw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMzo1NToxMlrOFE_oTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Njc5Mzc1OnYy", "diffSide": "RIGHT", "path": "engine/schema/src/main/java/com/cloud/host/dao/HostDaoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDowMToyOFrOHgoVtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo0MDoxNVrOHhGJ2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk3NzM5OA==", "bodyText": "trailing white spce on these lines\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        while (rs.next()) {     \n          \n          \n            \n                            result.add(rs.getLong(1));             \n          \n          \n            \n                        }        \n          \n          \n            \n                        while (rs.next()) {\n          \n          \n            \n                            result.add(rs.getLong(1));\n          \n          \n            \n                        }", "url": "https://github.com/apache/cloudstack/pull/4399#discussion_r503977398", "createdAt": "2020-10-13T14:01:28Z", "author": {"login": "DaanHoogland"}, "path": "engine/schema/src/main/java/com/cloud/host/dao/HostDaoImpl.java", "diffHunk": "@@ -1147,27 +1155,68 @@ public HostVO findByIp(final String ipAddress) {\n     }\n \n     @Override\n-    public List<Long> listClustersByHostTag(String hostTagOnOffering) {\n+    public List<Long> listClustersByHostTag(String computeOfferingTags) {\n         TransactionLegacy txn = TransactionLegacy.currentTxn();\n+        String sql = this.LIST_CLUSTERID_FOR_HOST_TAG;\n         PreparedStatement pstmt = null;\n-        List<Long> result = new ArrayList<Long>();\n-        StringBuilder sql = new StringBuilder(LIST_CLUSTERID_FOR_HOST_TAG);\n-        // during listing the clusters that cross the threshold\n-        // we need to check with disabled thresholds of each cluster if not defined at cluster consider the global value\n+        List<Long> result = new ArrayList();\n+        List<String> tags = Arrays.asList(computeOfferingTags.split(this.SEPARATOR));\n+        String subselect = getHostIdsByComputeTags(tags);\n+        sql = String.format(sql, subselect);\n+        \n         try {\n-            pstmt = txn.prepareAutoCloseStatement(sql.toString());\n-            pstmt.setString(1, hostTagOnOffering);\n+            pstmt = txn.prepareStatement(sql);\n+            \n+            for(int i = 0; i < tags.size(); i++){\n+                pstmt.setString(i+1, tags.get(i));\n+            }\n+            //pstmt = txn.prepareAutoCloseStatement();\n             ResultSet rs = pstmt.executeQuery();\n-            while (rs.next()) {\n-                result.add(rs.getLong(1));\n+            while (rs.next()) {     \n+                result.add(rs.getLong(1));             \n+            }        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab4eb9b94d590fcbae98916b6068fcab170f3177"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ2NTg4MQ==", "bodyText": "ups sorry, i've fixed this", "url": "https://github.com/apache/cloudstack/pull/4399#discussion_r504465881", "createdAt": "2020-10-14T07:40:15Z", "author": {"login": "DK101010"}, "path": "engine/schema/src/main/java/com/cloud/host/dao/HostDaoImpl.java", "diffHunk": "@@ -1147,27 +1155,68 @@ public HostVO findByIp(final String ipAddress) {\n     }\n \n     @Override\n-    public List<Long> listClustersByHostTag(String hostTagOnOffering) {\n+    public List<Long> listClustersByHostTag(String computeOfferingTags) {\n         TransactionLegacy txn = TransactionLegacy.currentTxn();\n+        String sql = this.LIST_CLUSTERID_FOR_HOST_TAG;\n         PreparedStatement pstmt = null;\n-        List<Long> result = new ArrayList<Long>();\n-        StringBuilder sql = new StringBuilder(LIST_CLUSTERID_FOR_HOST_TAG);\n-        // during listing the clusters that cross the threshold\n-        // we need to check with disabled thresholds of each cluster if not defined at cluster consider the global value\n+        List<Long> result = new ArrayList();\n+        List<String> tags = Arrays.asList(computeOfferingTags.split(this.SEPARATOR));\n+        String subselect = getHostIdsByComputeTags(tags);\n+        sql = String.format(sql, subselect);\n+        \n         try {\n-            pstmt = txn.prepareAutoCloseStatement(sql.toString());\n-            pstmt.setString(1, hostTagOnOffering);\n+            pstmt = txn.prepareStatement(sql);\n+            \n+            for(int i = 0; i < tags.size(); i++){\n+                pstmt.setString(i+1, tags.get(i));\n+            }\n+            //pstmt = txn.prepareAutoCloseStatement();\n             ResultSet rs = pstmt.executeQuery();\n-            while (rs.next()) {\n-                result.add(rs.getLong(1));\n+            while (rs.next()) {     \n+                result.add(rs.getLong(1));             \n+            }        ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk3NzM5OA=="}, "originalCommit": {"oid": "ab4eb9b94d590fcbae98916b6068fcab170f3177"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Njc5NzEyOnYy", "diffSide": "RIGHT", "path": "engine/schema/src/main/java/com/cloud/host/dao/HostDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDowMjoxMlrOHgoX2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDowMjoxMlrOHgoX2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk3Nzk0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        while (rs.next()) {     \n          \n          \n            \n                            result.add(rs.getLong(1));             \n          \n          \n            \n                        while (rs.next()) {\n          \n          \n            \n                            result.add(rs.getLong(1));", "url": "https://github.com/apache/cloudstack/pull/4399#discussion_r503977946", "createdAt": "2020-10-13T14:02:12Z", "author": {"login": "DaanHoogland"}, "path": "engine/schema/src/main/java/com/cloud/host/dao/HostDaoImpl.java", "diffHunk": "@@ -1147,27 +1155,68 @@ public HostVO findByIp(final String ipAddress) {\n     }\n \n     @Override\n-    public List<Long> listClustersByHostTag(String hostTagOnOffering) {\n+    public List<Long> listClustersByHostTag(String computeOfferingTags) {\n         TransactionLegacy txn = TransactionLegacy.currentTxn();\n+        String sql = this.LIST_CLUSTERID_FOR_HOST_TAG;\n         PreparedStatement pstmt = null;\n-        List<Long> result = new ArrayList<Long>();\n-        StringBuilder sql = new StringBuilder(LIST_CLUSTERID_FOR_HOST_TAG);\n-        // during listing the clusters that cross the threshold\n-        // we need to check with disabled thresholds of each cluster if not defined at cluster consider the global value\n+        List<Long> result = new ArrayList();\n+        List<String> tags = Arrays.asList(computeOfferingTags.split(this.SEPARATOR));\n+        String subselect = getHostIdsByComputeTags(tags);\n+        sql = String.format(sql, subselect);\n+        \n         try {\n-            pstmt = txn.prepareAutoCloseStatement(sql.toString());\n-            pstmt.setString(1, hostTagOnOffering);\n+            pstmt = txn.prepareStatement(sql);\n+            \n+            for(int i = 0; i < tags.size(); i++){\n+                pstmt.setString(i+1, tags.get(i));\n+            }\n+            //pstmt = txn.prepareAutoCloseStatement();\n             ResultSet rs = pstmt.executeQuery();\n-            while (rs.next()) {\n-                result.add(rs.getLong(1));\n+            while (rs.next()) {     \n+                result.add(rs.getLong(1));             \n+            }        \n+            pstmt.close();\n+            if(result.isEmpty()){\n+                throw new CloudRuntimeException(\"No suitable host found for follow compute offering tags: \" + computeOfferingTags);\n             }\n             return result;\n         } catch (SQLException e) {\n             throw new CloudRuntimeException(\"DB Exception on: \" + sql, e);\n-        } catch (Throwable e) {\n-            throw new CloudRuntimeException(\"Caught: \" + sql, e);\n         }\n     }\n+    \n+    private List<Long> findHostByComputeOfferings(String computeOfferingTags){\n+        TransactionLegacy txn = TransactionLegacy.currentTxn();\n+        PreparedStatement pstmt = null;\n+        List<Long> result = new ArrayList();\n+        List<String> tags = Arrays.asList(computeOfferingTags.split(this.SEPARATOR));\n+        String select = getHostIdsByComputeTags(tags);\n+        try {\n+            pstmt = txn.prepareStatement(select);\n+            \n+            for(int i = 0; i < tags.size(); i++){\n+                pstmt.setString(i+1, tags.get(i));\n+            }\n+            \n+            ResultSet rs = pstmt.executeQuery();\n+            while (rs.next()) {     \n+                result.add(rs.getLong(1));             ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab4eb9b94d590fcbae98916b6068fcab170f3177"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MDU3NDc2OnYy", "diffSide": "RIGHT", "path": "engine/schema/src/main/java/com/cloud/host/dao/HostDaoImpl.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODozMDozOVrOIC9KnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMjo1OTozNFrOIFPQ6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3MDIwNQ==", "bodyText": "trying to isolate this check is fine but the DAO is for DB interaction, and this is really business logic. personally I would make it a default method for the Host interface, but a member of HostVO could also be.\nCan you (shortly) explain why you put it here, @DK101010 ?", "url": "https://github.com/apache/cloudstack/pull/4399#discussion_r539970205", "createdAt": "2020-12-10T08:30:39Z", "author": {"login": "DaanHoogland"}, "path": "engine/schema/src/main/java/com/cloud/host/dao/HostDaoImpl.java", "diffHunk": "@@ -480,6 +482,25 @@ public Integer countAllByTypeInZone(long zoneId, Type type) {\n         return listBy(sc);\n     }\n \n+    @Override\n+    public boolean checkHostServiceOfferingTags(HostVO host, ServiceOffering serviceOffering){\n+        if (host == null) {\n+            return false;\n+        }\n+        if (serviceOffering == null) {\n+            return false;\n+        }\n+        if (Strings.isNullOrEmpty(serviceOffering.getHostTag())) {\n+            return true;\n+        }\n+\n+        List<String> serviceOfferingTags = Arrays.asList(serviceOffering.getHostTag().split(\",\"));\n+        if(host.getHostTags() != null && host.getHostTags().containsAll(serviceOfferingTags)){\n+            return true;\n+        }\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3a709cec78cd83b3b10afc07453ca25722a1bc5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAxNDMxMw==", "bodyText": "Hi,\nIn the HostDaoImpl there are a couple of other methods that are check host tags, therefore i thought will be good to add this also here. So will be encapsulate common logic in one class, but my experience is still not very well in CS and when it destroy other guidelines then will be also ok to move this method. For me sounds HostVO good, because it  seems to be only relevant for this object.", "url": "https://github.com/apache/cloudstack/pull/4399#discussion_r540014313", "createdAt": "2020-12-10T09:35:19Z", "author": {"login": "DK101010"}, "path": "engine/schema/src/main/java/com/cloud/host/dao/HostDaoImpl.java", "diffHunk": "@@ -480,6 +482,25 @@ public Integer countAllByTypeInZone(long zoneId, Type type) {\n         return listBy(sc);\n     }\n \n+    @Override\n+    public boolean checkHostServiceOfferingTags(HostVO host, ServiceOffering serviceOffering){\n+        if (host == null) {\n+            return false;\n+        }\n+        if (serviceOffering == null) {\n+            return false;\n+        }\n+        if (Strings.isNullOrEmpty(serviceOffering.getHostTag())) {\n+            return true;\n+        }\n+\n+        List<String> serviceOfferingTags = Arrays.asList(serviceOffering.getHostTag().split(\",\"));\n+        if(host.getHostTags() != null && host.getHostTags().containsAll(serviceOfferingTags)){\n+            return true;\n+        }\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3MDIwNQ=="}, "originalCommit": {"oid": "f3a709cec78cd83b3b10afc07453ca25722a1bc5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAxOTUwOQ==", "bodyText": "as said I prefer a default method on the interface but it maight require undesirable imports so HostVO is good for my part.", "url": "https://github.com/apache/cloudstack/pull/4399#discussion_r541019509", "createdAt": "2020-12-11T15:16:42Z", "author": {"login": "DaanHoogland"}, "path": "engine/schema/src/main/java/com/cloud/host/dao/HostDaoImpl.java", "diffHunk": "@@ -480,6 +482,25 @@ public Integer countAllByTypeInZone(long zoneId, Type type) {\n         return listBy(sc);\n     }\n \n+    @Override\n+    public boolean checkHostServiceOfferingTags(HostVO host, ServiceOffering serviceOffering){\n+        if (host == null) {\n+            return false;\n+        }\n+        if (serviceOffering == null) {\n+            return false;\n+        }\n+        if (Strings.isNullOrEmpty(serviceOffering.getHostTag())) {\n+            return true;\n+        }\n+\n+        List<String> serviceOfferingTags = Arrays.asList(serviceOffering.getHostTag().split(\",\"));\n+        if(host.getHostTags() != null && host.getHostTags().containsAll(serviceOfferingTags)){\n+            return true;\n+        }\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3MDIwNQ=="}, "originalCommit": {"oid": "f3a709cec78cd83b3b10afc07453ca25722a1bc5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM1NTE2MA==", "bodyText": "will you be moving this method @DK101010 ?", "url": "https://github.com/apache/cloudstack/pull/4399#discussion_r542355160", "createdAt": "2020-12-14T12:45:13Z", "author": {"login": "DaanHoogland"}, "path": "engine/schema/src/main/java/com/cloud/host/dao/HostDaoImpl.java", "diffHunk": "@@ -480,6 +482,25 @@ public Integer countAllByTypeInZone(long zoneId, Type type) {\n         return listBy(sc);\n     }\n \n+    @Override\n+    public boolean checkHostServiceOfferingTags(HostVO host, ServiceOffering serviceOffering){\n+        if (host == null) {\n+            return false;\n+        }\n+        if (serviceOffering == null) {\n+            return false;\n+        }\n+        if (Strings.isNullOrEmpty(serviceOffering.getHostTag())) {\n+            return true;\n+        }\n+\n+        List<String> serviceOfferingTags = Arrays.asList(serviceOffering.getHostTag().split(\",\"));\n+        if(host.getHostTags() != null && host.getHostTags().containsAll(serviceOfferingTags)){\n+            return true;\n+        }\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3MDIwNQ=="}, "originalCommit": {"oid": "f3a709cec78cd83b3b10afc07453ca25722a1bc5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM2Mzg4MA==", "bodyText": "is moved ;)", "url": "https://github.com/apache/cloudstack/pull/4399#discussion_r542363880", "createdAt": "2020-12-14T12:59:34Z", "author": {"login": "DK101010"}, "path": "engine/schema/src/main/java/com/cloud/host/dao/HostDaoImpl.java", "diffHunk": "@@ -480,6 +482,25 @@ public Integer countAllByTypeInZone(long zoneId, Type type) {\n         return listBy(sc);\n     }\n \n+    @Override\n+    public boolean checkHostServiceOfferingTags(HostVO host, ServiceOffering serviceOffering){\n+        if (host == null) {\n+            return false;\n+        }\n+        if (serviceOffering == null) {\n+            return false;\n+        }\n+        if (Strings.isNullOrEmpty(serviceOffering.getHostTag())) {\n+            return true;\n+        }\n+\n+        List<String> serviceOfferingTags = Arrays.asList(serviceOffering.getHostTag().split(\",\"));\n+        if(host.getHostTags() != null && host.getHostTags().containsAll(serviceOfferingTags)){\n+            return true;\n+        }\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3MDIwNQ=="}, "originalCommit": {"oid": "f3a709cec78cd83b3b10afc07453ca25722a1bc5"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzgxMTMyOnYy", "diffSide": "RIGHT", "path": "engine/schema/src/main/java/com/cloud/host/HostVO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMzo1NToxMlrOIFRivw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNDoyODowNlrOIFTCdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQwMTIxNQ==", "bodyText": "sorry to keep nagging you, but we have a string utils proxy class in place. It has an isEmpty() that does the same check. if for some reason you need this one anyway , please add it there if the functioonality doesn't suffice.", "url": "https://github.com/apache/cloudstack/pull/4399#discussion_r542401215", "createdAt": "2020-12-14T13:55:12Z", "author": {"login": "DaanHoogland"}, "path": "engine/schema/src/main/java/com/cloud/host/HostVO.java", "diffHunk": "@@ -740,6 +743,18 @@ public void setUuid(String uuid) {\n         this.uuid = uuid;\n     }\n \n+    public boolean checkHostServiceOfferingTags(ServiceOffering serviceOffering){\n+        if (serviceOffering == null) {\n+            return false;\n+        }\n+        if (Strings.isNullOrEmpty(serviceOffering.getHostTag())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "562818a48804e8d170d5d9816123da9173caef50"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQyNTcxNg==", "bodyText": "@DaanHoogland Is ok, I think I will survive this :D\nThis method was not my idea, it was a part of the old implementation and I thought it was nice, so I reused this.\nI will change it ;)", "url": "https://github.com/apache/cloudstack/pull/4399#discussion_r542425716", "createdAt": "2020-12-14T14:28:06Z", "author": {"login": "DK101010"}, "path": "engine/schema/src/main/java/com/cloud/host/HostVO.java", "diffHunk": "@@ -740,6 +743,18 @@ public void setUuid(String uuid) {\n         this.uuid = uuid;\n     }\n \n+    public boolean checkHostServiceOfferingTags(ServiceOffering serviceOffering){\n+        if (serviceOffering == null) {\n+            return false;\n+        }\n+        if (Strings.isNullOrEmpty(serviceOffering.getHostTag())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQwMTIxNQ=="}, "originalCommit": {"oid": "562818a48804e8d170d5d9816123da9173caef50"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4079, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}