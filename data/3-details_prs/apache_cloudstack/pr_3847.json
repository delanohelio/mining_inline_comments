{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3OTUzNTg5", "number": 3847, "title": "VR: Fix Redundant VRouter guest network on wrong interface", "bodyText": "Description\n\nThis PR aims to fix the issues on KVM environments with linux bridge and OVS if there are multiple public IPs associated to a network or vpc.\nfixes: #3179\n\n\n\n\n\nTypes of changes\n\n\n Breaking change (fix or feature that would cause existing functionality to change)\n New feature (non-breaking change which adds functionality)\n Bug fix (non-breaking change which fixes an issue)\n Enhancement (improves an existing feature and functionality)\n Cleanup (Code refactoring and cleanup, that may add test cases)\n\nScreenshots (if appropriate):\nHow Has This Been Tested?\n\n\n\n\n\n Tested the following network on KVM with linux bridge and KVM with OVS.\n\n\nnetworks with single VR\n\n\nnetworks with redundant VRs\n\n\nActions\n\n\nCreate network offering with single VR, and enable it\n\n\ncreate isolated network with the network offering\n\n\ncreate a vm in the network.\nverify the available nics in VR should be \"eth0,eth1,eth2\"\nverify the IPs in VR. eth0 -> guest nic, eth2 -> source nat IP\n\n\nget a free public ip, assign to network, and create port forwarding rules (ssh) to the vm\nverify the available nics in VR should be \"eth0,eth1,eth2\"\nverify the IPs in VR. eth0 -> guest nic, eth2 -> source nat IP and new ip\n\n\nremove the port forwarding rule, and release the new ip\nverify the available nics in VR should be \"eth0,eth1,eth2\"\nverify the IPs in VR. eth0 -> guest nic IP, eth2 -> source nat IP\n\n\ncreate new public ip range 1\n\n\nget a free ip in new ip range, assign to network, and create port forwarding rules (ssh) to the vm\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3\"\nverify the IPs in VR. eth0 -> guest nic, eth2 -> source nat IP, eth3 -> new ip 1\n\n\nget a free ip in new ip range, assign to network, and create port forwarding rules (ssh) to the vm\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3\"\nverify the IPs in VR. eth0 -> guest nic, eth2 -> source nat IP, eth3 -> new ip 1, new ip 2,\n\n\nget a free ip in new ip range, assign to network, and create port forwarding rules (ssh) to the vm\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3\"\nverify the IPs in VR. eth0 -> guest nic, eth2 -> source nat IP, eth3 -> new ip 1, new ip 2, new ip 3\n\n\nrelease new ip 2\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3\"\nverify the IPs in VR. eth0 -> guest nic, eth2 -> source nat IP, eth3 -> new ip 1, new ip 3\n\n\nrelease new ip 1\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3\"\nverify the IPs in VR. eth0 -> guest nic, eth2 -> source nat IP, eth3 -> new ip 3\n\n\ncreate new public ip range 2\n\n\nget a free ip 4 in new ip range 2, assign to network, and create port forwarding rules (ssh) to the vm\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3,eth4,\"\nverify the IPs in VR. eth0 -> guest nic, eth2 -> source nat IP, eth3 -> new ip 3, eth4 -> new ip 4\n\n\nget a free ip 5 in new ip range 2, assign to network, and create port forwarding rules (ssh) to the vm\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3,eth4,\"\nverify the IPs in VR. eth0 -> guest nic, eth2 -> source nat IP, eth3 -> new ip 3, eth4 -> new ip 4/5\n\n\nget a free ip 6 in new ip range 2, assign to network, and create port forwarding rules (ssh) to the vm\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3,eth4,\"\nverify the IPs in VR. eth0 -> guest nic, eth2 -> source nat IP, eth3 -> new ip 3, eth4 -> new ip 4/5/6\n\n\nrelease new ip 5\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3,eth4,\"\nverify the IPs in VR. eth0 -> guest nic, eth2 -> source nat IP, eth3 -> new ip 3, eth4 -> new ip 4/6\n\n\nrelease new ip 4\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3,eth4,\"\nverify the IPs in VR. eth0 -> guest nic, eth2 -> source nat IP, eth3 -> new ip 3, eth4 -> new ip 6\n\n\nrelease new ip 3\nverify the available nics in VR should be \"eth0,eth1,eth2,eth4,\"\nverify the IPs in VR. eth0 -> guest nic, eth2 -> source nat IP, eth4 -> new ip 6\n\n\nrestart network\nverify the available nics in VR should be \"eth0,eth1,eth2,eth4,\"\nverify the IPs in VR. eth0 -> guest nic, eth2 -> source nat IP, eth4 -> new ip 6\n\n\nrestart network with cleanup\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3,\"\nverify the IPs in VR. eth0 -> guest nic, eth2 -> source nat IP, eth3 -> new ip 6\n\n\nrestart network with cleanup, makeredundant=true\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3,\"\nverify the IPs in VR. eth0 -> guest nic, eth2 -> source nat IP, eth3 -> new ip 6\n\n\n\n\n Tested the following vpcs on KVM with linux bridge and KVM with OVS.\n\n\nvpc with single VR\n\n\nvpc with redundant VRs\n\n\nActions\n\n\nget vpc offering with single VR\n\n\ncreate a vpc with the vpc offering\nverify the available nics in VR should be \"eth0,eth1\"\nverify the IPs in VR. eth0 -> control nic, eth1 -> source nat IP\n\n\ncreate a tier in the vpc, and create a vm in the tier.\nverify the available nics in VR should be \"eth0,eth1,eth2\"\nverify the IPs in VR. eth0 -> control nic, eth1 -> source nat IP, eth2 -> tier 1\n\n\nget a free public ip, assign to network, and create port forwarding rules (ssh) to the vm\nverify the available nics in VR should be \"eth0,eth1,eth2\"\nverify the IPs in VR. eth0 -> control nic, eth1 -> source nat IP, eth2 -> tier 1\n\n\nremove the port forwarding rule, and release the new ip\nverify the available nics in VR should be \"eth0,eth1,eth2\"\nverify the IPs in VR. eth0 -> control nic, eth1 -> source nat IP, eth2 -> tier 1\n\n\ncreate new public ip range 1\n\n\nget a free ip in new ip range, assign to network, and create port forwarding rules (ssh) to the vm\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3\"\nverify the IPs in VR. eth1 -> source nat IP, eth2 -> tier 1, eth3 -> new ip 1\n\n\nget a free ip in new ip range, assign to network, and create port forwarding rules (ssh) to the vm\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3\"\nverify the IPs in VR. eth1 -> source nat IP, eth2 -> tier 1, eth3 -> new ip 1/2\n\n\nget a free ip in new ip range, assign to network, and create port forwarding rules (ssh) to the vm\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3\"\nverify the IPs in VR. eth1 -> source nat IP, eth2 -> tier 1, eth3 -> new ip 1/2/3\n\n\nrelease new ip 2\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3\"\nverify the IPs in VR. eth1 -> source nat IP, eth2 -> tier 1, eth3 -> new ip 1/3\n\n\nrelease new ip 1\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3\"\nverify the IPs in VR. eth1 -> source nat IP, eth2 -> tier 1, eth3 -> new ip 3\n\n\ncreate a tier 2 in the vpc, and create a vm 2 in the tier2.\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3,eth4\"\nverify the IPs in VR. eth1 -> source nat IP, eth2 -> tier 1, eth3 -> new ip 3, eth4 -> tier 2\n\n\ncreate new public ip range 2\n\n\nget a free ip 4 in new ip range 2, assign to network, and create port forwarding rules (ssh) to the vm\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3,eth4,eth5,\"\nverify the IPs in VR. eth1 -> source nat IP, eth2 -> tier 1, eth3 -> new ip 3, eth4 -> tier 2, eth5 -> new ip 4\n\n\nget a free ip 5 in new ip range 2, assign to network, and create port forwarding rules (ssh) to the vm\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3,eth4,eth5,\"\nverify the IPs in VR. eth1 -> source nat IP, eth2 -> tier 1, eth3 -> new ip 3, eth4 -> tier 2, eth5 -> new ip 4/5\n\n\nget a free ip 6 in new ip range 2, assign to network, and create port forwarding rules (ssh) to the vm\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3,eth4,eth5,\"\nverify the IPs in VR. eth1 -> source nat IP, eth2 -> tier 1, eth3 -> new ip 3, eth4 -> tier 2, eth5 -> new ip 4/5/6\n\n\nrelease new ip 5\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3,eth4,eth5,\"\nverify the IPs in VR. eth1 -> source nat IP, eth2 -> tier 1, eth3 -> new ip 3, eth4 -> tier 2, eth5 -> new ip 4/6\n\n\nrelease new ip 4\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3,eth4,eth5,\"\nverify the IPs in VR. eth1 -> source nat IP, eth2 -> tier 1, eth3 -> new ip 3, eth4 -> tier 2, eth5 -> new ip 6\n\n\nrelease new ip 3\nverify the available nics in VR should be \"eth0,eth1,eth2,eth4,eth5,\"\nverify the IPs in VR. eth1 -> source nat IP, eth2 -> tier 1, eth4 -> tier 2, eth5 -> new ip 6\n\n\nrestart tier1\nverify the available nics in VR should be \"eth0,eth1,eth2,eth4,eth5,\"\nverify the IPs in VR. eth1 -> source nat IP, eth2 -> tier 1, eth4 -> tier 2, eth5 -> new ip 6\n\n\nrestart tier2\nverify the available nics in VR should be \"eth0,eth1,eth2,eth4,eth5,\"\nverify the IPs in VR. eth1 -> source nat IP, eth2 -> tier 1, eth4 -> tier 2, eth5 -> new ip 6\n\n\nrestart VPC\nverify the available nics in VR should be \"eth0,eth1,eth2,eth4,eth5,\"\nverify the IPs in VR. eth1 -> source nat IP, eth2 -> tier 1, eth4 -> tier 2, eth5 -> new ip 6\n\n\nrestart VPC with cleanup\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3,eth4,\"\nverify the IPs in VR. eth1 -> source nat IP, eth2 -> new ip 6, eth3 -> tier 1, eth4 -> tier 2\n\n\nrestart VPC with cleanup, makeredundant=true\nverify the available nics in VR should be \"eth0,eth1,eth2,eth3,eth4,\"\nverify the IPs in VR. eth1 -> source nat IP, eth2 -> new ip 6, eth3 -> tier 1, eth4 -> tier 2", "createdAt": "2020-01-28T11:09:46Z", "url": "https://github.com/apache/cloudstack/pull/3847", "merged": true, "mergeCommit": {"oid": "313e21a0da5e19e9357c0aef7b47abdcea84dfa3"}, "closed": true, "closedAt": "2020-02-29T18:52:41Z", "author": {"login": "weizhouapache"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_ETCFAFqTM1MDAzNzQzNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHwgbegH2gAyMzY3OTUzNTg5OjRlOGQzMTNjMWUxZmNjM2E5ODhmMTczZTVhNDIwMWE0MDFjZDAyM2U=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMDM3NDM2", "url": "https://github.com/apache/cloudstack/pull/3847#pullrequestreview-350037436", "createdAt": "2020-01-29T11:29:38Z", "commit": {"oid": "127199ba82ea29b468b5615777a6e1740edcb03d"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMToyOTozOFrOFjFL-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMTozMTowNlrOFjFOcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMyOTQ2Nw==", "bodyText": "could this be a aeparate method? getVlanLastIpMapForGuestNetwork();?\nand than later", "url": "https://github.com/apache/cloudstack/pull/3847#discussion_r372329467", "createdAt": "2020-01-29T11:29:38Z", "author": {"login": "DaanHoogland"}, "path": "server/src/main/java/com/cloud/network/router/CommandSetupHelper.java", "diffHunk": "@@ -670,7 +670,20 @@ public void createVpcAssociatePublicIPCommands(final VirtualRouter router, final\n             vlanIpMap.put(vlanTag, ipList);\n         }\n \n+        Long guestNetworkId = null;\n+        final List<NicVO> nics = _nicDao.listByVmId(router.getId());\n+        for (final NicVO nic : nics) {\n+            final NetworkVO nw = _networkDao.findById(nic.getNetworkId());\n+            if (nw.getTrafficType() == TrafficType.Guest) {\n+                guestNetworkId = nw.getId();\n+                break;\n+            }\n+        }\n+\n+        Map<String, Boolean> vlanLastIp = getVlanLastIpMap(router.getVpcId(), guestNetworkId);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "127199ba82ea29b468b5615777a6e1740edcb03d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMzMDA5Ng==", "bodyText": "here useAccessDetailsAccordingToVlanLastIpForGuestNetwork(); (long names just to be descriptive", "url": "https://github.com/apache/cloudstack/pull/3847#discussion_r372330096", "createdAt": "2020-01-29T11:31:06Z", "author": {"login": "DaanHoogland"}, "path": "server/src/main/java/com/cloud/network/router/CommandSetupHelper.java", "diffHunk": "@@ -728,6 +741,13 @@ public int compare(final PublicIpAddress o1, final PublicIpAddress o2) {\n             final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n             cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n \n+            Boolean lastIp = vlanLastIp.get(vlanTagKey);\n+            if (lastIp == null) {\n+                cmd.setAccessDetail(NetworkElementCommand.NETWORK_PUB_LAST_IP, \"true\");\n+            } else {\n+                cmd.setAccessDetail(NetworkElementCommand.NETWORK_PUB_LAST_IP, \"false\");\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "127199ba82ea29b468b5615777a6e1740edcb03d"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNTMyMDIx", "url": "https://github.com/apache/cloudstack/pull/3847#pullrequestreview-350532021", "createdAt": "2020-01-30T01:18:15Z", "commit": {"oid": "127199ba82ea29b468b5615777a6e1740edcb03d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToxODoxNVrOFjc2fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToyNzoxMVrOFjc_UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNzE4MA==", "bodyText": "Duplicated lines (1797 - 1805 = 1838 - 1847). Can you please extract them into a method?", "url": "https://github.com/apache/cloudstack/pull/3847#discussion_r372717180", "createdAt": "2020-01-30T01:18:15Z", "author": {"login": "GabrielBrascher"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java", "diffHunk": "@@ -1794,35 +1794,26 @@ public ExecutionResult prepareNetworkElementCommand(final IpAssocCommand cmd) {\n         final String routerIp = cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP);\n         Connect conn;\n         try {\n-            conn = LibvirtConnection.getConnectionByVmName(routerName);\n-            final List<InterfaceDef> nics = getInterfaces(conn, routerName);\n-            final Map<String, Integer> broadcastUriAllocatedToVM = new HashMap<String, Integer>();\n-            Integer nicPos = 0;\n-            for (final InterfaceDef nic : nics) {\n-                if (nic.getBrName().equalsIgnoreCase(_linkLocalBridgeName)) {\n-                    broadcastUriAllocatedToVM.put(\"LinkLocal\", nicPos);\n-                } else {\n-                    if (nic.getBrName().equalsIgnoreCase(_publicBridgeName) || nic.getBrName().equalsIgnoreCase(_privBridgeName) ||\n-                            nic.getBrName().equalsIgnoreCase(_guestBridgeName)) {\n-                        broadcastUriAllocatedToVM.put(BroadcastDomainType.Vlan.toUri(Vlan.UNTAGGED).toString(), nicPos);\n-                    } else {\n-                        final String broadcastUri = getBroadcastUriFromBridge(nic.getBrName());\n-                        broadcastUriAllocatedToVM.put(broadcastUri, nicPos);\n-                    }\n-                }\n-                nicPos++;\n+            conn = getLibvirtUtilitiesHelper().getConnectionByVmName(routerName);\n+            Integer devNum = 0;\n+            final List<InterfaceDef> pluggedNics = getInterfaces(conn, routerName);\n+            final Map<String, Integer> macAddressToNicNum = new HashMap<>(pluggedNics.size());\n+            for (final InterfaceDef pluggedNic : pluggedNics) {\n+                final String pluggedVlan = pluggedNic.getBrName();\n+                macAddressToNicNum.put(pluggedNic.getMacAddress(), devNum);\n+                devNum++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "127199ba82ea29b468b5615777a6e1740edcb03d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxOTQ0MA==", "bodyText": "There is a typo at line 30", "url": "https://github.com/apache/cloudstack/pull/3847#discussion_r372719440", "createdAt": "2020-01-30T01:27:11Z", "author": {"login": "GabrielBrascher"}, "path": "systemvm/debian/etc/sysctl.conf", "diffHunk": "@@ -27,6 +27,10 @@ net.ipv4.conf.default.send_redirects = 0\n net.ipv4.conf.all.secure_redirects = 0\n net.ipv4.conf.default.secure_redirects = 0\n \n+# Prmote secondary ip to be primary if primary IP is removed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "127199ba82ea29b468b5615777a6e1740edcb03d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac17c5c6754805c153e68be62b237e6dfddd08a9", "author": {"user": {"login": "ustcweizhou", "name": "Wei Zhou"}}, "url": "https://github.com/apache/cloudstack/commit/ac17c5c6754805c153e68be62b237e6dfddd08a9", "committedDate": "2020-02-06T09:00:56Z", "message": "VR: Fix Redundant VRouter guest network on wrong interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23eb1fc7a9f7cb5ef0d40231e9bdb7df7172bdb9", "author": {"user": {"login": "ustcweizhou", "name": "Wei Zhou"}}, "url": "https://github.com/apache/cloudstack/commit/23eb1fc7a9f7cb5ef0d40231e9bdb7df7172bdb9", "committedDate": "2020-02-06T09:00:58Z", "message": "marvin: restart network/vpc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d098c518f6107b05c3675157644b52333642784e", "author": {"user": {"login": "ustcweizhou", "name": "Wei Zhou"}}, "url": "https://github.com/apache/cloudstack/commit/d098c518f6107b05c3675157644b52333642784e", "committedDate": "2020-02-06T09:01:02Z", "message": "marvin utils: return if ssh command is executed and returns nothing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19382c109fc2766316194ce452b1114a999592b5", "author": {"user": {"login": "ustcweizhou", "name": "Wei Zhou"}}, "url": "https://github.com/apache/cloudstack/commit/19382c109fc2766316194ce452b1114a999592b5", "committedDate": "2020-02-06T09:01:20Z", "message": "VR: Fix Redundant VRouter guest network on wrong interface (minor changes)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02a82adbe6e980bc496f7c50323b057837c28d41", "author": {"user": {"login": "ustcweizhou", "name": "Wei Zhou"}}, "url": "https://github.com/apache/cloudstack/commit/02a82adbe6e980bc496f7c50323b057837c28d41", "committedDate": "2020-02-06T09:01:23Z", "message": "VR: Fix Redundant VRouter guest network on wrong interface (minor 2)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "127199ba82ea29b468b5615777a6e1740edcb03d", "author": {"user": {"login": "ustcweizhou", "name": "Wei Zhou"}}, "url": "https://github.com/apache/cloudstack/commit/127199ba82ea29b468b5615777a6e1740edcb03d", "committedDate": "2020-01-28T10:48:15Z", "message": "marvin utils: return if ssh command is executed and returns nothing"}, "afterCommit": {"oid": "02a82adbe6e980bc496f7c50323b057837c28d41", "author": {"user": {"login": "ustcweizhou", "name": "Wei Zhou"}}, "url": "https://github.com/apache/cloudstack/commit/02a82adbe6e980bc496f7c50323b057837c28d41", "committedDate": "2020-02-06T09:01:23Z", "message": "VR: Fix Redundant VRouter guest network on wrong interface (minor 2)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MjkzMjMy", "url": "https://github.com/apache/cloudstack/pull/3847#pullrequestreview-357293232", "createdAt": "2020-02-12T09:19:47Z", "commit": {"oid": "02a82adbe6e980bc496f7c50323b057837c28d41"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MzE4ODUy", "url": "https://github.com/apache/cloudstack/pull/3847#pullrequestreview-357318852", "createdAt": "2020-02-12T09:56:34Z", "commit": {"oid": "02a82adbe6e980bc496f7c50323b057837c28d41"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NjMxMjYw", "url": "https://github.com/apache/cloudstack/pull/3847#pullrequestreview-357631260", "createdAt": "2020-02-12T17:08:17Z", "commit": {"oid": "02a82adbe6e980bc496f7c50323b057837c28d41"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "917ef2a8e06c17a316e146b6f92190cdfc30ccf3", "author": {"user": {"login": "ustcweizhou", "name": "Wei Zhou"}}, "url": "https://github.com/apache/cloudstack/commit/917ef2a8e06c17a316e146b6f92190cdfc30ccf3", "committedDate": "2020-02-25T08:06:23Z", "message": "marvin test: Fix Redundant VRouter guest network on wrong interfaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27897b8c8ce64c81ddee4aa33e9d9713e31b4607", "author": {"user": {"login": "ustcweizhou", "name": "Wei Zhou"}}, "url": "https://github.com/apache/cloudstack/commit/27897b8c8ce64c81ddee4aa33e9d9713e31b4607", "committedDate": "2020-02-25T08:06:27Z", "message": "marvin test: skip test on non-kvm hypervisors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e8d313c1e1fcc3a988f173e5a4201a401cd023e", "author": {"user": {"login": "ustcweizhou", "name": "Wei Zhou"}}, "url": "https://github.com/apache/cloudstack/commit/4e8d313c1e1fcc3a988f173e5a4201a401cd023e", "committedDate": "2020-02-25T11:34:25Z", "message": "move marvin test to test/integration/component/"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4575, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}