{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MzU2MTM1", "number": 4268, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxOToyNjowNFrOEYvA9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQyMDozMzo1NVrOEYvSKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzcxNTc0OnYy", "diffSide": "RIGHT", "path": "framework/db/src/test/java/com/cloud/utils/db/GenericDaoBaseTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxOToyNjowNFrOHBNKZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxOToyNjowNFrOHBNKZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyNjI3Nw==", "bodyText": "Previous  MockitoJUnitRunner got Deprecated; changed to a non-deprecated one.", "url": "https://github.com/apache/cloudstack/pull/4268#discussion_r471026277", "createdAt": "2020-08-15T19:26:04Z", "author": {"login": "GabrielBrascher"}, "path": "framework/db/src/test/java/com/cloud/utils/db/GenericDaoBaseTest.java", "diffHunk": "@@ -20,132 +20,166 @@\n import java.sql.SQLException;\n \n import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n-import org.mockito.runners.MockitoJUnitRunner;\n+import org.mockito.junit.MockitoJUnitRunner;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd2abd1a43344e09b277b45bec85b2be8a2e172c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzcxNzc5OnYy", "diffSide": "RIGHT", "path": "framework/db/src/test/java/com/cloud/utils/db/GenericDaoBaseTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxOToyOTo0NFrOHBNLWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxOToyOTo0NFrOHBNLWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyNjUyMQ==", "bodyText": "Despite all tests pass, the Process finished with exit code 255 due to unnecessary stubbings.\nI fixed this issue by extracting all into a @Before method and tests are looking good.\nThe output of tests before this PR:\nProcess finished with exit code 255\n\norg.mockito.exceptions.misusing.UnnecessaryStubbingException: \nUnnecessary stubbings detected in test class: GenericDaoBaseTest\nClean & maintainable test code requires zero unnecessary code.\nFollowing stubbings are unnecessary (click to navigate to relevant line of code):\n  1. -> at com.cloud.utils.db.GenericDaoBaseTest.getObjectPrimitiveByte(GenericDaoBaseTest.java:144)\n  2. -> at com.cloud.utils.db.GenericDaoBaseTest.getObjectPrimitiveLong(GenericDaoBaseTest.java:117)\n  3. -> at com.cloud.utils.db.GenericDaoBaseTest.getObjectPrimitiveInt(GenericDaoBaseTest.java:126)\n  4. -> at com.cloud.utils.db.GenericDaoBaseTest.getObjectPrimitiveDouble(GenericDaoBaseTest.java:90)\n  5. -> at com.cloud.utils.db.GenericDaoBaseTest.getObjectPrimitiveFloat(GenericDaoBaseTest.java:81)\n  6. -> at com.cloud.utils.db.GenericDaoBaseTest.getObjectPrimitiveShort(GenericDaoBaseTest.java:54)\n  7. -> at com.cloud.utils.db.GenericDaoBaseTest.getObjectPrimitiveBoolean(GenericDaoBaseTest.java:45)\nPlease remove unnecessary stubbings or use 'lenient' strictness. More info: javadoc for UnnecessaryStubbingException class.\n\n\tat org.mockito.internal.runners.StrictRunner.run(StrictRunner.java:49)\n\tat org.mockito.junit.MockitoJUnitRunner.run(MockitoJUnitRunner.java:163)\n\tat org.mockito.runners.MockitoJUnitRunner.run(MockitoJUnitRunner.java:54)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)", "url": "https://github.com/apache/cloudstack/pull/4268#discussion_r471026521", "createdAt": "2020-08-15T19:29:44Z", "author": {"login": "GabrielBrascher"}, "path": "framework/db/src/test/java/com/cloud/utils/db/GenericDaoBaseTest.java", "diffHunk": "@@ -20,132 +20,166 @@\n import java.sql.SQLException;\n \n import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n-import org.mockito.runners.MockitoJUnitRunner;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import javax.persistence.EntityExistsException;\n \n @RunWith(MockitoJUnitRunner.class)\n public class GenericDaoBaseTest {\n     @Mock\n     ResultSet resultSet;\n+    @Mock\n+    SQLException mockedSQLException;\n \n-    @Test\n-    public void getObjectBoolean() throws SQLException {\n+    private static final String INTEGRITY_CONSTRAINT_VIOLATION = \"23000\";\n+    private static final int DUPLICATE_ENTRY_ERRO_CODE = 1062;\n+\n+    @Before\n+    public void prepareTests() throws SQLException {\n         Mockito.when(resultSet.getObject(1)).thenReturn(false);\n         Mockito.when(resultSet.getBoolean(1)).thenReturn(false);\n+        Mockito.when(resultSet.getObject(1)).thenReturn((short) 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd2abd1a43344e09b277b45bec85b2be8a2e172c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mzc1OTc2OnYy", "diffSide": "RIGHT", "path": "framework/db/src/main/java/com/cloud/utils/db/GenericDaoBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQyMDozMzo1NVrOHBNeOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQyMDozMzo1NVrOHBNeOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAzMTM1NQ==", "bodyText": "+1 to this pattern to check contant.equals(potentially-nullable-obj)", "url": "https://github.com/apache/cloudstack/pull/4268#discussion_r471031355", "createdAt": "2020-08-15T20:33:55Z", "author": {"login": "rhtyd"}, "path": "framework/db/src/main/java/com/cloud/utils/db/GenericDaoBase.java", "diffHunk": "@@ -850,13 +853,23 @@ public int update(UpdateBuilder ub, final SearchCriteria<?> sc, Integer rows) {\n             ub.clear();\n             return result;\n         } catch (final SQLException e) {\n-            if (e.getSQLState().equals(\"23000\") && e.getErrorCode() == 1062) {\n-                throw new EntityExistsException(\"Entity already exists \", e);\n-            }\n+            handleEntityExistsException(e);\n             throw new CloudRuntimeException(\"DB Exception on: \" + pstmt, e);\n         }\n     }\n \n+    /**\n+     * If the SQLException.getSQLState is of 23000 (Integrity Constraint Violation), and the Error Code is 1062 (Duplicate Entry), throws EntityExistsException.\n+     * @throws EntityExistsException\n+     */\n+    protected static void handleEntityExistsException(SQLException e) throws EntityExistsException {\n+        boolean isIntegrityConstantViolation = INTEGRITY_CONSTRAINT_VIOLATION.equals(e.getSQLState());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "576021bb97a4b42793351178019b92a6753363d5"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3785, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}