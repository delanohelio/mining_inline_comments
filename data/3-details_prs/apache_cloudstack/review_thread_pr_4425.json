{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5ODQ1NTQx", "number": 4425, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDozNjozMVrOE2y3TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODo0NTowNlrOE6dRhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODkxOTE2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/storage/snapshot/SnapshotManagerImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDozNjozMVrOHvxuRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDo1MToyN1rOHwvI4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1OTc4MQ==", "bodyText": "should this be in a transaction to be sure?", "url": "https://github.com/apache/cloudstack/pull/4425#discussion_r519859781", "createdAt": "2020-11-09T14:36:31Z", "author": {"login": "DaanHoogland"}, "path": "server/src/main/java/com/cloud/storage/snapshot/SnapshotManagerImpl.java", "diffHunk": "@@ -553,6 +553,25 @@ private void postCreateRecurringSnapshotForPolicy(long userId, long volumeId, lo\n         }\n     }\n \n+    public void markFailedSnapshot(long snapshotId) {\n+        Account caller = CallContext.current().getCallingAccount();\n+\n+        // Verify parameters\n+        SnapshotVO snapshotCheck = _snapshotDao.findById(snapshotId);\n+\n+        if (snapshotCheck == null) {\n+            throw new InvalidParameterValueException(\"unable to find a snapshot with id \" + snapshotId);\n+        }\n+\n+        _accountMgr.checkAccess(caller, null, true, snapshotCheck);\n+\n+        snapshotCheck.setState(Snapshot.State.Error);\n+        _snapshotDao.update(snapshotId, snapshotCheck);\n+        // Setting removed to prevent record from being deleted by garbage collection.\n+        _snapshotDao.remove(snapshotId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9650051a295e1e3b383eda56bca27851a4644bcf"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1NjM1MA==", "bodyText": "ping @Spaceman1984", "url": "https://github.com/apache/cloudstack/pull/4425#discussion_r520656350", "createdAt": "2020-11-10T15:34:41Z", "author": {"login": "DaanHoogland"}, "path": "server/src/main/java/com/cloud/storage/snapshot/SnapshotManagerImpl.java", "diffHunk": "@@ -553,6 +553,25 @@ private void postCreateRecurringSnapshotForPolicy(long userId, long volumeId, lo\n         }\n     }\n \n+    public void markFailedSnapshot(long snapshotId) {\n+        Account caller = CallContext.current().getCallingAccount();\n+\n+        // Verify parameters\n+        SnapshotVO snapshotCheck = _snapshotDao.findById(snapshotId);\n+\n+        if (snapshotCheck == null) {\n+            throw new InvalidParameterValueException(\"unable to find a snapshot with id \" + snapshotId);\n+        }\n+\n+        _accountMgr.checkAccess(caller, null, true, snapshotCheck);\n+\n+        snapshotCheck.setState(Snapshot.State.Error);\n+        _snapshotDao.update(snapshotId, snapshotCheck);\n+        // Setting removed to prevent record from being deleted by garbage collection.\n+        _snapshotDao.remove(snapshotId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1OTc4MQ=="}, "originalCommit": {"oid": "9650051a295e1e3b383eda56bca27851a4644bcf"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2NjAxOA==", "bodyText": "ping @davidjumani @GabrielBrascher @rhtyd the two statements above should be grouped in a transaction. agree?", "url": "https://github.com/apache/cloudstack/pull/4425#discussion_r520866018", "createdAt": "2020-11-10T20:51:27Z", "author": {"login": "DaanHoogland"}, "path": "server/src/main/java/com/cloud/storage/snapshot/SnapshotManagerImpl.java", "diffHunk": "@@ -553,6 +553,25 @@ private void postCreateRecurringSnapshotForPolicy(long userId, long volumeId, lo\n         }\n     }\n \n+    public void markFailedSnapshot(long snapshotId) {\n+        Account caller = CallContext.current().getCallingAccount();\n+\n+        // Verify parameters\n+        SnapshotVO snapshotCheck = _snapshotDao.findById(snapshotId);\n+\n+        if (snapshotCheck == null) {\n+            throw new InvalidParameterValueException(\"unable to find a snapshot with id \" + snapshotId);\n+        }\n+\n+        _accountMgr.checkAccess(caller, null, true, snapshotCheck);\n+\n+        snapshotCheck.setState(Snapshot.State.Error);\n+        _snapshotDao.update(snapshotId, snapshotCheck);\n+        // Setting removed to prevent record from being deleted by garbage collection.\n+        _snapshotDao.remove(snapshotId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1OTc4MQ=="}, "originalCommit": {"oid": "9650051a295e1e3b383eda56bca27851a4644bcf"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NzA1OTkyOnYy", "diffSide": "RIGHT", "path": "engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/AncientDataMotionStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNjozMDowNlrOHw_1PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzo1Mjo0MFrOH012PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEzOTUxNw==", "bodyText": "@Spaceman1984 the copy callback should mark the snapshot state accordingly, based on the operation result (success / fail). Not required to set the state explicitly.", "url": "https://github.com/apache/cloudstack/pull/4425#discussion_r521139517", "createdAt": "2020-11-11T06:30:06Z", "author": {"login": "sureshanaparti"}, "path": "engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/AncientDataMotionStrategy.java", "diffHunk": "@@ -587,6 +590,7 @@ protected Answer copySnapshot(DataObject srcData, DataObject destData) {\n             if (cacheData != null) {\n                 cacheMgr.deleteCacheObject(cacheData);\n             }\n+            _snapshotService.markFailedSnapshot(destData.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9650051a295e1e3b383eda56bca27851a4644bcf"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3MDIzNg==", "bodyText": "Addressed", "url": "https://github.com/apache/cloudstack/pull/4425#discussion_r525170236", "createdAt": "2020-11-17T13:52:40Z", "author": {"login": "Spaceman1984"}, "path": "engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/AncientDataMotionStrategy.java", "diffHunk": "@@ -587,6 +590,7 @@ protected Answer copySnapshot(DataObject srcData, DataObject destData) {\n             if (cacheData != null) {\n                 cacheMgr.deleteCacheObject(cacheData);\n             }\n+            _snapshotService.markFailedSnapshot(destData.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEzOTUxNw=="}, "originalCommit": {"oid": "9650051a295e1e3b383eda56bca27851a4644bcf"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NzA2NzQzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/storage/snapshot/SnapshotManagerImpl.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNjozMzozMFrOHw_5kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzo1MTo1OFrOH010XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE0MDYyNQ==", "bodyText": "@Spaceman1984 can you handle this in the copy callback, and pass the proper event to set the snapshot state?", "url": "https://github.com/apache/cloudstack/pull/4425#discussion_r521140625", "createdAt": "2020-11-11T06:33:30Z", "author": {"login": "sureshanaparti"}, "path": "server/src/main/java/com/cloud/storage/snapshot/SnapshotManagerImpl.java", "diffHunk": "@@ -553,6 +553,25 @@ private void postCreateRecurringSnapshotForPolicy(long userId, long volumeId, lo\n         }\n     }\n \n+    public void markFailedSnapshot(long snapshotId) {\n+        Account caller = CallContext.current().getCallingAccount();\n+\n+        // Verify parameters\n+        SnapshotVO snapshotCheck = _snapshotDao.findById(snapshotId);\n+\n+        if (snapshotCheck == null) {\n+            throw new InvalidParameterValueException(\"unable to find a snapshot with id \" + snapshotId);\n+        }\n+\n+        _accountMgr.checkAccess(caller, null, true, snapshotCheck);\n+\n+        snapshotCheck.setState(Snapshot.State.Error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9650051a295e1e3b383eda56bca27851a4644bcf"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE0Mjc3MQ==", "bodyText": "Not sure what you mean @sureshanaparti", "url": "https://github.com/apache/cloudstack/pull/4425#discussion_r521142771", "createdAt": "2020-11-11T06:40:03Z", "author": {"login": "Spaceman1984"}, "path": "server/src/main/java/com/cloud/storage/snapshot/SnapshotManagerImpl.java", "diffHunk": "@@ -553,6 +553,25 @@ private void postCreateRecurringSnapshotForPolicy(long userId, long volumeId, lo\n         }\n     }\n \n+    public void markFailedSnapshot(long snapshotId) {\n+        Account caller = CallContext.current().getCallingAccount();\n+\n+        // Verify parameters\n+        SnapshotVO snapshotCheck = _snapshotDao.findById(snapshotId);\n+\n+        if (snapshotCheck == null) {\n+            throw new InvalidParameterValueException(\"unable to find a snapshot with id \" + snapshotId);\n+        }\n+\n+        _accountMgr.checkAccess(caller, null, true, snapshotCheck);\n+\n+        snapshotCheck.setState(Snapshot.State.Error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE0MDYyNQ=="}, "originalCommit": {"oid": "9650051a295e1e3b383eda56bca27851a4644bcf"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE1ODIyMA==", "bodyText": "Not sure what you mean @sureshanaparti\n\n@Spaceman1984 the caller of copyAsync method would set a callback method to process the result and set the object state accordingly. Can you use that callback method (of snapshot copy operation) to set the state, through the event (check the snapshot state machine) ?", "url": "https://github.com/apache/cloudstack/pull/4425#discussion_r521158220", "createdAt": "2020-11-11T07:08:13Z", "author": {"login": "sureshanaparti"}, "path": "server/src/main/java/com/cloud/storage/snapshot/SnapshotManagerImpl.java", "diffHunk": "@@ -553,6 +553,25 @@ private void postCreateRecurringSnapshotForPolicy(long userId, long volumeId, lo\n         }\n     }\n \n+    public void markFailedSnapshot(long snapshotId) {\n+        Account caller = CallContext.current().getCallingAccount();\n+\n+        // Verify parameters\n+        SnapshotVO snapshotCheck = _snapshotDao.findById(snapshotId);\n+\n+        if (snapshotCheck == null) {\n+            throw new InvalidParameterValueException(\"unable to find a snapshot with id \" + snapshotId);\n+        }\n+\n+        _accountMgr.checkAccess(caller, null, true, snapshotCheck);\n+\n+        snapshotCheck.setState(Snapshot.State.Error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE0MDYyNQ=="}, "originalCommit": {"oid": "9650051a295e1e3b383eda56bca27851a4644bcf"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA0NjIzNQ==", "bodyText": "I'll take a look.", "url": "https://github.com/apache/cloudstack/pull/4425#discussion_r525046235", "createdAt": "2020-11-17T10:28:31Z", "author": {"login": "Spaceman1984"}, "path": "server/src/main/java/com/cloud/storage/snapshot/SnapshotManagerImpl.java", "diffHunk": "@@ -553,6 +553,25 @@ private void postCreateRecurringSnapshotForPolicy(long userId, long volumeId, lo\n         }\n     }\n \n+    public void markFailedSnapshot(long snapshotId) {\n+        Account caller = CallContext.current().getCallingAccount();\n+\n+        // Verify parameters\n+        SnapshotVO snapshotCheck = _snapshotDao.findById(snapshotId);\n+\n+        if (snapshotCheck == null) {\n+            throw new InvalidParameterValueException(\"unable to find a snapshot with id \" + snapshotId);\n+        }\n+\n+        _accountMgr.checkAccess(caller, null, true, snapshotCheck);\n+\n+        snapshotCheck.setState(Snapshot.State.Error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE0MDYyNQ=="}, "originalCommit": {"oid": "9650051a295e1e3b383eda56bca27851a4644bcf"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE2OTc1Nw==", "bodyText": "I have removed setting the error state, this leaves the snapshot in a \"backing up\" state forever which is fine.", "url": "https://github.com/apache/cloudstack/pull/4425#discussion_r525169757", "createdAt": "2020-11-17T13:51:58Z", "author": {"login": "Spaceman1984"}, "path": "server/src/main/java/com/cloud/storage/snapshot/SnapshotManagerImpl.java", "diffHunk": "@@ -553,6 +553,25 @@ private void postCreateRecurringSnapshotForPolicy(long userId, long volumeId, lo\n         }\n     }\n \n+    public void markFailedSnapshot(long snapshotId) {\n+        Account caller = CallContext.current().getCallingAccount();\n+\n+        // Verify parameters\n+        SnapshotVO snapshotCheck = _snapshotDao.findById(snapshotId);\n+\n+        if (snapshotCheck == null) {\n+            throw new InvalidParameterValueException(\"unable to find a snapshot with id \" + snapshotId);\n+        }\n+\n+        _accountMgr.checkAccess(caller, null, true, snapshotCheck);\n+\n+        snapshotCheck.setState(Snapshot.State.Error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE0MDYyNQ=="}, "originalCommit": {"oid": "9650051a295e1e3b383eda56bca27851a4644bcf"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzI5Mzc4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/storage/snapshot/SnapshotManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODozNzowMVrOH1iiaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODozNzowMVrOH1iiaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwMjQ0MA==", "bodyText": "markRemovedSnapshot indicates the snapshot is already removed. I think removeSnapshot (or markSnapshotAsRemoved) is ok.", "url": "https://github.com/apache/cloudstack/pull/4425#discussion_r525902440", "createdAt": "2020-11-18T08:37:01Z", "author": {"login": "sureshanaparti"}, "path": "server/src/main/java/com/cloud/storage/snapshot/SnapshotManagerImpl.java", "diffHunk": "@@ -553,6 +553,22 @@ private void postCreateRecurringSnapshotForPolicy(long userId, long volumeId, lo\n         }\n     }\n \n+    public void markRemovedSnapshot(long snapshotId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd8955e6c8faad04693e64996e36c751f3e0aee9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzMwMDE5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/storage/snapshot/SnapshotManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODozODo0MFrOH1imdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODozODo0MFrOH1imdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwMzQ3Nw==", "bodyText": "move caller here.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    _accountMgr.checkAccess(caller, null, true, snapshotCheck);\n          \n          \n            \n                    Account caller = CallContext.current().getCallingAccount();\n          \n          \n            \n                    _accountMgr.checkAccess(caller, null, true, snapshotCheck);", "url": "https://github.com/apache/cloudstack/pull/4425#discussion_r525903477", "createdAt": "2020-11-18T08:38:40Z", "author": {"login": "sureshanaparti"}, "path": "server/src/main/java/com/cloud/storage/snapshot/SnapshotManagerImpl.java", "diffHunk": "@@ -553,6 +553,22 @@ private void postCreateRecurringSnapshotForPolicy(long userId, long volumeId, lo\n         }\n     }\n \n+    public void markRemovedSnapshot(long snapshotId) {\n+        Account caller = CallContext.current().getCallingAccount();\n+\n+        // Verify parameters\n+        SnapshotVO snapshotCheck = _snapshotDao.findById(snapshotId);\n+\n+        if (snapshotCheck == null) {\n+            throw new InvalidParameterValueException(\"unable to find a snapshot with id \" + snapshotId);\n+        }\n+\n+        _accountMgr.checkAccess(caller, null, true, snapshotCheck);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd8955e6c8faad04693e64996e36c751f3e0aee9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzMyNDg2OnYy", "diffSide": "RIGHT", "path": "engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/AncientDataMotionStrategy.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODo0NTowNlrOH1i1mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwOTowNDo1NVrOH2TFLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwNzM1Mg==", "bodyText": "Can you check for OperationTimedoutException (if thrown for timeout?), set removed accordingly. Note that, the snapshot here is not in Error state as the copy callback is not yet to be called, which takes the action based on the operation failure.", "url": "https://github.com/apache/cloudstack/pull/4425#discussion_r525907352", "createdAt": "2020-11-18T08:45:06Z", "author": {"login": "sureshanaparti"}, "path": "engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/AncientDataMotionStrategy.java", "diffHunk": "@@ -587,6 +590,7 @@ protected Answer copySnapshot(DataObject srcData, DataObject destData) {\n             if (cacheData != null) {\n                 cacheMgr.deleteCacheObject(cacheData);\n             }\n+            _snapshotService.markRemovedSnapshot(destData.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd8955e6c8faad04693e64996e36c751f3e0aee9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjExMTQ4NA==", "bodyText": "I think having the snapshot marked as removed here in the case of any exception is better than just checking for a timeout. I think if the process fails for any reason we would want to keep the db records.", "url": "https://github.com/apache/cloudstack/pull/4425#discussion_r526111484", "createdAt": "2020-11-18T14:04:48Z", "author": {"login": "Spaceman1984"}, "path": "engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/AncientDataMotionStrategy.java", "diffHunk": "@@ -587,6 +590,7 @@ protected Answer copySnapshot(DataObject srcData, DataObject destData) {\n             if (cacheData != null) {\n                 cacheMgr.deleteCacheObject(cacheData);\n             }\n+            _snapshotService.markRemovedSnapshot(destData.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwNzM1Mg=="}, "originalCommit": {"oid": "cd8955e6c8faad04693e64996e36c751f3e0aee9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYzODU4MQ==", "bodyText": "@Spaceman1984 possible to move this method call \"__snapshotService.markSnapshotAsRemoved(destData.getId())_\" to copy snapshot callback method on result failure?", "url": "https://github.com/apache/cloudstack/pull/4425#discussion_r526638581", "createdAt": "2020-11-19T07:12:32Z", "author": {"login": "sureshanaparti"}, "path": "engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/AncientDataMotionStrategy.java", "diffHunk": "@@ -587,6 +590,7 @@ protected Answer copySnapshot(DataObject srcData, DataObject destData) {\n             if (cacheData != null) {\n                 cacheMgr.deleteCacheObject(cacheData);\n             }\n+            _snapshotService.markRemovedSnapshot(destData.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwNzM1Mg=="}, "originalCommit": {"oid": "cd8955e6c8faad04693e64996e36c751f3e0aee9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY5Nzc3Mg==", "bodyText": "Thanks @sureshanaparti for pointing me in that direction, I was able to get rid of that method.", "url": "https://github.com/apache/cloudstack/pull/4425#discussion_r526697772", "createdAt": "2020-11-19T09:04:55Z", "author": {"login": "Spaceman1984"}, "path": "engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/AncientDataMotionStrategy.java", "diffHunk": "@@ -587,6 +590,7 @@ protected Answer copySnapshot(DataObject srcData, DataObject destData) {\n             if (cacheData != null) {\n                 cacheMgr.deleteCacheObject(cacheData);\n             }\n+            _snapshotService.markRemovedSnapshot(destData.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwNzM1Mg=="}, "originalCommit": {"oid": "cd8955e6c8faad04693e64996e36c751f3e0aee9"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4103, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}