{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0NjMxMTU3", "number": 4409, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNzozMzowM1rOEun44w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNzozMzo1NFrOEun6lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzIzNDkxOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/cloud/configuration/ConfigurationManagerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNzozMzowM1rOHjJx5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOTozODoxNVrOHjNj7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYyMjQzOA==", "bodyText": "I believe your test is incorrect.\nYou need an assertion here.", "url": "https://github.com/apache/cloudstack/pull/4409#discussion_r506622438", "createdAt": "2020-10-16T17:33:03Z", "author": {"login": "RodrigoDLopez"}, "path": "server/src/test/java/com/cloud/configuration/ConfigurationManagerTest.java", "diffHunk": "@@ -946,17 +946,32 @@ public void validateMaximumIopsAndBytesLengthTestDefaultLengthConfigs() {\n \n     @Test\n     public void shouldUpdateDiskOfferingTests(){\n-        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(Mockito.anyString(), Mockito.anyString(), Mockito.anyInt(), Mockito.anyBoolean(), Mockito.anyString()));\n-        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(Mockito.anyString(), nullable(String.class), nullable(Integer.class), nullable(Boolean.class), nullable(String.class)));\n-        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(nullable(String.class), Mockito.anyString(), nullable(Integer.class), nullable(Boolean.class), nullable(String.class)));\n-        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(nullable(String.class), nullable(String.class), Mockito.anyInt(), nullable(Boolean.class), nullable(String.class)));\n-        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(nullable(String.class), nullable(String.class), nullable(int.class), Mockito.anyBoolean(), nullable(String.class)));\n-        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(nullable(String.class), nullable(String.class), nullable(int.class), nullable(Boolean.class), Mockito.anyString()));\n+        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(Mockito.anyString(), Mockito.anyString(), Mockito.anyInt(), Mockito.anyBoolean(), Mockito.anyString(), Mockito.anyString()));\n+        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(Mockito.anyString(), nullable(String.class), nullable(Integer.class), nullable(Boolean.class), nullable(String.class), nullable(String.class)));\n+        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(nullable(String.class), Mockito.anyString(), nullable(Integer.class), nullable(Boolean.class), nullable(String.class), nullable(String.class)));\n+        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(nullable(String.class), nullable(String.class), Mockito.anyInt(), nullable(Boolean.class), nullable(String.class), nullable(String.class)));\n+        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(nullable(String.class), nullable(String.class), nullable(int.class), Mockito.anyBoolean(), nullable(String.class), nullable(String.class)));\n+        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(nullable(String.class), nullable(String.class), nullable(int.class), nullable(Boolean.class), Mockito.anyString(), Mockito.anyString()));\n     }\n \n     @Test\n     public void shouldUpdateDiskOfferingTestFalse(){\n-        Assert.assertFalse(configurationMgr.shouldUpdateDiskOffering(null, null, null, null, null));\n+        Assert.assertFalse(configurationMgr.shouldUpdateDiskOffering(null, null, null, null, null, null));\n+    }\n+\n+    @Test\n+    public void shouldUpdateIopsRateParametersTestFalse() {\n+        configurationMgr.shouldUpdateIopsRateParameters(null, null, null, null, null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3efd00d4bbb67bd2e9a487c1fe3e8f7bbcd7362b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4NDM5Ng==", "bodyText": "Thanks, updated!", "url": "https://github.com/apache/cloudstack/pull/4409#discussion_r506684396", "createdAt": "2020-10-16T19:38:15Z", "author": {"login": "GabrielBrascher"}, "path": "server/src/test/java/com/cloud/configuration/ConfigurationManagerTest.java", "diffHunk": "@@ -946,17 +946,32 @@ public void validateMaximumIopsAndBytesLengthTestDefaultLengthConfigs() {\n \n     @Test\n     public void shouldUpdateDiskOfferingTests(){\n-        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(Mockito.anyString(), Mockito.anyString(), Mockito.anyInt(), Mockito.anyBoolean(), Mockito.anyString()));\n-        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(Mockito.anyString(), nullable(String.class), nullable(Integer.class), nullable(Boolean.class), nullable(String.class)));\n-        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(nullable(String.class), Mockito.anyString(), nullable(Integer.class), nullable(Boolean.class), nullable(String.class)));\n-        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(nullable(String.class), nullable(String.class), Mockito.anyInt(), nullable(Boolean.class), nullable(String.class)));\n-        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(nullable(String.class), nullable(String.class), nullable(int.class), Mockito.anyBoolean(), nullable(String.class)));\n-        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(nullable(String.class), nullable(String.class), nullable(int.class), nullable(Boolean.class), Mockito.anyString()));\n+        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(Mockito.anyString(), Mockito.anyString(), Mockito.anyInt(), Mockito.anyBoolean(), Mockito.anyString(), Mockito.anyString()));\n+        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(Mockito.anyString(), nullable(String.class), nullable(Integer.class), nullable(Boolean.class), nullable(String.class), nullable(String.class)));\n+        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(nullable(String.class), Mockito.anyString(), nullable(Integer.class), nullable(Boolean.class), nullable(String.class), nullable(String.class)));\n+        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(nullable(String.class), nullable(String.class), Mockito.anyInt(), nullable(Boolean.class), nullable(String.class), nullable(String.class)));\n+        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(nullable(String.class), nullable(String.class), nullable(int.class), Mockito.anyBoolean(), nullable(String.class), nullable(String.class)));\n+        Assert.assertTrue(configurationMgr.shouldUpdateDiskOffering(nullable(String.class), nullable(String.class), nullable(int.class), nullable(Boolean.class), Mockito.anyString(), Mockito.anyString()));\n     }\n \n     @Test\n     public void shouldUpdateDiskOfferingTestFalse(){\n-        Assert.assertFalse(configurationMgr.shouldUpdateDiskOffering(null, null, null, null, null));\n+        Assert.assertFalse(configurationMgr.shouldUpdateDiskOffering(null, null, null, null, null, null));\n+    }\n+\n+    @Test\n+    public void shouldUpdateIopsRateParametersTestFalse() {\n+        configurationMgr.shouldUpdateIopsRateParameters(null, null, null, null, null, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYyMjQzOA=="}, "originalCommit": {"oid": "3efd00d4bbb67bd2e9a487c1fe3e8f7bbcd7362b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzIzOTI3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNzozMzo1NVrOHjJ0WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNzozMzo1NVrOHjJ0WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYyMzA2NQ==", "bodyText": "those change will not impact into edit diskoffering tags", "url": "https://github.com/apache/cloudstack/pull/4409#discussion_r506623065", "createdAt": "2020-10-16T17:33:55Z", "author": {"login": "RodrigoDLopez"}, "path": "server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java", "diffHunk": "@@ -3273,8 +3280,17 @@ protected void updateDiskOfferingTagsIfIsNotNull(String tags, DiskOfferingVO dis\n      * Check if it needs to update any parameter when updateDiskoffering is called\n      * Verify if name or displayText are not blank, tags is not null, sortkey and displayDiskOffering is not null\n      */\n-    protected boolean shouldUpdateDiskOffering(String name, String displayText, Integer sortKey, Boolean displayDiskOffering, String tags) {\n-        return StringUtils.isNotBlank(name) || StringUtils.isNotBlank(displayText) || tags != null || sortKey != null || displayDiskOffering != null;\n+    protected boolean shouldUpdateDiskOffering(String name, String displayText, Integer sortKey, Boolean displayDiskOffering, String tags, String cacheMode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3efd00d4bbb67bd2e9a487c1fe3e8f7bbcd7362b"}, "originalPosition": 201}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4085, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}