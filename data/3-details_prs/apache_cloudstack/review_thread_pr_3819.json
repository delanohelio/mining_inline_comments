{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MTk1OTYw", "number": 3819, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzoyNjo0MVrODaKwPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNzowMzo1OFrODbTLIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzY1NzU2OnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/IscsiStorageCleanupMonitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzoyNjo0MVrOFg9_dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNjoxMTo0NVrOFiIcIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDExNDQyMw==", "bodyText": "you need a license here to pass (rat failure)", "url": "https://github.com/apache/cloudstack/pull/3819#discussion_r370114423", "createdAt": "2020-01-23T13:26:41Z", "author": {"login": "DaanHoogland"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/IscsiStorageCleanupMonitor.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package com.cloud.hypervisor.kvm.storage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7e8f6982f5435b15996b55c0f1368539fa015e8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMzNDE3Nw==", "bodyText": "added the apache license", "url": "https://github.com/apache/cloudstack/pull/3819#discussion_r371334177", "createdAt": "2020-01-27T16:11:45Z", "author": {"login": "skattoju4"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/IscsiStorageCleanupMonitor.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package com.cloud.hypervisor.kvm.storage;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDExNDQyMw=="}, "originalCommit": {"oid": "c7e8f6982f5435b15996b55c0f1368539fa015e8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODUwODEyOnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/IscsiStorageCleanupMonitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzoxNjozNlrOFhGNmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzoxNjozNlrOFhGNmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0OTExNA==", "bodyText": "I am OK with the way it is, but I would like to raise the following question: Is it interesting to externalize CLEANUP_INTERVAL_SEC this on a global settings variable (config keys)?", "url": "https://github.com/apache/cloudstack/pull/3819#discussion_r370249114", "createdAt": "2020-01-23T17:16:36Z", "author": {"login": "GabrielBrascher"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/IscsiStorageCleanupMonitor.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package com.cloud.hypervisor.kvm.storage;\n+\n+import com.cloud.hypervisor.kvm.resource.LibvirtConnection;\n+import com.cloud.hypervisor.kvm.resource.LibvirtDomainXMLParser;\n+import com.cloud.hypervisor.kvm.resource.LibvirtVMDef;\n+import org.apache.cloudstack.managed.context.ManagedContextRunnable;\n+import org.apache.log4j.Logger;\n+import org.libvirt.Connect;\n+import org.libvirt.Domain;\n+import org.libvirt.LibvirtException;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class IscsiStorageCleanupMonitor implements Runnable{\n+    private static final Logger s_logger = Logger.getLogger(IscsiStorageCleanupMonitor.class);\n+    private static final int CLEANUP_INTERVAL_SEC = 60; // check every X seconds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7e8f6982f5435b15996b55c0f1368539fa015e8"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODU3ODQzOnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/IscsiStorageCleanupMonitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzozOTo1OVrOFhG51Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzozOTo1OVrOFhG51Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2MDQzNw==", "bodyText": "I would recommend creating a few methods  (e.g. checkIfIscsSessionBelongAnyVm(Connect), etc) which would allow documenting (Javadoc) and creating unit tests (JUnit).", "url": "https://github.com/apache/cloudstack/pull/3819#discussion_r370260437", "createdAt": "2020-01-23T17:39:59Z", "author": {"login": "GabrielBrascher"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/IscsiStorageCleanupMonitor.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package com.cloud.hypervisor.kvm.storage;\n+\n+import com.cloud.hypervisor.kvm.resource.LibvirtConnection;\n+import com.cloud.hypervisor.kvm.resource.LibvirtDomainXMLParser;\n+import com.cloud.hypervisor.kvm.resource.LibvirtVMDef;\n+import org.apache.cloudstack.managed.context.ManagedContextRunnable;\n+import org.apache.log4j.Logger;\n+import org.libvirt.Connect;\n+import org.libvirt.Domain;\n+import org.libvirt.LibvirtException;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class IscsiStorageCleanupMonitor implements Runnable{\n+    private static final Logger s_logger = Logger.getLogger(IscsiStorageCleanupMonitor.class);\n+    private static final int CLEANUP_INTERVAL_SEC = 60; // check every X seconds\n+    private static final String ISCSI_PATH_PREFIX = \"/dev/disk/by-path\";\n+    private static final String KEYWORD_ISCSI = \"iscsi\";\n+    private static final String KEYWORD_IQN = \"iqn\";\n+\n+    private IscsiAdmStorageAdaptor iscsiStorageAdaptor;\n+\n+    private Map<String, Boolean> diskStatusMap;\n+\n+    public IscsiStorageCleanupMonitor() {\n+        diskStatusMap = new HashMap<>();\n+        s_logger.debug(\"Initialize cleanup thread\");\n+        iscsiStorageAdaptor = new IscsiAdmStorageAdaptor();\n+    }\n+\n+\n+    private class Monitor extends ManagedContextRunnable {\n+\n+        @Override\n+        protected void runInContext() {\n+            Connect conn = null;\n+            try {\n+                conn = LibvirtConnection.getConnection();\n+\n+                //populate all the iscsi disks currently attached to this host\n+                diskStatusMap.clear();\n+                File[] iscsiVolumes = new File(ISCSI_PATH_PREFIX).listFiles();\n+\n+                if (iscsiVolumes == null || iscsiVolumes.length == 0) {\n+                    s_logger.debug(\"No iscsi sessions found for cleanup\");\n+                    return;\n+                }\n+\n+                for( File v : iscsiVolumes) {\n+                    if (isIscsiDisk(v.getAbsolutePath())) {\n+                        s_logger.debug(\"found iscsi disk by cleanup thread, marking inactive:\" + v.getAbsolutePath());\n+                        diskStatusMap.put(v.getAbsolutePath(), false);\n+                    }\n+                }\n+\n+                // check if they belong to any VM\n+                int[] domains = conn.listDomains();\n+                s_logger.debug(String.format(\"found %d domains\", domains.length));\n+                for (int domId : domains) {\n+                    Domain dm = conn.domainLookupByID(domId);\n+                    final String domXml = dm.getXMLDesc(0);\n+                    final LibvirtDomainXMLParser parser = new LibvirtDomainXMLParser();\n+                    parser.parseDomainXML(domXml);\n+                    List<LibvirtVMDef.DiskDef> disks = parser.getDisks();\n+\n+                    //check the volume map. If an entry exists change the status to True\n+                    for (final LibvirtVMDef.DiskDef disk : disks) {\n+                        if (diskStatusMap.containsKey(disk.getDiskPath())) {\n+                            diskStatusMap.put(disk.getDiskPath(), true);\n+                            s_logger.debug(\"active disk found by cleanup thread\" + disk.getDiskPath());\n+                        }\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7e8f6982f5435b15996b55c0f1368539fa015e8"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTQ5MTM5OnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/IscsiStorageCleanupMonitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNjo1NTozMlrOFisysg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNjo1NTozMlrOFisysg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTkyOTc3OA==", "bodyText": "long method with a lot of comment. can you please factor out the pieces that need commenting in their own method with clear names? that would make this thread code more maintainable for future generations.", "url": "https://github.com/apache/cloudstack/pull/3819#discussion_r371929778", "createdAt": "2020-01-28T16:55:32Z", "author": {"login": "DaanHoogland"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/IscsiStorageCleanupMonitor.java", "diffHunk": "@@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.hypervisor.kvm.storage;\n+\n+import com.cloud.hypervisor.kvm.resource.LibvirtConnection;\n+import com.cloud.hypervisor.kvm.resource.LibvirtDomainXMLParser;\n+import com.cloud.hypervisor.kvm.resource.LibvirtVMDef;\n+import org.apache.cloudstack.managed.context.ManagedContextRunnable;\n+import org.apache.log4j.Logger;\n+import org.libvirt.Connect;\n+import org.libvirt.Domain;\n+import org.libvirt.LibvirtException;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class IscsiStorageCleanupMonitor implements Runnable{\n+    private static final Logger s_logger = Logger.getLogger(IscsiStorageCleanupMonitor.class);\n+    private static final int CLEANUP_INTERVAL_SEC = 60; // check every X seconds\n+    private static final String ISCSI_PATH_PREFIX = \"/dev/disk/by-path\";\n+    private static final String KEYWORD_ISCSI = \"iscsi\";\n+    private static final String KEYWORD_IQN = \"iqn\";\n+\n+    private IscsiAdmStorageAdaptor iscsiStorageAdaptor;\n+\n+    private Map<String, Boolean> diskStatusMap;\n+\n+    public IscsiStorageCleanupMonitor() {\n+        diskStatusMap = new HashMap<>();\n+        s_logger.debug(\"Initialize cleanup thread\");\n+        iscsiStorageAdaptor = new IscsiAdmStorageAdaptor();\n+    }\n+\n+\n+    private class Monitor extends ManagedContextRunnable {\n+\n+        @Override\n+        protected void runInContext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bf605ba335241d81280092823a7a0e4bb1570db"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTUwNDYyOnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/IscsiStorageCleanupMonitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNjo1ODo1NFrOFis6ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNjo1ODo1NFrOFis6ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTkzMTg0Mw==", "bodyText": "populateDiskStatusMap();", "url": "https://github.com/apache/cloudstack/pull/3819#discussion_r371931843", "createdAt": "2020-01-28T16:58:54Z", "author": {"login": "DaanHoogland"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/IscsiStorageCleanupMonitor.java", "diffHunk": "@@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.hypervisor.kvm.storage;\n+\n+import com.cloud.hypervisor.kvm.resource.LibvirtConnection;\n+import com.cloud.hypervisor.kvm.resource.LibvirtDomainXMLParser;\n+import com.cloud.hypervisor.kvm.resource.LibvirtVMDef;\n+import org.apache.cloudstack.managed.context.ManagedContextRunnable;\n+import org.apache.log4j.Logger;\n+import org.libvirt.Connect;\n+import org.libvirt.Domain;\n+import org.libvirt.LibvirtException;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class IscsiStorageCleanupMonitor implements Runnable{\n+    private static final Logger s_logger = Logger.getLogger(IscsiStorageCleanupMonitor.class);\n+    private static final int CLEANUP_INTERVAL_SEC = 60; // check every X seconds\n+    private static final String ISCSI_PATH_PREFIX = \"/dev/disk/by-path\";\n+    private static final String KEYWORD_ISCSI = \"iscsi\";\n+    private static final String KEYWORD_IQN = \"iqn\";\n+\n+    private IscsiAdmStorageAdaptor iscsiStorageAdaptor;\n+\n+    private Map<String, Boolean> diskStatusMap;\n+\n+    public IscsiStorageCleanupMonitor() {\n+        diskStatusMap = new HashMap<>();\n+        s_logger.debug(\"Initialize cleanup thread\");\n+        iscsiStorageAdaptor = new IscsiAdmStorageAdaptor();\n+    }\n+\n+\n+    private class Monitor extends ManagedContextRunnable {\n+\n+        @Override\n+        protected void runInContext() {\n+            Connect conn = null;\n+            try {\n+                conn = LibvirtConnection.getConnection();\n+\n+                //populate all the iscsi disks currently attached to this host\n+                diskStatusMap.clear();\n+                File[] iscsiVolumes = new File(ISCSI_PATH_PREFIX).listFiles();\n+\n+                if (iscsiVolumes == null || iscsiVolumes.length == 0) {\n+                    s_logger.debug(\"No iscsi sessions found for cleanup\");\n+                    return;\n+                }\n+\n+                for( File v : iscsiVolumes) {\n+                    if (isIscsiDisk(v.getAbsolutePath())) {\n+                        s_logger.debug(\"found iscsi disk by cleanup thread, marking inactive:\" + v.getAbsolutePath());\n+                        diskStatusMap.put(v.getAbsolutePath(), false);\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bf605ba335241d81280092823a7a0e4bb1570db"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTUwNjE3OnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/IscsiStorageCleanupMonitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNjo1OToyMlrOFis7ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNjo1OToyMlrOFis7ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTkzMjA5MA==", "bodyText": "checkDiskStatusMap();", "url": "https://github.com/apache/cloudstack/pull/3819#discussion_r371932090", "createdAt": "2020-01-28T16:59:22Z", "author": {"login": "DaanHoogland"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/IscsiStorageCleanupMonitor.java", "diffHunk": "@@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.hypervisor.kvm.storage;\n+\n+import com.cloud.hypervisor.kvm.resource.LibvirtConnection;\n+import com.cloud.hypervisor.kvm.resource.LibvirtDomainXMLParser;\n+import com.cloud.hypervisor.kvm.resource.LibvirtVMDef;\n+import org.apache.cloudstack.managed.context.ManagedContextRunnable;\n+import org.apache.log4j.Logger;\n+import org.libvirt.Connect;\n+import org.libvirt.Domain;\n+import org.libvirt.LibvirtException;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class IscsiStorageCleanupMonitor implements Runnable{\n+    private static final Logger s_logger = Logger.getLogger(IscsiStorageCleanupMonitor.class);\n+    private static final int CLEANUP_INTERVAL_SEC = 60; // check every X seconds\n+    private static final String ISCSI_PATH_PREFIX = \"/dev/disk/by-path\";\n+    private static final String KEYWORD_ISCSI = \"iscsi\";\n+    private static final String KEYWORD_IQN = \"iqn\";\n+\n+    private IscsiAdmStorageAdaptor iscsiStorageAdaptor;\n+\n+    private Map<String, Boolean> diskStatusMap;\n+\n+    public IscsiStorageCleanupMonitor() {\n+        diskStatusMap = new HashMap<>();\n+        s_logger.debug(\"Initialize cleanup thread\");\n+        iscsiStorageAdaptor = new IscsiAdmStorageAdaptor();\n+    }\n+\n+\n+    private class Monitor extends ManagedContextRunnable {\n+\n+        @Override\n+        protected void runInContext() {\n+            Connect conn = null;\n+            try {\n+                conn = LibvirtConnection.getConnection();\n+\n+                //populate all the iscsi disks currently attached to this host\n+                diskStatusMap.clear();\n+                File[] iscsiVolumes = new File(ISCSI_PATH_PREFIX).listFiles();\n+\n+                if (iscsiVolumes == null || iscsiVolumes.length == 0) {\n+                    s_logger.debug(\"No iscsi sessions found for cleanup\");\n+                    return;\n+                }\n+\n+                for( File v : iscsiVolumes) {\n+                    if (isIscsiDisk(v.getAbsolutePath())) {\n+                        s_logger.debug(\"found iscsi disk by cleanup thread, marking inactive:\" + v.getAbsolutePath());\n+                        diskStatusMap.put(v.getAbsolutePath(), false);\n+                    }\n+                }\n+\n+                // check if they belong to any VM\n+                int[] domains = conn.listDomains();\n+                s_logger.debug(String.format(\"found %d domains\", domains.length));\n+                for (int domId : domains) {\n+                    Domain dm = conn.domainLookupByID(domId);\n+                    final String domXml = dm.getXMLDesc(0);\n+                    final LibvirtDomainXMLParser parser = new LibvirtDomainXMLParser();\n+                    parser.parseDomainXML(domXml);\n+                    List<LibvirtVMDef.DiskDef> disks = parser.getDisks();\n+\n+                    //check the volume map. If an entry exists change the status to True\n+                    for (final LibvirtVMDef.DiskDef disk : disks) {\n+                        if (diskStatusMap.containsKey(disk.getDiskPath())) {\n+                            diskStatusMap.put(disk.getDiskPath(), true);\n+                            s_logger.debug(\"active disk found by cleanup thread\" + disk.getDiskPath());\n+                        }\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bf605ba335241d81280092823a7a0e4bb1570db"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTUwNzkxOnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/IscsiStorageCleanupMonitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNjo1OTo0OVrOFis8zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNjo1OTo0OVrOFis8zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTkzMjM2Nw==", "bodyText": "space needed in log message before the path.", "url": "https://github.com/apache/cloudstack/pull/3819#discussion_r371932367", "createdAt": "2020-01-28T16:59:49Z", "author": {"login": "DaanHoogland"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/IscsiStorageCleanupMonitor.java", "diffHunk": "@@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.hypervisor.kvm.storage;\n+\n+import com.cloud.hypervisor.kvm.resource.LibvirtConnection;\n+import com.cloud.hypervisor.kvm.resource.LibvirtDomainXMLParser;\n+import com.cloud.hypervisor.kvm.resource.LibvirtVMDef;\n+import org.apache.cloudstack.managed.context.ManagedContextRunnable;\n+import org.apache.log4j.Logger;\n+import org.libvirt.Connect;\n+import org.libvirt.Domain;\n+import org.libvirt.LibvirtException;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class IscsiStorageCleanupMonitor implements Runnable{\n+    private static final Logger s_logger = Logger.getLogger(IscsiStorageCleanupMonitor.class);\n+    private static final int CLEANUP_INTERVAL_SEC = 60; // check every X seconds\n+    private static final String ISCSI_PATH_PREFIX = \"/dev/disk/by-path\";\n+    private static final String KEYWORD_ISCSI = \"iscsi\";\n+    private static final String KEYWORD_IQN = \"iqn\";\n+\n+    private IscsiAdmStorageAdaptor iscsiStorageAdaptor;\n+\n+    private Map<String, Boolean> diskStatusMap;\n+\n+    public IscsiStorageCleanupMonitor() {\n+        diskStatusMap = new HashMap<>();\n+        s_logger.debug(\"Initialize cleanup thread\");\n+        iscsiStorageAdaptor = new IscsiAdmStorageAdaptor();\n+    }\n+\n+\n+    private class Monitor extends ManagedContextRunnable {\n+\n+        @Override\n+        protected void runInContext() {\n+            Connect conn = null;\n+            try {\n+                conn = LibvirtConnection.getConnection();\n+\n+                //populate all the iscsi disks currently attached to this host\n+                diskStatusMap.clear();\n+                File[] iscsiVolumes = new File(ISCSI_PATH_PREFIX).listFiles();\n+\n+                if (iscsiVolumes == null || iscsiVolumes.length == 0) {\n+                    s_logger.debug(\"No iscsi sessions found for cleanup\");\n+                    return;\n+                }\n+\n+                for( File v : iscsiVolumes) {\n+                    if (isIscsiDisk(v.getAbsolutePath())) {\n+                        s_logger.debug(\"found iscsi disk by cleanup thread, marking inactive:\" + v.getAbsolutePath());\n+                        diskStatusMap.put(v.getAbsolutePath(), false);\n+                    }\n+                }\n+\n+                // check if they belong to any VM\n+                int[] domains = conn.listDomains();\n+                s_logger.debug(String.format(\"found %d domains\", domains.length));\n+                for (int domId : domains) {\n+                    Domain dm = conn.domainLookupByID(domId);\n+                    final String domXml = dm.getXMLDesc(0);\n+                    final LibvirtDomainXMLParser parser = new LibvirtDomainXMLParser();\n+                    parser.parseDomainXML(domXml);\n+                    List<LibvirtVMDef.DiskDef> disks = parser.getDisks();\n+\n+                    //check the volume map. If an entry exists change the status to True\n+                    for (final LibvirtVMDef.DiskDef disk : disks) {\n+                        if (diskStatusMap.containsKey(disk.getDiskPath())) {\n+                            diskStatusMap.put(disk.getDiskPath(), true);\n+                            s_logger.debug(\"active disk found by cleanup thread\" + disk.getDiskPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bf605ba335241d81280092823a7a0e4bb1570db"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTUyMjkwOnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/IscsiStorageCleanupMonitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNzowMzo1OFrOFitGIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNzowMzo1OFrOFitGIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTkzNDc1Mg==", "bodyText": "disconnectPhysicalDisks();", "url": "https://github.com/apache/cloudstack/pull/3819#discussion_r371934752", "createdAt": "2020-01-28T17:03:58Z", "author": {"login": "DaanHoogland"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/IscsiStorageCleanupMonitor.java", "diffHunk": "@@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.hypervisor.kvm.storage;\n+\n+import com.cloud.hypervisor.kvm.resource.LibvirtConnection;\n+import com.cloud.hypervisor.kvm.resource.LibvirtDomainXMLParser;\n+import com.cloud.hypervisor.kvm.resource.LibvirtVMDef;\n+import org.apache.cloudstack.managed.context.ManagedContextRunnable;\n+import org.apache.log4j.Logger;\n+import org.libvirt.Connect;\n+import org.libvirt.Domain;\n+import org.libvirt.LibvirtException;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class IscsiStorageCleanupMonitor implements Runnable{\n+    private static final Logger s_logger = Logger.getLogger(IscsiStorageCleanupMonitor.class);\n+    private static final int CLEANUP_INTERVAL_SEC = 60; // check every X seconds\n+    private static final String ISCSI_PATH_PREFIX = \"/dev/disk/by-path\";\n+    private static final String KEYWORD_ISCSI = \"iscsi\";\n+    private static final String KEYWORD_IQN = \"iqn\";\n+\n+    private IscsiAdmStorageAdaptor iscsiStorageAdaptor;\n+\n+    private Map<String, Boolean> diskStatusMap;\n+\n+    public IscsiStorageCleanupMonitor() {\n+        diskStatusMap = new HashMap<>();\n+        s_logger.debug(\"Initialize cleanup thread\");\n+        iscsiStorageAdaptor = new IscsiAdmStorageAdaptor();\n+    }\n+\n+\n+    private class Monitor extends ManagedContextRunnable {\n+\n+        @Override\n+        protected void runInContext() {\n+            Connect conn = null;\n+            try {\n+                conn = LibvirtConnection.getConnection();\n+\n+                //populate all the iscsi disks currently attached to this host\n+                diskStatusMap.clear();\n+                File[] iscsiVolumes = new File(ISCSI_PATH_PREFIX).listFiles();\n+\n+                if (iscsiVolumes == null || iscsiVolumes.length == 0) {\n+                    s_logger.debug(\"No iscsi sessions found for cleanup\");\n+                    return;\n+                }\n+\n+                for( File v : iscsiVolumes) {\n+                    if (isIscsiDisk(v.getAbsolutePath())) {\n+                        s_logger.debug(\"found iscsi disk by cleanup thread, marking inactive:\" + v.getAbsolutePath());\n+                        diskStatusMap.put(v.getAbsolutePath(), false);\n+                    }\n+                }\n+\n+                // check if they belong to any VM\n+                int[] domains = conn.listDomains();\n+                s_logger.debug(String.format(\"found %d domains\", domains.length));\n+                for (int domId : domains) {\n+                    Domain dm = conn.domainLookupByID(domId);\n+                    final String domXml = dm.getXMLDesc(0);\n+                    final LibvirtDomainXMLParser parser = new LibvirtDomainXMLParser();\n+                    parser.parseDomainXML(domXml);\n+                    List<LibvirtVMDef.DiskDef> disks = parser.getDisks();\n+\n+                    //check the volume map. If an entry exists change the status to True\n+                    for (final LibvirtVMDef.DiskDef disk : disks) {\n+                        if (diskStatusMap.containsKey(disk.getDiskPath())) {\n+                            diskStatusMap.put(disk.getDiskPath(), true);\n+                            s_logger.debug(\"active disk found by cleanup thread\" + disk.getDiskPath());\n+                        }\n+                    }\n+                }\n+\n+                // the ones where the state is false, they are stale. They may be\n+                // removed we go through each volume which is false, check iscsiadm,\n+                // if the volume still exisits, logout of that volume and remove it from the map\n+\n+                // XXX: It is possible that someone had manually added an iSCSI volume.\n+                // we would not be able to detect that\n+                for (String diskPath : diskStatusMap.keySet()) {\n+                    if (!diskStatusMap.get(diskPath)) {\n+                        if (Files.exists(Paths.get(diskPath))) {\n+                            try {\n+                                s_logger.info(\"Cleaning up disk \" + diskPath);\n+                                iscsiStorageAdaptor.disconnectPhysicalDiskByPath(diskPath);\n+                            } catch (Exception e) {\n+                                s_logger.warn(\"[ignored] Error cleaning up \" + diskPath, e);\n+                            }\n+                        }\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bf605ba335241d81280092823a7a0e4bb1570db"}, "originalPosition": 113}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3994, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}