{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NTg0NDQy", "number": 4128, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1NTozMlrOEKxN1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDoxMjo0OFrOEWz33Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzI3NTc0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/cloudstack/api/ApiConstants.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1NTozMlrOGr_w3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1NTozMlrOGr_w3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4NjY1Mg==", "bodyText": "nit - roletype is enough? unless of course we're using this with projectroletype in some API", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r448786652", "createdAt": "2020-07-02T06:55:32Z", "author": {"login": "rhtyd"}, "path": "api/src/main/java/org/apache/cloudstack/api/ApiConstants.java", "diffHunk": "@@ -472,11 +473,16 @@\n     public static final String PROJECT = \"project\";\n     public static final String ROLE = \"role\";\n     public static final String ROLE_ID = \"roleid\";\n+    public static final String ACCOUNT_ROLE_TYPE = \"accountroletype\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1bf01884d12b6ba9a94fe817013707325c7b8c2"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzI3OTgzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/cloudstack/api/ApiConstants.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1Njo1MVrOGr_zMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1Njo1MVrOGr_zMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4NzI1MQ==", "bodyText": "nit - probably this means projectrolepermissionid? (yes, naming is hard, I'm trying to guess what is parameter is for)", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r448787251", "createdAt": "2020-07-02T06:56:51Z", "author": {"login": "rhtyd"}, "path": "api/src/main/java/org/apache/cloudstack/api/ApiConstants.java", "diffHunk": "@@ -472,11 +473,16 @@\n     public static final String PROJECT = \"project\";\n     public static final String ROLE = \"role\";\n     public static final String ROLE_ID = \"roleid\";\n+    public static final String ACCOUNT_ROLE_TYPE = \"accountroletype\";\n+    public static final String PROJECT_ROLE_ID = \"projectroleid\";\n+    public static final String PROJECT_ROLE_NAME = \"projectrolename\";\n+    public static final String PROJECT_ROLE_TYPE = \"projectroletype\";\n     public static final String ROLE_TYPE = \"roletype\";\n     public static final String ROLE_NAME = \"rolename\";\n     public static final String PERMISSION = \"permission\";\n     public static final String RULE = \"rule\";\n     public static final String RULE_ID = \"ruleid\";\n+    public static final String PROJECT_RULE_ID = \"projectruleid\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1bf01884d12b6ba9a94fe817013707325c7b8c2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzI4MjAyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/cloudstack/api/BaseCmd.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1NzozNFrOGr_0lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNTozMDoxNlrOGuEDrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4NzYwNQ==", "bodyText": "Could this cause any exception; maybe return empty array instead or null?", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r448787605", "createdAt": "2020-07-02T06:57:34Z", "author": {"login": "rhtyd"}, "path": "api/src/main/java/org/apache/cloudstack/api/BaseCmd.java", "diffHunk": "@@ -264,6 +269,10 @@ public String getActualCommandName() {\n      */\n     public abstract long getEntityOwnerId();\n \n+    public List<Long> getEntityOwnerIds() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1bf01884d12b6ba9a94fe817013707325c7b8c2"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2NDEyMw==", "bodyText": "the only place referenced - ParamProcessWorker class has been handled to check if a null is returned", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r448864123", "createdAt": "2020-07-02T09:15:10Z", "author": {"login": "Pearl1594"}, "path": "api/src/main/java/org/apache/cloudstack/api/BaseCmd.java", "diffHunk": "@@ -264,6 +269,10 @@ public String getActualCommandName() {\n      */\n     public abstract long getEntityOwnerId();\n \n+    public List<Long> getEntityOwnerIds() {\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4NzYwNQ=="}, "originalCommit": {"oid": "c1bf01884d12b6ba9a94fe817013707325c7b8c2"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk1NDE1Nw==", "bodyText": "+1 verified", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r450954157", "createdAt": "2020-07-07T15:30:16Z", "author": {"login": "nvazquez"}, "path": "api/src/main/java/org/apache/cloudstack/api/BaseCmd.java", "diffHunk": "@@ -264,6 +269,10 @@ public String getActualCommandName() {\n      */\n     public abstract long getEntityOwnerId();\n \n+    public List<Long> getEntityOwnerIds() {\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4NzYwNQ=="}, "originalCommit": {"oid": "c1bf01884d12b6ba9a94fe817013707325c7b8c2"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzI5MDQ2OnYy", "diffSide": "RIGHT", "path": "engine/schema/src/main/java/org/apache/cloudstack/acl/dao/ProjectRoleDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzowMDoyOVrOGr_5vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzowMDoyOVrOGr_5vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4ODkyNQ==", "bodyText": "@Pearl1594 can you add a Strings.isNullOrEmpty here", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r448788925", "createdAt": "2020-07-02T07:00:29Z", "author": {"login": "rhtyd"}, "path": "engine/schema/src/main/java/org/apache/cloudstack/acl/dao/ProjectRoleDaoImpl.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.acl.dao;\n+\n+import java.util.List;\n+\n+import org.apache.cloudstack.acl.ProjectRoleVO;\n+\n+import com.cloud.utils.db.GenericDaoBase;\n+import com.cloud.utils.db.SearchBuilder;\n+import com.cloud.utils.db.SearchCriteria;\n+\n+public class ProjectRoleDaoImpl extends GenericDaoBase<ProjectRoleVO, Long>  implements ProjectRoleDao{\n+    private final SearchBuilder<ProjectRoleVO>  ProjectRoleSearch;\n+\n+    public ProjectRoleDaoImpl() {\n+        super();\n+\n+        ProjectRoleSearch = createSearchBuilder();\n+        ProjectRoleSearch.and(\"name\", ProjectRoleSearch.entity().getName(), SearchCriteria.Op.LIKE);\n+        ProjectRoleSearch.and(\"project_id\", ProjectRoleSearch.entity().getProjectId(), SearchCriteria.Op.EQ);\n+        ProjectRoleSearch.done();\n+\n+    }\n+    @Override\n+    public List<ProjectRoleVO> findByName(String name, Long projectId) {\n+        SearchCriteria<ProjectRoleVO> sc = ProjectRoleSearch.create();\n+        sc.setParameters(\"name\", \"%\" + name + \"%\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1bf01884d12b6ba9a94fe817013707325c7b8c2"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTU1ODc5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/cloudstack/api/command/user/project/UpdateProjectCmd.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNTozMToxN1rOGuEGaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMzoxNjowN1rOGuWm_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk1NDg1Nw==", "bodyText": "Minor one: this can be written in one line", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r450954857", "createdAt": "2020-07-07T15:31:17Z", "author": {"login": "nvazquez"}, "path": "api/src/main/java/org/apache/cloudstack/api/command/user/project/UpdateProjectCmd.java", "diffHunk": "@@ -68,11 +89,49 @@ public String getDisplayText() {\n         return displayText;\n     }\n \n+    public Long getUserId() {\n+        return userId;\n+    }\n+\n+    public Long getDomainId() {\n+        if (domainId != null) {\n+            return domainId;\n+        }\n+        return CallContext.current().getCallingAccount().getDomainId();\n+    }\n+\n+    public ProjectAccount.Role getRoleType(String role) {\n+        String type = role.substring(0, 1).toUpperCase() + role.substring(1).toLowerCase();\n+        if (!EnumUtils.isValidEnum(ProjectAccount.Role.class, type)) {\n+            throw new InvalidParameterValueException(\"Only Admin or Regular project role types are valid\");\n+        }\n+        return Enum.valueOf(ProjectAccount.Role.class, type);\n+    }\n+\n+    public ProjectAccount.Role getAccountRole() {\n+        if (roleType != null) {\n+            return getRoleType(roleType);\n+        }\n+        return ProjectAccount.Role.Regular;\n+    }\n+\n+    public Long getAccountId() {\n+        return accountId;\n+    }\n+\n     @Override\n     public String getCommandName() {\n         return s_name;\n     }\n \n+    public Boolean isSwapOwner() {\n+        if (swapOwner != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "984502b84b9c438c3695dc6f4ce57f3616a59922"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1ODExMA==", "bodyText": "done", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451258110", "createdAt": "2020-07-08T03:16:07Z", "author": {"login": "Pearl1594"}, "path": "api/src/main/java/org/apache/cloudstack/api/command/user/project/UpdateProjectCmd.java", "diffHunk": "@@ -68,11 +89,49 @@ public String getDisplayText() {\n         return displayText;\n     }\n \n+    public Long getUserId() {\n+        return userId;\n+    }\n+\n+    public Long getDomainId() {\n+        if (domainId != null) {\n+            return domainId;\n+        }\n+        return CallContext.current().getCallingAccount().getDomainId();\n+    }\n+\n+    public ProjectAccount.Role getRoleType(String role) {\n+        String type = role.substring(0, 1).toUpperCase() + role.substring(1).toLowerCase();\n+        if (!EnumUtils.isValidEnum(ProjectAccount.Role.class, type)) {\n+            throw new InvalidParameterValueException(\"Only Admin or Regular project role types are valid\");\n+        }\n+        return Enum.valueOf(ProjectAccount.Role.class, type);\n+    }\n+\n+    public ProjectAccount.Role getAccountRole() {\n+        if (roleType != null) {\n+            return getRoleType(roleType);\n+        }\n+        return ProjectAccount.Role.Regular;\n+    }\n+\n+    public Long getAccountId() {\n+        return accountId;\n+    }\n+\n     @Override\n     public String getCommandName() {\n         return s_name;\n     }\n \n+    public Boolean isSwapOwner() {\n+        if (swapOwner != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk1NDg1Nw=="}, "originalCommit": {"oid": "984502b84b9c438c3695dc6f4ce57f3616a59922"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjc5OTYxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/cloudstack/api/command/user/account/AddAccountToProjectCmd.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMToyOTo0MlrOGuQSvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMzoxNjoxNlrOGuWnJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1NDYyMw==", "bodyText": "May I suggest StringUtils.isNotBlank(roleType) here? It checks for null and empty cases", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451154623", "createdAt": "2020-07-07T21:29:42Z", "author": {"login": "nvazquez"}, "path": "api/src/main/java/org/apache/cloudstack/api/command/user/account/AddAccountToProjectCmd.java", "diffHunk": "@@ -72,6 +87,21 @@ public String getEmail() {\n         return email;\n     }\n \n+    public Long getProjectRoleId() {\n+        return projectRoleId;\n+    }\n+\n+    public ProjectAccount.Role getRoleType() {\n+        if (roleType != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "984502b84b9c438c3695dc6f4ce57f3616a59922"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1ODE1MA==", "bodyText": "done", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451258150", "createdAt": "2020-07-08T03:16:16Z", "author": {"login": "Pearl1594"}, "path": "api/src/main/java/org/apache/cloudstack/api/command/user/account/AddAccountToProjectCmd.java", "diffHunk": "@@ -72,6 +87,21 @@ public String getEmail() {\n         return email;\n     }\n \n+    public Long getProjectRoleId() {\n+        return projectRoleId;\n+    }\n+\n+    public ProjectAccount.Role getRoleType() {\n+        if (roleType != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1NDYyMw=="}, "originalCommit": {"oid": "984502b84b9c438c3695dc6f4ce57f3616a59922"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjgwMTYyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/cloudstack/api/command/user/account/AddUserToProjectCmd.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMTozMDoyMlrOGuQT9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMzoxNjoyMlrOGuWnOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1NDkzNA==", "bodyText": "Same as above", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451154934", "createdAt": "2020-07-07T21:30:22Z", "author": {"login": "nvazquez"}, "path": "api/src/main/java/org/apache/cloudstack/api/command/user/account/AddUserToProjectCmd.java", "diffHunk": "@@ -0,0 +1,154 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.api.command.user.account;\n+\n+import org.apache.cloudstack.acl.RoleType;\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiArgValidator;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseAsyncCmd;\n+import org.apache.cloudstack.api.BaseCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.ProjectResponse;\n+import org.apache.cloudstack.api.response.ProjectRoleResponse;\n+import org.apache.cloudstack.api.response.SuccessResponse;\n+import org.apache.cloudstack.api.response.UserResponse;\n+import org.apache.cloudstack.context.CallContext;\n+import org.apache.commons.lang3.EnumUtils;\n+\n+import com.cloud.event.EventTypes;\n+import com.cloud.exception.InvalidParameterValueException;\n+import com.cloud.projects.ProjectAccount;\n+\n+@APICommand(name = AddUserToProjectCmd.APINAME, description = \"Adds user to a project\", responseObject = SuccessResponse.class, since = \"4.14\",\n+        requestHasSensitiveInfo = false, responseHasSensitiveInfo = false, authorized = {RoleType.Admin, RoleType.DomainAdmin, RoleType.ResourceAdmin, RoleType.User})\n+public class AddUserToProjectCmd extends BaseAsyncCmd {\n+    public static final String APINAME = \"addUserToProject\";\n+\n+    /////////////////////////////////////////////////////\n+    //////////////// API parameters /////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    @Parameter(name = ApiConstants.PROJECT_ID,\n+            type = BaseCmd.CommandType.UUID,\n+            entityType = ProjectResponse.class,\n+            required = true,\n+            description = \"ID of the project to add the user to\")\n+    private Long projectId;\n+\n+    @Parameter(name = ApiConstants.USER_ID, type = BaseCmd.CommandType.UUID, entityType = UserResponse.class,\n+            description = \"User UUID, required for adding account from external provisioning system\")\n+    private Long userId;\n+\n+    @Parameter(name = ApiConstants.EMAIL, type = CommandType.STRING, description = \"email ID of user to which invitation to the project is going to be sent\")\n+    private String email;\n+\n+    @Parameter(name = ApiConstants.PROJECT_ROLE_ID, type = BaseCmd.CommandType.UUID, entityType = ProjectRoleResponse.class,\n+            description = \"ID of the project role\", validations = {ApiArgValidator.PositiveNumber})\n+    private Long projectRoleId;\n+\n+    @Parameter(name = ApiConstants.ROLE_TYPE, type = BaseCmd.CommandType.STRING,\n+            description = \"Project role type to be assigned to the user - Admin/Regular\")\n+    private String roleType;\n+\n+    /////////////////////////////////////////////////////\n+    /////////////////// Accessors ///////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    public Long getProjectId() {\n+        return projectId;\n+    }\n+\n+    public Long getUserId() {\n+        return userId;\n+    }\n+\n+    public String getEmail() { return email; }\n+\n+    public Long getProjectRoleId() {\n+        return projectRoleId;\n+    }\n+\n+    public ProjectAccount.Role getRoleType() {\n+        if (roleType != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "984502b84b9c438c3695dc6f4ce57f3616a59922"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1ODE3MA==", "bodyText": "done", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451258170", "createdAt": "2020-07-08T03:16:22Z", "author": {"login": "Pearl1594"}, "path": "api/src/main/java/org/apache/cloudstack/api/command/user/account/AddUserToProjectCmd.java", "diffHunk": "@@ -0,0 +1,154 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.api.command.user.account;\n+\n+import org.apache.cloudstack.acl.RoleType;\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiArgValidator;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseAsyncCmd;\n+import org.apache.cloudstack.api.BaseCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.ProjectResponse;\n+import org.apache.cloudstack.api.response.ProjectRoleResponse;\n+import org.apache.cloudstack.api.response.SuccessResponse;\n+import org.apache.cloudstack.api.response.UserResponse;\n+import org.apache.cloudstack.context.CallContext;\n+import org.apache.commons.lang3.EnumUtils;\n+\n+import com.cloud.event.EventTypes;\n+import com.cloud.exception.InvalidParameterValueException;\n+import com.cloud.projects.ProjectAccount;\n+\n+@APICommand(name = AddUserToProjectCmd.APINAME, description = \"Adds user to a project\", responseObject = SuccessResponse.class, since = \"4.14\",\n+        requestHasSensitiveInfo = false, responseHasSensitiveInfo = false, authorized = {RoleType.Admin, RoleType.DomainAdmin, RoleType.ResourceAdmin, RoleType.User})\n+public class AddUserToProjectCmd extends BaseAsyncCmd {\n+    public static final String APINAME = \"addUserToProject\";\n+\n+    /////////////////////////////////////////////////////\n+    //////////////// API parameters /////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    @Parameter(name = ApiConstants.PROJECT_ID,\n+            type = BaseCmd.CommandType.UUID,\n+            entityType = ProjectResponse.class,\n+            required = true,\n+            description = \"ID of the project to add the user to\")\n+    private Long projectId;\n+\n+    @Parameter(name = ApiConstants.USER_ID, type = BaseCmd.CommandType.UUID, entityType = UserResponse.class,\n+            description = \"User UUID, required for adding account from external provisioning system\")\n+    private Long userId;\n+\n+    @Parameter(name = ApiConstants.EMAIL, type = CommandType.STRING, description = \"email ID of user to which invitation to the project is going to be sent\")\n+    private String email;\n+\n+    @Parameter(name = ApiConstants.PROJECT_ROLE_ID, type = BaseCmd.CommandType.UUID, entityType = ProjectRoleResponse.class,\n+            description = \"ID of the project role\", validations = {ApiArgValidator.PositiveNumber})\n+    private Long projectRoleId;\n+\n+    @Parameter(name = ApiConstants.ROLE_TYPE, type = BaseCmd.CommandType.STRING,\n+            description = \"Project role type to be assigned to the user - Admin/Regular\")\n+    private String roleType;\n+\n+    /////////////////////////////////////////////////////\n+    /////////////////// Accessors ///////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    public Long getProjectId() {\n+        return projectId;\n+    }\n+\n+    public Long getUserId() {\n+        return userId;\n+    }\n+\n+    public String getEmail() { return email; }\n+\n+    public Long getProjectRoleId() {\n+        return projectRoleId;\n+    }\n+\n+    public ProjectAccount.Role getRoleType() {\n+        if (roleType != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1NDkzNA=="}, "originalCommit": {"oid": "984502b84b9c438c3695dc6f4ce57f3616a59922"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjgwNjQzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/cloudstack/api/command/user/project/UpdateProjectCmd.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMTozMTo1N1rOGuQXAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMzoxNjoyN1rOGuWnVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1NTcxMg==", "bodyText": "Same", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451155712", "createdAt": "2020-07-07T21:31:57Z", "author": {"login": "nvazquez"}, "path": "api/src/main/java/org/apache/cloudstack/api/command/user/project/UpdateProjectCmd.java", "diffHunk": "@@ -68,11 +89,49 @@ public String getDisplayText() {\n         return displayText;\n     }\n \n+    public Long getUserId() {\n+        return userId;\n+    }\n+\n+    public Long getDomainId() {\n+        if (domainId != null) {\n+            return domainId;\n+        }\n+        return CallContext.current().getCallingAccount().getDomainId();\n+    }\n+\n+    public ProjectAccount.Role getRoleType(String role) {\n+        String type = role.substring(0, 1).toUpperCase() + role.substring(1).toLowerCase();\n+        if (!EnumUtils.isValidEnum(ProjectAccount.Role.class, type)) {\n+            throw new InvalidParameterValueException(\"Only Admin or Regular project role types are valid\");\n+        }\n+        return Enum.valueOf(ProjectAccount.Role.class, type);\n+    }\n+\n+    public ProjectAccount.Role getAccountRole() {\n+        if (roleType != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "984502b84b9c438c3695dc6f4ce57f3616a59922"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1ODE5OA==", "bodyText": "done", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451258198", "createdAt": "2020-07-08T03:16:27Z", "author": {"login": "Pearl1594"}, "path": "api/src/main/java/org/apache/cloudstack/api/command/user/project/UpdateProjectCmd.java", "diffHunk": "@@ -68,11 +89,49 @@ public String getDisplayText() {\n         return displayText;\n     }\n \n+    public Long getUserId() {\n+        return userId;\n+    }\n+\n+    public Long getDomainId() {\n+        if (domainId != null) {\n+            return domainId;\n+        }\n+        return CallContext.current().getCallingAccount().getDomainId();\n+    }\n+\n+    public ProjectAccount.Role getRoleType(String role) {\n+        String type = role.substring(0, 1).toUpperCase() + role.substring(1).toLowerCase();\n+        if (!EnumUtils.isValidEnum(ProjectAccount.Role.class, type)) {\n+            throw new InvalidParameterValueException(\"Only Admin or Regular project role types are valid\");\n+        }\n+        return Enum.valueOf(ProjectAccount.Role.class, type);\n+    }\n+\n+    public ProjectAccount.Role getAccountRole() {\n+        if (roleType != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1NTcxMg=="}, "originalCommit": {"oid": "984502b84b9c438c3695dc6f4ce57f3616a59922"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjgxMTU0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/cloudstack/api/command/user/project/UpdateProjectCmd.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMTozMzozOVrOGuQaMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMzoxNjozMlrOGuWnbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1NjUzMA==", "bodyText": "If the second condition is not missing any other condition, then parenthesis can be removed", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451156530", "createdAt": "2020-07-07T21:33:39Z", "author": {"login": "nvazquez"}, "path": "api/src/main/java/org/apache/cloudstack/api/command/user/project/UpdateProjectCmd.java", "diffHunk": "@@ -84,14 +143,38 @@ public long getEntityOwnerId() {\n         return _projectService.getProjectOwner(id).getId();\n     }\n \n+    @Override\n+    public List<Long> getEntityOwnerIds() {\n+        return _projectService.getProjectOwners(id);\n+    }\n+\n     /////////////////////////////////////////////////////\n     /////////////// API Implementation///////////////////\n     /////////////////////////////////////////////////////\n \n     @Override\n     public void execute() throws ResourceAllocationException {\n         CallContext.current().setEventDetails(\"Project id: \" + getId());\n-        Project project = _projectService.updateProject(getId(), getDisplayText(), getAccountName());\n+        if (getAccountName() != null && (getUserId() != null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "984502b84b9c438c3695dc6f4ce57f3616a59922"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1ODIyMg==", "bodyText": "done", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451258222", "createdAt": "2020-07-08T03:16:32Z", "author": {"login": "Pearl1594"}, "path": "api/src/main/java/org/apache/cloudstack/api/command/user/project/UpdateProjectCmd.java", "diffHunk": "@@ -84,14 +143,38 @@ public long getEntityOwnerId() {\n         return _projectService.getProjectOwner(id).getId();\n     }\n \n+    @Override\n+    public List<Long> getEntityOwnerIds() {\n+        return _projectService.getProjectOwners(id);\n+    }\n+\n     /////////////////////////////////////////////////////\n     /////////////// API Implementation///////////////////\n     /////////////////////////////////////////////////////\n \n     @Override\n     public void execute() throws ResourceAllocationException {\n         CallContext.current().setEventDetails(\"Project id: \" + getId());\n-        Project project = _projectService.updateProject(getId(), getDisplayText(), getAccountName());\n+        if (getAccountName() != null && (getUserId() != null)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1NjUzMA=="}, "originalCommit": {"oid": "984502b84b9c438c3695dc6f4ce57f3616a59922"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjg2MTUwOnYy", "diffSide": "RIGHT", "path": "engine/schema/src/main/java/org/apache/cloudstack/acl/ProjectRolePermissionVO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMTo1MDoxNlrOGuQ3xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMzoxNjozOVrOGuWnkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE2NDEwMg==", "bodyText": "Please consider keeping the method's bodies on new lines", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451164102", "createdAt": "2020-07-07T21:50:16Z", "author": {"login": "nvazquez"}, "path": "engine/schema/src/main/java/org/apache/cloudstack/acl/ProjectRolePermissionVO.java", "diffHunk": "@@ -0,0 +1,66 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.acl;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"project_role_permissions\")\n+public class ProjectRolePermissionVO extends RolePermissionBaseVO implements ProjectRolePermission {\n+\n+    @Column(name = \"project_id\")\n+    private long projectId;\n+\n+    @Column(name = \"project_role_id\")\n+    private long projectRoleId;\n+\n+    @Column(name = \"sort_order\")\n+    private long sortOrder = 0;\n+\n+    public ProjectRolePermissionVO() { super(); }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "984502b84b9c438c3695dc6f4ce57f3616a59922"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1ODI1Nw==", "bodyText": "done", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451258257", "createdAt": "2020-07-08T03:16:39Z", "author": {"login": "Pearl1594"}, "path": "engine/schema/src/main/java/org/apache/cloudstack/acl/ProjectRolePermissionVO.java", "diffHunk": "@@ -0,0 +1,66 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.acl;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"project_role_permissions\")\n+public class ProjectRolePermissionVO extends RolePermissionBaseVO implements ProjectRolePermission {\n+\n+    @Column(name = \"project_id\")\n+    private long projectId;\n+\n+    @Column(name = \"project_role_id\")\n+    private long projectRoleId;\n+\n+    @Column(name = \"sort_order\")\n+    private long sortOrder = 0;\n+\n+    public ProjectRolePermissionVO() { super(); }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE2NDEwMg=="}, "originalCommit": {"oid": "984502b84b9c438c3695dc6f4ce57f3616a59922"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjkyMDYzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/cloudstack/acl/ProjectRoleManagerImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjoxMjoxNlrOGuRbeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzo1MDowMFrOGvSDmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3MzI0MQ==", "bodyText": "Why is this required after deletion?", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451173241", "createdAt": "2020-07-07T22:12:16Z", "author": {"login": "nvazquez"}, "path": "server/src/main/java/org/apache/cloudstack/acl/ProjectRoleManagerImpl.java", "diffHunk": "@@ -0,0 +1,308 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.acl;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.cloudstack.acl.dao.ProjectRoleDao;\n+import org.apache.cloudstack.acl.dao.ProjectRolePermissionsDao;\n+import org.apache.cloudstack.acl.RolePermissionEntity.Permission;\n+import org.apache.cloudstack.api.command.admin.acl.project.CreateProjectRoleCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.CreateProjectRolePermissionCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.DeleteProjectRoleCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.DeleteProjectRolePermissionCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.ListProjectRolePermissionsCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.ListProjectRolesCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.UpdateProjectRoleCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.UpdateProjectRolePermissionCmd;\n+import org.apache.cloudstack.context.CallContext;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.log4j.Logger;\n+\n+import com.cloud.event.ActionEvent;\n+import com.cloud.event.EventTypes;\n+import com.cloud.exception.PermissionDeniedException;\n+import com.cloud.projects.Project;\n+import com.cloud.projects.ProjectAccount;\n+import com.cloud.projects.dao.ProjectAccountDao;\n+import com.cloud.projects.dao.ProjectDao;\n+import com.cloud.user.Account;\n+import com.cloud.user.User;\n+import com.cloud.user.dao.AccountDao;\n+import com.cloud.utils.ListUtils;\n+import com.cloud.utils.component.ManagerBase;\n+import com.cloud.utils.component.PluggableService;\n+import com.cloud.utils.db.Transaction;\n+import com.cloud.utils.db.TransactionCallback;\n+import com.cloud.utils.db.TransactionStatus;\n+import com.cloud.utils.exception.CloudRuntimeException;\n+import com.google.common.base.Strings;\n+\n+public class ProjectRoleManagerImpl extends ManagerBase implements ProjectRoleService, PluggableService {\n+    @Inject\n+    ProjectAccountDao projAccDao;\n+    @Inject\n+    ProjectRoleDao projRoleDao;\n+    @Inject\n+    ProjectDao projectDao;\n+    @Inject\n+    AccountDao accountDao;\n+    @Inject\n+    ProjectRolePermissionsDao projRolePermissionsDao;\n+\n+    private static final Logger LOGGER = Logger.getLogger(ProjectRoleManagerImpl.class);\n+\n+    private Project validateProjectId(Long projectId) {\n+        Project project = projectDao.findById(projectId);\n+        if (project == null) {\n+            throw new CloudRuntimeException(\"Invalid project id provided\");\n+        }\n+        return project;\n+    }\n+\n+    private void checkAccess(Long projectId) {\n+        Project project = validateProjectId(projectId);\n+        CallContext.current().setProject(project);\n+\n+        if (!isEnabled()) {\n+            throw new PermissionDeniedException(\"Dynamic api checker is not enabled, aborting role operation\");\n+        }\n+\n+        User user = getCurrentUser();\n+        Account callerAcc = accountDao.findById(user.getAccountId());\n+\n+        if (callerAcc == null || callerAcc.getRoleId() == null) {\n+            throw new PermissionDeniedException(\"Restricted API called by an invalid user account\");\n+        }\n+\n+        ProjectAccount projectAccount = projAccDao.findByProjectIdUserId(projectId, callerAcc.getAccountId(), user.getId());\n+        if (projectAccount == null) {\n+            projectAccount = projAccDao.findByProjectIdAccountId(projectId, callerAcc.getAccountId());\n+            if (projectAccount == null) {\n+                throw new PermissionDeniedException(\"User/Account not part of project\");\n+            }\n+        }\n+        if (ProjectAccount.Role.Admin != projectAccount.getAccountRole()) {\n+            throw new PermissionDeniedException(\"User unauthorized to perform operation in the project\");\n+        }\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_CREATE, eventDescription = \"creating Project Role\")\n+    public ProjectRole createProjectRole(Long projectId, String name, String description) {\n+        checkAccess(projectId);\n+        return Transaction.execute(new TransactionCallback<ProjectRoleVO>() {\n+            @Override\n+            public ProjectRoleVO doInTransaction(TransactionStatus status) {\n+                return projRoleDao.persist(new ProjectRoleVO(name, description, projectId));\n+            }\n+        });\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_UPDATE, eventDescription = \"updating Project Role\")\n+    public ProjectRole updateProjectRole(ProjectRole role, Long projectId, String name, String description) {\n+        checkAccess(projectId);\n+        ProjectRoleVO projectRoleVO = (ProjectRoleVO) role;\n+        if (!Strings.isNullOrEmpty(name)) {\n+            projectRoleVO.setName(name);\n+        }\n+        if (!Strings.isNullOrEmpty(description)) {\n+            projectRoleVO.setDescription(description);\n+        }\n+        projRoleDao.update(role.getId(), projectRoleVO);\n+        return projectRoleVO;\n+    }\n+\n+    @Override\n+    public boolean isEnabled() {\n+        return RoleService.EnableDynamicApiChecker.value();\n+    }\n+\n+    @Override\n+    public ProjectRole findProjectRole(Long roleId, Long projectId) {\n+        if (projectId == null || projectId < 1L || projectDao.findById(projectId) == null) {\n+            LOGGER.warn(\"Invalid project ID provided\");\n+            return null;\n+        }\n+\n+        if (roleId != null && roleId < 1L) {\n+            LOGGER.warn(String.format(\"Project Role ID is invalid [%s]\", roleId));\n+            return null;\n+        }\n+\n+        ProjectRoleVO role = projRoleDao.findById(roleId);\n+        if (role == null) {\n+            LOGGER.warn(String.format(\"Project Role not found [id=%s]\", roleId));\n+            return null;\n+        }\n+        if (!(role.getProjectId().equals(projectId))) {\n+            LOGGER.warn(String.format(\"Project role : %s doesn't belong to the project\" + role.getName()));\n+            return null;\n+        }\n+        return role;\n+    }\n+\n+    @Override\n+    public List<ProjectRole> findProjectRoles(Long projectId) {\n+        if (projectId == null || projectId < 1L || projectDao.findById(projectId) == null) {\n+            LOGGER.warn(\"Invalid project ID provided\");\n+            return null;\n+        }\n+        return ListUtils.toListOfInterface(projRoleDao.findAllRoles(projectId));\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_PERMISSION_CREATE, eventDescription = \"Creating Project Role Permission\")\n+    public ProjectRolePermission createProjectRolePermission(CreateProjectRolePermissionCmd cmd) {\n+        Long projectId = cmd.getProjectId();\n+        Long projectRoleId = cmd.getProjectRoleId();\n+        Rule rule = cmd.getRule();\n+        Permission permission = cmd.getPermission();\n+        String description = cmd.getDescription();\n+        checkAccess(projectId);\n+        return Transaction.execute(new TransactionCallback<ProjectRolePermissionVO>() {\n+            @Override\n+            public ProjectRolePermissionVO doInTransaction(TransactionStatus status) {\n+                try {\n+                    return projRolePermissionsDao.persist(new ProjectRolePermissionVO(projectId, projectRoleId, rule.toString(), permission, description));\n+                } catch (Exception e) {\n+                    throw new CloudRuntimeException(\"Project role permission for \" + rule.toString()+ \" seems to already exist.\");\n+                }\n+            }\n+        });\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_PERMISSION_UPDATE, eventDescription = \"updating Project Role Permission order\")\n+    public boolean updateProjectRolePermission(Long projectId, ProjectRole projectRole, List<ProjectRolePermission> rolePermissionsOrder) {\n+        checkAccess(projectId);\n+        return projectRole != null && rolePermissionsOrder != null && projRolePermissionsDao.update(projectRole, projectId, rolePermissionsOrder);\n+\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_PERMISSION_UPDATE, eventDescription = \"updating Project Role Permission\")\n+    public boolean updateProjectRolePermission(Long projectId, ProjectRole projectRole, ProjectRolePermission projectRolePermission, Permission newPermission) {\n+        checkAccess(projectId);\n+        return projectRole != null && projRolePermissionsDao.update(projectRole, projectRolePermission, newPermission);\n+    }\n+\n+    @Override\n+    public ProjectRolePermission findProjectRolePermission(Long projRolePermissionId) {\n+        if (projRolePermissionId == null) {\n+            return null;\n+        }\n+        return projRolePermissionsDao.findById(projRolePermissionId);\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_PERMISSION_DELETE, eventDescription = \"deleting Project Role Permission\")\n+    public boolean deleteProjectRolePermission(ProjectRolePermission projectRolePermission) {\n+        checkAccess(projectRolePermission.getProjectId());\n+        return projRolePermissionsDao.remove(projectRolePermission.getId());\n+    }\n+\n+    @Override\n+    public List<ProjectRolePermission> findAllProjectRolePermissions(Long projectId, Long projectRoleId) {\n+        List<? extends ProjectRolePermission> permissions = projRolePermissionsDao.findAllByRoleIdSorted(projectRoleId, projectId);\n+        if (permissions != null) {\n+            return new ArrayList<>(permissions);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public List<ProjectRole> findProjectRolesByName(Long projectId, String roleName) {\n+        List<? extends ProjectRole> roles = null;\n+        if (StringUtils.isNotBlank(roleName)) {\n+            roles = projRoleDao.findByName(roleName, projectId);\n+        }\n+        return ListUtils.toListOfInterface(roles);\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_DELETE, eventDescription = \"deleting Project Role\")\n+    public boolean deleteProjectRole(ProjectRole role, Long projectId) {\n+        checkAccess(projectId);\n+        if (role == null) {\n+            return false;\n+        }\n+\n+        Long roleProjectId = role.getProjectId();\n+        if (role.getProjectId() != null && !roleProjectId.equals(projectId)) {\n+            throw new PermissionDeniedException(\"Not authorized to delete the given project role\");\n+        }\n+\n+        List<? extends ProjectAccount> users = projAccDao.listUsersOrAccountsByRole(role.getId());\n+        if (users != null && users.size() != 0) {\n+            throw new PermissionDeniedException(\"Found users that have the project role in use, cannot delete the Project Role\");\n+        }\n+        return Transaction.execute(new TransactionCallback<Boolean>() {\n+            @Override\n+            public Boolean doInTransaction(TransactionStatus status) {\n+                List<? extends ProjectRolePermission> rolePermissions = projRolePermissionsDao.findAllByRoleIdSorted(role.getId(), projectId);\n+                if (rolePermissions != null && !rolePermissions.isEmpty()) {\n+                    for (ProjectRolePermission rolePermission : rolePermissions) {\n+                        projRolePermissionsDao.remove(rolePermission.getId());\n+                    }\n+                }\n+                if (projRoleDao.remove(role.getId())) {\n+                    ProjectRoleVO projRoleVO = projRoleDao.findByIdIncludingRemoved(role.getId());\n+                    projRoleVO.setName(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "984502b84b9c438c3695dc6f4ce57f3616a59922"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1ODQ0Nw==", "bodyText": "Only to clear the name of the role from the DB once its been removed. May not be required, but followed what was done for Roles", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451258447", "createdAt": "2020-07-08T03:17:23Z", "author": {"login": "Pearl1594"}, "path": "server/src/main/java/org/apache/cloudstack/acl/ProjectRoleManagerImpl.java", "diffHunk": "@@ -0,0 +1,308 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.acl;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.cloudstack.acl.dao.ProjectRoleDao;\n+import org.apache.cloudstack.acl.dao.ProjectRolePermissionsDao;\n+import org.apache.cloudstack.acl.RolePermissionEntity.Permission;\n+import org.apache.cloudstack.api.command.admin.acl.project.CreateProjectRoleCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.CreateProjectRolePermissionCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.DeleteProjectRoleCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.DeleteProjectRolePermissionCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.ListProjectRolePermissionsCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.ListProjectRolesCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.UpdateProjectRoleCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.UpdateProjectRolePermissionCmd;\n+import org.apache.cloudstack.context.CallContext;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.log4j.Logger;\n+\n+import com.cloud.event.ActionEvent;\n+import com.cloud.event.EventTypes;\n+import com.cloud.exception.PermissionDeniedException;\n+import com.cloud.projects.Project;\n+import com.cloud.projects.ProjectAccount;\n+import com.cloud.projects.dao.ProjectAccountDao;\n+import com.cloud.projects.dao.ProjectDao;\n+import com.cloud.user.Account;\n+import com.cloud.user.User;\n+import com.cloud.user.dao.AccountDao;\n+import com.cloud.utils.ListUtils;\n+import com.cloud.utils.component.ManagerBase;\n+import com.cloud.utils.component.PluggableService;\n+import com.cloud.utils.db.Transaction;\n+import com.cloud.utils.db.TransactionCallback;\n+import com.cloud.utils.db.TransactionStatus;\n+import com.cloud.utils.exception.CloudRuntimeException;\n+import com.google.common.base.Strings;\n+\n+public class ProjectRoleManagerImpl extends ManagerBase implements ProjectRoleService, PluggableService {\n+    @Inject\n+    ProjectAccountDao projAccDao;\n+    @Inject\n+    ProjectRoleDao projRoleDao;\n+    @Inject\n+    ProjectDao projectDao;\n+    @Inject\n+    AccountDao accountDao;\n+    @Inject\n+    ProjectRolePermissionsDao projRolePermissionsDao;\n+\n+    private static final Logger LOGGER = Logger.getLogger(ProjectRoleManagerImpl.class);\n+\n+    private Project validateProjectId(Long projectId) {\n+        Project project = projectDao.findById(projectId);\n+        if (project == null) {\n+            throw new CloudRuntimeException(\"Invalid project id provided\");\n+        }\n+        return project;\n+    }\n+\n+    private void checkAccess(Long projectId) {\n+        Project project = validateProjectId(projectId);\n+        CallContext.current().setProject(project);\n+\n+        if (!isEnabled()) {\n+            throw new PermissionDeniedException(\"Dynamic api checker is not enabled, aborting role operation\");\n+        }\n+\n+        User user = getCurrentUser();\n+        Account callerAcc = accountDao.findById(user.getAccountId());\n+\n+        if (callerAcc == null || callerAcc.getRoleId() == null) {\n+            throw new PermissionDeniedException(\"Restricted API called by an invalid user account\");\n+        }\n+\n+        ProjectAccount projectAccount = projAccDao.findByProjectIdUserId(projectId, callerAcc.getAccountId(), user.getId());\n+        if (projectAccount == null) {\n+            projectAccount = projAccDao.findByProjectIdAccountId(projectId, callerAcc.getAccountId());\n+            if (projectAccount == null) {\n+                throw new PermissionDeniedException(\"User/Account not part of project\");\n+            }\n+        }\n+        if (ProjectAccount.Role.Admin != projectAccount.getAccountRole()) {\n+            throw new PermissionDeniedException(\"User unauthorized to perform operation in the project\");\n+        }\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_CREATE, eventDescription = \"creating Project Role\")\n+    public ProjectRole createProjectRole(Long projectId, String name, String description) {\n+        checkAccess(projectId);\n+        return Transaction.execute(new TransactionCallback<ProjectRoleVO>() {\n+            @Override\n+            public ProjectRoleVO doInTransaction(TransactionStatus status) {\n+                return projRoleDao.persist(new ProjectRoleVO(name, description, projectId));\n+            }\n+        });\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_UPDATE, eventDescription = \"updating Project Role\")\n+    public ProjectRole updateProjectRole(ProjectRole role, Long projectId, String name, String description) {\n+        checkAccess(projectId);\n+        ProjectRoleVO projectRoleVO = (ProjectRoleVO) role;\n+        if (!Strings.isNullOrEmpty(name)) {\n+            projectRoleVO.setName(name);\n+        }\n+        if (!Strings.isNullOrEmpty(description)) {\n+            projectRoleVO.setDescription(description);\n+        }\n+        projRoleDao.update(role.getId(), projectRoleVO);\n+        return projectRoleVO;\n+    }\n+\n+    @Override\n+    public boolean isEnabled() {\n+        return RoleService.EnableDynamicApiChecker.value();\n+    }\n+\n+    @Override\n+    public ProjectRole findProjectRole(Long roleId, Long projectId) {\n+        if (projectId == null || projectId < 1L || projectDao.findById(projectId) == null) {\n+            LOGGER.warn(\"Invalid project ID provided\");\n+            return null;\n+        }\n+\n+        if (roleId != null && roleId < 1L) {\n+            LOGGER.warn(String.format(\"Project Role ID is invalid [%s]\", roleId));\n+            return null;\n+        }\n+\n+        ProjectRoleVO role = projRoleDao.findById(roleId);\n+        if (role == null) {\n+            LOGGER.warn(String.format(\"Project Role not found [id=%s]\", roleId));\n+            return null;\n+        }\n+        if (!(role.getProjectId().equals(projectId))) {\n+            LOGGER.warn(String.format(\"Project role : %s doesn't belong to the project\" + role.getName()));\n+            return null;\n+        }\n+        return role;\n+    }\n+\n+    @Override\n+    public List<ProjectRole> findProjectRoles(Long projectId) {\n+        if (projectId == null || projectId < 1L || projectDao.findById(projectId) == null) {\n+            LOGGER.warn(\"Invalid project ID provided\");\n+            return null;\n+        }\n+        return ListUtils.toListOfInterface(projRoleDao.findAllRoles(projectId));\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_PERMISSION_CREATE, eventDescription = \"Creating Project Role Permission\")\n+    public ProjectRolePermission createProjectRolePermission(CreateProjectRolePermissionCmd cmd) {\n+        Long projectId = cmd.getProjectId();\n+        Long projectRoleId = cmd.getProjectRoleId();\n+        Rule rule = cmd.getRule();\n+        Permission permission = cmd.getPermission();\n+        String description = cmd.getDescription();\n+        checkAccess(projectId);\n+        return Transaction.execute(new TransactionCallback<ProjectRolePermissionVO>() {\n+            @Override\n+            public ProjectRolePermissionVO doInTransaction(TransactionStatus status) {\n+                try {\n+                    return projRolePermissionsDao.persist(new ProjectRolePermissionVO(projectId, projectRoleId, rule.toString(), permission, description));\n+                } catch (Exception e) {\n+                    throw new CloudRuntimeException(\"Project role permission for \" + rule.toString()+ \" seems to already exist.\");\n+                }\n+            }\n+        });\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_PERMISSION_UPDATE, eventDescription = \"updating Project Role Permission order\")\n+    public boolean updateProjectRolePermission(Long projectId, ProjectRole projectRole, List<ProjectRolePermission> rolePermissionsOrder) {\n+        checkAccess(projectId);\n+        return projectRole != null && rolePermissionsOrder != null && projRolePermissionsDao.update(projectRole, projectId, rolePermissionsOrder);\n+\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_PERMISSION_UPDATE, eventDescription = \"updating Project Role Permission\")\n+    public boolean updateProjectRolePermission(Long projectId, ProjectRole projectRole, ProjectRolePermission projectRolePermission, Permission newPermission) {\n+        checkAccess(projectId);\n+        return projectRole != null && projRolePermissionsDao.update(projectRole, projectRolePermission, newPermission);\n+    }\n+\n+    @Override\n+    public ProjectRolePermission findProjectRolePermission(Long projRolePermissionId) {\n+        if (projRolePermissionId == null) {\n+            return null;\n+        }\n+        return projRolePermissionsDao.findById(projRolePermissionId);\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_PERMISSION_DELETE, eventDescription = \"deleting Project Role Permission\")\n+    public boolean deleteProjectRolePermission(ProjectRolePermission projectRolePermission) {\n+        checkAccess(projectRolePermission.getProjectId());\n+        return projRolePermissionsDao.remove(projectRolePermission.getId());\n+    }\n+\n+    @Override\n+    public List<ProjectRolePermission> findAllProjectRolePermissions(Long projectId, Long projectRoleId) {\n+        List<? extends ProjectRolePermission> permissions = projRolePermissionsDao.findAllByRoleIdSorted(projectRoleId, projectId);\n+        if (permissions != null) {\n+            return new ArrayList<>(permissions);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public List<ProjectRole> findProjectRolesByName(Long projectId, String roleName) {\n+        List<? extends ProjectRole> roles = null;\n+        if (StringUtils.isNotBlank(roleName)) {\n+            roles = projRoleDao.findByName(roleName, projectId);\n+        }\n+        return ListUtils.toListOfInterface(roles);\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_DELETE, eventDescription = \"deleting Project Role\")\n+    public boolean deleteProjectRole(ProjectRole role, Long projectId) {\n+        checkAccess(projectId);\n+        if (role == null) {\n+            return false;\n+        }\n+\n+        Long roleProjectId = role.getProjectId();\n+        if (role.getProjectId() != null && !roleProjectId.equals(projectId)) {\n+            throw new PermissionDeniedException(\"Not authorized to delete the given project role\");\n+        }\n+\n+        List<? extends ProjectAccount> users = projAccDao.listUsersOrAccountsByRole(role.getId());\n+        if (users != null && users.size() != 0) {\n+            throw new PermissionDeniedException(\"Found users that have the project role in use, cannot delete the Project Role\");\n+        }\n+        return Transaction.execute(new TransactionCallback<Boolean>() {\n+            @Override\n+            public Boolean doInTransaction(TransactionStatus status) {\n+                List<? extends ProjectRolePermission> rolePermissions = projRolePermissionsDao.findAllByRoleIdSorted(role.getId(), projectId);\n+                if (rolePermissions != null && !rolePermissions.isEmpty()) {\n+                    for (ProjectRolePermission rolePermission : rolePermissions) {\n+                        projRolePermissionsDao.remove(rolePermission.getId());\n+                    }\n+                }\n+                if (projRoleDao.remove(role.getId())) {\n+                    ProjectRoleVO projRoleVO = projRoleDao.findByIdIncludingRemoved(role.getId());\n+                    projRoleVO.setName(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3MzI0MQ=="}, "originalCommit": {"oid": "984502b84b9c438c3695dc6f4ce57f3616a59922"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIzMjA4OA==", "bodyText": "I'm ok with leaving the update for consistency", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r452232088", "createdAt": "2020-07-09T13:50:00Z", "author": {"login": "nvazquez"}, "path": "server/src/main/java/org/apache/cloudstack/acl/ProjectRoleManagerImpl.java", "diffHunk": "@@ -0,0 +1,308 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.acl;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.cloudstack.acl.dao.ProjectRoleDao;\n+import org.apache.cloudstack.acl.dao.ProjectRolePermissionsDao;\n+import org.apache.cloudstack.acl.RolePermissionEntity.Permission;\n+import org.apache.cloudstack.api.command.admin.acl.project.CreateProjectRoleCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.CreateProjectRolePermissionCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.DeleteProjectRoleCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.DeleteProjectRolePermissionCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.ListProjectRolePermissionsCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.ListProjectRolesCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.UpdateProjectRoleCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.UpdateProjectRolePermissionCmd;\n+import org.apache.cloudstack.context.CallContext;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.log4j.Logger;\n+\n+import com.cloud.event.ActionEvent;\n+import com.cloud.event.EventTypes;\n+import com.cloud.exception.PermissionDeniedException;\n+import com.cloud.projects.Project;\n+import com.cloud.projects.ProjectAccount;\n+import com.cloud.projects.dao.ProjectAccountDao;\n+import com.cloud.projects.dao.ProjectDao;\n+import com.cloud.user.Account;\n+import com.cloud.user.User;\n+import com.cloud.user.dao.AccountDao;\n+import com.cloud.utils.ListUtils;\n+import com.cloud.utils.component.ManagerBase;\n+import com.cloud.utils.component.PluggableService;\n+import com.cloud.utils.db.Transaction;\n+import com.cloud.utils.db.TransactionCallback;\n+import com.cloud.utils.db.TransactionStatus;\n+import com.cloud.utils.exception.CloudRuntimeException;\n+import com.google.common.base.Strings;\n+\n+public class ProjectRoleManagerImpl extends ManagerBase implements ProjectRoleService, PluggableService {\n+    @Inject\n+    ProjectAccountDao projAccDao;\n+    @Inject\n+    ProjectRoleDao projRoleDao;\n+    @Inject\n+    ProjectDao projectDao;\n+    @Inject\n+    AccountDao accountDao;\n+    @Inject\n+    ProjectRolePermissionsDao projRolePermissionsDao;\n+\n+    private static final Logger LOGGER = Logger.getLogger(ProjectRoleManagerImpl.class);\n+\n+    private Project validateProjectId(Long projectId) {\n+        Project project = projectDao.findById(projectId);\n+        if (project == null) {\n+            throw new CloudRuntimeException(\"Invalid project id provided\");\n+        }\n+        return project;\n+    }\n+\n+    private void checkAccess(Long projectId) {\n+        Project project = validateProjectId(projectId);\n+        CallContext.current().setProject(project);\n+\n+        if (!isEnabled()) {\n+            throw new PermissionDeniedException(\"Dynamic api checker is not enabled, aborting role operation\");\n+        }\n+\n+        User user = getCurrentUser();\n+        Account callerAcc = accountDao.findById(user.getAccountId());\n+\n+        if (callerAcc == null || callerAcc.getRoleId() == null) {\n+            throw new PermissionDeniedException(\"Restricted API called by an invalid user account\");\n+        }\n+\n+        ProjectAccount projectAccount = projAccDao.findByProjectIdUserId(projectId, callerAcc.getAccountId(), user.getId());\n+        if (projectAccount == null) {\n+            projectAccount = projAccDao.findByProjectIdAccountId(projectId, callerAcc.getAccountId());\n+            if (projectAccount == null) {\n+                throw new PermissionDeniedException(\"User/Account not part of project\");\n+            }\n+        }\n+        if (ProjectAccount.Role.Admin != projectAccount.getAccountRole()) {\n+            throw new PermissionDeniedException(\"User unauthorized to perform operation in the project\");\n+        }\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_CREATE, eventDescription = \"creating Project Role\")\n+    public ProjectRole createProjectRole(Long projectId, String name, String description) {\n+        checkAccess(projectId);\n+        return Transaction.execute(new TransactionCallback<ProjectRoleVO>() {\n+            @Override\n+            public ProjectRoleVO doInTransaction(TransactionStatus status) {\n+                return projRoleDao.persist(new ProjectRoleVO(name, description, projectId));\n+            }\n+        });\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_UPDATE, eventDescription = \"updating Project Role\")\n+    public ProjectRole updateProjectRole(ProjectRole role, Long projectId, String name, String description) {\n+        checkAccess(projectId);\n+        ProjectRoleVO projectRoleVO = (ProjectRoleVO) role;\n+        if (!Strings.isNullOrEmpty(name)) {\n+            projectRoleVO.setName(name);\n+        }\n+        if (!Strings.isNullOrEmpty(description)) {\n+            projectRoleVO.setDescription(description);\n+        }\n+        projRoleDao.update(role.getId(), projectRoleVO);\n+        return projectRoleVO;\n+    }\n+\n+    @Override\n+    public boolean isEnabled() {\n+        return RoleService.EnableDynamicApiChecker.value();\n+    }\n+\n+    @Override\n+    public ProjectRole findProjectRole(Long roleId, Long projectId) {\n+        if (projectId == null || projectId < 1L || projectDao.findById(projectId) == null) {\n+            LOGGER.warn(\"Invalid project ID provided\");\n+            return null;\n+        }\n+\n+        if (roleId != null && roleId < 1L) {\n+            LOGGER.warn(String.format(\"Project Role ID is invalid [%s]\", roleId));\n+            return null;\n+        }\n+\n+        ProjectRoleVO role = projRoleDao.findById(roleId);\n+        if (role == null) {\n+            LOGGER.warn(String.format(\"Project Role not found [id=%s]\", roleId));\n+            return null;\n+        }\n+        if (!(role.getProjectId().equals(projectId))) {\n+            LOGGER.warn(String.format(\"Project role : %s doesn't belong to the project\" + role.getName()));\n+            return null;\n+        }\n+        return role;\n+    }\n+\n+    @Override\n+    public List<ProjectRole> findProjectRoles(Long projectId) {\n+        if (projectId == null || projectId < 1L || projectDao.findById(projectId) == null) {\n+            LOGGER.warn(\"Invalid project ID provided\");\n+            return null;\n+        }\n+        return ListUtils.toListOfInterface(projRoleDao.findAllRoles(projectId));\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_PERMISSION_CREATE, eventDescription = \"Creating Project Role Permission\")\n+    public ProjectRolePermission createProjectRolePermission(CreateProjectRolePermissionCmd cmd) {\n+        Long projectId = cmd.getProjectId();\n+        Long projectRoleId = cmd.getProjectRoleId();\n+        Rule rule = cmd.getRule();\n+        Permission permission = cmd.getPermission();\n+        String description = cmd.getDescription();\n+        checkAccess(projectId);\n+        return Transaction.execute(new TransactionCallback<ProjectRolePermissionVO>() {\n+            @Override\n+            public ProjectRolePermissionVO doInTransaction(TransactionStatus status) {\n+                try {\n+                    return projRolePermissionsDao.persist(new ProjectRolePermissionVO(projectId, projectRoleId, rule.toString(), permission, description));\n+                } catch (Exception e) {\n+                    throw new CloudRuntimeException(\"Project role permission for \" + rule.toString()+ \" seems to already exist.\");\n+                }\n+            }\n+        });\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_PERMISSION_UPDATE, eventDescription = \"updating Project Role Permission order\")\n+    public boolean updateProjectRolePermission(Long projectId, ProjectRole projectRole, List<ProjectRolePermission> rolePermissionsOrder) {\n+        checkAccess(projectId);\n+        return projectRole != null && rolePermissionsOrder != null && projRolePermissionsDao.update(projectRole, projectId, rolePermissionsOrder);\n+\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_PERMISSION_UPDATE, eventDescription = \"updating Project Role Permission\")\n+    public boolean updateProjectRolePermission(Long projectId, ProjectRole projectRole, ProjectRolePermission projectRolePermission, Permission newPermission) {\n+        checkAccess(projectId);\n+        return projectRole != null && projRolePermissionsDao.update(projectRole, projectRolePermission, newPermission);\n+    }\n+\n+    @Override\n+    public ProjectRolePermission findProjectRolePermission(Long projRolePermissionId) {\n+        if (projRolePermissionId == null) {\n+            return null;\n+        }\n+        return projRolePermissionsDao.findById(projRolePermissionId);\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_PERMISSION_DELETE, eventDescription = \"deleting Project Role Permission\")\n+    public boolean deleteProjectRolePermission(ProjectRolePermission projectRolePermission) {\n+        checkAccess(projectRolePermission.getProjectId());\n+        return projRolePermissionsDao.remove(projectRolePermission.getId());\n+    }\n+\n+    @Override\n+    public List<ProjectRolePermission> findAllProjectRolePermissions(Long projectId, Long projectRoleId) {\n+        List<? extends ProjectRolePermission> permissions = projRolePermissionsDao.findAllByRoleIdSorted(projectRoleId, projectId);\n+        if (permissions != null) {\n+            return new ArrayList<>(permissions);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public List<ProjectRole> findProjectRolesByName(Long projectId, String roleName) {\n+        List<? extends ProjectRole> roles = null;\n+        if (StringUtils.isNotBlank(roleName)) {\n+            roles = projRoleDao.findByName(roleName, projectId);\n+        }\n+        return ListUtils.toListOfInterface(roles);\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_DELETE, eventDescription = \"deleting Project Role\")\n+    public boolean deleteProjectRole(ProjectRole role, Long projectId) {\n+        checkAccess(projectId);\n+        if (role == null) {\n+            return false;\n+        }\n+\n+        Long roleProjectId = role.getProjectId();\n+        if (role.getProjectId() != null && !roleProjectId.equals(projectId)) {\n+            throw new PermissionDeniedException(\"Not authorized to delete the given project role\");\n+        }\n+\n+        List<? extends ProjectAccount> users = projAccDao.listUsersOrAccountsByRole(role.getId());\n+        if (users != null && users.size() != 0) {\n+            throw new PermissionDeniedException(\"Found users that have the project role in use, cannot delete the Project Role\");\n+        }\n+        return Transaction.execute(new TransactionCallback<Boolean>() {\n+            @Override\n+            public Boolean doInTransaction(TransactionStatus status) {\n+                List<? extends ProjectRolePermission> rolePermissions = projRolePermissionsDao.findAllByRoleIdSorted(role.getId(), projectId);\n+                if (rolePermissions != null && !rolePermissions.isEmpty()) {\n+                    for (ProjectRolePermission rolePermission : rolePermissions) {\n+                        projRolePermissionsDao.remove(rolePermission.getId());\n+                    }\n+                }\n+                if (projRoleDao.remove(role.getId())) {\n+                    ProjectRoleVO projRoleVO = projRoleDao.findByIdIncludingRemoved(role.getId());\n+                    projRoleVO.setName(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3MzI0MQ=="}, "originalCommit": {"oid": "984502b84b9c438c3695dc6f4ce57f3616a59922"}, "originalPosition": 271}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzU0MDEzOnYy", "diffSide": "RIGHT", "path": "results.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDoxMjo0OFrOG-QUUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzowNzoyNFrOG-rCqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzMjI0MA==", "bodyText": "this file is missing a license. either add it to the ignore list or add a license.", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r467932240", "createdAt": "2020-08-10T14:12:48Z", "author": {"login": "DaanHoogland"}, "path": "results.xml", "diffHunk": "@@ -0,0 +1,3 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?><testsuite name=\"nosetests\" tests=\"3\" errors=\"0\" failures=\"0\" skip=\"0\"><testcase classname=\"integration.smoke.test_enable_role_based_users_in_projects.TestRoleBasedUsersInProjects\" name=\"test_add_account_to_project_with_project_role\" time=\"3.046\"></testcase><testcase classname=\"integration.smoke.test_enable_role_based_users_in_projects.TestRoleBasedUsersInProjects\" name=\"test_add_multiple_admins_in_project\" time=\"6.491\"><system-out><![CDATA[pid == 3a16742f-819b-4d44-89d9-1f4122602038\n+2\n+]]></system-out></testcase><testcase classname=\"integration.smoke.test_enable_role_based_users_in_projects.TestRoleBasedUsersInProjects\" name=\"test_add_user_to_project_with_project_role\" time=\"2.713\"></testcase></testsuite>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6235d343a3a850a8a3377953e09f0525fcbee105"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MDA4OA==", "bodyText": "I see this results.xml is changed now but still without license. I think it makes sense to either remove it from git or add it to the exclusion list for the rat, @Pearl1594 .", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r468370088", "createdAt": "2020-08-11T07:07:24Z", "author": {"login": "DaanHoogland"}, "path": "results.xml", "diffHunk": "@@ -0,0 +1,3 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?><testsuite name=\"nosetests\" tests=\"3\" errors=\"0\" failures=\"0\" skip=\"0\"><testcase classname=\"integration.smoke.test_enable_role_based_users_in_projects.TestRoleBasedUsersInProjects\" name=\"test_add_account_to_project_with_project_role\" time=\"3.046\"></testcase><testcase classname=\"integration.smoke.test_enable_role_based_users_in_projects.TestRoleBasedUsersInProjects\" name=\"test_add_multiple_admins_in_project\" time=\"6.491\"><system-out><![CDATA[pid == 3a16742f-819b-4d44-89d9-1f4122602038\n+2\n+]]></system-out></testcase><testcase classname=\"integration.smoke.test_enable_role_based_users_in_projects.TestRoleBasedUsersInProjects\" name=\"test_add_user_to_project_with_project_role\" time=\"2.713\"></testcase></testsuite>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzMjI0MA=="}, "originalCommit": {"oid": "6235d343a3a850a8a3377953e09f0525fcbee105"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3921, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}