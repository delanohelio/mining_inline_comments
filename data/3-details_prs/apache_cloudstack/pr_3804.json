{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMTIyMDEx", "number": 3804, "title": "Display capability info in listNetwork response", "bodyText": "Description\n\nDisplay some properties (eg RedundantRouter) in listNetworks response which are initializd in VirtualRouterElement.setCapabilities()\n\n\n\n\n\nTypes of changes\n\n\n Breaking change (fix or feature that would cause existing functionality to change)\n New feature (non-breaking change which adds functionality)\n Bug fix (non-breaking change which fixes an issue)\n Enhancement (improves an existing feature and functionality)\n Cleanup (Code refactoring and cleanup, that may add test cases)\n\nScreenshots (if appropriate):\nHow Has This Been Tested?\n\n\n\nlistNetworks response for StaticNat service before the change\n{\n          \"name\": \"StaticNat\"\n},\n\nlistNetworks response for StaticNat after the change\n{\n     \"capability\": [\n        {\n            \"canchooseservicecapability\": false,\n            \"name\": \"ElasticIp\",\n            \"value\": \"false\"\n         },\n         {\n           \"canchooseservicecapability\": false,\n           \"name\": \"AssociatePublicIP\",\n           \"value\": \"true\"\n         }\n       ],\n       \"name\": \"StaticNat\",\n       \"provider\": [\n          {\n            \"name\": \"VirtualRouter\"\n          }\n     ]\n },", "createdAt": "2020-01-13T13:37:48Z", "url": "https://github.com/apache/cloudstack/pull/3804", "merged": true, "mergeCommit": {"oid": "56ef349b0e49d00d21c63d2c2ef7bee6669e82a2"}, "closed": true, "closedAt": "2021-09-22T09:24:35Z", "author": {"login": "ravening"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHyT-AgFqTM2NDE0NjQ4MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABe-27ctAFqTc1NjAxMjc0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MTQ2NDgx", "url": "https://github.com/apache/cloudstack/pull/3804#pullrequestreview-364146481", "createdAt": "2020-02-25T13:40:32Z", "commit": {"oid": "af4ef9f5d70d7d9c3725b7524960e092ee7136e9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzo0MDozM1rOFuGZXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzo0MDozM1rOFuGZXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4MzYxNQ==", "bodyText": "@ravening the rest is ok for me, except this line.", "url": "https://github.com/apache/cloudstack/pull/3804#discussion_r383883615", "createdAt": "2020-02-25T13:40:33Z", "author": {"login": "weizhouapache"}, "path": "server/src/main/java/com/cloud/api/ApiResponseHelper.java", "diffHunk": "@@ -2187,13 +2188,75 @@ public NetworkResponse createNetworkResponse(ResponseView view, Network network)\n                         CapabilityResponse capabilityResponse = new CapabilityResponse();\n                         String capabilityValue = ser_cap_entries.getValue();\n                         capabilityResponse.setName(capability.getName());\n-                        capabilityResponse.setValue(capabilityValue);\n+                        if (Service.Lb == service && capability.getName().equals(Capability.SupportedLBIsolation.getName())) {\n+                            // capabilityResponse.setValue(networkOffering.getDedicatedLB() ? \"dedicated\" : \"shared\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af4ef9f5d70d7d9c3725b7524960e092ee7136e9"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af4ef9f5d70d7d9c3725b7524960e092ee7136e9", "author": {"user": {"login": "ravening", "name": "Rakesh"}}, "url": "https://github.com/apache/cloudstack/commit/af4ef9f5d70d7d9c3725b7524960e092ee7136e9", "committedDate": "2020-01-13T13:24:54Z", "message": "Display capability info in listNetwork response"}, "afterCommit": {"oid": "f6956f7e04baae40603fbd4c10be28a9594eed95", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/f6956f7e04baae40603fbd4c10be28a9594eed95", "committedDate": "2020-02-28T14:32:21Z", "message": "Minor fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f6956f7e04baae40603fbd4c10be28a9594eed95", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/f6956f7e04baae40603fbd4c10be28a9594eed95", "committedDate": "2020-02-28T14:32:21Z", "message": "Minor fix"}, "afterCommit": {"oid": "c8b58eea2f12b75f96de731d173ef8e573c408ee", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/c8b58eea2f12b75f96de731d173ef8e573c408ee", "committedDate": "2020-04-28T15:15:36Z", "message": "Minor fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI1OTg3OTQ4", "url": "https://github.com/apache/cloudstack/pull/3804#pullrequestreview-625987948", "createdAt": "2021-04-01T07:50:01Z", "commit": {"oid": "c8b58eea2f12b75f96de731d173ef8e573c408ee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY5Mzg3OTI1", "url": "https://github.com/apache/cloudstack/pull/3804#pullrequestreview-669387925", "createdAt": "2021-05-26T18:02:48Z", "commit": {"oid": "c8b58eea2f12b75f96de731d173ef8e573c408ee"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNlQxODowMjo0OFrOJiWwfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNlQxODowOTo0MFrOJiXGMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDAwNDIyMA==", "bodyText": "I think that it is possible to extract most of the \"duplicated\" lines by creating a method that returns a CapabilityResponse based on name, value, and canChoose.", "url": "https://github.com/apache/cloudstack/pull/3804#discussion_r640004220", "createdAt": "2021-05-26T18:02:48Z", "author": {"login": "GabrielBrascher"}, "path": "server/src/main/java/com/cloud/api/ApiResponseHelper.java", "diffHunk": "@@ -2213,13 +2214,75 @@ public NetworkResponse createNetworkResponse(ResponseView view, Network network)\n                         CapabilityResponse capabilityResponse = new CapabilityResponse();\n                         String capabilityValue = ser_cap_entries.getValue();\n                         capabilityResponse.setName(capability.getName());\n-                        capabilityResponse.setValue(capabilityValue);\n+                        if (Service.Lb == service && capability.getName().equals(Capability.SupportedLBIsolation.getName())) {\n+                             capabilityResponse.setValue(networkOffering.isDedicatedLB() ? \"dedicated\" : \"shared\");\n+                        } else {\n+                            capabilityResponse.setValue(capabilityValue);\n+                        }\n+                        if (capability.getName().equals(Capability.SupportedLBIsolation.getName()) || capability.getName().equals(Capability.SupportedSourceNatTypes.getName())\n+                                || capability.getName().equals(Capability.RedundantRouter.getName())) {\n+                            capabilityResponse.setCanChoose(true);\n+                        } else {\n+                            capabilityResponse.setCanChoose(false);\n+                        }\n                         capabilityResponse.setObjectName(\"capability\");\n                         capabilityResponses.add(capabilityResponse);\n                     }\n-                    serviceResponse.setCapabilities(capabilityResponses);\n                 }\n \n+                if (Service.SourceNat == service) {\n+                    // overwrite\n+                    capabilityResponses = new ArrayList<CapabilityResponse>();\n+                    CapabilityResponse sharedSourceNat = new CapabilityResponse();\n+                    sharedSourceNat.setName(Capability.SupportedSourceNatTypes.getName());\n+                    sharedSourceNat.setValue(networkOffering.isSharedSourceNat() ? \"perzone\" : \"peraccount\");\n+                    sharedSourceNat.setCanChoose(true);\n+                    capabilityResponses.add(sharedSourceNat);\n+\n+                    CapabilityResponse redundantRouter = new CapabilityResponse();\n+                    redundantRouter.setName(Capability.RedundantRouter.getName());\n+                    redundantRouter.setValue(networkOffering.isRedundantRouter() ? \"true\" : \"false\");\n+                    redundantRouter.setCanChoose(true);\n+                    capabilityResponses.add(redundantRouter);\n+\n+                } else if (service == Service.StaticNat) {\n+                    CapabilityResponse eIp = new CapabilityResponse();\n+                    eIp.setName(Capability.ElasticIp.getName());\n+                    eIp.setValue(networkOffering.isElasticIp() ? \"true\" : \"false\");\n+                    eIp.setCanChoose(false);\n+                    capabilityResponses.add(eIp);\n+\n+                    CapabilityResponse associatePublicIp = new CapabilityResponse();\n+                    associatePublicIp.setName(Capability.AssociatePublicIP.getName());\n+                    associatePublicIp.setValue(networkOffering.isAssociatePublicIP() ? \"true\" : \"false\");\n+                    associatePublicIp.setCanChoose(false);\n+                    capabilityResponses.add(associatePublicIp);\n+\n+                } else if (Service.Lb == service) {\n+                    CapabilityResponse eLb = new CapabilityResponse();\n+                    eLb.setName(Capability.ElasticLb.getName());\n+                    eLb.setValue(networkOffering.isElasticLb() ? \"true\" : \"false\");\n+                    eLb.setCanChoose(false);\n+                    capabilityResponses.add(eLb);\n+\n+                    CapabilityResponse inline = new CapabilityResponse();\n+                    inline.setName(Capability.InlineMode.getName());\n+                    inline.setValue(networkOffering.isInline() ? \"true\" : \"false\");\n+                    inline.setCanChoose(false);\n+                    capabilityResponses.add(inline);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b58eea2f12b75f96de731d173ef8e573c408ee"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDAwOTc3Nw==", "bodyText": "Maybe an alternative would be creating a variable in this class defining a Set of Strings that fit in this conditional.\nThis would look something similar to:\nprivate final Set<String> <insertNameHere> = new HashSet<>(Arrays.asList(Capability.SupportedLBIsolation.getName(),\n                                                                          Capability.SupportedSourceNatTypes.getName(),\n                                                                          Capability.RedundantRouter.getName()));\n...\n...\n...\n     if (<insertNameHere>.contains(capability.getName())) {\n          capabilityResponse.setCanChoose(true);\n     }\n...\n...", "url": "https://github.com/apache/cloudstack/pull/3804#discussion_r640009777", "createdAt": "2021-05-26T18:09:40Z", "author": {"login": "GabrielBrascher"}, "path": "server/src/main/java/com/cloud/api/ApiResponseHelper.java", "diffHunk": "@@ -2213,13 +2214,75 @@ public NetworkResponse createNetworkResponse(ResponseView view, Network network)\n                         CapabilityResponse capabilityResponse = new CapabilityResponse();\n                         String capabilityValue = ser_cap_entries.getValue();\n                         capabilityResponse.setName(capability.getName());\n-                        capabilityResponse.setValue(capabilityValue);\n+                        if (Service.Lb == service && capability.getName().equals(Capability.SupportedLBIsolation.getName())) {\n+                             capabilityResponse.setValue(networkOffering.isDedicatedLB() ? \"dedicated\" : \"shared\");\n+                        } else {\n+                            capabilityResponse.setValue(capabilityValue);\n+                        }\n+                        if (capability.getName().equals(Capability.SupportedLBIsolation.getName()) || capability.getName().equals(Capability.SupportedSourceNatTypes.getName())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b58eea2f12b75f96de731d173ef8e573c408ee"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "567be4bbd897983ca63061d5f99237fa53198618", "author": {"user": {"login": "ravening", "name": "Rakesh"}}, "url": "https://github.com/apache/cloudstack/commit/567be4bbd897983ca63061d5f99237fa53198618", "committedDate": "2021-08-18T12:44:54Z", "message": "Display capability info in listNetwork response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45015e6bfaae60b92b401bc6db7aab071bc6aacb", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/45015e6bfaae60b92b401bc6db7aab071bc6aacb", "committedDate": "2021-08-18T12:44:54Z", "message": "Minor fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0873630ec295d02a23550f8e8a075e0a37a9995f", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/0873630ec295d02a23550f8e8a075e0a37a9995f", "committedDate": "2021-08-18T13:28:15Z", "message": "code refactor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8b58eea2f12b75f96de731d173ef8e573c408ee", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/c8b58eea2f12b75f96de731d173ef8e573c408ee", "committedDate": "2020-04-28T15:15:36Z", "message": "Minor fix"}, "afterCommit": {"oid": "0873630ec295d02a23550f8e8a075e0a37a9995f", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/0873630ec295d02a23550f8e8a075e0a37a9995f", "committedDate": "2021-08-18T13:28:15Z", "message": "code refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQxNjc2NTAy", "url": "https://github.com/apache/cloudstack/pull/3804#pullrequestreview-741676502", "createdAt": "2021-08-30T13:54:17Z", "commit": {"oid": "0873630ec295d02a23550f8e8a075e0a37a9995f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "PRR_kwDOAJTq2M4tD9bF", "url": "https://github.com/apache/cloudstack/pull/3804#pullrequestreview-756012741", "createdAt": "2021-09-16T08:31:30Z", "commit": {"oid": "0873630ec295d02a23550f8e8a075e0a37a9995f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4528, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}