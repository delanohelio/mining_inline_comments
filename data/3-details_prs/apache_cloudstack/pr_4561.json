{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2OTAxNjY0", "number": 4561, "title": "Support for persistence mode in L2 networks", "bodyText": "Description\nThis PR aims at introducing persistence mode in L2 networks and enhancing the behavior in Isolated networks\nDoc PR apache/cloudstack-documentation#183\nTypes of changes\n\n Breaking change (fix or feature that would cause existing functionality to change)\n New feature (non-breaking change which adds functionality)\n Bug fix (non-breaking change which fixes an issue)\n Enhancement (improves an existing feature and functionality)\n Cleanup (Code refactoring and cleanup, that may add test cases)\n\nFeature/Enhancement Scale\n\n Major\n Minor", "createdAt": "2020-12-30T11:05:33Z", "url": "https://github.com/apache/cloudstack/pull/4561", "merged": true, "mergeCommit": {"oid": "0dbeb262e4f483e06ca335aadcee9664cf7f35c4"}, "closed": true, "closedAt": "2021-04-05T09:07:11Z", "author": {"login": "Pearl1594"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdrNpfmAFqTU2MDAxMTA5NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd5Xeo2AH2gAyNTQ2OTAxNjY0OmQ2NTlkYjhlN2MzZTM3NzYzOTBiMGQ1NGFmZTM2ZTk5M2E3OTUwMTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMDExMDk1", "url": "https://github.com/apache/cloudstack/pull/4561#pullrequestreview-560011095", "createdAt": "2020-12-30T11:30:03Z", "commit": {"oid": "65e49382dc942e15178f67abd955c2e7e158924f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMTozMDowM1rOIMrPHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMTozMDowM1rOIMrPHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2MjIwNA==", "bodyText": "@Pearl1594 can you start a discussion thread on dev@/users@ we want to see if it causes any backward compatibility issues for users", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r550162204", "createdAt": "2020-12-30T11:30:03Z", "author": {"login": "rhtyd"}, "path": "api/src/main/java/org/apache/cloudstack/api/command/user/network/CreateNetworkCmd.java", "diffHunk": "@@ -48,7 +49,7 @@\n \n @APICommand(name = \"createNetwork\", description = \"Creates a network\", responseObject = NetworkResponse.class, responseView = ResponseView.Restricted, entityType = {Network.class},\n         requestHasSensitiveInfo = false, responseHasSensitiveInfo = false)\n-public class CreateNetworkCmd extends BaseCmd implements UserCmd {\n+public class CreateNetworkCmd extends BaseAsyncCmd implements UserCmd {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65e49382dc942e15178f67abd955c2e7e158924f"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMDE4MjUx", "url": "https://github.com/apache/cloudstack/pull/4561#pullrequestreview-560018251", "createdAt": "2020-12-30T11:54:41Z", "commit": {"oid": "65e49382dc942e15178f67abd955c2e7e158924f"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMTo1NDo0MVrOIMrovQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMjowOTo1NlrOIMr43A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2ODc2NQ==", "bodyText": "Can you maybe rename this method and/or add javadoc to explain what does the pair returned mean?", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r550168765", "createdAt": "2020-12-30T11:54:41Z", "author": {"login": "nvazquez"}, "path": "engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java", "diffHunk": "@@ -1827,6 +1844,26 @@ private void orchestrateStop(final String vmUuid, final boolean cleanUpEvenIfUna\n         advanceStop(vm, cleanUpEvenIfUnableToStop);\n     }\n \n+    private Map<String, Boolean> getVlanToPersistenceMapForVM(long vmId) {\n+        List<UserVmJoinVO> userVmJoinVOS = userVmJoinDao.searchByIds(vmId);\n+        Map<String, Boolean> vlanToPersistenceMap = new HashMap<>();\n+        for (UserVmJoinVO userVmJoinVO : userVmJoinVOS) {\n+            NetworkVO networkVO = _networkDao.findById(userVmJoinVO.getNetworkId());\n+            NetworkOfferingVO offeringVO = networkOfferingDao.findById(networkVO.getNetworkOfferingId());\n+            Pair<String, Boolean> data = getVMNetworkDetails(networkVO, offeringVO.isPersistent());\n+            vlanToPersistenceMap.put(data.first(), data.second());\n+        }\n+        return vlanToPersistenceMap;\n+    }\n+\n+    private Pair<String, Boolean> getVMNetworkDetails(NetworkVO networkVO, boolean isPersistent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65e49382dc942e15178f67abd955c2e7e158924f"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2OTY1OQ==", "bodyText": "I think this condition could be refactored / split into multiple lines to increase readability", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r550169659", "createdAt": "2020-12-30T11:58:11Z", "author": {"login": "nvazquez"}, "path": "engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java", "diffHunk": "@@ -1827,6 +1844,26 @@ private void orchestrateStop(final String vmUuid, final boolean cleanUpEvenIfUna\n         advanceStop(vm, cleanUpEvenIfUnableToStop);\n     }\n \n+    private Map<String, Boolean> getVlanToPersistenceMapForVM(long vmId) {\n+        List<UserVmJoinVO> userVmJoinVOS = userVmJoinDao.searchByIds(vmId);\n+        Map<String, Boolean> vlanToPersistenceMap = new HashMap<>();\n+        for (UserVmJoinVO userVmJoinVO : userVmJoinVOS) {\n+            NetworkVO networkVO = _networkDao.findById(userVmJoinVO.getNetworkId());\n+            NetworkOfferingVO offeringVO = networkOfferingDao.findById(networkVO.getNetworkOfferingId());\n+            Pair<String, Boolean> data = getVMNetworkDetails(networkVO, offeringVO.isPersistent());\n+            vlanToPersistenceMap.put(data.first(), data.second());\n+        }\n+        return vlanToPersistenceMap;\n+    }\n+\n+    private Pair<String, Boolean> getVMNetworkDetails(NetworkVO networkVO, boolean isPersistent) {\n+        URI broadcastUri = networkVO.getBroadcastUri();\n+        String scheme = broadcastUri.getScheme();\n+        String vlanId = Networks.BroadcastDomainType.getValue(broadcastUri);\n+        Boolean shouldDelete = !((networkVO.getGuestType() == Network.GuestType.L2 || networkVO.getGuestType() == Network.GuestType.Isolated) && scheme.equalsIgnoreCase(\"vlan\") && isPersistent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65e49382dc942e15178f67abd955c2e7e158924f"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE3MDM0OA==", "bodyText": "Please remove", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r550170348", "createdAt": "2020-12-30T12:00:38Z", "author": {"login": "nvazquez"}, "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -1187,6 +1200,68 @@ boolean isNetworkImplemented(final NetworkVO network) {\n         return implemented;\n     }\n \n+    private NicTO getNicTO(NetworkVO networkVO, NetworkOfferingVO networkOfferingVO) {\n+        NicTO to = new NicTO();\n+        to.setBroadcastType(networkVO.getBroadcastDomainType());\n+        to.setType(networkVO.getTrafficType());\n+        to.setBroadcastUri(networkVO.getBroadcastUri());\n+        to.setIsolationuri(networkVO.getBroadcastUri());\n+        to.setNetworkRateMbps(_configMgr.getNetworkOfferingNetworkRate(networkOfferingVO.getId(), networkVO.getDataCenterId()));\n+        to.setSecurityGroupEnabled(_networkModel.isSecurityGroupSupportedInNetwork(networkVO));\n+        return to;\n+    }\n+\n+    private boolean isNtwConfiguredInCluster(HostVO hostVO, Map<Long, List<Long>> clusterToHostsMap) {\n+        Long clusterId = hostVO.getClusterId();\n+        List<Long> hosts = clusterToHostsMap.get(clusterId);\n+        if (hosts == null) {\n+            hosts = new ArrayList<>();\n+        }\n+        if (hostVO.getHypervisorType() == HypervisorType.KVM) {\n+            hosts.add(hostVO.getId());\n+            clusterToHostsMap.put(clusterId, hosts);\n+            return false;\n+        }\n+        if (hosts != null && !hosts.isEmpty()) {\n+            return true;\n+        }\n+        hosts.add(hostVO.getId());\n+        clusterToHostsMap.put(clusterId, hosts);\n+        return false;\n+    }\n+\n+    private void setupPersistentNetwork(NetworkVO network, NetworkOfferingVO offering, Long dcId) throws AgentUnavailableException, OperationTimedoutException {\n+        NicTO to = getNicTO(network, offering);\n+        List<ClusterVO> clusterVOS = clusterDao.listClustersByDcId(dcId);\n+        List<HostVO> hosts = resourceManager.listAllUpAndEnabledHostsInOneZoneByType(Host.Type.Routing, dcId);\n+        Collections.reverse(hosts);\n+        Map<Long, List<Long>> clusterToHostsMap = new HashMap<>();\n+        SetupPersistentNetworkCommand cmd = new SetupPersistentNetworkCommand(to);\n+        for (HostVO host : hosts) {\n+            if (isNtwConfiguredInCluster(host, clusterToHostsMap)) {\n+                continue;\n+            }\n+            final SetupPersistentNetworkAnswer answer = (SetupPersistentNetworkAnswer)_agentMgr.send(host.getId(), cmd);\n+\n+            if (answer == null) {\n+                s_logger.warn(\"Unable to get an answer to the SetupPersistentNetworkCommand from agent:\" + host.getId());\n+                clusterToHostsMap.get(host.getClusterId()).remove(host.getId());\n+                continue;\n+                // throw new CloudRuntimeException(\"Unable to get an answer to the SetupPersistentNetworkCommand from agent: \" + host.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65e49382dc942e15178f67abd955c2e7e158924f"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE3MDM4NQ==", "bodyText": "Same here", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r550170385", "createdAt": "2020-12-30T12:00:50Z", "author": {"login": "nvazquez"}, "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -1187,6 +1200,68 @@ boolean isNetworkImplemented(final NetworkVO network) {\n         return implemented;\n     }\n \n+    private NicTO getNicTO(NetworkVO networkVO, NetworkOfferingVO networkOfferingVO) {\n+        NicTO to = new NicTO();\n+        to.setBroadcastType(networkVO.getBroadcastDomainType());\n+        to.setType(networkVO.getTrafficType());\n+        to.setBroadcastUri(networkVO.getBroadcastUri());\n+        to.setIsolationuri(networkVO.getBroadcastUri());\n+        to.setNetworkRateMbps(_configMgr.getNetworkOfferingNetworkRate(networkOfferingVO.getId(), networkVO.getDataCenterId()));\n+        to.setSecurityGroupEnabled(_networkModel.isSecurityGroupSupportedInNetwork(networkVO));\n+        return to;\n+    }\n+\n+    private boolean isNtwConfiguredInCluster(HostVO hostVO, Map<Long, List<Long>> clusterToHostsMap) {\n+        Long clusterId = hostVO.getClusterId();\n+        List<Long> hosts = clusterToHostsMap.get(clusterId);\n+        if (hosts == null) {\n+            hosts = new ArrayList<>();\n+        }\n+        if (hostVO.getHypervisorType() == HypervisorType.KVM) {\n+            hosts.add(hostVO.getId());\n+            clusterToHostsMap.put(clusterId, hosts);\n+            return false;\n+        }\n+        if (hosts != null && !hosts.isEmpty()) {\n+            return true;\n+        }\n+        hosts.add(hostVO.getId());\n+        clusterToHostsMap.put(clusterId, hosts);\n+        return false;\n+    }\n+\n+    private void setupPersistentNetwork(NetworkVO network, NetworkOfferingVO offering, Long dcId) throws AgentUnavailableException, OperationTimedoutException {\n+        NicTO to = getNicTO(network, offering);\n+        List<ClusterVO> clusterVOS = clusterDao.listClustersByDcId(dcId);\n+        List<HostVO> hosts = resourceManager.listAllUpAndEnabledHostsInOneZoneByType(Host.Type.Routing, dcId);\n+        Collections.reverse(hosts);\n+        Map<Long, List<Long>> clusterToHostsMap = new HashMap<>();\n+        SetupPersistentNetworkCommand cmd = new SetupPersistentNetworkCommand(to);\n+        for (HostVO host : hosts) {\n+            if (isNtwConfiguredInCluster(host, clusterToHostsMap)) {\n+                continue;\n+            }\n+            final SetupPersistentNetworkAnswer answer = (SetupPersistentNetworkAnswer)_agentMgr.send(host.getId(), cmd);\n+\n+            if (answer == null) {\n+                s_logger.warn(\"Unable to get an answer to the SetupPersistentNetworkCommand from agent:\" + host.getId());\n+                clusterToHostsMap.get(host.getClusterId()).remove(host.getId());\n+                continue;\n+                // throw new CloudRuntimeException(\"Unable to get an answer to the SetupPersistentNetworkCommand from agent: \" + host.getId());\n+            }\n+\n+            if (!answer.getResult()) {\n+                s_logger.warn(\"Unable to setup agent \" + host.getId() + \" due to \" + answer.getDetails() );\n+//                final String msg = \"Incorrect Network setup on agent, Reinitialize agent after network names are setup, details : \" + answer.getDetails();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65e49382dc942e15178f67abd955c2e7e158924f"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE3MDYyMw==", "bodyText": "I think this method needs an explanatory javadoc as well", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r550170623", "createdAt": "2020-12-30T12:01:44Z", "author": {"login": "nvazquez"}, "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -1187,6 +1200,68 @@ boolean isNetworkImplemented(final NetworkVO network) {\n         return implemented;\n     }\n \n+    private NicTO getNicTO(NetworkVO networkVO, NetworkOfferingVO networkOfferingVO) {\n+        NicTO to = new NicTO();\n+        to.setBroadcastType(networkVO.getBroadcastDomainType());\n+        to.setType(networkVO.getTrafficType());\n+        to.setBroadcastUri(networkVO.getBroadcastUri());\n+        to.setIsolationuri(networkVO.getBroadcastUri());\n+        to.setNetworkRateMbps(_configMgr.getNetworkOfferingNetworkRate(networkOfferingVO.getId(), networkVO.getDataCenterId()));\n+        to.setSecurityGroupEnabled(_networkModel.isSecurityGroupSupportedInNetwork(networkVO));\n+        return to;\n+    }\n+\n+    private boolean isNtwConfiguredInCluster(HostVO hostVO, Map<Long, List<Long>> clusterToHostsMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65e49382dc942e15178f67abd955c2e7e158924f"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE3MDg4Ng==", "bodyText": "Maybe renamed to createNicTOFromNetworkAndOffering() or similar?", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r550170886", "createdAt": "2020-12-30T12:02:46Z", "author": {"login": "nvazquez"}, "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -1187,6 +1200,68 @@ boolean isNetworkImplemented(final NetworkVO network) {\n         return implemented;\n     }\n \n+    private NicTO getNicTO(NetworkVO networkVO, NetworkOfferingVO networkOfferingVO) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65e49382dc942e15178f67abd955c2e7e158924f"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE3MTI5Ng==", "bodyText": "Why is the list reversed at this point?", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r550171296", "createdAt": "2020-12-30T12:04:08Z", "author": {"login": "nvazquez"}, "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -1187,6 +1200,68 @@ boolean isNetworkImplemented(final NetworkVO network) {\n         return implemented;\n     }\n \n+    private NicTO getNicTO(NetworkVO networkVO, NetworkOfferingVO networkOfferingVO) {\n+        NicTO to = new NicTO();\n+        to.setBroadcastType(networkVO.getBroadcastDomainType());\n+        to.setType(networkVO.getTrafficType());\n+        to.setBroadcastUri(networkVO.getBroadcastUri());\n+        to.setIsolationuri(networkVO.getBroadcastUri());\n+        to.setNetworkRateMbps(_configMgr.getNetworkOfferingNetworkRate(networkOfferingVO.getId(), networkVO.getDataCenterId()));\n+        to.setSecurityGroupEnabled(_networkModel.isSecurityGroupSupportedInNetwork(networkVO));\n+        return to;\n+    }\n+\n+    private boolean isNtwConfiguredInCluster(HostVO hostVO, Map<Long, List<Long>> clusterToHostsMap) {\n+        Long clusterId = hostVO.getClusterId();\n+        List<Long> hosts = clusterToHostsMap.get(clusterId);\n+        if (hosts == null) {\n+            hosts = new ArrayList<>();\n+        }\n+        if (hostVO.getHypervisorType() == HypervisorType.KVM) {\n+            hosts.add(hostVO.getId());\n+            clusterToHostsMap.put(clusterId, hosts);\n+            return false;\n+        }\n+        if (hosts != null && !hosts.isEmpty()) {\n+            return true;\n+        }\n+        hosts.add(hostVO.getId());\n+        clusterToHostsMap.put(clusterId, hosts);\n+        return false;\n+    }\n+\n+    private void setupPersistentNetwork(NetworkVO network, NetworkOfferingVO offering, Long dcId) throws AgentUnavailableException, OperationTimedoutException {\n+        NicTO to = getNicTO(network, offering);\n+        List<ClusterVO> clusterVOS = clusterDao.listClustersByDcId(dcId);\n+        List<HostVO> hosts = resourceManager.listAllUpAndEnabledHostsInOneZoneByType(Host.Type.Routing, dcId);\n+        Collections.reverse(hosts);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65e49382dc942e15178f67abd955c2e7e158924f"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE3MTYxMg==", "bodyText": "Small typo", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r550171612", "createdAt": "2020-12-30T12:05:20Z", "author": {"login": "nvazquez"}, "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -3512,7 +3590,7 @@ private boolean cleanupNetworkResources(final long networkId, final Account call\n             }\n         } catch (final ResourceUnavailableException ex) {\n             success = false;\n-            s_logger.warn(\"Failed to cleanup Network ACLs as a part of network id=\" + networkId + \" cleanup due to resourceUnavailable \", ex);\n+            s_logger.warn(\"Failed to c*.javaleanup Network ACLs as a part of network id=\" + networkId + \" cleanup due to resourceUnavailable \", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65e49382dc942e15178f67abd955c2e7e158924f"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE3MjI3MQ==", "bodyText": "Maybe renamed to shouldDeleteBridge() or similar?", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r550172271", "createdAt": "2020-12-30T12:07:45Z", "author": {"login": "nvazquez"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -276,18 +277,33 @@ Use VIR_DOMAIN_XML_SECURE (value = 1) prior to v1.0.0.\n         } else {\n             libvirtComputingResource.destroyNetworkRulesForVM(conn, vmName);\n             for (final InterfaceDef iface : ifaces) {\n+                String vlanId = getVlanIdFromBridgeName(iface.getBrName());\n                 // We don't know which \"traffic type\" is associated with\n                 // each interface at this point, so inform all vif drivers\n                 final List<VifDriver> allVifDrivers = libvirtComputingResource.getAllVifDrivers();\n                 for (final VifDriver vifDriver : allVifDrivers) {\n-                    vifDriver.unplug(iface);\n+                    vifDriver.unplug(iface, deleteBridge(vlanToPersistenceMap, vlanId));\n                 }\n             }\n         }\n \n         return new MigrateAnswer(command, result == null, result, null);\n     }\n \n+    private String getVlanIdFromBridgeName(String brName) {\n+        if (brName != null) {\n+            return brName.split(\"-\")[1];\n+        }\n+        return null;\n+    }\n+\n+    private boolean deleteBridge(Map<String, Boolean> vlanToPersistenceMap, String vlanId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65e49382dc942e15178f67abd955c2e7e158924f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE3MjU4MA==", "bodyText": "What about StringUtils.isNotBlank() to also prevent empty strings?", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r550172580", "createdAt": "2020-12-30T12:08:45Z", "author": {"login": "nvazquez"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtMigrateCommandWrapper.java", "diffHunk": "@@ -276,18 +277,33 @@ Use VIR_DOMAIN_XML_SECURE (value = 1) prior to v1.0.0.\n         } else {\n             libvirtComputingResource.destroyNetworkRulesForVM(conn, vmName);\n             for (final InterfaceDef iface : ifaces) {\n+                String vlanId = getVlanIdFromBridgeName(iface.getBrName());\n                 // We don't know which \"traffic type\" is associated with\n                 // each interface at this point, so inform all vif drivers\n                 final List<VifDriver> allVifDrivers = libvirtComputingResource.getAllVifDrivers();\n                 for (final VifDriver vifDriver : allVifDrivers) {\n-                    vifDriver.unplug(iface);\n+                    vifDriver.unplug(iface, deleteBridge(vlanToPersistenceMap, vlanId));\n                 }\n             }\n         }\n \n         return new MigrateAnswer(command, result == null, result, null);\n     }\n \n+    private String getVlanIdFromBridgeName(String brName) {\n+        if (brName != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65e49382dc942e15178f67abd955c2e7e158924f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE3Mjg5Mg==", "bodyText": "Please remove", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r550172892", "createdAt": "2020-12-30T12:09:56Z", "author": {"login": "nvazquez"}, "path": "server/src/main/java/com/cloud/network/NetworkServiceImpl.java", "diffHunk": "@@ -1374,10 +1374,10 @@ public Network createGuestNetwork(CreateNetworkCmd cmd) throws InsufficientCapac\n         // if the network offering has persistent set to true, implement the network\n         if (ntwkOff.isPersistent()) {\n             try {\n-                if (network.getState() == Network.State.Setup) {\n-                    s_logger.debug(\"Network id=\" + network.getId() + \" is already provisioned\");\n-                    return network;\n-                }\n+//                if (network.getState() == Network.State.Setup) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65e49382dc942e15178f67abd955c2e7e158924f"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "65e49382dc942e15178f67abd955c2e7e158924f", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/65e49382dc942e15178f67abd955c2e7e158924f", "committedDate": "2020-12-30T11:03:46Z", "message": "Support for persistence mode in L2 networks"}, "afterCommit": {"oid": "cf5cb957a202dd5babe50dd7726c2c4c0fd98a61", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/cf5cb957a202dd5babe50dd7726c2c4c0fd98a61", "committedDate": "2021-01-05T06:47:02Z", "message": "address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2ffcb726f0cb42085eb2780e5b4bfecaa23cf819", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/2ffcb726f0cb42085eb2780e5b4bfecaa23cf819", "committedDate": "2021-01-06T12:51:29Z", "message": "Add network tag to nic info - required for xen"}, "afterCommit": {"oid": "c92652b3b394fc2442ebee22c30c1f81fd740153", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/c92652b3b394fc2442ebee22c30c1f81fd740153", "committedDate": "2021-01-13T05:38:25Z", "message": "Marvin tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6a80736574529e293a185f4fc5c39975ec7095f5", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/6a80736574529e293a185f4fc5c39975ec7095f5", "committedDate": "2021-01-21T07:45:49Z", "message": "Added additional marvin tests + defensive checks"}, "afterCommit": {"oid": "b898d6f616723278b65fbe8b3ad5cd51ec9b2ebe", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/b898d6f616723278b65fbe8b3ad5cd51ec9b2ebe", "committedDate": "2021-01-21T08:04:17Z", "message": "Added additional marvin tests + defensive checks"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b898d6f616723278b65fbe8b3ad5cd51ec9b2ebe", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/b898d6f616723278b65fbe8b3ad5cd51ec9b2ebe", "committedDate": "2021-01-21T08:04:17Z", "message": "Added additional marvin tests + defensive checks"}, "afterCommit": {"oid": "f0538034f8eda454d14ce2f87b4633395ca0e6f2", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/f0538034f8eda454d14ce2f87b4633395ca0e6f2", "committedDate": "2021-01-21T09:19:38Z", "message": "Added additional marvin tests + defensive checks"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f0538034f8eda454d14ce2f87b4633395ca0e6f2", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/f0538034f8eda454d14ce2f87b4633395ca0e6f2", "committedDate": "2021-01-21T09:19:38Z", "message": "Added additional marvin tests + defensive checks"}, "afterCommit": {"oid": "aeb5fcf2596c78aa89532e97fb88154685515fea", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/aeb5fcf2596c78aa89532e97fb88154685515fea", "committedDate": "2021-01-22T10:04:45Z", "message": "UI changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aeb5fcf2596c78aa89532e97fb88154685515fea", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/aeb5fcf2596c78aa89532e97fb88154685515fea", "committedDate": "2021-01-22T10:04:45Z", "message": "UI changes"}, "afterCommit": {"oid": "15d1504eed1aa50740a82db3067d4414563c657e", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/15d1504eed1aa50740a82db3067d4414563c657e", "committedDate": "2021-01-27T05:47:18Z", "message": "Revert changes - async cmd"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4MDkyOTUz", "url": "https://github.com/apache/cloudstack/pull/4561#pullrequestreview-578092953", "createdAt": "2021-01-28T08:38:01Z", "commit": {"oid": "c6d9b75a53447bd241203369aa82f58ec13a5dd9"}, "state": "APPROVED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwODozODowMVrOIbsRQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwODo0NDo0OVrOIbshsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTkwNzc3OQ==", "bodyText": "Import reshuffle does not look sortable. You can fix your intellij settings or get preset settings (mine are here https://github.com/rhtyd/dotfiles/blob/master/intellij/settings.jar)", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r565907779", "createdAt": "2021-01-28T08:38:01Z", "author": {"login": "rhtyd"}, "path": "api/src/main/java/org/apache/cloudstack/api/command/user/network/CreateNetworkCmd.java", "diffHunk": "@@ -16,13 +16,13 @@\n // under the License.\n package org.apache.cloudstack.api.command.user.network;\n \n+import org.apache.cloudstack.api.BaseCmd;\n import org.apache.log4j.Logger;\n \n import org.apache.cloudstack.acl.RoleType;\n import org.apache.cloudstack.api.APICommand;\n import org.apache.cloudstack.api.ApiConstants;\n import org.apache.cloudstack.api.ApiErrorCode;\n-import org.apache.cloudstack.api.BaseCmd;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d9b75a53447bd241203369aa82f58ec13a5dd9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTkwODAxNQ==", "bodyText": "minor nit - space after Command {", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r565908015", "createdAt": "2021-01-28T08:38:23Z", "author": {"login": "rhtyd"}, "path": "core/src/main/java/com/cloud/agent/api/CleanupPersistentNetworkResourceCommand.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package com.cloud.agent.api;\n+\n+import com.cloud.agent.api.to.NicTO;\n+\n+public class CleanupPersistentNetworkResourceCommand extends Command{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d9b75a53447bd241203369aa82f58ec13a5dd9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTkwODQzOA==", "bodyText": "Just a note - if field is not initialised, the consumer of getter must do a NPE check.", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r565908438", "createdAt": "2021-01-28T08:39:01Z", "author": {"login": "rhtyd"}, "path": "core/src/main/java/com/cloud/agent/api/MigrateCommand.java", "diffHunk": "@@ -40,6 +40,7 @@\n     private boolean executeInSequence = false;\n     private List<MigrateDiskInfo> migrateDiskInfoList = new ArrayList<>();\n     private Map<String, DpdkTO> dpdkInterfaceMapping = new HashMap<>();\n+    Map<String, Boolean> vlanToPersistenceMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d9b75a53447bd241203369aa82f58ec13a5dd9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTkwODU3MA==", "bodyText": "minor nit - same Command {", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r565908570", "createdAt": "2021-01-28T08:39:14Z", "author": {"login": "rhtyd"}, "path": "core/src/main/java/com/cloud/agent/api/SetupPersistentNetworkCommand.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package com.cloud.agent.api;\n+\n+import com.cloud.agent.api.to.NicTO;\n+\n+public class SetupPersistentNetworkCommand extends Command{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d9b75a53447bd241203369aa82f58ec13a5dd9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTkwODY3MQ==", "bodyText": "same as before, NPE check for consumer", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r565908671", "createdAt": "2021-01-28T08:39:26Z", "author": {"login": "rhtyd"}, "path": "core/src/main/java/com/cloud/agent/api/StopCommand.java", "diffHunk": "@@ -36,6 +36,7 @@\n     String controlIp = null;\n     boolean forceStop = false;\n     private Map<String, DpdkTO> dpdkInterfaceMapping;\n+    Map<String, Boolean> vlanToPersistenceMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d9b75a53447bd241203369aa82f58ec13a5dd9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTkwOTM1MQ==", "bodyText": "minor nit - could be simply made to set the getVlanToPersistenceMapForVM output", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r565909351", "createdAt": "2021-01-28T08:40:28Z", "author": {"login": "rhtyd"}, "path": "engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java", "diffHunk": "@@ -1640,7 +1657,11 @@ private void unmanageVMNics(VirtualMachineProfile profile, VMInstanceVO vm) {\n \n     protected boolean sendStop(final VirtualMachineGuru guru, final VirtualMachineProfile profile, final boolean force, final boolean checkBeforeCleanup) {\n         final VirtualMachine vm = profile.getVirtualMachine();\n+        Map<String, Boolean> vlanToPersistenceMap = getVlanToPersistenceMapForVM(vm.getId());\n         StopCommand stpCmd = new StopCommand(vm, getExecuteInSequence(vm.getHypervisorType()), checkBeforeCleanup);\n+        if (MapUtils.isNotEmpty(vlanToPersistenceMap)) {\n+            stpCmd.setVlanToPersistenceMap(vlanToPersistenceMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d9b75a53447bd241203369aa82f58ec13a5dd9"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTkwOTg0OQ==", "bodyText": "What about vxlan, @Pearl1594 are persistent networks support for VXLAN isolation?", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r565909849", "createdAt": "2021-01-28T08:41:20Z", "author": {"login": "rhtyd"}, "path": "engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java", "diffHunk": "@@ -1827,6 +1848,63 @@ private void orchestrateStop(final String vmUuid, final boolean cleanUpEvenIfUna\n         advanceStop(vm, cleanUpEvenIfUnableToStop);\n     }\n \n+    private void getPersistenceMap(Map<String, Boolean> vlanToPersistenceMap, NetworkVO networkVO) {\n+        NetworkOfferingVO offeringVO = networkOfferingDao.findById(networkVO.getNetworkOfferingId());\n+        if (offeringVO != null) {\n+            Pair<String, Boolean> data = getVMNetworkDetails(networkVO, offeringVO.isPersistent());\n+            Boolean shouldDeleteNwResource = (MapUtils.isNotEmpty(vlanToPersistenceMap) && data != null) ? vlanToPersistenceMap.get(data.first()) : null;\n+            if (data != null && (shouldDeleteNwResource == null || shouldDeleteNwResource)) {\n+                vlanToPersistenceMap.put(data.first(), data.second());\n+            }\n+        }\n+    }\n+\n+    private Map<String, Boolean> getVlanToPersistenceMapForVM(long vmId) {\n+        List<UserVmJoinVO> userVmJoinVOS = userVmJoinDao.searchByIds(vmId);\n+        Map<String, Boolean> vlanToPersistenceMap = new HashMap<>();\n+        for (UserVmJoinVO userVmJoinVO : userVmJoinVOS) {\n+            NetworkVO networkVO = _networkDao.findById(userVmJoinVO.getNetworkId());\n+            getPersistenceMap(vlanToPersistenceMap, networkVO);\n+        }\n+        if (userVmJoinVOS.isEmpty()) {\n+            VMInstanceVO vmInstanceVO = _vmDao.findById(vmId);\n+            if (vmInstanceVO != null && vmInstanceVO.getType() == VirtualMachine.Type.DomainRouter) {\n+                DomainRouterJoinVO routerVO = domainRouterJoinDao.findById(vmId);\n+                NetworkVO networkVO = _networkDao.findById(routerVO.getNetworkId());\n+                getPersistenceMap(vlanToPersistenceMap, networkVO);\n+            }\n+        }\n+        return vlanToPersistenceMap;\n+    }\n+\n+    /**\n+     *\n+     * @param networkVO - the network object used to determine the vlanId from the broadcast URI\n+     * @param isPersistent - indicates if the corresponding network's network offering is Persistent\n+     *\n+     * @return <VlanId, ShouldKVMBridgeBeDeleted> - basically returns the vlan ID which is used to determine the\n+     * bridge name for KVM hypervisor and based on the network and isolation type and persistent setting of the offering\n+     * we decide whether the bridge is to be deleted (KVM) if the last VM in that host is destroyed / migrated\n+     */\n+    private Pair<String, Boolean> getVMNetworkDetails(NetworkVO networkVO, boolean isPersistent) {\n+        URI broadcastUri = networkVO.getBroadcastUri();\n+        if (broadcastUri != null) {\n+            String scheme = broadcastUri.getScheme();\n+            String vlanId = Networks.BroadcastDomainType.getValue(broadcastUri);\n+            boolean shouldDelete = !((networkVO.getGuestType() == Network.GuestType.L2 || networkVO.getGuestType() == Network.GuestType.Isolated) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d9b75a53447bd241203369aa82f58ec13a5dd9"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTkxMDYwMQ==", "bodyText": "Can we log on which host it was failed, or one of the warning/log above?", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r565910601", "createdAt": "2021-01-28T08:42:35Z", "author": {"login": "rhtyd"}, "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -2864,6 +2962,33 @@ public boolean shutdownNetworkElementsAndResources(final ReservationContext cont\n         return success;\n     }\n \n+    private void cleanupPersistentnNetworkResources(NetworkVO network) {\n+        long networkOfferingId = network.getNetworkOfferingId();\n+        NetworkOfferingVO offering = _networkOfferingDao.findById(networkOfferingId);\n+        if (offering != null) {\n+            if (networkMeetsPersistenceCriteria(network, offering, true) &&\n+                    _networksDao.getOtherPersistentNetworksCount(network.getId(), network.getBroadcastUri().toString(), offering.isPersistent()) == 0) {\n+                List<HostVO> hosts = resourceManager.listAllUpAndEnabledHostsInOneZoneByType(Host.Type.Routing, network.getDataCenterId());\n+                for (HostVO host : hosts) {\n+                    try {\n+                        NicTO to = createNicTOFromNetworkAndOffering(network, offering, host);\n+                        CleanupPersistentNetworkResourceCommand cmd = new CleanupPersistentNetworkResourceCommand(to);\n+                        CleanupPersistentNetworkResourceAnswer answer = (CleanupPersistentNetworkResourceAnswer) _agentMgr.send(host.getId(), cmd);\n+                        if (answer == null) {\n+                            s_logger.warn(\"Unable to get an answer to the CleanupPersistentNetworkResourceCommand from agent:\" + host.getId());\n+                        }\n+\n+                        if (!answer.getResult()) {\n+                            s_logger.warn(\"Unable to setup agent \" + host.getId() + \" due to \" + answer.getDetails());\n+                        }\n+                    } catch (Exception e) {\n+                        s_logger.warn(\"Failed to cleanup network resources\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d9b75a53447bd241203369aa82f58ec13a5dd9"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTkxMDg4Mw==", "bodyText": "minor minor nit - The other PR/fix has come here.", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r565910883", "createdAt": "2021-01-28T08:43:02Z", "author": {"login": "rhtyd"}, "path": "plugins/api/discovery/src/main/java/org/apache/cloudstack/discovery/ApiDiscoveryServiceImpl.java", "diffHunk": "@@ -67,7 +68,7 @@ public boolean start() {\n         if (s_apiNameDiscoveryResponseMap == null) {\n             long startTime = System.nanoTime();\n             s_apiNameDiscoveryResponseMap = new HashMap<String, ApiDiscoveryResponse>();\n-            Set<Class<?>> cmdClasses = new HashSet<Class<?>>();\n+            Set<Class<?>> cmdClasses = new LinkedHashSet<Class<?>>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d9b75a53447bd241203369aa82f58ec13a5dd9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTkxMTMwMA==", "bodyText": "should deleteBr be used to add the -d command?", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r565911300", "createdAt": "2021-01-28T08:43:42Z", "author": {"login": "rhtyd"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/BridgeVifDriver.java", "diffHunk": "@@ -376,6 +376,7 @@ private void deleteVnetBr(String brName) {\n             command.add(\"-v\", vNetId);\n             command.add(\"-p\", pName);\n             command.add(\"-b\", brName);\n+            command.add(\"-d\", String.valueOf(deleteBr));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d9b75a53447bd241203369aa82f58ec13a5dd9"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTkxMTQ5NA==", "bodyText": "should null check be done here again?", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r565911494", "createdAt": "2021-01-28T08:44:03Z", "author": {"login": "rhtyd"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/BridgeVifDriver.java", "diffHunk": "@@ -436,4 +437,20 @@ public boolean isExistingBridge(String bridgeName) {\n             return false;\n         }\n     }\n+\n+    @Override\n+    public void deleteBr(NicTO nic) {\n+        String vlanId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n+        String trafficLabel = nic.getName();\n+        String pifName = _pifs.get(trafficLabel);\n+        if (pifName == null) {\n+            // if not found in bridge map, maybe traffic label refers to pif already?\n+            File pif = new File(\"/sys/class/net/\" + trafficLabel);\n+            if (pif.isDirectory()) {\n+                pifName = trafficLabel;\n+            }\n+        }\n+        String brName = generateVnetBrName(pifName, vlanId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d9b75a53447bd241203369aa82f58ec13a5dd9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTkxMTk4NQ==", "bodyText": "Is persistent network/L2 not supported for OVS bridge?", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r565911985", "createdAt": "2021-01-28T08:44:49Z", "author": {"login": "rhtyd"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtCleanupPersistentNetworkResourceCommandWrapper.java", "diffHunk": "@@ -0,0 +1,44 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package com.cloud.hypervisor.kvm.resource.wrapper;\n+\n+import org.apache.log4j.Logger;\n+\n+import com.cloud.agent.api.Answer;\n+import com.cloud.agent.api.CleanupPersistentNetworkResourceAnswer;\n+import com.cloud.agent.api.CleanupPersistentNetworkResourceCommand;\n+import com.cloud.agent.api.to.NicTO;\n+import com.cloud.hypervisor.kvm.resource.BridgeVifDriver;\n+import com.cloud.hypervisor.kvm.resource.LibvirtComputingResource;\n+import com.cloud.hypervisor.kvm.resource.VifDriver;\n+import com.cloud.resource.CommandWrapper;\n+import com.cloud.resource.ResourceWrapper;\n+\n+@ResourceWrapper(handles = CleanupPersistentNetworkResourceCommand.class)\n+public class LibvirtCleanupPersistentNetworkResourceCommandWrapper extends CommandWrapper<CleanupPersistentNetworkResourceCommand, Answer, LibvirtComputingResource> {\n+    private static final Logger s_logger = Logger.getLogger(LibvirtCleanupPersistentNetworkResourceCommandWrapper.class);\n+    @Override\n+    public Answer execute(CleanupPersistentNetworkResourceCommand command, LibvirtComputingResource serverResource) {\n+        NicTO nic = command.getNicTO();\n+        VifDriver driver = serverResource.getVifDriver(nic.getType());\n+        if (driver instanceof BridgeVifDriver) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6d9b75a53447bd241203369aa82f58ec13a5dd9"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24f9dcfb6798e1c7eedc40355dea5a40963f1eb2", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/24f9dcfb6798e1c7eedc40355dea5a40963f1eb2", "committedDate": "2021-01-28T11:31:07Z", "message": "Support for persistence mode in L2 networks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04bb7a8b6aea250a027539acb1db6c16b0cc9e4a", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/04bb7a8b6aea250a027539acb1db6c16b0cc9e4a", "committedDate": "2021-01-28T11:31:07Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e57b34521789f7a940a96e16f13ab1efd2d3cb18", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/e57b34521789f7a940a96e16f13ab1efd2d3cb18", "committedDate": "2021-01-28T11:31:07Z", "message": "Add network tag to nic info - required for xen"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af12e27561adc727e398f3c342510a8093f6974c", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/af12e27561adc727e398f3c342510a8093f6974c", "committedDate": "2021-01-28T11:31:07Z", "message": "Marvin tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "762df8c170efe945da293cfce4de93f0028a7453", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/762df8c170efe945da293cfce4de93f0028a7453", "committedDate": "2021-01-28T11:31:07Z", "message": "Include cleanup of n/w resources on n/w deletion + prevent n/w resource deletion on detroy/stop/unplug of VM from persistent n/w"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be0723201a8bd7284aa173fb3227fa8ce9abd729", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/be0723201a8bd7284aa173fb3227fa8ce9abd729", "committedDate": "2021-01-28T11:31:07Z", "message": "Add check to prevent deletion of n/w resources when last VM/non-persistent network is deleted but there exists another n/w with overlapping vlan which is persistent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4faa06538424880aae55700878e5993b447697af", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/4faa06538424880aae55700878e5993b447697af", "committedDate": "2021-01-28T11:31:07Z", "message": "Added additional marvin tests + defensive checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5e8cd16e27e994f7aac93f03ca781566bae9665", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/b5e8cd16e27e994f7aac93f03ca781566bae9665", "committedDate": "2021-01-28T11:31:07Z", "message": "API discovery: Prevent overwrite of API parameters in case the API names are the same"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4c74df80b0dea2b9172de45295c230be3863b56", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/d4c74df80b0dea2b9172de45295c230be3863b56", "committedDate": "2021-01-28T11:31:07Z", "message": "Revert changes - async cmd"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56716a3f1f0fadf7dab3f101d3c59d29cd1de199", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/56716a3f1f0fadf7dab3f101d3c59d29cd1de199", "committedDate": "2021-01-28T11:31:07Z", "message": "changed log message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "792dda1cc4ddb03b870f2acf51b238618c53c44d", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/792dda1cc4ddb03b870f2acf51b238618c53c44d", "committedDate": "2021-01-28T11:31:07Z", "message": "Address review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "abd89cf91286cb215a3771691cdccc604cc3176e", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/abd89cf91286cb215a3771691cdccc604cc3176e", "committedDate": "2021-01-28T09:47:41Z", "message": "Address review comments"}, "afterCommit": {"oid": "792dda1cc4ddb03b870f2acf51b238618c53c44d", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/792dda1cc4ddb03b870f2acf51b238618c53c44d", "committedDate": "2021-01-28T11:31:07Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc5MDcxNzcz", "url": "https://github.com/apache/cloudstack/pull/4561#pullrequestreview-579071773", "createdAt": "2021-01-29T09:20:42Z", "commit": {"oid": "792dda1cc4ddb03b870f2acf51b238618c53c44d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQwOToyMDo0MlrOIcbmBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQwOToyMDo0MlrOIcbmBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjY4MzE0MQ==", "bodyText": "getPersistenceMap here doesn't return anything, updatePersistenceMap might be best fit here", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r566683141", "createdAt": "2021-01-29T09:20:42Z", "author": {"login": "sureshanaparti"}, "path": "engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java", "diffHunk": "@@ -1827,6 +1848,63 @@ private void orchestrateStop(final String vmUuid, final boolean cleanUpEvenIfUna\n         advanceStop(vm, cleanUpEvenIfUnableToStop);\n     }\n \n+    private void getPersistenceMap(Map<String, Boolean> vlanToPersistenceMap, NetworkVO networkVO) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792dda1cc4ddb03b870f2acf51b238618c53c44d"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc5MDcyMzMz", "url": "https://github.com/apache/cloudstack/pull/4561#pullrequestreview-579072333", "createdAt": "2021-01-29T09:21:25Z", "commit": {"oid": "792dda1cc4ddb03b870f2acf51b238618c53c44d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQwOToyMToyNVrOIcbnzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQwOToyMToyNVrOIcbnzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjY4MzU5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<UserVmJoinVO> userVmJoinVOS = userVmJoinDao.searchByIds(vmId);\n          \n          \n            \n                    List<UserVmJoinVO> userVmJoinVOs = userVmJoinDao.searchByIds(vmId);", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r566683597", "createdAt": "2021-01-29T09:21:25Z", "author": {"login": "sureshanaparti"}, "path": "engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java", "diffHunk": "@@ -1827,6 +1848,63 @@ private void orchestrateStop(final String vmUuid, final boolean cleanUpEvenIfUna\n         advanceStop(vm, cleanUpEvenIfUnableToStop);\n     }\n \n+    private void getPersistenceMap(Map<String, Boolean> vlanToPersistenceMap, NetworkVO networkVO) {\n+        NetworkOfferingVO offeringVO = networkOfferingDao.findById(networkVO.getNetworkOfferingId());\n+        if (offeringVO != null) {\n+            Pair<String, Boolean> data = getVMNetworkDetails(networkVO, offeringVO.isPersistent());\n+            Boolean shouldDeleteNwResource = (MapUtils.isNotEmpty(vlanToPersistenceMap) && data != null) ? vlanToPersistenceMap.get(data.first()) : null;\n+            if (data != null && (shouldDeleteNwResource == null || shouldDeleteNwResource)) {\n+                vlanToPersistenceMap.put(data.first(), data.second());\n+            }\n+        }\n+    }\n+\n+    private Map<String, Boolean> getVlanToPersistenceMapForVM(long vmId) {\n+        List<UserVmJoinVO> userVmJoinVOS = userVmJoinDao.searchByIds(vmId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792dda1cc4ddb03b870f2acf51b238618c53c44d"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc5MDc3NDEz", "url": "https://github.com/apache/cloudstack/pull/4561#pullrequestreview-579077413", "createdAt": "2021-01-29T09:27:41Z", "commit": {"oid": "792dda1cc4ddb03b870f2acf51b238618c53c44d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQwOToyNzo0MlrOIcb2bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQwOToyNzo0MlrOIcb2bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjY4NzM0Mg==", "bodyText": "to be clear, move this 'for' block to else case of \"userVmJoinVOS.isEmpty()\" or vice versa", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r566687342", "createdAt": "2021-01-29T09:27:42Z", "author": {"login": "sureshanaparti"}, "path": "engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java", "diffHunk": "@@ -1827,6 +1848,63 @@ private void orchestrateStop(final String vmUuid, final boolean cleanUpEvenIfUna\n         advanceStop(vm, cleanUpEvenIfUnableToStop);\n     }\n \n+    private void getPersistenceMap(Map<String, Boolean> vlanToPersistenceMap, NetworkVO networkVO) {\n+        NetworkOfferingVO offeringVO = networkOfferingDao.findById(networkVO.getNetworkOfferingId());\n+        if (offeringVO != null) {\n+            Pair<String, Boolean> data = getVMNetworkDetails(networkVO, offeringVO.isPersistent());\n+            Boolean shouldDeleteNwResource = (MapUtils.isNotEmpty(vlanToPersistenceMap) && data != null) ? vlanToPersistenceMap.get(data.first()) : null;\n+            if (data != null && (shouldDeleteNwResource == null || shouldDeleteNwResource)) {\n+                vlanToPersistenceMap.put(data.first(), data.second());\n+            }\n+        }\n+    }\n+\n+    private Map<String, Boolean> getVlanToPersistenceMapForVM(long vmId) {\n+        List<UserVmJoinVO> userVmJoinVOS = userVmJoinDao.searchByIds(vmId);\n+        Map<String, Boolean> vlanToPersistenceMap = new HashMap<>();\n+        for (UserVmJoinVO userVmJoinVO : userVmJoinVOS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792dda1cc4ddb03b870f2acf51b238618c53c44d"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc5MDg0MzAw", "url": "https://github.com/apache/cloudstack/pull/4561#pullrequestreview-579084300", "createdAt": "2021-01-29T09:36:36Z", "commit": {"oid": "792dda1cc4ddb03b870f2acf51b238618c53c44d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQwOTozNjozNlrOIccLCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQwOTozNjozNlrOIccLCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjY5MjYxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<ClusterVO> clusterVOS = clusterDao.listClustersByDcId(dcId);\n          \n          \n            \n                    List<ClusterVO> clusterVOs = clusterDao.listClustersByDcId(dcId);", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r566692617", "createdAt": "2021-01-29T09:36:36Z", "author": {"login": "sureshanaparti"}, "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -1187,6 +1202,86 @@ boolean isNetworkImplemented(final NetworkVO network) {\n         return implemented;\n     }\n \n+    /**\n+     *\n+     * Creates a dummy NicTO object which is used by the respective hypervisors to setup network elements / resources\n+     * - bridges(KVM), VLANs(Xen) and portgroups(VMWare) for L2 network\n+     */\n+    private NicTO createNicTOFromNetworkAndOffering(NetworkVO networkVO, NetworkOfferingVO networkOfferingVO, HostVO hostVO) {\n+        NicTO to = new NicTO();\n+        to.setName(_networkModel.getNetworkTag(hostVO.getHypervisorType(), networkVO));\n+        to.setBroadcastType(networkVO.getBroadcastDomainType());\n+        to.setType(networkVO.getTrafficType());\n+        to.setBroadcastUri(networkVO.getBroadcastUri());\n+        to.setIsolationuri(networkVO.getBroadcastUri());\n+        to.setNetworkRateMbps(_configMgr.getNetworkOfferingNetworkRate(networkOfferingVO.getId(), networkVO.getDataCenterId()));\n+        to.setSecurityGroupEnabled(_networkModel.isSecurityGroupSupportedInNetwork(networkVO));\n+        return to;\n+    }\n+\n+    private Pair<Boolean, NicTO> isNtwConfiguredInCluster(HostVO hostVO, Map<Long, List<Long>> clusterToHostsMap, NetworkVO networkVO, NetworkOfferingVO networkOfferingVO) {\n+        Long clusterId = hostVO.getClusterId();\n+        List<Long> hosts = clusterToHostsMap.get(clusterId);\n+        if (hosts == null) {\n+            hosts = new ArrayList<>();\n+        }\n+        if (hostVO.getHypervisorType() == HypervisorType.KVM || hostVO.getHypervisorType() == HypervisorType.XenServer ) {\n+            hosts.add(hostVO.getId());\n+            clusterToHostsMap.put(clusterId, hosts);\n+            return new Pair<>(false, createNicTOFromNetworkAndOffering(networkVO, networkOfferingVO, hostVO));\n+        }\n+        if (hosts != null && !hosts.isEmpty()) {\n+            return new Pair<>(true, createNicTOFromNetworkAndOffering(networkVO, networkOfferingVO, hostVO));\n+        }\n+        hosts.add(hostVO.getId());\n+        clusterToHostsMap.put(clusterId, hosts);\n+        return new Pair<>(false, createNicTOFromNetworkAndOffering(networkVO, networkOfferingVO, hostVO));\n+    }\n+\n+    private void setupPersistentNetwork(NetworkVO network, NetworkOfferingVO offering, Long dcId) throws AgentUnavailableException, OperationTimedoutException {\n+        List<ClusterVO> clusterVOS = clusterDao.listClustersByDcId(dcId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792dda1cc4ddb03b870f2acf51b238618c53c44d"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc5MjgzNDMx", "url": "https://github.com/apache/cloudstack/pull/4561#pullrequestreview-579283431", "createdAt": "2021-01-29T14:03:58Z", "commit": {"oid": "792dda1cc4ddb03b870f2acf51b238618c53c44d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxNDowMzo1OFrOIclV2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxNDowMzo1OFrOIclV2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg0Mjg0MQ==", "bodyText": "potential NPE issue below. continue missing here ? please check.", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r566842841", "createdAt": "2021-01-29T14:03:58Z", "author": {"login": "sureshanaparti"}, "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -2864,6 +2962,33 @@ public boolean shutdownNetworkElementsAndResources(final ReservationContext cont\n         return success;\n     }\n \n+    private void cleanupPersistentnNetworkResources(NetworkVO network) {\n+        long networkOfferingId = network.getNetworkOfferingId();\n+        NetworkOfferingVO offering = _networkOfferingDao.findById(networkOfferingId);\n+        if (offering != null) {\n+            if (networkMeetsPersistenceCriteria(network, offering, true) &&\n+                    _networksDao.getOtherPersistentNetworksCount(network.getId(), network.getBroadcastUri().toString(), offering.isPersistent()) == 0) {\n+                List<HostVO> hosts = resourceManager.listAllUpAndEnabledHostsInOneZoneByType(Host.Type.Routing, network.getDataCenterId());\n+                for (HostVO host : hosts) {\n+                    try {\n+                        NicTO to = createNicTOFromNetworkAndOffering(network, offering, host);\n+                        CleanupPersistentNetworkResourceCommand cmd = new CleanupPersistentNetworkResourceCommand(to);\n+                        CleanupPersistentNetworkResourceAnswer answer = (CleanupPersistentNetworkResourceAnswer) _agentMgr.send(host.getId(), cmd);\n+                        if (answer == null) {\n+                            s_logger.warn(\"Unable to get an answer to the CleanupPersistentNetworkResourceCommand from agent:\" + host.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792dda1cc4ddb03b870f2acf51b238618c53c44d"}, "originalPosition": 210}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc5Mjg2MjI1", "url": "https://github.com/apache/cloudstack/pull/4561#pullrequestreview-579286225", "createdAt": "2021-01-29T14:07:14Z", "commit": {"oid": "792dda1cc4ddb03b870f2acf51b238618c53c44d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxNDowNzoxNFrOIcldfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxNDowNzoxNFrOIcldfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg0NDc5OQ==", "bodyText": "continue may not be required here", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r566844799", "createdAt": "2021-01-29T14:07:14Z", "author": {"login": "sureshanaparti"}, "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -1187,6 +1202,86 @@ boolean isNetworkImplemented(final NetworkVO network) {\n         return implemented;\n     }\n \n+    /**\n+     *\n+     * Creates a dummy NicTO object which is used by the respective hypervisors to setup network elements / resources\n+     * - bridges(KVM), VLANs(Xen) and portgroups(VMWare) for L2 network\n+     */\n+    private NicTO createNicTOFromNetworkAndOffering(NetworkVO networkVO, NetworkOfferingVO networkOfferingVO, HostVO hostVO) {\n+        NicTO to = new NicTO();\n+        to.setName(_networkModel.getNetworkTag(hostVO.getHypervisorType(), networkVO));\n+        to.setBroadcastType(networkVO.getBroadcastDomainType());\n+        to.setType(networkVO.getTrafficType());\n+        to.setBroadcastUri(networkVO.getBroadcastUri());\n+        to.setIsolationuri(networkVO.getBroadcastUri());\n+        to.setNetworkRateMbps(_configMgr.getNetworkOfferingNetworkRate(networkOfferingVO.getId(), networkVO.getDataCenterId()));\n+        to.setSecurityGroupEnabled(_networkModel.isSecurityGroupSupportedInNetwork(networkVO));\n+        return to;\n+    }\n+\n+    private Pair<Boolean, NicTO> isNtwConfiguredInCluster(HostVO hostVO, Map<Long, List<Long>> clusterToHostsMap, NetworkVO networkVO, NetworkOfferingVO networkOfferingVO) {\n+        Long clusterId = hostVO.getClusterId();\n+        List<Long> hosts = clusterToHostsMap.get(clusterId);\n+        if (hosts == null) {\n+            hosts = new ArrayList<>();\n+        }\n+        if (hostVO.getHypervisorType() == HypervisorType.KVM || hostVO.getHypervisorType() == HypervisorType.XenServer ) {\n+            hosts.add(hostVO.getId());\n+            clusterToHostsMap.put(clusterId, hosts);\n+            return new Pair<>(false, createNicTOFromNetworkAndOffering(networkVO, networkOfferingVO, hostVO));\n+        }\n+        if (hosts != null && !hosts.isEmpty()) {\n+            return new Pair<>(true, createNicTOFromNetworkAndOffering(networkVO, networkOfferingVO, hostVO));\n+        }\n+        hosts.add(hostVO.getId());\n+        clusterToHostsMap.put(clusterId, hosts);\n+        return new Pair<>(false, createNicTOFromNetworkAndOffering(networkVO, networkOfferingVO, hostVO));\n+    }\n+\n+    private void setupPersistentNetwork(NetworkVO network, NetworkOfferingVO offering, Long dcId) throws AgentUnavailableException, OperationTimedoutException {\n+        List<ClusterVO> clusterVOS = clusterDao.listClustersByDcId(dcId);\n+        List<HostVO> hosts = resourceManager.listAllUpAndEnabledHostsInOneZoneByType(Host.Type.Routing, dcId);\n+        Map<Long, List<Long>> clusterToHostsMap = new HashMap<>();\n+\n+        for (HostVO host : hosts) {\n+            try {\n+                Pair<Boolean, NicTO> networkCfgStateAndDetails = isNtwConfiguredInCluster(host, clusterToHostsMap, network, offering);\n+                if (networkCfgStateAndDetails.first()) {\n+                    continue;\n+                }\n+                NicTO to = networkCfgStateAndDetails.second();\n+                SetupPersistentNetworkCommand cmd = new SetupPersistentNetworkCommand(to);\n+                final SetupPersistentNetworkAnswer answer = (SetupPersistentNetworkAnswer) _agentMgr.send(host.getId(), cmd);\n+\n+                if (answer == null) {\n+                    s_logger.warn(\"Unable to get an answer to the SetupPersistentNetworkCommand from agent:\" + host.getId());\n+                    clusterToHostsMap.get(host.getClusterId()).remove(host.getId());\n+                    continue;\n+                }\n+\n+                if (!answer.getResult()) {\n+                    s_logger.warn(\"Unable to setup agent \" + host.getId() + \" due to \" + answer.getDetails());\n+                    clusterToHostsMap.get(host.getClusterId()).remove(host.getId());\n+                    continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792dda1cc4ddb03b870f2acf51b238618c53c44d"}, "originalPosition": 137}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc5Mjg3MDM5", "url": "https://github.com/apache/cloudstack/pull/4561#pullrequestreview-579287039", "createdAt": "2021-01-29T14:08:11Z", "commit": {"oid": "792dda1cc4ddb03b870f2acf51b238618c53c44d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxNDowODoxMVrOIclgEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxNDowODoxMVrOIclgEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg0NTQ1Nw==", "bodyText": "white spaces here", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r566845457", "createdAt": "2021-01-29T14:08:11Z", "author": {"login": "sureshanaparti"}, "path": "engine/schema/src/main/java/com/cloud/network/dao/NetworkDaoImpl.java", "diffHunk": "@@ -265,6 +276,8 @@ protected void init() {\n         join10.and(\"vpc\", join10.entity().getVpcId(), Op.EQ);\n         PrivateNetworkSearch.join(\"vpcgateways\", join10, PrivateNetworkSearch.entity().getId(), join10.entity().getNetworkId(), JoinBuilder.JoinType.INNER);\n         PrivateNetworkSearch.done();\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792dda1cc4ddb03b870f2acf51b238618c53c44d"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc5MjkzMjg0", "url": "https://github.com/apache/cloudstack/pull/4561#pullrequestreview-579293284", "createdAt": "2021-01-29T14:15:17Z", "commit": {"oid": "792dda1cc4ddb03b870f2acf51b238618c53c44d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxNDoxNToxN1rOIclxEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxNDoxNToxN1rOIclxEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg0OTgwOA==", "bodyText": "could see same methods getVlanIdFromBridgeName() and shouldDeleteBridge() defined/implemented in the classes - LibvirtMigrateCommandWrapper, LibvirtStopCommandWrapper, LibvirtUnPlugNicCommandWrapper.\ncan you defined these in a common class (may be some util class) and use them across.", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r566849808", "createdAt": "2021-01-29T14:15:17Z", "author": {"login": "sureshanaparti"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtUnPlugNicCommandWrapper.java", "diffHunk": "@@ -82,4 +87,22 @@ public Answer execute(final UnPlugNicCommand command, final LibvirtComputingReso\n             }\n         }\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792dda1cc4ddb03b870f2acf51b238618c53c44d"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc5Mjk0MjI0", "url": "https://github.com/apache/cloudstack/pull/4561#pullrequestreview-579294224", "createdAt": "2021-01-29T14:16:22Z", "commit": {"oid": "792dda1cc4ddb03b870f2acf51b238618c53c44d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxNDoxNjoyM1rOIclz7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxNDoxNjoyM1rOIclz7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg1MDU0MQ==", "bodyText": "add the reason for exception in the message here", "url": "https://github.com/apache/cloudstack/pull/4561#discussion_r566850541", "createdAt": "2021-01-29T14:16:23Z", "author": {"login": "sureshanaparti"}, "path": "plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/resource/VmwareResource.java", "diffHunk": "@@ -617,6 +621,21 @@ public Answer executeRequest(Command cmd) {\n         return answer;\n     }\n \n+    private Answer execute(SetupPersistentNetworkCommand cmd) {\n+        VmwareHypervisorHost host = getHyperHost(getServiceContext());\n+        String hostname = null;\n+        VmwareContext context = getServiceContext();\n+        HostMO hostMO = new HostMO(context, host.getMor());\n+\n+        try {\n+            prepareNetworkFromNicInfo(hostMO, cmd.getNic(), false, null);\n+            hostname =  host.getHyperHostName();\n+        } catch (Exception e) {\n+            return new SetupPersistentNetworkAnswer(cmd, false, \"failed to get response\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792dda1cc4ddb03b870f2acf51b238618c53c44d"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4500a2dc02ac73e4828d42adbf9724d128dbcf61", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/4500a2dc02ac73e4828d42adbf9724d128dbcf61", "committedDate": "2021-02-01T11:36:27Z", "message": "Address review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5d15fe75df6a4e99228a157705a08f2e80c1ae3c", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/5d15fe75df6a4e99228a157705a08f2e80c1ae3c", "committedDate": "2021-02-01T05:02:34Z", "message": "Address review comments"}, "afterCommit": {"oid": "4500a2dc02ac73e4828d42adbf9724d128dbcf61", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/4500a2dc02ac73e4828d42adbf9724d128dbcf61", "committedDate": "2021-02-01T11:36:27Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgwMjcwNjU3", "url": "https://github.com/apache/cloudstack/pull/4561#pullrequestreview-580270657", "createdAt": "2021-02-01T11:44:10Z", "commit": {"oid": "4500a2dc02ac73e4828d42adbf9724d128dbcf61"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxMDA1MTk5", "url": "https://github.com/apache/cloudstack/pull/4561#pullrequestreview-581005199", "createdAt": "2021-02-02T05:53:52Z", "commit": {"oid": "4500a2dc02ac73e4828d42adbf9724d128dbcf61"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "551d74bb72903ddfba2085ee3efe169b1ce22fb9", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/551d74bb72903ddfba2085ee3efe169b1ce22fb9", "committedDate": "2021-02-09T13:18:13Z", "message": "Merge branch 'master' of https://github.com/apache/cloudstack into persistent-nw-enhance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54da999182db4f6a4e655541ee32acb77f5aea0e", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/54da999182db4f6a4e655541ee32acb77f5aea0e", "committedDate": "2021-02-09T13:18:38Z", "message": "API discovery: Prevent overwrite of API parameters in case the API names are the same"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d659db8e7c3e3776390b0d54afe36e993a795013", "author": {"user": null}, "url": "https://github.com/apache/cloudstack/commit/d659db8e7c3e3776390b0d54afe36e993a795013", "committedDate": "2021-02-12T10:52:12Z", "message": "Merge branch 'master' of https://github.com/apache/cloudstack into persistent-nw-enhance"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4644, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}