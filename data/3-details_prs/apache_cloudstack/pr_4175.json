{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MjI1Nzc0", "number": 4175, "title": "Redfish Client & Redfish OOBM Driver", "bodyText": "Description\n\nThis PR adds support for the OOBM Redfish protocol, implementing a Java client to send HTTP requests to Redfish supported systems.\nImplementation overview:\n\nRedfish Java client: a Java Client for Redfish that makes Redfish actions available to the HA workflow via an OOB driver.\nOOB Redfish driver: a new Out-of-band driver was created for Redfish, allowing to integrate the Redfish Client with the CloudStack Out-of-band management implementation.\n\n\n\nFixes: #3624\nThanks note: this implementation had valuable help from our friends at Yourhosting.\nTypes of changes\n\n\n Breaking change (fix or feature that would cause existing functionality to change)\n New feature (non-breaking change which adds functionality)\n Bug fix (non-breaking change which fixes an issue)\n Enhancement (improves an existing feature and functionality)\n Cleanup (Code refactoring and cleanup, that may add test cases)\n\nScreenshots (if appropriate):\nConfigure OOBM with Redfish driver\n\nCheck OOBM host tab\n\nTest powering On and Off hosts. Host status is properly shown\n\nHow Has This Been Tested?\n\n\n\nWe have been able to test on Dell and Supermicro machines and it works fine:\n\nvia the CloudStack UI, enable Redfish oob driver for a KVM node with support for Redfish\nverified that ACS can retrieve the redfish system ID and system power state\npowering Off node works as expected, host state transition worked well and the host was indeed powered off\npowering On also worked as expected, CloudStack host state transition as expected, host is indeed up again", "createdAt": "2020-06-24T13:57:49Z", "url": "https://github.com/apache/cloudstack/pull/4175", "merged": true, "mergeCommit": {"oid": "ba6e2ac843b55afdfe4be8ef1dd01ba830c51613"}, "closed": true, "closedAt": "2020-07-30T05:21:18Z", "author": {"login": "GabrielBrascher"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuZqB8AH2gAyNDM5MjI1Nzc0OmQyMjllMWRiM2E1NGMyNTllNTU0YjQxMzNhMjAxNGI2NTQwZTI5MTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5XJR1gFqTQ1NjY4MDc4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d229e1db3a54c259e554b4133a2014b6540e2918", "author": {"user": {"login": "GabrielBrascher", "name": "Gabriel Beims Br\u00e4scher"}}, "url": "https://github.com/apache/cloudstack/commit/d229e1db3a54c259e554b4133a2014b6540e2918", "committedDate": "2020-06-24T13:00:08Z", "message": "Redfish OOB implementation\n- OOB Redfish Driver\n- Redfish Java Client"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODkzNjQy", "url": "https://github.com/apache/cloudstack/pull/4175#pullrequestreview-436893642", "createdAt": "2020-06-24T18:16:24Z", "commit": {"oid": "d229e1db3a54c259e554b4133a2014b6540e2918"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODoxNjoyNFrOGodsqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODoxNjoyNFrOGodsqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4Mjc5Mg==", "bodyText": "This Exception doesn't say what the code does. A valid hostname is also accepted. Not only IPv4 or IPv6 addresses.", "url": "https://github.com/apache/cloudstack/pull/4175#discussion_r445082792", "createdAt": "2020-06-24T18:16:24Z", "author": {"login": "wido"}, "path": "utils/src/main/java/org/apache/cloudstack/utils/redfish/RedfishClient.java", "diffHunk": "@@ -0,0 +1,378 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package org.apache.cloudstack.utils.redfish;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyManagementException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+\n+import javax.net.ssl.HostnameVerifier;\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSession;\n+import javax.net.ssl.TrustManager;\n+\n+import com.cloud.utils.nio.TrustAllManager;\n+import org.apache.commons.httpclient.HttpStatus;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.apache.http.conn.ssl.SSLConnectionSocketFactory;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.protocol.HTTP;\n+import org.apache.log4j.Logger;\n+\n+import com.cloud.utils.net.NetUtils;\n+import com.google.common.net.InternetDomainName;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+\n+/**\n+ * Provides support to a set of REST requests that can be sent to a Redfish Server. </br>\n+ * RedfishClient allows to gather the server Power State, and execute Reset\n+ * actions such as 'On', 'ForceOff', 'GracefulShutdown', 'GracefulRestart' etc.\n+ */\n+public class RedfishClient {\n+\n+    private static final Logger LOGGER = Logger.getLogger(RedfishClient.class);\n+\n+    private String username;\n+    private String password;\n+    private boolean useHttps;\n+    private boolean ignoreSsl;\n+\n+    private final static String SYSTEMS_URL_PATH = \"redfish/v1/Systems/\";\n+    private final static String COMPUTER_SYSTEM_RESET_URL_PATH = \"/Actions/ComputerSystem.Reset\";\n+    private final static String REDFISH_RESET_TYPE = \"ResetType\";\n+    private final static String POWER_STATE = \"PowerState\";\n+    private final static String APPLICATION_JSON = \"application/json\";\n+    private final static String ACCEPT = \"accept\";\n+    private final static String ODATA_ID = \"@odata.id\";\n+    private final static String MEMBERS = \"Members\";\n+    private final static String EXPECTED_HTTP_STATUS = \"2XX\";\n+\n+    /**\n+     * Redfish Command type: </br>\n+     * <b>ComputerSystemReset:</b> execute Redfish reset commands ({@link RedfishResetCmd}). </br>\n+     * <b>GetSystemId:</b> get the system ID. </br>\n+     * <b>GetPowerState:</b> used for get the system power state. </br>\n+     */\n+    public enum\n+    RedfishCmdType {\n+        ComputerSystemReset, GetSystemId, GetPowerState\n+    }\n+\n+    /**\n+     * Redfish System Power State: </br>\n+     * <b>Off:</b> The state is powered Off. </br>\n+     * <b>On:</b> The state is powered On. </br>\n+     * <b>PoweringOff:</b> A temporary state between On and Off. </br>\n+     * <b>PoweringOn:</b> A temporary state between Off and On.\n+     */\n+    public enum RedfishPowerState {\n+        On, Off, PoweringOn, PoweringOff\n+    }\n+\n+    /**\n+     * <ul>\n+     * <li><b>ForceOff:</b> Turn the unit off immediately (non-graceful shutdown).\n+     * <li><b>ForceOn:</b> Turn the unit on immediately.\n+     * <li><b>ForceRestart:</b> Perform an immediate (non-graceful) shutdown,\n+     * followed by a restart.\n+     * <li><b>GracefulRestart:</b> Perform a graceful shutdown followed by a restart\n+     * of the system.\n+     * <li><b>GracefulShutdown:</b> Perform a graceful shutdown and power off.\n+     * <li><b>Nmi:</b> Generate a Diagnostic Interrupt (usually an NMI on x86\n+     * systems) to cease normal operations, perform diagnostic actions and typically\n+     * halt the system.\n+     * <li><b>On:</b> Turn the unit on.\n+     * <li><b>PowerCycle:</b> Perform a power cycle of the unit.\n+     * <li><b>PushPowerButton:</b> Simulate the pressing of the physical power\n+     * button on this unit.\n+     * </ul>\n+     */\n+    public enum RedfishResetCmd {\n+        ForceOff, ForceOn, ForceRestart, GracefulRestart, GracefulShutdown, Nmi, On, PowerCycle, PushPowerButton\n+    }\n+\n+    public RedfishClient(String username, String password, boolean useHttps, boolean ignoreSsl) {\n+        this.username = username;\n+        this.password = password;\n+        this.useHttps = useHttps;\n+        this.ignoreSsl = ignoreSsl;\n+    }\n+\n+    protected String buildRequestUrl(String hostAddress, RedfishCmdType cmd, String resourceId) {\n+        String urlHostAddress = validateAddressAndPrepareForUrl(hostAddress);\n+        String requestPath = getRequestPathForCommand(cmd, resourceId);\n+\n+        if (useHttps) {\n+            return String.format(\"https://%s/%s\", urlHostAddress, requestPath);\n+        } else {\n+            return String.format(\"http://%s/%s\", urlHostAddress, requestPath);\n+        }\n+    }\n+\n+    /**\n+     * Executes a GET request for the given URL address.\n+     */\n+    protected HttpResponse executeGetRequest(String url) {\n+        URIBuilder builder = null;\n+        HttpGet httpReq = null;\n+\n+        try {\n+            builder = new URIBuilder(url);\n+            httpReq = new HttpGet(builder.build());;\n+            httpReq.addHeader(ACCEPT, APPLICATION_JSON);\n+            String encoding = basicAuth(username, password);\n+            httpReq.addHeader(\"Authorization\", encoding);\n+        } catch (URISyntaxException e) {\n+            throw new RedfishException(String.format(\"Failed to create URI for GET request [URL: %s] due to exception.\", url), e);\n+        }\n+\n+        HttpClient client = null;\n+        if (ignoreSsl) {\n+            try {\n+                client = ignoreSSLCertValidator();\n+            } catch (NoSuchAlgorithmException | KeyManagementException e) {\n+                throw new RedfishException(String.format(\"Failed to handle SSL Cert validator on GET request [URL: %s] due to exception.\", url), e);\n+            }\n+        } else {\n+            client = HttpClientBuilder.create().build();\n+        }\n+        try {\n+            return client.execute(httpReq);\n+        } catch (IOException e) {\n+            throw new RedfishException(String.format(\"Failed to execute GET request [URL: %s] due to exception.\", url), e);\n+        }\n+    }\n+\n+    private static String basicAuth(String username, String password) {\n+        return \"Basic \" + Base64.getEncoder().encodeToString((username + \":\" + password).getBytes());\n+    }\n+\n+    /**\n+     * Executes a POST request for the given URL address and Json object.\n+     */\n+    private HttpResponse executePostRequest(String url, JsonObject jsonToSend) {\n+        HttpPost httpReq = null;\n+        try {\n+            URIBuilder builder = new URIBuilder(url);\n+            httpReq = new HttpPost(builder.build());\n+            httpReq.addHeader(ACCEPT, APPLICATION_JSON);\n+            httpReq.addHeader(HTTP.CONTENT_TYPE, APPLICATION_JSON);\n+            String encoding = basicAuth(username, password);\n+            httpReq.addHeader(\"Authorization\", encoding);\n+            httpReq.setEntity(new StringEntity(jsonToSend.toString()));\n+        } catch (URISyntaxException | UnsupportedEncodingException e) {\n+            throw new RedfishException(String.format(\"Failed to create URI for POST request [URL: %s] due to exception.\", url), e);\n+        }\n+\n+        HttpClient client = null;\n+        if (ignoreSsl) {\n+            try {\n+                client = ignoreSSLCertValidator();\n+            } catch (NoSuchAlgorithmException | KeyManagementException e) {\n+                throw new RedfishException(String.format(\"Failed to handle SSL Cert validator on POST request [URL: %s] due to exception.\", url), e);\n+            }\n+        } else {\n+            client = HttpClientBuilder.create().build();\n+        }\n+\n+        try {\n+            return client.execute(httpReq);\n+        } catch (IOException e) {\n+            throw new RedfishException(String.format(\"Failed to execute POST request [URL: %s] due to exception.\", url, e));\n+        }\n+    }\n+\n+    /**\n+     *  Returns the proper URL path for the given Redfish command ({@link RedfishCmdType}).\n+     */\n+    private String getRequestPathForCommand(RedfishCmdType cmd, String resourceId) {\n+        switch (cmd) {\n+        case GetSystemId:\n+            return SYSTEMS_URL_PATH;\n+        case GetPowerState:\n+            if (StringUtils.isBlank(resourceId)) {\n+                throw new RedfishException(String.format(\"Command '%s' requires a valid resource ID '%s'.\", cmd, resourceId));\n+            }\n+            return String.format(\"%s%s\", SYSTEMS_URL_PATH, resourceId);\n+        case ComputerSystemReset:\n+            if (StringUtils.isBlank(resourceId)) {\n+                throw new RedfishException(String.format(\"Command '%s' requires a valid resource ID '%s'.\", cmd, resourceId));\n+            }\n+            return String.format(\"%s%s%s\", SYSTEMS_URL_PATH, resourceId, COMPUTER_SYSTEM_RESET_URL_PATH);\n+        default:\n+            throw new RedfishException(String.format(\"Redfish client does not support command '%s'.\", cmd));\n+        }\n+    }\n+\n+    /**\n+     * Validates the host address. It needs to be either a valid host domain name, or a valid IP address (IPv6 or IPv4).\n+     */\n+    protected String validateAddressAndPrepareForUrl(String hostAddress) {\n+        if (NetUtils.isValidIp6(hostAddress)) {\n+            return String.format(\"[%s]\", hostAddress);\n+        } else if (NetUtils.isValidIp4(hostAddress)) {\n+            return hostAddress;\n+        } else if (InternetDomainName.isValid(hostAddress)) {\n+            return hostAddress;\n+        } else {\n+            throw new RedfishException(String.format(\"Redfish host address '%s' is not a valid IPv4 or IPv6 address\", hostAddress));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d229e1db3a54c259e554b4133a2014b6540e2918"}, "originalPosition": 252}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9749136b808238800c085597d9461c0b99e1d61d", "author": {"user": {"login": "GabrielBrascher", "name": "Gabriel Beims Br\u00e4scher"}}, "url": "https://github.com/apache/cloudstack/commit/9749136b808238800c085597d9461c0b99e1d61d", "committedDate": "2020-06-24T19:01:16Z", "message": "Address reviewer: enhance log message on validateAddressAndPrepareForUrl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cda4182f68f73be34fda566bd5458dadc73552ce", "author": {"user": {"login": "GabrielBrascher", "name": "Gabriel Beims Br\u00e4scher"}}, "url": "https://github.com/apache/cloudstack/commit/cda4182f68f73be34fda566bd5458dadc73552ce", "committedDate": "2020-07-03T17:26:00Z", "message": "Extract duplicated lines into method."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNTg5NDQy", "url": "https://github.com/apache/cloudstack/pull/4175#pullrequestreview-442589442", "createdAt": "2020-07-04T05:47:49Z", "commit": {"oid": "cda4182f68f73be34fda566bd5458dadc73552ce"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NjgwNzg2", "url": "https://github.com/apache/cloudstack/pull/4175#pullrequestreview-456680786", "createdAt": "2020-07-28T14:17:43Z", "commit": {"oid": "cda4182f68f73be34fda566bd5458dadc73552ce"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3892, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}