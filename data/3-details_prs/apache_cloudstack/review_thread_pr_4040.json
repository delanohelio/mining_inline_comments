{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NjExMDMz", "number": 4040, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzo0NDoxOFrOD3gy9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjo1ODoyOFrOD5Y_lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTM1NjA2OnYy", "diffSide": "RIGHT", "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtPvlanSetupCommandWrapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzo0NDoxOFrOGNzTAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNTozNjo0MVrOGQbBEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyNTEyMg==", "bodyText": "no pokemon catch-um-all", "url": "https://github.com/apache/cloudstack/pull/4040#discussion_r417125122", "createdAt": "2020-04-29T07:44:18Z", "author": {"login": "DaanHoogland"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtPvlanSetupCommandWrapper.java", "diffHunk": "@@ -66,41 +58,29 @@ public Answer execute(final PvlanSetupCommand command, final LibvirtComputingRes\n                 final String ovsPvlanDhcpHostPath = libvirtComputingResource.getOvsPvlanDhcpHostPath();\n                 final Script script = new Script(ovsPvlanDhcpHostPath, timeout, s_logger);\n \n-                if (add) {\n-                    final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n-                    final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(dhcpName);\n-\n-                    final List<InterfaceDef> ifaces = libvirtComputingResource.getInterfaces(conn, dhcpName);\n-                    final InterfaceDef guestNic = ifaces.get(0);\n-                    script.add(opr, \"-b\", guestBridgeName, \"-p\", primaryPvlan, \"-i\", isolatedPvlan, \"-n\", dhcpName, \"-d\", dhcpIp, \"-m\", dhcpMac, \"-I\",\n-                            guestNic.getDevName());\n-                } else {\n-                    script.add(opr, \"-b\", guestBridgeName, \"-p\", primaryPvlan, \"-i\", isolatedPvlan, \"-n\", dhcpName, \"-d\", dhcpIp, \"-m\", dhcpMac);\n-                }\n-\n+                script.add(opr, pvlanType, \"-b\", guestBridgeName, \"-p\", primaryPvlan, \"-s\", isolatedPvlan, \"-m\", dhcpMac, \"-d\", dhcpIp);\n                 result = script.execute();\n \n                 if (result != null) {\n                     s_logger.warn(\"Failed to program pvlan for dhcp server with mac \" + dhcpMac);\n-                    return new Answer(command, false, result);\n                 } else {\n                     s_logger.info(\"Programmed pvlan for dhcp server with mac \" + dhcpMac);\n                 }\n-            } else if (command.getType() == PvlanSetupCommand.Type.VM) {\n-                final String ovsPvlanVmPath = libvirtComputingResource.getOvsPvlanVmPath();\n-\n-                final Script script = new Script(ovsPvlanVmPath, timeout, s_logger);\n-                script.add(opr, pvlanType, \"-b\", guestBridgeName, \"-p\", primaryPvlan, \"-s\", isolatedPvlan, \"-v\", vmMac);\n-                result = script.execute();\n+            }\n \n-                if (result != null) {\n-                    s_logger.warn(\"Failed to program pvlan for vm with mac \" + vmMac);\n-                    return new Answer(command, false, result);\n-                } else {\n-                    s_logger.info(\"Programmed pvlan for vm with mac \" + vmMac);\n-                }\n+            // We run this even for DHCP servers since they're all vms after all\n+            final String ovsPvlanVmPath = libvirtComputingResource.getOvsPvlanVmPath();\n+            final Script script = new Script(ovsPvlanVmPath, timeout, s_logger);\n+            script.add(opr, pvlanType, \"-b\", guestBridgeName, \"-p\", primaryPvlan, \"-s\", isolatedPvlan, \"-m\", vmMac);\n+            result = script.execute();\n+\n+            if (result != null) {\n+                s_logger.warn(\"Failed to program pvlan for vm with mac \" + vmMac);\n+                return new Answer(command, false, result);\n+            } else {\n+                s_logger.info(\"Programmed pvlan for vm with mac \" + vmMac);\n             }\n-        } catch (final LibvirtException e) {\n+        } catch (final Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e163c775a125951f4318c2c765dcbcc5ba2c307d"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg3MzA0MA==", "bodyText": "fixed!", "url": "https://github.com/apache/cloudstack/pull/4040#discussion_r419873040", "createdAt": "2020-05-05T05:36:41Z", "author": {"login": "davidjumani"}, "path": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtPvlanSetupCommandWrapper.java", "diffHunk": "@@ -66,41 +58,29 @@ public Answer execute(final PvlanSetupCommand command, final LibvirtComputingRes\n                 final String ovsPvlanDhcpHostPath = libvirtComputingResource.getOvsPvlanDhcpHostPath();\n                 final Script script = new Script(ovsPvlanDhcpHostPath, timeout, s_logger);\n \n-                if (add) {\n-                    final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n-                    final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(dhcpName);\n-\n-                    final List<InterfaceDef> ifaces = libvirtComputingResource.getInterfaces(conn, dhcpName);\n-                    final InterfaceDef guestNic = ifaces.get(0);\n-                    script.add(opr, \"-b\", guestBridgeName, \"-p\", primaryPvlan, \"-i\", isolatedPvlan, \"-n\", dhcpName, \"-d\", dhcpIp, \"-m\", dhcpMac, \"-I\",\n-                            guestNic.getDevName());\n-                } else {\n-                    script.add(opr, \"-b\", guestBridgeName, \"-p\", primaryPvlan, \"-i\", isolatedPvlan, \"-n\", dhcpName, \"-d\", dhcpIp, \"-m\", dhcpMac);\n-                }\n-\n+                script.add(opr, pvlanType, \"-b\", guestBridgeName, \"-p\", primaryPvlan, \"-s\", isolatedPvlan, \"-m\", dhcpMac, \"-d\", dhcpIp);\n                 result = script.execute();\n \n                 if (result != null) {\n                     s_logger.warn(\"Failed to program pvlan for dhcp server with mac \" + dhcpMac);\n-                    return new Answer(command, false, result);\n                 } else {\n                     s_logger.info(\"Programmed pvlan for dhcp server with mac \" + dhcpMac);\n                 }\n-            } else if (command.getType() == PvlanSetupCommand.Type.VM) {\n-                final String ovsPvlanVmPath = libvirtComputingResource.getOvsPvlanVmPath();\n-\n-                final Script script = new Script(ovsPvlanVmPath, timeout, s_logger);\n-                script.add(opr, pvlanType, \"-b\", guestBridgeName, \"-p\", primaryPvlan, \"-s\", isolatedPvlan, \"-v\", vmMac);\n-                result = script.execute();\n+            }\n \n-                if (result != null) {\n-                    s_logger.warn(\"Failed to program pvlan for vm with mac \" + vmMac);\n-                    return new Answer(command, false, result);\n-                } else {\n-                    s_logger.info(\"Programmed pvlan for vm with mac \" + vmMac);\n-                }\n+            // We run this even for DHCP servers since they're all vms after all\n+            final String ovsPvlanVmPath = libvirtComputingResource.getOvsPvlanVmPath();\n+            final Script script = new Script(ovsPvlanVmPath, timeout, s_logger);\n+            script.add(opr, pvlanType, \"-b\", guestBridgeName, \"-p\", primaryPvlan, \"-s\", isolatedPvlan, \"-m\", vmMac);\n+            result = script.execute();\n+\n+            if (result != null) {\n+                s_logger.warn(\"Failed to program pvlan for vm with mac \" + vmMac);\n+                return new Answer(command, false, result);\n+            } else {\n+                s_logger.info(\"Programmed pvlan for vm with mac \" + vmMac);\n             }\n-        } catch (final LibvirtException e) {\n+        } catch (final Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyNTEyMg=="}, "originalCommit": {"oid": "e163c775a125951f4318c2c765dcbcc5ba2c307d"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTA0MjE4OnYy", "diffSide": "LEFT", "path": "plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjo1Njo0MVrOGQoEMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzowNDo1MFrOGQoYJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4NjgzNA==", "bodyText": "why is this test no longer sensible?", "url": "https://github.com/apache/cloudstack/pull/4040#discussion_r420086834", "createdAt": "2020-05-05T12:56:41Z", "author": {"login": "DaanHoogland"}, "path": "plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java", "diffHunk": "@@ -4403,68 +4381,23 @@ public void testPvlanSetupCommandVm() {\n         assertFalse(answer.getResult());\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    @Test\n-    public void testPvlanSetupCommandDhcpException() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ac17250c78f5dcfeb7d2af4a26b6fd0e079164"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA5MTk0MQ==", "bodyText": "Since the old way used to call the libvirt library, it could potentially throw a LibvirtException. Now that it doesn't, theres no need to catch or test whether the exception has occoured", "url": "https://github.com/apache/cloudstack/pull/4040#discussion_r420091941", "createdAt": "2020-05-05T13:04:50Z", "author": {"login": "davidjumani"}, "path": "plugins/hypervisors/kvm/src/test/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResourceTest.java", "diffHunk": "@@ -4403,68 +4381,23 @@ public void testPvlanSetupCommandVm() {\n         assertFalse(answer.getResult());\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    @Test\n-    public void testPvlanSetupCommandDhcpException() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4NjgzNA=="}, "originalCommit": {"oid": "83ac17250c78f5dcfeb7d2af4a26b6fd0e079164"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTA0NjUyOnYy", "diffSide": "RIGHT", "path": "scripts/vm/network/ovs-pvlan-kvm-dhcp-host.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjo1Nzo1MFrOGQoG7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzowNjowNFrOGQobeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4NzUzMg==", "bodyText": "or `echo \"$0 $@ \" >>/tmp/pvlan' ?", "url": "https://github.com/apache/cloudstack/pull/4040#discussion_r420087532", "createdAt": "2020-05-05T12:57:50Z", "author": {"login": "DaanHoogland"}, "path": "scripts/vm/network/ovs-pvlan-kvm-dhcp-host.sh", "diffHunk": "@@ -0,0 +1,139 @@\n+#!/bin/bash\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+# \n+#   http://www.apache.org/licenses/LICENSE-2.0\n+# \n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#!/bin/bash\n+\n+# We're trying to do the impossible here by allowing pvlan on kvm / xen. As only God can do the impossible, and we've got too much ego to\n+# admit that we can't, we're just hacking our way around it.\n+# We're pretty much crafting two vlan headers, one with the primary vlan and the other with the secondary and with a few fancy rules\n+# it managed to work. But take note that the'res no checking over here for secondary vlan overlap. That has to be handled while\n+# creating the pvlan!!\n+\n+exec 2>&1\n+\n+usage() {\n+  printf \"Usage: %s: (-A|-D) (-P/I/C) -b <bridge/switch> -p <primary vlan> -s <secondary vlan> -m <VM MAC> -d <DHCP IP> -h \\n\" $(basename $0) >&2\n+  exit 2\n+}\n+\n+echo \"/usr/share/cloudstack-common/scripts/vm/network/ovs-pvlan-kvm-dhcp-host.sh $@ \" >> /tmp/pvlan", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ac17250c78f5dcfeb7d2af4a26b6fd0e079164"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA5Mjc5NA==", "bodyText": "Removed! Was there just for logging", "url": "https://github.com/apache/cloudstack/pull/4040#discussion_r420092794", "createdAt": "2020-05-05T13:06:04Z", "author": {"login": "davidjumani"}, "path": "scripts/vm/network/ovs-pvlan-kvm-dhcp-host.sh", "diffHunk": "@@ -0,0 +1,139 @@\n+#!/bin/bash\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+# \n+#   http://www.apache.org/licenses/LICENSE-2.0\n+# \n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#!/bin/bash\n+\n+# We're trying to do the impossible here by allowing pvlan on kvm / xen. As only God can do the impossible, and we've got too much ego to\n+# admit that we can't, we're just hacking our way around it.\n+# We're pretty much crafting two vlan headers, one with the primary vlan and the other with the secondary and with a few fancy rules\n+# it managed to work. But take note that the'res no checking over here for secondary vlan overlap. That has to be handled while\n+# creating the pvlan!!\n+\n+exec 2>&1\n+\n+usage() {\n+  printf \"Usage: %s: (-A|-D) (-P/I/C) -b <bridge/switch> -p <primary vlan> -s <secondary vlan> -m <VM MAC> -d <DHCP IP> -h \\n\" $(basename $0) >&2\n+  exit 2\n+}\n+\n+echo \"/usr/share/cloudstack-common/scripts/vm/network/ovs-pvlan-kvm-dhcp-host.sh $@ \" >> /tmp/pvlan", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4NzUzMg=="}, "originalCommit": {"oid": "83ac17250c78f5dcfeb7d2af4a26b6fd0e079164"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTA0OTE4OnYy", "diffSide": "RIGHT", "path": "scripts/vm/network/ovs-pvlan-kvm-vm.sh", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjo1ODoyOFrOGQoIjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzoxMDoyMFrOGQomgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4Nzk0OA==", "bodyText": "$0 $@?", "url": "https://github.com/apache/cloudstack/pull/4040#discussion_r420087948", "createdAt": "2020-05-05T12:58:28Z", "author": {"login": "DaanHoogland"}, "path": "scripts/vm/network/ovs-pvlan-kvm-vm.sh", "diffHunk": "@@ -0,0 +1,279 @@\n+#!/bin/bash\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+# \n+#   http://www.apache.org/licenses/LICENSE-2.0\n+# \n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#!/bin/bash\n+\n+# We're trying to do the impossible here by allowing pvlan on kvm / xen. As only God can do the impossible, and we've got too much ego to\n+# admit that we can't, we're just hacking our way around it.\n+# We're pretty much crafting two vlan headers, one with the primary vlan and the other with the secondary and with a few fancy rules\n+# it managed to work. But take note that the'res no checking over here for secondary vlan overlap. That has to be handled while\n+# creating the pvlan!!\n+\n+exec 2>&1\n+\n+usage() {\n+  printf \"Usage: %s: (-A|-D) (-P/I/C) -b <bridge/switch> -p <primary vlan> -s <secondary vlan> -m <VM MAC> -h \\n\" $(basename $0) >&2\n+  exit 2\n+}\n+\n+echo \"/usr/share/cloudstack-common/scripts/vm/network/ovs-pvlan-kvm-vm.sh $@ \" >> /tmp/pvlan", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ac17250c78f5dcfeb7d2af4a26b6fd0e079164"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA5Mjg1MQ==", "bodyText": "Removed!", "url": "https://github.com/apache/cloudstack/pull/4040#discussion_r420092851", "createdAt": "2020-05-05T13:06:09Z", "author": {"login": "davidjumani"}, "path": "scripts/vm/network/ovs-pvlan-kvm-vm.sh", "diffHunk": "@@ -0,0 +1,279 @@\n+#!/bin/bash\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+# \n+#   http://www.apache.org/licenses/LICENSE-2.0\n+# \n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#!/bin/bash\n+\n+# We're trying to do the impossible here by allowing pvlan on kvm / xen. As only God can do the impossible, and we've got too much ego to\n+# admit that we can't, we're just hacking our way around it.\n+# We're pretty much crafting two vlan headers, one with the primary vlan and the other with the secondary and with a few fancy rules\n+# it managed to work. But take note that the'res no checking over here for secondary vlan overlap. That has to be handled while\n+# creating the pvlan!!\n+\n+exec 2>&1\n+\n+usage() {\n+  printf \"Usage: %s: (-A|-D) (-P/I/C) -b <bridge/switch> -p <primary vlan> -s <secondary vlan> -m <VM MAC> -h \\n\" $(basename $0) >&2\n+  exit 2\n+}\n+\n+echo \"/usr/share/cloudstack-common/scripts/vm/network/ovs-pvlan-kvm-vm.sh $@ \" >> /tmp/pvlan", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4Nzk0OA=="}, "originalCommit": {"oid": "83ac17250c78f5dcfeb7d2af4a26b6fd0e079164"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA5NTYxNw==", "bodyText": "And the reason we need hypervisor-specific code is that on KVM, we need OVS > 2.9.2 whereas, on Xen, it comes bundled with 2.6. I've left the existing functionality on Xen but enhanced KVM to support community pvlans also which uses features only available in OVS > 2.9.2. Having two separate codes makes it easier to separate out and debug any issues", "url": "https://github.com/apache/cloudstack/pull/4040#discussion_r420095617", "createdAt": "2020-05-05T13:10:20Z", "author": {"login": "davidjumani"}, "path": "scripts/vm/network/ovs-pvlan-kvm-vm.sh", "diffHunk": "@@ -0,0 +1,279 @@\n+#!/bin/bash\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+# \n+#   http://www.apache.org/licenses/LICENSE-2.0\n+# \n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#!/bin/bash\n+\n+# We're trying to do the impossible here by allowing pvlan on kvm / xen. As only God can do the impossible, and we've got too much ego to\n+# admit that we can't, we're just hacking our way around it.\n+# We're pretty much crafting two vlan headers, one with the primary vlan and the other with the secondary and with a few fancy rules\n+# it managed to work. But take note that the'res no checking over here for secondary vlan overlap. That has to be handled while\n+# creating the pvlan!!\n+\n+exec 2>&1\n+\n+usage() {\n+  printf \"Usage: %s: (-A|-D) (-P/I/C) -b <bridge/switch> -p <primary vlan> -s <secondary vlan> -m <VM MAC> -h \\n\" $(basename $0) >&2\n+  exit 2\n+}\n+\n+echo \"/usr/share/cloudstack-common/scripts/vm/network/ovs-pvlan-kvm-vm.sh $@ \" >> /tmp/pvlan", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4Nzk0OA=="}, "originalCommit": {"oid": "83ac17250c78f5dcfeb7d2af4a26b6fd0e079164"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3872, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}