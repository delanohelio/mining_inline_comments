{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNDU4MTcw", "number": 3814, "title": "[launcher] Added a connect mode to the launcher.", "bodyText": "The OSGi Alliance is working on a Connect specification.\nThis specification will allow an SPI to take over some\nof the module handling in an OSGi Framework.\nThis change will first look if there is a Module\nConnector loadable via the Service Loader. If so,\nit will try to use OSGi Connect with the found\nModule Connector. If anything fails, it will fall\nback to the classic mode. I.e, the types of OSGi\nConnect are not required to be part of the class path.\nAlso, a static method is added to call the launcher\nexternally. This method can take an optional\nProperties and/or an optional Bundle Activator. The\nBundle Activator is called before the bundles are started.\nAn implicit change is that the code now uses the Service Loader\nfor the framework as well. This code was originally\nartisan but we're now solidly on Java 8.\nSigned-off-by: Peter Kriens Peter.Kriens@aqute.biz", "createdAt": "2020-03-02T15:46:40Z", "url": "https://github.com/bndtools/bnd/pull/3814", "merged": true, "mergeCommit": {"oid": "fb90457042b3f1c0613e39ddd1f191b7607116a7"}, "closed": true, "closedAt": "2020-03-03T10:17:44Z", "author": {"login": "pkriens"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJv1XtABqjMwODg1Mzg1NTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJ_KsZAH2gAyMzgyNDU4MTcwOmRjY2IwNGU1OTViM2E2OTMxYjU2Y2Y0NDU4MWJkNzU4NTk1ODhhYWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a455cea93460fc8eedbddae5591dee84ca0f8fd5", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/a455cea93460fc8eedbddae5591dee84ca0f8fd5", "committedDate": "2020-03-02T15:46:07Z", "message": "[launcher] Added a connect mode to the launcher.\n\nThe OSGi Alliance is working on a Connect specification.\nThis specification will allow an SPI to take over some\nof the module handling in an OSGi Framework.\n\nThis change will first look if there is a Module\nConnector loadable via the Service Loader. If so,\nit will try to use OSGi Connect with the found\nModule Connector. If anything fails, it will fall\nback to the classic mode. I.e, the types of OSGi\nConnect are not required to be part of the class path.\n\nAlso, a static method is added to call the launcher\nexternally. This method can take an optional \nProperties and/or an optional Bundle Activator. The\nBundle Activator is called before the bundles are started.\n\nAn implicit change is that the code now uses the Service Loader\nfor the framework as well. This code was originally \nartisan but we're now solidly on Java 8.\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}, "afterCommit": {"oid": "a3f2b3fdeeab132c9b9ef019fb99a4bc80f4e10c", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/a3f2b3fdeeab132c9b9ef019fb99a4bc80f4e10c", "committedDate": "2020-03-02T15:54:58Z", "message": "[launcher] Added a connect mode to the launcher.\n\nThe OSGi Alliance is working on a Connect specification.\nThis specification will allow an SPI to take over some\nof the module handling in an OSGi Framework.\n\nThis change will first look if there is a Module\nConnector loadable via the Service Loader. If so,\nit will try to use OSGi Connect with the found\nModule Connector. If anything fails, it will fall\nback to the classic mode. I.e, the types of OSGi\nConnect are not required to be part of the class path.\n\nAlso, a static method is added to call the launcher\nexternally. This method can take an optional \nProperties and/or an optional Bundle Activator. The\nBundle Activator is called before the bundles are started.\n\nAn implicit change is that the code now uses the Service Loader\nfor the framework as well. This code was originally \nartisan but we're now solidly on Java 8.\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3f2b3fdeeab132c9b9ef019fb99a4bc80f4e10c", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/a3f2b3fdeeab132c9b9ef019fb99a4bc80f4e10c", "committedDate": "2020-03-02T15:54:58Z", "message": "[launcher] Added a connect mode to the launcher.\n\nThe OSGi Alliance is working on a Connect specification.\nThis specification will allow an SPI to take over some\nof the module handling in an OSGi Framework.\n\nThis change will first look if there is a Module\nConnector loadable via the Service Loader. If so,\nit will try to use OSGi Connect with the found\nModule Connector. If anything fails, it will fall\nback to the classic mode. I.e, the types of OSGi\nConnect are not required to be part of the class path.\n\nAlso, a static method is added to call the launcher\nexternally. This method can take an optional \nProperties and/or an optional Bundle Activator. The\nBundle Activator is called before the bundles are started.\n\nAn implicit change is that the code now uses the Service Loader\nfor the framework as well. This code was originally \nartisan but we're now solidly on Java 8.\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}, "afterCommit": {"oid": "f68d01f31d2c75d2c437cddf21d9f59e25d57978", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/f68d01f31d2c75d2c437cddf21d9f59e25d57978", "committedDate": "2020-03-02T16:07:32Z", "message": "[launcher] Added a connect mode to the launcher.\n\nThe OSGi Alliance is working on a Connect specification.\nThis specification will allow an SPI to take over some\nof the module handling in an OSGi Framework.\n\nThis change will first look if there is a Module\nConnector loadable via the Service Loader. If so,\nit will try to use OSGi Connect with the found\nModule Connector. If anything fails, it will fall\nback to the classic mode. I.e, the types of OSGi\nConnect are not required to be part of the class path.\n\nAlso, a static method is added to call the launcher\nexternally. This method can take an optional \nProperties and/or an optional Bundle Activator. The\nBundle Activator is called before the bundles are started.\n\nAn implicit change is that the code now uses the Service Loader\nfor the framework as well. This code was originally \nartisan but we're now solidly on Java 8.\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MzM4NjA5", "url": "https://github.com/bndtools/bnd/pull/3814#pullrequestreview-367338609", "createdAt": "2020-03-02T16:27:04Z", "commit": {"oid": "f68d01f31d2c75d2c437cddf21d9f59e25d57978"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoyNzowNVrOFwmI_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjozNzowOVrOFwmi3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwMDg2Mw==", "bodyText": "It seems wrong to always try connect first. Equinox and Felix will eventually support connect and thus will have the service for connect. So this code will then always assume connect mode rather than normal OSGi framework mode. I think using connect must be some option on -runfw or some other bndrun file instruction.", "url": "https://github.com/bndtools/bnd/pull/3814#discussion_r386500863", "createdAt": "2020-03-02T16:27:05Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.launcher/src/aQute/launcher/Launcher.java", "diffHunk": "@@ -1122,37 +1161,30 @@ public void run() {\n \t\t}\n \n \t\tFramework systemBundle;\n-\n \t\tif (parms.services) {\n \t\t\ttrace(\"using META-INF/services\");\n \t\t\t// 3) framework = null, lookup in META-INF/services\n \n \t\t\tClassLoader loader = getClass().getClassLoader();\n \n-\t\t\t// 3) Lookup in META-INF/services\n-\t\t\tList<String> implementations = getMetaInfServices(loader, FrameworkFactory.class.getName());\n-\n-\t\t\tif (implementations.isEmpty())\n-\t\t\t\terror(\"Found no fw implementation\");\n-\t\t\tif (implementations.size() > 1)\n-\t\t\t\terror(\"Found more than one framework implementations: %s\", implementations);\n-\n-\t\t\tString implementation = implementations.get(0);\n-\n-\t\t\tClass<?> clazz = loader.loadClass(implementation);\n-\t\t\tFrameworkFactory factory = (FrameworkFactory) newInstance(clazz);\n-\t\t\ttrace(\"Framework factory %s\", factory);\n \t\t\t@SuppressWarnings({\n \t\t\t\t\"unchecked\", \"rawtypes\"\n \t\t\t})\n \t\t\tMap<String, String> configuration = (Map) p;\n-\t\t\tsystemBundle = factory.newFramework(configuration);\n-\t\t\ttrace(\"framework instance %s\", systemBundle);\n+\n+\t\t\tsystemBundle = createConnect(loader, configuration);\n+\t\t\tif (systemBundle == null) {\n+\t\t\t\tsystemBundle = createClassic(systemBundle, loader, configuration);\n+\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68d01f31d2c75d2c437cddf21d9f59e25d57978"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwMjgyOA==", "bodyText": "How do we test this actually works? We have tests now for normal OSGi framework launching (both explicit and implicit tests).", "url": "https://github.com/bndtools/bnd/pull/3814#discussion_r386502828", "createdAt": "2020-03-02T16:30:07Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.launcher/src/aQute/launcher/Launcher.java", "diffHunk": "@@ -1175,38 +1207,58 @@ public void run() {\n \t\treturn systemBundle;\n \t}\n \n-\tprotected void deleteFiles(File wd) {\n-\t\tIO.delete(wd);\n+\tprivate Framework createClassic(Framework systemBundle, ClassLoader loader, Map<String, String> configuration) {\n+\t\tFrameworkFactory factory = getMetaInfService(loader, FrameworkFactory.class);\n+\t\tif (factory != null) {\n+\t\t\tsystemBundle = factory.newFramework(configuration);\n+\t\t\ttrace(\"framework instance %s\", systemBundle);\n+\t\t} else\n+\t\t\ttrace(\"framework factory not found\");\n+\t\treturn systemBundle;\n \t}\n \n-\t/**\n-\t * Try to get the stupid service interface ...\n-\t *\n-\t * @throws IOException\n+\t/*\n+\t * Attempts to create an OSGi Connect. This allows a third party bundle on\n+\t * the -runpath to control the class loading strategy\n+\t * @param loader the class loader of this launcher\n+\t * @param configuration the framework configuration\n+\t * @return null or a connect framework\n \t */\n-\tprivate List<String> getMetaInfServices(ClassLoader loader, String factory) throws IOException {\n-\t\tif (loader == null)\n-\t\t\tloader = getClass().getClassLoader();\n-\n-\t\tEnumeration<URL> e = loader.getResources(\"META-INF/services/\" + factory);\n-\t\tList<String> factories = new ArrayList<>();\n-\n-\t\twhile (e.hasMoreElements()) {\n-\t\t\tURL url = e.nextElement();\n-\t\t\ttrace(\"found META-INF/services in %s\", url);\n-\n-\t\t\ttry (BufferedReader rdr = IO.reader(url.openStream(), UTF_8)) {\n-\t\t\t\tString line;\n-\t\t\t\twhile ((line = rdr.readLine()) != null) {\n-\t\t\t\t\ttrace(\"%s\", line);\n-\t\t\t\t\tline = line.trim();\n-\t\t\t\t\tif (!line.startsWith(\"#\") && line.length() > 0) {\n-\t\t\t\t\t\tfactories.add(line);\n-\t\t\t\t\t}\n+\tprivate Framework createConnect(ClassLoader loader, Map<String, String> configuration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68d01f31d2c75d2c437cddf21d9f59e25d57978"}, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwNDU3Mg==", "bodyText": "We have propertiesOrNull but not activatorOrNull? I am not sure I like the OrNull variable name suffix, but we should at least be consistent.", "url": "https://github.com/bndtools/bnd/pull/3814#discussion_r386504572", "createdAt": "2020-03-02T16:32:42Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.launcher/src/aQute/launcher/Launcher.java", "diffHunk": "@@ -169,6 +176,32 @@ public static int run(String args[]) throws Throwable {\n \t\treturn target.launch(args);\n \t}\n \n+\t/**\n+\t * Launch with optional properties & optional bundle activator. If the\n+\t * properties are null, they are attempted to be read from\n+\t * `launcher.properties`.\n+\t *\n+\t * @param args\n+\t * @param propertiesOrNull the properties or null\n+\t * @param activator null, or a Bundle Activator that will be called back\n+\t *            before the bundles are started, see\n+\t *            {@link EmbeddedActivatorPhase#BEFORE_BUNDLES_START}.\n+\t * @return the exit code\n+\t * @throws Throwable\n+\t */\n+\tpublic static int launch(String[] args, Properties propertiesOrNull, BundleActivator activator)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68d01f31d2c75d2c437cddf21d9f59e25d57978"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwNzQ4NA==", "bodyText": "I think it is wrong for us to have a copy of the package's source code in our repo. We can easily miss important changes as the OSGi spec changes in development. We should instead reference the OSGi snapshot jar to access the package. https://oss.sonatype.org/content/repositories/snapshots/org/osgi/org.osgi.framework/1.10.0-SNAPSHOT/", "url": "https://github.com/bndtools/bnd/pull/3814#discussion_r386507484", "createdAt": "2020-03-02T16:37:09Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.launcher/src/org/osgi/framework/connect/ConnectContent.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) OSGi Alliance (2019). All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.osgi.framework.connect;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.Optional;\n+public interface ConnectContent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68d01f31d2c75d2c437cddf21d9f59e25d57978"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39d053390060be0f03bc2f0eea4c22a98062b00c", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/39d053390060be0f03bc2f0eea4c22a98062b00c", "committedDate": "2020-03-02T16:51:19Z", "message": "[launcher] Added a connect mode to the launcher.\n\nThe OSGi Alliance is working on a Connect specification.\nThis specification will allow an SPI to take over some\nof the module handling in an OSGi Framework.\n\nThis change will first look if there is a Module\nConnector loadable via the Service Loader. If so,\nit will try to use OSGi Connect with the found\nModule Connector. If anything fails, it will fall\nback to the classic mode. I.e, the types of OSGi\nConnect are not required to be part of the class path.\n\nAlso, a static method is added to call the launcher\nexternally. This method can take an optional \nProperties and/or an optional Bundle Activator. The\nBundle Activator is called before the bundles are started.\n\nAn implicit change is that the code now uses the Service Loader\nfor the framework as well. This code was originally \nartisan but we're now solidly on Java 8.\n\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f68d01f31d2c75d2c437cddf21d9f59e25d57978", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/f68d01f31d2c75d2c437cddf21d9f59e25d57978", "committedDate": "2020-03-02T16:07:32Z", "message": "[launcher] Added a connect mode to the launcher.\n\nThe OSGi Alliance is working on a Connect specification.\nThis specification will allow an SPI to take over some\nof the module handling in an OSGi Framework.\n\nThis change will first look if there is a Module\nConnector loadable via the Service Loader. If so,\nit will try to use OSGi Connect with the found\nModule Connector. If anything fails, it will fall\nback to the classic mode. I.e, the types of OSGi\nConnect are not required to be part of the class path.\n\nAlso, a static method is added to call the launcher\nexternally. This method can take an optional \nProperties and/or an optional Bundle Activator. The\nBundle Activator is called before the bundles are started.\n\nAn implicit change is that the code now uses the Service Loader\nfor the framework as well. This code was originally \nartisan but we're now solidly on Java 8.\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}, "afterCommit": {"oid": "39d053390060be0f03bc2f0eea4c22a98062b00c", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/39d053390060be0f03bc2f0eea4c22a98062b00c", "committedDate": "2020-03-02T16:51:19Z", "message": "[launcher] Added a connect mode to the launcher.\n\nThe OSGi Alliance is working on a Connect specification.\nThis specification will allow an SPI to take over some\nof the module handling in an OSGi Framework.\n\nThis change will first look if there is a Module\nConnector loadable via the Service Loader. If so,\nit will try to use OSGi Connect with the found\nModule Connector. If anything fails, it will fall\nback to the classic mode. I.e, the types of OSGi\nConnect are not required to be part of the class path.\n\nAlso, a static method is added to call the launcher\nexternally. This method can take an optional \nProperties and/or an optional Bundle Activator. The\nBundle Activator is called before the bundles are started.\n\nAn implicit change is that the code now uses the Service Loader\nfor the framework as well. This code was originally \nartisan but we're now solidly on Java 8.\n\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dccb04e595b3a6931b56cf44581bd75859588aaf", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/dccb04e595b3a6931b56cf44581bd75859588aaf", "committedDate": "2020-03-03T09:47:06Z", "message": "[launcher] Parameter name change\n\n& reason to push again since Actions failed mysteriously\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3084, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}