{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3ODk1Mzk4", "number": 3833, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozNDoxMFrODn6vuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMjoyMjoyOFrODpWN-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTgzNTQ0OnYy", "diffSide": "RIGHT", "path": "aQute.libg/src/aQute/lib/hierarchy/FolderNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozNDoxMFrOF2MliQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozNDoxMFrOF2MliQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MzY0MQ==", "bodyText": "Please include a package-info.java for each new package.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392373641", "createdAt": "2020-03-13T17:34:10Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/lib/hierarchy/FolderNode.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package aQute.lib.hierarchy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTgzNjQxOnYy", "diffSide": "RIGHT", "path": "aQute.libg/src/aQute/lib/lazy/Lazy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozNDozM1rOF2MmMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozNDozM1rOF2MmMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MzgxMA==", "bodyText": "Please include a package-info.java for each new package.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392373810", "createdAt": "2020-03-13T17:34:33Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/lib/lazy/Lazy.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package aQute.lib.lazy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTg0NTQ1OnYy", "diffSide": "RIGHT", "path": "aQute.libg/src/aQute/lib/zip/ZipUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozNzoyMlrOF2MsAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTo0Mzo0OVrOF26LgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3NTI5Nw==", "bodyText": "It returns true in all cases.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392375297", "createdAt": "2020-03-13T17:37:22Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/lib/zip/ZipUtil.java", "diffHunk": "@@ -75,4 +76,12 @@ public static String cleanPath(String path) {\n \t\treturn clean.toString();\n \t}\n \n+\tpublic static boolean isCompromised(String path) {\n+\t\ttry {\n+\t\t\tcleanPath(path);\n+\t\t\treturn true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEyMDY0MA==", "bodyText": "Isn't this back-the-front? If cleanPath throws an exception, the path is compromised, no? So the method should return true not false.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r393120640", "createdAt": "2020-03-16T15:43:49Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/lib/zip/ZipUtil.java", "diffHunk": "@@ -75,4 +76,12 @@ public static String cleanPath(String path) {\n \t\treturn clean.toString();\n \t}\n \n+\tpublic static boolean isCompromised(String path) {\n+\t\ttry {\n+\t\t\tcleanPath(path);\n+\t\t\treturn true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3NTI5Nw=="}, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTg0NjgyOnYy", "diffSide": "RIGHT", "path": "aQute.libg/src/aQute/lib/zip/ZipUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozNzo0OFrOF2Ms4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwODoxODoyM1rOF36P8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3NTUyMA==", "bodyText": "Helpful comment. I am not sure how it is a common case. Can you provide an example of such a common case?", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392375520", "createdAt": "2020-03-13T17:37:48Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/lib/zip/ZipUtil.java", "diffHunk": "@@ -54,6 +54,7 @@ public static String cleanPath(String path) {\n \t\t\t\tint lastSlash = clean.lastIndexOf(\"/\");\n \t\t\t\tif (lastSlash == -1) {\n \t\t\t\t\tif (clean.length() == 0) {\n+\t\t\t\t\t\t// bad design, this is a common outcome", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE3MDM1NA==", "bodyText": "We should not throw exceptions for input validation. Wrong input is part of the contract of this method. Exceptions, at least in bnd, are a failure of the code because the inputs are outside the contract.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394170354", "createdAt": "2020-03-18T08:18:23Z", "author": {"login": "pkriens"}, "path": "aQute.libg/src/aQute/lib/zip/ZipUtil.java", "diffHunk": "@@ -54,6 +54,7 @@ public static String cleanPath(String path) {\n \t\t\t\tint lastSlash = clean.lastIndexOf(\"/\");\n \t\t\t\tif (lastSlash == -1) {\n \t\t\t\t\tif (clean.length() == 0) {\n+\t\t\t\t\t\t// bad design, this is a common outcome", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3NTUyMA=="}, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTg1MTMxOnYy", "diffSide": "RIGHT", "path": "aQute.libg/src/aQute/libg/ints/IntCounter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozOTowMFrOF2Mvmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozOTowMFrOF2Mvmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3NjIxOA==", "bodyText": "Please include a package-info.java for each new package.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392376218", "createdAt": "2020-03-13T17:39:00Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/libg/ints/IntCounter.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package aQute.libg.ints;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTg2ODgyOnYy", "diffSide": "RIGHT", "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/Analyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzo0NDo1MFrOF2M7Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzo0NDo1MFrOF2M7Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3OTE3MQ==", "bodyText": "Shouldn't you add to the list before calling the super method?", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392379171", "createdAt": "2020-03-13T17:44:50Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/Analyzer.java", "diffHunk": "@@ -159,6 +160,11 @@ public Analyzer(Processor parent) {\n \n \tpublic Analyzer() {}\n \n+\t@Override\n+\tprotected void setTypeSpecificPlugins(Set<Object> list) {\n+\t\tsuper.setTypeSpecificPlugins(list);\n+\t\tlist.add(new ClassIndexerAnalyzer());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTg3OTc5OnYy", "diffSide": "RIGHT", "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/Descriptors.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzo0ODoyMVrOF2NCKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzo0ODoyMVrOF2NCKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4MDk3MQ==", "bodyText": "Isn't this really a resource name to a fqn name? So resourceNameToFQN might be a more descriptive name?", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392380971", "createdAt": "2020-03-13T17:48:21Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/Descriptors.java", "diffHunk": "@@ -606,10 +619,18 @@ public static String binaryToFQN(String binary) {\n \t\treturn binary.replace('/', '.');\n \t}\n \n+\tpublic static String binaryClassToFQN(String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTg4MTU3OnYy", "diffSide": "RIGHT", "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/Descriptors.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzo0ODo1MlrOF2NDNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzo0ODo1MlrOF2NDNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4MTIzNg==", "bodyText": "Isn't this really a fqn name to a resource name? So fqnToResourceName might be a more descriptive name?", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392381236", "createdAt": "2020-03-13T17:48:52Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/Descriptors.java", "diffHunk": "@@ -606,10 +619,18 @@ public static String binaryToFQN(String binary) {\n \t\treturn binary.replace('/', '.');\n \t}\n \n+\tpublic static String binaryClassToFQN(String path) {\n+\t\treturn binaryToFQN(path.substring(0, path.length() - 6));\n+\t}\n+\n \tpublic static String fqnToBinary(String binary) {\n \t\treturn binary.replace('.', '/');\n \t}\n \n+\tpublic static String fqnClassToBinary(String binary) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTg4NDc4OnYy", "diffSide": "RIGHT", "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/Descriptors.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzo0OTo1NVrOF2NFZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzo0OTo1NVrOF2NFZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4MTc5Nw==", "bodyText": "Comment trails off...", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392381797", "createdAt": "2020-03-13T17:49:55Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/Descriptors.java", "diffHunk": "@@ -654,4 +675,112 @@ public TypeRef getTypeRefFromPath(String path) {\n \t\treturn getTypeRef(path.substring(0, path.length() - 6));\n \t}\n \n+\tpublic static String pathToFqn(String path) {\n+\t\tassert path.endsWith(\".class\");\n+\n+\t\tStringBuilder sb = new StringBuilder();\n+\t\tint j = path.length() - 6;\n+\t\tfor (int i = 0; i < j; i++) {\n+\t\t\tchar c = path.charAt(i);\n+\t\t\tif (c == '/')\n+\t\t\t\tsb.append('.');\n+\t\t\telse\n+\t\t\t\tsb.append(c);\n+\t\t}\n+\t\treturn sb.toString();\n+\t}\n+\n+\tpublic static boolean isBinaryClass(String resource) {\n+\t\treturn resource.endsWith(\".class\");\n+\t}\n+\n+\t/**\n+\t * Java really screwed up in using different names for the binary path and\n+\t * the fqns. This calculates the simple name of a potentially nested class.\n+\t *\n+\t * @param resource ( segment '/')+ (name '$')* name '.class'\n+\t * @return the last name\n+\t */\n+\tpublic static String binaryToSimple(String resource) {\n+\t\tif (resource == null)\n+\t\t\treturn null;\n+\n+\t\tassert isBinaryClass(resource);\n+\n+\t\tint end = resource.length() - 6;\n+\t\tint rover = end;\n+\t\twhile (rover >= 0) {\n+\t\t\tchar ch = resource.charAt(rover--);\n+\t\t\tif (ch == '$' || ch == '/')\n+\t\t\t\tbreak;\n+\t\t}\n+\t\treturn resource.substring(rover + 1, end);\n+\t}\n+\n+\t/**\n+\t * Heuristic for a class name. We assume a segment with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTg5MDY5OnYy", "diffSide": "RIGHT", "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/Processor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzo1MTo0OFrOF2NJHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzo1MTo0OFrOF2NJHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4Mjc0OQ==", "bodyText": "Shouldn't this be an error case (NPE) instead of a silent return?", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392382749", "createdAt": "2020-03-13T17:51:48Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/Processor.java", "diffHunk": "@@ -1304,6 +1304,8 @@ public void propertiesChanged() {}\n \t * @param propertiesFile\n \t */\n \tpublic void setProperties(File propertiesFile) {\n+\t\tif (propertiesFile == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTg5NjMwOnYy", "diffSide": "RIGHT", "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/resource/ResourceBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzo1Mzo1NVrOF2NNGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzo1Mzo1NVrOF2NNGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4Mzc2OA==", "bodyText": "What is the point of the local var since it is immediately out of scope?", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392383768", "createdAt": "2020-03-13T17:53:55Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/resource/ResourceBuilder.java", "diffHunk": "@@ -79,13 +87,9 @@ public ResourceBuilder addCapability(CapReqBuilder builder) {\n \t\treturn this;\n \t}\n \n-\tprivate Capability addCapability0(CapReqBuilder builder) {\n-\t\tCapability cap = buildCapability(builder);\n-\t\tCapability previous = capabilities.putIfAbsent(cap, cap);\n-\t\tif (previous != null) {\n-\t\t\treturn previous;\n-\t\t}\n-\t\treturn cap;\n+\tprivate void addCapability0(CapReqBuilder builder) {\n+\t\tbuilder.setResource(resource);\n+\t\tCapReqBuilder previous = capabilities.putIfAbsent(builder, builder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTg5ODg2OnYy", "diffSide": "RIGHT", "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/resource/ResourceBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzo1NDo1MlrOF2NO3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwODozOTo1M1rOF2YfZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4NDIyMA==", "bodyText": "This seems like a breaking API change without previous warning.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392384220", "createdAt": "2020-03-13T17:54:52Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/resource/ResourceBuilder.java", "diffHunk": "@@ -134,13 +138,17 @@ public Resource build() {\n \t\t\tthrow new IllegalStateException(\"Resource already built\");\n \t\tbuilt = true;\n \n-\t\tresource.setCapabilities(capabilities.values());\n+\t\tresource.setCapabilities(capabilities.values()\n+\t\t\t.stream()\n+\t\t\t.map(cr -> cr.buildCapability())\n+\t\t\t.collect(Collectors.toSet()));\n \t\tresource.setRequirements(requirements.values());\n \t\treturn resource;\n \t}\n \n+\t@Deprecated\n \tpublic List<Capability> getCapabilities() {\n-\t\treturn new ArrayList<>(capabilities.values());\n+\t\tthrow new UnsupportedOperationException(\"Must first be build\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU2ODY3OQ==", "bodyText": "There is only one place where we use it. I'll take a look", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392568679", "createdAt": "2020-03-14T08:39:53Z", "author": {"login": "pkriens"}, "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/resource/ResourceBuilder.java", "diffHunk": "@@ -134,13 +138,17 @@ public Resource build() {\n \t\t\tthrow new IllegalStateException(\"Resource already built\");\n \t\tbuilt = true;\n \n-\t\tresource.setCapabilities(capabilities.values());\n+\t\tresource.setCapabilities(capabilities.values()\n+\t\t\t.stream()\n+\t\t\t.map(cr -> cr.buildCapability())\n+\t\t\t.collect(Collectors.toSet()));\n \t\tresource.setRequirements(requirements.values());\n \t\treturn resource;\n \t}\n \n+\t@Deprecated\n \tpublic List<Capability> getCapabilities() {\n-\t\treturn new ArrayList<>(capabilities.values());\n+\t\tthrow new UnsupportedOperationException(\"Must first be build\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4NDIyMA=="}, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTkwMTIxOnYy", "diffSide": "RIGHT", "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/resource/ResourceBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzo1NTo0MlrOF2NQaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDozNjo1MVrOF2XuqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4NDYxNw==", "bodyText": "This change is not source compatible.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392384617", "createdAt": "2020-03-13T17:55:42Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/resource/ResourceBuilder.java", "diffHunk": "@@ -638,15 +646,15 @@ public void addRequirements(List<Requirement> requires) {\n \t\treturn capabilities;\n \t}\n \n-\tpublic Map<Capability, Capability> from(Resource bundle) {\n-\t\tMap<Capability, Capability> mapping = new HashMap<>();\n+\tpublic Map<Capability, CapReqBuilder> from(Resource bundle) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NjIwMQ==", "bodyText": "Actually, upon further thinking, this change is, from a practical point of view, a binary incompatible change. Any call site getting a value from a map entry will have a compiler generated cast to Capability. So existing binaries doing something like:\nCapability cap = from(bundle).get(someCap);\nwill result in a ClassCastException at runtime since the compiler expects the value to be of type Capability and generates a cast to verify this.\nSo this sort of change is, in effect, binary incompatible.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392556201", "createdAt": "2020-03-14T04:36:51Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/resource/ResourceBuilder.java", "diffHunk": "@@ -638,15 +646,15 @@ public void addRequirements(List<Requirement> requires) {\n \t\treturn capabilities;\n \t}\n \n-\tpublic Map<Capability, Capability> from(Resource bundle) {\n-\t\tMap<Capability, Capability> mapping = new HashMap<>();\n+\tpublic Map<Capability, CapReqBuilder> from(Resource bundle) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4NDYxNw=="}, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTkyNDA3OnYy", "diffSide": "RIGHT", "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/Descriptors.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODowMzoxNFrOF2NfKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODowMzoxNFrOF2NfKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4ODM5Mg==", "bodyText": "Would the return type be better as Result<Map.Entry<String,String>,String> or Result<Pair<String,String>,String>? Using String[] is pretty open and provides no clear evidence that the array contains exactly 2 strings.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392388392", "createdAt": "2020-03-13T18:03:14Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/Descriptors.java", "diffHunk": "@@ -654,4 +675,112 @@ public TypeRef getTypeRefFromPath(String path) {\n \t\treturn getTypeRef(path.substring(0, path.length() - 6));\n \t}\n \n+\tpublic static String pathToFqn(String path) {\n+\t\tassert path.endsWith(\".class\");\n+\n+\t\tStringBuilder sb = new StringBuilder();\n+\t\tint j = path.length() - 6;\n+\t\tfor (int i = 0; i < j; i++) {\n+\t\t\tchar c = path.charAt(i);\n+\t\t\tif (c == '/')\n+\t\t\t\tsb.append('.');\n+\t\t\telse\n+\t\t\t\tsb.append(c);\n+\t\t}\n+\t\treturn sb.toString();\n+\t}\n+\n+\tpublic static boolean isBinaryClass(String resource) {\n+\t\treturn resource.endsWith(\".class\");\n+\t}\n+\n+\t/**\n+\t * Java really screwed up in using different names for the binary path and\n+\t * the fqns. This calculates the simple name of a potentially nested class.\n+\t *\n+\t * @param resource ( segment '/')+ (name '$')* name '.class'\n+\t * @return the last name\n+\t */\n+\tpublic static String binaryToSimple(String resource) {\n+\t\tif (resource == null)\n+\t\t\treturn null;\n+\n+\t\tassert isBinaryClass(resource);\n+\n+\t\tint end = resource.length() - 6;\n+\t\tint rover = end;\n+\t\twhile (rover >= 0) {\n+\t\t\tchar ch = resource.charAt(rover--);\n+\t\t\tif (ch == '$' || ch == '/')\n+\t\t\t\tbreak;\n+\t\t}\n+\t\treturn resource.substring(rover + 1, end);\n+\t}\n+\n+\t/**\n+\t * Heuristic for a class name. We assume a segment with\n+\t *\n+\t * @param fqn can be a class name, nested class, or simple name\n+\t * @return true if the last segment starts with an upper case\n+\t */\n+\tpublic static boolean isClassName(String fqn) {\n+\t\tif (fqn.isEmpty())\n+\t\t\treturn false;\n+\n+\t\tint n = fqn.lastIndexOf('.') + 1;\n+\t\tif (n >= fqn.length())\n+\t\t\treturn false;\n+\n+\t\tchar ch = fqn.charAt(n);\n+\n+\t\treturn Character.isUpperCase(ch);\n+\t}\n+\n+\t/**\n+\t * Return a 2 element array based on the fqn. The first element is the\n+\t * package name, the second is the class name. Each can be absent, but not\n+\t * both. The class name can be a nested class (will contain a '.' then)\n+\t *\n+\t * @param fqn a Java identifier name, either a simple class name, a\n+\t *            qualified class name, or a package name\n+\t * @return a Result with 2 element array with [package, class]\n+\t */\n+\tpublic static Result<String[], String> determine(String fqn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjY4NDUwOnYy", "diffSide": "LEFT", "path": "bndtools.core/test/org/bndtools/core/editors/ImportPackageQuickFixProcessorAddBundleCompletionProposalTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMTowODoxM1rOF4clmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDoyNjo0NVrOF4w6lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMjk1Mg==", "bodyText": "It was probably a good idea to get rid of this as AddBundleCompletionProposal is an implementation detail. Ideally, we should only be testing through the public API (which is BuildpathQuickfixProcessor.getCorrections()), so we should try and make sure that we get effective coverage of AddBundleCompletionProposal through BuildpathQuickfixProcessorTest.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394732952", "createdAt": "2020-03-19T01:08:13Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/test/org/bndtools/core/editors/ImportPackageQuickFixProcessorAddBundleCompletionProposalTest.java", "diffHunk": "@@ -1,57 +0,0 @@\n-package org.bndtools.core.editors;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5NDc4Mw==", "bodyText": "I like tests but I agree I've got an aversion against Eclipse GUI testing. I find I spend way more time testing my own mocks & scaffolding than actual error cases.\nHowever, if you think, as we discuss later, that you can set up error cases for all the use cases (error codes/source code) then that would be fantastic.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394894783", "createdAt": "2020-03-19T09:33:46Z", "author": {"login": "pkriens"}, "path": "bndtools.core/test/org/bndtools/core/editors/ImportPackageQuickFixProcessorAddBundleCompletionProposalTest.java", "diffHunk": "@@ -1,57 +0,0 @@\n-package org.bndtools.core.editors;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMjk1Mg=="}, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA2NjAwNQ==", "bodyText": "I agree - Eclipse testing is tricky. I think writing the tests for the original quick fix processor was a bit of a turning point for me when I started to realise the limitations of mocks - yes, you spend as much time debugging the mocks as you do the actual code. Since then I've had a strong preference for testing against actual code rather than against mocks (where it makes sense to do so), effectively skipping unit testing and going straight for integration tests.\nI think the good news is that I've learned a lot more about OSGi and Bnd since those days, and I think I can come up with an OSGi-type test that uses more of actual Eclipse and less mocking. This could become a model for other GUI tests.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r395066005", "createdAt": "2020-03-19T14:26:45Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/test/org/bndtools/core/editors/ImportPackageQuickFixProcessorAddBundleCompletionProposalTest.java", "diffHunk": "@@ -1,57 +0,0 @@\n-package org.bndtools.core.editors;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMjk1Mg=="}, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjczNzcxOnYy", "diffSide": "RIGHT", "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMTozODowNFrOF4dGrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo0MzowNlrOF4xt0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc0MTQyMw==", "bodyText": "Note that Eclipse won't (or shouldn't!) call getCorrections() unless at least one of the problems in locations is of a type that we have told Eclipse we can support (via hasCorrections()). So if we've gotten this far, it's likely that we should be doing further investigation.\nThe if/return here will prematurely terminate the loop if the first location is of a problem type that we can't correct, without checking the rest of them. Because (as noted above) it is likely that one of the subsequent reported problems is a problem type that we might be able to correct, it would be better if this was a continue rather than return null.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394741423", "createdAt": "2020-03-19T01:38:04Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.compiler.IProblem;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.ImportDeclaration;\n+import org.eclipse.jdt.core.dom.Name;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jdt.ui.text.java.IProblemLocation;\n+import org.eclipse.jdt.ui.text.java.IQuickFixProcessor;\n+\n+import aQute.bnd.build.Container;\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.Workspace;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.lib.exceptions.Exceptions;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+public class BuildpathQuickfixProcessor implements IQuickFixProcessor {\n+\n+\t@Override\n+\tpublic boolean hasCorrections(ICompilationUnit unit, int problemId) {\n+\t\tswitch (problemId) {\n+\t\t\tcase IProblem.IsClassPathCorrect :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.ImportNotFound :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.UndefinedType :\n+\t\t\t\treturn true;\n+\t\t\tdefault :\n+\t\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IJavaCompletionProposal[] getCorrections(IInvocationContext context, IProblemLocation[] locations)\n+\t\tthrows CoreException {\n+\t\ttry {\n+\t\t\tList<IJavaCompletionProposal> proposals = new ArrayList<>();\n+\n+\t\t\tICompilationUnit compUnit = context.getCompilationUnit();\n+\t\t\tIJavaProject java = compUnit.getJavaProject();\n+\t\t\tif (java == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tProject project = Central.getProject(java.getProject());\n+\t\t\tif (project == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tboolean test = isInDir(project.getTestSrc(), compUnit.getResource());\n+\t\t\tWorkspace workspace = project.getWorkspace();\n+\n+\t\t\tfor (IProblemLocation location : locations) {\n+\n+\t\t\t\tif (!hasCorrections(context.getCompilationUnit(), location.getProblemId()))\n+\t\t\t\t\treturn null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5NTE4OQ==", "bodyText": "I actually got called ... I'll make it a continue. good catch.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394895189", "createdAt": "2020-03-19T09:34:34Z", "author": {"login": "pkriens"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.compiler.IProblem;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.ImportDeclaration;\n+import org.eclipse.jdt.core.dom.Name;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jdt.ui.text.java.IProblemLocation;\n+import org.eclipse.jdt.ui.text.java.IQuickFixProcessor;\n+\n+import aQute.bnd.build.Container;\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.Workspace;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.lib.exceptions.Exceptions;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+public class BuildpathQuickfixProcessor implements IQuickFixProcessor {\n+\n+\t@Override\n+\tpublic boolean hasCorrections(ICompilationUnit unit, int problemId) {\n+\t\tswitch (problemId) {\n+\t\t\tcase IProblem.IsClassPathCorrect :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.ImportNotFound :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.UndefinedType :\n+\t\t\t\treturn true;\n+\t\t\tdefault :\n+\t\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IJavaCompletionProposal[] getCorrections(IInvocationContext context, IProblemLocation[] locations)\n+\t\tthrows CoreException {\n+\t\ttry {\n+\t\t\tList<IJavaCompletionProposal> proposals = new ArrayList<>();\n+\n+\t\t\tICompilationUnit compUnit = context.getCompilationUnit();\n+\t\t\tIJavaProject java = compUnit.getJavaProject();\n+\t\t\tif (java == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tProject project = Central.getProject(java.getProject());\n+\t\t\tif (project == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tboolean test = isInDir(project.getTestSrc(), compUnit.getResource());\n+\t\t\tWorkspace workspace = project.getWorkspace();\n+\n+\t\t\tfor (IProblemLocation location : locations) {\n+\n+\t\t\t\tif (!hasCorrections(context.getCompilationUnit(), location.getProblemId()))\n+\t\t\t\t\treturn null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc0MTQyMw=="}, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA3OTEyMw==", "bodyText": "Happens to the best of us \ud83d\ude09", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r395079123", "createdAt": "2020-03-19T14:43:06Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.compiler.IProblem;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.ImportDeclaration;\n+import org.eclipse.jdt.core.dom.Name;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jdt.ui.text.java.IProblemLocation;\n+import org.eclipse.jdt.ui.text.java.IQuickFixProcessor;\n+\n+import aQute.bnd.build.Container;\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.Workspace;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.lib.exceptions.Exceptions;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+public class BuildpathQuickfixProcessor implements IQuickFixProcessor {\n+\n+\t@Override\n+\tpublic boolean hasCorrections(ICompilationUnit unit, int problemId) {\n+\t\tswitch (problemId) {\n+\t\t\tcase IProblem.IsClassPathCorrect :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.ImportNotFound :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.UndefinedType :\n+\t\t\t\treturn true;\n+\t\t\tdefault :\n+\t\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IJavaCompletionProposal[] getCorrections(IInvocationContext context, IProblemLocation[] locations)\n+\t\tthrows CoreException {\n+\t\ttry {\n+\t\t\tList<IJavaCompletionProposal> proposals = new ArrayList<>();\n+\n+\t\t\tICompilationUnit compUnit = context.getCompilationUnit();\n+\t\t\tIJavaProject java = compUnit.getJavaProject();\n+\t\t\tif (java == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tProject project = Central.getProject(java.getProject());\n+\t\t\tif (project == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tboolean test = isInDir(project.getTestSrc(), compUnit.getResource());\n+\t\t\tWorkspace workspace = project.getWorkspace();\n+\n+\t\t\tfor (IProblemLocation location : locations) {\n+\n+\t\t\t\tif (!hasCorrections(context.getCompilationUnit(), location.getProblemId()))\n+\t\t\t\t\treturn null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc0MTQyMw=="}, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Njc0MjcyOnYy", "diffSide": "RIGHT", "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMTozOTo1MVrOF4dJ-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDozNTo0MFrOF4xWYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc0MjI2NQ==", "bodyText": "These were originally collapsed into one return statement, thus:\ncase IProblem.IsClassPathCorrect :\ncase IProblem.ImportNotFound :\ncase IProblem.UndefinedType :\n    return true;\nAny particular reason for exploding these out into individual return statements?\nAlso, we may need to add other entries to the switch in order to tell Eclipse that we can now handle other problem types due to the enhanced class name searching, and to take advantage of this functionality. However, as you point out the documentation on this is not good. I arrived at the above set by experimentation - set up a workspace in Eclipse with a situation that I know we should be able to correct, add a print problemId to stderr, and then hover over it in the Eclipse instance to see what problemId we get.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394742265", "createdAt": "2020-03-19T01:39:51Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.compiler.IProblem;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.ImportDeclaration;\n+import org.eclipse.jdt.core.dom.Name;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jdt.ui.text.java.IProblemLocation;\n+import org.eclipse.jdt.ui.text.java.IQuickFixProcessor;\n+\n+import aQute.bnd.build.Container;\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.Workspace;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.lib.exceptions.Exceptions;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+public class BuildpathQuickfixProcessor implements IQuickFixProcessor {\n+\n+\t@Override\n+\tpublic boolean hasCorrections(ICompilationUnit unit, int problemId) {\n+\t\tswitch (problemId) {\n+\t\t\tcase IProblem.IsClassPathCorrect :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.ImportNotFound :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.UndefinedType :\n+\t\t\t\treturn true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5MjAyMg==", "bodyText": "I had a really hard time generating the other error ids. Just could not figure it out.\nI kept them separate to visually indicate that we should try to figure out if they all need to be supported and how. I am assuming they have some semantics.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394892022", "createdAt": "2020-03-19T09:29:03Z", "author": {"login": "pkriens"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.compiler.IProblem;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.ImportDeclaration;\n+import org.eclipse.jdt.core.dom.Name;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jdt.ui.text.java.IProblemLocation;\n+import org.eclipse.jdt.ui.text.java.IQuickFixProcessor;\n+\n+import aQute.bnd.build.Container;\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.Workspace;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.lib.exceptions.Exceptions;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+public class BuildpathQuickfixProcessor implements IQuickFixProcessor {\n+\n+\t@Override\n+\tpublic boolean hasCorrections(ICompilationUnit unit, int problemId) {\n+\t\tswitch (problemId) {\n+\t\t\tcase IProblem.IsClassPathCorrect :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.ImportNotFound :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.UndefinedType :\n+\t\t\t\treturn true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc0MjI2NQ=="}, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA3MzEyMg==", "bodyText": "Yes, they all have some semantics and (from memory) they are a little different.\nI remember that one of the more esoteric error types I tried to handle was when there is a missing transitive dependency. Error message something like \"Cannot find  - it is indirectly referenced by classes on the classpath.\"", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r395073122", "createdAt": "2020-03-19T14:35:40Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.compiler.IProblem;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.ImportDeclaration;\n+import org.eclipse.jdt.core.dom.Name;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jdt.ui.text.java.IProblemLocation;\n+import org.eclipse.jdt.ui.text.java.IQuickFixProcessor;\n+\n+import aQute.bnd.build.Container;\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.Workspace;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.lib.exceptions.Exceptions;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+public class BuildpathQuickfixProcessor implements IQuickFixProcessor {\n+\n+\t@Override\n+\tpublic boolean hasCorrections(ICompilationUnit unit, int problemId) {\n+\t\tswitch (problemId) {\n+\t\t\tcase IProblem.IsClassPathCorrect :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.ImportNotFound :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.UndefinedType :\n+\t\t\t\treturn true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc0MjI2NQ=="}, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Njc2NzIyOnYy", "diffSide": "RIGHT", "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/AddBundleCompletionProposal.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMTo0ODo1OVrOF4dZZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOToyNzozNlrOF4mPiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc0NjIxMw==", "bodyText": "This part of the code is obviously new to support quick fixes of incomplete class definitions.\nThe original quick fix processor primarily supported the case where the import statement already existed, but could not be resolved because the bundle was not on -buildpath. In such cases, you don't want to create the import statement again, nor do you want to add a \".*\" import if you've already explicitly imported the class that you want. I think we need to be selective about if/when we call createImport(), depending on what problem we are trying to fix.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394746213", "createdAt": "2020-03-19T01:48:59Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/AddBundleCompletionProposal.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import org.bndtools.core.ui.icons.Icons;\n+import org.eclipse.core.resources.WorkspaceJob;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jface.text.contentassist.IContextInformation;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.graphics.Point;\n+\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.model.BndEditModel;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.bnd.osgi.Constants;\n+import aQute.bnd.osgi.Descriptors;\n+import aQute.lib.strings.Strings;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+class AddBundleCompletionProposal extends WorkspaceJob implements IJavaCompletionProposal {\n+\n+\tfinal BundleId\t\t\t\tbundle;\n+\tfinal String\t\t\t\tdisplayString;\n+\tfinal int\t\t\t\t\trelevance;\n+\tfinal IInvocationContext\tcontext;\n+\tfinal Project\t\t\t\tproject;\n+\tfinal String\t\t\t\tpathtype;\n+\tfinal String\t\t\t\tfqn;\n+\n+\tpublic AddBundleCompletionProposal(String fqn, BundleId bundle, int relevance, IInvocationContext context,\n+\t\tProject project, String pathtype) {\n+\t\tsuper(\"Adding '\" + bundle + \"' to \" + project + \" \" + pathtype);\n+\t\tthis.fqn = fqn;\n+\t\tthis.bundle = bundle;\n+\t\tthis.relevance = relevance;\n+\t\tthis.context = context;\n+\t\tthis.project = project;\n+\t\tthis.pathtype = pathtype;\n+\t\tthis.displayString = Strings.format(\"Add %s %s to %s (found %s)\", bundle.getBsn(), bundle.getShortVersion(),\n+\t\t\tpathtype, fqn);\n+\t}\n+\n+\t@Override\n+\tpublic void apply(org.eclipse.jface.text.IDocument document) {\n+\t\tschedule();\n+\t}\n+\n+\t/**\n+\t * @see org.eclipse.jface.text.contentassist.ICompletionProposal#getSelection(org.eclipse.jface.text.IDocument)\n+\t */\n+\t@Override\n+\tpublic Point getSelection(org.eclipse.jface.text.IDocument document) {\n+\t\treturn new Point(context.getSelectionOffset(), context.getSelectionLength());\n+\t}\n+\n+\t@Override\n+\tpublic String getAdditionalProposalInfo() {\n+\t\treturn displayString;\n+\t}\n+\n+\t@Override\n+\tpublic String getDisplayString() {\n+\t\treturn displayString;\n+\t}\n+\n+\t@Override\n+\tpublic Image getImage() {\n+\t\treturn Icons.image(\"bundle\");\n+\t}\n+\n+\t@Override\n+\tpublic IContextInformation getContextInformation() {\n+\t\treturn new IContextInformation() {\n+\n+\t\t\t@Override\n+\t\t\tpublic String getContextDisplayString() {\n+\t\t\t\treturn \"Added \" + bundle + \" to build path\";\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Image getImage() {\n+\t\t\t\treturn Icons.image(\"bundle\");\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic String getInformationDisplayString() {\n+\t\t\t\treturn \"Added \" + bundle + \" to build path - info\";\n+\t\t\t}\n+\n+\t\t};\n+\t}\n+\n+\t@Override\n+\tpublic int getRelevance() {\n+\t\treturn relevance;\n+\t}\n+\n+\t@Override\n+\tpublic IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {\n+\t\ttry {\n+\t\t\tIStatus status = Central.bndCall(() -> {\n+\t\t\t\tBndEditModel model = new BndEditModel(project);\n+\t\t\t\tmodel.load();\n+\n+\t\t\t\tswitch (pathtype) {\n+\t\t\t\t\tcase Constants.TESTPATH :\n+\t\t\t\t\t\tmodel.addPath(bundle, Constants.TESTPATH);\n+\t\t\t\t\t\tbreak;\n+\n+\t\t\t\t\tcase Constants.BUILDPATH :\n+\t\t\t\t\tdefault :\n+\t\t\t\t\t\tmodel.addPath(bundle, Constants.BUILDPATH);\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tmodel.saveChanges();\n+\t\t\t\tCentral.refreshFile(project.getPropertiesFile());\n+\t\t\t\treturn Status.OK_STATUS;\n+\t\t\t});\n+\n+\t\t\tString[] determine = Descriptors.determine(fqn)\n+\t\t\t\t.unwrap();\n+\n+\t\t\tassert determine[0] != null : \"We must have found a package\";\n+\n+\t\t\tif (determine[1] == null) {\n+\t\t\t\tcontext.getCompilationUnit()\n+\t\t\t\t\t.createImport(fqn + \".*\", null, monitor);\n+\t\t\t} else {\n+\t\t\t\tcontext.getCompilationUnit()\n+\t\t\t\t\t.createImport(fqn, null, monitor);\n+\t\t\t}\n+\t\t\treturn status;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5MTE0NA==", "bodyText": "I think duplicates are automatically skipped, at least I read something in the comments\nI just cannot find a definition of the error codes.\n\nI tested this in the UI and it seems to work fine so far. Shall we wait until we have actually test cases. I could not find a good definition of the error codes, what arguments they supplied, and what cases they were reported. I basically could only find import errors.\nHaving test code would allow us to see each case we want to support. I reasoned this was the safe way and the Eclipse quick fixes support cleaning up if necessary.\nI am a big fan of less is more. I'd like to start very simple that covers 80%, and then add the missing cases explicitly.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394891144", "createdAt": "2020-03-19T09:27:36Z", "author": {"login": "pkriens"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/AddBundleCompletionProposal.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import org.bndtools.core.ui.icons.Icons;\n+import org.eclipse.core.resources.WorkspaceJob;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jface.text.contentassist.IContextInformation;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.graphics.Point;\n+\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.model.BndEditModel;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.bnd.osgi.Constants;\n+import aQute.bnd.osgi.Descriptors;\n+import aQute.lib.strings.Strings;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+class AddBundleCompletionProposal extends WorkspaceJob implements IJavaCompletionProposal {\n+\n+\tfinal BundleId\t\t\t\tbundle;\n+\tfinal String\t\t\t\tdisplayString;\n+\tfinal int\t\t\t\t\trelevance;\n+\tfinal IInvocationContext\tcontext;\n+\tfinal Project\t\t\t\tproject;\n+\tfinal String\t\t\t\tpathtype;\n+\tfinal String\t\t\t\tfqn;\n+\n+\tpublic AddBundleCompletionProposal(String fqn, BundleId bundle, int relevance, IInvocationContext context,\n+\t\tProject project, String pathtype) {\n+\t\tsuper(\"Adding '\" + bundle + \"' to \" + project + \" \" + pathtype);\n+\t\tthis.fqn = fqn;\n+\t\tthis.bundle = bundle;\n+\t\tthis.relevance = relevance;\n+\t\tthis.context = context;\n+\t\tthis.project = project;\n+\t\tthis.pathtype = pathtype;\n+\t\tthis.displayString = Strings.format(\"Add %s %s to %s (found %s)\", bundle.getBsn(), bundle.getShortVersion(),\n+\t\t\tpathtype, fqn);\n+\t}\n+\n+\t@Override\n+\tpublic void apply(org.eclipse.jface.text.IDocument document) {\n+\t\tschedule();\n+\t}\n+\n+\t/**\n+\t * @see org.eclipse.jface.text.contentassist.ICompletionProposal#getSelection(org.eclipse.jface.text.IDocument)\n+\t */\n+\t@Override\n+\tpublic Point getSelection(org.eclipse.jface.text.IDocument document) {\n+\t\treturn new Point(context.getSelectionOffset(), context.getSelectionLength());\n+\t}\n+\n+\t@Override\n+\tpublic String getAdditionalProposalInfo() {\n+\t\treturn displayString;\n+\t}\n+\n+\t@Override\n+\tpublic String getDisplayString() {\n+\t\treturn displayString;\n+\t}\n+\n+\t@Override\n+\tpublic Image getImage() {\n+\t\treturn Icons.image(\"bundle\");\n+\t}\n+\n+\t@Override\n+\tpublic IContextInformation getContextInformation() {\n+\t\treturn new IContextInformation() {\n+\n+\t\t\t@Override\n+\t\t\tpublic String getContextDisplayString() {\n+\t\t\t\treturn \"Added \" + bundle + \" to build path\";\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Image getImage() {\n+\t\t\t\treturn Icons.image(\"bundle\");\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic String getInformationDisplayString() {\n+\t\t\t\treturn \"Added \" + bundle + \" to build path - info\";\n+\t\t\t}\n+\n+\t\t};\n+\t}\n+\n+\t@Override\n+\tpublic int getRelevance() {\n+\t\treturn relevance;\n+\t}\n+\n+\t@Override\n+\tpublic IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {\n+\t\ttry {\n+\t\t\tIStatus status = Central.bndCall(() -> {\n+\t\t\t\tBndEditModel model = new BndEditModel(project);\n+\t\t\t\tmodel.load();\n+\n+\t\t\t\tswitch (pathtype) {\n+\t\t\t\t\tcase Constants.TESTPATH :\n+\t\t\t\t\t\tmodel.addPath(bundle, Constants.TESTPATH);\n+\t\t\t\t\t\tbreak;\n+\n+\t\t\t\t\tcase Constants.BUILDPATH :\n+\t\t\t\t\tdefault :\n+\t\t\t\t\t\tmodel.addPath(bundle, Constants.BUILDPATH);\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tmodel.saveChanges();\n+\t\t\t\tCentral.refreshFile(project.getPropertiesFile());\n+\t\t\t\treturn Status.OK_STATUS;\n+\t\t\t});\n+\n+\t\t\tString[] determine = Descriptors.determine(fqn)\n+\t\t\t\t.unwrap();\n+\n+\t\t\tassert determine[0] != null : \"We must have found a package\";\n+\n+\t\t\tif (determine[1] == null) {\n+\t\t\t\tcontext.getCompilationUnit()\n+\t\t\t\t\t.createImport(fqn + \".*\", null, monitor);\n+\t\t\t} else {\n+\t\t\t\tcontext.getCompilationUnit()\n+\t\t\t\t\t.createImport(fqn, null, monitor);\n+\t\t\t}\n+\t\t\treturn status;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc0NjIxMw=="}, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Njc2NzQ1OnYy", "diffSide": "RIGHT", "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/AddBundleCompletionProposal.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMTo0OToxM1rOF4dZkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMTo0OToxM1rOF4dZkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc0NjI1OA==", "bodyText": "For the quick fix processor, I could never figure out when this was used. It is possible they are not used for quick fixes, but for completion proposals (which are different to quick fixes).\nHowever they are used, the strings should probably use displayString (eg, with these new changes, sometimes we're adding to the test path and not the build path).", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394746258", "createdAt": "2020-03-19T01:49:13Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/AddBundleCompletionProposal.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import org.bndtools.core.ui.icons.Icons;\n+import org.eclipse.core.resources.WorkspaceJob;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jface.text.contentassist.IContextInformation;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.graphics.Point;\n+\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.model.BndEditModel;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.bnd.osgi.Constants;\n+import aQute.bnd.osgi.Descriptors;\n+import aQute.lib.strings.Strings;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+class AddBundleCompletionProposal extends WorkspaceJob implements IJavaCompletionProposal {\n+\n+\tfinal BundleId\t\t\t\tbundle;\n+\tfinal String\t\t\t\tdisplayString;\n+\tfinal int\t\t\t\t\trelevance;\n+\tfinal IInvocationContext\tcontext;\n+\tfinal Project\t\t\t\tproject;\n+\tfinal String\t\t\t\tpathtype;\n+\tfinal String\t\t\t\tfqn;\n+\n+\tpublic AddBundleCompletionProposal(String fqn, BundleId bundle, int relevance, IInvocationContext context,\n+\t\tProject project, String pathtype) {\n+\t\tsuper(\"Adding '\" + bundle + \"' to \" + project + \" \" + pathtype);\n+\t\tthis.fqn = fqn;\n+\t\tthis.bundle = bundle;\n+\t\tthis.relevance = relevance;\n+\t\tthis.context = context;\n+\t\tthis.project = project;\n+\t\tthis.pathtype = pathtype;\n+\t\tthis.displayString = Strings.format(\"Add %s %s to %s (found %s)\", bundle.getBsn(), bundle.getShortVersion(),\n+\t\t\tpathtype, fqn);\n+\t}\n+\n+\t@Override\n+\tpublic void apply(org.eclipse.jface.text.IDocument document) {\n+\t\tschedule();\n+\t}\n+\n+\t/**\n+\t * @see org.eclipse.jface.text.contentassist.ICompletionProposal#getSelection(org.eclipse.jface.text.IDocument)\n+\t */\n+\t@Override\n+\tpublic Point getSelection(org.eclipse.jface.text.IDocument document) {\n+\t\treturn new Point(context.getSelectionOffset(), context.getSelectionLength());\n+\t}\n+\n+\t@Override\n+\tpublic String getAdditionalProposalInfo() {\n+\t\treturn displayString;\n+\t}\n+\n+\t@Override\n+\tpublic String getDisplayString() {\n+\t\treturn displayString;\n+\t}\n+\n+\t@Override\n+\tpublic Image getImage() {\n+\t\treturn Icons.image(\"bundle\");\n+\t}\n+\n+\t@Override\n+\tpublic IContextInformation getContextInformation() {\n+\t\treturn new IContextInformation() {\n+\n+\t\t\t@Override\n+\t\t\tpublic String getContextDisplayString() {\n+\t\t\t\treturn \"Added \" + bundle + \" to build path\";\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Image getImage() {\n+\t\t\t\treturn Icons.image(\"bundle\");\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic String getInformationDisplayString() {\n+\t\t\t\treturn \"Added \" + bundle + \" to build path - info\";\n+\t\t\t}\n+\n+\t\t};\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Njc2ODExOnYy", "diffSide": "RIGHT", "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/AddBundleCompletionProposal.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMTo0OTo0NlrOF4dZ_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOToyMjowMFrOF4mC0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc0NjM2NQ==", "bodyText": "Error message needs to reflect whether the attempt was made to update the -buildpath or -testpath.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394746365", "createdAt": "2020-03-19T01:49:46Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/AddBundleCompletionProposal.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import org.bndtools.core.ui.icons.Icons;\n+import org.eclipse.core.resources.WorkspaceJob;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jface.text.contentassist.IContextInformation;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.graphics.Point;\n+\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.model.BndEditModel;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.bnd.osgi.Constants;\n+import aQute.bnd.osgi.Descriptors;\n+import aQute.lib.strings.Strings;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+class AddBundleCompletionProposal extends WorkspaceJob implements IJavaCompletionProposal {\n+\n+\tfinal BundleId\t\t\t\tbundle;\n+\tfinal String\t\t\t\tdisplayString;\n+\tfinal int\t\t\t\t\trelevance;\n+\tfinal IInvocationContext\tcontext;\n+\tfinal Project\t\t\t\tproject;\n+\tfinal String\t\t\t\tpathtype;\n+\tfinal String\t\t\t\tfqn;\n+\n+\tpublic AddBundleCompletionProposal(String fqn, BundleId bundle, int relevance, IInvocationContext context,\n+\t\tProject project, String pathtype) {\n+\t\tsuper(\"Adding '\" + bundle + \"' to \" + project + \" \" + pathtype);\n+\t\tthis.fqn = fqn;\n+\t\tthis.bundle = bundle;\n+\t\tthis.relevance = relevance;\n+\t\tthis.context = context;\n+\t\tthis.project = project;\n+\t\tthis.pathtype = pathtype;\n+\t\tthis.displayString = Strings.format(\"Add %s %s to %s (found %s)\", bundle.getBsn(), bundle.getShortVersion(),\n+\t\t\tpathtype, fqn);\n+\t}\n+\n+\t@Override\n+\tpublic void apply(org.eclipse.jface.text.IDocument document) {\n+\t\tschedule();\n+\t}\n+\n+\t/**\n+\t * @see org.eclipse.jface.text.contentassist.ICompletionProposal#getSelection(org.eclipse.jface.text.IDocument)\n+\t */\n+\t@Override\n+\tpublic Point getSelection(org.eclipse.jface.text.IDocument document) {\n+\t\treturn new Point(context.getSelectionOffset(), context.getSelectionLength());\n+\t}\n+\n+\t@Override\n+\tpublic String getAdditionalProposalInfo() {\n+\t\treturn displayString;\n+\t}\n+\n+\t@Override\n+\tpublic String getDisplayString() {\n+\t\treturn displayString;\n+\t}\n+\n+\t@Override\n+\tpublic Image getImage() {\n+\t\treturn Icons.image(\"bundle\");\n+\t}\n+\n+\t@Override\n+\tpublic IContextInformation getContextInformation() {\n+\t\treturn new IContextInformation() {\n+\n+\t\t\t@Override\n+\t\t\tpublic String getContextDisplayString() {\n+\t\t\t\treturn \"Added \" + bundle + \" to build path\";\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Image getImage() {\n+\t\t\t\treturn Icons.image(\"bundle\");\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic String getInformationDisplayString() {\n+\t\t\t\treturn \"Added \" + bundle + \" to build path - info\";\n+\t\t\t}\n+\n+\t\t};\n+\t}\n+\n+\t@Override\n+\tpublic int getRelevance() {\n+\t\treturn relevance;\n+\t}\n+\n+\t@Override\n+\tpublic IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {\n+\t\ttry {\n+\t\t\tIStatus status = Central.bndCall(() -> {\n+\t\t\t\tBndEditModel model = new BndEditModel(project);\n+\t\t\t\tmodel.load();\n+\n+\t\t\t\tswitch (pathtype) {\n+\t\t\t\t\tcase Constants.TESTPATH :\n+\t\t\t\t\t\tmodel.addPath(bundle, Constants.TESTPATH);\n+\t\t\t\t\t\tbreak;\n+\n+\t\t\t\t\tcase Constants.BUILDPATH :\n+\t\t\t\t\tdefault :\n+\t\t\t\t\t\tmodel.addPath(bundle, Constants.BUILDPATH);\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tmodel.saveChanges();\n+\t\t\t\tCentral.refreshFile(project.getPropertiesFile());\n+\t\t\t\treturn Status.OK_STATUS;\n+\t\t\t});\n+\n+\t\t\tString[] determine = Descriptors.determine(fqn)\n+\t\t\t\t.unwrap();\n+\n+\t\t\tassert determine[0] != null : \"We must have found a package\";\n+\n+\t\t\tif (determine[1] == null) {\n+\t\t\t\tcontext.getCompilationUnit()\n+\t\t\t\t\t.createImport(fqn + \".*\", null, monitor);\n+\t\t\t} else {\n+\t\t\t\tcontext.getCompilationUnit()\n+\t\t\t\t\t.createImport(fqn, null, monitor);\n+\t\t\t}\n+\t\t\treturn status;\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new CoreException(\n+\t\t\t\tnew Status(IStatus.ERROR, Plugin.PLUGIN_ID, \"Failed to add bundle to -buildpath\", e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4Nzg4OQ==", "bodyText": "fixed", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394887889", "createdAt": "2020-03-19T09:22:00Z", "author": {"login": "pkriens"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/AddBundleCompletionProposal.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import org.bndtools.core.ui.icons.Icons;\n+import org.eclipse.core.resources.WorkspaceJob;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jface.text.contentassist.IContextInformation;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.graphics.Point;\n+\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.model.BndEditModel;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.bnd.osgi.Constants;\n+import aQute.bnd.osgi.Descriptors;\n+import aQute.lib.strings.Strings;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+class AddBundleCompletionProposal extends WorkspaceJob implements IJavaCompletionProposal {\n+\n+\tfinal BundleId\t\t\t\tbundle;\n+\tfinal String\t\t\t\tdisplayString;\n+\tfinal int\t\t\t\t\trelevance;\n+\tfinal IInvocationContext\tcontext;\n+\tfinal Project\t\t\t\tproject;\n+\tfinal String\t\t\t\tpathtype;\n+\tfinal String\t\t\t\tfqn;\n+\n+\tpublic AddBundleCompletionProposal(String fqn, BundleId bundle, int relevance, IInvocationContext context,\n+\t\tProject project, String pathtype) {\n+\t\tsuper(\"Adding '\" + bundle + \"' to \" + project + \" \" + pathtype);\n+\t\tthis.fqn = fqn;\n+\t\tthis.bundle = bundle;\n+\t\tthis.relevance = relevance;\n+\t\tthis.context = context;\n+\t\tthis.project = project;\n+\t\tthis.pathtype = pathtype;\n+\t\tthis.displayString = Strings.format(\"Add %s %s to %s (found %s)\", bundle.getBsn(), bundle.getShortVersion(),\n+\t\t\tpathtype, fqn);\n+\t}\n+\n+\t@Override\n+\tpublic void apply(org.eclipse.jface.text.IDocument document) {\n+\t\tschedule();\n+\t}\n+\n+\t/**\n+\t * @see org.eclipse.jface.text.contentassist.ICompletionProposal#getSelection(org.eclipse.jface.text.IDocument)\n+\t */\n+\t@Override\n+\tpublic Point getSelection(org.eclipse.jface.text.IDocument document) {\n+\t\treturn new Point(context.getSelectionOffset(), context.getSelectionLength());\n+\t}\n+\n+\t@Override\n+\tpublic String getAdditionalProposalInfo() {\n+\t\treturn displayString;\n+\t}\n+\n+\t@Override\n+\tpublic String getDisplayString() {\n+\t\treturn displayString;\n+\t}\n+\n+\t@Override\n+\tpublic Image getImage() {\n+\t\treturn Icons.image(\"bundle\");\n+\t}\n+\n+\t@Override\n+\tpublic IContextInformation getContextInformation() {\n+\t\treturn new IContextInformation() {\n+\n+\t\t\t@Override\n+\t\t\tpublic String getContextDisplayString() {\n+\t\t\t\treturn \"Added \" + bundle + \" to build path\";\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Image getImage() {\n+\t\t\t\treturn Icons.image(\"bundle\");\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic String getInformationDisplayString() {\n+\t\t\t\treturn \"Added \" + bundle + \" to build path - info\";\n+\t\t\t}\n+\n+\t\t};\n+\t}\n+\n+\t@Override\n+\tpublic int getRelevance() {\n+\t\treturn relevance;\n+\t}\n+\n+\t@Override\n+\tpublic IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {\n+\t\ttry {\n+\t\t\tIStatus status = Central.bndCall(() -> {\n+\t\t\t\tBndEditModel model = new BndEditModel(project);\n+\t\t\t\tmodel.load();\n+\n+\t\t\t\tswitch (pathtype) {\n+\t\t\t\t\tcase Constants.TESTPATH :\n+\t\t\t\t\t\tmodel.addPath(bundle, Constants.TESTPATH);\n+\t\t\t\t\t\tbreak;\n+\n+\t\t\t\t\tcase Constants.BUILDPATH :\n+\t\t\t\t\tdefault :\n+\t\t\t\t\t\tmodel.addPath(bundle, Constants.BUILDPATH);\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tmodel.saveChanges();\n+\t\t\t\tCentral.refreshFile(project.getPropertiesFile());\n+\t\t\t\treturn Status.OK_STATUS;\n+\t\t\t});\n+\n+\t\t\tString[] determine = Descriptors.determine(fqn)\n+\t\t\t\t.unwrap();\n+\n+\t\t\tassert determine[0] != null : \"We must have found a package\";\n+\n+\t\t\tif (determine[1] == null) {\n+\t\t\t\tcontext.getCompilationUnit()\n+\t\t\t\t\t.createImport(fqn + \".*\", null, monitor);\n+\t\t\t} else {\n+\t\t\t\tcontext.getCompilationUnit()\n+\t\t\t\t\t.createImport(fqn, null, monitor);\n+\t\t\t}\n+\t\t\treturn status;\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new CoreException(\n+\t\t\t\tnew Status(IStatus.ERROR, Plugin.PLUGIN_ID, \"Failed to add bundle to -buildpath\", e));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc0NjM2NQ=="}, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Njc3MzU5OnYy", "diffSide": "RIGHT", "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/AddBundleCompletionProposal.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMTo1MzozMVrOF4ddQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOToxODozNlrOF4l7KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc0NzIwMw==", "bodyText": "The old quick fix processor made use of the monitor when saving. Admittedly, this is likely to be a fast operation. However, more generally, perhaps we should be considering a more standard way of interfacing IProgressMonitor with Central.bndCall(). This could have other usability benefits in other parts of Bndtools (I'm thinking of resolving, for example, which can sometimes take a while without much visual feedback on progress).", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394747203", "createdAt": "2020-03-19T01:53:31Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/AddBundleCompletionProposal.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import org.bndtools.core.ui.icons.Icons;\n+import org.eclipse.core.resources.WorkspaceJob;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jface.text.contentassist.IContextInformation;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.graphics.Point;\n+\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.model.BndEditModel;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.bnd.osgi.Constants;\n+import aQute.bnd.osgi.Descriptors;\n+import aQute.lib.strings.Strings;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+class AddBundleCompletionProposal extends WorkspaceJob implements IJavaCompletionProposal {\n+\n+\tfinal BundleId\t\t\t\tbundle;\n+\tfinal String\t\t\t\tdisplayString;\n+\tfinal int\t\t\t\t\trelevance;\n+\tfinal IInvocationContext\tcontext;\n+\tfinal Project\t\t\t\tproject;\n+\tfinal String\t\t\t\tpathtype;\n+\tfinal String\t\t\t\tfqn;\n+\n+\tpublic AddBundleCompletionProposal(String fqn, BundleId bundle, int relevance, IInvocationContext context,\n+\t\tProject project, String pathtype) {\n+\t\tsuper(\"Adding '\" + bundle + \"' to \" + project + \" \" + pathtype);\n+\t\tthis.fqn = fqn;\n+\t\tthis.bundle = bundle;\n+\t\tthis.relevance = relevance;\n+\t\tthis.context = context;\n+\t\tthis.project = project;\n+\t\tthis.pathtype = pathtype;\n+\t\tthis.displayString = Strings.format(\"Add %s %s to %s (found %s)\", bundle.getBsn(), bundle.getShortVersion(),\n+\t\t\tpathtype, fqn);\n+\t}\n+\n+\t@Override\n+\tpublic void apply(org.eclipse.jface.text.IDocument document) {\n+\t\tschedule();\n+\t}\n+\n+\t/**\n+\t * @see org.eclipse.jface.text.contentassist.ICompletionProposal#getSelection(org.eclipse.jface.text.IDocument)\n+\t */\n+\t@Override\n+\tpublic Point getSelection(org.eclipse.jface.text.IDocument document) {\n+\t\treturn new Point(context.getSelectionOffset(), context.getSelectionLength());\n+\t}\n+\n+\t@Override\n+\tpublic String getAdditionalProposalInfo() {\n+\t\treturn displayString;\n+\t}\n+\n+\t@Override\n+\tpublic String getDisplayString() {\n+\t\treturn displayString;\n+\t}\n+\n+\t@Override\n+\tpublic Image getImage() {\n+\t\treturn Icons.image(\"bundle\");\n+\t}\n+\n+\t@Override\n+\tpublic IContextInformation getContextInformation() {\n+\t\treturn new IContextInformation() {\n+\n+\t\t\t@Override\n+\t\t\tpublic String getContextDisplayString() {\n+\t\t\t\treturn \"Added \" + bundle + \" to build path\";\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Image getImage() {\n+\t\t\t\treturn Icons.image(\"bundle\");\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic String getInformationDisplayString() {\n+\t\t\t\treturn \"Added \" + bundle + \" to build path - info\";\n+\t\t\t}\n+\n+\t\t};\n+\t}\n+\n+\t@Override\n+\tpublic int getRelevance() {\n+\t\treturn relevance;\n+\t}\n+\n+\t@Override\n+\tpublic IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {\n+\t\ttry {\n+\t\t\tIStatus status = Central.bndCall(() -> {\n+\t\t\t\tBndEditModel model = new BndEditModel(project);\n+\t\t\t\tmodel.load();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4NTkyOA==", "bodyText": "Yes, it is been on my mind for some time to bring the monitor as concept in bnd. I'll add something, but not in this branch.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394885928", "createdAt": "2020-03-19T09:18:36Z", "author": {"login": "pkriens"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/AddBundleCompletionProposal.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import org.bndtools.core.ui.icons.Icons;\n+import org.eclipse.core.resources.WorkspaceJob;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jface.text.contentassist.IContextInformation;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.graphics.Point;\n+\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.model.BndEditModel;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.bnd.osgi.Constants;\n+import aQute.bnd.osgi.Descriptors;\n+import aQute.lib.strings.Strings;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+class AddBundleCompletionProposal extends WorkspaceJob implements IJavaCompletionProposal {\n+\n+\tfinal BundleId\t\t\t\tbundle;\n+\tfinal String\t\t\t\tdisplayString;\n+\tfinal int\t\t\t\t\trelevance;\n+\tfinal IInvocationContext\tcontext;\n+\tfinal Project\t\t\t\tproject;\n+\tfinal String\t\t\t\tpathtype;\n+\tfinal String\t\t\t\tfqn;\n+\n+\tpublic AddBundleCompletionProposal(String fqn, BundleId bundle, int relevance, IInvocationContext context,\n+\t\tProject project, String pathtype) {\n+\t\tsuper(\"Adding '\" + bundle + \"' to \" + project + \" \" + pathtype);\n+\t\tthis.fqn = fqn;\n+\t\tthis.bundle = bundle;\n+\t\tthis.relevance = relevance;\n+\t\tthis.context = context;\n+\t\tthis.project = project;\n+\t\tthis.pathtype = pathtype;\n+\t\tthis.displayString = Strings.format(\"Add %s %s to %s (found %s)\", bundle.getBsn(), bundle.getShortVersion(),\n+\t\t\tpathtype, fqn);\n+\t}\n+\n+\t@Override\n+\tpublic void apply(org.eclipse.jface.text.IDocument document) {\n+\t\tschedule();\n+\t}\n+\n+\t/**\n+\t * @see org.eclipse.jface.text.contentassist.ICompletionProposal#getSelection(org.eclipse.jface.text.IDocument)\n+\t */\n+\t@Override\n+\tpublic Point getSelection(org.eclipse.jface.text.IDocument document) {\n+\t\treturn new Point(context.getSelectionOffset(), context.getSelectionLength());\n+\t}\n+\n+\t@Override\n+\tpublic String getAdditionalProposalInfo() {\n+\t\treturn displayString;\n+\t}\n+\n+\t@Override\n+\tpublic String getDisplayString() {\n+\t\treturn displayString;\n+\t}\n+\n+\t@Override\n+\tpublic Image getImage() {\n+\t\treturn Icons.image(\"bundle\");\n+\t}\n+\n+\t@Override\n+\tpublic IContextInformation getContextInformation() {\n+\t\treturn new IContextInformation() {\n+\n+\t\t\t@Override\n+\t\t\tpublic String getContextDisplayString() {\n+\t\t\t\treturn \"Added \" + bundle + \" to build path\";\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Image getImage() {\n+\t\t\t\treturn Icons.image(\"bundle\");\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic String getInformationDisplayString() {\n+\t\t\t\treturn \"Added \" + bundle + \" to build path - info\";\n+\t\t\t}\n+\n+\t\t};\n+\t}\n+\n+\t@Override\n+\tpublic int getRelevance() {\n+\t\treturn relevance;\n+\t}\n+\n+\t@Override\n+\tpublic IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {\n+\t\ttry {\n+\t\t\tIStatus status = Central.bndCall(() -> {\n+\t\t\t\tBndEditModel model = new BndEditModel(project);\n+\t\t\t\tmodel.load();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc0NzIwMw=="}, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjgwMzMzOnYy", "diffSide": "RIGHT", "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMjoxMjowMVrOF4dv7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODowNDoxNlrOF5KU5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc1MTk4MQ==", "bodyText": "For the common case where we haven't found any proposals, perhaps we should return null rather than an empty array. Saves the overhead of the extra object allocations. Relatively small optimisation though.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394751981", "createdAt": "2020-03-19T02:12:01Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.compiler.IProblem;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.ImportDeclaration;\n+import org.eclipse.jdt.core.dom.Name;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jdt.ui.text.java.IProblemLocation;\n+import org.eclipse.jdt.ui.text.java.IQuickFixProcessor;\n+\n+import aQute.bnd.build.Container;\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.Workspace;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.lib.exceptions.Exceptions;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+public class BuildpathQuickfixProcessor implements IQuickFixProcessor {\n+\n+\t@Override\n+\tpublic boolean hasCorrections(ICompilationUnit unit, int problemId) {\n+\t\tswitch (problemId) {\n+\t\t\tcase IProblem.IsClassPathCorrect :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.ImportNotFound :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.UndefinedType :\n+\t\t\t\treturn true;\n+\t\t\tdefault :\n+\t\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IJavaCompletionProposal[] getCorrections(IInvocationContext context, IProblemLocation[] locations)\n+\t\tthrows CoreException {\n+\t\ttry {\n+\t\t\tList<IJavaCompletionProposal> proposals = new ArrayList<>();\n+\n+\t\t\tICompilationUnit compUnit = context.getCompilationUnit();\n+\t\t\tIJavaProject java = compUnit.getJavaProject();\n+\t\t\tif (java == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tProject project = Central.getProject(java.getProject());\n+\t\t\tif (project == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tboolean test = isInDir(project.getTestSrc(), compUnit.getResource());\n+\t\t\tWorkspace workspace = project.getWorkspace();\n+\n+\t\t\tfor (IProblemLocation location : locations) {\n+\n+\t\t\t\tif (!hasCorrections(context.getCompilationUnit(), location.getProblemId()))\n+\t\t\t\t\treturn null;\n+\n+\t\t\t\tString partialClassName = getPartialClassName(location.getCoveringNode(context.getASTRoot()));\n+\t\t\t\tif (partialClassName == null && location.getProblemArguments().length > 0)\n+\t\t\t\t\tpartialClassName = location.getProblemArguments()[0];\n+\n+\t\t\t\tif (partialClassName == null)\n+\t\t\t\t\tcontinue;\n+\n+\t\t\t\tMap<String, List<BundleId>> result = workspace.search(partialClassName)\n+\t\t\t\t\t.orElseThrow(s -> new CoreException(new Status(IStatus.ERROR, Plugin.PLUGIN_ID, s)));\n+\n+\t\t\t\tSet<BundleId> buildpath = getBundleIds(project.getBuildpath());\n+\t\t\t\tSet<BundleId> testpath = test ? getBundleIds(project.getTestpath()) : Collections.emptySet();\n+\n+\t\t\t\tresult.entrySet()\n+\t\t\t\t\t.forEach(e -> {\n+\t\t\t\t\t\tfor (BundleId id : e.getValue()) {\n+\n+\t\t\t\t\t\t\tif (test && !testpath.contains(id) && !buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-testpath\"));\n+\n+\t\t\t\t\t\t\tif (!buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-buildpath\"));\n+\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t}\n+\t\t\treturn proposals.toArray(new IJavaCompletionProposal[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg3MTUzNQ==", "bodyText": "less is more ...", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394871535", "createdAt": "2020-03-19T08:52:31Z", "author": {"login": "pkriens"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.compiler.IProblem;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.ImportDeclaration;\n+import org.eclipse.jdt.core.dom.Name;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jdt.ui.text.java.IProblemLocation;\n+import org.eclipse.jdt.ui.text.java.IQuickFixProcessor;\n+\n+import aQute.bnd.build.Container;\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.Workspace;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.lib.exceptions.Exceptions;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+public class BuildpathQuickfixProcessor implements IQuickFixProcessor {\n+\n+\t@Override\n+\tpublic boolean hasCorrections(ICompilationUnit unit, int problemId) {\n+\t\tswitch (problemId) {\n+\t\t\tcase IProblem.IsClassPathCorrect :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.ImportNotFound :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.UndefinedType :\n+\t\t\t\treturn true;\n+\t\t\tdefault :\n+\t\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IJavaCompletionProposal[] getCorrections(IInvocationContext context, IProblemLocation[] locations)\n+\t\tthrows CoreException {\n+\t\ttry {\n+\t\t\tList<IJavaCompletionProposal> proposals = new ArrayList<>();\n+\n+\t\t\tICompilationUnit compUnit = context.getCompilationUnit();\n+\t\t\tIJavaProject java = compUnit.getJavaProject();\n+\t\t\tif (java == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tProject project = Central.getProject(java.getProject());\n+\t\t\tif (project == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tboolean test = isInDir(project.getTestSrc(), compUnit.getResource());\n+\t\t\tWorkspace workspace = project.getWorkspace();\n+\n+\t\t\tfor (IProblemLocation location : locations) {\n+\n+\t\t\t\tif (!hasCorrections(context.getCompilationUnit(), location.getProblemId()))\n+\t\t\t\t\treturn null;\n+\n+\t\t\t\tString partialClassName = getPartialClassName(location.getCoveringNode(context.getASTRoot()));\n+\t\t\t\tif (partialClassName == null && location.getProblemArguments().length > 0)\n+\t\t\t\t\tpartialClassName = location.getProblemArguments()[0];\n+\n+\t\t\t\tif (partialClassName == null)\n+\t\t\t\t\tcontinue;\n+\n+\t\t\t\tMap<String, List<BundleId>> result = workspace.search(partialClassName)\n+\t\t\t\t\t.orElseThrow(s -> new CoreException(new Status(IStatus.ERROR, Plugin.PLUGIN_ID, s)));\n+\n+\t\t\t\tSet<BundleId> buildpath = getBundleIds(project.getBuildpath());\n+\t\t\t\tSet<BundleId> testpath = test ? getBundleIds(project.getTestpath()) : Collections.emptySet();\n+\n+\t\t\t\tresult.entrySet()\n+\t\t\t\t\t.forEach(e -> {\n+\t\t\t\t\t\tfor (BundleId id : e.getValue()) {\n+\n+\t\t\t\t\t\t\tif (test && !testpath.contains(id) && !buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-testpath\"));\n+\n+\t\t\t\t\t\t\tif (!buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-buildpath\"));\n+\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t}\n+\t\t\treturn proposals.toArray(new IJavaCompletionProposal[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc1MTk4MQ=="}, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2ODgwMQ==", "bodyText": "Having re-read the spec for getCorrections() (per the javadoc), just to let you know that this is technically non-compliant - the javadoc calls for null to be returned if you don't have any proposals. It will probably work, but we might one day run into an issue if Eclipse ever relies on the assumption that it should be null.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r395368801", "createdAt": "2020-03-19T23:09:04Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.compiler.IProblem;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.ImportDeclaration;\n+import org.eclipse.jdt.core.dom.Name;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jdt.ui.text.java.IProblemLocation;\n+import org.eclipse.jdt.ui.text.java.IQuickFixProcessor;\n+\n+import aQute.bnd.build.Container;\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.Workspace;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.lib.exceptions.Exceptions;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+public class BuildpathQuickfixProcessor implements IQuickFixProcessor {\n+\n+\t@Override\n+\tpublic boolean hasCorrections(ICompilationUnit unit, int problemId) {\n+\t\tswitch (problemId) {\n+\t\t\tcase IProblem.IsClassPathCorrect :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.ImportNotFound :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.UndefinedType :\n+\t\t\t\treturn true;\n+\t\t\tdefault :\n+\t\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IJavaCompletionProposal[] getCorrections(IInvocationContext context, IProblemLocation[] locations)\n+\t\tthrows CoreException {\n+\t\ttry {\n+\t\t\tList<IJavaCompletionProposal> proposals = new ArrayList<>();\n+\n+\t\t\tICompilationUnit compUnit = context.getCompilationUnit();\n+\t\t\tIJavaProject java = compUnit.getJavaProject();\n+\t\t\tif (java == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tProject project = Central.getProject(java.getProject());\n+\t\t\tif (project == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tboolean test = isInDir(project.getTestSrc(), compUnit.getResource());\n+\t\t\tWorkspace workspace = project.getWorkspace();\n+\n+\t\t\tfor (IProblemLocation location : locations) {\n+\n+\t\t\t\tif (!hasCorrections(context.getCompilationUnit(), location.getProblemId()))\n+\t\t\t\t\treturn null;\n+\n+\t\t\t\tString partialClassName = getPartialClassName(location.getCoveringNode(context.getASTRoot()));\n+\t\t\t\tif (partialClassName == null && location.getProblemArguments().length > 0)\n+\t\t\t\t\tpartialClassName = location.getProblemArguments()[0];\n+\n+\t\t\t\tif (partialClassName == null)\n+\t\t\t\t\tcontinue;\n+\n+\t\t\t\tMap<String, List<BundleId>> result = workspace.search(partialClassName)\n+\t\t\t\t\t.orElseThrow(s -> new CoreException(new Status(IStatus.ERROR, Plugin.PLUGIN_ID, s)));\n+\n+\t\t\t\tSet<BundleId> buildpath = getBundleIds(project.getBuildpath());\n+\t\t\t\tSet<BundleId> testpath = test ? getBundleIds(project.getTestpath()) : Collections.emptySet();\n+\n+\t\t\t\tresult.entrySet()\n+\t\t\t\t\t.forEach(e -> {\n+\t\t\t\t\t\tfor (BundleId id : e.getValue()) {\n+\n+\t\t\t\t\t\t\tif (test && !testpath.contains(id) && !buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-testpath\"));\n+\n+\t\t\t\t\t\t\tif (!buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-buildpath\"));\n+\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t}\n+\t\t\treturn proposals.toArray(new IJavaCompletionProposal[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc1MTk4MQ=="}, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ4MjM0Mg==", "bodyText": "I disagree but it is not worth to fight about this. Fixed.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r395482342", "createdAt": "2020-03-20T08:04:16Z", "author": {"login": "pkriens"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.compiler.IProblem;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.ImportDeclaration;\n+import org.eclipse.jdt.core.dom.Name;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jdt.ui.text.java.IProblemLocation;\n+import org.eclipse.jdt.ui.text.java.IQuickFixProcessor;\n+\n+import aQute.bnd.build.Container;\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.Workspace;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.lib.exceptions.Exceptions;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+public class BuildpathQuickfixProcessor implements IQuickFixProcessor {\n+\n+\t@Override\n+\tpublic boolean hasCorrections(ICompilationUnit unit, int problemId) {\n+\t\tswitch (problemId) {\n+\t\t\tcase IProblem.IsClassPathCorrect :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.ImportNotFound :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.UndefinedType :\n+\t\t\t\treturn true;\n+\t\t\tdefault :\n+\t\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IJavaCompletionProposal[] getCorrections(IInvocationContext context, IProblemLocation[] locations)\n+\t\tthrows CoreException {\n+\t\ttry {\n+\t\t\tList<IJavaCompletionProposal> proposals = new ArrayList<>();\n+\n+\t\t\tICompilationUnit compUnit = context.getCompilationUnit();\n+\t\t\tIJavaProject java = compUnit.getJavaProject();\n+\t\t\tif (java == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tProject project = Central.getProject(java.getProject());\n+\t\t\tif (project == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tboolean test = isInDir(project.getTestSrc(), compUnit.getResource());\n+\t\t\tWorkspace workspace = project.getWorkspace();\n+\n+\t\t\tfor (IProblemLocation location : locations) {\n+\n+\t\t\t\tif (!hasCorrections(context.getCompilationUnit(), location.getProblemId()))\n+\t\t\t\t\treturn null;\n+\n+\t\t\t\tString partialClassName = getPartialClassName(location.getCoveringNode(context.getASTRoot()));\n+\t\t\t\tif (partialClassName == null && location.getProblemArguments().length > 0)\n+\t\t\t\t\tpartialClassName = location.getProblemArguments()[0];\n+\n+\t\t\t\tif (partialClassName == null)\n+\t\t\t\t\tcontinue;\n+\n+\t\t\t\tMap<String, List<BundleId>> result = workspace.search(partialClassName)\n+\t\t\t\t\t.orElseThrow(s -> new CoreException(new Status(IStatus.ERROR, Plugin.PLUGIN_ID, s)));\n+\n+\t\t\t\tSet<BundleId> buildpath = getBundleIds(project.getBuildpath());\n+\t\t\t\tSet<BundleId> testpath = test ? getBundleIds(project.getTestpath()) : Collections.emptySet();\n+\n+\t\t\t\tresult.entrySet()\n+\t\t\t\t\t.forEach(e -> {\n+\t\t\t\t\t\tfor (BundleId id : e.getValue()) {\n+\n+\t\t\t\t\t\t\tif (test && !testpath.contains(id) && !buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-testpath\"));\n+\n+\t\t\t\t\t\t\tif (!buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-buildpath\"));\n+\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t}\n+\t\t\treturn proposals.toArray(new IJavaCompletionProposal[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc1MTk4MQ=="}, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjgwMzUwOnYy", "diffSide": "RIGHT", "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMjoxMjowNlrOF4dwBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjozMzoyNFrOF51Uog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc1MjAwNw==", "bodyText": "Because this is the entry point from Eclipse into the quick fix processor, maybe it would be better to wrap this in a CoreException rather than allowing it to propagate up? I'm not 100% sure on Eclipse best practice here, but that seems to be what we've done elsewhere in Bndtools.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394752007", "createdAt": "2020-03-19T02:12:06Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.compiler.IProblem;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.ImportDeclaration;\n+import org.eclipse.jdt.core.dom.Name;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jdt.ui.text.java.IProblemLocation;\n+import org.eclipse.jdt.ui.text.java.IQuickFixProcessor;\n+\n+import aQute.bnd.build.Container;\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.Workspace;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.lib.exceptions.Exceptions;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+public class BuildpathQuickfixProcessor implements IQuickFixProcessor {\n+\n+\t@Override\n+\tpublic boolean hasCorrections(ICompilationUnit unit, int problemId) {\n+\t\tswitch (problemId) {\n+\t\t\tcase IProblem.IsClassPathCorrect :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.ImportNotFound :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.UndefinedType :\n+\t\t\t\treturn true;\n+\t\t\tdefault :\n+\t\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IJavaCompletionProposal[] getCorrections(IInvocationContext context, IProblemLocation[] locations)\n+\t\tthrows CoreException {\n+\t\ttry {\n+\t\t\tList<IJavaCompletionProposal> proposals = new ArrayList<>();\n+\n+\t\t\tICompilationUnit compUnit = context.getCompilationUnit();\n+\t\t\tIJavaProject java = compUnit.getJavaProject();\n+\t\t\tif (java == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tProject project = Central.getProject(java.getProject());\n+\t\t\tif (project == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tboolean test = isInDir(project.getTestSrc(), compUnit.getResource());\n+\t\t\tWorkspace workspace = project.getWorkspace();\n+\n+\t\t\tfor (IProblemLocation location : locations) {\n+\n+\t\t\t\tif (!hasCorrections(context.getCompilationUnit(), location.getProblemId()))\n+\t\t\t\t\treturn null;\n+\n+\t\t\t\tString partialClassName = getPartialClassName(location.getCoveringNode(context.getASTRoot()));\n+\t\t\t\tif (partialClassName == null && location.getProblemArguments().length > 0)\n+\t\t\t\t\tpartialClassName = location.getProblemArguments()[0];\n+\n+\t\t\t\tif (partialClassName == null)\n+\t\t\t\t\tcontinue;\n+\n+\t\t\t\tMap<String, List<BundleId>> result = workspace.search(partialClassName)\n+\t\t\t\t\t.orElseThrow(s -> new CoreException(new Status(IStatus.ERROR, Plugin.PLUGIN_ID, s)));\n+\n+\t\t\t\tSet<BundleId> buildpath = getBundleIds(project.getBuildpath());\n+\t\t\t\tSet<BundleId> testpath = test ? getBundleIds(project.getTestpath()) : Collections.emptySet();\n+\n+\t\t\t\tresult.entrySet()\n+\t\t\t\t\t.forEach(e -> {\n+\t\t\t\t\t\tfor (BundleId id : e.getValue()) {\n+\n+\t\t\t\t\t\t\tif (test && !testpath.contains(id) && !buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-testpath\"));\n+\n+\t\t\t\t\t\t\tif (!buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-buildpath\"));\n+\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t}\n+\t\t\treturn proposals.toArray(new IJavaCompletionProposal[0]);\n+\t\t} catch (Exception e) {\n+\t\t\tthrow Exceptions.duck(e);\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4NTMyMw==", "bodyText": "If you look at the code you see that CoreException is thrown when we have something useful to tell, see line 85. All other exceptions are basically out of contract. No way to do anything useful there. If there are common exceptions that we want to handle we should change the API to use Result.\nIn bnd, exceptions are treated as a boolean, they should just signal an out of contract failure. The new Result is really helpful here. Since not everybody follows that model, sometimes you need to catch an exception that contains information you cannot get in any other way. That is then necessary but we should try to treat exceptions as booleans, indicating you're in lala land, no way to known where you are anymore.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394885323", "createdAt": "2020-03-19T09:17:29Z", "author": {"login": "pkriens"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.compiler.IProblem;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.ImportDeclaration;\n+import org.eclipse.jdt.core.dom.Name;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jdt.ui.text.java.IProblemLocation;\n+import org.eclipse.jdt.ui.text.java.IQuickFixProcessor;\n+\n+import aQute.bnd.build.Container;\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.Workspace;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.lib.exceptions.Exceptions;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+public class BuildpathQuickfixProcessor implements IQuickFixProcessor {\n+\n+\t@Override\n+\tpublic boolean hasCorrections(ICompilationUnit unit, int problemId) {\n+\t\tswitch (problemId) {\n+\t\t\tcase IProblem.IsClassPathCorrect :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.ImportNotFound :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.UndefinedType :\n+\t\t\t\treturn true;\n+\t\t\tdefault :\n+\t\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IJavaCompletionProposal[] getCorrections(IInvocationContext context, IProblemLocation[] locations)\n+\t\tthrows CoreException {\n+\t\ttry {\n+\t\t\tList<IJavaCompletionProposal> proposals = new ArrayList<>();\n+\n+\t\t\tICompilationUnit compUnit = context.getCompilationUnit();\n+\t\t\tIJavaProject java = compUnit.getJavaProject();\n+\t\t\tif (java == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tProject project = Central.getProject(java.getProject());\n+\t\t\tif (project == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tboolean test = isInDir(project.getTestSrc(), compUnit.getResource());\n+\t\t\tWorkspace workspace = project.getWorkspace();\n+\n+\t\t\tfor (IProblemLocation location : locations) {\n+\n+\t\t\t\tif (!hasCorrections(context.getCompilationUnit(), location.getProblemId()))\n+\t\t\t\t\treturn null;\n+\n+\t\t\t\tString partialClassName = getPartialClassName(location.getCoveringNode(context.getASTRoot()));\n+\t\t\t\tif (partialClassName == null && location.getProblemArguments().length > 0)\n+\t\t\t\t\tpartialClassName = location.getProblemArguments()[0];\n+\n+\t\t\t\tif (partialClassName == null)\n+\t\t\t\t\tcontinue;\n+\n+\t\t\t\tMap<String, List<BundleId>> result = workspace.search(partialClassName)\n+\t\t\t\t\t.orElseThrow(s -> new CoreException(new Status(IStatus.ERROR, Plugin.PLUGIN_ID, s)));\n+\n+\t\t\t\tSet<BundleId> buildpath = getBundleIds(project.getBuildpath());\n+\t\t\t\tSet<BundleId> testpath = test ? getBundleIds(project.getTestpath()) : Collections.emptySet();\n+\n+\t\t\t\tresult.entrySet()\n+\t\t\t\t\t.forEach(e -> {\n+\t\t\t\t\t\tfor (BundleId id : e.getValue()) {\n+\n+\t\t\t\t\t\t\tif (test && !testpath.contains(id) && !buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-testpath\"));\n+\n+\t\t\t\t\t\t\tif (!buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-buildpath\"));\n+\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t}\n+\t\t\treturn proposals.toArray(new IJavaCompletionProposal[0]);\n+\t\t} catch (Exception e) {\n+\t\t\tthrow Exceptions.duck(e);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc1MjAwNw=="}, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4OTkzMQ==", "bodyText": "Hmm, I'm not sure I follow here. If this was a Bnd internal function, changing the API to use Result would be a sensible option. But this is part of the Eclipse API - we don't have control over it, we have to try and comply with it.\nThe documentation for IQuickFixProcessor.getCorrections() states that we may throw CoreException if something goes wrong. It doesn't say that we're allowed to throw any other kind of exception, and if we do Eclipse's behaviour will be undefined (especially a checked exception masked as an unchecked exception). It might prevent other quick fix processors from running. Less likely, but more seriously it might crash our editor, or our entire Eclipse instance. Surely it is better to be a good citizen and do our best to make sure that our own internal errors (even unanticipated errors caused by bugs) don't do damage to any of our \"neighbours\"?", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r395089931", "createdAt": "2020-03-19T14:57:07Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.compiler.IProblem;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.ImportDeclaration;\n+import org.eclipse.jdt.core.dom.Name;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jdt.ui.text.java.IProblemLocation;\n+import org.eclipse.jdt.ui.text.java.IQuickFixProcessor;\n+\n+import aQute.bnd.build.Container;\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.Workspace;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.lib.exceptions.Exceptions;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+public class BuildpathQuickfixProcessor implements IQuickFixProcessor {\n+\n+\t@Override\n+\tpublic boolean hasCorrections(ICompilationUnit unit, int problemId) {\n+\t\tswitch (problemId) {\n+\t\t\tcase IProblem.IsClassPathCorrect :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.ImportNotFound :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.UndefinedType :\n+\t\t\t\treturn true;\n+\t\t\tdefault :\n+\t\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IJavaCompletionProposal[] getCorrections(IInvocationContext context, IProblemLocation[] locations)\n+\t\tthrows CoreException {\n+\t\ttry {\n+\t\t\tList<IJavaCompletionProposal> proposals = new ArrayList<>();\n+\n+\t\t\tICompilationUnit compUnit = context.getCompilationUnit();\n+\t\t\tIJavaProject java = compUnit.getJavaProject();\n+\t\t\tif (java == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tProject project = Central.getProject(java.getProject());\n+\t\t\tif (project == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tboolean test = isInDir(project.getTestSrc(), compUnit.getResource());\n+\t\t\tWorkspace workspace = project.getWorkspace();\n+\n+\t\t\tfor (IProblemLocation location : locations) {\n+\n+\t\t\t\tif (!hasCorrections(context.getCompilationUnit(), location.getProblemId()))\n+\t\t\t\t\treturn null;\n+\n+\t\t\t\tString partialClassName = getPartialClassName(location.getCoveringNode(context.getASTRoot()));\n+\t\t\t\tif (partialClassName == null && location.getProblemArguments().length > 0)\n+\t\t\t\t\tpartialClassName = location.getProblemArguments()[0];\n+\n+\t\t\t\tif (partialClassName == null)\n+\t\t\t\t\tcontinue;\n+\n+\t\t\t\tMap<String, List<BundleId>> result = workspace.search(partialClassName)\n+\t\t\t\t\t.orElseThrow(s -> new CoreException(new Status(IStatus.ERROR, Plugin.PLUGIN_ID, s)));\n+\n+\t\t\t\tSet<BundleId> buildpath = getBundleIds(project.getBuildpath());\n+\t\t\t\tSet<BundleId> testpath = test ? getBundleIds(project.getTestpath()) : Collections.emptySet();\n+\n+\t\t\t\tresult.entrySet()\n+\t\t\t\t\t.forEach(e -> {\n+\t\t\t\t\t\tfor (BundleId id : e.getValue()) {\n+\n+\t\t\t\t\t\t\tif (test && !testpath.contains(id) && !buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-testpath\"));\n+\n+\t\t\t\t\t\t\tif (!buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-buildpath\"));\n+\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t}\n+\t\t\treturn proposals.toArray(new IJavaCompletionProposal[0]);\n+\t\t} catch (Exception e) {\n+\t\t\tthrow Exceptions.duck(e);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc1MjAwNw=="}, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEwNDkxNQ==", "bodyText": "The issue is that in 'normal' code the exception would always be a runtime exception. I decided from the beginning that an Checked Exceptions are evil and should be treated as runtime exceptions. I.e. if this exception is thrown, the code is wrong. The Exceptions class was added to treat the checked exceptions as RuntimeExceptions.\nYou're right about the consequences but an exception there means the code is fundamentally broken. I.e. like a NPE. It just should not happen and therefore should not have a decent  handling. It is Game Over.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r395104915", "createdAt": "2020-03-19T15:16:39Z", "author": {"login": "pkriens"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.compiler.IProblem;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.ImportDeclaration;\n+import org.eclipse.jdt.core.dom.Name;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jdt.ui.text.java.IProblemLocation;\n+import org.eclipse.jdt.ui.text.java.IQuickFixProcessor;\n+\n+import aQute.bnd.build.Container;\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.Workspace;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.lib.exceptions.Exceptions;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+public class BuildpathQuickfixProcessor implements IQuickFixProcessor {\n+\n+\t@Override\n+\tpublic boolean hasCorrections(ICompilationUnit unit, int problemId) {\n+\t\tswitch (problemId) {\n+\t\t\tcase IProblem.IsClassPathCorrect :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.ImportNotFound :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.UndefinedType :\n+\t\t\t\treturn true;\n+\t\t\tdefault :\n+\t\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IJavaCompletionProposal[] getCorrections(IInvocationContext context, IProblemLocation[] locations)\n+\t\tthrows CoreException {\n+\t\ttry {\n+\t\t\tList<IJavaCompletionProposal> proposals = new ArrayList<>();\n+\n+\t\t\tICompilationUnit compUnit = context.getCompilationUnit();\n+\t\t\tIJavaProject java = compUnit.getJavaProject();\n+\t\t\tif (java == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tProject project = Central.getProject(java.getProject());\n+\t\t\tif (project == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tboolean test = isInDir(project.getTestSrc(), compUnit.getResource());\n+\t\t\tWorkspace workspace = project.getWorkspace();\n+\n+\t\t\tfor (IProblemLocation location : locations) {\n+\n+\t\t\t\tif (!hasCorrections(context.getCompilationUnit(), location.getProblemId()))\n+\t\t\t\t\treturn null;\n+\n+\t\t\t\tString partialClassName = getPartialClassName(location.getCoveringNode(context.getASTRoot()));\n+\t\t\t\tif (partialClassName == null && location.getProblemArguments().length > 0)\n+\t\t\t\t\tpartialClassName = location.getProblemArguments()[0];\n+\n+\t\t\t\tif (partialClassName == null)\n+\t\t\t\t\tcontinue;\n+\n+\t\t\t\tMap<String, List<BundleId>> result = workspace.search(partialClassName)\n+\t\t\t\t\t.orElseThrow(s -> new CoreException(new Status(IStatus.ERROR, Plugin.PLUGIN_ID, s)));\n+\n+\t\t\t\tSet<BundleId> buildpath = getBundleIds(project.getBuildpath());\n+\t\t\t\tSet<BundleId> testpath = test ? getBundleIds(project.getTestpath()) : Collections.emptySet();\n+\n+\t\t\t\tresult.entrySet()\n+\t\t\t\t\t.forEach(e -> {\n+\t\t\t\t\t\tfor (BundleId id : e.getValue()) {\n+\n+\t\t\t\t\t\t\tif (test && !testpath.contains(id) && !buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-testpath\"));\n+\n+\t\t\t\t\t\t\tif (!buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-buildpath\"));\n+\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t}\n+\t\t\treturn proposals.toArray(new IJavaCompletionProposal[0]);\n+\t\t} catch (Exception e) {\n+\t\t\tthrow Exceptions.duck(e);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc1MjAwNw=="}, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2Nzg2Mg==", "bodyText": "I get that an exception there means the code is fundamentally broken, that it should not happen. But if it is fundamentally broken/it does happen? What if we do cause an NPE, for example? Wouldn't it be better if we didn't bring down Eclipse or stop other quick fix processors from running?\nIf your answer to this is simply \"no\", I guess I will shrug my shoulders and note my disagreement for the record. I would sandbox it to prevent our contagion from spreading.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r395367862", "createdAt": "2020-03-19T23:06:07Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.compiler.IProblem;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.ImportDeclaration;\n+import org.eclipse.jdt.core.dom.Name;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jdt.ui.text.java.IProblemLocation;\n+import org.eclipse.jdt.ui.text.java.IQuickFixProcessor;\n+\n+import aQute.bnd.build.Container;\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.Workspace;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.lib.exceptions.Exceptions;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+public class BuildpathQuickfixProcessor implements IQuickFixProcessor {\n+\n+\t@Override\n+\tpublic boolean hasCorrections(ICompilationUnit unit, int problemId) {\n+\t\tswitch (problemId) {\n+\t\t\tcase IProblem.IsClassPathCorrect :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.ImportNotFound :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.UndefinedType :\n+\t\t\t\treturn true;\n+\t\t\tdefault :\n+\t\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IJavaCompletionProposal[] getCorrections(IInvocationContext context, IProblemLocation[] locations)\n+\t\tthrows CoreException {\n+\t\ttry {\n+\t\t\tList<IJavaCompletionProposal> proposals = new ArrayList<>();\n+\n+\t\t\tICompilationUnit compUnit = context.getCompilationUnit();\n+\t\t\tIJavaProject java = compUnit.getJavaProject();\n+\t\t\tif (java == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tProject project = Central.getProject(java.getProject());\n+\t\t\tif (project == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tboolean test = isInDir(project.getTestSrc(), compUnit.getResource());\n+\t\t\tWorkspace workspace = project.getWorkspace();\n+\n+\t\t\tfor (IProblemLocation location : locations) {\n+\n+\t\t\t\tif (!hasCorrections(context.getCompilationUnit(), location.getProblemId()))\n+\t\t\t\t\treturn null;\n+\n+\t\t\t\tString partialClassName = getPartialClassName(location.getCoveringNode(context.getASTRoot()));\n+\t\t\t\tif (partialClassName == null && location.getProblemArguments().length > 0)\n+\t\t\t\t\tpartialClassName = location.getProblemArguments()[0];\n+\n+\t\t\t\tif (partialClassName == null)\n+\t\t\t\t\tcontinue;\n+\n+\t\t\t\tMap<String, List<BundleId>> result = workspace.search(partialClassName)\n+\t\t\t\t\t.orElseThrow(s -> new CoreException(new Status(IStatus.ERROR, Plugin.PLUGIN_ID, s)));\n+\n+\t\t\t\tSet<BundleId> buildpath = getBundleIds(project.getBuildpath());\n+\t\t\t\tSet<BundleId> testpath = test ? getBundleIds(project.getTestpath()) : Collections.emptySet();\n+\n+\t\t\t\tresult.entrySet()\n+\t\t\t\t\t.forEach(e -> {\n+\t\t\t\t\t\tfor (BundleId id : e.getValue()) {\n+\n+\t\t\t\t\t\t\tif (test && !testpath.contains(id) && !buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-testpath\"));\n+\n+\t\t\t\t\t\t\tif (!buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-buildpath\"));\n+\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t}\n+\t\t\treturn proposals.toArray(new IJavaCompletionProposal[0]);\n+\t\t} catch (Exception e) {\n+\t\t\tthrow Exceptions.duck(e);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc1MjAwNw=="}, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ4MDI2Mw==", "bodyText": "But Eclipse is sandboxing it already ... Any runtime exception must be caught or Eclipse would not survive very long. It should also be logged in the error log, which Core Exceptions aren't I think. It happens to be visible here because I decided early on in bnd (1999 probably) that checked exceptions are evil and all methods are throwing Exception, basically treating all exceptions as runtime exceptions. The primary reason is to pass the original cause upwards instead of the long chains that too often miss the root cause. This strategy makes runtime exceptions visible in cases like this, cases that normal code can ignore. If this exception happens, it is like a core dump in C code or panic() in Rust. I want this to be really bad because it is a code error and must be fixed asap, not hidden in any way. The goal is to show the place where the thing failed and we should therefore not wrap it in any way. And I want it in the Eclipse log.\nSo far it worked fine for me. However, lambdas threw a bit of a wrench in this strategy and that makes us struggle a bit with it. I wish Java had an option to ignore checked exceptions, like every other language on earth. It is probably the worst idea since language design began. So due to lambdas, I'd probably not throw Exception on every method again. But that would increase the use of duck() because I refuse to play the game of checked exceptions unless forced by bad API design.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r395480263", "createdAt": "2020-03-20T07:58:19Z", "author": {"login": "pkriens"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.compiler.IProblem;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.ImportDeclaration;\n+import org.eclipse.jdt.core.dom.Name;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jdt.ui.text.java.IProblemLocation;\n+import org.eclipse.jdt.ui.text.java.IQuickFixProcessor;\n+\n+import aQute.bnd.build.Container;\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.Workspace;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.lib.exceptions.Exceptions;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+public class BuildpathQuickfixProcessor implements IQuickFixProcessor {\n+\n+\t@Override\n+\tpublic boolean hasCorrections(ICompilationUnit unit, int problemId) {\n+\t\tswitch (problemId) {\n+\t\t\tcase IProblem.IsClassPathCorrect :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.ImportNotFound :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.UndefinedType :\n+\t\t\t\treturn true;\n+\t\t\tdefault :\n+\t\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IJavaCompletionProposal[] getCorrections(IInvocationContext context, IProblemLocation[] locations)\n+\t\tthrows CoreException {\n+\t\ttry {\n+\t\t\tList<IJavaCompletionProposal> proposals = new ArrayList<>();\n+\n+\t\t\tICompilationUnit compUnit = context.getCompilationUnit();\n+\t\t\tIJavaProject java = compUnit.getJavaProject();\n+\t\t\tif (java == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tProject project = Central.getProject(java.getProject());\n+\t\t\tif (project == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tboolean test = isInDir(project.getTestSrc(), compUnit.getResource());\n+\t\t\tWorkspace workspace = project.getWorkspace();\n+\n+\t\t\tfor (IProblemLocation location : locations) {\n+\n+\t\t\t\tif (!hasCorrections(context.getCompilationUnit(), location.getProblemId()))\n+\t\t\t\t\treturn null;\n+\n+\t\t\t\tString partialClassName = getPartialClassName(location.getCoveringNode(context.getASTRoot()));\n+\t\t\t\tif (partialClassName == null && location.getProblemArguments().length > 0)\n+\t\t\t\t\tpartialClassName = location.getProblemArguments()[0];\n+\n+\t\t\t\tif (partialClassName == null)\n+\t\t\t\t\tcontinue;\n+\n+\t\t\t\tMap<String, List<BundleId>> result = workspace.search(partialClassName)\n+\t\t\t\t\t.orElseThrow(s -> new CoreException(new Status(IStatus.ERROR, Plugin.PLUGIN_ID, s)));\n+\n+\t\t\t\tSet<BundleId> buildpath = getBundleIds(project.getBuildpath());\n+\t\t\t\tSet<BundleId> testpath = test ? getBundleIds(project.getTestpath()) : Collections.emptySet();\n+\n+\t\t\t\tresult.entrySet()\n+\t\t\t\t\t.forEach(e -> {\n+\t\t\t\t\t\tfor (BundleId id : e.getValue()) {\n+\n+\t\t\t\t\t\t\tif (test && !testpath.contains(id) && !buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-testpath\"));\n+\n+\t\t\t\t\t\t\tif (!buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-buildpath\"));\n+\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t}\n+\t\t\treturn proposals.toArray(new IJavaCompletionProposal[0]);\n+\t\t} catch (Exception e) {\n+\t\t\tthrow Exceptions.duck(e);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc1MjAwNw=="}, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4Njc4Ng==", "bodyText": "If Eclipse is properly sandboxing it already, then scratch what I said - I agree that yours is the best implementation in that circumstance. Unnecessary wrapping of the exception makes it harder to find the root cause in the logs.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r396186786", "createdAt": "2020-03-23T02:33:24Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.compiler.IProblem;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.ImportDeclaration;\n+import org.eclipse.jdt.core.dom.Name;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jdt.ui.text.java.IProblemLocation;\n+import org.eclipse.jdt.ui.text.java.IQuickFixProcessor;\n+\n+import aQute.bnd.build.Container;\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.Workspace;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.lib.exceptions.Exceptions;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+public class BuildpathQuickfixProcessor implements IQuickFixProcessor {\n+\n+\t@Override\n+\tpublic boolean hasCorrections(ICompilationUnit unit, int problemId) {\n+\t\tswitch (problemId) {\n+\t\t\tcase IProblem.IsClassPathCorrect :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.ImportNotFound :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.UndefinedType :\n+\t\t\t\treturn true;\n+\t\t\tdefault :\n+\t\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IJavaCompletionProposal[] getCorrections(IInvocationContext context, IProblemLocation[] locations)\n+\t\tthrows CoreException {\n+\t\ttry {\n+\t\t\tList<IJavaCompletionProposal> proposals = new ArrayList<>();\n+\n+\t\t\tICompilationUnit compUnit = context.getCompilationUnit();\n+\t\t\tIJavaProject java = compUnit.getJavaProject();\n+\t\t\tif (java == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tProject project = Central.getProject(java.getProject());\n+\t\t\tif (project == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tboolean test = isInDir(project.getTestSrc(), compUnit.getResource());\n+\t\t\tWorkspace workspace = project.getWorkspace();\n+\n+\t\t\tfor (IProblemLocation location : locations) {\n+\n+\t\t\t\tif (!hasCorrections(context.getCompilationUnit(), location.getProblemId()))\n+\t\t\t\t\treturn null;\n+\n+\t\t\t\tString partialClassName = getPartialClassName(location.getCoveringNode(context.getASTRoot()));\n+\t\t\t\tif (partialClassName == null && location.getProblemArguments().length > 0)\n+\t\t\t\t\tpartialClassName = location.getProblemArguments()[0];\n+\n+\t\t\t\tif (partialClassName == null)\n+\t\t\t\t\tcontinue;\n+\n+\t\t\t\tMap<String, List<BundleId>> result = workspace.search(partialClassName)\n+\t\t\t\t\t.orElseThrow(s -> new CoreException(new Status(IStatus.ERROR, Plugin.PLUGIN_ID, s)));\n+\n+\t\t\t\tSet<BundleId> buildpath = getBundleIds(project.getBuildpath());\n+\t\t\t\tSet<BundleId> testpath = test ? getBundleIds(project.getTestpath()) : Collections.emptySet();\n+\n+\t\t\t\tresult.entrySet()\n+\t\t\t\t\t.forEach(e -> {\n+\t\t\t\t\t\tfor (BundleId id : e.getValue()) {\n+\n+\t\t\t\t\t\t\tif (test && !testpath.contains(id) && !buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-testpath\"));\n+\n+\t\t\t\t\t\t\tif (!buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-buildpath\"));\n+\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t}\n+\t\t\treturn proposals.toArray(new IJavaCompletionProposal[0]);\n+\t\t} catch (Exception e) {\n+\t\t\tthrow Exceptions.duck(e);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc1MjAwNw=="}, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjgyMjMzOnYy", "diffSide": "RIGHT", "path": "bndtools.core/test/org/bndtools/core/editors/BuildpathQuickFixProcessorTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMjoyMjoyOFrOF4d6hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDozNjoxMFrOF4xX5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc1NDY5Mg==", "bodyText": "I don't think it's accurate to say that \"the majority of the code is tested in bnd\". I'm sure that all of the searching code is tested in Bnd - but searching is only half of the quick fix processor's responsibility. The other thing that the quick fix processor has to do (equally important) is understand Eclipse's error message formats so that it knows what to search for and can translate that into a form that Bnd understands, and then conversely take Bnd's response and translate that into a form that Eclipse can use. The first part in particular is a non-trivial operation and accounted for a significant chunk of the original quick-fix code.\nThe original ImportPackageQuickFixProcessorTest was close to a full end-to-end test - it used actual source code with errors which could be quick-fixed, then it used Eclipse's compiler to compile these into an actual AST, and finally it created actual IProblemLocation objects (which were built based on observed values determined by experimentation on a live Eclipse instance). It passed these in to getCompletions() to ensure that the correct set of ICompletionProposals was created.\nIn order to ensure that we haven't had any regressions, we should do something similar. The old test should form the basis, as I know it had pretty good coverage of lots of weird corner cases. Your code is admittedly a lot simpler, but I'm not sure if this simplification has come at the expense of us not handling some of these weird corner cases.\nThe more I think about this as I type, the more I am of the opinion that the best way forward for me to review your changes will be to port ImportPackageQuickFixProcessor to BuildpathQuickFixProcessorTest. For starters, I can't remember all of the weird corner cases, and even if I could testing them all manually would be onerous. If I instead go to the effort of porting the test, then we have the added benefit of a solid regression test moving forward so that others can make changes without fear of breaking existing functionality (that is, after all, why I went to the effort of writing the original regression test in the first place!)", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394754692", "createdAt": "2020-03-19T02:22:28Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/test/org/bndtools/core/editors/BuildpathQuickFixProcessorTest.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.bndtools.core.editors;\n+\n+import org.junit.Test;\n+\n+public class BuildpathQuickFixProcessorTest {\n+\n+\t@Test\n+\tpublic void testBasic() {\n+\t\t// not sure how to test this\n+\t\t// the majority of the code is tested in bnd\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg3MDg3MA==", "bodyText": "That was what I was secretly hoping for :-)\nIt is always very nice if you have a different person doing the test.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394870870", "createdAt": "2020-03-19T08:51:17Z", "author": {"login": "pkriens"}, "path": "bndtools.core/test/org/bndtools/core/editors/BuildpathQuickFixProcessorTest.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.bndtools.core.editors;\n+\n+import org.junit.Test;\n+\n+public class BuildpathQuickFixProcessorTest {\n+\n+\t@Test\n+\tpublic void testBasic() {\n+\t\t// not sure how to test this\n+\t\t// the majority of the code is tested in bnd\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc1NDY5Mg=="}, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5NjEzMA==", "bodyText": "If you just could have a standalone test where I can give a Java source with a problem and get the quick fixes, that would be great. We could use this in other cases as well since this stuff is highly undertested.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394896130", "createdAt": "2020-03-19T09:36:16Z", "author": {"login": "pkriens"}, "path": "bndtools.core/test/org/bndtools/core/editors/BuildpathQuickFixProcessorTest.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.bndtools.core.editors;\n+\n+import org.junit.Test;\n+\n+public class BuildpathQuickFixProcessorTest {\n+\n+\t@Test\n+\tpublic void testBasic() {\n+\t\t// not sure how to test this\n+\t\t// the majority of the code is tested in bnd\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc1NDY5Mg=="}, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA3MzUxMQ==", "bodyText": "As noted above, I'll have a look when I get a chance.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r395073511", "createdAt": "2020-03-19T14:36:10Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/test/org/bndtools/core/editors/BuildpathQuickFixProcessorTest.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.bndtools.core.editors;\n+\n+import org.junit.Test;\n+\n+public class BuildpathQuickFixProcessorTest {\n+\n+\t@Test\n+\tpublic void testBasic() {\n+\t\t// not sure how to test this\n+\t\t// the majority of the code is tested in bnd\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc1NDY5Mg=="}, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1429, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}