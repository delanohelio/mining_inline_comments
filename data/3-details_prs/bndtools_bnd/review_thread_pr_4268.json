{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3ODA5NTg3", "number": 4268, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjozMTo1N1rOEZHnEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjozODozOVrOEZHwgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Nzc0NTQ2OnYy", "diffSide": "RIGHT", "path": "biz.aQute.bndlib.tests/test/aQute/bnd/build/classindex/ClassIndexTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjozMTo1N1rOHBwE7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMjozNDowM1rOHCBKsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5ODMxNw==", "bodyText": "Each test method should have its own tmp dir so there is no chance of side effects between tests. This should be @BeforeEach.", "url": "https://github.com/bndtools/bnd/pull/4268#discussion_r471598317", "createdAt": "2020-08-17T16:31:57Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib.tests/test/aQute/bnd/build/classindex/ClassIndexTest.java", "diffHunk": "@@ -20,50 +18,97 @@\n import aQute.libg.map.MAP.MAPX;\n \n public class ClassIndexTest {\n-\tpublic static final String\tTMPDIR\t\t= \"generated/tmp/test\";\n+\tpublic static final String\t\t\tTMPDIR\t= \"generated/tmp/test\";\n+\tprivate static File\t\t\t\t\ttestDir;\n+\tprivate static File\t\t\t\t\thome\t= IO.getFile(\"testresources/classindex\");\n+\tprivate static Workspace\t\t\tws;\n+\n \t@Rule\n-\tpublic final TestName\t\ttestName\t= new TestName();\n-\tprivate File\t\t\t\ttestDir;\n-\tprivate File\t\t\t\thome\t\t= IO.getFile(\"testresources/classindex\");\n+\tpublic final JUnitSoftAssertions\tsoftly\t= new JUnitSoftAssertions();\n \n-\t@Before\n-\tpublic void setUp() throws IOException {\n-\t\ttestDir = new File(TMPDIR, getClass().getName() + \"/\" + testName.getMethodName());\n+\t@BeforeClass\n+\tpublic static void setUp() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f35b2b6c19c083475fcc82ada9e0c1ac76db841"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0NDE4NA==", "bodyText": "Setting up the workspace afresh for each test comes at performance penalty. I believe that this would be necessary if the tests were attempting to modify the workspace in some way, but as the workspace is read-only in these tests it seems like overkill to me.", "url": "https://github.com/bndtools/bnd/pull/4268#discussion_r471844184", "createdAt": "2020-08-18T00:22:33Z", "author": {"login": "kriegfrj"}, "path": "biz.aQute.bndlib.tests/test/aQute/bnd/build/classindex/ClassIndexTest.java", "diffHunk": "@@ -20,50 +18,97 @@\n import aQute.libg.map.MAP.MAPX;\n \n public class ClassIndexTest {\n-\tpublic static final String\tTMPDIR\t\t= \"generated/tmp/test\";\n+\tpublic static final String\t\t\tTMPDIR\t= \"generated/tmp/test\";\n+\tprivate static File\t\t\t\t\ttestDir;\n+\tprivate static File\t\t\t\t\thome\t= IO.getFile(\"testresources/classindex\");\n+\tprivate static Workspace\t\t\tws;\n+\n \t@Rule\n-\tpublic final TestName\t\ttestName\t= new TestName();\n-\tprivate File\t\t\t\ttestDir;\n-\tprivate File\t\t\t\thome\t\t= IO.getFile(\"testresources/classindex\");\n+\tpublic final JUnitSoftAssertions\tsoftly\t= new JUnitSoftAssertions();\n \n-\t@Before\n-\tpublic void setUp() throws IOException {\n-\t\ttestDir = new File(TMPDIR, getClass().getName() + \"/\" + testName.getMethodName());\n+\t@BeforeClass\n+\tpublic static void setUp() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5ODMxNw=="}, "originalCommit": {"oid": "2f35b2b6c19c083475fcc82ada9e0c1ac76db841"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0OTE3NQ==", "bodyText": "Lets take the perf hit. I want the test cases to be side effect free and that is how we guarantee that. We do this in many other test cases. Also, a workspace is not read-only. Many things can be going on since there is a lot of code involved.", "url": "https://github.com/bndtools/bnd/pull/4268#discussion_r471849175", "createdAt": "2020-08-18T00:41:12Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib.tests/test/aQute/bnd/build/classindex/ClassIndexTest.java", "diffHunk": "@@ -20,50 +18,97 @@\n import aQute.libg.map.MAP.MAPX;\n \n public class ClassIndexTest {\n-\tpublic static final String\tTMPDIR\t\t= \"generated/tmp/test\";\n+\tpublic static final String\t\t\tTMPDIR\t= \"generated/tmp/test\";\n+\tprivate static File\t\t\t\t\ttestDir;\n+\tprivate static File\t\t\t\t\thome\t= IO.getFile(\"testresources/classindex\");\n+\tprivate static Workspace\t\t\tws;\n+\n \t@Rule\n-\tpublic final TestName\t\ttestName\t= new TestName();\n-\tprivate File\t\t\t\ttestDir;\n-\tprivate File\t\t\t\thome\t\t= IO.getFile(\"testresources/classindex\");\n+\tpublic final JUnitSoftAssertions\tsoftly\t= new JUnitSoftAssertions();\n \n-\t@Before\n-\tpublic void setUp() throws IOException {\n-\t\ttestDir = new File(TMPDIR, getClass().getName() + \"/\" + testName.getMethodName());\n+\t@BeforeClass\n+\tpublic static void setUp() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5ODMxNw=="}, "originalCommit": {"oid": "2f35b2b6c19c083475fcc82ada9e0c1ac76db841"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg3ODMyMg==", "bodyText": "Done.", "url": "https://github.com/bndtools/bnd/pull/4268#discussion_r471878322", "createdAt": "2020-08-18T02:34:03Z", "author": {"login": "kriegfrj"}, "path": "biz.aQute.bndlib.tests/test/aQute/bnd/build/classindex/ClassIndexTest.java", "diffHunk": "@@ -20,50 +18,97 @@\n import aQute.libg.map.MAP.MAPX;\n \n public class ClassIndexTest {\n-\tpublic static final String\tTMPDIR\t\t= \"generated/tmp/test\";\n+\tpublic static final String\t\t\tTMPDIR\t= \"generated/tmp/test\";\n+\tprivate static File\t\t\t\t\ttestDir;\n+\tprivate static File\t\t\t\t\thome\t= IO.getFile(\"testresources/classindex\");\n+\tprivate static Workspace\t\t\tws;\n+\n \t@Rule\n-\tpublic final TestName\t\ttestName\t= new TestName();\n-\tprivate File\t\t\t\ttestDir;\n-\tprivate File\t\t\t\thome\t\t= IO.getFile(\"testresources/classindex\");\n+\tpublic final JUnitSoftAssertions\tsoftly\t= new JUnitSoftAssertions();\n \n-\t@Before\n-\tpublic void setUp() throws IOException {\n-\t\ttestDir = new File(TMPDIR, getClass().getName() + \"/\" + testName.getMethodName());\n+\t@BeforeClass\n+\tpublic static void setUp() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5ODMxNw=="}, "originalCommit": {"oid": "2f35b2b6c19c083475fcc82ada9e0c1ac76db841"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Nzc2OTYyOnYy", "diffSide": "RIGHT", "path": "bndtools.core.test/src/bndtools/core/test/editors/quickfix/BuildpathQuickFixProcessorTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjozODozOVrOHBwT2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDoxNzo1OVrOHCCulg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwMjEzNw==", "bodyText": "If you need parameter names, then you need to tell the compiler (javac and eclipse) to compile the parameter names in. So you probably need to make a change to this test project similar to:\n26f649a", "url": "https://github.com/bndtools/bnd/pull/4268#discussion_r471602137", "createdAt": "2020-08-17T16:38:39Z", "author": {"login": "bjhargrave"}, "path": "bndtools.core.test/src/bndtools/core/test/editors/quickfix/BuildpathQuickFixProcessorTest.java", "diffHunk": "@@ -826,8 +853,25 @@ void withFQClassLiteral_asAnnotationParameter_suggestsBundles(SoftAssertions sof\n \t\t\tsuggestsBundle(\"bndtools.core.test.fodder.iface\", \"1.0.0\", \"iface.bundle.MyInterface\"));\n \t}\n \n+\t@Disabled(\"Can't seem to make this work - binding information seems to be missing from class literal, I think this is\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f35b2b6c19c083475fcc82ada9e0c1ac76db841"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0NjYwMA==", "bodyText": "Thanks - but I don't think that will help. The quick fix processor doesn't need to know the variable or parameter names, only their types.\nIt seemed that even though ClassWithInterfaceExtendingMyInterface is on the classpath and I have bindings recovery turned on, Eclipse's compiler wasn't properly generating the type binding information for the hierarchy of ClassWithInterfaceExtendingMyInterface so that I could find the missing type.\nI got to the point where I felt that this was actually a bug in Eclipse that it wasn't fully recovering the incomplete type. However, I just had another idea that I will retry.", "url": "https://github.com/bndtools/bnd/pull/4268#discussion_r471846600", "createdAt": "2020-08-18T00:31:38Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core.test/src/bndtools/core/test/editors/quickfix/BuildpathQuickFixProcessorTest.java", "diffHunk": "@@ -826,8 +853,25 @@ void withFQClassLiteral_asAnnotationParameter_suggestsBundles(SoftAssertions sof\n \t\t\tsuggestsBundle(\"bndtools.core.test.fodder.iface\", \"1.0.0\", \"iface.bundle.MyInterface\"));\n \t}\n \n+\t@Disabled(\"Can't seem to make this work - binding information seems to be missing from class literal, I think this is\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwMjEzNw=="}, "originalCommit": {"oid": "2f35b2b6c19c083475fcc82ada9e0c1ac76db841"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4MDQ1Ng==", "bodyText": "I retried the idea and re-confirmed my original diagnosis. This time I documented the issue more precisely in the test code itself. I left in there in case the Eclipse issue is ever resolved, then this test case can be re-instated.\nI'm able to get the binding information for ClassWithInterfaceExtendingMyInterface. However, when I call getInterfaces() on the type binding it returns an empty array. What it should be doing is returning a recovered type binding for its implemented interface InterfaceExtendingMyInterface (which the quick fix processor would then know how to fix).\nThe annoying thing is that if you print out the type binding for ClassWithInterfaceExtendingMyInterface or examine its private state variables, you can see that Eclipse knows it implements InterfaceExtendingMyInterface and has a recovered binding for it. It's just not returning it in getInterfaces().", "url": "https://github.com/bndtools/bnd/pull/4268#discussion_r471880456", "createdAt": "2020-08-18T02:42:21Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core.test/src/bndtools/core/test/editors/quickfix/BuildpathQuickFixProcessorTest.java", "diffHunk": "@@ -826,8 +853,25 @@ void withFQClassLiteral_asAnnotationParameter_suggestsBundles(SoftAssertions sof\n \t\t\tsuggestsBundle(\"bndtools.core.test.fodder.iface\", \"1.0.0\", \"iface.bundle.MyInterface\"));\n \t}\n \n+\t@Disabled(\"Can't seem to make this work - binding information seems to be missing from class literal, I think this is\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwMjEzNw=="}, "originalCommit": {"oid": "2f35b2b6c19c083475fcc82ada9e0c1ac76db841"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4NTA2NQ==", "bodyText": "Hmm. Is there an Eclipse bug filed for this, I wonder?", "url": "https://github.com/bndtools/bnd/pull/4268#discussion_r471885065", "createdAt": "2020-08-18T02:59:17Z", "author": {"login": "bjhargrave"}, "path": "bndtools.core.test/src/bndtools/core/test/editors/quickfix/BuildpathQuickFixProcessorTest.java", "diffHunk": "@@ -826,8 +853,25 @@ void withFQClassLiteral_asAnnotationParameter_suggestsBundles(SoftAssertions sof\n \t\t\tsuggestsBundle(\"bndtools.core.test.fodder.iface\", \"1.0.0\", \"iface.bundle.MyInterface\"));\n \t}\n \n+\t@Disabled(\"Can't seem to make this work - binding information seems to be missing from class literal, I think this is\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwMjEzNw=="}, "originalCommit": {"oid": "2f35b2b6c19c083475fcc82ada9e0c1ac76db841"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwMzg5NA==", "bodyText": "There is now! https://bugs.eclipse.org/bugs/show_bug.cgi?id=566145", "url": "https://github.com/bndtools/bnd/pull/4268#discussion_r471903894", "createdAt": "2020-08-18T04:17:59Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core.test/src/bndtools/core/test/editors/quickfix/BuildpathQuickFixProcessorTest.java", "diffHunk": "@@ -826,8 +853,25 @@ void withFQClassLiteral_asAnnotationParameter_suggestsBundles(SoftAssertions sof\n \t\t\tsuggestsBundle(\"bndtools.core.test.fodder.iface\", \"1.0.0\", \"iface.bundle.MyInterface\"));\n \t}\n \n+\t@Disabled(\"Can't seem to make this work - binding information seems to be missing from class literal, I think this is\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwMjEzNw=="}, "originalCommit": {"oid": "2f35b2b6c19c083475fcc82ada9e0c1ac76db841"}, "originalPosition": 241}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1392, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}