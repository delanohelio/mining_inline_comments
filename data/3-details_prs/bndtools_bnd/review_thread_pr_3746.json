{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MDk1OTMz", "number": 3746, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMzowMDoxNlrODbZtjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMzowMDoxNlrODbZtjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDU5NDA0OnYy", "diffSide": "LEFT", "path": "biz.aQute.tester.junit-platform/src/aQute/tester/bundle/engine/discovery/BundleSelectorResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMzowMDoxNlrOFi3mEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNTo0Nzo0M1rOFjNazw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEwNjc3MQ==", "bodyText": "I'm wondering if it might be a useful optimisation to retain this as a short-circuit just before the main return statement?", "url": "https://github.com/bndtools/bnd/pull/3746#discussion_r372106771", "createdAt": "2020-01-28T23:00:16Z", "author": {"login": "kriegfrj"}, "path": "biz.aQute.tester.junit-platform/src/aQute/tester/bundle/engine/discovery/BundleSelectorResolver.java", "diffHunk": "@@ -520,16 +520,14 @@ private boolean elementHasJUnit4Annotations(AnnotatedElement element) {\n \t\t@Override\n \t\tpublic <T extends DiscoverySelector> List<T> getSelectorsByType(Class<T> selectorType) {\n \t\t\tinfo(() -> \"Getting selectors from sub-request for: \" + selectorType);\n-\t\t\tif (selectorType.equals(ClassSelector.class) || selectorType.equals(MethodSelector.class)) {\n-\t\t\t\treturn selectors.stream()\n-\t\t\t\t\t.filter(selectorType::isInstance)\n-\t\t\t\t\t.map(selectorType::cast)\n-\t\t\t\t\t.collect(toList());\n-\t\t\t}\n-\t\t\tif (selectorType.equals(BundleSelector.class)) {\n-\t\t\t\treturn new ArrayList<>();\n-\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ede8ebe2570f6c48d32fb0d6b5041911516283c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ0MTk2MQ==", "bodyText": "I don't think this is worth it. It might sometimes be useful with pre 5.5 versions of JUnit 5 but will be counterproductive on later versions.", "url": "https://github.com/bndtools/bnd/pull/3746#discussion_r372441961", "createdAt": "2020-01-29T15:13:23Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.tester.junit-platform/src/aQute/tester/bundle/engine/discovery/BundleSelectorResolver.java", "diffHunk": "@@ -520,16 +520,14 @@ private boolean elementHasJUnit4Annotations(AnnotatedElement element) {\n \t\t@Override\n \t\tpublic <T extends DiscoverySelector> List<T> getSelectorsByType(Class<T> selectorType) {\n \t\t\tinfo(() -> \"Getting selectors from sub-request for: \" + selectorType);\n-\t\t\tif (selectorType.equals(ClassSelector.class) || selectorType.equals(MethodSelector.class)) {\n-\t\t\t\treturn selectors.stream()\n-\t\t\t\t\t.filter(selectorType::isInstance)\n-\t\t\t\t\t.map(selectorType::cast)\n-\t\t\t\t\t.collect(toList());\n-\t\t\t}\n-\t\t\tif (selectorType.equals(BundleSelector.class)) {\n-\t\t\t\treturn new ArrayList<>();\n-\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEwNjc3MQ=="}, "originalCommit": {"oid": "0ede8ebe2570f6c48d32fb0d6b5041911516283c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ2NDMzNQ==", "bodyText": "I also found that no one (in our tests) ever calls this method with a BundleSelector.class argument anyway.", "url": "https://github.com/bndtools/bnd/pull/3746#discussion_r372464335", "createdAt": "2020-01-29T15:47:43Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.tester.junit-platform/src/aQute/tester/bundle/engine/discovery/BundleSelectorResolver.java", "diffHunk": "@@ -520,16 +520,14 @@ private boolean elementHasJUnit4Annotations(AnnotatedElement element) {\n \t\t@Override\n \t\tpublic <T extends DiscoverySelector> List<T> getSelectorsByType(Class<T> selectorType) {\n \t\t\tinfo(() -> \"Getting selectors from sub-request for: \" + selectorType);\n-\t\t\tif (selectorType.equals(ClassSelector.class) || selectorType.equals(MethodSelector.class)) {\n-\t\t\t\treturn selectors.stream()\n-\t\t\t\t\t.filter(selectorType::isInstance)\n-\t\t\t\t\t.map(selectorType::cast)\n-\t\t\t\t\t.collect(toList());\n-\t\t\t}\n-\t\t\tif (selectorType.equals(BundleSelector.class)) {\n-\t\t\t\treturn new ArrayList<>();\n-\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEwNjc3MQ=="}, "originalCommit": {"oid": "0ede8ebe2570f6c48d32fb0d6b5041911516283c"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1476, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}