{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MzEyNTQw", "number": 3863, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozMDo0NlrODt7j1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDoxNDowMVrODuZT1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDg4MzQwOnYy", "diffSide": "RIGHT", "path": "biz.aQute.repository/src/aQute/bnd/repository/p2/provider/P2Indexer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozMDo0NlrOF_o8hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozMDo0NlrOF_o8hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NTQ2MQ==", "bodyText": "You can't do it this way. You need to do any unpacking as a map operation on the promise. Otherwise you block here in this method and the point of using listeners is to NOT block here.", "url": "https://github.com/bndtools/bnd/pull/3863#discussion_r402275461", "createdAt": "2020-04-02T12:30:46Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.repository/src/aQute/bnd/repository/p2/provider/P2Indexer.java", "diffHunk": "@@ -109,21 +110,38 @@ File get(String bsn, Version version, Map<String, String> properties, DownloadLi\n \t\t\treturn null;\n \n \t\tURI url = contentCapability.url();\n+\t\tboolean packed = url.getPath()\n+\t\t\t.endsWith(Unpack200.PACKED_SUFFIX);\n \n-\t\tfinal File source = client.getCacheFileFor(url);\n \t\tfinal File link = new File(location, bsn + \"-\" + version + \".jar\");\n \n-\t\tIO.createSymbolicLinkOrCopy(link, source);\n-\n \t\tPromise<File> go = client.build()\n \t\t\t.useCache(MAX_STALE)\n-\t\t\t.async(url.toURL())\n-\t\t\t.map(file -> link);\n+\t\t\t.async(url.toURL());\n \n-\t\tif (listeners.length == 0)\n-\t\t\treturn go.getValue();\n+\t\tif (listeners.length == 0) {\n+\t\t\treturn handleDownloadResult(packed, link, go);\n+\t\t}\n \n \t\tnew DownloadListenerPromise(reporter, name + \": get \" + bsn + \";\" + version + \" \" + url, go, listeners);\n+\n+\t\treturn handleDownloadResult(packed, link, go);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4acedb01c53ea7b651f596e13382f211f9af510c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDg4OTM3OnYy", "diffSide": "RIGHT", "path": "biz.aQute.repository/src/aQute/p2/provider/ArtifactRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozMjozOFrOF_pAdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozMjozOFrOF_pAdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NjQ2OA==", "bodyText": "Shouldn't there be a constant for packed?", "url": "https://github.com/bndtools/bnd/pull/3863#discussion_r402276468", "createdAt": "2020-04-02T12:32:38Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.repository/src/aQute/p2/provider/ArtifactRepository.java", "diffHunk": "@@ -112,8 +113,8 @@ void parse() throws Exception {\n \n \t\t\t\tMap<String, String> artifactProperties = getProperties(artifactNode, \"properties/property\");\n \t\t\t\txmlArtifact.format = artifactProperties.get(\"format\");\n-\t\t\t\tif (xmlArtifact.format != null) {\n-\t\t\t\t\tcontinue; // we do not currently support packed format\n+\t\t\t\tif (\"packed\".equals(xmlArtifact.format) && !Unpack200.canUnpack()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4acedb01c53ea7b651f596e13382f211f9af510c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDkwMjI3OnYy", "diffSide": "RIGHT", "path": "aQute.libg/src/aQute/libg/pack200/Unpack200.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozNjowNlrOF_pIlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozNjowNlrOF_pIlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3ODU1MA==", "bodyText": "I am not sure why this live in aQute.libg. We should probably just put it in biz.aQute.repository as a aQute.p2.packed package.", "url": "https://github.com/bndtools/bnd/pull/3863#discussion_r402278550", "createdAt": "2020-04-02T12:36:06Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/libg/pack200/Unpack200.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package aQute.libg.pack200;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4acedb01c53ea7b651f596e13382f211f9af510c"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDkzMTQ3OnYy", "diffSide": "RIGHT", "path": "aQute.libg/src/aQute/libg/pack200/Unpack200.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjo0Mzo1NVrOF_pabw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjo0Mzo1NVrOF_pabw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4MzExOQ==", "bodyText": "Once this class is in biz.aQute.repository, we can use Processor.getJavaExecutable to find the unpack command. See\n\n  \n    \n      bnd/biz.aQute.repository/src/aQute/bnd/repository/maven/provider/Tool.java\n    \n    \n        Lines 160 to 161\n      in\n      98e97be\n    \n    \n    \n    \n\n        \n          \n           Command command = new Command(); \n        \n\n        \n          \n           command.add(getJavaExecutable(\"javadoc\")); \n        \n    \n  \n\n\nwhere we use this method to find the javadoc command.\nThis method lets the user set the unpack200 property in their workspace or project to override the default command. Then we don't need @jre, @path, @none. We just use the value of the unpack200 property (like we do for the javadoc, java, and javac properties) to find the command.", "url": "https://github.com/bndtools/bnd/pull/3863#discussion_r402283119", "createdAt": "2020-04-02T12:43:55Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/libg/pack200/Unpack200.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package aQute.libg.pack200;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import aQute.libg.command.Command;\n+\n+public class Unpack200 {\n+\n+\tpublic static final String\tPACKED_SUFFIX\t\t= \".pack.gz\";\n+\tpublic static final String\tJAR_SUFFIX\t\t\t= \".jar\";\n+\n+\tpublic static final String\tPACK200_PROPERTY\t= \"aQute.bnd.pack200\";\n+\tpublic static final String\tJRE\t\t\t\t\t= \"@jre\";\n+\tpublic static final String\tPATH\t\t\t\t= \"@path\";\n+\tpublic static final String\tNONE\t\t\t\t= \"@none\";\n+\n+\tprivate static Boolean\tcanUnpack\t\t= null;\n+\tprivate static String\tunpackCommand\t= null;\n+\n+\tprivate final static Logger\tlogger\t\t= LoggerFactory.getLogger(Unpack200.class);\n+\n+\tstatic {\n+\t\tcanUnpack();\n+\t}\n+\n+\tprivate Unpack200() {}\n+\n+\tpublic static boolean canUnpack() {\n+\t\tif (canUnpack != null)\n+\t\t\treturn canUnpack.booleanValue();\n+\n+\t\tString[] locations = getUnpack200Commands();\n+\t\tif (locations == null) {\n+\t\t\tcanUnpack = Boolean.FALSE;\n+\t\t\tunpackCommand = null;\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tint result;\n+\t\tfor (String location : locations) {\n+\t\t\tif (location == null) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tStringBuffer sb = new StringBuffer();\n+\t\t\tCommand cmd = new Command();\n+\t\t\tcmd.add(location);\n+\t\t\tcmd.add(\"-V\");\n+\t\t\ttry {\n+\t\t\t\tlogger.debug(\"Calling: {}\", cmd.toString());\n+\t\t\t\tresult = cmd.execute(sb, sb);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tlogger.error(\"Error: \" + sb.toString(), e);\n+\t\t\t\tresult = -1;\n+\t\t\t}\n+\t\t\tif (result == 0) {\n+\t\t\t\tunpackCommand = location;\n+\t\t\t\tcanUnpack = Boolean.TRUE;\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t\tcanUnpack = Boolean.FALSE;\n+\t\treturn false;\n+\t}\n+\n+\tpublic static File unpack(File input) {\n+\t\tFile workingDirectory = input.getParentFile();\n+\t\tString name = input.getName();\n+\t\tif (name.endsWith(PACKED_SUFFIX)) {\n+\t\t\tname = name.substring(0, name.length() - PACKED_SUFFIX.length());\n+\t\t}\n+\t\tif (!name.endsWith(JAR_SUFFIX)) {\n+\t\t\tname = name + JAR_SUFFIX;\n+\t\t}\n+\t\tFile output = new File(workingDirectory, name);\n+\t\treturn unpack(input, output);\n+\t}\n+\n+\tpublic static File unpack(File input, File output) {\n+\t\tif (!canUnpack()) {\n+\t\t\tthrow new IllegalStateException(\"unpack200 not found on this system\");\n+\t\t}\n+\t\tFile parent = output.getParentFile();\n+\t\tif (!parent.exists())\n+\t\t\tparent.mkdirs();\n+\n+\t\tStringBuffer sb = new StringBuffer();\n+\t\ttry {\n+\n+\t\t\tCommand cmd = new Command();\n+\t\t\tcmd.add(unpackCommand);\n+\t\t\tcmd.add(input.getCanonicalPath());\n+\t\t\tcmd.add(output.getCanonicalPath());\n+\n+\t\t\tlogger.debug(\"Calling: {}\", cmd.toString());\n+\t\t\tint result = cmd.execute(sb, sb);\n+\n+\t\t\treturn output;\n+\t\t} catch (IOException e) {\n+\t\t\tlogger.error(e.getMessage(), e);\n+\t\t\tthrow new RuntimeException(e);\n+\t\t} catch (Exception e) {\n+\t\t\tlogger.error(\"Error: \" + sb.toString(), e);\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Get unpack200 command\n+\t *\n+\t * @return String [] or null\n+\t */\n+\tpublic static String[] getUnpack200Commands() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4acedb01c53ea7b651f596e13382f211f9af510c"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDkzODY1OnYy", "diffSide": "RIGHT", "path": "biz.aQute.repository/src/aQute/bnd/repository/p2/provider/P2Indexer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjo0NTo0NlrOF_pe9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDowOTo1M1rOGAXKIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4NDI3Ng==", "bodyText": "I would have assumed we would have configured the promise to have performed the unpack operation so we don't have to do it everywhere else.", "url": "https://github.com/bndtools/bnd/pull/3863#discussion_r402284276", "createdAt": "2020-04-02T12:45:46Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.repository/src/aQute/bnd/repository/p2/provider/P2Indexer.java", "diffHunk": "@@ -183,7 +201,11 @@ private Repository readRepository() throws Exception {\n \t\t\t\t}\n \t\t\t\treturn fetch(a, 2, 1000L).map(tag -> {\n \t\t\t\t\tResourceBuilder rb = new ResourceBuilder();\n-\t\t\t\t\trb.addFile(tag.getFile(), a.uri);\n+\t\t\t\t\tFile file = tag.getFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4acedb01c53ea7b651f596e13382f211f9af510c"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAzMjYxMA==", "bodyText": "The unpacking should be done as a map in the fetch result:\nreturn fetch(a, 2, 1000L).map(tag -> Artifact.FORMAT_PACKED.equals(a.format) ? \n  handleDownloadResult(true, null, tag.getFile()) : tag.getFile())\n.map(file -> {\n  ResourceBuilder rb = new ResourceBuilder();\n  rb.addFile(file, a.uri);\n  ...\n})", "url": "https://github.com/bndtools/bnd/pull/3863#discussion_r403032610", "createdAt": "2020-04-03T14:09:53Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.repository/src/aQute/bnd/repository/p2/provider/P2Indexer.java", "diffHunk": "@@ -183,7 +201,11 @@ private Repository readRepository() throws Exception {\n \t\t\t\t}\n \t\t\t\treturn fetch(a, 2, 1000L).map(tag -> {\n \t\t\t\t\tResourceBuilder rb = new ResourceBuilder();\n-\t\t\t\t\trb.addFile(tag.getFile(), a.uri);\n+\t\t\t\t\tFile file = tag.getFile();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4NDI3Ng=="}, "originalCommit": {"oid": "4acedb01c53ea7b651f596e13382f211f9af510c"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTY1NTg1OnYy", "diffSide": "RIGHT", "path": "biz.aQute.repository/src/aQute/bnd/repository/p2/provider/P2Indexer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzo1MDozMlrOGAWVrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzo1MDozMlrOGAWVrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxOTE4Mg==", "bodyText": "Why is this not just:\n.map(file -> handleDownloadResult(packed, link, file));", "url": "https://github.com/bndtools/bnd/pull/3863#discussion_r403019182", "createdAt": "2020-04-03T13:50:32Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.repository/src/aQute/bnd/repository/p2/provider/P2Indexer.java", "diffHunk": "@@ -109,24 +114,44 @@ File get(String bsn, Version version, Map<String, String> properties, DownloadLi\n \t\t\treturn null;\n \n \t\tURI url = contentCapability.url();\n+\t\tboolean packed = url.getPath()\n+\t\t\t.endsWith(Unpack200.PACKED_SUFFIX);\n \n-\t\tfinal File source = client.getCacheFileFor(url);\n \t\tfinal File link = new File(location, bsn + \"-\" + version + \".jar\");\n \n-\t\tIO.createSymbolicLinkOrCopy(link, source);\n-\n \t\tPromise<File> go = client.build()\n \t\t\t.useCache(MAX_STALE)\n \t\t\t.async(url.toURL())\n-\t\t\t.map(file -> link);\n+\t\t\t.then(success -> success.map(file -> handleDownloadResult(packed, link, success.getValue())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c8ce13594d3101b2b4327d296357369e9b0c95"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTY2MDc2OnYy", "diffSide": "RIGHT", "path": "biz.aQute.repository/src/aQute/bnd/repository/p2/provider/P2Indexer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzo1MTo0OFrOGAWY2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzo1MTo0OFrOGAWY2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxOTk5Mw==", "bodyText": "In this case here you will need to do the work here since you need to return the actual result:\nreturn handleDownloadResult(packed, null, go.getvalue()));", "url": "https://github.com/bndtools/bnd/pull/3863#discussion_r403019993", "createdAt": "2020-04-03T13:51:48Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.repository/src/aQute/bnd/repository/p2/provider/P2Indexer.java", "diffHunk": "@@ -109,24 +114,44 @@ File get(String bsn, Version version, Map<String, String> properties, DownloadLi\n \t\t\treturn null;\n \n \t\tURI url = contentCapability.url();\n+\t\tboolean packed = url.getPath()\n+\t\t\t.endsWith(Unpack200.PACKED_SUFFIX);\n \n-\t\tfinal File source = client.getCacheFileFor(url);\n \t\tfinal File link = new File(location, bsn + \"-\" + version + \".jar\");\n \n-\t\tIO.createSymbolicLinkOrCopy(link, source);\n-\n \t\tPromise<File> go = client.build()\n \t\t\t.useCache(MAX_STALE)\n \t\t\t.async(url.toURL())\n-\t\t\t.map(file -> link);\n+\t\t\t.then(success -> success.map(file -> handleDownloadResult(packed, link, success.getValue())));\n \n-\t\tif (listeners.length == 0)\n+\n+\t\tif (listeners.length == 0) {\n \t\t\treturn go.getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c8ce13594d3101b2b4327d296357369e9b0c95"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTY3MjgwOnYy", "diffSide": "LEFT", "path": "biz.aQute.repository/src/aQute/bnd/repository/p2/provider/P2Indexer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzo1NDoyOFrOGAWgdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzo1NDoyOFrOGAWgdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAyMTk0MA==", "bodyText": "Since you do not create the link file here, it does not exist when you return link at the end of this method. This seems an issue.", "url": "https://github.com/bndtools/bnd/pull/3863#discussion_r403021940", "createdAt": "2020-04-03T13:54:28Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.repository/src/aQute/bnd/repository/p2/provider/P2Indexer.java", "diffHunk": "@@ -109,24 +114,44 @@ File get(String bsn, Version version, Map<String, String> properties, DownloadLi\n \t\t\treturn null;\n \n \t\tURI url = contentCapability.url();\n+\t\tboolean packed = url.getPath()\n+\t\t\t.endsWith(Unpack200.PACKED_SUFFIX);\n \n-\t\tfinal File source = client.getCacheFileFor(url);\n \t\tfinal File link = new File(location, bsn + \"-\" + version + \".jar\");\n \n-\t\tIO.createSymbolicLinkOrCopy(link, source);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c8ce13594d3101b2b4327d296357369e9b0c95"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTY5Nzc2OnYy", "diffSide": "RIGHT", "path": "biz.aQute.repository/src/aQute/p2/packed/Unpack200.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzo1OTo0NFrOGAWvjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzo1OTo0NFrOGAWvjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAyNTgwNw==", "bodyText": "This is still quite static in that the unpack command is found only once. This class should be more like aQute.bnd.repository.maven.provider.Tool in that it has no statics and is a Processor and takes a parent Processor which is always used to find the unpack tool. We should avoid statics were we can.\nSo use should be Unpack200 unpack200 = new Unpack200(processor); unpack200.xxx(yyy);", "url": "https://github.com/bndtools/bnd/pull/3863#discussion_r403025807", "createdAt": "2020-04-03T13:59:44Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.repository/src/aQute/p2/packed/Unpack200.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package aQute.p2.packed;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import aQute.bnd.osgi.Processor;\n+import aQute.libg.command.Command;\n+\n+public class Unpack200 {\n+\n+\tpublic static final String\tPACKED_SUFFIX\t\t= \".pack.gz\";\n+\tpublic static final String\tJAR_SUFFIX\t\t\t= \".jar\";\n+\n+\tprivate static boolean\t\t\t\tcanUnpack\t\t= false;\n+\tprivate static String\tunpackCommand\t= null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c8ce13594d3101b2b4327d296357369e9b0c95"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTc1MjY5OnYy", "diffSide": "RIGHT", "path": "biz.aQute.repository/src/aQute/bnd/repository/p2/provider/P2Indexer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDoxMjo1M1rOGAXRzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDoxMjo1M1rOGAXRzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAzNDU3Mg==", "bodyText": "I think the exists() test is a problem. It means that if the remote file is changed we never unpack the changed file it if was previously unpacked. That seems like a bad caching problem.\nAlso, we do we keep both files (original and original.unpacked). Perhaps we should unpack in place? Then we can know the link value before and avoid having to create it later here.", "url": "https://github.com/bndtools/bnd/pull/3863#discussion_r403034572", "createdAt": "2020-04-03T14:12:53Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.repository/src/aQute/bnd/repository/p2/provider/P2Indexer.java", "diffHunk": "@@ -109,24 +114,44 @@ File get(String bsn, Version version, Map<String, String> properties, DownloadLi\n \t\t\treturn null;\n \n \t\tURI url = contentCapability.url();\n+\t\tboolean packed = url.getPath()\n+\t\t\t.endsWith(Unpack200.PACKED_SUFFIX);\n \n-\t\tfinal File source = client.getCacheFileFor(url);\n \t\tfinal File link = new File(location, bsn + \"-\" + version + \".jar\");\n \n-\t\tIO.createSymbolicLinkOrCopy(link, source);\n-\n \t\tPromise<File> go = client.build()\n \t\t\t.useCache(MAX_STALE)\n \t\t\t.async(url.toURL())\n-\t\t\t.map(file -> link);\n+\t\t\t.then(success -> success.map(file -> handleDownloadResult(packed, link, success.getValue())));\n \n-\t\tif (listeners.length == 0)\n+\n+\t\tif (listeners.length == 0) {\n \t\t\treturn go.getValue();\n+\t\t}\n \n \t\tnew DownloadListenerPromise(reporter, name + \": get \" + bsn + \";\" + version + \" \" + url, go, listeners);\n+\n \t\treturn link;\n \t}\n \n+\tprivate File handleDownloadResult(boolean packed, File link, File source)\n+\t\tthrows Exception {\n+\n+\t\tFile unpacked = new File(source.getParentFile(), source.getName() + \".unpacked\");\n+\t\tif (packed && !unpacked.exists()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c8ce13594d3101b2b4327d296357369e9b0c95"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTc1NzY3OnYy", "diffSide": "RIGHT", "path": "biz.aQute.repository/bnd.bnd", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDoxNDowMVrOGAXU5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDoxNDowMVrOGAXU5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAzNTM2NQ==", "bodyText": "I would avoid exporting this package. There is no need I can see to make this API.", "url": "https://github.com/bndtools/bnd/pull/3863#discussion_r403035365", "createdAt": "2020-04-03T14:14:01Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.repository/bnd.bnd", "diffHunk": "@@ -26,6 +26,7 @@\n Export-Package: \\\n \taQute.bnd.deployer.http;bnd-plugins=true,\\\n \taQute.p2.api,\\\n+\taQute.p2.packed,\\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c8ce13594d3101b2b4327d296357369e9b0c95"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1433, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}