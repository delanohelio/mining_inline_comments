{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4Nzk2NDg3", "number": 3970, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwOTo1Mjo0MFrOD2FeVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwOTo1ODo1M1rOD2Fh9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDM5MzgxOnYy", "diffSide": "RIGHT", "path": "aQute.libg/src/aQute/lib/memoize/CloseableMemoizingSupplier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwOTo1Mjo0MFrOGLzRjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMDoxOTo1NlrOGLzi1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAyNzU5OA==", "bodyText": "can elaborate why you're not directly writing it? It looks so strange so I assume you have reason for this?", "url": "https://github.com/bndtools/bnd/pull/3970#discussion_r415027598", "createdAt": "2020-04-25T09:52:40Z", "author": {"login": "pkriens"}, "path": "aQute.libg/src/aQute/lib/memoize/CloseableMemoizingSupplier.java", "diffHunk": "@@ -2,74 +2,109 @@\n \n import static java.util.Objects.requireNonNull;\n \n+import java.util.concurrent.locks.StampedLock;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n+/**\n+ * The object can exist in one of three states:\n+ * <ul>\n+ * <li>initial which means neither {@code get} or {@code close} has been called.\n+ * From this state, the object can transition directly to either open or\n+ * closed.</li>\n+ * <li>open which means memoized is non-null with the value from the wrapped\n+ * supplier. From this state, the object can transition to closed.</li>\n+ * <li>closed which means memoized is null and any value it may have held was\n+ * closed. This is a terminal state.</li>\n+ * </ul>\n+ */\n class CloseableMemoizingSupplier<T extends AutoCloseable> implements CloseableMemoize<T> {\n \tprivate final Supplier<? extends T>\tsupplier;\n-\t// @GuardedBy(\"this\")\n-\tprivate boolean\t\t\t\t\t\tclosed\t= false;\n-\tprivate volatile T\t\t\t\t\tmemoized;\n+\tprivate final StampedLock\t\t\tlock;\n+\tprivate volatile boolean\t\t\tinitial;\n+\t// @GuardedBy(\"initial\")\n+\tprivate T\t\t\t\t\t\t\tmemoized;\n \n \tCloseableMemoizingSupplier(Supplier<? extends T> supplier) {\n \t\tthis.supplier = requireNonNull(supplier);\n+\t\tlock = new StampedLock();\n+\t\tinitial = true;\n \t}\n \n \t@Override\n \tpublic T get() {\n-\t\tif (memoized == null) {\n-\t\t\tsynchronized (this) {\n-\t\t\t\tif (closed)\n-\t\t\t\t\tthrow new IllegalStateException(\"Already closed\");\n-\t\t\t\treturn get0();\n+\t\t// read initial _before_ read memoized\n+\t\tif (initial) {\n+\t\t\t// critical section: only one at a time\n+\t\t\tfinal long stamp = lock.writeLock();\n+\t\t\ttry {\n+\t\t\t\tif (initial) {\n+\t\t\t\t\tT result = requireNonNull(supplier.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d40187fbc0bf14ed1ca334ba0e79830751282ae"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzMjAyMw==", "bodyText": "To minimize memory barriers. You need to 2 thing with the result: write to memory and also return it to the caller. If you write to memoize and then read from memoize you have both a write and read memory barrier which is unnecessary.", "url": "https://github.com/bndtools/bnd/pull/3970#discussion_r415032023", "createdAt": "2020-04-25T10:19:56Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/lib/memoize/CloseableMemoizingSupplier.java", "diffHunk": "@@ -2,74 +2,109 @@\n \n import static java.util.Objects.requireNonNull;\n \n+import java.util.concurrent.locks.StampedLock;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n+/**\n+ * The object can exist in one of three states:\n+ * <ul>\n+ * <li>initial which means neither {@code get} or {@code close} has been called.\n+ * From this state, the object can transition directly to either open or\n+ * closed.</li>\n+ * <li>open which means memoized is non-null with the value from the wrapped\n+ * supplier. From this state, the object can transition to closed.</li>\n+ * <li>closed which means memoized is null and any value it may have held was\n+ * closed. This is a terminal state.</li>\n+ * </ul>\n+ */\n class CloseableMemoizingSupplier<T extends AutoCloseable> implements CloseableMemoize<T> {\n \tprivate final Supplier<? extends T>\tsupplier;\n-\t// @GuardedBy(\"this\")\n-\tprivate boolean\t\t\t\t\t\tclosed\t= false;\n-\tprivate volatile T\t\t\t\t\tmemoized;\n+\tprivate final StampedLock\t\t\tlock;\n+\tprivate volatile boolean\t\t\tinitial;\n+\t// @GuardedBy(\"initial\")\n+\tprivate T\t\t\t\t\t\t\tmemoized;\n \n \tCloseableMemoizingSupplier(Supplier<? extends T> supplier) {\n \t\tthis.supplier = requireNonNull(supplier);\n+\t\tlock = new StampedLock();\n+\t\tinitial = true;\n \t}\n \n \t@Override\n \tpublic T get() {\n-\t\tif (memoized == null) {\n-\t\t\tsynchronized (this) {\n-\t\t\t\tif (closed)\n-\t\t\t\t\tthrow new IllegalStateException(\"Already closed\");\n-\t\t\t\treturn get0();\n+\t\t// read initial _before_ read memoized\n+\t\tif (initial) {\n+\t\t\t// critical section: only one at a time\n+\t\t\tfinal long stamp = lock.writeLock();\n+\t\t\ttry {\n+\t\t\t\tif (initial) {\n+\t\t\t\t\tT result = requireNonNull(supplier.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAyNzU5OA=="}, "originalCommit": {"oid": "6d40187fbc0bf14ed1ca334ba0e79830751282ae"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDM5NjEyOnYy", "diffSide": "RIGHT", "path": "aQute.libg/src/aQute/lib/memoize/CloseableMemoizingSupplier.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwOTo1NDowM1rOGLzSkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxNDoxODowMFrOGL1-Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAyNzg1Ng==", "bodyText": "this violates the contract that you call the supplier at most once ... if it throws an exception, the next get will call it again", "url": "https://github.com/bndtools/bnd/pull/3970#discussion_r415027856", "createdAt": "2020-04-25T09:54:03Z", "author": {"login": "pkriens"}, "path": "aQute.libg/src/aQute/lib/memoize/CloseableMemoizingSupplier.java", "diffHunk": "@@ -2,74 +2,109 @@\n \n import static java.util.Objects.requireNonNull;\n \n+import java.util.concurrent.locks.StampedLock;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n+/**\n+ * The object can exist in one of three states:\n+ * <ul>\n+ * <li>initial which means neither {@code get} or {@code close} has been called.\n+ * From this state, the object can transition directly to either open or\n+ * closed.</li>\n+ * <li>open which means memoized is non-null with the value from the wrapped\n+ * supplier. From this state, the object can transition to closed.</li>\n+ * <li>closed which means memoized is null and any value it may have held was\n+ * closed. This is a terminal state.</li>\n+ * </ul>\n+ */\n class CloseableMemoizingSupplier<T extends AutoCloseable> implements CloseableMemoize<T> {\n \tprivate final Supplier<? extends T>\tsupplier;\n-\t// @GuardedBy(\"this\")\n-\tprivate boolean\t\t\t\t\t\tclosed\t= false;\n-\tprivate volatile T\t\t\t\t\tmemoized;\n+\tprivate final StampedLock\t\t\tlock;\n+\tprivate volatile boolean\t\t\tinitial;\n+\t// @GuardedBy(\"initial\")\n+\tprivate T\t\t\t\t\t\t\tmemoized;\n \n \tCloseableMemoizingSupplier(Supplier<? extends T> supplier) {\n \t\tthis.supplier = requireNonNull(supplier);\n+\t\tlock = new StampedLock();\n+\t\tinitial = true;\n \t}\n \n \t@Override\n \tpublic T get() {\n-\t\tif (memoized == null) {\n-\t\t\tsynchronized (this) {\n-\t\t\t\tif (closed)\n-\t\t\t\t\tthrow new IllegalStateException(\"Already closed\");\n-\t\t\t\treturn get0();\n+\t\t// read initial _before_ read memoized\n+\t\tif (initial) {\n+\t\t\t// critical section: only one at a time\n+\t\t\tfinal long stamp = lock.writeLock();\n+\t\t\ttry {\n+\t\t\t\tif (initial) {\n+\t\t\t\t\tT result = requireNonNull(supplier.get());\n+\t\t\t\t\tmemoized = result;\n+\t\t\t\t\t// write initial _after_ write memoized\n+\t\t\t\t\tinitial = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d40187fbc0bf14ed1ca334ba0e79830751282ae"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzMjE3OQ==", "bodyText": "The supplier violates the contract by returning null. Unless you want to have the supplier returning null result in closing the memoizing supplier.", "url": "https://github.com/bndtools/bnd/pull/3970#discussion_r415032179", "createdAt": "2020-04-25T10:21:02Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/lib/memoize/CloseableMemoizingSupplier.java", "diffHunk": "@@ -2,74 +2,109 @@\n \n import static java.util.Objects.requireNonNull;\n \n+import java.util.concurrent.locks.StampedLock;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n+/**\n+ * The object can exist in one of three states:\n+ * <ul>\n+ * <li>initial which means neither {@code get} or {@code close} has been called.\n+ * From this state, the object can transition directly to either open or\n+ * closed.</li>\n+ * <li>open which means memoized is non-null with the value from the wrapped\n+ * supplier. From this state, the object can transition to closed.</li>\n+ * <li>closed which means memoized is null and any value it may have held was\n+ * closed. This is a terminal state.</li>\n+ * </ul>\n+ */\n class CloseableMemoizingSupplier<T extends AutoCloseable> implements CloseableMemoize<T> {\n \tprivate final Supplier<? extends T>\tsupplier;\n-\t// @GuardedBy(\"this\")\n-\tprivate boolean\t\t\t\t\t\tclosed\t= false;\n-\tprivate volatile T\t\t\t\t\tmemoized;\n+\tprivate final StampedLock\t\t\tlock;\n+\tprivate volatile boolean\t\t\tinitial;\n+\t// @GuardedBy(\"initial\")\n+\tprivate T\t\t\t\t\t\t\tmemoized;\n \n \tCloseableMemoizingSupplier(Supplier<? extends T> supplier) {\n \t\tthis.supplier = requireNonNull(supplier);\n+\t\tlock = new StampedLock();\n+\t\tinitial = true;\n \t}\n \n \t@Override\n \tpublic T get() {\n-\t\tif (memoized == null) {\n-\t\t\tsynchronized (this) {\n-\t\t\t\tif (closed)\n-\t\t\t\t\tthrow new IllegalStateException(\"Already closed\");\n-\t\t\t\treturn get0();\n+\t\t// read initial _before_ read memoized\n+\t\tif (initial) {\n+\t\t\t// critical section: only one at a time\n+\t\t\tfinal long stamp = lock.writeLock();\n+\t\t\ttry {\n+\t\t\t\tif (initial) {\n+\t\t\t\t\tT result = requireNonNull(supplier.get());\n+\t\t\t\t\tmemoized = result;\n+\t\t\t\t\t// write initial _after_ write memoized\n+\t\t\t\t\tinitial = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAyNzg1Ng=="}, "originalCommit": {"oid": "6d40187fbc0bf14ed1ca334ba0e79830751282ae"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzNTc3MQ==", "bodyText": "Well, why not just call it once to at least obey the contract?", "url": "https://github.com/bndtools/bnd/pull/3970#discussion_r415035771", "createdAt": "2020-04-25T10:41:58Z", "author": {"login": "pkriens"}, "path": "aQute.libg/src/aQute/lib/memoize/CloseableMemoizingSupplier.java", "diffHunk": "@@ -2,74 +2,109 @@\n \n import static java.util.Objects.requireNonNull;\n \n+import java.util.concurrent.locks.StampedLock;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n+/**\n+ * The object can exist in one of three states:\n+ * <ul>\n+ * <li>initial which means neither {@code get} or {@code close} has been called.\n+ * From this state, the object can transition directly to either open or\n+ * closed.</li>\n+ * <li>open which means memoized is non-null with the value from the wrapped\n+ * supplier. From this state, the object can transition to closed.</li>\n+ * <li>closed which means memoized is null and any value it may have held was\n+ * closed. This is a terminal state.</li>\n+ * </ul>\n+ */\n class CloseableMemoizingSupplier<T extends AutoCloseable> implements CloseableMemoize<T> {\n \tprivate final Supplier<? extends T>\tsupplier;\n-\t// @GuardedBy(\"this\")\n-\tprivate boolean\t\t\t\t\t\tclosed\t= false;\n-\tprivate volatile T\t\t\t\t\tmemoized;\n+\tprivate final StampedLock\t\t\tlock;\n+\tprivate volatile boolean\t\t\tinitial;\n+\t// @GuardedBy(\"initial\")\n+\tprivate T\t\t\t\t\t\t\tmemoized;\n \n \tCloseableMemoizingSupplier(Supplier<? extends T> supplier) {\n \t\tthis.supplier = requireNonNull(supplier);\n+\t\tlock = new StampedLock();\n+\t\tinitial = true;\n \t}\n \n \t@Override\n \tpublic T get() {\n-\t\tif (memoized == null) {\n-\t\t\tsynchronized (this) {\n-\t\t\t\tif (closed)\n-\t\t\t\t\tthrow new IllegalStateException(\"Already closed\");\n-\t\t\t\treturn get0();\n+\t\t// read initial _before_ read memoized\n+\t\tif (initial) {\n+\t\t\t// critical section: only one at a time\n+\t\t\tfinal long stamp = lock.writeLock();\n+\t\t\ttry {\n+\t\t\t\tif (initial) {\n+\t\t\t\t\tT result = requireNonNull(supplier.get());\n+\t\t\t\t\tmemoized = result;\n+\t\t\t\t\t// write initial _after_ write memoized\n+\t\t\t\t\tinitial = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAyNzg1Ng=="}, "originalCommit": {"oid": "6d40187fbc0bf14ed1ca334ba0e79830751282ae"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzNjk5OA==", "bodyText": "If it returns null, we could declare that to be a close of the memoizeing supplier. So the memoizing supplier would enter the closed state when the wrapper supplier returns null. If that in line with what you are thinking?", "url": "https://github.com/bndtools/bnd/pull/3970#discussion_r415036998", "createdAt": "2020-04-25T10:49:34Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/lib/memoize/CloseableMemoizingSupplier.java", "diffHunk": "@@ -2,74 +2,109 @@\n \n import static java.util.Objects.requireNonNull;\n \n+import java.util.concurrent.locks.StampedLock;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n+/**\n+ * The object can exist in one of three states:\n+ * <ul>\n+ * <li>initial which means neither {@code get} or {@code close} has been called.\n+ * From this state, the object can transition directly to either open or\n+ * closed.</li>\n+ * <li>open which means memoized is non-null with the value from the wrapped\n+ * supplier. From this state, the object can transition to closed.</li>\n+ * <li>closed which means memoized is null and any value it may have held was\n+ * closed. This is a terminal state.</li>\n+ * </ul>\n+ */\n class CloseableMemoizingSupplier<T extends AutoCloseable> implements CloseableMemoize<T> {\n \tprivate final Supplier<? extends T>\tsupplier;\n-\t// @GuardedBy(\"this\")\n-\tprivate boolean\t\t\t\t\t\tclosed\t= false;\n-\tprivate volatile T\t\t\t\t\tmemoized;\n+\tprivate final StampedLock\t\t\tlock;\n+\tprivate volatile boolean\t\t\tinitial;\n+\t// @GuardedBy(\"initial\")\n+\tprivate T\t\t\t\t\t\t\tmemoized;\n \n \tCloseableMemoizingSupplier(Supplier<? extends T> supplier) {\n \t\tthis.supplier = requireNonNull(supplier);\n+\t\tlock = new StampedLock();\n+\t\tinitial = true;\n \t}\n \n \t@Override\n \tpublic T get() {\n-\t\tif (memoized == null) {\n-\t\t\tsynchronized (this) {\n-\t\t\t\tif (closed)\n-\t\t\t\t\tthrow new IllegalStateException(\"Already closed\");\n-\t\t\t\treturn get0();\n+\t\t// read initial _before_ read memoized\n+\t\tif (initial) {\n+\t\t\t// critical section: only one at a time\n+\t\t\tfinal long stamp = lock.writeLock();\n+\t\t\ttry {\n+\t\t\t\tif (initial) {\n+\t\t\t\t\tT result = requireNonNull(supplier.get());\n+\t\t\t\t\tmemoized = result;\n+\t\t\t\t\t// write initial _after_ write memoized\n+\t\t\t\t\tinitial = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAyNzg1Ng=="}, "originalCommit": {"oid": "6d40187fbc0bf14ed1ca334ba0e79830751282ae"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzODU1OA==", "bodyText": "We still then have the problem of what to do with the caller to our get method. Is the null then returned to him? The current state means he will get an NPE to at least alert him to the fact that the wrapped supplier returned a null. Otherwise, the caller may need to null check the result from our get.", "url": "https://github.com/bndtools/bnd/pull/3970#discussion_r415038558", "createdAt": "2020-04-25T10:59:07Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/lib/memoize/CloseableMemoizingSupplier.java", "diffHunk": "@@ -2,74 +2,109 @@\n \n import static java.util.Objects.requireNonNull;\n \n+import java.util.concurrent.locks.StampedLock;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n+/**\n+ * The object can exist in one of three states:\n+ * <ul>\n+ * <li>initial which means neither {@code get} or {@code close} has been called.\n+ * From this state, the object can transition directly to either open or\n+ * closed.</li>\n+ * <li>open which means memoized is non-null with the value from the wrapped\n+ * supplier. From this state, the object can transition to closed.</li>\n+ * <li>closed which means memoized is null and any value it may have held was\n+ * closed. This is a terminal state.</li>\n+ * </ul>\n+ */\n class CloseableMemoizingSupplier<T extends AutoCloseable> implements CloseableMemoize<T> {\n \tprivate final Supplier<? extends T>\tsupplier;\n-\t// @GuardedBy(\"this\")\n-\tprivate boolean\t\t\t\t\t\tclosed\t= false;\n-\tprivate volatile T\t\t\t\t\tmemoized;\n+\tprivate final StampedLock\t\t\tlock;\n+\tprivate volatile boolean\t\t\tinitial;\n+\t// @GuardedBy(\"initial\")\n+\tprivate T\t\t\t\t\t\t\tmemoized;\n \n \tCloseableMemoizingSupplier(Supplier<? extends T> supplier) {\n \t\tthis.supplier = requireNonNull(supplier);\n+\t\tlock = new StampedLock();\n+\t\tinitial = true;\n \t}\n \n \t@Override\n \tpublic T get() {\n-\t\tif (memoized == null) {\n-\t\t\tsynchronized (this) {\n-\t\t\t\tif (closed)\n-\t\t\t\t\tthrow new IllegalStateException(\"Already closed\");\n-\t\t\t\treturn get0();\n+\t\t// read initial _before_ read memoized\n+\t\tif (initial) {\n+\t\t\t// critical section: only one at a time\n+\t\t\tfinal long stamp = lock.writeLock();\n+\t\t\ttry {\n+\t\t\t\tif (initial) {\n+\t\t\t\t\tT result = requireNonNull(supplier.get());\n+\t\t\t\t\tmemoized = result;\n+\t\t\t\t\t// write initial _after_ write memoized\n+\t\t\t\t\tinitial = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAyNzg1Ng=="}, "originalCommit": {"oid": "6d40187fbc0bf14ed1ca334ba0e79830751282ae"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3MTgwMg==", "bodyText": "If we treat the wrapper supplier returning null as causing the memoized supplier to be closed, then the proper thing would be to throw an IllegalStateException since that is what would have happened if get was called on a closed memoized supplier.\nI made #3973 to show this.", "url": "https://github.com/bndtools/bnd/pull/3970#discussion_r415071802", "createdAt": "2020-04-25T14:18:00Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/lib/memoize/CloseableMemoizingSupplier.java", "diffHunk": "@@ -2,74 +2,109 @@\n \n import static java.util.Objects.requireNonNull;\n \n+import java.util.concurrent.locks.StampedLock;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n+/**\n+ * The object can exist in one of three states:\n+ * <ul>\n+ * <li>initial which means neither {@code get} or {@code close} has been called.\n+ * From this state, the object can transition directly to either open or\n+ * closed.</li>\n+ * <li>open which means memoized is non-null with the value from the wrapped\n+ * supplier. From this state, the object can transition to closed.</li>\n+ * <li>closed which means memoized is null and any value it may have held was\n+ * closed. This is a terminal state.</li>\n+ * </ul>\n+ */\n class CloseableMemoizingSupplier<T extends AutoCloseable> implements CloseableMemoize<T> {\n \tprivate final Supplier<? extends T>\tsupplier;\n-\t// @GuardedBy(\"this\")\n-\tprivate boolean\t\t\t\t\t\tclosed\t= false;\n-\tprivate volatile T\t\t\t\t\tmemoized;\n+\tprivate final StampedLock\t\t\tlock;\n+\tprivate volatile boolean\t\t\tinitial;\n+\t// @GuardedBy(\"initial\")\n+\tprivate T\t\t\t\t\t\t\tmemoized;\n \n \tCloseableMemoizingSupplier(Supplier<? extends T> supplier) {\n \t\tthis.supplier = requireNonNull(supplier);\n+\t\tlock = new StampedLock();\n+\t\tinitial = true;\n \t}\n \n \t@Override\n \tpublic T get() {\n-\t\tif (memoized == null) {\n-\t\t\tsynchronized (this) {\n-\t\t\t\tif (closed)\n-\t\t\t\t\tthrow new IllegalStateException(\"Already closed\");\n-\t\t\t\treturn get0();\n+\t\t// read initial _before_ read memoized\n+\t\tif (initial) {\n+\t\t\t// critical section: only one at a time\n+\t\t\tfinal long stamp = lock.writeLock();\n+\t\t\ttry {\n+\t\t\t\tif (initial) {\n+\t\t\t\t\tT result = requireNonNull(supplier.get());\n+\t\t\t\t\tmemoized = result;\n+\t\t\t\t\t// write initial _after_ write memoized\n+\t\t\t\t\tinitial = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAyNzg1Ng=="}, "originalCommit": {"oid": "6d40187fbc0bf14ed1ca334ba0e79830751282ae"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDQwMDM4OnYy", "diffSide": "RIGHT", "path": "aQute.libg/src/aQute/lib/memoize/CloseableMemoizingSupplier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwOTo1Njo0MFrOGLzUXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwOTo1Njo0MFrOGLzUXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAyODMxOA==", "bodyText": "what is the reason memoized is not volatile? Makes things smaller and a lot more readable?", "url": "https://github.com/bndtools/bnd/pull/3970#discussion_r415028318", "createdAt": "2020-04-25T09:56:40Z", "author": {"login": "pkriens"}, "path": "aQute.libg/src/aQute/lib/memoize/CloseableMemoizingSupplier.java", "diffHunk": "@@ -2,74 +2,109 @@\n \n import static java.util.Objects.requireNonNull;\n \n+import java.util.concurrent.locks.StampedLock;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n+/**\n+ * The object can exist in one of three states:\n+ * <ul>\n+ * <li>initial which means neither {@code get} or {@code close} has been called.\n+ * From this state, the object can transition directly to either open or\n+ * closed.</li>\n+ * <li>open which means memoized is non-null with the value from the wrapped\n+ * supplier. From this state, the object can transition to closed.</li>\n+ * <li>closed which means memoized is null and any value it may have held was\n+ * closed. This is a terminal state.</li>\n+ * </ul>\n+ */\n class CloseableMemoizingSupplier<T extends AutoCloseable> implements CloseableMemoize<T> {\n \tprivate final Supplier<? extends T>\tsupplier;\n-\t// @GuardedBy(\"this\")\n-\tprivate boolean\t\t\t\t\t\tclosed\t= false;\n-\tprivate volatile T\t\t\t\t\tmemoized;\n+\tprivate final StampedLock\t\t\tlock;\n+\tprivate volatile boolean\t\t\tinitial;\n+\t// @GuardedBy(\"initial\")\n+\tprivate T\t\t\t\t\t\t\tmemoized;\n \n \tCloseableMemoizingSupplier(Supplier<? extends T> supplier) {\n \t\tthis.supplier = requireNonNull(supplier);\n+\t\tlock = new StampedLock();\n+\t\tinitial = true;\n \t}\n \n \t@Override\n \tpublic T get() {\n-\t\tif (memoized == null) {\n-\t\t\tsynchronized (this) {\n-\t\t\t\tif (closed)\n-\t\t\t\t\tthrow new IllegalStateException(\"Already closed\");\n-\t\t\t\treturn get0();\n+\t\t// read initial _before_ read memoized\n+\t\tif (initial) {\n+\t\t\t// critical section: only one at a time\n+\t\t\tfinal long stamp = lock.writeLock();\n+\t\t\ttry {\n+\t\t\t\tif (initial) {\n+\t\t\t\t\tT result = requireNonNull(supplier.get());\n+\t\t\t\t\tmemoized = result;\n+\t\t\t\t\t// write initial _after_ write memoized\n+\t\t\t\t\tinitial = false;\n+\t\t\t\t\treturn result;\n+\t\t\t\t}\n+\t\t\t} finally {\n+\t\t\t\tlock.unlockWrite(stamp);\n \t\t\t}\n \t\t}\n-\t\treturn memoized;\n-\t}\n-\n-\tprivate T get0() {\n-\t\tif (memoized == null) {\n-\t\t\tmemoized = supplier.get();\n-\t\t\tassert memoized != null;\n+\t\tT result = memoized;\n+\t\tif (result == null) {\n+\t\t\tthrow new IllegalStateException(\"closed\");\n \t\t}\n-\t\treturn memoized;\n+\t\treturn result;\n \t}\n \n \t@Override\n \tpublic T peek() {\n+\t\t// read initial _before_ read memoized\n+\t\tif (initial) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d40187fbc0bf14ed1ca334ba0e79830751282ae"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDQwMzA5OnYy", "diffSide": "RIGHT", "path": "aQute.libg/src/aQute/lib/memoize/CloseableMemoizingSupplier.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwOTo1ODo1M1rOGLzVmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDo0OTowOVrOGMnNag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAyODYzNQ==", "bodyText": "making memoizd volatile saves a lot of this hard to read code, why doing it so complicated?", "url": "https://github.com/bndtools/bnd/pull/3970#discussion_r415028635", "createdAt": "2020-04-25T09:58:53Z", "author": {"login": "pkriens"}, "path": "aQute.libg/src/aQute/lib/memoize/CloseableMemoizingSupplier.java", "diffHunk": "@@ -2,74 +2,109 @@\n \n import static java.util.Objects.requireNonNull;\n \n+import java.util.concurrent.locks.StampedLock;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n+/**\n+ * The object can exist in one of three states:\n+ * <ul>\n+ * <li>initial which means neither {@code get} or {@code close} has been called.\n+ * From this state, the object can transition directly to either open or\n+ * closed.</li>\n+ * <li>open which means memoized is non-null with the value from the wrapped\n+ * supplier. From this state, the object can transition to closed.</li>\n+ * <li>closed which means memoized is null and any value it may have held was\n+ * closed. This is a terminal state.</li>\n+ * </ul>\n+ */\n class CloseableMemoizingSupplier<T extends AutoCloseable> implements CloseableMemoize<T> {\n \tprivate final Supplier<? extends T>\tsupplier;\n-\t// @GuardedBy(\"this\")\n-\tprivate boolean\t\t\t\t\t\tclosed\t= false;\n-\tprivate volatile T\t\t\t\t\tmemoized;\n+\tprivate final StampedLock\t\t\tlock;\n+\tprivate volatile boolean\t\t\tinitial;\n+\t// @GuardedBy(\"initial\")\n+\tprivate T\t\t\t\t\t\t\tmemoized;\n \n \tCloseableMemoizingSupplier(Supplier<? extends T> supplier) {\n \t\tthis.supplier = requireNonNull(supplier);\n+\t\tlock = new StampedLock();\n+\t\tinitial = true;\n \t}\n \n \t@Override\n \tpublic T get() {\n-\t\tif (memoized == null) {\n-\t\t\tsynchronized (this) {\n-\t\t\t\tif (closed)\n-\t\t\t\t\tthrow new IllegalStateException(\"Already closed\");\n-\t\t\t\treturn get0();\n+\t\t// read initial _before_ read memoized\n+\t\tif (initial) {\n+\t\t\t// critical section: only one at a time\n+\t\t\tfinal long stamp = lock.writeLock();\n+\t\t\ttry {\n+\t\t\t\tif (initial) {\n+\t\t\t\t\tT result = requireNonNull(supplier.get());\n+\t\t\t\t\tmemoized = result;\n+\t\t\t\t\t// write initial _after_ write memoized\n+\t\t\t\t\tinitial = false;\n+\t\t\t\t\treturn result;\n+\t\t\t\t}\n+\t\t\t} finally {\n+\t\t\t\tlock.unlockWrite(stamp);\n \t\t\t}\n \t\t}\n-\t\treturn memoized;\n-\t}\n-\n-\tprivate T get0() {\n-\t\tif (memoized == null) {\n-\t\t\tmemoized = supplier.get();\n-\t\t\tassert memoized != null;\n+\t\tT result = memoized;\n+\t\tif (result == null) {\n+\t\t\tthrow new IllegalStateException(\"closed\");\n \t\t}\n-\t\treturn memoized;\n+\t\treturn result;\n \t}\n \n \t@Override\n \tpublic T peek() {\n+\t\t// read initial _before_ read memoized\n+\t\tif (initial) {\n+\t\t\treturn null;\n+\t\t}\n \t\treturn memoized;\n \t}\n \n \t@Override\n-\tpublic synchronized boolean isClosed() {\n-\t\treturn closed;\n+\tpublic boolean isClosed() {\n+\t\t// read initial _before_ read memoized\n+\t\treturn !initial && (memoized == null);\n \t}\n \n \t@Override\n \tpublic void close() throws Exception {\n-\t\tT current;\n-\t\tsynchronized (this) {\n-\t\t\tif (closed)\n-\t\t\t\treturn;\n-\n-\t\t\tclosed = true;\n-\n-\t\t\tif (memoized == null)\n-\t\t\t\treturn;\n-\n-\t\t\tcurrent = memoized;\n-\t\t\tmemoized = null;\n+\t\tif (!isClosed()) {\n+\t\t\tAutoCloseable closeable;\n+\t\t\t// critical section: only one at a time\n+\t\t\tfinal long stamp = lock.writeLock();\n+\t\t\ttry {\n+\t\t\t\tif (initial) {\n+\t\t\t\t\tinitial = false;\n+\t\t\t\t\treturn; // no value to close\n+\t\t\t\t}\n+\t\t\t\tcloseable = memoized;\n+\t\t\t\tmemoized = null; // mark closed\n+\t\t\t\t// write initial _after_ write memoized\n+\t\t\t\tinitial = false; // even though it is already false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d40187fbc0bf14ed1ca334ba0e79830751282ae"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzMzAwNQ==", "bodyText": "The code may be a little non-straight forward but it is designed to only have a single read barrier for the normal case on get. I have review other performance tuned code which does similar work and similar techniques are used to optimize the normal case.", "url": "https://github.com/bndtools/bnd/pull/3970#discussion_r415033005", "createdAt": "2020-04-25T10:26:00Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/lib/memoize/CloseableMemoizingSupplier.java", "diffHunk": "@@ -2,74 +2,109 @@\n \n import static java.util.Objects.requireNonNull;\n \n+import java.util.concurrent.locks.StampedLock;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n+/**\n+ * The object can exist in one of three states:\n+ * <ul>\n+ * <li>initial which means neither {@code get} or {@code close} has been called.\n+ * From this state, the object can transition directly to either open or\n+ * closed.</li>\n+ * <li>open which means memoized is non-null with the value from the wrapped\n+ * supplier. From this state, the object can transition to closed.</li>\n+ * <li>closed which means memoized is null and any value it may have held was\n+ * closed. This is a terminal state.</li>\n+ * </ul>\n+ */\n class CloseableMemoizingSupplier<T extends AutoCloseable> implements CloseableMemoize<T> {\n \tprivate final Supplier<? extends T>\tsupplier;\n-\t// @GuardedBy(\"this\")\n-\tprivate boolean\t\t\t\t\t\tclosed\t= false;\n-\tprivate volatile T\t\t\t\t\tmemoized;\n+\tprivate final StampedLock\t\t\tlock;\n+\tprivate volatile boolean\t\t\tinitial;\n+\t// @GuardedBy(\"initial\")\n+\tprivate T\t\t\t\t\t\t\tmemoized;\n \n \tCloseableMemoizingSupplier(Supplier<? extends T> supplier) {\n \t\tthis.supplier = requireNonNull(supplier);\n+\t\tlock = new StampedLock();\n+\t\tinitial = true;\n \t}\n \n \t@Override\n \tpublic T get() {\n-\t\tif (memoized == null) {\n-\t\t\tsynchronized (this) {\n-\t\t\t\tif (closed)\n-\t\t\t\t\tthrow new IllegalStateException(\"Already closed\");\n-\t\t\t\treturn get0();\n+\t\t// read initial _before_ read memoized\n+\t\tif (initial) {\n+\t\t\t// critical section: only one at a time\n+\t\t\tfinal long stamp = lock.writeLock();\n+\t\t\ttry {\n+\t\t\t\tif (initial) {\n+\t\t\t\t\tT result = requireNonNull(supplier.get());\n+\t\t\t\t\tmemoized = result;\n+\t\t\t\t\t// write initial _after_ write memoized\n+\t\t\t\t\tinitial = false;\n+\t\t\t\t\treturn result;\n+\t\t\t\t}\n+\t\t\t} finally {\n+\t\t\t\tlock.unlockWrite(stamp);\n \t\t\t}\n \t\t}\n-\t\treturn memoized;\n-\t}\n-\n-\tprivate T get0() {\n-\t\tif (memoized == null) {\n-\t\t\tmemoized = supplier.get();\n-\t\t\tassert memoized != null;\n+\t\tT result = memoized;\n+\t\tif (result == null) {\n+\t\t\tthrow new IllegalStateException(\"closed\");\n \t\t}\n-\t\treturn memoized;\n+\t\treturn result;\n \t}\n \n \t@Override\n \tpublic T peek() {\n+\t\t// read initial _before_ read memoized\n+\t\tif (initial) {\n+\t\t\treturn null;\n+\t\t}\n \t\treturn memoized;\n \t}\n \n \t@Override\n-\tpublic synchronized boolean isClosed() {\n-\t\treturn closed;\n+\tpublic boolean isClosed() {\n+\t\t// read initial _before_ read memoized\n+\t\treturn !initial && (memoized == null);\n \t}\n \n \t@Override\n \tpublic void close() throws Exception {\n-\t\tT current;\n-\t\tsynchronized (this) {\n-\t\t\tif (closed)\n-\t\t\t\treturn;\n-\n-\t\t\tclosed = true;\n-\n-\t\t\tif (memoized == null)\n-\t\t\t\treturn;\n-\n-\t\t\tcurrent = memoized;\n-\t\t\tmemoized = null;\n+\t\tif (!isClosed()) {\n+\t\t\tAutoCloseable closeable;\n+\t\t\t// critical section: only one at a time\n+\t\t\tfinal long stamp = lock.writeLock();\n+\t\t\ttry {\n+\t\t\t\tif (initial) {\n+\t\t\t\t\tinitial = false;\n+\t\t\t\t\treturn; // no value to close\n+\t\t\t\t}\n+\t\t\t\tcloseable = memoized;\n+\t\t\t\tmemoized = null; // mark closed\n+\t\t\t\t// write initial _after_ write memoized\n+\t\t\t\tinitial = false; // even though it is already false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAyODYzNQ=="}, "originalCommit": {"oid": "6d40187fbc0bf14ed1ca334ba0e79830751282ae"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1NDYzNA==", "bodyText": "it is an interesting puzzle ... my objection is that it does make the code hard to understand. It is a lot clearer now but I've always been pretty hard on simple is better unless proven otherwise. You lately seem to more and more go to small optimizations over readability.\nJust for theory, let me try to come up with something that is more readable and only has one read barrier for the common case.\nDid you introduce the StampedLock (first time I run into it...) because you can then have a read lock on the accept? Or is there some other advantage over a synchronized block?", "url": "https://github.com/bndtools/bnd/pull/3970#discussion_r415554634", "createdAt": "2020-04-27T06:50:57Z", "author": {"login": "pkriens"}, "path": "aQute.libg/src/aQute/lib/memoize/CloseableMemoizingSupplier.java", "diffHunk": "@@ -2,74 +2,109 @@\n \n import static java.util.Objects.requireNonNull;\n \n+import java.util.concurrent.locks.StampedLock;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n+/**\n+ * The object can exist in one of three states:\n+ * <ul>\n+ * <li>initial which means neither {@code get} or {@code close} has been called.\n+ * From this state, the object can transition directly to either open or\n+ * closed.</li>\n+ * <li>open which means memoized is non-null with the value from the wrapped\n+ * supplier. From this state, the object can transition to closed.</li>\n+ * <li>closed which means memoized is null and any value it may have held was\n+ * closed. This is a terminal state.</li>\n+ * </ul>\n+ */\n class CloseableMemoizingSupplier<T extends AutoCloseable> implements CloseableMemoize<T> {\n \tprivate final Supplier<? extends T>\tsupplier;\n-\t// @GuardedBy(\"this\")\n-\tprivate boolean\t\t\t\t\t\tclosed\t= false;\n-\tprivate volatile T\t\t\t\t\tmemoized;\n+\tprivate final StampedLock\t\t\tlock;\n+\tprivate volatile boolean\t\t\tinitial;\n+\t// @GuardedBy(\"initial\")\n+\tprivate T\t\t\t\t\t\t\tmemoized;\n \n \tCloseableMemoizingSupplier(Supplier<? extends T> supplier) {\n \t\tthis.supplier = requireNonNull(supplier);\n+\t\tlock = new StampedLock();\n+\t\tinitial = true;\n \t}\n \n \t@Override\n \tpublic T get() {\n-\t\tif (memoized == null) {\n-\t\t\tsynchronized (this) {\n-\t\t\t\tif (closed)\n-\t\t\t\t\tthrow new IllegalStateException(\"Already closed\");\n-\t\t\t\treturn get0();\n+\t\t// read initial _before_ read memoized\n+\t\tif (initial) {\n+\t\t\t// critical section: only one at a time\n+\t\t\tfinal long stamp = lock.writeLock();\n+\t\t\ttry {\n+\t\t\t\tif (initial) {\n+\t\t\t\t\tT result = requireNonNull(supplier.get());\n+\t\t\t\t\tmemoized = result;\n+\t\t\t\t\t// write initial _after_ write memoized\n+\t\t\t\t\tinitial = false;\n+\t\t\t\t\treturn result;\n+\t\t\t\t}\n+\t\t\t} finally {\n+\t\t\t\tlock.unlockWrite(stamp);\n \t\t\t}\n \t\t}\n-\t\treturn memoized;\n-\t}\n-\n-\tprivate T get0() {\n-\t\tif (memoized == null) {\n-\t\t\tmemoized = supplier.get();\n-\t\t\tassert memoized != null;\n+\t\tT result = memoized;\n+\t\tif (result == null) {\n+\t\t\tthrow new IllegalStateException(\"closed\");\n \t\t}\n-\t\treturn memoized;\n+\t\treturn result;\n \t}\n \n \t@Override\n \tpublic T peek() {\n+\t\t// read initial _before_ read memoized\n+\t\tif (initial) {\n+\t\t\treturn null;\n+\t\t}\n \t\treturn memoized;\n \t}\n \n \t@Override\n-\tpublic synchronized boolean isClosed() {\n-\t\treturn closed;\n+\tpublic boolean isClosed() {\n+\t\t// read initial _before_ read memoized\n+\t\treturn !initial && (memoized == null);\n \t}\n \n \t@Override\n \tpublic void close() throws Exception {\n-\t\tT current;\n-\t\tsynchronized (this) {\n-\t\t\tif (closed)\n-\t\t\t\treturn;\n-\n-\t\t\tclosed = true;\n-\n-\t\t\tif (memoized == null)\n-\t\t\t\treturn;\n-\n-\t\t\tcurrent = memoized;\n-\t\t\tmemoized = null;\n+\t\tif (!isClosed()) {\n+\t\t\tAutoCloseable closeable;\n+\t\t\t// critical section: only one at a time\n+\t\t\tfinal long stamp = lock.writeLock();\n+\t\t\ttry {\n+\t\t\t\tif (initial) {\n+\t\t\t\t\tinitial = false;\n+\t\t\t\t\treturn; // no value to close\n+\t\t\t\t}\n+\t\t\t\tcloseable = memoized;\n+\t\t\t\tmemoized = null; // mark closed\n+\t\t\t\t// write initial _after_ write memoized\n+\t\t\t\tinitial = false; // even though it is already false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAyODYzNQ=="}, "originalCommit": {"oid": "6d40187fbc0bf14ed1ca334ba0e79830751282ae"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5Njc2OA==", "bodyText": "Did you introduce the StampedLock (first time I run into it...) because you can then have a read lock on the accept?\n\nI used it for the read/write lock support which is much simpler then ReentrantReadWriteLock. Some actions (initial get and close) need exclusive (write) locks while accept needs a non-exclusive (read) lock to hold off close. The accept method can now get the write lock if needed and downgrade to the read lock before calling the consumer.\nStampedLocks are much faster than ReentrantReadWriteLocks but they are not reentrant (which we did not need) and also have some other limitations (which were not an issue for this usage).", "url": "https://github.com/bndtools/bnd/pull/3970#discussion_r415796768", "createdAt": "2020-04-27T13:08:05Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/lib/memoize/CloseableMemoizingSupplier.java", "diffHunk": "@@ -2,74 +2,109 @@\n \n import static java.util.Objects.requireNonNull;\n \n+import java.util.concurrent.locks.StampedLock;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n+/**\n+ * The object can exist in one of three states:\n+ * <ul>\n+ * <li>initial which means neither {@code get} or {@code close} has been called.\n+ * From this state, the object can transition directly to either open or\n+ * closed.</li>\n+ * <li>open which means memoized is non-null with the value from the wrapped\n+ * supplier. From this state, the object can transition to closed.</li>\n+ * <li>closed which means memoized is null and any value it may have held was\n+ * closed. This is a terminal state.</li>\n+ * </ul>\n+ */\n class CloseableMemoizingSupplier<T extends AutoCloseable> implements CloseableMemoize<T> {\n \tprivate final Supplier<? extends T>\tsupplier;\n-\t// @GuardedBy(\"this\")\n-\tprivate boolean\t\t\t\t\t\tclosed\t= false;\n-\tprivate volatile T\t\t\t\t\tmemoized;\n+\tprivate final StampedLock\t\t\tlock;\n+\tprivate volatile boolean\t\t\tinitial;\n+\t// @GuardedBy(\"initial\")\n+\tprivate T\t\t\t\t\t\t\tmemoized;\n \n \tCloseableMemoizingSupplier(Supplier<? extends T> supplier) {\n \t\tthis.supplier = requireNonNull(supplier);\n+\t\tlock = new StampedLock();\n+\t\tinitial = true;\n \t}\n \n \t@Override\n \tpublic T get() {\n-\t\tif (memoized == null) {\n-\t\t\tsynchronized (this) {\n-\t\t\t\tif (closed)\n-\t\t\t\t\tthrow new IllegalStateException(\"Already closed\");\n-\t\t\t\treturn get0();\n+\t\t// read initial _before_ read memoized\n+\t\tif (initial) {\n+\t\t\t// critical section: only one at a time\n+\t\t\tfinal long stamp = lock.writeLock();\n+\t\t\ttry {\n+\t\t\t\tif (initial) {\n+\t\t\t\t\tT result = requireNonNull(supplier.get());\n+\t\t\t\t\tmemoized = result;\n+\t\t\t\t\t// write initial _after_ write memoized\n+\t\t\t\t\tinitial = false;\n+\t\t\t\t\treturn result;\n+\t\t\t\t}\n+\t\t\t} finally {\n+\t\t\t\tlock.unlockWrite(stamp);\n \t\t\t}\n \t\t}\n-\t\treturn memoized;\n-\t}\n-\n-\tprivate T get0() {\n-\t\tif (memoized == null) {\n-\t\t\tmemoized = supplier.get();\n-\t\t\tassert memoized != null;\n+\t\tT result = memoized;\n+\t\tif (result == null) {\n+\t\t\tthrow new IllegalStateException(\"closed\");\n \t\t}\n-\t\treturn memoized;\n+\t\treturn result;\n \t}\n \n \t@Override\n \tpublic T peek() {\n+\t\t// read initial _before_ read memoized\n+\t\tif (initial) {\n+\t\t\treturn null;\n+\t\t}\n \t\treturn memoized;\n \t}\n \n \t@Override\n-\tpublic synchronized boolean isClosed() {\n-\t\treturn closed;\n+\tpublic boolean isClosed() {\n+\t\t// read initial _before_ read memoized\n+\t\treturn !initial && (memoized == null);\n \t}\n \n \t@Override\n \tpublic void close() throws Exception {\n-\t\tT current;\n-\t\tsynchronized (this) {\n-\t\t\tif (closed)\n-\t\t\t\treturn;\n-\n-\t\t\tclosed = true;\n-\n-\t\t\tif (memoized == null)\n-\t\t\t\treturn;\n-\n-\t\t\tcurrent = memoized;\n-\t\t\tmemoized = null;\n+\t\tif (!isClosed()) {\n+\t\t\tAutoCloseable closeable;\n+\t\t\t// critical section: only one at a time\n+\t\t\tfinal long stamp = lock.writeLock();\n+\t\t\ttry {\n+\t\t\t\tif (initial) {\n+\t\t\t\t\tinitial = false;\n+\t\t\t\t\treturn; // no value to close\n+\t\t\t\t}\n+\t\t\t\tcloseable = memoized;\n+\t\t\t\tmemoized = null; // mark closed\n+\t\t\t\t// write initial _after_ write memoized\n+\t\t\t\tinitial = false; // even though it is already false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAyODYzNQ=="}, "originalCommit": {"oid": "6d40187fbc0bf14ed1ca334ba0e79830751282ae"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg2OTk3Nw==", "bodyText": "I noticed StampedLocks are not reentrant. So if accept calls accept, we have a deadlock. Shouldn't we have a timeout to break this?", "url": "https://github.com/bndtools/bnd/pull/3970#discussion_r415869977", "createdAt": "2020-04-27T14:39:24Z", "author": {"login": "pkriens"}, "path": "aQute.libg/src/aQute/lib/memoize/CloseableMemoizingSupplier.java", "diffHunk": "@@ -2,74 +2,109 @@\n \n import static java.util.Objects.requireNonNull;\n \n+import java.util.concurrent.locks.StampedLock;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n+/**\n+ * The object can exist in one of three states:\n+ * <ul>\n+ * <li>initial which means neither {@code get} or {@code close} has been called.\n+ * From this state, the object can transition directly to either open or\n+ * closed.</li>\n+ * <li>open which means memoized is non-null with the value from the wrapped\n+ * supplier. From this state, the object can transition to closed.</li>\n+ * <li>closed which means memoized is null and any value it may have held was\n+ * closed. This is a terminal state.</li>\n+ * </ul>\n+ */\n class CloseableMemoizingSupplier<T extends AutoCloseable> implements CloseableMemoize<T> {\n \tprivate final Supplier<? extends T>\tsupplier;\n-\t// @GuardedBy(\"this\")\n-\tprivate boolean\t\t\t\t\t\tclosed\t= false;\n-\tprivate volatile T\t\t\t\t\tmemoized;\n+\tprivate final StampedLock\t\t\tlock;\n+\tprivate volatile boolean\t\t\tinitial;\n+\t// @GuardedBy(\"initial\")\n+\tprivate T\t\t\t\t\t\t\tmemoized;\n \n \tCloseableMemoizingSupplier(Supplier<? extends T> supplier) {\n \t\tthis.supplier = requireNonNull(supplier);\n+\t\tlock = new StampedLock();\n+\t\tinitial = true;\n \t}\n \n \t@Override\n \tpublic T get() {\n-\t\tif (memoized == null) {\n-\t\t\tsynchronized (this) {\n-\t\t\t\tif (closed)\n-\t\t\t\t\tthrow new IllegalStateException(\"Already closed\");\n-\t\t\t\treturn get0();\n+\t\t// read initial _before_ read memoized\n+\t\tif (initial) {\n+\t\t\t// critical section: only one at a time\n+\t\t\tfinal long stamp = lock.writeLock();\n+\t\t\ttry {\n+\t\t\t\tif (initial) {\n+\t\t\t\t\tT result = requireNonNull(supplier.get());\n+\t\t\t\t\tmemoized = result;\n+\t\t\t\t\t// write initial _after_ write memoized\n+\t\t\t\t\tinitial = false;\n+\t\t\t\t\treturn result;\n+\t\t\t\t}\n+\t\t\t} finally {\n+\t\t\t\tlock.unlockWrite(stamp);\n \t\t\t}\n \t\t}\n-\t\treturn memoized;\n-\t}\n-\n-\tprivate T get0() {\n-\t\tif (memoized == null) {\n-\t\t\tmemoized = supplier.get();\n-\t\t\tassert memoized != null;\n+\t\tT result = memoized;\n+\t\tif (result == null) {\n+\t\t\tthrow new IllegalStateException(\"closed\");\n \t\t}\n-\t\treturn memoized;\n+\t\treturn result;\n \t}\n \n \t@Override\n \tpublic T peek() {\n+\t\t// read initial _before_ read memoized\n+\t\tif (initial) {\n+\t\t\treturn null;\n+\t\t}\n \t\treturn memoized;\n \t}\n \n \t@Override\n-\tpublic synchronized boolean isClosed() {\n-\t\treturn closed;\n+\tpublic boolean isClosed() {\n+\t\t// read initial _before_ read memoized\n+\t\treturn !initial && (memoized == null);\n \t}\n \n \t@Override\n \tpublic void close() throws Exception {\n-\t\tT current;\n-\t\tsynchronized (this) {\n-\t\t\tif (closed)\n-\t\t\t\treturn;\n-\n-\t\t\tclosed = true;\n-\n-\t\t\tif (memoized == null)\n-\t\t\t\treturn;\n-\n-\t\t\tcurrent = memoized;\n-\t\t\tmemoized = null;\n+\t\tif (!isClosed()) {\n+\t\t\tAutoCloseable closeable;\n+\t\t\t// critical section: only one at a time\n+\t\t\tfinal long stamp = lock.writeLock();\n+\t\t\ttry {\n+\t\t\t\tif (initial) {\n+\t\t\t\t\tinitial = false;\n+\t\t\t\t\treturn; // no value to close\n+\t\t\t\t}\n+\t\t\t\tcloseable = memoized;\n+\t\t\t\tmemoized = null; // mark closed\n+\t\t\t\t// write initial _after_ write memoized\n+\t\t\t\tinitial = false; // even though it is already false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAyODYzNQ=="}, "originalCommit": {"oid": "6d40187fbc0bf14ed1ca334ba0e79830751282ae"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3ODUwNg==", "bodyText": "read locks are non-exclusive, so we wont have any issue with reentrancy on accept. The reentrant call will just get another non-exclusive read lock and then release it when it returns. I confirmed this by tweaking the test case to reentrantly call accept.\ndiff --git a/aQute.libg/test/aQute/lib/memoize/MemoizeTest.java b/aQute.libg/test/aQute/lib/memoize/MemoizeTest.java\nindex 5589a943d..155313cd1 100644\n--- a/aQute.libg/test/aQute/lib/memoize/MemoizeTest.java\n+++ b/aQute.libg/test/aQute/lib/memoize/MemoizeTest.java\n@@ -368,18 +368,18 @@ public class MemoizeTest {\n                CountDownLatch consumerReady = new CountDownLatch(multi);\n                CountDownLatch consumerSync = new CountDownLatch(1);\n                CountDownLatch consumerDone = new CountDownLatch(multi);\n-               Consumer<AutoCloseable> consumer = asConsumer(s -> {\n-                       consumerReady.countDown();\n-                       if (consumerSync.await(20, TimeUnit.SECONDS)) {\n-                               consumerDone.countDown();\n-                       }\n-               });\n \n                CountDownLatch threadReady = new CountDownLatch(multi);\n                CountDownLatch threadSync = new CountDownLatch(1);\n                ExecutorService threadPool = Executors.newFixedThreadPool(multi);\n                Supplier<CloseableClass> source = () -> new CloseableClass(count.incrementAndGet());\n                try (CloseableMemoize<AutoCloseable> memoized = CloseableMemoize.closeableSupplier(source)) {\n+                       Consumer<AutoCloseable> consumer = asConsumer(s -> {\n+                               consumerReady.countDown();\n+                               if (consumerSync.await(20, TimeUnit.SECONDS)) {\n+                                       memoized.accept(x -> consumerDone.countDown());\n+                               }\n+                       });\n                        for (int i = 0; i < multi; i++) {\n                                threadPool.execute(asRunnable(() -> {\n                                        threadReady.countDown();", "url": "https://github.com/bndtools/bnd/pull/3970#discussion_r415878506", "createdAt": "2020-04-27T14:49:09Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/lib/memoize/CloseableMemoizingSupplier.java", "diffHunk": "@@ -2,74 +2,109 @@\n \n import static java.util.Objects.requireNonNull;\n \n+import java.util.concurrent.locks.StampedLock;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n+/**\n+ * The object can exist in one of three states:\n+ * <ul>\n+ * <li>initial which means neither {@code get} or {@code close} has been called.\n+ * From this state, the object can transition directly to either open or\n+ * closed.</li>\n+ * <li>open which means memoized is non-null with the value from the wrapped\n+ * supplier. From this state, the object can transition to closed.</li>\n+ * <li>closed which means memoized is null and any value it may have held was\n+ * closed. This is a terminal state.</li>\n+ * </ul>\n+ */\n class CloseableMemoizingSupplier<T extends AutoCloseable> implements CloseableMemoize<T> {\n \tprivate final Supplier<? extends T>\tsupplier;\n-\t// @GuardedBy(\"this\")\n-\tprivate boolean\t\t\t\t\t\tclosed\t= false;\n-\tprivate volatile T\t\t\t\t\tmemoized;\n+\tprivate final StampedLock\t\t\tlock;\n+\tprivate volatile boolean\t\t\tinitial;\n+\t// @GuardedBy(\"initial\")\n+\tprivate T\t\t\t\t\t\t\tmemoized;\n \n \tCloseableMemoizingSupplier(Supplier<? extends T> supplier) {\n \t\tthis.supplier = requireNonNull(supplier);\n+\t\tlock = new StampedLock();\n+\t\tinitial = true;\n \t}\n \n \t@Override\n \tpublic T get() {\n-\t\tif (memoized == null) {\n-\t\t\tsynchronized (this) {\n-\t\t\t\tif (closed)\n-\t\t\t\t\tthrow new IllegalStateException(\"Already closed\");\n-\t\t\t\treturn get0();\n+\t\t// read initial _before_ read memoized\n+\t\tif (initial) {\n+\t\t\t// critical section: only one at a time\n+\t\t\tfinal long stamp = lock.writeLock();\n+\t\t\ttry {\n+\t\t\t\tif (initial) {\n+\t\t\t\t\tT result = requireNonNull(supplier.get());\n+\t\t\t\t\tmemoized = result;\n+\t\t\t\t\t// write initial _after_ write memoized\n+\t\t\t\t\tinitial = false;\n+\t\t\t\t\treturn result;\n+\t\t\t\t}\n+\t\t\t} finally {\n+\t\t\t\tlock.unlockWrite(stamp);\n \t\t\t}\n \t\t}\n-\t\treturn memoized;\n-\t}\n-\n-\tprivate T get0() {\n-\t\tif (memoized == null) {\n-\t\t\tmemoized = supplier.get();\n-\t\t\tassert memoized != null;\n+\t\tT result = memoized;\n+\t\tif (result == null) {\n+\t\t\tthrow new IllegalStateException(\"closed\");\n \t\t}\n-\t\treturn memoized;\n+\t\treturn result;\n \t}\n \n \t@Override\n \tpublic T peek() {\n+\t\t// read initial _before_ read memoized\n+\t\tif (initial) {\n+\t\t\treturn null;\n+\t\t}\n \t\treturn memoized;\n \t}\n \n \t@Override\n-\tpublic synchronized boolean isClosed() {\n-\t\treturn closed;\n+\tpublic boolean isClosed() {\n+\t\t// read initial _before_ read memoized\n+\t\treturn !initial && (memoized == null);\n \t}\n \n \t@Override\n \tpublic void close() throws Exception {\n-\t\tT current;\n-\t\tsynchronized (this) {\n-\t\t\tif (closed)\n-\t\t\t\treturn;\n-\n-\t\t\tclosed = true;\n-\n-\t\t\tif (memoized == null)\n-\t\t\t\treturn;\n-\n-\t\t\tcurrent = memoized;\n-\t\t\tmemoized = null;\n+\t\tif (!isClosed()) {\n+\t\t\tAutoCloseable closeable;\n+\t\t\t// critical section: only one at a time\n+\t\t\tfinal long stamp = lock.writeLock();\n+\t\t\ttry {\n+\t\t\t\tif (initial) {\n+\t\t\t\t\tinitial = false;\n+\t\t\t\t\treturn; // no value to close\n+\t\t\t\t}\n+\t\t\t\tcloseable = memoized;\n+\t\t\t\tmemoized = null; // mark closed\n+\t\t\t\t// write initial _after_ write memoized\n+\t\t\t\tinitial = false; // even though it is already false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAyODYzNQ=="}, "originalCommit": {"oid": "6d40187fbc0bf14ed1ca334ba0e79830751282ae"}, "originalPosition": 117}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1464, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}