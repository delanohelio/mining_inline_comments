{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MTY1Mjkz", "number": 3946, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTowMDo1OFrODz6-YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDoyMjoxNFrOD2tc-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzcwMjA4OnYy", "diffSide": "RIGHT", "path": "bndtools.core/src/bndtools/central/Central.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTowMDo1OFrOGIngfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTowMDo1OFrOGIngfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4OTA4NA==", "bodyText": "It might be better to open the tracker here with\nCentral.onWorkspace(workspace -> repoPluginTracker.open());", "url": "https://github.com/bndtools/bnd/pull/3946#discussion_r411689084", "createdAt": "2020-04-20T21:00:58Z", "author": {"login": "bjhargrave"}, "path": "bndtools.core/src/bndtools/central/Central.java", "diffHunk": "@@ -119,14 +124,21 @@ public Central() {\n \tpublic void start() {\n \t\tinstance = this;\n \n+\t\t// Don't open this tracker until we have a workspace.\n+\t\trepoPluginTracker = new RepositoryPluginTracker(bundleContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8981c085f73e5a262b66f056f9e77bdf9a0d4500"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzcwNDUwOnYy", "diffSide": "RIGHT", "path": "bndtools.core/src/bndtools/central/Central.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTowMTozNVrOGInh4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTowMTozNVrOGInh4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4OTQ0MA==", "bodyText": "I moved this above with a callback.", "url": "https://github.com/bndtools/bnd/pull/3946#discussion_r411689440", "createdAt": "2020-04-20T21:01:35Z", "author": {"login": "bjhargrave"}, "path": "bndtools.core/src/bndtools/central/Central.java", "diffHunk": "@@ -266,6 +279,7 @@ public static Workspace getWorkspace() throws Exception {\n \t\t\t\t\tthrow e;\n \t\t\t\t}\n \t\t\t}\n+\t\t\tgetInstance().repoPluginTracker.open(ws);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8981c085f73e5a262b66f056f9e77bdf9a0d4500"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzcxODk5OnYy", "diffSide": "RIGHT", "path": "bndtools.m2e/src/bndtools/m2e/BndConfigurator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTowNToyMFrOGInqcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTowNToyMFrOGInqcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY5MTYzNQ==", "bodyText": "I generally don't like the static import of simple methods like of, ofNullable since you don't know what they really do from reading the code below. There is Map.of, MapStream.of, etc...", "url": "https://github.com/bndtools/bnd/pull/3946#discussion_r411691635", "createdAt": "2020-04-20T21:05:20Z", "author": {"login": "bjhargrave"}, "path": "bndtools.m2e/src/bndtools/m2e/BndConfigurator.java", "diffHunk": "@@ -1,5 +1,7 @@\n package bndtools.m2e;\n \n+import static java.util.Optional.ofNullable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8981c085f73e5a262b66f056f9e77bdf9a0d4500"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzczMDYyOnYy", "diffSide": "RIGHT", "path": "bndtools.m2e/src/bndtools/m2e/BndConfigurator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTowODozMlrOGInxcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTowODozMlrOGInxcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY5MzQyNw==", "bodyText": "I am unclear on the connection between EclipseWorkspaceRepository which is for Bnd Workspace projects and m2e which is for maven projects? EclipseWorkspaceRepository should assume that all projects in the map are Bnd workspace projects, no? Or are you trying to cross the streams here? (Ghostbusters reference).", "url": "https://github.com/bndtools/bnd/pull/3946#discussion_r411693427", "createdAt": "2020-04-20T21:08:32Z", "author": {"login": "bjhargrave"}, "path": "bndtools.m2e/src/bndtools/m2e/BndConfigurator.java", "diffHunk": "@@ -233,29 +252,66 @@ private void execJarMojo(final IMavenProjectFacade projectFacade, IProgressMonit\n \t\tIMavenExecutionContext context = projectRegistryManager.createExecutionContext(projectFacade.getPom(),\n \t\t\tresolverConfiguration);\n \n+\t\tList<File> outputDirectories = new ArrayList<>();\n+\n \t\tcontext.execute((context1, monitor1) -> {\n+\t\t\tIWorkspaceRoot wsroot = ResourcesPlugin.getWorkspace()\n+\t\t\t\t.getRoot();\n \t\t\tSubMonitor progress = SubMonitor.convert(monitor1);\n \t\t\tMavenProject mavenProject = getMavenProject(projectFacade, progress.newChild(1));\n+\t\t\tFile buildDirectory = Central.getBuildDirectory(projectFacade.getProject());\n \n \t\t\tList<MojoExecution> mojoExecutions = new ArrayList<>();\n \t\t\tmojoExecutions.addAll(\n \t\t\t\tprojectFacade.getMojoExecutions(\"org.apache.maven.plugins\", \"maven-jar-plugin\", monitor1, \"jar\"));\n \t\t\tmojoExecutions.addAll(\n \t\t\t\tprojectFacade.getMojoExecutions(\"org.apache.maven.plugins\", \"maven-jar-plugin\", monitor1, \"test-jar\"));\n \n+\t\t\tList<File> files = new ArrayList<>();\n \t\t\tfor (MojoExecution mojoExecution : mojoExecutions) {\n \t\t\t\tmaven.execute(mavenProject, mojoExecution, progress.newChild(1));\n+\n+\t\t\t\tString goal = mojoExecution.getGoal();\n+\t\t\t\tFile outputDirectory = maven.getMojoParameterValue( //\n+\t\t\t\t\tmavenProject, mojoExecution, //\n+\t\t\t\t\t((TEST_JAR.equals(goal)) ? TEST_CLASSES_DIRECTORY\n+\t\t\t\t\t\t: CLASSES_DIRECTORY), //\n+\t\t\t\t\tFile.class, monitor);\n+\n+\t\t\t\toutputDirectories.add(outputDirectory);\n+\n+\t\t\t\tString artifactId = mavenProject.getArtifactId();\n+\t\t\t\tString finalName = ofNullable(\n+\t\t\t\t\tmaven.getMojoParameterValue(mavenProject, mojoExecution, \"finalName\", String.class, monitor))\n+\t\t\t\t\t\t.orElse(\"\");\n+\t\t\t\tString classifier = ofNullable(\n+\t\t\t\t\tmaven.getMojoParameterValue(mavenProject, mojoExecution, \"classifier\", String.class, monitor))\n+\t\t\t\t\t\t.orElse(\"\");\n+\n+\t\t\t\tStringBuilder fileName = new StringBuilder(finalName);\n+\t\t\t\tif (!classifier.isEmpty()) {\n+\t\t\t\t\tfileName.append(\"-\")\n+\t\t\t\t\t\t.append(classifier);\n+\t\t\t\t\tartifactId += \"-\" + classifier;\n+\t\t\t\t}\n+\t\t\t\tfileName.append(\".jar\");\n+\n+\t\t\t\tfiles.add(new File(buildDirectory, fileName.toString()));\n \t\t\t}\n \n+\t\t\tEclipseWorkspaceRepository workspaceRepo = Central.getEclipseWorkspaceRepository();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8981c085f73e5a262b66f056f9e77bdf9a0d4500"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzY4NTg2OnYy", "diffSide": "RIGHT", "path": "bndtools.m2e/src/bndtools/m2e/MavenWorkspaceRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTo0NTozMlrOGK5LrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDozNzo1MFrOGK7F6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3NTgyMQ==", "bodyText": "I added a protected memoize method to AbstractIndexingRepository so all the memoized suppliers can be consistent. So you could use that and even override that. The default now is SoftReference memoization to allow the GC to get back our memory if really needed.", "url": "https://github.com/bndtools/bnd/pull/3946#discussion_r414075821", "createdAt": "2020-04-23T19:45:32Z", "author": {"login": "bjhargrave"}, "path": "bndtools.m2e/src/bndtools/m2e/MavenWorkspaceRepository.java", "diffHunk": "@@ -1,256 +1,375 @@\n package bndtools.m2e;\n \n+import static aQute.lib.exceptions.Exceptions.unchecked;\n+import static aQute.lib.exceptions.FunctionWithException.asFunctionOrElse;\n+\n import java.io.File;\n-import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Iterator;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.Set;\n import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n \n-import org.apache.maven.model.Plugin;\n+import org.apache.maven.plugin.MojoExecution;\n import org.apache.maven.project.MavenProject;\n-import org.bndtools.api.ILogger;\n-import org.bndtools.api.Logger;\n-import org.codehaus.plexus.util.xml.Xpp3Dom;\n-import org.eclipse.core.runtime.CoreException;\n+import org.bndtools.api.PopulatedRepository;\n+import org.eclipse.core.resources.IProject;\n import org.eclipse.core.runtime.IProgressMonitor;\n import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.Platform;\n+import org.eclipse.m2e.core.project.IMavenProjectChangedListener;\n import org.eclipse.m2e.core.project.IMavenProjectFacade;\n import org.eclipse.m2e.core.project.MavenProjectChangedEvent;\n+import org.eclipse.osgi.service.datalocation.Location;\n+import org.osgi.framework.namespace.IdentityNamespace;\n import org.osgi.resource.Capability;\n import org.osgi.resource.Requirement;\n-import aQute.bnd.osgi.Domain;\n+import org.osgi.resource.Resource;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import aQute.bnd.osgi.Jar;\n+import aQute.bnd.osgi.repository.AbstractIndexingRepository;\n+import aQute.bnd.osgi.resource.CapReqBuilder;\n+import aQute.bnd.osgi.resource.ResourceBuilder;\n+import aQute.bnd.osgi.resource.ResourceUtils;\n+import aQute.bnd.osgi.resource.ResourceUtils.ContentCapability;\n+import aQute.bnd.service.RepositoryPlugin;\n+import aQute.bnd.version.MavenVersion;\n import aQute.bnd.version.Version;\n-import aQute.lib.collections.SortedList;\n-\n-public class MavenWorkspaceRepository extends AbstractMavenRepository {\n+import aQute.lib.memoize.Memoize;\n+import aQute.libg.glob.Glob;\n+import aQute.maven.api.Revision;\n+import aQute.maven.provider.POM;\n+import bndtools.central.Central;\n+\n+@Component(service = {\n+\tIMavenProjectChangedListener.class, MavenWorkspaceRepository.class, RepositoryPlugin.class\n+})\n+public class MavenWorkspaceRepository extends\n+\tAbstractIndexingRepository<IProject>\n+\timplements IMavenProjectChangedListener, MavenRunListenerHelper, PopulatedRepository, RepositoryPlugin {\n+\n+\tenum Kind {\n+\t\tADDED(MavenProjectChangedEvent.KIND_ADDED),\n+\t\tCHANGED(MavenProjectChangedEvent.KIND_CHANGED),\n+\t\tREMOVED(MavenProjectChangedEvent.KIND_REMOVED);\n+\n+\t\tKind(int kind) {\n+\t\t\tthis.kind = kind;\n+\t\t}\n \n-\tprivate final static ILogger\t\t\t\t\tlogger\t= Logger.getLogger(MavenWorkspaceRepository.class);\n+\t\tpublic static Kind get(MavenProjectChangedEvent event) {\n+\t\t\tfor (Kind value : values()) {\n+\t\t\t\tif (value.kind == event.getKind())\n+\t\t\t\t\treturn value;\n+\t\t\t}\n+\t\t\tthrow new IllegalArgumentException(String.valueOf(event.getKind()));\n+\t\t}\n \n-\tprivate boolean\t\t\t\t\t\t\t\t\tinited\t= false;\n+\t\tprivate final int kind;\n+\t}\n \n-\tprivate final Map<String, IMavenProjectFacade>\tbsnMap\t= new HashMap<>();\n+\tprivate final static Logger\t\t\t\tlogger\t= LoggerFactory.getLogger(MavenWorkspaceRepository.class);\n+\n+\tprivate volatile Supplier<Set<String>>\t\t\t\t\t\t\t\tlist;\n+\tprivate final Function<String, Collection<Requirement>>\tbsnRequirements\t\t\t= bsn -> Collections\n+\t\t.singleton(CapReqBuilder.createSimpleRequirement(IdentityNamespace.IDENTITY_NAMESPACE, bsn, null)\n+\t\t\t.buildSyntheticRequirement());\n+\tprivate final BiFunction<String, Version, Collection<Requirement>>\tbsnAndVersionRequirements\t= (\n+\t\tbsn, version) -> Collections\n+\t\t\t.singleton(CapReqBuilder.createSimpleRequirement(IdentityNamespace.IDENTITY_NAMESPACE, bsn, version\n+\t\t\t\t.toString())\n+\t\t\t\t.buildSyntheticRequirement());\n+\tprivate final Collection<Requirement>\t\t\t\t\tidentityRequirements\t= Collections\n+\t\t.singleton(ResourceUtils.createWildcardRequirement());\n+\n+\tpublic MavenWorkspaceRepository() {\n+\t\tsuper();\n+\t\tcollect();\n+\t\tlist = Memoize.supplier(() -> list0());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f0848f9da10688a1ab5a34654d0480b66d115fa"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEwNzExMw==", "bodyText": "fixed", "url": "https://github.com/bndtools/bnd/pull/3946#discussion_r414107113", "createdAt": "2020-04-23T20:37:50Z", "author": {"login": "rotty3000"}, "path": "bndtools.m2e/src/bndtools/m2e/MavenWorkspaceRepository.java", "diffHunk": "@@ -1,256 +1,375 @@\n package bndtools.m2e;\n \n+import static aQute.lib.exceptions.Exceptions.unchecked;\n+import static aQute.lib.exceptions.FunctionWithException.asFunctionOrElse;\n+\n import java.io.File;\n-import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Iterator;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.Set;\n import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n \n-import org.apache.maven.model.Plugin;\n+import org.apache.maven.plugin.MojoExecution;\n import org.apache.maven.project.MavenProject;\n-import org.bndtools.api.ILogger;\n-import org.bndtools.api.Logger;\n-import org.codehaus.plexus.util.xml.Xpp3Dom;\n-import org.eclipse.core.runtime.CoreException;\n+import org.bndtools.api.PopulatedRepository;\n+import org.eclipse.core.resources.IProject;\n import org.eclipse.core.runtime.IProgressMonitor;\n import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.Platform;\n+import org.eclipse.m2e.core.project.IMavenProjectChangedListener;\n import org.eclipse.m2e.core.project.IMavenProjectFacade;\n import org.eclipse.m2e.core.project.MavenProjectChangedEvent;\n+import org.eclipse.osgi.service.datalocation.Location;\n+import org.osgi.framework.namespace.IdentityNamespace;\n import org.osgi.resource.Capability;\n import org.osgi.resource.Requirement;\n-import aQute.bnd.osgi.Domain;\n+import org.osgi.resource.Resource;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import aQute.bnd.osgi.Jar;\n+import aQute.bnd.osgi.repository.AbstractIndexingRepository;\n+import aQute.bnd.osgi.resource.CapReqBuilder;\n+import aQute.bnd.osgi.resource.ResourceBuilder;\n+import aQute.bnd.osgi.resource.ResourceUtils;\n+import aQute.bnd.osgi.resource.ResourceUtils.ContentCapability;\n+import aQute.bnd.service.RepositoryPlugin;\n+import aQute.bnd.version.MavenVersion;\n import aQute.bnd.version.Version;\n-import aQute.lib.collections.SortedList;\n-\n-public class MavenWorkspaceRepository extends AbstractMavenRepository {\n+import aQute.lib.memoize.Memoize;\n+import aQute.libg.glob.Glob;\n+import aQute.maven.api.Revision;\n+import aQute.maven.provider.POM;\n+import bndtools.central.Central;\n+\n+@Component(service = {\n+\tIMavenProjectChangedListener.class, MavenWorkspaceRepository.class, RepositoryPlugin.class\n+})\n+public class MavenWorkspaceRepository extends\n+\tAbstractIndexingRepository<IProject>\n+\timplements IMavenProjectChangedListener, MavenRunListenerHelper, PopulatedRepository, RepositoryPlugin {\n+\n+\tenum Kind {\n+\t\tADDED(MavenProjectChangedEvent.KIND_ADDED),\n+\t\tCHANGED(MavenProjectChangedEvent.KIND_CHANGED),\n+\t\tREMOVED(MavenProjectChangedEvent.KIND_REMOVED);\n+\n+\t\tKind(int kind) {\n+\t\t\tthis.kind = kind;\n+\t\t}\n \n-\tprivate final static ILogger\t\t\t\t\tlogger\t= Logger.getLogger(MavenWorkspaceRepository.class);\n+\t\tpublic static Kind get(MavenProjectChangedEvent event) {\n+\t\t\tfor (Kind value : values()) {\n+\t\t\t\tif (value.kind == event.getKind())\n+\t\t\t\t\treturn value;\n+\t\t\t}\n+\t\t\tthrow new IllegalArgumentException(String.valueOf(event.getKind()));\n+\t\t}\n \n-\tprivate boolean\t\t\t\t\t\t\t\t\tinited\t= false;\n+\t\tprivate final int kind;\n+\t}\n \n-\tprivate final Map<String, IMavenProjectFacade>\tbsnMap\t= new HashMap<>();\n+\tprivate final static Logger\t\t\t\tlogger\t= LoggerFactory.getLogger(MavenWorkspaceRepository.class);\n+\n+\tprivate volatile Supplier<Set<String>>\t\t\t\t\t\t\t\tlist;\n+\tprivate final Function<String, Collection<Requirement>>\tbsnRequirements\t\t\t= bsn -> Collections\n+\t\t.singleton(CapReqBuilder.createSimpleRequirement(IdentityNamespace.IDENTITY_NAMESPACE, bsn, null)\n+\t\t\t.buildSyntheticRequirement());\n+\tprivate final BiFunction<String, Version, Collection<Requirement>>\tbsnAndVersionRequirements\t= (\n+\t\tbsn, version) -> Collections\n+\t\t\t.singleton(CapReqBuilder.createSimpleRequirement(IdentityNamespace.IDENTITY_NAMESPACE, bsn, version\n+\t\t\t\t.toString())\n+\t\t\t\t.buildSyntheticRequirement());\n+\tprivate final Collection<Requirement>\t\t\t\t\tidentityRequirements\t= Collections\n+\t\t.singleton(ResourceUtils.createWildcardRequirement());\n+\n+\tpublic MavenWorkspaceRepository() {\n+\t\tsuper();\n+\t\tcollect();\n+\t\tlist = Memoize.supplier(() -> list0());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3NTgyMQ=="}, "originalCommit": {"oid": "0f0848f9da10688a1ab5a34654d0480b66d115fa"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzcwMjYyOnYy", "diffSide": "RIGHT", "path": "bndtools.m2e/src/bndtools/m2e/MavenWorkspaceRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTo0OTozMFrOGK5VRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDozOTo1M1rOGK7LLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3ODI3OA==", "bodyText": "You need to either call the super BiFunction or you need to call rb.addFile. You may want to just call rb.addFile yourself to get the hasIdentity value directly.", "url": "https://github.com/bndtools/bnd/pull/3946#discussion_r414078278", "createdAt": "2020-04-23T19:49:30Z", "author": {"login": "bjhargrave"}, "path": "bndtools.m2e/src/bndtools/m2e/MavenWorkspaceRepository.java", "diffHunk": "@@ -1,256 +1,375 @@\n package bndtools.m2e;\n \n+import static aQute.lib.exceptions.Exceptions.unchecked;\n+import static aQute.lib.exceptions.FunctionWithException.asFunctionOrElse;\n+\n import java.io.File;\n-import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Iterator;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.Set;\n import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n \n-import org.apache.maven.model.Plugin;\n+import org.apache.maven.plugin.MojoExecution;\n import org.apache.maven.project.MavenProject;\n-import org.bndtools.api.ILogger;\n-import org.bndtools.api.Logger;\n-import org.codehaus.plexus.util.xml.Xpp3Dom;\n-import org.eclipse.core.runtime.CoreException;\n+import org.bndtools.api.PopulatedRepository;\n+import org.eclipse.core.resources.IProject;\n import org.eclipse.core.runtime.IProgressMonitor;\n import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.Platform;\n+import org.eclipse.m2e.core.project.IMavenProjectChangedListener;\n import org.eclipse.m2e.core.project.IMavenProjectFacade;\n import org.eclipse.m2e.core.project.MavenProjectChangedEvent;\n+import org.eclipse.osgi.service.datalocation.Location;\n+import org.osgi.framework.namespace.IdentityNamespace;\n import org.osgi.resource.Capability;\n import org.osgi.resource.Requirement;\n-import aQute.bnd.osgi.Domain;\n+import org.osgi.resource.Resource;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import aQute.bnd.osgi.Jar;\n+import aQute.bnd.osgi.repository.AbstractIndexingRepository;\n+import aQute.bnd.osgi.resource.CapReqBuilder;\n+import aQute.bnd.osgi.resource.ResourceBuilder;\n+import aQute.bnd.osgi.resource.ResourceUtils;\n+import aQute.bnd.osgi.resource.ResourceUtils.ContentCapability;\n+import aQute.bnd.service.RepositoryPlugin;\n+import aQute.bnd.version.MavenVersion;\n import aQute.bnd.version.Version;\n-import aQute.lib.collections.SortedList;\n-\n-public class MavenWorkspaceRepository extends AbstractMavenRepository {\n+import aQute.lib.memoize.Memoize;\n+import aQute.libg.glob.Glob;\n+import aQute.maven.api.Revision;\n+import aQute.maven.provider.POM;\n+import bndtools.central.Central;\n+\n+@Component(service = {\n+\tIMavenProjectChangedListener.class, MavenWorkspaceRepository.class, RepositoryPlugin.class\n+})\n+public class MavenWorkspaceRepository extends\n+\tAbstractIndexingRepository<IProject>\n+\timplements IMavenProjectChangedListener, MavenRunListenerHelper, PopulatedRepository, RepositoryPlugin {\n+\n+\tenum Kind {\n+\t\tADDED(MavenProjectChangedEvent.KIND_ADDED),\n+\t\tCHANGED(MavenProjectChangedEvent.KIND_CHANGED),\n+\t\tREMOVED(MavenProjectChangedEvent.KIND_REMOVED);\n+\n+\t\tKind(int kind) {\n+\t\t\tthis.kind = kind;\n+\t\t}\n \n-\tprivate final static ILogger\t\t\t\t\tlogger\t= Logger.getLogger(MavenWorkspaceRepository.class);\n+\t\tpublic static Kind get(MavenProjectChangedEvent event) {\n+\t\t\tfor (Kind value : values()) {\n+\t\t\t\tif (value.kind == event.getKind())\n+\t\t\t\t\treturn value;\n+\t\t\t}\n+\t\t\tthrow new IllegalArgumentException(String.valueOf(event.getKind()));\n+\t\t}\n \n-\tprivate boolean\t\t\t\t\t\t\t\t\tinited\t= false;\n+\t\tprivate final int kind;\n+\t}\n \n-\tprivate final Map<String, IMavenProjectFacade>\tbsnMap\t= new HashMap<>();\n+\tprivate final static Logger\t\t\t\tlogger\t= LoggerFactory.getLogger(MavenWorkspaceRepository.class);\n+\n+\tprivate volatile Supplier<Set<String>>\t\t\t\t\t\t\t\tlist;\n+\tprivate final Function<String, Collection<Requirement>>\tbsnRequirements\t\t\t= bsn -> Collections\n+\t\t.singleton(CapReqBuilder.createSimpleRequirement(IdentityNamespace.IDENTITY_NAMESPACE, bsn, null)\n+\t\t\t.buildSyntheticRequirement());\n+\tprivate final BiFunction<String, Version, Collection<Requirement>>\tbsnAndVersionRequirements\t= (\n+\t\tbsn, version) -> Collections\n+\t\t\t.singleton(CapReqBuilder.createSimpleRequirement(IdentityNamespace.IDENTITY_NAMESPACE, bsn, version\n+\t\t\t\t.toString())\n+\t\t\t\t.buildSyntheticRequirement());\n+\tprivate final Collection<Requirement>\t\t\t\t\tidentityRequirements\t= Collections\n+\t\t.singleton(ResourceUtils.createWildcardRequirement());\n+\n+\tpublic MavenWorkspaceRepository() {\n+\t\tsuper();\n+\t\tcollect();\n+\t\tlist = Memoize.supplier(() -> list0());\n+\t}\n \n \t@Override\n-\tpublic Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {\n-\t\treturn Collections.emptyMap();\n+\tpublic boolean canWrite() {\n+\t\treturn false;\n \t}\n \n \t@Override\n-\tpublic File get(final String bsn, final Version version, Map<String, String> properties,\n-\t\tfinal DownloadListener... listeners) throws Exception {\n-\t\tif (!inited) {\n-\t\t\tinit();\n-\t\t}\n-\n-\t\tfinal IMavenProjectFacade projectFacade = bsnMap.get(bsn);\n-\n-\t\tif (projectFacade == null) {\n+\tpublic File get(String bsn, Version version, Map<String, String> properties, DownloadListener... listeners)\n+\t\tthrows Exception {\n+\t\tFile promise = get(bsn, version);\n+\t\tif (promise == null) {\n \t\t\treturn null;\n \t\t}\n+\t\treturn promise;\n+\t}\n \n-\t\t// add the eclipse project that this comes from so we can look it up in\n-\t\t// the launch\n-\t\t// see\n-\t\t// bndtools.launch.BndDependencySourceContainer.createSourceContainers()\n-\t\tfinal String projectName = projectFacade.getProject()\n-\t\t\t.getName();\n-\t\tproperties.put(\"sourceProjectName\", projectName);\n-\n-\t\tFile bundleFile = guessBundleFile(projectFacade);\n-\n-\t\tif (bundleFile == null || !bundleFile.exists()) {\n-\t\t\tMavenProject mavenProject = getMavenProject(projectFacade, new NullProgressMonitor());\n-\t\t\tbundleFile = getBundleFile(mavenProject);\n-\t\t}\n-\n-\t\tif (!bundleFile.exists()) {\n-\t\t\tfor (DownloadListener listener : listeners) {\n-\t\t\t\ttry {\n-\t\t\t\t\tlistener.failure(bundleFile, \"Could not get bundle file for \" + bsn + \":\" + version);\n-\t\t\t\t} catch (Throwable t) {\n-\t\t\t\t\tlogger.logError(\"Download listener error\", t);\n-\t\t\t\t}\n-\t\t\t}\n+\t@Override\n+\tpublic String getIcon() {\n+\t\treturn \"workspacerepo\";\n+\t}\n \n-\t\t\treturn null;\n-\t\t}\n+\t@Override\n+\tpublic String getLocation() {\n+\t\tLocation location = Platform.getInstanceLocation();\n \n-\t\tfor (DownloadListener listener : listeners) {\n-\t\t\ttry {\n-\t\t\t\tlistener.success(bundleFile);\n-\t\t\t} catch (Throwable t) {\n-\t\t\t\tlogger.logError(\"Download listener error\", t);\n-\t\t\t}\n+\t\tif (location != null) {\n+\t\t\treturn location.getURL()\n+\t\t\t\t.toString();\n \t\t}\n \n-\t\treturn bundleFile;\n+\t\treturn null;\n \t}\n \n-\tprivate File getBundleFile(final MavenProject mavenProject) {\n-\t\tString finalName = null;\n-\n-\t\t// first check maven-jar-plugin config first, if it is empty use\n-\t\t// project.build.finalName\n-\t\tPlugin jarPlugin = mavenProject.getPlugin(\"org.apache.maven.plugins:maven-jar-plugin\");\n-\n-\t\tif (jarPlugin != null) {\n-\t\t\tObject config = jarPlugin.getConfiguration();\n+\t@Override\n+\tpublic String getName() {\n+\t\treturn \"Maven Workspace\";\n+\t}\n \n-\t\t\tif (config instanceof Xpp3Dom) {\n-\t\t\t\tXpp3Dom dom = (Xpp3Dom) config;\n+\t@Override\n+\tpublic boolean isEmpty() {\n+\t\treturn list.get()\n+\t\t\t.isEmpty();\n+\t}\n \n-\t\t\t\tXpp3Dom finalNameNode = dom.getChild(\"finalName\");\n+\t@Override\n+\tpublic List<String> list(String pattern) throws Exception {\n+\t\tList<String> bsns = new ArrayList<>();\n+\n+\t\tif (pattern == null || pattern.equals(\"*\") || pattern.equals(\"\")) {\n+\t\t\tbsns.addAll(list.get());\n+\t\t} else {\n+\t\t\tString[] split = pattern.split(\"\\\\s+\");\n+\t\t\tGlob globs[] = new Glob[split.length];\n+\t\t\tfor (int i = 0; i < split.length; i++) {\n+\t\t\t\tglobs[i] = new Glob(split[i]);\n+\t\t\t}\n \n-\t\t\t\tif (finalNameNode != null) {\n-\t\t\t\t\tfinalName = finalNameNode.getValue();\n+\t\t\touter: for (String bsn : list.get()) {\n+\t\t\t\tfor (Glob g : globs) {\n+\t\t\t\t\tif (g.matcher(bsn)\n+\t\t\t\t\t\t.find()) {\n+\t\t\t\t\t\tbsns.add(bsn);\n+\t\t\t\t\t\tcontinue outer;\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \n-\t\tif (finalName == null) {\n-\t\t\tfinalName = mavenProject.getBuild()\n-\t\t\t\t.getFinalName();\n-\t\t}\n-\n-\t\treturn new File(mavenProject.getBuild()\n-\t\t\t.getDirectory(), finalName + \".jar\");\n+\t\tlogger.debug(\"{}: list({}) {}\", getName(), pattern, bsns);\n+\t\treturn bsns;\n \t}\n \n-\tprivate String getBsnFromMavenProject(MavenProject mavenProject) throws Exception {\n-\t\tfinal File bundleFile = getBundleFile(mavenProject);\n-\n-\t\tif (bundleFile.exists()) {\n-\t\t\tDomain domain = Domain.domain(bundleFile);\n-\t\t\tString bsn = domain.getBundleSymbolicName()\n-\t\t\t\t.getKey();\n-\t\t\treturn bsn;\n+\t@Override\n+\tpublic void mavenProjectChanged(MavenProjectChangedEvent[] events, IProgressMonitor monitor) {\n+\t\tfor (MavenProjectChangedEvent event : ((events != null) ? events : new MavenProjectChangedEvent[0])) {\n+\t\t\tKind kind = Kind.get(event);\n+\t\t\tlogger.debug(\"{}: mavenProjectChanged({}, {})\", getName(), kind, event.getSource());\n+\t\t\tswitch (kind) {\n+\t\t\t\tcase ADDED :\n+\t\t\t\tcase CHANGED :\n+\t\t\t\t\tIMavenProjectFacade projectFacade = event.getMavenProject();\n+\t\t\t\t\tIProject iProject = projectFacade.getProject();\n+\t\t\t\t\tindex(iProject, indexProject(projectFacade, monitor));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase REMOVED :\n+\t\t\t\t\tremove(event.getOldMavenProject()\n+\t\t\t\t\t\t.getProject());\n+\t\t\t\t\tbreak;\n+\t\t\t}\n \t\t}\n \n-\t\treturn null;\n+\t\tlist = Memoize.supplier(() -> list0());\n+\t\tunchecked(() -> Central.refreshPlugins());\n \t}\n \n-\tprivate void init() {\n-\t\tinited = true;\n-\n-\t\tfinal IProgressMonitor monitor = new NullProgressMonitor();\n+\t@Override\n+\tpublic PutResult put(InputStream stream, PutOptions options) throws Exception {\n+\t\tthrow new IllegalStateException(getName() + \" is read-only\");\n+\t}\n \n-\t\tfor (IMavenProjectFacade projectFacade : mavenProjectRegistry.getProjects()) {\n-\t\t\ttry {\n-\t\t\t\tString bsnGuess = guessBsnFromProjectFacade(projectFacade);\n+\t@Override\n+\tpublic SortedSet<Version> versions(String bsn) throws Exception {\n+\t\tMap<Requirement, Collection<Capability>> providers = findProviders(bsnRequirements.apply(bsn));\n+\n+\t\tSortedSet<Version> versions = providers.values()\n+\t\t\t.stream()\n+\t\t\t.flatMap(Collection<Capability>::stream)\n+\t\t\t.map(Capability::getAttributes)\n+\t\t\t.map(m -> m.get(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE))\n+\t\t\t.map(String::valueOf)\n+\t\t\t.map(Version::new)\n+\t\t\t.collect(Collectors.toCollection(TreeSet<Version>::new));\n+\n+\t\tlogger.debug(\"{}: versions({}) {}\", getName(), bsn, versions);\n+\t\treturn versions;\n+\t}\n \n-\t\t\t\tif (bsnGuess != null) {\n-\t\t\t\t\tbsnMap.put(bsnGuess, projectFacade);\n-\t\t\t\t} else {\n-\t\t\t\t\tMavenProject mavenProject = getMavenProject(projectFacade, monitor);\n-\t\t\t\t\tString bsn = getBsnFromMavenProject(mavenProject);\n+\t@Override\n+\tprotected BiFunction<ResourceBuilder, File, ResourceBuilder> fileIndexer(IProject project) {\n+\t\tString name = project.getName();\n+\t\treturn (rb, file) -> {\n+\t\t\t// Add a capability specific to the workspace so that we can", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f0848f9da10688a1ab5a34654d0480b66d115fa"}, "originalPosition": 326}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEwODQ2Mw==", "bodyText": "fixed", "url": "https://github.com/bndtools/bnd/pull/3946#discussion_r414108463", "createdAt": "2020-04-23T20:39:53Z", "author": {"login": "rotty3000"}, "path": "bndtools.m2e/src/bndtools/m2e/MavenWorkspaceRepository.java", "diffHunk": "@@ -1,256 +1,375 @@\n package bndtools.m2e;\n \n+import static aQute.lib.exceptions.Exceptions.unchecked;\n+import static aQute.lib.exceptions.FunctionWithException.asFunctionOrElse;\n+\n import java.io.File;\n-import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Iterator;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.Set;\n import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n \n-import org.apache.maven.model.Plugin;\n+import org.apache.maven.plugin.MojoExecution;\n import org.apache.maven.project.MavenProject;\n-import org.bndtools.api.ILogger;\n-import org.bndtools.api.Logger;\n-import org.codehaus.plexus.util.xml.Xpp3Dom;\n-import org.eclipse.core.runtime.CoreException;\n+import org.bndtools.api.PopulatedRepository;\n+import org.eclipse.core.resources.IProject;\n import org.eclipse.core.runtime.IProgressMonitor;\n import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.Platform;\n+import org.eclipse.m2e.core.project.IMavenProjectChangedListener;\n import org.eclipse.m2e.core.project.IMavenProjectFacade;\n import org.eclipse.m2e.core.project.MavenProjectChangedEvent;\n+import org.eclipse.osgi.service.datalocation.Location;\n+import org.osgi.framework.namespace.IdentityNamespace;\n import org.osgi.resource.Capability;\n import org.osgi.resource.Requirement;\n-import aQute.bnd.osgi.Domain;\n+import org.osgi.resource.Resource;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import aQute.bnd.osgi.Jar;\n+import aQute.bnd.osgi.repository.AbstractIndexingRepository;\n+import aQute.bnd.osgi.resource.CapReqBuilder;\n+import aQute.bnd.osgi.resource.ResourceBuilder;\n+import aQute.bnd.osgi.resource.ResourceUtils;\n+import aQute.bnd.osgi.resource.ResourceUtils.ContentCapability;\n+import aQute.bnd.service.RepositoryPlugin;\n+import aQute.bnd.version.MavenVersion;\n import aQute.bnd.version.Version;\n-import aQute.lib.collections.SortedList;\n-\n-public class MavenWorkspaceRepository extends AbstractMavenRepository {\n+import aQute.lib.memoize.Memoize;\n+import aQute.libg.glob.Glob;\n+import aQute.maven.api.Revision;\n+import aQute.maven.provider.POM;\n+import bndtools.central.Central;\n+\n+@Component(service = {\n+\tIMavenProjectChangedListener.class, MavenWorkspaceRepository.class, RepositoryPlugin.class\n+})\n+public class MavenWorkspaceRepository extends\n+\tAbstractIndexingRepository<IProject>\n+\timplements IMavenProjectChangedListener, MavenRunListenerHelper, PopulatedRepository, RepositoryPlugin {\n+\n+\tenum Kind {\n+\t\tADDED(MavenProjectChangedEvent.KIND_ADDED),\n+\t\tCHANGED(MavenProjectChangedEvent.KIND_CHANGED),\n+\t\tREMOVED(MavenProjectChangedEvent.KIND_REMOVED);\n+\n+\t\tKind(int kind) {\n+\t\t\tthis.kind = kind;\n+\t\t}\n \n-\tprivate final static ILogger\t\t\t\t\tlogger\t= Logger.getLogger(MavenWorkspaceRepository.class);\n+\t\tpublic static Kind get(MavenProjectChangedEvent event) {\n+\t\t\tfor (Kind value : values()) {\n+\t\t\t\tif (value.kind == event.getKind())\n+\t\t\t\t\treturn value;\n+\t\t\t}\n+\t\t\tthrow new IllegalArgumentException(String.valueOf(event.getKind()));\n+\t\t}\n \n-\tprivate boolean\t\t\t\t\t\t\t\t\tinited\t= false;\n+\t\tprivate final int kind;\n+\t}\n \n-\tprivate final Map<String, IMavenProjectFacade>\tbsnMap\t= new HashMap<>();\n+\tprivate final static Logger\t\t\t\tlogger\t= LoggerFactory.getLogger(MavenWorkspaceRepository.class);\n+\n+\tprivate volatile Supplier<Set<String>>\t\t\t\t\t\t\t\tlist;\n+\tprivate final Function<String, Collection<Requirement>>\tbsnRequirements\t\t\t= bsn -> Collections\n+\t\t.singleton(CapReqBuilder.createSimpleRequirement(IdentityNamespace.IDENTITY_NAMESPACE, bsn, null)\n+\t\t\t.buildSyntheticRequirement());\n+\tprivate final BiFunction<String, Version, Collection<Requirement>>\tbsnAndVersionRequirements\t= (\n+\t\tbsn, version) -> Collections\n+\t\t\t.singleton(CapReqBuilder.createSimpleRequirement(IdentityNamespace.IDENTITY_NAMESPACE, bsn, version\n+\t\t\t\t.toString())\n+\t\t\t\t.buildSyntheticRequirement());\n+\tprivate final Collection<Requirement>\t\t\t\t\tidentityRequirements\t= Collections\n+\t\t.singleton(ResourceUtils.createWildcardRequirement());\n+\n+\tpublic MavenWorkspaceRepository() {\n+\t\tsuper();\n+\t\tcollect();\n+\t\tlist = Memoize.supplier(() -> list0());\n+\t}\n \n \t@Override\n-\tpublic Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {\n-\t\treturn Collections.emptyMap();\n+\tpublic boolean canWrite() {\n+\t\treturn false;\n \t}\n \n \t@Override\n-\tpublic File get(final String bsn, final Version version, Map<String, String> properties,\n-\t\tfinal DownloadListener... listeners) throws Exception {\n-\t\tif (!inited) {\n-\t\t\tinit();\n-\t\t}\n-\n-\t\tfinal IMavenProjectFacade projectFacade = bsnMap.get(bsn);\n-\n-\t\tif (projectFacade == null) {\n+\tpublic File get(String bsn, Version version, Map<String, String> properties, DownloadListener... listeners)\n+\t\tthrows Exception {\n+\t\tFile promise = get(bsn, version);\n+\t\tif (promise == null) {\n \t\t\treturn null;\n \t\t}\n+\t\treturn promise;\n+\t}\n \n-\t\t// add the eclipse project that this comes from so we can look it up in\n-\t\t// the launch\n-\t\t// see\n-\t\t// bndtools.launch.BndDependencySourceContainer.createSourceContainers()\n-\t\tfinal String projectName = projectFacade.getProject()\n-\t\t\t.getName();\n-\t\tproperties.put(\"sourceProjectName\", projectName);\n-\n-\t\tFile bundleFile = guessBundleFile(projectFacade);\n-\n-\t\tif (bundleFile == null || !bundleFile.exists()) {\n-\t\t\tMavenProject mavenProject = getMavenProject(projectFacade, new NullProgressMonitor());\n-\t\t\tbundleFile = getBundleFile(mavenProject);\n-\t\t}\n-\n-\t\tif (!bundleFile.exists()) {\n-\t\t\tfor (DownloadListener listener : listeners) {\n-\t\t\t\ttry {\n-\t\t\t\t\tlistener.failure(bundleFile, \"Could not get bundle file for \" + bsn + \":\" + version);\n-\t\t\t\t} catch (Throwable t) {\n-\t\t\t\t\tlogger.logError(\"Download listener error\", t);\n-\t\t\t\t}\n-\t\t\t}\n+\t@Override\n+\tpublic String getIcon() {\n+\t\treturn \"workspacerepo\";\n+\t}\n \n-\t\t\treturn null;\n-\t\t}\n+\t@Override\n+\tpublic String getLocation() {\n+\t\tLocation location = Platform.getInstanceLocation();\n \n-\t\tfor (DownloadListener listener : listeners) {\n-\t\t\ttry {\n-\t\t\t\tlistener.success(bundleFile);\n-\t\t\t} catch (Throwable t) {\n-\t\t\t\tlogger.logError(\"Download listener error\", t);\n-\t\t\t}\n+\t\tif (location != null) {\n+\t\t\treturn location.getURL()\n+\t\t\t\t.toString();\n \t\t}\n \n-\t\treturn bundleFile;\n+\t\treturn null;\n \t}\n \n-\tprivate File getBundleFile(final MavenProject mavenProject) {\n-\t\tString finalName = null;\n-\n-\t\t// first check maven-jar-plugin config first, if it is empty use\n-\t\t// project.build.finalName\n-\t\tPlugin jarPlugin = mavenProject.getPlugin(\"org.apache.maven.plugins:maven-jar-plugin\");\n-\n-\t\tif (jarPlugin != null) {\n-\t\t\tObject config = jarPlugin.getConfiguration();\n+\t@Override\n+\tpublic String getName() {\n+\t\treturn \"Maven Workspace\";\n+\t}\n \n-\t\t\tif (config instanceof Xpp3Dom) {\n-\t\t\t\tXpp3Dom dom = (Xpp3Dom) config;\n+\t@Override\n+\tpublic boolean isEmpty() {\n+\t\treturn list.get()\n+\t\t\t.isEmpty();\n+\t}\n \n-\t\t\t\tXpp3Dom finalNameNode = dom.getChild(\"finalName\");\n+\t@Override\n+\tpublic List<String> list(String pattern) throws Exception {\n+\t\tList<String> bsns = new ArrayList<>();\n+\n+\t\tif (pattern == null || pattern.equals(\"*\") || pattern.equals(\"\")) {\n+\t\t\tbsns.addAll(list.get());\n+\t\t} else {\n+\t\t\tString[] split = pattern.split(\"\\\\s+\");\n+\t\t\tGlob globs[] = new Glob[split.length];\n+\t\t\tfor (int i = 0; i < split.length; i++) {\n+\t\t\t\tglobs[i] = new Glob(split[i]);\n+\t\t\t}\n \n-\t\t\t\tif (finalNameNode != null) {\n-\t\t\t\t\tfinalName = finalNameNode.getValue();\n+\t\t\touter: for (String bsn : list.get()) {\n+\t\t\t\tfor (Glob g : globs) {\n+\t\t\t\t\tif (g.matcher(bsn)\n+\t\t\t\t\t\t.find()) {\n+\t\t\t\t\t\tbsns.add(bsn);\n+\t\t\t\t\t\tcontinue outer;\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \n-\t\tif (finalName == null) {\n-\t\t\tfinalName = mavenProject.getBuild()\n-\t\t\t\t.getFinalName();\n-\t\t}\n-\n-\t\treturn new File(mavenProject.getBuild()\n-\t\t\t.getDirectory(), finalName + \".jar\");\n+\t\tlogger.debug(\"{}: list({}) {}\", getName(), pattern, bsns);\n+\t\treturn bsns;\n \t}\n \n-\tprivate String getBsnFromMavenProject(MavenProject mavenProject) throws Exception {\n-\t\tfinal File bundleFile = getBundleFile(mavenProject);\n-\n-\t\tif (bundleFile.exists()) {\n-\t\t\tDomain domain = Domain.domain(bundleFile);\n-\t\t\tString bsn = domain.getBundleSymbolicName()\n-\t\t\t\t.getKey();\n-\t\t\treturn bsn;\n+\t@Override\n+\tpublic void mavenProjectChanged(MavenProjectChangedEvent[] events, IProgressMonitor monitor) {\n+\t\tfor (MavenProjectChangedEvent event : ((events != null) ? events : new MavenProjectChangedEvent[0])) {\n+\t\t\tKind kind = Kind.get(event);\n+\t\t\tlogger.debug(\"{}: mavenProjectChanged({}, {})\", getName(), kind, event.getSource());\n+\t\t\tswitch (kind) {\n+\t\t\t\tcase ADDED :\n+\t\t\t\tcase CHANGED :\n+\t\t\t\t\tIMavenProjectFacade projectFacade = event.getMavenProject();\n+\t\t\t\t\tIProject iProject = projectFacade.getProject();\n+\t\t\t\t\tindex(iProject, indexProject(projectFacade, monitor));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase REMOVED :\n+\t\t\t\t\tremove(event.getOldMavenProject()\n+\t\t\t\t\t\t.getProject());\n+\t\t\t\t\tbreak;\n+\t\t\t}\n \t\t}\n \n-\t\treturn null;\n+\t\tlist = Memoize.supplier(() -> list0());\n+\t\tunchecked(() -> Central.refreshPlugins());\n \t}\n \n-\tprivate void init() {\n-\t\tinited = true;\n-\n-\t\tfinal IProgressMonitor monitor = new NullProgressMonitor();\n+\t@Override\n+\tpublic PutResult put(InputStream stream, PutOptions options) throws Exception {\n+\t\tthrow new IllegalStateException(getName() + \" is read-only\");\n+\t}\n \n-\t\tfor (IMavenProjectFacade projectFacade : mavenProjectRegistry.getProjects()) {\n-\t\t\ttry {\n-\t\t\t\tString bsnGuess = guessBsnFromProjectFacade(projectFacade);\n+\t@Override\n+\tpublic SortedSet<Version> versions(String bsn) throws Exception {\n+\t\tMap<Requirement, Collection<Capability>> providers = findProviders(bsnRequirements.apply(bsn));\n+\n+\t\tSortedSet<Version> versions = providers.values()\n+\t\t\t.stream()\n+\t\t\t.flatMap(Collection<Capability>::stream)\n+\t\t\t.map(Capability::getAttributes)\n+\t\t\t.map(m -> m.get(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE))\n+\t\t\t.map(String::valueOf)\n+\t\t\t.map(Version::new)\n+\t\t\t.collect(Collectors.toCollection(TreeSet<Version>::new));\n+\n+\t\tlogger.debug(\"{}: versions({}) {}\", getName(), bsn, versions);\n+\t\treturn versions;\n+\t}\n \n-\t\t\t\tif (bsnGuess != null) {\n-\t\t\t\t\tbsnMap.put(bsnGuess, projectFacade);\n-\t\t\t\t} else {\n-\t\t\t\t\tMavenProject mavenProject = getMavenProject(projectFacade, monitor);\n-\t\t\t\t\tString bsn = getBsnFromMavenProject(mavenProject);\n+\t@Override\n+\tprotected BiFunction<ResourceBuilder, File, ResourceBuilder> fileIndexer(IProject project) {\n+\t\tString name = project.getName();\n+\t\treturn (rb, file) -> {\n+\t\t\t// Add a capability specific to the workspace so that we can", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3ODI3OA=="}, "originalCommit": {"oid": "0f0848f9da10688a1ab5a34654d0480b66d115fa"}, "originalPosition": 326}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3OTE4MTYxOnYy", "diffSide": "RIGHT", "path": "bndtools.core/bndtools.shared.bndrun", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMTo0OTo0M1rOGLqdyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMTo0OTo0M1rOGLqdyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg4MzI3NA==", "bodyText": "I think you want to use ${fileuri;${.}/logback.xml} here for our windows friends :-)", "url": "https://github.com/bndtools/bnd/pull/3946#discussion_r414883274", "createdAt": "2020-04-24T21:49:43Z", "author": {"login": "bjhargrave"}, "path": "bndtools.core/bndtools.shared.bndrun", "diffHunk": "@@ -8,13 +8,31 @@\n   -Xmx2g, \\\n   -ea\n \n+-runpath: \\\n+\tch.qos.logback.classic,\\\n+\tch.qos.logback.core,\\\n+\torg.apache.felix.logback,\\\n+\tslf4j.api\n+\n+-runsystempackages: \\\n+\torg.slf4j;version=1.6.2,\\\n+\torg.slf4j.event;version=1.6.2,\\\n+\torg.slf4j.helpers;version=1.6.2,\\\n+\torg.slf4j.spi;version=1.6.2,\\\n+\torg.slf4j;version=1.7.0,\\\n+\torg.slf4j.event;version=1.7.0,\\\n+\torg.slf4j.helpers;version=1.7.0,\\\n+\torg.slf4j.spi;version=1.7.0\n+\n -runproperties: \\\n \teclipse.application=org.eclipse.ui.ide.workbench,\\\n \teclipse.consoleLog=,\\\n \teclipse.product=org.eclipse.sdk.ide,\\\n \tosgi.console=,\\\n \tosgi.instance.area.default=../bndtools.test/workspace,\\\n-\tosgi.console.enable.builtin=false\n+\tosgi.console.enable.builtin=false,\\\n+\tlogback.configurationFile=file:${.}/logback.xml,\\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66affa8b10679416ef1e4745413dd3874a4049cc"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Njk0MzkyOnYy", "diffSide": "RIGHT", "path": "bndtools.m2e/src/bndtools/m2e/MavenRunProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDoyMjoxNFrOGMly9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDozNjoxOVrOGMmiJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg1NTM0OA==", "bodyText": "Isn't the correct thing:\nif (this.mavenWorkspaceRepository == mavenWorkspaceRepository) {\n  this.mavenWorkspaceRepository = null;\n}\nto properly handle replacement?", "url": "https://github.com/bndtools/bnd/pull/3946#discussion_r415855348", "createdAt": "2020-04-27T14:22:14Z", "author": {"login": "bjhargrave"}, "path": "bndtools.m2e/src/bndtools/m2e/MavenRunProvider.java", "diffHunk": "@@ -136,4 +139,13 @@ private Bndrun create0(IResource targetResource, IMavenProjectFacade projectFaca\n \t\t}\n \t}\n \n+\t@Reference\n+\tpublic void setMavenWorkspaceRepository(MavenWorkspaceRepository mavenWorkspaceRepository) {\n+\t\tthis.mavenWorkspaceRepository = mavenWorkspaceRepository;\n+\t}\n+\n+\tpublic void unsetMavenWorkspaceRepository(MavenWorkspaceRepository mavenWorkspaceRepository) {\n+\t\tthis.mavenWorkspaceRepository = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac60fd7239dadde47af993cdb1bbca084b55d813"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg2NzQyOQ==", "bodyText": "fixed.", "url": "https://github.com/bndtools/bnd/pull/3946#discussion_r415867429", "createdAt": "2020-04-27T14:36:19Z", "author": {"login": "rotty3000"}, "path": "bndtools.m2e/src/bndtools/m2e/MavenRunProvider.java", "diffHunk": "@@ -136,4 +139,13 @@ private Bndrun create0(IResource targetResource, IMavenProjectFacade projectFaca\n \t\t}\n \t}\n \n+\t@Reference\n+\tpublic void setMavenWorkspaceRepository(MavenWorkspaceRepository mavenWorkspaceRepository) {\n+\t\tthis.mavenWorkspaceRepository = mavenWorkspaceRepository;\n+\t}\n+\n+\tpublic void unsetMavenWorkspaceRepository(MavenWorkspaceRepository mavenWorkspaceRepository) {\n+\t\tthis.mavenWorkspaceRepository = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg1NTM0OA=="}, "originalCommit": {"oid": "ac60fd7239dadde47af993cdb1bbca084b55d813"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1452, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}