{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MDgxMDQ2", "number": 3703, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNzoxMjoxNlrODWT_qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoyNjowMlrODW-XrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzIyODU5OnYy", "diffSide": "RIGHT", "path": "biz.aQute.bnd/src/aQute/bnd/main/RepoCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNzoxMjoxNlrOFa_7gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNzoxMjoxNlrOFa_7gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg1NDcyMQ==", "bodyText": "This just makes a String and then discards it. Is that what you meant? I assume you want to print the String here?", "url": "https://github.com/bndtools/bnd/pull/3703#discussion_r363854721", "createdAt": "2020-01-07T17:12:16Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bnd/src/aQute/bnd/main/RepoCommand.java", "diffHunk": "@@ -541,7 +541,7 @@ public void _diff(diffOptions options) throws UnsupportedEncodingException, IOEx\n \t\t\t\t\t.put(map)\n \t\t\t\t\t.flush();\n \t\t\telse if (!options.diff())\n-\t\t\t\tbnd.printMultiMap(map);\n+\t\t\t\tMultiMap.format(map);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85f825e26d7fdcf3722059d33640d2d36d16ca9f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzI0NTMwOnYy", "diffSide": "RIGHT", "path": "biz.aQute.bndlib/src/aQute/bnd/service/result/Result.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNzoxODozM1rOFbAF-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNzoxODozM1rOFbAF-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg1NzQwMQ==", "bodyText": "I would call this something like accept rather than then. then implies some chaining in a monadic style. This is really about consuming the Result and accept is the Java method name for consumers.", "url": "https://github.com/bndtools/bnd/pull/3703#discussion_r363857401", "createdAt": "2020-01-07T17:18:33Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/service/result/Result.java", "diffHunk": "@@ -225,4 +234,12 @@\n \t */\n \tResult<V, E> recover(FunctionWithException<? super E, ? extends V> recover);\n \n+\t/**\n+\t * Terminal function that processes the result or the error\n+\t *\n+\t * @param ok the consumer called when ok\n+\t * @param err the consumer called when not ok\n+\t */\n+\tvoid then(ConsumerWithException<? super V> ok, ConsumerWithException<? super E> err);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85f825e26d7fdcf3722059d33640d2d36d16ca9f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDEzNDA4OnYy", "diffSide": "RIGHT", "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/Jar.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoxMTowNFrOFcCETg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoxMTowNFrOFcCETg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkzODMxOA==", "bodyText": "Should this be long time = ZipUtil.getModifiedTime(entry)? We seem to prefer that in other places to ZipEntry.getTime().", "url": "https://github.com/bndtools/bnd/pull/3703#discussion_r364938318", "createdAt": "2020-01-09T20:11:04Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/Jar.java", "diffHunk": "@@ -294,7 +294,10 @@ private Jar buildFromInputStream(InputStream in, long lastModified) throws IOExc\n \t\t\t\tint size = (int) entry.getSize();\n \t\t\t\ttry (ByteBufferOutputStream bbos = new ByteBufferOutputStream((size == -1) ? BUFFER_SIZE : size + 1)) {\n \t\t\t\t\tbbos.write(jin);\n-\t\t\t\t\tputResource(entry.getName(), new EmbeddedResource(bbos.toByteBuffer(), lastModified), true);\n+\t\t\t\t\tlong time = entry.getTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84d5d02916a2f7633b79e12fb3623a167ce15323"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDEzODI3OnYy", "diffSide": "RIGHT", "path": "aQute.libg/src/aQute/lib/strings/Strings.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoxMjo0MFrOFcCG0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoxMjo0MFrOFcCG0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkzODk2MQ==", "bodyText": "This seems to defeat the purpose of the method since it now always returns s.", "url": "https://github.com/bndtools/bnd/pull/3703#discussion_r364938961", "createdAt": "2020-01-09T20:12:40Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/lib/strings/Strings.java", "diffHunk": "@@ -345,7 +345,7 @@ public static String ensureSuffix(String s, String suffix) {\n \t\tif (s.endsWith(suffix))\n \t\t\treturn s;\n \n-\t\treturn s + suffix;\n+\t\treturn s;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84d5d02916a2f7633b79e12fb3623a167ce15323"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDE0NDU5OnYy", "diffSide": "RIGHT", "path": "aQute.libg/src/aQute/lib/io/IO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoxNToyNVrOFcCKzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoxNToyNVrOFcCKzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkzOTk4Mw==", "bodyText": "We already have LimitedInputStream for this purpose. So we don't need this method which duplicates the behavior. Just do\nIO.copy(new LimitedInputStream(in, limit), out);", "url": "https://github.com/bndtools/bnd/pull/3703#discussion_r364939983", "createdAt": "2020-01-09T20:15:25Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/lib/io/IO.java", "diffHunk": "@@ -186,6 +187,19 @@ public static OutputStream copy(InputStream in, OutputStream out) throws IOExcep\n \t\t}\n \t}\n \n+\tpublic static OutputStream copy(InputStream in, OutputStream out, int limit) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84d5d02916a2f7633b79e12fb3623a167ce15323"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDE1NTkyOnYy", "diffSide": "RIGHT", "path": "aQute.libg/src/aQute/lib/io/IO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoxOTo1NFrOFcCR0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoxOTo1NFrOFcCR0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk0MTc3OQ==", "bodyText": "Shouldn't this be AutoCloseable?", "url": "https://github.com/bndtools/bnd/pull/3703#discussion_r364941779", "createdAt": "2020-01-09T20:19:54Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/lib/io/IO.java", "diffHunk": "@@ -1157,6 +1171,40 @@ public static PrintWriter writer(OutputStream out, Charset encoding) {\n \t\treturn new PrintWriter(new OutputStreamWriter(out, encoding));\n \t}\n \n+\tstatic class AppendableWriterAdapter extends Writer {\n+\n+\t\tprivate Appendable appendable;\n+\n+\t\tpublic AppendableWriterAdapter(Appendable appendable) {\n+\t\t\tthis.appendable = appendable;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void write(char[] cbuf, int off, int len) throws IOException {\n+\t\t\tappendable.append(String.valueOf(cbuf), off, len);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void flush() throws IOException {\n+\t\t\tif (appendable instanceof Flushable) {\n+\t\t\t\t((Flushable) appendable).flush();\n+\t\t\t}\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void close() throws IOException {\n+\t\t\tflush();\n+\t\t\tif (appendable instanceof Closeable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84d5d02916a2f7633b79e12fb3623a167ce15323"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDE2NTAxOnYy", "diffSide": "RIGHT", "path": "aQute.libg/src/aQute/lib/io/IO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoyMzozM1rOFcCXeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoyMzozM1rOFcCXeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk0MzIyNA==", "bodyText": "Maybe appendable.append(String.valueOf(cbuf, off, len));? That is, pass off and len to String.valueOf.", "url": "https://github.com/bndtools/bnd/pull/3703#discussion_r364943224", "createdAt": "2020-01-09T20:23:33Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/lib/io/IO.java", "diffHunk": "@@ -1157,6 +1171,40 @@ public static PrintWriter writer(OutputStream out, Charset encoding) {\n \t\treturn new PrintWriter(new OutputStreamWriter(out, encoding));\n \t}\n \n+\tstatic class AppendableWriterAdapter extends Writer {\n+\n+\t\tprivate Appendable appendable;\n+\n+\t\tpublic AppendableWriterAdapter(Appendable appendable) {\n+\t\t\tthis.appendable = appendable;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void write(char[] cbuf, int off, int len) throws IOException {\n+\t\t\tappendable.append(String.valueOf(cbuf), off, len);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84d5d02916a2f7633b79e12fb3623a167ce15323"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDE2NTM1OnYy", "diffSide": "RIGHT", "path": "aQute.libg/src/aQute/lib/io/IO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoyMzo0M1rOFcCXtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoyMzo0M1rOFcCXtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk0MzI4NA==", "bodyText": "Make final.", "url": "https://github.com/bndtools/bnd/pull/3703#discussion_r364943284", "createdAt": "2020-01-09T20:23:43Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/lib/io/IO.java", "diffHunk": "@@ -1157,6 +1171,40 @@ public static PrintWriter writer(OutputStream out, Charset encoding) {\n \t\treturn new PrintWriter(new OutputStreamWriter(out, encoding));\n \t}\n \n+\tstatic class AppendableWriterAdapter extends Writer {\n+\n+\t\tprivate Appendable appendable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84d5d02916a2f7633b79e12fb3623a167ce15323"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDE3MDcwOnYy", "diffSide": "RIGHT", "path": "biz.aQute.bndlib/src/aQute/bnd/service/result/Err.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoyNTo1MVrOFcCa9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoyNTo1MVrOFcCa9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk0NDExNw==", "bodyText": "Need to add requireNonNull(ok); for consistent behavior regardless of whether the Result is Ok or Err.", "url": "https://github.com/bndtools/bnd/pull/3703#discussion_r364944117", "createdAt": "2020-01-09T20:25:51Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/service/result/Err.java", "diffHunk": "@@ -165,8 +165,18 @@ public V orElseGet(Supplier<? extends V> orElseSupplier) {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void accept(ConsumerWithException<? super V> ok, ConsumerWithException<? super E> err) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84d5d02916a2f7633b79e12fb3623a167ce15323"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDE3MTMyOnYy", "diffSide": "RIGHT", "path": "biz.aQute.bndlib/src/aQute/bnd/service/result/Ok.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoyNjowMlrOFcCbSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoyNjowMlrOFcCbSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk0NDIwMw==", "bodyText": "Need to add requireNonNull(err); for consistent behavior regardless of whether the Result is Ok or Err.", "url": "https://github.com/bndtools/bnd/pull/3703#discussion_r364944203", "createdAt": "2020-01-09T20:26:02Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/service/result/Ok.java", "diffHunk": "@@ -170,4 +170,13 @@ public V orElseGet(Supplier<? extends V> orElseSupplier) {\n \tpublic String toString() {\n \t\treturn String.format(\"Ok(%s)\", value);\n \t}\n+\n+\t@Override\n+\tpublic void accept(ConsumerWithException<? super V> ok, ConsumerWithException<? super E> err) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84d5d02916a2f7633b79e12fb3623a167ce15323"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1468, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}