{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNzc3MzM3", "number": 4151, "title": "Insert Menu for plugins and Syntax based values", "bodyText": "Provides a menu entry that inserts a plugin with its properties. I.e. if you want\nto create a MavenBndRepository, open the context menu and select the appropriate entry.\nThe plugins are tracked via the requirements and capabilities. The BndPlugin is creating capabilities that are tracked by the InternalPluginTracker\nThe patch also has separate Insert menu entries for:\nInstructions\nHeaders\nmacros\nThis is based on information in ...help.Syntax", "createdAt": "2020-06-09T13:00:51Z", "url": "https://github.com/bndtools/bnd/pull/4151", "merged": true, "mergeCommit": {"oid": "c22b9b2b43eaee41ca179ceb9b0e006ac0f6e13d"}, "closed": true, "closedAt": "2020-06-09T13:28:03Z", "author": {"login": "pkriens"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpkkkRAH2gAyNDMxNzc3MzM3OjEwOTQ4MjYwZTBkNDA1ZDkzY2Y2Y2Y3NDg3Y2Y5OGIxNmJkNjlmMGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcplWZuAFqTQyNzE2ODE1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "10948260e0d405d93cf6cf7487cf98b16bd69f0e", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/10948260e0d405d93cf6cf7487cf98b16bd69f0e", "committedDate": "2020-06-09T12:53:30Z", "message": "[plugins] Updated BndPlugin annotation to support capabilities\n\nTo be able to insert plugins, this patch adds support to the\n(so far mostly unused) BndPlugin annotation we've applied to the\nbnd internal plugins.\n\nThis adds a Capability defined in the InternalPluginNamespace.\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edc4051eec6d43a2085dc712f6d2ab45f8d8db61", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/edc4051eec6d43a2085dc712f6d2ab45f8d8db61", "committedDate": "2020-06-09T12:58:25Z", "message": "[insert] Adds a number of insert menus\n\n- Insert plugin based on the bndplugin annotation\n- Syntax based\n  - Insert instruction example\n  - Insert header\n  - Insert macro\n\nThis patch uses the Internal Plugin Namespace to find\nthe name and optional configuration of the plugins. It\nthen adds the plugin to the existing -plugin or creates\na new one. This is done using BndEditModel so it should\nfollow all the rules\n\nWhile being there, I also added insert menus based \non the Syntax class. \n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da295869db3c15fe15bd7d3f86dbfd81bea87dbe", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/da295869db3c15fe15bd7d3f86dbfd81bea87dbe", "committedDate": "2020-06-09T12:59:21Z", "message": "[plugins] Added hide to plugins \n\nSome plugins are internal (I think) and should not\nshow on the insert menu.\n\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59f4224b085c058abee7da7c8feddfe99d86da87", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/59f4224b085c058abee7da7c8feddfe99d86da87", "committedDate": "2020-06-09T12:59:33Z", "message": "removed duplicate file\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MTY0NDI0", "url": "https://github.com/bndtools/bnd/pull/4151#pullrequestreview-427164424", "createdAt": "2020-06-09T13:44:03Z", "commit": {"oid": "edc4051eec6d43a2085dc712f6d2ab45f8d8db61"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0NDowM1rOGhKitg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0NDowM1rOGhKitg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyODkxOA==", "bodyText": "Why are we exporting a package of class retention annotations? Who would be importing them?", "url": "https://github.com/bndtools/bnd/pull/4151#discussion_r437428918", "createdAt": "2020-06-09T13:44:03Z", "author": {"login": "bjhargrave"}, "path": "bndtools.core/bnd.bnd", "diffHunk": "@@ -13,6 +13,8 @@ Import-Package: \\\n  ${eclipse.importpackage},\\\n  *\n \n+Export-Package: org.osgi.service.metatype.annotations ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc4051eec6d43a2085dc712f6d2ab45f8d8db61"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MTY3Nzc0", "url": "https://github.com/bndtools/bnd/pull/4151#pullrequestreview-427167774", "createdAt": "2020-06-09T13:47:32Z", "commit": {"oid": "edc4051eec6d43a2085dc712f6d2ab45f8d8db61"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0NzozMlrOGhKwrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0NzozMlrOGhKwrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMjQ5Mg==", "bodyText": "Isn't configuration.getAnnotation(ObjectClassDefinition.class) always null since ObjectClassDefinition is class retention and thus not visible at runtime?", "url": "https://github.com/bndtools/bnd/pull/4151#discussion_r437432492", "createdAt": "2020-06-09T13:47:32Z", "author": {"login": "bjhargrave"}, "path": "bndtools.core/src/bndtools/central/InternalPluginTracker.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package bndtools.central;\n+\n+import java.lang.reflect.Method;\n+import java.util.Formatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.BundleEvent;\n+import org.osgi.framework.wiring.BundleRevision;\n+import org.osgi.resource.Capability;\n+import org.osgi.service.metatype.annotations.AttributeDefinition;\n+import org.osgi.service.metatype.annotations.ObjectClassDefinition;\n+import org.osgi.util.tracker.BundleTracker;\n+\n+import aQute.bnd.annotation.plugin.InternalPluginDefinition;\n+import aQute.bnd.annotation.plugin.InternalPluginNamespace;\n+import aQute.bnd.osgi.Processor;\n+\n+public class InternalPluginTracker extends BundleTracker<List<InternalPluginDefinition>> {\n+\n+\tpublic InternalPluginTracker(BundleContext context) {\n+\t\tsuper(context, Bundle.ACTIVE + Bundle.STARTING, null);\n+\t}\n+\n+\t@Override\n+\tpublic List<InternalPluginDefinition> addingBundle(Bundle bundle, BundleEvent event) {\n+\t\tBundleRevision revision = bundle.adapt(BundleRevision.class);\n+\t\tList<Capability> capabilities = revision.getCapabilities(InternalPluginNamespace.NAMESPACE);\n+\t\tif (capabilities.isEmpty())\n+\t\t\treturn null;\n+\n+\t\treturn capabilities.stream()\n+\t\t\t.map(cap -> capToDef(bundle, cap))\n+\t\t\t.filter(Objects::nonNull)\n+\t\t\t.collect(Collectors.toList());\n+\t}\n+\n+\tprivate InternalPluginDefinition capToDef(Bundle bundle, Capability cap) {\n+\n+\t\ttry {\n+\t\t\tString name = (String) cap.getAttributes()\n+\t\t\t\t.get(InternalPluginNamespace.NAME_A);\n+\t\t\tString key = (String) cap.getAttributes()\n+\t\t\t\t.get(InternalPluginNamespace.IMPLEMENTATION_A);\n+\n+\t\t\tClass<?> implementation = name == null ? null : bundle.loadClass(key);\n+\t\t\tkey = (String) cap.getAttributes()\n+\t\t\t\t.get(InternalPluginNamespace.PARAMETERS_A);\n+\t\t\tClass<?> configuration = key == null ? null : bundle.loadClass(key);\n+\n+\t\t\tObject value = cap.getAttributes()\n+\t\t\t\t.get(\"hide\");\n+\t\t\tboolean hide = value != null && Processor.isTrue(value.toString());\n+\n+\t\t\treturn new InternalPluginDefinition() {\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic String getTemplate() {\n+\t\t\t\t\treturn InternalPluginTracker.getTemplate(name, implementation, configuration);\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic String getName() {\n+\t\t\t\t\treturn name;\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic Class<?> getImplementation() {\n+\t\t\t\t\treturn implementation;\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic Optional<Class<?>> getParameters() {\n+\t\t\t\t\treturn Optional.ofNullable(configuration);\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic boolean isHidden() {\n+\t\t\t\t\treturn hide;\n+\t\t\t\t}\n+\t\t\t};\n+\t\t} catch (ClassNotFoundException e) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tstatic String getTemplate(String name, Class<?> implementation, Class<?> configuration) {\n+\t\ttry (Formatter sb = new Formatter()) {\n+\t\t\tObjectClassDefinition od = configuration != null ? configuration.getAnnotation(ObjectClassDefinition.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc4051eec6d43a2085dc712f6d2ab45f8d8db61"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MTY4MTU0", "url": "https://github.com/bndtools/bnd/pull/4151#pullrequestreview-427168154", "createdAt": "2020-06-09T13:47:56Z", "commit": {"oid": "edc4051eec6d43a2085dc712f6d2ab45f8d8db61"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0Nzo1NlrOGhKydw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0Nzo1NlrOGhKydw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMjk1MQ==", "bodyText": "Same here, this would also always be null, no?", "url": "https://github.com/bndtools/bnd/pull/4151#discussion_r437432951", "createdAt": "2020-06-09T13:47:56Z", "author": {"login": "bjhargrave"}, "path": "bndtools.core/src/bndtools/central/InternalPluginTracker.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package bndtools.central;\n+\n+import java.lang.reflect.Method;\n+import java.util.Formatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.BundleEvent;\n+import org.osgi.framework.wiring.BundleRevision;\n+import org.osgi.resource.Capability;\n+import org.osgi.service.metatype.annotations.AttributeDefinition;\n+import org.osgi.service.metatype.annotations.ObjectClassDefinition;\n+import org.osgi.util.tracker.BundleTracker;\n+\n+import aQute.bnd.annotation.plugin.InternalPluginDefinition;\n+import aQute.bnd.annotation.plugin.InternalPluginNamespace;\n+import aQute.bnd.osgi.Processor;\n+\n+public class InternalPluginTracker extends BundleTracker<List<InternalPluginDefinition>> {\n+\n+\tpublic InternalPluginTracker(BundleContext context) {\n+\t\tsuper(context, Bundle.ACTIVE + Bundle.STARTING, null);\n+\t}\n+\n+\t@Override\n+\tpublic List<InternalPluginDefinition> addingBundle(Bundle bundle, BundleEvent event) {\n+\t\tBundleRevision revision = bundle.adapt(BundleRevision.class);\n+\t\tList<Capability> capabilities = revision.getCapabilities(InternalPluginNamespace.NAMESPACE);\n+\t\tif (capabilities.isEmpty())\n+\t\t\treturn null;\n+\n+\t\treturn capabilities.stream()\n+\t\t\t.map(cap -> capToDef(bundle, cap))\n+\t\t\t.filter(Objects::nonNull)\n+\t\t\t.collect(Collectors.toList());\n+\t}\n+\n+\tprivate InternalPluginDefinition capToDef(Bundle bundle, Capability cap) {\n+\n+\t\ttry {\n+\t\t\tString name = (String) cap.getAttributes()\n+\t\t\t\t.get(InternalPluginNamespace.NAME_A);\n+\t\t\tString key = (String) cap.getAttributes()\n+\t\t\t\t.get(InternalPluginNamespace.IMPLEMENTATION_A);\n+\n+\t\t\tClass<?> implementation = name == null ? null : bundle.loadClass(key);\n+\t\t\tkey = (String) cap.getAttributes()\n+\t\t\t\t.get(InternalPluginNamespace.PARAMETERS_A);\n+\t\t\tClass<?> configuration = key == null ? null : bundle.loadClass(key);\n+\n+\t\t\tObject value = cap.getAttributes()\n+\t\t\t\t.get(\"hide\");\n+\t\t\tboolean hide = value != null && Processor.isTrue(value.toString());\n+\n+\t\t\treturn new InternalPluginDefinition() {\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic String getTemplate() {\n+\t\t\t\t\treturn InternalPluginTracker.getTemplate(name, implementation, configuration);\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic String getName() {\n+\t\t\t\t\treturn name;\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic Class<?> getImplementation() {\n+\t\t\t\t\treturn implementation;\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic Optional<Class<?>> getParameters() {\n+\t\t\t\t\treturn Optional.ofNullable(configuration);\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic boolean isHidden() {\n+\t\t\t\t\treturn hide;\n+\t\t\t\t}\n+\t\t\t};\n+\t\t} catch (ClassNotFoundException e) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tstatic String getTemplate(String name, Class<?> implementation, Class<?> configuration) {\n+\t\ttry (Formatter sb = new Formatter()) {\n+\t\t\tObjectClassDefinition od = configuration != null ? configuration.getAnnotation(ObjectClassDefinition.class)\n+\t\t\t\t: null;\n+\n+\t\t\tMap<String, Method> used = new TreeMap<>();\n+\t\t\tif (configuration != null) {\n+\t\t\t\tfor (Method m : configuration.getMethods()) {\n+\n+\t\t\t\t\tif (m.getDeclaringClass() != configuration)\n+\t\t\t\t\t\tcontinue;\n+\n+\t\t\t\t\tDeprecated deprecated = m.getAnnotation(Deprecated.class);\n+\t\t\t\t\tif (deprecated != null)\n+\t\t\t\t\t\tcontinue;\n+\n+\t\t\t\t\tif (used.containsKey(m.getName()))\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\tused.put(m.getName(), m);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tsb.format(\"%s\", implementation.getName());\n+\n+\t\t\tfor (Method m : used.values()) {\n+\t\t\t\tString description = \"\";\n+\t\t\t\tString deflt = \"\";\n+\t\t\t\tboolean required = true;\n+\n+\t\t\t\tAttributeDefinition ad = m.getAnnotation(AttributeDefinition.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc4051eec6d43a2085dc712f6d2ab45f8d8db61"}, "originalPosition": 122}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3157, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}