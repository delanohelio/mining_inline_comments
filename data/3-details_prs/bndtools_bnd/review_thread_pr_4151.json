{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNzc3MzM3", "number": 4151, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0NDowM1rOED4qEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0Nzo1NlrOED40Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTA5NDU5OnYy", "diffSide": "RIGHT", "path": "bndtools.core/bnd.bnd", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0NDowM1rOGhKitg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0NDowM1rOGhKitg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyODkxOA==", "bodyText": "Why are we exporting a package of class retention annotations? Who would be importing them?", "url": "https://github.com/bndtools/bnd/pull/4151#discussion_r437428918", "createdAt": "2020-06-09T13:44:03Z", "author": {"login": "bjhargrave"}, "path": "bndtools.core/bnd.bnd", "diffHunk": "@@ -13,6 +13,8 @@ Import-Package: \\\n  ${eclipse.importpackage},\\\n  *\n \n+Export-Package: org.osgi.service.metatype.annotations ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc4051eec6d43a2085dc712f6d2ab45f8d8db61"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTExNjkzOnYy", "diffSide": "RIGHT", "path": "bndtools.core/src/bndtools/central/InternalPluginTracker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0NzozMlrOGhKwrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0NzozMlrOGhKwrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMjQ5Mg==", "bodyText": "Isn't configuration.getAnnotation(ObjectClassDefinition.class) always null since ObjectClassDefinition is class retention and thus not visible at runtime?", "url": "https://github.com/bndtools/bnd/pull/4151#discussion_r437432492", "createdAt": "2020-06-09T13:47:32Z", "author": {"login": "bjhargrave"}, "path": "bndtools.core/src/bndtools/central/InternalPluginTracker.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package bndtools.central;\n+\n+import java.lang.reflect.Method;\n+import java.util.Formatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.BundleEvent;\n+import org.osgi.framework.wiring.BundleRevision;\n+import org.osgi.resource.Capability;\n+import org.osgi.service.metatype.annotations.AttributeDefinition;\n+import org.osgi.service.metatype.annotations.ObjectClassDefinition;\n+import org.osgi.util.tracker.BundleTracker;\n+\n+import aQute.bnd.annotation.plugin.InternalPluginDefinition;\n+import aQute.bnd.annotation.plugin.InternalPluginNamespace;\n+import aQute.bnd.osgi.Processor;\n+\n+public class InternalPluginTracker extends BundleTracker<List<InternalPluginDefinition>> {\n+\n+\tpublic InternalPluginTracker(BundleContext context) {\n+\t\tsuper(context, Bundle.ACTIVE + Bundle.STARTING, null);\n+\t}\n+\n+\t@Override\n+\tpublic List<InternalPluginDefinition> addingBundle(Bundle bundle, BundleEvent event) {\n+\t\tBundleRevision revision = bundle.adapt(BundleRevision.class);\n+\t\tList<Capability> capabilities = revision.getCapabilities(InternalPluginNamespace.NAMESPACE);\n+\t\tif (capabilities.isEmpty())\n+\t\t\treturn null;\n+\n+\t\treturn capabilities.stream()\n+\t\t\t.map(cap -> capToDef(bundle, cap))\n+\t\t\t.filter(Objects::nonNull)\n+\t\t\t.collect(Collectors.toList());\n+\t}\n+\n+\tprivate InternalPluginDefinition capToDef(Bundle bundle, Capability cap) {\n+\n+\t\ttry {\n+\t\t\tString name = (String) cap.getAttributes()\n+\t\t\t\t.get(InternalPluginNamespace.NAME_A);\n+\t\t\tString key = (String) cap.getAttributes()\n+\t\t\t\t.get(InternalPluginNamespace.IMPLEMENTATION_A);\n+\n+\t\t\tClass<?> implementation = name == null ? null : bundle.loadClass(key);\n+\t\t\tkey = (String) cap.getAttributes()\n+\t\t\t\t.get(InternalPluginNamespace.PARAMETERS_A);\n+\t\t\tClass<?> configuration = key == null ? null : bundle.loadClass(key);\n+\n+\t\t\tObject value = cap.getAttributes()\n+\t\t\t\t.get(\"hide\");\n+\t\t\tboolean hide = value != null && Processor.isTrue(value.toString());\n+\n+\t\t\treturn new InternalPluginDefinition() {\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic String getTemplate() {\n+\t\t\t\t\treturn InternalPluginTracker.getTemplate(name, implementation, configuration);\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic String getName() {\n+\t\t\t\t\treturn name;\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic Class<?> getImplementation() {\n+\t\t\t\t\treturn implementation;\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic Optional<Class<?>> getParameters() {\n+\t\t\t\t\treturn Optional.ofNullable(configuration);\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic boolean isHidden() {\n+\t\t\t\t\treturn hide;\n+\t\t\t\t}\n+\t\t\t};\n+\t\t} catch (ClassNotFoundException e) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tstatic String getTemplate(String name, Class<?> implementation, Class<?> configuration) {\n+\t\ttry (Formatter sb = new Formatter()) {\n+\t\t\tObjectClassDefinition od = configuration != null ? configuration.getAnnotation(ObjectClassDefinition.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc4051eec6d43a2085dc712f6d2ab45f8d8db61"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTEyMDEwOnYy", "diffSide": "RIGHT", "path": "bndtools.core/src/bndtools/central/InternalPluginTracker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0Nzo1NlrOGhKydw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0Nzo1NlrOGhKydw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMjk1MQ==", "bodyText": "Same here, this would also always be null, no?", "url": "https://github.com/bndtools/bnd/pull/4151#discussion_r437432951", "createdAt": "2020-06-09T13:47:56Z", "author": {"login": "bjhargrave"}, "path": "bndtools.core/src/bndtools/central/InternalPluginTracker.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package bndtools.central;\n+\n+import java.lang.reflect.Method;\n+import java.util.Formatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.BundleEvent;\n+import org.osgi.framework.wiring.BundleRevision;\n+import org.osgi.resource.Capability;\n+import org.osgi.service.metatype.annotations.AttributeDefinition;\n+import org.osgi.service.metatype.annotations.ObjectClassDefinition;\n+import org.osgi.util.tracker.BundleTracker;\n+\n+import aQute.bnd.annotation.plugin.InternalPluginDefinition;\n+import aQute.bnd.annotation.plugin.InternalPluginNamespace;\n+import aQute.bnd.osgi.Processor;\n+\n+public class InternalPluginTracker extends BundleTracker<List<InternalPluginDefinition>> {\n+\n+\tpublic InternalPluginTracker(BundleContext context) {\n+\t\tsuper(context, Bundle.ACTIVE + Bundle.STARTING, null);\n+\t}\n+\n+\t@Override\n+\tpublic List<InternalPluginDefinition> addingBundle(Bundle bundle, BundleEvent event) {\n+\t\tBundleRevision revision = bundle.adapt(BundleRevision.class);\n+\t\tList<Capability> capabilities = revision.getCapabilities(InternalPluginNamespace.NAMESPACE);\n+\t\tif (capabilities.isEmpty())\n+\t\t\treturn null;\n+\n+\t\treturn capabilities.stream()\n+\t\t\t.map(cap -> capToDef(bundle, cap))\n+\t\t\t.filter(Objects::nonNull)\n+\t\t\t.collect(Collectors.toList());\n+\t}\n+\n+\tprivate InternalPluginDefinition capToDef(Bundle bundle, Capability cap) {\n+\n+\t\ttry {\n+\t\t\tString name = (String) cap.getAttributes()\n+\t\t\t\t.get(InternalPluginNamespace.NAME_A);\n+\t\t\tString key = (String) cap.getAttributes()\n+\t\t\t\t.get(InternalPluginNamespace.IMPLEMENTATION_A);\n+\n+\t\t\tClass<?> implementation = name == null ? null : bundle.loadClass(key);\n+\t\t\tkey = (String) cap.getAttributes()\n+\t\t\t\t.get(InternalPluginNamespace.PARAMETERS_A);\n+\t\t\tClass<?> configuration = key == null ? null : bundle.loadClass(key);\n+\n+\t\t\tObject value = cap.getAttributes()\n+\t\t\t\t.get(\"hide\");\n+\t\t\tboolean hide = value != null && Processor.isTrue(value.toString());\n+\n+\t\t\treturn new InternalPluginDefinition() {\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic String getTemplate() {\n+\t\t\t\t\treturn InternalPluginTracker.getTemplate(name, implementation, configuration);\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic String getName() {\n+\t\t\t\t\treturn name;\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic Class<?> getImplementation() {\n+\t\t\t\t\treturn implementation;\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic Optional<Class<?>> getParameters() {\n+\t\t\t\t\treturn Optional.ofNullable(configuration);\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic boolean isHidden() {\n+\t\t\t\t\treturn hide;\n+\t\t\t\t}\n+\t\t\t};\n+\t\t} catch (ClassNotFoundException e) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tstatic String getTemplate(String name, Class<?> implementation, Class<?> configuration) {\n+\t\ttry (Formatter sb = new Formatter()) {\n+\t\t\tObjectClassDefinition od = configuration != null ? configuration.getAnnotation(ObjectClassDefinition.class)\n+\t\t\t\t: null;\n+\n+\t\t\tMap<String, Method> used = new TreeMap<>();\n+\t\t\tif (configuration != null) {\n+\t\t\t\tfor (Method m : configuration.getMethods()) {\n+\n+\t\t\t\t\tif (m.getDeclaringClass() != configuration)\n+\t\t\t\t\t\tcontinue;\n+\n+\t\t\t\t\tDeprecated deprecated = m.getAnnotation(Deprecated.class);\n+\t\t\t\t\tif (deprecated != null)\n+\t\t\t\t\t\tcontinue;\n+\n+\t\t\t\t\tif (used.containsKey(m.getName()))\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\tused.put(m.getName(), m);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tsb.format(\"%s\", implementation.getName());\n+\n+\t\t\tfor (Method m : used.values()) {\n+\t\t\t\tString description = \"\";\n+\t\t\t\tString deflt = \"\";\n+\t\t\t\tboolean required = true;\n+\n+\t\t\t\tAttributeDefinition ad = m.getAnnotation(AttributeDefinition.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc4051eec6d43a2085dc712f6d2ab45f8d8db61"}, "originalPosition": 122}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1364, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}