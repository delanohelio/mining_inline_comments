{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0Njk2MTI2", "number": 4165, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODoyMDowNlrOEFpViw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODoyMTowMVrOEFpWtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzU1NTk1OnYy", "diffSide": "RIGHT", "path": "biz.aQute.bndlib/src/aQute/bnd/plugin/jpms/JPMSModuleInfoPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODoyMDowNlrOGj9hfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODozNzoyMVrOGj-F7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2MTM0MQ==", "bodyText": "I hope to god the next Eclipse version fixes this idiotic code formatting bug...", "url": "https://github.com/bndtools/bnd/pull/4165#discussion_r440361341", "createdAt": "2020-06-15T18:20:06Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/plugin/jpms/JPMSModuleInfoPlugin.java", "diffHunk": "@@ -76,6 +78,46 @@\n  */\n public class JPMSModuleInfoPlugin implements VerifierPlugin {\n \n+\tenum Access {\n+\t\tCLOSED(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b5c4468d4aa3be2bf80605767eceb3b173d8d5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MDY2OA==", "bodyText": ":)", "url": "https://github.com/bndtools/bnd/pull/4165#discussion_r440370668", "createdAt": "2020-06-15T18:37:21Z", "author": {"login": "rotty3000"}, "path": "biz.aQute.bndlib/src/aQute/bnd/plugin/jpms/JPMSModuleInfoPlugin.java", "diffHunk": "@@ -76,6 +78,46 @@\n  */\n public class JPMSModuleInfoPlugin implements VerifierPlugin {\n \n+\tenum Access {\n+\t\tCLOSED(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2MTM0MQ=="}, "originalCommit": {"oid": "e9b5c4468d4aa3be2bf80605767eceb3b173d8d5"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzU1ODkyOnYy", "diffSide": "RIGHT", "path": "biz.aQute.bndlib/src/aQute/bnd/plugin/jpms/JPMSModuleInfoPlugin.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODoyMTowMVrOGj9jaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODozMjoxNlrOGj97CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2MTgzMw==", "bodyText": "Isn't this a bit restrictive? 0x20 wont work. You probably need two paths: string and numbers.", "url": "https://github.com/bndtools/bnd/pull/4165#discussion_r440361833", "createdAt": "2020-06-15T18:21:01Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/plugin/jpms/JPMSModuleInfoPlugin.java", "diffHunk": "@@ -76,6 +78,46 @@\n  */\n public class JPMSModuleInfoPlugin implements VerifierPlugin {\n \n+\tenum Access {\n+\t\tCLOSED(\n+\t\t\t0),\n+\t\tOPEN(ACC_OPEN),\n+\t\tSYNTHETIC(ACC_SYNTHETIC),\n+\t\tMANDATED(ACC_MANDATED);\n+\n+\t\tpublic static Access parse(String input) {\n+\t\t\tswitch (input) {\n+\t\t\t\tcase \"OPEN\" :\n+\t\t\t\tcase \"open\" :\n+\t\t\t\tcase \"0x0020\" :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b5c4468d4aa3be2bf80605767eceb3b173d8d5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2MjUxNA==", "bodyText": "k", "url": "https://github.com/bndtools/bnd/pull/4165#discussion_r440362514", "createdAt": "2020-06-15T18:22:24Z", "author": {"login": "rotty3000"}, "path": "biz.aQute.bndlib/src/aQute/bnd/plugin/jpms/JPMSModuleInfoPlugin.java", "diffHunk": "@@ -76,6 +78,46 @@\n  */\n public class JPMSModuleInfoPlugin implements VerifierPlugin {\n \n+\tenum Access {\n+\t\tCLOSED(\n+\t\t\t0),\n+\t\tOPEN(ACC_OPEN),\n+\t\tSYNTHETIC(ACC_SYNTHETIC),\n+\t\tMANDATED(ACC_MANDATED);\n+\n+\t\tpublic static Access parse(String input) {\n+\t\t\tswitch (input) {\n+\t\t\t\tcase \"OPEN\" :\n+\t\t\t\tcase \"open\" :\n+\t\t\t\tcase \"0x0020\" :", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2MTgzMw=="}, "originalCommit": {"oid": "e9b5c4468d4aa3be2bf80605767eceb3b173d8d5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2NDQ2Mw==", "bodyText": "default :\n\t\t\t\t\tint parsedValue = Integer.parseInt(input);\n\t\t\t\t\treturn Arrays.stream(values())\n\t\t\t\t\t\t.filter(a -> a.getValue() == parsedValue)\n\t\t\t\t\t\t.findFirst()\n\t\t\t\t\t\t.orElse(CLOSED);\n\n\n?", "url": "https://github.com/bndtools/bnd/pull/4165#discussion_r440364463", "createdAt": "2020-06-15T18:26:01Z", "author": {"login": "rotty3000"}, "path": "biz.aQute.bndlib/src/aQute/bnd/plugin/jpms/JPMSModuleInfoPlugin.java", "diffHunk": "@@ -76,6 +78,46 @@\n  */\n public class JPMSModuleInfoPlugin implements VerifierPlugin {\n \n+\tenum Access {\n+\t\tCLOSED(\n+\t\t\t0),\n+\t\tOPEN(ACC_OPEN),\n+\t\tSYNTHETIC(ACC_SYNTHETIC),\n+\t\tMANDATED(ACC_MANDATED);\n+\n+\t\tpublic static Access parse(String input) {\n+\t\t\tswitch (input) {\n+\t\t\t\tcase \"OPEN\" :\n+\t\t\t\tcase \"open\" :\n+\t\t\t\tcase \"0x0020\" :", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2MTgzMw=="}, "originalCommit": {"oid": "e9b5c4468d4aa3be2bf80605767eceb3b173d8d5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2NzA2Mg==", "bodyText": "I think you want Integer.decode which can handle hex strings and octal. But you should catch any exception from decode and map to an error.", "url": "https://github.com/bndtools/bnd/pull/4165#discussion_r440367062", "createdAt": "2020-06-15T18:30:44Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/plugin/jpms/JPMSModuleInfoPlugin.java", "diffHunk": "@@ -76,6 +78,46 @@\n  */\n public class JPMSModuleInfoPlugin implements VerifierPlugin {\n \n+\tenum Access {\n+\t\tCLOSED(\n+\t\t\t0),\n+\t\tOPEN(ACC_OPEN),\n+\t\tSYNTHETIC(ACC_SYNTHETIC),\n+\t\tMANDATED(ACC_MANDATED);\n+\n+\t\tpublic static Access parse(String input) {\n+\t\t\tswitch (input) {\n+\t\t\t\tcase \"OPEN\" :\n+\t\t\t\tcase \"open\" :\n+\t\t\t\tcase \"0x0020\" :", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2MTgzMw=="}, "originalCommit": {"oid": "e9b5c4468d4aa3be2bf80605767eceb3b173d8d5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2Nzg4MA==", "bodyText": "Also the orElse case should also be an error, no?", "url": "https://github.com/bndtools/bnd/pull/4165#discussion_r440367880", "createdAt": "2020-06-15T18:32:16Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/plugin/jpms/JPMSModuleInfoPlugin.java", "diffHunk": "@@ -76,6 +78,46 @@\n  */\n public class JPMSModuleInfoPlugin implements VerifierPlugin {\n \n+\tenum Access {\n+\t\tCLOSED(\n+\t\t\t0),\n+\t\tOPEN(ACC_OPEN),\n+\t\tSYNTHETIC(ACC_SYNTHETIC),\n+\t\tMANDATED(ACC_MANDATED);\n+\n+\t\tpublic static Access parse(String input) {\n+\t\t\tswitch (input) {\n+\t\t\t\tcase \"OPEN\" :\n+\t\t\t\tcase \"open\" :\n+\t\t\t\tcase \"0x0020\" :", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2MTgzMw=="}, "originalCommit": {"oid": "e9b5c4468d4aa3be2bf80605767eceb3b173d8d5"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1373, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}