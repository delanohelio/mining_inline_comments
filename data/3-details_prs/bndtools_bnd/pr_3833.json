{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3ODk1Mzk4", "number": 3833, "title": "Pkriens/importclassname", "bodyText": "Supports importing by class name", "createdAt": "2020-03-13T17:28:57Z", "url": "https://github.com/bndtools/bnd/pull/3833", "merged": true, "mergeCommit": {"oid": "2c7b4a6ebdb4bb9fd2f94a8a925064afe36f0437"}, "closed": true, "closedAt": "2020-03-20T17:11:07Z", "author": {"login": "pkriens"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNUVYOgFqTM3NDQ4OTIxOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPcjcSAH2gAyMzg3ODk1Mzk4OjI1NTVhNWYwYjBmMTU1MmUzOGQxNzYwMjYwMzMyZjYxODgzYzQ4ZTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NDg5MjE5", "url": "https://github.com/bndtools/bnd/pull/3833#pullrequestreview-374489219", "createdAt": "2020-03-13T17:34:10Z", "commit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozNDoxMFrOF2MliQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODowMzoxNFrOF2NfKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MzY0MQ==", "bodyText": "Please include a package-info.java for each new package.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392373641", "createdAt": "2020-03-13T17:34:10Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/lib/hierarchy/FolderNode.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package aQute.lib.hierarchy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MzgxMA==", "bodyText": "Please include a package-info.java for each new package.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392373810", "createdAt": "2020-03-13T17:34:33Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/lib/lazy/Lazy.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package aQute.lib.lazy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3NTI5Nw==", "bodyText": "It returns true in all cases.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392375297", "createdAt": "2020-03-13T17:37:22Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/lib/zip/ZipUtil.java", "diffHunk": "@@ -75,4 +76,12 @@ public static String cleanPath(String path) {\n \t\treturn clean.toString();\n \t}\n \n+\tpublic static boolean isCompromised(String path) {\n+\t\ttry {\n+\t\t\tcleanPath(path);\n+\t\t\treturn true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3NTUyMA==", "bodyText": "Helpful comment. I am not sure how it is a common case. Can you provide an example of such a common case?", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392375520", "createdAt": "2020-03-13T17:37:48Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/lib/zip/ZipUtil.java", "diffHunk": "@@ -54,6 +54,7 @@ public static String cleanPath(String path) {\n \t\t\t\tint lastSlash = clean.lastIndexOf(\"/\");\n \t\t\t\tif (lastSlash == -1) {\n \t\t\t\t\tif (clean.length() == 0) {\n+\t\t\t\t\t\t// bad design, this is a common outcome", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3NjIxOA==", "bodyText": "Please include a package-info.java for each new package.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392376218", "createdAt": "2020-03-13T17:39:00Z", "author": {"login": "bjhargrave"}, "path": "aQute.libg/src/aQute/libg/ints/IntCounter.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package aQute.libg.ints;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3OTE3MQ==", "bodyText": "Shouldn't you add to the list before calling the super method?", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392379171", "createdAt": "2020-03-13T17:44:50Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/Analyzer.java", "diffHunk": "@@ -159,6 +160,11 @@ public Analyzer(Processor parent) {\n \n \tpublic Analyzer() {}\n \n+\t@Override\n+\tprotected void setTypeSpecificPlugins(Set<Object> list) {\n+\t\tsuper.setTypeSpecificPlugins(list);\n+\t\tlist.add(new ClassIndexerAnalyzer());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4MDk3MQ==", "bodyText": "Isn't this really a resource name to a fqn name? So resourceNameToFQN might be a more descriptive name?", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392380971", "createdAt": "2020-03-13T17:48:21Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/Descriptors.java", "diffHunk": "@@ -606,10 +619,18 @@ public static String binaryToFQN(String binary) {\n \t\treturn binary.replace('/', '.');\n \t}\n \n+\tpublic static String binaryClassToFQN(String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4MTIzNg==", "bodyText": "Isn't this really a fqn name to a resource name? So fqnToResourceName might be a more descriptive name?", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392381236", "createdAt": "2020-03-13T17:48:52Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/Descriptors.java", "diffHunk": "@@ -606,10 +619,18 @@ public static String binaryToFQN(String binary) {\n \t\treturn binary.replace('/', '.');\n \t}\n \n+\tpublic static String binaryClassToFQN(String path) {\n+\t\treturn binaryToFQN(path.substring(0, path.length() - 6));\n+\t}\n+\n \tpublic static String fqnToBinary(String binary) {\n \t\treturn binary.replace('.', '/');\n \t}\n \n+\tpublic static String fqnClassToBinary(String binary) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4MTc5Nw==", "bodyText": "Comment trails off...", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392381797", "createdAt": "2020-03-13T17:49:55Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/Descriptors.java", "diffHunk": "@@ -654,4 +675,112 @@ public TypeRef getTypeRefFromPath(String path) {\n \t\treturn getTypeRef(path.substring(0, path.length() - 6));\n \t}\n \n+\tpublic static String pathToFqn(String path) {\n+\t\tassert path.endsWith(\".class\");\n+\n+\t\tStringBuilder sb = new StringBuilder();\n+\t\tint j = path.length() - 6;\n+\t\tfor (int i = 0; i < j; i++) {\n+\t\t\tchar c = path.charAt(i);\n+\t\t\tif (c == '/')\n+\t\t\t\tsb.append('.');\n+\t\t\telse\n+\t\t\t\tsb.append(c);\n+\t\t}\n+\t\treturn sb.toString();\n+\t}\n+\n+\tpublic static boolean isBinaryClass(String resource) {\n+\t\treturn resource.endsWith(\".class\");\n+\t}\n+\n+\t/**\n+\t * Java really screwed up in using different names for the binary path and\n+\t * the fqns. This calculates the simple name of a potentially nested class.\n+\t *\n+\t * @param resource ( segment '/')+ (name '$')* name '.class'\n+\t * @return the last name\n+\t */\n+\tpublic static String binaryToSimple(String resource) {\n+\t\tif (resource == null)\n+\t\t\treturn null;\n+\n+\t\tassert isBinaryClass(resource);\n+\n+\t\tint end = resource.length() - 6;\n+\t\tint rover = end;\n+\t\twhile (rover >= 0) {\n+\t\t\tchar ch = resource.charAt(rover--);\n+\t\t\tif (ch == '$' || ch == '/')\n+\t\t\t\tbreak;\n+\t\t}\n+\t\treturn resource.substring(rover + 1, end);\n+\t}\n+\n+\t/**\n+\t * Heuristic for a class name. We assume a segment with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4Mjc0OQ==", "bodyText": "Shouldn't this be an error case (NPE) instead of a silent return?", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392382749", "createdAt": "2020-03-13T17:51:48Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/Processor.java", "diffHunk": "@@ -1304,6 +1304,8 @@ public void propertiesChanged() {}\n \t * @param propertiesFile\n \t */\n \tpublic void setProperties(File propertiesFile) {\n+\t\tif (propertiesFile == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4Mzc2OA==", "bodyText": "What is the point of the local var since it is immediately out of scope?", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392383768", "createdAt": "2020-03-13T17:53:55Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/resource/ResourceBuilder.java", "diffHunk": "@@ -79,13 +87,9 @@ public ResourceBuilder addCapability(CapReqBuilder builder) {\n \t\treturn this;\n \t}\n \n-\tprivate Capability addCapability0(CapReqBuilder builder) {\n-\t\tCapability cap = buildCapability(builder);\n-\t\tCapability previous = capabilities.putIfAbsent(cap, cap);\n-\t\tif (previous != null) {\n-\t\t\treturn previous;\n-\t\t}\n-\t\treturn cap;\n+\tprivate void addCapability0(CapReqBuilder builder) {\n+\t\tbuilder.setResource(resource);\n+\t\tCapReqBuilder previous = capabilities.putIfAbsent(builder, builder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4NDIyMA==", "bodyText": "This seems like a breaking API change without previous warning.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392384220", "createdAt": "2020-03-13T17:54:52Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/resource/ResourceBuilder.java", "diffHunk": "@@ -134,13 +138,17 @@ public Resource build() {\n \t\t\tthrow new IllegalStateException(\"Resource already built\");\n \t\tbuilt = true;\n \n-\t\tresource.setCapabilities(capabilities.values());\n+\t\tresource.setCapabilities(capabilities.values()\n+\t\t\t.stream()\n+\t\t\t.map(cr -> cr.buildCapability())\n+\t\t\t.collect(Collectors.toSet()));\n \t\tresource.setRequirements(requirements.values());\n \t\treturn resource;\n \t}\n \n+\t@Deprecated\n \tpublic List<Capability> getCapabilities() {\n-\t\treturn new ArrayList<>(capabilities.values());\n+\t\tthrow new UnsupportedOperationException(\"Must first be build\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4NDYxNw==", "bodyText": "This change is not source compatible.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392384617", "createdAt": "2020-03-13T17:55:42Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/resource/ResourceBuilder.java", "diffHunk": "@@ -638,15 +646,15 @@ public void addRequirements(List<Requirement> requires) {\n \t\treturn capabilities;\n \t}\n \n-\tpublic Map<Capability, Capability> from(Resource bundle) {\n-\t\tMap<Capability, Capability> mapping = new HashMap<>();\n+\tpublic Map<Capability, CapReqBuilder> from(Resource bundle) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4ODM5Mg==", "bodyText": "Would the return type be better as Result<Map.Entry<String,String>,String> or Result<Pair<String,String>,String>? Using String[] is pretty open and provides no clear evidence that the array contains exactly 2 strings.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r392388392", "createdAt": "2020-03-13T18:03:14Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/Descriptors.java", "diffHunk": "@@ -654,4 +675,112 @@ public TypeRef getTypeRefFromPath(String path) {\n \t\treturn getTypeRef(path.substring(0, path.length() - 6));\n \t}\n \n+\tpublic static String pathToFqn(String path) {\n+\t\tassert path.endsWith(\".class\");\n+\n+\t\tStringBuilder sb = new StringBuilder();\n+\t\tint j = path.length() - 6;\n+\t\tfor (int i = 0; i < j; i++) {\n+\t\t\tchar c = path.charAt(i);\n+\t\t\tif (c == '/')\n+\t\t\t\tsb.append('.');\n+\t\t\telse\n+\t\t\t\tsb.append(c);\n+\t\t}\n+\t\treturn sb.toString();\n+\t}\n+\n+\tpublic static boolean isBinaryClass(String resource) {\n+\t\treturn resource.endsWith(\".class\");\n+\t}\n+\n+\t/**\n+\t * Java really screwed up in using different names for the binary path and\n+\t * the fqns. This calculates the simple name of a potentially nested class.\n+\t *\n+\t * @param resource ( segment '/')+ (name '$')* name '.class'\n+\t * @return the last name\n+\t */\n+\tpublic static String binaryToSimple(String resource) {\n+\t\tif (resource == null)\n+\t\t\treturn null;\n+\n+\t\tassert isBinaryClass(resource);\n+\n+\t\tint end = resource.length() - 6;\n+\t\tint rover = end;\n+\t\twhile (rover >= 0) {\n+\t\t\tchar ch = resource.charAt(rover--);\n+\t\t\tif (ch == '$' || ch == '/')\n+\t\t\t\tbreak;\n+\t\t}\n+\t\treturn resource.substring(rover + 1, end);\n+\t}\n+\n+\t/**\n+\t * Heuristic for a class name. We assume a segment with\n+\t *\n+\t * @param fqn can be a class name, nested class, or simple name\n+\t * @return true if the last segment starts with an upper case\n+\t */\n+\tpublic static boolean isClassName(String fqn) {\n+\t\tif (fqn.isEmpty())\n+\t\t\treturn false;\n+\n+\t\tint n = fqn.lastIndexOf('.') + 1;\n+\t\tif (n >= fqn.length())\n+\t\t\treturn false;\n+\n+\t\tchar ch = fqn.charAt(n);\n+\n+\t\treturn Character.isUpperCase(ch);\n+\t}\n+\n+\t/**\n+\t * Return a 2 element array based on the fqn. The first element is the\n+\t * package name, the second is the class name. Each can be absent, but not\n+\t * both. The class name can be a nested class (will contain a '.' then)\n+\t *\n+\t * @param fqn a Java identifier name, either a simple class name, a\n+\t *            qualified class name, or a package name\n+\t * @return a Result with 2 element array with [package, class]\n+\t */\n+\tpublic static Result<String[], String> determine(String fqn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0a47f40c7dd74a836678a3a834ee163f64a8a0"}, "originalPosition": 134}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0afe2606cc14c6766a790f1003ba5b5b5f14fd3a", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/0afe2606cc14c6766a790f1003ba5b5b5f14fd3a", "committedDate": "2020-03-16T15:37:50Z", "message": "[ziputil] The clean path method had errors\n\nI added a few test cases and it turned out that the\nexisting cleanPath method did not handle paths that used\n.. very well. I rewrote it using a faster state\nmachine. \n\nAlso specified the fact that it cleans any start and\nending slash, as well as double slashes removal.\n\nFor each of these cases there are test cases.\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}, "afterCommit": {"oid": "e89388d35e043d7c50a921e81dc182221fbcd78b", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/e89388d35e043d7c50a921e81dc182221fbcd78b", "committedDate": "2020-03-16T16:35:13Z", "message": "[resourcebuilder] Kept backward compatibility\n\nThere is a call from(Resource) that returned a\nmap from the given resource caps to the caps\nin the resource builder. However, I needed\nthe caps to be mutable. \n\nThis fix lets the CapReqBuilder implement \nCapability. Since cap equals and cap hashCode\nis defined on value this should work fine.\n\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1fce34b45459c9ff7ecc390454dbd7164da49cfb", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/1fce34b45459c9ff7ecc390454dbd7164da49cfb", "committedDate": "2020-03-16T17:09:17Z", "message": "[lgtm] Make LGTM happy\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}, "afterCommit": {"oid": "d85d6930ce3194e1fc1a3379b7014d16fb6a0934", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/d85d6930ce3194e1fc1a3379b7014d16fb6a0934", "committedDate": "2020-03-17T10:55:03Z", "message": "[lgtm] Make LGTM happy\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17dd38ce5f01b59b0aef3a0ea800ba75c2b5628b", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/17dd38ce5f01b59b0aef3a0ea800ba75c2b5628b", "committedDate": "2020-03-17T16:51:43Z", "message": " [hex] Added support for numbers to hex\n    \n- byte, short, char, int, long\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d23cd57ff7afabce1ff093c746a509ed7ca6ce83", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/d23cd57ff7afabce1ff093c746a509ed7ca6ce83", "committedDate": "2020-03-17T16:52:55Z", "message": "[lgtm] LGTM whines about zip slip\n    \n    It turned out that PersistenceMap did not escape\n    file names. However, LGTM warned far away from\n    this, basically when you put a unslipped entry\n    name in any Map.\n    \n    While workin on this I saw that the ZipUtil.cleanPath\n    did not properly handle '..'. I've added test cases\n    and replace it because it looked slow and I couldn't\n    see how it worked. It now uses a state machine.\n    \n    The fix to PersistentMap required escaping\n    and unescaping so I added this to Strings.\n    \n    All with tests ...\n    \n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b0eae77b52d845d3523eaad41d73d0efb78d832", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/3b0eae77b52d845d3523eaad41d73d0efb78d832", "committedDate": "2020-03-17T16:53:31Z", "message": "[libg] Lazy init support & IntCounter\n    \n    Tiny utilities.\n    \n    Lazy Init -> makes it easy to create an object on demand.\n    \n    IntCounter, simple counter not concurrent. Handy for recursive\n    calls and when values need to be final with lambdas.\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc7a1224cf6e3b4354b6e07d5f9b26ac592f9b36", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/fc7a1224cf6e3b4354b6e07d5f9b26ac592f9b36", "committedDate": "2020-03-17T16:53:59Z", "message": "[hierarchy] Utility for fast hierarchy handling\n    \n    The current Jar class is extremely handy to process\n    file trees or zip files. However, the internal representation\n    of the hierarchy is _extremely_ expensive. It uses a Tree per\n    directory :-( Accessing this hierarchy is also clumsy since\n    you either use long paths or the directory.\n    \n    This code implements a fast hierarchy with convenience functions\n    plus indexers for Zip streams, Zip files, and folder structure.\n    \n    Could be used in the Jar Editor, maybe in the Jar class.\n    \n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cfb07fdd2edb9c37f1bf572faa694e4ee3270cf", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/7cfb07fdd2edb9c37f1bf572faa694e4ee3270cf", "committedDate": "2020-03-17T16:54:37Z", "message": "[bndlib] Small changes\n    \n    - Handy functions for testing strings and the mess Java made of names\n    - Bundle Id improved and used in VersionedClause & Container\n    - Allow null for Processor propertiesFile\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd6121f8447ce18f30f3438a28660de02792d027", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/fd6121f8447ce18f30f3438a28660de02792d027", "committedDate": "2020-03-17T16:55:47Z", "message": "[classindex] Supports hashes on class names\n    \n    Adds a search method to Workspace for a class name,\n    either qualified with a package or without.\n    \n    To support searching in the absence of a package,\n    the Analyzer (through an Analyzer Plugin) is\n    extended to add hashes of a packages class name\n    to a package capability.\n    \n    Since clearly not a lot of bundles will have this data,\n    I also extended the Resource Builder to add these\n    hashes. This works well for the Maven Bnd Repository\n    and some others because they always parse the files.\n    \n    The workspace search forwards the query to the\n    ClassIndex class. This will analyze the request\n    and pick an optimal search strategy.\n    \n    We need to discuss if we can make adding these\n    hashes standard (OSGi?) or have to make it optional.\n    \n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/9367a4eeda9f618ab1338bcb280db0793bce14de", "committedDate": "2020-03-17T16:56:08Z", "message": " [import quickfix] Replaced previous Quickfix\n    \n    I am greatly thankful for the previous version of\n    the quick fix because I'd never figured the eclipse\n    part out.\n    \n    I've taken this part and moved any part that did\n    stuff that  should be in bnd to bnd. This way,\n    others can leverage this code. Support was\n    added in Workspace and the BndEditModel to\n    do this kind of stuff easier.\n    \n    Therefore, the deletion of the old classes is\n    no criticism. Very happy I had that. That said,\n    Fr. Krieg needs to take a good look I got all the\n    functionality. I could not find good Eclipse\n    documentation what one could expect for each of the\n    error codes.\n    \n    In the bug, it is indicated that there was also\n    a completion list. This did not work for me, and\n    I could also not really see why I never got triggered.\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d85d6930ce3194e1fc1a3379b7014d16fb6a0934", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/d85d6930ce3194e1fc1a3379b7014d16fb6a0934", "committedDate": "2020-03-17T10:55:03Z", "message": "[lgtm] Make LGTM happy\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}, "afterCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/9367a4eeda9f618ab1338bcb280db0793bce14de", "committedDate": "2020-03-17T16:56:08Z", "message": " [import quickfix] Replaced previous Quickfix\n    \n    I am greatly thankful for the previous version of\n    the quick fix because I'd never figured the eclipse\n    part out.\n    \n    I've taken this part and moved any part that did\n    stuff that  should be in bnd to bnd. This way,\n    others can leverage this code. Support was\n    added in Workspace and the BndEditModel to\n    do this kind of stuff easier.\n    \n    Therefore, the deletion of the old classes is\n    no criticism. Very happy I had that. That said,\n    Fr. Krieg needs to take a good look I got all the\n    functionality. I could not find good Eclipse\n    documentation what one could expect for each of the\n    error codes.\n    \n    In the bug, it is indicated that there was also\n    a completion list. This did not work for me, and\n    I could also not really see why I never got triggered.\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MzUwMzAx", "url": "https://github.com/bndtools/bnd/pull/3833#pullrequestreview-377350301", "createdAt": "2020-03-19T01:08:13Z", "commit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMTowODoxM1rOF4clmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMjoyMjoyOFrOF4d6hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMjk1Mg==", "bodyText": "It was probably a good idea to get rid of this as AddBundleCompletionProposal is an implementation detail. Ideally, we should only be testing through the public API (which is BuildpathQuickfixProcessor.getCorrections()), so we should try and make sure that we get effective coverage of AddBundleCompletionProposal through BuildpathQuickfixProcessorTest.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394732952", "createdAt": "2020-03-19T01:08:13Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/test/org/bndtools/core/editors/ImportPackageQuickFixProcessorAddBundleCompletionProposalTest.java", "diffHunk": "@@ -1,57 +0,0 @@\n-package org.bndtools.core.editors;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc0MTQyMw==", "bodyText": "Note that Eclipse won't (or shouldn't!) call getCorrections() unless at least one of the problems in locations is of a type that we have told Eclipse we can support (via hasCorrections()). So if we've gotten this far, it's likely that we should be doing further investigation.\nThe if/return here will prematurely terminate the loop if the first location is of a problem type that we can't correct, without checking the rest of them. Because (as noted above) it is likely that one of the subsequent reported problems is a problem type that we might be able to correct, it would be better if this was a continue rather than return null.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394741423", "createdAt": "2020-03-19T01:38:04Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.compiler.IProblem;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.ImportDeclaration;\n+import org.eclipse.jdt.core.dom.Name;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jdt.ui.text.java.IProblemLocation;\n+import org.eclipse.jdt.ui.text.java.IQuickFixProcessor;\n+\n+import aQute.bnd.build.Container;\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.Workspace;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.lib.exceptions.Exceptions;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+public class BuildpathQuickfixProcessor implements IQuickFixProcessor {\n+\n+\t@Override\n+\tpublic boolean hasCorrections(ICompilationUnit unit, int problemId) {\n+\t\tswitch (problemId) {\n+\t\t\tcase IProblem.IsClassPathCorrect :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.ImportNotFound :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.UndefinedType :\n+\t\t\t\treturn true;\n+\t\t\tdefault :\n+\t\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IJavaCompletionProposal[] getCorrections(IInvocationContext context, IProblemLocation[] locations)\n+\t\tthrows CoreException {\n+\t\ttry {\n+\t\t\tList<IJavaCompletionProposal> proposals = new ArrayList<>();\n+\n+\t\t\tICompilationUnit compUnit = context.getCompilationUnit();\n+\t\t\tIJavaProject java = compUnit.getJavaProject();\n+\t\t\tif (java == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tProject project = Central.getProject(java.getProject());\n+\t\t\tif (project == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tboolean test = isInDir(project.getTestSrc(), compUnit.getResource());\n+\t\t\tWorkspace workspace = project.getWorkspace();\n+\n+\t\t\tfor (IProblemLocation location : locations) {\n+\n+\t\t\t\tif (!hasCorrections(context.getCompilationUnit(), location.getProblemId()))\n+\t\t\t\t\treturn null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc0MjI2NQ==", "bodyText": "These were originally collapsed into one return statement, thus:\ncase IProblem.IsClassPathCorrect :\ncase IProblem.ImportNotFound :\ncase IProblem.UndefinedType :\n    return true;\nAny particular reason for exploding these out into individual return statements?\nAlso, we may need to add other entries to the switch in order to tell Eclipse that we can now handle other problem types due to the enhanced class name searching, and to take advantage of this functionality. However, as you point out the documentation on this is not good. I arrived at the above set by experimentation - set up a workspace in Eclipse with a situation that I know we should be able to correct, add a print problemId to stderr, and then hover over it in the Eclipse instance to see what problemId we get.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394742265", "createdAt": "2020-03-19T01:39:51Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.compiler.IProblem;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.ImportDeclaration;\n+import org.eclipse.jdt.core.dom.Name;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jdt.ui.text.java.IProblemLocation;\n+import org.eclipse.jdt.ui.text.java.IQuickFixProcessor;\n+\n+import aQute.bnd.build.Container;\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.Workspace;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.lib.exceptions.Exceptions;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+public class BuildpathQuickfixProcessor implements IQuickFixProcessor {\n+\n+\t@Override\n+\tpublic boolean hasCorrections(ICompilationUnit unit, int problemId) {\n+\t\tswitch (problemId) {\n+\t\t\tcase IProblem.IsClassPathCorrect :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.ImportNotFound :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.UndefinedType :\n+\t\t\t\treturn true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc0NjIxMw==", "bodyText": "This part of the code is obviously new to support quick fixes of incomplete class definitions.\nThe original quick fix processor primarily supported the case where the import statement already existed, but could not be resolved because the bundle was not on -buildpath. In such cases, you don't want to create the import statement again, nor do you want to add a \".*\" import if you've already explicitly imported the class that you want. I think we need to be selective about if/when we call createImport(), depending on what problem we are trying to fix.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394746213", "createdAt": "2020-03-19T01:48:59Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/AddBundleCompletionProposal.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import org.bndtools.core.ui.icons.Icons;\n+import org.eclipse.core.resources.WorkspaceJob;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jface.text.contentassist.IContextInformation;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.graphics.Point;\n+\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.model.BndEditModel;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.bnd.osgi.Constants;\n+import aQute.bnd.osgi.Descriptors;\n+import aQute.lib.strings.Strings;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+class AddBundleCompletionProposal extends WorkspaceJob implements IJavaCompletionProposal {\n+\n+\tfinal BundleId\t\t\t\tbundle;\n+\tfinal String\t\t\t\tdisplayString;\n+\tfinal int\t\t\t\t\trelevance;\n+\tfinal IInvocationContext\tcontext;\n+\tfinal Project\t\t\t\tproject;\n+\tfinal String\t\t\t\tpathtype;\n+\tfinal String\t\t\t\tfqn;\n+\n+\tpublic AddBundleCompletionProposal(String fqn, BundleId bundle, int relevance, IInvocationContext context,\n+\t\tProject project, String pathtype) {\n+\t\tsuper(\"Adding '\" + bundle + \"' to \" + project + \" \" + pathtype);\n+\t\tthis.fqn = fqn;\n+\t\tthis.bundle = bundle;\n+\t\tthis.relevance = relevance;\n+\t\tthis.context = context;\n+\t\tthis.project = project;\n+\t\tthis.pathtype = pathtype;\n+\t\tthis.displayString = Strings.format(\"Add %s %s to %s (found %s)\", bundle.getBsn(), bundle.getShortVersion(),\n+\t\t\tpathtype, fqn);\n+\t}\n+\n+\t@Override\n+\tpublic void apply(org.eclipse.jface.text.IDocument document) {\n+\t\tschedule();\n+\t}\n+\n+\t/**\n+\t * @see org.eclipse.jface.text.contentassist.ICompletionProposal#getSelection(org.eclipse.jface.text.IDocument)\n+\t */\n+\t@Override\n+\tpublic Point getSelection(org.eclipse.jface.text.IDocument document) {\n+\t\treturn new Point(context.getSelectionOffset(), context.getSelectionLength());\n+\t}\n+\n+\t@Override\n+\tpublic String getAdditionalProposalInfo() {\n+\t\treturn displayString;\n+\t}\n+\n+\t@Override\n+\tpublic String getDisplayString() {\n+\t\treturn displayString;\n+\t}\n+\n+\t@Override\n+\tpublic Image getImage() {\n+\t\treturn Icons.image(\"bundle\");\n+\t}\n+\n+\t@Override\n+\tpublic IContextInformation getContextInformation() {\n+\t\treturn new IContextInformation() {\n+\n+\t\t\t@Override\n+\t\t\tpublic String getContextDisplayString() {\n+\t\t\t\treturn \"Added \" + bundle + \" to build path\";\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Image getImage() {\n+\t\t\t\treturn Icons.image(\"bundle\");\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic String getInformationDisplayString() {\n+\t\t\t\treturn \"Added \" + bundle + \" to build path - info\";\n+\t\t\t}\n+\n+\t\t};\n+\t}\n+\n+\t@Override\n+\tpublic int getRelevance() {\n+\t\treturn relevance;\n+\t}\n+\n+\t@Override\n+\tpublic IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {\n+\t\ttry {\n+\t\t\tIStatus status = Central.bndCall(() -> {\n+\t\t\t\tBndEditModel model = new BndEditModel(project);\n+\t\t\t\tmodel.load();\n+\n+\t\t\t\tswitch (pathtype) {\n+\t\t\t\t\tcase Constants.TESTPATH :\n+\t\t\t\t\t\tmodel.addPath(bundle, Constants.TESTPATH);\n+\t\t\t\t\t\tbreak;\n+\n+\t\t\t\t\tcase Constants.BUILDPATH :\n+\t\t\t\t\tdefault :\n+\t\t\t\t\t\tmodel.addPath(bundle, Constants.BUILDPATH);\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tmodel.saveChanges();\n+\t\t\t\tCentral.refreshFile(project.getPropertiesFile());\n+\t\t\t\treturn Status.OK_STATUS;\n+\t\t\t});\n+\n+\t\t\tString[] determine = Descriptors.determine(fqn)\n+\t\t\t\t.unwrap();\n+\n+\t\t\tassert determine[0] != null : \"We must have found a package\";\n+\n+\t\t\tif (determine[1] == null) {\n+\t\t\t\tcontext.getCompilationUnit()\n+\t\t\t\t\t.createImport(fqn + \".*\", null, monitor);\n+\t\t\t} else {\n+\t\t\t\tcontext.getCompilationUnit()\n+\t\t\t\t\t.createImport(fqn, null, monitor);\n+\t\t\t}\n+\t\t\treturn status;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc0NjI1OA==", "bodyText": "For the quick fix processor, I could never figure out when this was used. It is possible they are not used for quick fixes, but for completion proposals (which are different to quick fixes).\nHowever they are used, the strings should probably use displayString (eg, with these new changes, sometimes we're adding to the test path and not the build path).", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394746258", "createdAt": "2020-03-19T01:49:13Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/AddBundleCompletionProposal.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import org.bndtools.core.ui.icons.Icons;\n+import org.eclipse.core.resources.WorkspaceJob;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jface.text.contentassist.IContextInformation;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.graphics.Point;\n+\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.model.BndEditModel;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.bnd.osgi.Constants;\n+import aQute.bnd.osgi.Descriptors;\n+import aQute.lib.strings.Strings;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+class AddBundleCompletionProposal extends WorkspaceJob implements IJavaCompletionProposal {\n+\n+\tfinal BundleId\t\t\t\tbundle;\n+\tfinal String\t\t\t\tdisplayString;\n+\tfinal int\t\t\t\t\trelevance;\n+\tfinal IInvocationContext\tcontext;\n+\tfinal Project\t\t\t\tproject;\n+\tfinal String\t\t\t\tpathtype;\n+\tfinal String\t\t\t\tfqn;\n+\n+\tpublic AddBundleCompletionProposal(String fqn, BundleId bundle, int relevance, IInvocationContext context,\n+\t\tProject project, String pathtype) {\n+\t\tsuper(\"Adding '\" + bundle + \"' to \" + project + \" \" + pathtype);\n+\t\tthis.fqn = fqn;\n+\t\tthis.bundle = bundle;\n+\t\tthis.relevance = relevance;\n+\t\tthis.context = context;\n+\t\tthis.project = project;\n+\t\tthis.pathtype = pathtype;\n+\t\tthis.displayString = Strings.format(\"Add %s %s to %s (found %s)\", bundle.getBsn(), bundle.getShortVersion(),\n+\t\t\tpathtype, fqn);\n+\t}\n+\n+\t@Override\n+\tpublic void apply(org.eclipse.jface.text.IDocument document) {\n+\t\tschedule();\n+\t}\n+\n+\t/**\n+\t * @see org.eclipse.jface.text.contentassist.ICompletionProposal#getSelection(org.eclipse.jface.text.IDocument)\n+\t */\n+\t@Override\n+\tpublic Point getSelection(org.eclipse.jface.text.IDocument document) {\n+\t\treturn new Point(context.getSelectionOffset(), context.getSelectionLength());\n+\t}\n+\n+\t@Override\n+\tpublic String getAdditionalProposalInfo() {\n+\t\treturn displayString;\n+\t}\n+\n+\t@Override\n+\tpublic String getDisplayString() {\n+\t\treturn displayString;\n+\t}\n+\n+\t@Override\n+\tpublic Image getImage() {\n+\t\treturn Icons.image(\"bundle\");\n+\t}\n+\n+\t@Override\n+\tpublic IContextInformation getContextInformation() {\n+\t\treturn new IContextInformation() {\n+\n+\t\t\t@Override\n+\t\t\tpublic String getContextDisplayString() {\n+\t\t\t\treturn \"Added \" + bundle + \" to build path\";\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Image getImage() {\n+\t\t\t\treturn Icons.image(\"bundle\");\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic String getInformationDisplayString() {\n+\t\t\t\treturn \"Added \" + bundle + \" to build path - info\";\n+\t\t\t}\n+\n+\t\t};\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc0NjM2NQ==", "bodyText": "Error message needs to reflect whether the attempt was made to update the -buildpath or -testpath.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394746365", "createdAt": "2020-03-19T01:49:46Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/AddBundleCompletionProposal.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import org.bndtools.core.ui.icons.Icons;\n+import org.eclipse.core.resources.WorkspaceJob;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jface.text.contentassist.IContextInformation;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.graphics.Point;\n+\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.model.BndEditModel;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.bnd.osgi.Constants;\n+import aQute.bnd.osgi.Descriptors;\n+import aQute.lib.strings.Strings;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+class AddBundleCompletionProposal extends WorkspaceJob implements IJavaCompletionProposal {\n+\n+\tfinal BundleId\t\t\t\tbundle;\n+\tfinal String\t\t\t\tdisplayString;\n+\tfinal int\t\t\t\t\trelevance;\n+\tfinal IInvocationContext\tcontext;\n+\tfinal Project\t\t\t\tproject;\n+\tfinal String\t\t\t\tpathtype;\n+\tfinal String\t\t\t\tfqn;\n+\n+\tpublic AddBundleCompletionProposal(String fqn, BundleId bundle, int relevance, IInvocationContext context,\n+\t\tProject project, String pathtype) {\n+\t\tsuper(\"Adding '\" + bundle + \"' to \" + project + \" \" + pathtype);\n+\t\tthis.fqn = fqn;\n+\t\tthis.bundle = bundle;\n+\t\tthis.relevance = relevance;\n+\t\tthis.context = context;\n+\t\tthis.project = project;\n+\t\tthis.pathtype = pathtype;\n+\t\tthis.displayString = Strings.format(\"Add %s %s to %s (found %s)\", bundle.getBsn(), bundle.getShortVersion(),\n+\t\t\tpathtype, fqn);\n+\t}\n+\n+\t@Override\n+\tpublic void apply(org.eclipse.jface.text.IDocument document) {\n+\t\tschedule();\n+\t}\n+\n+\t/**\n+\t * @see org.eclipse.jface.text.contentassist.ICompletionProposal#getSelection(org.eclipse.jface.text.IDocument)\n+\t */\n+\t@Override\n+\tpublic Point getSelection(org.eclipse.jface.text.IDocument document) {\n+\t\treturn new Point(context.getSelectionOffset(), context.getSelectionLength());\n+\t}\n+\n+\t@Override\n+\tpublic String getAdditionalProposalInfo() {\n+\t\treturn displayString;\n+\t}\n+\n+\t@Override\n+\tpublic String getDisplayString() {\n+\t\treturn displayString;\n+\t}\n+\n+\t@Override\n+\tpublic Image getImage() {\n+\t\treturn Icons.image(\"bundle\");\n+\t}\n+\n+\t@Override\n+\tpublic IContextInformation getContextInformation() {\n+\t\treturn new IContextInformation() {\n+\n+\t\t\t@Override\n+\t\t\tpublic String getContextDisplayString() {\n+\t\t\t\treturn \"Added \" + bundle + \" to build path\";\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Image getImage() {\n+\t\t\t\treturn Icons.image(\"bundle\");\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic String getInformationDisplayString() {\n+\t\t\t\treturn \"Added \" + bundle + \" to build path - info\";\n+\t\t\t}\n+\n+\t\t};\n+\t}\n+\n+\t@Override\n+\tpublic int getRelevance() {\n+\t\treturn relevance;\n+\t}\n+\n+\t@Override\n+\tpublic IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {\n+\t\ttry {\n+\t\t\tIStatus status = Central.bndCall(() -> {\n+\t\t\t\tBndEditModel model = new BndEditModel(project);\n+\t\t\t\tmodel.load();\n+\n+\t\t\t\tswitch (pathtype) {\n+\t\t\t\t\tcase Constants.TESTPATH :\n+\t\t\t\t\t\tmodel.addPath(bundle, Constants.TESTPATH);\n+\t\t\t\t\t\tbreak;\n+\n+\t\t\t\t\tcase Constants.BUILDPATH :\n+\t\t\t\t\tdefault :\n+\t\t\t\t\t\tmodel.addPath(bundle, Constants.BUILDPATH);\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tmodel.saveChanges();\n+\t\t\t\tCentral.refreshFile(project.getPropertiesFile());\n+\t\t\t\treturn Status.OK_STATUS;\n+\t\t\t});\n+\n+\t\t\tString[] determine = Descriptors.determine(fqn)\n+\t\t\t\t.unwrap();\n+\n+\t\t\tassert determine[0] != null : \"We must have found a package\";\n+\n+\t\t\tif (determine[1] == null) {\n+\t\t\t\tcontext.getCompilationUnit()\n+\t\t\t\t\t.createImport(fqn + \".*\", null, monitor);\n+\t\t\t} else {\n+\t\t\t\tcontext.getCompilationUnit()\n+\t\t\t\t\t.createImport(fqn, null, monitor);\n+\t\t\t}\n+\t\t\treturn status;\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new CoreException(\n+\t\t\t\tnew Status(IStatus.ERROR, Plugin.PLUGIN_ID, \"Failed to add bundle to -buildpath\", e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc0NzIwMw==", "bodyText": "The old quick fix processor made use of the monitor when saving. Admittedly, this is likely to be a fast operation. However, more generally, perhaps we should be considering a more standard way of interfacing IProgressMonitor with Central.bndCall(). This could have other usability benefits in other parts of Bndtools (I'm thinking of resolving, for example, which can sometimes take a while without much visual feedback on progress).", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394747203", "createdAt": "2020-03-19T01:53:31Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/AddBundleCompletionProposal.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import org.bndtools.core.ui.icons.Icons;\n+import org.eclipse.core.resources.WorkspaceJob;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jface.text.contentassist.IContextInformation;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.graphics.Point;\n+\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.model.BndEditModel;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.bnd.osgi.Constants;\n+import aQute.bnd.osgi.Descriptors;\n+import aQute.lib.strings.Strings;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+class AddBundleCompletionProposal extends WorkspaceJob implements IJavaCompletionProposal {\n+\n+\tfinal BundleId\t\t\t\tbundle;\n+\tfinal String\t\t\t\tdisplayString;\n+\tfinal int\t\t\t\t\trelevance;\n+\tfinal IInvocationContext\tcontext;\n+\tfinal Project\t\t\t\tproject;\n+\tfinal String\t\t\t\tpathtype;\n+\tfinal String\t\t\t\tfqn;\n+\n+\tpublic AddBundleCompletionProposal(String fqn, BundleId bundle, int relevance, IInvocationContext context,\n+\t\tProject project, String pathtype) {\n+\t\tsuper(\"Adding '\" + bundle + \"' to \" + project + \" \" + pathtype);\n+\t\tthis.fqn = fqn;\n+\t\tthis.bundle = bundle;\n+\t\tthis.relevance = relevance;\n+\t\tthis.context = context;\n+\t\tthis.project = project;\n+\t\tthis.pathtype = pathtype;\n+\t\tthis.displayString = Strings.format(\"Add %s %s to %s (found %s)\", bundle.getBsn(), bundle.getShortVersion(),\n+\t\t\tpathtype, fqn);\n+\t}\n+\n+\t@Override\n+\tpublic void apply(org.eclipse.jface.text.IDocument document) {\n+\t\tschedule();\n+\t}\n+\n+\t/**\n+\t * @see org.eclipse.jface.text.contentassist.ICompletionProposal#getSelection(org.eclipse.jface.text.IDocument)\n+\t */\n+\t@Override\n+\tpublic Point getSelection(org.eclipse.jface.text.IDocument document) {\n+\t\treturn new Point(context.getSelectionOffset(), context.getSelectionLength());\n+\t}\n+\n+\t@Override\n+\tpublic String getAdditionalProposalInfo() {\n+\t\treturn displayString;\n+\t}\n+\n+\t@Override\n+\tpublic String getDisplayString() {\n+\t\treturn displayString;\n+\t}\n+\n+\t@Override\n+\tpublic Image getImage() {\n+\t\treturn Icons.image(\"bundle\");\n+\t}\n+\n+\t@Override\n+\tpublic IContextInformation getContextInformation() {\n+\t\treturn new IContextInformation() {\n+\n+\t\t\t@Override\n+\t\t\tpublic String getContextDisplayString() {\n+\t\t\t\treturn \"Added \" + bundle + \" to build path\";\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Image getImage() {\n+\t\t\t\treturn Icons.image(\"bundle\");\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic String getInformationDisplayString() {\n+\t\t\t\treturn \"Added \" + bundle + \" to build path - info\";\n+\t\t\t}\n+\n+\t\t};\n+\t}\n+\n+\t@Override\n+\tpublic int getRelevance() {\n+\t\treturn relevance;\n+\t}\n+\n+\t@Override\n+\tpublic IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {\n+\t\ttry {\n+\t\t\tIStatus status = Central.bndCall(() -> {\n+\t\t\t\tBndEditModel model = new BndEditModel(project);\n+\t\t\t\tmodel.load();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc1MTk4MQ==", "bodyText": "For the common case where we haven't found any proposals, perhaps we should return null rather than an empty array. Saves the overhead of the extra object allocations. Relatively small optimisation though.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394751981", "createdAt": "2020-03-19T02:12:01Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.compiler.IProblem;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.ImportDeclaration;\n+import org.eclipse.jdt.core.dom.Name;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jdt.ui.text.java.IProblemLocation;\n+import org.eclipse.jdt.ui.text.java.IQuickFixProcessor;\n+\n+import aQute.bnd.build.Container;\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.Workspace;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.lib.exceptions.Exceptions;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+public class BuildpathQuickfixProcessor implements IQuickFixProcessor {\n+\n+\t@Override\n+\tpublic boolean hasCorrections(ICompilationUnit unit, int problemId) {\n+\t\tswitch (problemId) {\n+\t\t\tcase IProblem.IsClassPathCorrect :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.ImportNotFound :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.UndefinedType :\n+\t\t\t\treturn true;\n+\t\t\tdefault :\n+\t\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IJavaCompletionProposal[] getCorrections(IInvocationContext context, IProblemLocation[] locations)\n+\t\tthrows CoreException {\n+\t\ttry {\n+\t\t\tList<IJavaCompletionProposal> proposals = new ArrayList<>();\n+\n+\t\t\tICompilationUnit compUnit = context.getCompilationUnit();\n+\t\t\tIJavaProject java = compUnit.getJavaProject();\n+\t\t\tif (java == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tProject project = Central.getProject(java.getProject());\n+\t\t\tif (project == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tboolean test = isInDir(project.getTestSrc(), compUnit.getResource());\n+\t\t\tWorkspace workspace = project.getWorkspace();\n+\n+\t\t\tfor (IProblemLocation location : locations) {\n+\n+\t\t\t\tif (!hasCorrections(context.getCompilationUnit(), location.getProblemId()))\n+\t\t\t\t\treturn null;\n+\n+\t\t\t\tString partialClassName = getPartialClassName(location.getCoveringNode(context.getASTRoot()));\n+\t\t\t\tif (partialClassName == null && location.getProblemArguments().length > 0)\n+\t\t\t\t\tpartialClassName = location.getProblemArguments()[0];\n+\n+\t\t\t\tif (partialClassName == null)\n+\t\t\t\t\tcontinue;\n+\n+\t\t\t\tMap<String, List<BundleId>> result = workspace.search(partialClassName)\n+\t\t\t\t\t.orElseThrow(s -> new CoreException(new Status(IStatus.ERROR, Plugin.PLUGIN_ID, s)));\n+\n+\t\t\t\tSet<BundleId> buildpath = getBundleIds(project.getBuildpath());\n+\t\t\t\tSet<BundleId> testpath = test ? getBundleIds(project.getTestpath()) : Collections.emptySet();\n+\n+\t\t\t\tresult.entrySet()\n+\t\t\t\t\t.forEach(e -> {\n+\t\t\t\t\t\tfor (BundleId id : e.getValue()) {\n+\n+\t\t\t\t\t\t\tif (test && !testpath.contains(id) && !buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-testpath\"));\n+\n+\t\t\t\t\t\t\tif (!buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-buildpath\"));\n+\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t}\n+\t\t\treturn proposals.toArray(new IJavaCompletionProposal[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc1MjAwNw==", "bodyText": "Because this is the entry point from Eclipse into the quick fix processor, maybe it would be better to wrap this in a CoreException rather than allowing it to propagate up? I'm not 100% sure on Eclipse best practice here, but that seems to be what we've done elsewhere in Bndtools.", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394752007", "createdAt": "2020-03-19T02:12:06Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/src/org/bndtools/core/editors/quickfix/BuildpathQuickfixProcessor.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.bndtools.core.editors.quickfix;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.compiler.IProblem;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.ImportDeclaration;\n+import org.eclipse.jdt.core.dom.Name;\n+import org.eclipse.jdt.ui.text.java.IInvocationContext;\n+import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;\n+import org.eclipse.jdt.ui.text.java.IProblemLocation;\n+import org.eclipse.jdt.ui.text.java.IQuickFixProcessor;\n+\n+import aQute.bnd.build.Container;\n+import aQute.bnd.build.Project;\n+import aQute.bnd.build.Workspace;\n+import aQute.bnd.osgi.BundleId;\n+import aQute.lib.exceptions.Exceptions;\n+import bndtools.Plugin;\n+import bndtools.central.Central;\n+\n+public class BuildpathQuickfixProcessor implements IQuickFixProcessor {\n+\n+\t@Override\n+\tpublic boolean hasCorrections(ICompilationUnit unit, int problemId) {\n+\t\tswitch (problemId) {\n+\t\t\tcase IProblem.IsClassPathCorrect :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.ImportNotFound :\n+\t\t\t\treturn true;\n+\t\t\tcase IProblem.UndefinedType :\n+\t\t\t\treturn true;\n+\t\t\tdefault :\n+\t\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IJavaCompletionProposal[] getCorrections(IInvocationContext context, IProblemLocation[] locations)\n+\t\tthrows CoreException {\n+\t\ttry {\n+\t\t\tList<IJavaCompletionProposal> proposals = new ArrayList<>();\n+\n+\t\t\tICompilationUnit compUnit = context.getCompilationUnit();\n+\t\t\tIJavaProject java = compUnit.getJavaProject();\n+\t\t\tif (java == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tProject project = Central.getProject(java.getProject());\n+\t\t\tif (project == null)\n+\t\t\t\treturn null;\n+\n+\t\t\tboolean test = isInDir(project.getTestSrc(), compUnit.getResource());\n+\t\t\tWorkspace workspace = project.getWorkspace();\n+\n+\t\t\tfor (IProblemLocation location : locations) {\n+\n+\t\t\t\tif (!hasCorrections(context.getCompilationUnit(), location.getProblemId()))\n+\t\t\t\t\treturn null;\n+\n+\t\t\t\tString partialClassName = getPartialClassName(location.getCoveringNode(context.getASTRoot()));\n+\t\t\t\tif (partialClassName == null && location.getProblemArguments().length > 0)\n+\t\t\t\t\tpartialClassName = location.getProblemArguments()[0];\n+\n+\t\t\t\tif (partialClassName == null)\n+\t\t\t\t\tcontinue;\n+\n+\t\t\t\tMap<String, List<BundleId>> result = workspace.search(partialClassName)\n+\t\t\t\t\t.orElseThrow(s -> new CoreException(new Status(IStatus.ERROR, Plugin.PLUGIN_ID, s)));\n+\n+\t\t\t\tSet<BundleId> buildpath = getBundleIds(project.getBuildpath());\n+\t\t\t\tSet<BundleId> testpath = test ? getBundleIds(project.getTestpath()) : Collections.emptySet();\n+\n+\t\t\t\tresult.entrySet()\n+\t\t\t\t\t.forEach(e -> {\n+\t\t\t\t\t\tfor (BundleId id : e.getValue()) {\n+\n+\t\t\t\t\t\t\tif (test && !testpath.contains(id) && !buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-testpath\"));\n+\n+\t\t\t\t\t\t\tif (!buildpath.contains(id))\n+\t\t\t\t\t\t\t\tproposals.add(propose(e.getKey(), id, context, location, project, \"-buildpath\"));\n+\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t}\n+\t\t\treturn proposals.toArray(new IJavaCompletionProposal[0]);\n+\t\t} catch (Exception e) {\n+\t\t\tthrow Exceptions.duck(e);\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc1NDY5Mg==", "bodyText": "I don't think it's accurate to say that \"the majority of the code is tested in bnd\". I'm sure that all of the searching code is tested in Bnd - but searching is only half of the quick fix processor's responsibility. The other thing that the quick fix processor has to do (equally important) is understand Eclipse's error message formats so that it knows what to search for and can translate that into a form that Bnd understands, and then conversely take Bnd's response and translate that into a form that Eclipse can use. The first part in particular is a non-trivial operation and accounted for a significant chunk of the original quick-fix code.\nThe original ImportPackageQuickFixProcessorTest was close to a full end-to-end test - it used actual source code with errors which could be quick-fixed, then it used Eclipse's compiler to compile these into an actual AST, and finally it created actual IProblemLocation objects (which were built based on observed values determined by experimentation on a live Eclipse instance). It passed these in to getCompletions() to ensure that the correct set of ICompletionProposals was created.\nIn order to ensure that we haven't had any regressions, we should do something similar. The old test should form the basis, as I know it had pretty good coverage of lots of weird corner cases. Your code is admittedly a lot simpler, but I'm not sure if this simplification has come at the expense of us not handling some of these weird corner cases.\nThe more I think about this as I type, the more I am of the opinion that the best way forward for me to review your changes will be to port ImportPackageQuickFixProcessor to BuildpathQuickFixProcessorTest. For starters, I can't remember all of the weird corner cases, and even if I could testing them all manually would be onerous. If I instead go to the effort of porting the test, then we have the added benefit of a solid regression test moving forward so that others can make changes without fear of breaking existing functionality (that is, after all, why I went to the effort of writing the original regression test in the first place!)", "url": "https://github.com/bndtools/bnd/pull/3833#discussion_r394754692", "createdAt": "2020-03-19T02:22:28Z", "author": {"login": "kriegfrj"}, "path": "bndtools.core/test/org/bndtools/core/editors/BuildpathQuickFixProcessorTest.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.bndtools.core.editors;\n+\n+import org.junit.Test;\n+\n+public class BuildpathQuickFixProcessorTest {\n+\n+\t@Test\n+\tpublic void testBasic() {\n+\t\t// not sure how to test this\n+\t\t// the majority of the code is tested in bnd\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9367a4eeda9f618ab1338bcb280db0793bce14de"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53707f3d69c72a2070770c59821d56637e93339a", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/53707f3d69c72a2070770c59821d56637e93339a", "committedDate": "2020-03-19T14:06:14Z", "message": "[review] After Fr. Krieg review\n\n- More careful with imports\n- Use bndCall with monitor\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acac272b9e6f00aff9a5c6803d106a053ef5e268", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/acac272b9e6f00aff9a5c6803d106a053ef5e268", "committedDate": "2020-03-19T16:47:50Z", "message": "rename \n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba0e3cb4c4ce89e91fdf44742a1960b2e3496198", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/ba0e3cb4c4ce89e91fdf44742a1960b2e3496198", "committedDate": "2020-03-19T15:58:51Z", "message": "rename \n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}, "afterCommit": {"oid": "acac272b9e6f00aff9a5c6803d106a053ef5e268", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/acac272b9e6f00aff9a5c6803d106a053ef5e268", "committedDate": "2020-03-19T16:47:50Z", "message": "rename \n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6c212ea591540b554505352f823b85a17b181a3", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/a6c212ea591540b554505352f823b85a17b181a3", "committedDate": "2020-03-20T08:04:46Z", "message": "Rename is harder than I thought\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3607060ecc74b18dfbb803272472ae4caa987c9", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/a3607060ecc74b18dfbb803272472ae4caa987c9", "committedDate": "2020-03-20T08:05:27Z", "message": "Return null on no proposals.\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2555a5f0b0f1552e38d1760260332f61883c48e9", "author": {"user": {"login": "pkriens", "name": "Peter Kriens"}}, "url": "https://github.com/bndtools/bnd/commit/2555a5f0b0f1552e38d1760260332f61883c48e9", "committedDate": "2020-03-20T08:51:00Z", "message": "[libg] Doc\n\n- Added some more odd to the new Lazy & IntCounter\n- A few more utility methods in IntCounter\n- Cleaned ip the overflow handling\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3004, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}