{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNDU4MTcw", "number": 3814, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoyNzowNVrODkVVSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjozNzowOVrODkVlYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDI0ODQyOnYy", "diffSide": "RIGHT", "path": "biz.aQute.launcher/src/aQute/launcher/Launcher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoyNzowNVrOFwmI_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjo1NjoyNVrOFwnR7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwMDg2Mw==", "bodyText": "It seems wrong to always try connect first. Equinox and Felix will eventually support connect and thus will have the service for connect. So this code will then always assume connect mode rather than normal OSGi framework mode. I think using connect must be some option on -runfw or some other bndrun file instruction.", "url": "https://github.com/bndtools/bnd/pull/3814#discussion_r386500863", "createdAt": "2020-03-02T16:27:05Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.launcher/src/aQute/launcher/Launcher.java", "diffHunk": "@@ -1122,37 +1161,30 @@ public void run() {\n \t\t}\n \n \t\tFramework systemBundle;\n-\n \t\tif (parms.services) {\n \t\t\ttrace(\"using META-INF/services\");\n \t\t\t// 3) framework = null, lookup in META-INF/services\n \n \t\t\tClassLoader loader = getClass().getClassLoader();\n \n-\t\t\t// 3) Lookup in META-INF/services\n-\t\t\tList<String> implementations = getMetaInfServices(loader, FrameworkFactory.class.getName());\n-\n-\t\t\tif (implementations.isEmpty())\n-\t\t\t\terror(\"Found no fw implementation\");\n-\t\t\tif (implementations.size() > 1)\n-\t\t\t\terror(\"Found more than one framework implementations: %s\", implementations);\n-\n-\t\t\tString implementation = implementations.get(0);\n-\n-\t\t\tClass<?> clazz = loader.loadClass(implementation);\n-\t\t\tFrameworkFactory factory = (FrameworkFactory) newInstance(clazz);\n-\t\t\ttrace(\"Framework factory %s\", factory);\n \t\t\t@SuppressWarnings({\n \t\t\t\t\"unchecked\", \"rawtypes\"\n \t\t\t})\n \t\t\tMap<String, String> configuration = (Map) p;\n-\t\t\tsystemBundle = factory.newFramework(configuration);\n-\t\t\ttrace(\"framework instance %s\", systemBundle);\n+\n+\t\t\tsystemBundle = createConnect(loader, configuration);\n+\t\t\tif (systemBundle == null) {\n+\t\t\t\tsystemBundle = createClassic(systemBundle, loader, configuration);\n+\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68d01f31d2c75d2c437cddf21d9f59e25d57978"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUxMDI2Mg==", "bodyText": "Nope, it only uses connect when it can find a Module Connector. Why would you put a Module Connector on the -runpath when you do not intend to use it?", "url": "https://github.com/bndtools/bnd/pull/3814#discussion_r386510262", "createdAt": "2020-03-02T16:41:40Z", "author": {"login": "pkriens"}, "path": "biz.aQute.launcher/src/aQute/launcher/Launcher.java", "diffHunk": "@@ -1122,37 +1161,30 @@ public void run() {\n \t\t}\n \n \t\tFramework systemBundle;\n-\n \t\tif (parms.services) {\n \t\t\ttrace(\"using META-INF/services\");\n \t\t\t// 3) framework = null, lookup in META-INF/services\n \n \t\t\tClassLoader loader = getClass().getClassLoader();\n \n-\t\t\t// 3) Lookup in META-INF/services\n-\t\t\tList<String> implementations = getMetaInfServices(loader, FrameworkFactory.class.getName());\n-\n-\t\t\tif (implementations.isEmpty())\n-\t\t\t\terror(\"Found no fw implementation\");\n-\t\t\tif (implementations.size() > 1)\n-\t\t\t\terror(\"Found more than one framework implementations: %s\", implementations);\n-\n-\t\t\tString implementation = implementations.get(0);\n-\n-\t\t\tClass<?> clazz = loader.loadClass(implementation);\n-\t\t\tFrameworkFactory factory = (FrameworkFactory) newInstance(clazz);\n-\t\t\ttrace(\"Framework factory %s\", factory);\n \t\t\t@SuppressWarnings({\n \t\t\t\t\"unchecked\", \"rawtypes\"\n \t\t\t})\n \t\t\tMap<String, String> configuration = (Map) p;\n-\t\t\tsystemBundle = factory.newFramework(configuration);\n-\t\t\ttrace(\"framework instance %s\", systemBundle);\n+\n+\t\t\tsystemBundle = createConnect(loader, configuration);\n+\t\t\tif (systemBundle == null) {\n+\t\t\t\tsystemBundle = createClassic(systemBundle, loader, configuration);\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwMDg2Mw=="}, "originalCommit": {"oid": "f68d01f31d2c75d2c437cddf21d9f59e25d57978"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUxOTUzMg==", "bodyText": "We should then doc this to make sure no one is surprised that a thing on runpath changes the launcher behavior.", "url": "https://github.com/bndtools/bnd/pull/3814#discussion_r386519532", "createdAt": "2020-03-02T16:56:25Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.launcher/src/aQute/launcher/Launcher.java", "diffHunk": "@@ -1122,37 +1161,30 @@ public void run() {\n \t\t}\n \n \t\tFramework systemBundle;\n-\n \t\tif (parms.services) {\n \t\t\ttrace(\"using META-INF/services\");\n \t\t\t// 3) framework = null, lookup in META-INF/services\n \n \t\t\tClassLoader loader = getClass().getClassLoader();\n \n-\t\t\t// 3) Lookup in META-INF/services\n-\t\t\tList<String> implementations = getMetaInfServices(loader, FrameworkFactory.class.getName());\n-\n-\t\t\tif (implementations.isEmpty())\n-\t\t\t\terror(\"Found no fw implementation\");\n-\t\t\tif (implementations.size() > 1)\n-\t\t\t\terror(\"Found more than one framework implementations: %s\", implementations);\n-\n-\t\t\tString implementation = implementations.get(0);\n-\n-\t\t\tClass<?> clazz = loader.loadClass(implementation);\n-\t\t\tFrameworkFactory factory = (FrameworkFactory) newInstance(clazz);\n-\t\t\ttrace(\"Framework factory %s\", factory);\n \t\t\t@SuppressWarnings({\n \t\t\t\t\"unchecked\", \"rawtypes\"\n \t\t\t})\n \t\t\tMap<String, String> configuration = (Map) p;\n-\t\t\tsystemBundle = factory.newFramework(configuration);\n-\t\t\ttrace(\"framework instance %s\", systemBundle);\n+\n+\t\t\tsystemBundle = createConnect(loader, configuration);\n+\t\t\tif (systemBundle == null) {\n+\t\t\t\tsystemBundle = createClassic(systemBundle, loader, configuration);\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwMDg2Mw=="}, "originalCommit": {"oid": "f68d01f31d2c75d2c437cddf21d9f59e25d57978"}, "originalPosition": 234}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDI2MDUxOnYy", "diffSide": "RIGHT", "path": "biz.aQute.launcher/src/aQute/launcher/Launcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjozMDowN1rOFwmQrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjo0MzowM1rOFwmxDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwMjgyOA==", "bodyText": "How do we test this actually works? We have tests now for normal OSGi framework launching (both explicit and implicit tests).", "url": "https://github.com/bndtools/bnd/pull/3814#discussion_r386502828", "createdAt": "2020-03-02T16:30:07Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.launcher/src/aQute/launcher/Launcher.java", "diffHunk": "@@ -1175,38 +1207,58 @@ public void run() {\n \t\treturn systemBundle;\n \t}\n \n-\tprotected void deleteFiles(File wd) {\n-\t\tIO.delete(wd);\n+\tprivate Framework createClassic(Framework systemBundle, ClassLoader loader, Map<String, String> configuration) {\n+\t\tFrameworkFactory factory = getMetaInfService(loader, FrameworkFactory.class);\n+\t\tif (factory != null) {\n+\t\t\tsystemBundle = factory.newFramework(configuration);\n+\t\t\ttrace(\"framework instance %s\", systemBundle);\n+\t\t} else\n+\t\t\ttrace(\"framework factory not found\");\n+\t\treturn systemBundle;\n \t}\n \n-\t/**\n-\t * Try to get the stupid service interface ...\n-\t *\n-\t * @throws IOException\n+\t/*\n+\t * Attempts to create an OSGi Connect. This allows a third party bundle on\n+\t * the -runpath to control the class loading strategy\n+\t * @param loader the class loader of this launcher\n+\t * @param configuration the framework configuration\n+\t * @return null or a connect framework\n \t */\n-\tprivate List<String> getMetaInfServices(ClassLoader loader, String factory) throws IOException {\n-\t\tif (loader == null)\n-\t\t\tloader = getClass().getClassLoader();\n-\n-\t\tEnumeration<URL> e = loader.getResources(\"META-INF/services/\" + factory);\n-\t\tList<String> factories = new ArrayList<>();\n-\n-\t\twhile (e.hasMoreElements()) {\n-\t\t\tURL url = e.nextElement();\n-\t\t\ttrace(\"found META-INF/services in %s\", url);\n-\n-\t\t\ttry (BufferedReader rdr = IO.reader(url.openStream(), UTF_8)) {\n-\t\t\t\tString line;\n-\t\t\t\twhile ((line = rdr.readLine()) != null) {\n-\t\t\t\t\ttrace(\"%s\", line);\n-\t\t\t\t\tline = line.trim();\n-\t\t\t\t\tif (!line.startsWith(\"#\") && line.length() > 0) {\n-\t\t\t\t\t\tfactories.add(line);\n-\t\t\t\t\t}\n+\tprivate Framework createConnect(ClassLoader loader, Map<String, String> configuration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68d01f31d2c75d2c437cddf21d9f59e25d57978"}, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUxMTExOA==", "bodyText": "I want it in there so we can experiment. Once the frameworks are available we can have tests. You can only activate the code by putting a Module Connector services on your -runpath, which seems a good safeguard this is not activated accidentally..", "url": "https://github.com/bndtools/bnd/pull/3814#discussion_r386511118", "createdAt": "2020-03-02T16:43:03Z", "author": {"login": "pkriens"}, "path": "biz.aQute.launcher/src/aQute/launcher/Launcher.java", "diffHunk": "@@ -1175,38 +1207,58 @@ public void run() {\n \t\treturn systemBundle;\n \t}\n \n-\tprotected void deleteFiles(File wd) {\n-\t\tIO.delete(wd);\n+\tprivate Framework createClassic(Framework systemBundle, ClassLoader loader, Map<String, String> configuration) {\n+\t\tFrameworkFactory factory = getMetaInfService(loader, FrameworkFactory.class);\n+\t\tif (factory != null) {\n+\t\t\tsystemBundle = factory.newFramework(configuration);\n+\t\t\ttrace(\"framework instance %s\", systemBundle);\n+\t\t} else\n+\t\t\ttrace(\"framework factory not found\");\n+\t\treturn systemBundle;\n \t}\n \n-\t/**\n-\t * Try to get the stupid service interface ...\n-\t *\n-\t * @throws IOException\n+\t/*\n+\t * Attempts to create an OSGi Connect. This allows a third party bundle on\n+\t * the -runpath to control the class loading strategy\n+\t * @param loader the class loader of this launcher\n+\t * @param configuration the framework configuration\n+\t * @return null or a connect framework\n \t */\n-\tprivate List<String> getMetaInfServices(ClassLoader loader, String factory) throws IOException {\n-\t\tif (loader == null)\n-\t\t\tloader = getClass().getClassLoader();\n-\n-\t\tEnumeration<URL> e = loader.getResources(\"META-INF/services/\" + factory);\n-\t\tList<String> factories = new ArrayList<>();\n-\n-\t\twhile (e.hasMoreElements()) {\n-\t\t\tURL url = e.nextElement();\n-\t\t\ttrace(\"found META-INF/services in %s\", url);\n-\n-\t\t\ttry (BufferedReader rdr = IO.reader(url.openStream(), UTF_8)) {\n-\t\t\t\tString line;\n-\t\t\t\twhile ((line = rdr.readLine()) != null) {\n-\t\t\t\t\ttrace(\"%s\", line);\n-\t\t\t\t\tline = line.trim();\n-\t\t\t\t\tif (!line.startsWith(\"#\") && line.length() > 0) {\n-\t\t\t\t\t\tfactories.add(line);\n-\t\t\t\t\t}\n+\tprivate Framework createConnect(ClassLoader loader, Map<String, String> configuration) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwMjgyOA=="}, "originalCommit": {"oid": "f68d01f31d2c75d2c437cddf21d9f59e25d57978"}, "originalPosition": 293}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDI3MTM5OnYy", "diffSide": "RIGHT", "path": "biz.aQute.launcher/src/aQute/launcher/Launcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjozMjo0MlrOFwmXfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjozMjo0MlrOFwmXfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwNDU3Mg==", "bodyText": "We have propertiesOrNull but not activatorOrNull? I am not sure I like the OrNull variable name suffix, but we should at least be consistent.", "url": "https://github.com/bndtools/bnd/pull/3814#discussion_r386504572", "createdAt": "2020-03-02T16:32:42Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.launcher/src/aQute/launcher/Launcher.java", "diffHunk": "@@ -169,6 +176,32 @@ public static int run(String args[]) throws Throwable {\n \t\treturn target.launch(args);\n \t}\n \n+\t/**\n+\t * Launch with optional properties & optional bundle activator. If the\n+\t * properties are null, they are attempted to be read from\n+\t * `launcher.properties`.\n+\t *\n+\t * @param args\n+\t * @param propertiesOrNull the properties or null\n+\t * @param activator null, or a Bundle Activator that will be called back\n+\t *            before the bundles are started, see\n+\t *            {@link EmbeddedActivatorPhase#BEFORE_BUNDLES_START}.\n+\t * @return the exit code\n+\t * @throws Throwable\n+\t */\n+\tpublic static int launch(String[] args, Properties propertiesOrNull, BundleActivator activator)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68d01f31d2c75d2c437cddf21d9f59e25d57978"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDI4OTYyOnYy", "diffSide": "RIGHT", "path": "biz.aQute.launcher/src/org/osgi/framework/connect/ConnectContent.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjozNzowOVrOFwmi3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzowNTozNlrOFwnoTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwNzQ4NA==", "bodyText": "I think it is wrong for us to have a copy of the package's source code in our repo. We can easily miss important changes as the OSGi spec changes in development. We should instead reference the OSGi snapshot jar to access the package. https://oss.sonatype.org/content/repositories/snapshots/org/osgi/org.osgi.framework/1.10.0-SNAPSHOT/", "url": "https://github.com/bndtools/bnd/pull/3814#discussion_r386507484", "createdAt": "2020-03-02T16:37:09Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.launcher/src/org/osgi/framework/connect/ConnectContent.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) OSGi Alliance (2019). All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.osgi.framework.connect;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.Optional;\n+public interface ConnectContent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68d01f31d2c75d2c437cddf21d9f59e25d57978"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUxMjA1Ng==", "bodyText": "I wanted to placate you :-) I talked to Thomas and Karl and they seemed rather anxious in this area. But if we can import this snapshot, that would be great.", "url": "https://github.com/bndtools/bnd/pull/3814#discussion_r386512056", "createdAt": "2020-03-02T16:44:29Z", "author": {"login": "pkriens"}, "path": "biz.aQute.launcher/src/org/osgi/framework/connect/ConnectContent.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) OSGi Alliance (2019). All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.osgi.framework.connect;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.Optional;\n+public interface ConnectContent {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwNzQ4NA=="}, "originalCommit": {"oid": "f68d01f31d2c75d2c437cddf21d9f59e25d57978"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUxMzQxMQ==", "bodyText": "Hmm, but then we take all Framework packages from the snapshot?", "url": "https://github.com/bndtools/bnd/pull/3814#discussion_r386513411", "createdAt": "2020-03-02T16:46:44Z", "author": {"login": "pkriens"}, "path": "biz.aQute.launcher/src/org/osgi/framework/connect/ConnectContent.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) OSGi Alliance (2019). All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.osgi.framework.connect;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.Optional;\n+public interface ConnectContent {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwNzQ4NA=="}, "originalCommit": {"oid": "f68d01f31d2c75d2c437cddf21d9f59e25d57978"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUxODUxOA==", "bodyText": "If we have the snapshot jar following the released jar on the -buildpath, and we use -split-package:=first for the package instruction, we will get the released packages except for connect which is not in the released jar, no?", "url": "https://github.com/bndtools/bnd/pull/3814#discussion_r386518518", "createdAt": "2020-03-02T16:54:51Z", "author": {"login": "bjhargrave"}, "path": "biz.aQute.launcher/src/org/osgi/framework/connect/ConnectContent.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) OSGi Alliance (2019). All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.osgi.framework.connect;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.Optional;\n+public interface ConnectContent {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwNzQ4NA=="}, "originalCommit": {"oid": "f68d01f31d2c75d2c437cddf21d9f59e25d57978"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNTI2Mw==", "bodyText": "It is only used to build, the API is not ending up in any binary so split package is not needed. I made it the second entry so this is perfect! Much better than embedded these sources.", "url": "https://github.com/bndtools/bnd/pull/3814#discussion_r386525263", "createdAt": "2020-03-02T17:05:36Z", "author": {"login": "pkriens"}, "path": "biz.aQute.launcher/src/org/osgi/framework/connect/ConnectContent.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) OSGi Alliance (2019). All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.osgi.framework.connect;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.Optional;\n+public interface ConnectContent {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwNzQ4NA=="}, "originalCommit": {"oid": "f68d01f31d2c75d2c437cddf21d9f59e25d57978"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1503, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}