{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NDc2MDM1", "number": 1477, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMjo0ODo1MVrOE3CSIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjoxNDoxOFrOE3EwZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTQ0NTQ1OnYy", "diffSide": "RIGHT", "path": "digdag-standards/src/main/resources/digdag/standards/py/runner.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMjo0ODo1MVrOHwJqOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMjo0ODo1MVrOHwJqOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI1MTk2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # SystemExit only show exit code and it is not kind to user. So create specific error message.\n          \n          \n            \n                # SystemExit only shows an exit code and it is not kind to users. So this block creates a specific error message.", "url": "https://github.com/treasure-data/digdag/pull/1477#discussion_r520251963", "createdAt": "2020-11-10T02:48:51Z", "author": {"login": "serihiro"}, "path": "digdag-standards/src/main/resources/digdag/standards/py/runner.py", "diffHunk": "@@ -140,32 +140,37 @@ def digdag_inspect_arguments(callable_type, exclude_self, params):\n     else:\n         return args\n \n-callable_type, method_name = digdag_inspect_command(command)\n error = None\n+error_message = None\n error_value = None\n error_traceback = None\n+callable_type = None\n+method_name = None\n \n-if method_name:\n-    init_args = digdag_inspect_arguments(callable_type.__init__, True, params)\n-    instance = callable_type(**init_args)\n+try:\n+    callable_type, method_name = digdag_inspect_command(command)\n+    if method_name:\n+        init_args = digdag_inspect_arguments(callable_type.__init__, True, params)\n+        instance = callable_type(**init_args)\n \n-    method = getattr(instance, method_name)\n-    method_args = digdag_inspect_arguments(method, True, params)\n-    try:\n+        method = getattr(instance, method_name)\n+        method_args = digdag_inspect_arguments(method, True, params)\n         result = method(**method_args)\n-    except Exception as e:\n-        error = e\n-        error_type, error_value, _tb = sys.exc_info()\n-        error_traceback = traceback.format_exception(error_type, error_value, _tb)\n-\n-else:\n-    args = digdag_inspect_arguments(callable_type, False, params)\n-    try:\n+    else:\n+        args = digdag_inspect_arguments(callable_type, False, params)\n         result = callable_type(**args)\n-    except Exception as e:\n-        error = e\n-        error_type, error_value, _tb = sys.exc_info()\n-        error_traceback = traceback.format_exception(error_type, error_value, _tb)\n+except SystemExit as e:\n+    # SystemExit only show exit code and it is not kind to user. So create specific error message.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "337fa22d493d775627f864c4f55a2d17e1ca7bd1"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTUyNDE2OnYy", "diffSide": "RIGHT", "path": "digdag-standards/src/main/resources/digdag/standards/py/runner.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMzozMDowMFrOHwKYDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMzozMDowMFrOHwKYDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI2MzY5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # This error will happen if called python module name and method name are equal to standard module. (e.g tokenize.main)\n          \n          \n            \n                # This error will happen if called python module name and method name are equal to those of the standard library module. (e.g. tokenize.main)", "url": "https://github.com/treasure-data/digdag/pull/1477#discussion_r520263693", "createdAt": "2020-11-10T03:30:00Z", "author": {"login": "serihiro"}, "path": "digdag-standards/src/main/resources/digdag/standards/py/runner.py", "diffHunk": "@@ -140,32 +140,37 @@ def digdag_inspect_arguments(callable_type, exclude_self, params):\n     else:\n         return args\n \n-callable_type, method_name = digdag_inspect_command(command)\n error = None\n+error_message = None\n error_value = None\n error_traceback = None\n+callable_type = None\n+method_name = None\n \n-if method_name:\n-    init_args = digdag_inspect_arguments(callable_type.__init__, True, params)\n-    instance = callable_type(**init_args)\n+try:\n+    callable_type, method_name = digdag_inspect_command(command)\n+    if method_name:\n+        init_args = digdag_inspect_arguments(callable_type.__init__, True, params)\n+        instance = callable_type(**init_args)\n \n-    method = getattr(instance, method_name)\n-    method_args = digdag_inspect_arguments(method, True, params)\n-    try:\n+        method = getattr(instance, method_name)\n+        method_args = digdag_inspect_arguments(method, True, params)\n         result = method(**method_args)\n-    except Exception as e:\n-        error = e\n-        error_type, error_value, _tb = sys.exc_info()\n-        error_traceback = traceback.format_exception(error_type, error_value, _tb)\n-\n-else:\n-    args = digdag_inspect_arguments(callable_type, False, params)\n-    try:\n+    else:\n+        args = digdag_inspect_arguments(callable_type, False, params)\n         result = callable_type(**args)\n-    except Exception as e:\n-        error = e\n-        error_type, error_value, _tb = sys.exc_info()\n-        error_traceback = traceback.format_exception(error_type, error_value, _tb)\n+except SystemExit as e:\n+    # SystemExit only show exit code and it is not kind to user. So create specific error message.\n+    # This error will happen if called python module name and method name are equal to standard module. (e.g tokenize.main)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "337fa22d493d775627f864c4f55a2d17e1ca7bd1"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTg0ODkzOnYy", "diffSide": "RIGHT", "path": "digdag-standards/src/main/resources/digdag/standards/py/runner.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjoxMzo1NFrOHwNXRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjoxMzo1NFrOHwNXRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxMjY0NA==", "bodyText": "As of Python 3.6, f-string enables writing string format shorter. (also, Python 3.5 has been deprecated)\nhttps://docs.python.org/3/tutorial/inputoutput.html#formatted-string-literals\nIf we need to support Python 2.7 (while it is EOL), it'd be common to use format rather than %.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                error = Exception(\"Failed to call python command with code:%d\" % e.code, \"Possible cause: Ivalid python module call, duplicae module name with standard library\")\n          \n          \n            \n                error = Exception(\"Failed to call python command with code:{}\".format(e.code), \"Possible cause: Invalid python module call, duplicate module name with standard library\")\n          \n      \n    \n    \n  \n\nOr, if we can drop Python 3.5 support, we can leverage f-string like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                error = Exception(\"Failed to call python command with code:%d\" % e.code, \"Possible cause: Ivalid python module call, duplicae module name with standard library\")\n          \n          \n            \n                error = Exception(f\"Failed to call python command with code:{e.code}\", \"Possible cause: Invalid python module call, duplicate module name with standard library\")", "url": "https://github.com/treasure-data/digdag/pull/1477#discussion_r520312644", "createdAt": "2020-11-10T06:13:54Z", "author": {"login": "chezou"}, "path": "digdag-standards/src/main/resources/digdag/standards/py/runner.py", "diffHunk": "@@ -140,32 +140,37 @@ def digdag_inspect_arguments(callable_type, exclude_self, params):\n     else:\n         return args\n \n-callable_type, method_name = digdag_inspect_command(command)\n error = None\n+error_message = None\n error_value = None\n error_traceback = None\n+callable_type = None\n+method_name = None\n \n-if method_name:\n-    init_args = digdag_inspect_arguments(callable_type.__init__, True, params)\n-    instance = callable_type(**init_args)\n+try:\n+    callable_type, method_name = digdag_inspect_command(command)\n+    if method_name:\n+        init_args = digdag_inspect_arguments(callable_type.__init__, True, params)\n+        instance = callable_type(**init_args)\n \n-    method = getattr(instance, method_name)\n-    method_args = digdag_inspect_arguments(method, True, params)\n-    try:\n+        method = getattr(instance, method_name)\n+        method_args = digdag_inspect_arguments(method, True, params)\n         result = method(**method_args)\n-    except Exception as e:\n-        error = e\n-        error_type, error_value, _tb = sys.exc_info()\n-        error_traceback = traceback.format_exception(error_type, error_value, _tb)\n-\n-else:\n-    args = digdag_inspect_arguments(callable_type, False, params)\n-    try:\n+    else:\n+        args = digdag_inspect_arguments(callable_type, False, params)\n         result = callable_type(**args)\n-    except Exception as e:\n-        error = e\n-        error_type, error_value, _tb = sys.exc_info()\n-        error_traceback = traceback.format_exception(error_type, error_value, _tb)\n+except SystemExit as e:\n+    # SystemExit only shows an exit code and it is not kind to users. So this block creates a specific error message.\n+    # This error will happen if called python module name and method name are equal to those of the standard library module. (e.g. tokenize.main)\n+    error = Exception(\"Failed to call python command with code:%d\" % e.code, \"Possible cause: Ivalid python module call, duplicae module name with standard library\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e81727feb3fb79a2ffa56b944c140076c8ecb98"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTg1MDYyOnYy", "diffSide": "RIGHT", "path": "digdag-standards/src/main/resources/digdag/standards/py/runner.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjoxNDoxOFrOHwNYZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjoxNDoxOFrOHwNYZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxMjkzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                error_message = \"%s %s\" % (error.args[0], error.args[1])\n          \n          \n            \n                error_message = \"{} {}\".format(error.args[0], error.args[1])\n          \n      \n    \n    \n  \n\nOr,\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                error_message = \"%s %s\" % (error.args[0], error.args[1])\n          \n          \n            \n                error_message = f\"{error.args[0]} {error.args[1]}\"", "url": "https://github.com/treasure-data/digdag/pull/1477#discussion_r520312932", "createdAt": "2020-11-10T06:14:18Z", "author": {"login": "chezou"}, "path": "digdag-standards/src/main/resources/digdag/standards/py/runner.py", "diffHunk": "@@ -140,32 +140,37 @@ def digdag_inspect_arguments(callable_type, exclude_self, params):\n     else:\n         return args\n \n-callable_type, method_name = digdag_inspect_command(command)\n error = None\n+error_message = None\n error_value = None\n error_traceback = None\n+callable_type = None\n+method_name = None\n \n-if method_name:\n-    init_args = digdag_inspect_arguments(callable_type.__init__, True, params)\n-    instance = callable_type(**init_args)\n+try:\n+    callable_type, method_name = digdag_inspect_command(command)\n+    if method_name:\n+        init_args = digdag_inspect_arguments(callable_type.__init__, True, params)\n+        instance = callable_type(**init_args)\n \n-    method = getattr(instance, method_name)\n-    method_args = digdag_inspect_arguments(method, True, params)\n-    try:\n+        method = getattr(instance, method_name)\n+        method_args = digdag_inspect_arguments(method, True, params)\n         result = method(**method_args)\n-    except Exception as e:\n-        error = e\n-        error_type, error_value, _tb = sys.exc_info()\n-        error_traceback = traceback.format_exception(error_type, error_value, _tb)\n-\n-else:\n-    args = digdag_inspect_arguments(callable_type, False, params)\n-    try:\n+    else:\n+        args = digdag_inspect_arguments(callable_type, False, params)\n         result = callable_type(**args)\n-    except Exception as e:\n-        error = e\n-        error_type, error_value, _tb = sys.exc_info()\n-        error_traceback = traceback.format_exception(error_type, error_value, _tb)\n+except SystemExit as e:\n+    # SystemExit only shows an exit code and it is not kind to users. So this block creates a specific error message.\n+    # This error will happen if called python module name and method name are equal to those of the standard library module. (e.g. tokenize.main)\n+    error = Exception(\"Failed to call python command with code:%d\" % e.code, \"Possible cause: Ivalid python module call, duplicae module name with standard library\")\n+    error_type, error_value, _tb = sys.exc_info()\n+    error_message = \"%s %s\" % (error.args[0], error.args[1])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e81727feb3fb79a2ffa56b944c140076c8ecb98"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1162, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}