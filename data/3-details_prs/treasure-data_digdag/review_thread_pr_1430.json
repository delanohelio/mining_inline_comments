{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzOTU5NjMy", "number": 1430, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1MzozMVrOELmTwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNDozMjozOVrOEL6-Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTk3NDQyOnYy", "diffSide": "RIGHT", "path": "digdag-core/src/main/java/io/digdag/core/Limits.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1MzozMVrOGtOldA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwOTozMToxMlrOGtP6DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3ODA2OA==", "bodyText": "[minor] How about memoization of this value in terms of performance? Do you think we need to memoize this value in terms of performance?", "url": "https://github.com/treasure-data/digdag/pull/1430#discussion_r450078068", "createdAt": "2020-07-06T08:53:31Z", "author": {"login": "komamitsu"}, "path": "digdag-core/src/main/java/io/digdag/core/Limits.java", "diffHunk": "@@ -8,15 +12,21 @@\n     private static final long MAX_ATTEMPTS = Long.valueOf(\n             System.getProperty(\"io.digdag.limits.maxAttempts\", \"100\"));\n \n-    // TODO (dano): this should be configurable by config file etc and not just system property\n+    private final Config systemConfig;\n+\n+    @Inject\n+    public Limits(Config systemConfig)\n+    {\n+        this.systemConfig = systemConfig;\n+    }\n \n-    public static long maxWorkflowTasks()\n+    public long maxWorkflowTasks()\n     {\n-        return MAX_WORKFLOW_TASKS;\n+        return systemConfig.get(\"executor.task_max_run\", long.class, MAX_WORKFLOW_TASKS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65a4d80334b1827f122bd277ae5e12c940107cc9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5Mjk5NQ==", "bodyText": "Good point. I am not sure how much it contribute to performance but valuable.", "url": "https://github.com/treasure-data/digdag/pull/1430#discussion_r450092995", "createdAt": "2020-07-06T09:19:19Z", "author": {"login": "yoyama"}, "path": "digdag-core/src/main/java/io/digdag/core/Limits.java", "diffHunk": "@@ -8,15 +12,21 @@\n     private static final long MAX_ATTEMPTS = Long.valueOf(\n             System.getProperty(\"io.digdag.limits.maxAttempts\", \"100\"));\n \n-    // TODO (dano): this should be configurable by config file etc and not just system property\n+    private final Config systemConfig;\n+\n+    @Inject\n+    public Limits(Config systemConfig)\n+    {\n+        this.systemConfig = systemConfig;\n+    }\n \n-    public static long maxWorkflowTasks()\n+    public long maxWorkflowTasks()\n     {\n-        return MAX_WORKFLOW_TASKS;\n+        return systemConfig.get(\"executor.task_max_run\", long.class, MAX_WORKFLOW_TASKS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3ODA2OA=="}, "originalCommit": {"oid": "65a4d80334b1827f122bd277ae5e12c940107cc9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5OTcyNA==", "bodyText": "Done.", "url": "https://github.com/treasure-data/digdag/pull/1430#discussion_r450099724", "createdAt": "2020-07-06T09:31:12Z", "author": {"login": "yoyama"}, "path": "digdag-core/src/main/java/io/digdag/core/Limits.java", "diffHunk": "@@ -8,15 +12,21 @@\n     private static final long MAX_ATTEMPTS = Long.valueOf(\n             System.getProperty(\"io.digdag.limits.maxAttempts\", \"100\"));\n \n-    // TODO (dano): this should be configurable by config file etc and not just system property\n+    private final Config systemConfig;\n+\n+    @Inject\n+    public Limits(Config systemConfig)\n+    {\n+        this.systemConfig = systemConfig;\n+    }\n \n-    public static long maxWorkflowTasks()\n+    public long maxWorkflowTasks()\n     {\n-        return MAX_WORKFLOW_TASKS;\n+        return systemConfig.get(\"executor.task_max_run\", long.class, MAX_WORKFLOW_TASKS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3ODA2OA=="}, "originalCommit": {"oid": "65a4d80334b1827f122bd277ae5e12c940107cc9"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjAyODY3OnYy", "diffSide": "RIGHT", "path": "digdag-core/src/test/java/io/digdag/core/workflow/ForEachOperatorFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwOTowNzo1OVrOGtPG8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNDoyMTowMlrOGtumTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA4NjY0MQ==", "bodyText": "Is it possible to extend OperatorContext to have limits field instead?", "url": "https://github.com/treasure-data/digdag/pull/1430#discussion_r450086641", "createdAt": "2020-07-06T09:07:59Z", "author": {"login": "komamitsu"}, "path": "digdag-core/src/test/java/io/digdag/core/workflow/ForEachOperatorFactory.java", "diffHunk": "@@ -41,17 +45,19 @@ public String getType()\n     @Override\n     public ForEachOperator newOperator(OperatorContext context)\n     {\n-        return new ForEachOperator(context);\n+        return new ForEachOperator(context, limits);\n     }\n \n     static class ForEachOperator\n             implements Operator\n     {\n         private final TaskRequest request;\n+        private final Limits limits;\n \n-        public ForEachOperator(OperatorContext context)\n+        public ForEachOperator(OperatorContext context, Limits limits)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65a4d80334b1827f122bd277ae5e12c940107cc9"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5MjI4Mg==", "bodyText": "Good point. But OperatorContext is defined in digdag-spi and Limits is defined in digdag-core. So we cannot directly reference Limits from OperatorContext.\nWe may need to find good way to fix it.", "url": "https://github.com/treasure-data/digdag/pull/1430#discussion_r450092282", "createdAt": "2020-07-06T09:17:59Z", "author": {"login": "yoyama"}, "path": "digdag-core/src/test/java/io/digdag/core/workflow/ForEachOperatorFactory.java", "diffHunk": "@@ -41,17 +45,19 @@ public String getType()\n     @Override\n     public ForEachOperator newOperator(OperatorContext context)\n     {\n-        return new ForEachOperator(context);\n+        return new ForEachOperator(context, limits);\n     }\n \n     static class ForEachOperator\n             implements Operator\n     {\n         private final TaskRequest request;\n+        private final Limits limits;\n \n-        public ForEachOperator(OperatorContext context)\n+        public ForEachOperator(OperatorContext context, Limits limits)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA4NjY0MQ=="}, "originalCommit": {"oid": "65a4d80334b1827f122bd277ae5e12c940107cc9"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwMjU3NA==", "bodyText": "I added a method getMaxWorkflowTasks() in OperatorContext and set from Limits instance.", "url": "https://github.com/treasure-data/digdag/pull/1430#discussion_r450602574", "createdAt": "2020-07-07T04:21:02Z", "author": {"login": "yoyama"}, "path": "digdag-core/src/test/java/io/digdag/core/workflow/ForEachOperatorFactory.java", "diffHunk": "@@ -41,17 +45,19 @@ public String getType()\n     @Override\n     public ForEachOperator newOperator(OperatorContext context)\n     {\n-        return new ForEachOperator(context);\n+        return new ForEachOperator(context, limits);\n     }\n \n     static class ForEachOperator\n             implements Operator\n     {\n         private final TaskRequest request;\n+        private final Limits limits;\n \n-        public ForEachOperator(OperatorContext context)\n+        public ForEachOperator(OperatorContext context, Limits limits)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA4NjY0MQ=="}, "originalCommit": {"oid": "65a4d80334b1827f122bd277ae5e12c940107cc9"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjA1MTI1OnYy", "diffSide": "RIGHT", "path": "digdag-docs/src/command_reference.rst", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwOToxNDoxN1rOGtPUqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwOTozMToyMFrOGtP6Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5MDE1Mw==", "bodyText": "How about adding term at once or in concurrently in the description?", "url": "https://github.com/treasure-data/digdag/pull/1430#discussion_r450090153", "createdAt": "2020-07-06T09:14:17Z", "author": {"login": "komamitsu"}, "path": "digdag-docs/src/command_reference.rst", "diffHunk": "@@ -386,7 +386,9 @@ In the config file, following parameters are available\n * log-server.local.split_size (long. default: 0  (not splitted))\n * digdag.secret-encryption-key = (base64 encoded 128-bit AES encryption key)\n * executor.task_ttl (string. default: 1d. A task is killed if it is running longer than this period.)\n+* executor.task_max_run (integer. default: 1000. Max number of tasks in workflow.)\n * executor.attempt_ttl (string. default: 7d. An attempt is killed if it is running longer than this period.)\n+* executor.attempt_max_run (integer. default: 100. Max number of running attempts per each site_id.)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65a4d80334b1827f122bd277ae5e12c940107cc9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5NjI0Mw==", "bodyText": "Thanks, will fix it.", "url": "https://github.com/treasure-data/digdag/pull/1430#discussion_r450096243", "createdAt": "2020-07-06T09:25:08Z", "author": {"login": "yoyama"}, "path": "digdag-docs/src/command_reference.rst", "diffHunk": "@@ -386,7 +386,9 @@ In the config file, following parameters are available\n * log-server.local.split_size (long. default: 0  (not splitted))\n * digdag.secret-encryption-key = (base64 encoded 128-bit AES encryption key)\n * executor.task_ttl (string. default: 1d. A task is killed if it is running longer than this period.)\n+* executor.task_max_run (integer. default: 1000. Max number of tasks in workflow.)\n * executor.attempt_ttl (string. default: 7d. An attempt is killed if it is running longer than this period.)\n+* executor.attempt_max_run (integer. default: 100. Max number of running attempts per each site_id.)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5MDE1Mw=="}, "originalCommit": {"oid": "65a4d80334b1827f122bd277ae5e12c940107cc9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5OTc5OA==", "bodyText": "Done.", "url": "https://github.com/treasure-data/digdag/pull/1430#discussion_r450099798", "createdAt": "2020-07-06T09:31:20Z", "author": {"login": "yoyama"}, "path": "digdag-docs/src/command_reference.rst", "diffHunk": "@@ -386,7 +386,9 @@ In the config file, following parameters are available\n * log-server.local.split_size (long. default: 0  (not splitted))\n * digdag.secret-encryption-key = (base64 encoded 128-bit AES encryption key)\n * executor.task_ttl (string. default: 1d. A task is killed if it is running longer than this period.)\n+* executor.task_max_run (integer. default: 1000. Max number of tasks in workflow.)\n * executor.attempt_ttl (string. default: 7d. An attempt is killed if it is running longer than this period.)\n+* executor.attempt_max_run (integer. default: 100. Max number of running attempts per each site_id.)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5MDE1Mw=="}, "originalCommit": {"oid": "65a4d80334b1827f122bd277ae5e12c940107cc9"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTM1OTgzOnYy", "diffSide": "RIGHT", "path": "digdag-core/src/main/java/io/digdag/core/Limits.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNDozMjozOVrOGtuwFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNDozMjozOVrOGtuwFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwNTA3Nw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/treasure-data/digdag/pull/1430#discussion_r450605077", "createdAt": "2020-07-07T04:32:39Z", "author": {"login": "komamitsu"}, "path": "digdag-core/src/main/java/io/digdag/core/Limits.java", "diffHunk": "@@ -8,15 +12,23 @@\n     private static final long MAX_ATTEMPTS = Long.valueOf(\n             System.getProperty(\"io.digdag.limits.maxAttempts\", \"100\"));\n \n-    // TODO (dano): this should be configurable by config file etc and not just system property\n+    private final long numOfMaxWorkflowTasks;\n+    private final long numOfMaxAttempts;\n+\n+    @Inject\n+    public Limits(Config systemConfig)\n+    {\n+        this.numOfMaxWorkflowTasks =  systemConfig.get(\"executor.task_max_run\", long.class, MAX_WORKFLOW_TASKS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41379120a8463ab967796cd96bb49e5f6404571a"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1140, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}