{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNDQ3NDEw", "number": 1471, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNjowMjozNlrOEzqTeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDoxNjo0NVrOE1lqfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjA1OTQ0OnYy", "diffSide": "RIGHT", "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNjowMjozNlrOHrCQYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwODowMToyMFrOHrEkRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4Nzc3Ng==", "bodyText": "ECS task always uses only 1 container?", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514887776", "createdAt": "2020-10-30T06:02:36Z", "author": {"login": "komamitsu"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "diffHunk": "@@ -386,6 +388,29 @@ else if (defaultCommandTaskTTL.isPresent() && isRunningLongerThanTTL(previousSta\n         return EcsCommandStatus.of(false, nextStatus);\n     }\n \n+    @VisibleForTesting\n+    static Optional<String> getErrorMessageFromTask(String cluster, String taskArn, EcsClient client)\n+    {\n+        Optional<String> errorMessage;\n+        try {\n+            final Task task = client.getTask(cluster, taskArn);\n+            if (task.getContainers().size() > 0) {\n+                errorMessage = Optional.of(task.getContainers().get(0).getReason());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb17e61dea5da93a9bd21b3ffd8f91be971a3ec5"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwODM4NQ==", "bodyText": "Good point!  IIUC, currently only 1 container is used in my understand.\nBut it might be better to support multiple containers for the future modification.\nI will change it later.", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514908385", "createdAt": "2020-10-30T07:14:53Z", "author": {"login": "yoyama"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "diffHunk": "@@ -386,6 +388,29 @@ else if (defaultCommandTaskTTL.isPresent() && isRunningLongerThanTTL(previousSta\n         return EcsCommandStatus.of(false, nextStatus);\n     }\n \n+    @VisibleForTesting\n+    static Optional<String> getErrorMessageFromTask(String cluster, String taskArn, EcsClient client)\n+    {\n+        Optional<String> errorMessage;\n+        try {\n+            final Task task = client.getTask(cluster, taskArn);\n+            if (task.getContainers().size() > 0) {\n+                errorMessage = Optional.of(task.getContainers().get(0).getReason());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4Nzc3Ng=="}, "originalCommit": {"oid": "cb17e61dea5da93a9bd21b3ffd8f91be971a3ec5"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyNTYzOQ==", "bodyText": "I fixed as getting reasons from multiple containers and concatenate them.", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514925639", "createdAt": "2020-10-30T08:01:20Z", "author": {"login": "yoyama"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "diffHunk": "@@ -386,6 +388,29 @@ else if (defaultCommandTaskTTL.isPresent() && isRunningLongerThanTTL(previousSta\n         return EcsCommandStatus.of(false, nextStatus);\n     }\n \n+    @VisibleForTesting\n+    static Optional<String> getErrorMessageFromTask(String cluster, String taskArn, EcsClient client)\n+    {\n+        Optional<String> errorMessage;\n+        try {\n+            final Task task = client.getTask(cluster, taskArn);\n+            if (task.getContainers().size() > 0) {\n+                errorMessage = Optional.of(task.getContainers().get(0).getReason());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4Nzc3Ng=="}, "originalCommit": {"oid": "cb17e61dea5da93a9bd21b3ffd8f91be971a3ec5"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjA2OTMyOnYy", "diffSide": "RIGHT", "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNjowODoyNlrOHrCWEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwODowMjowNFrOHrEliQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4OTIzMw==", "bodyText": "Maybe this RuntimeException doesn't contain the root cause of the task failure. We need to catch RuntimeException here?", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514889233", "createdAt": "2020-10-30T06:08:26Z", "author": {"login": "komamitsu"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "diffHunk": "@@ -386,6 +388,29 @@ else if (defaultCommandTaskTTL.isPresent() && isRunningLongerThanTTL(previousSta\n         return EcsCommandStatus.of(false, nextStatus);\n     }\n \n+    @VisibleForTesting\n+    static Optional<String> getErrorMessageFromTask(String cluster, String taskArn, EcsClient client)\n+    {\n+        Optional<String> errorMessage;\n+        try {\n+            final Task task = client.getTask(cluster, taskArn);\n+            if (task.getContainers().size() > 0) {\n+                errorMessage = Optional.of(task.getContainers().get(0).getReason());\n+            }\n+            else {\n+                errorMessage = Optional.of(\"No container information\");\n+            }\n+        }\n+        catch (TaskSetNotFoundException e) {\n+            errorMessage = Optional.of(e.getErrorMessage());\n+\n+        }\n+        catch (RuntimeException re) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb17e61dea5da93a9bd21b3ffd8f91be971a3ec5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxNDU3MQ==", "bodyText": "Ah good point. I am wondering this process.\nWhen this method is called, the task already finished and the cause of RuntimeException is\nfinal Task task = client.getTask(cluster, taskArn);\n\nIf we don't catch the RuntimeException, task will fail because of only getting information from AWS even though task have already finished.\nBut I re-considered and your pointing out may be better.\nI will change it.\nThanks for your pointing out.", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514914571", "createdAt": "2020-10-30T07:32:28Z", "author": {"login": "yoyama"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "diffHunk": "@@ -386,6 +388,29 @@ else if (defaultCommandTaskTTL.isPresent() && isRunningLongerThanTTL(previousSta\n         return EcsCommandStatus.of(false, nextStatus);\n     }\n \n+    @VisibleForTesting\n+    static Optional<String> getErrorMessageFromTask(String cluster, String taskArn, EcsClient client)\n+    {\n+        Optional<String> errorMessage;\n+        try {\n+            final Task task = client.getTask(cluster, taskArn);\n+            if (task.getContainers().size() > 0) {\n+                errorMessage = Optional.of(task.getContainers().get(0).getReason());\n+            }\n+            else {\n+                errorMessage = Optional.of(\"No container information\");\n+            }\n+        }\n+        catch (TaskSetNotFoundException e) {\n+            errorMessage = Optional.of(e.getErrorMessage());\n+\n+        }\n+        catch (RuntimeException re) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4OTIzMw=="}, "originalCommit": {"oid": "cb17e61dea5da93a9bd21b3ffd8f91be971a3ec5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyNTk2MQ==", "bodyText": "I removed catch (RuntimeException..) and fixed the related test.", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514925961", "createdAt": "2020-10-30T08:02:04Z", "author": {"login": "yoyama"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "diffHunk": "@@ -386,6 +388,29 @@ else if (defaultCommandTaskTTL.isPresent() && isRunningLongerThanTTL(previousSta\n         return EcsCommandStatus.of(false, nextStatus);\n     }\n \n+    @VisibleForTesting\n+    static Optional<String> getErrorMessageFromTask(String cluster, String taskArn, EcsClient client)\n+    {\n+        Optional<String> errorMessage;\n+        try {\n+            final Task task = client.getTask(cluster, taskArn);\n+            if (task.getContainers().size() > 0) {\n+                errorMessage = Optional.of(task.getContainers().get(0).getReason());\n+            }\n+            else {\n+                errorMessage = Optional.of(\"No container information\");\n+            }\n+        }\n+        catch (TaskSetNotFoundException e) {\n+            errorMessage = Optional.of(e.getErrorMessage());\n+\n+        }\n+        catch (RuntimeException re) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4OTIzMw=="}, "originalCommit": {"oid": "cb17e61dea5da93a9bd21b3ffd8f91be971a3ec5"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjA5MDM4OnYy", "diffSide": "RIGHT", "path": "digdag-standards/src/main/java/io/digdag/standards/operator/PyOperatorFactory.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNjoxOToxNFrOHrChxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMToxMTo0MFrOHucmgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg5MjIzMA==", "bodyText": "Is it okay if RuntimeException is finally handled as an unexpected exception?\nhttps://github.com/treasure-data/digdag/blob/v0_10/digdag-core/src/main/java/io/digdag/core/agent/OperatorManager.java#L174-L176\nMaybe TaskExecutionException is better?", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514892230", "createdAt": "2020-10-30T06:19:14Z", "author": {"login": "komamitsu"}, "path": "digdag-standards/src/main/java/io/digdag/standards/operator/PyOperatorFactory.java", "diffHunk": "@@ -149,38 +149,19 @@ private Config runCode(final Config state)\n                     // Remove the polling state after fetching the result so that the result fetch can be retried\n                     // without resubmitting the code.\n                     state.remove(\"commandStatus\");\n-\n-                    StringBuilder reason = new StringBuilder();\n-                    reason.append(\"Python command failed with code \").append(statusCode);\n-                    // If the error message and stacktrace are available in outFile,\n-                    // throw RuntimeException with them.\n+                    String reason = getErrorReason(status, commandContext);\n+                    throw new RuntimeException(reason);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb17e61dea5da93a9bd21b3ffd8f91be971a3ec5"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwOTkyMA==", "bodyText": "The current implementation is as follows:\nhttps://github.com/treasure-data/digdag/blob/v0_10/digdag-standards/src/main/java/io/digdag/standards/operator/PyOperatorFactory.java#L148-L179\n                if (statusCode != 0) {\n...\n                    throw new RuntimeException(reason.toString());\n                }\n\nIf status code is not 0, it always throw RuntimeException().\nI would like to keep behavior as much as possible.\nHow about your thought ?", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514909920", "createdAt": "2020-10-30T07:19:33Z", "author": {"login": "yoyama"}, "path": "digdag-standards/src/main/java/io/digdag/standards/operator/PyOperatorFactory.java", "diffHunk": "@@ -149,38 +149,19 @@ private Config runCode(final Config state)\n                     // Remove the polling state after fetching the result so that the result fetch can be retried\n                     // without resubmitting the code.\n                     state.remove(\"commandStatus\");\n-\n-                    StringBuilder reason = new StringBuilder();\n-                    reason.append(\"Python command failed with code \").append(statusCode);\n-                    // If the error message and stacktrace are available in outFile,\n-                    // throw RuntimeException with them.\n+                    String reason = getErrorReason(status, commandContext);\n+                    throw new RuntimeException(reason);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg5MjIzMA=="}, "originalCommit": {"oid": "cb17e61dea5da93a9bd21b3ffd8f91be971a3ec5"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkzMjE5MA==", "bodyText": "I see. Throwing the same exception sounds reasonable.\n@muga Just out of curiosity, was there any specific reason to use RuntimeException not TaskExecutionException? https://github.com/treasure-data/digdag/blame/85fd6bdcec06a362f1b16d8de2284168c4e35619/digdag-standards/src/main/java/io/digdag/standards/operator/PyOperatorFactory.java#L149", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r517932190", "createdAt": "2020-11-05T10:07:45Z", "author": {"login": "komamitsu"}, "path": "digdag-standards/src/main/java/io/digdag/standards/operator/PyOperatorFactory.java", "diffHunk": "@@ -149,38 +149,19 @@ private Config runCode(final Config state)\n                     // Remove the polling state after fetching the result so that the result fetch can be retried\n                     // without resubmitting the code.\n                     state.remove(\"commandStatus\");\n-\n-                    StringBuilder reason = new StringBuilder();\n-                    reason.append(\"Python command failed with code \").append(statusCode);\n-                    // If the error message and stacktrace are available in outFile,\n-                    // throw RuntimeException with them.\n+                    String reason = getErrorReason(status, commandContext);\n+                    throw new RuntimeException(reason);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg5MjIzMA=="}, "originalCommit": {"oid": "cb17e61dea5da93a9bd21b3ffd8f91be971a3ec5"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ2NTE1NA==", "bodyText": "I added ToDo comments on it for future improvements.", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r518465154", "createdAt": "2020-11-06T01:11:40Z", "author": {"login": "yoyama"}, "path": "digdag-standards/src/main/java/io/digdag/standards/operator/PyOperatorFactory.java", "diffHunk": "@@ -149,38 +149,19 @@ private Config runCode(final Config state)\n                     // Remove the polling state after fetching the result so that the result fetch can be retried\n                     // without resubmitting the code.\n                     state.remove(\"commandStatus\");\n-\n-                    StringBuilder reason = new StringBuilder();\n-                    reason.append(\"Python command failed with code \").append(statusCode);\n-                    // If the error message and stacktrace are available in outFile,\n-                    // throw RuntimeException with them.\n+                    String reason = getErrorReason(status, commandContext);\n+                    throw new RuntimeException(reason);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg5MjIzMA=="}, "originalCommit": {"oid": "cb17e61dea5da93a9bd21b3ffd8f91be971a3ec5"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjE1NTkxOnYy", "diffSide": "RIGHT", "path": "digdag-standards/src/test/resources/io/digdag/standards/operator/py/output.json", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNjo1MzozMFrOHrDHpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNzo1OToyN1rOHrEhOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwMTkyNg==", "bodyText": "Better to add a new line at the end of this file?", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514901926", "createdAt": "2020-10-30T06:53:30Z", "author": {"login": "szyn"}, "path": "digdag-standards/src/test/resources/io/digdag/standards/operator/py/output.json", "diffHunk": "@@ -0,0 +1 @@\n+{\"subtask_config\": {}, \"export_params\": {}, \"store_params\": {}, \"error\": {\"class\": \"NameError\", \"message\": \"name 'printaa' is not defined\", \"backtrace\": [\"Traceback (most recent call last):\\n\", \"  File \\\"./runner.py\\\", line 168, in <module>\\n    result = callable_type(**args)\\n\", \"  File \\\"/Users/you.yamagata/cs_work/CS-5411-py-tokenize/test1.py\\\", line 4, in func1\\n    printaa(\\\"func1 called\\\")\\n\", \"NameError: name 'printaa' is not defined\\n\"]}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb17e61dea5da93a9bd21b3ffd8f91be971a3ec5"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwMzkxNw==", "bodyText": "This file includes your local file path info, how about updating a more general one here?", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514903917", "createdAt": "2020-10-30T07:00:19Z", "author": {"login": "szyn"}, "path": "digdag-standards/src/test/resources/io/digdag/standards/operator/py/output.json", "diffHunk": "@@ -0,0 +1 @@\n+{\"subtask_config\": {}, \"export_params\": {}, \"store_params\": {}, \"error\": {\"class\": \"NameError\", \"message\": \"name 'printaa' is not defined\", \"backtrace\": [\"Traceback (most recent call last):\\n\", \"  File \\\"./runner.py\\\", line 168, in <module>\\n    result = callable_type(**args)\\n\", \"  File \\\"/Users/you.yamagata/cs_work/CS-5411-py-tokenize/test1.py\\\", line 4, in func1\\n    printaa(\\\"func1 called\\\")\\n\", \"NameError: name 'printaa' is not defined\\n\"]}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwMTkyNg=="}, "originalCommit": {"oid": "cb17e61dea5da93a9bd21b3ffd8f91be971a3ec5"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxMTQzNw==", "bodyText": "Better to add a new line at the end of this file?\n\nThis files is generated by runner.py and it does not contain new line. So keeping it may be better.\n\nThis file includes your local file path info, how about updating a more general one here?\n\nOh, thanks. I will mask the information.", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514911437", "createdAt": "2020-10-30T07:23:54Z", "author": {"login": "yoyama"}, "path": "digdag-standards/src/test/resources/io/digdag/standards/operator/py/output.json", "diffHunk": "@@ -0,0 +1 @@\n+{\"subtask_config\": {}, \"export_params\": {}, \"store_params\": {}, \"error\": {\"class\": \"NameError\", \"message\": \"name 'printaa' is not defined\", \"backtrace\": [\"Traceback (most recent call last):\\n\", \"  File \\\"./runner.py\\\", line 168, in <module>\\n    result = callable_type(**args)\\n\", \"  File \\\"/Users/you.yamagata/cs_work/CS-5411-py-tokenize/test1.py\\\", line 4, in func1\\n    printaa(\\\"func1 called\\\")\\n\", \"NameError: name 'printaa' is not defined\\n\"]}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwMTkyNg=="}, "originalCommit": {"oid": "cb17e61dea5da93a9bd21b3ffd8f91be971a3ec5"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyNDg1Ng==", "bodyText": "I fixed it.", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514924856", "createdAt": "2020-10-30T07:59:27Z", "author": {"login": "yoyama"}, "path": "digdag-standards/src/test/resources/io/digdag/standards/operator/py/output.json", "diffHunk": "@@ -0,0 +1 @@\n+{\"subtask_config\": {}, \"export_params\": {}, \"store_params\": {}, \"error\": {\"class\": \"NameError\", \"message\": \"name 'printaa' is not defined\", \"backtrace\": [\"Traceback (most recent call last):\\n\", \"  File \\\"./runner.py\\\", line 168, in <module>\\n    result = callable_type(**args)\\n\", \"  File \\\"/Users/you.yamagata/cs_work/CS-5411-py-tokenize/test1.py\\\", line 4, in func1\\n    printaa(\\\"func1 called\\\")\\n\", \"NameError: name 'printaa' is not defined\\n\"]}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwMTkyNg=="}, "originalCommit": {"oid": "cb17e61dea5da93a9bd21b3ffd8f91be971a3ec5"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjIxMTcxOnYy", "diffSide": "RIGHT", "path": "digdag-standards/src/test/java/io/digdag/standards/operator/PyOperatorFactoryTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNzoyMDozOFrOHrDobw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwODowMjo1MVrOHrEmzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxMDMxOQ==", "bodyText": "This {  should be put in next line", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514910319", "createdAt": "2020-10-30T07:20:38Z", "author": {"login": "komamitsu"}, "path": "digdag-standards/src/test/java/io/digdag/standards/operator/PyOperatorFactoryTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package io.digdag.standards.operator;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Optional;\n+import com.google.common.io.Resources;\n+import io.digdag.client.DigdagClient;\n+import io.digdag.client.config.Config;\n+import io.digdag.client.config.ConfigFactory;\n+import io.digdag.spi.CommandContext;\n+import io.digdag.spi.CommandExecutor;\n+import io.digdag.spi.CommandStatus;\n+import io.digdag.spi.OperatorContext;\n+import io.digdag.spi.TaskRequest;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import io.digdag.standards.operator.PyOperatorFactory.PyOperator;\n+\n+public class PyOperatorFactoryTest\n+{\n+\t@Rule\n+\tpublic TemporaryFolder folder = new TemporaryFolder();\n+\n+\tprivate Path tempPath;\n+\tprivate PyOperatorFactory factory;\n+\tprivate Config config;\n+\tprivate ObjectMapper objectMapper = DigdagClient.objectMapper();\n+\tprivate CommandExecutor exec;\n+\tprivate OperatorContext operatorContext;\n+\tprivate TaskRequest taskRequest;\n+\n+\t@Before\n+\tpublic void setUp()\n+\t{\n+\t\ttempPath = folder.getRoot().toPath();\n+\n+\t\texec = mock(CommandExecutor.class);\n+\t\tfactory = new PyOperatorFactory(exec, objectMapper);\n+\t\tconfig = new ConfigFactory(objectMapper).create();\n+\t\toperatorContext = mock(OperatorContext.class);\n+\t\ttaskRequest = mock(TaskRequest.class);\n+\t\tdoReturn(tempPath).when(operatorContext).getProjectPath();\n+\t\tdoReturn(taskRequest).when(operatorContext).getTaskRequest();\n+\t\tdoReturn(config).when(taskRequest).getConfig();\n+\t}\n+\n+\t@Test\n+\tpublic void testGetErrorReason() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb17e61dea5da93a9bd21b3ffd8f91be971a3ec5"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxNDk0MQ==", "bodyText": "Oh! Thanks. will fix it.", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514914941", "createdAt": "2020-10-30T07:33:31Z", "author": {"login": "yoyama"}, "path": "digdag-standards/src/test/java/io/digdag/standards/operator/PyOperatorFactoryTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package io.digdag.standards.operator;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Optional;\n+import com.google.common.io.Resources;\n+import io.digdag.client.DigdagClient;\n+import io.digdag.client.config.Config;\n+import io.digdag.client.config.ConfigFactory;\n+import io.digdag.spi.CommandContext;\n+import io.digdag.spi.CommandExecutor;\n+import io.digdag.spi.CommandStatus;\n+import io.digdag.spi.OperatorContext;\n+import io.digdag.spi.TaskRequest;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import io.digdag.standards.operator.PyOperatorFactory.PyOperator;\n+\n+public class PyOperatorFactoryTest\n+{\n+\t@Rule\n+\tpublic TemporaryFolder folder = new TemporaryFolder();\n+\n+\tprivate Path tempPath;\n+\tprivate PyOperatorFactory factory;\n+\tprivate Config config;\n+\tprivate ObjectMapper objectMapper = DigdagClient.objectMapper();\n+\tprivate CommandExecutor exec;\n+\tprivate OperatorContext operatorContext;\n+\tprivate TaskRequest taskRequest;\n+\n+\t@Before\n+\tpublic void setUp()\n+\t{\n+\t\ttempPath = folder.getRoot().toPath();\n+\n+\t\texec = mock(CommandExecutor.class);\n+\t\tfactory = new PyOperatorFactory(exec, objectMapper);\n+\t\tconfig = new ConfigFactory(objectMapper).create();\n+\t\toperatorContext = mock(OperatorContext.class);\n+\t\ttaskRequest = mock(TaskRequest.class);\n+\t\tdoReturn(tempPath).when(operatorContext).getProjectPath();\n+\t\tdoReturn(taskRequest).when(operatorContext).getTaskRequest();\n+\t\tdoReturn(config).when(taskRequest).getConfig();\n+\t}\n+\n+\t@Test\n+\tpublic void testGetErrorReason() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxMDMxOQ=="}, "originalCommit": {"oid": "cb17e61dea5da93a9bd21b3ffd8f91be971a3ec5"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyNjI4Nw==", "bodyText": "Fixed it.", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514926287", "createdAt": "2020-10-30T08:02:51Z", "author": {"login": "yoyama"}, "path": "digdag-standards/src/test/java/io/digdag/standards/operator/PyOperatorFactoryTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package io.digdag.standards.operator;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Optional;\n+import com.google.common.io.Resources;\n+import io.digdag.client.DigdagClient;\n+import io.digdag.client.config.Config;\n+import io.digdag.client.config.ConfigFactory;\n+import io.digdag.spi.CommandContext;\n+import io.digdag.spi.CommandExecutor;\n+import io.digdag.spi.CommandStatus;\n+import io.digdag.spi.OperatorContext;\n+import io.digdag.spi.TaskRequest;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import io.digdag.standards.operator.PyOperatorFactory.PyOperator;\n+\n+public class PyOperatorFactoryTest\n+{\n+\t@Rule\n+\tpublic TemporaryFolder folder = new TemporaryFolder();\n+\n+\tprivate Path tempPath;\n+\tprivate PyOperatorFactory factory;\n+\tprivate Config config;\n+\tprivate ObjectMapper objectMapper = DigdagClient.objectMapper();\n+\tprivate CommandExecutor exec;\n+\tprivate OperatorContext operatorContext;\n+\tprivate TaskRequest taskRequest;\n+\n+\t@Before\n+\tpublic void setUp()\n+\t{\n+\t\ttempPath = folder.getRoot().toPath();\n+\n+\t\texec = mock(CommandExecutor.class);\n+\t\tfactory = new PyOperatorFactory(exec, objectMapper);\n+\t\tconfig = new ConfigFactory(objectMapper).create();\n+\t\toperatorContext = mock(OperatorContext.class);\n+\t\ttaskRequest = mock(TaskRequest.class);\n+\t\tdoReturn(tempPath).when(operatorContext).getProjectPath();\n+\t\tdoReturn(taskRequest).when(operatorContext).getTaskRequest();\n+\t\tdoReturn(config).when(taskRequest).getConfig();\n+\t}\n+\n+\t@Test\n+\tpublic void testGetErrorReason() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxMDMxOQ=="}, "originalCommit": {"oid": "cb17e61dea5da93a9bd21b3ffd8f91be971a3ec5"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjI0NDc1OnYy", "diffSide": "RIGHT", "path": "digdag-tests/src/test/java/acceptance/DockerIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNzozNDowOFrOHrD7WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNzozNDowOFrOHrD7WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxNTE2MA==", "bodyText": "This is because the CI sometimes failed in this test.", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514915160", "createdAt": "2020-10-30T07:34:08Z", "author": {"login": "yoyama"}, "path": "digdag-tests/src/test/java/acceptance/DockerIT.java", "diffHunk": "@@ -184,7 +184,7 @@ public void verifyPyOnDocker()\n         // Wait for the attempt to complete\n         {\n             RestSessionAttempt attempt = null;\n-            for (int i = 0; i < 30; i++) {\n+            for (int i = 0; i < 60; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb17e61dea5da93a9bd21b3ffd8f91be971a3ec5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjE4MDg0OnYy", "diffSide": "RIGHT", "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOTo1NDo1MVrOHt7kKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMTowNDoxOVrOHuceBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkyMzg4MQ==", "bodyText": "Maybe this line should be separated into multiple lines?", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r517923881", "createdAt": "2020-11-05T09:54:51Z", "author": {"login": "komamitsu"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "diffHunk": "@@ -386,6 +389,27 @@ else if (defaultCommandTaskTTL.isPresent() && isRunningLongerThanTTL(previousSta\n         return EcsCommandStatus.of(false, nextStatus);\n     }\n \n+    @VisibleForTesting\n+    static Optional<String> getErrorMessageFromTask(String cluster, String taskArn, EcsClient client)\n+    {\n+        Optional<String> errorMessage = Optional.absent();\n+        try {\n+            final Task task = client.getTask(cluster, taskArn);\n+            final List<String> reasons = task.getContainers().stream().map(c -> c.getReason()).filter(r -> !Strings.isNullOrEmpty(r)).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "774764bb33c265eb4676fb066fa9db032b7aee7b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1MTY5MA==", "bodyText": "Good point. Thanks, will fix it.", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r518451690", "createdAt": "2020-11-06T00:26:36Z", "author": {"login": "yoyama"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "diffHunk": "@@ -386,6 +389,27 @@ else if (defaultCommandTaskTTL.isPresent() && isRunningLongerThanTTL(previousSta\n         return EcsCommandStatus.of(false, nextStatus);\n     }\n \n+    @VisibleForTesting\n+    static Optional<String> getErrorMessageFromTask(String cluster, String taskArn, EcsClient client)\n+    {\n+        Optional<String> errorMessage = Optional.absent();\n+        try {\n+            final Task task = client.getTask(cluster, taskArn);\n+            final List<String> reasons = task.getContainers().stream().map(c -> c.getReason()).filter(r -> !Strings.isNullOrEmpty(r)).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkyMzg4MQ=="}, "originalCommit": {"oid": "774764bb33c265eb4676fb066fa9db032b7aee7b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ2Mjk4MA==", "bodyText": "Fixed it.", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r518462980", "createdAt": "2020-11-06T01:04:19Z", "author": {"login": "yoyama"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "diffHunk": "@@ -386,6 +389,27 @@ else if (defaultCommandTaskTTL.isPresent() && isRunningLongerThanTTL(previousSta\n         return EcsCommandStatus.of(false, nextStatus);\n     }\n \n+    @VisibleForTesting\n+    static Optional<String> getErrorMessageFromTask(String cluster, String taskArn, EcsClient client)\n+    {\n+        Optional<String> errorMessage = Optional.absent();\n+        try {\n+            final Task task = client.getTask(cluster, taskArn);\n+            final List<String> reasons = task.getContainers().stream().map(c -> c.getReason()).filter(r -> !Strings.isNullOrEmpty(r)).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkyMzg4MQ=="}, "originalCommit": {"oid": "774764bb33c265eb4676fb066fa9db032b7aee7b"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjI0MjQ4OnYy", "diffSide": "RIGHT", "path": "digdag-standards/src/test/java/io/digdag/standards/command/EcsCommandExecutorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDowOTo0MlrOHt8JcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDowOTo0MlrOHt8JcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkzMzQyNA==", "bodyText": "\ud83d\udcaf", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r517933424", "createdAt": "2020-11-05T10:09:42Z", "author": {"login": "komamitsu"}, "path": "digdag-standards/src/test/java/io/digdag/standards/command/EcsCommandExecutorTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package io.digdag.standards.command;\n+\n+import com.amazonaws.services.ecs.model.Container;\n+import com.amazonaws.services.ecs.model.Task;\n+import com.amazonaws.services.ecs.model.TaskSetNotFoundException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.base.Optional;\n+import io.digdag.client.config.Config;\n+import io.digdag.client.config.ConfigFactory;\n+import io.digdag.core.archive.ProjectArchiveLoader;\n+import io.digdag.core.storage.StorageManager;\n+import io.digdag.spi.CommandContext;\n+import io.digdag.spi.CommandLogger;\n+import io.digdag.spi.CommandRequest;\n+import io.digdag.spi.CommandStatus;\n+import io.digdag.spi.TaskRequest;\n+import io.digdag.standards.command.ecs.EcsClient;\n+import io.digdag.standards.command.ecs.EcsClientConfig;\n+import io.digdag.standards.command.ecs.EcsClientFactory;\n+import io.digdag.standards.command.EcsCommandExecutor.EcsCommandStatus;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.util.Arrays;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class EcsCommandExecutorTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "774764bb33c265eb4676fb066fa9db032b7aee7b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjI3MDcxOnYy", "diffSide": "RIGHT", "path": "digdag-spi/src/main/java/io/digdag/spi/CommandStatus.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDoxNjo0NVrOHt8a3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMDoyNzo0NlrOHubzRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkzNzg4NA==", "bodyText": "[just an idea] Maybe we'd better merge isFinished and statusCode into an Optional<Integer> in the future so that we can avoid unexpectedly using status code when not finished.", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r517937884", "createdAt": "2020-11-05T10:16:45Z", "author": {"login": "komamitsu"}, "path": "digdag-spi/src/main/java/io/digdag/spi/CommandStatus.java", "diffHunk": "@@ -13,11 +14,20 @@\n     boolean isFinished();\n \n     /**\n-     * Return exit code of command finished. It7s valid only when isFiished returns true.\n+     * Return exit code of command finished. It is valid only when isFinished returns true.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "774764bb33c265eb4676fb066fa9db032b7aee7b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1MjAzOA==", "bodyText": "Make sense for me. I will add ToDo about it.", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r518452038", "createdAt": "2020-11-06T00:27:46Z", "author": {"login": "yoyama"}, "path": "digdag-spi/src/main/java/io/digdag/spi/CommandStatus.java", "diffHunk": "@@ -13,11 +14,20 @@\n     boolean isFinished();\n \n     /**\n-     * Return exit code of command finished. It7s valid only when isFiished returns true.\n+     * Return exit code of command finished. It is valid only when isFinished returns true.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkzNzg4NA=="}, "originalCommit": {"oid": "774764bb33c265eb4676fb066fa9db032b7aee7b"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1153, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}