{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MjQ1MDU3", "number": 1419, "title": "Fix resume mode to work correctly when group retry happened", "bodyText": "When resuming a workflow where a group retry has occurred, it will be restarted from the first task in the group. Because if a group retry has occurred, it is difficult to determine which task to resume, it might be a good idea to retry the entire group.\ne.g., The user wants to retry failed the following workflow that named sample, and it will be resumed from the task +sample+group1+a.\nsample.dig\n+group1:\n  _retry: 2\n  +a:\n    echo>: a\n  +b:\n    echo>: b\n  +c:\n    fail>: error! ## This task will fail\nRelated PR: #1163", "createdAt": "2020-06-18T05:52:16Z", "url": "https://github.com/treasure-data/digdag/pull/1419", "merged": true, "mergeCommit": {"oid": "2fd7bc6993203ad1050e3a2faeaa313e1f3941c0"}, "closed": true, "closedAt": "2020-08-19T05:09:09Z", "author": {"login": "szyn"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsXVGmgH2gAyNDM2MjQ1MDU3OjUxYzA3ZGNkZGEyNGM3MzI3ZDk0NDI4YmFhMDQ3ZGNkNGE3YjNkMWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc_nEFOAH2gAyNDM2MjQ1MDU3OmU4YTMxMGQ4OGVhNzZiYTQwYjk4NGI4N2I3ZWFlZWExNmRhODQ4ZWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "51c07dcdda24c7327d94428baa047dcd4a7b3d1a", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/51c07dcdda24c7327d94428baa047dcd4a7b3d1a", "committedDate": "2020-06-18T05:09:37Z", "message": "Fix resume mode to work correctly when group retry happened"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3750b060c3f48e6f3ed0bcb228827525399b173", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/d3750b060c3f48e6f3ed0bcb228827525399b173", "committedDate": "2020-06-18T05:09:37Z", "message": "Add test cases for group retry"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NzY2MzIx", "url": "https://github.com/treasure-data/digdag/pull/1419#pullrequestreview-459766321", "createdAt": "2020-08-03T06:03:54Z", "commit": {"oid": "d3750b060c3f48e6f3ed0bcb228827525399b173"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjowMzo1NFrOG6tG-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjowMzo1NFrOG6tG-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwOTY1Ng==", "bodyText": "Project name and workflow name and command are all same name \"retry\" ?\nIt ma be a bit confused for me.", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r464209656", "createdAt": "2020-08-03T06:03:54Z", "author": {"login": "yoyama"}, "path": "digdag-tests/src/test/java/acceptance/GroupRetryIT.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package acceptance;\n+\n+import com.google.common.io.Resources;\n+import io.digdag.client.DigdagClient;\n+import io.digdag.client.api.Id;\n+import io.digdag.client.api.RestSessionAttempt;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import utils.CommandStatus;\n+import utils.TemporaryDigdagServer;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static utils.TestUtils.getAttemptId;\n+import static utils.TestUtils.main;\n+\n+public class GroupRetryIT\n+{\n+    @Rule\n+    public TemporaryFolder folder = new TemporaryFolder();\n+\n+    @Rule\n+    public TemporaryDigdagServer server = TemporaryDigdagServer.of();\n+\n+    private Path config;\n+    private Path projectDir;\n+\n+    @Before\n+    public void setUp()\n+            throws Exception\n+    {\n+        config = folder.newFile().toPath();\n+\n+        projectDir = folder.getRoot().toPath().resolve(\"group_retry\");\n+        Files.createDirectory(projectDir);\n+    }\n+\n+    @Test\n+    public void testGroupRetry()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-1.dig\", \"retry\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"retry\", \"retry\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"1-2c\", false);\n+\n+        // Push a new revision\n+        pushRevision(\"acceptance/group_retry/retry-2.dig\", \"retry\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3750b060c3f48e6f3ed0bcb228827525399b173"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NzY2NzE3", "url": "https://github.com/treasure-data/digdag/pull/1419#pullrequestreview-459766717", "createdAt": "2020-08-03T06:05:00Z", "commit": {"oid": "d3750b060c3f48e6f3ed0bcb228827525399b173"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjowNTowMFrOG6tIOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjowNTowMFrOG6tIOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwOTk3OA==", "bodyText": "May I ask you the purpose to check \"retry_count\" ?", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r464209978", "createdAt": "2020-08-03T06:05:00Z", "author": {"login": "yoyama"}, "path": "digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java", "diffHunk": "@@ -302,7 +302,16 @@ public Response startAttempt(RestSessionAttemptRequest request)\n                 .getSessionStore(getSiteId())\n                 .getTasksOfAttempt(attemptId);\n \n+        List<Long> groupRetryErrorTaskIds = tasks.stream()\n+                .filter(task -> task.getState() == TaskStateCode.GROUP_ERROR && task.getStateParams().has(\"retry_count\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3750b060c3f48e6f3ed0bcb228827525399b173"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NzY3Mzk5", "url": "https://github.com/treasure-data/digdag/pull/1419#pullrequestreview-459767399", "createdAt": "2020-08-03T06:07:01Z", "commit": {"oid": "d3750b060c3f48e6f3ed0bcb228827525399b173"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjowNzowMVrOG6tKpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjowNzowMVrOG6tKpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxMDU5Nw==", "bodyText": "May I ask you the reason you choose first one ?", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r464210597", "createdAt": "2020-08-03T06:07:01Z", "author": {"login": "yoyama"}, "path": "digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java", "diffHunk": "@@ -344,7 +353,11 @@ private ArchivedTask matchTaskPattern(String pattern, List<ArchivedTask> tasks)\n                     tasks\n                             .stream()\n                             .collect(\n-                                    Collectors.toMap(t -> t.getFullName(), t -> t)\n+                                    // Avoid 500 error due to duplicate key ArchivedTask\n+                                    // if a group retry happened, IllegalStateException will be thrown\n+                                    // because there are multiple tasks of the same name.\n+                                    // Take the first one to make sure it is appropriately resumed.\n+                                    Collectors.toMap(t -> t.getFullName(), t -> t, (a, b) -> a)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3750b060c3f48e6f3ed0bcb228827525399b173"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "097748699e2f79fe5a2f029ed70b10fcfb8f2ec8", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/097748699e2f79fe5a2f029ed70b10fcfb8f2ec8", "committedDate": "2020-08-03T06:21:37Z", "message": "Update project and workflow names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1fd9ea9c45ae368f75fbe55b3e989898bb01770", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/e1fd9ea9c45ae368f75fbe55b3e989898bb01770", "committedDate": "2020-08-03T07:09:57Z", "message": "Add a comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bac46730d99d25fd18daa10c1077eb1adec75f1", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/2bac46730d99d25fd18daa10c1077eb1adec75f1", "committedDate": "2020-08-05T07:03:57Z", "message": "Add some test cases for group retry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1242674f2bc34dde75cbacfc42572c006be4084d", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/1242674f2bc34dde75cbacfc42572c006be4084d", "committedDate": "2020-08-05T07:07:18Z", "message": "Add filter to exclude dynamically generated tasks from successTasks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ce47a9f6244c277506da513e425d7d25b79f16e", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/4ce47a9f6244c277506da513e425d7d25b79f16e", "committedDate": "2020-08-05T07:14:55Z", "message": "Add a new line"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMDcxMjU2", "url": "https://github.com/treasure-data/digdag/pull/1419#pullrequestreview-463071256", "createdAt": "2020-08-07T06:45:29Z", "commit": {"oid": "4ce47a9f6244c277506da513e425d7d25b79f16e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjo0NToyOVrOG9Oarg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjo0NToyOVrOG9Oarg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MjUyNg==", "bodyText": "resume failed ?", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r466852526", "createdAt": "2020-08-07T06:45:29Z", "author": {"login": "yoyama"}, "path": "digdag-tests/src/test/java/acceptance/GroupRetryIT.java", "diffHunk": "@@ -0,0 +1,583 @@\n+package acceptance;\n+\n+import com.google.common.io.Resources;\n+import io.digdag.client.DigdagClient;\n+import io.digdag.client.api.Id;\n+import io.digdag.client.api.RestSessionAttempt;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import utils.CommandStatus;\n+import utils.TemporaryDigdagServer;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static utils.TestUtils.addWorkflow;\n+import static utils.TestUtils.getAttemptId;\n+import static utils.TestUtils.main;\n+\n+public class GroupRetryIT\n+{\n+    @Rule\n+    public TemporaryFolder folder = new TemporaryFolder();\n+\n+    @Rule\n+    public TemporaryDigdagServer server = TemporaryDigdagServer.of();\n+\n+    private Path config;\n+    private Path projectDir;\n+\n+    @Before\n+    public void setUp()\n+            throws Exception\n+    {\n+        config = folder.newFile().toPath();\n+\n+        projectDir = folder.getRoot().toPath().resolve(\"group_retry\");\n+        Files.createDirectory(projectDir);\n+    }\n+\n+    @Test\n+    public void testGroupRetry()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"1-2c\", false);\n+\n+        // Push a new revision\n+        pushRevision(\"acceptance/group_retry/retry-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"1-2a\", true);\n+        assertOutputExists(retry1 + \"1-2b\", true);\n+        assertOutputExists(retry1 + \"1-2c\", false);\n+\n+        // Retry with the latest fixed revision & resume failed\n+        Id retry2;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry2 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry2).getSuccess(), is(true));\n+\n+        assertOutputExists(retry2 + \"2-1\", false);  // skipped\n+        assertOutputExists(retry2 + \"2-2a\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"2-2b\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"2-2c\", true);\n+\n+        // Retry with the latest fixed revision & resume all\n+        Id retry3;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.code(), is(0));\n+            retry3 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry3).getSuccess(), is(true));\n+\n+        assertOutputExists(retry3 + \"2-1\", true);\n+        assertOutputExists(retry3 + \"2-2a\", true);\n+        assertOutputExists(retry3 + \"2-2b\", true);\n+        assertOutputExists(retry3 + \"2-2c\", true);\n+\n+        // Push another new revision\n+        pushRevision(\"acceptance/group_retry/retry-3.dig\", \"test\");\n+\n+        // Retry with the latest fixed revision & resume from\n+        Id retry4;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume-from\", \"+step2+a\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry4 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry4).getSuccess(), is(true));\n+\n+        assertOutputExists(retry4 + \"3-1\", false); // skipped\n+        assertOutputExists(retry4 + \"3-2a\", true);\n+        assertOutputExists(retry4 + \"3-2b\", true);\n+        assertOutputExists(retry4 + \"3-2c\", true);\n+    }\n+\n+    @Test\n+    public void testGroupRetryWithLoop()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-loop-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2c\", false);\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-loop-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"0-1-2a\", true);\n+        assertOutputExists(retry1 + \"0-1-2b\", true);\n+        assertOutputExists(retry1 + \"0-1-2c\", false);\n+\n+        // Retry with the latest fixed revision & resume failed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ce47a9f6244c277506da513e425d7d25b79f16e"}, "originalPosition": 227}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMDcyMTUy", "url": "https://github.com/treasure-data/digdag/pull/1419#pullrequestreview-463072152", "createdAt": "2020-08-07T06:47:32Z", "commit": {"oid": "4ce47a9f6244c277506da513e425d7d25b79f16e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjo0NzozMlrOG9OdjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjo0NzozMlrOG9OdjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MzI2MA==", "bodyText": "ditto. it seems you may expect to succeed.", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r466853260", "createdAt": "2020-08-07T06:47:32Z", "author": {"login": "yoyama"}, "path": "digdag-tests/src/test/java/acceptance/GroupRetryIT.java", "diffHunk": "@@ -0,0 +1,583 @@\n+package acceptance;\n+\n+import com.google.common.io.Resources;\n+import io.digdag.client.DigdagClient;\n+import io.digdag.client.api.Id;\n+import io.digdag.client.api.RestSessionAttempt;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import utils.CommandStatus;\n+import utils.TemporaryDigdagServer;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static utils.TestUtils.addWorkflow;\n+import static utils.TestUtils.getAttemptId;\n+import static utils.TestUtils.main;\n+\n+public class GroupRetryIT\n+{\n+    @Rule\n+    public TemporaryFolder folder = new TemporaryFolder();\n+\n+    @Rule\n+    public TemporaryDigdagServer server = TemporaryDigdagServer.of();\n+\n+    private Path config;\n+    private Path projectDir;\n+\n+    @Before\n+    public void setUp()\n+            throws Exception\n+    {\n+        config = folder.newFile().toPath();\n+\n+        projectDir = folder.getRoot().toPath().resolve(\"group_retry\");\n+        Files.createDirectory(projectDir);\n+    }\n+\n+    @Test\n+    public void testGroupRetry()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"1-2c\", false);\n+\n+        // Push a new revision\n+        pushRevision(\"acceptance/group_retry/retry-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"1-2a\", true);\n+        assertOutputExists(retry1 + \"1-2b\", true);\n+        assertOutputExists(retry1 + \"1-2c\", false);\n+\n+        // Retry with the latest fixed revision & resume failed\n+        Id retry2;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry2 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry2).getSuccess(), is(true));\n+\n+        assertOutputExists(retry2 + \"2-1\", false);  // skipped\n+        assertOutputExists(retry2 + \"2-2a\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"2-2b\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"2-2c\", true);\n+\n+        // Retry with the latest fixed revision & resume all\n+        Id retry3;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.code(), is(0));\n+            retry3 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry3).getSuccess(), is(true));\n+\n+        assertOutputExists(retry3 + \"2-1\", true);\n+        assertOutputExists(retry3 + \"2-2a\", true);\n+        assertOutputExists(retry3 + \"2-2b\", true);\n+        assertOutputExists(retry3 + \"2-2c\", true);\n+\n+        // Push another new revision\n+        pushRevision(\"acceptance/group_retry/retry-3.dig\", \"test\");\n+\n+        // Retry with the latest fixed revision & resume from\n+        Id retry4;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume-from\", \"+step2+a\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry4 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry4).getSuccess(), is(true));\n+\n+        assertOutputExists(retry4 + \"3-1\", false); // skipped\n+        assertOutputExists(retry4 + \"3-2a\", true);\n+        assertOutputExists(retry4 + \"3-2b\", true);\n+        assertOutputExists(retry4 + \"3-2c\", true);\n+    }\n+\n+    @Test\n+    public void testGroupRetryWithLoop()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-loop-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2c\", false);\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-loop-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"0-1-2a\", true);\n+        assertOutputExists(retry1 + \"0-1-2b\", true);\n+        assertOutputExists(retry1 + \"0-1-2c\", false);\n+\n+        // Retry with the latest fixed revision & resume failed\n+        Id retry2;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry2 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry2).getSuccess(), is(true));\n+\n+        assertOutputExists(retry2 + \"2-1\", false);  // skipped\n+        assertOutputExists(retry2 + \"0-2-2a\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"0-2-2b\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"0-2-2c\", true);\n+        assertOutputExists(retry2 + \"2-2-2c\", true);\n+\n+        // Retry with the latest fixed revision & resume all\n+        Id retry3;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.code(), is(0));\n+            retry3 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry3).getSuccess(), is(true));\n+\n+        assertOutputExists(retry3 + \"2-1\", true);\n+        assertOutputExists(retry3 + \"0-2-2a\", true);\n+        assertOutputExists(retry3 + \"0-2-2b\", true);\n+        assertOutputExists(retry3 + \"0-2-2c\", true);\n+        assertOutputExists(retry3 + \"2-2-2c\", true);\n+\n+        // Push another new revision\n+        pushRevision(\"acceptance/group_retry/retry-with-loop-3.dig\", \"test\");\n+\n+        // Retry with the latest fixed revision & resume from\n+        Id retry4;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume-from\", \"+step2\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry4 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry4).getSuccess(), is(true));\n+\n+        assertOutputExists(retry4 + \"3-1\", false); // skipped\n+        assertOutputExists(retry4 + \"0-3-2a\", true);\n+        assertOutputExists(retry4 + \"0-3-2b\", true);\n+        assertOutputExists(retry4 + \"0-3-2c\", true);\n+        assertOutputExists(retry4 + \"2-3-2c\", true);\n+    }\n+\n+    @Test\n+    public void testGroupRetryWithNestedGroup()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-nested-group-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"1-2c\", false);\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-nested-group-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"1-2a\", true);\n+        assertOutputExists(retry1 + \"1-2b\", true);\n+        assertOutputExists(retry1 + \"1-2c\", false);\n+\n+        // Retry with the latest fixed revision & resume failed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ce47a9f6244c277506da513e425d7d25b79f16e"}, "originalPosition": 353}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMDc3NTE4", "url": "https://github.com/treasure-data/digdag/pull/1419#pullrequestreview-463077518", "createdAt": "2020-08-07T06:58:44Z", "commit": {"oid": "4ce47a9f6244c277506da513e425d7d25b79f16e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjo1ODo0NFrOG9OuQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjo1ODo0NFrOG9OuQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1NzUzNw==", "bodyText": "I am not sure that this is really expected behavior or not.", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r466857537", "createdAt": "2020-08-07T06:58:44Z", "author": {"login": "yoyama"}, "path": "digdag-tests/src/test/java/acceptance/GroupRetryIT.java", "diffHunk": "@@ -0,0 +1,583 @@\n+package acceptance;\n+\n+import com.google.common.io.Resources;\n+import io.digdag.client.DigdagClient;\n+import io.digdag.client.api.Id;\n+import io.digdag.client.api.RestSessionAttempt;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import utils.CommandStatus;\n+import utils.TemporaryDigdagServer;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static utils.TestUtils.addWorkflow;\n+import static utils.TestUtils.getAttemptId;\n+import static utils.TestUtils.main;\n+\n+public class GroupRetryIT\n+{\n+    @Rule\n+    public TemporaryFolder folder = new TemporaryFolder();\n+\n+    @Rule\n+    public TemporaryDigdagServer server = TemporaryDigdagServer.of();\n+\n+    private Path config;\n+    private Path projectDir;\n+\n+    @Before\n+    public void setUp()\n+            throws Exception\n+    {\n+        config = folder.newFile().toPath();\n+\n+        projectDir = folder.getRoot().toPath().resolve(\"group_retry\");\n+        Files.createDirectory(projectDir);\n+    }\n+\n+    @Test\n+    public void testGroupRetry()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"1-2c\", false);\n+\n+        // Push a new revision\n+        pushRevision(\"acceptance/group_retry/retry-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"1-2a\", true);\n+        assertOutputExists(retry1 + \"1-2b\", true);\n+        assertOutputExists(retry1 + \"1-2c\", false);\n+\n+        // Retry with the latest fixed revision & resume failed\n+        Id retry2;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry2 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry2).getSuccess(), is(true));\n+\n+        assertOutputExists(retry2 + \"2-1\", false);  // skipped\n+        assertOutputExists(retry2 + \"2-2a\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"2-2b\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"2-2c\", true);\n+\n+        // Retry with the latest fixed revision & resume all\n+        Id retry3;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.code(), is(0));\n+            retry3 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry3).getSuccess(), is(true));\n+\n+        assertOutputExists(retry3 + \"2-1\", true);\n+        assertOutputExists(retry3 + \"2-2a\", true);\n+        assertOutputExists(retry3 + \"2-2b\", true);\n+        assertOutputExists(retry3 + \"2-2c\", true);\n+\n+        // Push another new revision\n+        pushRevision(\"acceptance/group_retry/retry-3.dig\", \"test\");\n+\n+        // Retry with the latest fixed revision & resume from\n+        Id retry4;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume-from\", \"+step2+a\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry4 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry4).getSuccess(), is(true));\n+\n+        assertOutputExists(retry4 + \"3-1\", false); // skipped\n+        assertOutputExists(retry4 + \"3-2a\", true);\n+        assertOutputExists(retry4 + \"3-2b\", true);\n+        assertOutputExists(retry4 + \"3-2c\", true);\n+    }\n+\n+    @Test\n+    public void testGroupRetryWithLoop()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-loop-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2c\", false);\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-loop-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"0-1-2a\", true);\n+        assertOutputExists(retry1 + \"0-1-2b\", true);\n+        assertOutputExists(retry1 + \"0-1-2c\", false);\n+\n+        // Retry with the latest fixed revision & resume failed\n+        Id retry2;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry2 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry2).getSuccess(), is(true));\n+\n+        assertOutputExists(retry2 + \"2-1\", false);  // skipped\n+        assertOutputExists(retry2 + \"0-2-2a\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"0-2-2b\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"0-2-2c\", true);\n+        assertOutputExists(retry2 + \"2-2-2c\", true);\n+\n+        // Retry with the latest fixed revision & resume all\n+        Id retry3;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.code(), is(0));\n+            retry3 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry3).getSuccess(), is(true));\n+\n+        assertOutputExists(retry3 + \"2-1\", true);\n+        assertOutputExists(retry3 + \"0-2-2a\", true);\n+        assertOutputExists(retry3 + \"0-2-2b\", true);\n+        assertOutputExists(retry3 + \"0-2-2c\", true);\n+        assertOutputExists(retry3 + \"2-2-2c\", true);\n+\n+        // Push another new revision\n+        pushRevision(\"acceptance/group_retry/retry-with-loop-3.dig\", \"test\");\n+\n+        // Retry with the latest fixed revision & resume from\n+        Id retry4;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume-from\", \"+step2\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry4 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry4).getSuccess(), is(true));\n+\n+        assertOutputExists(retry4 + \"3-1\", false); // skipped\n+        assertOutputExists(retry4 + \"0-3-2a\", true);\n+        assertOutputExists(retry4 + \"0-3-2b\", true);\n+        assertOutputExists(retry4 + \"0-3-2c\", true);\n+        assertOutputExists(retry4 + \"2-3-2c\", true);\n+    }\n+\n+    @Test\n+    public void testGroupRetryWithNestedGroup()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-nested-group-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"1-2c\", false);\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-nested-group-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"1-2a\", true);\n+        assertOutputExists(retry1 + \"1-2b\", true);\n+        assertOutputExists(retry1 + \"1-2c\", false);\n+\n+        // Retry with the latest fixed revision & resume failed\n+        Id retry2;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry2 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry2).getSuccess(), is(true));\n+\n+        assertOutputExists(retry2 + \"2-1\", true);   // no-skipped, +group1 has _retry", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ce47a9f6244c277506da513e425d7d25b79f16e"}, "originalPosition": 369}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMDc5ODY0", "url": "https://github.com/treasure-data/digdag/pull/1419#pullrequestreview-463079864", "createdAt": "2020-08-07T07:03:25Z", "commit": {"oid": "4ce47a9f6244c277506da513e425d7d25b79f16e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzowMzoyNlrOG9O2Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzowMzoyNlrOG9O2Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1OTUyMg==", "bodyText": "ditto ?", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r466859522", "createdAt": "2020-08-07T07:03:26Z", "author": {"login": "yoyama"}, "path": "digdag-tests/src/test/java/acceptance/GroupRetryIT.java", "diffHunk": "@@ -0,0 +1,583 @@\n+package acceptance;\n+\n+import com.google.common.io.Resources;\n+import io.digdag.client.DigdagClient;\n+import io.digdag.client.api.Id;\n+import io.digdag.client.api.RestSessionAttempt;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import utils.CommandStatus;\n+import utils.TemporaryDigdagServer;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static utils.TestUtils.addWorkflow;\n+import static utils.TestUtils.getAttemptId;\n+import static utils.TestUtils.main;\n+\n+public class GroupRetryIT\n+{\n+    @Rule\n+    public TemporaryFolder folder = new TemporaryFolder();\n+\n+    @Rule\n+    public TemporaryDigdagServer server = TemporaryDigdagServer.of();\n+\n+    private Path config;\n+    private Path projectDir;\n+\n+    @Before\n+    public void setUp()\n+            throws Exception\n+    {\n+        config = folder.newFile().toPath();\n+\n+        projectDir = folder.getRoot().toPath().resolve(\"group_retry\");\n+        Files.createDirectory(projectDir);\n+    }\n+\n+    @Test\n+    public void testGroupRetry()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"1-2c\", false);\n+\n+        // Push a new revision\n+        pushRevision(\"acceptance/group_retry/retry-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"1-2a\", true);\n+        assertOutputExists(retry1 + \"1-2b\", true);\n+        assertOutputExists(retry1 + \"1-2c\", false);\n+\n+        // Retry with the latest fixed revision & resume failed\n+        Id retry2;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry2 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry2).getSuccess(), is(true));\n+\n+        assertOutputExists(retry2 + \"2-1\", false);  // skipped\n+        assertOutputExists(retry2 + \"2-2a\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"2-2b\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"2-2c\", true);\n+\n+        // Retry with the latest fixed revision & resume all\n+        Id retry3;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.code(), is(0));\n+            retry3 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry3).getSuccess(), is(true));\n+\n+        assertOutputExists(retry3 + \"2-1\", true);\n+        assertOutputExists(retry3 + \"2-2a\", true);\n+        assertOutputExists(retry3 + \"2-2b\", true);\n+        assertOutputExists(retry3 + \"2-2c\", true);\n+\n+        // Push another new revision\n+        pushRevision(\"acceptance/group_retry/retry-3.dig\", \"test\");\n+\n+        // Retry with the latest fixed revision & resume from\n+        Id retry4;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume-from\", \"+step2+a\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry4 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry4).getSuccess(), is(true));\n+\n+        assertOutputExists(retry4 + \"3-1\", false); // skipped\n+        assertOutputExists(retry4 + \"3-2a\", true);\n+        assertOutputExists(retry4 + \"3-2b\", true);\n+        assertOutputExists(retry4 + \"3-2c\", true);\n+    }\n+\n+    @Test\n+    public void testGroupRetryWithLoop()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-loop-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2c\", false);\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-loop-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"0-1-2a\", true);\n+        assertOutputExists(retry1 + \"0-1-2b\", true);\n+        assertOutputExists(retry1 + \"0-1-2c\", false);\n+\n+        // Retry with the latest fixed revision & resume failed\n+        Id retry2;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry2 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry2).getSuccess(), is(true));\n+\n+        assertOutputExists(retry2 + \"2-1\", false);  // skipped\n+        assertOutputExists(retry2 + \"0-2-2a\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"0-2-2b\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"0-2-2c\", true);\n+        assertOutputExists(retry2 + \"2-2-2c\", true);\n+\n+        // Retry with the latest fixed revision & resume all\n+        Id retry3;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.code(), is(0));\n+            retry3 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry3).getSuccess(), is(true));\n+\n+        assertOutputExists(retry3 + \"2-1\", true);\n+        assertOutputExists(retry3 + \"0-2-2a\", true);\n+        assertOutputExists(retry3 + \"0-2-2b\", true);\n+        assertOutputExists(retry3 + \"0-2-2c\", true);\n+        assertOutputExists(retry3 + \"2-2-2c\", true);\n+\n+        // Push another new revision\n+        pushRevision(\"acceptance/group_retry/retry-with-loop-3.dig\", \"test\");\n+\n+        // Retry with the latest fixed revision & resume from\n+        Id retry4;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume-from\", \"+step2\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry4 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry4).getSuccess(), is(true));\n+\n+        assertOutputExists(retry4 + \"3-1\", false); // skipped\n+        assertOutputExists(retry4 + \"0-3-2a\", true);\n+        assertOutputExists(retry4 + \"0-3-2b\", true);\n+        assertOutputExists(retry4 + \"0-3-2c\", true);\n+        assertOutputExists(retry4 + \"2-3-2c\", true);\n+    }\n+\n+    @Test\n+    public void testGroupRetryWithNestedGroup()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-nested-group-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"1-2c\", false);\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-nested-group-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"1-2a\", true);\n+        assertOutputExists(retry1 + \"1-2b\", true);\n+        assertOutputExists(retry1 + \"1-2c\", false);\n+\n+        // Retry with the latest fixed revision & resume failed\n+        Id retry2;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry2 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry2).getSuccess(), is(true));\n+\n+        assertOutputExists(retry2 + \"2-1\", true);   // no-skipped, +group1 has _retry\n+        assertOutputExists(retry2 + \"2-2a\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"2-2b\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"2-2c\", true);\n+\n+        // Retry with the latest fixed revision & resume all\n+        Id retry3;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.code(), is(0));\n+            retry3 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry3).getSuccess(), is(true));\n+\n+        assertOutputExists(retry3 + \"2-1\", true);\n+        assertOutputExists(retry3 + \"2-2a\", true);\n+        assertOutputExists(retry3 + \"2-2b\", true);\n+        assertOutputExists(retry3 + \"2-2c\", true);\n+\n+        // Push another new revision\n+        pushRevision(\"acceptance/group_retry/retry-with-nested-group-3.dig\", \"test\");\n+\n+        // Retry with the latest fixed revision & resume from\n+        Id retry4;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume-from\", \"+group1+step2+a\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry4 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry4).getSuccess(), is(true));\n+\n+        assertOutputExists(retry4 + \"3-1\", false); // skipped\n+        assertOutputExists(retry4 + \"3-2a\", true);\n+        assertOutputExists(retry4 + \"3-2b\", true);\n+        assertOutputExists(retry4 + \"3-2c\", true);\n+    }\n+\n+    @Test\n+    public void testGroupRetryWithCall()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        addWorkflow(projectDir, \"acceptance/group_retry/child.dig\");\n+        pushRevision(\"acceptance/group_retry/retry-with-call-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"1-2c\", false);\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-call-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"1-2a\", true);\n+        assertOutputExists(retry1 + \"1-2b\", true);\n+        assertOutputExists(retry1 + \"1-2c\", false);\n+\n+\n+        // Retry with the latest fixed revision & resume failed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ce47a9f6244c277506da513e425d7d25b79f16e"}, "originalPosition": 478}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMDgwODE0", "url": "https://github.com/treasure-data/digdag/pull/1419#pullrequestreview-463080814", "createdAt": "2020-08-07T07:05:27Z", "commit": {"oid": "4ce47a9f6244c277506da513e425d7d25b79f16e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzowNToyN1rOG9O5IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzowNToyN1rOG9O5IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2MDMyMA==", "bodyText": "3-1 is better ?", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r466860320", "createdAt": "2020-08-07T07:05:27Z", "author": {"login": "yoyama"}, "path": "digdag-tests/src/test/resources/acceptance/group_retry/retry-with-call-3.dig", "diffHunk": "@@ -0,0 +1,21 @@\n+_export:\n+  outdir: ${outdir}\n+\n++step1:\n+  _export:\n+    val: 2-1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ce47a9f6244c277506da513e425d7d25b79f16e"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0ODEyMDIw", "url": "https://github.com/treasure-data/digdag/pull/1419#pullrequestreview-464812020", "createdAt": "2020-08-11T07:25:46Z", "commit": {"oid": "4ce47a9f6244c277506da513e425d7d25b79f16e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzoyNTo0N1rOG-rlhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzoyNTo0N1rOG-rlhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3OTAxNA==", "bodyText": "// Need to filter the status of the task with \"group_error\" and \"retry_count\" in stateParams.\n\n\nThis might be a silly question... but what does it mean if the group error task has no retry_count?", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r468379014", "createdAt": "2020-08-11T07:25:47Z", "author": {"login": "komamitsu"}, "path": "digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java", "diffHunk": "@@ -302,7 +302,19 @@ public Response startAttempt(RestSessionAttemptRequest request)\n                 .getSessionStore(getSiteId())\n                 .getTasksOfAttempt(attemptId);\n \n+        // Collect tasksIds in which a group retry occurred.\n+        // Need to filter the status of the task with \"group_error\" and \"retry_count\" in stateParams.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ce47a9f6244c277506da513e425d7d25b79f16e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d2b12ae63f8b8d8a492ba22af61be95b854b87e", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/0d2b12ae63f8b8d8a492ba22af61be95b854b87e", "committedDate": "2020-08-11T08:32:43Z", "message": "Update val"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fdbdb12e3e1f80482eec6821379c6d22d8c01e8", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/4fdbdb12e3e1f80482eec6821379c6d22d8c01e8", "committedDate": "2020-08-11T08:47:40Z", "message": "Add comments about group_error task has no retry_count"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eab177bee6bcd53496eb3210a362d6a6454d40e7", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/eab177bee6bcd53496eb3210a362d6a6454d40e7", "committedDate": "2020-08-11T09:09:06Z", "message": "Update description of the resume options"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16c1d4c520afa406ab270ce8e0e532ff5d040d76", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/16c1d4c520afa406ab270ce8e0e532ff5d040d76", "committedDate": "2020-08-11T09:11:55Z", "message": "Add a note in case a group-level retry is set up when resuming"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0ODcyMTEw", "url": "https://github.com/treasure-data/digdag/pull/1419#pullrequestreview-464872110", "createdAt": "2020-08-11T08:51:44Z", "commit": {"oid": "4ce47a9f6244c277506da513e425d7d25b79f16e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwODo1MTo0NFrOG-ugtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOToxNDoyNVrOG-vVKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyNjkzNQ==", "bodyText": "This validation should be removed since the above new code already filters tasks with the same condition?", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r468426935", "createdAt": "2020-08-11T08:51:44Z", "author": {"login": "komamitsu"}, "path": "digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java", "diffHunk": "@@ -302,7 +302,19 @@ public Response startAttempt(RestSessionAttemptRequest request)\n                 .getSessionStore(getSiteId())\n                 .getTasksOfAttempt(attemptId);\n \n+        // Collect tasksIds in which a group retry occurred.\n+        // Need to filter the status of the task with \"group_error\" and \"retry_count\" in stateParams.\n+        List<Long> groupRetryErrorTaskIds = tasks.stream()\n+                .filter(task -> task.getState() == TaskStateCode.GROUP_ERROR && task.getStateParams().has(\"retry_count\"))\n+                .map(task -> task.getId())\n+                .collect(Collectors.toList());\n+\n         List<Long> successTasks = tasks.stream()\n+                // If a group error has occurred,\n+                // exclude the group's child/dynamically generated tasks from successTasks\n+                // even if they are in SUCCESS state\n+                .filter(task -> task.getParentId().isPresent() && !groupRetryErrorTaskIds.contains(task.getParentId().get()))\n+                .filter(task -> !task.getFullName().contains(\"^sub\"))\n                 .filter(task -> task.getState() == TaskStateCode.SUCCESS)\n                 .map(task -> {\n                     if (!task.getParentId().isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ce47a9f6244c277506da513e425d7d25b79f16e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQzNTIyMg==", "bodyText": "duplicated key of ArchivedTask is a bit better?", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r468435222", "createdAt": "2020-08-11T09:05:40Z", "author": {"login": "komamitsu"}, "path": "digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java", "diffHunk": "@@ -344,7 +356,11 @@ private ArchivedTask matchTaskPattern(String pattern, List<ArchivedTask> tasks)\n                     tasks\n                             .stream()\n                             .collect(\n-                                    Collectors.toMap(t -> t.getFullName(), t -> t)\n+                                    // Avoid 500 error due to duplicate key ArchivedTask", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ce47a9f6244c277506da513e425d7d25b79f16e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ0MDM2MA==", "bodyText": "When are duplicated key tasks generated?", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r468440360", "createdAt": "2020-08-11T09:14:25Z", "author": {"login": "komamitsu"}, "path": "digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java", "diffHunk": "@@ -344,7 +356,11 @@ private ArchivedTask matchTaskPattern(String pattern, List<ArchivedTask> tasks)\n                     tasks\n                             .stream()\n                             .collect(\n-                                    Collectors.toMap(t -> t.getFullName(), t -> t)\n+                                    // Avoid 500 error due to duplicate key ArchivedTask", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQzNTIyMg=="}, "originalCommit": {"oid": "4ce47a9f6244c277506da513e425d7d25b79f16e"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjEyODcz", "url": "https://github.com/treasure-data/digdag/pull/1419#pullrequestreview-465612873", "createdAt": "2020-08-12T06:04:15Z", "commit": {"oid": "16c1d4c520afa406ab270ce8e0e532ff5d040d76"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjowNDoxNVrOG_S8mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjowNDoxNVrOG_S8mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyMzg5OA==", "bodyText": "All the group tasks in this test have  _retry: 2, but with https://github.com/treasure-data/digdag/pull/1419/files#diff-55f697f2343f66f95a3fd8c57c0710a6R309 the existence of  _retry: 2 switches retry --resume's behaviour. How about adding tests that don't contain _retry: 2?", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r469023898", "createdAt": "2020-08-12T06:04:15Z", "author": {"login": "komamitsu"}, "path": "digdag-tests/src/test/resources/acceptance/group_retry/retry-1.dig", "diffHunk": "@@ -0,0 +1,10 @@\n++step1:\n+  sh>: touch ${outdir}/${attempt_id}1-1.out\n++step2:\n+  _retry: 2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16c1d4c520afa406ab270ce8e0e532ff5d040d76"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f7db996097aa40c51cfd46e3f953ed194005ee2", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/0f7db996097aa40c51cfd46e3f953ed194005ee2", "committedDate": "2020-08-13T02:17:59Z", "message": "Update comments on GroupRetryIT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "698ebcfe87c991c4b91fccd73686a6b540043d1b", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/698ebcfe87c991c4b91fccd73686a6b540043d1b", "committedDate": "2020-08-13T04:21:20Z", "message": "Update comments on AttemptResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25c1458049e213f25a02df601903a11a8388254a", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/25c1458049e213f25a02df601903a11a8388254a", "committedDate": "2020-08-13T04:24:21Z", "message": "Add test cases that do not contain _retry on group"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3Mzc1NDE1", "url": "https://github.com/treasure-data/digdag/pull/1419#pullrequestreview-467375415", "createdAt": "2020-08-14T07:52:53Z", "commit": {"oid": "25c1458049e213f25a02df601903a11a8388254a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzo1Mjo1M1rOHArDyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzo1Mjo1M1rOHArDyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ2NzUyOQ==", "bodyText": "A bit uncertain.\nI am not sure, but the following may be better.\n\nIf _retry is set to each nested groups, it will resume from the top of the group.", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r470467529", "createdAt": "2020-08-14T07:52:53Z", "author": {"login": "yoyama"}, "path": "digdag-docs/src/command_reference.rst", "diffHunk": "@@ -512,6 +512,8 @@ Examples:\n \n :command:`--resume`\n   Retry only failed tasks. Successfully finished tasks are skipped.\n+  Note that if a retry is set up at the group level (not task level), it will resume from the beginning of the group, not only failed tasks.\n+  The same applies to the nested group.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25c1458049e213f25a02df601903a11a8388254a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8a310d88ea76ba40b984b87b7eaeea16da848ea", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/e8a310d88ea76ba40b984b87b7eaeea16da848ea", "committedDate": "2020-08-17T00:14:04Z", "message": "Update description of the resume options for nested groups"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4027, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}