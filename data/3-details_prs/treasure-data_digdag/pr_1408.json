{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMTk3OTY3", "number": 1408, "title": "Retry on rate limit of AWS API in EcsCommandExecutor", "bodyText": "#1356 mitigated the rate limit of AWSLogs.getLogEvents().\nBut another API calls in EcsCommandExecutor have possibility to fail with rate limit.\nThis PR introduce comprehensive rate limit retry in DefaultEcsClient and replace #1356 fix with it.", "createdAt": "2020-05-21T07:31:10Z", "url": "https://github.com/treasure-data/digdag/pull/1408", "merged": true, "mergeCommit": {"oid": "87887ef890b14e66fc7cad2bc477488b993a13e9"}, "closed": true, "closedAt": "2020-05-25T03:07:17Z", "author": {"login": "yoyama"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjYcEsgH2gAyNDIxMTk3OTY3OjcyNWVlZjJhMTNlMGExMDMxZmU0YmNlM2RmNTYzN2UzNDhmNzRiZmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcknDO1gFqTQxNzQzMjkwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "725eef2a13e0a1031fe4bce3df5637e348f74bfd", "author": {"user": null}, "url": "https://github.com/treasure-data/digdag/commit/725eef2a13e0a1031fe4bce3df5637e348f74bfd", "committedDate": "2020-05-21T07:21:49Z", "message": "Implement comprehensive retry on rate limit of AWS API in EcsCommandExecutor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a05d29a9beba0f69bcc5fb8410341318132ad0b7", "author": {"user": null}, "url": "https://github.com/treasure-data/digdag/commit/a05d29a9beba0f69bcc5fb8410341318132ad0b7", "committedDate": "2020-05-21T08:15:40Z", "message": "Skip waitWithRandomJitter() before first call."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NjA2Nzc4", "url": "https://github.com/treasure-data/digdag/pull/1408#pullrequestreview-416606778", "createdAt": "2020-05-22T02:18:20Z", "commit": {"oid": "a05d29a9beba0f69bcc5fb8410341318132ad0b7"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMjoxODoyMVrOGZInqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMzoxMzo0MVrOGZJYDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwODgwOQ==", "bodyText": "Calling Thread.interrupt() here would be good to avoid blocking shutdown sequence.", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429008809", "createdAt": "2020-05-22T02:18:21Z", "author": {"login": "komamitsu"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/DefaultEcsClient.java", "diffHunk": "@@ -224,13 +249,61 @@ public GetLogEventsResult getLog(\n         if (nextToken.isPresent()) {\n             request.withNextToken(\"f/\" + nextToken.get());\n         }\n-        return logs.getLogEvents(request);\n+        return retryOnRateLimit(() -> logs.getLogEvents(request));\n     }\n \n     @Override\n     public void close()\n             throws IOException\n     {\n-        client.shutdown();\n+        retryOnRateLimit(() -> {\n+            client.shutdown();\n+            return true; //avoid restrict on generics with void\n+        });\n+    }\n+\n+    /**\n+     * Retry func if ThrottlingException happen.\n+     * Retry interval gradually increases with random jitter.\n+     * @param func\n+     * @param <T>\n+     * @return\n+     * @throws AmazonServiceException\n+     */\n+    @VisibleForTesting\n+    public <T> T retryOnRateLimit(Supplier<T> func) throws AmazonServiceException\n+    {\n+        //ToDo  AmazonECSClient has its own retry policy mechanism. Evaluate it and consider it as replacement of this method.\n+        final int baseIncrementalSecs = 10;\n+        for (int i = 0; i < rateLimitMaxRetry; i++) {\n+            try {\n+                return func.get();\n+            }\n+            catch (AmazonServiceException ex) {\n+                if (RetryUtils.isThrottlingException(ex)) {\n+                    logger.debug(\"Rate exceed: {}. Will be retried.\", ex.toString());\n+                    // Max of baseWaitSecs is rateLimitMaxBaseWaitSecs\n+                    final long baseWaitSecs = baseIncrementalSecs * i > rateLimitMaxBaseWaitSecs ? rateLimitMaxBaseWaitSecs: baseIncrementalSecs * i;\n+                    waitWithRandomJitter(baseWaitSecs, rateLimitMaxJitterSecs);\n+                }\n+                else {\n+                    throw ex;\n+                }\n+            }\n+        }\n+        logger.error(\"Failed to call EcsClient method after Retried {} times\", rateLimitMaxRetry);\n+        throw new RuntimeException(\"Failed to call EcsClient method\");\n+    }\n+\n+    @VisibleForTesting\n+    public void waitWithRandomJitter(long baseWaitSecs, long baseJitterSecs)\n+    {\n+        try {\n+            long jitterSecs = (long) (baseJitterSecs * Math.random());\n+            Thread.sleep((baseWaitSecs + jitterSecs) * 1000);\n+        }\n+        catch (InterruptedException ex) {\n+            // Nothing to do", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05d29a9beba0f69bcc5fb8410341318132ad0b7"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwOTYyNA==", "bodyText": "Or just this(config, client, logs, 60, 10, 50) ?", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429009624", "createdAt": "2020-05-22T02:22:03Z", "author": {"login": "komamitsu"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/DefaultEcsClient.java", "diffHunk": "@@ -57,6 +62,26 @@ protected DefaultEcsClient(\n         this.config = config;\n         this.client = client;\n         this.logs = logs;\n+        this.rateLimitMaxRetry = 60;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05d29a9beba0f69bcc5fb8410341318132ad0b7"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxNjEzOQ==", "bodyText": "Is this idempotent? Retrying this call might create multiple tasks?", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429016139", "createdAt": "2020-05-22T02:50:31Z", "author": {"login": "komamitsu"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/DefaultEcsClient.java", "diffHunk": "@@ -77,7 +102,7 @@ public RunTaskResult submitTask(final RunTaskRequest request)\n             throws ConfigException\n     {\n         try {\n-            return client.runTask(request);\n+            return retryOnRateLimit(() -> client.runTask(request));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05d29a9beba0f69bcc5fb8410341318132ad0b7"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxNjQ0OQ==", "bodyText": "I guess this is idempotent, but can you check if it's okay to call this twice or more just in case?", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429016449", "createdAt": "2020-05-22T02:51:51Z", "author": {"login": "komamitsu"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/DefaultEcsClient.java", "diffHunk": "@@ -200,7 +225,7 @@ public void stopTask(final String cluster, final String taskArn)\n         final StopTaskRequest request = new StopTaskRequest()\n                 .withCluster(cluster)\n                 .withTask(taskArn);\n-        client.stopTask(request);\n+        retryOnRateLimit(() -> client.stopTask(request));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05d29a9beba0f69bcc5fb8410341318132ad0b7"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxOTY5Nw==", "bodyText": "Returning null would be a bit better? I guess it'll be handled as T=Void in this case", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429019697", "createdAt": "2020-05-22T03:06:55Z", "author": {"login": "komamitsu"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/DefaultEcsClient.java", "diffHunk": "@@ -224,13 +249,61 @@ public GetLogEventsResult getLog(\n         if (nextToken.isPresent()) {\n             request.withNextToken(\"f/\" + nextToken.get());\n         }\n-        return logs.getLogEvents(request);\n+        return retryOnRateLimit(() -> logs.getLogEvents(request));\n     }\n \n     @Override\n     public void close()\n             throws IOException\n     {\n-        client.shutdown();\n+        retryOnRateLimit(() -> {\n+            client.shutdown();\n+            return true; //avoid restrict on generics with void", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05d29a9beba0f69bcc5fb8410341318132ad0b7"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyMDI4MQ==", "bodyText": "I don't have a strong opinion on this, but I think this can be an instance variable.", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429020281", "createdAt": "2020-05-22T03:09:29Z", "author": {"login": "komamitsu"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/DefaultEcsClient.java", "diffHunk": "@@ -224,13 +249,61 @@ public GetLogEventsResult getLog(\n         if (nextToken.isPresent()) {\n             request.withNextToken(\"f/\" + nextToken.get());\n         }\n-        return logs.getLogEvents(request);\n+        return retryOnRateLimit(() -> logs.getLogEvents(request));\n     }\n \n     @Override\n     public void close()\n             throws IOException\n     {\n-        client.shutdown();\n+        retryOnRateLimit(() -> {\n+            client.shutdown();\n+            return true; //avoid restrict on generics with void\n+        });\n+    }\n+\n+    /**\n+     * Retry func if ThrottlingException happen.\n+     * Retry interval gradually increases with random jitter.\n+     * @param func\n+     * @param <T>\n+     * @return\n+     * @throws AmazonServiceException\n+     */\n+    @VisibleForTesting\n+    public <T> T retryOnRateLimit(Supplier<T> func) throws AmazonServiceException\n+    {\n+        //ToDo  AmazonECSClient has its own retry policy mechanism. Evaluate it and consider it as replacement of this method.\n+        final int baseIncrementalSecs = 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05d29a9beba0f69bcc5fb8410341318132ad0b7"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyMDY4OA==", "bodyText": "This can be replaced with Math.min(baseIncrementalSecs * i, rateLimitMaxBaseWaitSecs)", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429020688", "createdAt": "2020-05-22T03:11:25Z", "author": {"login": "komamitsu"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/DefaultEcsClient.java", "diffHunk": "@@ -224,13 +249,61 @@ public GetLogEventsResult getLog(\n         if (nextToken.isPresent()) {\n             request.withNextToken(\"f/\" + nextToken.get());\n         }\n-        return logs.getLogEvents(request);\n+        return retryOnRateLimit(() -> logs.getLogEvents(request));\n     }\n \n     @Override\n     public void close()\n             throws IOException\n     {\n-        client.shutdown();\n+        retryOnRateLimit(() -> {\n+            client.shutdown();\n+            return true; //avoid restrict on generics with void\n+        });\n+    }\n+\n+    /**\n+     * Retry func if ThrottlingException happen.\n+     * Retry interval gradually increases with random jitter.\n+     * @param func\n+     * @param <T>\n+     * @return\n+     * @throws AmazonServiceException\n+     */\n+    @VisibleForTesting\n+    public <T> T retryOnRateLimit(Supplier<T> func) throws AmazonServiceException\n+    {\n+        //ToDo  AmazonECSClient has its own retry policy mechanism. Evaluate it and consider it as replacement of this method.\n+        final int baseIncrementalSecs = 10;\n+        for (int i = 0; i < rateLimitMaxRetry; i++) {\n+            try {\n+                return func.get();\n+            }\n+            catch (AmazonServiceException ex) {\n+                if (RetryUtils.isThrottlingException(ex)) {\n+                    logger.debug(\"Rate exceed: {}. Will be retried.\", ex.toString());\n+                    // Max of baseWaitSecs is rateLimitMaxBaseWaitSecs\n+                    final long baseWaitSecs = baseIncrementalSecs * i > rateLimitMaxBaseWaitSecs ? rateLimitMaxBaseWaitSecs: baseIncrementalSecs * i;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05d29a9beba0f69bcc5fb8410341318132ad0b7"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyMTE5OQ==", "bodyText": "Do you think it's a good idea to collect metrics of this retry over cases?", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429021199", "createdAt": "2020-05-22T03:13:41Z", "author": {"login": "komamitsu"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/DefaultEcsClient.java", "diffHunk": "@@ -224,13 +249,61 @@ public GetLogEventsResult getLog(\n         if (nextToken.isPresent()) {\n             request.withNextToken(\"f/\" + nextToken.get());\n         }\n-        return logs.getLogEvents(request);\n+        return retryOnRateLimit(() -> logs.getLogEvents(request));\n     }\n \n     @Override\n     public void close()\n             throws IOException\n     {\n-        client.shutdown();\n+        retryOnRateLimit(() -> {\n+            client.shutdown();\n+            return true; //avoid restrict on generics with void\n+        });\n+    }\n+\n+    /**\n+     * Retry func if ThrottlingException happen.\n+     * Retry interval gradually increases with random jitter.\n+     * @param func\n+     * @param <T>\n+     * @return\n+     * @throws AmazonServiceException\n+     */\n+    @VisibleForTesting\n+    public <T> T retryOnRateLimit(Supplier<T> func) throws AmazonServiceException\n+    {\n+        //ToDo  AmazonECSClient has its own retry policy mechanism. Evaluate it and consider it as replacement of this method.\n+        final int baseIncrementalSecs = 10;\n+        for (int i = 0; i < rateLimitMaxRetry; i++) {\n+            try {\n+                return func.get();\n+            }\n+            catch (AmazonServiceException ex) {\n+                if (RetryUtils.isThrottlingException(ex)) {\n+                    logger.debug(\"Rate exceed: {}. Will be retried.\", ex.toString());\n+                    // Max of baseWaitSecs is rateLimitMaxBaseWaitSecs\n+                    final long baseWaitSecs = baseIncrementalSecs * i > rateLimitMaxBaseWaitSecs ? rateLimitMaxBaseWaitSecs: baseIncrementalSecs * i;\n+                    waitWithRandomJitter(baseWaitSecs, rateLimitMaxJitterSecs);\n+                }\n+                else {\n+                    throw ex;\n+                }\n+            }\n+        }\n+        logger.error(\"Failed to call EcsClient method after Retried {} times\", rateLimitMaxRetry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05d29a9beba0f69bcc5fb8410341318132ad0b7"}, "originalPosition": 175}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afa6bd968d86bb9fdd9e0815c2b907eefc96a878", "author": {"user": null}, "url": "https://github.com/treasure-data/digdag/commit/afa6bd968d86bb9fdd9e0815c2b907eefc96a878", "committedDate": "2020-05-22T07:28:58Z", "message": "Refactoring based on the review."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NDMyOTA1", "url": "https://github.com/treasure-data/digdag/pull/1408#pullrequestreview-417432905", "createdAt": "2020-05-25T02:57:11Z", "commit": {"oid": "afa6bd968d86bb9fdd9e0815c2b907eefc96a878"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4021, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}