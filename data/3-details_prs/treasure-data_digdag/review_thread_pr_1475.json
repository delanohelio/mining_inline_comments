{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MTUyMDY0", "number": 1475, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOToxMToxNVrOE3IQgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOToyNDoyN1rOE3InBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjQyNDM0OnYy", "diffSide": "RIGHT", "path": "digdag-core/src/main/java/io/digdag/core/agent/InProcessTaskServerApi.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOToxMToxNVrOHwSypg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOToyNjowMFrOHwTZbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwMTU3NA==", "bodyText": "InProcessTaskServerApi.class is better ?", "url": "https://github.com/treasure-data/digdag/pull/1475#discussion_r520401574", "createdAt": "2020-11-10T09:11:15Z", "author": {"login": "yoyama"}, "path": "digdag-core/src/main/java/io/digdag/core/agent/InProcessTaskServerApi.java", "diffHunk": "@@ -7,11 +7,28 @@\n import io.digdag.spi.TaskQueueClient;\n import io.digdag.core.queue.TaskQueueServerManager;\n import io.digdag.core.workflow.WorkflowExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Comparator;\n import java.util.List;\n+import java.util.function.ToLongFunction;\n+import java.util.stream.Collectors;\n \n public class InProcessTaskServerApi\n     implements TaskServerApi\n {\n+    private static final Logger logger = LoggerFactory.getLogger(WorkflowExecutor.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82717134268a2a4c4bd1b05a439df68cadb20e6d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQxMTUwMw==", "bodyText": "Oh, good catch! I moved the code from WorkflowExecutor carelessly.\nI'll fix it soon. Thanks", "url": "https://github.com/treasure-data/digdag/pull/1475#discussion_r520411503", "createdAt": "2020-11-10T09:26:00Z", "author": {"login": "komamitsu"}, "path": "digdag-core/src/main/java/io/digdag/core/agent/InProcessTaskServerApi.java", "diffHunk": "@@ -7,11 +7,28 @@\n import io.digdag.spi.TaskQueueClient;\n import io.digdag.core.queue.TaskQueueServerManager;\n import io.digdag.core.workflow.WorkflowExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Comparator;\n import java.util.List;\n+import java.util.function.ToLongFunction;\n+import java.util.stream.Collectors;\n \n public class InProcessTaskServerApi\n     implements TaskServerApi\n {\n+    private static final Logger logger = LoggerFactory.getLogger(WorkflowExecutor.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwMTU3NA=="}, "originalCommit": {"oid": "82717134268a2a4c4bd1b05a439df68cadb20e6d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjQ1MTExOnYy", "diffSide": "RIGHT", "path": "digdag-core/src/main/java/io/digdag/core/agent/InProcessTaskServerApi.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOToxNzo0MVrOHwTCxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDowNjoxOFrOHwVF2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwNTcwMg==", "bodyText": "I am curious the naming rule of the function.\nIs there any reference to use capital letter with _ for the var name of function ?", "url": "https://github.com/treasure-data/digdag/pull/1475#discussion_r520405702", "createdAt": "2020-11-10T09:17:41Z", "author": {"login": "yoyama"}, "path": "digdag-core/src/main/java/io/digdag/core/agent/InProcessTaskServerApi.java", "diffHunk": "@@ -7,11 +7,28 @@\n import io.digdag.spi.TaskQueueClient;\n import io.digdag.core.queue.TaskQueueServerManager;\n import io.digdag.core.workflow.WorkflowExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Comparator;\n import java.util.List;\n+import java.util.function.ToLongFunction;\n+import java.util.stream.Collectors;\n \n public class InProcessTaskServerApi\n     implements TaskServerApi\n {\n+    private static final Logger logger = LoggerFactory.getLogger(WorkflowExecutor.class);\n+    private final ToLongFunction<TaskQueueLock> CONV_FUNC_FROM_TASK_QUEUE_LOCK_TO_INT = taskQueueLock -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82717134268a2a4c4bd1b05a439df68cadb20e6d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQxMzcxMw==", "bodyText": "Oops. I should have made this static since this variable is a constant... I'll fix it", "url": "https://github.com/treasure-data/digdag/pull/1475#discussion_r520413713", "createdAt": "2020-11-10T09:29:10Z", "author": {"login": "komamitsu"}, "path": "digdag-core/src/main/java/io/digdag/core/agent/InProcessTaskServerApi.java", "diffHunk": "@@ -7,11 +7,28 @@\n import io.digdag.spi.TaskQueueClient;\n import io.digdag.core.queue.TaskQueueServerManager;\n import io.digdag.core.workflow.WorkflowExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Comparator;\n import java.util.List;\n+import java.util.function.ToLongFunction;\n+import java.util.stream.Collectors;\n \n public class InProcessTaskServerApi\n     implements TaskServerApi\n {\n+    private static final Logger logger = LoggerFactory.getLogger(WorkflowExecutor.class);\n+    private final ToLongFunction<TaskQueueLock> CONV_FUNC_FROM_TASK_QUEUE_LOCK_TO_INT = taskQueueLock -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwNTcwMg=="}, "originalCommit": {"oid": "82717134268a2a4c4bd1b05a439df68cadb20e6d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQzOTI1Ng==", "bodyText": "fyi: Constants on https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html just in case", "url": "https://github.com/treasure-data/digdag/pull/1475#discussion_r520439256", "createdAt": "2020-11-10T10:06:18Z", "author": {"login": "komamitsu"}, "path": "digdag-core/src/main/java/io/digdag/core/agent/InProcessTaskServerApi.java", "diffHunk": "@@ -7,11 +7,28 @@\n import io.digdag.spi.TaskQueueClient;\n import io.digdag.core.queue.TaskQueueServerManager;\n import io.digdag.core.workflow.WorkflowExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Comparator;\n import java.util.List;\n+import java.util.function.ToLongFunction;\n+import java.util.stream.Collectors;\n \n public class InProcessTaskServerApi\n     implements TaskServerApi\n {\n+    private static final Logger logger = LoggerFactory.getLogger(WorkflowExecutor.class);\n+    private final ToLongFunction<TaskQueueLock> CONV_FUNC_FROM_TASK_QUEUE_LOCK_TO_INT = taskQueueLock -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwNTcwMg=="}, "originalCommit": {"oid": "82717134268a2a4c4bd1b05a439df68cadb20e6d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjQ2MTM3OnYy", "diffSide": "RIGHT", "path": "digdag-core/src/main/java/io/digdag/core/agent/InProcessTaskServerApi.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOToxOTo1M1rOHwTIyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOTozMjozMFrOHwTrRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwNzI0Mw==", "bodyText": "Is there any possible case to execute this catch(){} code or just in case ?", "url": "https://github.com/treasure-data/digdag/pull/1475#discussion_r520407243", "createdAt": "2020-11-10T09:19:53Z", "author": {"login": "yoyama"}, "path": "digdag-core/src/main/java/io/digdag/core/agent/InProcessTaskServerApi.java", "diffHunk": "@@ -7,11 +7,28 @@\n import io.digdag.spi.TaskQueueClient;\n import io.digdag.core.queue.TaskQueueServerManager;\n import io.digdag.core.workflow.WorkflowExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Comparator;\n import java.util.List;\n+import java.util.function.ToLongFunction;\n+import java.util.stream.Collectors;\n \n public class InProcessTaskServerApi\n     implements TaskServerApi\n {\n+    private static final Logger logger = LoggerFactory.getLogger(WorkflowExecutor.class);\n+    private final ToLongFunction<TaskQueueLock> CONV_FUNC_FROM_TASK_QUEUE_LOCK_TO_INT = taskQueueLock -> {\n+        try {\n+            return WorkflowExecutor.parseTaskIdFromEncodedQueuedTaskName(taskQueueLock.getUniqueName());\n+        }\n+        catch (Throwable e) {\n+            logger.warn(\"Failed to convert TaskQueueLock.uniqueName to integer. The `uniqueName` will be handled as 0\", e);\n+            return 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82717134268a2a4c4bd1b05a439df68cadb20e6d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQxNjA3MA==", "bodyText": "Basically for just-in-case. I was thinking of case that uniqueName unexpectedly contains non-digit string although I\"m not sure it could happen.", "url": "https://github.com/treasure-data/digdag/pull/1475#discussion_r520416070", "createdAt": "2020-11-10T09:32:30Z", "author": {"login": "komamitsu"}, "path": "digdag-core/src/main/java/io/digdag/core/agent/InProcessTaskServerApi.java", "diffHunk": "@@ -7,11 +7,28 @@\n import io.digdag.spi.TaskQueueClient;\n import io.digdag.core.queue.TaskQueueServerManager;\n import io.digdag.core.workflow.WorkflowExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Comparator;\n import java.util.List;\n+import java.util.function.ToLongFunction;\n+import java.util.stream.Collectors;\n \n public class InProcessTaskServerApi\n     implements TaskServerApi\n {\n+    private static final Logger logger = LoggerFactory.getLogger(WorkflowExecutor.class);\n+    private final ToLongFunction<TaskQueueLock> CONV_FUNC_FROM_TASK_QUEUE_LOCK_TO_INT = taskQueueLock -> {\n+        try {\n+            return WorkflowExecutor.parseTaskIdFromEncodedQueuedTaskName(taskQueueLock.getUniqueName());\n+        }\n+        catch (Throwable e) {\n+            logger.warn(\"Failed to convert TaskQueueLock.uniqueName to integer. The `uniqueName` will be handled as 0\", e);\n+            return 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwNzI0Mw=="}, "originalCommit": {"oid": "82717134268a2a4c4bd1b05a439df68cadb20e6d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjQ4MTk2OnYy", "diffSide": "RIGHT", "path": "digdag-core/src/main/java/io/digdag/core/database/DatabaseSessionStoreManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOToyNDoyN1rOHwTVYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDowMDoxN1rOHwU10Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQxMDQ2NQ==", "bodyText": "IIRC the purpose of the sub query is fixing the order of lock of the rows.\nIf so, is there any formal documentation description on it ?\nI have a minor concern whether it depends on the specific Pg version or undocumented internal behavior or not.", "url": "https://github.com/treasure-data/digdag/pull/1475#discussion_r520410465", "createdAt": "2020-11-10T09:24:27Z", "author": {"login": "yoyama"}, "path": "digdag-core/src/main/java/io/digdag/core/database/DatabaseSessionStoreManager.java", "diffHunk": "@@ -1745,6 +1759,18 @@ StoredSession upsertAndLockSession(@Bind(\"projectId\") int projectId,\n                 \" for update skip locked\")\n         Long lockTaskIfNotLocked(@Bind(\"id\") long taskId);\n \n+        @SqlUpdate(\"update tasks\" +\n+                \" set updated_at = now(), retry_at = NULL, state = \" + TaskStateCode.READY_CODE +\n+                \" from (\" +\n+                  \"select id from tasks\" +\n+                  \" where state in (\" + TaskStateCode.RETRY_WAITING_CODE +\",\" + TaskStateCode.GROUP_RETRY_WAITING_CODE + \")\" +\n+                  \" and retry_at \\\\<= now()\" +\n+                  \" order by id for update\" +\n+                \" ) lck\" +\n+                \" where tasks.id = lck.id\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82717134268a2a4c4bd1b05a439df68cadb20e6d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQzNTE1Mw==", "bodyText": "As far as I know, the official document explicitly doesn't mention this issue and behavior. But we can find some explanations about the issue.\n\nUPDATE deals with rows in order they are fetched from a heap. In a common case it can be considered as unordered.\n\nhttps://www.postgresql.org/message-id/CAKOSWNkb3Zy_YFQzwyRw3MRrU10LrMj04%2BHdByfQu6M1S5B7mg%40mail.gmail.com\nAnd I think you can easily find this workaround (e.g. in the above post or https://stackoverflow.com/a/27263824/5101185) although I can't 100% guarantee this behavior won't change forever.", "url": "https://github.com/treasure-data/digdag/pull/1475#discussion_r520435153", "createdAt": "2020-11-10T10:00:17Z", "author": {"login": "komamitsu"}, "path": "digdag-core/src/main/java/io/digdag/core/database/DatabaseSessionStoreManager.java", "diffHunk": "@@ -1745,6 +1759,18 @@ StoredSession upsertAndLockSession(@Bind(\"projectId\") int projectId,\n                 \" for update skip locked\")\n         Long lockTaskIfNotLocked(@Bind(\"id\") long taskId);\n \n+        @SqlUpdate(\"update tasks\" +\n+                \" set updated_at = now(), retry_at = NULL, state = \" + TaskStateCode.READY_CODE +\n+                \" from (\" +\n+                  \"select id from tasks\" +\n+                  \" where state in (\" + TaskStateCode.RETRY_WAITING_CODE +\",\" + TaskStateCode.GROUP_RETRY_WAITING_CODE + \")\" +\n+                  \" and retry_at \\\\<= now()\" +\n+                  \" order by id for update\" +\n+                \" ) lck\" +\n+                \" where tasks.id = lck.id\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQxMDQ2NQ=="}, "originalCommit": {"oid": "82717134268a2a4c4bd1b05a439df68cadb20e6d"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1157, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}