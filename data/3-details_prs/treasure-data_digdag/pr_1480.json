{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4MjE1MTU0", "number": 1480, "title": "Update handling of a task with CANCEL_REQUESTED flag", "bodyText": "Overview\nCurrently, there is a problem with post-processing when a task is canceled.\nThis PR adds support for handling cleanup when a task is canceled, with the following changes.\nWorkflowExecutor\n\nDon't setToCanceled on enqueueTask and let the OperatorManager do the canceling (= canceled by taskFailed).\n\nIf a task has a CANCEL_REQUESTED flag during/after execution, it is necessary to perform the cleanup process.\nAnd task transitions will be changed as follows:\n\nAs-Is: RETRY_WAITING > READY > CANCELED\nTo-Be: RETRY_WAITING > READY > RUNNING > CANCELED \n  \n    \n      digdag/digdag-core/src/main/java/io/digdag/core/workflow/WorkflowExecutor.java\n    \n    \n        Lines 72 to 162\n      in\n      520baa7\n    \n    \n    \n    \n\n        \n          \n           /** \n        \n\n        \n          \n            * State transitions. \n        \n\n        \n          \n            * \n        \n\n        \n          \n            * BLOCKED: \n        \n\n        \n          \n            *   propagateBlockedChildrenToReady: \n        \n\n        \n          \n            *     store.trySetChildrenBlockedToReadyOrShortCircuitPlannedOrCanceled: \n        \n\n        \n          \n            *       (if GROUPING_ONLY flag is set) : PLANNED \n        \n\n        \n          \n            *       (if CANCEL_REQUESTED flag is set) : CANCELED \n        \n\n        \n          \n            *       : READY \n        \n\n        \n          \n            *   NOTE: propagateBlockedChildrenToReady is for non-root tasks. There \n        \n\n        \n          \n            *         are no methods that changes state of BLOCKED root tasks. \n        \n\n        \n          \n            *         Instead, WorkflowExecutor.submitTasks sets PLANNED or READY \n        \n\n        \n          \n            *         state when it inserts root tasks. \n        \n\n        \n          \n            * \n        \n\n        \n          \n            * READY: \n        \n\n        \n          \n            *   enqueueReadyTasks: \n        \n\n        \n          \n            *     enqueueTask: \n        \n\n        \n          \n            *       lockedTask.setReadyToRunning: \n        \n\n        \n          \n            *         : RUNNING \n        \n\n        \n          \n            *   NOTE: because updated_at column is used as a part of identifier of \n        \n\n        \n          \n            *         queued task, updated_at must not be updated when state is READY \n        \n\n        \n          \n            *         so that enqueueReadyTasks can detect duplicated enqueuing. \n        \n\n        \n          \n            * \n        \n\n        \n          \n            * RUNNING: \n        \n\n        \n          \n            *   taskFailed: \n        \n\n        \n          \n            *     (if CANCEL_REQUESTED flag is set) lockedTask.setToCanceled: \n        \n\n        \n          \n            *       : CANCELED \n        \n\n        \n          \n            *     (if retryInterval is set) lockedTask.setRunningToRetryWaiting: \n        \n\n        \n          \n            *       : RETRY_WAITING with error \n        \n\n        \n          \n            *     (if error task exists) lockedTask.setRunningToPlannedWithDelayedError: \n        \n\n        \n          \n            *       : PLANNED with error and DELAYED_ERROR flag \n        \n\n        \n          \n            *     lockedTask.setRunningToShortCircuitError: \n        \n\n        \n          \n            *       : ERROR with error \n        \n\n        \n          \n            * \n        \n\n        \n          \n            *   taskSucceeded: \n        \n\n        \n          \n            *     (if CANCEL_REQUESTED flag is set) lockedTask.setToCanceled: \n        \n\n        \n          \n            *       : CANCELED \n        \n\n        \n          \n            *     (if subtasks or check task exist) lockedTask.setRunningToPlannedSuccessful: \n        \n\n        \n          \n            *       : PLANNED \n        \n\n        \n          \n            *     lockedTask.setRunningToShortCircuitSuccess: \n        \n\n        \n          \n            *       : SUCCESS \n        \n\n        \n          \n            * \n        \n\n        \n          \n            *   retryTask: \n        \n\n        \n          \n            *     lockedTask.setRunningToRetryWaiting: \n        \n\n        \n          \n            *       : RETRY_WAITING \n        \n\n        \n          \n            * \n        \n\n        \n          \n            * RETRY_WAITING \n        \n\n        \n          \n            *   retryRetryWaitingTasks: \n        \n\n        \n          \n            *     sm.trySetRetryWaitingToReady: \n        \n\n        \n          \n            *       : READY \n        \n\n        \n          \n            * \n        \n\n        \n          \n            * GROUP_RETRY_WAITING \n        \n\n        \n          \n            *   retryRetryWaitingTasks: \n        \n\n        \n          \n            *     sm.trySetRetryWaitingToReady: \n        \n\n        \n          \n            *       : READY \n        \n\n        \n          \n            * \n        \n\n        \n          \n            * PLANNED: \n        \n\n        \n          \n            *   setDoneFromDoneChildren: \n        \n\n        \n          \n            *     (if all children are not progressible): \n        \n\n        \n          \n            *       (if CANCEL_REQUESTED flag is set) lockedTask.setToCanceled: \n        \n\n        \n          \n            *         : CANCELED \n        \n\n        \n          \n            *       (if DELAYED_ERROR flag is set): \n        \n\n        \n          \n            *         (TODO: recovery) \n        \n\n        \n          \n            *         lockedTask.setPlannedToError: \n        \n\n        \n          \n            *           : ERROR \n        \n\n        \n          \n            *       (if DELAYED_GROUP_ERROR flag is set) lockedTask.setPlannedToGroupError: \n        \n\n        \n          \n            *         (TODO: recovery) \n        \n\n        \n          \n            *         : GROUP_ERROR \n        \n\n        \n          \n            *       (if a child with ERROR or GROUP_ERROR state exists): \n        \n\n        \n          \n            *         (if retry option is set) lockedTask.setPlannedToGroupRetryWaiting: \n        \n\n        \n          \n            *           : GROUP_RETRY_WAITING  // TODO this state needs to re-submit child tasks with BLOCKED state \n        \n\n        \n          \n            *         (if error task exists) lockedTask.setPlannedToPlannedWithDelayedGroupError \n        \n\n        \n          \n            *           : PLANNED with DELAYED_GROUP_ERROR flag \n        \n\n        \n          \n            *         lockedTask.setPlannedToGroupError \n        \n\n        \n          \n            *           : GROUP_ERROR \n        \n\n        \n          \n            *       lockedTask.setPlannedToSuccess: \n        \n\n        \n          \n            *         : SUCCESS \n        \n\n        \n          \n            * \n        \n\n        \n          \n            * GROUP_ERROR: \n        \n\n        \n          \n            *   not progressible \n        \n\n        \n          \n            * \n        \n\n        \n          \n            * SUCCESS: \n        \n\n        \n          \n            *   not progressible \n        \n\n        \n          \n            * \n        \n\n        \n          \n            * ERROR: \n        \n\n        \n          \n            *   not progressible \n        \n\n        \n          \n            * \n        \n\n        \n          \n            * CANCELED: \n        \n\n        \n          \n            *   not progressible \n        \n\n        \n          \n            * \n        \n\n        \n          \n            */ \n        \n    \n  \n\n\n\n\n^ This allows cleanup to be performed while the task is running/finished\n\n\n\nOperatorManager\n\nChanges to execute cleanup when the task is CANCEL_REQUESTED\n\nCommnadExecutor/Operator\n\nAdds cleanup functions to the Operator and CommnadExecutor interfaces and implements them in PyOperatorFactory and EcsCommandExecutor.", "createdAt": "2020-11-10T05:12:04Z", "url": "https://github.com/treasure-data/digdag/pull/1480", "merged": true, "mergeCommit": {"oid": "25cc8014abadc00d0736a985434146a1ab00b3d6"}, "closed": true, "closedAt": "2020-11-24T06:40:13Z", "author": {"login": "szyn"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbFP-hABqjM5Nzc2Nzg1MzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfiTfegH2gAyNTE4MjE1MTU0OjkxN2JlYzg2OWY4NGJmMjRlYTc4YjZkMDJiNzk3NmY2ZWQ3YzY1OGI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "520baa783235545def0492c98455cad1d56ffd5f", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/520baa783235545def0492c98455cad1d56ffd5f", "committedDate": "2020-11-10T05:10:48Z", "message": "Delete unreachable code"}, "afterCommit": {"oid": "fcf1054959b8742d19fd5ed4ccdf9e01cc82612a", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/fcf1054959b8742d19fd5ed4ccdf9e01cc82612a", "committedDate": "2020-11-10T08:39:52Z", "message": "Delete unreachable code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fcf1054959b8742d19fd5ed4ccdf9e01cc82612a", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/fcf1054959b8742d19fd5ed4ccdf9e01cc82612a", "committedDate": "2020-11-10T08:39:52Z", "message": "Delete unreachable code"}, "afterCommit": {"oid": "a51cb34494d8f94a3ac6b5adb9f63067dddc8d70", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/a51cb34494d8f94a3ac6b5adb9f63067dddc8d70", "committedDate": "2020-11-10T08:42:03Z", "message": "Delete unreachable code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a51cb34494d8f94a3ac6b5adb9f63067dddc8d70", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/a51cb34494d8f94a3ac6b5adb9f63067dddc8d70", "committedDate": "2020-11-10T08:42:03Z", "message": "Delete unreachable code"}, "afterCommit": {"oid": "f8a93069f9208ba8554e6f91f1e0d95e3be2b12d", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/f8a93069f9208ba8554e6f91f1e0d95e3be2b12d", "committedDate": "2020-11-12T06:11:53Z", "message": "Add test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01c6c99426fc1b8799d7faaf0abff8e68ab038f0", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/01c6c99426fc1b8799d7faaf0abff8e68ab038f0", "committedDate": "2020-11-12T06:54:38Z", "message": "Update handling of a task with CANCEL_REQUESTED flag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d58943924c3b858ef1ad199814ae461a95e635f", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/1d58943924c3b858ef1ad199814ae461a95e635f", "committedDate": "2020-11-12T06:54:38Z", "message": "Update SPI to allow cleanup to be executed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09567567e3b4264cf01a8591165b222ed0904698", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/09567567e3b4264cf01a8591165b222ed0904698", "committedDate": "2020-11-12T06:54:38Z", "message": "Implement cleanup feature on PyOperatorFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a02d53a6c18a292488e1a8071c4add19468272c2", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/a02d53a6c18a292488e1a8071c4add19468272c2", "committedDate": "2020-11-12T06:54:38Z", "message": "Implement cleanup feature on EcsCommandExecutor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4ce7eb2f55d4c83e4aa0e8602751754c8c78d76", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/b4ce7eb2f55d4c83e4aa0e8602751754c8c78d76", "committedDate": "2020-11-12T06:54:38Z", "message": "Delete unreachable code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f8a93069f9208ba8554e6f91f1e0d95e3be2b12d", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/f8a93069f9208ba8554e6f91f1e0d95e3be2b12d", "committedDate": "2020-11-12T06:11:53Z", "message": "Add test cases"}, "afterCommit": {"oid": "6f4fd874c58e185e5701cf2bfecc35cb35fa8b49", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/6f4fd874c58e185e5701cf2bfecc35cb35fa8b49", "committedDate": "2020-11-12T06:54:38Z", "message": "Add test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b15393bb595d776246302bf7a282dd7217e56f89", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/b15393bb595d776246302bf7a282dd7217e56f89", "committedDate": "2020-11-13T03:48:50Z", "message": "Add test cases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6f4fd874c58e185e5701cf2bfecc35cb35fa8b49", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/6f4fd874c58e185e5701cf2bfecc35cb35fa8b49", "committedDate": "2020-11-12T06:54:38Z", "message": "Add test cases"}, "afterCommit": {"oid": "b15393bb595d776246302bf7a282dd7217e56f89", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/b15393bb595d776246302bf7a282dd7217e56f89", "committedDate": "2020-11-13T03:48:50Z", "message": "Add test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTU5OTYz", "url": "https://github.com/treasure-data/digdag/pull/1480#pullrequestreview-531959963", "createdAt": "2020-11-17T01:42:57Z", "commit": {"oid": "b15393bb595d776246302bf7a282dd7217e56f89"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMTo0Mjo1N1rOH0hG1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoyNjo0NlrOH0h7UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzMDQyMg==", "bodyText": "is canceled is better?", "url": "https://github.com/treasure-data/digdag/pull/1480#discussion_r524830422", "createdAt": "2020-11-17T01:42:57Z", "author": {"login": "komamitsu"}, "path": "digdag-core/src/main/java/io/digdag/core/agent/OperatorManager.java", "diffHunk": "@@ -160,8 +160,13 @@ protected void runWithHeartbeat(TaskRequest request)\n                         callback.retryTask(request, agentId, ex.getRetryInterval().get(), ex.getStateParams(cf).get(), ex.getError(cf));\n                     }\n                     else {\n-                        logger.error(\"Task {} failed.\\n{}\", request.getTaskName(), formatExceptionMessage(ex));\n-                        logger.debug(\"\", ex);\n+                        if (request.isCancelRequested()) {\n+                            logger.warn(\"Task {} canceled.\", request.getTaskName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15393bb595d776246302bf7a282dd7217e56f89"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzODE0OQ==", "bodyText": "This is outside the scope of this PR, but I'm wondering a successfully finished task should be handled as SUCCESS not as CANCELED even if it's received a cancel request...", "url": "https://github.com/treasure-data/digdag/pull/1480#discussion_r524838149", "createdAt": "2020-11-17T02:07:21Z", "author": {"login": "komamitsu"}, "path": "digdag-core/src/main/java/io/digdag/core/workflow/WorkflowExecutor.java", "diffHunk": "@@ -104,6 +104,8 @@\n  *       : ERROR with error\n  *\n  *   taskSucceeded:\n+ *     (if CANCEL_REQUESTED flag is set) lockedTask.setToCanceled:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15393bb595d776246302bf7a282dd7217e56f89"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MTUyNA==", "bodyText": "The responsibility of this method is only cleaning up a task and cancel requests are not related to this method, I think. This method can be used by non-cancel operation in the future. So maybe this message shouldn't mention cancel requests.", "url": "https://github.com/treasure-data/digdag/pull/1480#discussion_r524841524", "createdAt": "2020-11-17T02:19:26Z", "author": {"login": "komamitsu"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "diffHunk": "@@ -289,6 +282,42 @@ public CommandStatus poll(\n         }\n     }\n \n+    @Override\n+    public void cleanup(\n+            final CommandContext commandContext,\n+            final Config state)\n+            throws IOException\n+    {\n+        final TaskRequest request = commandContext.getTaskRequest();\n+        final long attemptId = request.getAttemptId();\n+        final long taskId = request.getTaskId();\n+        final Config taskConfig = request.getConfig();\n+\n+        final ObjectNode commandStatus = state.get(\"commandStatus\", ObjectNode.class);\n+        final String clusterName = commandStatus.get(\"cluster_name\").asText();\n+        final String taskArn = commandStatus.get(\"task_arn\").asText();\n+        final EcsClientConfig clientConfig = createEcsClientConfig(Optional.of(clusterName), systemConfig, taskConfig); // ConfigException\n+\n+        try (final EcsClient client = ecsClientFactory.createClient(clientConfig)) { // ConfigException\n+            final Task task;\n+            try {\n+                task = client.getTask(clusterName, taskArn);\n+            }\n+            catch (TaskSetNotFoundException e) {\n+                final String message = s(\"Cannot get the ECS task status. attemptId=%d, taskId=%d\", attemptId, taskId);\n+                logger.warn(message);\n+                // Throw exception to stop the task\n+                throw new TaskExecutionException(message);\n+            }\n+            final String message = s(\"Command task execution cancel requested: attemptId=%d, taskId=%d\", attemptId, taskId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15393bb595d776246302bf7a282dd7217e56f89"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MjU2MA==", "bodyText": "When is this line executed?", "url": "https://github.com/treasure-data/digdag/pull/1480#discussion_r524842560", "createdAt": "2020-11-17T02:22:40Z", "author": {"login": "komamitsu"}, "path": "digdag-standards/src/main/java/io/digdag/standards/operator/PyOperatorFactory.java", "diffHunk": "@@ -124,6 +125,25 @@ public TaskResult runTask()\n                 .build();\n         }\n \n+        @Override\n+        public TaskResult cleanup(TaskRequest request)\n+        {\n+            final Path projectPath = workspace.getProjectPath(); // absolute\n+            final CommandContext commandContext = buildCommandContext(projectPath);\n+            final long attemptId = request.getAttemptId();\n+            final long taskId = request.getTaskId();\n+            Config state = TaskState.of(request).params();\n+            if (state.has(\"commandStatus\")) {\n+                logger.debug(String.format(\"Starting cleanup: attemptId=%d, taskId=%d\",  attemptId, taskId));\n+                try {\n+                    exec.cleanup(commandContext, state);\n+                } catch (IOException ex) {\n+                    throw Throwables.propagate(ex);\n+                }\n+            }\n+            return TaskResult.empty(request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15393bb595d776246302bf7a282dd7217e56f89"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0Mzg1Nw==", "bodyText": "What if runWithWorkspace throws TaskExecutionException not from operator.cleanup(mergedRequest)? It looks the clean up won't be called.", "url": "https://github.com/treasure-data/digdag/pull/1480#discussion_r524843857", "createdAt": "2020-11-17T02:26:46Z", "author": {"login": "komamitsu"}, "path": "digdag-core/src/main/java/io/digdag/core/agent/OperatorManager.java", "diffHunk": "@@ -160,8 +160,13 @@ protected void runWithHeartbeat(TaskRequest request)\n                         callback.retryTask(request, agentId, ex.getRetryInterval().get(), ex.getStateParams(cf).get(), ex.getError(cf));\n                     }\n                     else {\n-                        logger.error(\"Task {} failed.\\n{}\", request.getTaskName(), formatExceptionMessage(ex));\n-                        logger.debug(\"\", ex);\n+                        if (request.isCancelRequested()) {\n+                            logger.warn(\"Task {} canceled.\", request.getTaskName());\n+                        }\n+                        else {\n+                            logger.error(\"Task {} failed.\\n{}\", request.getTaskName(), formatExceptionMessage(ex));\n+                            logger.debug(\"\", ex);\n+                        }\n                         // TODO use debug to log stacktrace here\n                         callback.taskFailed(request, agentId, ex.getError(cf).get());  // TODO is error set?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15393bb595d776246302bf7a282dd7217e56f89"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3958144246be372dfe9f66415598bbde730b405d", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/3958144246be372dfe9f66415598bbde730b405d", "committedDate": "2020-11-17T04:35:10Z", "message": "Update comments on OperatorManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be276de9707ed5181d516f60fd09b1dba76e02c0", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/be276de9707ed5181d516f60fd09b1dba76e02c0", "committedDate": "2020-11-17T04:35:45Z", "message": "Update comments on EcsCommandExecutor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0400a75929ec5798447f5014540972d2ea3f9b76", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/0400a75929ec5798447f5014540972d2ea3f9b76", "committedDate": "2020-11-17T05:03:23Z", "message": "Update test cases on EcsCommandExecutorTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36655d268db2c1cd567d31400573f8bd8429421c", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/36655d268db2c1cd567d31400573f8bd8429421c", "committedDate": "2020-11-19T05:11:13Z", "message": "Update return type from TaskResult to void"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28e39f395156d38b65dcc3bd6c86de066b9142fa", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/28e39f395156d38b65dcc3bd6c86de066b9142fa", "committedDate": "2020-11-19T05:11:13Z", "message": "Fix formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afb261043d8778f5c77f8d05736e73578b6a47c8", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/afb261043d8778f5c77f8d05736e73578b6a47c8", "committedDate": "2020-11-19T05:29:01Z", "message": "Throw TaskExecutionException after cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9a83ef61adb260f9fd556604793b865b5446028", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/b9a83ef61adb260f9fd556604793b865b5446028", "committedDate": "2020-11-19T05:34:57Z", "message": "Avoid throwing TaskExecutionException on EcsCommandExecutor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbadbdcd3d676c3f2f54fe75edba8e3a3ca061aa", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/dbadbdcd3d676c3f2f54fe75edba8e3a3ca061aa", "committedDate": "2020-11-19T05:37:09Z", "message": "Catch Throwable instead of IOException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "687e8c02817b6a9119b3a6c16beba2c13bb2f82e", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/687e8c02817b6a9119b3a6c16beba2c13bb2f82e", "committedDate": "2020-11-19T08:00:55Z", "message": "Update tests for cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a407c11893e527460dcb23b7fb0597b1d5abf235", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/a407c11893e527460dcb23b7fb0597b1d5abf235", "committedDate": "2020-11-19T08:13:51Z", "message": "Show a debug message when cleanup method is called"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "713077d3047955afc9f2911c6d0fa70db689de92", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/713077d3047955afc9f2911c6d0fa70db689de92", "committedDate": "2020-11-18T02:03:27Z", "message": "Fix formatting"}, "afterCommit": {"oid": "a407c11893e527460dcb23b7fb0597b1d5abf235", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/a407c11893e527460dcb23b7fb0597b1d5abf235", "committedDate": "2020-11-19T08:13:51Z", "message": "Show a debug message when cleanup method is called"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MDQyNzYx", "url": "https://github.com/treasure-data/digdag/pull/1480#pullrequestreview-537042761", "createdAt": "2020-11-24T03:04:06Z", "commit": {"oid": "a407c11893e527460dcb23b7fb0597b1d5abf235"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMzowNDowN1rOH4qByQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMzowNDowN1rOH4qByQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE3MDg4OQ==", "bodyText": "Don't need to check if taskFailed is called?", "url": "https://github.com/treasure-data/digdag/pull/1480#discussion_r529170889", "createdAt": "2020-11-24T03:04:07Z", "author": {"login": "komamitsu"}, "path": "digdag-core/src/test/java/io/digdag/core/agent/OperatorManagerTest.java", "diffHunk": "@@ -88,6 +90,21 @@ public void testRunWithHeartbeatWithSuccessTask()\n         verify(callback, times(0)).retryTask(any(), any(), anyInt(), any(), any());\n     }\n \n+    @Test\n+    public void testRunWithHeartbeatWithCancelRequestedTask()\n+    {\n+        TaskRequest taskRequest = OperatorTestingUtils.newTaskRequest(simpleConfig).withIsCancelRequested(true);\n+\n+        OperatorManager om = spy(operatorManager);\n+        Operator op = mock(Operator.class);\n+        OperatorFactory of = mock(OperatorFactory.class);\n+        doReturn(of).when(registry).get(any(), any());\n+        doReturn(op).when(of).newOperator(any());\n+        om.runWithHeartbeat(taskRequest);\n+        verify(op, times(0)).run();\n+        verify(op, times(1)).cleanup(any(TaskRequest.class));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a407c11893e527460dcb23b7fb0597b1d5abf235"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "917bec869f84bf24ea78b6d02b7976f6ed7c658b", "author": {"user": {"login": "szyn", "name": "Shota Suzuki"}}, "url": "https://github.com/treasure-data/digdag/commit/917bec869f84bf24ea78b6d02b7976f6ed7c658b", "committedDate": "2020-11-24T04:46:57Z", "message": "Update test cases to verify callback methods"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4080, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}