{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MjczNjcx", "number": 1469, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMzo0NDoyM1rOExBVcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjo0MzoyN1rOExEp2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODM3NTUyOnYy", "diffSide": "RIGHT", "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/EcsClientConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMzo0NDoyM1rOHm7Jlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMzo0NDoyM1rOHm7Jlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3NzA0Nw==", "bodyText": "The reason why this const value  is public is that this is assumed to be used to set the nested config for ecs client config at taskConfig as follows.\ntaskConfig.set(EcsClientConfig.TASK_CONFIG_ECS_KEY, ecsClientConfig)", "url": "https://github.com/treasure-data/digdag/pull/1469#discussion_r510577047", "createdAt": "2020-10-23T03:44:23Z", "author": {"login": "serihiro"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/EcsClientConfig.java", "diffHunk": "@@ -2,36 +2,71 @@\n \n import com.google.common.base.Optional;\n import io.digdag.client.config.Config;\n-import io.digdag.client.config.ConfigException;\n import io.digdag.core.storage.StorageManager;\n \n-import java.util.Arrays;\n import java.util.List;\n \n public class EcsClientConfig\n {\n     private static final String SYSTEM_CONFIG_PREFIX = \"agent.command_executor.ecs.\";\n+    public static final String TASK_CONFIG_ECS_KEY = \"agent.command_executor.ecs\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fc880c1ba607c6de674f8a82bac5fa7193abcbd"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODM4MDYxOnYy", "diffSide": "RIGHT", "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/EcsClientConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMzo0NzoyOFrOHm7MSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODoyMTo1MFrOHnDrOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3NzczOQ==", "bodyText": "I hired builder pattern so that we can easily add new arguments in the future.", "url": "https://github.com/treasure-data/digdag/pull/1469#discussion_r510577739", "createdAt": "2020-10-23T03:47:28Z", "author": {"login": "serihiro"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/EcsClientConfig.java", "diffHunk": "@@ -47,40 +82,36 @@ private static EcsClientConfig createFromSystemConfig(final Optional<String> clu\n \n         final String extractedPrefix = SYSTEM_CONFIG_PREFIX + name + \".\";\n         final Config extracted = StorageManager.extractKeyPrefix(systemConfig, extractedPrefix);\n-        return new EcsClientConfig(name,\n-                extracted.get(\"launch_type\", String.class),\n-                extracted.get(\"access_key_id\", String.class),\n-                extracted.get(\"secret_access_key\", String.class),\n-                extracted.get(\"region\", String.class),\n-                extracted.get(\"subnets\", String.class),\n-                extracted.get(\"max_retries\", int.class, 3)\n-        );\n+\n+        return buildEcsClientConfig(name, extracted);\n+    }\n+\n+    private static EcsClientConfig buildEcsClientConfig(String clusterName, Config ecsConfig)\n+    {\n+        return EcsClientConfig.builder()\n+                .withClusterName(clusterName)\n+                .withLaunchType(ecsConfig.get(\"launch_type\", String.class))\n+                .withAccessKeyId(ecsConfig.get(\"access_key_id\", String.class))\n+                .withSecretAccessKey(ecsConfig.get(\"secret_access_key\", String.class))\n+                .withRegion(ecsConfig.get(\"region\", String.class))\n+                .withSubnets(ecsConfig.getOptional(\"subnets\", String.class))\n+                .withMaxRetries(ecsConfig.get(\"max_retries\", int.class, DEFAULT_MAX_TRIES))\n+                .withCapacityProviderName(ecsConfig.getOptional(\"capacity_provider_name\", String.class))\n+                .withCpu(ecsConfig.getOptional(\"cpu\", Integer.class))\n+                .withCpu(ecsConfig.getOptional(\"memory\", Integer.class))\n+                .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fc880c1ba607c6de674f8a82bac5fa7193abcbd"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcxNjcyOQ==", "bodyText": "typo of withCpu was fixed 0a57721", "url": "https://github.com/treasure-data/digdag/pull/1469#discussion_r510716729", "createdAt": "2020-10-23T08:21:50Z", "author": {"login": "serihiro"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/EcsClientConfig.java", "diffHunk": "@@ -47,40 +82,36 @@ private static EcsClientConfig createFromSystemConfig(final Optional<String> clu\n \n         final String extractedPrefix = SYSTEM_CONFIG_PREFIX + name + \".\";\n         final Config extracted = StorageManager.extractKeyPrefix(systemConfig, extractedPrefix);\n-        return new EcsClientConfig(name,\n-                extracted.get(\"launch_type\", String.class),\n-                extracted.get(\"access_key_id\", String.class),\n-                extracted.get(\"secret_access_key\", String.class),\n-                extracted.get(\"region\", String.class),\n-                extracted.get(\"subnets\", String.class),\n-                extracted.get(\"max_retries\", int.class, 3)\n-        );\n+\n+        return buildEcsClientConfig(name, extracted);\n+    }\n+\n+    private static EcsClientConfig buildEcsClientConfig(String clusterName, Config ecsConfig)\n+    {\n+        return EcsClientConfig.builder()\n+                .withClusterName(clusterName)\n+                .withLaunchType(ecsConfig.get(\"launch_type\", String.class))\n+                .withAccessKeyId(ecsConfig.get(\"access_key_id\", String.class))\n+                .withSecretAccessKey(ecsConfig.get(\"secret_access_key\", String.class))\n+                .withRegion(ecsConfig.get(\"region\", String.class))\n+                .withSubnets(ecsConfig.getOptional(\"subnets\", String.class))\n+                .withMaxRetries(ecsConfig.get(\"max_retries\", int.class, DEFAULT_MAX_TRIES))\n+                .withCapacityProviderName(ecsConfig.getOptional(\"capacity_provider_name\", String.class))\n+                .withCpu(ecsConfig.getOptional(\"cpu\", Integer.class))\n+                .withCpu(ecsConfig.getOptional(\"memory\", Integer.class))\n+                .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3NzczOQ=="}, "originalCommit": {"oid": "3fc880c1ba607c6de674f8a82bac5fa7193abcbd"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODM4MTY3OnYy", "diffSide": "LEFT", "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/EcsClientConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMzo0ODoxN1rOHm7M5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMzo0ODoxN1rOHm7M5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3Nzg5Mg==", "bodyText": "I deleted current Constructor because this Constructor has a lot of arguments and in the future the number of this parameter is considered to increase.", "url": "https://github.com/treasure-data/digdag/pull/1469#discussion_r510577892", "createdAt": "2020-10-23T03:48:17Z", "author": {"login": "serihiro"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/EcsClientConfig.java", "diffHunk": "@@ -47,40 +82,36 @@ private static EcsClientConfig createFromSystemConfig(final Optional<String> clu\n \n         final String extractedPrefix = SYSTEM_CONFIG_PREFIX + name + \".\";\n         final Config extracted = StorageManager.extractKeyPrefix(systemConfig, extractedPrefix);\n-        return new EcsClientConfig(name,\n-                extracted.get(\"launch_type\", String.class),\n-                extracted.get(\"access_key_id\", String.class),\n-                extracted.get(\"secret_access_key\", String.class),\n-                extracted.get(\"region\", String.class),\n-                extracted.get(\"subnets\", String.class),\n-                extracted.get(\"max_retries\", int.class, 3)\n-        );\n+\n+        return buildEcsClientConfig(name, extracted);\n+    }\n+\n+    private static EcsClientConfig buildEcsClientConfig(String clusterName, Config ecsConfig)\n+    {\n+        return EcsClientConfig.builder()\n+                .withClusterName(clusterName)\n+                .withLaunchType(ecsConfig.get(\"launch_type\", String.class))\n+                .withAccessKeyId(ecsConfig.get(\"access_key_id\", String.class))\n+                .withSecretAccessKey(ecsConfig.get(\"secret_access_key\", String.class))\n+                .withRegion(ecsConfig.get(\"region\", String.class))\n+                .withSubnets(ecsConfig.getOptional(\"subnets\", String.class))\n+                .withMaxRetries(ecsConfig.get(\"max_retries\", int.class, DEFAULT_MAX_TRIES))\n+                .withCapacityProviderName(ecsConfig.getOptional(\"capacity_provider_name\", String.class))\n+                .withCpu(ecsConfig.getOptional(\"cpu\", Integer.class))\n+                .withCpu(ecsConfig.getOptional(\"memory\", Integer.class))\n+                .build();\n     }\n \n     private final String clusterName;\n     private final String launchType;\n     private final String accessKeyId;\n     private final String secretAccessKey;\n     private final String region;\n-    private final List<String> subnets;\n+    private final Optional<List<String>> subnets;\n     private final int maxRetries;\n-\n-    private EcsClientConfig(final String clusterName,\n-            final String launchType,\n-            final String accessKeyId,\n-            final String secretAccessKey,\n-            final String region,\n-            final String subnets,\n-            final int maxRetries)\n-    {\n-        this.clusterName = clusterName;\n-        this.launchType = launchType;\n-        this.accessKeyId = accessKeyId;\n-        this.secretAccessKey = secretAccessKey;\n-        this.region = region;\n-        this.subnets = Arrays.asList(subnets.split(\",\")); // TODO more robust\n-        this.maxRetries = maxRetries;\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fc880c1ba607c6de674f8a82bac5fa7193abcbd"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODM4MjE5OnYy", "diffSide": "RIGHT", "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/EcsClientConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMzo0ODozMlrOHm7NJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMzo0ODozMlrOHm7NJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3Nzk1OQ==", "bodyText": "These parameters are not mandatory. So I defined them as Optional fields.", "url": "https://github.com/treasure-data/digdag/pull/1469#discussion_r510577959", "createdAt": "2020-10-23T03:48:32Z", "author": {"login": "serihiro"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/EcsClientConfig.java", "diffHunk": "@@ -47,40 +82,36 @@ private static EcsClientConfig createFromSystemConfig(final Optional<String> clu\n \n         final String extractedPrefix = SYSTEM_CONFIG_PREFIX + name + \".\";\n         final Config extracted = StorageManager.extractKeyPrefix(systemConfig, extractedPrefix);\n-        return new EcsClientConfig(name,\n-                extracted.get(\"launch_type\", String.class),\n-                extracted.get(\"access_key_id\", String.class),\n-                extracted.get(\"secret_access_key\", String.class),\n-                extracted.get(\"region\", String.class),\n-                extracted.get(\"subnets\", String.class),\n-                extracted.get(\"max_retries\", int.class, 3)\n-        );\n+\n+        return buildEcsClientConfig(name, extracted);\n+    }\n+\n+    private static EcsClientConfig buildEcsClientConfig(String clusterName, Config ecsConfig)\n+    {\n+        return EcsClientConfig.builder()\n+                .withClusterName(clusterName)\n+                .withLaunchType(ecsConfig.get(\"launch_type\", String.class))\n+                .withAccessKeyId(ecsConfig.get(\"access_key_id\", String.class))\n+                .withSecretAccessKey(ecsConfig.get(\"secret_access_key\", String.class))\n+                .withRegion(ecsConfig.get(\"region\", String.class))\n+                .withSubnets(ecsConfig.getOptional(\"subnets\", String.class))\n+                .withMaxRetries(ecsConfig.get(\"max_retries\", int.class, DEFAULT_MAX_TRIES))\n+                .withCapacityProviderName(ecsConfig.getOptional(\"capacity_provider_name\", String.class))\n+                .withCpu(ecsConfig.getOptional(\"cpu\", Integer.class))\n+                .withCpu(ecsConfig.getOptional(\"memory\", Integer.class))\n+                .build();\n     }\n \n     private final String clusterName;\n     private final String launchType;\n     private final String accessKeyId;\n     private final String secretAccessKey;\n     private final String region;\n-    private final List<String> subnets;\n+    private final Optional<List<String>> subnets;\n     private final int maxRetries;\n-\n-    private EcsClientConfig(final String clusterName,\n-            final String launchType,\n-            final String accessKeyId,\n-            final String secretAccessKey,\n-            final String region,\n-            final String subnets,\n-            final int maxRetries)\n-    {\n-        this.clusterName = clusterName;\n-        this.launchType = launchType;\n-        this.accessKeyId = accessKeyId;\n-        this.secretAccessKey = secretAccessKey;\n-        this.region = region;\n-        this.subnets = Arrays.asList(subnets.split(\",\")); // TODO more robust\n-        this.maxRetries = maxRetries;\n-    }\n+    private final Optional<String> capacityProviderName;\n+    private final Optional<Integer> cpu;\n+    private final Optional<Integer> memory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fc880c1ba607c6de674f8a82bac5fa7193abcbd"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODM4Mjc2OnYy", "diffSide": "RIGHT", "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/EcsClientConfigBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMzo0ODo1MFrOHm7NeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMzo0ODo1MFrOHm7NeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3ODA0MA==", "bodyText": "Subnets is not necessary for some use cases. So I defined this files as Optional.", "url": "https://github.com/treasure-data/digdag/pull/1469#discussion_r510578040", "createdAt": "2020-10-23T03:48:50Z", "author": {"login": "serihiro"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/EcsClientConfigBuilder.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package io.digdag.standards.command.ecs;\n+\n+import com.google.common.base.Optional;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class EcsClientConfigBuilder\n+{\n+    private String clusterName;\n+    private String launchType;\n+    private String accessKeyId;\n+    private String secretAccessKey;\n+    private String region;\n+    private Optional<List<String>> subnets;\n+    private int maxRetries;\n+    private Optional<String> capacityProviderName;\n+    private Optional<Integer> cpu;\n+    private Optional<Integer> memory;\n+\n+    public EcsClientConfig build()\n+    {\n+        return new EcsClientConfig(this);\n+    }\n+\n+    public EcsClientConfigBuilder withClusterName(String clusterName)\n+    {\n+        this.clusterName = clusterName;\n+        return this;\n+    }\n+\n+    public EcsClientConfigBuilder withLaunchType(String launchType)\n+    {\n+        this.launchType = launchType;\n+        return this;\n+    }\n+\n+    public EcsClientConfigBuilder withAccessKeyId(String accessKeyId)\n+    {\n+        this.accessKeyId = accessKeyId;\n+        return this;\n+    }\n+\n+    public EcsClientConfigBuilder withSecretAccessKey(String secretAccessKey)\n+    {\n+        this.secretAccessKey = secretAccessKey;\n+        return this;\n+    }\n+\n+    public EcsClientConfigBuilder withRegion(String region)\n+    {\n+        this.region = region;\n+        return this;\n+    }\n+\n+    public EcsClientConfigBuilder withSubnets(Optional<String> subnets)\n+    {\n+        if (subnets.isPresent()) {\n+            this.subnets = Optional.of(Arrays.asList(subnets.get().split(\",\")));\n+        }\n+        else {\n+            this.subnets = Optional.absent();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fc880c1ba607c6de674f8a82bac5fa7193abcbd"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODc3NDA2OnYy", "diffSide": "RIGHT", "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjowMjozOFrOHm_Ndg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMjowOTo1MFrOHn-6Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY0MzU3NA==", "bodyText": "I think we don't need to assign public ip. Launch template does not assign it.\nhttps://github.com/treasure-data/tf_svc_custom-scripts/blob/master/profiles/main/accounts/ecs/asg.tf#L112\nI know why Fargate assigned public IP though. For backward compatibility, we can make as it is for Fargate but would like to disable it for EC2.\n@muga Could you explain reason why you enabled public IP?", "url": "https://github.com/treasure-data/digdag/pull/1469#discussion_r510643574", "createdAt": "2020-10-23T06:02:38Z", "author": {"login": "myui"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "diffHunk": "@@ -746,11 +751,13 @@ protected void setEcsTaskLaunchType(final EcsClientConfig clientConfig, final Ru\n \n     protected void setEcsNetworkConfiguration(final EcsClientConfig clientConfig, final RunTaskRequest request)\n     {\n-        request.withNetworkConfiguration(new NetworkConfiguration().withAwsvpcConfiguration(\n-                new AwsVpcConfiguration()\n-                        .withSubnets(clientConfig.getSubnets())\n-                        .withAssignPublicIp(AssignPublicIp.ENABLED) // TODO should be extracted\n-                ));\n+        if (!clientConfig.getSubnets().isEmpty()) {\n+            request.withNetworkConfiguration(new NetworkConfiguration().withAwsvpcConfiguration(\n+                    new AwsVpcConfiguration()\n+                            .withSubnets(clientConfig.getSubnets())\n+                            .withAssignPublicIp(AssignPublicIp.ENABLED) // TODO should be extracted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859a5005d9d634ec66efe87e69ac07102314ac95"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY3NDk0NQ==", "bodyText": "By the default, runTask does not assign public IP.\nhttps://docs.aws.amazon.com/cli/latest/reference/ecs/run-task.html\nSo, I think we can remove this public IP setting. Let this control by task definition.", "url": "https://github.com/treasure-data/digdag/pull/1469#discussion_r511674945", "createdAt": "2020-10-26T00:56:19Z", "author": {"login": "myui"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "diffHunk": "@@ -746,11 +751,13 @@ protected void setEcsTaskLaunchType(final EcsClientConfig clientConfig, final Ru\n \n     protected void setEcsNetworkConfiguration(final EcsClientConfig clientConfig, final RunTaskRequest request)\n     {\n-        request.withNetworkConfiguration(new NetworkConfiguration().withAwsvpcConfiguration(\n-                new AwsVpcConfiguration()\n-                        .withSubnets(clientConfig.getSubnets())\n-                        .withAssignPublicIp(AssignPublicIp.ENABLED) // TODO should be extracted\n-                ));\n+        if (!clientConfig.getSubnets().isEmpty()) {\n+            request.withNetworkConfiguration(new NetworkConfiguration().withAwsvpcConfiguration(\n+                    new AwsVpcConfiguration()\n+                            .withSubnets(clientConfig.getSubnets())\n+                            .withAssignPublicIp(AssignPublicIp.ENABLED) // TODO should be extracted", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY0MzU3NA=="}, "originalCommit": {"oid": "859a5005d9d634ec66efe87e69ac07102314ac95"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY4MDEyMg==", "bodyText": "@serihiro\nI concerned for .withSubnets(clientConfig.getSubnets()) when getSubnets is absent.\nHow to distinguish vpc-1 and vpc-2 for each client?\nWhat's the behavior of empty collection for subnets (default: none?)\nIf no network mode is specified, the default network mode is bridge.\nQuote from AWS doc\nIf the network mode is awsvpc, the task is allocated an elastic network interface, and you must specify a NetworkConfiguration when you create a service or run a task with the task definition.\n\nChanging to bridge mode is an option. Then, AwsVpcConfiguration should not be overrided at runTask for EC2.", "url": "https://github.com/treasure-data/digdag/pull/1469#discussion_r511680122", "createdAt": "2020-10-26T01:29:07Z", "author": {"login": "myui"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "diffHunk": "@@ -746,11 +751,13 @@ protected void setEcsTaskLaunchType(final EcsClientConfig clientConfig, final Ru\n \n     protected void setEcsNetworkConfiguration(final EcsClientConfig clientConfig, final RunTaskRequest request)\n     {\n-        request.withNetworkConfiguration(new NetworkConfiguration().withAwsvpcConfiguration(\n-                new AwsVpcConfiguration()\n-                        .withSubnets(clientConfig.getSubnets())\n-                        .withAssignPublicIp(AssignPublicIp.ENABLED) // TODO should be extracted\n-                ));\n+        if (!clientConfig.getSubnets().isEmpty()) {\n+            request.withNetworkConfiguration(new NetworkConfiguration().withAwsvpcConfiguration(\n+                    new AwsVpcConfiguration()\n+                            .withSubnets(clientConfig.getSubnets())\n+                            .withAssignPublicIp(AssignPublicIp.ENABLED) // TODO should be extracted", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY0MzU3NA=="}, "originalCommit": {"oid": "859a5005d9d634ec66efe87e69ac07102314ac95"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY4MjQ4Ng==", "bodyText": "I concerned for .withSubnets(clientConfig.getSubnets()) when getSubnets is absent.\n\nMaybe you are read an old version of this code.\nIn the latest commit, clientConfig.getSubnets() is Optional<List<String>>. Please see this commit 3fc880c\n\nWhat's the behavior of empty collection for subnets (default: none?)\n\nIt is the specification of AWS ECS. It depends on the user whether the user specifies subnets or not.", "url": "https://github.com/treasure-data/digdag/pull/1469#discussion_r511682486", "createdAt": "2020-10-26T01:42:39Z", "author": {"login": "serihiro"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "diffHunk": "@@ -746,11 +751,13 @@ protected void setEcsTaskLaunchType(final EcsClientConfig clientConfig, final Ru\n \n     protected void setEcsNetworkConfiguration(final EcsClientConfig clientConfig, final RunTaskRequest request)\n     {\n-        request.withNetworkConfiguration(new NetworkConfiguration().withAwsvpcConfiguration(\n-                new AwsVpcConfiguration()\n-                        .withSubnets(clientConfig.getSubnets())\n-                        .withAssignPublicIp(AssignPublicIp.ENABLED) // TODO should be extracted\n-                ));\n+        if (!clientConfig.getSubnets().isEmpty()) {\n+            request.withNetworkConfiguration(new NetworkConfiguration().withAwsvpcConfiguration(\n+                    new AwsVpcConfiguration()\n+                            .withSubnets(clientConfig.getSubnets())\n+                            .withAssignPublicIp(AssignPublicIp.ENABLED) // TODO should be extracted", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY0MzU3NA=="}, "originalCommit": {"oid": "859a5005d9d634ec66efe87e69ac07102314ac95"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY4NjU4MQ==", "bodyText": "@serihiro let's introduce a option boolean EcsClientConfig.assignPublicIp()", "url": "https://github.com/treasure-data/digdag/pull/1469#discussion_r511686581", "createdAt": "2020-10-26T02:06:01Z", "author": {"login": "myui"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "diffHunk": "@@ -746,11 +751,13 @@ protected void setEcsTaskLaunchType(final EcsClientConfig clientConfig, final Ru\n \n     protected void setEcsNetworkConfiguration(final EcsClientConfig clientConfig, final RunTaskRequest request)\n     {\n-        request.withNetworkConfiguration(new NetworkConfiguration().withAwsvpcConfiguration(\n-                new AwsVpcConfiguration()\n-                        .withSubnets(clientConfig.getSubnets())\n-                        .withAssignPublicIp(AssignPublicIp.ENABLED) // TODO should be extracted\n-                ));\n+        if (!clientConfig.getSubnets().isEmpty()) {\n+            request.withNetworkConfiguration(new NetworkConfiguration().withAwsvpcConfiguration(\n+                    new AwsVpcConfiguration()\n+                            .withSubnets(clientConfig.getSubnets())\n+                            .withAssignPublicIp(AssignPublicIp.ENABLED) // TODO should be extracted", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY0MzU3NA=="}, "originalCommit": {"oid": "859a5005d9d634ec66efe87e69ac07102314ac95"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY4NzI1NA==", "bodyText": "I concerned for .withSubnets(clientConfig.getSubnets()) when getSubnets is absent.\n\nMaybe you are read an old version of this code.\nIn the latest commit, clientConfig.getSubnets() is Optional<List<String>>. Please see this commit 3fc880c\n\n\ud83d\udc4d\n\n\nWhat's the behavior of empty collection for subnets (default: none?)\n\nIt is the specification of AWS ECS. It depends on the user whether the user specifies subnets or not.\n\nFor OSS version, it sounds fine.\nIn TDEcsCommandExecutor, please override getAwsLogsConfiguration and  setEcsNetworkConfiguration.", "url": "https://github.com/treasure-data/digdag/pull/1469#discussion_r511687254", "createdAt": "2020-10-26T02:09:50Z", "author": {"login": "myui"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "diffHunk": "@@ -746,11 +751,13 @@ protected void setEcsTaskLaunchType(final EcsClientConfig clientConfig, final Ru\n \n     protected void setEcsNetworkConfiguration(final EcsClientConfig clientConfig, final RunTaskRequest request)\n     {\n-        request.withNetworkConfiguration(new NetworkConfiguration().withAwsvpcConfiguration(\n-                new AwsVpcConfiguration()\n-                        .withSubnets(clientConfig.getSubnets())\n-                        .withAssignPublicIp(AssignPublicIp.ENABLED) // TODO should be extracted\n-                ));\n+        if (!clientConfig.getSubnets().isEmpty()) {\n+            request.withNetworkConfiguration(new NetworkConfiguration().withAwsvpcConfiguration(\n+                    new AwsVpcConfiguration()\n+                            .withSubnets(clientConfig.getSubnets())\n+                            .withAssignPublicIp(AssignPublicIp.ENABLED) // TODO should be extracted", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY0MzU3NA=="}, "originalCommit": {"oid": "859a5005d9d634ec66efe87e69ac07102314ac95"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODgyNzUyOnYy", "diffSide": "RIGHT", "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjoxMjozNVrOHm_zhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMTozMzo0NlrOHn-hkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY1MzMxNw==", "bodyText": "Could we set startedBy as well?\nhttps://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/ecs/model/RunTaskRequest.html#setStartedBy-java.lang.String-\nSetting digdag session attempt ID and task id (commandContext.getTaskRequest().getTaskID() and getAttemptId()) would be beneficial upon orphan ECS tasks. I assume search ECS task from https://digdag-admin-production.treasuredata.com/admin/session_attempts/150536306/ in AWS console.", "url": "https://github.com/treasure-data/digdag/pull/1469#discussion_r510653317", "createdAt": "2020-10-23T06:12:35Z", "author": {"login": "myui"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "diffHunk": "@@ -516,6 +521,7 @@ RunTaskRequest buildRunTaskRequest(\n         setEcsTaskOverride(commandContext, commandRequest, td, runTaskRequest); // RuntimeException,ConfigException\n         setEcsTaskLaunchType(clientConfig, runTaskRequest);\n         setEcsNetworkConfiguration(clientConfig, runTaskRequest);\n+        setCapacityProviderStrategy(clientConfig, runTaskRequest);\n         return runTaskRequest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859a5005d9d634ec66efe87e69ac07102314ac95"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY4MDkxMg==", "bodyText": "c47e4f0", "url": "https://github.com/treasure-data/digdag/pull/1469#discussion_r511680912", "createdAt": "2020-10-26T01:33:46Z", "author": {"login": "serihiro"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "diffHunk": "@@ -516,6 +521,7 @@ RunTaskRequest buildRunTaskRequest(\n         setEcsTaskOverride(commandContext, commandRequest, td, runTaskRequest); // RuntimeException,ConfigException\n         setEcsTaskLaunchType(clientConfig, runTaskRequest);\n         setEcsNetworkConfiguration(clientConfig, runTaskRequest);\n+        setCapacityProviderStrategy(clientConfig, runTaskRequest);\n         return runTaskRequest;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY1MzMxNw=="}, "originalCommit": {"oid": "859a5005d9d634ec66efe87e69ac07102314ac95"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODkxOTI5OnYy", "diffSide": "RIGHT", "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/EcsClientConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjo0MzoyN1rOHnArOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODozOTo0MlrOHnEUcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY2NzU3Nw==", "bodyText": "EcsClientConfig.of is an entry point of this PR's change.\nCurrently, EcsClientConfig.of always creates EcsClientConfig object from systemConfig.\nIn this PR, if taskConfig has key of agent.command_executor.ecs, EcsClientConfig.of will be created from taskConfig.", "url": "https://github.com/treasure-data/digdag/pull/1469#discussion_r510667577", "createdAt": "2020-10-23T06:43:27Z", "author": {"login": "serihiro"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/EcsClientConfig.java", "diffHunk": "@@ -2,36 +2,71 @@\n \n import com.google.common.base.Optional;\n import io.digdag.client.config.Config;\n-import io.digdag.client.config.ConfigException;\n import io.digdag.core.storage.StorageManager;\n \n-import java.util.Arrays;\n import java.util.List;\n \n public class EcsClientConfig\n {\n     private static final String SYSTEM_CONFIG_PREFIX = \"agent.command_executor.ecs.\";\n+    public static final String TASK_CONFIG_ECS_KEY = \"agent.command_executor.ecs\";\n+    private static final int DEFAULT_MAX_TRIES = 3;\n \n     public static EcsClientConfig of(final Optional<String> clusterName, final Config systemConfig, final Config taskConfig)\n     {\n-        return EcsClientConfig.createFromSystemConfig(clusterName, systemConfig);\n-        /**\n-        if (config.has(\"ecs\")) {\n+        if (taskConfig.has(TASK_CONFIG_ECS_KEY)) {\n             // from task config\n-            return createFromTaskConfig(clusterName, config); // TODO\n+            return createFromTaskConfig(clusterName, taskConfig);\n         }\n         else {\n             // from system config\n-            return EcsClientConfig.createFromSystemConfig(clusterName, systemConfig);\n+            return createFromSystemConfig(clusterName, systemConfig);\n         }\n-         */\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fc880c1ba607c6de674f8a82bac5fa7193abcbd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcyNzI4Mg==", "bodyText": "Refactored here 4faf4b0", "url": "https://github.com/treasure-data/digdag/pull/1469#discussion_r510727282", "createdAt": "2020-10-23T08:39:42Z", "author": {"login": "serihiro"}, "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/EcsClientConfig.java", "diffHunk": "@@ -2,36 +2,71 @@\n \n import com.google.common.base.Optional;\n import io.digdag.client.config.Config;\n-import io.digdag.client.config.ConfigException;\n import io.digdag.core.storage.StorageManager;\n \n-import java.util.Arrays;\n import java.util.List;\n \n public class EcsClientConfig\n {\n     private static final String SYSTEM_CONFIG_PREFIX = \"agent.command_executor.ecs.\";\n+    public static final String TASK_CONFIG_ECS_KEY = \"agent.command_executor.ecs\";\n+    private static final int DEFAULT_MAX_TRIES = 3;\n \n     public static EcsClientConfig of(final Optional<String> clusterName, final Config systemConfig, final Config taskConfig)\n     {\n-        return EcsClientConfig.createFromSystemConfig(clusterName, systemConfig);\n-        /**\n-        if (config.has(\"ecs\")) {\n+        if (taskConfig.has(TASK_CONFIG_ECS_KEY)) {\n             // from task config\n-            return createFromTaskConfig(clusterName, config); // TODO\n+            return createFromTaskConfig(clusterName, taskConfig);\n         }\n         else {\n             // from system config\n-            return EcsClientConfig.createFromSystemConfig(clusterName, systemConfig);\n+            return createFromSystemConfig(clusterName, systemConfig);\n         }\n-         */\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY2NzU3Nw=="}, "originalCommit": {"oid": "3fc880c1ba607c6de674f8a82bac5fa7193abcbd"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1152, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}