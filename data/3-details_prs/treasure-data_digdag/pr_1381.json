{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyOTM5NjI2", "number": 1381, "title": "Add validation for schedule", "bodyText": "For now, there is no validation for schedule.\nSo I added that and it fails when there is invalid keys.", "createdAt": "2020-03-24T11:40:19Z", "url": "https://github.com/treasure-data/digdag/pull/1381", "merged": true, "mergeCommit": {"oid": "8a60b3074378eaf93e696d6b4645ee4b283c72bb"}, "closed": true, "closedAt": "2020-04-07T05:19:43Z", "author": {"login": "naritta"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQ1ym7gBqjMxNjA1OTY2ODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVKwdCABqjMyMDgwMzc0Mzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e3a2e8378f95f2e79469d742d2af48d370b778b4", "author": {"user": {"login": "naritta", "name": "Ritta Narita"}}, "url": "https://github.com/treasure-data/digdag/commit/e3a2e8378f95f2e79469d742d2af48d370b778b4", "committedDate": "2020-03-24T11:38:40Z", "message": "Add validation for schedule"}, "afterCommit": {"oid": "74c31e6b05415b969931f25aa75e297b850572a2", "author": {"user": {"login": "naritta", "name": "Ritta Narita"}}, "url": "https://github.com/treasure-data/digdag/commit/74c31e6b05415b969931f25aa75e297b850572a2", "committedDate": "2020-03-24T16:48:56Z", "message": "Add validation for schedule"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74c31e6b05415b969931f25aa75e297b850572a2", "author": {"user": {"login": "naritta", "name": "Ritta Narita"}}, "url": "https://github.com/treasure-data/digdag/commit/74c31e6b05415b969931f25aa75e297b850572a2", "committedDate": "2020-03-24T16:48:56Z", "message": "Add validation for schedule"}, "afterCommit": {"oid": "8114aced152532f1d521f8da30e7b578bee942b8", "author": {"user": {"login": "naritta", "name": "Ritta Narita"}}, "url": "https://github.com/treasure-data/digdag/commit/8114aced152532f1d521f8da30e7b578bee942b8", "committedDate": "2020-03-24T18:17:32Z", "message": "Add validation for schedule"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8114aced152532f1d521f8da30e7b578bee942b8", "author": {"user": {"login": "naritta", "name": "Ritta Narita"}}, "url": "https://github.com/treasure-data/digdag/commit/8114aced152532f1d521f8da30e7b578bee942b8", "committedDate": "2020-03-24T18:17:32Z", "message": "Add validation for schedule"}, "afterCommit": {"oid": "0aec42e2814341a110d3d2e0a7e30ad51fa60e88", "author": {"user": {"login": "naritta", "name": "Ritta Narita"}}, "url": "https://github.com/treasure-data/digdag/commit/0aec42e2814341a110d3d2e0a7e30ad51fa60e88", "committedDate": "2020-03-25T01:40:25Z", "message": "Add validation for schedule"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d252bfdce81e69049f56378f6a7a32007fa521dd", "author": {"user": {"login": "naritta", "name": "Ritta Narita"}}, "url": "https://github.com/treasure-data/digdag/commit/d252bfdce81e69049f56378f6a7a32007fa521dd", "committedDate": "2020-04-01T08:00:55Z", "message": "Add validation for schedule"}, "afterCommit": {"oid": "01fad80a078f12b011729622391cfbf14ec0b682", "author": {"user": {"login": "naritta", "name": "Ritta Narita"}}, "url": "https://github.com/treasure-data/digdag/commit/01fad80a078f12b011729622391cfbf14ec0b682", "committedDate": "2020-04-01T08:02:15Z", "message": "Add validation for schedule"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODYxMjk1", "url": "https://github.com/treasure-data/digdag/pull/1381#pullrequestreview-385861295", "createdAt": "2020-04-01T18:54:24Z", "commit": {"oid": "01fad80a078f12b011729622391cfbf14ec0b682"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODo1NDoyNVrOF_OOHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODo1NDoyNVrOF_OOHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgzNzU5OQ==", "bodyText": "You don't need these if statements. You can use following instead:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (param.equals(\"skip_on_overtime\"))\n          \n          \n            \n                        usedKeys.add(param);", "url": "https://github.com/treasure-data/digdag/pull/1381#discussion_r401837599", "createdAt": "2020-04-01T18:54:25Z", "author": {"login": "frsyuki"}, "path": "digdag-core/src/main/java/io/digdag/core/schedule/SchedulerManager.java", "diffHunk": "@@ -82,10 +94,47 @@ private Scheduler getScheduler(Config schedulerConfig, ZoneId workflowTimeZone)\n             c.set(\"_command\", command);\n         }\n \n+        for(String param : BUILT_IN_SCHEDULE_PARAMS){\n+            if (param.equals(\"skip_on_overtime\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fad80a078f12b011729622391cfbf14ec0b682"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODY1NjY1", "url": "https://github.com/treasure-data/digdag/pull/1381#pullrequestreview-385865665", "createdAt": "2020-04-01T19:00:12Z", "commit": {"oid": "01fad80a078f12b011729622391cfbf14ec0b682"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTowMDoxMlrOF_ObiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTowMDoxMlrOF_ObiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0MTAzMg==", "bodyText": "Throwing exception here is dangerous because:\n\nSchedules already saved in DB might already have unused keys. Those schedules are currently running in production.\nIf here throws an exception, such schedules will stop working (ScheduleExecutor.runSchedule is calling SchedulerManager.getScheduler).\nFrom user's point of view, they can't notice that their schedules have stopped (because there are no notifications). It's unexpected from the users.\nFrom our point of view, ScheduleExecutor.runSchedule starts logging exceptions. It's not UncaughtException, but almost.\n\nSo, unused keys checking must be done only when a new workflow is uploaded. And that's good enough.", "url": "https://github.com/treasure-data/digdag/pull/1381#discussion_r401841032", "createdAt": "2020-04-01T19:00:12Z", "author": {"login": "frsyuki"}, "path": "digdag-core/src/main/java/io/digdag/core/schedule/SchedulerManager.java", "diffHunk": "@@ -82,10 +94,47 @@ private Scheduler getScheduler(Config schedulerConfig, ZoneId workflowTimeZone)\n             c.set(\"_command\", command);\n         }\n \n+        for(String param : BUILT_IN_SCHEDULE_PARAMS){\n+            if (param.equals(\"skip_on_overtime\"))\n+                c.get(\"skip_on_overtime\", boolean.class, false);\n+            else if (param.equals(\"skip_delayed_by\"))\n+                c.getOptional(\"skip_delayed_by\", DurationParam.class);\n+        }\n+\n         SchedulerFactory factory = types.get(type);\n         if (factory == null) {\n             throw new ConfigException(\"Unknown scheduler type: \" + type);\n         }\n+\n+        if (!usedKeys.isAllUsed()) {\n+            shouldBeUsedKeys.removeAll(usedKeys);\n+            if (!shouldBeUsedKeys.isEmpty()) {\n+                warnUnusedKeys(shouldBeUsedKeys, usedKeys);\n+            }\n+        }\n+\n         return factory.newScheduler(c, workflowTimeZone);\n     }\n+\n+    private void warnUnusedKeys(Set<String> shouldBeUsedButNotUsedKeys, Collection<String> candidateKeys)\n+    {\n+        // throw for only first unused key\n+        for (String key : shouldBeUsedButNotUsedKeys) {\n+            StringBuilder buf = new StringBuilder();\n+            buf.append(\"Parameter '\");\n+            buf.append(key);\n+            buf.append(\"' is not used at schedule. \");\n+\n+            List<String> suggestions = EditDistance.suggest(key, candidateKeys, 0.50);\n+            if (suggestions.isEmpty()) {\n+                throw new ConfigException(buf.toString());\n+            }\n+            else {\n+                buf.append(\"> Did you mean '\");\n+                buf.append(suggestions);\n+                buf.append(\"'\");\n+                throw new ConfigException(buf.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fad80a078f12b011729622391cfbf14ec0b682"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODc0NzAx", "url": "https://github.com/treasure-data/digdag/pull/1381#pullrequestreview-385874701", "createdAt": "2020-04-01T19:13:22Z", "commit": {"oid": "01fad80a078f12b011729622391cfbf14ec0b682"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOToxMzoyM1rOF_O4OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOToxMzoyM1rOF_O4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0ODM3Nw==", "bodyText": "can you add some more tests?:\n\nA test that verifies REST API response code. I think API response code should be 400 (same with ModelValidationException and IllegalArgumentException) or 422. It's very bad if it's 5xx. If API response code is unexpected, additional code will be necessary around ProjectResource.validateWorkflowAndSchedule.\nwhat if unknown scheduler type is set (like no_such_scheduler>: abc)", "url": "https://github.com/treasure-data/digdag/pull/1381#discussion_r401848377", "createdAt": "2020-04-01T19:13:23Z", "author": {"login": "frsyuki"}, "path": "digdag-tests/src/test/java/acceptance/SchedulerIT.java", "diffHunk": "@@ -42,4 +44,30 @@ public void testScheduler()\n         }\n         assertTrue(false);\n     }\n+\n+    @Test\n+    public void testInvalidScheduler()\n+            throws Exception\n+    {\n+        try {\n+            copyResource(\"acceptance/scheduler/invalid.dig\", root().resolve(\"test.dig\"));\n+            main(\"scheduler\", \"--project\", root().toString());\n+            fail();\n+        } catch (Throwable ie) {\n+            assertThat(ie.getCause().getCause().toString(), Matchers.containsString(\"Parameter 'skip_on_over_time' is not used at schedule. > Did you mean '[skip_on_overtime]'\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testInvalidOpScheduler()\n+            throws Exception\n+    {\n+        try {\n+            copyResource(\"acceptance/scheduler/invalid_op.dig\", root().resolve(\"test.dig\"));\n+            main(\"scheduler\", \"--project\", root().toString());\n+            fail();\n+        } catch (Throwable ie) {\n+            assertThat(ie.getCause().getCause().toString(), Matchers.containsString(\"Parameter 'wrong>' is not used at schedule.\"));\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fad80a078f12b011729622391cfbf14ec0b682"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDUyNzYw", "url": "https://github.com/treasure-data/digdag/pull/1381#pullrequestreview-387052760", "createdAt": "2020-04-03T08:23:21Z", "commit": {"oid": "db6f9434eea7980ff8fafdc3da1f04ac5359ab3b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoyMzoyMVrOGAKizQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoyMzoyMVrOGAKizQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyNTkzMw==", "bodyText": "if we throw UnusedConfigException, this doesn't have to be a callback. A boolean flag is good enough.\nCallback is useful if ProjectResource.putProject creates a callback object because ProjectResource.putProject can decide the type of the exception class to throw.\nI think boolean flag is good enough.", "url": "https://github.com/treasure-data/digdag/pull/1381#discussion_r402825933", "createdAt": "2020-04-03T08:23:21Z", "author": {"login": "frsyuki"}, "path": "digdag-core/src/main/java/io/digdag/core/repository/ProjectControl.java", "diffHunk": "@@ -101,7 +103,7 @@ private void updateSchedules(\n     {\n         ImmutableList.Builder<ScheduleWithScheduler> schedules = ImmutableList.builder();\n         for (StoredWorkflowDefinition def : defs) {\n-            Optional<Scheduler> sr = srm.tryGetScheduler(revision, def);\n+            Optional<Scheduler> sr = srm.tryGetScheduler(revision, def, Optional.of(getUnusedKeysCallback()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db6f9434eea7980ff8fafdc3da1f04ac5359ab3b"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "716a64f6b07e58199036e7a7207acd6d20ae002b", "author": {"user": {"login": "naritta", "name": "Ritta Narita"}}, "url": "https://github.com/treasure-data/digdag/commit/716a64f6b07e58199036e7a7207acd6d20ae002b", "committedDate": "2020-04-06T06:29:54Z", "message": "Fix to use boolean to decide if it throw or not"}, "afterCommit": {"oid": "74d9f4e42d7cbbcf8f163dce4edb3d361bd68a5b", "author": {"user": {"login": "naritta", "name": "Ritta Narita"}}, "url": "https://github.com/treasure-data/digdag/commit/74d9f4e42d7cbbcf8f163dce4edb3d361bd68a5b", "committedDate": "2020-04-06T06:31:39Z", "message": "Fix to use boolean to decide if it throw or not"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4d579ebf1d9bbc0a05bc9b9622ad507f0fa42876", "author": {"user": {"login": "naritta", "name": "Ritta Narita"}}, "url": "https://github.com/treasure-data/digdag/commit/4d579ebf1d9bbc0a05bc9b9622ad507f0fa42876", "committedDate": "2020-04-06T15:51:50Z", "message": "Add tests for checking response code and unknow scheduler type"}, "afterCommit": {"oid": "cca6e1f7ee3f7507b0948448ae5212676acf0e19", "author": {"user": {"login": "naritta", "name": "Ritta Narita"}}, "url": "https://github.com/treasure-data/digdag/commit/cca6e1f7ee3f7507b0948448ae5212676acf0e19", "committedDate": "2020-04-06T15:54:07Z", "message": "Add tests for checking response code and unknow scheduler type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NTUzMDc3", "url": "https://github.com/treasure-data/digdag/pull/1381#pullrequestreview-388553077", "createdAt": "2020-04-06T19:29:52Z", "commit": {"oid": "cca6e1f7ee3f7507b0948448ae5212676acf0e19"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOToyOTo1MlrOGBms5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTozMzo1MFrOGBm1pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMzNTg0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Throwable ie) {\n          \n          \n            \n                    }\n          \n          \n            \n                    catch (Throwable ie) {", "url": "https://github.com/treasure-data/digdag/pull/1381#discussion_r404335846", "createdAt": "2020-04-06T19:29:52Z", "author": {"login": "frsyuki"}, "path": "digdag-tests/src/test/java/acceptance/SchedulerIT.java", "diffHunk": "@@ -42,4 +54,71 @@ public void testScheduler()\n         }\n         assertTrue(false);\n     }\n+\n+    @Test\n+    public void testInvalidScheduler()\n+            throws Exception\n+    {\n+        try {\n+            copyResource(\"acceptance/scheduler/invalid.dig\", root().resolve(\"test.dig\"));\n+            main(\"scheduler\", \"--project\", root().toString());\n+            fail();\n+        } catch (Throwable ie) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cca6e1f7ee3f7507b0948448ae5212676acf0e19"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMzNTkyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Throwable ie) {\n          \n          \n            \n                    }\n          \n          \n            \n                    catch (Throwable ie) {", "url": "https://github.com/treasure-data/digdag/pull/1381#discussion_r404335921", "createdAt": "2020-04-06T19:30:00Z", "author": {"login": "frsyuki"}, "path": "digdag-tests/src/test/java/acceptance/SchedulerIT.java", "diffHunk": "@@ -42,4 +54,71 @@ public void testScheduler()\n         }\n         assertTrue(false);\n     }\n+\n+    @Test\n+    public void testInvalidScheduler()\n+            throws Exception\n+    {\n+        try {\n+            copyResource(\"acceptance/scheduler/invalid.dig\", root().resolve(\"test.dig\"));\n+            main(\"scheduler\", \"--project\", root().toString());\n+            fail();\n+        } catch (Throwable ie) {\n+            assertThat(ie.getCause().getCause().toString(), Matchers.containsString(\"Parameter 'skip_on_over_time' is not used at schedule. > Did you mean '[skip_on_overtime]'\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testInvalidOpScheduler()\n+            throws Exception\n+    {\n+        try {\n+            copyResource(\"acceptance/scheduler/invalid_op.dig\", root().resolve(\"test.dig\"));\n+            main(\"scheduler\", \"--project\", root().toString());\n+            fail();\n+        } catch (Throwable ie) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cca6e1f7ee3f7507b0948448ae5212676acf0e19"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMzODA4NQ==", "bodyText": "Showing logging in this loop is good (it's consistent with OperatorManager) but throwing exception has a downside. Because throwing an exception will leave from this loop, users can know only one unused key at a time.\nHow about moving throw before the loop if throwUnusedKeys is set? We can concatenate messages of getWarnUnusedKey with \\n as the message of UnusedConfigException.", "url": "https://github.com/treasure-data/digdag/pull/1381#discussion_r404338085", "createdAt": "2020-04-06T19:33:50Z", "author": {"login": "frsyuki"}, "path": "digdag-core/src/main/java/io/digdag/core/schedule/SchedulerManager.java", "diffHunk": "@@ -82,10 +114,44 @@ private Scheduler getScheduler(Config schedulerConfig, ZoneId workflowTimeZone)\n             c.set(\"_command\", command);\n         }\n \n+        for(String param : BUILT_IN_SCHEDULE_PARAMS){\n+            usedKeys.add(param);\n+        }\n+\n         SchedulerFactory factory = types.get(type);\n         if (factory == null) {\n             throw new ConfigException(\"Unknown scheduler type: \" + type);\n         }\n+\n+        if (!usedKeys.isAllUsed()) {\n+            shouldBeUsedKeys.removeAll(usedKeys);\n+            if (!shouldBeUsedKeys.isEmpty()) {\n+                for (String key: shouldBeUsedKeys) {\n+                    if (throwUnusedKeys)\n+                        throw new UnusedConfigException(getWarnUnusedKey(key, usedKeys));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cca6e1f7ee3f7507b0948448ae5212676acf0e19"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2093a76bd8c3cc6fec4e56ee1629eba822dba1e3", "author": {"user": {"login": "naritta", "name": "Ritta Narita"}}, "url": "https://github.com/treasure-data/digdag/commit/2093a76bd8c3cc6fec4e56ee1629eba822dba1e3", "committedDate": "2020-04-07T03:30:09Z", "message": "Add validation for schedule"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cca6e1f7ee3f7507b0948448ae5212676acf0e19", "author": {"user": {"login": "naritta", "name": "Ritta Narita"}}, "url": "https://github.com/treasure-data/digdag/commit/cca6e1f7ee3f7507b0948448ae5212676acf0e19", "committedDate": "2020-04-06T15:54:07Z", "message": "Add tests for checking response code and unknow scheduler type"}, "afterCommit": {"oid": "2093a76bd8c3cc6fec4e56ee1629eba822dba1e3", "author": {"user": {"login": "naritta", "name": "Ritta Narita"}}, "url": "https://github.com/treasure-data/digdag/commit/2093a76bd8c3cc6fec4e56ee1629eba822dba1e3", "committedDate": "2020-04-07T03:30:09Z", "message": "Add validation for schedule"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4126, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}