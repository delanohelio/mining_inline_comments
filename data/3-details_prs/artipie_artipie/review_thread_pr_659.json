{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3ODc0ODI4", "number": 659, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDozMTowMFrOEqWEuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDozNDo0MlrOEqWLag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODM3MzA3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/rpm/RpmITCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDozMTowMFrOHcfxvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDozMTowMFrOHcfxvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY0MjgxMg==", "bodyText": "@olenagerasimova I'd suggest to use ByteStreams.copy from Guava library here for copying of bytes, it will simplify code a little bit", "url": "https://github.com/artipie/artipie/pull/659#discussion_r499642812", "createdAt": "2020-10-05T14:31:00Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/rpm/RpmITCase.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.rpm;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.ArtipieServer;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.artipie.http.rs.RsStatus;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+/**\n+ * IT case for RPM repository.\n+ * @since 0.12\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+public final class RpmITCase {\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Tested Artipie server.\n+     */\n+    private ArtipieServer server;\n+\n+    /**\n+     * Artipie server port.\n+     */\n+    private int port;\n+\n+    @BeforeEach\n+    void init() throws IOException {\n+        this.server = new ArtipieServer(this.tmp, \"my-rpm\", this.configs());\n+        this.port = this.server.start();\n+    }\n+\n+    @Test\n+    void addsRpm() throws Exception {\n+        final HttpURLConnection con = (HttpURLConnection) new URL(\n+            String.format(\"http://localhost:%s/my-rpm/time-1.7-45.el7.x86_64.rpm\", this.port)\n+        ).openConnection();\n+        con.setRequestMethod(\"PUT\");\n+        con.setDoOutput(true);\n+        try (OutputStream out = con.getOutputStream()) {\n+            final byte[] input = new TestResource(\"rpm/time-1.7-45.el7.x86_64.rpm\").asBytes();\n+            out.write(input, 0, input.length);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "418f5042992787336d80c543d11e27d4fef599c7"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODM5MDE4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/rpm/RpmITCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDozNDo0MlrOHcf8Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDozNDo0MlrOHcf8Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY0NTUyMg==", "bodyText": "@olenagerasimova guess there is typo and this method's name is supposed to be config, not configs, isn't it?", "url": "https://github.com/artipie/artipie/pull/659#discussion_r499645522", "createdAt": "2020-10-05T14:34:42Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/rpm/RpmITCase.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.rpm;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.ArtipieServer;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.artipie.http.rs.RsStatus;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+/**\n+ * IT case for RPM repository.\n+ * @since 0.12\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+public final class RpmITCase {\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Tested Artipie server.\n+     */\n+    private ArtipieServer server;\n+\n+    /**\n+     * Artipie server port.\n+     */\n+    private int port;\n+\n+    @BeforeEach\n+    void init() throws IOException {\n+        this.server = new ArtipieServer(this.tmp, \"my-rpm\", this.configs());\n+        this.port = this.server.start();\n+    }\n+\n+    @Test\n+    void addsRpm() throws Exception {\n+        final HttpURLConnection con = (HttpURLConnection) new URL(\n+            String.format(\"http://localhost:%s/my-rpm/time-1.7-45.el7.x86_64.rpm\", this.port)\n+        ).openConnection();\n+        con.setRequestMethod(\"PUT\");\n+        con.setDoOutput(true);\n+        try (OutputStream out = con.getOutputStream()) {\n+            final byte[] input = new TestResource(\"rpm/time-1.7-45.el7.x86_64.rpm\").asBytes();\n+            out.write(input, 0, input.length);\n+        }\n+        MatcherAssert.assertThat(\n+            \"Response status is 202\",\n+            con.getResponseCode(),\n+            new IsEqual<>(Integer.parseInt(RsStatus.ACCEPTED.code()))\n+        );\n+        MatcherAssert.assertThat(\n+            \"Repository xml indexes are created\",\n+            new FileStorage(this.tmp).list(new Key.From(\"my-rpm/repodata\")).join().size(),\n+            new IsEqual<>(4)\n+        );\n+        con.disconnect();\n+    }\n+\n+    @AfterEach\n+    void close() {\n+        this.server.stop();\n+    }\n+\n+    private String configs() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "418f5042992787336d80c543d11e27d4fef599c7"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2036, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}