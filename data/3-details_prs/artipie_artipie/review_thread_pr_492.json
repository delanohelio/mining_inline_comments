{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNjcwODM4", "number": 492, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjoyNDoxMFrOEb62AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzoyMDo0NlrOEb74qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzExMTA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/RepoPermissions.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjoyNDoxMFrOHGJOMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo0MDo0NlrOHGNxlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNDU5Mg==", "bodyText": "@olenagerasimova I'd suggest to extract individual repository permissions class from this one, so we can avoid complex methods like addUpdate(String, String, String) and return type like CompletionStage<Map<String, List<String>>>. What I suggest is something like this:\ninterfaces RepoPermissionsRegistry {\n  List<RepoPermissions> list();\n  RepoPermissions get(String name);\n  ...\n}\ninterfaces RepoPermissions {\n  void add(String username, String permission);\n  ...\n}\nWhat do you think?", "url": "https://github.com/artipie/artipie/pull/492#discussion_r476204592", "createdAt": "2020-08-25T06:24:10Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/RepoPermissions.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Repository permissions settings.\n+ * @since 0.10\n+ */\n+public interface RepoPermissions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34b09b347778054e6de160442925effcb9e069ef"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxNzk2OA==", "bodyText": "@olegmoz hm, I do not see how one more interface will allow us to avoid returning Map<String, List<String>> for repo permissions, as we still need map user -> permissions list... The only thing we will avoid here - passings parameter repo", "url": "https://github.com/artipie/artipie/pull/492#discussion_r476217968", "createdAt": "2020-08-25T06:55:17Z", "author": {"login": "olenagerasimova"}, "path": "src/main/java/com/artipie/RepoPermissions.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Repository permissions settings.\n+ * @since 0.10\n+ */\n+public interface RepoPermissions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNDU5Mg=="}, "originalCommit": {"oid": "34b09b347778054e6de160442925effcb9e069ef"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIyOTg2OQ==", "bodyText": "@olenagerasimova basically we replace Map<String, List<String>> with RepoPermissions. RepoPermissions may implement Map<...> or have similar methods like Set<String> users() instead of Set<String> keySet() and Set<String> permissions(String user) instead of List<String> get(String value).\nIt is all about making code more understandable. It's hard to understand what is what in type like Map<String, List<String>>.", "url": "https://github.com/artipie/artipie/pull/492#discussion_r476229869", "createdAt": "2020-08-25T07:19:25Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/RepoPermissions.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Repository permissions settings.\n+ * @since 0.10\n+ */\n+public interface RepoPermissions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNDU5Mg=="}, "originalCommit": {"oid": "34b09b347778054e6de160442925effcb9e069ef"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0ODQxMg==", "bodyText": "@olegmoz RepoPermissions still will have to return users and permissions for repository (map username -> permissions list) as GetPermissionSlice have to return following json format\n\"users\" : {\n      \"bob\": [\"r\",\"w\",\"m\"],\n      \"alice\" : [\"d\",\"w\",\"n\", \"r\"]\n}\nMap<String, List<String>> seems to be very convenient structure to build this json. Basically, I do not mind creating the interface you are suggesting, I just do not think it's necessary in this case, we can simply rename\nCompletionStage<Map<String, List<String>>> get(String repo) to CompletionStage<Map<String, List<String>>> permissions(String repo) and extend javadoc.\nFurthermore, having separate methods to obtain users and permissions from settings can lead to inconsistency as they can be changed while we are building json response in GetPermissionSlice.", "url": "https://github.com/artipie/artipie/pull/492#discussion_r476248412", "createdAt": "2020-08-25T07:52:41Z", "author": {"login": "olenagerasimova"}, "path": "src/main/java/com/artipie/RepoPermissions.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Repository permissions settings.\n+ * @since 0.10\n+ */\n+public interface RepoPermissions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNDU5Mg=="}, "originalCommit": {"oid": "34b09b347778054e6de160442925effcb9e069ef"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI3OTE5MA==", "bodyText": "@olenagerasimova that makes sense, thanks", "url": "https://github.com/artipie/artipie/pull/492#discussion_r476279190", "createdAt": "2020-08-25T08:40:46Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/RepoPermissions.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Repository permissions settings.\n+ * @since 0.10\n+ */\n+public interface RepoPermissions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNDU5Mg=="}, "originalCommit": {"oid": "34b09b347778054e6de160442925effcb9e069ef"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzEyMTIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/RepoPermissions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjoyODowNlrOHGJUUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjoyODowNlrOHGJUUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNjE2MQ==", "bodyText": "@olenagerasimova if I understand correctly, these methods need to be implemented. Am I right? It would be way more obvious to throw UnsupporetedOperationException, as it is common contract for not yet implemented methods. null value may look like a normal result and be propagated too far breaking the fail-fast principle.\nSame goes for not implemented slices.", "url": "https://github.com/artipie/artipie/pull/492#discussion_r476206161", "createdAt": "2020-08-25T06:28:06Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/RepoPermissions.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Repository permissions settings.\n+ * @since 0.10\n+ */\n+public interface RepoPermissions {\n+\n+    /**\n+     * Artipie repositories list.\n+     * @return Repository names list\n+     */\n+    CompletionStage<List<String>> repositories();\n+\n+    /**\n+     * Deletes all permissions for repository.\n+     * @param repo Repository name\n+     * @return Completion remove action\n+     */\n+    CompletionStage<Void> remove(String repo);\n+\n+    /**\n+     * Adds or updates repository permission.\n+     * @param repo Repository name\n+     * @param username Username\n+     * @param permission Permission name\n+     * @return Completion action\n+     */\n+    CompletionStage<Void> addUpdate(String repo, String username, String permission);\n+\n+    /**\n+     * Get repository permissions settings.\n+     * @param repo Repository name\n+     * @return Completion action with map with users and permissions\n+     */\n+    CompletionStage<Map<String, List<String>>> get(String repo);\n+\n+    /**\n+     * {@link RepoPermissions} from Artipie settings.\n+     * @since 0.10\n+     */\n+    final class FromSettings implements RepoPermissions {\n+\n+        /**\n+         * Artipie settings.\n+         */\n+        private final Settings settings;\n+\n+        /**\n+         * Ctor.\n+         * @param settings Artipie settings\n+         */\n+        public FromSettings(final Settings settings) {\n+            this.settings = settings;\n+        }\n+\n+        @Override\n+        public CompletionStage<List<String>> repositories() {\n+            return this.storage().list(Key.ROOT)\n+                .thenApply(\n+                    list -> list.stream()\n+                        .map(Key::string)\n+                        .filter(key -> key.contains(\"yaml\"))\n+                        .map(key -> key.replace(\".yaml\", \"\"))\n+                        .collect(Collectors.toList())\n+            );\n+        }\n+\n+        @Override\n+        public CompletionStage<Void> remove(final String repo) {\n+            return null;\n+        }\n+\n+        @Override\n+        public CompletionStage<Void> addUpdate(final String repo, final String username,\n+            final String permission) {\n+            return null;\n+        }\n+\n+        @Override\n+        public CompletionStage<Map<String, List<String>>> get(final String repo) {\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34b09b347778054e6de160442925effcb9e069ef"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzEyNjczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/api/artifactory/AddUpdatePermissionSlice.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjozMDowMFrOHGJXYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjozMDowMFrOHGJXYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNjk0Ng==", "bodyText": "@olenagerasimova the comment looks wrong, please update", "url": "https://github.com/artipie/artipie/pull/492#discussion_r476206946", "createdAt": "2020-08-25T06:30:00Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/api/artifactory/AddUpdatePermissionSlice.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.api.artifactory;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Artifactory `GET /api/security/permissions/{target}` endpoint, returns json with\n+ * permissions (= repository) information.\n+ * @since 0.10\n+ * @todo #444:30min Implement GetPermissionSlice return repository permissions.\n+ *  First, implement and test RepoPermissions.FromSettings#addUpdate(java.lang.String), then use\n+ *  this method in this slice. Request json format can be found\n+ *  https://www.jfrog.com/confluence/display/rtf/artifactory+rest+api, we should obtain information\n+ *  from `repo.actions.users` fields.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34b09b347778054e6de160442925effcb9e069ef"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzEzMDk5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/RepoPermissionsFromSettingsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjozMToxOFrOHGJZxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjozMToxOFrOHGJZxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNzU1OA==", "bodyText": "@olenagerasimova Content.EMPTY was added in ASTO recently, it would make code less verbose if used here", "url": "https://github.com/artipie/artipie/pull/492#discussion_r476207558", "createdAt": "2020-08-25T06:31:18Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/RepoPermissionsFromSettingsTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test for {@link RepoPermissions.FromSettings}.\n+ * @since 0.10\n+ */\n+class RepoPermissionsFromSettingsTest {\n+\n+    @Test\n+    void returnsRepoList() {\n+        final Storage storage = new InMemoryStorage();\n+        storage.save(new Key.From(\"one.yaml\"), new Content.From(new byte[]{})).join();\n+        storage.save(new Key.From(\"two.yaml\"), new Content.From(new byte[]{})).join();\n+        storage.save(new Key.From(\"abc\"), new Content.From(new byte[]{})).join();\n+        storage.save(new Key.From(\"three.yaml\"), new Content.From(new byte[]{})).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34b09b347778054e6de160442925effcb9e069ef"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzI4MTY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/api/artifactory/AddUpdatePermissionSlice.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzoyMDo0NlrOHGKzvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzoyMDo0NlrOHGKzvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIzMDU4OQ==", "bodyText": "@olenagerasimova GET method here looks wrong", "url": "https://github.com/artipie/artipie/pull/492#discussion_r476230589", "createdAt": "2020-08-25T07:20:46Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/api/artifactory/AddUpdatePermissionSlice.java", "diffHunk": "@@ -33,8 +33,8 @@\n  * Artifactory `GET /api/security/permissions/{target}` endpoint, returns json with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88ee370fc3c8df6d8f0d9efd624ec15581dba89b"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2131, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}