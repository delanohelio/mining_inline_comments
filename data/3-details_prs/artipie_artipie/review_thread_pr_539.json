{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2OTU1NjQ3", "number": 539, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDo1MToxN1rOEe2XFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMTo0NTo1NVrOEe3c4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzgzMzgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/api/ApiChangeUserPassword.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDo1MToxN1rOHKw62A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMToyMTowMVrOHKxzwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0OTMwNA==", "bodyText": "@olenagerasimova it seems that pass is stored in plain no matter what PasswordFormat is. It looks like a bug", "url": "https://github.com/artipie/artipie/pull/539#discussion_r481049304", "createdAt": "2020-09-01T10:51:17Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/api/ApiChangeUserPassword.java", "diffHunk": "@@ -87,50 +79,25 @@ public Response response(final String line,\n             throw new IllegalStateException(\"Should match\");\n         }\n         final String user = matcher.group(\"user\");\n-        // @checkstyle LineLengthCheck (100 lines)\n         return new AsyncResponse(\n-            Single.fromCallable(() -> this.settings.meta().yamlMapping(\"credentials\"))\n-                .map(cred -> new KeyFromPath(cred.string(\"path\")))\n-                .flatMapCompletable(\n-                    key ->\n-                        Single.zip(\n-                            new RxStorageWrapper(this.settings.storage())\n-                                .value(key).to(ContentAs.YAML),\n-                            Single.just(body).to(ContentAs.STRING).map(\n-                                encoded -> URLEncodedUtils.parse(encoded, StandardCharsets.UTF_8)\n-                                    .stream()\n-                                    .filter(pair -> pair.getName().equals(\"password\"))\n-                                    .map(NameValuePair::getValue)\n-                                    .findFirst().orElseThrow()\n-                            ),\n-                            (YamlMapping yaml, String pass) -> {\n-                                YamlMappingBuilder result = Yaml.createYamlMappingBuilder();\n-                                final YamlMapping credentials = yaml.yamlMapping(\"credentials\");\n-                                final List<YamlNode> keep = credentials.keys().stream()\n-                                    .filter(node -> !node.asScalar().value().equals(user)).collect(Collectors.toList());\n-                                for (final YamlNode node : keep) {\n-                                    result = result.add(node, credentials.value(node));\n-                                }\n-                                result = result.add(\n-                                    user,\n-                                    Yaml.createYamlMappingBuilder()\n-                                        .add(\"pass\", String.format(\"sha256:%s\", DigestUtils.sha256Hex(pass)))\n-                                        .build()\n-                                );\n-                                return Yaml.createYamlMappingBuilder()\n-                                    .add(\"credentials\", result.build()).build()\n-                                    .toString();\n-                            }\n-                        ).flatMapCompletable(\n-                            yaml -> new RxStorageWrapper(this.settings.storage())\n-                                .save(key, new Content.From(yaml.getBytes(StandardCharsets.UTF_8))))\n+            Single.just(body).to(ContentAs.STRING).map(\n+                encoded -> URLEncodedUtils.parse(encoded, StandardCharsets.UTF_8)\n+                    .stream()\n+                    .filter(pair -> pair.getName().equals(\"password\"))\n+                    .map(NameValuePair::getValue)\n+                    .findFirst().orElseThrow()\n+            ).flatMapCompletable(\n+                pass -> Completable.fromFuture(\n+                    this.settings.credentials().thenCompose(\n+                        cred -> cred.add(user, pass, Credentials.PasswordFormat.SHA256)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9ce2cbbd796e799555d1e6b95f9ddf0f9d6c335"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA2Mzg3NA==", "bodyText": "@olegmoz yes, you are right", "url": "https://github.com/artipie/artipie/pull/539#discussion_r481063874", "createdAt": "2020-09-01T11:21:01Z", "author": {"login": "olenagerasimova"}, "path": "src/main/java/com/artipie/api/ApiChangeUserPassword.java", "diffHunk": "@@ -87,50 +79,25 @@ public Response response(final String line,\n             throw new IllegalStateException(\"Should match\");\n         }\n         final String user = matcher.group(\"user\");\n-        // @checkstyle LineLengthCheck (100 lines)\n         return new AsyncResponse(\n-            Single.fromCallable(() -> this.settings.meta().yamlMapping(\"credentials\"))\n-                .map(cred -> new KeyFromPath(cred.string(\"path\")))\n-                .flatMapCompletable(\n-                    key ->\n-                        Single.zip(\n-                            new RxStorageWrapper(this.settings.storage())\n-                                .value(key).to(ContentAs.YAML),\n-                            Single.just(body).to(ContentAs.STRING).map(\n-                                encoded -> URLEncodedUtils.parse(encoded, StandardCharsets.UTF_8)\n-                                    .stream()\n-                                    .filter(pair -> pair.getName().equals(\"password\"))\n-                                    .map(NameValuePair::getValue)\n-                                    .findFirst().orElseThrow()\n-                            ),\n-                            (YamlMapping yaml, String pass) -> {\n-                                YamlMappingBuilder result = Yaml.createYamlMappingBuilder();\n-                                final YamlMapping credentials = yaml.yamlMapping(\"credentials\");\n-                                final List<YamlNode> keep = credentials.keys().stream()\n-                                    .filter(node -> !node.asScalar().value().equals(user)).collect(Collectors.toList());\n-                                for (final YamlNode node : keep) {\n-                                    result = result.add(node, credentials.value(node));\n-                                }\n-                                result = result.add(\n-                                    user,\n-                                    Yaml.createYamlMappingBuilder()\n-                                        .add(\"pass\", String.format(\"sha256:%s\", DigestUtils.sha256Hex(pass)))\n-                                        .build()\n-                                );\n-                                return Yaml.createYamlMappingBuilder()\n-                                    .add(\"credentials\", result.build()).build()\n-                                    .toString();\n-                            }\n-                        ).flatMapCompletable(\n-                            yaml -> new RxStorageWrapper(this.settings.storage())\n-                                .save(key, new Content.From(yaml.getBytes(StandardCharsets.UTF_8))))\n+            Single.just(body).to(ContentAs.STRING).map(\n+                encoded -> URLEncodedUtils.parse(encoded, StandardCharsets.UTF_8)\n+                    .stream()\n+                    .filter(pair -> pair.getName().equals(\"password\"))\n+                    .map(NameValuePair::getValue)\n+                    .findFirst().orElseThrow()\n+            ).flatMapCompletable(\n+                pass -> Completable.fromFuture(\n+                    this.settings.credentials().thenCompose(\n+                        cred -> cred.add(user, pass, Credentials.PasswordFormat.SHA256)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0OTMwNA=="}, "originalCommit": {"oid": "e9ce2cbbd796e799555d1e6b95f9ddf0f9d6c335"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzgzNjI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/api/ApiChangeUserPassword.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDo1MjowMlrOHKw8Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDo1MjowMlrOHKw8Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0OTY5MQ==", "bodyText": "@olenagerasimova there is standard Location header class you may use here", "url": "https://github.com/artipie/artipie/pull/539#discussion_r481049691", "createdAt": "2020-09-01T10:52:02Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/api/ApiChangeUserPassword.java", "diffHunk": "@@ -87,50 +79,25 @@ public Response response(final String line,\n             throw new IllegalStateException(\"Should match\");\n         }\n         final String user = matcher.group(\"user\");\n-        // @checkstyle LineLengthCheck (100 lines)\n         return new AsyncResponse(\n-            Single.fromCallable(() -> this.settings.meta().yamlMapping(\"credentials\"))\n-                .map(cred -> new KeyFromPath(cred.string(\"path\")))\n-                .flatMapCompletable(\n-                    key ->\n-                        Single.zip(\n-                            new RxStorageWrapper(this.settings.storage())\n-                                .value(key).to(ContentAs.YAML),\n-                            Single.just(body).to(ContentAs.STRING).map(\n-                                encoded -> URLEncodedUtils.parse(encoded, StandardCharsets.UTF_8)\n-                                    .stream()\n-                                    .filter(pair -> pair.getName().equals(\"password\"))\n-                                    .map(NameValuePair::getValue)\n-                                    .findFirst().orElseThrow()\n-                            ),\n-                            (YamlMapping yaml, String pass) -> {\n-                                YamlMappingBuilder result = Yaml.createYamlMappingBuilder();\n-                                final YamlMapping credentials = yaml.yamlMapping(\"credentials\");\n-                                final List<YamlNode> keep = credentials.keys().stream()\n-                                    .filter(node -> !node.asScalar().value().equals(user)).collect(Collectors.toList());\n-                                for (final YamlNode node : keep) {\n-                                    result = result.add(node, credentials.value(node));\n-                                }\n-                                result = result.add(\n-                                    user,\n-                                    Yaml.createYamlMappingBuilder()\n-                                        .add(\"pass\", String.format(\"sha256:%s\", DigestUtils.sha256Hex(pass)))\n-                                        .build()\n-                                );\n-                                return Yaml.createYamlMappingBuilder()\n-                                    .add(\"credentials\", result.build()).build()\n-                                    .toString();\n-                            }\n-                        ).flatMapCompletable(\n-                            yaml -> new RxStorageWrapper(this.settings.storage())\n-                                .save(key, new Content.From(yaml.getBytes(StandardCharsets.UTF_8))))\n+            Single.just(body).to(ContentAs.STRING).map(\n+                encoded -> URLEncodedUtils.parse(encoded, StandardCharsets.UTF_8)\n+                    .stream()\n+                    .filter(pair -> pair.getName().equals(\"password\"))\n+                    .map(NameValuePair::getValue)\n+                    .findFirst().orElseThrow()\n+            ).flatMapCompletable(\n+                pass -> Completable.fromFuture(\n+                    this.settings.credentials().thenCompose(\n+                        cred -> cred.add(user, pass, Credentials.PasswordFormat.SHA256)\n+                    ).toCompletableFuture()\n                 )\n-                .toSingleDefault(\n-                    new RsWithHeaders(\n-                        new RsWithStatus(RsStatus.FOUND),\n-                        new Header(\"Location\", String.format(\"/dashboard/%s\", user))\n-                    )\n-                ).to(SingleInterop.get())\n+            ).toSingleDefault(\n+                new RsWithHeaders(\n+                    new RsWithStatus(RsStatus.FOUND),\n+                    new Header(\"Location\", String.format(\"/dashboard/%s\", user))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9ce2cbbd796e799555d1e6b95f9ddf0f9d6c335"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzg1MjkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/api/artifactory/AddUpdateUserSlice.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDo1Njo1NlrOHKxF5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDo1Njo1NlrOHKxF5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MjEzMg==", "bodyText": "@olenagerasimova I see that passwords were stored were stored in plain format before these changes, but maybe we should stick to sha256 format by default?", "url": "https://github.com/artipie/artipie/pull/539#discussion_r481052132", "createdAt": "2020-09-01T10:56:56Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/api/artifactory/AddUpdateUserSlice.java", "diffHunk": "@@ -74,8 +75,9 @@ public Response response(final String line, final Iterable<Map.Entry<String, Str\n                         passw -> passw.map(\n                             haspassw -> this.settings.credentials()\n                                 .thenCompose(\n-                                    cred -> cred.add(username, haspassw)\n-                                        .thenApply(ok -> new RsWithStatus(RsStatus.OK)))\n+                                    cred -> cred.add(\n+                                        username, haspassw, Credentials.PasswordFormat.PLAIN", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9ce2cbbd796e799555d1e6b95f9ddf0f9d6c335"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODAxMjQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/api/ApiChangeUserPassword.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMTo0NTo1NVrOHKykyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMTo0NTo1NVrOHKykyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA3NjQyNA==", "bodyText": "@olenagerasimova I am sorry, but why did you change format to PLAIN here?", "url": "https://github.com/artipie/artipie/pull/539#discussion_r481076424", "createdAt": "2020-09-01T11:45:55Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/api/ApiChangeUserPassword.java", "diffHunk": "@@ -89,13 +89,13 @@ public Response response(final String line,\n             ).flatMapCompletable(\n                 pass -> Completable.fromFuture(\n                     this.settings.credentials().thenCompose(\n-                        cred -> cred.add(user, pass, Credentials.PasswordFormat.SHA256)\n+                        cred -> cred.add(user, pass, Credentials.PasswordFormat.PLAIN)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9cb385c5224963acd4c5b02c7f2879fcb54d3b5"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2164, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}