{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMTczNTAw", "number": 415, "title": "Accept Artifactory create-repo API requests", "bodyText": "Part of #413: added create repo api slice, implemented json body parsing and validation.", "createdAt": "2020-08-03T13:20:33Z", "url": "https://github.com/artipie/artipie/pull/415", "merged": true, "mergeCommit": {"oid": "6ce8e7e96166dfe33fef61ae191ba1ba00896907"}, "closed": true, "closedAt": "2020-08-04T09:17:03Z", "author": {"login": "olenagerasimova"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7R599gH2gAyNDYyMTczNTAwOjc4MzI0ODkwNzRjNjhjYzY1MzhkYWZiMzJiY2Y2ODQ1MzQxZGFiY2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7i8TNgFqTQ2MDYzNTA1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7832489074c68cc6538dafb32bcf6845341dabcd", "author": {"user": {"login": "olenagerasimova", "name": "Alena"}}, "url": "https://github.com/artipie/artipie/commit/7832489074c68cc6538dafb32bcf6845341dabcd", "committedDate": "2020-08-03T13:19:19Z", "message": "#413 - parse json body"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMDc1ODc1", "url": "https://github.com/artipie/artipie/pull/415#pullrequestreview-460075875", "createdAt": "2020-08-03T14:30:52Z", "commit": {"oid": "7832489074c68cc6538dafb32bcf6845341dabcd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNDozMDo1MlrOG6720g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNDozMTo1OVrOG675tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1MTI4Mg==", "bodyText": "@olenagerasimova V2 should be upper-cased here, see https://www.jfrog.com/confluence/display/JFROG/Repository+Configuration+JSON", "url": "https://github.com/artipie/artipie/pull/415#discussion_r464451282", "createdAt": "2020-08-03T14:30:52Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/api/artifactory/CreateRepoSlice.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.api.artifactory;\n+\n+import com.artipie.Settings;\n+import com.artipie.api.ContentAs;\n+import com.artipie.asto.Key;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.async.AsyncResponse;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import com.jcabi.log.Logger;\n+import io.reactivex.Single;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import javax.json.JsonObject;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Artifactory create repo API slice, it accepts json and create new docker repository by\n+ * creating corresponding YAML configuration.\n+ * @since 0.9\n+ */\n+public final class CreateRepoSlice implements Slice {\n+\n+    /**\n+     * Artipie settings.\n+     */\n+    private final Settings settings;\n+\n+    /**\n+     * Ctor.\n+     * @param settings Artipie settings\n+     */\n+    public CreateRepoSlice(final Settings settings) {\n+        this.settings = settings;\n+    }\n+\n+    @Override\n+    public Response response(\n+        final String line,\n+        final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body\n+    ) {\n+        // @checkstyle ReturnCountCheck (20 lines)\n+        return new AsyncResponse(\n+            Single.just(body).to(ContentAs.JSON).flatMap(\n+                json -> Single.fromFuture(\n+                    valid(json).map(\n+                        name -> {\n+                            try {\n+                                return this.settings.storage().exists(\n+                                    new Key.From(String.format(\"%s.yaml\", name))\n+                                ).thenApply(\n+                                    exists -> {\n+                                        final Response res;\n+                                        if (exists) {\n+                                            res = new RsWithStatus(RsStatus.BAD_REQUEST);\n+                                        } else {\n+                                            res = new RsWithStatus(RsStatus.OK);\n+                                        }\n+                                        return res;\n+                                    }\n+                                );\n+                            } catch (final IOException ex) {\n+                                Logger.error(this, ex.toString());\n+                                return CompletableFuture.completedFuture(\n+                                    new RsWithStatus(RsStatus.INTERNAL_ERROR)\n+                                );\n+                            }\n+                        }\n+                    ).orElse(\n+                        CompletableFuture.completedFuture(new RsWithStatus(RsStatus.BAD_REQUEST))\n+                    )\n+                )\n+            )\n+        );\n+    }\n+\n+    /**\n+     * Checks if json is valid (contains new repo key and supported setting) and\n+     * return new repo name.\n+     * @param json Json to read repo name from\n+     * @return True if json is correct\n+     */\n+    private static Optional<String> valid(final JsonObject json) {\n+        final Optional<String> res;\n+        final String key = json.getString(\"key\", \"\");\n+        if (!key.isEmpty() && \"local\".equals(json.getString(\"rclass\", \"\"))\n+            && \"docker\".equals(json.getString(\"packageType\", \"\"))\n+            && \"v2\".equals(json.getString(\"dockerApiVersion\", \"\"))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7832489074c68cc6538dafb32bcf6845341dabcd"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1MjAyMQ==", "bodyText": "@olenagerasimova we may need to support different parameters later, e.g. remote or virtual rclass and non docker repositories", "url": "https://github.com/artipie/artipie/pull/415#discussion_r464452021", "createdAt": "2020-08-03T14:31:59Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/api/artifactory/CreateRepoSlice.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.api.artifactory;\n+\n+import com.artipie.Settings;\n+import com.artipie.api.ContentAs;\n+import com.artipie.asto.Key;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.async.AsyncResponse;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import com.jcabi.log.Logger;\n+import io.reactivex.Single;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import javax.json.JsonObject;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Artifactory create repo API slice, it accepts json and create new docker repository by\n+ * creating corresponding YAML configuration.\n+ * @since 0.9\n+ */\n+public final class CreateRepoSlice implements Slice {\n+\n+    /**\n+     * Artipie settings.\n+     */\n+    private final Settings settings;\n+\n+    /**\n+     * Ctor.\n+     * @param settings Artipie settings\n+     */\n+    public CreateRepoSlice(final Settings settings) {\n+        this.settings = settings;\n+    }\n+\n+    @Override\n+    public Response response(\n+        final String line,\n+        final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body\n+    ) {\n+        // @checkstyle ReturnCountCheck (20 lines)\n+        return new AsyncResponse(\n+            Single.just(body).to(ContentAs.JSON).flatMap(\n+                json -> Single.fromFuture(\n+                    valid(json).map(\n+                        name -> {\n+                            try {\n+                                return this.settings.storage().exists(\n+                                    new Key.From(String.format(\"%s.yaml\", name))\n+                                ).thenApply(\n+                                    exists -> {\n+                                        final Response res;\n+                                        if (exists) {\n+                                            res = new RsWithStatus(RsStatus.BAD_REQUEST);\n+                                        } else {\n+                                            res = new RsWithStatus(RsStatus.OK);\n+                                        }\n+                                        return res;\n+                                    }\n+                                );\n+                            } catch (final IOException ex) {\n+                                Logger.error(this, ex.toString());\n+                                return CompletableFuture.completedFuture(\n+                                    new RsWithStatus(RsStatus.INTERNAL_ERROR)\n+                                );\n+                            }\n+                        }\n+                    ).orElse(\n+                        CompletableFuture.completedFuture(new RsWithStatus(RsStatus.BAD_REQUEST))\n+                    )\n+                )\n+            )\n+        );\n+    }\n+\n+    /**\n+     * Checks if json is valid (contains new repo key and supported setting) and\n+     * return new repo name.\n+     * @param json Json to read repo name from\n+     * @return True if json is correct\n+     */\n+    private static Optional<String> valid(final JsonObject json) {\n+        final Optional<String> res;\n+        final String key = json.getString(\"key\", \"\");\n+        if (!key.isEmpty() && \"local\".equals(json.getString(\"rclass\", \"\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7832489074c68cc6538dafb32bcf6845341dabcd"}, "originalPosition": 114}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57d443e11efac32831dcbe7313cc6853f59eea9f", "author": {"user": {"login": "olenagerasimova", "name": "Alena"}}, "url": "https://github.com/artipie/artipie/commit/57d443e11efac32831dcbe7313cc6853f59eea9f", "committedDate": "2020-08-03T18:26:55Z", "message": "#413 - CR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61702bccba76822b11dccfe2a5326a3815952ef9", "author": {"user": {"login": "olenagerasimova", "name": "Alena"}}, "url": "https://github.com/artipie/artipie/commit/61702bccba76822b11dccfe2a5326a3815952ef9", "committedDate": "2020-08-03T18:43:06Z", "message": "#413 - CR test corrected"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e96fee08f293b3d55435634e5b89211806f179f", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/artipie/commit/6e96fee08f293b3d55435634e5b89211806f179f", "committedDate": "2020-08-04T09:09:07Z", "message": "Merge branch 'master' into 413-parse-json"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNjM1MDU3", "url": "https://github.com/artipie/artipie/pull/415#pullrequestreview-460635057", "createdAt": "2020-08-04T09:10:15Z", "commit": {"oid": "61702bccba76822b11dccfe2a5326a3815952ef9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3092, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}