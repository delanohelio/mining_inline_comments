{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyODk1NjAz", "number": 630, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODozNTo0NVrOEnXLHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODo0NDoyOVrOEnXXJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzA5NTk3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/FilesRepoITCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODozNTo0NVrOHX6VFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODozNTo0NVrOHX6VFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgzNDk2Nw==", "bodyText": "@genryxy it is not needed to install maven for these tests, we only need curl", "url": "https://github.com/artipie/artipie/pull/630#discussion_r494834967", "createdAt": "2020-09-25T08:35:45Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/FilesRepoITCase.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.blocking.BlockingStorage;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.jcabi.log.Logger;\n+import java.nio.file.Path;\n+import java.util.regex.Pattern;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.StringContains;\n+import org.hamcrest.text.MatchesPattern;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.GenericContainer;\n+\n+/**\n+ * Integration tests for Files repository.\n+ * @since 0.11\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+@EnabledOnOs({OS.LINUX, OS.MAC})\n+final class FilesRepoITCase {\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Tested Artipie server.\n+     */\n+    private ArtipieServer server;\n+\n+    /**\n+     * Container.\n+     */\n+    private GenericContainer<?> cntn;\n+\n+    /**\n+     * Storage.\n+     */\n+    private Storage storage;\n+\n+    /**\n+     * Artipie server port.\n+     */\n+    private int port;\n+\n+    @BeforeEach\n+    void init() throws Exception {\n+        this.storage = new FileStorage(this.tmp);\n+        this.server = new ArtipieServer(this.tmp, \"my-file\", this.configs());\n+        this.port = this.server.start();\n+        this.server.start();\n+        Testcontainers.exposeHostPorts(this.port);\n+        this.cntn = new GenericContainer<>(\"centos:centos8\")\n+            .withCommand(\"tail\", \"-f\", \"/dev/null\")\n+            .withWorkingDirectory(\"/home/\")\n+            .withFileSystemBind(this.tmp.toString(), \"/home\");\n+        this.cntn.start();\n+        this.exec(\"yum\", \"-y\", \"install\", \"curl\");\n+        this.exec(\"yum\", \"-y\", \"install\", \"maven\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d66ccb8404551438f1379f62c3e5abe95b74ea97"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzEwNzcxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/FilesRepoITCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODozOTowN1rOHX6caw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODozOTowN1rOHX6caw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgzNjg0Mw==", "bodyText": "@genryxy here we add the same file to storage twice: first with addFilesToStorage and then using curl. I'd say in test checking download we should add file to storage  using addFilesToStorage method and create another test that runs curl PUT and checks that file is present in Storage after that.\nYou may just remove call of curl PUT for now and add another test later that checks curl PUT runs normally and adds file to Storage at expected path", "url": "https://github.com/artipie/artipie/pull/630#discussion_r494836843", "createdAt": "2020-09-25T08:39:07Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/FilesRepoITCase.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.blocking.BlockingStorage;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.jcabi.log.Logger;\n+import java.nio.file.Path;\n+import java.util.regex.Pattern;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.StringContains;\n+import org.hamcrest.text.MatchesPattern;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.GenericContainer;\n+\n+/**\n+ * Integration tests for Files repository.\n+ * @since 0.11\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+@EnabledOnOs({OS.LINUX, OS.MAC})\n+final class FilesRepoITCase {\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Tested Artipie server.\n+     */\n+    private ArtipieServer server;\n+\n+    /**\n+     * Container.\n+     */\n+    private GenericContainer<?> cntn;\n+\n+    /**\n+     * Storage.\n+     */\n+    private Storage storage;\n+\n+    /**\n+     * Artipie server port.\n+     */\n+    private int port;\n+\n+    @BeforeEach\n+    void init() throws Exception {\n+        this.storage = new FileStorage(this.tmp);\n+        this.server = new ArtipieServer(this.tmp, \"my-file\", this.configs());\n+        this.port = this.server.start();\n+        this.server.start();\n+        Testcontainers.exposeHostPorts(this.port);\n+        this.cntn = new GenericContainer<>(\"centos:centos8\")\n+            .withCommand(\"tail\", \"-f\", \"/dev/null\")\n+            .withWorkingDirectory(\"/home/\")\n+            .withFileSystemBind(this.tmp.toString(), \"/home\");\n+        this.cntn.start();\n+        this.exec(\"yum\", \"-y\", \"install\", \"curl\");\n+        this.exec(\"yum\", \"-y\", \"install\", \"maven\");\n+    }\n+\n+    @Test\n+    void downloadsArtifact() throws Exception {\n+        final String url = \"http://host.testcontainers.internal:%d/my-file/helloworld-src/pom.xml\";\n+        this.addFilesToStorage(\n+            \"helloworld-src\", new Key.From(\"my-file\", \"helloworld-src\")\n+        );\n+        MatcherAssert.assertThat(\n+            \"curl PUT doesn't work properly\",\n+            this.exec(\"curl\", \"-i\", \"-X\", \"PUT\", String.format(url, this.port)),\n+            new StringContains(\"HTTP/1.1 201 Created\")\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d66ccb8404551438f1379f62c3e5abe95b74ea97"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzExNzE3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/FilesRepoITCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODo0MTozN1rOHX6h9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODo0MTozN1rOHX6h9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgzODI2MQ==", "bodyText": "@genryxy please do not use a pom.xml file for this test, it is misguiding. When one sees pom.xml it means we are talking about Maven. And Maven has nothing to do with it. Please just create a file with some text at some path, so it will not give wrong idea to reader.", "url": "https://github.com/artipie/artipie/pull/630#discussion_r494838261", "createdAt": "2020-09-25T08:41:37Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/FilesRepoITCase.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.blocking.BlockingStorage;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.jcabi.log.Logger;\n+import java.nio.file.Path;\n+import java.util.regex.Pattern;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.StringContains;\n+import org.hamcrest.text.MatchesPattern;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.GenericContainer;\n+\n+/**\n+ * Integration tests for Files repository.\n+ * @since 0.11\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+@EnabledOnOs({OS.LINUX, OS.MAC})\n+final class FilesRepoITCase {\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Tested Artipie server.\n+     */\n+    private ArtipieServer server;\n+\n+    /**\n+     * Container.\n+     */\n+    private GenericContainer<?> cntn;\n+\n+    /**\n+     * Storage.\n+     */\n+    private Storage storage;\n+\n+    /**\n+     * Artipie server port.\n+     */\n+    private int port;\n+\n+    @BeforeEach\n+    void init() throws Exception {\n+        this.storage = new FileStorage(this.tmp);\n+        this.server = new ArtipieServer(this.tmp, \"my-file\", this.configs());\n+        this.port = this.server.start();\n+        this.server.start();\n+        Testcontainers.exposeHostPorts(this.port);\n+        this.cntn = new GenericContainer<>(\"centos:centos8\")\n+            .withCommand(\"tail\", \"-f\", \"/dev/null\")\n+            .withWorkingDirectory(\"/home/\")\n+            .withFileSystemBind(this.tmp.toString(), \"/home\");\n+        this.cntn.start();\n+        this.exec(\"yum\", \"-y\", \"install\", \"curl\");\n+        this.exec(\"yum\", \"-y\", \"install\", \"maven\");\n+    }\n+\n+    @Test\n+    void downloadsArtifact() throws Exception {\n+        final String url = \"http://host.testcontainers.internal:%d/my-file/helloworld-src/pom.xml\";\n+        this.addFilesToStorage(\n+            \"helloworld-src\", new Key.From(\"my-file\", \"helloworld-src\")\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d66ccb8404551438f1379f62c3e5abe95b74ea97"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzExOTYzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/FilesRepoITCase.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODo0MjoxOFrOHX6jhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTo0OTozM1rOHX85Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgzODY2MA==", "bodyText": "@genryxy running mvn clean command here is not needed, please remove it", "url": "https://github.com/artipie/artipie/pull/630#discussion_r494838660", "createdAt": "2020-09-25T08:42:18Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/FilesRepoITCase.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.blocking.BlockingStorage;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.jcabi.log.Logger;\n+import java.nio.file.Path;\n+import java.util.regex.Pattern;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.StringContains;\n+import org.hamcrest.text.MatchesPattern;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.GenericContainer;\n+\n+/**\n+ * Integration tests for Files repository.\n+ * @since 0.11\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+@EnabledOnOs({OS.LINUX, OS.MAC})\n+final class FilesRepoITCase {\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Tested Artipie server.\n+     */\n+    private ArtipieServer server;\n+\n+    /**\n+     * Container.\n+     */\n+    private GenericContainer<?> cntn;\n+\n+    /**\n+     * Storage.\n+     */\n+    private Storage storage;\n+\n+    /**\n+     * Artipie server port.\n+     */\n+    private int port;\n+\n+    @BeforeEach\n+    void init() throws Exception {\n+        this.storage = new FileStorage(this.tmp);\n+        this.server = new ArtipieServer(this.tmp, \"my-file\", this.configs());\n+        this.port = this.server.start();\n+        this.server.start();\n+        Testcontainers.exposeHostPorts(this.port);\n+        this.cntn = new GenericContainer<>(\"centos:centos8\")\n+            .withCommand(\"tail\", \"-f\", \"/dev/null\")\n+            .withWorkingDirectory(\"/home/\")\n+            .withFileSystemBind(this.tmp.toString(), \"/home\");\n+        this.cntn.start();\n+        this.exec(\"yum\", \"-y\", \"install\", \"curl\");\n+        this.exec(\"yum\", \"-y\", \"install\", \"maven\");\n+    }\n+\n+    @Test\n+    void downloadsArtifact() throws Exception {\n+        final String url = \"http://host.testcontainers.internal:%d/my-file/helloworld-src/pom.xml\";\n+        this.addFilesToStorage(\n+            \"helloworld-src\", new Key.From(\"my-file\", \"helloworld-src\")\n+        );\n+        MatcherAssert.assertThat(\n+            \"curl PUT doesn't work properly\",\n+            this.exec(\"curl\", \"-i\", \"-X\", \"PUT\", String.format(url, this.port)),\n+            new StringContains(\"HTTP/1.1 201 Created\")\n+        );\n+        MatcherAssert.assertThat(\n+            \"curl GET doesn't work properly\",\n+            this.exec(\"curl\", \"-i\", \"-X\", \"GET\", String.format(url, this.port)),\n+            new MatchesPattern(\n+                Pattern.compile(\n+                    // @checkstyle LineLengthCheck (1 line)\n+                    \"HTTP\\\\/1.1 200 OK[\\\\r\\\\n]{0,2}Content-Type: application\\\\/octet-stream[\\\\r\\\\n \\\\S]*\"\n+                )\n+            )\n+        );\n+        this.exec(\"mvn\", \"clean\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d66ccb8404551438f1379f62c3e5abe95b74ea97"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg1MzUxNw==", "bodyText": "@olegmoz in some case I get the error as https://github.com/artipie/artipie/pull/537/checks?check_run_id=1081335703#step:5:1028 In the previous case running mvn clean command helped to fix. I can try to push without maven", "url": "https://github.com/artipie/artipie/pull/630#discussion_r494853517", "createdAt": "2020-09-25T09:08:35Z", "author": {"login": "genryxy"}, "path": "src/test/java/com/artipie/FilesRepoITCase.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.blocking.BlockingStorage;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.jcabi.log.Logger;\n+import java.nio.file.Path;\n+import java.util.regex.Pattern;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.StringContains;\n+import org.hamcrest.text.MatchesPattern;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.GenericContainer;\n+\n+/**\n+ * Integration tests for Files repository.\n+ * @since 0.11\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+@EnabledOnOs({OS.LINUX, OS.MAC})\n+final class FilesRepoITCase {\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Tested Artipie server.\n+     */\n+    private ArtipieServer server;\n+\n+    /**\n+     * Container.\n+     */\n+    private GenericContainer<?> cntn;\n+\n+    /**\n+     * Storage.\n+     */\n+    private Storage storage;\n+\n+    /**\n+     * Artipie server port.\n+     */\n+    private int port;\n+\n+    @BeforeEach\n+    void init() throws Exception {\n+        this.storage = new FileStorage(this.tmp);\n+        this.server = new ArtipieServer(this.tmp, \"my-file\", this.configs());\n+        this.port = this.server.start();\n+        this.server.start();\n+        Testcontainers.exposeHostPorts(this.port);\n+        this.cntn = new GenericContainer<>(\"centos:centos8\")\n+            .withCommand(\"tail\", \"-f\", \"/dev/null\")\n+            .withWorkingDirectory(\"/home/\")\n+            .withFileSystemBind(this.tmp.toString(), \"/home\");\n+        this.cntn.start();\n+        this.exec(\"yum\", \"-y\", \"install\", \"curl\");\n+        this.exec(\"yum\", \"-y\", \"install\", \"maven\");\n+    }\n+\n+    @Test\n+    void downloadsArtifact() throws Exception {\n+        final String url = \"http://host.testcontainers.internal:%d/my-file/helloworld-src/pom.xml\";\n+        this.addFilesToStorage(\n+            \"helloworld-src\", new Key.From(\"my-file\", \"helloworld-src\")\n+        );\n+        MatcherAssert.assertThat(\n+            \"curl PUT doesn't work properly\",\n+            this.exec(\"curl\", \"-i\", \"-X\", \"PUT\", String.format(url, this.port)),\n+            new StringContains(\"HTTP/1.1 201 Created\")\n+        );\n+        MatcherAssert.assertThat(\n+            \"curl GET doesn't work properly\",\n+            this.exec(\"curl\", \"-i\", \"-X\", \"GET\", String.format(url, this.port)),\n+            new MatchesPattern(\n+                Pattern.compile(\n+                    // @checkstyle LineLengthCheck (1 line)\n+                    \"HTTP\\\\/1.1 200 OK[\\\\r\\\\n]{0,2}Content-Type: application\\\\/octet-stream[\\\\r\\\\n \\\\S]*\"\n+                )\n+            )\n+        );\n+        this.exec(\"mvn\", \"clean\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgzODY2MA=="}, "originalCommit": {"oid": "d66ccb8404551438f1379f62c3e5abe95b74ea97"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3NDU4MQ==", "bodyText": "@genryxy that was in Maven test, this test is absolutely unrelated. So I am pretty sure that everything will work fine if you remove mvn clean", "url": "https://github.com/artipie/artipie/pull/630#discussion_r494874581", "createdAt": "2020-09-25T09:45:20Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/FilesRepoITCase.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.blocking.BlockingStorage;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.jcabi.log.Logger;\n+import java.nio.file.Path;\n+import java.util.regex.Pattern;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.StringContains;\n+import org.hamcrest.text.MatchesPattern;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.GenericContainer;\n+\n+/**\n+ * Integration tests for Files repository.\n+ * @since 0.11\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+@EnabledOnOs({OS.LINUX, OS.MAC})\n+final class FilesRepoITCase {\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Tested Artipie server.\n+     */\n+    private ArtipieServer server;\n+\n+    /**\n+     * Container.\n+     */\n+    private GenericContainer<?> cntn;\n+\n+    /**\n+     * Storage.\n+     */\n+    private Storage storage;\n+\n+    /**\n+     * Artipie server port.\n+     */\n+    private int port;\n+\n+    @BeforeEach\n+    void init() throws Exception {\n+        this.storage = new FileStorage(this.tmp);\n+        this.server = new ArtipieServer(this.tmp, \"my-file\", this.configs());\n+        this.port = this.server.start();\n+        this.server.start();\n+        Testcontainers.exposeHostPorts(this.port);\n+        this.cntn = new GenericContainer<>(\"centos:centos8\")\n+            .withCommand(\"tail\", \"-f\", \"/dev/null\")\n+            .withWorkingDirectory(\"/home/\")\n+            .withFileSystemBind(this.tmp.toString(), \"/home\");\n+        this.cntn.start();\n+        this.exec(\"yum\", \"-y\", \"install\", \"curl\");\n+        this.exec(\"yum\", \"-y\", \"install\", \"maven\");\n+    }\n+\n+    @Test\n+    void downloadsArtifact() throws Exception {\n+        final String url = \"http://host.testcontainers.internal:%d/my-file/helloworld-src/pom.xml\";\n+        this.addFilesToStorage(\n+            \"helloworld-src\", new Key.From(\"my-file\", \"helloworld-src\")\n+        );\n+        MatcherAssert.assertThat(\n+            \"curl PUT doesn't work properly\",\n+            this.exec(\"curl\", \"-i\", \"-X\", \"PUT\", String.format(url, this.port)),\n+            new StringContains(\"HTTP/1.1 201 Created\")\n+        );\n+        MatcherAssert.assertThat(\n+            \"curl GET doesn't work properly\",\n+            this.exec(\"curl\", \"-i\", \"-X\", \"GET\", String.format(url, this.port)),\n+            new MatchesPattern(\n+                Pattern.compile(\n+                    // @checkstyle LineLengthCheck (1 line)\n+                    \"HTTP\\\\/1.1 200 OK[\\\\r\\\\n]{0,2}Content-Type: application\\\\/octet-stream[\\\\r\\\\n \\\\S]*\"\n+                )\n+            )\n+        );\n+        this.exec(\"mvn\", \"clean\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgzODY2MA=="}, "originalCommit": {"oid": "d66ccb8404551438f1379f62c3e5abe95b74ea97"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3Njk3OQ==", "bodyText": "@olegmoz understood, thanks", "url": "https://github.com/artipie/artipie/pull/630#discussion_r494876979", "createdAt": "2020-09-25T09:49:33Z", "author": {"login": "genryxy"}, "path": "src/test/java/com/artipie/FilesRepoITCase.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.blocking.BlockingStorage;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.jcabi.log.Logger;\n+import java.nio.file.Path;\n+import java.util.regex.Pattern;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.StringContains;\n+import org.hamcrest.text.MatchesPattern;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.GenericContainer;\n+\n+/**\n+ * Integration tests for Files repository.\n+ * @since 0.11\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+@EnabledOnOs({OS.LINUX, OS.MAC})\n+final class FilesRepoITCase {\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Tested Artipie server.\n+     */\n+    private ArtipieServer server;\n+\n+    /**\n+     * Container.\n+     */\n+    private GenericContainer<?> cntn;\n+\n+    /**\n+     * Storage.\n+     */\n+    private Storage storage;\n+\n+    /**\n+     * Artipie server port.\n+     */\n+    private int port;\n+\n+    @BeforeEach\n+    void init() throws Exception {\n+        this.storage = new FileStorage(this.tmp);\n+        this.server = new ArtipieServer(this.tmp, \"my-file\", this.configs());\n+        this.port = this.server.start();\n+        this.server.start();\n+        Testcontainers.exposeHostPorts(this.port);\n+        this.cntn = new GenericContainer<>(\"centos:centos8\")\n+            .withCommand(\"tail\", \"-f\", \"/dev/null\")\n+            .withWorkingDirectory(\"/home/\")\n+            .withFileSystemBind(this.tmp.toString(), \"/home\");\n+        this.cntn.start();\n+        this.exec(\"yum\", \"-y\", \"install\", \"curl\");\n+        this.exec(\"yum\", \"-y\", \"install\", \"maven\");\n+    }\n+\n+    @Test\n+    void downloadsArtifact() throws Exception {\n+        final String url = \"http://host.testcontainers.internal:%d/my-file/helloworld-src/pom.xml\";\n+        this.addFilesToStorage(\n+            \"helloworld-src\", new Key.From(\"my-file\", \"helloworld-src\")\n+        );\n+        MatcherAssert.assertThat(\n+            \"curl PUT doesn't work properly\",\n+            this.exec(\"curl\", \"-i\", \"-X\", \"PUT\", String.format(url, this.port)),\n+            new StringContains(\"HTTP/1.1 201 Created\")\n+        );\n+        MatcherAssert.assertThat(\n+            \"curl GET doesn't work properly\",\n+            this.exec(\"curl\", \"-i\", \"-X\", \"GET\", String.format(url, this.port)),\n+            new MatchesPattern(\n+                Pattern.compile(\n+                    // @checkstyle LineLengthCheck (1 line)\n+                    \"HTTP\\\\/1.1 200 OK[\\\\r\\\\n]{0,2}Content-Type: application\\\\/octet-stream[\\\\r\\\\n \\\\S]*\"\n+                )\n+            )\n+        );\n+        this.exec(\"mvn\", \"clean\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgzODY2MA=="}, "originalCommit": {"oid": "d66ccb8404551438f1379f62c3e5abe95b74ea97"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzEyMjAzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/FilesRepoITCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODo0MzowMFrOHX6k9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODo0MzowMFrOHX6k9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgzOTAyOA==", "bodyText": "@genryxy do not see the reason why name is plural, e.g. configS, why not just config?", "url": "https://github.com/artipie/artipie/pull/630#discussion_r494839028", "createdAt": "2020-09-25T08:43:00Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/FilesRepoITCase.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.blocking.BlockingStorage;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.jcabi.log.Logger;\n+import java.nio.file.Path;\n+import java.util.regex.Pattern;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.StringContains;\n+import org.hamcrest.text.MatchesPattern;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.GenericContainer;\n+\n+/**\n+ * Integration tests for Files repository.\n+ * @since 0.11\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+@EnabledOnOs({OS.LINUX, OS.MAC})\n+final class FilesRepoITCase {\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Tested Artipie server.\n+     */\n+    private ArtipieServer server;\n+\n+    /**\n+     * Container.\n+     */\n+    private GenericContainer<?> cntn;\n+\n+    /**\n+     * Storage.\n+     */\n+    private Storage storage;\n+\n+    /**\n+     * Artipie server port.\n+     */\n+    private int port;\n+\n+    @BeforeEach\n+    void init() throws Exception {\n+        this.storage = new FileStorage(this.tmp);\n+        this.server = new ArtipieServer(this.tmp, \"my-file\", this.configs());\n+        this.port = this.server.start();\n+        this.server.start();\n+        Testcontainers.exposeHostPorts(this.port);\n+        this.cntn = new GenericContainer<>(\"centos:centos8\")\n+            .withCommand(\"tail\", \"-f\", \"/dev/null\")\n+            .withWorkingDirectory(\"/home/\")\n+            .withFileSystemBind(this.tmp.toString(), \"/home\");\n+        this.cntn.start();\n+        this.exec(\"yum\", \"-y\", \"install\", \"curl\");\n+        this.exec(\"yum\", \"-y\", \"install\", \"maven\");\n+    }\n+\n+    @Test\n+    void downloadsArtifact() throws Exception {\n+        final String url = \"http://host.testcontainers.internal:%d/my-file/helloworld-src/pom.xml\";\n+        this.addFilesToStorage(\n+            \"helloworld-src\", new Key.From(\"my-file\", \"helloworld-src\")\n+        );\n+        MatcherAssert.assertThat(\n+            \"curl PUT doesn't work properly\",\n+            this.exec(\"curl\", \"-i\", \"-X\", \"PUT\", String.format(url, this.port)),\n+            new StringContains(\"HTTP/1.1 201 Created\")\n+        );\n+        MatcherAssert.assertThat(\n+            \"curl GET doesn't work properly\",\n+            this.exec(\"curl\", \"-i\", \"-X\", \"GET\", String.format(url, this.port)),\n+            new MatchesPattern(\n+                Pattern.compile(\n+                    // @checkstyle LineLengthCheck (1 line)\n+                    \"HTTP\\\\/1.1 200 OK[\\\\r\\\\n]{0,2}Content-Type: application\\\\/octet-stream[\\\\r\\\\n \\\\S]*\"\n+                )\n+            )\n+        );\n+        this.exec(\"mvn\", \"clean\");\n+    }\n+\n+    @AfterEach\n+    void release() throws Exception {\n+        this.server.stop();\n+        this.cntn.stop();\n+    }\n+\n+    private String exec(final String... command) throws Exception {\n+        Logger.debug(this, \"Command:\\n%s\", String.join(\" \", command));\n+        return this.cntn.execInContainer(command).getStdout();\n+    }\n+\n+    private String configs() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d66ccb8404551438f1379f62c3e5abe95b74ea97"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzEyNjc3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/FilesRepoITCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODo0NDoyOVrOHX6n_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODo0NDoyOVrOHX6n_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgzOTgwNA==", "bodyText": "@genryxy it's common to write what we expect, not what what happend on a failure. Meaning this would be better change to curl PUT does work properly. Same goes for other assert comment about curl GET", "url": "https://github.com/artipie/artipie/pull/630#discussion_r494839804", "createdAt": "2020-09-25T08:44:29Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/FilesRepoITCase.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.blocking.BlockingStorage;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.jcabi.log.Logger;\n+import java.nio.file.Path;\n+import java.util.regex.Pattern;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.StringContains;\n+import org.hamcrest.text.MatchesPattern;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.GenericContainer;\n+\n+/**\n+ * Integration tests for Files repository.\n+ * @since 0.11\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+@EnabledOnOs({OS.LINUX, OS.MAC})\n+final class FilesRepoITCase {\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Tested Artipie server.\n+     */\n+    private ArtipieServer server;\n+\n+    /**\n+     * Container.\n+     */\n+    private GenericContainer<?> cntn;\n+\n+    /**\n+     * Storage.\n+     */\n+    private Storage storage;\n+\n+    /**\n+     * Artipie server port.\n+     */\n+    private int port;\n+\n+    @BeforeEach\n+    void init() throws Exception {\n+        this.storage = new FileStorage(this.tmp);\n+        this.server = new ArtipieServer(this.tmp, \"my-file\", this.configs());\n+        this.port = this.server.start();\n+        this.server.start();\n+        Testcontainers.exposeHostPorts(this.port);\n+        this.cntn = new GenericContainer<>(\"centos:centos8\")\n+            .withCommand(\"tail\", \"-f\", \"/dev/null\")\n+            .withWorkingDirectory(\"/home/\")\n+            .withFileSystemBind(this.tmp.toString(), \"/home\");\n+        this.cntn.start();\n+        this.exec(\"yum\", \"-y\", \"install\", \"curl\");\n+        this.exec(\"yum\", \"-y\", \"install\", \"maven\");\n+    }\n+\n+    @Test\n+    void downloadsArtifact() throws Exception {\n+        final String url = \"http://host.testcontainers.internal:%d/my-file/helloworld-src/pom.xml\";\n+        this.addFilesToStorage(\n+            \"helloworld-src\", new Key.From(\"my-file\", \"helloworld-src\")\n+        );\n+        MatcherAssert.assertThat(\n+            \"curl PUT doesn't work properly\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d66ccb8404551438f1379f62c3e5abe95b74ea97"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2017, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}