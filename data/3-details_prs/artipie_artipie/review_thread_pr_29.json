{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MzE5NzMw", "number": 29, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMDowNzoyOVrODgDMGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMDowOToyMlrODgDM-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTMzMjcyOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMDowNzoyOVrOFqG1uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMDowNzoyOVrOFqG1uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY5NjU3MQ==", "bodyText": "@g4s8 should this be maven instead?", "url": "https://github.com/artipie/artipie/pull/29#discussion_r379696571", "createdAt": "2020-02-15T00:07:29Z", "author": {"login": "carlosmiranda"}, "path": "README.md", "diffHunk": "@@ -32,6 +32,82 @@ knows repo type (e.g. `maven` or `docker`) and storage settings for repo\n After reading repo config it constructs new `Slice` for config\n and proxies current request to this slice.\n \n+### Artipie architecture\n+\n+Main components of Artipie software are:\n+ - Adapter: this component works with single binary artifact format, e.g.\n+ Maven-adapter or Docker-adapter. Adapter usually consist of two logical parts:\n+ front-end and back-end. The back-end of adapter works with binary artifacts\n+ and its metadata. It can be used independently as a library to store artifacts\n+ and generate metadata. It uses `Storage` from `artipie/asto` as a storage.\n+ Front-end of adapter implements `Slice` interface from `artipie/http` module.\n+ It handles incoming HTTP requests, process it using back-end objects, and\n+ generate HTTP responses.\n+ - Storage: Artipie uses abstract key-value storage `artipie/asto` in all modules.\n+ Storage support atomic transactional operations and it's thread safe.\n+ Artipie has multiple storage implementations: in-memory storage,\n+ file-system storage, AWS S3 storage. Storage can be used to store binary artifacts\n+ or for configuration files.\n+ - Artipie: configured assebmly of adapters. Artipie can be configured to read\n+ repository configuration files from the storage. Artipie can find configuration\n+ file by repository as a key name. Artipie implements `Slice` interface and can\n+ handle HTTP requests. It reads repository name from request URI path,\n+ finds configuration for adapter, constructs appropriate storage for adapter,\n+ and redirects the request to adapter.\n+ - Web server: any `Slice` implementation (Artipie or single module) can be used\n+ as a back-end for web server. We require the server to be reactive and to support\n+ non-blocking network IO operations. One of possible implementations is\n+ [vertx-server](https://github.com/artipie/vertx-server/).\n+\n+Here is cross-module dependency diagram:\n+\n+![diagram](/_docs/artipie-classes.png)\n+\n+### Configuration\n+\n+Artipie should be configured before startup.\n+Main meta configuration `yaml` file should contains storage config,\n+where adapter configuration files are located:\n+```yaml\n+meta:\n+  # configuration storage\n+  storage:\n+    # storage type\n+    type: fs\n+    path: /artipie/storage\n+```\n+\n+Meta storage contains adapters configuration, where key is a repository name,\n+and value is adapter config `yaml` file:\n+```text\n+config storage\n+\u251c\u2500\u2500 maven1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb2dee99a39857de79967f722bcd037de0a0708"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTMzNDExOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMDowODo0MFrOFqG2jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMDowODo0MFrOFqG2jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY5Njc4MQ==", "bodyText": "@g4s8 it's not clear what the names for the supported storage types should be, we should specify it somewhere.", "url": "https://github.com/artipie/artipie/pull/29#discussion_r379696781", "createdAt": "2020-02-15T00:08:40Z", "author": {"login": "carlosmiranda"}, "path": "README.md", "diffHunk": "@@ -32,6 +32,82 @@ knows repo type (e.g. `maven` or `docker`) and storage settings for repo\n After reading repo config it constructs new `Slice` for config\n and proxies current request to this slice.\n \n+### Artipie architecture\n+\n+Main components of Artipie software are:\n+ - Adapter: this component works with single binary artifact format, e.g.\n+ Maven-adapter or Docker-adapter. Adapter usually consist of two logical parts:\n+ front-end and back-end. The back-end of adapter works with binary artifacts\n+ and its metadata. It can be used independently as a library to store artifacts\n+ and generate metadata. It uses `Storage` from `artipie/asto` as a storage.\n+ Front-end of adapter implements `Slice` interface from `artipie/http` module.\n+ It handles incoming HTTP requests, process it using back-end objects, and\n+ generate HTTP responses.\n+ - Storage: Artipie uses abstract key-value storage `artipie/asto` in all modules.\n+ Storage support atomic transactional operations and it's thread safe.\n+ Artipie has multiple storage implementations: in-memory storage,\n+ file-system storage, AWS S3 storage. Storage can be used to store binary artifacts\n+ or for configuration files.\n+ - Artipie: configured assebmly of adapters. Artipie can be configured to read\n+ repository configuration files from the storage. Artipie can find configuration\n+ file by repository as a key name. Artipie implements `Slice` interface and can\n+ handle HTTP requests. It reads repository name from request URI path,\n+ finds configuration for adapter, constructs appropriate storage for adapter,\n+ and redirects the request to adapter.\n+ - Web server: any `Slice` implementation (Artipie or single module) can be used\n+ as a back-end for web server. We require the server to be reactive and to support\n+ non-blocking network IO operations. One of possible implementations is\n+ [vertx-server](https://github.com/artipie/vertx-server/).\n+\n+Here is cross-module dependency diagram:\n+\n+![diagram](/_docs/artipie-classes.png)\n+\n+### Configuration\n+\n+Artipie should be configured before startup.\n+Main meta configuration `yaml` file should contains storage config,\n+where adapter configuration files are located:\n+```yaml\n+meta:\n+  # configuration storage\n+  storage:\n+    # storage type\n+    type: fs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb2dee99a39857de79967f722bcd037de0a0708"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTMzNDk3OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMDowOToyMlrOFqG2_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMDowOToyMlrOFqG2_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY5Njg5NQ==", "bodyText": "@g4s8 Misspelling here, and slight reword suggestion.\n\nIt's recommen_d_ed that S3 storage be used...", "url": "https://github.com/artipie/artipie/pull/29#discussion_r379696895", "createdAt": "2020-02-15T00:09:22Z", "author": {"login": "carlosmiranda"}, "path": "README.md", "diffHunk": "@@ -32,6 +32,82 @@ knows repo type (e.g. `maven` or `docker`) and storage settings for repo\n After reading repo config it constructs new `Slice` for config\n and proxies current request to this slice.\n \n+### Artipie architecture\n+\n+Main components of Artipie software are:\n+ - Adapter: this component works with single binary artifact format, e.g.\n+ Maven-adapter or Docker-adapter. Adapter usually consist of two logical parts:\n+ front-end and back-end. The back-end of adapter works with binary artifacts\n+ and its metadata. It can be used independently as a library to store artifacts\n+ and generate metadata. It uses `Storage` from `artipie/asto` as a storage.\n+ Front-end of adapter implements `Slice` interface from `artipie/http` module.\n+ It handles incoming HTTP requests, process it using back-end objects, and\n+ generate HTTP responses.\n+ - Storage: Artipie uses abstract key-value storage `artipie/asto` in all modules.\n+ Storage support atomic transactional operations and it's thread safe.\n+ Artipie has multiple storage implementations: in-memory storage,\n+ file-system storage, AWS S3 storage. Storage can be used to store binary artifacts\n+ or for configuration files.\n+ - Artipie: configured assebmly of adapters. Artipie can be configured to read\n+ repository configuration files from the storage. Artipie can find configuration\n+ file by repository as a key name. Artipie implements `Slice` interface and can\n+ handle HTTP requests. It reads repository name from request URI path,\n+ finds configuration for adapter, constructs appropriate storage for adapter,\n+ and redirects the request to adapter.\n+ - Web server: any `Slice` implementation (Artipie or single module) can be used\n+ as a back-end for web server. We require the server to be reactive and to support\n+ non-blocking network IO operations. One of possible implementations is\n+ [vertx-server](https://github.com/artipie/vertx-server/).\n+\n+Here is cross-module dependency diagram:\n+\n+![diagram](/_docs/artipie-classes.png)\n+\n+### Configuration\n+\n+Artipie should be configured before startup.\n+Main meta configuration `yaml` file should contains storage config,\n+where adapter configuration files are located:\n+```yaml\n+meta:\n+  # configuration storage\n+  storage:\n+    # storage type\n+    type: fs\n+    path: /artipie/storage\n+```\n+\n+Meta storage contains adapters configuration, where key is a repository name,\n+and value is adapter config `yaml` file:\n+```text\n+config storage\n+\u251c\u2500\u2500 maven1\n+\u251c\u2500\u2500 docker-one\n+\u251c\u2500\u2500 hello-npm\n+\u2514\u2500\u2500 rpm\n+```\n+Each configuration file should specify what is the type of repository should be used\n+(adapter), and storage configuration (each repository may reference to different storage).\n+```yaml\n+repo:\n+  type:\n+    maven\n+  storage:\n+    type: s3\n+    url: s3://acme.com/snapshot\n+    username: admin\n+    password: 123qwe\n+```\n+\n+### Deployment\n+\n+Artipie web server can be started as standalone Java application, or\n+started in a cluster with multiple instance behind load balancer.\n+If Artipie was started in a cluster, all instances should receive\n+single meta configuration for Artipie module. It's recommented to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb2dee99a39857de79967f722bcd037de0a0708"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2335, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}