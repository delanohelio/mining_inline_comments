{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2OTkyMTQ3", "number": 801, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNToxOToxOFrOFECH2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNToyNDozN1rOFECRwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzczNDAxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/ArtipieServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNToxOToxOFrOID9Usg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNToxOToxOFrOID9Usg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyMTM2Mg==", "bodyText": "@olenagerasimova to me it does not seem logical that a configuration parameter is passed to start method. I'd suggest to specify layyou (or whole artipie.yaml content) when ArtipieServer is created. It might be too much to add in this PR, so I'd suggest to add a puzzle for that if you agree about this design issue.", "url": "https://github.com/artipie/artipie/pull/801#discussion_r541021362", "createdAt": "2020-12-11T15:19:18Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/ArtipieServer.java", "diffHunk": "@@ -156,6 +156,17 @@ public ArtipieServer(final Path root, final String name, final String config,\n      *  for usage in all these places.\n      */\n     public int start() throws IOException {\n+        return this.start(\"flat\");\n+    }\n+\n+    /**\n+     * Starts the server.\n+     *\n+     * @param layout Layout\n+     * @return Port the servers listening on.\n+     * @throws IOException In case of error creating configs or running the server.\n+     */\n+    public int start(final String layout) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ca3055c453424644628df33c617f666a1dec298"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Nzc1OTM2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/api/ArtipieApiITCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNToyNDozN1rOID9jrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNToyNDozN1rOID9jrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyNTE5OA==", "bodyText": "@olenagerasimova as you are using java standard library in this method, I'd suggest to use HttpURLConnection.HTTP_OK instead of parsing RsStatus.OK value", "url": "https://github.com/artipie/artipie/pull/801#discussion_r541025198", "createdAt": "2020-12-11T15:24:37Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/api/ArtipieApiITCase.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.api;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.ArtipieServer;\n+import com.artipie.RepoConfigYaml;\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.http.rs.RsStatus;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import org.apache.commons.codec.binary.Base64;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+/**\n+ * IT for Artipie API and dashboard.\n+ * @since 0.14\n+ */\n+class ArtipieApiITCase {\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Tested Artipie server.\n+     */\n+    private ArtipieServer server;\n+\n+    /**\n+     * Port.\n+     */\n+    private int port;\n+\n+    @BeforeEach\n+    void init() throws IOException {\n+        final Storage storage = new FileStorage(this.tmp);\n+        storage.save(\n+            new Key.From(\"repos/_permissions.yaml\"), new Content.From(this.apiPerms().getBytes())\n+        ).join();\n+        this.server = new ArtipieServer(\n+            this.tmp, \"my_repo\",\n+            new RepoConfigYaml(\"binary\")\n+                .withFileStorage(this.tmp.resolve(\"repos/test\"))\n+        );\n+        this.port = this.server.start(\"org\");\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(\n+        strings = {\n+            \"api/repos/bob\",\n+            \"dashboard/bob\", \"dashboard/bob/my_repo\",\n+            \"api/security/users/bob\", \"api/security/permissions/my_repo\",\n+            \"api/security/permissions\"\n+        }\n+    )\n+    void getRequestsWork(final String url) throws Exception {\n+        final HttpURLConnection con = (HttpURLConnection)\n+            new URL(\n+                String.format(\"http://localhost:%s/%s\", this.port, url)\n+            ).openConnection();\n+        con.setRequestMethod(\"GET\");\n+        con.setRequestProperty(\n+            \"Authorization\",\n+            String.format(\n+                \"Basic %s\",\n+                new String(\n+                    Base64.encodeBase64(\n+                        String.format(\n+                            \"%s:%s\", ArtipieServer.BOB.name(), ArtipieServer.BOB.password()\n+                        ).getBytes()\n+                    )\n+                )\n+            )\n+        );\n+        MatcherAssert.assertThat(\n+            \"Response status is 200\",\n+            con.getResponseCode(),\n+            new IsEqual<>(Integer.parseInt(RsStatus.OK.code()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ca3055c453424644628df33c617f666a1dec298"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1991, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}