{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNTA0OTAx", "number": 481, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMDoyOTo0NlrOEa6ooA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMDozMjowOFrOEa6rMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjU5MTA0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/docker/junit/DockerClientExtension.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMDoyOTo0NlrOHEoLIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMDoyOTo0NlrOHEoLIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYxNDU2Mw==", "bodyText": "@olegmoz I'd suggest to inline temp", "url": "https://github.com/artipie/artipie/pull/481#discussion_r474614563", "createdAt": "2020-08-21T10:29:46Z", "author": {"login": "olenagerasimova"}, "path": "src/test/java/com/artipie/docker/junit/DockerClientExtension.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.docker.junit;\n+\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+/**\n+ * Docker client extension. Populates {@link DockerClient} field of test class.\n+ *\n+ * @since 0.10\n+ */\n+public final class DockerClientExtension\n+    implements BeforeEachCallback, BeforeAllCallback, AfterAllCallback {\n+\n+    /**\n+     * Key for storing client instance in context store.\n+     */\n+    private static final String CLIENT = \"client\";\n+\n+    /**\n+     * Key for storing temp dir in context store.\n+     */\n+    private static final String TEMP_DIR = \"temp-dir\";\n+\n+    @Override\n+    public void beforeAll(final ExtensionContext context) throws Exception {\n+        final Path temp = Files.createTempDirectory(\"junit-docker-\");\n+        final DockerClient client = new DockerClient(temp);\n+        store(context).put(DockerClientExtension.TEMP_DIR, temp);\n+        store(context).put(DockerClientExtension.CLIENT, client);\n+    }\n+\n+    @Override\n+    public void beforeEach(final ExtensionContext context) throws Exception {\n+        injectVariables(\n+            context,\n+            store(context).get(DockerClientExtension.CLIENT, DockerClient.class)\n+        );\n+    }\n+\n+    @Override\n+    public void afterAll(final ExtensionContext context) {\n+        final Path temp = store(context).remove(DockerClientExtension.TEMP_DIR, Path.class);\n+        temp.toFile().delete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f303fa43cd85c32f283eb90b5d11799283421f19"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjU5NzYyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/docker/junit/DockerClientExtension.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMDozMjowOFrOHEoPBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMDozMjowOFrOHEoPBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYxNTU1Nw==", "bodyText": "@olegmoz I'd suggest to inlineclient", "url": "https://github.com/artipie/artipie/pull/481#discussion_r474615557", "createdAt": "2020-08-21T10:32:08Z", "author": {"login": "olenagerasimova"}, "path": "src/test/java/com/artipie/docker/junit/DockerClientExtension.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.docker.junit;\n+\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+/**\n+ * Docker client extension. Populates {@link DockerClient} field of test class.\n+ *\n+ * @since 0.10\n+ */\n+public final class DockerClientExtension\n+    implements BeforeEachCallback, BeforeAllCallback, AfterAllCallback {\n+\n+    /**\n+     * Key for storing client instance in context store.\n+     */\n+    private static final String CLIENT = \"client\";\n+\n+    /**\n+     * Key for storing temp dir in context store.\n+     */\n+    private static final String TEMP_DIR = \"temp-dir\";\n+\n+    @Override\n+    public void beforeAll(final ExtensionContext context) throws Exception {\n+        final Path temp = Files.createTempDirectory(\"junit-docker-\");\n+        final DockerClient client = new DockerClient(temp);\n+        store(context).put(DockerClientExtension.TEMP_DIR, temp);\n+        store(context).put(DockerClientExtension.CLIENT, client);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f303fa43cd85c32f283eb90b5d11799283421f19"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2116, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}