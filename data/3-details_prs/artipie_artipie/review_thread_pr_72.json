{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNzQyNTIw", "number": 72, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjo1OTowN1rODyD1ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjo0NDoxOVrODyyJmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODE4MjEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/RpPermissions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjo1OTowN1rOGF4e8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjo0Mjo0MVrOGGCY2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyMTQ5MQ==", "bodyText": "@olenagerasimova  you have logic in constructor, as far as I know it's not accepted here. And I personally think it should be moved to a method.", "url": "https://github.com/artipie/artipie/pull/72#discussion_r408821491", "createdAt": "2020-04-15T12:59:07Z", "author": {"login": "Guseyn"}, "path": "src/main/java/com/artipie/RpPermissions.java", "diffHunk": "@@ -23,38 +23,70 @@\n  */\n package com.artipie;\n \n+import com.amihaiemil.eoyaml.Yaml;\n+import com.amihaiemil.eoyaml.YamlMapping;\n+import com.amihaiemil.eoyaml.YamlSequence;\n import com.artipie.http.auth.Permissions;\n import java.io.File;\n-import org.apache.commons.lang3.NotImplementedException;\n+import java.io.IOException;\n \n /**\n  * Repository permissions: this implementation is based on\n  * on repository yaml configuration file.\n  * @since 0.2\n- * @todo #69:30min Implement this interface to read and process permissions from\n- *  repository yaml configuration file. Test is already implemented, see {@link RpPermissionsTest},\n- *  don't forget to enable is when this class is ready. Remove also PMD suppressions please.\n- *  For more details check issue #69.\n  */\n-@SuppressWarnings({\"PMD.UnusedPrivateField\", \"PMD.SingularField\"})\n public final class RpPermissions implements Permissions {\n \n     /**\n-     * Repository yaml configuration file.\n+     * YAML storage settings.\n      */\n-    private final File conf;\n+    private final YamlMapping yaml;\n \n     /**\n      * Ctor.\n-     * @param conf Conf file\n+     * @param conf Config file\n      */\n     public RpPermissions(final File conf) {\n-        this.conf = conf;\n+        this(readYaml(conf));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2eb156d6dee4bf49f6071d3744b1d2e5fe0893"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NjQ3NA==", "bodyText": "@Guseyn I've designed this object to work with yaml (I mean yaml as a java object), when accepting File in the ctor, I have to validate the file - it can be not even yaml, then there is no point instantiating this object. Validations in ctors are allowed, Yegor explained it here.\nAnd I do not want to move file parsing in allowed method, because there is no point to parse it each time we want to check permissions.", "url": "https://github.com/artipie/artipie/pull/72#discussion_r408956474", "createdAt": "2020-04-15T16:00:44Z", "author": {"login": "olenagerasimova"}, "path": "src/main/java/com/artipie/RpPermissions.java", "diffHunk": "@@ -23,38 +23,70 @@\n  */\n package com.artipie;\n \n+import com.amihaiemil.eoyaml.Yaml;\n+import com.amihaiemil.eoyaml.YamlMapping;\n+import com.amihaiemil.eoyaml.YamlSequence;\n import com.artipie.http.auth.Permissions;\n import java.io.File;\n-import org.apache.commons.lang3.NotImplementedException;\n+import java.io.IOException;\n \n /**\n  * Repository permissions: this implementation is based on\n  * on repository yaml configuration file.\n  * @since 0.2\n- * @todo #69:30min Implement this interface to read and process permissions from\n- *  repository yaml configuration file. Test is already implemented, see {@link RpPermissionsTest},\n- *  don't forget to enable is when this class is ready. Remove also PMD suppressions please.\n- *  For more details check issue #69.\n  */\n-@SuppressWarnings({\"PMD.UnusedPrivateField\", \"PMD.SingularField\"})\n public final class RpPermissions implements Permissions {\n \n     /**\n-     * Repository yaml configuration file.\n+     * YAML storage settings.\n      */\n-    private final File conf;\n+    private final YamlMapping yaml;\n \n     /**\n      * Ctor.\n-     * @param conf Conf file\n+     * @param conf Config file\n      */\n     public RpPermissions(final File conf) {\n-        this.conf = conf;\n+        this(readYaml(conf));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyMTQ5MQ=="}, "originalCommit": {"oid": "1e2eb156d6dee4bf49f6071d3744b1d2e5fe0893"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4Mzc3MQ==", "bodyText": "@olenagerasimova alright", "url": "https://github.com/artipie/artipie/pull/72#discussion_r408983771", "createdAt": "2020-04-15T16:42:41Z", "author": {"login": "Guseyn"}, "path": "src/main/java/com/artipie/RpPermissions.java", "diffHunk": "@@ -23,38 +23,70 @@\n  */\n package com.artipie;\n \n+import com.amihaiemil.eoyaml.Yaml;\n+import com.amihaiemil.eoyaml.YamlMapping;\n+import com.amihaiemil.eoyaml.YamlSequence;\n import com.artipie.http.auth.Permissions;\n import java.io.File;\n-import org.apache.commons.lang3.NotImplementedException;\n+import java.io.IOException;\n \n /**\n  * Repository permissions: this implementation is based on\n  * on repository yaml configuration file.\n  * @since 0.2\n- * @todo #69:30min Implement this interface to read and process permissions from\n- *  repository yaml configuration file. Test is already implemented, see {@link RpPermissionsTest},\n- *  don't forget to enable is when this class is ready. Remove also PMD suppressions please.\n- *  For more details check issue #69.\n  */\n-@SuppressWarnings({\"PMD.UnusedPrivateField\", \"PMD.SingularField\"})\n public final class RpPermissions implements Permissions {\n \n     /**\n-     * Repository yaml configuration file.\n+     * YAML storage settings.\n      */\n-    private final File conf;\n+    private final YamlMapping yaml;\n \n     /**\n      * Ctor.\n-     * @param conf Conf file\n+     * @param conf Config file\n      */\n     public RpPermissions(final File conf) {\n-        this.conf = conf;\n+        this(readYaml(conf));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyMTQ5MQ=="}, "originalCommit": {"oid": "1e2eb156d6dee4bf49f6071d3744b1d2e5fe0893"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODE5ODg2OnYy", "diffSide": "RIGHT", "path": "src/test/resources/repo_permissions.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzowMzo0MFrOGF4puQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzowMzo0MFrOGF4puQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyNDI0OQ==", "bodyText": "@olenagerasimova  add empty line in the end of the file", "url": "https://github.com/artipie/artipie/pull/72#discussion_r408824249", "createdAt": "2020-04-15T13:03:40Z", "author": {"login": "Guseyn"}, "path": "src/test/resources/repo_permissions.yml", "diffHunk": "@@ -9,12 +9,12 @@ repo:\n     # john can deploy and delete\n     # jane can only deploy\n     # any user can download\n-    - admin:\n-        - \"*\"\n-    - john:\n-        - deploy\n-        - delete\n-    - jane:\n-        - deploy\n-    - \"*\":\n-        - download\n\\ No newline at end of file\n+    admin:\n+      - \\*\n+    john:\n+      - deploy\n+      - delete\n+    jane:\n+      - deploy\n+    \\*:\n+      - download", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2eb156d6dee4bf49f6071d3744b1d2e5fe0893"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODIxNTQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/RpPermissions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzowODowM1rOGF40ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjo0MDoxMlrOGGCSpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyNjk4MQ==", "bodyText": "@olenagerasimova  Checks if permissions sequence has given an action.", "url": "https://github.com/artipie/artipie/pull/72#discussion_r408826981", "createdAt": "2020-04-15T13:08:03Z", "author": {"login": "Guseyn"}, "path": "src/main/java/com/artipie/RpPermissions.java", "diffHunk": "@@ -23,38 +23,70 @@\n  */\n package com.artipie;\n \n+import com.amihaiemil.eoyaml.Yaml;\n+import com.amihaiemil.eoyaml.YamlMapping;\n+import com.amihaiemil.eoyaml.YamlSequence;\n import com.artipie.http.auth.Permissions;\n import java.io.File;\n-import org.apache.commons.lang3.NotImplementedException;\n+import java.io.IOException;\n \n /**\n  * Repository permissions: this implementation is based on\n  * on repository yaml configuration file.\n  * @since 0.2\n- * @todo #69:30min Implement this interface to read and process permissions from\n- *  repository yaml configuration file. Test is already implemented, see {@link RpPermissionsTest},\n- *  don't forget to enable is when this class is ready. Remove also PMD suppressions please.\n- *  For more details check issue #69.\n  */\n-@SuppressWarnings({\"PMD.UnusedPrivateField\", \"PMD.SingularField\"})\n public final class RpPermissions implements Permissions {\n \n     /**\n-     * Repository yaml configuration file.\n+     * YAML storage settings.\n      */\n-    private final File conf;\n+    private final YamlMapping yaml;\n \n     /**\n      * Ctor.\n-     * @param conf Conf file\n+     * @param conf Config file\n      */\n     public RpPermissions(final File conf) {\n-        this.conf = conf;\n+        this(readYaml(conf));\n+    }\n+\n+    /**\n+     * Ctor.\n+     * @param yaml Configuration yaml\n+     */\n+    public RpPermissions(final YamlMapping yaml) {\n+        this.yaml = yaml;\n     }\n \n     @Override\n     public boolean allowed(final String name, final String action) {\n-        throw new NotImplementedException(\"this method is not yet implemented\");\n+        final YamlMapping all = this.yaml.yamlMapping(\"permissions\");\n+        return check(all.yamlSequence(name), action) || check(all.yamlSequence(\"*\"), action);\n+    }\n+\n+    /**\n+     * Read provided file into Yaml object.\n+     * @param conf File\n+     * @return Yaml mapping\n+     */\n+    private static YamlMapping readYaml(final File conf) {\n+        try {\n+            return Yaml.createYamlInput(conf).readYamlMapping().yamlMapping(\"repo\");\n+        } catch (final IOException ex) {\n+            throw new IllegalArgumentException(\"Invalid configuration file\", ex);\n+        }\n+    }\n+\n+    /**\n+     * Checks if permissions sequence has given action.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2eb156d6dee4bf49f6071d3744b1d2e5fe0893"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODU5MQ==", "bodyText": "@Guseyn hm, I don't agree... This method check, that the sequence contains action, given as a parameter.", "url": "https://github.com/artipie/artipie/pull/72#discussion_r408958591", "createdAt": "2020-04-15T16:03:46Z", "author": {"login": "olenagerasimova"}, "path": "src/main/java/com/artipie/RpPermissions.java", "diffHunk": "@@ -23,38 +23,70 @@\n  */\n package com.artipie;\n \n+import com.amihaiemil.eoyaml.Yaml;\n+import com.amihaiemil.eoyaml.YamlMapping;\n+import com.amihaiemil.eoyaml.YamlSequence;\n import com.artipie.http.auth.Permissions;\n import java.io.File;\n-import org.apache.commons.lang3.NotImplementedException;\n+import java.io.IOException;\n \n /**\n  * Repository permissions: this implementation is based on\n  * on repository yaml configuration file.\n  * @since 0.2\n- * @todo #69:30min Implement this interface to read and process permissions from\n- *  repository yaml configuration file. Test is already implemented, see {@link RpPermissionsTest},\n- *  don't forget to enable is when this class is ready. Remove also PMD suppressions please.\n- *  For more details check issue #69.\n  */\n-@SuppressWarnings({\"PMD.UnusedPrivateField\", \"PMD.SingularField\"})\n public final class RpPermissions implements Permissions {\n \n     /**\n-     * Repository yaml configuration file.\n+     * YAML storage settings.\n      */\n-    private final File conf;\n+    private final YamlMapping yaml;\n \n     /**\n      * Ctor.\n-     * @param conf Conf file\n+     * @param conf Config file\n      */\n     public RpPermissions(final File conf) {\n-        this.conf = conf;\n+        this(readYaml(conf));\n+    }\n+\n+    /**\n+     * Ctor.\n+     * @param yaml Configuration yaml\n+     */\n+    public RpPermissions(final YamlMapping yaml) {\n+        this.yaml = yaml;\n     }\n \n     @Override\n     public boolean allowed(final String name, final String action) {\n-        throw new NotImplementedException(\"this method is not yet implemented\");\n+        final YamlMapping all = this.yaml.yamlMapping(\"permissions\");\n+        return check(all.yamlSequence(name), action) || check(all.yamlSequence(\"*\"), action);\n+    }\n+\n+    /**\n+     * Read provided file into Yaml object.\n+     * @param conf File\n+     * @return Yaml mapping\n+     */\n+    private static YamlMapping readYaml(final File conf) {\n+        try {\n+            return Yaml.createYamlInput(conf).readYamlMapping().yamlMapping(\"repo\");\n+        } catch (final IOException ex) {\n+            throw new IllegalArgumentException(\"Invalid configuration file\", ex);\n+        }\n+    }\n+\n+    /**\n+     * Checks if permissions sequence has given action.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyNjk4MQ=="}, "originalCommit": {"oid": "1e2eb156d6dee4bf49f6071d3744b1d2e5fe0893"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4MjE4Mg==", "bodyText": "@olenagerasimova Okay, \"has a given action\"", "url": "https://github.com/artipie/artipie/pull/72#discussion_r408982182", "createdAt": "2020-04-15T16:40:12Z", "author": {"login": "Guseyn"}, "path": "src/main/java/com/artipie/RpPermissions.java", "diffHunk": "@@ -23,38 +23,70 @@\n  */\n package com.artipie;\n \n+import com.amihaiemil.eoyaml.Yaml;\n+import com.amihaiemil.eoyaml.YamlMapping;\n+import com.amihaiemil.eoyaml.YamlSequence;\n import com.artipie.http.auth.Permissions;\n import java.io.File;\n-import org.apache.commons.lang3.NotImplementedException;\n+import java.io.IOException;\n \n /**\n  * Repository permissions: this implementation is based on\n  * on repository yaml configuration file.\n  * @since 0.2\n- * @todo #69:30min Implement this interface to read and process permissions from\n- *  repository yaml configuration file. Test is already implemented, see {@link RpPermissionsTest},\n- *  don't forget to enable is when this class is ready. Remove also PMD suppressions please.\n- *  For more details check issue #69.\n  */\n-@SuppressWarnings({\"PMD.UnusedPrivateField\", \"PMD.SingularField\"})\n public final class RpPermissions implements Permissions {\n \n     /**\n-     * Repository yaml configuration file.\n+     * YAML storage settings.\n      */\n-    private final File conf;\n+    private final YamlMapping yaml;\n \n     /**\n      * Ctor.\n-     * @param conf Conf file\n+     * @param conf Config file\n      */\n     public RpPermissions(final File conf) {\n-        this.conf = conf;\n+        this(readYaml(conf));\n+    }\n+\n+    /**\n+     * Ctor.\n+     * @param yaml Configuration yaml\n+     */\n+    public RpPermissions(final YamlMapping yaml) {\n+        this.yaml = yaml;\n     }\n \n     @Override\n     public boolean allowed(final String name, final String action) {\n-        throw new NotImplementedException(\"this method is not yet implemented\");\n+        final YamlMapping all = this.yaml.yamlMapping(\"permissions\");\n+        return check(all.yamlSequence(name), action) || check(all.yamlSequence(\"*\"), action);\n+    }\n+\n+    /**\n+     * Read provided file into Yaml object.\n+     * @param conf File\n+     * @return Yaml mapping\n+     */\n+    private static YamlMapping readYaml(final File conf) {\n+        try {\n+            return Yaml.createYamlInput(conf).readYamlMapping().yamlMapping(\"repo\");\n+        } catch (final IOException ex) {\n+            throw new IllegalArgumentException(\"Invalid configuration file\", ex);\n+        }\n+    }\n+\n+    /**\n+     * Checks if permissions sequence has given action.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyNjk4MQ=="}, "originalCommit": {"oid": "1e2eb156d6dee4bf49f6071d3744b1d2e5fe0893"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTc0NDc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/RpPermissions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjozMjo1NVrOGHBhyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjozMjo1NVrOGHBhyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAxODI1MQ==", "bodyText": "@olenagerasimova let's extract the * to a static variable and use it in check and allowed methods.", "url": "https://github.com/artipie/artipie/pull/72#discussion_r410018251", "createdAt": "2020-04-17T06:32:55Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/RpPermissions.java", "diffHunk": "@@ -23,38 +23,70 @@\n  */\n package com.artipie;\n \n+import com.amihaiemil.eoyaml.Yaml;\n+import com.amihaiemil.eoyaml.YamlMapping;\n+import com.amihaiemil.eoyaml.YamlSequence;\n import com.artipie.http.auth.Permissions;\n import java.io.File;\n-import org.apache.commons.lang3.NotImplementedException;\n+import java.io.IOException;\n \n /**\n  * Repository permissions: this implementation is based on\n  * on repository yaml configuration file.\n  * @since 0.2\n- * @todo #69:30min Implement this interface to read and process permissions from\n- *  repository yaml configuration file. Test is already implemented, see {@link RpPermissionsTest},\n- *  don't forget to enable is when this class is ready. Remove also PMD suppressions please.\n- *  For more details check issue #69.\n  */\n-@SuppressWarnings({\"PMD.UnusedPrivateField\", \"PMD.SingularField\"})\n public final class RpPermissions implements Permissions {\n \n     /**\n-     * Repository yaml configuration file.\n+     * YAML storage settings.\n      */\n-    private final File conf;\n+    private final YamlMapping yaml;\n \n     /**\n      * Ctor.\n-     * @param conf Conf file\n+     * @param conf Config file\n      */\n     public RpPermissions(final File conf) {\n-        this.conf = conf;\n+        this(readYaml(conf));\n+    }\n+\n+    /**\n+     * Ctor.\n+     * @param yaml Configuration yaml\n+     */\n+    public RpPermissions(final YamlMapping yaml) {\n+        this.yaml = yaml;\n     }\n \n     @Override\n     public boolean allowed(final String name, final String action) {\n-        throw new NotImplementedException(\"this method is not yet implemented\");\n+        final YamlMapping all = this.yaml.yamlMapping(\"permissions\");\n+        return check(all.yamlSequence(name), action) || check(all.yamlSequence(\"*\"), action);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ec6a969b0697a77dfea354f573ff8ef7a316b79"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTc3MDQ4OnYy", "diffSide": "RIGHT", "path": "src/test/resources/repo_permissions.yml", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjo0NDoxOVrOGHBxgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwODoyMDozOFrOGHEiIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyMjI3NA==", "bodyText": "@olenagerasimova Im thinking about testing \"negative\" scenarios which can be possibly defined in yml file to validate that no exceptions are raised. For instance\n- john:\n    -\n    - delete\n- jane:\n\nWDYT is it worth testing?", "url": "https://github.com/artipie/artipie/pull/72#discussion_r410022274", "createdAt": "2020-04-17T06:44:19Z", "author": {"login": "Vatavuk"}, "path": "src/test/resources/repo_permissions.yml", "diffHunk": "@@ -9,12 +9,12 @@ repo:\n     # john can deploy and delete\n     # jane can only deploy\n     # any user can download\n-    - admin:\n-        - \"*\"\n-    - john:\n-        - deploy\n-        - delete\n-    - jane:\n-        - deploy\n-    - \"*\":\n-        - download\n\\ No newline at end of file\n+    admin:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ec6a969b0697a77dfea354f573ff8ef7a316b79"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAzMDA4Mw==", "bodyText": "@Vatavuk hm, seems like we will be testing com.amihaiemil.eoyaml, not our permissions settings...", "url": "https://github.com/artipie/artipie/pull/72#discussion_r410030083", "createdAt": "2020-04-17T07:03:44Z", "author": {"login": "olenagerasimova"}, "path": "src/test/resources/repo_permissions.yml", "diffHunk": "@@ -9,12 +9,12 @@ repo:\n     # john can deploy and delete\n     # jane can only deploy\n     # any user can download\n-    - admin:\n-        - \"*\"\n-    - john:\n-        - deploy\n-        - delete\n-    - jane:\n-        - deploy\n-    - \"*\":\n-        - download\n\\ No newline at end of file\n+    admin:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyMjI3NA=="}, "originalCommit": {"oid": "8ec6a969b0697a77dfea354f573ff8ef7a316b79"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAzOTc0NQ==", "bodyText": "@olenagerasimova  There is also a security dimension involved here. If parsing is not right jane or john might be able to access everything. I believe it is valuable to assert this even though it might seem that we are validating com.amihaiemil.eoyaml but actually we are testing different permission inputs to assert that everything works as expected. RpPermissions implementation might change in the future and this test would act as an additional safety net.", "url": "https://github.com/artipie/artipie/pull/72#discussion_r410039745", "createdAt": "2020-04-17T07:24:57Z", "author": {"login": "Vatavuk"}, "path": "src/test/resources/repo_permissions.yml", "diffHunk": "@@ -9,12 +9,12 @@ repo:\n     # john can deploy and delete\n     # jane can only deploy\n     # any user can download\n-    - admin:\n-        - \"*\"\n-    - john:\n-        - deploy\n-        - delete\n-    - jane:\n-        - deploy\n-    - \"*\":\n-        - download\n\\ No newline at end of file\n+    admin:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyMjI3NA=="}, "originalCommit": {"oid": "8ec6a969b0697a77dfea354f573ff8ef7a316b79"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1MDAwMQ==", "bodyText": "@Vatavuk hm, not sure I agree, but I've added such case. Please note, that empty strings in yaml should be replaced with ~, otherwise yaml is simply invalid.", "url": "https://github.com/artipie/artipie/pull/72#discussion_r410050001", "createdAt": "2020-04-17T07:46:25Z", "author": {"login": "olenagerasimova"}, "path": "src/test/resources/repo_permissions.yml", "diffHunk": "@@ -9,12 +9,12 @@ repo:\n     # john can deploy and delete\n     # jane can only deploy\n     # any user can download\n-    - admin:\n-        - \"*\"\n-    - john:\n-        - deploy\n-        - delete\n-    - jane:\n-        - deploy\n-    - \"*\":\n-        - download\n\\ No newline at end of file\n+    admin:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyMjI3NA=="}, "originalCommit": {"oid": "8ec6a969b0697a77dfea354f573ff8ef7a316b79"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA2NzQ5MA==", "bodyText": "@olenagerasimova ok great", "url": "https://github.com/artipie/artipie/pull/72#discussion_r410067490", "createdAt": "2020-04-17T08:20:38Z", "author": {"login": "Vatavuk"}, "path": "src/test/resources/repo_permissions.yml", "diffHunk": "@@ -9,12 +9,12 @@ repo:\n     # john can deploy and delete\n     # jane can only deploy\n     # any user can download\n-    - admin:\n-        - \"*\"\n-    - john:\n-        - deploy\n-        - delete\n-    - jane:\n-        - deploy\n-    - \"*\":\n-        - download\n\\ No newline at end of file\n+    admin:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyMjI3NA=="}, "originalCommit": {"oid": "8ec6a969b0697a77dfea354f573ff8ef7a316b79"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2365, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}