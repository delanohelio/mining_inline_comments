{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NjAzNTUy", "number": 386, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwOToyNTozN1rOERweLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwOToyNTozN1rOERweLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDU1NDA0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/docker/DockerProxyTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwOToyNTozN1rOG2o5pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoxMjoyMVrOG3YCfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk0NjQwNQ==", "bodyText": "@olegmoz I'd suggest to unify this test: either use MethodSource in both test methods or nowhere", "url": "https://github.com/artipie/artipie/pull/386#discussion_r459946405", "createdAt": "2020-07-24T09:25:37Z", "author": {"login": "olenagerasimova"}, "path": "src/test/java/com/artipie/docker/DockerProxyTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.docker;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.RepoConfig;\n+import com.artipie.asto.Key;\n+import com.artipie.http.Headers;\n+import com.artipie.http.Slice;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqMethod;\n+import com.artipie.http.rs.RsStatus;\n+import io.reactivex.Flowable;\n+import java.io.IOException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Stream;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+/**\n+ * Tests for {@link DockerProxy}.\n+ *\n+ * @since 0.9\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+class DockerProxyTest {\n+\n+    @Test\n+    void shouldBuildFromConfig() throws Exception {\n+        final Slice slice = dockerProxy(\n+            String.join(\n+                \"\\n\",\n+                \"repo:\",\n+                \"  type: docker-proxy\",\n+                \"  remotes:\",\n+                \"    - url: registry-1.docker.io\",\n+                \"      username: admin\",\n+                \"      password: qwerty\",\n+                \"      cache:\",\n+                \"        storage:\",\n+                \"          type: fs\",\n+                \"          path: /var/artipie/data/cache\",\n+                \"    - url: another-registry.org:54321\",\n+                \"    - url: mcr.microsoft.com\",\n+                \"      cache:\",\n+                \"        storage: my-storage\",\n+                \"  storage:\",\n+                \"    type: fs\",\n+                \"    path: /var/artipie/data/local\"\n+            )\n+        );\n+        MatcherAssert.assertThat(\n+            slice.response(\n+                new RequestLine(RqMethod.GET, \"/v2/\").toString(),\n+                Headers.EMPTY,\n+                Flowable.empty()\n+            ),\n+            new RsHasStatus(RsStatus.OK)\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"badConfigs\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efef0bfb7dadd0aca044afb64bb37695736ec458"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxODcxNg==", "bodyText": "@olenagerasimova thanks, updated for uniformity", "url": "https://github.com/artipie/artipie/pull/386#discussion_r460718716", "createdAt": "2020-07-27T08:12:21Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/docker/DockerProxyTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.docker;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.RepoConfig;\n+import com.artipie.asto.Key;\n+import com.artipie.http.Headers;\n+import com.artipie.http.Slice;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqMethod;\n+import com.artipie.http.rs.RsStatus;\n+import io.reactivex.Flowable;\n+import java.io.IOException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Stream;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+/**\n+ * Tests for {@link DockerProxy}.\n+ *\n+ * @since 0.9\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+class DockerProxyTest {\n+\n+    @Test\n+    void shouldBuildFromConfig() throws Exception {\n+        final Slice slice = dockerProxy(\n+            String.join(\n+                \"\\n\",\n+                \"repo:\",\n+                \"  type: docker-proxy\",\n+                \"  remotes:\",\n+                \"    - url: registry-1.docker.io\",\n+                \"      username: admin\",\n+                \"      password: qwerty\",\n+                \"      cache:\",\n+                \"        storage:\",\n+                \"          type: fs\",\n+                \"          path: /var/artipie/data/cache\",\n+                \"    - url: another-registry.org:54321\",\n+                \"    - url: mcr.microsoft.com\",\n+                \"      cache:\",\n+                \"        storage: my-storage\",\n+                \"  storage:\",\n+                \"    type: fs\",\n+                \"    path: /var/artipie/data/local\"\n+            )\n+        );\n+        MatcherAssert.assertThat(\n+            slice.response(\n+                new RequestLine(RqMethod.GET, \"/v2/\").toString(),\n+                Headers.EMPTY,\n+                Flowable.empty()\n+            ),\n+            new RsHasStatus(RsStatus.OK)\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"badConfigs\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk0NjQwNQ=="}, "originalCommit": {"oid": "efef0bfb7dadd0aca044afb64bb37695736ec458"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2290, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}