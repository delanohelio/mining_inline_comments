{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczMTQ0MjUz", "number": 502, "title": "#496 - Add GetPermissionsSlice and tests", "bodyText": "Closes #496\nAdd GetPermissionsSlice and tests.", "createdAt": "2020-08-25T11:41:18Z", "url": "https://github.com/artipie/artipie/pull/502", "merged": true, "mergeCommit": {"oid": "560e26ed26b09e111ff82afd8a56c03dd4fc31bc"}, "closed": true, "closedAt": "2020-08-25T14:20:09Z", "author": {"login": "genryxy"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCVpRNAH2gAyNDczMTQ0MjUzOjdlNmI2MDIyMDI0ODIyZWNlYjQ4NmYwZGQ1MWZhNWU5YWM5MGFkYTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCX9apgFqTQ3NDUzMDI0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7e6b6022024822eceb486f0dd51fa5e9ac90ada2", "author": {"user": {"login": "genryxy", "name": "Alexander"}}, "url": "https://github.com/artipie/artipie/commit/7e6b6022024822eceb486f0dd51fa5e9ac90ada2", "committedDate": "2020-08-25T11:38:10Z", "message": "#496 - Add GetPermissionsSlice and tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a32ba039b1e7253e978d9d1745b12823e4a2117", "author": {"user": {"login": "genryxy", "name": "Alexander"}}, "url": "https://github.com/artipie/artipie/commit/7a32ba039b1e7253e978d9d1745b12823e4a2117", "committedDate": "2020-08-25T11:58:02Z", "message": "Merge branch 'master' into 496-GetPermissionsSlice"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NDIxMjIw", "url": "https://github.com/artipie/artipie/pull/502#pullrequestreview-474421220", "createdAt": "2020-08-25T12:18:14Z", "commit": {"oid": "7a32ba039b1e7253e978d9d1745b12823e4a2117"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjoxODoxNVrOHGVU-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjoyMzo0MlrOHGVjqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQwMjkzNg==", "bodyText": "@genryxy let's rename user to perm to avoid inconsistency", "url": "https://github.com/artipie/artipie/pull/502#discussion_r476402936", "createdAt": "2020-08-25T12:18:15Z", "author": {"login": "olenagerasimova"}, "path": "src/main/java/com/artipie/api/artifactory/GetPermissionsSlice.java", "diffHunk": "@@ -23,26 +23,79 @@\n  */\n package com.artipie.api.artifactory;\n \n+import com.artipie.RepoPermissions;\n+import com.artipie.Settings;\n import com.artipie.http.Response;\n import com.artipie.http.Slice;\n+import com.artipie.http.async.AsyncResponse;\n+import com.artipie.http.rs.common.RsJson;\n+import com.jcabi.log.Logger;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n import java.nio.ByteBuffer;\n import java.util.Map;\n+import javax.json.Json;\n+import javax.json.JsonArrayBuilder;\n+import javax.json.JsonObject;\n import org.reactivestreams.Publisher;\n \n /**\n  * Artifactory `GET /api/security/permissions` endpoint, returns\n  * permissions ( = repositories) list.\n  * @since 0.10\n- * @todo #444:30min Implement this slice to return available repositories json list,\n- *  format can be found https://www.jfrog.com/confluence/display/rtf/artifactory+rest+api,\n- *  Get Permission Targets section. Use RepoPermissions#repositories(), do not ferget about test\n- *  and add this slice to ArtipieApi.\n  */\n public final class GetPermissionsSlice implements Slice {\n \n+    /**\n+     * This endpoint path.\n+     */\n+    public static final String PATH = \"/api/security/permissions\";\n+\n+    /**\n+     * Artipie settings.\n+     */\n+    private final Settings settings;\n+\n+    /**\n+     * Ctor.\n+     * @param settings Setting\n+     */\n+    public GetPermissionsSlice(final Settings settings) {\n+        this.settings = settings;\n+    }\n+\n     @Override\n     public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n         final Publisher<ByteBuffer> body) {\n-        throw new UnsupportedOperationException(\"Not implemented yet\");\n+        try {\n+            final String base = this.settings.meta().string(\"base_url\").replaceAll(\"/$\", \"\");\n+            return new AsyncResponse(\n+                new RepoPermissions.FromSettings(this.settings).repositories().<Response>thenApply(\n+                    list -> {\n+                        final JsonArrayBuilder json = Json.createArrayBuilder();\n+                        list.forEach(\n+                            user -> json.add(GetPermissionsSlice.permJson(base, user))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a32ba039b1e7253e978d9d1745b12823e4a2117"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQwNjY5OA==", "bodyText": "@genryxy storage.list() returns ordered keys list, there is no need to check different items order in json response", "url": "https://github.com/artipie/artipie/pull/502#discussion_r476406698", "createdAt": "2020-08-25T12:23:42Z", "author": {"login": "olenagerasimova"}, "path": "src/test/java/com/artipie/api/artifactory/GetPermissionsSliceTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.api.artifactory;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.amihaiemil.eoyaml.YamlMapping;\n+import com.artipie.Credentials;\n+import com.artipie.Settings;\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.http.hm.RsHasBody;\n+import com.artipie.http.hm.SliceHasResponse;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqMethod;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.AnyOf;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test for {@link GetPermissionsSlice}.\n+ * @since 0.10\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+final class GetPermissionsSliceTest {\n+    /**\n+     * Artipie base url.\n+     */\n+    private static final String BASE = \"http://artipie.com/\";\n+\n+    /**\n+     * Artipie yaml meta section.\n+     */\n+    private static final YamlMapping META = Yaml.createYamlMappingBuilder()\n+        .add(\"base_url\", GetPermissionsSliceTest.BASE)\n+        .build();\n+\n+    @Test\n+    void shouldReturnsPermissionsList() {\n+        final String uri = String.format(\n+            \"%sapi/security/permissions/\", GetPermissionsSliceTest.BASE\n+        );\n+        final String jsonobj = \"{\\\"name\\\":\\\"%s\\\",\\\"uri\\\":\\\"%s%s\\\"}\";\n+        final String read = \"readSourceArtifacts\";\n+        final String cache = \"populateCaches\";\n+        final String readobj = String.format(jsonobj, read, uri, read);\n+        final String cacheobj = String.format(jsonobj, cache, uri, cache);\n+        final Storage storage = new InMemoryStorage();\n+        storage.save(new Key.From(this.nameYaml(read)), Content.EMPTY).join();\n+        storage.save(new Key.From(this.nameYaml(cache)), Content.EMPTY).join();\n+        MatcherAssert.assertThat(\n+            new GetPermissionsSlice(\n+                new Settings.Fake(storage, new Credentials.FromEnv(), GetPermissionsSliceTest.META)\n+            ),\n+            new SliceHasResponse(\n+                new AnyOf<>(\n+                    Arrays.asList(\n+                        new RsHasBody(\n+                            String.format(\"[%s,%s]\", readobj, cacheobj), StandardCharsets.UTF_8\n+                        ),\n+                        new RsHasBody(\n+                            String.format(\"[%s,%s]\", cacheobj, readobj), StandardCharsets.UTF_8\n+                        )\n+                    )\n+                ),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a32ba039b1e7253e978d9d1745b12823e4a2117"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8960214fa8f8df3960b0de993de2c267a591f4ae", "author": {"user": {"login": "genryxy", "name": "Alexander"}}, "url": "https://github.com/artipie/artipie/commit/8960214fa8f8df3960b0de993de2c267a591f4ae", "committedDate": "2020-08-25T12:38:14Z", "message": "#496 - Review fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NDc4OTU2", "url": "https://github.com/artipie/artipie/pull/502#pullrequestreview-474478956", "createdAt": "2020-08-25T13:27:08Z", "commit": {"oid": "8960214fa8f8df3960b0de993de2c267a591f4ae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NTMwMjQ3", "url": "https://github.com/artipie/artipie/pull/502#pullrequestreview-474530247", "createdAt": "2020-08-25T14:19:59Z", "commit": {"oid": "8960214fa8f8df3960b0de993de2c267a591f4ae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3506, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}