{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxMDU1MTQ3", "number": 476, "title": "#444 - GetUsersSlice introduced", "bodyText": "For  #444 implemented GetUsersSlice to obtain users list with urls.", "createdAt": "2020-08-20T16:32:04Z", "url": "https://github.com/artipie/artipie/pull/476", "merged": true, "mergeCommit": {"oid": "e0cc9d70e52b6af079fdb8bd3f0dc892b1043d2d"}, "closed": true, "closedAt": "2020-08-21T07:47:11Z", "author": {"login": "olenagerasimova"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAy0ymgH2gAyNDcxMDU1MTQ3OmVhNDFjMjcxYWQwYzYyYTk4N2YzNzQyMjY2ZDdiMjUyNjdiZWUwYTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdA_3XsAFqTQ3MjI3MzE1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ea41c271ad0c62a987f3742266d7b25267bee0a5", "author": {"user": {"login": "olenagerasimova", "name": "Alena"}}, "url": "https://github.com/artipie/artipie/commit/ea41c271ad0c62a987f3742266d7b25267bee0a5", "committedDate": "2020-08-20T16:30:09Z", "message": "#444 - GetUsersSlice introduced"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0494d1b48048e83befaf072580c77e506567ffb5", "author": {"user": {"login": "olenagerasimova", "name": "Alena"}}, "url": "https://github.com/artipie/artipie/commit/0494d1b48048e83befaf072580c77e506567ffb5", "committedDate": "2020-08-20T16:38:15Z", "message": "Merge branch 'master' into 444-get-users"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMjYzNjg1", "url": "https://github.com/artipie/artipie/pull/476#pullrequestreview-472263685", "createdAt": "2020-08-21T07:25:39Z", "commit": {"oid": "0494d1b48048e83befaf072580c77e506567ffb5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzoyNTozOVrOHEfHYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzoyNjoyN1rOHEfJ4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2NjE0Ng==", "bodyText": "@olenagerasimova I'd suggest to not translate error to response here, as it is done on upper level too. You could rethrow IOException wrapped into runtime exception or return Response which returns failed future on send(...) call", "url": "https://github.com/artipie/artipie/pull/476#discussion_r474466146", "createdAt": "2020-08-21T07:25:39Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/api/artifactory/GetUsersSlice.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.api.artifactory;\n+\n+import com.artipie.Settings;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.async.AsyncResponse;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import com.artipie.http.rs.StandardRs;\n+import com.artipie.http.rs.common.RsJson;\n+import com.jcabi.log.Logger;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import javax.json.Json;\n+import javax.json.JsonArrayBuilder;\n+import javax.json.JsonObject;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Artifactory `GET /api/security/users` endpoint, returns json with user names and links to\n+ * user information.\n+ * @since 0.10\n+ */\n+public final class GetUsersSlice implements Slice {\n+\n+    /**\n+     * This endpoint path.\n+     */\n+    public static final String PATH = \"/api/security/users\";\n+\n+    /**\n+     * Artipie settings.\n+     */\n+    private final Settings settings;\n+\n+    /**\n+     * Ctor.\n+     * @param settings Setting\n+     */\n+    public GetUsersSlice(final Settings settings) {\n+        this.settings = settings;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        Response res;\n+        try {\n+            final String base = this.settings.meta().string(\"base_url\").replaceAll(\"/$\", \"\");\n+            res = new AsyncResponse(\n+                this.settings.credentials().thenCompose(\n+                    opt -> opt.map(\n+                        cred -> cred.users().<Response>thenApply(\n+                            list -> {\n+                                final JsonArrayBuilder json = Json.createArrayBuilder();\n+                                list.forEach(\n+                                    user -> json.add(GetUsersSlice.getUserJson(user, base))\n+                                );\n+                                return new RsJson(json);\n+                            }\n+                        )\n+                    ).orElse(CompletableFuture.completedFuture(StandardRs.NOT_FOUND))\n+                )\n+            );\n+        } catch (final IOException err) {\n+            Logger.error(this, err.getMessage());\n+            res = new RsWithStatus(RsStatus.INTERNAL_ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0494d1b48048e83befaf072580c77e506567ffb5"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2Njc4Nw==", "bodyText": "@olenagerasimova parameters order got me confused, could you please put base before name?", "url": "https://github.com/artipie/artipie/pull/476#discussion_r474466787", "createdAt": "2020-08-21T07:26:27Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/api/artifactory/GetUsersSlice.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.api.artifactory;\n+\n+import com.artipie.Settings;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.async.AsyncResponse;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import com.artipie.http.rs.StandardRs;\n+import com.artipie.http.rs.common.RsJson;\n+import com.jcabi.log.Logger;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import javax.json.Json;\n+import javax.json.JsonArrayBuilder;\n+import javax.json.JsonObject;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Artifactory `GET /api/security/users` endpoint, returns json with user names and links to\n+ * user information.\n+ * @since 0.10\n+ */\n+public final class GetUsersSlice implements Slice {\n+\n+    /**\n+     * This endpoint path.\n+     */\n+    public static final String PATH = \"/api/security/users\";\n+\n+    /**\n+     * Artipie settings.\n+     */\n+    private final Settings settings;\n+\n+    /**\n+     * Ctor.\n+     * @param settings Setting\n+     */\n+    public GetUsersSlice(final Settings settings) {\n+        this.settings = settings;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        Response res;\n+        try {\n+            final String base = this.settings.meta().string(\"base_url\").replaceAll(\"/$\", \"\");\n+            res = new AsyncResponse(\n+                this.settings.credentials().thenCompose(\n+                    opt -> opt.map(\n+                        cred -> cred.users().<Response>thenApply(\n+                            list -> {\n+                                final JsonArrayBuilder json = Json.createArrayBuilder();\n+                                list.forEach(\n+                                    user -> json.add(GetUsersSlice.getUserJson(user, base))\n+                                );\n+                                return new RsJson(json);\n+                            }\n+                        )\n+                    ).orElse(CompletableFuture.completedFuture(StandardRs.NOT_FOUND))\n+                )\n+            );\n+        } catch (final IOException err) {\n+            Logger.error(this, err.getMessage());\n+            res = new RsWithStatus(RsStatus.INTERNAL_ERROR);\n+        }\n+        return res;\n+    }\n+\n+    /**\n+     * Returns json for user.\n+     * @param name Username\n+     * @param base Base url", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0494d1b48048e83befaf072580c77e506567ffb5"}, "originalPosition": 100}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87df9b4b80f16dc09f37bc5eacc67cc37f02b9ca", "author": {"user": {"login": "olenagerasimova", "name": "Alena"}}, "url": "https://github.com/artipie/artipie/commit/87df9b4b80f16dc09f37bc5eacc67cc37f02b9ca", "committedDate": "2020-08-21T07:36:42Z", "message": "#444 - GetUsersSlice CR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38cc57335b1ffd47f60ff66ee9a80922183ee55c", "author": {"user": {"login": "olenagerasimova", "name": "Alena"}}, "url": "https://github.com/artipie/artipie/commit/38cc57335b1ffd47f60ff66ee9a80922183ee55c", "committedDate": "2020-08-21T07:41:07Z", "message": "#444 - GetUsersSlice CR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMjczMTUy", "url": "https://github.com/artipie/artipie/pull/476#pullrequestreview-472273152", "createdAt": "2020-08-21T07:41:44Z", "commit": {"oid": "87df9b4b80f16dc09f37bc5eacc67cc37f02b9ca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3477, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}