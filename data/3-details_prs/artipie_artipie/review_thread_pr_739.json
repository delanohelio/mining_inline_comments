{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1ODU3NDcw", "number": 739, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOToxNDo1MFrOE1kIrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOToxNDo1MFrOE1kIrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjAyMDMxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/npm/NpmProxyITCase.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOToxNDo1MFrOHt5_5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNDozODo1NlrOHuGU0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5ODIxMg==", "bodyText": "@genryxy not sure why do we need this check. The test checks that npm install works later, this check does not look to be required", "url": "https://github.com/artipie/artipie/pull/739#discussion_r517898212", "createdAt": "2020-11-05T09:14:50Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/npm/NpmProxyITCase.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.npm;\n+\n+import com.artipie.ArtipieServer;\n+import com.artipie.RepoConfigYaml;\n+import com.artipie.RepoPerms;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.nuget.RandomFreePort;\n+import com.artipie.test.RepositoryUrl;\n+import com.artipie.test.TestContainer;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.hamcrest.text.StringContainsInOrder;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+/**\n+ * Integration test for {@link com.artipie.npm.proxy.http.NpmProxySlice}.\n+ * @since 0.13\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+@EnabledOnOs({OS.LINUX, OS.MAC})\n+@Disabled\n+final class NpmProxyITCase {\n+\n+    /**\n+     * Project name.\n+     */\n+    private static final String PROJ = \"@hello/simple-npm-project\";\n+\n+    /**\n+     * Origin repo name.\n+     */\n+    private static final String ORIGIN = \"npm-origin\";\n+\n+    /**\n+     * Proxy repo name.\n+     */\n+    private static final String PROXY = \"npm-proxy\";\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Test origin.\n+     */\n+    private ArtipieServer origin;\n+\n+    /**\n+     * Test proxy.\n+     */\n+    private ArtipieServer proxy;\n+\n+    /**\n+     * Container.\n+     */\n+    private TestContainer cntn;\n+\n+    @Test\n+    void installFromProxy() throws Exception {\n+        final boolean anonymous = true;\n+        this.init(anonymous);\n+        final HttpURLConnection con = (HttpURLConnection) new URL(\n+            String.format(\n+                // @checkstyle LineLengthCheck (1 line)\n+                \"http://localhost:%d/%s/@hello/simple-npm-project/-/@hello/simple-npm-project-1.0.1.tgz\", this.origin.port(), NpmProxyITCase.ORIGIN\n+            )\n+        ).openConnection();\n+        con.setRequestMethod(\"GET\");\n+        con.setDoOutput(true);\n+        MatcherAssert.assertThat(\n+            \"Verify that tgz file exists. Response status is 200\",\n+            con.getResponseCode(),\n+            new IsEqual<>(Integer.parseInt(RsStatus.OK.code()))\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5bf01bfa4d5698f1be9c902e9e039754770f1ff"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkxMzY4NA==", "bodyText": "@olegmoz thanks, I wanted to show by this check that the file can actually be obtained from origin repo. Probably I should remove this check or write about removing in the created issue related to enabling test.", "url": "https://github.com/artipie/artipie/pull/739#discussion_r517913684", "createdAt": "2020-11-05T09:39:06Z", "author": {"login": "genryxy"}, "path": "src/test/java/com/artipie/npm/NpmProxyITCase.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.npm;\n+\n+import com.artipie.ArtipieServer;\n+import com.artipie.RepoConfigYaml;\n+import com.artipie.RepoPerms;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.nuget.RandomFreePort;\n+import com.artipie.test.RepositoryUrl;\n+import com.artipie.test.TestContainer;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.hamcrest.text.StringContainsInOrder;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+/**\n+ * Integration test for {@link com.artipie.npm.proxy.http.NpmProxySlice}.\n+ * @since 0.13\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+@EnabledOnOs({OS.LINUX, OS.MAC})\n+@Disabled\n+final class NpmProxyITCase {\n+\n+    /**\n+     * Project name.\n+     */\n+    private static final String PROJ = \"@hello/simple-npm-project\";\n+\n+    /**\n+     * Origin repo name.\n+     */\n+    private static final String ORIGIN = \"npm-origin\";\n+\n+    /**\n+     * Proxy repo name.\n+     */\n+    private static final String PROXY = \"npm-proxy\";\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Test origin.\n+     */\n+    private ArtipieServer origin;\n+\n+    /**\n+     * Test proxy.\n+     */\n+    private ArtipieServer proxy;\n+\n+    /**\n+     * Container.\n+     */\n+    private TestContainer cntn;\n+\n+    @Test\n+    void installFromProxy() throws Exception {\n+        final boolean anonymous = true;\n+        this.init(anonymous);\n+        final HttpURLConnection con = (HttpURLConnection) new URL(\n+            String.format(\n+                // @checkstyle LineLengthCheck (1 line)\n+                \"http://localhost:%d/%s/@hello/simple-npm-project/-/@hello/simple-npm-project-1.0.1.tgz\", this.origin.port(), NpmProxyITCase.ORIGIN\n+            )\n+        ).openConnection();\n+        con.setRequestMethod(\"GET\");\n+        con.setDoOutput(true);\n+        MatcherAssert.assertThat(\n+            \"Verify that tgz file exists. Response status is 200\",\n+            con.getResponseCode(),\n+            new IsEqual<>(Integer.parseInt(RsStatus.OK.code()))\n+        );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5ODIxMg=="}, "originalCommit": {"oid": "b5bf01bfa4d5698f1be9c902e9e039754770f1ff"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk1MzA4Mg==", "bodyText": "@genryxy if it helps to diagnose the problem, then maybe it deserves to be separate test, which is enabled.", "url": "https://github.com/artipie/artipie/pull/739#discussion_r517953082", "createdAt": "2020-11-05T10:40:39Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/npm/NpmProxyITCase.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.npm;\n+\n+import com.artipie.ArtipieServer;\n+import com.artipie.RepoConfigYaml;\n+import com.artipie.RepoPerms;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.nuget.RandomFreePort;\n+import com.artipie.test.RepositoryUrl;\n+import com.artipie.test.TestContainer;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.hamcrest.text.StringContainsInOrder;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+/**\n+ * Integration test for {@link com.artipie.npm.proxy.http.NpmProxySlice}.\n+ * @since 0.13\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+@EnabledOnOs({OS.LINUX, OS.MAC})\n+@Disabled\n+final class NpmProxyITCase {\n+\n+    /**\n+     * Project name.\n+     */\n+    private static final String PROJ = \"@hello/simple-npm-project\";\n+\n+    /**\n+     * Origin repo name.\n+     */\n+    private static final String ORIGIN = \"npm-origin\";\n+\n+    /**\n+     * Proxy repo name.\n+     */\n+    private static final String PROXY = \"npm-proxy\";\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Test origin.\n+     */\n+    private ArtipieServer origin;\n+\n+    /**\n+     * Test proxy.\n+     */\n+    private ArtipieServer proxy;\n+\n+    /**\n+     * Container.\n+     */\n+    private TestContainer cntn;\n+\n+    @Test\n+    void installFromProxy() throws Exception {\n+        final boolean anonymous = true;\n+        this.init(anonymous);\n+        final HttpURLConnection con = (HttpURLConnection) new URL(\n+            String.format(\n+                // @checkstyle LineLengthCheck (1 line)\n+                \"http://localhost:%d/%s/@hello/simple-npm-project/-/@hello/simple-npm-project-1.0.1.tgz\", this.origin.port(), NpmProxyITCase.ORIGIN\n+            )\n+        ).openConnection();\n+        con.setRequestMethod(\"GET\");\n+        con.setDoOutput(true);\n+        MatcherAssert.assertThat(\n+            \"Verify that tgz file exists. Response status is 200\",\n+            con.getResponseCode(),\n+            new IsEqual<>(Integer.parseInt(RsStatus.OK.code()))\n+        );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5ODIxMg=="}, "originalCommit": {"oid": "b5bf01bfa4d5698f1be9c902e9e039754770f1ff"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3MDM5Nw==", "bodyText": "@olegmoz it rather checks that the test is written correctly, but does not help to diagnose the problem", "url": "https://github.com/artipie/artipie/pull/739#discussion_r517970397", "createdAt": "2020-11-05T11:09:59Z", "author": {"login": "genryxy"}, "path": "src/test/java/com/artipie/npm/NpmProxyITCase.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.npm;\n+\n+import com.artipie.ArtipieServer;\n+import com.artipie.RepoConfigYaml;\n+import com.artipie.RepoPerms;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.nuget.RandomFreePort;\n+import com.artipie.test.RepositoryUrl;\n+import com.artipie.test.TestContainer;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.hamcrest.text.StringContainsInOrder;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+/**\n+ * Integration test for {@link com.artipie.npm.proxy.http.NpmProxySlice}.\n+ * @since 0.13\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+@EnabledOnOs({OS.LINUX, OS.MAC})\n+@Disabled\n+final class NpmProxyITCase {\n+\n+    /**\n+     * Project name.\n+     */\n+    private static final String PROJ = \"@hello/simple-npm-project\";\n+\n+    /**\n+     * Origin repo name.\n+     */\n+    private static final String ORIGIN = \"npm-origin\";\n+\n+    /**\n+     * Proxy repo name.\n+     */\n+    private static final String PROXY = \"npm-proxy\";\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Test origin.\n+     */\n+    private ArtipieServer origin;\n+\n+    /**\n+     * Test proxy.\n+     */\n+    private ArtipieServer proxy;\n+\n+    /**\n+     * Container.\n+     */\n+    private TestContainer cntn;\n+\n+    @Test\n+    void installFromProxy() throws Exception {\n+        final boolean anonymous = true;\n+        this.init(anonymous);\n+        final HttpURLConnection con = (HttpURLConnection) new URL(\n+            String.format(\n+                // @checkstyle LineLengthCheck (1 line)\n+                \"http://localhost:%d/%s/@hello/simple-npm-project/-/@hello/simple-npm-project-1.0.1.tgz\", this.origin.port(), NpmProxyITCase.ORIGIN\n+            )\n+        ).openConnection();\n+        con.setRequestMethod(\"GET\");\n+        con.setDoOutput(true);\n+        MatcherAssert.assertThat(\n+            \"Verify that tgz file exists. Response status is 200\",\n+            con.getResponseCode(),\n+            new IsEqual<>(Integer.parseInt(RsStatus.OK.code()))\n+        );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5ODIxMg=="}, "originalCommit": {"oid": "b5bf01bfa4d5698f1be9c902e9e039754770f1ff"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEwMDE3OA==", "bodyText": "@genryxy still looks like it should be moved to another test. So we will have test that checks Artipie server may be used as target for npm install command and separate test to check that HTTP endpoint works properly. These are different features basically", "url": "https://github.com/artipie/artipie/pull/739#discussion_r518100178", "createdAt": "2020-11-05T14:38:56Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/npm/NpmProxyITCase.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.npm;\n+\n+import com.artipie.ArtipieServer;\n+import com.artipie.RepoConfigYaml;\n+import com.artipie.RepoPerms;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.nuget.RandomFreePort;\n+import com.artipie.test.RepositoryUrl;\n+import com.artipie.test.TestContainer;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.hamcrest.text.StringContainsInOrder;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+/**\n+ * Integration test for {@link com.artipie.npm.proxy.http.NpmProxySlice}.\n+ * @since 0.13\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+@EnabledOnOs({OS.LINUX, OS.MAC})\n+@Disabled\n+final class NpmProxyITCase {\n+\n+    /**\n+     * Project name.\n+     */\n+    private static final String PROJ = \"@hello/simple-npm-project\";\n+\n+    /**\n+     * Origin repo name.\n+     */\n+    private static final String ORIGIN = \"npm-origin\";\n+\n+    /**\n+     * Proxy repo name.\n+     */\n+    private static final String PROXY = \"npm-proxy\";\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Test origin.\n+     */\n+    private ArtipieServer origin;\n+\n+    /**\n+     * Test proxy.\n+     */\n+    private ArtipieServer proxy;\n+\n+    /**\n+     * Container.\n+     */\n+    private TestContainer cntn;\n+\n+    @Test\n+    void installFromProxy() throws Exception {\n+        final boolean anonymous = true;\n+        this.init(anonymous);\n+        final HttpURLConnection con = (HttpURLConnection) new URL(\n+            String.format(\n+                // @checkstyle LineLengthCheck (1 line)\n+                \"http://localhost:%d/%s/@hello/simple-npm-project/-/@hello/simple-npm-project-1.0.1.tgz\", this.origin.port(), NpmProxyITCase.ORIGIN\n+            )\n+        ).openConnection();\n+        con.setRequestMethod(\"GET\");\n+        con.setDoOutput(true);\n+        MatcherAssert.assertThat(\n+            \"Verify that tgz file exists. Response status is 200\",\n+            con.getResponseCode(),\n+            new IsEqual<>(Integer.parseInt(RsStatus.OK.code()))\n+        );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5ODIxMg=="}, "originalCommit": {"oid": "b5bf01bfa4d5698f1be9c902e9e039754770f1ff"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2092, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}