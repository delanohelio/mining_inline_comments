{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNTY1MTE5", "number": 482, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMTozNzozNlrOEa7xKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjozNzoxMlrOEa808Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Njc3Njc1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/api/artifactory/DeleteUserSliceTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMTozNzozNlrOHEp4vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjoxMzo0MlrOHEq19w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0MjYyMg==", "bodyText": "@genryxy is this line really required?", "url": "https://github.com/artipie/artipie/pull/482#discussion_r474642622", "createdAt": "2020-08-21T11:37:36Z", "author": {"login": "olenagerasimova"}, "path": "src/test/java/com/artipie/api/artifactory/DeleteUserSliceTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.api.artifactory;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.amihaiemil.eoyaml.YamlMapping;\n+import com.artipie.Credentials;\n+import com.artipie.Settings;\n+import com.artipie.api.ContentAs;\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.asto.rx.RxStorageWrapper;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.hm.SliceHasResponse;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqMethod;\n+import com.artipie.http.rs.RsStatus;\n+import hu.akarnokd.rxjava2.interop.SingleInterop;\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletionStage;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsNull;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test for {@link DeleteUserSlice}.\n+ *\n+ * @since 0.10\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+final class DeleteUserSliceTest {\n+    @Test\n+    void returnsNotFoundOnInvalidRequest() {\n+        MatcherAssert.assertThat(\n+            new DeleteUserSlice(new Settings.Fake()),\n+            new SliceHasResponse(\n+                new RsHasStatus(RsStatus.NOT_FOUND),\n+                new RequestLine(RqMethod.DELETE, \"/some/api/david\")\n+            )\n+        );\n+    }\n+\n+    @Test\n+    void returnsNotFoundIfCredentialsAreEmpty() {\n+        MatcherAssert.assertThat(\n+            new DeleteUserSlice(new Settings.Fake()),\n+            new SliceHasResponse(\n+                new RsHasStatus(RsStatus.NOT_FOUND),\n+                new RequestLine(RqMethod.DELETE, \"/api/security/users/empty\")\n+            )\n+        );\n+    }\n+\n+    @Test\n+    void returnsNotFoundIfUserIsNotFoundInCredentials() {\n+        final Storage storage = new InMemoryStorage();\n+        final Key key = new Key.From(\"_credentials.yaml\");\n+        this.creds(\"john\", storage, key);\n+        MatcherAssert.assertThat(\n+            new DeleteUserSlice(new Settings.Fake(new Credentials.FromStorageYaml(storage, key))),\n+            new SliceHasResponse(\n+                new RsHasStatus(RsStatus.NOT_FOUND),\n+                new RequestLine(RqMethod.DELETE, \"/api/security/users/notfound\")\n+            )\n+        );\n+    }\n+\n+    @Test\n+    void returnsOkAndDeleteIfUserIsFoundInCredentials() {\n+        final Storage storage = new InMemoryStorage();\n+        final Key key = new Key.From(\"_credentials.yaml\");\n+        this.creds(\"jane\", storage, key);\n+        MatcherAssert.assertThat(\n+            \"DeleteUserSlice response\",\n+            new DeleteUserSlice(new Settings.Fake(new Credentials.FromStorageYaml(storage, key))),\n+            new SliceHasResponse(\n+                new RsHasStatus(RsStatus.OK),\n+                new RequestLine(RqMethod.DELETE, \"/api/security/users/jane\")\n+            )\n+        );\n+        MatcherAssert.assertThat(\n+            \"User should be deleted from storage\",\n+            storage.value(key)\n+                .thenApply(cred -> this.yaml(storage, key))\n+                .thenCompose(yaml -> yaml)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2f584fc3159231f150d117f47745d494623c46"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0OTM0NA==", "bodyText": "@olenagerasimova hm, you're right. Implementation of the method remove  shouldn't check here.", "url": "https://github.com/artipie/artipie/pull/482#discussion_r474649344", "createdAt": "2020-08-21T11:52:50Z", "author": {"login": "genryxy"}, "path": "src/test/java/com/artipie/api/artifactory/DeleteUserSliceTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.api.artifactory;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.amihaiemil.eoyaml.YamlMapping;\n+import com.artipie.Credentials;\n+import com.artipie.Settings;\n+import com.artipie.api.ContentAs;\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.asto.rx.RxStorageWrapper;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.hm.SliceHasResponse;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqMethod;\n+import com.artipie.http.rs.RsStatus;\n+import hu.akarnokd.rxjava2.interop.SingleInterop;\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletionStage;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsNull;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test for {@link DeleteUserSlice}.\n+ *\n+ * @since 0.10\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+final class DeleteUserSliceTest {\n+    @Test\n+    void returnsNotFoundOnInvalidRequest() {\n+        MatcherAssert.assertThat(\n+            new DeleteUserSlice(new Settings.Fake()),\n+            new SliceHasResponse(\n+                new RsHasStatus(RsStatus.NOT_FOUND),\n+                new RequestLine(RqMethod.DELETE, \"/some/api/david\")\n+            )\n+        );\n+    }\n+\n+    @Test\n+    void returnsNotFoundIfCredentialsAreEmpty() {\n+        MatcherAssert.assertThat(\n+            new DeleteUserSlice(new Settings.Fake()),\n+            new SliceHasResponse(\n+                new RsHasStatus(RsStatus.NOT_FOUND),\n+                new RequestLine(RqMethod.DELETE, \"/api/security/users/empty\")\n+            )\n+        );\n+    }\n+\n+    @Test\n+    void returnsNotFoundIfUserIsNotFoundInCredentials() {\n+        final Storage storage = new InMemoryStorage();\n+        final Key key = new Key.From(\"_credentials.yaml\");\n+        this.creds(\"john\", storage, key);\n+        MatcherAssert.assertThat(\n+            new DeleteUserSlice(new Settings.Fake(new Credentials.FromStorageYaml(storage, key))),\n+            new SliceHasResponse(\n+                new RsHasStatus(RsStatus.NOT_FOUND),\n+                new RequestLine(RqMethod.DELETE, \"/api/security/users/notfound\")\n+            )\n+        );\n+    }\n+\n+    @Test\n+    void returnsOkAndDeleteIfUserIsFoundInCredentials() {\n+        final Storage storage = new InMemoryStorage();\n+        final Key key = new Key.From(\"_credentials.yaml\");\n+        this.creds(\"jane\", storage, key);\n+        MatcherAssert.assertThat(\n+            \"DeleteUserSlice response\",\n+            new DeleteUserSlice(new Settings.Fake(new Credentials.FromStorageYaml(storage, key))),\n+            new SliceHasResponse(\n+                new RsHasStatus(RsStatus.OK),\n+                new RequestLine(RqMethod.DELETE, \"/api/security/users/jane\")\n+            )\n+        );\n+        MatcherAssert.assertThat(\n+            \"User should be deleted from storage\",\n+            storage.value(key)\n+                .thenApply(cred -> this.yaml(storage, key))\n+                .thenCompose(yaml -> yaml)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0MjYyMg=="}, "originalCommit": {"oid": "cf2f584fc3159231f150d117f47745d494623c46"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1ODI5NQ==", "bodyText": "@genryxy sorry, it seems like I expressed myself not clear enough: you can simplify\nstorage.value(key).thenCompose(cred -> this.yaml(storage, key)).toCompletableFuture().join", "url": "https://github.com/artipie/artipie/pull/482#discussion_r474658295", "createdAt": "2020-08-21T12:13:42Z", "author": {"login": "olenagerasimova"}, "path": "src/test/java/com/artipie/api/artifactory/DeleteUserSliceTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.api.artifactory;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.amihaiemil.eoyaml.YamlMapping;\n+import com.artipie.Credentials;\n+import com.artipie.Settings;\n+import com.artipie.api.ContentAs;\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.asto.rx.RxStorageWrapper;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.hm.SliceHasResponse;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqMethod;\n+import com.artipie.http.rs.RsStatus;\n+import hu.akarnokd.rxjava2.interop.SingleInterop;\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletionStage;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsNull;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test for {@link DeleteUserSlice}.\n+ *\n+ * @since 0.10\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+final class DeleteUserSliceTest {\n+    @Test\n+    void returnsNotFoundOnInvalidRequest() {\n+        MatcherAssert.assertThat(\n+            new DeleteUserSlice(new Settings.Fake()),\n+            new SliceHasResponse(\n+                new RsHasStatus(RsStatus.NOT_FOUND),\n+                new RequestLine(RqMethod.DELETE, \"/some/api/david\")\n+            )\n+        );\n+    }\n+\n+    @Test\n+    void returnsNotFoundIfCredentialsAreEmpty() {\n+        MatcherAssert.assertThat(\n+            new DeleteUserSlice(new Settings.Fake()),\n+            new SliceHasResponse(\n+                new RsHasStatus(RsStatus.NOT_FOUND),\n+                new RequestLine(RqMethod.DELETE, \"/api/security/users/empty\")\n+            )\n+        );\n+    }\n+\n+    @Test\n+    void returnsNotFoundIfUserIsNotFoundInCredentials() {\n+        final Storage storage = new InMemoryStorage();\n+        final Key key = new Key.From(\"_credentials.yaml\");\n+        this.creds(\"john\", storage, key);\n+        MatcherAssert.assertThat(\n+            new DeleteUserSlice(new Settings.Fake(new Credentials.FromStorageYaml(storage, key))),\n+            new SliceHasResponse(\n+                new RsHasStatus(RsStatus.NOT_FOUND),\n+                new RequestLine(RqMethod.DELETE, \"/api/security/users/notfound\")\n+            )\n+        );\n+    }\n+\n+    @Test\n+    void returnsOkAndDeleteIfUserIsFoundInCredentials() {\n+        final Storage storage = new InMemoryStorage();\n+        final Key key = new Key.From(\"_credentials.yaml\");\n+        this.creds(\"jane\", storage, key);\n+        MatcherAssert.assertThat(\n+            \"DeleteUserSlice response\",\n+            new DeleteUserSlice(new Settings.Fake(new Credentials.FromStorageYaml(storage, key))),\n+            new SliceHasResponse(\n+                new RsHasStatus(RsStatus.OK),\n+                new RequestLine(RqMethod.DELETE, \"/api/security/users/jane\")\n+            )\n+        );\n+        MatcherAssert.assertThat(\n+            \"User should be deleted from storage\",\n+            storage.value(key)\n+                .thenApply(cred -> this.yaml(storage, key))\n+                .thenCompose(yaml -> yaml)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0MjYyMg=="}, "originalCommit": {"oid": "cf2f584fc3159231f150d117f47745d494623c46"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Njc5NTYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/api/artifactory/DeleteUserSlice.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMTo0Mzo1NlrOHEqDxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMTo0Mzo1NlrOHEqDxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NTQ0Ng==", "bodyText": "@genryxy logic for getting username from request line is the same in 3 classes: here, GetUserSlice and in AddUpdateUserSlice. I'd suggest to introduce class to obtain username from request line and move GetUserSlice.PTRN there. Class can be created in this package and called UserFromRqLine, accept line from request in ctor and have one Optional<String> get() method to get username.\nThere is no need to do it in this PR, feel free to puzzle it.", "url": "https://github.com/artipie/artipie/pull/482#discussion_r474645446", "createdAt": "2020-08-21T11:43:56Z", "author": {"login": "olenagerasimova"}, "path": "src/main/java/com/artipie/api/artifactory/DeleteUserSlice.java", "diffHunk": "@@ -23,27 +23,75 @@\n  */\n package com.artipie.api.artifactory;\n \n+import com.artipie.Settings;\n import com.artipie.http.Response;\n import com.artipie.http.Slice;\n+import com.artipie.http.async.AsyncResponse;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import com.artipie.http.rs.StandardRs;\n import java.nio.ByteBuffer;\n import java.util.Map;\n-import org.apache.commons.lang3.NotImplementedException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.regex.Matcher;\n import org.reactivestreams.Publisher;\n \n /**\n  * Artifactory `DELETE /api/security/users/{userName}` endpoint,\n  * deletes user record from credentials.\n+ *\n  * @since 0.10\n- * @todo #444:30min Implement this slice to delete user from credentials by user name\n- *  obtained from request line, path format is `/api/security/users/{userName}`. Use\n- *  Credentials#remove(java.lang.String) method to perform the operation and return 200 OK status.\n- *  Do not forget to test this class and add it to ArtipieApi, check GetUserSlice as an example.\n  */\n public final class DeleteUserSlice implements Slice {\n+    /**\n+     * Artipie settings.\n+     */\n+    private final Settings settings;\n+\n+    /**\n+     * Ctor.\n+     * @param settings Setting\n+     */\n+    public DeleteUserSlice(final Settings settings) {\n+        this.settings = settings;\n+    }\n \n     @Override\n     public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n         final Publisher<ByteBuffer> body) {\n-        throw new NotImplementedException(\"Not implemented yet\");\n+        final Response res;\n+        final Matcher matcher = GetUserSlice.PTRN.matcher(\n+            new RequestLineFrom(line).uri().toString()\n+        );\n+        if (matcher.matches()) {\n+            final String username = matcher.group(\"username\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2f584fc3159231f150d117f47745d494623c46"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Njc5NzQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/api/artifactory/DeleteUserSlice.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMTo0NDozOFrOHEqE5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMTo0NDozOFrOHEqE5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NTczNA==", "bodyText": "@genryxy hm, I think it would be more correct to return bad request here", "url": "https://github.com/artipie/artipie/pull/482#discussion_r474645734", "createdAt": "2020-08-21T11:44:38Z", "author": {"login": "olenagerasimova"}, "path": "src/main/java/com/artipie/api/artifactory/DeleteUserSlice.java", "diffHunk": "@@ -23,27 +23,75 @@\n  */\n package com.artipie.api.artifactory;\n \n+import com.artipie.Settings;\n import com.artipie.http.Response;\n import com.artipie.http.Slice;\n+import com.artipie.http.async.AsyncResponse;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import com.artipie.http.rs.StandardRs;\n import java.nio.ByteBuffer;\n import java.util.Map;\n-import org.apache.commons.lang3.NotImplementedException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.regex.Matcher;\n import org.reactivestreams.Publisher;\n \n /**\n  * Artifactory `DELETE /api/security/users/{userName}` endpoint,\n  * deletes user record from credentials.\n+ *\n  * @since 0.10\n- * @todo #444:30min Implement this slice to delete user from credentials by user name\n- *  obtained from request line, path format is `/api/security/users/{userName}`. Use\n- *  Credentials#remove(java.lang.String) method to perform the operation and return 200 OK status.\n- *  Do not forget to test this class and add it to ArtipieApi, check GetUserSlice as an example.\n  */\n public final class DeleteUserSlice implements Slice {\n+    /**\n+     * Artipie settings.\n+     */\n+    private final Settings settings;\n+\n+    /**\n+     * Ctor.\n+     * @param settings Setting\n+     */\n+    public DeleteUserSlice(final Settings settings) {\n+        this.settings = settings;\n+    }\n \n     @Override\n     public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n         final Publisher<ByteBuffer> body) {\n-        throw new NotImplementedException(\"Not implemented yet\");\n+        final Response res;\n+        final Matcher matcher = GetUserSlice.PTRN.matcher(\n+            new RequestLineFrom(line).uri().toString()\n+        );\n+        if (matcher.matches()) {\n+            final String username = matcher.group(\"username\");\n+            res = new AsyncResponse(\n+                this.settings.credentials().thenCompose(\n+                    cred -> cred.map(\n+                        present -> present.users()\n+                            .thenApply(\n+                                users -> users.contains(username)\n+                            ).thenApply(\n+                                has -> {\n+                                    final Response resp;\n+                                    if (has) {\n+                                        resp = cred.get().remove(username)\n+                                            .thenApply(ok -> new RsWithStatus(RsStatus.OK))\n+                                            .toCompletableFuture()\n+                                            .join();\n+                                    } else {\n+                                        resp = StandardRs.NOT_FOUND;\n+                                    }\n+                                    return resp;\n+                                }\n+                            )\n+                    ).orElse(CompletableFuture.completedFuture(StandardRs.NOT_FOUND))\n+                )\n+            );\n+        } else {\n+            res = StandardRs.NOT_FOUND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2f584fc3159231f150d117f47745d494623c46"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Njk1MDI1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/api/artifactory/DeleteUserSliceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjozNzoxMlrOHErhWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjozNzoxMlrOHErhWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY2OTQwMA==", "bodyText": "@genryxy we can simplify all this code by using PublisherAs and createYamlInput:\nYaml.createYamlInput(\n   new PublisherAs(storage.value(key).join())\n        .asciiString().toCompletableFuture().join()\n).readYamlMapping().string(\"credentials\")", "url": "https://github.com/artipie/artipie/pull/482#discussion_r474669400", "createdAt": "2020-08-21T12:37:12Z", "author": {"login": "olenagerasimova"}, "path": "src/test/java/com/artipie/api/artifactory/DeleteUserSliceTest.java", "diffHunk": "@@ -89,12 +95,35 @@ void returnsOkAndDeleteIfUserIsFoundInCredentials() {\n         final Key key = new Key.From(\"_credentials.yaml\");\n         this.creds(\"jane\", storage, key);\n         MatcherAssert.assertThat(\n+            \"DeleteUserSlice response\",\n             new DeleteUserSlice(new Settings.Fake(new Credentials.FromStorageYaml(storage, key))),\n             new SliceHasResponse(\n                 new RsHasStatus(RsStatus.OK),\n                 new RequestLine(RqMethod.DELETE, \"/api/security/users/jane\")\n             )\n         );\n+        MatcherAssert.assertThat(\n+            \"User should be deleted from storage\",\n+            storage.value(key)\n+                .thenCompose(cred -> this.yaml(storage, key))\n+                .toCompletableFuture().join()\n+                .string(\"credentials\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed1a02e2d295df145452dd0ed3bc9baf044bf3e9"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2120, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}