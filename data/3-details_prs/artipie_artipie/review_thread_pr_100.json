{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4OTE4MzEz", "number": 100, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMjozMjo0MlrOD2MjUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo0MjozNlrOD2ou-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTU1MzQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/SliceFromConfig.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMjozMjo0MlrOGL7QcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMTo0ODo0NlrOGMKiIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1ODM4NA==", "bodyText": "@HDouss I dont think we should execute the request here, it should return CompletitionStage", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415158384", "createdAt": "2020-04-25T22:32:42Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        try {\n+            return SliceFromConfig.build(this.config).response(\n+                line, headers, body\n+            );\n+        } catch (final InterruptedException ex) {\n+            Logger.error(this, \"Interruption when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        } catch (final ExecutionException ex) {\n+            Logger.error(this, \"Exception when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Find a slice implementation for config.\n+     * @param cfg Repository config\n+     * @return Slice\n+     * @throws ExecutionException If error getting the slice\n+     * @throws InterruptedException If error getting the slice\n+     */\n+    private static Slice build(final RepoConfig cfg) throws InterruptedException,\n+        ExecutionException {\n+        return cfg.type().thenCombine(\n+            cfg.storage(),\n+            (type, storage) -> {\n+                final Slice slice;\n+                switch (type) {\n+                    case \"file\":\n+                        slice = new FilesSlice(storage);\n+                        break;\n+                    case \"npm\":\n+                        slice = new NpmSlice(new Npm(storage), storage);\n+                        break;\n+                    case \"gem\":\n+                        slice = new GemSlice(storage);\n+                        break;\n+                    case \"rpm\":\n+                        slice = new RpmSlice(storage);\n+                        break;\n+                    case \"php\":\n+                        try {\n+                            slice = cfg.path().thenApply(\n+                                path -> new PhpComposer(path, storage)\n+                            ).toCompletableFuture().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI4OTMxNw==", "bodyText": "@Vatavuk it is not executing the request, it is resolving config.path and build the slice. This method is returning a slice", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415289317", "createdAt": "2020-04-26T11:38:19Z", "author": {"login": "HDouss"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        try {\n+            return SliceFromConfig.build(this.config).response(\n+                line, headers, body\n+            );\n+        } catch (final InterruptedException ex) {\n+            Logger.error(this, \"Interruption when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        } catch (final ExecutionException ex) {\n+            Logger.error(this, \"Exception when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Find a slice implementation for config.\n+     * @param cfg Repository config\n+     * @return Slice\n+     * @throws ExecutionException If error getting the slice\n+     * @throws InterruptedException If error getting the slice\n+     */\n+    private static Slice build(final RepoConfig cfg) throws InterruptedException,\n+        ExecutionException {\n+        return cfg.type().thenCombine(\n+            cfg.storage(),\n+            (type, storage) -> {\n+                final Slice slice;\n+                switch (type) {\n+                    case \"file\":\n+                        slice = new FilesSlice(storage);\n+                        break;\n+                    case \"npm\":\n+                        slice = new NpmSlice(new Npm(storage), storage);\n+                        break;\n+                    case \"gem\":\n+                        slice = new GemSlice(storage);\n+                        break;\n+                    case \"rpm\":\n+                        slice = new RpmSlice(storage);\n+                        break;\n+                    case \"php\":\n+                        try {\n+                            slice = cfg.path().thenApply(\n+                                path -> new PhpComposer(path, storage)\n+                            ).toCompletableFuture().get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1ODM4NA=="}, "originalCommit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM2NDY2MA==", "bodyText": "@HDouss We are fetching yaml content from a repo in an asynchronous manner. The code you've wrote will be synchronous.", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415364660", "createdAt": "2020-04-26T17:57:35Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        try {\n+            return SliceFromConfig.build(this.config).response(\n+                line, headers, body\n+            );\n+        } catch (final InterruptedException ex) {\n+            Logger.error(this, \"Interruption when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        } catch (final ExecutionException ex) {\n+            Logger.error(this, \"Exception when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Find a slice implementation for config.\n+     * @param cfg Repository config\n+     * @return Slice\n+     * @throws ExecutionException If error getting the slice\n+     * @throws InterruptedException If error getting the slice\n+     */\n+    private static Slice build(final RepoConfig cfg) throws InterruptedException,\n+        ExecutionException {\n+        return cfg.type().thenCombine(\n+            cfg.storage(),\n+            (type, storage) -> {\n+                final Slice slice;\n+                switch (type) {\n+                    case \"file\":\n+                        slice = new FilesSlice(storage);\n+                        break;\n+                    case \"npm\":\n+                        slice = new NpmSlice(new Npm(storage), storage);\n+                        break;\n+                    case \"gem\":\n+                        slice = new GemSlice(storage);\n+                        break;\n+                    case \"rpm\":\n+                        slice = new RpmSlice(storage);\n+                        break;\n+                    case \"php\":\n+                        try {\n+                            slice = cfg.path().thenApply(\n+                                path -> new PhpComposer(path, storage)\n+                            ).toCompletableFuture().get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1ODM4NA=="}, "originalCommit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM5NDQ3Mw==", "bodyText": "@Vatavuk Actually it is not really synchronous. Because all this method is called when the response method of the slice is called. What is really synchronous is the call to the constructor of SliceFromConfig which is much less than the older switch/case logic (that was actually synchronous)", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415394473", "createdAt": "2020-04-26T20:31:09Z", "author": {"login": "HDouss"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        try {\n+            return SliceFromConfig.build(this.config).response(\n+                line, headers, body\n+            );\n+        } catch (final InterruptedException ex) {\n+            Logger.error(this, \"Interruption when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        } catch (final ExecutionException ex) {\n+            Logger.error(this, \"Exception when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Find a slice implementation for config.\n+     * @param cfg Repository config\n+     * @return Slice\n+     * @throws ExecutionException If error getting the slice\n+     * @throws InterruptedException If error getting the slice\n+     */\n+    private static Slice build(final RepoConfig cfg) throws InterruptedException,\n+        ExecutionException {\n+        return cfg.type().thenCombine(\n+            cfg.storage(),\n+            (type, storage) -> {\n+                final Slice slice;\n+                switch (type) {\n+                    case \"file\":\n+                        slice = new FilesSlice(storage);\n+                        break;\n+                    case \"npm\":\n+                        slice = new NpmSlice(new Npm(storage), storage);\n+                        break;\n+                    case \"gem\":\n+                        slice = new GemSlice(storage);\n+                        break;\n+                    case \"rpm\":\n+                        slice = new RpmSlice(storage);\n+                        break;\n+                    case \"php\":\n+                        try {\n+                            slice = cfg.path().thenApply(\n+                                path -> new PhpComposer(path, storage)\n+                            ).toCompletableFuture().get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1ODM4NA=="}, "originalCommit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwODY3Mg==", "bodyText": "@HDouss you are right, I didn't catch the execution of the methotd itself", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415408672", "createdAt": "2020-04-26T21:48:46Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        try {\n+            return SliceFromConfig.build(this.config).response(\n+                line, headers, body\n+            );\n+        } catch (final InterruptedException ex) {\n+            Logger.error(this, \"Interruption when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        } catch (final ExecutionException ex) {\n+            Logger.error(this, \"Exception when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Find a slice implementation for config.\n+     * @param cfg Repository config\n+     * @return Slice\n+     * @throws ExecutionException If error getting the slice\n+     * @throws InterruptedException If error getting the slice\n+     */\n+    private static Slice build(final RepoConfig cfg) throws InterruptedException,\n+        ExecutionException {\n+        return cfg.type().thenCombine(\n+            cfg.storage(),\n+            (type, storage) -> {\n+                final Slice slice;\n+                switch (type) {\n+                    case \"file\":\n+                        slice = new FilesSlice(storage);\n+                        break;\n+                    case \"npm\":\n+                        slice = new NpmSlice(new Npm(storage), storage);\n+                        break;\n+                    case \"gem\":\n+                        slice = new GemSlice(storage);\n+                        break;\n+                    case \"rpm\":\n+                        slice = new RpmSlice(storage);\n+                        break;\n+                    case \"php\":\n+                        try {\n+                            slice = cfg.path().thenApply(\n+                                path -> new PhpComposer(path, storage)\n+                            ).toCompletableFuture().get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1ODM4NA=="}, "originalCommit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTU1NTkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/SliceFromConfig.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMjozNDoyMFrOGL7Rgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMDozMTo1NVrOGMJrZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1ODY1OA==", "bodyText": "@HDouss I don't think that this class can implement Slice since it has to build CompletionStage<Slice> in order to be async.", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415158658", "createdAt": "2020-04-25T22:34:20Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ */\n+public final class SliceFromConfig implements Slice {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI4OTU1NA==", "bodyText": "@Vatavuk That's what the puzzle (issue description) tells. Anyway, I defered the slice building and response acting to the response method so it would be async.", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415289554", "createdAt": "2020-04-26T11:39:45Z", "author": {"login": "HDouss"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ */\n+public final class SliceFromConfig implements Slice {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1ODY1OA=="}, "originalCommit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM2NTQ3OQ==", "bodyText": "@HDouss it is not deferred because of instantiation of php slice which needs to fetch path from the repo. The code for php instantiation executes .toCompletableFuture().get().", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415365479", "createdAt": "2020-04-26T18:01:38Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ */\n+public final class SliceFromConfig implements Slice {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1ODY1OA=="}, "originalCommit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM5NDY2Mw==", "bodyText": "@Vatavuk That still not happen until SliceFromConfig.response is called, which is deferred.", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415394663", "createdAt": "2020-04-26T20:31:55Z", "author": {"login": "HDouss"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ */\n+public final class SliceFromConfig implements Slice {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1ODY1OA=="}, "originalCommit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTU1NjM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/SliceFromConfig.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMjozNDo0OFrOGL7Rtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMToyNjo0OFrOGMKS9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1ODcxMA==", "bodyText": "@HDouss I believe that we can use Map instead of ugly switch/case.", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415158710", "createdAt": "2020-04-25T22:34:48Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        try {\n+            return SliceFromConfig.build(this.config).response(\n+                line, headers, body\n+            );\n+        } catch (final InterruptedException ex) {\n+            Logger.error(this, \"Interruption when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        } catch (final ExecutionException ex) {\n+            Logger.error(this, \"Exception when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Find a slice implementation for config.\n+     * @param cfg Repository config\n+     * @return Slice\n+     * @throws ExecutionException If error getting the slice\n+     * @throws InterruptedException If error getting the slice\n+     */\n+    private static Slice build(final RepoConfig cfg) throws InterruptedException,\n+        ExecutionException {\n+        return cfg.type().thenCombine(\n+            cfg.storage(),\n+            (type, storage) -> {\n+                final Slice slice;\n+                switch (type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI4OTgwMg==", "bodyText": "@Vatavuk If we use Map, what could be the values? Classes that we instantiate by reflection afterwards? That would be ugly too...may be uglier.", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415289802", "createdAt": "2020-04-26T11:41:12Z", "author": {"login": "HDouss"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        try {\n+            return SliceFromConfig.build(this.config).response(\n+                line, headers, body\n+            );\n+        } catch (final InterruptedException ex) {\n+            Logger.error(this, \"Interruption when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        } catch (final ExecutionException ex) {\n+            Logger.error(this, \"Exception when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Find a slice implementation for config.\n+     * @param cfg Repository config\n+     * @return Slice\n+     * @throws ExecutionException If error getting the slice\n+     * @throws InterruptedException If error getting the slice\n+     */\n+    private static Slice build(final RepoConfig cfg) throws InterruptedException,\n+        ExecutionException {\n+        return cfg.type().thenCombine(\n+            cfg.storage(),\n+            (type, storage) -> {\n+                final Slice slice;\n+                switch (type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1ODcxMA=="}, "originalCommit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM2NjQ3OA==", "bodyText": "@HDouss there are no reflections. Simple HashMap\nnew MapOf(\n  new MapEntry(\"file\", (cfg) -> new FilesSlice(storage))),\n  new MapEntry(\"npm\" (cfg) -> new NpmSlice(new Npm(storage), storage))\n  ...\n)\nThe map should probably return CompletionStage instead of Slice so that the code remain async.", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415366478", "createdAt": "2020-04-26T18:06:51Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        try {\n+            return SliceFromConfig.build(this.config).response(\n+                line, headers, body\n+            );\n+        } catch (final InterruptedException ex) {\n+            Logger.error(this, \"Interruption when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        } catch (final ExecutionException ex) {\n+            Logger.error(this, \"Exception when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Find a slice implementation for config.\n+     * @param cfg Repository config\n+     * @return Slice\n+     * @throws ExecutionException If error getting the slice\n+     * @throws InterruptedException If error getting the slice\n+     */\n+    private static Slice build(final RepoConfig cfg) throws InterruptedException,\n+        ExecutionException {\n+        return cfg.type().thenCombine(\n+            cfg.storage(),\n+            (type, storage) -> {\n+                final Slice slice;\n+                switch (type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1ODcxMA=="}, "originalCommit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwNDc4OQ==", "bodyText": "@Vatavuk Thanks for your explanation. Fixed!", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415404789", "createdAt": "2020-04-26T21:26:48Z", "author": {"login": "HDouss"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        try {\n+            return SliceFromConfig.build(this.config).response(\n+                line, headers, body\n+            );\n+        } catch (final InterruptedException ex) {\n+            Logger.error(this, \"Interruption when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        } catch (final ExecutionException ex) {\n+            Logger.error(this, \"Exception when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Find a slice implementation for config.\n+     * @param cfg Repository config\n+     * @return Slice\n+     * @throws ExecutionException If error getting the slice\n+     * @throws InterruptedException If error getting the slice\n+     */\n+    private static Slice build(final RepoConfig cfg) throws InterruptedException,\n+        ExecutionException {\n+        return cfg.type().thenCombine(\n+            cfg.storage(),\n+            (type, storage) -> {\n+                final Slice slice;\n+                switch (type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1ODcxMA=="}, "originalCommit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTU1OTA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/Pie.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMjozNjoyMlrOGL7S3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMDozNTo0NFrOGMJtxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1OTAwNg==", "bodyText": "@HDouss SliceFromConfig should build CompletionStage<Slice> in order to be async and we should remove completedStage here", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415159006", "createdAt": "2020-04-25T22:36:22Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -101,54 +91,7 @@ public Response response(final String line, final Iterable<Map.Entry<String, Str\n                     storage -> storage.value(new Key.From(String.format(\"%s.yaml\", repo)))\n                 )\n                 .thenApply(content -> new RepoConfig(this.vertx, content))\n-                .thenCompose(Pie::sliceForConfig)\n+                .thenCompose(cfg -> CompletableFuture.completedStage(new SliceFromConfig(cfg)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5MDI2MQ==", "bodyText": "@Vatavuk That what the issue description tell..to implement Slice. Anyway the constructor is too fast, it is even faster than the construction of the CompletionStage<Slice> that was made by Pie::sliceForConfig. The actual logic is defered in the response medthod.", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415290261", "createdAt": "2020-04-26T11:43:39Z", "author": {"login": "HDouss"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -101,54 +91,7 @@ public Response response(final String line, final Iterable<Map.Entry<String, Str\n                     storage -> storage.value(new Key.From(String.format(\"%s.yaml\", repo)))\n                 )\n                 .thenApply(content -> new RepoConfig(this.vertx, content))\n-                .thenCompose(Pie::sliceForConfig)\n+                .thenCompose(cfg -> CompletableFuture.completedStage(new SliceFromConfig(cfg)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1OTAwNg=="}, "originalCommit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM2NzIzMw==", "bodyText": "@HDouss If you make SliceFromConfig async we don't need completedStage. If you think that SliceFromConfig doesn't need to be async please say why, because this wasn't the original behaviour.", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415367233", "createdAt": "2020-04-26T18:11:07Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -101,54 +91,7 @@ public Response response(final String line, final Iterable<Map.Entry<String, Str\n                     storage -> storage.value(new Key.From(String.format(\"%s.yaml\", repo)))\n                 )\n                 .thenApply(content -> new RepoConfig(this.vertx, content))\n-                .thenCompose(Pie::sliceForConfig)\n+                .thenCompose(cfg -> CompletableFuture.completedStage(new SliceFromConfig(cfg)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1OTAwNg=="}, "originalCommit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM2Nzc3Mw==", "bodyText": "@HDouss I know that the issue says that we should implement Slice just to make code more reusable, a refactoring. But I don't see how can we do this unless we change the behaviour.", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415367773", "createdAt": "2020-04-26T18:13:43Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -101,54 +91,7 @@ public Response response(final String line, final Iterable<Map.Entry<String, Str\n                     storage -> storage.value(new Key.From(String.format(\"%s.yaml\", repo)))\n                 )\n                 .thenApply(content -> new RepoConfig(this.vertx, content))\n-                .thenCompose(Pie::sliceForConfig)\n+                .thenCompose(cfg -> CompletableFuture.completedStage(new SliceFromConfig(cfg)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1OTAwNg=="}, "originalCommit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM2OTIxOA==", "bodyText": "@g4s8 maybe little help here. The purpose of this feature is to break the class into the smaller chunks. It was written with refactoring on the mind and I believe it should not change any behaviour. That being said this PR instantiates Slice objects synchronously as opposed to before. Is this ok or should we revert?", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415369218", "createdAt": "2020-04-26T18:21:10Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -101,54 +91,7 @@ public Response response(final String line, final Iterable<Map.Entry<String, Str\n                     storage -> storage.value(new Key.From(String.format(\"%s.yaml\", repo)))\n                 )\n                 .thenApply(content -> new RepoConfig(this.vertx, content))\n-                .thenCompose(Pie::sliceForConfig)\n+                .thenCompose(cfg -> CompletableFuture.completedStage(new SliceFromConfig(cfg)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1OTAwNg=="}, "originalCommit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM5NTI3MQ==", "bodyText": "@Vatavuk Please see my replies earlier. It is true that it is a slice, and not a CompletionStage<Slice>, but still what is really synchronous is merely the call to the constructor. And anyway, how to \"make SliceFromConfig async\" without making it a utility class?", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415395271", "createdAt": "2020-04-26T20:35:44Z", "author": {"login": "HDouss"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -101,54 +91,7 @@ public Response response(final String line, final Iterable<Map.Entry<String, Str\n                     storage -> storage.value(new Key.From(String.format(\"%s.yaml\", repo)))\n                 )\n                 .thenApply(content -> new RepoConfig(this.vertx, content))\n-                .thenCompose(Pie::sliceForConfig)\n+                .thenCompose(cfg -> CompletableFuture.completedStage(new SliceFromConfig(cfg)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1OTAwNg=="}, "originalCommit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Mzc2OTE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/SliceFromConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMTo1NzowOFrOGMKnow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMTo1NzowOFrOGMKnow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQxMDA4Mw==", "bodyText": "@HDouss extract this to a private method to make it more readable", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415410083", "createdAt": "2020-04-26T21:57:08Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import org.cactoos.map.MapEntry;\n+import org.cactoos.map.MapOf;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        try {\n+            return SliceFromConfig.build(this.config).response(\n+                line, headers, body\n+            );\n+        } catch (final InterruptedException ex) {\n+            Logger.error(this, \"Interruption when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        } catch (final ExecutionException ex) {\n+            Logger.error(this, \"Exception when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Find a slice implementation for config.\n+     * @param cfg Repository config\n+     * @return Slice\n+     * @throws ExecutionException If error getting the slice\n+     * @throws InterruptedException If error getting the slice\n+     */\n+    private static Slice build(final RepoConfig cfg) throws InterruptedException,\n+        ExecutionException {\n+        return cfg.type().thenCombine(\n+            cfg.storage(),\n+            (type, storage) -> {\n+                return new MapOf<String, Function<RepoConfig, Slice>>(\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"file\", config -> new FilesSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"npm\", config -> new NpmSlice(new Npm(storage), storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"gem\", config -> new GemSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"rpm\", config -> new RpmSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"php\",\n+                        config -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e80ad71cf683d5c7e3b32ac1254c81c7d036262"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Mzc2OTcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/SliceFromConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMTo1NzozNVrOGMKn6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMTo1NzozNVrOGMKn6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQxMDE1Mg==", "bodyText": "@HDouss we should check if the type exists in the map and throw exception if it doesnt", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415410152", "createdAt": "2020-04-26T21:57:35Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import org.cactoos.map.MapEntry;\n+import org.cactoos.map.MapOf;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        try {\n+            return SliceFromConfig.build(this.config).response(\n+                line, headers, body\n+            );\n+        } catch (final InterruptedException ex) {\n+            Logger.error(this, \"Interruption when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        } catch (final ExecutionException ex) {\n+            Logger.error(this, \"Exception when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Find a slice implementation for config.\n+     * @param cfg Repository config\n+     * @return Slice\n+     * @throws ExecutionException If error getting the slice\n+     * @throws InterruptedException If error getting the slice\n+     */\n+    private static Slice build(final RepoConfig cfg) throws InterruptedException,\n+        ExecutionException {\n+        return cfg.type().thenCombine(\n+            cfg.storage(),\n+            (type, storage) -> {\n+                return new MapOf<String, Function<RepoConfig, Slice>>(\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"file\", config -> new FilesSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"npm\", config -> new NpmSlice(new Npm(storage), storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"gem\", config -> new GemSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"rpm\", config -> new RpmSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"php\",\n+                        config -> {\n+                            try {\n+                                return config.path().thenApply(\n+                                    path -> new PhpComposer(path, storage)\n+                                ).toCompletableFuture().get();\n+                            } catch (final InterruptedException ex) {\n+                                Logger.error(\n+                                    SliceFromConfig.class, \"Interrupted PhpComposer creation\"\n+                                );\n+                                throw new IllegalArgumentException(ex);\n+                            } catch (final ExecutionException ex) {\n+                                Logger.error(\n+                                    SliceFromConfig.class, \"Exception getting PhpComposer\"\n+                                );\n+                                throw new IllegalArgumentException(ex);\n+                            }\n+                        }\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"maven\", config -> new MavenSlice(storage)\n+                    )\n+                ).get(type).apply(cfg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e80ad71cf683d5c7e3b32ac1254c81c7d036262"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDgyMjA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/SliceFromConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjoyNjoxMFrOGMSuiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjoyNjoxMFrOGMSuiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU0MjkyMQ==", "bodyText": "@HDouss why do we have InterruptedException here? Does this method perform any blocking operation? We can't allow thread blocking for Slice implementations.", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415542921", "createdAt": "2020-04-27T06:26:10Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import org.cactoos.map.MapEntry;\n+import org.cactoos.map.MapOf;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        try {\n+            return SliceFromConfig.build(this.config).response(\n+                line, headers, body\n+            );\n+        } catch (final InterruptedException ex) {\n+            Logger.error(this, \"Interruption when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        } catch (final ExecutionException ex) {\n+            Logger.error(this, \"Exception when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Find a slice implementation for config.\n+     * @param cfg Repository config\n+     * @return Slice\n+     * @throws ExecutionException If error getting the slice\n+     * @throws InterruptedException If error getting the slice\n+     * @todo #90:30min This method still needs more refactoring. First, we should extract\n+     *  PhpComposer Slice construction to a private method to make it more readable. And then,\n+     *  we should test if the type exist in the constructed map. If the type does not exist,\n+     *  we should throw an IllegalStateException with the message \"Unsupported repository type '%s'\"\n+     */\n+    private static Slice build(final RepoConfig cfg) throws InterruptedException,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e86d8e48bc5c478bfe53b3ca26b8879d3f8106d"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDgyNTY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/SliceFromConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjoyNzoxMFrOGMSwVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjoyNzoxMFrOGMSwVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU0MzM4Mg==", "bodyText": "@HDouss same here: why InterruptedException? Please don't use get() method anywhere except test methods.", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415543382", "createdAt": "2020-04-27T06:27:10Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import org.cactoos.map.MapEntry;\n+import org.cactoos.map.MapOf;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        try {\n+            return SliceFromConfig.build(this.config).response(\n+                line, headers, body\n+            );\n+        } catch (final InterruptedException ex) {\n+            Logger.error(this, \"Interruption when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        } catch (final ExecutionException ex) {\n+            Logger.error(this, \"Exception when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Find a slice implementation for config.\n+     * @param cfg Repository config\n+     * @return Slice\n+     * @throws ExecutionException If error getting the slice\n+     * @throws InterruptedException If error getting the slice\n+     * @todo #90:30min This method still needs more refactoring. First, we should extract\n+     *  PhpComposer Slice construction to a private method to make it more readable. And then,\n+     *  we should test if the type exist in the constructed map. If the type does not exist,\n+     *  we should throw an IllegalStateException with the message \"Unsupported repository type '%s'\"\n+     */\n+    private static Slice build(final RepoConfig cfg) throws InterruptedException,\n+        ExecutionException {\n+        return cfg.type().thenCombine(\n+            cfg.storage(),\n+            (type, storage) -> {\n+                return new MapOf<String, Function<RepoConfig, Slice>>(\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"file\", config -> new FilesSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"npm\", config -> new NpmSlice(new Npm(storage), storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"gem\", config -> new GemSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"rpm\", config -> new RpmSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"php\",\n+                        config -> {\n+                            try {\n+                                return config.path().thenApply(\n+                                    path -> new PhpComposer(path, storage)\n+                                ).toCompletableFuture().get();\n+                            } catch (final InterruptedException ex) {\n+                                Logger.error(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e86d8e48bc5c478bfe53b3ca26b8879d3f8106d"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDgyOTczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/SliceFromConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjoyODoyNlrOGMSydA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjoyODoyNlrOGMSydA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU0MzkyNA==", "bodyText": "@HDouss we can't block HTTP thread with blocking get() call", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415543924", "createdAt": "2020-04-27T06:28:26Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import org.cactoos.map.MapEntry;\n+import org.cactoos.map.MapOf;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        try {\n+            return SliceFromConfig.build(this.config).response(\n+                line, headers, body\n+            );\n+        } catch (final InterruptedException ex) {\n+            Logger.error(this, \"Interruption when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        } catch (final ExecutionException ex) {\n+            Logger.error(this, \"Exception when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Find a slice implementation for config.\n+     * @param cfg Repository config\n+     * @return Slice\n+     * @throws ExecutionException If error getting the slice\n+     * @throws InterruptedException If error getting the slice\n+     * @todo #90:30min This method still needs more refactoring. First, we should extract\n+     *  PhpComposer Slice construction to a private method to make it more readable. And then,\n+     *  we should test if the type exist in the constructed map. If the type does not exist,\n+     *  we should throw an IllegalStateException with the message \"Unsupported repository type '%s'\"\n+     */\n+    private static Slice build(final RepoConfig cfg) throws InterruptedException,\n+        ExecutionException {\n+        return cfg.type().thenCombine(\n+            cfg.storage(),\n+            (type, storage) -> {\n+                return new MapOf<String, Function<RepoConfig, Slice>>(\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"file\", config -> new FilesSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"npm\", config -> new NpmSlice(new Npm(storage), storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"gem\", config -> new GemSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"rpm\", config -> new RpmSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"php\",\n+                        config -> {\n+                            try {\n+                                return config.path().thenApply(\n+                                    path -> new PhpComposer(path, storage)\n+                                ).toCompletableFuture().get();\n+                            } catch (final InterruptedException ex) {\n+                                Logger.error(\n+                                    SliceFromConfig.class, \"Interrupted PhpComposer creation\"\n+                                );\n+                                throw new IllegalArgumentException(ex);\n+                            } catch (final ExecutionException ex) {\n+                                Logger.error(\n+                                    SliceFromConfig.class, \"Exception getting PhpComposer\"\n+                                );\n+                                throw new IllegalArgumentException(ex);\n+                            }\n+                        }\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"maven\", config -> new MavenSlice(storage)\n+                    )\n+                ).get(type).apply(cfg);\n+            }\n+        ).toCompletableFuture().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e86d8e48bc5c478bfe53b3ca26b8879d3f8106d"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjExNDMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/Pie.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMToyODozMlrOGMeTbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTozODozNlrOGMeq7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczMjU5MQ==", "bodyText": "@HDouss maybe it would be better to use .thenApply(cng -> new SliceFromConfig(cfg)) here?", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415732591", "createdAt": "2020-04-27T11:28:32Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -101,54 +91,7 @@ public Response response(final String line, final Iterable<Map.Entry<String, Str\n                     storage -> storage.value(new Key.From(String.format(\"%s.yaml\", repo)))\n                 )\n                 .thenApply(content -> new RepoConfig(this.vertx, content))\n-                .thenCompose(Pie::sliceForConfig)\n+                .thenCompose(cfg -> CompletableFuture.completedStage(new SliceFromConfig(cfg)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e5d54077ea6277487f06005fd965ebc5ef90ff0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczNzg2Ng==", "bodyText": "@g4s8 Fixed!", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415737866", "createdAt": "2020-04-27T11:37:20Z", "author": {"login": "HDouss"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -101,54 +91,7 @@ public Response response(final String line, final Iterable<Map.Entry<String, Str\n                     storage -> storage.value(new Key.From(String.format(\"%s.yaml\", repo)))\n                 )\n                 .thenApply(content -> new RepoConfig(this.vertx, content))\n-                .thenCompose(Pie::sliceForConfig)\n+                .thenCompose(cfg -> CompletableFuture.completedStage(new SliceFromConfig(cfg)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczMjU5MQ=="}, "originalCommit": {"oid": "0e5d54077ea6277487f06005fd965ebc5ef90ff0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczODYwNg==", "bodyText": "@g4s8 I don't see the second minor comment..", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415738606", "createdAt": "2020-04-27T11:38:36Z", "author": {"login": "HDouss"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -101,54 +91,7 @@ public Response response(final String line, final Iterable<Map.Entry<String, Str\n                     storage -> storage.value(new Key.From(String.format(\"%s.yaml\", repo)))\n                 )\n                 .thenApply(content -> new RepoConfig(this.vertx, content))\n-                .thenCompose(Pie::sliceForConfig)\n+                .thenCompose(cfg -> CompletableFuture.completedStage(new SliceFromConfig(cfg)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczMjU5MQ=="}, "originalCommit": {"oid": "0e5d54077ea6277487f06005fd965ebc5ef90ff0"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjE3MDgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/SliceFromConfig.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo0MjozNlrOGMez-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODoxNDozMlrOGNINeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0MDkyMw==", "bodyText": "@HDouss instead of creating AsyncSlice instance in response method of Slice on each request you can use Slice.Wrap decorator for wrapping this logic:\nclass SliceFromConfig extends Slice.Wrap {\n  public SliceFromConfig(RepoConfig config) {\n    super(\n      new AsyncSlice(SliceFromConfig.build(config))\n    );\n  }\n}", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415740923", "createdAt": "2020-04-27T11:42:36Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.async.AsyncSlice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+import org.cactoos.map.MapEntry;\n+import org.cactoos.map.MapOf;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        return new AsyncSlice(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8935ed7f0529ec0c7d476116bd75c4e7e1b6f83d"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc4NjMzMg==", "bodyText": "@g4s8 I don't think it is a good idea. First, that will make the call to SliceFromConfig.build synchronous with the SliceFromConfig construction, so with Pie.response method. Second, for the requests coming from Pie, it is anyway building a new SliceFromConfig on each request, it is even building a new wrapping AsyncSlice.", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415786332", "createdAt": "2020-04-27T12:53:28Z", "author": {"login": "HDouss"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.async.AsyncSlice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+import org.cactoos.map.MapEntry;\n+import org.cactoos.map.MapOf;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        return new AsyncSlice(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0MDkyMw=="}, "originalCommit": {"oid": "8935ed7f0529ec0c7d476116bd75c4e7e1b6f83d"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwNTg1OA==", "bodyText": "@HDouss but SliceFromConfig.build(config) is returning CompletionStage so it's not synchronous, right? Then actual creating of Slice will be deferred until next request. I didn't get your second point, but you are right: we're building new Slice for each request (we may add some caching later), it's correct.\nThe problem with current implementation is only in the design: you are creating new instance of same level in method, but it can be moved to constructor. Creating new concrete implementation in method increases class coupling, but constructor may accept interface types, so coupling will be low.", "url": "https://github.com/artipie/artipie/pull/100#discussion_r416405858", "createdAt": "2020-04-28T07:53:21Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.async.AsyncSlice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+import org.cactoos.map.MapEntry;\n+import org.cactoos.map.MapOf;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        return new AsyncSlice(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0MDkyMw=="}, "originalCommit": {"oid": "8935ed7f0529ec0c7d476116bd75c4e7e1b6f83d"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQxOTE5NA==", "bodyText": "@g4s8 What I meant is that the call to build is synchronous. But you are right, now with the last commit modifications it is not synchronous anymore. The second point is about the usage by Pie. Anyway fixed. Please see last commit.", "url": "https://github.com/artipie/artipie/pull/100#discussion_r416419194", "createdAt": "2020-04-28T08:14:32Z", "author": {"login": "HDouss"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.async.AsyncSlice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+import org.cactoos.map.MapEntry;\n+import org.cactoos.map.MapOf;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        return new AsyncSlice(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0MDkyMw=="}, "originalCommit": {"oid": "8935ed7f0529ec0c7d476116bd75c4e7e1b6f83d"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2374, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}