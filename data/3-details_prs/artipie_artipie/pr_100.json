{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4OTE4MzEz", "number": 100, "title": "#90 - SliceFromConfig class", "bodyText": "Resolving issue #90\nAdded SliceFromConfig class\nAdded puzzle to test the new class", "createdAt": "2020-04-25T14:43:24Z", "url": "https://github.com/artipie/artipie/pull/100", "merged": true, "mergeCommit": {"oid": "5c6f5c5013ba5534ec5cb8777685090280dd4104"}, "closed": true, "closedAt": "2020-04-28T13:49:17Z", "author": {"login": "HDouss"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbHKFJgH2gAyNDA4OTE4MzEzOjFlOGJkZDFjN2YyMWRlNmIxNzU4NWY2MTY4YmJjNTU0NjgzNTExMjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccEG4hAH2gAyNDA4OTE4MzEzOmNhMWFmMzI1OThkMjE4Y2Y3YTQ1MzlmNjFlOTUzNjlmNDE3NGU1MjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129", "author": {"user": {"login": "HDouss", "name": null}}, "url": "https://github.com/artipie/artipie/commit/1e8bdd1c7f21de6b17585f6168bbc55468351129", "committedDate": "2020-04-25T14:42:23Z", "message": "#90 - SliceFromConfig class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNDM3MDkw", "url": "https://github.com/artipie/artipie/pull/100#pullrequestreview-400437090", "createdAt": "2020-04-25T22:32:42Z", "commit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMjozMjo0MlrOGL7QcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMjozNjoyMlrOGL7S3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1ODM4NA==", "bodyText": "@HDouss I dont think we should execute the request here, it should return CompletitionStage", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415158384", "createdAt": "2020-04-25T22:32:42Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        try {\n+            return SliceFromConfig.build(this.config).response(\n+                line, headers, body\n+            );\n+        } catch (final InterruptedException ex) {\n+            Logger.error(this, \"Interruption when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        } catch (final ExecutionException ex) {\n+            Logger.error(this, \"Exception when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Find a slice implementation for config.\n+     * @param cfg Repository config\n+     * @return Slice\n+     * @throws ExecutionException If error getting the slice\n+     * @throws InterruptedException If error getting the slice\n+     */\n+    private static Slice build(final RepoConfig cfg) throws InterruptedException,\n+        ExecutionException {\n+        return cfg.type().thenCombine(\n+            cfg.storage(),\n+            (type, storage) -> {\n+                final Slice slice;\n+                switch (type) {\n+                    case \"file\":\n+                        slice = new FilesSlice(storage);\n+                        break;\n+                    case \"npm\":\n+                        slice = new NpmSlice(new Npm(storage), storage);\n+                        break;\n+                    case \"gem\":\n+                        slice = new GemSlice(storage);\n+                        break;\n+                    case \"rpm\":\n+                        slice = new RpmSlice(storage);\n+                        break;\n+                    case \"php\":\n+                        try {\n+                            slice = cfg.path().thenApply(\n+                                path -> new PhpComposer(path, storage)\n+                            ).toCompletableFuture().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1ODY1OA==", "bodyText": "@HDouss I don't think that this class can implement Slice since it has to build CompletionStage<Slice> in order to be async.", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415158658", "createdAt": "2020-04-25T22:34:20Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ */\n+public final class SliceFromConfig implements Slice {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1ODcxMA==", "bodyText": "@HDouss I believe that we can use Map instead of ugly switch/case.", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415158710", "createdAt": "2020-04-25T22:34:48Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        try {\n+            return SliceFromConfig.build(this.config).response(\n+                line, headers, body\n+            );\n+        } catch (final InterruptedException ex) {\n+            Logger.error(this, \"Interruption when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        } catch (final ExecutionException ex) {\n+            Logger.error(this, \"Exception when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Find a slice implementation for config.\n+     * @param cfg Repository config\n+     * @return Slice\n+     * @throws ExecutionException If error getting the slice\n+     * @throws InterruptedException If error getting the slice\n+     */\n+    private static Slice build(final RepoConfig cfg) throws InterruptedException,\n+        ExecutionException {\n+        return cfg.type().thenCombine(\n+            cfg.storage(),\n+            (type, storage) -> {\n+                final Slice slice;\n+                switch (type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1OTAwNg==", "bodyText": "@HDouss SliceFromConfig should build CompletionStage<Slice> in order to be async and we should remove completedStage here", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415159006", "createdAt": "2020-04-25T22:36:22Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -101,54 +91,7 @@ public Response response(final String line, final Iterable<Map.Entry<String, Str\n                     storage -> storage.value(new Key.From(String.format(\"%s.yaml\", repo)))\n                 )\n                 .thenApply(content -> new RepoConfig(this.vertx, content))\n-                .thenCompose(Pie::sliceForConfig)\n+                .thenCompose(cfg -> CompletableFuture.completedStage(new SliceFromConfig(cfg)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e8bdd1c7f21de6b17585f6168bbc55468351129"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e80ad71cf683d5c7e3b32ac1254c81c7d036262", "author": {"user": {"login": "HDouss", "name": null}}, "url": "https://github.com/artipie/artipie/commit/0e80ad71cf683d5c7e3b32ac1254c81c7d036262", "committedDate": "2020-04-26T21:26:16Z", "message": "#90 - CR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTUzNTQ5", "url": "https://github.com/artipie/artipie/pull/100#pullrequestreview-400553549", "createdAt": "2020-04-26T21:57:07Z", "commit": {"oid": "0e80ad71cf683d5c7e3b32ac1254c81c7d036262"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMTo1NzowOFrOGMKnow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMTo1NzowOFrOGMKnow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQxMDA4Mw==", "bodyText": "@HDouss extract this to a private method to make it more readable", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415410083", "createdAt": "2020-04-26T21:57:08Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import org.cactoos.map.MapEntry;\n+import org.cactoos.map.MapOf;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        try {\n+            return SliceFromConfig.build(this.config).response(\n+                line, headers, body\n+            );\n+        } catch (final InterruptedException ex) {\n+            Logger.error(this, \"Interruption when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        } catch (final ExecutionException ex) {\n+            Logger.error(this, \"Exception when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Find a slice implementation for config.\n+     * @param cfg Repository config\n+     * @return Slice\n+     * @throws ExecutionException If error getting the slice\n+     * @throws InterruptedException If error getting the slice\n+     */\n+    private static Slice build(final RepoConfig cfg) throws InterruptedException,\n+        ExecutionException {\n+        return cfg.type().thenCombine(\n+            cfg.storage(),\n+            (type, storage) -> {\n+                return new MapOf<String, Function<RepoConfig, Slice>>(\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"file\", config -> new FilesSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"npm\", config -> new NpmSlice(new Npm(storage), storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"gem\", config -> new GemSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"rpm\", config -> new RpmSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"php\",\n+                        config -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e80ad71cf683d5c7e3b32ac1254c81c7d036262"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTUzNTg3", "url": "https://github.com/artipie/artipie/pull/100#pullrequestreview-400553587", "createdAt": "2020-04-26T21:57:34Z", "commit": {"oid": "0e80ad71cf683d5c7e3b32ac1254c81c7d036262"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMTo1NzozNVrOGMKn6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMTo1NzozNVrOGMKn6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQxMDE1Mg==", "bodyText": "@HDouss we should check if the type exists in the map and throw exception if it doesnt", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415410152", "createdAt": "2020-04-26T21:57:35Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import org.cactoos.map.MapEntry;\n+import org.cactoos.map.MapOf;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        try {\n+            return SliceFromConfig.build(this.config).response(\n+                line, headers, body\n+            );\n+        } catch (final InterruptedException ex) {\n+            Logger.error(this, \"Interruption when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        } catch (final ExecutionException ex) {\n+            Logger.error(this, \"Exception when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Find a slice implementation for config.\n+     * @param cfg Repository config\n+     * @return Slice\n+     * @throws ExecutionException If error getting the slice\n+     * @throws InterruptedException If error getting the slice\n+     */\n+    private static Slice build(final RepoConfig cfg) throws InterruptedException,\n+        ExecutionException {\n+        return cfg.type().thenCombine(\n+            cfg.storage(),\n+            (type, storage) -> {\n+                return new MapOf<String, Function<RepoConfig, Slice>>(\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"file\", config -> new FilesSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"npm\", config -> new NpmSlice(new Npm(storage), storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"gem\", config -> new GemSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"rpm\", config -> new RpmSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"php\",\n+                        config -> {\n+                            try {\n+                                return config.path().thenApply(\n+                                    path -> new PhpComposer(path, storage)\n+                                ).toCompletableFuture().get();\n+                            } catch (final InterruptedException ex) {\n+                                Logger.error(\n+                                    SliceFromConfig.class, \"Interrupted PhpComposer creation\"\n+                                );\n+                                throw new IllegalArgumentException(ex);\n+                            } catch (final ExecutionException ex) {\n+                                Logger.error(\n+                                    SliceFromConfig.class, \"Exception getting PhpComposer\"\n+                                );\n+                                throw new IllegalArgumentException(ex);\n+                            }\n+                        }\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"maven\", config -> new MavenSlice(storage)\n+                    )\n+                ).get(type).apply(cfg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e80ad71cf683d5c7e3b32ac1254c81c7d036262"}, "originalPosition": 131}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e86d8e48bc5c478bfe53b3ca26b8879d3f8106d", "author": {"user": {"login": "HDouss", "name": null}}, "url": "https://github.com/artipie/artipie/commit/1e86d8e48bc5c478bfe53b3ca26b8879d3f8106d", "committedDate": "2020-04-26T22:16:13Z", "message": "#90 - CR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTU2MTY4", "url": "https://github.com/artipie/artipie/pull/100#pullrequestreview-400556168", "createdAt": "2020-04-26T22:27:09Z", "commit": {"oid": "1e86d8e48bc5c478bfe53b3ca26b8879d3f8106d"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjU2NjQ1", "url": "https://github.com/artipie/artipie/pull/100#pullrequestreview-400656645", "createdAt": "2020-04-27T06:26:10Z", "commit": {"oid": "1e86d8e48bc5c478bfe53b3ca26b8879d3f8106d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjoyNjoxMFrOGMSuiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjoyODoyNlrOGMSydA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU0MjkyMQ==", "bodyText": "@HDouss why do we have InterruptedException here? Does this method perform any blocking operation? We can't allow thread blocking for Slice implementations.", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415542921", "createdAt": "2020-04-27T06:26:10Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import org.cactoos.map.MapEntry;\n+import org.cactoos.map.MapOf;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        try {\n+            return SliceFromConfig.build(this.config).response(\n+                line, headers, body\n+            );\n+        } catch (final InterruptedException ex) {\n+            Logger.error(this, \"Interruption when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        } catch (final ExecutionException ex) {\n+            Logger.error(this, \"Exception when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Find a slice implementation for config.\n+     * @param cfg Repository config\n+     * @return Slice\n+     * @throws ExecutionException If error getting the slice\n+     * @throws InterruptedException If error getting the slice\n+     * @todo #90:30min This method still needs more refactoring. First, we should extract\n+     *  PhpComposer Slice construction to a private method to make it more readable. And then,\n+     *  we should test if the type exist in the constructed map. If the type does not exist,\n+     *  we should throw an IllegalStateException with the message \"Unsupported repository type '%s'\"\n+     */\n+    private static Slice build(final RepoConfig cfg) throws InterruptedException,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e86d8e48bc5c478bfe53b3ca26b8879d3f8106d"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU0MzM4Mg==", "bodyText": "@HDouss same here: why InterruptedException? Please don't use get() method anywhere except test methods.", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415543382", "createdAt": "2020-04-27T06:27:10Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import org.cactoos.map.MapEntry;\n+import org.cactoos.map.MapOf;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        try {\n+            return SliceFromConfig.build(this.config).response(\n+                line, headers, body\n+            );\n+        } catch (final InterruptedException ex) {\n+            Logger.error(this, \"Interruption when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        } catch (final ExecutionException ex) {\n+            Logger.error(this, \"Exception when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Find a slice implementation for config.\n+     * @param cfg Repository config\n+     * @return Slice\n+     * @throws ExecutionException If error getting the slice\n+     * @throws InterruptedException If error getting the slice\n+     * @todo #90:30min This method still needs more refactoring. First, we should extract\n+     *  PhpComposer Slice construction to a private method to make it more readable. And then,\n+     *  we should test if the type exist in the constructed map. If the type does not exist,\n+     *  we should throw an IllegalStateException with the message \"Unsupported repository type '%s'\"\n+     */\n+    private static Slice build(final RepoConfig cfg) throws InterruptedException,\n+        ExecutionException {\n+        return cfg.type().thenCombine(\n+            cfg.storage(),\n+            (type, storage) -> {\n+                return new MapOf<String, Function<RepoConfig, Slice>>(\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"file\", config -> new FilesSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"npm\", config -> new NpmSlice(new Npm(storage), storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"gem\", config -> new GemSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"rpm\", config -> new RpmSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"php\",\n+                        config -> {\n+                            try {\n+                                return config.path().thenApply(\n+                                    path -> new PhpComposer(path, storage)\n+                                ).toCompletableFuture().get();\n+                            } catch (final InterruptedException ex) {\n+                                Logger.error(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e86d8e48bc5c478bfe53b3ca26b8879d3f8106d"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU0MzkyNA==", "bodyText": "@HDouss we can't block HTTP thread with blocking get() call", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415543924", "createdAt": "2020-04-27T06:28:26Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import org.cactoos.map.MapEntry;\n+import org.cactoos.map.MapOf;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        try {\n+            return SliceFromConfig.build(this.config).response(\n+                line, headers, body\n+            );\n+        } catch (final InterruptedException ex) {\n+            Logger.error(this, \"Interruption when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        } catch (final ExecutionException ex) {\n+            Logger.error(this, \"Exception when getting slice from config\");\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Find a slice implementation for config.\n+     * @param cfg Repository config\n+     * @return Slice\n+     * @throws ExecutionException If error getting the slice\n+     * @throws InterruptedException If error getting the slice\n+     * @todo #90:30min This method still needs more refactoring. First, we should extract\n+     *  PhpComposer Slice construction to a private method to make it more readable. And then,\n+     *  we should test if the type exist in the constructed map. If the type does not exist,\n+     *  we should throw an IllegalStateException with the message \"Unsupported repository type '%s'\"\n+     */\n+    private static Slice build(final RepoConfig cfg) throws InterruptedException,\n+        ExecutionException {\n+        return cfg.type().thenCombine(\n+            cfg.storage(),\n+            (type, storage) -> {\n+                return new MapOf<String, Function<RepoConfig, Slice>>(\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"file\", config -> new FilesSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"npm\", config -> new NpmSlice(new Npm(storage), storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"gem\", config -> new GemSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"rpm\", config -> new RpmSlice(storage)\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"php\",\n+                        config -> {\n+                            try {\n+                                return config.path().thenApply(\n+                                    path -> new PhpComposer(path, storage)\n+                                ).toCompletableFuture().get();\n+                            } catch (final InterruptedException ex) {\n+                                Logger.error(\n+                                    SliceFromConfig.class, \"Interrupted PhpComposer creation\"\n+                                );\n+                                throw new IllegalArgumentException(ex);\n+                            } catch (final ExecutionException ex) {\n+                                Logger.error(\n+                                    SliceFromConfig.class, \"Exception getting PhpComposer\"\n+                                );\n+                                throw new IllegalArgumentException(ex);\n+                            }\n+                        }\n+                    ),\n+                    new MapEntry<String, Function<RepoConfig, Slice>>(\n+                        \"maven\", config -> new MavenSlice(storage)\n+                    )\n+                ).get(type).apply(cfg);\n+            }\n+        ).toCompletableFuture().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e86d8e48bc5c478bfe53b3ca26b8879d3f8106d"}, "originalPosition": 137}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f584facefe20405b0a8555adcf1644b3c723b47", "author": {"user": {"login": "HDouss", "name": null}}, "url": "https://github.com/artipie/artipie/commit/8f584facefe20405b0a8555adcf1644b3c723b47", "committedDate": "2020-04-27T08:05:33Z", "message": "#90 - CR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e5d54077ea6277487f06005fd965ebc5ef90ff0", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/artipie/commit/0e5d54077ea6277487f06005fd965ebc5ef90ff0", "committedDate": "2020-04-27T11:26:51Z", "message": "Merge branch 'master' into #90"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwODYyMTcz", "url": "https://github.com/artipie/artipie/pull/100#pullrequestreview-400862173", "createdAt": "2020-04-27T11:28:32Z", "commit": {"oid": "0e5d54077ea6277487f06005fd965ebc5ef90ff0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMToyODozMlrOGMeTbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMToyODozMlrOGMeTbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczMjU5MQ==", "bodyText": "@HDouss maybe it would be better to use .thenApply(cng -> new SliceFromConfig(cfg)) here?", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415732591", "createdAt": "2020-04-27T11:28:32Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -101,54 +91,7 @@ public Response response(final String line, final Iterable<Map.Entry<String, Str\n                     storage -> storage.value(new Key.From(String.format(\"%s.yaml\", repo)))\n                 )\n                 .thenApply(content -> new RepoConfig(this.vertx, content))\n-                .thenCompose(Pie::sliceForConfig)\n+                .thenCompose(cfg -> CompletableFuture.completedStage(new SliceFromConfig(cfg)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e5d54077ea6277487f06005fd965ebc5ef90ff0"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8935ed7f0529ec0c7d476116bd75c4e7e1b6f83d", "author": {"user": {"login": "HDouss", "name": null}}, "url": "https://github.com/artipie/artipie/commit/8935ed7f0529ec0c7d476116bd75c4e7e1b6f83d", "committedDate": "2020-04-27T11:37:12Z", "message": "#90 - CR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwODcxMTgx", "url": "https://github.com/artipie/artipie/pull/100#pullrequestreview-400871181", "createdAt": "2020-04-27T11:42:36Z", "commit": {"oid": "8935ed7f0529ec0c7d476116bd75c4e7e1b6f83d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo0MjozNlrOGMez-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo0MjozNlrOGMez-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0MDkyMw==", "bodyText": "@HDouss instead of creating AsyncSlice instance in response method of Slice on each request you can use Slice.Wrap decorator for wrapping this logic:\nclass SliceFromConfig extends Slice.Wrap {\n  public SliceFromConfig(RepoConfig config) {\n    super(\n      new AsyncSlice(SliceFromConfig.build(config))\n    );\n  }\n}", "url": "https://github.com/artipie/artipie/pull/100#discussion_r415740923", "createdAt": "2020-04-27T11:42:36Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.async.AsyncSlice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+import org.cactoos.map.MapEntry;\n+import org.cactoos.map.MapOf;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        return new AsyncSlice(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8935ed7f0529ec0c7d476116bd75c4e7e1b6f83d"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNTgzODQ3", "url": "https://github.com/artipie/artipie/pull/100#pullrequestreview-401583847", "createdAt": "2020-04-28T07:53:21Z", "commit": {"oid": "8935ed7f0529ec0c7d476116bd75c4e7e1b6f83d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzo1MzoyMVrOGNHZYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzo1MzoyMVrOGNHZYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwNTg1OA==", "bodyText": "@HDouss but SliceFromConfig.build(config) is returning CompletionStage so it's not synchronous, right? Then actual creating of Slice will be deferred until next request. I didn't get your second point, but you are right: we're building new Slice for each request (we may add some caching later), it's correct.\nThe problem with current implementation is only in the design: you are creating new instance of same level in method, but it can be moved to constructor. Creating new concrete implementation in method increases class coupling, but constructor may accept interface types, so coupling will be low.", "url": "https://github.com/artipie/artipie/pull/100#discussion_r416405858", "createdAt": "2020-04-28T07:53:21Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.gem.GemSlice;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.async.AsyncSlice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.Npm;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+import org.cactoos.map.MapEntry;\n+import org.cactoos.map.MapOf;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice from repo config.\n+ * @since 0.1.4\n+ * @todo #90:30min We still don't have tests for Pie. But now that this class was extracted, we have\n+ *  a more cohesive class that could be tested. Write unit tests for SliceFromConfig class.\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+public final class SliceFromConfig implements Slice {\n+\n+    /**\n+     * Repository config.\n+     */\n+    private final RepoConfig config;\n+\n+    /**\n+     * Ctor.\n+     * @param config Repo config\n+     */\n+    public SliceFromConfig(final RepoConfig config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        return new AsyncSlice(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0MDkyMw=="}, "originalCommit": {"oid": "8935ed7f0529ec0c7d476116bd75c4e7e1b6f83d"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09bd9885ccdab682f80e4d085e4330deed64b8d2", "author": {"user": {"login": "HDouss", "name": null}}, "url": "https://github.com/artipie/artipie/commit/09bd9885ccdab682f80e4d085e4330deed64b8d2", "committedDate": "2020-04-28T08:14:29Z", "message": "#90 - CR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxODQ3ODEw", "url": "https://github.com/artipie/artipie/pull/100#pullrequestreview-401847810", "createdAt": "2020-04-28T13:42:56Z", "commit": {"oid": "09bd9885ccdab682f80e4d085e4330deed64b8d2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca1af32598d218cf7a4539f61e95369f4174e521", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/artipie/commit/ca1af32598d218cf7a4539f61e95369f4174e521", "committedDate": "2020-04-28T13:43:06Z", "message": "Merge branch 'master' into #90"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3167, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}