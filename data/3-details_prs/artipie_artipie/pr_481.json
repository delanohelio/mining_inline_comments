{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNTA0OTAx", "number": 481, "title": "#449 - Added DockerClient for tests and JUnit extension for injection", "bodyText": "Part of #449\nAdded DockerClient for tests and JUnit extension for injection", "createdAt": "2020-08-21T08:54:06Z", "url": "https://github.com/artipie/artipie/pull/481", "merged": true, "mergeCommit": {"oid": "ab5308062386f6672910c3bf77f578784ff235b7"}, "closed": true, "closedAt": "2020-08-21T10:59:05Z", "author": {"login": "olegmoz"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdBA4uTgH2gAyNDcxNTA0OTAxOmYzMDNmYTQzY2Q4NWMzMmYyODNlYjkwYjVkMTE3OTkyODM0MjFmMTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBCnhIAFqTQ3MjM5NTM1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f303fa43cd85c32f283eb90b5d11799283421f19", "author": {"user": {"login": "olegmoz", "name": "Oleg Mozzhechkov"}}, "url": "https://github.com/artipie/artipie/commit/f303fa43cd85c32f283eb90b5d11799283421f19", "committedDate": "2020-08-21T08:53:07Z", "message": "#449 - Added DockerClient for tests and JUnit extension injection"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMzgyMzQ4", "url": "https://github.com/artipie/artipie/pull/481#pullrequestreview-472382348", "createdAt": "2020-08-21T10:29:46Z", "commit": {"oid": "f303fa43cd85c32f283eb90b5d11799283421f19"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMDoyOTo0NlrOHEoLIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMDozMjowOFrOHEoPBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYxNDU2Mw==", "bodyText": "@olegmoz I'd suggest to inline temp", "url": "https://github.com/artipie/artipie/pull/481#discussion_r474614563", "createdAt": "2020-08-21T10:29:46Z", "author": {"login": "olenagerasimova"}, "path": "src/test/java/com/artipie/docker/junit/DockerClientExtension.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.docker.junit;\n+\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+/**\n+ * Docker client extension. Populates {@link DockerClient} field of test class.\n+ *\n+ * @since 0.10\n+ */\n+public final class DockerClientExtension\n+    implements BeforeEachCallback, BeforeAllCallback, AfterAllCallback {\n+\n+    /**\n+     * Key for storing client instance in context store.\n+     */\n+    private static final String CLIENT = \"client\";\n+\n+    /**\n+     * Key for storing temp dir in context store.\n+     */\n+    private static final String TEMP_DIR = \"temp-dir\";\n+\n+    @Override\n+    public void beforeAll(final ExtensionContext context) throws Exception {\n+        final Path temp = Files.createTempDirectory(\"junit-docker-\");\n+        final DockerClient client = new DockerClient(temp);\n+        store(context).put(DockerClientExtension.TEMP_DIR, temp);\n+        store(context).put(DockerClientExtension.CLIENT, client);\n+    }\n+\n+    @Override\n+    public void beforeEach(final ExtensionContext context) throws Exception {\n+        injectVariables(\n+            context,\n+            store(context).get(DockerClientExtension.CLIENT, DockerClient.class)\n+        );\n+    }\n+\n+    @Override\n+    public void afterAll(final ExtensionContext context) {\n+        final Path temp = store(context).remove(DockerClientExtension.TEMP_DIR, Path.class);\n+        temp.toFile().delete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f303fa43cd85c32f283eb90b5d11799283421f19"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYxNTU1Nw==", "bodyText": "@olegmoz I'd suggest to inlineclient", "url": "https://github.com/artipie/artipie/pull/481#discussion_r474615557", "createdAt": "2020-08-21T10:32:08Z", "author": {"login": "olenagerasimova"}, "path": "src/test/java/com/artipie/docker/junit/DockerClientExtension.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.docker.junit;\n+\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+/**\n+ * Docker client extension. Populates {@link DockerClient} field of test class.\n+ *\n+ * @since 0.10\n+ */\n+public final class DockerClientExtension\n+    implements BeforeEachCallback, BeforeAllCallback, AfterAllCallback {\n+\n+    /**\n+     * Key for storing client instance in context store.\n+     */\n+    private static final String CLIENT = \"client\";\n+\n+    /**\n+     * Key for storing temp dir in context store.\n+     */\n+    private static final String TEMP_DIR = \"temp-dir\";\n+\n+    @Override\n+    public void beforeAll(final ExtensionContext context) throws Exception {\n+        final Path temp = Files.createTempDirectory(\"junit-docker-\");\n+        final DockerClient client = new DockerClient(temp);\n+        store(context).put(DockerClientExtension.TEMP_DIR, temp);\n+        store(context).put(DockerClientExtension.CLIENT, client);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f303fa43cd85c32f283eb90b5d11799283421f19"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0921b78061432fe700c9b27e6dac1312fd33d7f", "author": {"user": {"login": "olegmoz", "name": "Oleg Mozzhechkov"}}, "url": "https://github.com/artipie/artipie/commit/a0921b78061432fe700c9b27e6dac1312fd33d7f", "committedDate": "2020-08-21T10:36:13Z", "message": "#449 - Changes by review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMzk1MzUx", "url": "https://github.com/artipie/artipie/pull/481#pullrequestreview-472395351", "createdAt": "2020-08-21T10:54:08Z", "commit": {"oid": "a0921b78061432fe700c9b27e6dac1312fd33d7f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3482, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}