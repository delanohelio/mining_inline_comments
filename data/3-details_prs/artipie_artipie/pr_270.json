{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MzIwNTYy", "number": 270, "title": "Refactored HTTP layer", "bodyText": "#258 - refactored HTTP layer", "createdAt": "2020-07-07T10:30:38Z", "url": "https://github.com/artipie/artipie/pull/270", "merged": true, "mergeCommit": {"oid": "53d2de970bbd44ab32a924d45c59ef02e069c303"}, "closed": true, "closedAt": "2020-07-08T15:12:07Z", "author": {"login": "g4s8"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcyjTIQAH2gAyNDQ1MzIwNTYyOjZkZmM3N2RkYjc4YjBhYzY4MGYxYTkwNTcwYzhjNzA0MzIzMGVjZGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcy75cHAH2gAyNDQ1MzIwNTYyOmVlM2RjMTJkMTU0NWE0NzkxOTg2OGQ1ZjExMjRkZjIwZmY0OGZlMTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6dfc77ddb78b0ac680f1a90570c8c7043230ecdc", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/artipie/commit/6dfc77ddb78b0ac680f1a90570c8c7043230ecdc", "committedDate": "2020-07-07T10:29:52Z", "message": "#258 - refactored http layer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f824786f009d49437ef6999bbe7e71ea9cbdab23", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/artipie/commit/f824786f009d49437ef6999bbe7e71ea9cbdab23", "committedDate": "2020-07-07T13:31:03Z", "message": "Merge branch 'master' into 258"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzOTE0MzQ0", "url": "https://github.com/artipie/artipie/pull/270#pullrequestreview-443914344", "createdAt": "2020-07-07T13:55:12Z", "commit": {"oid": "f824786f009d49437ef6999bbe7e71ea9cbdab23"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzo1NToxM1rOGt_tSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDo1ODozNlrOGuCpZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg4Mjg5MQ==", "bodyText": "@g4s8 extract this to a private method to make it more readable", "url": "https://github.com/artipie/artipie/pull/270#discussion_r450882891", "createdAt": "2020-07-07T13:55:13Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/ArtipieRepositories.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http;\n+\n+import com.artipie.RepoConfig;\n+import com.artipie.Settings;\n+import com.artipie.SliceFromConfig;\n+import com.artipie.StorageAliases;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.async.AsyncSlice;\n+import com.artipie.http.rs.RsWithBody;\n+import com.artipie.http.rs.StandardRs;\n+import com.artipie.http.slice.SliceSimple;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+/**\n+ * Artipie repositories implementation.\n+ * @since 0.9\n+ */\n+final class ArtipieRepositories implements Repositories {\n+\n+    /**\n+     * Artipie settings.\n+     */\n+    private final Settings settings;\n+\n+    /**\n+     * New Artipie repositories.\n+     * @param settings Artipie settings\n+     */\n+    ArtipieRepositories(final Settings settings) {\n+        this.settings = settings;\n+    }\n+\n+    @Override\n+    public Slice slice(final Key name) throws IOException {\n+        final Storage storage = this.settings.storage();\n+        final Key.From key = new Key.From(String.format(\"%s.yaml\", name.string()));\n+        return new AsyncSlice(\n+            storage.exists(key).thenCompose(\n+                exists -> {\n+                    final CompletionStage<Slice> res;\n+                    if (exists) {\n+                        res = storage.value(key).thenCompose(\n+                            pub -> StorageAliases.find(storage, name).thenCompose(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f824786f009d49437ef6999bbe7e71ea9cbdab23"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg4MzIyMg==", "bodyText": "@g4s8 since 0.9", "url": "https://github.com/artipie/artipie/pull/270#discussion_r450883222", "createdAt": "2020-07-07T13:55:40Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/Pie.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http;\n+\n+import com.artipie.Settings;\n+import com.artipie.api.ArtipieApi;\n+import com.artipie.dashboard.DashboardSlice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import com.artipie.http.rt.RtPath;\n+import com.artipie.http.rt.RtRule;\n+import com.artipie.http.rt.RtRulePath;\n+import com.artipie.http.rt.SliceRoute;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Pie of slices.\n+ * @since 1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f824786f009d49437ef6999bbe7e71ea9cbdab23"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkyMzUyMA==", "bodyText": "@g4s8 I would rename this class to SafeSlice to be consistent with rest of the naming convention", "url": "https://github.com/artipie/artipie/pull/270#discussion_r450923520", "createdAt": "2020-07-07T14:48:47Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/SliceSafe.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http;\n+\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithBody;\n+import com.artipie.http.rs.RsWithStatus;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice which handles all exceptions and respond with 500 error in that case.\n+ * @since 0.9\n+ * @checkstyle IllegalCatchCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+@SuppressWarnings({\"PMD.OnlyOneReturn\", \"PMD.AvoidCatchingGenericException\"})\n+final class SliceSafe implements Slice {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f824786f009d49437ef6999bbe7e71ea9cbdab23"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkzMDgwNQ==", "bodyText": "@g4s8 we should add a check for split size to avoid indexoutofbouds", "url": "https://github.com/artipie/artipie/pull/270#discussion_r450930805", "createdAt": "2020-07-07T14:58:20Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/SliceByPath.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http;\n+\n+import com.artipie.Settings;\n+import com.artipie.asto.Key;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithBody;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice which finds repository by path.\n+ * @since 0.9\n+ */\n+final class SliceByPath implements Slice {\n+\n+    /**\n+     * Artipie settings.\n+     */\n+    private final Settings settings;\n+\n+    /**\n+     * Repositories.\n+     */\n+    private final Repositories repositories;\n+\n+    /**\n+     * New slice from settings.\n+     * @param settings Artipie settings\n+     */\n+    SliceByPath(final Settings settings) {\n+        this(settings, new ArtipieRepositories(settings));\n+    }\n+\n+    /**\n+     * New slice from settings and repositories.\n+     * @param settings Artipie settings\n+     * @param repositories Repositories provider\n+     */\n+    SliceByPath(final Settings settings, final Repositories repositories) {\n+        this.settings = settings;\n+        this.repositories = repositories;\n+    }\n+\n+    // @checkstyle ReturnCountCheck (20 lines)\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final Key key;\n+        try {\n+            final String[] split = new RequestLineFrom(line).uri().getPath()\n+                .replaceAll(\"^/+\", \"\").split(\"/\");\n+            if (this.settings.layout().equals(\"org\")) {\n+                key = new Key.From(split[0], split[1]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f824786f009d49437ef6999bbe7e71ea9cbdab23"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkzMTA0NQ==", "bodyText": "@g4s8 we should add a check for split size to avoid indexoutofbouds", "url": "https://github.com/artipie/artipie/pull/270#discussion_r450931045", "createdAt": "2020-07-07T14:58:36Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/SliceByPath.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http;\n+\n+import com.artipie.Settings;\n+import com.artipie.asto.Key;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithBody;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice which finds repository by path.\n+ * @since 0.9\n+ */\n+final class SliceByPath implements Slice {\n+\n+    /**\n+     * Artipie settings.\n+     */\n+    private final Settings settings;\n+\n+    /**\n+     * Repositories.\n+     */\n+    private final Repositories repositories;\n+\n+    /**\n+     * New slice from settings.\n+     * @param settings Artipie settings\n+     */\n+    SliceByPath(final Settings settings) {\n+        this(settings, new ArtipieRepositories(settings));\n+    }\n+\n+    /**\n+     * New slice from settings and repositories.\n+     * @param settings Artipie settings\n+     * @param repositories Repositories provider\n+     */\n+    SliceByPath(final Settings settings, final Repositories repositories) {\n+        this.settings = settings;\n+        this.repositories = repositories;\n+    }\n+\n+    // @checkstyle ReturnCountCheck (20 lines)\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final Key key;\n+        try {\n+            final String[] split = new RequestLineFrom(line).uri().getPath()\n+                .replaceAll(\"^/+\", \"\").split(\"/\");\n+            if (this.settings.layout().equals(\"org\")) {\n+                key = new Key.From(split[0], split[1]);\n+            } else {\n+                key = new Key.From(split[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f824786f009d49437ef6999bbe7e71ea9cbdab23"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01550e2aecf3be2bfd47375773b554b9a15a9439", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/artipie/commit/01550e2aecf3be2bfd47375773b554b9a15a9439", "committedDate": "2020-07-08T14:26:52Z", "message": "#258 - review fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0ODI2ODU1", "url": "https://github.com/artipie/artipie/pull/270#pullrequestreview-444826855", "createdAt": "2020-07-08T14:32:00Z", "commit": {"oid": "01550e2aecf3be2bfd47375773b554b9a15a9439"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee3dc12d1545a47919868d5f1124df20ff48fe10", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/artipie/commit/ee3dc12d1545a47919868d5f1124df20ff48fe10", "committedDate": "2020-07-08T15:09:26Z", "message": "Merge branch 'master' into 258"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3013, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}