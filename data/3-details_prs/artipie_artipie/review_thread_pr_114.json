{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMzUwMDU2", "number": 114, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODo1MzoxN1rOD4dADA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODo1NDowNVrOD4dBAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTIxOTk2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/SliceFromConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODo1MzoxN1rOGPSfuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODo1MzoxN1rOGPSfuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4NDg1Ng==", "bodyText": "@olenagerasimova we can extract this to a private method to avoid code repetition:\nSliceFromConfig.build(this.config(${type})).toCompletableFuture().get()", "url": "https://github.com/artipie/artipie/pull/114#discussion_r418684856", "createdAt": "2020-05-01T18:53:17Z", "author": {"login": "Vatavuk"}, "path": "src/test/java/com/artipie/SliceFromConfigTest.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.http.GoSlice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import io.reactivex.Flowable;\n+import io.vertx.reactivex.core.Vertx;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.ExecutionException;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test for {@link SliceFromConfig}.\n+ * @since 0.2\n+ */\n+class SliceFromConfigTest {\n+\n+    /**\n+     * Vertx instance.\n+     */\n+    private Vertx vertx;\n+\n+    @Test\n+    void returnsMavenSliceForMavenRepo() throws ExecutionException, InterruptedException {\n+        MatcherAssert.assertThat(\n+            SliceFromConfig.build(this.config(\"maven\")).toCompletableFuture().get(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ef04575a94b8782780240963f2886dd09d48805"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTIyMjQxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/SliceFromConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODo1NDowNVrOGPShPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODo1NDowNVrOGPShPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4NTI0Ng==", "bodyText": "@olenagerasimova let's simplify throws part with just throws Exception, it's a little bit verbose", "url": "https://github.com/artipie/artipie/pull/114#discussion_r418685246", "createdAt": "2020-05-01T18:54:05Z", "author": {"login": "Vatavuk"}, "path": "src/test/java/com/artipie/SliceFromConfigTest.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.composer.http.PhpComposer;\n+import com.artipie.files.FilesSlice;\n+import com.artipie.http.GoSlice;\n+import com.artipie.maven.http.MavenSlice;\n+import com.artipie.npm.http.NpmSlice;\n+import com.artipie.rpm.http.RpmSlice;\n+import io.reactivex.Flowable;\n+import io.vertx.reactivex.core.Vertx;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.ExecutionException;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test for {@link SliceFromConfig}.\n+ * @since 0.2\n+ */\n+class SliceFromConfigTest {\n+\n+    /**\n+     * Vertx instance.\n+     */\n+    private Vertx vertx;\n+\n+    @Test\n+    void returnsMavenSliceForMavenRepo() throws ExecutionException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ef04575a94b8782780240963f2886dd09d48805"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2380, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}