{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1MTQ0MDcy", "number": 121, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMjoyOTozN1rOD6n42w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMjozNzowN1rOD6oBDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzk3NTMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/ContentLengthLimiter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMjoyOTozN1rOGSj3jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzozNDowOFrOGSluYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjExNTIxMw==", "bodyText": "@olegmoz shouldn't this be false?", "url": "https://github.com/artipie/artipie/pull/121#discussion_r422115213", "createdAt": "2020-05-08T12:29:37Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/ContentLengthLimiter.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RqHeaders;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice limiting requests size by `Content-Length` header.\n+ * Checks `Content-Length` header to be within limit and responds with error if it is not.\n+ * Forwards request to delegate {@link Slice} otherwise.\n+ *\n+ * @since 0.2\n+ */\n+public final class ContentLengthLimiter implements Slice {\n+\n+    /**\n+     * Delegate slice.\n+     */\n+    private final Slice delegate;\n+\n+    /**\n+     * Max allowed value.\n+     */\n+    private final long limit;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param delegate Delegate slice.\n+     * @param limit Max allowed value.\n+     */\n+    public ContentLengthLimiter(final Slice delegate, final long limit) {\n+        this.delegate = delegate;\n+        this.limit = limit;\n+    }\n+\n+    @Override\n+    public Response response(\n+        final String line,\n+        final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body\n+    ) {\n+        final Response response;\n+        if (new RqHeaders(headers, \"Content-Length\").stream().allMatch(this::withinLimit)) {\n+            response = this.delegate.response(line, headers, body);\n+        } else {\n+            response = new RsWithStatus(RsStatus.BAD_REQUEST);\n+        }\n+        return response;\n+    }\n+\n+    /**\n+     * Checks that value is less or equal then limit.\n+     *\n+     * @param value Value to check against limit.\n+     * @return True if value is within limit or cannot be parsed, false otherwise.\n+     */\n+    private boolean withinLimit(final String value) {\n+        boolean pass;\n+        try {\n+            pass = Long.parseLong(value) <= this.limit;\n+        } catch (final NumberFormatException ex) {\n+            pass = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6df195a24d7361a2dc7ddd31b7f9c6017f1bddbf"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE0NTYzNQ==", "bodyText": "@Vatavuk I think it should not, because we are not in control of API here. Maybe some adapter sends this header value is some weird format, have no idea. So it's better to be safe then sorry and pass this request.", "url": "https://github.com/artipie/artipie/pull/121#discussion_r422145635", "createdAt": "2020-05-08T13:34:08Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/ContentLengthLimiter.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RqHeaders;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice limiting requests size by `Content-Length` header.\n+ * Checks `Content-Length` header to be within limit and responds with error if it is not.\n+ * Forwards request to delegate {@link Slice} otherwise.\n+ *\n+ * @since 0.2\n+ */\n+public final class ContentLengthLimiter implements Slice {\n+\n+    /**\n+     * Delegate slice.\n+     */\n+    private final Slice delegate;\n+\n+    /**\n+     * Max allowed value.\n+     */\n+    private final long limit;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param delegate Delegate slice.\n+     * @param limit Max allowed value.\n+     */\n+    public ContentLengthLimiter(final Slice delegate, final long limit) {\n+        this.delegate = delegate;\n+        this.limit = limit;\n+    }\n+\n+    @Override\n+    public Response response(\n+        final String line,\n+        final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body\n+    ) {\n+        final Response response;\n+        if (new RqHeaders(headers, \"Content-Length\").stream().allMatch(this::withinLimit)) {\n+            response = this.delegate.response(line, headers, body);\n+        } else {\n+            response = new RsWithStatus(RsStatus.BAD_REQUEST);\n+        }\n+        return response;\n+    }\n+\n+    /**\n+     * Checks that value is less or equal then limit.\n+     *\n+     * @param value Value to check against limit.\n+     * @return True if value is within limit or cannot be parsed, false otherwise.\n+     */\n+    private boolean withinLimit(final String value) {\n+        boolean pass;\n+        try {\n+            pass = Long.parseLong(value) <= this.limit;\n+        } catch (final NumberFormatException ex) {\n+            pass = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjExNTIxMw=="}, "originalCommit": {"oid": "6df195a24d7361a2dc7ddd31b7f9c6017f1bddbf"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzk5NjI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/ContentLengthLimiter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMjozNzowN1rOGSkEQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzozNDozM1rOGSlvSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjExODQ2NQ==", "bodyText": "@olegmoz maybe without suffix ER. How about  UploadSizeRestriction or ContentSizeRestriction?", "url": "https://github.com/artipie/artipie/pull/121#discussion_r422118465", "createdAt": "2020-05-08T12:37:07Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/ContentLengthLimiter.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RqHeaders;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice limiting requests size by `Content-Length` header.\n+ * Checks `Content-Length` header to be within limit and responds with error if it is not.\n+ * Forwards request to delegate {@link Slice} otherwise.\n+ *\n+ * @since 0.2\n+ */\n+public final class ContentLengthLimiter implements Slice {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6df195a24d7361a2dc7ddd31b7f9c6017f1bddbf"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE0NTg2NA==", "bodyText": "@Vatavuk ok, changed the name", "url": "https://github.com/artipie/artipie/pull/121#discussion_r422145864", "createdAt": "2020-05-08T13:34:33Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/ContentLengthLimiter.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RqHeaders;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice limiting requests size by `Content-Length` header.\n+ * Checks `Content-Length` header to be within limit and responds with error if it is not.\n+ * Forwards request to delegate {@link Slice} otherwise.\n+ *\n+ * @since 0.2\n+ */\n+public final class ContentLengthLimiter implements Slice {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjExODQ2NQ=="}, "originalCommit": {"oid": "6df195a24d7361a2dc7ddd31b7f9c6017f1bddbf"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2384, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}