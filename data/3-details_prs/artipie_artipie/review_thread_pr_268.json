{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MzEyOTc5", "number": 268, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDozNToyOFrOEMBPOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDo0MTo0N1rOEMBW-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDM4NjQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/metrics/memory/MetricsLogPublisher.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDozNToyOVrOGt4vtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyMDo1N1rOGt6G3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc2ODgyMA==", "bodyText": "@olegmoz why not use Metrics interface instead of concrete class?", "url": "https://github.com/artipie/artipie/pull/268#discussion_r450768820", "createdAt": "2020-07-07T10:35:29Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/metrics/memory/MetricsLogPublisher.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import com.jcabi.log.Logger;\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Periodic publisher of {@link InMemoryMetrics} to log.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Support gauge publishing in `MetricsLogPublisher`.\n+ *  `InMemoryMetrics` contain gauges along counters.\n+ *  Gauges should be published the same way as counters.\n+ *  Should be done after https://github.com/artipie/artipie/issues/267\n+ */\n+public class MetricsLogPublisher {\n+\n+    /**\n+     * Metrics for publishing.\n+     */\n+    private final InMemoryMetrics metrics;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d198f4e8a4828eff80946f33bb81b98348783d00"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4MzU3Mw==", "bodyText": "@Vatavuk that is because Metrics interface is for reporting metrics. Only InMemoryMetrics implementations actualy holds the data, so only it is compatible with publishing to logs.", "url": "https://github.com/artipie/artipie/pull/268#discussion_r450783573", "createdAt": "2020-07-07T11:05:10Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/metrics/memory/MetricsLogPublisher.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import com.jcabi.log.Logger;\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Periodic publisher of {@link InMemoryMetrics} to log.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Support gauge publishing in `MetricsLogPublisher`.\n+ *  `InMemoryMetrics` contain gauges along counters.\n+ *  Gauges should be published the same way as counters.\n+ *  Should be done after https://github.com/artipie/artipie/issues/267\n+ */\n+public class MetricsLogPublisher {\n+\n+    /**\n+     * Metrics for publishing.\n+     */\n+    private final InMemoryMetrics metrics;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc2ODgyMA=="}, "originalCommit": {"oid": "d198f4e8a4828eff80946f33bb81b98348783d00"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MTEzNQ==", "bodyText": "@olegmoz ah ok, it messes with my head that interface doesn't have printers:).", "url": "https://github.com/artipie/artipie/pull/268#discussion_r450791135", "createdAt": "2020-07-07T11:20:57Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/metrics/memory/MetricsLogPublisher.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import com.jcabi.log.Logger;\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Periodic publisher of {@link InMemoryMetrics} to log.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Support gauge publishing in `MetricsLogPublisher`.\n+ *  `InMemoryMetrics` contain gauges along counters.\n+ *  Gauges should be published the same way as counters.\n+ *  Should be done after https://github.com/artipie/artipie/issues/267\n+ */\n+public class MetricsLogPublisher {\n+\n+    /**\n+     * Metrics for publishing.\n+     */\n+    private final InMemoryMetrics metrics;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc2ODgyMA=="}, "originalCommit": {"oid": "d198f4e8a4828eff80946f33bb81b98348783d00"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDM5NDU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/metrics/memory/MetricsLogPublisher.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDozODowM1rOGt40wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjoyNDoxM1rOGuGO9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3MDExMg==", "bodyText": "@olegmoz I think we should consider injecting logger to be able to test this class", "url": "https://github.com/artipie/artipie/pull/268#discussion_r450770112", "createdAt": "2020-07-07T10:38:03Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/metrics/memory/MetricsLogPublisher.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import com.jcabi.log.Logger;\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Periodic publisher of {@link InMemoryMetrics} to log.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Support gauge publishing in `MetricsLogPublisher`.\n+ *  `InMemoryMetrics` contain gauges along counters.\n+ *  Gauges should be published the same way as counters.\n+ *  Should be done after https://github.com/artipie/artipie/issues/267\n+ */\n+public class MetricsLogPublisher {\n+\n+    /**\n+     * Metrics for publishing.\n+     */\n+    private final InMemoryMetrics metrics;\n+\n+    /**\n+     * Period.\n+     */\n+    private final Duration period;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param metrics Metrics for publishing.\n+     * @param period Period.\n+     */\n+    public MetricsLogPublisher(final InMemoryMetrics metrics, final Duration period) {\n+        this.metrics = metrics;\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Start periodic publishing.\n+     */\n+    public void start() {\n+        final long millis = this.period.toMillis();\n+        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(\n+            this::publish,\n+            millis,\n+            millis,\n+            TimeUnit.MILLISECONDS\n+        );\n+    }\n+\n+    /**\n+     * Publish metrics to log.\n+     */\n+    private void publish() {\n+        final Map<String, InMemoryCounter> counters = new TreeMap<>(this.metrics.counters());\n+        final StringBuilder message = new StringBuilder(\"Counters:\");\n+        for (final Map.Entry<String, InMemoryCounter> entry : counters.entrySet()) {\n+            message.append('\\n')\n+                .append(entry.getKey())\n+                .append(\": \")\n+                .append(entry.getValue().value());\n+        }\n+        Logger.info(this.metrics, message.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d198f4e8a4828eff80946f33bb81b98348783d00"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4NDIzMw==", "bodyText": "@Vatavuk done", "url": "https://github.com/artipie/artipie/pull/268#discussion_r450784233", "createdAt": "2020-07-07T11:06:34Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/metrics/memory/MetricsLogPublisher.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import com.jcabi.log.Logger;\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Periodic publisher of {@link InMemoryMetrics} to log.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Support gauge publishing in `MetricsLogPublisher`.\n+ *  `InMemoryMetrics` contain gauges along counters.\n+ *  Gauges should be published the same way as counters.\n+ *  Should be done after https://github.com/artipie/artipie/issues/267\n+ */\n+public class MetricsLogPublisher {\n+\n+    /**\n+     * Metrics for publishing.\n+     */\n+    private final InMemoryMetrics metrics;\n+\n+    /**\n+     * Period.\n+     */\n+    private final Duration period;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param metrics Metrics for publishing.\n+     * @param period Period.\n+     */\n+    public MetricsLogPublisher(final InMemoryMetrics metrics, final Duration period) {\n+        this.metrics = metrics;\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Start periodic publishing.\n+     */\n+    public void start() {\n+        final long millis = this.period.toMillis();\n+        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(\n+            this::publish,\n+            millis,\n+            millis,\n+            TimeUnit.MILLISECONDS\n+        );\n+    }\n+\n+    /**\n+     * Publish metrics to log.\n+     */\n+    private void publish() {\n+        final Map<String, InMemoryCounter> counters = new TreeMap<>(this.metrics.counters());\n+        final StringBuilder message = new StringBuilder(\"Counters:\");\n+        for (final Map.Entry<String, InMemoryCounter> entry : counters.entrySet()) {\n+            message.append('\\n')\n+                .append(entry.getKey())\n+                .append(\": \")\n+                .append(entry.getValue().value());\n+        }\n+        Logger.info(this.metrics, message.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3MDExMg=="}, "originalCommit": {"oid": "d198f4e8a4828eff80946f33bb81b98348783d00"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MTcxOA==", "bodyText": "@olegmoz I don't see this change", "url": "https://github.com/artipie/artipie/pull/268#discussion_r450791718", "createdAt": "2020-07-07T11:22:10Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/metrics/memory/MetricsLogPublisher.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import com.jcabi.log.Logger;\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Periodic publisher of {@link InMemoryMetrics} to log.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Support gauge publishing in `MetricsLogPublisher`.\n+ *  `InMemoryMetrics` contain gauges along counters.\n+ *  Gauges should be published the same way as counters.\n+ *  Should be done after https://github.com/artipie/artipie/issues/267\n+ */\n+public class MetricsLogPublisher {\n+\n+    /**\n+     * Metrics for publishing.\n+     */\n+    private final InMemoryMetrics metrics;\n+\n+    /**\n+     * Period.\n+     */\n+    private final Duration period;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param metrics Metrics for publishing.\n+     * @param period Period.\n+     */\n+    public MetricsLogPublisher(final InMemoryMetrics metrics, final Duration period) {\n+        this.metrics = metrics;\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Start periodic publishing.\n+     */\n+    public void start() {\n+        final long millis = this.period.toMillis();\n+        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(\n+            this::publish,\n+            millis,\n+            millis,\n+            TimeUnit.MILLISECONDS\n+        );\n+    }\n+\n+    /**\n+     * Publish metrics to log.\n+     */\n+    private void publish() {\n+        final Map<String, InMemoryCounter> counters = new TreeMap<>(this.metrics.counters());\n+        final StringBuilder message = new StringBuilder(\"Counters:\");\n+        for (final Map.Entry<String, InMemoryCounter> entry : counters.entrySet()) {\n+            message.append('\\n')\n+                .append(entry.getKey())\n+                .append(\": \")\n+                .append(entry.getValue().value());\n+        }\n+        Logger.info(this.metrics, message.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3MDExMg=="}, "originalCommit": {"oid": "d198f4e8a4828eff80946f33bb81b98348783d00"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4OTgxMg==", "bodyText": "@Vatavuk please see again, I force pushed the branch again. I see the changes in web interface", "url": "https://github.com/artipie/artipie/pull/268#discussion_r450989812", "createdAt": "2020-07-07T16:24:13Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/metrics/memory/MetricsLogPublisher.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import com.jcabi.log.Logger;\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Periodic publisher of {@link InMemoryMetrics} to log.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Support gauge publishing in `MetricsLogPublisher`.\n+ *  `InMemoryMetrics` contain gauges along counters.\n+ *  Gauges should be published the same way as counters.\n+ *  Should be done after https://github.com/artipie/artipie/issues/267\n+ */\n+public class MetricsLogPublisher {\n+\n+    /**\n+     * Metrics for publishing.\n+     */\n+    private final InMemoryMetrics metrics;\n+\n+    /**\n+     * Period.\n+     */\n+    private final Duration period;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param metrics Metrics for publishing.\n+     * @param period Period.\n+     */\n+    public MetricsLogPublisher(final InMemoryMetrics metrics, final Duration period) {\n+        this.metrics = metrics;\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Start periodic publishing.\n+     */\n+    public void start() {\n+        final long millis = this.period.toMillis();\n+        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(\n+            this::publish,\n+            millis,\n+            millis,\n+            TimeUnit.MILLISECONDS\n+        );\n+    }\n+\n+    /**\n+     * Publish metrics to log.\n+     */\n+    private void publish() {\n+        final Map<String, InMemoryCounter> counters = new TreeMap<>(this.metrics.counters());\n+        final StringBuilder message = new StringBuilder(\"Counters:\");\n+        for (final Map.Entry<String, InMemoryCounter> entry : counters.entrySet()) {\n+            message.append('\\n')\n+                .append(entry.getKey())\n+                .append(\": \")\n+                .append(entry.getValue().value());\n+        }\n+        Logger.info(this.metrics, message.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3MDExMg=="}, "originalCommit": {"oid": "d198f4e8a4828eff80946f33bb81b98348783d00"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDQwNTQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/metrics/memory/MetricsLogPublisher.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDo0MTozMFrOGt47cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNTowNjozM1rOGuDBDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3MTgyNw==", "bodyText": "@olegmoz I think we shouldn't rely on toString method which will be called in Logger.info(this.metrics...). We should add some convenient log description in the first argument of Logger.info", "url": "https://github.com/artipie/artipie/pull/268#discussion_r450771827", "createdAt": "2020-07-07T10:41:30Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/metrics/memory/MetricsLogPublisher.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import com.jcabi.log.Logger;\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Periodic publisher of {@link InMemoryMetrics} to log.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Support gauge publishing in `MetricsLogPublisher`.\n+ *  `InMemoryMetrics` contain gauges along counters.\n+ *  Gauges should be published the same way as counters.\n+ *  Should be done after https://github.com/artipie/artipie/issues/267\n+ */\n+public class MetricsLogPublisher {\n+\n+    /**\n+     * Metrics for publishing.\n+     */\n+    private final InMemoryMetrics metrics;\n+\n+    /**\n+     * Period.\n+     */\n+    private final Duration period;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param metrics Metrics for publishing.\n+     * @param period Period.\n+     */\n+    public MetricsLogPublisher(final InMemoryMetrics metrics, final Duration period) {\n+        this.metrics = metrics;\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Start periodic publishing.\n+     */\n+    public void start() {\n+        final long millis = this.period.toMillis();\n+        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(\n+            this::publish,\n+            millis,\n+            millis,\n+            TimeUnit.MILLISECONDS\n+        );\n+    }\n+\n+    /**\n+     * Publish metrics to log.\n+     */\n+    private void publish() {\n+        final Map<String, InMemoryCounter> counters = new TreeMap<>(this.metrics.counters());\n+        final StringBuilder message = new StringBuilder(\"Counters:\");\n+        for (final Map.Entry<String, InMemoryCounter> entry : counters.entrySet()) {\n+            message.append('\\n')\n+                .append(entry.getKey())\n+                .append(\": \")\n+                .append(entry.getValue().value());\n+        }\n+        Logger.info(this.metrics, message.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d198f4e8a4828eff80946f33bb81b98348783d00"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4NDE3Nw==", "bodyText": "@Vatavuk we are building the message just before publishing, so we are in full control of message content. And it starts with Counters: string to clarify what's published. So I think it's all good.", "url": "https://github.com/artipie/artipie/pull/268#discussion_r450784177", "createdAt": "2020-07-07T11:06:28Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/metrics/memory/MetricsLogPublisher.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import com.jcabi.log.Logger;\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Periodic publisher of {@link InMemoryMetrics} to log.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Support gauge publishing in `MetricsLogPublisher`.\n+ *  `InMemoryMetrics` contain gauges along counters.\n+ *  Gauges should be published the same way as counters.\n+ *  Should be done after https://github.com/artipie/artipie/issues/267\n+ */\n+public class MetricsLogPublisher {\n+\n+    /**\n+     * Metrics for publishing.\n+     */\n+    private final InMemoryMetrics metrics;\n+\n+    /**\n+     * Period.\n+     */\n+    private final Duration period;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param metrics Metrics for publishing.\n+     * @param period Period.\n+     */\n+    public MetricsLogPublisher(final InMemoryMetrics metrics, final Duration period) {\n+        this.metrics = metrics;\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Start periodic publishing.\n+     */\n+    public void start() {\n+        final long millis = this.period.toMillis();\n+        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(\n+            this::publish,\n+            millis,\n+            millis,\n+            TimeUnit.MILLISECONDS\n+        );\n+    }\n+\n+    /**\n+     * Publish metrics to log.\n+     */\n+    private void publish() {\n+        final Map<String, InMemoryCounter> counters = new TreeMap<>(this.metrics.counters());\n+        final StringBuilder message = new StringBuilder(\"Counters:\");\n+        for (final Map.Entry<String, InMemoryCounter> entry : counters.entrySet()) {\n+            message.append('\\n')\n+                .append(entry.getKey())\n+                .append(\": \")\n+                .append(entry.getValue().value());\n+        }\n+        Logger.info(this.metrics, message.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3MTgyNw=="}, "originalCommit": {"oid": "d198f4e8a4828eff80946f33bb81b98348783d00"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwMDY5NA==", "bodyText": "@olegmoz There is no overriden toString method on InMemoryMetrics. I propose to use just Logger.info(message.toString()).", "url": "https://github.com/artipie/artipie/pull/268#discussion_r450800694", "createdAt": "2020-07-07T11:40:27Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/metrics/memory/MetricsLogPublisher.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import com.jcabi.log.Logger;\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Periodic publisher of {@link InMemoryMetrics} to log.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Support gauge publishing in `MetricsLogPublisher`.\n+ *  `InMemoryMetrics` contain gauges along counters.\n+ *  Gauges should be published the same way as counters.\n+ *  Should be done after https://github.com/artipie/artipie/issues/267\n+ */\n+public class MetricsLogPublisher {\n+\n+    /**\n+     * Metrics for publishing.\n+     */\n+    private final InMemoryMetrics metrics;\n+\n+    /**\n+     * Period.\n+     */\n+    private final Duration period;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param metrics Metrics for publishing.\n+     * @param period Period.\n+     */\n+    public MetricsLogPublisher(final InMemoryMetrics metrics, final Duration period) {\n+        this.metrics = metrics;\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Start periodic publishing.\n+     */\n+    public void start() {\n+        final long millis = this.period.toMillis();\n+        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(\n+            this::publish,\n+            millis,\n+            millis,\n+            TimeUnit.MILLISECONDS\n+        );\n+    }\n+\n+    /**\n+     * Publish metrics to log.\n+     */\n+    private void publish() {\n+        final Map<String, InMemoryCounter> counters = new TreeMap<>(this.metrics.counters());\n+        final StringBuilder message = new StringBuilder(\"Counters:\");\n+        for (final Map.Entry<String, InMemoryCounter> entry : counters.entrySet()) {\n+            message.append('\\n')\n+                .append(entry.getKey())\n+                .append(\": \")\n+                .append(entry.getValue().value());\n+        }\n+        Logger.info(this.metrics, message.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3MTgyNw=="}, "originalCommit": {"oid": "d198f4e8a4828eff80946f33bb81b98348783d00"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkzNzEwMQ==", "bodyText": "@olegmoz forget about it, this is jcabi logger I though it was slf4j", "url": "https://github.com/artipie/artipie/pull/268#discussion_r450937101", "createdAt": "2020-07-07T15:06:33Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/metrics/memory/MetricsLogPublisher.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import com.jcabi.log.Logger;\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Periodic publisher of {@link InMemoryMetrics} to log.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Support gauge publishing in `MetricsLogPublisher`.\n+ *  `InMemoryMetrics` contain gauges along counters.\n+ *  Gauges should be published the same way as counters.\n+ *  Should be done after https://github.com/artipie/artipie/issues/267\n+ */\n+public class MetricsLogPublisher {\n+\n+    /**\n+     * Metrics for publishing.\n+     */\n+    private final InMemoryMetrics metrics;\n+\n+    /**\n+     * Period.\n+     */\n+    private final Duration period;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param metrics Metrics for publishing.\n+     * @param period Period.\n+     */\n+    public MetricsLogPublisher(final InMemoryMetrics metrics, final Duration period) {\n+        this.metrics = metrics;\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Start periodic publishing.\n+     */\n+    public void start() {\n+        final long millis = this.period.toMillis();\n+        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(\n+            this::publish,\n+            millis,\n+            millis,\n+            TimeUnit.MILLISECONDS\n+        );\n+    }\n+\n+    /**\n+     * Publish metrics to log.\n+     */\n+    private void publish() {\n+        final Map<String, InMemoryCounter> counters = new TreeMap<>(this.metrics.counters());\n+        final StringBuilder message = new StringBuilder(\"Counters:\");\n+        for (final Map.Entry<String, InMemoryCounter> entry : counters.entrySet()) {\n+            message.append('\\n')\n+                .append(entry.getKey())\n+                .append(\": \")\n+                .append(entry.getValue().value());\n+        }\n+        Logger.info(this.metrics, message.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3MTgyNw=="}, "originalCommit": {"oid": "d198f4e8a4828eff80946f33bb81b98348783d00"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDQwNjM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/metrics/memory/MetricsLogPublisher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDo0MTo0N1rOGt48CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTowNjo0NFrOGt5sPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3MTk3Nw==", "bodyText": "@olegmoz add puzzle for testing this class", "url": "https://github.com/artipie/artipie/pull/268#discussion_r450771977", "createdAt": "2020-07-07T10:41:47Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/metrics/memory/MetricsLogPublisher.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import com.jcabi.log.Logger;\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Periodic publisher of {@link InMemoryMetrics} to log.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Support gauge publishing in `MetricsLogPublisher`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d198f4e8a4828eff80946f33bb81b98348783d00"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4NDMxNg==", "bodyText": "@Vatavuk added", "url": "https://github.com/artipie/artipie/pull/268#discussion_r450784316", "createdAt": "2020-07-07T11:06:44Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/metrics/memory/MetricsLogPublisher.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import com.jcabi.log.Logger;\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Periodic publisher of {@link InMemoryMetrics} to log.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Support gauge publishing in `MetricsLogPublisher`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3MTk3Nw=="}, "originalCommit": {"oid": "d198f4e8a4828eff80946f33bb81b98348783d00"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2228, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}