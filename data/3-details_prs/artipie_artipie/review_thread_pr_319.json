{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NDI3OTg2", "number": 319, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOToyODoxNFrOEOLb8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTozMjozNlrOEOLiMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzAyODk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/metrics/MetricsFromConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOToyODoxNFrOGxLv0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOToyODoxNFrOGxLv0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIyNTg3NA==", "bodyText": "@olenagerasimova I think it would be better to change method signature here to return concrete type InMemoryMetrics. It safer to return concrete class than to cast it in VertxMain. If we change metrics implementation here than VertxMain will fall apart.", "url": "https://github.com/artipie/artipie/pull/319#discussion_r454225874", "createdAt": "2020-07-14T09:28:14Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/metrics/MetricsFromConfig.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics;\n+\n+import com.amihaiemil.eoyaml.YamlMapping;\n+import com.artipie.metrics.memory.InMemoryMetrics;\n+import java.time.Duration;\n+import java.util.Optional;\n+\n+/**\n+ * Metrics from config.\n+ * @since 0.9\n+ */\n+public final class MetricsFromConfig {\n+\n+    /**\n+     * Metrics section from settings.\n+     */\n+    private final YamlMapping settings;\n+\n+    /**\n+     * Ctor.\n+     * @param metrics Yaml settings\n+     */\n+    public MetricsFromConfig(final YamlMapping metrics) {\n+        this.settings = metrics;\n+    }\n+\n+    /**\n+     * Returns {@link Metrics} instance according to configuration.\n+     * @return Instance of {@link Metrics}.\n+     */\n+    public Metrics metrics() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f8bc8626495edd6cf0aa67927aa461ce2bcec70"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzA0MDExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/metrics/MetricsFromConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTozMToxNlrOGxL2sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTozMToxNlrOGxL2sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIyNzYzNQ==", "bodyText": "@olenagerasimova inline this variable", "url": "https://github.com/artipie/artipie/pull/319#discussion_r454227635", "createdAt": "2020-07-14T09:31:16Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/metrics/MetricsFromConfig.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics;\n+\n+import com.amihaiemil.eoyaml.YamlMapping;\n+import com.artipie.metrics.memory.InMemoryMetrics;\n+import java.time.Duration;\n+import java.util.Optional;\n+\n+/**\n+ * Metrics from config.\n+ * @since 0.9\n+ */\n+public final class MetricsFromConfig {\n+\n+    /**\n+     * Metrics section from settings.\n+     */\n+    private final YamlMapping settings;\n+\n+    /**\n+     * Ctor.\n+     * @param metrics Yaml settings\n+     */\n+    public MetricsFromConfig(final YamlMapping metrics) {\n+        this.settings = metrics;\n+    }\n+\n+    /**\n+     * Returns {@link Metrics} instance according to configuration.\n+     * @return Instance of {@link Metrics}.\n+     */\n+    public Metrics metrics() {\n+        return Optional.ofNullable(this.settings.string(\"type\"))\n+            .<Metrics>map(\n+                type -> {\n+                    if (!\"log\".equals(type)) {\n+                        throw new IllegalArgumentException(\n+                            String.format(\"Unsupported metrics type: %s\", type)\n+                        );\n+                    }\n+                    return new InMemoryMetrics();\n+                }\n+            ).orElseThrow(() -> new IllegalArgumentException(\"Metrics type is not specified\"));\n+    }\n+\n+    /**\n+     * Publishing interval.\n+     * @return Interval\n+     */\n+    public Duration interval() {\n+        final Duration def = Duration.ofSeconds(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f8bc8626495edd6cf0aa67927aa461ce2bcec70"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzA0NDk3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/metrics/MetricsFromConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTozMjozNlrOGxL5sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTozMjozNlrOGxL5sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIyODQwMg==", "bodyText": "@olenagerasimova add one test that will check default duration type.", "url": "https://github.com/artipie/artipie/pull/319#discussion_r454228402", "createdAt": "2020-07-14T09:32:36Z", "author": {"login": "Vatavuk"}, "path": "src/test/java/com/artipie/metrics/MetricsFromConfigTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.metrics.memory.InMemoryMetrics;\n+import java.time.temporal.ChronoUnit;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.AllOf;\n+import org.hamcrest.core.StringContains;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.MatcherOf;\n+\n+/**\n+ * Test for {@link MetricsFromConfig}.\n+ *\n+ * @since 0.9\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+class MetricsFromConfigTest {\n+\n+    @Test\n+    void failsIfTypeIsNotSpecified() {\n+        MatcherAssert.assertThat(\n+            Assertions.assertThrows(\n+                IllegalArgumentException.class,\n+                () -> new MetricsFromConfig(\n+                    Yaml.createYamlMappingBuilder().add(\"three\", \"four\").build()\n+                ).metrics()\n+            ).getMessage(),\n+            new StringContains(\"Metrics type is not specified\")\n+        );\n+    }\n+\n+    @Test\n+    void failsIfTypeIsUnsupported() {\n+        MatcherAssert.assertThat(\n+            Assertions.assertThrows(\n+                IllegalArgumentException.class,\n+                () -> new MetricsFromConfig(\n+                    Yaml.createYamlMappingBuilder().add(\"type\", \"any\").build()\n+                ).metrics()\n+            ).getMessage(),\n+            new StringContains(\"Unsupported metrics type\")\n+        );\n+    }\n+\n+    @Test\n+    void parsesSettings() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f8bc8626495edd6cf0aa67927aa461ce2bcec70"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2260, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}