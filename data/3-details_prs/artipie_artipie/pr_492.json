{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNjcwODM4", "number": 492, "title": "#444 - permissions API skeleton", "bodyText": "Part of #444\nCreated skeleton to implement permissions API.", "createdAt": "2020-08-24T17:46:09Z", "url": "https://github.com/artipie/artipie/pull/492", "merged": true, "mergeCommit": {"oid": "6abf31a5a47222f022d171f53e864b847853657b"}, "closed": true, "closedAt": "2020-08-25T08:41:36Z", "author": {"login": "olenagerasimova"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCGStagH2gAyNDcyNjcwODM4OjM0YjA5YjM0Nzc3ODA1NGU2ZGUxNjA0NDI5MjVlZmZjYjllMDY5ZWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCTHcwgFqTQ3NDI2Mjc4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "34b09b347778054e6de160442925effcb9e069ef", "author": {"user": {"login": "olenagerasimova", "name": "Alena"}}, "url": "https://github.com/artipie/artipie/commit/34b09b347778054e6de160442925effcb9e069ef", "committedDate": "2020-08-24T17:44:57Z", "message": "#444 - permissions API skeleton"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MTY3NzQx", "url": "https://github.com/artipie/artipie/pull/492#pullrequestreview-474167741", "createdAt": "2020-08-25T06:24:10Z", "commit": {"oid": "34b09b347778054e6de160442925effcb9e069ef"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjoyNDoxMFrOHGJOMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjozMToxOFrOHGJZxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNDU5Mg==", "bodyText": "@olenagerasimova I'd suggest to extract individual repository permissions class from this one, so we can avoid complex methods like addUpdate(String, String, String) and return type like CompletionStage<Map<String, List<String>>>. What I suggest is something like this:\ninterfaces RepoPermissionsRegistry {\n  List<RepoPermissions> list();\n  RepoPermissions get(String name);\n  ...\n}\ninterfaces RepoPermissions {\n  void add(String username, String permission);\n  ...\n}\nWhat do you think?", "url": "https://github.com/artipie/artipie/pull/492#discussion_r476204592", "createdAt": "2020-08-25T06:24:10Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/RepoPermissions.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Repository permissions settings.\n+ * @since 0.10\n+ */\n+public interface RepoPermissions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34b09b347778054e6de160442925effcb9e069ef"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNjE2MQ==", "bodyText": "@olenagerasimova if I understand correctly, these methods need to be implemented. Am I right? It would be way more obvious to throw UnsupporetedOperationException, as it is common contract for not yet implemented methods. null value may look like a normal result and be propagated too far breaking the fail-fast principle.\nSame goes for not implemented slices.", "url": "https://github.com/artipie/artipie/pull/492#discussion_r476206161", "createdAt": "2020-08-25T06:28:06Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/RepoPermissions.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Repository permissions settings.\n+ * @since 0.10\n+ */\n+public interface RepoPermissions {\n+\n+    /**\n+     * Artipie repositories list.\n+     * @return Repository names list\n+     */\n+    CompletionStage<List<String>> repositories();\n+\n+    /**\n+     * Deletes all permissions for repository.\n+     * @param repo Repository name\n+     * @return Completion remove action\n+     */\n+    CompletionStage<Void> remove(String repo);\n+\n+    /**\n+     * Adds or updates repository permission.\n+     * @param repo Repository name\n+     * @param username Username\n+     * @param permission Permission name\n+     * @return Completion action\n+     */\n+    CompletionStage<Void> addUpdate(String repo, String username, String permission);\n+\n+    /**\n+     * Get repository permissions settings.\n+     * @param repo Repository name\n+     * @return Completion action with map with users and permissions\n+     */\n+    CompletionStage<Map<String, List<String>>> get(String repo);\n+\n+    /**\n+     * {@link RepoPermissions} from Artipie settings.\n+     * @since 0.10\n+     */\n+    final class FromSettings implements RepoPermissions {\n+\n+        /**\n+         * Artipie settings.\n+         */\n+        private final Settings settings;\n+\n+        /**\n+         * Ctor.\n+         * @param settings Artipie settings\n+         */\n+        public FromSettings(final Settings settings) {\n+            this.settings = settings;\n+        }\n+\n+        @Override\n+        public CompletionStage<List<String>> repositories() {\n+            return this.storage().list(Key.ROOT)\n+                .thenApply(\n+                    list -> list.stream()\n+                        .map(Key::string)\n+                        .filter(key -> key.contains(\"yaml\"))\n+                        .map(key -> key.replace(\".yaml\", \"\"))\n+                        .collect(Collectors.toList())\n+            );\n+        }\n+\n+        @Override\n+        public CompletionStage<Void> remove(final String repo) {\n+            return null;\n+        }\n+\n+        @Override\n+        public CompletionStage<Void> addUpdate(final String repo, final String username,\n+            final String permission) {\n+            return null;\n+        }\n+\n+        @Override\n+        public CompletionStage<Map<String, List<String>>> get(final String repo) {\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34b09b347778054e6de160442925effcb9e069ef"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNjk0Ng==", "bodyText": "@olenagerasimova the comment looks wrong, please update", "url": "https://github.com/artipie/artipie/pull/492#discussion_r476206946", "createdAt": "2020-08-25T06:30:00Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/api/artifactory/AddUpdatePermissionSlice.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.api.artifactory;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Artifactory `GET /api/security/permissions/{target}` endpoint, returns json with\n+ * permissions (= repository) information.\n+ * @since 0.10\n+ * @todo #444:30min Implement GetPermissionSlice return repository permissions.\n+ *  First, implement and test RepoPermissions.FromSettings#addUpdate(java.lang.String), then use\n+ *  this method in this slice. Request json format can be found\n+ *  https://www.jfrog.com/confluence/display/rtf/artifactory+rest+api, we should obtain information\n+ *  from `repo.actions.users` fields.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34b09b347778054e6de160442925effcb9e069ef"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNzU1OA==", "bodyText": "@olenagerasimova Content.EMPTY was added in ASTO recently, it would make code less verbose if used here", "url": "https://github.com/artipie/artipie/pull/492#discussion_r476207558", "createdAt": "2020-08-25T06:31:18Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/RepoPermissionsFromSettingsTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test for {@link RepoPermissions.FromSettings}.\n+ * @since 0.10\n+ */\n+class RepoPermissionsFromSettingsTest {\n+\n+    @Test\n+    void returnsRepoList() {\n+        final Storage storage = new InMemoryStorage();\n+        storage.save(new Key.From(\"one.yaml\"), new Content.From(new byte[]{})).join();\n+        storage.save(new Key.From(\"two.yaml\"), new Content.From(new byte[]{})).join();\n+        storage.save(new Key.From(\"abc\"), new Content.From(new byte[]{})).join();\n+        storage.save(new Key.From(\"three.yaml\"), new Content.From(new byte[]{})).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34b09b347778054e6de160442925effcb9e069ef"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88ee370fc3c8df6d8f0d9efd624ec15581dba89b", "author": {"user": {"login": "olenagerasimova", "name": "Alena"}}, "url": "https://github.com/artipie/artipie/commit/88ee370fc3c8df6d8f0d9efd624ec15581dba89b", "committedDate": "2020-08-25T07:03:56Z", "message": "#444 - CR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MTk5Nzc1", "url": "https://github.com/artipie/artipie/pull/492#pullrequestreview-474199775", "createdAt": "2020-08-25T07:20:46Z", "commit": {"oid": "88ee370fc3c8df6d8f0d9efd624ec15581dba89b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzoyMDo0NlrOHGKzvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzoyMDo0NlrOHGKzvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIzMDU4OQ==", "bodyText": "@olenagerasimova GET method here looks wrong", "url": "https://github.com/artipie/artipie/pull/492#discussion_r476230589", "createdAt": "2020-08-25T07:20:46Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/api/artifactory/AddUpdatePermissionSlice.java", "diffHunk": "@@ -33,8 +33,8 @@\n  * Artifactory `GET /api/security/permissions/{target}` endpoint, returns json with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88ee370fc3c8df6d8f0d9efd624ec15581dba89b"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5758aca1ccc9f164aaa2c7e44647f7d3ac9383f9", "author": {"user": {"login": "olenagerasimova", "name": "Alena"}}, "url": "https://github.com/artipie/artipie/commit/5758aca1ccc9f164aaa2c7e44647f7d3ac9383f9", "committedDate": "2020-08-25T08:12:20Z", "message": "#444 - javadoc corrected"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ea268038f050ef4db79840a0bd1b591c2e8aee7", "author": {"user": {"login": "olenagerasimova", "name": "Alena"}}, "url": "https://github.com/artipie/artipie/commit/3ea268038f050ef4db79840a0bd1b591c2e8aee7", "committedDate": "2020-08-25T08:21:57Z", "message": "Merge branch 'master' into 444-perms-skeleton"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MjYyNzgy", "url": "https://github.com/artipie/artipie/pull/492#pullrequestreview-474262782", "createdAt": "2020-08-25T08:41:25Z", "commit": {"oid": "3ea268038f050ef4db79840a0bd1b591c2e8aee7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3500, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}