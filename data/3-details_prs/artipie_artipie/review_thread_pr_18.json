{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNjQwNDYw", "number": 18, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo0MzoxNlrODfTxvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODo0MzozOVrODfdZCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTU2NDc2OnYy", "diffSide": "LEFT", "path": "LICENSE.txt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo0MzoxNlrOFo8JDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo0MzoxNlrOFo8JDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MjcxNg==", "bodyText": "@g4s8 I'm just curious why should we change the license text?", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378472716", "createdAt": "2020-02-12T19:43:16Z", "author": {"login": "iakunin"}, "path": "LICENSE.txt", "diffHunk": "@@ -1,4 +1,4 @@\n-The MIT License (MIT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTU3MDQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/Pie.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo0NDo1OFrOFo8MvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo0NDo1OFrOFo8MvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MzY2MA==", "bodyText": "@g4s8 just a typo: SliceStub should be instead of StupSlice.", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378473660", "createdAt": "2020-02-12T19:44:58Z", "author": {"login": "iakunin"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now StupSlice", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mjc4MDg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/Pie.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNTo1NDo1NlrOFpHzQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODo0Mjo1OFrOFpLIIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2Mzc0NQ==", "bodyText": "@g4s8 as for me it's not absolutely clear, why we should return http-200 in response to \"*\" request.", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378663745", "createdAt": "2020-02-13T05:54:56Z", "author": {"login": "iakunin"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now StupSlice\n+ *  is used instead of real slice implementation.\n+ *  We should parse publisher of bytes into yaml\n+ *  config, construct ASTO from this config and find\n+ *  corresponding slice implementation by type parameter.\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+public final class Pie implements Slice {\n+\n+    /**\n+     * Configuration storage.\n+     */\n+    private final Storage cfg;\n+\n+    /**\n+     * Ctro.\n+     * @param cfg Configuration\n+     */\n+    public Pie(final Storage cfg) {\n+        this.cfg = cfg;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final URI uri;\n+        try {\n+            uri = new RequestLineFrom(line).uri();\n+        } catch (final IOException err) {\n+            return new RsWithStatus(400);\n+        }\n+        if (uri.getPath().equals(\"*\")) {\n+            return new RsWithStatus(200);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5NjY0Nw==", "bodyText": "@iakunin see https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html\n\nThe asterisk \"*\" means that the request does not apply to a particular resource, but to the server itself, and is only allowed when the method used does not necessarily apply to a resource.\n\nSo we need to handle this URL somehow on the top-level of the service", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378696647", "createdAt": "2020-02-13T07:48:43Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now StupSlice\n+ *  is used instead of real slice implementation.\n+ *  We should parse publisher of bytes into yaml\n+ *  config, construct ASTO from this config and find\n+ *  corresponding slice implementation by type parameter.\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+public final class Pie implements Slice {\n+\n+    /**\n+     * Configuration storage.\n+     */\n+    private final Storage cfg;\n+\n+    /**\n+     * Ctro.\n+     * @param cfg Configuration\n+     */\n+    public Pie(final Storage cfg) {\n+        this.cfg = cfg;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final URI uri;\n+        try {\n+            uri = new RequestLineFrom(line).uri();\n+        } catch (final IOException err) {\n+            return new RsWithStatus(400);\n+        }\n+        if (uri.getPath().equals(\"*\")) {\n+            return new RsWithStatus(200);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2Mzc0NQ=="}, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcxMzk0NA==", "bodyText": "@g4s8 I've already inspected http specification, thanks. My question was more about why exactly 200? Why not 400, for example?", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378713944", "createdAt": "2020-02-13T08:33:44Z", "author": {"login": "iakunin"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now StupSlice\n+ *  is used instead of real slice implementation.\n+ *  We should parse publisher of bytes into yaml\n+ *  config, construct ASTO from this config and find\n+ *  corresponding slice implementation by type parameter.\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+public final class Pie implements Slice {\n+\n+    /**\n+     * Configuration storage.\n+     */\n+    private final Storage cfg;\n+\n+    /**\n+     * Ctro.\n+     * @param cfg Configuration\n+     */\n+    public Pie(final Storage cfg) {\n+        this.cfg = cfg;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final URI uri;\n+        try {\n+            uri = new RequestLineFrom(line).uri();\n+        } catch (final IOException err) {\n+            return new RsWithStatus(400);\n+        }\n+        if (uri.getPath().equals(\"*\")) {\n+            return new RsWithStatus(200);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2Mzc0NQ=="}, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcxODI0MA==", "bodyText": "@g4s8 as I can see below: it's just a stub implementation and it could be fixed later.", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378718240", "createdAt": "2020-02-13T08:42:58Z", "author": {"login": "iakunin"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now StupSlice\n+ *  is used instead of real slice implementation.\n+ *  We should parse publisher of bytes into yaml\n+ *  config, construct ASTO from this config and find\n+ *  corresponding slice implementation by type parameter.\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+public final class Pie implements Slice {\n+\n+    /**\n+     * Configuration storage.\n+     */\n+    private final Storage cfg;\n+\n+    /**\n+     * Ctro.\n+     * @param cfg Configuration\n+     */\n+    public Pie(final Storage cfg) {\n+        this.cfg = cfg;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final URI uri;\n+        try {\n+            uri = new RequestLineFrom(line).uri();\n+        } catch (final IOException err) {\n+            return new RsWithStatus(400);\n+        }\n+        if (uri.getPath().equals(\"*\")) {\n+            return new RsWithStatus(200);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2Mzc0NQ=="}, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mjc5Mjk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/Pie.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNjowMjowN1rOFpH6Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODozNDo0MFrOFpK4_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2NTU0Nw==", "bodyText": "@g4s8 the same here: it's not completely clear, why we should return http-200 in this case.", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378665547", "createdAt": "2020-02-13T06:02:07Z", "author": {"login": "iakunin"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now StupSlice\n+ *  is used instead of real slice implementation.\n+ *  We should parse publisher of bytes into yaml\n+ *  config, construct ASTO from this config and find\n+ *  corresponding slice implementation by type parameter.\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+public final class Pie implements Slice {\n+\n+    /**\n+     * Configuration storage.\n+     */\n+    private final Storage cfg;\n+\n+    /**\n+     * Ctro.\n+     * @param cfg Configuration\n+     */\n+    public Pie(final Storage cfg) {\n+        this.cfg = cfg;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final URI uri;\n+        try {\n+            uri = new RequestLineFrom(line).uri();\n+        } catch (final IOException err) {\n+            return new RsWithStatus(400);\n+        }\n+        if (uri.getPath().equals(\"*\")) {\n+            return new RsWithStatus(200);\n+        }\n+        final String[] path = uri.getPath().split(\"/\");\n+        if (path.length == 0) {\n+            return new RsWithStatus(200);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5Njk4NA==", "bodyText": "@iakunin it's a stub, we don't know exactly what we need to return for root resource request, when we specify the requirements we'll update this response.", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378696984", "createdAt": "2020-02-13T07:49:52Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now StupSlice\n+ *  is used instead of real slice implementation.\n+ *  We should parse publisher of bytes into yaml\n+ *  config, construct ASTO from this config and find\n+ *  corresponding slice implementation by type parameter.\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+public final class Pie implements Slice {\n+\n+    /**\n+     * Configuration storage.\n+     */\n+    private final Storage cfg;\n+\n+    /**\n+     * Ctro.\n+     * @param cfg Configuration\n+     */\n+    public Pie(final Storage cfg) {\n+        this.cfg = cfg;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final URI uri;\n+        try {\n+            uri = new RequestLineFrom(line).uri();\n+        } catch (final IOException err) {\n+            return new RsWithStatus(400);\n+        }\n+        if (uri.getPath().equals(\"*\")) {\n+            return new RsWithStatus(200);\n+        }\n+        final String[] path = uri.getPath().split(\"/\");\n+        if (path.length == 0) {\n+            return new RsWithStatus(200);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2NTU0Nw=="}, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcxNDM2NQ==", "bodyText": "@g4s8 now I got it, thanks.", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378714365", "createdAt": "2020-02-13T08:34:40Z", "author": {"login": "iakunin"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now StupSlice\n+ *  is used instead of real slice implementation.\n+ *  We should parse publisher of bytes into yaml\n+ *  config, construct ASTO from this config and find\n+ *  corresponding slice implementation by type parameter.\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+public final class Pie implements Slice {\n+\n+    /**\n+     * Configuration storage.\n+     */\n+    private final Storage cfg;\n+\n+    /**\n+     * Ctro.\n+     * @param cfg Configuration\n+     */\n+    public Pie(final Storage cfg) {\n+        this.cfg = cfg;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final URI uri;\n+        try {\n+            uri = new RequestLineFrom(line).uri();\n+        } catch (final IOException err) {\n+            return new RsWithStatus(400);\n+        }\n+        if (uri.getPath().equals(\"*\")) {\n+            return new RsWithStatus(200);\n+        }\n+        final String[] path = uri.getPath().split(\"/\");\n+        if (path.length == 0) {\n+            return new RsWithStatus(200);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2NTU0Nw=="}, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mjc5NTAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/Pie.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNjowMzoyOVrOFpH7jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTowMjo1MVrOFpPpaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2NTg2OQ==", "bodyText": "@g4s8 I cannot figure out the case when split returns array with zero length. Even \"\".split(\"/\") returns array with one item (empty string).", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378665869", "createdAt": "2020-02-13T06:03:29Z", "author": {"login": "iakunin"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now StupSlice\n+ *  is used instead of real slice implementation.\n+ *  We should parse publisher of bytes into yaml\n+ *  config, construct ASTO from this config and find\n+ *  corresponding slice implementation by type parameter.\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+public final class Pie implements Slice {\n+\n+    /**\n+     * Configuration storage.\n+     */\n+    private final Storage cfg;\n+\n+    /**\n+     * Ctro.\n+     * @param cfg Configuration\n+     */\n+    public Pie(final Storage cfg) {\n+        this.cfg = cfg;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final URI uri;\n+        try {\n+            uri = new RequestLineFrom(line).uri();\n+        } catch (final IOException err) {\n+            return new RsWithStatus(400);\n+        }\n+        if (uri.getPath().equals(\"*\")) {\n+            return new RsWithStatus(200);\n+        }\n+        final String[] path = uri.getPath().split(\"/\");\n+        if (path.length == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc5MjI5Ng==", "bodyText": "@iakunin it's a strange split method behavior, e.g. if you check \"/\".split(\"/\") it will return empty array, but if you check \"\".split(\"/\") it will be array with empty string. I added additional condition to handle both cases", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378792296", "createdAt": "2020-02-13T11:02:51Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now StupSlice\n+ *  is used instead of real slice implementation.\n+ *  We should parse publisher of bytes into yaml\n+ *  config, construct ASTO from this config and find\n+ *  corresponding slice implementation by type parameter.\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+public final class Pie implements Slice {\n+\n+    /**\n+     * Configuration storage.\n+     */\n+    private final Storage cfg;\n+\n+    /**\n+     * Ctro.\n+     * @param cfg Configuration\n+     */\n+    public Pie(final Storage cfg) {\n+        this.cfg = cfg;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final URI uri;\n+        try {\n+            uri = new RequestLineFrom(line).uri();\n+        } catch (final IOException err) {\n+            return new RsWithStatus(400);\n+        }\n+        if (uri.getPath().equals(\"*\")) {\n+            return new RsWithStatus(200);\n+        }\n+        final String[] path = uri.getPath().split(\"/\");\n+        if (path.length == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2NTg2OQ=="}, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjgwMTMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/Pie.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNjowNzozNFrOFpH_RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNjowNzozNFrOFpH_RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2NjgyMQ==", "bodyText": "@g4s8 apparently here should be since 1.0.", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378666821", "createdAt": "2020-02-13T06:07:34Z", "author": {"login": "iakunin"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjgxNzMyOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNjoxNjo1NFrOFpIInA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTowMToyMVrOFpPmxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2OTIxMg==", "bodyText": "@g4s8 maybe we should add another puzzle for starting Artipie server?", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378669212", "createdAt": "2020-02-13T06:16:54Z", "author": {"login": "iakunin"}, "path": "README.md", "diffHunk": "@@ -13,7 +13,24 @@\n \n This is a simple experimental binary artifacts manager.\n \n-TBD...\n+## How does it work\n+\n+Artipie uses external server implementation to start itself,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc5MTYyMQ==", "bodyText": "@iakunin we didn't decide how exactly the server will be started, I think it will be don in scope of another ticket", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378791621", "createdAt": "2020-02-13T11:01:21Z", "author": {"login": "g4s8"}, "path": "README.md", "diffHunk": "@@ -13,7 +13,24 @@\n \n This is a simple experimental binary artifacts manager.\n \n-TBD...\n+## How does it work\n+\n+Artipie uses external server implementation to start itself,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2OTIxMg=="}, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjkyNDM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/Pie.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNzoxNDo0NVrOFpJHhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODo0MToxOFrOFpLFCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY4NTMxOQ==", "bodyText": "It's a bad idea to use try/catch for flow control", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378685319", "createdAt": "2020-02-13T07:14:45Z", "author": {"login": "Sammers21"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now StupSlice\n+ *  is used instead of real slice implementation.\n+ *  We should parse publisher of bytes into yaml\n+ *  config, construct ASTO from this config and find\n+ *  corresponding slice implementation by type parameter.\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+public final class Pie implements Slice {\n+\n+    /**\n+     * Configuration storage.\n+     */\n+    private final Storage cfg;\n+\n+    /**\n+     * Ctro.\n+     * @param cfg Configuration\n+     */\n+    public Pie(final Storage cfg) {\n+        this.cfg = cfg;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final URI uri;\n+        try {\n+            uri = new RequestLineFrom(line).uri();\n+        } catch (final IOException err) {\n+            return new RsWithStatus(400);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcwNTM2OQ==", "bodyText": "@Sammers21 it's not actually, it's a good practice to handle exceptions on the root off application layer, this class is a root in this case, so we need to handle all exceptions here.", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378705369", "createdAt": "2020-02-13T08:13:40Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now StupSlice\n+ *  is used instead of real slice implementation.\n+ *  We should parse publisher of bytes into yaml\n+ *  config, construct ASTO from this config and find\n+ *  corresponding slice implementation by type parameter.\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+public final class Pie implements Slice {\n+\n+    /**\n+     * Configuration storage.\n+     */\n+    private final Storage cfg;\n+\n+    /**\n+     * Ctro.\n+     * @param cfg Configuration\n+     */\n+    public Pie(final Storage cfg) {\n+        this.cfg = cfg;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final URI uri;\n+        try {\n+            uri = new RequestLineFrom(line).uri();\n+        } catch (final IOException err) {\n+            return new RsWithStatus(400);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY4NTMxOQ=="}, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcxNzQ0OQ==", "bodyText": "Despite being at the root level, you are catching in multiple places", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378717449", "createdAt": "2020-02-13T08:41:18Z", "author": {"login": "Sammers21"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now StupSlice\n+ *  is used instead of real slice implementation.\n+ *  We should parse publisher of bytes into yaml\n+ *  config, construct ASTO from this config and find\n+ *  corresponding slice implementation by type parameter.\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+public final class Pie implements Slice {\n+\n+    /**\n+     * Configuration storage.\n+     */\n+    private final Storage cfg;\n+\n+    /**\n+     * Ctro.\n+     * @param cfg Configuration\n+     */\n+    public Pie(final Storage cfg) {\n+        this.cfg = cfg;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final URI uri;\n+        try {\n+            uri = new RequestLineFrom(line).uri();\n+        } catch (final IOException err) {\n+            return new RsWithStatus(400);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY4NTMxOQ=="}, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjkyOTcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/Pie.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNzoxNzozMFrOFpJKqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNzo1ODozOFrOFpKAuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY4NjEyMg==", "bodyText": "This should be a part of http module", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378686122", "createdAt": "2020-02-13T07:17:30Z", "author": {"login": "Sammers21"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now StupSlice\n+ *  is used instead of real slice implementation.\n+ *  We should parse publisher of bytes into yaml\n+ *  config, construct ASTO from this config and find\n+ *  corresponding slice implementation by type parameter.\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+public final class Pie implements Slice {\n+\n+    /**\n+     * Configuration storage.\n+     */\n+    private final Storage cfg;\n+\n+    /**\n+     * Ctro.\n+     * @param cfg Configuration\n+     */\n+    public Pie(final Storage cfg) {\n+        this.cfg = cfg;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final URI uri;\n+        try {\n+            uri = new RequestLineFrom(line).uri();\n+        } catch (final IOException err) {\n+            return new RsWithStatus(400);\n+        }\n+        if (uri.getPath().equals(\"*\")) {\n+            return new RsWithStatus(200);\n+        }\n+        final String[] path = uri.getPath().split(\"/\");\n+        if (path.length == 0) {\n+            return new RsWithStatus(200);\n+        }\n+        final String repo = path[0];\n+        return new AsyncSlice(\n+            this.cfg.value(new Key.From(repo)).thenApply(something -> new SliceStub())\n+        ).response(line, headers, body);\n+    }\n+\n+    /**\n+     * Slice stub.\n+     * @since 1.0\n+     */\n+    private static final class SliceStub implements Slice {\n+\n+        @Override\n+        public Response response(final String line,\n+            final Iterable<Entry<String, String>> headers,\n+            final Publisher<ByteBuffer> body) {\n+            return new RsWithStatus(404);\n+        }\n+    }\n+\n+    /**\n+     * Async slice.\n+     * @since 1.0\n+     */\n+    private static final class AsyncSlice implements Slice {\n+\n+        /**\n+         * Async slice.\n+         */\n+        private final CompletionStage<Slice> slice;\n+\n+        /**\n+         * Ctor.\n+         * @param slice Async slice.\n+         */\n+        AsyncSlice(final CompletionStage<Slice> slice) {\n+            this.slice = slice;\n+        }\n+\n+        @Override\n+        public Response response(final String line,\n+            final Iterable<Entry<String, String>> headers,\n+            final Publisher<ByteBuffer> body) {\n+            return new RsAsync(\n+                this.slice.thenApply(target -> target.response(line, headers, body))\n+            );\n+        }\n+    }\n+\n+    /**\n+     * Async response.\n+     * @since 1.0\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY4NjY4MQ==", "bodyText": "The same with SliceStub", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378686681", "createdAt": "2020-02-13T07:19:20Z", "author": {"login": "Sammers21"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now StupSlice\n+ *  is used instead of real slice implementation.\n+ *  We should parse publisher of bytes into yaml\n+ *  config, construct ASTO from this config and find\n+ *  corresponding slice implementation by type parameter.\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+public final class Pie implements Slice {\n+\n+    /**\n+     * Configuration storage.\n+     */\n+    private final Storage cfg;\n+\n+    /**\n+     * Ctro.\n+     * @param cfg Configuration\n+     */\n+    public Pie(final Storage cfg) {\n+        this.cfg = cfg;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final URI uri;\n+        try {\n+            uri = new RequestLineFrom(line).uri();\n+        } catch (final IOException err) {\n+            return new RsWithStatus(400);\n+        }\n+        if (uri.getPath().equals(\"*\")) {\n+            return new RsWithStatus(200);\n+        }\n+        final String[] path = uri.getPath().split(\"/\");\n+        if (path.length == 0) {\n+            return new RsWithStatus(200);\n+        }\n+        final String repo = path[0];\n+        return new AsyncSlice(\n+            this.cfg.value(new Key.From(repo)).thenApply(something -> new SliceStub())\n+        ).response(line, headers, body);\n+    }\n+\n+    /**\n+     * Slice stub.\n+     * @since 1.0\n+     */\n+    private static final class SliceStub implements Slice {\n+\n+        @Override\n+        public Response response(final String line,\n+            final Iterable<Entry<String, String>> headers,\n+            final Publisher<ByteBuffer> body) {\n+            return new RsWithStatus(404);\n+        }\n+    }\n+\n+    /**\n+     * Async slice.\n+     * @since 1.0\n+     */\n+    private static final class AsyncSlice implements Slice {\n+\n+        /**\n+         * Async slice.\n+         */\n+        private final CompletionStage<Slice> slice;\n+\n+        /**\n+         * Ctor.\n+         * @param slice Async slice.\n+         */\n+        AsyncSlice(final CompletionStage<Slice> slice) {\n+            this.slice = slice;\n+        }\n+\n+        @Override\n+        public Response response(final String line,\n+            final Iterable<Entry<String, String>> headers,\n+            final Publisher<ByteBuffer> body) {\n+            return new RsAsync(\n+                this.slice.thenApply(target -> target.response(line, headers, body))\n+            );\n+        }\n+    }\n+\n+    /**\n+     * Async response.\n+     * @since 1.0\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY4NjEyMg=="}, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5OTk2MA==", "bodyText": "@Sammers21 agree, will add a todo", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378699960", "createdAt": "2020-02-13T07:58:38Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now StupSlice\n+ *  is used instead of real slice implementation.\n+ *  We should parse publisher of bytes into yaml\n+ *  config, construct ASTO from this config and find\n+ *  corresponding slice implementation by type parameter.\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+public final class Pie implements Slice {\n+\n+    /**\n+     * Configuration storage.\n+     */\n+    private final Storage cfg;\n+\n+    /**\n+     * Ctro.\n+     * @param cfg Configuration\n+     */\n+    public Pie(final Storage cfg) {\n+        this.cfg = cfg;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final URI uri;\n+        try {\n+            uri = new RequestLineFrom(line).uri();\n+        } catch (final IOException err) {\n+            return new RsWithStatus(400);\n+        }\n+        if (uri.getPath().equals(\"*\")) {\n+            return new RsWithStatus(200);\n+        }\n+        final String[] path = uri.getPath().split(\"/\");\n+        if (path.length == 0) {\n+            return new RsWithStatus(200);\n+        }\n+        final String repo = path[0];\n+        return new AsyncSlice(\n+            this.cfg.value(new Key.From(repo)).thenApply(something -> new SliceStub())\n+        ).response(line, headers, body);\n+    }\n+\n+    /**\n+     * Slice stub.\n+     * @since 1.0\n+     */\n+    private static final class SliceStub implements Slice {\n+\n+        @Override\n+        public Response response(final String line,\n+            final Iterable<Entry<String, String>> headers,\n+            final Publisher<ByteBuffer> body) {\n+            return new RsWithStatus(404);\n+        }\n+    }\n+\n+    /**\n+     * Async slice.\n+     * @since 1.0\n+     */\n+    private static final class AsyncSlice implements Slice {\n+\n+        /**\n+         * Async slice.\n+         */\n+        private final CompletionStage<Slice> slice;\n+\n+        /**\n+         * Ctor.\n+         * @param slice Async slice.\n+         */\n+        AsyncSlice(final CompletionStage<Slice> slice) {\n+            this.slice = slice;\n+        }\n+\n+        @Override\n+        public Response response(final String line,\n+            final Iterable<Entry<String, String>> headers,\n+            final Publisher<ByteBuffer> body) {\n+            return new RsAsync(\n+                this.slice.thenApply(target -> target.response(line, headers, body))\n+            );\n+        }\n+    }\n+\n+    /**\n+     * Async response.\n+     * @since 1.0\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY4NjEyMg=="}, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzEzOTkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/Pie.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODo0MzozOVrOFpLJUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTowNzo0NFrOFpPyOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcxODU0Nw==", "bodyText": "Improve the description, please. Mention repository configuration files.", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378718547", "createdAt": "2020-02-13T08:43:39Z", "author": {"login": "Sammers21"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 1.0\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now SliceStub\n+ *  is used instead of real slice implementation.\n+ *  We should parse publisher of bytes into yaml\n+ *  config, construct ASTO from this config and find\n+ *  corresponding slice implementation by type parameter.\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+public final class Pie implements Slice {\n+\n+    /**\n+     * Configuration storage.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b6b97e2efba0f6906056a5faa76c3d8d9dede3"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc5NDU1NQ==", "bodyText": "@Sammers21 done, see 632252f", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378794555", "createdAt": "2020-02-13T11:07:44Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 1.0\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now SliceStub\n+ *  is used instead of real slice implementation.\n+ *  We should parse publisher of bytes into yaml\n+ *  config, construct ASTO from this config and find\n+ *  corresponding slice implementation by type parameter.\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+public final class Pie implements Slice {\n+\n+    /**\n+     * Configuration storage.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcxODU0Nw=="}, "originalCommit": {"oid": "e6b6b97e2efba0f6906056a5faa76c3d8d9dede3"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2330, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}