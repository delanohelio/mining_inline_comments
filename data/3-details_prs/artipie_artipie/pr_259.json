{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NzM5MzI0", "number": 259, "title": "#231 - Added InMemoryMetrics with counters support", "bodyText": "Part of #231\nAdded InMemoryMetrics with counters support", "createdAt": "2020-07-06T12:21:45Z", "url": "https://github.com/artipie/artipie/pull/259", "merged": true, "mergeCommit": {"oid": "a5fd2ac67c624bb837561250418d608c4526c335"}, "closed": true, "closedAt": "2020-07-07T09:47:43Z", "author": {"login": "olegmoz"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcyQ8pQgBqjM1MTU4MzM4MzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyisatgFqTQ0MzczMzkwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8e412f29d475fc1c5c48ecef98c806a3793edd5", "author": {"user": {"login": "olegmoz", "name": "Oleg Mozzhechkov"}}, "url": "https://github.com/artipie/artipie/commit/e8e412f29d475fc1c5c48ecef98c806a3793edd5", "committedDate": "2020-07-06T12:23:56Z", "message": "#231 - Added InMemoryMetrics with counters support"}, "afterCommit": {"oid": "80517163c0b955a1de2b9e5bc0c684d1ce54e8f2", "author": {"user": {"login": "olegmoz", "name": "Oleg Mozzhechkov"}}, "url": "https://github.com/artipie/artipie/commit/80517163c0b955a1de2b9e5bc0c684d1ce54e8f2", "committedDate": "2020-07-06T13:09:48Z", "message": "#231 - Added InMemoryMetrics with counters support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "80517163c0b955a1de2b9e5bc0c684d1ce54e8f2", "author": {"user": {"login": "olegmoz", "name": "Oleg Mozzhechkov"}}, "url": "https://github.com/artipie/artipie/commit/80517163c0b955a1de2b9e5bc0c684d1ce54e8f2", "committedDate": "2020-07-06T13:09:48Z", "message": "#231 - Added InMemoryMetrics with counters support"}, "afterCommit": {"oid": "5999b0493de4bca3626da30659591d17c5f8fb07", "author": {"user": {"login": "olegmoz", "name": "Oleg Mozzhechkov"}}, "url": "https://github.com/artipie/artipie/commit/5999b0493de4bca3626da30659591d17c5f8fb07", "committedDate": "2020-07-06T18:10:56Z", "message": "#231 - Added InMemoryMetrics with counters support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5999b0493de4bca3626da30659591d17c5f8fb07", "author": {"user": {"login": "olegmoz", "name": "Oleg Mozzhechkov"}}, "url": "https://github.com/artipie/artipie/commit/5999b0493de4bca3626da30659591d17c5f8fb07", "committedDate": "2020-07-06T18:10:56Z", "message": "#231 - Added InMemoryMetrics with counters support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNjc1Njcw", "url": "https://github.com/artipie/artipie/pull/259#pullrequestreview-443675670", "createdAt": "2020-07-07T08:32:04Z", "commit": {"oid": "5999b0493de4bca3626da30659591d17c5f8fb07"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODozMjowNFrOGt0YnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0OTozM1rOGt1DFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY5NzM3Mg==", "bodyText": "@olegmoz I think that this method should be added to the interface: we can always create another abstractions if later we realize that Map<String, Counter> is not suitable for all Metrics implementations. Same stands for value() methods in Counter and Gauge.\nAlso, not inherited methods in implementations do not seem to be a good practice: it always leads to casting/operating specific implementations instead of the interfaces.", "url": "https://github.com/artipie/artipie/pull/259#discussion_r450697372", "createdAt": "2020-07-07T08:32:04Z", "author": {"login": "olenagerasimova"}, "path": "src/main/java/com/artipie/metrics/memory/InMemoryMetrics.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import com.artipie.metrics.Metrics;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+/**\n+ * {@link Metrics} implementation storing data in memory.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Support gauges in InMemoryMetrics.\n+ *  `InMemoryMetrics.gauge()` method implementation should get or create an `InMemoryGauge` by name\n+ *  and store it. `InMemoryMetrics.counters()` method should be added\n+ *  to create snapshot of existing gauges. Implementations are expected to be similar to counters.\n+ */\n+final class InMemoryMetrics implements Metrics {\n+\n+    /**\n+     * Counters by name.\n+     */\n+    private final ConcurrentMap<String, InMemoryCounter> cnts = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public InMemoryCounter counter(final String name) {\n+        return this.cnts.computeIfAbsent(name, ignored -> new InMemoryCounter());\n+    }\n+\n+    @Override\n+    public InMemoryGauge gauge(final String name) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Get counters snapshot.\n+     *\n+     * @return Counters snapshot.\n+     */\n+    public Map<String, InMemoryCounter> counters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5999b0493de4bca3626da30659591d17c5f8fb07"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNjI3MA==", "bodyText": "@olegmoz l'd suggest returning Gauge and Counter instead of theirs implementation", "url": "https://github.com/artipie/artipie/pull/259#discussion_r450706270", "createdAt": "2020-07-07T08:46:17Z", "author": {"login": "olenagerasimova"}, "path": "src/main/java/com/artipie/metrics/memory/InMemoryMetrics.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import com.artipie.metrics.Metrics;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+/**\n+ * {@link Metrics} implementation storing data in memory.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Support gauges in InMemoryMetrics.\n+ *  `InMemoryMetrics.gauge()` method implementation should get or create an `InMemoryGauge` by name\n+ *  and store it. `InMemoryMetrics.counters()` method should be added\n+ *  to create snapshot of existing gauges. Implementations are expected to be similar to counters.\n+ */\n+final class InMemoryMetrics implements Metrics {\n+\n+    /**\n+     * Counters by name.\n+     */\n+    private final ConcurrentMap<String, InMemoryCounter> cnts = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public InMemoryCounter counter(final String name) {\n+        return this.cnts.computeIfAbsent(name, ignored -> new InMemoryCounter());\n+    }\n+\n+    @Override\n+    public InMemoryGauge gauge(final String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5999b0493de4bca3626da30659591d17c5f8fb07"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwODI0NQ==", "bodyText": "@olegmoz todo does not seem relevant: InMemoryMetrics.counters() is already implemented", "url": "https://github.com/artipie/artipie/pull/259#discussion_r450708245", "createdAt": "2020-07-07T08:49:33Z", "author": {"login": "olenagerasimova"}, "path": "src/main/java/com/artipie/metrics/memory/InMemoryMetrics.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import com.artipie.metrics.Metrics;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+/**\n+ * {@link Metrics} implementation storing data in memory.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Support gauges in InMemoryMetrics.\n+ *  `InMemoryMetrics.gauge()` method implementation should get or create an `InMemoryGauge` by name\n+ *  and store it. `InMemoryMetrics.counters()` method should be added", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5999b0493de4bca3626da30659591d17c5f8fb07"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63fc87fb4bbdb6fe12429081dacf3f1bd7779ed5", "author": {"user": {"login": "olegmoz", "name": "Oleg Mozzhechkov"}}, "url": "https://github.com/artipie/artipie/commit/63fc87fb4bbdb6fe12429081dacf3f1bd7779ed5", "committedDate": "2020-07-07T09:11:46Z", "message": "Merge branch 'master' into 231-in-memory-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35818ff9942ae60e76e5d59cc89e0500265feae5", "author": {"user": {"login": "olegmoz", "name": "Oleg Mozzhechkov"}}, "url": "https://github.com/artipie/artipie/commit/35818ff9942ae60e76e5d59cc89e0500265feae5", "committedDate": "2020-07-07T09:15:31Z", "message": "#231 - Changes by review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNzEyMjg5", "url": "https://github.com/artipie/artipie/pull/259#pullrequestreview-443712289", "createdAt": "2020-07-07T09:18:57Z", "commit": {"oid": "35818ff9942ae60e76e5d59cc89e0500265feae5"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNzIyODU0", "url": "https://github.com/artipie/artipie/pull/259#pullrequestreview-443722854", "createdAt": "2020-07-07T09:32:35Z", "commit": {"oid": "35818ff9942ae60e76e5d59cc89e0500265feae5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOTozMjozNlrOGt2nMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOTozMjozNlrOGt2nMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDczMzg3NA==", "bodyText": "@olegmoz since 0.9", "url": "https://github.com/artipie/artipie/pull/259#discussion_r450733874", "createdAt": "2020-07-07T09:32:36Z", "author": {"login": "Vatavuk"}, "path": "src/test/java/com/artipie/metrics/memory/InMemoryMetricsTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.hamcrest.collection.IsEmptyCollection;\n+import org.hamcrest.core.IsEqual;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.hamcrest.core.IsNot;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Tests for {@link InMemoryMetrics}.\n+ *\n+ * @since 0.8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35818ff9942ae60e76e5d59cc89e0500265feae5"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5016fd37d50224cd207bd67a0d4ebdc95fbea69c", "author": {"user": {"login": "olegmoz", "name": "Oleg Mozzhechkov"}}, "url": "https://github.com/artipie/artipie/commit/5016fd37d50224cd207bd67a0d4ebdc95fbea69c", "committedDate": "2020-07-07T09:35:56Z", "message": "Merge branch 'master' into 231-in-memory-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f29e986c899f4fbd3c7c6e5122762355cfd5c0c8", "author": {"user": {"login": "olegmoz", "name": "Oleg Mozzhechkov"}}, "url": "https://github.com/artipie/artipie/commit/f29e986c899f4fbd3c7c6e5122762355cfd5c0c8", "committedDate": "2020-07-07T09:39:48Z", "message": "#231 - Changes by review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNzMzOTAz", "url": "https://github.com/artipie/artipie/pull/259#pullrequestreview-443733903", "createdAt": "2020-07-07T09:47:35Z", "commit": {"oid": "f29e986c899f4fbd3c7c6e5122762355cfd5c0c8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3004, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}