{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwODgzNTAy", "number": 475, "title": "#447 - Add MetricSliceTest", "bodyText": "Closes #447\nMetricSliceTest was added.", "createdAt": "2020-08-20T12:45:22Z", "url": "https://github.com/artipie/artipie/pull/475", "merged": true, "mergeCommit": {"oid": "f73d8d1c5c8b7fe9623d6023867c24f67eca7c00"}, "closed": true, "closedAt": "2020-08-21T08:43:34Z", "author": {"login": "genryxy"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAvlxlAH2gAyNDcwODgzNTAyOmE3YzE5NDE4NWZiZmY3NTI1YmQ0YTFiMzJlNzc4NzMxZTlhZjVhZmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBAvyCgFqTQ3MjMxMTkzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a7c194185fbff7525bd4a1b32e778731e9af5afb", "author": {"user": {"login": "genryxy", "name": "Alexander"}}, "url": "https://github.com/artipie/artipie/commit/a7c194185fbff7525bd4a1b32e778731e9af5afb", "committedDate": "2020-08-20T12:44:02Z", "message": "#447 - Add MetricSliceTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ce766903726ff4369dc88ecb1c039ea690d54d3", "author": {"user": {"login": "genryxy", "name": "Alexander"}}, "url": "https://github.com/artipie/artipie/commit/9ce766903726ff4369dc88ecb1c039ea690d54d3", "committedDate": "2020-08-20T13:00:38Z", "message": "#447 - Fix order"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNTYzOTA4", "url": "https://github.com/artipie/artipie/pull/475#pullrequestreview-471563908", "createdAt": "2020-08-20T12:52:53Z", "commit": {"oid": "a7c194185fbff7525bd4a1b32e778731e9af5afb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjo1Mjo1M1rOHD_W6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzowMDowMlrOHD_oJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0NTgzMg==", "bodyText": "@genryxy test method name is not informative, please elaborate what's being tested here", "url": "https://github.com/artipie/artipie/pull/475#discussion_r473945832", "createdAt": "2020-08-20T12:52:53Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/metrics/MetricSliceTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.http.hm.RsHasBody;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.hm.SliceHasResponse;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqMethod;\n+import com.artipie.http.rs.RsStatus;\n+import java.nio.charset.StandardCharsets;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test case for {@link MetricSlice}.\n+ *\n+ * @since 0.10\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+final class MetricSliceTest {\n+    @Test\n+    void test() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7c194185fbff7525bd4a1b32e778731e9af5afb"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0NzM1OQ==", "bodyText": "@genryxy there is even better way to verify JSON using wtf.g4s8.hamcrest.json library, you can find usage example here https://github.com/artipie/nuget-adapter/blob/master/src/test/java/com/artipie/nuget/http/metadata/RegistrationPageTest.java\nUsing specialized matchers we do not enforce formatting and semantically identical JSON with different formatting will be considered equal.", "url": "https://github.com/artipie/artipie/pull/475#discussion_r473947359", "createdAt": "2020-08-20T12:55:13Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/metrics/MetricSliceTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.http.hm.RsHasBody;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.hm.SliceHasResponse;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqMethod;\n+import com.artipie.http.rs.RsStatus;\n+import java.nio.charset.StandardCharsets;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test case for {@link MetricSlice}.\n+ *\n+ * @since 0.10\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+final class MetricSliceTest {\n+    @Test\n+    void test() {\n+        final byte[] dataone = \"1\".getBytes();\n+        final byte[] datatwo = \"2\".getBytes();\n+        final Storage storage = new InMemoryStorage();\n+        storage.save(new Key.From(\"two\"), new Content.From(datatwo));\n+        storage.save(new Key.From(\"one\"), new Content.From(dataone));\n+        MatcherAssert.assertThat(\n+            new MetricSlice(storage),\n+            new SliceHasResponse(\n+                Matchers.allOf(\n+                    new RsHasStatus(RsStatus.OK),\n+                    new RsHasBody(\n+                        \"[{\\\"key\\\":\\\"two\\\",\\\"value\\\":2},{\\\"key\\\":\\\"one\\\",\\\"value\\\":1}]\",\n+                        StandardCharsets.UTF_8\n+                    )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7c194185fbff7525bd4a1b32e778731e9af5afb"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1MDI0Ng==", "bodyText": "@genryxy creating matchers using constructors is preferred in this project over creation using static methods, so it will be better to use new AllOf<> here", "url": "https://github.com/artipie/artipie/pull/475#discussion_r473950246", "createdAt": "2020-08-20T13:00:02Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/metrics/MetricSliceTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.http.hm.RsHasBody;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.hm.SliceHasResponse;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqMethod;\n+import com.artipie.http.rs.RsStatus;\n+import java.nio.charset.StandardCharsets;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test case for {@link MetricSlice}.\n+ *\n+ * @since 0.10\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+final class MetricSliceTest {\n+    @Test\n+    void test() {\n+        final byte[] dataone = \"1\".getBytes();\n+        final byte[] datatwo = \"2\".getBytes();\n+        final Storage storage = new InMemoryStorage();\n+        storage.save(new Key.From(\"two\"), new Content.From(datatwo));\n+        storage.save(new Key.From(\"one\"), new Content.From(dataone));\n+        MatcherAssert.assertThat(\n+            new MetricSlice(storage),\n+            new SliceHasResponse(\n+                Matchers.allOf(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7c194185fbff7525bd4a1b32e778731e9af5afb"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a76b29f462461323f9c3c2065edf40909cc9a4e7", "author": {"user": {"login": "genryxy", "name": "Alexander"}}, "url": "https://github.com/artipie/artipie/commit/a76b29f462461323f9c3c2065edf40909cc9a4e7", "committedDate": "2020-08-21T08:12:28Z", "message": "#447 - Review fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3efc18fb4cd690dbe9efe53689b9b93cb20144bf", "author": {"user": {"login": "genryxy", "name": "Alexander"}}, "url": "https://github.com/artipie/artipie/commit/3efc18fb4cd690dbe9efe53689b9b93cb20144bf", "committedDate": "2020-08-21T08:12:54Z", "message": "Merge remote-tracking branch 'upstream/master' into 447-MetricSliceTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMjk2ODY0", "url": "https://github.com/artipie/artipie/pull/475#pullrequestreview-472296864", "createdAt": "2020-08-21T08:20:01Z", "commit": {"oid": "3efc18fb4cd690dbe9efe53689b9b93cb20144bf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoyMDowMVrOHEh76Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoyMjozOFrOHEiE7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxMjM2MQ==", "bodyText": "@genryxy you are not using this library, so please remove the dependency", "url": "https://github.com/artipie/artipie/pull/475#discussion_r474512361", "createdAt": "2020-08-21T08:20:01Z", "author": {"login": "olegmoz"}, "path": "pom.xml", "diffHunk": "@@ -238,6 +238,12 @@ SOFTWARE.\n       <version>2.0.7</version>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>wtf.g4s8</groupId>\n+      <artifactId>matchers-json</artifactId>\n+      <version>1.0.3</version>\n+      <scope>test</scope>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3efc18fb4cd690dbe9efe53689b9b93cb20144bf"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxNDY3MQ==", "bodyText": "@genryxy it seems that this method is always used to create Content, so I think it might return Content and be renamed accordingly", "url": "https://github.com/artipie/artipie/pull/475#discussion_r474514671", "createdAt": "2020-08-21T08:22:38Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/metrics/MetricSliceTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.http.hm.RsHasBody;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.hm.SliceHasResponse;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqMethod;\n+import com.artipie.http.rs.RsStatus;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.AllOf;\n+import org.hamcrest.core.AnyOf;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test case for {@link MetricSlice}.\n+ *\n+ * @since 0.10\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+final class MetricSliceTest {\n+    @Test\n+    void shouldReturnMetricsInJsonArray() {\n+        final String keyone = \"one\";\n+        final String keytwo = \"two\";\n+        final String json = \"[{\\\"key\\\":\\\"%s\\\",\\\"value\\\":%s},{\\\"key\\\":\\\"%s\\\",\\\"value\\\":%s}]\";\n+        final long valone = 1;\n+        final long valtwo = 2;\n+        final String dirorder = String.format(json, keyone, valone, keytwo, valtwo);\n+        final String revorder = String.format(json, keytwo, valtwo, keyone, valone);\n+        final Storage storage = new InMemoryStorage();\n+        storage.save(new Key.From(keyone), new Content.From(this.getBytes(valone)));\n+        storage.save(new Key.From(keytwo), new Content.From(this.getBytes(valtwo)));\n+        MatcherAssert.assertThat(\n+            new MetricSlice(storage),\n+            new SliceHasResponse(\n+                new AllOf<>(\n+                    Arrays.asList(\n+                        new RsHasStatus(RsStatus.OK),\n+                        new AnyOf<>(\n+                            Arrays.asList(\n+                                new RsHasBody(dirorder, StandardCharsets.UTF_8),\n+                                new RsHasBody(revorder, StandardCharsets.UTF_8)\n+                            )\n+                        )\n+                    )\n+                ),\n+                new RequestLine(RqMethod.GET, \"/api/repositories/\")\n+            )\n+        );\n+    }\n+\n+    /**\n+     * Get array of bytes of the string.\n+     *\n+     * @param number Number The number to get an array of bytes\n+     * @return Array of bytes.\n+     */\n+    private byte[] getBytes(final long number) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3efc18fb4cd690dbe9efe53689b9b93cb20144bf"}, "originalPosition": 87}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d92aa7e620f635fdfb70185f90801f53d7c3ede0", "author": {"user": {"login": "genryxy", "name": "Alexander"}}, "url": "https://github.com/artipie/artipie/commit/d92aa7e620f635fdfb70185f90801f53d7c3ede0", "committedDate": "2020-08-21T08:33:19Z", "message": "#447 - Remove dependency, modify method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMzExOTMy", "url": "https://github.com/artipie/artipie/pull/475#pullrequestreview-472311932", "createdAt": "2020-08-21T08:43:21Z", "commit": {"oid": "d92aa7e620f635fdfb70185f90801f53d7c3ede0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3474, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}