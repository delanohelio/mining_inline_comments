{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNjQwNDYw", "number": 18, "title": "Initial implementation", "bodyText": "#12 - initial Artipie implementation and README file", "createdAt": "2020-02-11T12:48:58Z", "url": "https://github.com/artipie/artipie/pull/18", "merged": true, "mergeCommit": {"oid": "db18891ef5922576892a07e3d45af8e82219fd9c"}, "closed": true, "closedAt": "2020-02-13T13:53:43Z", "author": {"login": "g4s8"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBUGelgH2gAyMzczNjQwNDYwOmFkZjMwYTNhYTAxMGQ4ZTlmNTkwYzNiMmUyMDhjMTg0MWQ5Y2VhZjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcD44CmgH2gAyMzczNjQwNDYwOjYzMjI1MmY1OGY4MGFiOTAzYmJiYmVlOWZlOWNiNDk4N2E3YzdlZTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "adf30a3aa010d8e9f590c3b2e208c1841d9ceaf7", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/artipie/commit/adf30a3aa010d8e9f590c3b2e208c1841d9ceaf7", "committedDate": "2020-02-05T11:05:11Z", "message": "#12 - using artipie parent pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0044d5a1eeeb1828db525d800d291c5d56d59216", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/artipie/commit/0044d5a1eeeb1828db525d800d291c5d56d59216", "committedDate": "2020-02-11T12:44:59Z", "message": "#12 - initial artipie implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f978a855870e23bca299002c9ae30e145becc09a", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/artipie/commit/f978a855870e23bca299002c9ae30e145becc09a", "committedDate": "2020-02-11T12:51:27Z", "message": "Merge branch 'master' into 12"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/artipie/commit/5da0fe67634c1576919a6e5863f3ffd4104c20e0", "committedDate": "2020-02-11T13:06:45Z", "message": "#12 - merged master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NzM2MTYz", "url": "https://github.com/artipie/artipie/pull/18#pullrequestreview-357736163", "createdAt": "2020-02-12T19:43:15Z", "commit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo0MzoxNlrOFo8JDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNjowNzozNFrOFpH_RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MjcxNg==", "bodyText": "@g4s8 I'm just curious why should we change the license text?", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378472716", "createdAt": "2020-02-12T19:43:16Z", "author": {"login": "iakunin"}, "path": "LICENSE.txt", "diffHunk": "@@ -1,4 +1,4 @@\n-The MIT License (MIT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MzY2MA==", "bodyText": "@g4s8 just a typo: SliceStub should be instead of StupSlice.", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378473660", "createdAt": "2020-02-12T19:44:58Z", "author": {"login": "iakunin"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now StupSlice", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2Mzc0NQ==", "bodyText": "@g4s8 as for me it's not absolutely clear, why we should return http-200 in response to \"*\" request.", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378663745", "createdAt": "2020-02-13T05:54:56Z", "author": {"login": "iakunin"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now StupSlice\n+ *  is used instead of real slice implementation.\n+ *  We should parse publisher of bytes into yaml\n+ *  config, construct ASTO from this config and find\n+ *  corresponding slice implementation by type parameter.\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+public final class Pie implements Slice {\n+\n+    /**\n+     * Configuration storage.\n+     */\n+    private final Storage cfg;\n+\n+    /**\n+     * Ctro.\n+     * @param cfg Configuration\n+     */\n+    public Pie(final Storage cfg) {\n+        this.cfg = cfg;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final URI uri;\n+        try {\n+            uri = new RequestLineFrom(line).uri();\n+        } catch (final IOException err) {\n+            return new RsWithStatus(400);\n+        }\n+        if (uri.getPath().equals(\"*\")) {\n+            return new RsWithStatus(200);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2NTU0Nw==", "bodyText": "@g4s8 the same here: it's not completely clear, why we should return http-200 in this case.", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378665547", "createdAt": "2020-02-13T06:02:07Z", "author": {"login": "iakunin"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now StupSlice\n+ *  is used instead of real slice implementation.\n+ *  We should parse publisher of bytes into yaml\n+ *  config, construct ASTO from this config and find\n+ *  corresponding slice implementation by type parameter.\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+public final class Pie implements Slice {\n+\n+    /**\n+     * Configuration storage.\n+     */\n+    private final Storage cfg;\n+\n+    /**\n+     * Ctro.\n+     * @param cfg Configuration\n+     */\n+    public Pie(final Storage cfg) {\n+        this.cfg = cfg;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final URI uri;\n+        try {\n+            uri = new RequestLineFrom(line).uri();\n+        } catch (final IOException err) {\n+            return new RsWithStatus(400);\n+        }\n+        if (uri.getPath().equals(\"*\")) {\n+            return new RsWithStatus(200);\n+        }\n+        final String[] path = uri.getPath().split(\"/\");\n+        if (path.length == 0) {\n+            return new RsWithStatus(200);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2NTg2OQ==", "bodyText": "@g4s8 I cannot figure out the case when split returns array with zero length. Even \"\".split(\"/\") returns array with one item (empty string).", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378665869", "createdAt": "2020-02-13T06:03:29Z", "author": {"login": "iakunin"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now StupSlice\n+ *  is used instead of real slice implementation.\n+ *  We should parse publisher of bytes into yaml\n+ *  config, construct ASTO from this config and find\n+ *  corresponding slice implementation by type parameter.\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+public final class Pie implements Slice {\n+\n+    /**\n+     * Configuration storage.\n+     */\n+    private final Storage cfg;\n+\n+    /**\n+     * Ctro.\n+     * @param cfg Configuration\n+     */\n+    public Pie(final Storage cfg) {\n+        this.cfg = cfg;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final URI uri;\n+        try {\n+            uri = new RequestLineFrom(line).uri();\n+        } catch (final IOException err) {\n+            return new RsWithStatus(400);\n+        }\n+        if (uri.getPath().equals(\"*\")) {\n+            return new RsWithStatus(200);\n+        }\n+        final String[] path = uri.getPath().split(\"/\");\n+        if (path.length == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2NjgyMQ==", "bodyText": "@g4s8 apparently here should be since 1.0.", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378666821", "createdAt": "2020-02-13T06:07:34Z", "author": {"login": "iakunin"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3OTc2MDE2", "url": "https://github.com/artipie/artipie/pull/18#pullrequestreview-357976016", "createdAt": "2020-02-13T06:16:54Z", "commit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNjoxNjo1NFrOFpIInA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNjoxNjo1NFrOFpIInA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2OTIxMg==", "bodyText": "@g4s8 maybe we should add another puzzle for starting Artipie server?", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378669212", "createdAt": "2020-02-13T06:16:54Z", "author": {"login": "iakunin"}, "path": "README.md", "diffHunk": "@@ -13,7 +13,24 @@\n \n This is a simple experimental binary artifacts manager.\n \n-TBD...\n+## How does it work\n+\n+Artipie uses external server implementation to start itself,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3OTk1NjI0", "url": "https://github.com/artipie/artipie/pull/18#pullrequestreview-357995624", "createdAt": "2020-02-13T07:14:45Z", "commit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNzoxNDo0NVrOFpJHhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNzoxNDo0NVrOFpJHhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY4NTMxOQ==", "bodyText": "It's a bad idea to use try/catch for flow control", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378685319", "createdAt": "2020-02-13T07:14:45Z", "author": {"login": "Sammers21"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now StupSlice\n+ *  is used instead of real slice implementation.\n+ *  We should parse publisher of bytes into yaml\n+ *  config, construct ASTO from this config and find\n+ *  corresponding slice implementation by type parameter.\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+public final class Pie implements Slice {\n+\n+    /**\n+     * Configuration storage.\n+     */\n+    private final Storage cfg;\n+\n+    /**\n+     * Ctro.\n+     * @param cfg Configuration\n+     */\n+    public Pie(final Storage cfg) {\n+        this.cfg = cfg;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final URI uri;\n+        try {\n+            uri = new RequestLineFrom(line).uri();\n+        } catch (final IOException err) {\n+            return new RsWithStatus(400);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3OTk2NjYw", "url": "https://github.com/artipie/artipie/pull/18#pullrequestreview-357996660", "createdAt": "2020-02-13T07:17:30Z", "commit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNzoxNzozMFrOFpJKqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNzoxNzozMFrOFpJKqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY4NjEyMg==", "bodyText": "This should be a part of http module", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378686122", "createdAt": "2020-02-13T07:17:30Z", "author": {"login": "Sammers21"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 0.1\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now StupSlice\n+ *  is used instead of real slice implementation.\n+ *  We should parse publisher of bytes into yaml\n+ *  config, construct ASTO from this config and find\n+ *  corresponding slice implementation by type parameter.\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+public final class Pie implements Slice {\n+\n+    /**\n+     * Configuration storage.\n+     */\n+    private final Storage cfg;\n+\n+    /**\n+     * Ctro.\n+     * @param cfg Configuration\n+     */\n+    public Pie(final Storage cfg) {\n+        this.cfg = cfg;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final URI uri;\n+        try {\n+            uri = new RequestLineFrom(line).uri();\n+        } catch (final IOException err) {\n+            return new RsWithStatus(400);\n+        }\n+        if (uri.getPath().equals(\"*\")) {\n+            return new RsWithStatus(200);\n+        }\n+        final String[] path = uri.getPath().split(\"/\");\n+        if (path.length == 0) {\n+            return new RsWithStatus(200);\n+        }\n+        final String repo = path[0];\n+        return new AsyncSlice(\n+            this.cfg.value(new Key.From(repo)).thenApply(something -> new SliceStub())\n+        ).response(line, headers, body);\n+    }\n+\n+    /**\n+     * Slice stub.\n+     * @since 1.0\n+     */\n+    private static final class SliceStub implements Slice {\n+\n+        @Override\n+        public Response response(final String line,\n+            final Iterable<Entry<String, String>> headers,\n+            final Publisher<ByteBuffer> body) {\n+            return new RsWithStatus(404);\n+        }\n+    }\n+\n+    /**\n+     * Async slice.\n+     * @since 1.0\n+     */\n+    private static final class AsyncSlice implements Slice {\n+\n+        /**\n+         * Async slice.\n+         */\n+        private final CompletionStage<Slice> slice;\n+\n+        /**\n+         * Ctor.\n+         * @param slice Async slice.\n+         */\n+        AsyncSlice(final CompletionStage<Slice> slice) {\n+            this.slice = slice;\n+        }\n+\n+        @Override\n+        public Response response(final String line,\n+            final Iterable<Entry<String, String>> headers,\n+            final Publisher<ByteBuffer> body) {\n+            return new RsAsync(\n+                this.slice.thenApply(target -> target.response(line, headers, body))\n+            );\n+        }\n+    }\n+\n+    /**\n+     * Async response.\n+     * @since 1.0\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da0fe67634c1576919a6e5863f3ffd4104c20e0"}, "originalPosition": 138}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e4a461c59cf3110c84d908c1136577a9b4282bc", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/artipie/commit/6e4a461c59cf3110c84d908c1136577a9b4282bc", "committedDate": "2020-02-13T07:42:53Z", "message": "Merge branch 'master' into 12"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6b6b97e2efba0f6906056a5faa76c3d8d9dede3", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/artipie/commit/e6b6b97e2efba0f6906056a5faa76c3d8d9dede3", "committedDate": "2020-02-13T08:10:31Z", "message": "#12 - (cr) review fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MDM2OTE3", "url": "https://github.com/artipie/artipie/pull/18#pullrequestreview-358036917", "createdAt": "2020-02-13T08:43:39Z", "commit": {"oid": "e6b6b97e2efba0f6906056a5faa76c3d8d9dede3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODo0MzozOVrOFpLJUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODo0MzozOVrOFpLJUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcxODU0Nw==", "bodyText": "Improve the description, please. Mention repository configuration files.", "url": "https://github.com/artipie/artipie/pull/18#discussion_r378718547", "createdAt": "2020-02-13T08:43:39Z", "author": {"login": "Sammers21"}, "path": "src/main/java/com/artipie/Pie.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Pie of slices.\n+ * @since 1.0\n+ * @todo #12:30min Implement slice resolving strategy\n+ *  based on yaml configuration file. Now SliceStub\n+ *  is used instead of real slice implementation.\n+ *  We should parse publisher of bytes into yaml\n+ *  config, construct ASTO from this config and find\n+ *  corresponding slice implementation by type parameter.\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+public final class Pie implements Slice {\n+\n+    /**\n+     * Configuration storage.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b6b97e2efba0f6906056a5faa76c3d8d9dede3"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MDM4OTI2", "url": "https://github.com/artipie/artipie/pull/18#pullrequestreview-358038926", "createdAt": "2020-02-13T08:47:07Z", "commit": {"oid": "e6b6b97e2efba0f6906056a5faa76c3d8d9dede3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0543b7bbc338709b9cd521ecfefbd5ddecf677f", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/artipie/commit/e0543b7bbc338709b9cd521ecfefbd5ddecf677f", "committedDate": "2020-02-13T11:00:41Z", "message": "#12 - merged master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "632252f58f80ab903bbbbee9fe9cb4987a7c7ee3", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/artipie/commit/632252f58f80ab903bbbbee9fe9cb4987a7c7ee3", "committedDate": "2020-02-13T11:03:45Z", "message": "#12 - (cr) updated settings storage doc"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3116, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}