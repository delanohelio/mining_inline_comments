{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2MDU4NDc3", "number": 283, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMjoxNjo1MVrOEMdgrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMjoyMDo0OFrOEMdoSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTAxODcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/ResponseMetricsSlice.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMjoxNjo1MVrOGulTNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMjozNzoyNFrOGumDlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ5ODgwNg==", "bodyText": "@olegmoz what do you think that we extract this check to a new method RsStatus.isError() or to some wrapper class to avoid code duplication through the codebase.", "url": "https://github.com/artipie/artipie/pull/283#discussion_r451498806", "createdAt": "2020-07-08T12:16:51Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/ResponseMetricsSlice.java", "diffHunk": "@@ -87,16 +89,41 @@ public Response response(\n      * Report response to metrics.\n      *\n      * @param rqline Request line.\n+     * @param rqheaders Request headers.\n      * @param rsstatus Response status.\n      */\n-    private void report(final String rqline, final RsStatus rsstatus) {\n+    private void report(\n+        final String rqline,\n+        final Iterable<Map.Entry<String, String>> rqheaders,\n+        final RsStatus rsstatus\n+    ) {\n         if (rsstatus.code().matches(\"^[45].+$\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a3c609c8dbb91a846bd055988224d80d1825f52"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUxMTE4OQ==", "bodyText": "@Vatavuk nice idea, added an issue to add such method to RsStatus and a puzzle to use it here", "url": "https://github.com/artipie/artipie/pull/283#discussion_r451511189", "createdAt": "2020-07-08T12:37:24Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/ResponseMetricsSlice.java", "diffHunk": "@@ -87,16 +89,41 @@ public Response response(\n      * Report response to metrics.\n      *\n      * @param rqline Request line.\n+     * @param rqheaders Request headers.\n      * @param rsstatus Response status.\n      */\n-    private void report(final String rqline, final RsStatus rsstatus) {\n+    private void report(\n+        final String rqline,\n+        final Iterable<Map.Entry<String, String>> rqheaders,\n+        final RsStatus rsstatus\n+    ) {\n         if (rsstatus.code().matches(\"^[45].+$\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ5ODgwNg=="}, "originalCommit": {"oid": "0a3c609c8dbb91a846bd055988224d80d1825f52"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTAzODE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/ResponseMetricsSlice.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMjoyMDo0OFrOGule-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNDo0NDoxM1rOGurhYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwMTgxNw==", "bodyText": "@olegmoz how about creating new RqHeaders(rqheaders).contains(header) ? This would be more readable", "url": "https://github.com/artipie/artipie/pull/283#discussion_r451501817", "createdAt": "2020-07-08T12:20:48Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/ResponseMetricsSlice.java", "diffHunk": "@@ -87,16 +89,41 @@ public Response response(\n      * Report response to metrics.\n      *\n      * @param rqline Request line.\n+     * @param rqheaders Request headers.\n      * @param rsstatus Response status.\n      */\n-    private void report(final String rqline, final RsStatus rsstatus) {\n+    private void report(\n+        final String rqline,\n+        final Iterable<Map.Entry<String, String>> rqheaders,\n+        final RsStatus rsstatus\n+    ) {\n         if (rsstatus.code().matches(\"^[45].+$\")) {\n             this.report(rqline, \"error\");\n+            if (rsstatus.equals(RsStatus.UNAUTHORIZED)) {\n+                this.reportUnauthorized(rqline, rqheaders);\n+            }\n         } else {\n             this.report(rqline, \"success\");\n         }\n     }\n \n+    /**\n+     * Report unauthorized response to metrics.\n+     *\n+     * @param rqline Request line.\n+     * @param rqheaders Request headers.\n+     */\n+    private void reportUnauthorized(\n+        final String rqline,\n+        final Iterable<Map.Entry<String, String>> rqheaders\n+    ) {\n+        if (new RqHeaders(rqheaders, Authorization.NAME).isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a3c609c8dbb91a846bd055988224d80d1825f52"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUxMjEyMg==", "bodyText": "@Vatavuk do not think that it simplifies code significantly. Plus we usually need to read header value, not just see if it is there.", "url": "https://github.com/artipie/artipie/pull/283#discussion_r451512122", "createdAt": "2020-07-08T12:38:58Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/ResponseMetricsSlice.java", "diffHunk": "@@ -87,16 +89,41 @@ public Response response(\n      * Report response to metrics.\n      *\n      * @param rqline Request line.\n+     * @param rqheaders Request headers.\n      * @param rsstatus Response status.\n      */\n-    private void report(final String rqline, final RsStatus rsstatus) {\n+    private void report(\n+        final String rqline,\n+        final Iterable<Map.Entry<String, String>> rqheaders,\n+        final RsStatus rsstatus\n+    ) {\n         if (rsstatus.code().matches(\"^[45].+$\")) {\n             this.report(rqline, \"error\");\n+            if (rsstatus.equals(RsStatus.UNAUTHORIZED)) {\n+                this.reportUnauthorized(rqline, rqheaders);\n+            }\n         } else {\n             this.report(rqline, \"success\");\n         }\n     }\n \n+    /**\n+     * Report unauthorized response to metrics.\n+     *\n+     * @param rqline Request line.\n+     * @param rqheaders Request headers.\n+     */\n+    private void reportUnauthorized(\n+        final String rqline,\n+        final Iterable<Map.Entry<String, String>> rqheaders\n+    ) {\n+        if (new RqHeaders(rqheaders, Authorization.NAME).isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwMTgxNw=="}, "originalCommit": {"oid": "0a3c609c8dbb91a846bd055988224d80d1825f52"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU2MzkwNQ==", "bodyText": "@olegmoz the if statement is not readable, I still believe it would be better to have this l inside RqHeaders, but you can instead extract it to a private method", "url": "https://github.com/artipie/artipie/pull/283#discussion_r451563905", "createdAt": "2020-07-08T13:56:09Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/ResponseMetricsSlice.java", "diffHunk": "@@ -87,16 +89,41 @@ public Response response(\n      * Report response to metrics.\n      *\n      * @param rqline Request line.\n+     * @param rqheaders Request headers.\n      * @param rsstatus Response status.\n      */\n-    private void report(final String rqline, final RsStatus rsstatus) {\n+    private void report(\n+        final String rqline,\n+        final Iterable<Map.Entry<String, String>> rqheaders,\n+        final RsStatus rsstatus\n+    ) {\n         if (rsstatus.code().matches(\"^[45].+$\")) {\n             this.report(rqline, \"error\");\n+            if (rsstatus.equals(RsStatus.UNAUTHORIZED)) {\n+                this.reportUnauthorized(rqline, rqheaders);\n+            }\n         } else {\n             this.report(rqline, \"success\");\n         }\n     }\n \n+    /**\n+     * Report unauthorized response to metrics.\n+     *\n+     * @param rqline Request line.\n+     * @param rqheaders Request headers.\n+     */\n+    private void reportUnauthorized(\n+        final String rqline,\n+        final Iterable<Map.Entry<String, String>> rqheaders\n+    ) {\n+        if (new RqHeaders(rqheaders, Authorization.NAME).isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwMTgxNw=="}, "originalCommit": {"oid": "0a3c609c8dbb91a846bd055988224d80d1825f52"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYwMDczOA==", "bodyText": "@Vatavuk I agree that it is not ideal, but extracting a method for single line feels like an overkill", "url": "https://github.com/artipie/artipie/pull/283#discussion_r451600738", "createdAt": "2020-07-08T14:44:13Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/ResponseMetricsSlice.java", "diffHunk": "@@ -87,16 +89,41 @@ public Response response(\n      * Report response to metrics.\n      *\n      * @param rqline Request line.\n+     * @param rqheaders Request headers.\n      * @param rsstatus Response status.\n      */\n-    private void report(final String rqline, final RsStatus rsstatus) {\n+    private void report(\n+        final String rqline,\n+        final Iterable<Map.Entry<String, String>> rqheaders,\n+        final RsStatus rsstatus\n+    ) {\n         if (rsstatus.code().matches(\"^[45].+$\")) {\n             this.report(rqline, \"error\");\n+            if (rsstatus.equals(RsStatus.UNAUTHORIZED)) {\n+                this.reportUnauthorized(rqline, rqheaders);\n+            }\n         } else {\n             this.report(rqline, \"success\");\n         }\n     }\n \n+    /**\n+     * Report unauthorized response to metrics.\n+     *\n+     * @param rqline Request line.\n+     * @param rqheaders Request headers.\n+     */\n+    private void reportUnauthorized(\n+        final String rqline,\n+        final Iterable<Map.Entry<String, String>> rqheaders\n+    ) {\n+        if (new RqHeaders(rqheaders, Authorization.NAME).isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwMTgxNw=="}, "originalCommit": {"oid": "0a3c609c8dbb91a846bd055988224d80d1825f52"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2244, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}