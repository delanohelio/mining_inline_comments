{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNDcwNjcz", "number": 682, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDo0NzoyNVrOEr_1Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDo0NzoyNVrOEr_1Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTcwMDE1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/pypi/PypiITCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDo0NzoyNVrOHfEsVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDo0NzoyNVrOHfEsVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM0NDc5MA==", "bodyText": "@genryxy RepoPerms now has ctor from two strings (name and password), so this expression can be simplified", "url": "https://github.com/artipie/artipie/pull/682#discussion_r502344790", "createdAt": "2020-10-09T10:47:25Z", "author": {"login": "olenagerasimova"}, "path": "src/test/java/com/artipie/pypi/PypiITCase.java", "diffHunk": "@@ -150,20 +148,130 @@ void pypiPublish() throws Exception {\n         );\n     }\n \n+    @Test\n+    void pypiInstallShouldFailWithForbidden() throws Exception {\n+        this.init(false);\n+        MatcherAssert.assertThat(\n+            this.exec(\n+                \"pip\", \"install\", \"--verbose\", \"--no-deps\", \"--trusted-host\", PypiITCase.HOST,\n+                \"--index-url\", this.urlCntn(Optional.of(ArtipieServer.BOB)), \"anypackage\"\n+            ),\n+            new StringContains(\n+                String.format(\n+                    \"403 Client Error: Forbidden for url: %spip/\", this.url\n+                )\n+            )\n+        );\n+    }\n+\n+    @Test\n+    void pypiPublishShouldFailSinceForbidden() throws Exception {\n+        this.init(false);\n+        new TestResource(\"pypi-repo/example-pckg/dist/\")\n+            .addFilesTo(\n+                this.storage,\n+                new Key.From(\"pypi-repo\", \"example-pckg\")\n+        );\n+        this.exec(\"python3\", \"-m\", \"pip\", \"install\", \"--user\", \"--upgrade\", \"twine\");\n+        MatcherAssert.assertThat(\n+            \"Packages should not be uploaded\",\n+            this.exec(\n+                \"python3\", \"-m\", \"twine\", \"upload\", \"--verbose\", \"--repository-url\", this.url,\n+                \"-u\", ArtipieServer.BOB.name(), \"-p\", ArtipieServer.BOB.password(),\n+                \"pypi-repo/example-pckg/*\"\n+            ),\n+            new IsNot<>(\n+                new StringContainsInOrder(\n+                    new ListOf<String>(\n+                        \"Uploading artipietestpkg-0.0.3-py2-none-any.whl\", \"100%\",\n+                        \"Uploading artipietestpkg-0.0.3.tar.gz\", \"100%\"\n+                    )\n+                )\n+            )\n+        );\n+        MatcherAssert.assertThat(\n+            \"Packages should not be saved in storage\",\n+            this.inStorage(\"artipietestpkg-0.0.3-py2-none-any.whl\")\n+                || this.inStorage(\"artipietestpkg-0.0.3.tar.gz\"),\n+            new IsEqual<>(false)\n+        );\n+    }\n+\n     @AfterEach\n-    void release() {\n+    void tearDown() {\n         this.server.stop();\n         this.cntn.stop();\n     }\n \n+    private void init(final boolean anonymous) throws IOException {\n+        this.storage = new FileStorage(this.tmp);\n+        this.server = new ArtipieServer(\n+            this.tmp, \"my-pypi\", this.config(anonymous)\n+        );\n+        this.port = this.server.start();\n+        this.url = String.format(\"http://%s:%d/my-pypi/\", PypiITCase.HOST, this.port);\n+        Testcontainers.exposeHostPorts(this.port);\n+        this.cntn = new GenericContainer<>(\"python:3\")\n+            .withCommand(\"tail\", \"-f\", \"/dev/null\")\n+            .withWorkingDirectory(\"/home/\")\n+            .withFileSystemBind(this.tmp.toString(), \"/home\");\n+        this.cntn.start();\n+    }\n+\n     private String exec(final String... command) throws Exception {\n         Logger.debug(this, \"Command:\\n%s\", String.join(\" \", command));\n         return this.cntn.execInContainer(command).getStdout();\n     }\n \n+    private String pswd(final boolean anonymous) {\n+        String pass = \"pass\";\n+        if (!anonymous) {\n+            pass = ArtipieServer.ALICE.password();\n+        }\n+        return pass;\n+    }\n+\n+    private String urlCntn(final Optional<ArtipieServer.User> user) {\n+        final String urlcntn;\n+        if (user.isEmpty()) {\n+            urlcntn = this.url;\n+        } else {\n+            urlcntn = String.format(\n+                \"http://%s:%s@%s:%d/my-pypi/\",\n+                user.get().name(), user.get().password(), PypiITCase.HOST, this.port\n+            );\n+        }\n+        return urlcntn;\n+    }\n+\n+    private RepoConfigYaml config(final boolean anonymous) {\n+        final RepoConfigYaml yaml = new RepoConfigYaml(\"pypi\")\n+            .withFileStorage(this.tmp.resolve(\"repos\"));\n+        if (!anonymous) {\n+            yaml.withPermissions(\n+                new RepoPerms(\n+                    new RepoPermissions.PermissionItem(\n+                        ArtipieServer.ALICE.name(), new ListOf<>(\"*\")\n+                    )\n+                )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebdf2ba921204a53520c2c988fd2b8ffc2839030"}, "originalPosition": 218}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2057, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}