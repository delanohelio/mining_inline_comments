{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NzM5MzI0", "number": 259, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODozMjowNFrOEL-fYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOTozMjozNlrOEL_5lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTkzNjMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/metrics/memory/InMemoryMetrics.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODozMjowNFrOGt0YnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToxODoyN1rOGt2GMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY5NzM3Mg==", "bodyText": "@olegmoz I think that this method should be added to the interface: we can always create another abstractions if later we realize that Map<String, Counter> is not suitable for all Metrics implementations. Same stands for value() methods in Counter and Gauge.\nAlso, not inherited methods in implementations do not seem to be a good practice: it always leads to casting/operating specific implementations instead of the interfaces.", "url": "https://github.com/artipie/artipie/pull/259#discussion_r450697372", "createdAt": "2020-07-07T08:32:04Z", "author": {"login": "olenagerasimova"}, "path": "src/main/java/com/artipie/metrics/memory/InMemoryMetrics.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import com.artipie.metrics.Metrics;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+/**\n+ * {@link Metrics} implementation storing data in memory.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Support gauges in InMemoryMetrics.\n+ *  `InMemoryMetrics.gauge()` method implementation should get or create an `InMemoryGauge` by name\n+ *  and store it. `InMemoryMetrics.counters()` method should be added\n+ *  to create snapshot of existing gauges. Implementations are expected to be similar to counters.\n+ */\n+final class InMemoryMetrics implements Metrics {\n+\n+    /**\n+     * Counters by name.\n+     */\n+    private final ConcurrentMap<String, InMemoryCounter> cnts = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public InMemoryCounter counter(final String name) {\n+        return this.cnts.computeIfAbsent(name, ignored -> new InMemoryCounter());\n+    }\n+\n+    @Override\n+    public InMemoryGauge gauge(final String name) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Get counters snapshot.\n+     *\n+     * @return Counters snapshot.\n+     */\n+    public Map<String, InMemoryCounter> counters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5999b0493de4bca3626da30659591d17c5f8fb07"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcyMDU1OQ==", "bodyText": "@olenagerasimova there was similar concern in PR with interfaces, see #238 . Metrics interface is for reporting metrics and what we are doing with counters and gauges may differ a lot. For the start we are storing them in memory and will print periodically to the log. It will not be the case with other metric aggregators. The fact that we can read counters map is specific for InMemoryMetrics and does not seem to be needed in other implementations I an imagine now.", "url": "https://github.com/artipie/artipie/pull/259#discussion_r450720559", "createdAt": "2020-07-07T09:10:08Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/metrics/memory/InMemoryMetrics.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import com.artipie.metrics.Metrics;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+/**\n+ * {@link Metrics} implementation storing data in memory.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Support gauges in InMemoryMetrics.\n+ *  `InMemoryMetrics.gauge()` method implementation should get or create an `InMemoryGauge` by name\n+ *  and store it. `InMemoryMetrics.counters()` method should be added\n+ *  to create snapshot of existing gauges. Implementations are expected to be similar to counters.\n+ */\n+final class InMemoryMetrics implements Metrics {\n+\n+    /**\n+     * Counters by name.\n+     */\n+    private final ConcurrentMap<String, InMemoryCounter> cnts = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public InMemoryCounter counter(final String name) {\n+        return this.cnts.computeIfAbsent(name, ignored -> new InMemoryCounter());\n+    }\n+\n+    @Override\n+    public InMemoryGauge gauge(final String name) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Get counters snapshot.\n+     *\n+     * @return Counters snapshot.\n+     */\n+    public Map<String, InMemoryCounter> counters() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY5NzM3Mg=="}, "originalCommit": {"oid": "5999b0493de4bca3626da30659591d17c5f8fb07"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcyNTQyNg==", "bodyText": "@olegmoz ok, thanks for the explanation", "url": "https://github.com/artipie/artipie/pull/259#discussion_r450725426", "createdAt": "2020-07-07T09:18:27Z", "author": {"login": "olenagerasimova"}, "path": "src/main/java/com/artipie/metrics/memory/InMemoryMetrics.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import com.artipie.metrics.Metrics;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+/**\n+ * {@link Metrics} implementation storing data in memory.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Support gauges in InMemoryMetrics.\n+ *  `InMemoryMetrics.gauge()` method implementation should get or create an `InMemoryGauge` by name\n+ *  and store it. `InMemoryMetrics.counters()` method should be added\n+ *  to create snapshot of existing gauges. Implementations are expected to be similar to counters.\n+ */\n+final class InMemoryMetrics implements Metrics {\n+\n+    /**\n+     * Counters by name.\n+     */\n+    private final ConcurrentMap<String, InMemoryCounter> cnts = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public InMemoryCounter counter(final String name) {\n+        return this.cnts.computeIfAbsent(name, ignored -> new InMemoryCounter());\n+    }\n+\n+    @Override\n+    public InMemoryGauge gauge(final String name) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Get counters snapshot.\n+     *\n+     * @return Counters snapshot.\n+     */\n+    public Map<String, InMemoryCounter> counters() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY5NzM3Mg=="}, "originalCommit": {"oid": "5999b0493de4bca3626da30659591d17c5f8fb07"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTk5MjkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/metrics/memory/InMemoryMetrics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0NjoxN1rOGt07Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToxMDo1M1rOGt109g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNjI3MA==", "bodyText": "@olegmoz l'd suggest returning Gauge and Counter instead of theirs implementation", "url": "https://github.com/artipie/artipie/pull/259#discussion_r450706270", "createdAt": "2020-07-07T08:46:17Z", "author": {"login": "olenagerasimova"}, "path": "src/main/java/com/artipie/metrics/memory/InMemoryMetrics.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import com.artipie.metrics.Metrics;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+/**\n+ * {@link Metrics} implementation storing data in memory.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Support gauges in InMemoryMetrics.\n+ *  `InMemoryMetrics.gauge()` method implementation should get or create an `InMemoryGauge` by name\n+ *  and store it. `InMemoryMetrics.counters()` method should be added\n+ *  to create snapshot of existing gauges. Implementations are expected to be similar to counters.\n+ */\n+final class InMemoryMetrics implements Metrics {\n+\n+    /**\n+     * Counters by name.\n+     */\n+    private final ConcurrentMap<String, InMemoryCounter> cnts = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public InMemoryCounter counter(final String name) {\n+        return this.cnts.computeIfAbsent(name, ignored -> new InMemoryCounter());\n+    }\n+\n+    @Override\n+    public InMemoryGauge gauge(final String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5999b0493de4bca3626da30659591d17c5f8fb07"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcyMTAxNA==", "bodyText": "@olenagerasimova that's intended, if we take a counter from InMemoryMetrics then we can read it's value", "url": "https://github.com/artipie/artipie/pull/259#discussion_r450721014", "createdAt": "2020-07-07T09:10:53Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/metrics/memory/InMemoryMetrics.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import com.artipie.metrics.Metrics;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+/**\n+ * {@link Metrics} implementation storing data in memory.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Support gauges in InMemoryMetrics.\n+ *  `InMemoryMetrics.gauge()` method implementation should get or create an `InMemoryGauge` by name\n+ *  and store it. `InMemoryMetrics.counters()` method should be added\n+ *  to create snapshot of existing gauges. Implementations are expected to be similar to counters.\n+ */\n+final class InMemoryMetrics implements Metrics {\n+\n+    /**\n+     * Counters by name.\n+     */\n+    private final ConcurrentMap<String, InMemoryCounter> cnts = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public InMemoryCounter counter(final String name) {\n+        return this.cnts.computeIfAbsent(name, ignored -> new InMemoryCounter());\n+    }\n+\n+    @Override\n+    public InMemoryGauge gauge(final String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNjI3MA=="}, "originalCommit": {"oid": "5999b0493de4bca3626da30659591d17c5f8fb07"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDAwNTQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/metrics/memory/InMemoryMetrics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0OTozM1rOGt1DFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToxMTo0MFrOGt12ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwODI0NQ==", "bodyText": "@olegmoz todo does not seem relevant: InMemoryMetrics.counters() is already implemented", "url": "https://github.com/artipie/artipie/pull/259#discussion_r450708245", "createdAt": "2020-07-07T08:49:33Z", "author": {"login": "olenagerasimova"}, "path": "src/main/java/com/artipie/metrics/memory/InMemoryMetrics.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import com.artipie.metrics.Metrics;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+/**\n+ * {@link Metrics} implementation storing data in memory.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Support gauges in InMemoryMetrics.\n+ *  `InMemoryMetrics.gauge()` method implementation should get or create an `InMemoryGauge` by name\n+ *  and store it. `InMemoryMetrics.counters()` method should be added", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5999b0493de4bca3626da30659591d17c5f8fb07"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcyMTQ3NQ==", "bodyText": "@olenagerasimova thanks, corrected", "url": "https://github.com/artipie/artipie/pull/259#discussion_r450721475", "createdAt": "2020-07-07T09:11:40Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/metrics/memory/InMemoryMetrics.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import com.artipie.metrics.Metrics;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+/**\n+ * {@link Metrics} implementation storing data in memory.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Support gauges in InMemoryMetrics.\n+ *  `InMemoryMetrics.gauge()` method implementation should get or create an `InMemoryGauge` by name\n+ *  and store it. `InMemoryMetrics.counters()` method should be added", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwODI0NQ=="}, "originalCommit": {"oid": "5999b0493de4bca3626da30659591d17c5f8fb07"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDE2NzI1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/metrics/memory/InMemoryMetricsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOTozMjozNlrOGt2nMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOTozNzowNFrOGt2xJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDczMzg3NA==", "bodyText": "@olegmoz since 0.9", "url": "https://github.com/artipie/artipie/pull/259#discussion_r450733874", "createdAt": "2020-07-07T09:32:36Z", "author": {"login": "Vatavuk"}, "path": "src/test/java/com/artipie/metrics/memory/InMemoryMetricsTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.hamcrest.collection.IsEmptyCollection;\n+import org.hamcrest.core.IsEqual;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.hamcrest.core.IsNot;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Tests for {@link InMemoryMetrics}.\n+ *\n+ * @since 0.8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35818ff9942ae60e76e5d59cc89e0500265feae5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDczNjQyMw==", "bodyText": "@Vatavuk thanks, fixed", "url": "https://github.com/artipie/artipie/pull/259#discussion_r450736423", "createdAt": "2020-07-07T09:37:04Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/metrics/memory/InMemoryMetricsTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics.memory;\n+\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.hamcrest.collection.IsEmptyCollection;\n+import org.hamcrest.core.IsEqual;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.hamcrest.core.IsNot;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Tests for {@link InMemoryMetrics}.\n+ *\n+ * @since 0.8", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDczMzg3NA=="}, "originalCommit": {"oid": "35818ff9942ae60e76e5d59cc89e0500265feae5"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2225, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}