{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3NjM2NzY5", "number": 6284, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMTo0NjozN1rOE2uiIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMTo0NjozN1rOE2uiIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODIwOTYzOnYy", "diffSide": "RIGHT", "path": "zap/src/test/java/org/zaproxy/zap/model/StandardParameterParserUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMTo0NjozN1rOHvq7Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMTo0NjozN1rOHvq7Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc0ODQyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void shouldHaveEmptyNamesForMissinNamesWhenRawParsing() {\n          \n          \n            \n                void shouldHaveEmptyNamesForMissingNamesWhenRawParsing() {", "url": "https://github.com/zaproxy/zaproxy/pull/6284#discussion_r519748426", "createdAt": "2020-11-09T11:46:37Z", "author": {"login": "ricekot"}, "path": "zap/src/test/java/org/zaproxy/zap/model/StandardParameterParserUnitTest.java", "diffHunk": "@@ -78,6 +80,114 @@ public void defaultParser() {\n         assertEquals(res2.get(3).getValue(), \"g\");\n     }\n \n+    @Test\n+    void shouldReturnEmptyListWhenParsingNullString() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseParameters(null);\n+        // Then\n+        assertThat(parameters, is(empty()));\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyNameValuePairWhenParsingEmptyString() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseParameters(\"\");\n+        // Then\n+        assertThat(parameters, hasSize(1));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"\")));\n+        assertThat(parameters.get(0).getValue(), is(equalTo(\"\")));\n+    }\n+\n+    @Test\n+    void shouldKeepOriginalNameIfMalformedWhenParsing() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseParameters(\"%x=1&b=2\");\n+        // Then\n+        assertThat(parameters, hasSize(2));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"%x\")));\n+        assertThat(parameters.get(0).getValue(), is(equalTo(\"1\")));\n+        assertThat(parameters.get(1).getName(), is(equalTo(\"b\")));\n+        assertThat(parameters.get(1).getValue(), is(equalTo(\"2\")));\n+    }\n+\n+    @Test\n+    void shouldKeepOriginalValueIfMalformedWhenParsing() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseParameters(\"a=%x&b=2\");\n+        // Then\n+        assertThat(parameters, hasSize(2));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"a\")));\n+        assertThat(parameters.get(0).getValue(), is(equalTo(\"%x\")));\n+        assertThat(parameters.get(1).getName(), is(equalTo(\"b\")));\n+        assertThat(parameters.get(1).getValue(), is(equalTo(\"2\")));\n+    }\n+\n+    @Test\n+    void shouldParseParametersKeepingEmptyValueWhenAbsent() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseParameters(\"a&b\");\n+        // Then\n+        assertThat(parameters, hasSize(2));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"a\")));\n+        assertThat(parameters.get(0).getValue(), is(equalTo(\"\")));\n+        assertThat(parameters.get(1).getName(), is(equalTo(\"b\")));\n+        assertThat(parameters.get(1).getValue(), is(equalTo(\"\")));\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyListWhenRawParsingNullString() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseRawParameters(null);\n+        // Then\n+        assertThat(parameters, is(empty()));\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyNameAndNullValueWhenRawParsingEmptyString() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseRawParameters(\"\");\n+        // Then\n+        assertThat(parameters, hasSize(1));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"\")));\n+        assertThat(parameters.get(0).getValue(), is(nullValue()));\n+    }\n+\n+    @Test\n+    void shouldNotDecodeNameNorValueWhenRawParsing() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseRawParameters(\"%x=1&b%25=%20\");\n+        // Then\n+        assertThat(parameters, hasSize(2));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"%x\")));\n+        assertThat(parameters.get(0).getValue(), is(equalTo(\"1\")));\n+        assertThat(parameters.get(1).getName(), is(equalTo(\"b%25\")));\n+        assertThat(parameters.get(1).getValue(), is(equalTo(\"%20\")));\n+    }\n+\n+    @Test\n+    void shouldHaveEmptyNamesForMissinNamesWhenRawParsing() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0887cd7f5d4cfdec1f20eaabd75c25060572ef91"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 606, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}