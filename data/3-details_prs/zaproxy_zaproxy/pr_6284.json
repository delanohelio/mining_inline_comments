{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3NjM2NzY5", "number": 6284, "title": "Address exceptions related to parameter parsing", "bodyText": "Do not allow null values as the older method didn't allow them, which\nwas causing exceptions in scan rules, also, catch exception thrown when\ndecoding name/value, for same reason.\nProvide a method that does not decode and allows null values.", "createdAt": "2020-11-09T09:57:59Z", "url": "https://github.com/zaproxy/zaproxy/pull/6284", "merged": true, "mergeCommit": {"oid": "a36a3487c2881590ae4e22fde159a454dd95a8d0"}, "closed": true, "closedAt": "2020-11-09T13:00:17Z", "author": {"login": "thc202"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdayL2oAFqTUyNjExNDUyOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABda0JhmAFqTUyNjIxMzQ0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MTE0NTI4", "url": "https://github.com/zaproxy/zaproxy/pull/6284#pullrequestreview-526114528", "createdAt": "2020-11-09T10:27:28Z", "commit": {"oid": "0887cd7f5d4cfdec1f20eaabd75c25060572ef91"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MTczNDgy", "url": "https://github.com/zaproxy/zaproxy/pull/6284#pullrequestreview-526173482", "createdAt": "2020-11-09T11:46:37Z", "commit": {"oid": "0887cd7f5d4cfdec1f20eaabd75c25060572ef91"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMTo0NjozN1rOHvq7Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMTo0NjozN1rOHvq7Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc0ODQyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void shouldHaveEmptyNamesForMissinNamesWhenRawParsing() {\n          \n          \n            \n                void shouldHaveEmptyNamesForMissingNamesWhenRawParsing() {", "url": "https://github.com/zaproxy/zaproxy/pull/6284#discussion_r519748426", "createdAt": "2020-11-09T11:46:37Z", "author": {"login": "ricekot"}, "path": "zap/src/test/java/org/zaproxy/zap/model/StandardParameterParserUnitTest.java", "diffHunk": "@@ -78,6 +80,114 @@ public void defaultParser() {\n         assertEquals(res2.get(3).getValue(), \"g\");\n     }\n \n+    @Test\n+    void shouldReturnEmptyListWhenParsingNullString() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseParameters(null);\n+        // Then\n+        assertThat(parameters, is(empty()));\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyNameValuePairWhenParsingEmptyString() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseParameters(\"\");\n+        // Then\n+        assertThat(parameters, hasSize(1));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"\")));\n+        assertThat(parameters.get(0).getValue(), is(equalTo(\"\")));\n+    }\n+\n+    @Test\n+    void shouldKeepOriginalNameIfMalformedWhenParsing() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseParameters(\"%x=1&b=2\");\n+        // Then\n+        assertThat(parameters, hasSize(2));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"%x\")));\n+        assertThat(parameters.get(0).getValue(), is(equalTo(\"1\")));\n+        assertThat(parameters.get(1).getName(), is(equalTo(\"b\")));\n+        assertThat(parameters.get(1).getValue(), is(equalTo(\"2\")));\n+    }\n+\n+    @Test\n+    void shouldKeepOriginalValueIfMalformedWhenParsing() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseParameters(\"a=%x&b=2\");\n+        // Then\n+        assertThat(parameters, hasSize(2));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"a\")));\n+        assertThat(parameters.get(0).getValue(), is(equalTo(\"%x\")));\n+        assertThat(parameters.get(1).getName(), is(equalTo(\"b\")));\n+        assertThat(parameters.get(1).getValue(), is(equalTo(\"2\")));\n+    }\n+\n+    @Test\n+    void shouldParseParametersKeepingEmptyValueWhenAbsent() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseParameters(\"a&b\");\n+        // Then\n+        assertThat(parameters, hasSize(2));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"a\")));\n+        assertThat(parameters.get(0).getValue(), is(equalTo(\"\")));\n+        assertThat(parameters.get(1).getName(), is(equalTo(\"b\")));\n+        assertThat(parameters.get(1).getValue(), is(equalTo(\"\")));\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyListWhenRawParsingNullString() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseRawParameters(null);\n+        // Then\n+        assertThat(parameters, is(empty()));\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyNameAndNullValueWhenRawParsingEmptyString() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseRawParameters(\"\");\n+        // Then\n+        assertThat(parameters, hasSize(1));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"\")));\n+        assertThat(parameters.get(0).getValue(), is(nullValue()));\n+    }\n+\n+    @Test\n+    void shouldNotDecodeNameNorValueWhenRawParsing() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseRawParameters(\"%x=1&b%25=%20\");\n+        // Then\n+        assertThat(parameters, hasSize(2));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"%x\")));\n+        assertThat(parameters.get(0).getValue(), is(equalTo(\"1\")));\n+        assertThat(parameters.get(1).getName(), is(equalTo(\"b%25\")));\n+        assertThat(parameters.get(1).getValue(), is(equalTo(\"%20\")));\n+    }\n+\n+    @Test\n+    void shouldHaveEmptyNamesForMissinNamesWhenRawParsing() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0887cd7f5d4cfdec1f20eaabd75c25060572ef91"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MTg1OTA4", "url": "https://github.com/zaproxy/zaproxy/pull/6284#pullrequestreview-526185908", "createdAt": "2020-11-09T12:04:26Z", "commit": {"oid": "0887cd7f5d4cfdec1f20eaabd75c25060572ef91"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dd97068ae94d7447627ae2721ad34681e060d2f", "author": {"user": {"login": "thc202", "name": null}}, "url": "https://github.com/zaproxy/zaproxy/commit/0dd97068ae94d7447627ae2721ad34681e060d2f", "committedDate": "2020-11-09T12:42:10Z", "message": "Address exceptions related to parameter parsing\n\nDo not allow null values as the older method didn't allow them, which\nwas causing exceptions in scan rules, also, catch exception thrown when\ndecoding name/value, for same reason.\nProvide a method that does not decode and allows null values.\n\nSigned-off-by: thc202 <thc202@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0887cd7f5d4cfdec1f20eaabd75c25060572ef91", "author": {"user": {"login": "thc202", "name": null}}, "url": "https://github.com/zaproxy/zaproxy/commit/0887cd7f5d4cfdec1f20eaabd75c25060572ef91", "committedDate": "2020-11-09T09:56:32Z", "message": "Address exceptions related to parameter parsing\n\nDo not allow null values as the older method didn't allow them, which\nwas causing exceptions in scan rules, also, catch exception thrown when\ndecoding name/value, for same reason.\nProvide a method that does not decode and allows null values.\n\nSigned-off-by: thc202 <thc202@gmail.com>"}, "afterCommit": {"oid": "0dd97068ae94d7447627ae2721ad34681e060d2f", "author": {"user": {"login": "thc202", "name": null}}, "url": "https://github.com/zaproxy/zaproxy/commit/0dd97068ae94d7447627ae2721ad34681e060d2f", "committedDate": "2020-11-09T12:42:10Z", "message": "Address exceptions related to parameter parsing\n\nDo not allow null values as the older method didn't allow them, which\nwas causing exceptions in scan rules, also, catch exception thrown when\ndecoding name/value, for same reason.\nProvide a method that does not decode and allows null values.\n\nSigned-off-by: thc202 <thc202@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MjEzNDQ1", "url": "https://github.com/zaproxy/zaproxy/pull/6284#pullrequestreview-526213445", "createdAt": "2020-11-09T12:44:44Z", "commit": {"oid": "0dd97068ae94d7447627ae2721ad34681e060d2f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 144, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}