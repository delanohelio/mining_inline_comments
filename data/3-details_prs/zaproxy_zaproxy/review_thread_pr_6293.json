{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5ODY1NjM0", "number": 6293, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjozMToyNFrOE-vEPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzowMDo0NFrOE-v7aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjE4MzAxOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjozMToyNFrOH8DQLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjozMToyNFrOH8DQLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcyOTkwMg==", "bodyText": "Could be merged.", "url": "https://github.com/zaproxy/zaproxy/pull/6293#discussion_r532729902", "createdAt": "2020-11-30T16:31:24Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java", "diffHunk": "@@ -290,29 +287,26 @@ public boolean isAuthenticated(HttpMessage msg, User user, boolean force) {\n             return true;\n         }\n \n-        List<String> contentToTest = new ArrayList<>();\n+        HttpMessage msgToTest;\n \n         switch (this.authCheckingStrategy) {\n             case EACH_REQ:\n-                contentToTest.add(msg.getRequestHeader().toString());\n-                contentToTest.add(msg.getRequestBody().toString());\n+                msgToTest = msg;\n                 break;\n             case EACH_REQ_RESP:\n-                contentToTest.add(msg.getRequestHeader().toString());\n-                contentToTest.add(msg.getRequestBody().toString());\n-                contentToTest.add(msg.getResponseHeader().toString());\n-                contentToTest.add(msg.getResponseBody().toString());\n+                msgToTest = msg;\n                 break;\n             case EACH_RESP:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ed4706ec88f7dafa246f3c4c142d7d150cfbd03"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjE4MzkxOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjozMTozNFrOH8DQqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjozMTozNFrOH8DQqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczMDAyNg==", "bodyText": "Could be merged.", "url": "https://github.com/zaproxy/zaproxy/pull/6293#discussion_r532730026", "createdAt": "2020-11-30T16:31:34Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java", "diffHunk": "@@ -385,15 +347,39 @@ public boolean isAuthenticated(HttpMessage msg, User user, boolean force) {\n                 return false;\n         }\n \n+        return evaluateAuthRequest(msgToTest, authState);\n+    }\n+\n+    public boolean evaluateAuthRequest(HttpMessage msg, AuthenticationState authState) {\n+        List<String> contentToTest = new ArrayList<>();\n+        switch (authCheckingStrategy) {\n+            case EACH_REQ:\n+                contentToTest.add(msg.getRequestHeader().toString());\n+                contentToTest.add(msg.getRequestBody().toString());\n+                break;\n+            case EACH_REQ_RESP:\n+                contentToTest.add(msg.getRequestHeader().toString());\n+                contentToTest.add(msg.getRequestBody().toString());\n+                contentToTest.add(msg.getResponseHeader().toString());\n+                contentToTest.add(msg.getResponseBody().toString());\n+                break;\n+            case EACH_RESP:\n+                contentToTest.add(msg.getResponseHeader().toString());\n+                contentToTest.add(msg.getResponseBody().toString());\n+                break;\n+            case POLL_URL:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ed4706ec88f7dafa246f3c4c142d7d150cfbd03"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjE4NDM1OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/extension/api/ApiImplementor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjozMTozOVrOH8DQ8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjozMTozOVrOH8DQ8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczMDA5Ng==", "bodyText": "getLong?", "url": "https://github.com/zaproxy/zaproxy/pull/6293#discussion_r532730096", "createdAt": "2020-11-30T16:31:39Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/api/ApiImplementor.java", "diffHunk": "@@ -517,6 +517,14 @@ protected int getParam(JSONObject params, String name, int defaultValue) {\n         }\n     }\n \n+    protected long getParam(JSONObject params, String name, long defaultValue) {\n+        try {\n+            return params.getInt(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ed4706ec88f7dafa246f3c4c142d7d150cfbd03"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjI4ODE5OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/extension/users/UsersAPI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjo1MzoyM1rOH8EQBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjo1MzoyM1rOH8EQBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc0NjI0Nw==", "bodyText": "Should return internal error?", "url": "https://github.com/zaproxy/zaproxy/pull/6293#discussion_r532746247", "createdAt": "2020-11-30T16:53:23Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/users/UsersAPI.java", "diffHunk": "@@ -233,6 +300,121 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc\n                 a.handleAction(actionParams);\n                 context.save();\n                 return ApiResponseElement.OK;\n+            case ACTION_AUTHENTICATE_AS_USER:\n+                user = getUser(params);\n+                int hId1 = user.getAuthenticationState().getLastAuthRequestHistoryId();\n+                user.authenticate();\n+                int hId2 = user.getAuthenticationState().getLastAuthRequestHistoryId();\n+\n+                if (hId2 > hId1) {\n+                    // Not all authentication methods result in an authentication request.\n+                    // In theory we could get a different one if other reqs are being made, but this\n+                    // is probably as safe as we can make it right now\n+                    ExtensionHistory extHistory =\n+                            Control.getSingleton()\n+                                    .getExtensionLoader()\n+                                    .getExtension(ExtensionHistory.class);\n+\n+                    if (extHistory != null) {\n+                        HistoryReference href = extHistory.getHistoryReference(hId2);\n+                        try {\n+                            HttpMessage authMsg = href.getHttpMessage();\n+                            ApiResponseSet<String> responseSet =\n+                                    ApiResponseConversionUtils.httpMessageToSet(hId2, authMsg);\n+                            responseSet.put(\n+                                    \"authSuccessful\",\n+                                    Boolean.toString(\n+                                            user.getContext()\n+                                                    .getAuthenticationMethod()\n+                                                    .evaluateAuthRequest(\n+                                                            authMsg,\n+                                                            user.getAuthenticationState())));\n+                            return responseSet;\n+                        } catch (Exception e) {\n+                            log.error(\"Failed to read auth request from db \" + hId2, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ed4706ec88f7dafa246f3c4c142d7d150cfbd03"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjI4ODQzOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/extension/users/UsersAPI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjo1MzoyNVrOH8EQMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjo1MzoyNVrOH8EQMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc0NjI4OA==", "bodyText": "Needs to handle IllegalArgumentException.", "url": "https://github.com/zaproxy/zaproxy/pull/6293#discussion_r532746288", "createdAt": "2020-11-30T16:53:25Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/users/UsersAPI.java", "diffHunk": "@@ -233,6 +300,121 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc\n                 a.handleAction(actionParams);\n                 context.save();\n                 return ApiResponseElement.OK;\n+            case ACTION_AUTHENTICATE_AS_USER:\n+                user = getUser(params);\n+                int hId1 = user.getAuthenticationState().getLastAuthRequestHistoryId();\n+                user.authenticate();\n+                int hId2 = user.getAuthenticationState().getLastAuthRequestHistoryId();\n+\n+                if (hId2 > hId1) {\n+                    // Not all authentication methods result in an authentication request.\n+                    // In theory we could get a different one if other reqs are being made, but this\n+                    // is probably as safe as we can make it right now\n+                    ExtensionHistory extHistory =\n+                            Control.getSingleton()\n+                                    .getExtensionLoader()\n+                                    .getExtension(ExtensionHistory.class);\n+\n+                    if (extHistory != null) {\n+                        HistoryReference href = extHistory.getHistoryReference(hId2);\n+                        try {\n+                            HttpMessage authMsg = href.getHttpMessage();\n+                            ApiResponseSet<String> responseSet =\n+                                    ApiResponseConversionUtils.httpMessageToSet(hId2, authMsg);\n+                            responseSet.put(\n+                                    \"authSuccessful\",\n+                                    Boolean.toString(\n+                                            user.getContext()\n+                                                    .getAuthenticationMethod()\n+                                                    .evaluateAuthRequest(\n+                                                            authMsg,\n+                                                            user.getAuthenticationState())));\n+                            return responseSet;\n+                        } catch (Exception e) {\n+                            log.error(\"Failed to read auth request from db \" + hId2, e);\n+                        }\n+                    }\n+                }\n+\n+                return ApiResponseElement.OK;\n+\n+            case ACTION_POLL_AS_USER:\n+                user = getUser(params);\n+                try {\n+                    HttpMessage msg = user.getContext().getAuthenticationMethod().pollAsUser(user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ed4706ec88f7dafa246f3c4c142d7d150cfbd03"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjMxMTAyOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/extension/users/UsersAPI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjo1Nzo1MVrOH8EeEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjo1Nzo1MVrOH8EeEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc0OTg0MA==", "bodyText": "String.valueOf(...)", "url": "https://github.com/zaproxy/zaproxy/pull/6293#discussion_r532749840", "createdAt": "2020-11-30T16:57:51Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/users/UsersAPI.java", "diffHunk": "@@ -260,6 +442,57 @@ private ApiResponse buildResponseFromUser(User u) {\n         return new ApiResponseSet<>(\"user\", fields);\n     }\n \n+    private ApiResponse buildResponseFromAuthState(AuthenticationState state) {\n+        Map<String, String> fields = new HashMap<>();\n+        fields.put(\"lastSuccessfulAuthTimeInMs\", Long.toString(state.getLastSuccessfulAuthTime()));\n+        fields.put(\"lastAuthFailure\", state.getLastAuthFailure());\n+        fields.put(\"lastAuthHistoryId\", Integer.toString(state.getLastAuthRequestHistoryId()));\n+        fields.put(PARAM_LAST_POLL_RESULT, \"\" + state.getLastPollResult());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ed4706ec88f7dafa246f3c4c142d7d150cfbd03"}, "originalPosition": 267}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjMxMTIzOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/extension/users/UsersAPI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjo1Nzo1NFrOH8EeMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjo1Nzo1NFrOH8EeMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc0OTg3Mw==", "bodyText": ".toString()", "url": "https://github.com/zaproxy/zaproxy/pull/6293#discussion_r532749873", "createdAt": "2020-11-30T16:57:54Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/users/UsersAPI.java", "diffHunk": "@@ -260,6 +442,57 @@ private ApiResponse buildResponseFromUser(User u) {\n         return new ApiResponseSet<>(\"user\", fields);\n     }\n \n+    private ApiResponse buildResponseFromAuthState(AuthenticationState state) {\n+        Map<String, String> fields = new HashMap<>();\n+        fields.put(\"lastSuccessfulAuthTimeInMs\", Long.toString(state.getLastSuccessfulAuthTime()));\n+        fields.put(\"lastAuthFailure\", state.getLastAuthFailure());\n+        fields.put(\"lastAuthHistoryId\", Integer.toString(state.getLastAuthRequestHistoryId()));\n+        fields.put(PARAM_LAST_POLL_RESULT, \"\" + state.getLastPollResult());\n+        fields.put(PARAM_REQUESTS_SINCE_LAST_POLL, Integer.toString(state.getRequestsSincePoll()));\n+        fields.put(PARAM_LAST_POLL_TIME_IN_MS, Long.toString(state.getLastPollTime()));\n+        return new ApiResponseSet<>(\"authenticationState\", fields);\n+    }\n+\n+    private ApiResponse buildResponseFromAuthSession(WebSession session) {\n+        ApiResponseList list = new ApiResponseList(\"authenticationSession\");\n+        if (session == null) {\n+            return list;\n+        }\n+        HttpState state = session.getHttpState();\n+        ApiResponseList cookieList = new ApiResponseList(\"cookies\");\n+        for (Cookie cookie : state.getCookies()) {\n+            Map<String, String> fields = new HashMap<>();\n+            fields.put(PARAM_COOKIE_DOMAIN, cookie.getDomain());\n+            fields.put(PARAM_COOKIE_NAME, cookie.getName());\n+            fields.put(PARAM_COOKIE_VALUE, cookie.getValue());\n+            fields.put(PARAM_COOKIE_PATH, cookie.getPath());\n+            fields.put(\"expires\", \"\" + cookie.getExpiryDate());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ed4706ec88f7dafa246f3c4c142d7d150cfbd03"}, "originalPosition": 286}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjMxMTQwOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/extension/users/UsersAPI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjo1Nzo1NlrOH8EeRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjo1Nzo1NlrOH8EeRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc0OTg5NA==", "bodyText": "Boolean.toString(...)", "url": "https://github.com/zaproxy/zaproxy/pull/6293#discussion_r532749894", "createdAt": "2020-11-30T16:57:56Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/users/UsersAPI.java", "diffHunk": "@@ -260,6 +442,57 @@ private ApiResponse buildResponseFromUser(User u) {\n         return new ApiResponseSet<>(\"user\", fields);\n     }\n \n+    private ApiResponse buildResponseFromAuthState(AuthenticationState state) {\n+        Map<String, String> fields = new HashMap<>();\n+        fields.put(\"lastSuccessfulAuthTimeInMs\", Long.toString(state.getLastSuccessfulAuthTime()));\n+        fields.put(\"lastAuthFailure\", state.getLastAuthFailure());\n+        fields.put(\"lastAuthHistoryId\", Integer.toString(state.getLastAuthRequestHistoryId()));\n+        fields.put(PARAM_LAST_POLL_RESULT, \"\" + state.getLastPollResult());\n+        fields.put(PARAM_REQUESTS_SINCE_LAST_POLL, Integer.toString(state.getRequestsSincePoll()));\n+        fields.put(PARAM_LAST_POLL_TIME_IN_MS, Long.toString(state.getLastPollTime()));\n+        return new ApiResponseSet<>(\"authenticationState\", fields);\n+    }\n+\n+    private ApiResponse buildResponseFromAuthSession(WebSession session) {\n+        ApiResponseList list = new ApiResponseList(\"authenticationSession\");\n+        if (session == null) {\n+            return list;\n+        }\n+        HttpState state = session.getHttpState();\n+        ApiResponseList cookieList = new ApiResponseList(\"cookies\");\n+        for (Cookie cookie : state.getCookies()) {\n+            Map<String, String> fields = new HashMap<>();\n+            fields.put(PARAM_COOKIE_DOMAIN, cookie.getDomain());\n+            fields.put(PARAM_COOKIE_NAME, cookie.getName());\n+            fields.put(PARAM_COOKIE_VALUE, cookie.getValue());\n+            fields.put(PARAM_COOKIE_PATH, cookie.getPath());\n+            fields.put(\"expires\", \"\" + cookie.getExpiryDate());\n+            fields.put(PARAM_COOKIE_SECURE, \"\" + cookie.getSecure());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ed4706ec88f7dafa246f3c4c142d7d150cfbd03"}, "originalPosition": 287}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjMyNDI0OnYy", "diffSide": "RIGHT", "path": "zap/src/main/resources/org/zaproxy/zap/resources/Messages.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzowMDo0NFrOH8EmRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzowMDo0NFrOH8EmRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc1MTk0Mg==", "bodyText": "on \u2192 or?\nMs \u2192 ms?", "url": "https://github.com/zaproxy/zaproxy/pull/6293#discussion_r532751942", "createdAt": "2020-11-30T17:00:44Z", "author": {"login": "thc202"}, "path": "zap/src/main/resources/org/zaproxy/zap/resources/Messages.properties", "diffHunk": "@@ -3160,34 +3160,61 @@ uiutils.desc = Core UI related functionality.\n uiutils.name = Core UI Extension\n \n users.api.action.newUser = Creates a new user with the given name for the context with the given ID.\n-users.api.action.newUser.param.contextId = \n+users.api.action.newUser.param.contextId = The Context Id\n users.api.action.newUser.param.name = \n users.api.action.removeUser = Removes the user with the given ID that belongs to the context with the given ID.\n-users.api.action.removeUser.param.contextId = \n-users.api.action.removeUser.param.userId = \n+users.api.action.removeUser.param.contextId =  The Context Id\n+users.api.action.removeUser.param.userId = The User Id\n users.api.action.setAuthenticationCredentials = Sets the authentication credentials for the user with the given ID that belongs to the context with the given ID.\n-users.api.action.setAuthenticationCredentials.param.contextId = \n-users.api.action.setAuthenticationCredentials.param.userId = \n+users.api.action.setAuthenticationCredentials.param.contextId = The Context Id\n+users.api.action.setAuthenticationCredentials.param.userId = The User Id\n users.api.action.setAuthenticationCredentials.param.authCredentialsConfigParams = \n+users.api.action.setAuthenticationState = Sets fields in the authentication state for the user identified by the Context and User Ids.\n+users.api.action.setAuthenticationState.param.contextId = The Context Id\n+users.api.action.setAuthenticationState.param.userId = The User Id\n+users.api.action.setAuthenticationState.param.lastPollResult = Last Poll Result - optional, should be 'true' or 'false'.\n+users.api.action.setAuthenticationState.param.lastPollTimeInMs = Last Poll Time in Milliseconds - optional, should be a long on 'NOW' for the current time in Ms.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ed4706ec88f7dafa246f3c4c142d7d150cfbd03"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 608, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}