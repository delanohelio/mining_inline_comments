{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5NDAwNzA1", "number": 6231, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMTo0MDo1OFrOFHwvYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMTo1MTo1NlrOFHw7Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjgyOTEyOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMTo0MDo1OFrOIJVd2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMzo1NzoxNlrOIKlftg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1OTgwMA==", "bodyText": "Should be reverted.", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546659800", "createdAt": "2020-12-21T11:40:58Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java", "diffHunk": "@@ -40,7 +42,7 @@\n     /**\n      * The Constant log.\n      *\n-     * @deprecated (2.10.0) Use {@link #getLogger()} instead.\n+     * @deprecated (TODO add version) Use {@link #getLogger()} instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MDk5OA==", "bodyText": "Resolved via last commit", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547970998", "createdAt": "2020-12-23T13:57:16Z", "author": {"login": "vladidx"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java", "diffHunk": "@@ -40,7 +42,7 @@\n     /**\n      * The Constant log.\n      *\n-     * @deprecated (2.10.0) Use {@link #getLogger()} instead.\n+     * @deprecated (TODO add version) Use {@link #getLogger()} instead.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1OTgwMA=="}, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjgyOTE5OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMTo0MTowMFrOIJVd6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMzo1NzoyOVrOIKlgEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1OTgxNw==", "bodyText": "Should be reverted.", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546659817", "createdAt": "2020-12-21T11:41:00Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java", "diffHunk": "@@ -52,7 +54,7 @@\n      * Gets the logger.\n      *\n      * @return the logger, never {@code null}.\n-     * @since 2.10.0\n+     * @since TODO add version", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MTA4OA==", "bodyText": "Resolved via last commit", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547971088", "createdAt": "2020-12-23T13:57:29Z", "author": {"login": "vladidx"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java", "diffHunk": "@@ -52,7 +54,7 @@\n      * Gets the logger.\n      *\n      * @return the logger, never {@code null}.\n-     * @since 2.10.0\n+     * @since TODO add version", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1OTgxNw=="}, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjgyOTM1OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMTo0MTowNFrOIJVeAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMzo1ODozM1rOIKliCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1OTg0Mw==", "bodyText": "This should be the only method being added, older methods should be deprecated.", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546659843", "createdAt": "2020-12-21T11:41:04Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java", "diffHunk": "@@ -76,6 +78,18 @@ public void removeSpiderParserListener(SpiderParserListener listener) {\n         this.listeners.remove(listener);\n     }\n \n+    /**\n+     * Notify the listeners that a resource was found.\n+     *\n+     * @param resourceFound the http message containing the response.\n+     * @since 2.11.0\n+     */\n+    protected void notifyListenersResourceFound(SpiderResourceFound resourceFound) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MTU5Mw==", "bodyText": "Resolved via last commit, previous notify... methods are now deprecated", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547971593", "createdAt": "2020-12-23T13:58:33Z", "author": {"login": "vladidx"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java", "diffHunk": "@@ -76,6 +78,18 @@ public void removeSpiderParserListener(SpiderParserListener listener) {\n         this.listeners.remove(listener);\n     }\n \n+    /**\n+     * Notify the listeners that a resource was found.\n+     *\n+     * @param resourceFound the http message containing the response.\n+     * @since 2.11.0\n+     */\n+    protected void notifyListenersResourceFound(SpiderResourceFound resourceFound) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1OTg0Mw=="}, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjgzMDQxOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMTo0MToyNFrOIJVekQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMzo1OToxOVrOIKljTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1OTk4NQ==", "bodyText": "Better provide a builder, can be immutable.", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546659985", "createdAt": "2020-12-21T11:41:24Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.spider.parser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import org.parosproxy.paros.network.HttpHeaderField;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+\n+/**\n+ * Class SpiderResourceFound is used to store information about found resources by spider parsers.\n+ *\n+ * @since 2.11.0\n+ */\n+public class SpiderResourceFound {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MTkxOQ==", "bodyText": "Resolved via last commit, SpiderResourceFound now offers a builder returning immutable instances", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547971919", "createdAt": "2020-12-23T13:59:19Z", "author": {"login": "vladidx"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.spider.parser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import org.parosproxy.paros.network.HttpHeaderField;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+\n+/**\n+ * Class SpiderResourceFound is used to store information about found resources by spider parsers.\n+ *\n+ * @since 2.11.0\n+ */\n+public class SpiderResourceFound {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1OTk4NQ=="}, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjgzMDU1OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMTo0MToyNlrOIJVepQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMzo1OTozN1rOIKljtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2MDAwNQ==", "bodyText": "The default should be Collections.emptyList(), otherwise it will create a lot of garbage.", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546660005", "createdAt": "2020-12-21T11:41:26Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.spider.parser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import org.parosproxy.paros.network.HttpHeaderField;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+\n+/**\n+ * Class SpiderResourceFound is used to store information about found resources by spider parsers.\n+ *\n+ * @since 2.11.0\n+ */\n+public class SpiderResourceFound {\n+    /** Original response message. */\n+    private HttpMessage responseMessage;\n+    /** Spider depth for resource. */\n+    private int depth;\n+    /** HTTP method for resource. */\n+    private String method;\n+    /** Uniform resource identifier of resource. */\n+    private String uri;\n+    /** Body for the resource. */\n+    private String body = \"\";\n+    /** Defines resource as useful or not useful in the fetching process. */\n+    private boolean shouldIgnore = false;\n+    /** Additional request headers to be passed for the resource. */\n+    private List<HttpHeaderField> requestHeaders = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MjAyMQ==", "bodyText": "Resolved via last commit, now part of the builder", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547972021", "createdAt": "2020-12-23T13:59:37Z", "author": {"login": "vladidx"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.spider.parser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import org.parosproxy.paros.network.HttpHeaderField;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+\n+/**\n+ * Class SpiderResourceFound is used to store information about found resources by spider parsers.\n+ *\n+ * @since 2.11.0\n+ */\n+public class SpiderResourceFound {\n+    /** Original response message. */\n+    private HttpMessage responseMessage;\n+    /** Spider depth for resource. */\n+    private int depth;\n+    /** HTTP method for resource. */\n+    private String method;\n+    /** Uniform resource identifier of resource. */\n+    private String uri;\n+    /** Body for the resource. */\n+    private String body = \"\";\n+    /** Defines resource as useful or not useful in the fetching process. */\n+    private boolean shouldIgnore = false;\n+    /** Additional request headers to be passed for the resource. */\n+    private List<HttpHeaderField> requestHeaders = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2MDAwNQ=="}, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjgzMjE0OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMTo0MjowMlrOIJVfnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDowMDoxNVrOIKlkqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2MDI1Mw==", "bodyText": "Typo in resource.", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546660253", "createdAt": "2020-12-21T11:42:02Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderTask.java", "diffHunk": "@@ -76,73 +78,20 @@\n \n     /**\n      * Instantiates a new spider task using the target URI. The purpose of this task is to crawl the\n-     * given uri, using the provided method, find any other uris in the fetched resource and create\n-     * other tasks.\n-     *\n-     * @param parent the spider controlling the crawling process\n-     * @param uri the uri that this task should process\n-     * @param depth the depth where this uri is located in the spidering process\n-     * @param method the HTTP method that should be used to fetch the resource\n-     */\n-    public SpiderTask(Spider parent, URI uri, int depth, String method) {\n-        this(parent, null, uri, depth, method, null);\n-    }\n-\n-    /**\n-     * Instantiates a new spider task using the target URI. The purpose of this task is to crawl the\n-     * given uri, using the provided method, find any other uris in the fetched resource and create\n-     * other tasks.\n-     *\n-     * @param parent the spider controlling the crawling process\n-     * @param sourceUri the URI where the given {@code uri} was found\n-     * @param uri the uri that this task should process\n-     * @param depth the depth where this uri is located in the spidering process\n-     * @param method the HTTP method that should be used to fetch the resource\n-     * @since 2.4.0\n-     */\n-    public SpiderTask(Spider parent, URI sourceUri, URI uri, int depth, String method) {\n-        this(parent, sourceUri, uri, depth, method, null);\n-    }\n-\n-    /**\n-     * Instantiates a new spider task using the target URI. The purpose of this task is to crawl the\n-     * given uri, using the provided method, find any other uris in the fetched resource and create\n-     * other tasks.\n-     *\n-     * <p>The body of the request message is also provided in the {@literal requestBody} parameter\n-     * and will be used when fetching the resource from the specified uri.\n-     *\n-     * @param parent the spider controlling the crawling process\n-     * @param uri the uri that this task should process\n-     * @param depth the depth where this uri is located in the spidering process\n-     * @param method the HTTP method that should be used to fetch the resource\n-     * @param requestBody the body of the request\n-     */\n-    public SpiderTask(Spider parent, URI uri, int depth, String method, String requestBody) {\n-        this(parent, null, uri, depth, method, requestBody);\n-    }\n-\n-    /**\n-     * Instantiates a new spider task using the target URI. The purpose of this task is to crawl the\n-     * given uri, using the provided method, find any other uris in the fetched resource and create\n-     * other tasks.\n+     * given uri, using the provided method and supplied request headers, find any other uris in the\n+     * fetched resource and create other tasks.\n      *\n      * <p>The body of the request message is also provided in the {@literal requestBody} parameter\n      * and will be used when fetching the resource from the specified uri.\n      *\n      * @param parent the spider controlling the crawling process\n-     * @param sourceUri the URI where the given {@code uri} was found\n+     * @param resoureFound information about found resource\n      * @param uri the uri that this task should process\n-     * @param depth the depth where this uri is located in the spidering process\n-     * @param method the HTTP method that should be used to fetch the resource\n-     * @param requestBody the body of the request\n-     * @since 2.4.0\n+     * @since 2.11.0\n      */\n-    public SpiderTask(\n-            Spider parent, URI sourceUri, URI uri, int depth, String method, String requestBody) {\n+    public SpiderTask(Spider parent, SpiderResourceFound resoureFound, URI uri) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MjI2Ng==", "bodyText": "Corrected via last commit", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547972266", "createdAt": "2020-12-23T14:00:15Z", "author": {"login": "vladidx"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderTask.java", "diffHunk": "@@ -76,73 +78,20 @@\n \n     /**\n      * Instantiates a new spider task using the target URI. The purpose of this task is to crawl the\n-     * given uri, using the provided method, find any other uris in the fetched resource and create\n-     * other tasks.\n-     *\n-     * @param parent the spider controlling the crawling process\n-     * @param uri the uri that this task should process\n-     * @param depth the depth where this uri is located in the spidering process\n-     * @param method the HTTP method that should be used to fetch the resource\n-     */\n-    public SpiderTask(Spider parent, URI uri, int depth, String method) {\n-        this(parent, null, uri, depth, method, null);\n-    }\n-\n-    /**\n-     * Instantiates a new spider task using the target URI. The purpose of this task is to crawl the\n-     * given uri, using the provided method, find any other uris in the fetched resource and create\n-     * other tasks.\n-     *\n-     * @param parent the spider controlling the crawling process\n-     * @param sourceUri the URI where the given {@code uri} was found\n-     * @param uri the uri that this task should process\n-     * @param depth the depth where this uri is located in the spidering process\n-     * @param method the HTTP method that should be used to fetch the resource\n-     * @since 2.4.0\n-     */\n-    public SpiderTask(Spider parent, URI sourceUri, URI uri, int depth, String method) {\n-        this(parent, sourceUri, uri, depth, method, null);\n-    }\n-\n-    /**\n-     * Instantiates a new spider task using the target URI. The purpose of this task is to crawl the\n-     * given uri, using the provided method, find any other uris in the fetched resource and create\n-     * other tasks.\n-     *\n-     * <p>The body of the request message is also provided in the {@literal requestBody} parameter\n-     * and will be used when fetching the resource from the specified uri.\n-     *\n-     * @param parent the spider controlling the crawling process\n-     * @param uri the uri that this task should process\n-     * @param depth the depth where this uri is located in the spidering process\n-     * @param method the HTTP method that should be used to fetch the resource\n-     * @param requestBody the body of the request\n-     */\n-    public SpiderTask(Spider parent, URI uri, int depth, String method, String requestBody) {\n-        this(parent, null, uri, depth, method, requestBody);\n-    }\n-\n-    /**\n-     * Instantiates a new spider task using the target URI. The purpose of this task is to crawl the\n-     * given uri, using the provided method, find any other uris in the fetched resource and create\n-     * other tasks.\n+     * given uri, using the provided method and supplied request headers, find any other uris in the\n+     * fetched resource and create other tasks.\n      *\n      * <p>The body of the request message is also provided in the {@literal requestBody} parameter\n      * and will be used when fetching the resource from the specified uri.\n      *\n      * @param parent the spider controlling the crawling process\n-     * @param sourceUri the URI where the given {@code uri} was found\n+     * @param resoureFound information about found resource\n      * @param uri the uri that this task should process\n-     * @param depth the depth where this uri is located in the spidering process\n-     * @param method the HTTP method that should be used to fetch the resource\n-     * @param requestBody the body of the request\n-     * @since 2.4.0\n+     * @since 2.11.0\n      */\n-    public SpiderTask(\n-            Spider parent, URI sourceUri, URI uri, int depth, String method, String requestBody) {\n+    public SpiderTask(Spider parent, SpiderResourceFound resoureFound, URI uri) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2MDI1Mw=="}, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjg1MDQzOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMTo0ODozM1rOIJVqQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDowMDozMlrOIKllGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2Mjk3OA==", "bodyText": "The message where the resource was found.", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546662978", "createdAt": "2020-12-21T11:48:33Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.spider.parser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import org.parosproxy.paros.network.HttpHeaderField;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+\n+/**\n+ * Class SpiderResourceFound is used to store information about found resources by spider parsers.\n+ *\n+ * @since 2.11.0\n+ */\n+public class SpiderResourceFound {\n+    /** Original response message. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MjM3Ng==", "bodyText": "Corrected via last commit", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547972376", "createdAt": "2020-12-23T14:00:32Z", "author": {"login": "vladidx"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.spider.parser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import org.parosproxy.paros.network.HttpHeaderField;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+\n+/**\n+ * Class SpiderResourceFound is used to store information about found resources by spider parsers.\n+ *\n+ * @since 2.11.0\n+ */\n+public class SpiderResourceFound {\n+    /** Original response message. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2Mjk3OA=="}, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjg1MDUxOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMTo0ODozNlrOIJVqUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDowMDo0NVrOIKllXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2Mjk5NA==", "bodyText": "message.", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546662994", "createdAt": "2020-12-21T11:48:36Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.spider.parser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import org.parosproxy.paros.network.HttpHeaderField;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+\n+/**\n+ * Class SpiderResourceFound is used to store information about found resources by spider parsers.\n+ *\n+ * @since 2.11.0\n+ */\n+public class SpiderResourceFound {\n+    /** Original response message. */\n+    private HttpMessage responseMessage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MjQ0Nw==", "bodyText": "Corrected via last commit", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547972447", "createdAt": "2020-12-23T14:00:45Z", "author": {"login": "vladidx"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.spider.parser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import org.parosproxy.paros.network.HttpHeaderField;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+\n+/**\n+ * Class SpiderResourceFound is used to store information about found resources by spider parsers.\n+ *\n+ * @since 2.11.0\n+ */\n+public class SpiderResourceFound {\n+    /** Original response message. */\n+    private HttpMessage responseMessage;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2Mjk5NA=="}, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjg1MTk5OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMTo0OTowNlrOIJVrIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDowMTozMlrOIKlmqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2MzIwMA==", "bodyText": "The request header is never null.", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546663200", "createdAt": "2020-12-21T11:49:06Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderTask.java", "diffHunk": "@@ -153,14 +102,29 @@ public SpiderTask(\n         // using\n         // HistoryReference\n         try {\n-            HttpRequestHeader requestHeader = new HttpRequestHeader(method, uri, HttpHeader.HTTP11);\n-            if (sourceUri != null && parent.getSpiderParam().isSendRefererHeader()) {\n-                requestHeader.setHeader(HttpRequestHeader.REFERER, sourceUri.toString());\n+            HttpRequestHeader requestHeader =\n+                    new HttpRequestHeader(resoureFound.getMethod(), uri, HttpHeader.HTTP11);\n+            if (resoureFound.getRequestHeaders() != null) {\n+                // Intentionally adding supplied request headers before the referer header\n+                // to prioritize \"send referer header\" option\n+                for (HttpHeaderField header : resoureFound.getRequestHeaders()) {\n+                    if (header != null && header.getName() != null && header.getValue() != null) {\n+                        requestHeader.addHeader(header.getName(), header.getValue());\n+                    }\n+                }\n+            }\n+            if (resoureFound.getResponseMessage() != null\n+                    && resoureFound.getResponseMessage().getRequestHeader() != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3Mjc3Nw==", "bodyText": "Corrected via last commit", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547972777", "createdAt": "2020-12-23T14:01:32Z", "author": {"login": "vladidx"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderTask.java", "diffHunk": "@@ -153,14 +102,29 @@ public SpiderTask(\n         // using\n         // HistoryReference\n         try {\n-            HttpRequestHeader requestHeader = new HttpRequestHeader(method, uri, HttpHeader.HTTP11);\n-            if (sourceUri != null && parent.getSpiderParam().isSendRefererHeader()) {\n-                requestHeader.setHeader(HttpRequestHeader.REFERER, sourceUri.toString());\n+            HttpRequestHeader requestHeader =\n+                    new HttpRequestHeader(resoureFound.getMethod(), uri, HttpHeader.HTTP11);\n+            if (resoureFound.getRequestHeaders() != null) {\n+                // Intentionally adding supplied request headers before the referer header\n+                // to prioritize \"send referer header\" option\n+                for (HttpHeaderField header : resoureFound.getRequestHeaders()) {\n+                    if (header != null && header.getName() != null && header.getValue() != null) {\n+                        requestHeader.addHeader(header.getName(), header.getValue());\n+                    }\n+                }\n+            }\n+            if (resoureFound.getResponseMessage() != null\n+                    && resoureFound.getResponseMessage().getRequestHeader() != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2MzIwMA=="}, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjg1ODI3OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMTo1MTo0MVrOIJVuzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDowMjowMlrOIKlnYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2NDE0Mg==", "bodyText": "Is this needed?", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546664142", "createdAt": "2020-12-21T11:51:41Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java", "diffHunk": "@@ -251,46 +248,71 @@ public void init() {\n \n     /** Clears the previous process. */\n     public void reset() {\n-        visitedGet.clear();\n-        visitedPost.clear();\n+        visitedResources.clear();\n \n         for (SpiderParser parser : parsers) {\n             parser.removeSpiderParserListener(this);\n         }\n     }\n \n-    @Override\n-    public void resourceURIFound(\n-            HttpMessage responseMessage, int depth, String uri, boolean shouldIgnore) {\n-        log.debug(\"New resource found: \" + uri);\n+    /**\n+     * Builds a canonical identifier for found resources considering the method, URI, headers, and\n+     * body.\n+     *\n+     * @param uri uniform resource identifier for resource\n+     * @param resourceFound resource found\n+     * @return identifier as a string representation usable for equality checks\n+     */\n+    private String buildCanonicalResourceIdentifier(URI uri, SpiderResourceFound resourceFound)\n+            throws URIException {\n+        StringBuilder identifierBuilder = new StringBuilder(50);\n+        if (resourceFound != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3Mjk2Mw==", "bodyText": "Removed check in last commit as not needed", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547972963", "createdAt": "2020-12-23T14:02:02Z", "author": {"login": "vladidx"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java", "diffHunk": "@@ -251,46 +248,71 @@ public void init() {\n \n     /** Clears the previous process. */\n     public void reset() {\n-        visitedGet.clear();\n-        visitedPost.clear();\n+        visitedResources.clear();\n \n         for (SpiderParser parser : parsers) {\n             parser.removeSpiderParserListener(this);\n         }\n     }\n \n-    @Override\n-    public void resourceURIFound(\n-            HttpMessage responseMessage, int depth, String uri, boolean shouldIgnore) {\n-        log.debug(\"New resource found: \" + uri);\n+    /**\n+     * Builds a canonical identifier for found resources considering the method, URI, headers, and\n+     * body.\n+     *\n+     * @param uri uniform resource identifier for resource\n+     * @param resourceFound resource found\n+     * @return identifier as a string representation usable for equality checks\n+     */\n+    private String buildCanonicalResourceIdentifier(URI uri, SpiderResourceFound resourceFound)\n+            throws URIException {\n+        StringBuilder identifierBuilder = new StringBuilder(50);\n+        if (resourceFound != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2NDE0Mg=="}, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjg1ODU0OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMTo1MTo0NVrOIJVu7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDowMjoyOVrOIKloHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2NDE3NQ==", "bodyText": "Better do these validations when the resource is created, here it should just be used.", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546664175", "createdAt": "2020-12-21T11:51:45Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java", "diffHunk": "@@ -251,46 +248,71 @@ public void init() {\n \n     /** Clears the previous process. */\n     public void reset() {\n-        visitedGet.clear();\n-        visitedPost.clear();\n+        visitedResources.clear();\n \n         for (SpiderParser parser : parsers) {\n             parser.removeSpiderParserListener(this);\n         }\n     }\n \n-    @Override\n-    public void resourceURIFound(\n-            HttpMessage responseMessage, int depth, String uri, boolean shouldIgnore) {\n-        log.debug(\"New resource found: \" + uri);\n+    /**\n+     * Builds a canonical identifier for found resources considering the method, URI, headers, and\n+     * body.\n+     *\n+     * @param uri uniform resource identifier for resource\n+     * @param resourceFound resource found\n+     * @return identifier as a string representation usable for equality checks\n+     */\n+    private String buildCanonicalResourceIdentifier(URI uri, SpiderResourceFound resourceFound)\n+            throws URIException {\n+        StringBuilder identifierBuilder = new StringBuilder(50);\n+        if (resourceFound != null) {\n+            String visitedURI =\n+                    URLCanonicalizer.buildCleanedParametersURIRepresentation(\n+                            uri,\n+                            spider.getSpiderParam().getHandleParameters(),\n+                            spider.getSpiderParam().isHandleODataParametersVisited());\n+            identifierBuilder.append(resourceFound.getMethod());\n+            identifierBuilder.append(\" \");\n+            identifierBuilder.append(visitedURI);\n+            identifierBuilder.append(\"\\n\");\n+            String canonicalHeaderRepresentation =\n+                    getCanonicalHeadersString(resourceFound.getRequestHeaders());\n+            identifierBuilder.append(\"\\n\");\n+            identifierBuilder.append(resourceFound.getBody());\n+        }\n+        return identifierBuilder.toString();\n+    }\n \n-        if (uri == null) {\n+    @Override\n+    public void resourceFound(SpiderResourceFound resourceFound) {\n+        if (resourceFound == null\n+                || resourceFound.getUri() == null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MzE1MQ==", "bodyText": "Resolved via last commit, validations are now done as part of the builder", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547973151", "createdAt": "2020-12-23T14:02:29Z", "author": {"login": "vladidx"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java", "diffHunk": "@@ -251,46 +248,71 @@ public void init() {\n \n     /** Clears the previous process. */\n     public void reset() {\n-        visitedGet.clear();\n-        visitedPost.clear();\n+        visitedResources.clear();\n \n         for (SpiderParser parser : parsers) {\n             parser.removeSpiderParserListener(this);\n         }\n     }\n \n-    @Override\n-    public void resourceURIFound(\n-            HttpMessage responseMessage, int depth, String uri, boolean shouldIgnore) {\n-        log.debug(\"New resource found: \" + uri);\n+    /**\n+     * Builds a canonical identifier for found resources considering the method, URI, headers, and\n+     * body.\n+     *\n+     * @param uri uniform resource identifier for resource\n+     * @param resourceFound resource found\n+     * @return identifier as a string representation usable for equality checks\n+     */\n+    private String buildCanonicalResourceIdentifier(URI uri, SpiderResourceFound resourceFound)\n+            throws URIException {\n+        StringBuilder identifierBuilder = new StringBuilder(50);\n+        if (resourceFound != null) {\n+            String visitedURI =\n+                    URLCanonicalizer.buildCleanedParametersURIRepresentation(\n+                            uri,\n+                            spider.getSpiderParam().getHandleParameters(),\n+                            spider.getSpiderParam().isHandleODataParametersVisited());\n+            identifierBuilder.append(resourceFound.getMethod());\n+            identifierBuilder.append(\" \");\n+            identifierBuilder.append(visitedURI);\n+            identifierBuilder.append(\"\\n\");\n+            String canonicalHeaderRepresentation =\n+                    getCanonicalHeadersString(resourceFound.getRequestHeaders());\n+            identifierBuilder.append(\"\\n\");\n+            identifierBuilder.append(resourceFound.getBody());\n+        }\n+        return identifierBuilder.toString();\n+    }\n \n-        if (uri == null) {\n+    @Override\n+    public void resourceFound(SpiderResourceFound resourceFound) {\n+        if (resourceFound == null\n+                || resourceFound.getUri() == null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2NDE3NQ=="}, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjg1ODYzOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMTo1MTo0N1rOIJVu-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDowMjo0MlrOIKloeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2NDE4Nw==", "bodyText": "log.debug(\"New {} resource found: {}\", resourceFound.getMethod(),resourceFound.getUri())", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546664187", "createdAt": "2020-12-21T11:51:47Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java", "diffHunk": "@@ -251,46 +248,71 @@ public void init() {\n \n     /** Clears the previous process. */\n     public void reset() {\n-        visitedGet.clear();\n-        visitedPost.clear();\n+        visitedResources.clear();\n \n         for (SpiderParser parser : parsers) {\n             parser.removeSpiderParserListener(this);\n         }\n     }\n \n-    @Override\n-    public void resourceURIFound(\n-            HttpMessage responseMessage, int depth, String uri, boolean shouldIgnore) {\n-        log.debug(\"New resource found: \" + uri);\n+    /**\n+     * Builds a canonical identifier for found resources considering the method, URI, headers, and\n+     * body.\n+     *\n+     * @param uri uniform resource identifier for resource\n+     * @param resourceFound resource found\n+     * @return identifier as a string representation usable for equality checks\n+     */\n+    private String buildCanonicalResourceIdentifier(URI uri, SpiderResourceFound resourceFound)\n+            throws URIException {\n+        StringBuilder identifierBuilder = new StringBuilder(50);\n+        if (resourceFound != null) {\n+            String visitedURI =\n+                    URLCanonicalizer.buildCleanedParametersURIRepresentation(\n+                            uri,\n+                            spider.getSpiderParam().getHandleParameters(),\n+                            spider.getSpiderParam().isHandleODataParametersVisited());\n+            identifierBuilder.append(resourceFound.getMethod());\n+            identifierBuilder.append(\" \");\n+            identifierBuilder.append(visitedURI);\n+            identifierBuilder.append(\"\\n\");\n+            String canonicalHeaderRepresentation =\n+                    getCanonicalHeadersString(resourceFound.getRequestHeaders());\n+            identifierBuilder.append(\"\\n\");\n+            identifierBuilder.append(resourceFound.getBody());\n+        }\n+        return identifierBuilder.toString();\n+    }\n \n-        if (uri == null) {\n+    @Override\n+    public void resourceFound(SpiderResourceFound resourceFound) {\n+        if (resourceFound == null\n+                || resourceFound.getUri() == null\n+                || resourceFound.getMethod() == null) {\n             return;\n         }\n \n+        log.debug(\"New \" + resourceFound.getMethod() + \"resource found: \" + resourceFound.getUri());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MzI0Mg==", "bodyText": "Corrected via last commit", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547973242", "createdAt": "2020-12-23T14:02:42Z", "author": {"login": "vladidx"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java", "diffHunk": "@@ -251,46 +248,71 @@ public void init() {\n \n     /** Clears the previous process. */\n     public void reset() {\n-        visitedGet.clear();\n-        visitedPost.clear();\n+        visitedResources.clear();\n \n         for (SpiderParser parser : parsers) {\n             parser.removeSpiderParserListener(this);\n         }\n     }\n \n-    @Override\n-    public void resourceURIFound(\n-            HttpMessage responseMessage, int depth, String uri, boolean shouldIgnore) {\n-        log.debug(\"New resource found: \" + uri);\n+    /**\n+     * Builds a canonical identifier for found resources considering the method, URI, headers, and\n+     * body.\n+     *\n+     * @param uri uniform resource identifier for resource\n+     * @param resourceFound resource found\n+     * @return identifier as a string representation usable for equality checks\n+     */\n+    private String buildCanonicalResourceIdentifier(URI uri, SpiderResourceFound resourceFound)\n+            throws URIException {\n+        StringBuilder identifierBuilder = new StringBuilder(50);\n+        if (resourceFound != null) {\n+            String visitedURI =\n+                    URLCanonicalizer.buildCleanedParametersURIRepresentation(\n+                            uri,\n+                            spider.getSpiderParam().getHandleParameters(),\n+                            spider.getSpiderParam().isHandleODataParametersVisited());\n+            identifierBuilder.append(resourceFound.getMethod());\n+            identifierBuilder.append(\" \");\n+            identifierBuilder.append(visitedURI);\n+            identifierBuilder.append(\"\\n\");\n+            String canonicalHeaderRepresentation =\n+                    getCanonicalHeadersString(resourceFound.getRequestHeaders());\n+            identifierBuilder.append(\"\\n\");\n+            identifierBuilder.append(resourceFound.getBody());\n+        }\n+        return identifierBuilder.toString();\n+    }\n \n-        if (uri == null) {\n+    @Override\n+    public void resourceFound(SpiderResourceFound resourceFound) {\n+        if (resourceFound == null\n+                || resourceFound.getUri() == null\n+                || resourceFound.getMethod() == null) {\n             return;\n         }\n \n+        log.debug(\"New \" + resourceFound.getMethod() + \"resource found: \" + resourceFound.getUri());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2NDE4Nw=="}, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjg1OTAyOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMTo1MTo1NlrOIJVvMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDowMzo0MFrOIKlp-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2NDI0MA==", "bodyText": "Better do these validations when the resource is created, here it should just be used.", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546664240", "createdAt": "2020-12-21T11:51:56Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java", "diffHunk": "@@ -299,107 +321,51 @@ public void resourceURIFound(\n             FetchStatus s = f.checkFilter(uriV);\n             if (s != FetchStatus.VALID) {\n                 log.debug(\"URI: \" + uriV + \" was filtered by a filter with reason: \" + s);\n-                spider.notifyListenersFoundURI(uri, HttpRequestHeader.GET, s);\n+                spider.notifyListenersFoundURI(\n+                        resourceFound.getUri(), resourceFound.getMethod(), s);\n                 return;\n             }\n         }\n \n-        // Check if should be ignored and not fetched\n-        if (shouldIgnore) {\n+        // Check if resource should be ignored and not fetched\n+        if (resourceFound.isShouldIgnore()) {\n             log.debug(\n                     \"URI: \"\n                             + uriV\n                             + \" is valid, but will not be fetched, by parser recommendation.\");\n-            spider.notifyListenersFoundURI(uri, HttpRequestHeader.GET, FetchStatus.VALID);\n+            spider.notifyListenersFoundURI(\n+                    resourceFound.getUri(), resourceFound.getMethod(), FetchStatus.VALID);\n             return;\n         }\n \n-        spider.notifyListenersFoundURI(uri, HttpRequestHeader.GET, FetchStatus.VALID);\n+        spider.notifyListenersFoundURI(\n+                resourceFound.getUri(), resourceFound.getMethod(), FetchStatus.VALID);\n \n         // Submit the task\n-        SpiderTask task =\n-                new SpiderTask(\n-                        spider,\n-                        responseMessage.getRequestHeader().getURI(),\n-                        uriV,\n-                        depth,\n-                        HttpRequestHeader.GET);\n-        spider.submitTask(task);\n-    }\n-\n-    @Override\n-    public void resourceURIFound(HttpMessage responseMessage, int depth, String uri) {\n-        resourceURIFound(responseMessage, depth, uri, false);\n-    }\n-\n-    @Override\n-    public void resourcePostURIFound(\n-            HttpMessage responseMessage, int depth, String uri, String requestBody) {\n-        log.debug(\"New POST resource found: \" + uri);\n-\n-        // Check if the uri was processed already\n-        synchronized (visitedPost) {\n-            if (arrayKeyValueExists(uri, requestBody)) {\n-                log.debug(\"URI already visited: \" + uri);\n-                return;\n-            } else {\n-                if (visitedPost.containsKey(uri)) {\n-                    visitedPost.get(uri).add(requestBody);\n-                } else {\n-                    ArrayList<String> l = new ArrayList<String>();\n-                    l.add(requestBody);\n-                    visitedPost.put(uri, l);\n-                }\n-            }\n-        }\n-\n-        // Create the uri\n-        URI uriV = createURI(uri);\n-        if (uriV == null) {\n-            return;\n-        }\n-\n-        // Check if any of the filters disallows this uri\n-        for (FetchFilter f : fetchFilters) {\n-            FetchStatus s = f.checkFilter(uriV);\n-            if (s != FetchStatus.VALID) {\n-                log.debug(\"URI: \" + uriV + \" was filtered by a filter with reason: \" + s);\n-                spider.notifyListenersFoundURI(uri, HttpRequestHeader.POST, s);\n-                return;\n-            }\n-        }\n-\n-        spider.notifyListenersFoundURI(uri, HttpRequestHeader.POST, FetchStatus.VALID);\n-\n-        // Submit the task\n-        SpiderTask task =\n-                new SpiderTask(\n-                        spider,\n-                        responseMessage.getRequestHeader().getURI(),\n-                        uriV,\n-                        depth,\n-                        HttpRequestHeader.POST,\n-                        requestBody);\n+        SpiderTask task = new SpiderTask(spider, resourceFound, uriV);\n         spider.submitTask(task);\n     }\n \n     /**\n      * Checks whether the value exists in an ArrayList of certain key.\n      *\n-     * @param key the string of the uri\n-     * @param value the request body of the uri\n-     * @return true or false depending whether the uri and request body have already been processed\n+     * @param headers list of HTTP headers\n+     * @return canonical string representation of headers\n      */\n-    private boolean arrayKeyValueExists(String key, String value) {\n-        if (visitedPost.containsKey(key)) {\n-            for (String s : visitedPost.get(key)) {\n-                if (s.equals(value)) {\n-                    return true;\n-                }\n-            }\n+    private String getCanonicalHeadersString(List<HttpHeaderField> headers) {\n+        if (headers != null && !headers.isEmpty()) {\n+            headers.removeIf(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 318}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MzYyNw==", "bodyText": "Resolved via last commit, validations are now done as part of the builder", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547973627", "createdAt": "2020-12-23T14:03:40Z", "author": {"login": "vladidx"}, "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java", "diffHunk": "@@ -299,107 +321,51 @@ public void resourceURIFound(\n             FetchStatus s = f.checkFilter(uriV);\n             if (s != FetchStatus.VALID) {\n                 log.debug(\"URI: \" + uriV + \" was filtered by a filter with reason: \" + s);\n-                spider.notifyListenersFoundURI(uri, HttpRequestHeader.GET, s);\n+                spider.notifyListenersFoundURI(\n+                        resourceFound.getUri(), resourceFound.getMethod(), s);\n                 return;\n             }\n         }\n \n-        // Check if should be ignored and not fetched\n-        if (shouldIgnore) {\n+        // Check if resource should be ignored and not fetched\n+        if (resourceFound.isShouldIgnore()) {\n             log.debug(\n                     \"URI: \"\n                             + uriV\n                             + \" is valid, but will not be fetched, by parser recommendation.\");\n-            spider.notifyListenersFoundURI(uri, HttpRequestHeader.GET, FetchStatus.VALID);\n+            spider.notifyListenersFoundURI(\n+                    resourceFound.getUri(), resourceFound.getMethod(), FetchStatus.VALID);\n             return;\n         }\n \n-        spider.notifyListenersFoundURI(uri, HttpRequestHeader.GET, FetchStatus.VALID);\n+        spider.notifyListenersFoundURI(\n+                resourceFound.getUri(), resourceFound.getMethod(), FetchStatus.VALID);\n \n         // Submit the task\n-        SpiderTask task =\n-                new SpiderTask(\n-                        spider,\n-                        responseMessage.getRequestHeader().getURI(),\n-                        uriV,\n-                        depth,\n-                        HttpRequestHeader.GET);\n-        spider.submitTask(task);\n-    }\n-\n-    @Override\n-    public void resourceURIFound(HttpMessage responseMessage, int depth, String uri) {\n-        resourceURIFound(responseMessage, depth, uri, false);\n-    }\n-\n-    @Override\n-    public void resourcePostURIFound(\n-            HttpMessage responseMessage, int depth, String uri, String requestBody) {\n-        log.debug(\"New POST resource found: \" + uri);\n-\n-        // Check if the uri was processed already\n-        synchronized (visitedPost) {\n-            if (arrayKeyValueExists(uri, requestBody)) {\n-                log.debug(\"URI already visited: \" + uri);\n-                return;\n-            } else {\n-                if (visitedPost.containsKey(uri)) {\n-                    visitedPost.get(uri).add(requestBody);\n-                } else {\n-                    ArrayList<String> l = new ArrayList<String>();\n-                    l.add(requestBody);\n-                    visitedPost.put(uri, l);\n-                }\n-            }\n-        }\n-\n-        // Create the uri\n-        URI uriV = createURI(uri);\n-        if (uriV == null) {\n-            return;\n-        }\n-\n-        // Check if any of the filters disallows this uri\n-        for (FetchFilter f : fetchFilters) {\n-            FetchStatus s = f.checkFilter(uriV);\n-            if (s != FetchStatus.VALID) {\n-                log.debug(\"URI: \" + uriV + \" was filtered by a filter with reason: \" + s);\n-                spider.notifyListenersFoundURI(uri, HttpRequestHeader.POST, s);\n-                return;\n-            }\n-        }\n-\n-        spider.notifyListenersFoundURI(uri, HttpRequestHeader.POST, FetchStatus.VALID);\n-\n-        // Submit the task\n-        SpiderTask task =\n-                new SpiderTask(\n-                        spider,\n-                        responseMessage.getRequestHeader().getURI(),\n-                        uriV,\n-                        depth,\n-                        HttpRequestHeader.POST,\n-                        requestBody);\n+        SpiderTask task = new SpiderTask(spider, resourceFound, uriV);\n         spider.submitTask(task);\n     }\n \n     /**\n      * Checks whether the value exists in an ArrayList of certain key.\n      *\n-     * @param key the string of the uri\n-     * @param value the request body of the uri\n-     * @return true or false depending whether the uri and request body have already been processed\n+     * @param headers list of HTTP headers\n+     * @return canonical string representation of headers\n      */\n-    private boolean arrayKeyValueExists(String key, String value) {\n-        if (visitedPost.containsKey(key)) {\n-            for (String s : visitedPost.get(key)) {\n-                if (s.equals(value)) {\n-                    return true;\n-                }\n-            }\n+    private String getCanonicalHeadersString(List<HttpHeaderField> headers) {\n+        if (headers != null && !headers.isEmpty()) {\n+            headers.removeIf(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2NDI0MA=="}, "originalCommit": {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec"}, "originalPosition": 318}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 598, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}