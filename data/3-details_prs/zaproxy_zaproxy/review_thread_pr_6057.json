{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMzMwMDU3", "number": 6057, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjozNDoyNFrOEKTLFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOToxMjowOVrOEvrYLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjM1MzUwOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjozNDoyNFrOGrQxMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNToyNjoxN1rOGrqvrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxNjY5MA==", "bodyText": "Instead of importing and using you can simply reference it statically.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            && node.getHistoryReference().getHistoryType() == TYPE_TEMPORARY;\n          \n          \n            \n                            && node.getHistoryReference().getHistoryType() == HistoryReference.TYPE_TEMPORARY;", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r448016690", "createdAt": "2020-06-30T22:34:24Z", "author": {"login": "kingthorin"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "diffHunk": "@@ -363,6 +367,45 @@ public void run() {\n         }\n     }\n \n+    private boolean bestNodeForUrl(StructuralNode node) {\n+\n+        if (!hasSamePropertiesAsRequestCreatedToFillSiteMap(node)) {\n+            return true;\n+        }\n+\n+        StructuralNode parentNode;\n+        try {\n+            parentNode = node.getParent();\n+        } catch (DatabaseException e) {\n+            return true;\n+        }\n+\n+        if (parentNode == null) {\n+            return true;\n+        }\n+\n+        String nodeURI = node.getURI().getEscapedURI();\n+        String nodeMethod = node.getMethod();\n+        Iterator<StructuralNode> siblingsIt = parentNode.getChildIterator();\n+        while (siblingsIt.hasNext()) {\n+            StructuralNode sibling = siblingsIt.next();\n+            String childURI = sibling.getURI().getEscapedURI();\n+            if (!sibling.isSameAs(node)\n+                    && sibling.getMethod().equals(nodeMethod)\n+                    && childURI.equals(nodeURI)\n+                    && sibling.isLeaf()\n+                    && !hasSamePropertiesAsRequestCreatedToFillSiteMap(sibling)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean hasSamePropertiesAsRequestCreatedToFillSiteMap(StructuralNode node) {\n+        return node.getMethod().equals(HttpRequestHeader.GET)\n+                && node.getHistoryReference().getHistoryType() == TYPE_TEMPORARY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5df2419cb049eff567bacc8363954cf254ec714f"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0MjI4Ng==", "bodyText": "thx, I  know but I was using it more than once and lines were getting to big to fit in one line.", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r448442286", "createdAt": "2020-07-01T15:26:17Z", "author": {"login": "DiogoMRSilva"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "diffHunk": "@@ -363,6 +367,45 @@ public void run() {\n         }\n     }\n \n+    private boolean bestNodeForUrl(StructuralNode node) {\n+\n+        if (!hasSamePropertiesAsRequestCreatedToFillSiteMap(node)) {\n+            return true;\n+        }\n+\n+        StructuralNode parentNode;\n+        try {\n+            parentNode = node.getParent();\n+        } catch (DatabaseException e) {\n+            return true;\n+        }\n+\n+        if (parentNode == null) {\n+            return true;\n+        }\n+\n+        String nodeURI = node.getURI().getEscapedURI();\n+        String nodeMethod = node.getMethod();\n+        Iterator<StructuralNode> siblingsIt = parentNode.getChildIterator();\n+        while (siblingsIt.hasNext()) {\n+            StructuralNode sibling = siblingsIt.next();\n+            String childURI = sibling.getURI().getEscapedURI();\n+            if (!sibling.isSameAs(node)\n+                    && sibling.getMethod().equals(nodeMethod)\n+                    && childURI.equals(nodeURI)\n+                    && sibling.isLeaf()\n+                    && !hasSamePropertiesAsRequestCreatedToFillSiteMap(sibling)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean hasSamePropertiesAsRequestCreatedToFillSiteMap(StructuralNode node) {\n+        return node.getMethod().equals(HttpRequestHeader.GET)\n+                && node.getHistoryReference().getHistoryType() == TYPE_TEMPORARY;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxNjY5MA=="}, "originalCommit": {"oid": "5df2419cb049eff567bacc8363954cf254ec714f"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTgwMzkyOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNToxNjoxNVrOGus-Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwODo1NDoxN1rOGwLiMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyNDUzMQ==", "bodyText": "This check will not work properly for all cases, not all nodes are included by default (e.g. out of scope, filters, not recurse) so we can't discard the temporary node beforehand. Taking the example in the issue, no nodes are scanned if you select the node \"3\" and disable recurse.\nIt might be safer to de-duplicate once we have all of them.", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r451624531", "createdAt": "2020-07-08T15:16:15Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "diffHunk": "@@ -317,7 +319,7 @@ public void run() {\n                         startNode,\n                         true,\n                         node -> {\n-                            if (canScanNode(node)) {\n+                            if (canScanNode(node) && bestNodeForUrl(node)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc2172c8cbe4abc4a083c035dc06958b3c8ab23"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4MTE2NQ==", "bodyText": "I forgot that case. I believe it can be solved by adding the check canScanNode to the sibling\n...\n            if (!sibling.isSameAs(node)\n+                   && canScanNode(sibling)\n                    && sibling.getMethod().equals(nodeMethod)\n...\nWhat do you think?", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r451681165", "createdAt": "2020-07-08T16:40:21Z", "author": {"login": "DiogoMRSilva"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "diffHunk": "@@ -317,7 +319,7 @@ public void run() {\n                         startNode,\n                         true,\n                         node -> {\n-                            if (canScanNode(node)) {\n+                            if (canScanNode(node) && bestNodeForUrl(node)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyNDUzMQ=="}, "originalCommit": {"oid": "6cc2172c8cbe4abc4a083c035dc06958b3c8ab23"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY5MDExNg==", "bodyText": "That would address most part of it (e.g. out of scope, filters) but still not the above recurse case, the canScanNode does not tell if a node is included in the nodes to be scanned, that's done while traversing (to not check more nodes than really needed).", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r451690116", "createdAt": "2020-07-08T16:54:48Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "diffHunk": "@@ -317,7 +319,7 @@ public void run() {\n                         startNode,\n                         true,\n                         node -> {\n-                            if (canScanNode(node)) {\n+                            if (canScanNode(node) && bestNodeForUrl(node)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyNDUzMQ=="}, "originalCommit": {"oid": "6cc2172c8cbe4abc4a083c035dc06958b3c8ab23"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcxNDc5Nw==", "bodyText": "True, I will do it after collecting all history nodes as you suggested.", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r451714797", "createdAt": "2020-07-08T17:36:10Z", "author": {"login": "DiogoMRSilva"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "diffHunk": "@@ -317,7 +319,7 @@ public void run() {\n                         startNode,\n                         true,\n                         node -> {\n-                            if (canScanNode(node)) {\n+                            if (canScanNode(node) && bestNodeForUrl(node)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyNDUzMQ=="}, "originalCommit": {"oid": "6cc2172c8cbe4abc4a083c035dc06958b3c8ab23"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE4NDY0MA==", "bodyText": "It can also be de-duplicated as they are added, use a set and resolve the duplication immediately (might be simpler).", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r452184640", "createdAt": "2020-07-09T12:36:32Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "diffHunk": "@@ -317,7 +319,7 @@ public void run() {\n                         startNode,\n                         true,\n                         node -> {\n-                            if (canScanNode(node)) {\n+                            if (canScanNode(node) && bestNodeForUrl(node)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyNDUzMQ=="}, "originalCommit": {"oid": "6cc2172c8cbe4abc4a083c035dc06958b3c8ab23"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MzgxMA==", "bodyText": "Yes, it's simpler :), I used a dict to keep track of the locations where the requests were stored.", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r453173810", "createdAt": "2020-07-11T08:54:17Z", "author": {"login": "DiogoMRSilva"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "diffHunk": "@@ -317,7 +319,7 @@ public void run() {\n                         startNode,\n                         true,\n                         node -> {\n-                            if (canScanNode(node)) {\n+                            if (canScanNode(node) && bestNodeForUrl(node)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyNDUzMQ=="}, "originalCommit": {"oid": "6cc2172c8cbe4abc4a083c035dc06958b3c8ab23"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTgwNTY2OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNToxNjo0MFrOGus_ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNToxNjo0MFrOGus_ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyNDgxMA==", "bodyText": "isTemporary", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r451624810", "createdAt": "2020-07-08T15:16:40Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "diffHunk": "@@ -363,6 +365,45 @@ public void run() {\n         }\n     }\n \n+    private boolean bestNodeForUrl(StructuralNode node) {\n+\n+        if (!hasSamePropertiesAsRequestCreatedToFillSiteMap(node)) {\n+            return true;\n+        }\n+\n+        StructuralNode parentNode;\n+        try {\n+            parentNode = node.getParent();\n+        } catch (DatabaseException e) {\n+            return true;\n+        }\n+\n+        if (parentNode == null) {\n+            return true;\n+        }\n+\n+        String nodeURI = node.getURI().getEscapedURI();\n+        String nodeMethod = node.getMethod();\n+        Iterator<StructuralNode> siblingsIt = parentNode.getChildIterator();\n+        while (siblingsIt.hasNext()) {\n+            StructuralNode sibling = siblingsIt.next();\n+            String childURI = sibling.getURI().getEscapedURI();\n+            if (!sibling.isSameAs(node)\n+                    && sibling.getMethod().equals(nodeMethod)\n+                    && childURI.equals(nodeURI)\n+                    && sibling.isLeaf()\n+                    && !hasSamePropertiesAsRequestCreatedToFillSiteMap(sibling)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean hasSamePropertiesAsRequestCreatedToFillSiteMap(StructuralNode node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc2172c8cbe4abc4a083c035dc06958b3c8ab23"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTgwNTk1OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNToxNjo0NVrOGus_mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNToxNjo0NVrOGus_mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyNDg1OA==", "bodyText": "The type check would be enough, temporary tree nodes are all GET.", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r451624858", "createdAt": "2020-07-08T15:16:45Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "diffHunk": "@@ -363,6 +365,45 @@ public void run() {\n         }\n     }\n \n+    private boolean bestNodeForUrl(StructuralNode node) {\n+\n+        if (!hasSamePropertiesAsRequestCreatedToFillSiteMap(node)) {\n+            return true;\n+        }\n+\n+        StructuralNode parentNode;\n+        try {\n+            parentNode = node.getParent();\n+        } catch (DatabaseException e) {\n+            return true;\n+        }\n+\n+        if (parentNode == null) {\n+            return true;\n+        }\n+\n+        String nodeURI = node.getURI().getEscapedURI();\n+        String nodeMethod = node.getMethod();\n+        Iterator<StructuralNode> siblingsIt = parentNode.getChildIterator();\n+        while (siblingsIt.hasNext()) {\n+            StructuralNode sibling = siblingsIt.next();\n+            String childURI = sibling.getURI().getEscapedURI();\n+            if (!sibling.isSameAs(node)\n+                    && sibling.getMethod().equals(nodeMethod)\n+                    && childURI.equals(nodeURI)\n+                    && sibling.isLeaf()\n+                    && !hasSamePropertiesAsRequestCreatedToFillSiteMap(sibling)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean hasSamePropertiesAsRequestCreatedToFillSiteMap(StructuralNode node) {\n+        return node.getMethod().equals(HttpRequestHeader.GET)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc2172c8cbe4abc4a083c035dc06958b3c8ab23"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDU1NDcxOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODo0MTo0N1rOGw1Grg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODowMjo0OVrOG0ZXWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1NDg5NA==", "bodyText": "The checks can be reorder instead, e.g.:\nif (index == null) {\n    if (isTemporary(node)) {\n        indexOfTemporary.put(nodeHash(node), messagesIdsToAppScan.size());\n    }\n    messagesIdsToAppScan.add(nodeHistoryId);\n} else if (!isTemporary(node)) {\n    messagesIdsToAppScan.set(index, nodeHistoryId);\n}", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r453854894", "createdAt": "2020-07-13T18:41:47Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "diffHunk": "@@ -313,12 +314,23 @@ public void run() {\n             }\n \n             for (StructuralNode startNode : startNodes) {\n+                Map<String, Integer> indexOfTemporary = new HashMap<>();\n                 traverse(\n                         startNode,\n                         true,\n                         node -> {\n                             if (canScanNode(node)) {\n-                                messagesIdsToAppScan.add(node.getHistoryReference().getHistoryId());\n+                                Integer index = indexOfTemporary.get(nodeHash(node));\n+                                int nodeHistoryId = node.getHistoryReference().getHistoryId();\n+                                if (isTemporary(node) && index == null) {\n+                                    indexOfTemporary.put(\n+                                            nodeHash(node), messagesIdsToAppScan.size());\n+                                    messagesIdsToAppScan.add(nodeHistoryId);\n+                                } else if (!isTemporary(node) && index == null) {\n+                                    messagesIdsToAppScan.add(nodeHistoryId);\n+                                } else if (!isTemporary(node) && index != null) {\n+                                    messagesIdsToAppScan.set(index, nodeHistoryId);\n+                                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a07784394e6a23ee32c8de300b5cc304df9a095"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5NDcxMw==", "bodyText": "yes, that looks better.", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r457594713", "createdAt": "2020-07-20T18:02:49Z", "author": {"login": "DiogoMRSilva"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "diffHunk": "@@ -313,12 +314,23 @@ public void run() {\n             }\n \n             for (StructuralNode startNode : startNodes) {\n+                Map<String, Integer> indexOfTemporary = new HashMap<>();\n                 traverse(\n                         startNode,\n                         true,\n                         node -> {\n                             if (canScanNode(node)) {\n-                                messagesIdsToAppScan.add(node.getHistoryReference().getHistoryId());\n+                                Integer index = indexOfTemporary.get(nodeHash(node));\n+                                int nodeHistoryId = node.getHistoryReference().getHistoryId();\n+                                if (isTemporary(node) && index == null) {\n+                                    indexOfTemporary.put(\n+                                            nodeHash(node), messagesIdsToAppScan.size());\n+                                    messagesIdsToAppScan.add(nodeHistoryId);\n+                                } else if (!isTemporary(node) && index == null) {\n+                                    messagesIdsToAppScan.add(nodeHistoryId);\n+                                } else if (!isTemporary(node) && index != null) {\n+                                    messagesIdsToAppScan.set(index, nodeHistoryId);\n+                                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1NDg5NA=="}, "originalCommit": {"oid": "0a07784394e6a23ee32c8de300b5cc304df9a095"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDI5MjMwOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOToxMjowOVrOHkygeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMTo0MzoyN1rOHyrPaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzODI5Ng==", "bodyText": "This is not working correctly when the temp node is after the non-temp node, it still scans both of them.", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r508338296", "createdAt": "2020-10-20T09:12:09Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "diffHunk": "@@ -313,12 +314,23 @@ public void run() {\n             }\n \n             for (StructuralNode startNode : startNodes) {\n+                Map<String, Integer> indexOfTemporary = new HashMap<>();\n                 traverse(\n                         startNode,\n                         true,\n                         node -> {\n                             if (canScanNode(node)) {\n-                                messagesIdsToAppScan.add(node.getHistoryReference().getHistoryId());\n+                                Integer index = indexOfTemporary.get(nodeHash(node));\n+                                int nodeHistoryId = node.getHistoryReference().getHistoryId();\n+                                if (index == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae537ddaf65b14330d8aae4eeeec4db3d5a21292"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5OTMwNA==", "bodyText": "I incorrectly assumed they always came first. Thx for the catch", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r522899304", "createdAt": "2020-11-13T11:43:27Z", "author": {"login": "DiogoMRSilva"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "diffHunk": "@@ -313,12 +314,23 @@ public void run() {\n             }\n \n             for (StructuralNode startNode : startNodes) {\n+                Map<String, Integer> indexOfTemporary = new HashMap<>();\n                 traverse(\n                         startNode,\n                         true,\n                         node -> {\n                             if (canScanNode(node)) {\n-                                messagesIdsToAppScan.add(node.getHistoryReference().getHistoryId());\n+                                Integer index = indexOfTemporary.get(nodeHash(node));\n+                                int nodeHistoryId = node.getHistoryReference().getHistoryId();\n+                                if (index == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzODI5Ng=="}, "originalCommit": {"oid": "ae537ddaf65b14330d8aae4eeeec4db3d5a21292"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 624, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}