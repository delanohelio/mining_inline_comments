{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNjk1NDgy", "number": 6371, "title": "Adding support for handling manipulation of multiple NameValuePairs", "bodyText": "", "createdAt": "2020-12-21T20:02:58Z", "url": "https://github.com/zaproxy/zaproxy/pull/6371", "merged": true, "mergeCommit": {"oid": "e1c01c5c2e55f1c95d5edd2de8cde3b9ed7610aa"}, "closed": true, "closedAt": "2021-07-19T18:13:30Z", "author": {"login": "preetkaran20"}, "timelineItems": {"totalCount": 45, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdobw0dAFqTU1NjYzNzkxNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABer_4-bgFqTcwOTg0NDAzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NjM3OTE3", "url": "https://github.com/zaproxy/zaproxy/pull/6371#pullrequestreview-556637917", "createdAt": "2020-12-21T20:14:58Z", "commit": {"oid": "bc491cfb8dc3159f7ced7533ccd54f9897e1e9cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDoxNDo1OFrOIJkshw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDoxNDo1OFrOIJkshw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkwOTMxOQ==", "bodyText": "@thc202 @kingthorin was planning to have another base class for usecases where scanrule wants to modify multiple name value pairs which is a use case for FileUpload scan rule. WDYT ?", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r546909319", "createdAt": "2020-12-21T20:14:58Z", "author": {"login": "preetkaran20"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractAppVariantPlugin.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package org.parosproxy.paros.core.scanner;\n+\n+import java.util.List;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.model.Model;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.ascan.VariantFactory;\n+\n+/**\n+ * {@code AbstractAppVariantPlugin} is the abstract base class which is used to run per variant to\n+ * modify multiple name value pairs of the {@code HttpMessage} per variant.\n+ *\n+ * @author KSASAN preetkaran20@gmail.com\n+ */\n+public abstract class AbstractAppVariantPlugin extends AbstractAppPlugin {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc491cfb8dc3159f7ced7533ccd54f9897e1e9cb"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2MTIyNDg3", "url": "https://github.com/zaproxy/zaproxy/pull/6371#pullrequestreview-566122487", "createdAt": "2021-01-12T10:16:56Z", "commit": {"oid": "31d4efaf62837eacac9417d8e546425d076cbeaa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxMDoxNjo1NlrOIR6wRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxMDoxNjo1NlrOIR6wRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTY1OTMzMg==", "bodyText": "@thc202  @kingthorin my initial thought is to call setMessage again after setting the message for parsing the message again. This can be done from the setParameter api or by exposing a new api which can handle multiple updates and hence the new Api will not impact the performance of existing setparameter api.\nWDYT ?", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r555659332", "createdAt": "2021-01-12T10:16:56Z", "author": {"login": "preetkaran20"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java", "diffHunk": "@@ -55,10 +55,11 @@\n     // insensitive & DOTALL, and hit \"test\")\n \n     private List<NameValuePair> params = Collections.emptyList();\n-    private List<MultipartFormParameter> multiPartParams = new ArrayList<MultipartFormParameter>();\n+    private List<MultipartFormParameter> multiPartParams;\n \n     @Override\n     public void setMessage(HttpMessage msg) {\n+        multiPartParams = new ArrayList<MultipartFormParameter>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d4efaf62837eacac9417d8e546425d076cbeaa"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5ODA1MjUw", "url": "https://github.com/zaproxy/zaproxy/pull/6371#pullrequestreview-569805250", "createdAt": "2021-01-16T02:44:53Z", "commit": {"oid": "14459c833532cb3239436fe78accc42d76545a4f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNlQwMjo0NDo1M1rOIU5NiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNlQwMjo0NDo1M1rOIU5NiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODc3OTc4NA==", "bodyText": "need to validate... not corect loginc if value is 0 length", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r558779784", "createdAt": "2021-01-16T02:44:53Z", "author": {"login": "preetkaran20"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java", "diffHunk": "@@ -235,6 +236,15 @@ private String setParameter(HttpMessage msg, NameValuePair originalPair, String\n                             + mpPart.getEnd());\n         }\n         newBodyBuilder.replace(mpPart.getStart(), mpPart.getEnd(), value);\n+        int offset = value.length() - mpPart.getEnd() + mpPart.getStart() - 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14459c833532cb3239436fe78accc42d76545a4f"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5ODA3MTc5", "url": "https://github.com/zaproxy/zaproxy/pull/6371#pullrequestreview-569807179", "createdAt": "2021-01-16T03:11:51Z", "commit": {"oid": "d67dce2f7b12278d0a83735a4cc3d6dd5be77e4f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNlQwMzoxMTo1MVrOIU5_Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNlQwMzoxMTo1MVrOIU5_Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODc5MjU0Mg==", "bodyText": "need to write unittest cases", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r558792542", "createdAt": "2021-01-16T03:11:51Z", "author": {"login": "preetkaran20"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java", "diffHunk": "@@ -235,6 +236,15 @@ private String setParameter(HttpMessage msg, NameValuePair originalPair, String\n                             + mpPart.getEnd());\n         }\n         newBodyBuilder.replace(mpPart.getStart(), mpPart.getEnd(), value);\n+        int offset = value.length() - mpPart.getEnd() + mpPart.getStart();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67dce2f7b12278d0a83735a4cc3d6dd5be77e4f"}, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "20bacdb5ce9ededd44443fdbacf5d8694349d8c5", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/20bacdb5ce9ededd44443fdbacf5d8694349d8c5", "committedDate": "2021-02-28T13:57:05Z", "message": "Original State"}, "afterCommit": {"oid": "04ebca2126c97060ab94215753a9da1ed549955a", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/04ebca2126c97060ab94215753a9da1ed549955a", "committedDate": "2021-02-28T14:05:50Z", "message": "Original State\n\nSigned-off-by: karan preet singh sasan <karanpreet_singh@intuit.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e54c0b4fdea246f9fb2fc6037c6978bbd04a272", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/9e54c0b4fdea246f9fb2fc6037c6978bbd04a272", "committedDate": "2021-02-28T14:07:39Z", "message": "removing semicolon\n\nSigned-off-by: karan preet singh sasan <karanpreet_singh@intuit.com>"}, "afterCommit": {"oid": "57e17348238a315a8aadcbf5ff9a6268297cabbe", "author": {"user": {"login": "psiinon", "name": "Simon Bennetts"}}, "url": "https://github.com/zaproxy/zaproxy/commit/57e17348238a315a8aadcbf5ff9a6268297cabbe", "committedDate": "2021-05-07T08:23:33Z", "message": "Merge pull request #6587 from kingthorin/revert-cg\n\nrevert: ci workflow concurrency grouping"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "245f5c2c380136961084257c7ead3cfd4e890b45", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/245f5c2c380136961084257c7ead3cfd4e890b45", "committedDate": "2021-06-16T06:24:38Z", "message": "incorporating review comments"}, "afterCommit": {"oid": "df39a2346595b0a48e422a3d6a06468a3702f038", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/df39a2346595b0a48e422a3d6a06468a3702f038", "committedDate": "2021-06-16T06:25:21Z", "message": "incorporating review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg0NzcwMjU0", "url": "https://github.com/zaproxy/zaproxy/pull/6371#pullrequestreview-684770254", "createdAt": "2021-06-16T06:30:51Z", "commit": {"oid": "afc56e5d0bf6686b03875a21ada748457867133d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xNlQwNjozMDo1MlrOJuKm3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xNlQwNjozMDo1MlrOJuKm3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjM4ODA2MA==", "bodyText": "@thc202 I have made the condition on the position, considering it is unique and also param can be null too.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r652388060", "createdAt": "2021-06-16T06:30:52Z", "author": {"login": "preetkaran20"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AppParametersBuilder.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package org.parosproxy.paros.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * {@code AppParametersBuilder} provides an easy way to build {@code AppParameters} and validates\n+ * the provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class AppParametersBuilder {\n+\n+    private List<AppParameter> appParameters = new ArrayList<>();\n+    private Set<Integer> nameValuePairPositions = new HashSet<>();\n+    private final Logger logger = LogManager.getLogger(this.getClass());\n+\n+    public AppParametersBuilder addAppParameter(\n+            NameValuePair nameValuePair, String param, String value, AppParamValueType operation) {\n+        if (!nameValuePairPositions.contains(nameValuePair.getPosition())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc56e5d0bf6686b03875a21ada748457867133d"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg0NzcxMTYz", "url": "https://github.com/zaproxy/zaproxy/pull/6371#pullrequestreview-684771163", "createdAt": "2021-06-16T06:32:10Z", "commit": {"oid": "afc56e5d0bf6686b03875a21ada748457867133d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xNlQwNjozMjoxMFrOJuKpXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xNlQwNjozMjoxMFrOJuKpXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjM4ODcwMQ==", "bodyText": "The return types are quite conflicting, like for multipart it is returning body of HttMessage where as for cookie it returns something else and for some variants it is returning the passed values.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r652388701", "createdAt": "2021-06-16T06:32:10Z", "author": {"login": "preetkaran20"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/Variant.java", "diffHunk": "@@ -47,6 +47,17 @@ public String setParameter(\n     public String setEscapedParameter(\n             HttpMessage msg, NameValuePair originalPair, String param, String value);\n \n+    /**\n+     * Sets the parameters into the given {@code message}.\n+     *\n+     * @param message the message that will be changed\n+     * @param appParams list of name of the parameter\n+     * @return the parameter values set to HttpMessage\n+     */\n+    default List<String> setParameters(HttpMessage message, List<AppParameter> appParams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc56e5d0bf6686b03875a21ada748457867133d"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg0NzcyMzAw", "url": "https://github.com/zaproxy/zaproxy/pull/6371#pullrequestreview-684772300", "createdAt": "2021-06-16T06:33:57Z", "commit": {"oid": "afc56e5d0bf6686b03875a21ada748457867133d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xNlQwNjozMzo1N1rOJuKs4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xNlQwNjozMzo1N1rOJuKs4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjM4OTYwMw==", "bodyText": "As for single parameter setParameter method is returning HTTP message's body so returned the same(by adding to list). @thc202  WDYT? I think setParameter should not return anything, not sure what was the reason for returning it.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r652389603", "createdAt": "2021-06-16T06:33:57Z", "author": {"login": "preetkaran20"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java", "diffHunk": "@@ -209,33 +211,66 @@ public void setMessage(HttpMessage msg) {\n     @Override\n     public String setParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair), Arrays.asList(value));\n     }\n \n     @Override\n     public String setEscapedParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair), Arrays.asList(value));\n     }\n \n-    private String setParameter(HttpMessage msg, NameValuePair originalPair, String value) {\n+    @Override\n+    public List<String> setParameters(HttpMessage msg, List<AppParameter> appParameters) {\n+        return Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc56e5d0bf6686b03875a21ada748457867133d"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzAxNzY0MjQw", "url": "https://github.com/zaproxy/zaproxy/pull/6371#pullrequestreview-701764240", "createdAt": "2021-07-08T08:09:28Z", "commit": {"oid": "40c38694d5ec0e2cd63bbb69cc7acc9772bc9998"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wOFQwODowOToyOFrOJ7HeEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wOFQwODoxNDoyN1rOJ7Hrxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk2ODE0Nw==", "bodyText": "Better move to AppParameter, this also applies to the name not just the value.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r665968147", "createdAt": "2021-07-08T08:09:28Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AppParamValueType.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.parosproxy.paros.core.scanner;\n+\n+/**\n+ * {@code AppParamValueType} represents the type of AppParameter's value. This is useful for the\n+ * use-cases like say there is a parameter which is a URL then caller can itself encode/escape it so\n+ * that it can be directly used to modify {@code HttpMessage} or {@code Variant} has to escape it.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public enum AppParamValueType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40c38694d5ec0e2cd63bbb69cc7acc9772bc9998"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk2OTgzMQ==", "bodyText": "AppParameter is misleading, not just about the target app. InputVector would be closer to what it is.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r665969831", "createdAt": "2021-07-08T08:11:48Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AppParameter.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.parosproxy.paros.core.scanner;\n+\n+/**\n+ * {@code AppParameter} class wraps the parameters which are used to modify the {@code HttpMessage}.\n+ * It is specifically used for updating multiple parameters of {@code HttpMessage}\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class AppParameter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40c38694d5ec0e2cd63bbb69cc7acc9772bc9998"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3MDAxMg==", "bodyText": "I'm not sure this needs to be passed around, the variants will have them already (this just needs to provide the position).", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r665970012", "createdAt": "2021-07-08T08:12:03Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AppParameter.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.parosproxy.paros.core.scanner;\n+\n+/**\n+ * {@code AppParameter} class wraps the parameters which are used to modify the {@code HttpMessage}.\n+ * It is specifically used for updating multiple parameters of {@code HttpMessage}\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class AppParameter {\n+    private NameValuePair nameValuePair;\n+    private String param;\n+    private String value;\n+    private AppParamValueType appParamValueType;\n+\n+    AppParameter(\n+            NameValuePair nameValuePair,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40c38694d5ec0e2cd63bbb69cc7acc9772bc9998"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3MDA2MQ==", "bodyText": "getName()", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r665970061", "createdAt": "2021-07-08T08:12:06Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AppParameter.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.parosproxy.paros.core.scanner;\n+\n+/**\n+ * {@code AppParameter} class wraps the parameters which are used to modify the {@code HttpMessage}.\n+ * It is specifically used for updating multiple parameters of {@code HttpMessage}\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class AppParameter {\n+    private NameValuePair nameValuePair;\n+    private String param;\n+    private String value;\n+    private AppParamValueType appParamValueType;\n+\n+    AppParameter(\n+            NameValuePair nameValuePair,\n+            String param,\n+            String value,\n+            AppParamValueType appParamValueType) {\n+        this.nameValuePair = nameValuePair;\n+        this.param = param;\n+        this.value = value;\n+        this.appParamValueType = appParamValueType;\n+    }\n+\n+    public NameValuePair getNameValuePair() {\n+        return nameValuePair;\n+    }\n+\n+    public String getParam() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40c38694d5ec0e2cd63bbb69cc7acc9772bc9998"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3MDc2OA==", "bodyText": "It should be possible to set the name/value separately.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r665970768", "createdAt": "2021-07-08T08:13:11Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AppParametersBuilder.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package org.parosproxy.paros.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * {@code AppParametersBuilder} provides an easy way to build {@code AppParameters} and validates\n+ * the provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class AppParametersBuilder {\n+\n+    private List<AppParameter> appParameters = new ArrayList<>();\n+    private Set<Integer> nameValuePairPositions = new HashSet<>();\n+    private final Logger logger = LogManager.getLogger(this.getClass());\n+\n+    public AppParametersBuilder addAppParameter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40c38694d5ec0e2cd63bbb69cc7acc9772bc9998"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3MTM1MA==", "bodyText": "The changes to this class should be reverted, the variant should adjust the position based on the data injected.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r665971350", "createdAt": "2021-07-08T08:14:02Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/MultipartFormParameter.java", "diffHunk": "@@ -44,6 +44,16 @@ public MultipartFormParameter(\n         this.type = type;\n     }\n \n+    public MultipartFormParameter(MultipartFormParameter multipartFormParameter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40c38694d5ec0e2cd63bbb69cc7acc9772bc9998"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3MTY1NQ==", "bodyText": "Remove the public modifiers.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r665971655", "createdAt": "2021-07-08T08:14:27Z", "author": {"login": "thc202"}, "path": "zap/src/test/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParametersUnitTest.java", "diffHunk": "@@ -228,7 +228,293 @@ void shouldInjectParamValueModificationInFileNameParam() {\n     }\n \n     @Test\n-    void shouldInjectParamValueModificationInFileContentTypeParam() {\n+    public void shouldInjectSmallerParamValueModificationInFileNameParam() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40c38694d5ec0e2cd63bbb69cc7acc9772bc9998"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzAxNzc5MDA1", "url": "https://github.com/zaproxy/zaproxy/pull/6371#pullrequestreview-701779005", "createdAt": "2021-07-08T08:24:48Z", "commit": {"oid": "40c38694d5ec0e2cd63bbb69cc7acc9772bc9998"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wOFQwODoyNDo0OFrOJ7IJjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wOFQwODoyNDo0OFrOJ7IJjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk3OTI3OA==", "bodyText": "Should also provide a method that returns the builder and both methods should mention each other, to make it clear how the API is supposed to be used.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r665979278", "createdAt": "2021-07-08T08:24:48Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractAppParamPlugin.java", "diffHunk": "@@ -218,4 +219,15 @@ protected String setParameter(HttpMessage message, String param, String value) {\n     protected String setEscapedParameter(HttpMessage message, String param, String value) {\n         return variant.setEscapedParameter(message, originalPair, param, value);\n     }\n+\n+    /**\n+     * Sets the parameters into the given {@code message}.\n+     *\n+     * @param message the message that will be changed\n+     * @param appParams list of the parameters\n+     * @return the parameter values which are added to the HttpMesage\n+     */\n+    protected List<String> setParameters(HttpMessage message, List<AppParameter> appParams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40c38694d5ec0e2cd63bbb69cc7acc9772bc9998"}, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0f35e682cacf5737e1f6a11721e8ebf847bb929", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/d0f35e682cacf5737e1f6a11721e8ebf847bb929", "committedDate": "2021-07-08T14:38:59Z", "message": "Incorporating review comments"}, "afterCommit": {"oid": "298abbfa7c5798f68c26c83086ee142bf7aff09b", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/298abbfa7c5798f68c26c83086ee142bf7aff09b", "committedDate": "2021-07-08T14:43:48Z", "message": "Incorporating review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd8d255e1fe0b1775dc642a5c26d4993c5203f3c", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/dd8d255e1fe0b1775dc642a5c26d4993c5203f3c", "committedDate": "2021-07-08T15:33:44Z", "message": "Small Fix"}, "afterCommit": {"oid": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/d2e9018130d9a1dff22ecf4fd7de1f00c76b947a", "committedDate": "2021-07-08T15:34:14Z", "message": "Small Fix\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA0OTAyNzgx", "url": "https://github.com/zaproxy/zaproxy/pull/6371#pullrequestreview-704902781", "createdAt": "2021-07-13T08:35:54Z", "commit": {"oid": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xM1QwODozNTo1NVrOJ9lAFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xM1QwODozNTo1NVrOJ9lAFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU0OTE0MA==", "bodyText": "Please, suppress the incompatibility instead.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668549140", "createdAt": "2021-07-13T08:35:55Z", "author": {"login": "thc202"}, "path": "zap/zap.gradle.kts", "diffHunk": "@@ -163,6 +164,7 @@ val japicmp by tasks.registering(JapicmpTask::class) {\n         reportName = \"japi.html\"\n         isAddDefaultRules = true\n         addRule(JApiChangeStatus.MODIFIED, AcceptMethodAbstractNowDefaultRule::class.java)\n+        addRule(JApiChangeStatus.MODIFIED, AcceptMethodNewDefaultRule::class.java)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA0OTA1NzQw", "url": "https://github.com/zaproxy/zaproxy/pull/6371#pullrequestreview-704905740", "createdAt": "2021-07-13T08:38:27Z", "commit": {"oid": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xM1QwODozODoyOFrOJ9lIQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xM1QwODozODoyOFrOJ9lIQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MTIzNQ==", "bodyText": "It just needs to keep the offset and sum to existing positions. No need to copy the parameters again.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668551235", "createdAt": "2021-07-13T08:38:28Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java", "diffHunk": "@@ -209,33 +212,78 @@ public void setMessage(HttpMessage msg) {\n     @Override\n     public String setParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));\n     }\n \n     @Override\n     public String setEscapedParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));\n     }\n \n-    private String setParameter(HttpMessage msg, NameValuePair originalPair, String value) {\n+    @Override\n+    public void setParameters(HttpMessage msg, List<InputVector> inputVectors) {\n+        this.setParameter(\n+                msg,\n+                inputVectors.stream()\n+                        .map(inputVector -> inputVector.getPosition())\n+                        .collect(Collectors.toList()),\n+                inputVectors.stream()\n+                        .map(inputVector -> inputVector.getValue())\n+                        .collect(Collectors.toList()));\n+    };\n \n+    private String setParameter(\n+            HttpMessage msg, List<Integer> nameValuePairPositions, List<String> values) {\n         StringBuilder newBodyBuilder = new StringBuilder(msg.getRequestBody().toString());\n-        int idx = originalPair.getPosition() - 1;\n-        MultipartFormParameter mpPart = multiPartParams.get(idx);\n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\n-                    \"i: \"\n-                            + idx\n-                            + \" pos: \"\n-                            + originalPair.getPosition()\n-                            + \" S: \"\n-                            + mpPart.getStart()\n-                            + \" E: \"\n-                            + mpPart.getEnd());\n-        }\n-        newBodyBuilder.replace(mpPart.getStart(), mpPart.getEnd(), value);\n+        List<MultipartFormParameter> multiPartParamsClone =\n+                new ArrayList<MultipartFormParameter>(this.multiPartParams);\n+        for (int index = 0; index < nameValuePairPositions.size(); index++) {\n+            int originalPosition = nameValuePairPositions.get(index);\n+            String value = values.get(index);\n+            int idx = originalPosition - 1;\n \n+            MultipartFormParameter mpPart = multiPartParamsClone.get(idx);\n+            if (LOGGER.isDebugEnabled()) {\n+                LOGGER.debug(\n+                        \"i: \"\n+                                + idx\n+                                + \" pos: \"\n+                                + originalPosition\n+                                + \" S: \"\n+                                + mpPart.getStart()\n+                                + \" E: \"\n+                                + mpPart.getEnd());\n+            }\n+            newBodyBuilder.replace(mpPart.getStart(), mpPart.getEnd(), value);\n+            int originalStart = mpPart.getStart();\n+            int offset = value.length() - mpPart.getEnd() + mpPart.getStart();\n+            mpPart =\n+                    new MultipartFormParameter(\n+                            mpPart.getName(),\n+                            mpPart.getValue(),\n+                            originalStart,\n+                            mpPart.getEnd() + offset,\n+                            mpPart.getPosition(),\n+                            mpPart.getType());\n+            multiPartParamsClone.set(idx, mpPart);\n+            // As we have updated one value and this can impact other multipart params\n+            // Hence this logic is to update the other multipart params", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA0OTA2Mjgw", "url": "https://github.com/zaproxy/zaproxy/pull/6371#pullrequestreview-704906280", "createdAt": "2021-07-13T08:38:59Z", "commit": {"oid": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xM1QwODozOTowMFrOJ9lJtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xM1QwODo0NToxOVrOJ9ld0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MTYwNw==", "bodyText": "final", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668551607", "createdAt": "2021-07-13T08:39:00Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVector.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+/**\n+ * {@code InputVector} class wraps the parameters which are used to modify the {@code HttpMessage}.\n+ * It is specifically used for updating multiple parameters of {@code HttpMessage}\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVector {\n+    private int position;\n+    private String name;\n+    private String value;\n+    private PayloadFormat payloadFormat;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1Mjc2MA==", "bodyText": "represents the format of the payload.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668552760", "createdAt": "2021-07-13T08:40:17Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVector.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+/**\n+ * {@code InputVector} class wraps the parameters which are used to modify the {@code HttpMessage}.\n+ * It is specifically used for updating multiple parameters of {@code HttpMessage}\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVector {\n+    private int position;\n+    private String name;\n+    private String value;\n+    private PayloadFormat payloadFormat;\n+\n+    InputVector(int position, String name, String value, PayloadFormat payloadFormat) {\n+        this.position = position;\n+        this.name = name;\n+        this.value = value;\n+        this.payloadFormat = payloadFormat;\n+    }\n+\n+    public int getPosition() {\n+        return position;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public PayloadFormat getPayloadFormat() {\n+        return payloadFormat;\n+    }\n+\n+    /**\n+     * {@code PayloadFormat} represents the type of InputVectors's name and value. This is useful", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MzE2OQ==", "bodyText": "Remove static.\nNormally this would be declared above, before the instance variables.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668553169", "createdAt": "2021-07-13T08:40:48Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVector.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+/**\n+ * {@code InputVector} class wraps the parameters which are used to modify the {@code HttpMessage}.\n+ * It is specifically used for updating multiple parameters of {@code HttpMessage}\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVector {\n+    private int position;\n+    private String name;\n+    private String value;\n+    private PayloadFormat payloadFormat;\n+\n+    InputVector(int position, String name, String value, PayloadFormat payloadFormat) {\n+        this.position = position;\n+        this.name = name;\n+        this.value = value;\n+        this.payloadFormat = payloadFormat;\n+    }\n+\n+    public int getPosition() {\n+        return position;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public PayloadFormat getPayloadFormat() {\n+        return payloadFormat;\n+    }\n+\n+    /**\n+     * {@code PayloadFormat} represents the type of InputVectors's name and value. This is useful\n+     * for the use-cases like say there is a parameter which is a URL then caller can itself\n+     * encode/escape it so that it can be directly used to modify {@code HttpMessage} or {@code\n+     * Variant} has to escape it.\n+     */\n+    public static enum PayloadFormat {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MzU1NQ==", "bodyText": "setNameAndValue", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668553555", "createdAt": "2021-07-13T08:41:19Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVectorBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.parosproxy.paros.core.scanner.NameValuePair;\n+import org.zaproxy.zap.core.scanner.InputVector.PayloadFormat;\n+\n+/**\n+ * {@code InputVectorBuilder} provides an easy way to build {@code InputVectors} and validates the\n+ * provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVectorBuilder {\n+\n+    private Map<Integer, InputVector> inputVectorsMap = new HashMap<>();\n+\n+    public InputVectorBuilder addAppParameter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MzU3OA==", "bodyText": "setValue", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668553578", "createdAt": "2021-07-13T08:41:21Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVectorBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.parosproxy.paros.core.scanner.NameValuePair;\n+import org.zaproxy.zap.core.scanner.InputVector.PayloadFormat;\n+\n+/**\n+ * {@code InputVectorBuilder} provides an easy way to build {@code InputVectors} and validates the\n+ * provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVectorBuilder {\n+\n+    private Map<Integer, InputVector> inputVectorsMap = new HashMap<>();\n+\n+    public InputVectorBuilder addAppParameter(\n+            NameValuePair nameValuePair, String param, String value, PayloadFormat payloadFormat) {\n+        inputVectorsMap.put(\n+                nameValuePair.getPosition(),\n+                new InputVector(nameValuePair.getPosition(), param, value, payloadFormat));\n+        return this;\n+    }\n+\n+    public InputVectorBuilder addAppParameterWithoutParam(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MzcxNw==", "bodyText": "setName", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668553717", "createdAt": "2021-07-13T08:41:32Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVectorBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.parosproxy.paros.core.scanner.NameValuePair;\n+import org.zaproxy.zap.core.scanner.InputVector.PayloadFormat;\n+\n+/**\n+ * {@code InputVectorBuilder} provides an easy way to build {@code InputVectors} and validates the\n+ * provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVectorBuilder {\n+\n+    private Map<Integer, InputVector> inputVectorsMap = new HashMap<>();\n+\n+    public InputVectorBuilder addAppParameter(\n+            NameValuePair nameValuePair, String param, String value, PayloadFormat payloadFormat) {\n+        inputVectorsMap.put(\n+                nameValuePair.getPosition(),\n+                new InputVector(nameValuePair.getPosition(), param, value, payloadFormat));\n+        return this;\n+    }\n+\n+    public InputVectorBuilder addAppParameterWithoutParam(\n+            NameValuePair nameValuePair, String value, PayloadFormat payloadFormat) {\n+        return this.addAppParameter(nameValuePair, null, value, payloadFormat);\n+    }\n+\n+    public InputVectorBuilder addAppParameterWithoutValue(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1NDg3OQ==", "bodyText": "null has special meaning (e.g. remove the IV), it should use the original values of the NameValuePair.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668554879", "createdAt": "2021-07-13T08:43:00Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVectorBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.parosproxy.paros.core.scanner.NameValuePair;\n+import org.zaproxy.zap.core.scanner.InputVector.PayloadFormat;\n+\n+/**\n+ * {@code InputVectorBuilder} provides an easy way to build {@code InputVectors} and validates the\n+ * provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVectorBuilder {\n+\n+    private Map<Integer, InputVector> inputVectorsMap = new HashMap<>();\n+\n+    public InputVectorBuilder addAppParameter(\n+            NameValuePair nameValuePair, String param, String value, PayloadFormat payloadFormat) {\n+        inputVectorsMap.put(\n+                nameValuePair.getPosition(),\n+                new InputVector(nameValuePair.getPosition(), param, value, payloadFormat));\n+        return this;\n+    }\n+\n+    public InputVectorBuilder addAppParameterWithoutParam(\n+            NameValuePair nameValuePair, String value, PayloadFormat payloadFormat) {\n+        return this.addAppParameter(nameValuePair, null, value, payloadFormat);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1NTgzOA==", "bodyText": "If it's creating a new list it does not need to return an unmodifiable one.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668555838", "createdAt": "2021-07-13T08:44:12Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVectorBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.parosproxy.paros.core.scanner.NameValuePair;\n+import org.zaproxy.zap.core.scanner.InputVector.PayloadFormat;\n+\n+/**\n+ * {@code InputVectorBuilder} provides an easy way to build {@code InputVectors} and validates the\n+ * provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVectorBuilder {\n+\n+    private Map<Integer, InputVector> inputVectorsMap = new HashMap<>();\n+\n+    public InputVectorBuilder addAppParameter(\n+            NameValuePair nameValuePair, String param, String value, PayloadFormat payloadFormat) {\n+        inputVectorsMap.put(\n+                nameValuePair.getPosition(),\n+                new InputVector(nameValuePair.getPosition(), param, value, payloadFormat));\n+        return this;\n+    }\n+\n+    public InputVectorBuilder addAppParameterWithoutParam(\n+            NameValuePair nameValuePair, String value, PayloadFormat payloadFormat) {\n+        return this.addAppParameter(nameValuePair, null, value, payloadFormat);\n+    }\n+\n+    public InputVectorBuilder addAppParameterWithoutValue(\n+            NameValuePair nameValuePair, String param, PayloadFormat payloadFormat) {\n+        return this.addAppParameter(nameValuePair, param, null, payloadFormat);\n+    }\n+\n+    public List<InputVector> build() {\n+        return Collections.unmodifiableList(new ArrayList<>(inputVectorsMap.values()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1Njc1NA==", "bodyText": "Add a see to the other method.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668556754", "createdAt": "2021-07-13T08:45:19Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractAppParamPlugin.java", "diffHunk": "@@ -218,4 +221,20 @@ protected String setParameter(HttpMessage message, String param, String value) {\n     protected String setEscapedParameter(HttpMessage message, String param, String value) {\n         return variant.setEscapedParameter(message, originalPair, param, value);\n     }\n+\n+    /** @return {@code InputVectorBuilder} which is used to build the {@code InputVector} */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA0OTI0NjM4", "url": "https://github.com/zaproxy/zaproxy/pull/6371#pullrequestreview-704924638", "createdAt": "2021-07-13T08:55:57Z", "commit": {"oid": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xM1QwODo1NTo1N1rOJ9l_bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xM1QwODo1NTo1N1rOJ9l_bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU2NTM1OA==", "bodyText": "It needs to have the format for name and value, since they can be set raw/escaped separately.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668565358", "createdAt": "2021-07-13T08:55:57Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVector.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+/**\n+ * {@code InputVector} class wraps the parameters which are used to modify the {@code HttpMessage}.\n+ * It is specifically used for updating multiple parameters of {@code HttpMessage}\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVector {\n+    private int position;\n+    private String name;\n+    private String value;\n+    private PayloadFormat payloadFormat;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA0OTI2ODU5", "url": "https://github.com/zaproxy/zaproxy/pull/6371#pullrequestreview-704926859", "createdAt": "2021-07-13T08:58:04Z", "commit": {"oid": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xM1QwODo1ODowNFrOJ9mGBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xM1QwODo1ODowNFrOJ9mGBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU2NzA0NA==", "bodyText": "Worth noting/doc the caveat that calling these methods replaces the IV (so previous changes are lost).", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668567044", "createdAt": "2021-07-13T08:58:04Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVectorBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.parosproxy.paros.core.scanner.NameValuePair;\n+import org.zaproxy.zap.core.scanner.InputVector.PayloadFormat;\n+\n+/**\n+ * {@code InputVectorBuilder} provides an easy way to build {@code InputVectors} and validates the\n+ * provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVectorBuilder {\n+\n+    private Map<Integer, InputVector> inputVectorsMap = new HashMap<>();\n+\n+    public InputVectorBuilder addAppParameter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2e9018130d9a1dff22ecf4fd7de1f00c76b947a"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9cb5db5b52267c63b77615740a21018aadfa62d1", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/9cb5db5b52267c63b77615740a21018aadfa62d1", "committedDate": "2021-07-13T10:56:06Z", "message": "addressing review comments"}, "afterCommit": {"oid": "d6e51ba3edd7d507fc9bb6d4e805187490575a34", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/d6e51ba3edd7d507fc9bb6d4e805187490575a34", "committedDate": "2021-07-13T10:58:04Z", "message": "addressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d6e51ba3edd7d507fc9bb6d4e805187490575a34", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/d6e51ba3edd7d507fc9bb6d4e805187490575a34", "committedDate": "2021-07-13T10:58:04Z", "message": "addressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>"}, "afterCommit": {"oid": "9a36e9c2cf8153d923b3c43b6f0494bd7177fb09", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/9a36e9c2cf8153d923b3c43b6f0494bd7177fb09", "committedDate": "2021-07-13T11:10:23Z", "message": "Correcting javadoc\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nAddressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nIncorporating review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nSmall Fix\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\naddressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "04c1da15942c13af638d43b1c4cc677379831333", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/04c1da15942c13af638d43b1c4cc677379831333", "committedDate": "2021-07-13T11:40:02Z", "message": "Small fix"}, "afterCommit": {"oid": "f53102591d4f2424086c45c897ff1e858f7b8657", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/f53102591d4f2424086c45c897ff1e858f7b8657", "committedDate": "2021-07-13T11:41:26Z", "message": "Small fix\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA1MjAyMjI2", "url": "https://github.com/zaproxy/zaproxy/pull/6371#pullrequestreview-705202226", "createdAt": "2021-07-13T13:40:35Z", "commit": {"oid": "f53102591d4f2424086c45c897ff1e858f7b8657"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xM1QxMzo0MDozNVrOJ9yvpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xM1QxMzo0NTozMVrOJ9zARw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3NDMwOQ==", "bodyText": "Since you added a link the see is not needed.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668774309", "createdAt": "2021-07-13T13:40:35Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractAppParamPlugin.java", "diffHunk": "@@ -218,4 +221,24 @@ protected String setParameter(HttpMessage message, String param, String value) {\n     protected String setEscapedParameter(HttpMessage message, String param, String value) {\n         return variant.setEscapedParameter(message, originalPair, param, value);\n     }\n+\n+    /**\n+     * @return {@code InputVectorBuilder} which is used to build the {@code InputVector} which is\n+     *     used by {@link #setParameters(HttpMessage, List)}\n+     * @see #setParameters(HttpMessage, List)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f53102591d4f2424086c45c897ff1e858f7b8657"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3NTA4OQ==", "bodyText": "Add since tag, same for the new methods in the implementation.\nappParams needs to be renamed.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668775089", "createdAt": "2021-07-13T13:41:30Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/Variant.java", "diffHunk": "@@ -47,6 +48,14 @@ public String setParameter(\n     public String setEscapedParameter(\n             HttpMessage msg, NameValuePair originalPair, String param, String value);\n \n+    /**\n+     * Sets the parameters into the given {@code message}.\n+     *\n+     * @param message the message that will be changed\n+     * @param appParams list of name of the parameter\n+     */\n+    default void setParameters(HttpMessage message, List<InputVector> appParams) {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f53102591d4f2424086c45c897ff1e858f7b8657"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3NjEyMA==", "bodyText": "Move up to keep it closer to the variable that it applies to (same in other places, e.g. parameters).", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668776120", "createdAt": "2021-07-13T13:42:43Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVector.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+/**\n+ * {@code InputVector} class wraps the parameters which are used to modify the {@code HttpMessage}.\n+ * It is specifically used for updating multiple parameters of {@code HttpMessage}\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVector {\n+\n+    /**\n+     * {@code PayloadFormat} represents the format of the payload. This is useful for the use-cases\n+     * like say there is a parameter which is a URL then caller can itself encode/escape it so that\n+     * it can be directly used to modify {@code HttpMessage} or {@code Variant} has to escape it.\n+     */\n+    public enum PayloadFormat {\n+        REQUIRES_ESCAPING,\n+        ALREADY_ESCAPED\n+    }\n+\n+    private final int position;\n+    private final String name;\n+    private final String value;\n+    private final PayloadFormat namePayloadFormat;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f53102591d4f2424086c45c897ff1e858f7b8657"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3Njg4Mw==", "bodyText": "This applies to all three methods.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668776883", "createdAt": "2021-07-13T13:43:33Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVectorBuilder.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.parosproxy.paros.core.scanner.NameValuePair;\n+import org.zaproxy.zap.core.scanner.InputVector.PayloadFormat;\n+\n+/**\n+ * {@code InputVectorBuilder} provides an easy way to build {@code InputVectors} and validates the\n+ * provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVectorBuilder {\n+\n+    private Map<Integer, InputVector> inputVectorsMap = new HashMap<>();\n+\n+    /**\n+     * Note: calling this method with same NameValuePair will overwrite the earlier name and value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f53102591d4f2424086c45c897ff1e858f7b8657"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3NzI5Ng==", "bodyText": "payloadFormat", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668777296", "createdAt": "2021-07-13T13:44:01Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVectorBuilder.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.parosproxy.paros.core.scanner.NameValuePair;\n+import org.zaproxy.zap.core.scanner.InputVector.PayloadFormat;\n+\n+/**\n+ * {@code InputVectorBuilder} provides an easy way to build {@code InputVectors} and validates the\n+ * provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVectorBuilder {\n+\n+    private Map<Integer, InputVector> inputVectorsMap = new HashMap<>();\n+\n+    /**\n+     * Note: calling this method with same NameValuePair will overwrite the earlier name and value\n+     * with the newer one.\n+     *\n+     * @param nameValuePair\n+     * @param param\n+     * @param value\n+     * @param namePayloadFormat\n+     * @param valuePayloadFormat\n+     * @return {@code InputVectorBuilder}\n+     */\n+    public InputVectorBuilder setNameAndValue(\n+            NameValuePair nameValuePair,\n+            String param,\n+            String value,\n+            PayloadFormat namePayloadFormat,\n+            PayloadFormat valuePayloadFormat) {\n+        inputVectorsMap.put(\n+                nameValuePair.getPosition(),\n+                new InputVector(\n+                        nameValuePair.getPosition(),\n+                        param,\n+                        value,\n+                        namePayloadFormat,\n+                        valuePayloadFormat));\n+        return this;\n+    }\n+\n+    /**\n+     * Note: calling this method with same NameValuePair will overwrite the earlier value with the\n+     * newer one.\n+     *\n+     * @param nameValuePair\n+     * @param value\n+     * @param valuePayloadFormat\n+     * @return {@code InputVectorBuilder}\n+     */\n+    public InputVectorBuilder setValue(\n+            NameValuePair nameValuePair, String value, PayloadFormat valuePayloadFormat) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f53102591d4f2424086c45c897ff1e858f7b8657"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3ODE3OQ==", "bodyText": "This needs to be reviewed, I think some of the variants create the NameValuePairs with unescaped name/value.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668778179", "createdAt": "2021-07-13T13:45:03Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVectorBuilder.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.parosproxy.paros.core.scanner.NameValuePair;\n+import org.zaproxy.zap.core.scanner.InputVector.PayloadFormat;\n+\n+/**\n+ * {@code InputVectorBuilder} provides an easy way to build {@code InputVectors} and validates the\n+ * provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ */\n+public class InputVectorBuilder {\n+\n+    private Map<Integer, InputVector> inputVectorsMap = new HashMap<>();\n+\n+    /**\n+     * Note: calling this method with same NameValuePair will overwrite the earlier name and value\n+     * with the newer one.\n+     *\n+     * @param nameValuePair\n+     * @param param\n+     * @param value\n+     * @param namePayloadFormat\n+     * @param valuePayloadFormat\n+     * @return {@code InputVectorBuilder}\n+     */\n+    public InputVectorBuilder setNameAndValue(\n+            NameValuePair nameValuePair,\n+            String param,\n+            String value,\n+            PayloadFormat namePayloadFormat,\n+            PayloadFormat valuePayloadFormat) {\n+        inputVectorsMap.put(\n+                nameValuePair.getPosition(),\n+                new InputVector(\n+                        nameValuePair.getPosition(),\n+                        param,\n+                        value,\n+                        namePayloadFormat,\n+                        valuePayloadFormat));\n+        return this;\n+    }\n+\n+    /**\n+     * Note: calling this method with same NameValuePair will overwrite the earlier value with the\n+     * newer one.\n+     *\n+     * @param nameValuePair\n+     * @param value\n+     * @param valuePayloadFormat\n+     * @return {@code InputVectorBuilder}\n+     */\n+    public InputVectorBuilder setValue(\n+            NameValuePair nameValuePair, String value, PayloadFormat valuePayloadFormat) {\n+        return this.setNameAndValue(\n+                nameValuePair,\n+                nameValuePair.getName(),\n+                value,\n+                PayloadFormat.ALREADY_ESCAPED,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f53102591d4f2424086c45c897ff1e858f7b8657"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc3ODU2Nw==", "bodyText": "I'd expect this to be in the method excludes.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668778567", "createdAt": "2021-07-13T13:45:31Z", "author": {"login": "thc202"}, "path": "zap/zap.gradle.kts", "diffHunk": "@@ -154,7 +154,8 @@ val japicmp by tasks.registering(JapicmpTask::class) {\n     fieldExcludes = listOf()\n \n     classExcludes = listOf(\n-        \"org.zaproxy.zap.extension.custompages.ContextCustomPagePanel\\$CustomPagesMultipleOptionsPanel\")\n+        \"org.zaproxy.zap.extension.custompages.ContextCustomPagePanel\\$CustomPagesMultipleOptionsPanel\",\n+        \"org.parosproxy.paros.core.scanner.Variant#setParameters(HttpMessage, List)\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f53102591d4f2424086c45c897ff1e858f7b8657"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f0bf2cba48568b637bd8022b33a7a56751e38ba1", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/f0bf2cba48568b637bd8022b33a7a56751e38ba1", "committedDate": "2021-07-13T15:06:47Z", "message": "Addressing review comments"}, "afterCommit": {"oid": "a7af7fc15fbbbc8ea1007c7b875a5260de934388", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/a7af7fc15fbbbc8ea1007c7b875a5260de934388", "committedDate": "2021-07-13T15:07:51Z", "message": "Addressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a7af7fc15fbbbc8ea1007c7b875a5260de934388", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/a7af7fc15fbbbc8ea1007c7b875a5260de934388", "committedDate": "2021-07-13T15:07:51Z", "message": "Addressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>"}, "afterCommit": {"oid": "1f07ac3777ec2c04ce52e03327cd2b5fa4265a9b", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/1f07ac3777ec2c04ce52e03327cd2b5fa4265a9b", "committedDate": "2021-07-13T15:08:42Z", "message": "Addressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nSmall fix\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f07ac3777ec2c04ce52e03327cd2b5fa4265a9b", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/1f07ac3777ec2c04ce52e03327cd2b5fa4265a9b", "committedDate": "2021-07-13T15:08:42Z", "message": "Addressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nSmall fix\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>"}, "afterCommit": {"oid": "9f225fee8832c433c08326146f0be9e4383a681e", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/9f225fee8832c433c08326146f0be9e4383a681e", "committedDate": "2021-07-13T15:12:38Z", "message": "Addressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nSmall fix\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nUpdate VariantMultipartFormParameters.java"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f225fee8832c433c08326146f0be9e4383a681e", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/9f225fee8832c433c08326146f0be9e4383a681e", "committedDate": "2021-07-13T15:12:38Z", "message": "Addressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nSmall fix\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nUpdate VariantMultipartFormParameters.java"}, "afterCommit": {"oid": "f210682330ef4ae60e53d3700524a26edfcee482", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/f210682330ef4ae60e53d3700524a26edfcee482", "committedDate": "2021-07-13T15:43:28Z", "message": "Addressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nSmall fix\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nUpdate VariantMultipartFormParameters.java\n\nLGTM fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f210682330ef4ae60e53d3700524a26edfcee482", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/f210682330ef4ae60e53d3700524a26edfcee482", "committedDate": "2021-07-13T15:43:28Z", "message": "Addressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nSmall fix\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nUpdate VariantMultipartFormParameters.java\n\nLGTM fix"}, "afterCommit": {"oid": "07ddd9549712b98929bf2a6e73dadb445321702b", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/07ddd9549712b98929bf2a6e73dadb445321702b", "committedDate": "2021-07-13T15:49:40Z", "message": "Addressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nSmall fix\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nUpdate VariantMultipartFormParameters.java\n\nLGTM fix\n\nAddressing review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA1MzcyNzUy", "url": "https://github.com/zaproxy/zaproxy/pull/6371#pullrequestreview-705372752", "createdAt": "2021-07-13T15:56:23Z", "commit": {"oid": "07ddd9549712b98929bf2a6e73dadb445321702b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xM1QxNTo1NjoyM1rOJ96bjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xM1QxNTo1NjoyM1rOJ96bjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODkwMDIzNg==", "bodyText": "Can be 2.11.0, the methods added in AbstractAppParamPlugin should have the tag as well. Also worth adding to the new classes.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668900236", "createdAt": "2021-07-13T15:56:23Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/Variant.java", "diffHunk": "@@ -47,6 +48,15 @@ public String setParameter(\n     public String setEscapedParameter(\n             HttpMessage msg, NameValuePair originalPair, String param, String value);\n \n+    /**\n+     * Sets the parameters into the given {@code message}.\n+     *\n+     * @param message the message that will be changed\n+     * @param inputVectors list of name of the parameter\n+     * @since TODO add version\n+     */\n+    default void setParameters(HttpMessage message, List<InputVector> inputVectors) {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ddd9549712b98929bf2a6e73dadb445321702b"}, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07ddd9549712b98929bf2a6e73dadb445321702b", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/07ddd9549712b98929bf2a6e73dadb445321702b", "committedDate": "2021-07-13T15:49:40Z", "message": "Addressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nSmall fix\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nUpdate VariantMultipartFormParameters.java\n\nLGTM fix\n\nAddressing review comments"}, "afterCommit": {"oid": "e5b0abf6ba09dad2beee4c861e9ae1b8a42dcf63", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/e5b0abf6ba09dad2beee4c861e9ae1b8a42dcf63", "committedDate": "2021-07-13T16:12:41Z", "message": "Adding since tag\n\nAddressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nSmall fix\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nUpdate VariantMultipartFormParameters.java\n\nLGTM fix\n\nAddressing review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA1NDA0NzUy", "url": "https://github.com/zaproxy/zaproxy/pull/6371#pullrequestreview-705404752", "createdAt": "2021-07-13T16:26:43Z", "commit": {"oid": "e5b0abf6ba09dad2beee4c861e9ae1b8a42dcf63"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xM1QxNjoyNjo0M1rOJ978Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xM1QxNjoyNjo0M1rOJ978Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODkyNTAwMg==", "bodyText": "Needs update.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r668925002", "createdAt": "2021-07-13T16:26:43Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java", "diffHunk": "@@ -209,33 +212,85 @@ public void setMessage(HttpMessage msg) {\n     @Override\n     public String setParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));\n     }\n \n     @Override\n     public String setEscapedParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));\n     }\n \n-    private String setParameter(HttpMessage msg, NameValuePair originalPair, String value) {\n+    /**\n+     * Sets the parameters into the given {@code message}.\n+     *\n+     * @param msg the message that will be changed\n+     * @param inputVectors list of name of the parameter\n+     * @since TODO add version", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5b0abf6ba09dad2beee4c861e9ae1b8a42dcf63"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e5b0abf6ba09dad2beee4c861e9ae1b8a42dcf63", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/e5b0abf6ba09dad2beee4c861e9ae1b8a42dcf63", "committedDate": "2021-07-13T16:12:41Z", "message": "Adding since tag\n\nAddressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nSmall fix\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nUpdate VariantMultipartFormParameters.java\n\nLGTM fix\n\nAddressing review comments"}, "afterCommit": {"oid": "55df57ad9c8af2f8366bca952f25eddeff2f97bd", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/55df57ad9c8af2f8366bca952f25eddeff2f97bd", "committedDate": "2021-07-13T16:28:15Z", "message": "Adding since tag\n\nAddressing review comments\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nSmall fix\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nUpdate VariantMultipartFormParameters.java\n\nLGTM fix\n\nAddressing review comments\n\nmissed one"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA2MzIyNjU4", "url": "https://github.com/zaproxy/zaproxy/pull/6371#pullrequestreview-706322658", "createdAt": "2021-07-14T14:09:05Z", "commit": {"oid": "55df57ad9c8af2f8366bca952f25eddeff2f97bd"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNFQxNDowOTowNVrOJ-oOiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNFQxNDoxMzowMlrOJ-ocJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY1MDU3MQ==", "bodyText": "Remove semicolon.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r669650571", "createdAt": "2021-07-14T14:09:05Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/Variant.java", "diffHunk": "@@ -47,6 +48,15 @@ public String setParameter(\n     public String setEscapedParameter(\n             HttpMessage msg, NameValuePair originalPair, String param, String value);\n \n+    /**\n+     * Sets the parameters into the given {@code message}.\n+     *\n+     * @param message the message that will be changed\n+     * @param inputVectors list of name of the parameter\n+     * @since 2.11.0\n+     */\n+    default void setParameters(HttpMessage message, List<InputVector> inputVectors) {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55df57ad9c8af2f8366bca952f25eddeff2f97bd"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY1MTQxMQ==", "bodyText": "Use method references here and following.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r669651411", "createdAt": "2021-07-14T14:10:02Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java", "diffHunk": "@@ -209,33 +212,85 @@ public void setMessage(HttpMessage msg) {\n     @Override\n     public String setParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));\n     }\n \n     @Override\n     public String setEscapedParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));\n     }\n \n-    private String setParameter(HttpMessage msg, NameValuePair originalPair, String value) {\n+    /**\n+     * Sets the parameters into the given {@code message}.\n+     *\n+     * @param msg the message that will be changed\n+     * @param inputVectors list of name of the parameter\n+     * @since 2.11.0\n+     */\n+    @Override\n+    public void setParameters(HttpMessage msg, List<InputVector> inputVectors) {\n+        this.setParameter(\n+                msg,\n+                inputVectors.stream()\n+                        .map(inputVector -> inputVector.getPosition())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55df57ad9c8af2f8366bca952f25eddeff2f97bd"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY1MTQ0OA==", "bodyText": "Remove semicolon.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r669651448", "createdAt": "2021-07-14T14:10:05Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java", "diffHunk": "@@ -209,33 +212,85 @@ public void setMessage(HttpMessage msg) {\n     @Override\n     public String setParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));\n     }\n \n     @Override\n     public String setEscapedParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));\n     }\n \n-    private String setParameter(HttpMessage msg, NameValuePair originalPair, String value) {\n+    /**\n+     * Sets the parameters into the given {@code message}.\n+     *\n+     * @param msg the message that will be changed\n+     * @param inputVectors list of name of the parameter\n+     * @since 2.11.0\n+     */\n+    @Override\n+    public void setParameters(HttpMessage msg, List<InputVector> inputVectors) {\n+        this.setParameter(\n+                msg,\n+                inputVectors.stream()\n+                        .map(inputVector -> inputVector.getPosition())\n+                        .collect(Collectors.toList()),\n+                inputVectors.stream()\n+                        .map(inputVector -> inputVector.getValue())\n+                        .collect(Collectors.toList()));\n+    };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55df57ad9c8af2f8366bca952f25eddeff2f97bd"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY1MzExOA==", "bodyText": "Better if we return a consistent order, most of the variants would benefit of that, e.g.:\nreturn inputVectorsMap.values().stream().sorted(Comparator.comparingInt(InputVector::getPosition)).collect(Collectors.toList());", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r669653118", "createdAt": "2021-07-14T14:12:00Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/core/scanner/InputVectorBuilder.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2021 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.core.scanner;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.parosproxy.paros.core.scanner.NameValuePair;\n+import org.zaproxy.zap.core.scanner.InputVector.PayloadFormat;\n+\n+/**\n+ * {@code InputVectorBuilder} provides an easy way to build {@code InputVectors} and validates the\n+ * provided inputs.\n+ *\n+ * @author preetkaran20@gmail.com KSASAN\n+ * @since 2.11.0\n+ */\n+public class InputVectorBuilder {\n+\n+    private Map<Integer, InputVector> inputVectorsMap = new HashMap<>();\n+\n+    /**\n+     * Note: calling this method with same NameValuePair will overwrite the earlier name and value\n+     * with the newer one.\n+     *\n+     * @param nameValuePair\n+     * @param param\n+     * @param value\n+     * @param namePayloadFormat\n+     * @param valuePayloadFormat\n+     * @return {@code InputVectorBuilder}\n+     */\n+    public InputVectorBuilder setNameAndValue(\n+            NameValuePair nameValuePair,\n+            String param,\n+            String value,\n+            PayloadFormat namePayloadFormat,\n+            PayloadFormat valuePayloadFormat) {\n+        inputVectorsMap.put(\n+                nameValuePair.getPosition(),\n+                new InputVector(\n+                        nameValuePair.getPosition(),\n+                        param,\n+                        value,\n+                        namePayloadFormat,\n+                        valuePayloadFormat));\n+        return this;\n+    }\n+\n+    /**\n+     * Note: calling this method with same NameValuePair will overwrite the earlier name and value\n+     * with the newer one.\n+     *\n+     * @param nameValuePair\n+     * @param value\n+     * @param payloadFormat\n+     * @return {@code InputVectorBuilder}\n+     */\n+    public InputVectorBuilder setValue(\n+            NameValuePair nameValuePair, String value, PayloadFormat payloadFormat) {\n+        return this.setNameAndValue(\n+                nameValuePair,\n+                nameValuePair.getName(),\n+                value,\n+                PayloadFormat.ALREADY_ESCAPED,\n+                payloadFormat);\n+    }\n+\n+    /**\n+     * Note: calling this method with same NameValuePair will overwrite the earlier name and value\n+     * with the newer one.\n+     *\n+     * @param nameValuePair\n+     * @param param\n+     * @param payloadFormat\n+     * @return {@code InputVectorBuilder}\n+     */\n+    public InputVectorBuilder setName(\n+            NameValuePair nameValuePair, String param, PayloadFormat payloadFormat) {\n+        return this.setNameAndValue(\n+                nameValuePair,\n+                param,\n+                nameValuePair.getValue(),\n+                payloadFormat,\n+                PayloadFormat.ALREADY_ESCAPED);\n+    }\n+\n+    public List<InputVector> build() {\n+        return new ArrayList<>(inputVectorsMap.values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55df57ad9c8af2f8366bca952f25eddeff2f97bd"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTY1NDA1NQ==", "bodyText": "Can be parameterized, it's just testing different values (same for some of the following tests).", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r669654055", "createdAt": "2021-07-14T14:13:02Z", "author": {"login": "thc202"}, "path": "zap/src/test/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParametersUnitTest.java", "diffHunk": "@@ -227,6 +229,305 @@ void shouldInjectParamValueModificationInFileNameParam() {\n                 message.getRequestBody().toString(), equalTo(newMsg.getRequestBody().toString()));\n     }\n \n+    @Test\n+    void shouldInjectSmallerParamValueModificationInFileNameParam() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55df57ad9c8af2f8366bca952f25eddeff2f97bd"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "00125f573bc8a2a86123476cfc9527de0d65d98b", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/00125f573bc8a2a86123476cfc9527de0d65d98b", "committedDate": "2021-07-14T14:19:08Z", "message": "Fixing code"}, "afterCommit": {"oid": "cf43802cc6d4df01f05e120b7f12e08f1617dca8", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/cf43802cc6d4df01f05e120b7f12e08f1617dca8", "committedDate": "2021-07-14T14:20:53Z", "message": "Fixing code\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf43802cc6d4df01f05e120b7f12e08f1617dca8", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/cf43802cc6d4df01f05e120b7f12e08f1617dca8", "committedDate": "2021-07-14T14:20:53Z", "message": "Fixing code\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>"}, "afterCommit": {"oid": "0e3b8503f15115764d34cd03c15cc9356c38e79f", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/0e3b8503f15115764d34cd03c15cc9356c38e79f", "committedDate": "2021-07-14T14:35:42Z", "message": "Fixing code\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nAddressing review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0e3b8503f15115764d34cd03c15cc9356c38e79f", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/0e3b8503f15115764d34cd03c15cc9356c38e79f", "committedDate": "2021-07-14T14:35:42Z", "message": "Fixing code\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nAddressing review comments"}, "afterCommit": {"oid": "2385ec92a1f44c52e03fc91feb9fb3f2c858facb", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/2385ec92a1f44c52e03fc91feb9fb3f2c858facb", "committedDate": "2021-07-14T16:10:07Z", "message": "Fixing code\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nAddressing review comments\n\nAdding parameterized tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA4MTM1NzI4", "url": "https://github.com/zaproxy/zaproxy/pull/6371#pullrequestreview-708135728", "createdAt": "2021-07-16T08:33:25Z", "commit": {"oid": "2385ec92a1f44c52e03fc91feb9fb3f2c858facb"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQwODozMzoyNlrOJ_-vmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQwODozNDoyMlrOJ_-yOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTA2ODA1Ng==", "bodyText": "Maybe remove this one, is exactly the same as the interface.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r671068056", "createdAt": "2021-07-16T08:33:26Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java", "diffHunk": "@@ -215,33 +218,61 @@ public void setMessage(HttpMessage msg) {\n     @Override\n     public String setParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));\n     }\n \n     @Override\n     public String setEscapedParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));\n     }\n \n-    private String setParameter(HttpMessage msg, NameValuePair originalPair, String value) {\n+    /**\n+     * Sets the parameters into the given {@code message}.\n+     *\n+     * @param msg the message that will be changed\n+     * @param inputVectors list of name of the parameter\n+     * @since 2.11.0\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2385ec92a1f44c52e03fc91feb9fb3f2c858facb"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTA2ODM4Mg==", "bodyText": "Could use Collections.singletonList instead.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r671068382", "createdAt": "2021-07-16T08:33:52Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java", "diffHunk": "@@ -215,33 +218,61 @@ public void setMessage(HttpMessage msg) {\n     @Override\n     public String setParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));\n     }\n \n     @Override\n     public String setEscapedParameter(\n             HttpMessage msg, NameValuePair originalPair, String name, String value) {\n-        return setParameter(msg, originalPair, value);\n+        return setParameter(msg, Arrays.asList(originalPair.getPosition()), Arrays.asList(value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2385ec92a1f44c52e03fc91feb9fb3f2c858facb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTA2ODczMA==", "bodyText": "Remove Empty.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r671068730", "createdAt": "2021-07-16T08:34:22Z", "author": {"login": "thc202"}, "path": "zap/src/test/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParametersUnitTest.java", "diffHunk": "@@ -206,13 +213,13 @@ void shouldInjectParamValueModificationInFileParam() {\n                 message.getRequestBody().toString(), equalTo(newMsg.getRequestBody().toString()));\n     }\n \n-    @Test\n-    void shouldInjectParamValueModificationInFileNameParam() {\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"injected\", \"inj\", \"injectedFileName\", \"\"})\n+    void shouldInjectEmptyParamValueModificationInFileNameParam(String newValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2385ec92a1f44c52e03fc91feb9fb3f2c858facb"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef97feda0efae25c4a99b0fbda907f2aa244f7fd", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/ef97feda0efae25c4a99b0fbda907f2aa244f7fd", "committedDate": "2021-07-16T11:04:06Z", "message": "Correcting comments"}, "afterCommit": {"oid": "7a82fe81553a7d3784ef6804d51cbf22d13b43f8", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/7a82fe81553a7d3784ef6804d51cbf22d13b43f8", "committedDate": "2021-07-16T11:08:49Z", "message": "Correcting comments\n\nFixing code\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nAddressing review comments\n\nAdding parameterized tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7a82fe81553a7d3784ef6804d51cbf22d13b43f8", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/7a82fe81553a7d3784ef6804d51cbf22d13b43f8", "committedDate": "2021-07-16T11:08:49Z", "message": "Correcting comments\n\nFixing code\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nAddressing review comments\n\nAdding parameterized tests"}, "afterCommit": {"oid": "df1dba2d9ed920c723a19774687cf8a60df62081", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/df1dba2d9ed920c723a19774687cf8a60df62081", "committedDate": "2021-07-16T11:20:07Z", "message": "Correcting comments\n\nFixing code\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nAddressing review comments\n\nAdding parameterized tests\n\nSmall logger fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df1dba2d9ed920c723a19774687cf8a60df62081", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/df1dba2d9ed920c723a19774687cf8a60df62081", "committedDate": "2021-07-16T11:20:07Z", "message": "Correcting comments\n\nFixing code\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nAddressing review comments\n\nAdding parameterized tests\n\nSmall logger fix"}, "afterCommit": {"oid": "3b9a7e12f2e33c1dbd80c6c7bbdb0c9d5c97d3ca", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/3b9a7e12f2e33c1dbd80c6c7bbdb0c9d5c97d3ca", "committedDate": "2021-07-17T08:26:23Z", "message": "Correcting comments\n\nFixing code\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nAddressing review comments\n\nAdding parameterized tests\n\nSmall logger fix\n\nAdding Most important method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e74ef1f114aa024b155f6fe12272d0838ef3978", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/2e74ef1f114aa024b155f6fe12272d0838ef3978", "committedDate": "2021-07-19T11:49:18Z", "message": "Adding support for handling manipulation of multiple NameValuePairs\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b9a7e12f2e33c1dbd80c6c7bbdb0c9d5c97d3ca", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/3b9a7e12f2e33c1dbd80c6c7bbdb0c9d5c97d3ca", "committedDate": "2021-07-17T08:26:23Z", "message": "Correcting comments\n\nFixing code\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>\n\nAddressing review comments\n\nAdding parameterized tests\n\nSmall logger fix\n\nAdding Most important method"}, "afterCommit": {"oid": "2e74ef1f114aa024b155f6fe12272d0838ef3978", "author": {"user": {"login": "preetkaran20", "name": "Karan Preet Singh Sasan"}}, "url": "https://github.com/zaproxy/zaproxy/commit/2e74ef1f114aa024b155f6fe12272d0838ef3978", "committedDate": "2021-07-19T11:49:18Z", "message": "Adding support for handling manipulation of multiple NameValuePairs\n\nSigned-off-by: Karan Preet Singh Sasan <preetkaran20@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA5NDgyNjYw", "url": "https://github.com/zaproxy/zaproxy/pull/6371#pullrequestreview-709482660", "createdAt": "2021-07-19T12:22:40Z", "commit": {"oid": "2e74ef1f114aa024b155f6fe12272d0838ef3978"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA5NDkwMDU5", "url": "https://github.com/zaproxy/zaproxy/pull/6371#pullrequestreview-709490059", "createdAt": "2021-07-19T12:31:15Z", "commit": {"oid": "2e74ef1f114aa024b155f6fe12272d0838ef3978"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xOVQxMjozMToxNVrOKBHIlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xOVQxMjozMToxNVrOKBHIlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MjI1NDEwMA==", "bodyText": "hmm yeah, we didn't need the message. thanks.", "url": "https://github.com/zaproxy/zaproxy/pull/6371#discussion_r672254100", "createdAt": "2021-07-19T12:31:15Z", "author": {"login": "preetkaran20"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractAppParamPlugin.java", "diffHunk": "@@ -97,11 +99,22 @@ public void scan() {\n         }\n     }\n \n-    /** Scan the current message using the current Variant */\n-    private void scanVariant() {\n-        for (int i = 0; i < variant.getParamList().size() && !isStop(); i++) {\n+    /**\n+     * Scans the current message using the list of {@code NameValuePair}s handled by the current\n+     * variant. This method should be overridden for the use-cases of manipulating multiple\n+     * parameters in a {@code HttpMessage}.\n+     *\n+     * <p>By default this method calls {@link #scan(HttpMessage, NameValuePair)} for each {@code\n+     * NameValuePair}.\n+     *\n+     * @param nameValuePairs list of parameters handled by the current variant\n+     * @since 2.11.0\n+     * @see #setParameters(HttpMessage, List)\n+     */\n+    protected void scan(List<NameValuePair> nameValuePairs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e74ef1f114aa024b155f6fe12272d0838ef3978"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA5ODQ0MDMz", "url": "https://github.com/zaproxy/zaproxy/pull/6371#pullrequestreview-709844033", "createdAt": "2021-07-19T18:13:23Z", "commit": {"oid": "2e74ef1f114aa024b155f6fe12272d0838ef3978"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 161, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}