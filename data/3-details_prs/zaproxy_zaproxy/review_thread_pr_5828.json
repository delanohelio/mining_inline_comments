{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MTAxNzM2", "number": 5828, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwOToyMzo1NFrODaqa0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxNDo1NTozMlrODgKaLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Mjg0NTYxOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwOToyMzo1NFrOFhvYbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwOToyMzo1NFrOFhvYbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkyMzYzMA==", "bodyText": "This seems to be done", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r370923630", "createdAt": "2020-01-25T09:23:54Z", "author": {"login": "kingthorin"}, "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -274,6 +278,22 @@ private JToggleButton getButtonUseCookies() {\n         return useCookies;\n     }\n \n+    private JToggleButton getButtonUseCsrf() {\n+        // TODO: Add resources for icon and tooltip", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b9845977aa4f3c6e8f0f3eafaa55b97e0af02c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzUyMzQ2OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxNjowNjo1MlrOFh0sFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxMTowNTo1NlrOFkdW8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMDU4Mg==", "bodyText": "It's not necessary to change it.", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r371010582", "createdAt": "2020-01-26T16:06:52Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -3,7 +3,7 @@\n  *\n  * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n  *\n- * Copyright 2012 The ZAP Development Team\n+ * Copyright 2020 The ZAP Development Team", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4b8b16a7e067bfdc79962a6a72e089c93e3b72d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMDgzMg==", "bodyText": "spotlessApply does that sometimes, I haven\u2019t figured out the trigger...", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r371010832", "createdAt": "2020-01-26T16:10:50Z", "author": {"login": "kingthorin"}, "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -3,7 +3,7 @@\n  *\n  * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n  *\n- * Copyright 2012 The ZAP Development Team\n+ * Copyright 2020 The ZAP Development Team", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMDU4Mg=="}, "originalCommit": {"oid": "e4b8b16a7e067bfdc79962a6a72e089c93e3b72d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMDk4Mw==", "bodyText": "Ah, it was because of the ZAP comment (not needed in this class).", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r371010983", "createdAt": "2020-01-26T16:13:03Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -3,7 +3,7 @@\n  *\n  * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n  *\n- * Copyright 2012 The ZAP Development Team\n+ * Copyright 2020 The ZAP Development Team", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMDU4Mg=="}, "originalCommit": {"oid": "e4b8b16a7e067bfdc79962a6a72e089c93e3b72d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA2NTQ0Ng==", "bodyText": "Yea it was done by spotlessApply, should I change it back then?", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r371065446", "createdAt": "2020-01-27T05:04:22Z", "author": {"login": "madanalogy"}, "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -3,7 +3,7 @@\n  *\n  * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n  *\n- * Copyright 2012 The ZAP Development Team\n+ * Copyright 2020 The ZAP Development Team", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMDU4Mg=="}, "originalCommit": {"oid": "e4b8b16a7e067bfdc79962a6a72e089c93e3b72d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3NDA2Nw==", "bodyText": "Yes please", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r373774067", "createdAt": "2020-02-01T11:05:56Z", "author": {"login": "kingthorin"}, "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -3,7 +3,7 @@\n  *\n  * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n  *\n- * Copyright 2012 The ZAP Development Team\n+ * Copyright 2020 The ZAP Development Team", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMDU4Mg=="}, "originalCommit": {"oid": "e4b8b16a7e067bfdc79962a6a72e089c93e3b72d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDYyNDY0OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDo0NDo1NlrOFh-YsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTo1NzowOFrOFiAQhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTQ1Ng==", "bodyText": "You ended up calling it replace*", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r371169456", "createdAt": "2020-01-27T10:44:56Z", "author": {"login": "kingthorin"}, "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java", "diffHunk": "@@ -54,6 +54,7 @@\n // ZAP: 2019/06/01 Normalise line endings.\n // ZAP: 2019/06/05 Normalise format/style.\n // ZAP: 2019/12/09 Address deprecation of getHeaders(String) Vector method.\n+// ZAP: 2020/01/27 Added injectCsrfToken method", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c02840d30e3412f43b4930a3a111dd9185289a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIwMDEzMg==", "bodyText": "Thanks for pointing that out", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r371200132", "createdAt": "2020-01-27T11:57:08Z", "author": {"login": "madanalogy"}, "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java", "diffHunk": "@@ -54,6 +54,7 @@\n // ZAP: 2019/06/01 Normalise line endings.\n // ZAP: 2019/06/05 Normalise format/style.\n // ZAP: 2019/12/09 Address deprecation of getHeaders(String) Vector method.\n+// ZAP: 2020/01/27 Added injectCsrfToken method", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTQ1Ng=="}, "originalCommit": {"oid": "57c02840d30e3412f43b4930a3a111dd9185289a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDYyNjU4OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDo0NTozM1rOFh-Z1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNTozNjo1OFrOFmfl6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTc0OQ==", "bodyText": "replace*", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r371169749", "createdAt": "2020-01-27T10:45:33Z", "author": {"login": "kingthorin"}, "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java", "diffHunk": "@@ -1090,4 +1094,27 @@ public void setResponseFromTargetHost(final boolean responseFromTargetHost) {\n     public String getType() {\n         return MESSAGE_TYPE;\n     }\n+\n+    public static void replaceCsrfToken(\n+            HttpMessage msg,\n+            AntiCsrfToken antiCsrfToken,\n+            String tokenValue,\n+            Logger log,\n+            Encoder encoder,\n+            ExtensionAntiCSRF extAntiCSRF) {\n+        log.debug(\n+                \"regenerateAntiCsrfToken replacing \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c02840d30e3412f43b4930a3a111dd9185289a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3NDI3Mw==", "bodyText": "This replace method may only currently be called from regenerate but there\u2019s no way we can be sure that\u2019ll always be the case.\nAlso I think it\u2019ll be more confusing than helpful for future debugging/ maintenance if the message isn\u2019t aligned to the local most function name.", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r373774273", "createdAt": "2020-02-01T11:11:26Z", "author": {"login": "kingthorin"}, "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java", "diffHunk": "@@ -1090,4 +1094,27 @@ public void setResponseFromTargetHost(final boolean responseFromTargetHost) {\n     public String getType() {\n         return MESSAGE_TYPE;\n     }\n+\n+    public static void replaceCsrfToken(\n+            HttpMessage msg,\n+            AntiCsrfToken antiCsrfToken,\n+            String tokenValue,\n+            Logger log,\n+            Encoder encoder,\n+            ExtensionAntiCSRF extAntiCSRF) {\n+        log.debug(\n+                \"regenerateAntiCsrfToken replacing \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTc0OQ=="}, "originalCommit": {"oid": "57c02840d30e3412f43b4930a3a111dd9185289a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3NDc2MA==", "bodyText": "So I should move the logging out of the method and have it instead being done right before the method invocation?", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r373774760", "createdAt": "2020-02-01T11:23:07Z", "author": {"login": "madanalogy"}, "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java", "diffHunk": "@@ -1090,4 +1094,27 @@ public void setResponseFromTargetHost(final boolean responseFromTargetHost) {\n     public String getType() {\n         return MESSAGE_TYPE;\n     }\n+\n+    public static void replaceCsrfToken(\n+            HttpMessage msg,\n+            AntiCsrfToken antiCsrfToken,\n+            String tokenValue,\n+            Logger log,\n+            Encoder encoder,\n+            ExtensionAntiCSRF extAntiCSRF) {\n+        log.debug(\n+                \"regenerateAntiCsrfToken replacing \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTc0OQ=="}, "originalCommit": {"oid": "57c02840d30e3412f43b4930a3a111dd9185289a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3NTMxMw==", "bodyText": "Sure it could be moved into the regenerate method ahead of the call", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r373775313", "createdAt": "2020-02-01T11:37:23Z", "author": {"login": "kingthorin"}, "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java", "diffHunk": "@@ -1090,4 +1094,27 @@ public void setResponseFromTargetHost(final boolean responseFromTargetHost) {\n     public String getType() {\n         return MESSAGE_TYPE;\n     }\n+\n+    public static void replaceCsrfToken(\n+            HttpMessage msg,\n+            AntiCsrfToken antiCsrfToken,\n+            String tokenValue,\n+            Logger log,\n+            Encoder encoder,\n+            ExtensionAntiCSRF extAntiCSRF) {\n+        log.debug(\n+                \"regenerateAntiCsrfToken replacing \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTc0OQ=="}, "originalCommit": {"oid": "57c02840d30e3412f43b4930a3a111dd9185289a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkwNjI0Mw==", "bodyText": "replace*\n\nSorry I think I missed this, did you mean to replace the word \"replacing\" with \"replace\"?", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r375906243", "createdAt": "2020-02-06T15:34:46Z", "author": {"login": "madanalogy"}, "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java", "diffHunk": "@@ -1090,4 +1094,27 @@ public void setResponseFromTargetHost(final boolean responseFromTargetHost) {\n     public String getType() {\n         return MESSAGE_TYPE;\n     }\n+\n+    public static void replaceCsrfToken(\n+            HttpMessage msg,\n+            AntiCsrfToken antiCsrfToken,\n+            String tokenValue,\n+            Logger log,\n+            Encoder encoder,\n+            ExtensionAntiCSRF extAntiCSRF) {\n+        log.debug(\n+                \"regenerateAntiCsrfToken replacing \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTc0OQ=="}, "originalCommit": {"oid": "57c02840d30e3412f43b4930a3a111dd9185289a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkwNzA3MA==", "bodyText": "Probably doesn't apply anymore, this was when you'd implemented a replace method not a regenerate......", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r375907070", "createdAt": "2020-02-06T15:36:10Z", "author": {"login": "kingthorin"}, "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java", "diffHunk": "@@ -1090,4 +1094,27 @@ public void setResponseFromTargetHost(final boolean responseFromTargetHost) {\n     public String getType() {\n         return MESSAGE_TYPE;\n     }\n+\n+    public static void replaceCsrfToken(\n+            HttpMessage msg,\n+            AntiCsrfToken antiCsrfToken,\n+            String tokenValue,\n+            Logger log,\n+            Encoder encoder,\n+            ExtensionAntiCSRF extAntiCSRF) {\n+        log.debug(\n+                \"regenerateAntiCsrfToken replacing \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTc0OQ=="}, "originalCommit": {"oid": "57c02840d30e3412f43b4930a3a111dd9185289a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkwNzgxOQ==", "bodyText": "Gotcha haha, thanks for the clarification :)", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r375907819", "createdAt": "2020-02-06T15:36:58Z", "author": {"login": "madanalogy"}, "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java", "diffHunk": "@@ -1090,4 +1094,27 @@ public void setResponseFromTargetHost(final boolean responseFromTargetHost) {\n     public String getType() {\n         return MESSAGE_TYPE;\n     }\n+\n+    public static void replaceCsrfToken(\n+            HttpMessage msg,\n+            AntiCsrfToken antiCsrfToken,\n+            String tokenValue,\n+            Logger log,\n+            Encoder encoder,\n+            ExtensionAntiCSRF extAntiCSRF) {\n+        log.debug(\n+                \"regenerateAntiCsrfToken replacing \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTc0OQ=="}, "originalCommit": {"oid": "57c02840d30e3412f43b4930a3a111dd9185289a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTA3ODAwOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzoyOTo0OFrOFlnJHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzo0NDozOVrOFlncDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4Mjk0Mg==", "bodyText": "It's not necessary to include the class, the logger is already adding it.", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r374982942", "createdAt": "2020-02-04T23:29:48Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java", "diffHunk": "@@ -345,22 +346,11 @@ private void regenerateAntiCsrfToken(HttpMessage msg, AntiCsrfToken antiCsrfToke\n         if (tokenValue != null) {\n             // Replace token value - only supported in the body right now\n             log.debug(\n-                    \"regenerateAntiCsrfToken replacing \"\n+                    \"regenerateAntiCsrfToken in AbstractPlugin replacing \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13eaefb7b457e30eface52855b8ee3ceb246ae5e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4Nzc5MA==", "bodyText": "I think one of my earlier comments may have lead to this. Sorry", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r374987790", "createdAt": "2020-02-04T23:44:39Z", "author": {"login": "kingthorin"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java", "diffHunk": "@@ -345,22 +346,11 @@ private void regenerateAntiCsrfToken(HttpMessage msg, AntiCsrfToken antiCsrfToke\n         if (tokenValue != null) {\n             // Replace token value - only supported in the body right now\n             log.debug(\n-                    \"regenerateAntiCsrfToken replacing \"\n+                    \"regenerateAntiCsrfToken in AbstractPlugin replacing \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4Mjk0Mg=="}, "originalCommit": {"oid": "13eaefb7b457e30eface52855b8ee3ceb246ae5e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTA3ODU2OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzozMDowNFrOFlnJfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzozMDowNFrOFlnJfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MzAzOQ==", "bodyText": "Needs to resend the message before attempting to get the new token value.", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r374983039", "createdAt": "2020-02-04T23:30:04Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -146,6 +174,33 @@ public void run() {\n         }\n     }\n \n+    private void regenerateAntiCsrfToken(HttpMessage msg, AntiCsrfToken antiCsrfToken) {\n+        if (antiCsrfToken == null) {\n+            return;\n+        }\n+\n+        String tokenValue = null;\n+        try {\n+            HttpMessage tokenMsg = antiCsrfToken.getMsg().cloneAll();\n+            tokenValue = extAntiCSRF.getTokenValue(tokenMsg, antiCsrfToken.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13eaefb7b457e30eface52855b8ee3ceb246ae5e"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTA3ODgwOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzozMDoxMVrOFlnJoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjoxMjoyNlrOFlp0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MzA3Mw==", "bodyText": "I'd suggest using a toggle button with an icon, don't know which one though :)", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r374983073", "createdAt": "2020-02-04T23:30:11Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -274,6 +329,14 @@ private JToggleButton getButtonUseCookies() {\n         return useCookies;\n     }\n \n+    private JCheckBox getButtonUseCsrf() {\n+        if (useCsrf == null) {\n+            useCsrf = new JCheckBox();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13eaefb7b457e30eface52855b8ee3ceb246ae5e"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyNTYwNw==", "bodyText": "Would it be okay for me to reuse one of the icons already available in the resources directory? I can pick an appropriate one and put it into my next update to this PR haha", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r375025607", "createdAt": "2020-02-05T02:07:21Z", "author": {"login": "madanalogy"}, "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -274,6 +329,14 @@ private JToggleButton getButtonUseCookies() {\n         return useCookies;\n     }\n \n+    private JCheckBox getButtonUseCsrf() {\n+        if (useCsrf == null) {\n+            useCsrf = new JCheckBox();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MzA3Mw=="}, "originalCommit": {"oid": "13eaefb7b457e30eface52855b8ee3ceb246ae5e"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyNjc0MA==", "bodyText": "Absolutely, or something from the Fugue collection which we've used a bunch already.", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r375026740", "createdAt": "2020-02-05T02:12:26Z", "author": {"login": "kingthorin"}, "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -274,6 +329,14 @@ private JToggleButton getButtonUseCookies() {\n         return useCookies;\n     }\n \n+    private JCheckBox getButtonUseCsrf() {\n+        if (useCsrf == null) {\n+            useCsrf = new JCheckBox();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MzA3Mw=="}, "originalCommit": {"oid": "13eaefb7b457e30eface52855b8ee3ceb246ae5e"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTA3OTk5OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzozMDo0MlrOFlnKUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMToxMTozMVrOFmvg1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MzI0OQ==", "bodyText": "This would be better in ExtensionAntiCSRF, this class does not need to know about the anti-CSRF tokens.\nIt can be extracted the whole method (regenerateAntiCsrfToken) and also some of the previous logic (starting at List<AntiCsrfToken> tokens = extAntiCSRF.getTokens(message);) it's the same for both/all.", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r374983249", "createdAt": "2020-02-04T23:30:42Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java", "diffHunk": "@@ -1090,4 +1094,22 @@ public void setResponseFromTargetHost(final boolean responseFromTargetHost) {\n     public String getType() {\n         return MESSAGE_TYPE;\n     }\n+\n+    public static void replaceCsrfToken(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13eaefb7b457e30eface52855b8ee3ceb246ae5e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyNjAwOA==", "bodyText": "It can be extracted the whole method (regenerateAntiCsrfToken) and also some of the previous logic (starting at List<AntiCsrfToken> tokens = extAntiCSRF.getTokens(message);) it's the same for both/all.\n\n\nDid you mean that instead of just extracting replaceCsrfToken I could extract the entire method regenerateAntiCsrfToken?", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r375026008", "createdAt": "2020-02-05T02:08:53Z", "author": {"login": "madanalogy"}, "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java", "diffHunk": "@@ -1090,4 +1094,22 @@ public void setResponseFromTargetHost(final boolean responseFromTargetHost) {\n     public String getType() {\n         return MESSAGE_TYPE;\n     }\n+\n+    public static void replaceCsrfToken(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MzI0OQ=="}, "originalCommit": {"oid": "13eaefb7b457e30eface52855b8ee3ceb246ae5e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE2MDQ4OQ==", "bodyText": "Yes.", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r375160489", "createdAt": "2020-02-05T10:02:03Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java", "diffHunk": "@@ -1090,4 +1094,22 @@ public void setResponseFromTargetHost(final boolean responseFromTargetHost) {\n     public String getType() {\n         return MESSAGE_TYPE;\n     }\n+\n+    public static void replaceCsrfToken(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MzI0OQ=="}, "originalCommit": {"oid": "13eaefb7b457e30eface52855b8ee3ceb246ae5e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkwNTQ3MQ==", "bodyText": "Just a note, I ran into some issues doing this because AbstractPlugin had it's own implementation of sendAndReceive() so I implemented a similar logic in the new extracted method. It works fine on manual testing and the regression tests were green so I'm hoping my implementation was correct", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r375905471", "createdAt": "2020-02-06T15:33:28Z", "author": {"login": "madanalogy"}, "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java", "diffHunk": "@@ -1090,4 +1094,22 @@ public void setResponseFromTargetHost(final boolean responseFromTargetHost) {\n     public String getType() {\n         return MESSAGE_TYPE;\n     }\n+\n+    public static void replaceCsrfToken(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MzI0OQ=="}, "originalCommit": {"oid": "13eaefb7b457e30eface52855b8ee3ceb246ae5e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2NTE5MA==", "bodyText": "It's better to leave the actual send to the caller, the HttpSender might have state (e.g. user, session) which would be lost if the message is sent by the extension. The method could accept a function which sends the HttpMessage, e.g.:\npublic interface HttpMessageSender {\n    void sendAndReceive(HttpMessage message) throws IOException;\n}", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r376165190", "createdAt": "2020-02-07T00:58:02Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java", "diffHunk": "@@ -1090,4 +1094,22 @@ public void setResponseFromTargetHost(final boolean responseFromTargetHost) {\n     public String getType() {\n         return MESSAGE_TYPE;\n     }\n+\n+    public static void replaceCsrfToken(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MzI0OQ=="}, "originalCommit": {"oid": "13eaefb7b457e30eface52855b8ee3ceb246ae5e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2ODY2MQ==", "bodyText": "I did not know that was possible haha, thanks again for pointing me in the right direction :)", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r376168661", "createdAt": "2020-02-07T01:11:31Z", "author": {"login": "madanalogy"}, "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java", "diffHunk": "@@ -1090,4 +1094,22 @@ public void setResponseFromTargetHost(final boolean responseFromTargetHost) {\n     public String getType() {\n         return MESSAGE_TYPE;\n     }\n+\n+    public static void replaceCsrfToken(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MzI0OQ=="}, "originalCommit": {"oid": "13eaefb7b457e30eface52855b8ee3ceb246ae5e"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjU4Mjg0OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDo1MTo1NFrOFmvMhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDo1MTo1NFrOFmvMhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MzQ2MQ==", "bodyText": "Could add only when the extension is enabled.", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r376163461", "createdAt": "2020-02-07T00:51:54Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -78,6 +81,7 @@ public HttpPanelSender(HttpPanelRequest requestPanel, HttpPanelResponse response\n         requestPanel.addOptions(getButtonUseCookies(), HttpPanel.OptionsLocation.AFTER_COMPONENTS);\n         requestPanel.addOptions(\n                 getButtonFollowRedirects(), HttpPanel.OptionsLocation.AFTER_COMPONENTS);\n+        requestPanel.addOptions(getButtonUseCsrf(), HttpPanel.OptionsLocation.AFTER_COMPONENTS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e651c9fab6a40e496ef83f6ca6d997d5ded0dd"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjU4MzE2OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDo1MjowMFrOFmvMrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxNDo1NzozMlrOFqPWpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MzUwMw==", "bodyText": "Should be disabled by default (other options are).", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r376163503", "createdAt": "2020-02-07T00:52:00Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -274,6 +296,19 @@ private JToggleButton getButtonUseCookies() {\n         return useCookies;\n     }\n \n+    private JToggleButton getButtonUseCsrf() {\n+        if (useCsrf == null) {\n+            useCsrf =\n+                    new JToggleButton(\n+                            new ImageIcon(\n+                                    HttpPanelSender.class.getResource(\n+                                            \"/resource/icon/fugue/document-target.png\")));\n+            useCsrf.setToolTipText(Constant.messages.getString(\"manReq.checkBox.useCSRF\"));\n+            useCsrf.setSelected(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e651c9fab6a40e496ef83f6ca6d997d5ded0dd"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5OTczNA==", "bodyText": "I was trying to follow the implementation of getButtonFollowRedirects() which set the default as enabled. But disabled by default makes more sense especially since the button shouldn't even be there unless the ExtensionAntiCSRF is enabled.", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r376199734", "createdAt": "2020-02-07T03:31:28Z", "author": {"login": "madanalogy"}, "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -274,6 +296,19 @@ private JToggleButton getButtonUseCookies() {\n         return useCookies;\n     }\n \n+    private JToggleButton getButtonUseCsrf() {\n+        if (useCsrf == null) {\n+            useCsrf =\n+                    new JToggleButton(\n+                            new ImageIcon(\n+                                    HttpPanelSender.class.getResource(\n+                                            \"/resource/icon/fugue/document-target.png\")));\n+            useCsrf.setToolTipText(Constant.messages.getString(\"manReq.checkBox.useCSRF\"));\n+            useCsrf.setSelected(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MzUwMw=="}, "originalCommit": {"oid": "b7e651c9fab6a40e496ef83f6ca6d997d5ded0dd"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzNjA2OA==", "bodyText": "Right, was thinking on the session options.", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r379836068", "createdAt": "2020-02-15T14:57:32Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -274,6 +296,19 @@ private JToggleButton getButtonUseCookies() {\n         return useCookies;\n     }\n \n+    private JToggleButton getButtonUseCsrf() {\n+        if (useCsrf == null) {\n+            useCsrf =\n+                    new JToggleButton(\n+                            new ImageIcon(\n+                                    HttpPanelSender.class.getResource(\n+                                            \"/resource/icon/fugue/document-target.png\")));\n+            useCsrf.setToolTipText(Constant.messages.getString(\"manReq.checkBox.useCSRF\"));\n+            useCsrf.setSelected(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MzUwMw=="}, "originalCommit": {"oid": "b7e651c9fab6a40e496ef83f6ca6d997d5ded0dd"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjU5MDgzOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDo1NTo1NFrOFmvRJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMTowMTozM1rOFmvXGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2NDY0NA==", "bodyText": "I'd suggest using the \"old\" nameregenerateAntiCsrfToken, it's not injecting (just replacing and clear with \"anti\").\nThe two methods can be merged (and feel free to clean up).", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r376164644", "createdAt": "2020-02-07T00:55:54Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java", "diffHunk": "@@ -524,4 +528,67 @@ public String generateForm(HttpMessage msg) throws UnsupportedEncodingException\n         HistoryReference createHistoryReference(int id)\n                 throws DatabaseException, HttpMalformedHeaderException;\n     }\n+\n+    public void injectCsrfToken(HttpMessage message, HttpRequestConfig config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e651c9fab6a40e496ef83f6ca6d997d5ded0dd"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2NjE3MA==", "bodyText": "Also worth adding some JavaDoc (and since tag).", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r376166170", "createdAt": "2020-02-07T01:01:33Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java", "diffHunk": "@@ -524,4 +528,67 @@ public String generateForm(HttpMessage msg) throws UnsupportedEncodingException\n         HistoryReference createHistoryReference(int id)\n                 throws DatabaseException, HttpMalformedHeaderException;\n     }\n+\n+    public void injectCsrfToken(HttpMessage message, HttpRequestConfig config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2NDY0NA=="}, "originalCommit": {"oid": "b7e651c9fab6a40e496ef83f6ca6d997d5ded0dd"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDUxNTIwOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxNDo1Mzo1OFrOFqPV-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxNDo1Mzo1OFrOFqPV-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzNTg5Ng==", "bodyText": "It can be sent with the correct parameters instead, e.g.:\nextAntiCSRF.regenerateAntiCsrfToken(message, tokenMsg -> sendAndReceive(tokenMsg, true, false));", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r379835896", "createdAt": "2020-02-15T14:53:58Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java", "diffHunk": "@@ -277,15 +277,11 @@ protected void sendAndReceive(\n                                 .getExtension(ExtensionAntiCSRF.class);\n             }\n             if (extAntiCSRF != null) {\n-                List<AntiCsrfToken> tokens = extAntiCSRF.getTokens(message);\n-                AntiCsrfToken antiCsrfToken = null;\n-                if (tokens.size() > 0) {\n-                    antiCsrfToken = tokens.get(0);\n-                }\n-\n-                if (antiCsrfToken != null) {\n-                    regenerateAntiCsrfToken(message, antiCsrfToken);\n+                if (!isRegenCsrfCalled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e028ff1d27181a919d6afb6c236fabde40c9dc7"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDUxNTI1OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxNDo1NDoxMlrOFqPV_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxNDo1NDoxMlrOFqPV_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzNTkwMQ==", "bodyText": "extAntiCSRF != null, it's null when not enabled.", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r379835901", "createdAt": "2020-02-15T14:54:12Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -61,23 +62,31 @@\n \n     private final HttpPanelResponse responsePanel;\n     private ExtensionHistory extension;\n+    private ExtensionAntiCSRF extAntiCSRF = null;\n \n     private HttpSender delegate;\n \n     private JToggleButton followRedirect = null;\n     private JToggleButton useTrackingSessionState = null;\n     private JToggleButton useCookies = null;\n+    private JToggleButton useCsrf = null;\n \n     private List<PersistentConnectionListener> persistentConnectionListener = new ArrayList<>();\n \n     public HttpPanelSender(HttpPanelRequest requestPanel, HttpPanelResponse responsePanel) {\n         this.responsePanel = responsePanel;\n \n+        extAntiCSRF =\n+                Control.getSingleton().getExtensionLoader().getExtension(ExtensionAntiCSRF.class);\n+\n         requestPanel.addOptions(\n                 getButtonUseTrackingSessionState(), HttpPanel.OptionsLocation.AFTER_COMPONENTS);\n         requestPanel.addOptions(getButtonUseCookies(), HttpPanel.OptionsLocation.AFTER_COMPONENTS);\n         requestPanel.addOptions(\n                 getButtonFollowRedirects(), HttpPanel.OptionsLocation.AFTER_COMPONENTS);\n+        if (extAntiCSRF.isEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e028ff1d27181a919d6afb6c236fabde40c9dc7"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDUxNTUyOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxNDo1NToyMFrOFqPWJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxNDo1NToyMFrOFqPWJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzNTk0Mg==", "bodyText": "Worth swapping the operands and inline the isSelected check to avoid creating the button when the extension is disabled.", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r379835942", "createdAt": "2020-02-15T14:55:20Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -91,7 +100,13 @@ public void handleSendMessage(Message aMessage) throws IllegalArgumentException,\n         httpMessage.setRequestingUser(null);\n         try {\n             final ModeRedirectionValidator redirectionValidator = new ModeRedirectionValidator();\n+            boolean useAntiCSRF = getButtonUseCsrf().isSelected();\n             boolean followRedirects = getButtonFollowRedirects().isSelected();\n+\n+            if (useAntiCSRF && extAntiCSRF != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e028ff1d27181a919d6afb6c236fabde40c9dc7"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDUxNTU0OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxNDo1NToyNFrOFqPWKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxNDo1NToyNFrOFqPWKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzNTk0NQ==", "bodyText": "Can be removed, it's not selected by default.", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r379835945", "createdAt": "2020-02-15T14:55:24Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -274,6 +289,19 @@ private JToggleButton getButtonUseCookies() {\n         return useCookies;\n     }\n \n+    private JToggleButton getButtonUseCsrf() {\n+        if (useCsrf == null) {\n+            useCsrf =\n+                    new JToggleButton(\n+                            new ImageIcon(\n+                                    HttpPanelSender.class.getResource(\n+                                            \"/resource/icon/fugue/document-target.png\")));\n+            useCsrf.setToolTipText(Constant.messages.getString(\"manReq.checkBox.useCSRF\"));\n+            useCsrf.setSelected(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e028ff1d27181a919d6afb6c236fabde40c9dc7"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDUxNTU2OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessageSender.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxNDo1NToyN1rOFqPWKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxNDo1NToyN1rOFqPWKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzNTk0Nw==", "bodyText": "I'd keep this in ExtensionAntiCSRF for now.", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r379835947", "createdAt": "2020-02-15T14:55:27Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessageSender.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package org.parosproxy.paros.network;\n+\n+import java.io.IOException;\n+\n+public interface HttpMessageSender {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e028ff1d27181a919d6afb6c236fabde40c9dc7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDUxNTYyOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxNDo1NTozMFrOFqPWMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxNDo1NTozMFrOFqPWMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzNTk1NA==", "bodyText": "... to obtain the new anti-csrf token.?", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r379835954", "createdAt": "2020-02-15T14:55:30Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java", "diffHunk": "@@ -524,4 +525,55 @@ public String generateForm(HttpMessage msg) throws UnsupportedEncodingException\n         HistoryReference createHistoryReference(int id)\n                 throws DatabaseException, HttpMalformedHeaderException;\n     }\n+\n+    /**\n+     * Regenerates the Anti-CSRF Token of a HttpMessage if one exists.\n+     *\n+     * @param message The {@link HttpMessage} to be checked.\n+     * @param httpSender The {@code sendAndReceive} implementation of the caller.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e028ff1d27181a919d6afb6c236fabde40c9dc7"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDUxNTY2OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxNDo1NTozMlrOFqPWNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxNDo1NTozMlrOFqPWNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzNTk1OA==", "bodyText": "2.10.0 or TODO add version.", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r379835958", "createdAt": "2020-02-15T14:55:32Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java", "diffHunk": "@@ -524,4 +525,55 @@ public String generateForm(HttpMessage msg) throws UnsupportedEncodingException\n         HistoryReference createHistoryReference(int id)\n                 throws DatabaseException, HttpMalformedHeaderException;\n     }\n+\n+    /**\n+     * Regenerates the Anti-CSRF Token of a HttpMessage if one exists.\n+     *\n+     * @param message The {@link HttpMessage} to be checked.\n+     * @param httpSender The {@code sendAndReceive} implementation of the caller.\n+     * @since 2.9.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e028ff1d27181a919d6afb6c236fabde40c9dc7"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 643, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}