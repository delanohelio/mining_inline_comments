{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NTkxODkz", "number": 6289, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOToxOTowMVrOE3nvpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDozNDo1MlrOE3pcww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NzU4MzEwOnYy", "diffSide": "RIGHT", "path": "zap/src/test/java/org/parosproxy/paros/network/HttpResponseHeaderUnitTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOToxOTowMVrOHxEzYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzozMTozNlrOHxNP0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyMDk2MQ==", "bodyText": "..WhenContentTypeDoesnNotIndicateCss ?", "url": "https://github.com/zaproxy/zaproxy/pull/6289#discussion_r521220961", "createdAt": "2020-11-11T09:19:01Z", "author": {"login": "psiinon"}, "path": "zap/src/test/java/org/parosproxy/paros/network/HttpResponseHeaderUnitTest.java", "diffHunk": "@@ -126,4 +130,43 @@ public void shouldSetEmptyReasonPhraseIfNull() throws Exception {\n         assertThat(header.getReasonPhrase(), is(equalTo(\"\")));\n         assertThat(header.getPrimeHeader(), is(equalTo(\"HTTP/1.1 200\")));\n     }\n+\n+    @ParameterizedTest\n+    @ValueSource(\n+            strings = {\n+                \"text/html\", // Text but not css\n+                \"image/png\", // Not text or css\n+                \"teXt/hTmL\", // Mixed case\n+                \"text/html; charset=UTF-8\", // Expected charset\n+                \"text/html;charset=UTF-8\", // Charset without space\n+                \"charset=UTF-8; text/html\" // Charset first\n+            })\n+    public void isCssShouldReturnFalseWhenContentTypeIndicatesCss(String contentType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "705fb3d0533afd23dd4cb9e55dc6bfca1654531c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI5NTQwNg==", "bodyText": "Oops, paste fail ...", "url": "https://github.com/zaproxy/zaproxy/pull/6289#discussion_r521295406", "createdAt": "2020-11-11T11:32:32Z", "author": {"login": "kingthorin"}, "path": "zap/src/test/java/org/parosproxy/paros/network/HttpResponseHeaderUnitTest.java", "diffHunk": "@@ -126,4 +130,43 @@ public void shouldSetEmptyReasonPhraseIfNull() throws Exception {\n         assertThat(header.getReasonPhrase(), is(equalTo(\"\")));\n         assertThat(header.getPrimeHeader(), is(equalTo(\"HTTP/1.1 200\")));\n     }\n+\n+    @ParameterizedTest\n+    @ValueSource(\n+            strings = {\n+                \"text/html\", // Text but not css\n+                \"image/png\", // Not text or css\n+                \"teXt/hTmL\", // Mixed case\n+                \"text/html; charset=UTF-8\", // Expected charset\n+                \"text/html;charset=UTF-8\", // Charset without space\n+                \"charset=UTF-8; text/html\" // Charset first\n+            })\n+    public void isCssShouldReturnFalseWhenContentTypeIndicatesCss(String contentType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyMDk2MQ=="}, "originalCommit": {"oid": "705fb3d0533afd23dd4cb9e55dc6bfca1654531c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM0NDg4MA==", "bodyText": "It was added one n before Not.", "url": "https://github.com/zaproxy/zaproxy/pull/6289#discussion_r521344880", "createdAt": "2020-11-11T13:06:28Z", "author": {"login": "thc202"}, "path": "zap/src/test/java/org/parosproxy/paros/network/HttpResponseHeaderUnitTest.java", "diffHunk": "@@ -126,4 +130,43 @@ public void shouldSetEmptyReasonPhraseIfNull() throws Exception {\n         assertThat(header.getReasonPhrase(), is(equalTo(\"\")));\n         assertThat(header.getPrimeHeader(), is(equalTo(\"HTTP/1.1 200\")));\n     }\n+\n+    @ParameterizedTest\n+    @ValueSource(\n+            strings = {\n+                \"text/html\", // Text but not css\n+                \"image/png\", // Not text or css\n+                \"teXt/hTmL\", // Mixed case\n+                \"text/html; charset=UTF-8\", // Expected charset\n+                \"text/html;charset=UTF-8\", // Charset without space\n+                \"charset=UTF-8; text/html\" // Charset first\n+            })\n+    public void isCssShouldReturnFalseWhenContentTypeIndicatesCss(String contentType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyMDk2MQ=="}, "originalCommit": {"oid": "705fb3d0533afd23dd4cb9e55dc6bfca1654531c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM1OTMxNQ==", "bodyText": ":( we did it to each other, I copied psiinon's text above for the adjustment :(\nFixed the fix :)", "url": "https://github.com/zaproxy/zaproxy/pull/6289#discussion_r521359315", "createdAt": "2020-11-11T13:31:36Z", "author": {"login": "kingthorin"}, "path": "zap/src/test/java/org/parosproxy/paros/network/HttpResponseHeaderUnitTest.java", "diffHunk": "@@ -126,4 +130,43 @@ public void shouldSetEmptyReasonPhraseIfNull() throws Exception {\n         assertThat(header.getReasonPhrase(), is(equalTo(\"\")));\n         assertThat(header.getPrimeHeader(), is(equalTo(\"HTTP/1.1 200\")));\n     }\n+\n+    @ParameterizedTest\n+    @ValueSource(\n+            strings = {\n+                \"text/html\", // Text but not css\n+                \"image/png\", // Not text or css\n+                \"teXt/hTmL\", // Mixed case\n+                \"text/html; charset=UTF-8\", // Expected charset\n+                \"text/html;charset=UTF-8\", // Charset without space\n+                \"charset=UTF-8; text/html\" // Charset first\n+            })\n+    public void isCssShouldReturnFalseWhenContentTypeIndicatesCss(String contentType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyMDk2MQ=="}, "originalCommit": {"oid": "705fb3d0533afd23dd4cb9e55dc6bfca1654531c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Nzg2MjQzOnYy", "diffSide": "RIGHT", "path": "zap/src/test/java/org/parosproxy/paros/network/HttpRequestHeaderUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDozNDo1MlrOHxHfsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDozNDo1MlrOHxHfsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2NTA3NQ==", "bodyText": "Can be static (same comment in the other test class).", "url": "https://github.com/zaproxy/zaproxy/pull/6289#discussion_r521265075", "createdAt": "2020-11-11T10:34:52Z", "author": {"login": "thc202"}, "path": "zap/src/test/java/org/parosproxy/paros/network/HttpRequestHeaderUnitTest.java", "diffHunk": "@@ -183,6 +188,52 @@ public void shouldReplaceAnyCookieHeaderWhenSettingCookieParams() {\n         assertThat(header.getHeaderValues(HttpHeader.COOKIE), hasSize(1));\n     }\n \n+    @ParameterizedTest\n+    @ValueSource(\n+            strings = {\n+                \"http://example.org/css/file.ext\", // In directory path\n+                \"http://ericsson.com/\", // In domain name\n+                \"https://example.css\", // In domain extension (TLD)\n+                \"https://example.css/dir/file.ext\", // In domain extension (TLD)\n+                \"https://example.org/dir/file?foo=bar&thing=css\", // In parameter value\n+                \"http://example.org/css/file.ext?foo=bar&type=.css\", // In parameter value including\n+                // period\n+                \"http://example.org/css/file.ext?foo=bar&thing=styles.css\", // In parameter value,\n+                // plausible filename\n+                \"https://example.org/dir/file?foo=bar&css=file.ext\" // In parameter name\n+            })\n+    public void isCssShouldReturnFalseWhenUrlDoesNotIndicateCss(String url) {\n+        // Given\n+        HttpRequestHeader reqHeader = createRequestHeader(url);\n+        // When / Then\n+        assertFalse(reqHeader.isCss());\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(\n+            strings = {\n+                \"http://example.org/styles.css\", // In path\n+                \"http://example.org/assets/css/styles.css\", // In deeper path\n+                \"http://example.org/css/styles.css?foo=bar\", // In path, ignoring params\n+                \"http://example.org/css/styles.css?foo=bar&thing=.css\", // In path, ignoring params\n+            })\n+    public void isCssShouldReturnTrueWhenUrlIndicatesCss(String url) {\n+        // Given\n+        HttpRequestHeader reqHeader = createRequestHeader(url);\n+        // When / Then\n+        assertTrue(reqHeader.isCss());\n+    }\n+\n+    private HttpRequestHeader createRequestHeader(String url) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "705fb3d0533afd23dd4cb9e55dc6bfca1654531c"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 607, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}