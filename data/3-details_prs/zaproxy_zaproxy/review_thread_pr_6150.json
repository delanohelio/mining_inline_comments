{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MDA2NjE2", "number": 6150, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzo0NToyM1rOEdbMqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo0Nzo1MlrOEeQUbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Mjg5NzcwOnYy", "diffSide": "RIGHT", "path": "zap/src/test/java/org/zaproxy/zap/extension/pscan/scanner/RegexAutoTagScannerUnitTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzo0NToyM1rOHIk3fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo0NzoxNlrOHJzp9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1NDY4NA==", "bodyText": "This seemed like an easier way to go, since the messages don't actually have a HistoryReference from which to get the tags. However, tags are applied and counted from the same method \ud83d\ude00 (So if the counter is incremented then the tag was also applied.)", "url": "https://github.com/zaproxy/zaproxy/pull/6150#discussion_r478754684", "createdAt": "2020-08-27T23:45:23Z", "author": {"login": "kingthorin"}, "path": "zap/src/test/java/org/zaproxy/zap/extension/pscan/scanner/RegexAutoTagScannerUnitTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscan.scanner;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+\n+import net.htmlparser.jericho.Config;\n+import net.htmlparser.jericho.Source;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.parosproxy.paros.db.DatabaseException;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.ZAP;\n+import org.zaproxy.zap.utils.Stats;\n+import org.zaproxy.zap.utils.StatsListener;\n+\n+public class RegexAutoTagScannerUnitTest {\n+\n+    private static final String BODY =\n+            \"<html><head>@@head@@</head><body>@@body_one@@ @@body_two@@</body><html>\";\n+    private static final String MAILTO_PATTERN = \"<.*href\\\\s*=\\\\s*['\\\"]?mailto:\";\n+    private static final String MAILTO_CONFIG = \"MailTo\";\n+    private static final RegexAutoTagScanner MAILTO_TAG_SCAN_RULE =\n+            new RegexAutoTagScanner(\n+                    MAILTO_CONFIG,\n+                    RegexAutoTagScanner.TYPE.TAG,\n+                    MAILTO_CONFIG,\n+                    null,\n+                    null,\n+                    null,\n+                    MAILTO_PATTERN,\n+                    true);\n+\n+    static {\n+        Config.LoggerProvider = ZAP.JERICHO_LOGGER_PROVIDER;\n+    }\n+\n+    private StatsListener listener;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        listener = spy(StatsListener.class);\n+        Stats.addListener(listener);\n+    }\n+\n+    @AfterEach\n+    public void cleanup() {\n+        Stats.removeListener(listener);\n+        MAILTO_TAG_SCAN_RULE.setEnabled(true);\n+    }\n+\n+    @Test\n+    public void shouldNotCountTagWhenBodyDoesNotMatch()\n+            throws URIException, HttpMalformedHeaderException, DatabaseException {\n+        // Given\n+        HttpMessage msg = new HttpMessage(new URI(\"http://example.com/\", true));\n+        msg.setHistoryRef(mock(HistoryReference.class));\n+        // When\n+        MAILTO_TAG_SCAN_RULE.scanHttpResponseReceive(msg, -1, new Source(BODY));\n+        // Then\n+        Mockito.verifyNoInteractions(listener);\n+    }\n+\n+    @Test\n+    public void shouldCountTagWhenBodyHasMatch()\n+            throws URIException, HttpMalformedHeaderException, DatabaseException {\n+        // Given\n+        HttpMessage msg = new HttpMessage(new URI(\"http://example.com/\", true));\n+        msg.setResponseBody(BODY.replace(\"@@body_two@@\", \"<a href=\\\"mailto:me@.my.net\\\">me</a>\"));\n+        msg.setHistoryRef(mock(HistoryReference.class));\n+        // When\n+        MAILTO_TAG_SCAN_RULE.scanHttpResponseReceive(msg, -1, new Source(msg.getResponseBody().toString()));\n+        // Then\n+        verify(listener)\n+                .counterInc(\n+                        \"http://example.com\", RegexAutoTagScanner.TAG_STATS_PREFIX + MAILTO_CONFIG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d874ea9410e850dff37b4ac7eb6118001df32ef"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0NTU1OQ==", "bodyText": "Not always, the counter might be incremented even when not tagged. The test class has the (mocked) HistoryReference set previously so it can be verified through that one (or just check the parent). These would be another tests anyway.", "url": "https://github.com/zaproxy/zaproxy/pull/6150#discussion_r480045559", "createdAt": "2020-08-31T10:47:16Z", "author": {"login": "thc202"}, "path": "zap/src/test/java/org/zaproxy/zap/extension/pscan/scanner/RegexAutoTagScannerUnitTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscan.scanner;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+\n+import net.htmlparser.jericho.Config;\n+import net.htmlparser.jericho.Source;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.parosproxy.paros.db.DatabaseException;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.ZAP;\n+import org.zaproxy.zap.utils.Stats;\n+import org.zaproxy.zap.utils.StatsListener;\n+\n+public class RegexAutoTagScannerUnitTest {\n+\n+    private static final String BODY =\n+            \"<html><head>@@head@@</head><body>@@body_one@@ @@body_two@@</body><html>\";\n+    private static final String MAILTO_PATTERN = \"<.*href\\\\s*=\\\\s*['\\\"]?mailto:\";\n+    private static final String MAILTO_CONFIG = \"MailTo\";\n+    private static final RegexAutoTagScanner MAILTO_TAG_SCAN_RULE =\n+            new RegexAutoTagScanner(\n+                    MAILTO_CONFIG,\n+                    RegexAutoTagScanner.TYPE.TAG,\n+                    MAILTO_CONFIG,\n+                    null,\n+                    null,\n+                    null,\n+                    MAILTO_PATTERN,\n+                    true);\n+\n+    static {\n+        Config.LoggerProvider = ZAP.JERICHO_LOGGER_PROVIDER;\n+    }\n+\n+    private StatsListener listener;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        listener = spy(StatsListener.class);\n+        Stats.addListener(listener);\n+    }\n+\n+    @AfterEach\n+    public void cleanup() {\n+        Stats.removeListener(listener);\n+        MAILTO_TAG_SCAN_RULE.setEnabled(true);\n+    }\n+\n+    @Test\n+    public void shouldNotCountTagWhenBodyDoesNotMatch()\n+            throws URIException, HttpMalformedHeaderException, DatabaseException {\n+        // Given\n+        HttpMessage msg = new HttpMessage(new URI(\"http://example.com/\", true));\n+        msg.setHistoryRef(mock(HistoryReference.class));\n+        // When\n+        MAILTO_TAG_SCAN_RULE.scanHttpResponseReceive(msg, -1, new Source(BODY));\n+        // Then\n+        Mockito.verifyNoInteractions(listener);\n+    }\n+\n+    @Test\n+    public void shouldCountTagWhenBodyHasMatch()\n+            throws URIException, HttpMalformedHeaderException, DatabaseException {\n+        // Given\n+        HttpMessage msg = new HttpMessage(new URI(\"http://example.com/\", true));\n+        msg.setResponseBody(BODY.replace(\"@@body_two@@\", \"<a href=\\\"mailto:me@.my.net\\\">me</a>\"));\n+        msg.setHistoryRef(mock(HistoryReference.class));\n+        // When\n+        MAILTO_TAG_SCAN_RULE.scanHttpResponseReceive(msg, -1, new Source(msg.getResponseBody().toString()));\n+        // Then\n+        verify(listener)\n+                .counterInc(\n+                        \"http://example.com\", RegexAutoTagScanner.TAG_STATS_PREFIX + MAILTO_CONFIG);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1NDY4NA=="}, "originalCommit": {"oid": "7d874ea9410e850dff37b4ac7eb6118001df32ef"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjkwMzM5OnYy", "diffSide": "RIGHT", "path": "zap/src/test/java/org/zaproxy/zap/extension/pscan/scanner/RegexAutoTagScannerUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzo0ODoyNlrOHIk6yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo0NzoyNFrOHJzqNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1NTUzMA==", "bodyText": "The default patterns appear to be part of the default config file, they aren't code constants etc. So this was necessary.", "url": "https://github.com/zaproxy/zaproxy/pull/6150#discussion_r478755530", "createdAt": "2020-08-27T23:48:26Z", "author": {"login": "kingthorin"}, "path": "zap/src/test/java/org/zaproxy/zap/extension/pscan/scanner/RegexAutoTagScannerUnitTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscan.scanner;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+\n+import net.htmlparser.jericho.Config;\n+import net.htmlparser.jericho.Source;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.parosproxy.paros.db.DatabaseException;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.ZAP;\n+import org.zaproxy.zap.utils.Stats;\n+import org.zaproxy.zap.utils.StatsListener;\n+\n+public class RegexAutoTagScannerUnitTest {\n+\n+    private static final String BODY =\n+            \"<html><head>@@head@@</head><body>@@body_one@@ @@body_two@@</body><html>\";\n+    private static final String MAILTO_PATTERN = \".*href\\\\s*=\\\\s*['\\\"]?mailto:\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "446538ad8b56cb72f99e89ff8d377c2848e4b6b2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0NTYyMQ==", "bodyText": "We should test the default regular expressions separately, this class does not depend on them (it would be better to use a test/dummy config and regular expression here).", "url": "https://github.com/zaproxy/zaproxy/pull/6150#discussion_r480045621", "createdAt": "2020-08-31T10:47:24Z", "author": {"login": "thc202"}, "path": "zap/src/test/java/org/zaproxy/zap/extension/pscan/scanner/RegexAutoTagScannerUnitTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscan.scanner;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+\n+import net.htmlparser.jericho.Config;\n+import net.htmlparser.jericho.Source;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.parosproxy.paros.db.DatabaseException;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.ZAP;\n+import org.zaproxy.zap.utils.Stats;\n+import org.zaproxy.zap.utils.StatsListener;\n+\n+public class RegexAutoTagScannerUnitTest {\n+\n+    private static final String BODY =\n+            \"<html><head>@@head@@</head><body>@@body_one@@ @@body_two@@</body><html>\";\n+    private static final String MAILTO_PATTERN = \".*href\\\\s*=\\\\s*['\\\"]?mailto:\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1NTUzMA=="}, "originalCommit": {"oid": "446538ad8b56cb72f99e89ff8d377c2848e4b6b2"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTYwMTA5OnYy", "diffSide": "RIGHT", "path": "zap/src/test/java/org/zaproxy/zap/extension/pscan/scanner/RegexAutoTagScannerUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo0Nzo1MlrOHJzq-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo0Nzo1MlrOHJzq-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0NTgxNg==", "bodyText": "It would be better to use an instance per test to avoid the need to clean it up more (e.g. when testing the setters).", "url": "https://github.com/zaproxy/zaproxy/pull/6150#discussion_r480045816", "createdAt": "2020-08-31T10:47:52Z", "author": {"login": "thc202"}, "path": "zap/src/test/java/org/zaproxy/zap/extension/pscan/scanner/RegexAutoTagScannerUnitTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscan.scanner;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+\n+import net.htmlparser.jericho.Config;\n+import net.htmlparser.jericho.Source;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.parosproxy.paros.db.DatabaseException;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.ZAP;\n+import org.zaproxy.zap.utils.Stats;\n+import org.zaproxy.zap.utils.StatsListener;\n+\n+public class RegexAutoTagScannerUnitTest {\n+\n+    private static final String BODY =\n+            \"<html><head>@@head@@</head><body>@@body_one@@ @@body_two@@</body><html>\";\n+    private static final String MAILTO_PATTERN = \".*href\\\\s*=\\\\s*['\\\"]?mailto:\";\n+    private static final String MAILTO_CONFIG = \"MailTo\";\n+    private static final RegexAutoTagScanner MAILTO_TAG_SCAN_RULE =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49b56ad2a6ff36c7f26879c88dd9d1b327d36852"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 634, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}