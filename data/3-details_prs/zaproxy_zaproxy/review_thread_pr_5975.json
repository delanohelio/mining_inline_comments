{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NDQ3ODk5", "number": 5975, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOTozMjozMFrOD7kd0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOTozMzoxMFrOD7kfKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzkwMDMyOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/extension/alert/AlertAPI.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOTozMjozMFrOGT-Sow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOTo0Nzo0NFrOGT-3gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU5NjcwNw==", "bodyText": "I'd suggest collect them first to ensure all IDs are valid before starting processing the alerts (while missing alert will also lead to partial updates it's one less thing).\nThis can also be extracted, something like:\nupdateAlerts(alert -> alert.setConfidence(confidenceId));\nand let updateAlerts extract/loop the IDs and get/process the alerts.", "url": "https://github.com/zaproxy/zaproxy/pull/5975#discussion_r423596707", "createdAt": "2020-05-12T09:32:30Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/alert/AlertAPI.java", "diffHunk": "@@ -402,6 +392,34 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc\n             newAlert.setWascId(wascId);\n             extension.alertFound(newAlert, msg.getHistoryRef());\n             return new ApiResponseElement(name, Integer.toString(newAlert.getAlertId()));\n+        }  else if (ACTION_UPDATE_ALERTS_CONFIDENCE.equals(name)) {\n+            String alertIds = ApiUtils.getNonEmptyStringParam(params, PARAM_ALERT_IDS);\n+            int confidenceId = getConfidenceId(params);\n+\n+            StringTokenizer tokenizer = new StringTokenizer(alertIds, \",\");\n+            while (tokenizer.hasMoreTokens()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d7d42cc995bd1639e00218894b31d85ea68dfa2"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYwMDk5Ng==", "bodyText": "For the second one, how would the signature/definition of the method look?", "url": "https://github.com/zaproxy/zaproxy/pull/5975#discussion_r423600996", "createdAt": "2020-05-12T09:39:24Z", "author": {"login": "kingthorin"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/alert/AlertAPI.java", "diffHunk": "@@ -402,6 +392,34 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc\n             newAlert.setWascId(wascId);\n             extension.alertFound(newAlert, msg.getHistoryRef());\n             return new ApiResponseElement(name, Integer.toString(newAlert.getAlertId()));\n+        }  else if (ACTION_UPDATE_ALERTS_CONFIDENCE.equals(name)) {\n+            String alertIds = ApiUtils.getNonEmptyStringParam(params, PARAM_ALERT_IDS);\n+            int confidenceId = getConfidenceId(params);\n+\n+            StringTokenizer tokenizer = new StringTokenizer(alertIds, \",\");\n+            while (tokenizer.hasMoreTokens()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU5NjcwNw=="}, "originalCommit": {"oid": "7d7d42cc995bd1639e00218894b31d85ea68dfa2"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYwNTU0NQ==", "bodyText": "Right, left out the params... should be like:\nvoid updateAlerts(JSONObject params, Consumer<Alert> consumer)", "url": "https://github.com/zaproxy/zaproxy/pull/5975#discussion_r423605545", "createdAt": "2020-05-12T09:46:51Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/alert/AlertAPI.java", "diffHunk": "@@ -402,6 +392,34 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc\n             newAlert.setWascId(wascId);\n             extension.alertFound(newAlert, msg.getHistoryRef());\n             return new ApiResponseElement(name, Integer.toString(newAlert.getAlertId()));\n+        }  else if (ACTION_UPDATE_ALERTS_CONFIDENCE.equals(name)) {\n+            String alertIds = ApiUtils.getNonEmptyStringParam(params, PARAM_ALERT_IDS);\n+            int confidenceId = getConfidenceId(params);\n+\n+            StringTokenizer tokenizer = new StringTokenizer(alertIds, \",\");\n+            while (tokenizer.hasMoreTokens()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU5NjcwNw=="}, "originalCommit": {"oid": "7d7d42cc995bd1639e00218894b31d85ea68dfa2"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYwNjE0NQ==", "bodyText": "TY!", "url": "https://github.com/zaproxy/zaproxy/pull/5975#discussion_r423606145", "createdAt": "2020-05-12T09:47:44Z", "author": {"login": "kingthorin"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/alert/AlertAPI.java", "diffHunk": "@@ -402,6 +392,34 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc\n             newAlert.setWascId(wascId);\n             extension.alertFound(newAlert, msg.getHistoryRef());\n             return new ApiResponseElement(name, Integer.toString(newAlert.getAlertId()));\n+        }  else if (ACTION_UPDATE_ALERTS_CONFIDENCE.equals(name)) {\n+            String alertIds = ApiUtils.getNonEmptyStringParam(params, PARAM_ALERT_IDS);\n+            int confidenceId = getConfidenceId(params);\n+\n+            StringTokenizer tokenizer = new StringTokenizer(alertIds, \",\");\n+            while (tokenizer.hasMoreTokens()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU5NjcwNw=="}, "originalCommit": {"oid": "7d7d42cc995bd1639e00218894b31d85ea68dfa2"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzkwMzIyOnYy", "diffSide": "RIGHT", "path": "zap/src/main/resources/org/zaproxy/zap/resources/Messages.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOTozMzowNFrOGT-URw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOTozMzowNFrOGT-URw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU5NzEyNw==", "bodyText": "Just Update the confidence of alerts.? To avoid repeating the description of the parameter (same for the other endpoint).", "url": "https://github.com/zaproxy/zaproxy/pull/5975#discussion_r423597127", "createdAt": "2020-05-12T09:33:04Z", "author": {"login": "thc202"}, "path": "zap/src/main/resources/org/zaproxy/zap/resources/Messages.properties", "diffHunk": "@@ -63,10 +63,17 @@ alert.api.action.updateAlert.param.references = The reference details for the al\n alert.api.action.updateAlert.param.evidence = The evidence associated with the alert.\n alert.api.action.updateAlert.param.cweId = The CWE identifier associated with the alert.\n alert.api.action.updateAlert.param.wascId = The WASC identifier associated with the alert.\n+alert.api.action.updateAlertsConfidence = Update the confidence of the alerts with the given IDs (comma separated values).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d7d42cc995bd1639e00218894b31d85ea68dfa2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzkwMzc2OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/extension/alert/AlertAPI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOTozMzoxMFrOGT-UmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOTozMzoxMFrOGT-UmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU5NzIwOA==", "bodyText": "Double semicolon.", "url": "https://github.com/zaproxy/zaproxy/pull/5975#discussion_r423597208", "createdAt": "2020-05-12T09:33:10Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/alert/AlertAPI.java", "diffHunk": "@@ -336,19 +342,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc\n             int cweId = getParam(params, PARAM_CWEID, 0);\n             int wascId = getParam(params, PARAM_WASCID, 0);\n \n-            RecordAlert recAlert;\n-            try {\n-                recAlert = Model.getSingleton().getDb().getTableAlert().read(alertId);\n-            } catch (DatabaseException e) {\n-                logger.error(e.getMessage(), e);\n-                throw new ApiException(ApiException.Type.INTERNAL_ERROR, e);\n-            }\n-\n-            if (recAlert == null) {\n-                throw new ApiException(ApiException.Type.DOES_NOT_EXIST, PARAM_ALERT_ID);\n-            }\n-\n-            Alert updatedAlert = new Alert(recAlert);\n+            Alert updatedAlert = getAlertFromDb(alertId, PARAM_ALERT_ID);;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d7d42cc995bd1639e00218894b31d85ea68dfa2"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 617, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}