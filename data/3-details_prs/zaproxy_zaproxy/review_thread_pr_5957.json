{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NjkzNjQ2", "number": 5957, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODo1MTozN1rOD7jfdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMDowMzo0NVrOD7lL4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzc0MDcxOnYy", "diffSide": "RIGHT", "path": "docker/zap_common.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODo1MTozN1rOGT8sFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOToyNTo1OVrOGhA13w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU3MDQ1NA==", "bodyText": "This looks a bit weird. Cant we just use contextid=context_id and drop the test?", "url": "https://github.com/zaproxy/zaproxy/pull/5957#discussion_r423570454", "createdAt": "2020-05-12T08:51:37Z", "author": {"login": "psiinon"}, "path": "docker/zap_common.py", "diffHunk": "@@ -382,23 +387,32 @@ def zap_spider(zap, target):\n \n \n @hook(wrap=True)\n-def zap_ajax_spider(zap, target, max_time):\n+def zap_ajax_spider(zap, target, max_time, context=None):\n     logging.debug('AjaxSpider ' + target)\n     if max_time:\n         zap.ajaxSpider.set_option_max_duration(str(max_time))\n-    zap.ajaxSpider.scan(target)\n+    if context is not None:\n+        spider_scan_id = zap.spider.scan(target, contextname=context)\n+    else:\n+        spider_scan_id = zap.spider.scan(target)\n     time.sleep(5)\n \n     while (zap.ajaxSpider.status == 'running'):\n         logging.debug('Ajax Spider running, found urls: ' + zap.ajaxSpider.number_of_results)\n         time.sleep(5)\n     logging.debug('Ajax Spider complete')\n \n-\n+'''\n+In zap_active_scan, we use the global context_id, which is used in zap.ascan.scan to indicate that there is\n+a context\n+'''\n @hook(wrap=True)\n def zap_active_scan(zap, target, policy):\n     logging.debug('Active Scan ' + target + ' with policy ' + policy)\n-    ascan_scan_id = zap.ascan.scan(target, recurse=True, scanpolicyname=policy)\n+    if context_id is None:\n+        ascan_scan_id = zap.ascan.scan(target, recurse=True, scanpolicyname=policy)#, contextid=None)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693ca443c58ca7f6a03a26a65e8083efde2dc792"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI2MDYzMw==", "bodyText": "the context_id variable is initialized in the zap_import_context function.. this function is only called if a context_file is given. So context_id is not always available..", "url": "https://github.com/zaproxy/zaproxy/pull/5957#discussion_r430260633", "createdAt": "2020-05-26T08:58:55Z", "author": {"login": "beldcode"}, "path": "docker/zap_common.py", "diffHunk": "@@ -382,23 +387,32 @@ def zap_spider(zap, target):\n \n \n @hook(wrap=True)\n-def zap_ajax_spider(zap, target, max_time):\n+def zap_ajax_spider(zap, target, max_time, context=None):\n     logging.debug('AjaxSpider ' + target)\n     if max_time:\n         zap.ajaxSpider.set_option_max_duration(str(max_time))\n-    zap.ajaxSpider.scan(target)\n+    if context is not None:\n+        spider_scan_id = zap.spider.scan(target, contextname=context)\n+    else:\n+        spider_scan_id = zap.spider.scan(target)\n     time.sleep(5)\n \n     while (zap.ajaxSpider.status == 'running'):\n         logging.debug('Ajax Spider running, found urls: ' + zap.ajaxSpider.number_of_results)\n         time.sleep(5)\n     logging.debug('Ajax Spider complete')\n \n-\n+'''\n+In zap_active_scan, we use the global context_id, which is used in zap.ascan.scan to indicate that there is\n+a context\n+'''\n @hook(wrap=True)\n def zap_active_scan(zap, target, policy):\n     logging.debug('Active Scan ' + target + ' with policy ' + policy)\n-    ascan_scan_id = zap.ascan.scan(target, recurse=True, scanpolicyname=policy)\n+    if context_id is None:\n+        ascan_scan_id = zap.ascan.scan(target, recurse=True, scanpolicyname=policy)#, contextid=None)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU3MDQ1NA=="}, "originalCommit": {"oid": "693ca443c58ca7f6a03a26a65e8083efde2dc792"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI2OTk4Mw==", "bodyText": "It's fine if it's None, the API client will just ignore that parameter.", "url": "https://github.com/zaproxy/zaproxy/pull/5957#discussion_r437269983", "createdAt": "2020-06-09T09:25:59Z", "author": {"login": "thc202"}, "path": "docker/zap_common.py", "diffHunk": "@@ -382,23 +387,32 @@ def zap_spider(zap, target):\n \n \n @hook(wrap=True)\n-def zap_ajax_spider(zap, target, max_time):\n+def zap_ajax_spider(zap, target, max_time, context=None):\n     logging.debug('AjaxSpider ' + target)\n     if max_time:\n         zap.ajaxSpider.set_option_max_duration(str(max_time))\n-    zap.ajaxSpider.scan(target)\n+    if context is not None:\n+        spider_scan_id = zap.spider.scan(target, contextname=context)\n+    else:\n+        spider_scan_id = zap.spider.scan(target)\n     time.sleep(5)\n \n     while (zap.ajaxSpider.status == 'running'):\n         logging.debug('Ajax Spider running, found urls: ' + zap.ajaxSpider.number_of_results)\n         time.sleep(5)\n     logging.debug('Ajax Spider complete')\n \n-\n+'''\n+In zap_active_scan, we use the global context_id, which is used in zap.ascan.scan to indicate that there is\n+a context\n+'''\n @hook(wrap=True)\n def zap_active_scan(zap, target, policy):\n     logging.debug('Active Scan ' + target + ' with policy ' + policy)\n-    ascan_scan_id = zap.ascan.scan(target, recurse=True, scanpolicyname=policy)\n+    if context_id is None:\n+        ascan_scan_id = zap.ascan.scan(target, recurse=True, scanpolicyname=policy)#, contextid=None)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU3MDQ1NA=="}, "originalCommit": {"oid": "693ca443c58ca7f6a03a26a65e8083efde2dc792"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzc0MjQzOnYy", "diffSide": "RIGHT", "path": "docker/zap_common.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODo1MjowMlrOGT8tFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODo1MjowMlrOGT8tFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU3MDcxMQ==", "bodyText": "Is this test needed or can we pass across context=None?", "url": "https://github.com/zaproxy/zaproxy/pull/5957#discussion_r423570711", "createdAt": "2020-05-12T08:52:02Z", "author": {"login": "psiinon"}, "path": "docker/zap_common.py", "diffHunk": "@@ -382,23 +387,32 @@ def zap_spider(zap, target):\n \n \n @hook(wrap=True)\n-def zap_ajax_spider(zap, target, max_time):\n+def zap_ajax_spider(zap, target, max_time, context=None):\n     logging.debug('AjaxSpider ' + target)\n     if max_time:\n         zap.ajaxSpider.set_option_max_duration(str(max_time))\n-    zap.ajaxSpider.scan(target)\n+    if context is not None:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693ca443c58ca7f6a03a26a65e8083efde2dc792"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODAwMjIwOnYy", "diffSide": "RIGHT", "path": "docker/docker-compose.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOTo1OToxMlrOGT_R4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOTo1OToxMlrOGT_R4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMjg5Ng==", "bodyText": "This should be reverted.", "url": "https://github.com/zaproxy/zaproxy/pull/5957#discussion_r423612896", "createdAt": "2020-05-12T09:59:12Z", "author": {"login": "thc202"}, "path": "docker/docker-compose.yml", "diffHunk": "@@ -13,5 +13,5 @@ services:\n   test:\n     build: \n       context: .\n-      dockerfile: Dockerfile-zapcli\n+      dockerfile: Dockerfile-stable-zapcli", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693ca443c58ca7f6a03a26a65e8083efde2dc792"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODAwNTM1OnYy", "diffSide": "RIGHT", "path": "docker/zap-baseline.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMDowMDowM1rOGT_T4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMDowMDowM1rOGT_T4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMzQwOQ==", "bodyText": "I'd suggest removing this comment, it's repeating what the code is doing (same for the others).", "url": "https://github.com/zaproxy/zaproxy/pull/5957#discussion_r423613409", "createdAt": "2020-05-12T10:00:03Z", "author": {"login": "thc202"}, "path": "docker/zap-baseline.py", "diffHunk": "@@ -321,10 +321,23 @@ def main(argv):\n         time.sleep(2)\n \n         # Spider target\n-        zap_spider(zap, target)\n+        '''\n+        Here the zap spider is supposed to only use a context if a context file is given", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693ca443c58ca7f6a03a26a65e8083efde2dc792"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODAxNjg5OnYy", "diffSide": "RIGHT", "path": "docker/zap_common.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMDowMzoyMFrOGT_bQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMDowMzoyMFrOGT_bQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxNTI5OQ==", "bodyText": "The ID is being returned so the caller can pass the ID when calling the other function.", "url": "https://github.com/zaproxy/zaproxy/pull/5957#discussion_r423615299", "createdAt": "2020-05-12T10:03:20Z", "author": {"login": "thc202"}, "path": "docker/zap_common.py", "diffHunk": "@@ -510,8 +524,14 @@ def write_report(file_path, report):\n \n         f.write(report)\n \n+'''\n+zap_import_context imports the context and stores a context_id which will be used by zap_active_scan. Therefore the\n+context_id must be global so that zap_active_scan has access to the variable.\n+'''\n+\n @hook(wrap=True)\n def zap_import_context(zap, context_file):\n+    global context_id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693ca443c58ca7f6a03a26a65e8083efde2dc792"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODAxODI1OnYy", "diffSide": "RIGHT", "path": "docker/zap-baseline.py", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMDowMzo0NVrOGT_cIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOToyNDo0N1rOGhAxOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxNTUyMQ==", "bodyText": "The name of the context might not be the same as the name of the file, better get the name from ZAP (e.g. last one in the context list), it also avoids processing the name multiple times.", "url": "https://github.com/zaproxy/zaproxy/pull/5957#discussion_r423615521", "createdAt": "2020-05-12T10:03:45Z", "author": {"login": "thc202"}, "path": "docker/zap-baseline.py", "diffHunk": "@@ -321,10 +321,23 @@ def main(argv):\n         time.sleep(2)\n \n         # Spider target\n-        zap_spider(zap, target)\n+        '''\n+        Here the zap spider is supposed to only use a context if a context file is given\n+        otherwise the inital spider funcionality without a context is used\n+        '''\n+        if context_file:\n+            zap_spider(zap, target, os.path.splitext(os.path.basename(context_file))[0])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693ca443c58ca7f6a03a26a65e8083efde2dc792"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYzOTUzMQ==", "bodyText": "Good catch.", "url": "https://github.com/zaproxy/zaproxy/pull/5957#discussion_r423639531", "createdAt": "2020-05-12T10:48:02Z", "author": {"login": "kingthorin"}, "path": "docker/zap-baseline.py", "diffHunk": "@@ -321,10 +321,23 @@ def main(argv):\n         time.sleep(2)\n \n         # Spider target\n-        zap_spider(zap, target)\n+        '''\n+        Here the zap spider is supposed to only use a context if a context file is given\n+        otherwise the inital spider funcionality without a context is used\n+        '''\n+        if context_file:\n+            zap_spider(zap, target, os.path.splitext(os.path.basename(context_file))[0])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxNTUyMQ=="}, "originalCommit": {"oid": "693ca443c58ca7f6a03a26a65e8083efde2dc792"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUwMDk5NA==", "bodyText": "I'll use ZAP for that! Thx for the hint.", "url": "https://github.com/zaproxy/zaproxy/pull/5957#discussion_r430500994", "createdAt": "2020-05-26T15:27:05Z", "author": {"login": "beldcode"}, "path": "docker/zap-baseline.py", "diffHunk": "@@ -321,10 +321,23 @@ def main(argv):\n         time.sleep(2)\n \n         # Spider target\n-        zap_spider(zap, target)\n+        '''\n+        Here the zap spider is supposed to only use a context if a context file is given\n+        otherwise the inital spider funcionality without a context is used\n+        '''\n+        if context_file:\n+            zap_spider(zap, target, os.path.splitext(os.path.basename(context_file))[0])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxNTUyMQ=="}, "originalCommit": {"oid": "693ca443c58ca7f6a03a26a65e8083efde2dc792"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5NDY1NQ==", "bodyText": "@thc202 is there a special reason why to use the last context name from the context list?", "url": "https://github.com/zaproxy/zaproxy/pull/5957#discussion_r430594655", "createdAt": "2020-05-26T17:46:18Z", "author": {"login": "beldcode"}, "path": "docker/zap-baseline.py", "diffHunk": "@@ -321,10 +321,23 @@ def main(argv):\n         time.sleep(2)\n \n         # Spider target\n-        zap_spider(zap, target)\n+        '''\n+        Here the zap spider is supposed to only use a context if a context file is given\n+        otherwise the inital spider funcionality without a context is used\n+        '''\n+        if context_file:\n+            zap_spider(zap, target, os.path.splitext(os.path.basename(context_file))[0])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxNTUyMQ=="}, "originalCommit": {"oid": "693ca443c58ca7f6a03a26a65e8083efde2dc792"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI2ODc5NQ==", "bodyText": "The last one is the context that was imported/added by the script.", "url": "https://github.com/zaproxy/zaproxy/pull/5957#discussion_r437268795", "createdAt": "2020-06-09T09:24:47Z", "author": {"login": "thc202"}, "path": "docker/zap-baseline.py", "diffHunk": "@@ -321,10 +321,23 @@ def main(argv):\n         time.sleep(2)\n \n         # Spider target\n-        zap_spider(zap, target)\n+        '''\n+        Here the zap spider is supposed to only use a context if a context file is given\n+        otherwise the inital spider funcionality without a context is used\n+        '''\n+        if context_file:\n+            zap_spider(zap, target, os.path.splitext(os.path.basename(context_file))[0])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxNTUyMQ=="}, "originalCommit": {"oid": "693ca443c58ca7f6a03a26a65e8083efde2dc792"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 615, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}