{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0NDU0MTYw", "number": 6245, "title": "PassiveScanData add unit tests & active scan status code fallbacks", "bodyText": "Clarify/tweak handling of Custom Page checks for active scanning. Fallback to using status codes if there isn't a context in play.\nAdd UnitTests for PassiveScanData and status code fallback for passive scan handling.\nRe-implement HttpStatusCode.isClientError/HttpStatusCode.isServerError to take advantage of Custom Pages and Analyser as applicable for both ascan and pscan.\nFor isPage404/isPage500/isClientError/isServerError check CustomPage.Type.OK_200 first. In isPage200 check CustomPage.Type.ERROR_500 or CustomPage.Type.NOTFOUND_404 first (both ascan and pscan, in case the user is trying to override something).\nFix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSee #9\nSigned-off-by: kingthorin kingthorin@users.noreply.github.com", "createdAt": "2020-10-15T23:30:29Z", "url": "https://github.com/zaproxy/zaproxy/pull/6245", "merged": true, "mergeCommit": {"oid": "cdc3337d4426fd14d1c6227e31ed19a6b2f7dee5"}, "closed": true, "closedAt": "2020-11-06T17:43:15Z", "author": {"login": "kingthorin"}, "timelineItems": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdS6b0UgFqTUwOTg3OTQzNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZ6d65gFqTUyNTM1NzA0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5ODc5NDM3", "url": "https://github.com/zaproxy/zaproxy/pull/6245#pullrequestreview-509879437", "createdAt": "2020-10-15T23:32:45Z", "commit": {"oid": "1b11cd9d4922db8c2a4b96fcd9b19e51b4791541"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMzozMjo0NVrOHifAeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMzozMjo0NVrOHifAeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkyMTY1Nw==", "bodyText": "I tried to do a similar test for getUsers but couldn't get it sorted out. psd can be mocked since it's final, and trying to do given//willReturn on an instantiated one will returned an empty list despite trying to give it a list to return.", "url": "https://github.com/zaproxy/zaproxy/pull/6245#discussion_r505921657", "createdAt": "2020-10-15T23:32:45Z", "author": {"login": "kingthorin"}, "path": "zap/src/test/java/org/zaproxy/zap/extension/pscan/PassiveScanDataUnitTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscan;\n+\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+\n+import java.util.Collections;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.model.Session;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.WithConfigsTest;\n+import org.zaproxy.zap.model.Context;\n+import org.zaproxy.zap.model.Tech;\n+import org.zaproxy.zap.model.TechSet;\n+import org.zaproxy.zap.utils.I18N;\n+\n+class PassiveScanDataUnitTest extends WithConfigsTest {\n+\n+    private Session session;\n+\n+    @BeforeEach\n+    public void setup() {\n+        Constant.messages = mock(I18N.class);\n+        session = mock(Session.class);\n+        doReturn(session).when(model).getSession();\n+    }\n+\n+    @Test\n+    public void shouldHaveAllTechSetByDefault() {\n+        // Given / When\n+        HttpMessage msg = createMessage();\n+        PassiveScanData psd = new PassiveScanData(msg);\n+        // Then\n+        assertThat(psd.getTechSet(), is(equalTo(TechSet.AllTech)));\n+    }\n+\n+    @Test\n+    public void shouldHaveEmptyUserListByDefault() {\n+        // Given / When\n+        HttpMessage msg = createMessage();\n+        PassiveScanData psd = new PassiveScanData(msg);\n+        // Then\n+        assertThat(psd.getUsers(), is(equalTo(Collections.emptyList())));\n+    }\n+\n+    @Test\n+    public void shouldNotHaveContextByDefault() {\n+        // Given / When\n+        HttpMessage msg = createMessage();\n+        PassiveScanData psd = new PassiveScanData(msg);\n+        // Then\n+        assertNull(psd.getContext());\n+        assertThat(psd.hasContext(), is(equalTo(false)));\n+    }\n+\n+    @Test\n+    public void shouldHaveContextIfMessageIncludedInOne() {\n+        // Given\n+        HttpMessage msg = createMessage();\n+        Context context = mock(Context.class);\n+        given(session.getContextsForUrl(msg.getRequestHeader().getURI().toString()))\n+                .willReturn(asList(context));\n+        // When\n+        PassiveScanData psd = new PassiveScanData(msg);\n+        // Then\n+        assertThat(psd.getContext(), is(equalTo(context)));\n+        assertThat(psd.hasContext(), is(equalTo(true)));\n+    }\n+\n+    @Test\n+    public void shouldUseFirstContextIfMessageApplicableToMultiple() {\n+        // Given\n+        HttpMessage msg = createMessage();\n+        Context matchCtxOne = mock(Context.class);\n+        Context matchCtxTwo = mock(Context.class);\n+        given(session.getContextsForUrl(msg.getRequestHeader().getURI().toString()))\n+                .willReturn(asList(matchCtxOne, matchCtxTwo));\n+        // When\n+        PassiveScanData psd = new PassiveScanData(msg);\n+        // Then\n+        assertThat(psd.getContext(), is(equalTo(matchCtxOne)));\n+        assertThat(psd.hasContext(), is(equalTo(true)));\n+    }\n+\n+    @Test\n+    public void shouldUseTechSetOfFirstMatchedContextIfMessageApplicableToMultiple() {\n+        // Given\n+        HttpMessage msg = createMessage();\n+        Context matchCtxOne = mock(Context.class);\n+        TechSet expectedTechSet = new TechSet(Tech.Db);\n+        given(matchCtxOne.getTechSet()).willReturn(expectedTechSet);\n+        Context matchCtxTwo = mock(Context.class);\n+        given(session.getContextsForUrl(msg.getRequestHeader().getURI().toString()))\n+                .willReturn(asList(matchCtxOne, matchCtxTwo));\n+        // When\n+        PassiveScanData psd = new PassiveScanData(msg);\n+        // Then\n+        assertThat(psd.getTechSet(), is(equalTo(expectedTechSet)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b11cd9d4922db8c2a4b96fcd9b19e51b4791541"}, "originalPosition": 126}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1b11cd9d4922db8c2a4b96fcd9b19e51b4791541", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/1b11cd9d4922db8c2a4b96fcd9b19e51b4791541", "committedDate": "2020-10-15T23:28:59Z", "message": "PassiveScanData add unit tests\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "25d5b90cba67d4e87b3427b2f3c1238e7878e51d", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/25d5b90cba67d4e87b3427b2f3c1238e7878e51d", "committedDate": "2020-10-16T14:27:05Z", "message": "PassiveScanData add unit tests\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "25d5b90cba67d4e87b3427b2f3c1238e7878e51d", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/25d5b90cba67d4e87b3427b2f3c1238e7878e51d", "committedDate": "2020-10-16T14:27:05Z", "message": "PassiveScanData add unit tests\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "d3ca989b3885fe6ad9a84a8934573209122dd1ab", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/d3ca989b3885fe6ad9a84a8934573209122dd1ab", "committedDate": "2020-10-16T14:31:33Z", "message": "PassiveScanData add unit tests\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3ca989b3885fe6ad9a84a8934573209122dd1ab", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/d3ca989b3885fe6ad9a84a8934573209122dd1ab", "committedDate": "2020-10-16T14:31:33Z", "message": "PassiveScanData add unit tests\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "5d19f9a99949168add5b3a25b78ca6a424fd48f6", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/5d19f9a99949168add5b3a25b78ca6a424fd48f6", "committedDate": "2020-10-16T14:33:48Z", "message": "PassiveScanData add unit tests\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5d19f9a99949168add5b3a25b78ca6a424fd48f6", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/5d19f9a99949168add5b3a25b78ca6a424fd48f6", "committedDate": "2020-10-16T14:33:48Z", "message": "PassiveScanData add unit tests\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "822f0b39c62477c7cb06d0887313f3d523869d25", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/822f0b39c62477c7cb06d0887313f3d523869d25", "committedDate": "2020-10-16T14:44:34Z", "message": "PassiveScanData add unit tests\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "822f0b39c62477c7cb06d0887313f3d523869d25", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/822f0b39c62477c7cb06d0887313f3d523869d25", "committedDate": "2020-10-16T14:44:34Z", "message": "PassiveScanData add unit tests\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "209ffd61052cf9a23c7f1d71d353896885c9b9cd", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/209ffd61052cf9a23c7f1d71d353896885c9b9cd", "committedDate": "2020-10-16T14:47:50Z", "message": "PassiveScanData add unit tests\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNTQzMDk2", "url": "https://github.com/zaproxy/zaproxy/pull/6245#pullrequestreview-510543096", "createdAt": "2020-10-16T14:48:58Z", "commit": {"oid": "209ffd61052cf9a23c7f1d71d353896885c9b9cd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "209ffd61052cf9a23c7f1d71d353896885c9b9cd", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/209ffd61052cf9a23c7f1d71d353896885c9b9cd", "committedDate": "2020-10-16T14:47:50Z", "message": "PassiveScanData add unit tests\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "1a721423fb18dc103f01eb007dd2346fea0e996f", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/1a721423fb18dc103f01eb007dd2346fea0e996f", "committedDate": "2020-10-16T16:06:22Z", "message": "PassiveScanData add unit tests\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a721423fb18dc103f01eb007dd2346fea0e996f", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/1a721423fb18dc103f01eb007dd2346fea0e996f", "committedDate": "2020-10-16T16:06:22Z", "message": "PassiveScanData add unit tests\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "3a760247f29ffa4986310ea4cfd924bb2c048917", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/3a760247f29ffa4986310ea4cfd924bb2c048917", "committedDate": "2020-10-16T16:15:09Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a760247f29ffa4986310ea4cfd924bb2c048917", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/3a760247f29ffa4986310ea4cfd924bb2c048917", "committedDate": "2020-10-16T16:15:09Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "7bb46585d83432d4d3520751bc4d2e54d791bd05", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/7bb46585d83432d4d3520751bc4d2e54d791bd05", "committedDate": "2020-10-18T15:28:01Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7bb46585d83432d4d3520751bc4d2e54d791bd05", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/7bb46585d83432d4d3520751bc4d2e54d791bd05", "committedDate": "2020-10-18T15:28:01Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "8c0e5cf05ff4a56a12af880f0287dacd2463f847", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/8c0e5cf05ff4a56a12af880f0287dacd2463f847", "committedDate": "2020-10-18T19:30:56Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c0e5cf05ff4a56a12af880f0287dacd2463f847", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/8c0e5cf05ff4a56a12af880f0287dacd2463f847", "committedDate": "2020-10-18T19:30:56Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "5a8654047a21d35259cf57b3ec4a77653b96479c", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/5a8654047a21d35259cf57b3ec4a77653b96479c", "committedDate": "2020-10-19T13:26:20Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a8654047a21d35259cf57b3ec4a77653b96479c", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/5a8654047a21d35259cf57b3ec4a77653b96479c", "committedDate": "2020-10-19T13:26:20Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "5af1cfcc0abd29be510ccabac921e7d8cadd3355", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/5af1cfcc0abd29be510ccabac921e7d8cadd3355", "committedDate": "2020-10-19T13:32:05Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5af1cfcc0abd29be510ccabac921e7d8cadd3355", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/5af1cfcc0abd29be510ccabac921e7d8cadd3355", "committedDate": "2020-10-19T13:32:05Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "1cf4e8235b65a0660242cb82e357105577e65d60", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/1cf4e8235b65a0660242cb82e357105577e65d60", "committedDate": "2020-10-19T14:32:00Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200 check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1cf4e8235b65a0660242cb82e357105577e65d60", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/1cf4e8235b65a0660242cb82e357105577e65d60", "committedDate": "2020-10-19T14:32:00Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200 check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "4287563295fcf9a0ac1967919ca159a7c18b7613", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/4287563295fcf9a0ac1967919ca159a7c18b7613", "committedDate": "2020-10-19T14:32:59Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4287563295fcf9a0ac1967919ca159a7c18b7613", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/4287563295fcf9a0ac1967919ca159a7c18b7613", "committedDate": "2020-10-19T14:32:59Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "d0327c10584741fe4f85fdbdfb7bb3e5aa518b27", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/d0327c10584741fe4f85fdbdfb7bb3e5aa518b27", "committedDate": "2020-10-19T15:11:56Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0327c10584741fe4f85fdbdfb7bb3e5aa518b27", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/d0327c10584741fe4f85fdbdfb7bb3e5aa518b27", "committedDate": "2020-10-19T15:11:56Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "b77891f625647e6f9ca124efbee2f31f2d1f4084", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/b77891f625647e6f9ca124efbee2f31f2d1f4084", "committedDate": "2020-10-19T15:23:44Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b77891f625647e6f9ca124efbee2f31f2d1f4084", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/b77891f625647e6f9ca124efbee2f31f2d1f4084", "committedDate": "2020-10-19T15:23:44Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "736959fd13dbff02fbd3352e80a7aff2369d8ff2", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/736959fd13dbff02fbd3352e80a7aff2369d8ff2", "committedDate": "2020-10-19T15:31:10Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "736959fd13dbff02fbd3352e80a7aff2369d8ff2", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/736959fd13dbff02fbd3352e80a7aff2369d8ff2", "committedDate": "2020-10-19T15:31:10Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "cddc2072a9427c35acaccfc72d7763d17f10370e", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/cddc2072a9427c35acaccfc72d7763d17f10370e", "committedDate": "2020-10-19T23:38:54Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NDExODEy", "url": "https://github.com/zaproxy/zaproxy/pull/6245#pullrequestreview-514411812", "createdAt": "2020-10-22T06:57:41Z", "commit": {"oid": "cddc2072a9427c35acaccfc72d7763d17f10370e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNjo1Nzo0MVrOHmTKoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNjo1Nzo0MVrOHmTKoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkyMTk1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * message matches {@code CusotmPage.Type.ERROR_500} or {@code CusotmPage.Type.NOTFOUND_404}\n          \n          \n            \n                 * message matches {@code CustomPage.Type.ERROR_500} or {@code CustomPage.Type.NOTFOUND_404}\n          \n      \n    \n    \n  \n\nThis typo is present multiple times below too...", "url": "https://github.com/zaproxy/zaproxy/pull/6245#discussion_r509921952", "createdAt": "2020-10-22T06:57:41Z", "author": {"login": "ricekot"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java", "diffHunk": "@@ -604,37 +606,56 @@ private boolean isCustomPage(HttpMessage msg, CustomPage.Type cpType) {\n \n     /**\n      * Tells whether or not the message matches {@code CustomPage.Type.OK_200} definitions. Falls\n-     * back to use {@code Analyser}.\n+     * back to use {@code Analyser} which analyzes specific behavior and status codes. Checks if the\n+     * message matches {@code CusotmPage.Type.ERROR_500} or {@code CusotmPage.Type.NOTFOUND_404}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cddc2072a9427c35acaccfc72d7763d17f10370e"}, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cddc2072a9427c35acaccfc72d7763d17f10370e", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/cddc2072a9427c35acaccfc72d7763d17f10370e", "committedDate": "2020-10-19T23:38:54Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "a17745dd11a33e3fb0e1d506b139ebd2d2d421bd", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/a17745dd11a33e3fb0e1d506b139ebd2d2d421bd", "committedDate": "2020-10-22T07:59:59Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a17745dd11a33e3fb0e1d506b139ebd2d2d421bd", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/a17745dd11a33e3fb0e1d506b139ebd2d2d421bd", "committedDate": "2020-10-22T07:59:59Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "dff88d2f91153a9c92b568646e73934c190e31b1", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/dff88d2f91153a9c92b568646e73934c190e31b1", "committedDate": "2020-10-26T15:08:55Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dff88d2f91153a9c92b568646e73934c190e31b1", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/dff88d2f91153a9c92b568646e73934c190e31b1", "committedDate": "2020-10-26T15:08:55Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "4ab3814fd102ed4095af066ae805d441472a771c", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/4ab3814fd102ed4095af066ae805d441472a771c", "committedDate": "2020-10-26T15:54:11Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ab3814fd102ed4095af066ae805d441472a771c", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/4ab3814fd102ed4095af066ae805d441472a771c", "committedDate": "2020-10-26T15:54:11Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "00fe1ea6be609680f188199d0821c54a3fef750b", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/00fe1ea6be609680f188199d0821c54a3fef750b", "committedDate": "2020-10-28T02:16:59Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "00fe1ea6be609680f188199d0821c54a3fef750b", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/00fe1ea6be609680f188199d0821c54a3fef750b", "committedDate": "2020-10-28T02:16:59Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "6958ec17fe33905b372e0e6c9c6c278c388e3281", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/6958ec17fe33905b372e0e6c9c6c278c388e3281", "committedDate": "2020-10-30T02:07:04Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6958ec17fe33905b372e0e6c9c6c278c388e3281", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/6958ec17fe33905b372e0e6c9c6c278c388e3281", "committedDate": "2020-10-30T02:07:04Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "bc84677f850ccc649c79e02881c669429560e5fe", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/bc84677f850ccc649c79e02881c669429560e5fe", "committedDate": "2020-10-30T02:27:51Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMzA1NjQx", "url": "https://github.com/zaproxy/zaproxy/pull/6245#pullrequestreview-522305641", "createdAt": "2020-11-03T09:18:38Z", "commit": {"oid": "bc84677f850ccc649c79e02881c669429560e5fe"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOToxODozOFrOHsl5TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOTo1OTo1MVrOHsnetw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUyMDI2OQ==", "bodyText": "\"200 or 404\"", "url": "https://github.com/zaproxy/zaproxy/pull/6245#discussion_r516520269", "createdAt": "2020-11-03T09:18:38Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java", "diffHunk": "@@ -604,39 +606,61 @@ private boolean isCustomPage(HttpMessage msg, CustomPage.Type cpType) {\n \n     /**\n      * Tells whether or not the message matches {@code CustomPage.Type.OK_200} definitions. Falls\n-     * back to use {@code Analyser}.\n+     * back to use {@code Analyser} which analyzes specific behavior and status codes. Checks if the\n+     * message matches {@code CustomPage.Type.ERROR_500} or {@code CusotmPage.Type.NOTFOUND_404}\n+     * first, in case the user is trying to override something.\n      *\n      * @param msg the message that will be checked\n      * @return {@code true} if the message matches, {@code false} otherwise\n      * @since TODO Add version\n      */\n     protected boolean isPage200(HttpMessage msg) {\n-        boolean is200 = isCustomPage(msg, CustomPage.Type.OK_200);\n-        return is200 ? is200 : parent.getAnalyser().isFileExist(msg);\n+        if (isCustomPage(msg, CustomPage.Type.NOTFOUND_404)\n+                || isCustomPage(msg, CustomPage.Type.ERROR_500)) {\n+            return false;\n+        }\n+        return isCustomPage(msg, CustomPage.Type.OK_200)\n+                ? true\n+                : parent.getAnalyser().isFileExist(msg);\n     }\n \n     /**\n-     * Tells whether or not the message matches {@code CustomPage.Type.ERROR_500} definitions.\n+     * Tells whether or not the message matches {@code CustomPage.Type.ERROR_500} definitions. Falls\n+     * back to simply checking the response status code for \"500 - Internal Server Error\". Checks if\n+     * the message matches {@code CustomPage.Type.OK_200} first, in case the user is trying to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc84677f850ccc649c79e02881c669429560e5fe"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUyMDk4OQ==", "bodyText": "\"200 or 500\"", "url": "https://github.com/zaproxy/zaproxy/pull/6245#discussion_r516520989", "createdAt": "2020-11-03T09:19:50Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java", "diffHunk": "@@ -604,39 +606,61 @@ private boolean isCustomPage(HttpMessage msg, CustomPage.Type cpType) {\n \n     /**\n      * Tells whether or not the message matches {@code CustomPage.Type.OK_200} definitions. Falls\n-     * back to use {@code Analyser}.\n+     * back to use {@code Analyser} which analyzes specific behavior and status codes. Checks if the\n+     * message matches {@code CustomPage.Type.ERROR_500} or {@code CusotmPage.Type.NOTFOUND_404}\n+     * first, in case the user is trying to override something.\n      *\n      * @param msg the message that will be checked\n      * @return {@code true} if the message matches, {@code false} otherwise\n      * @since TODO Add version\n      */\n     protected boolean isPage200(HttpMessage msg) {\n-        boolean is200 = isCustomPage(msg, CustomPage.Type.OK_200);\n-        return is200 ? is200 : parent.getAnalyser().isFileExist(msg);\n+        if (isCustomPage(msg, CustomPage.Type.NOTFOUND_404)\n+                || isCustomPage(msg, CustomPage.Type.ERROR_500)) {\n+            return false;\n+        }\n+        return isCustomPage(msg, CustomPage.Type.OK_200)\n+                ? true\n+                : parent.getAnalyser().isFileExist(msg);\n     }\n \n     /**\n-     * Tells whether or not the message matches {@code CustomPage.Type.ERROR_500} definitions.\n+     * Tells whether or not the message matches {@code CustomPage.Type.ERROR_500} definitions. Falls\n+     * back to simply checking the response status code for \"500 - Internal Server Error\". Checks if\n+     * the message matches {@code CustomPage.Type.OK_200} first, in case the user is trying to\n+     * override something.\n      *\n      * @param msg the message that will be checked\n      * @return {@code true} if the message matches, {@code false} otherwise\n      * @since TODO Add version\n      */\n     protected boolean isPage500(HttpMessage msg) {\n-        return isCustomPage(msg, CustomPage.Type.ERROR_500);\n+        if (isCustomPage(msg, CustomPage.Type.OK_200)\n+                || isCustomPage(msg, CustomPage.Type.NOTFOUND_404)) {\n+            return false;\n+        }\n+        return isCustomPage(msg, CustomPage.Type.ERROR_500)\n+                ? true\n+                : msg.getResponseHeader().getStatusCode() == HttpStatusCode.INTERNAL_SERVER_ERROR;\n     }\n \n     /**\n      * Tells whether or not the message matches a {@code CustomPage.Type.NOTFOUND_404} definition.\n-     * Falls back to {@code Analyser}.\n+     * Falls back to {@code Analyser}. Checks if the message matches {@code CustomPage.Type.OK_200}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc84677f850ccc649c79e02881c669429560e5fe"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUyMjkxNw==", "bodyText": "\"200 or 500\"", "url": "https://github.com/zaproxy/zaproxy/pull/6245#discussion_r516522917", "createdAt": "2020-11-03T09:23:07Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanData.java", "diffHunk": "@@ -202,4 +242,34 @@ public boolean isPage404(HttpMessage msg) {\n     public boolean isPageOther(HttpMessage msg) {\n         return isCustomPage(msg, CustomPage.Type.OTHER);\n     }\n+\n+    /**\n+     * Tells whether or not the response has a status code between 400 and 499 (inclusive). Falls\n+     * back to check {@code CustomPage.Type.NOTFOUND_404}. Checks if the message matches {@code\n+     * CustomPage.Type.OK_200} first, in case the user is trying to override something.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc84677f850ccc649c79e02881c669429560e5fe"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUyMjk5MA==", "bodyText": "\"200 or 404\"", "url": "https://github.com/zaproxy/zaproxy/pull/6245#discussion_r516522990", "createdAt": "2020-11-03T09:23:15Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanData.java", "diffHunk": "@@ -202,4 +242,34 @@ public boolean isPage404(HttpMessage msg) {\n     public boolean isPageOther(HttpMessage msg) {\n         return isCustomPage(msg, CustomPage.Type.OTHER);\n     }\n+\n+    /**\n+     * Tells whether or not the response has a status code between 400 and 499 (inclusive). Falls\n+     * back to check {@code CustomPage.Type.NOTFOUND_404}. Checks if the message matches {@code\n+     * CustomPage.Type.OK_200} first, in case the user is trying to override something.\n+     *\n+     * @param msg the message that will be checked\n+     * @return {@code true} if the message matches, {@code false} otherwise\n+     * @since TODO Add version\n+     */\n+    public boolean isClientError(HttpMessage msg) {\n+        return isPage404(msg)\n+                ? true\n+                : HttpStatusCode.isClientError(msg.getResponseHeader().getStatusCode());\n+    }\n+\n+    /**\n+     * Tells whether or not the response has a status code between 500 and 599 (inclusive). Falls\n+     * back to check {@code CustomPage.Type.EROOR_500}. Checks if the message matches {@code\n+     * CustomPage.Type.OK_200} first, in case the user is trying to override something.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc84677f850ccc649c79e02881c669429560e5fe"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUyMzgwMQ==", "bodyText": "Should have one for 404 too? (Same for other tests with corresponding type.)", "url": "https://github.com/zaproxy/zaproxy/pull/6245#discussion_r516523801", "createdAt": "2020-11-03T09:24:41Z", "author": {"login": "thc202"}, "path": "zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java", "diffHunk": "@@ -1306,20 +1306,100 @@ public void shouldCheckPage404WithParentAndFallbacktoAnalyser(boolean expectedRe\n         verify(analyser).isFileExist(message);\n     }\n \n-    @ParameterizedTest\n-    @ValueSource(booleans = {true, false})\n-    public void shouldCheckPage500WithParent(boolean expectedResult) {\n+    @Test\n+    public void shouldCheckPage500WithParent() {\n         // Given\n         CustomPage.Type type = CustomPage.Type.ERROR_500;\n-        given(parent.isCustomPage(message, type)).willReturn(expectedResult);\n+        given(parent.isCustomPage(message, type)).willReturn(true);\n         plugin.init(message, parent);\n         // When\n         boolean result = plugin.isPage500(message);\n         // Then\n-        assertThat(result, is(equalTo(expectedResult)));\n+        assertThat(result, is(equalTo(true)));\n+        verify(parent).isCustomPage(message, CustomPage.Type.OK_200);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc84677f850ccc649c79e02881c669429560e5fe"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUyNzkzNg==", "bodyText": "\"...ButAnalyserIndicates200\"?", "url": "https://github.com/zaproxy/zaproxy/pull/6245#discussion_r516527936", "createdAt": "2020-11-03T09:31:23Z", "author": {"login": "thc202"}, "path": "zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java", "diffHunk": "@@ -1334,6 +1414,192 @@ public void shouldCheckPageOtherWithParent(boolean expectedResult) {\n         verify(parent).isCustomPage(message, type);\n     }\n \n+    @Test\n+    public void isClientErrorShouldReturnTrueIfCustomPage404Matches() {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.NOTFOUND_404;\n+        HttpMessage message = new HttpMessage();\n+        message.getResponseHeader().setStatusCode(200);\n+        given(parent.isCustomPage(message, type)).willReturn(true);\n+        given(analyser.isFileExist(message)).willReturn(false);\n+        plugin.init(message, parent);\n+        // When\n+        boolean result = plugin.isClientError(message);\n+        // Then\n+        assertThat(result, is(equalTo(true)));\n+        verify(parent).isCustomPage(message, CustomPage.Type.OK_200);\n+        verify(parent).isCustomPage(message, type);\n+    }\n+\n+    @Test\n+    public void isClientErrorShouldReturnTrueIfStatusCodeMatches() {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.NOTFOUND_404;\n+        HttpMessage message = new HttpMessage();\n+        message.getResponseHeader().setStatusCode(403);\n+        plugin.init(message, parent);\n+        given(parent.isCustomPage(message, type)).willReturn(false);\n+        given(parent.isCustomPage(message, CustomPage.Type.OK_200)).willReturn(false);\n+        given(parent.getAnalyser()).willReturn(analyser);\n+        given(parent.getAnalyser().isFileExist(message)).willReturn(false);\n+        // When\n+        boolean result = plugin.isClientError(message);\n+        // Then\n+        assertThat(result, is(equalTo(true)));\n+        verify(parent).isCustomPage(message, type);\n+        verify(parent).isCustomPage(message, CustomPage.Type.OK_200);\n+    }\n+\n+    @Test\n+    public void\n+            isClientErrorShouldReturnTrueIfNoStatusCodeOrCustomPageMatchesButAnalyserIndicates404() {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.NOTFOUND_404;\n+        HttpMessage message = new HttpMessage();\n+        message.getResponseHeader().setStatusCode(200);\n+        given(parent.isCustomPage(message, type)).willReturn(false);\n+        given(parent.getAnalyser()).willReturn(analyser);\n+        given(parent.getAnalyser().isFileExist(message)).willReturn(false);\n+        plugin.init(message, parent);\n+        // When\n+        boolean result = plugin.isClientError(message);\n+        // Then\n+        assertThat(result, is(equalTo(true)));\n+        verify(parent).isCustomPage(message, CustomPage.Type.OK_200);\n+        verify(parent).isCustomPage(message, type);\n+    }\n+\n+    @Test\n+    public void isClientErrorShouldReturnFalseIfNoStatusCodeOrCustomPageMatches() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc84677f850ccc649c79e02881c669429560e5fe"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUyODUyNw==", "bodyText": "Change to false? (Or not set it?)", "url": "https://github.com/zaproxy/zaproxy/pull/6245#discussion_r516528527", "createdAt": "2020-11-03T09:32:20Z", "author": {"login": "thc202"}, "path": "zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java", "diffHunk": "@@ -1334,6 +1414,192 @@ public void shouldCheckPageOtherWithParent(boolean expectedResult) {\n         verify(parent).isCustomPage(message, type);\n     }\n \n+    @Test\n+    public void isClientErrorShouldReturnTrueIfCustomPage404Matches() {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.NOTFOUND_404;\n+        HttpMessage message = new HttpMessage();\n+        message.getResponseHeader().setStatusCode(200);\n+        given(parent.isCustomPage(message, type)).willReturn(true);\n+        given(analyser.isFileExist(message)).willReturn(false);\n+        plugin.init(message, parent);\n+        // When\n+        boolean result = plugin.isClientError(message);\n+        // Then\n+        assertThat(result, is(equalTo(true)));\n+        verify(parent).isCustomPage(message, CustomPage.Type.OK_200);\n+        verify(parent).isCustomPage(message, type);\n+    }\n+\n+    @Test\n+    public void isClientErrorShouldReturnTrueIfStatusCodeMatches() {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.NOTFOUND_404;\n+        HttpMessage message = new HttpMessage();\n+        message.getResponseHeader().setStatusCode(403);\n+        plugin.init(message, parent);\n+        given(parent.isCustomPage(message, type)).willReturn(false);\n+        given(parent.isCustomPage(message, CustomPage.Type.OK_200)).willReturn(false);\n+        given(parent.getAnalyser()).willReturn(analyser);\n+        given(parent.getAnalyser().isFileExist(message)).willReturn(false);\n+        // When\n+        boolean result = plugin.isClientError(message);\n+        // Then\n+        assertThat(result, is(equalTo(true)));\n+        verify(parent).isCustomPage(message, type);\n+        verify(parent).isCustomPage(message, CustomPage.Type.OK_200);\n+    }\n+\n+    @Test\n+    public void\n+            isClientErrorShouldReturnTrueIfNoStatusCodeOrCustomPageMatchesButAnalyserIndicates404() {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.NOTFOUND_404;\n+        HttpMessage message = new HttpMessage();\n+        message.getResponseHeader().setStatusCode(200);\n+        given(parent.isCustomPage(message, type)).willReturn(false);\n+        given(parent.getAnalyser()).willReturn(analyser);\n+        given(parent.getAnalyser().isFileExist(message)).willReturn(false);\n+        plugin.init(message, parent);\n+        // When\n+        boolean result = plugin.isClientError(message);\n+        // Then\n+        assertThat(result, is(equalTo(true)));\n+        verify(parent).isCustomPage(message, CustomPage.Type.OK_200);\n+        verify(parent).isCustomPage(message, type);\n+    }\n+\n+    @Test\n+    public void isClientErrorShouldReturnFalseIfNoStatusCodeOrCustomPageMatches() {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.NOTFOUND_404;\n+        HttpMessage message = new HttpMessage();\n+        message.getResponseHeader().setStatusCode(200);\n+        given(parent.isCustomPage(message, type)).willReturn(false);\n+        given(parent.getAnalyser()).willReturn(analyser);\n+        given(parent.getAnalyser().isFileExist(message)).willReturn(true);\n+        plugin.init(message, parent);\n+        // When\n+        boolean result = plugin.isClientError(message);\n+        // Then\n+        assertThat(result, is(equalTo(false)));\n+        verify(parent).isCustomPage(message, CustomPage.Type.OK_200);\n+        verify(parent).isCustomPage(message, type);\n+    }\n+\n+    @Test\n+    public void isClientErrorShouldReturnFalseIfCustomPage200Matches() {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.NOTFOUND_404;\n+        HttpMessage message = new HttpMessage();\n+        message.getResponseHeader().setStatusCode(200);\n+        given(parent.isCustomPage(message, type)).willReturn(false);\n+        given(parent.isCustomPage(message, CustomPage.Type.OK_200)).willReturn(true);\n+        given(parent.getAnalyser()).willReturn(analyser);\n+        given(parent.getAnalyser().isFileExist(message)).willReturn(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc84677f850ccc649c79e02881c669429560e5fe"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUzMjgzMg==", "bodyText": "This would have to be inlined? isPage404 might return false if page 200 match, so we should not be checking the status code in that case?", "url": "https://github.com/zaproxy/zaproxy/pull/6245#discussion_r516532832", "createdAt": "2020-11-03T09:39:21Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java", "diffHunk": "@@ -650,6 +674,38 @@ protected boolean isPageOther(HttpMessage msg) {\n         return isCustomPage(msg, CustomPage.Type.OTHER);\n     }\n \n+    /**\n+     * Tells whether or not the response has a status code between 400 and 499 (inclusive). Falls\n+     * back to check {@code CustomPage.Type.NOTFOUND_404}. Checks if the message matches {@code\n+     * CustomPage.Type.OK_200} or {@code CustomPage.Type.ERROR_500} first, in case the user is\n+     * trying to override something.\n+     *\n+     * @param msg the message that will be checked\n+     * @return {@code true} if the message matches, {@code false} otherwise\n+     * @since TODO Add version\n+     */\n+    public boolean isClientError(HttpMessage msg) {\n+        return isPage404(msg)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc84677f850ccc649c79e02881c669429560e5fe"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0MTQ2OQ==", "bodyText": "This case is not covered.", "url": "https://github.com/zaproxy/zaproxy/pull/6245#discussion_r516541469", "createdAt": "2020-11-03T09:52:37Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java", "diffHunk": "@@ -604,39 +606,61 @@ private boolean isCustomPage(HttpMessage msg, CustomPage.Type cpType) {\n \n     /**\n      * Tells whether or not the message matches {@code CustomPage.Type.OK_200} definitions. Falls\n-     * back to use {@code Analyser}.\n+     * back to use {@code Analyser} which analyzes specific behavior and status codes. Checks if the\n+     * message matches {@code CustomPage.Type.ERROR_500} or {@code CusotmPage.Type.NOTFOUND_404}\n+     * first, in case the user is trying to override something.\n      *\n      * @param msg the message that will be checked\n      * @return {@code true} if the message matches, {@code false} otherwise\n      * @since TODO Add version\n      */\n     protected boolean isPage200(HttpMessage msg) {\n-        boolean is200 = isCustomPage(msg, CustomPage.Type.OK_200);\n-        return is200 ? is200 : parent.getAnalyser().isFileExist(msg);\n+        if (isCustomPage(msg, CustomPage.Type.NOTFOUND_404)\n+                || isCustomPage(msg, CustomPage.Type.ERROR_500)) {\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc84677f850ccc649c79e02881c669429560e5fe"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0MTQ5NQ==", "bodyText": "One branch is not covered.", "url": "https://github.com/zaproxy/zaproxy/pull/6245#discussion_r516541495", "createdAt": "2020-11-03T09:52:39Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java", "diffHunk": "@@ -604,39 +606,61 @@ private boolean isCustomPage(HttpMessage msg, CustomPage.Type cpType) {\n \n     /**\n      * Tells whether or not the message matches {@code CustomPage.Type.OK_200} definitions. Falls\n-     * back to use {@code Analyser}.\n+     * back to use {@code Analyser} which analyzes specific behavior and status codes. Checks if the\n+     * message matches {@code CustomPage.Type.ERROR_500} or {@code CusotmPage.Type.NOTFOUND_404}\n+     * first, in case the user is trying to override something.\n      *\n      * @param msg the message that will be checked\n      * @return {@code true} if the message matches, {@code false} otherwise\n      * @since TODO Add version\n      */\n     protected boolean isPage200(HttpMessage msg) {\n-        boolean is200 = isCustomPage(msg, CustomPage.Type.OK_200);\n-        return is200 ? is200 : parent.getAnalyser().isFileExist(msg);\n+        if (isCustomPage(msg, CustomPage.Type.NOTFOUND_404)\n+                || isCustomPage(msg, CustomPage.Type.ERROR_500)) {\n+            return false;\n+        }\n+        return isCustomPage(msg, CustomPage.Type.OK_200)\n+                ? true\n+                : parent.getAnalyser().isFileExist(msg);\n     }\n \n     /**\n-     * Tells whether or not the message matches {@code CustomPage.Type.ERROR_500} definitions.\n+     * Tells whether or not the message matches {@code CustomPage.Type.ERROR_500} definitions. Falls\n+     * back to simply checking the response status code for \"500 - Internal Server Error\". Checks if\n+     * the message matches {@code CustomPage.Type.OK_200} first, in case the user is trying to\n+     * override something.\n      *\n      * @param msg the message that will be checked\n      * @return {@code true} if the message matches, {@code false} otherwise\n      * @since TODO Add version\n      */\n     protected boolean isPage500(HttpMessage msg) {\n-        return isCustomPage(msg, CustomPage.Type.ERROR_500);\n+        if (isCustomPage(msg, CustomPage.Type.OK_200)\n+                || isCustomPage(msg, CustomPage.Type.NOTFOUND_404)) {\n+            return false;\n+        }\n+        return isCustomPage(msg, CustomPage.Type.ERROR_500)\n+                ? true\n+                : msg.getResponseHeader().getStatusCode() == HttpStatusCode.INTERNAL_SERVER_ERROR;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc84677f850ccc649c79e02881c669429560e5fe"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NTMyNA==", "bodyText": "It would be better to setup the behaviour for 200/500 rather than setting it lenient.", "url": "https://github.com/zaproxy/zaproxy/pull/6245#discussion_r516545324", "createdAt": "2020-11-03T09:58:26Z", "author": {"login": "thc202"}, "path": "zap/src/test/java/org/zaproxy/zap/extension/pscan/PassiveScanDataUnitTest.java", "diffHunk": "@@ -0,0 +1,427 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscan;\n+\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.model.Session;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.WithConfigsTest;\n+import org.zaproxy.zap.extension.custompages.CustomPage;\n+import org.zaproxy.zap.extension.users.ContextUserAuthManager;\n+import org.zaproxy.zap.extension.users.ExtensionUserManagement;\n+import org.zaproxy.zap.model.Context;\n+import org.zaproxy.zap.model.Tech;\n+import org.zaproxy.zap.model.TechSet;\n+import org.zaproxy.zap.users.User;\n+import org.zaproxy.zap.utils.I18N;\n+\n+class PassiveScanDataUnitTest extends WithConfigsTest {\n+\n+    private Session session;\n+    private Context context;\n+\n+    @BeforeEach\n+    public void setup() {\n+        Constant.messages = mock(I18N.class);\n+        session = mock(Session.class);\n+        doReturn(session).when(model).getSession();\n+        context = mock(Context.class);\n+        PassiveScanData.setExtUserMgmt(null);\n+    }\n+\n+    @Test\n+    public void shouldHaveAllTechSetByDefault() {\n+        // Given / When\n+        HttpMessage msg = createMessage();\n+        PassiveScanData psd = new PassiveScanData(msg);\n+        // Then\n+        assertThat(psd.getTechSet(), is(equalTo(TechSet.AllTech)));\n+    }\n+\n+    @Test\n+    public void shouldHaveEmptyUserListByDefault() {\n+        // Given / When\n+        HttpMessage msg = createMessage();\n+        PassiveScanData psd = new PassiveScanData(msg);\n+        // Then\n+        assertThat(psd.getUsers(), is(equalTo(Collections.emptyList())));\n+    }\n+\n+    @Test\n+    public void shouldNotHaveContextByDefault() {\n+        // Given / When\n+        HttpMessage msg = createMessage();\n+        PassiveScanData psd = new PassiveScanData(msg);\n+        // Then\n+        assertNull(psd.getContext());\n+        assertThat(psd.hasContext(), is(equalTo(false)));\n+    }\n+\n+    @Test\n+    public void shouldHaveContextIfMessageIncludedInOne() {\n+        // Given\n+        HttpMessage msg = createMessage();\n+        Context context = mock(Context.class);\n+        given(session.getContextsForUrl(msg.getRequestHeader().getURI().toString()))\n+                .willReturn(asList(context));\n+        // When\n+        PassiveScanData psd = new PassiveScanData(msg);\n+        // Then\n+        assertThat(psd.getContext(), is(equalTo(context)));\n+        assertThat(psd.hasContext(), is(equalTo(true)));\n+    }\n+\n+    @Test\n+    public void shouldUseFirstContextIfMessageApplicableToMultiple() {\n+        // Given\n+        HttpMessage msg = createMessage();\n+        Context matchCtxOne = mock(Context.class);\n+        Context matchCtxTwo = mock(Context.class);\n+        given(session.getContextsForUrl(msg.getRequestHeader().getURI().toString()))\n+                .willReturn(asList(matchCtxOne, matchCtxTwo));\n+        // When\n+        PassiveScanData psd = new PassiveScanData(msg);\n+        // Then\n+        assertThat(psd.getContext(), is(equalTo(matchCtxOne)));\n+        assertThat(psd.hasContext(), is(equalTo(true)));\n+    }\n+\n+    @Test\n+    public void shouldUseTechSetOfFirstMatchedContextIfMessageApplicableToMultiple() {\n+        // Given\n+        HttpMessage msg = createMessage();\n+        Context matchCtxOne = mock(Context.class);\n+        TechSet expectedTechSet = new TechSet(Tech.Db);\n+        given(matchCtxOne.getTechSet()).willReturn(expectedTechSet);\n+        Context matchCtxTwo = mock(Context.class);\n+        given(session.getContextsForUrl(msg.getRequestHeader().getURI().toString()))\n+                .willReturn(asList(matchCtxOne, matchCtxTwo));\n+        // When\n+        PassiveScanData psd = new PassiveScanData(msg);\n+\n+        // Then\n+        assertThat(psd.getTechSet(), is(equalTo(expectedTechSet)));\n+    }\n+\n+    @Test\n+    public void shouldUseUsersOfFirstMatchedContextIfMessageApplicableToMultiple() {\n+        // Given\n+        HttpMessage msg = createMessage();\n+        int contextId = 3;\n+        Context matchCtxOne = mock(Context.class);\n+        given(matchCtxOne.getId()).willReturn(contextId);\n+        ExtensionUserManagement extUserMgmt = mock(ExtensionUserManagement.class);\n+        List<User> expectedUsers = asList(mock(User.class), mock(User.class));\n+        ContextUserAuthManager contextUserAuthManager = mock(ContextUserAuthManager.class);\n+        given(extUserMgmt.getContextUserAuthManager(contextId)).willReturn(contextUserAuthManager);\n+        given(contextUserAuthManager.getUsers()).willReturn(expectedUsers);\n+        PassiveScanData.setExtUserMgmt(extUserMgmt);\n+        Context matchCtxTwo = mock(Context.class);\n+        given(session.getContextsForUrl(msg.getRequestHeader().getURI().toString()))\n+                .willReturn(asList(matchCtxOne, matchCtxTwo));\n+        // When\n+        PassiveScanData psd = new PassiveScanData(msg);\n+        // Then\n+        assertThat(psd.getUsers(), is(equalTo(expectedUsers)));\n+    }\n+\n+    @Test\n+    public void shouldCheckPage200WithContext() {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.OK_200;\n+        HttpMessage msg = createMessage();\n+        given(context.isCustomPageWithFallback(msg, type)).willReturn(true);\n+        given(context.isCustomPageWithFallback(msg, CustomPage.Type.ERROR_500)).willReturn(false);\n+        given(context.isCustomPageWithFallback(msg, CustomPage.Type.NOTFOUND_404))\n+                .willReturn(false);\n+        given(session.getContextsForUrl(msg.getRequestHeader().getURI().toString()))\n+                .willReturn(asList(context));\n+        PassiveScanData psd = new PassiveScanData(msg);\n+        // When\n+        boolean result = psd.isPage200(msg);\n+        // Then\n+        assertThat(result, is(equalTo(true)));\n+        verify(context).isCustomPageWithFallback(msg, CustomPage.Type.ERROR_500);\n+        verify(context).isCustomPageWithFallback(msg, CustomPage.Type.NOTFOUND_404);\n+        verify(context).isCustomPageWithFallback(msg, type);\n+    }\n+\n+    @Test\n+    public void shouldCheckPage404WithContext() {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.NOTFOUND_404;\n+        HttpMessage msg = createMessage();\n+        given(context.isCustomPageWithFallback(msg, type)).willReturn(true);\n+        given(context.isCustomPageWithFallback(msg, CustomPage.Type.OK_200)).willReturn(false);\n+        given(context.isCustomPageWithFallback(msg, CustomPage.Type.ERROR_500)).willReturn(false);\n+        given(session.getContextsForUrl(msg.getRequestHeader().getURI().toString()))\n+                .willReturn(asList(context));\n+        PassiveScanData psd = new PassiveScanData(msg);\n+        // When\n+        boolean result = psd.isPage404(msg);\n+        // Then\n+        assertThat(result, is(equalTo(true)));\n+        verify(context).isCustomPageWithFallback(msg, CustomPage.Type.OK_200);\n+        verify(context).isCustomPageWithFallback(msg, type);\n+    }\n+\n+    @Test\n+    public void shouldCheckPage500WithContext() {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.ERROR_500;\n+        HttpMessage msg = createMessage();\n+        given(context.isCustomPageWithFallback(msg, type)).willReturn(true);\n+        given(context.isCustomPageWithFallback(msg, CustomPage.Type.OK_200)).willReturn(false);\n+        given(context.isCustomPageWithFallback(msg, CustomPage.Type.NOTFOUND_404))\n+                .willReturn(false);\n+        given(session.getContextsForUrl(msg.getRequestHeader().getURI().toString()))\n+                .willReturn(asList(context));\n+        PassiveScanData psd = new PassiveScanData(msg);\n+        // When\n+        boolean result = psd.isPage500(msg);\n+        // Then\n+        assertThat(result, is(equalTo(true)));\n+        verify(context).isCustomPageWithFallback(msg, CustomPage.Type.OK_200);\n+        verify(context).isCustomPageWithFallback(msg, type);\n+    }\n+\n+    @Test\n+    public void shouldCheckPageOtherWithContext() {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.OTHER;\n+        HttpMessage msg = createMessage();\n+        given(context.isCustomPageWithFallback(msg, type)).willReturn(true);\n+        given(session.getContextsForUrl(msg.getRequestHeader().getURI().toString()))\n+                .willReturn(asList(context));\n+        PassiveScanData psd = new PassiveScanData(msg);\n+        // When\n+        boolean result = psd.isPageOther(msg);\n+        // Then\n+        assertThat(result, is(equalTo(true)));\n+        verify(context).isCustomPageWithFallback(msg, type);\n+    }\n+\n+    @Test\n+    public void isClientErrorShouldReturnTrueIfStatusCodeMatches() {\n+        // Given\n+        HttpMessage msg = createMessage();\n+        msg.getResponseHeader().setStatusCode(403);\n+        PassiveScanData psd = new PassiveScanData(msg);\n+        // When\n+        boolean result = psd.isClientError(msg);\n+        // Then\n+        assertThat(result, is(equalTo(true)));\n+        verifyNoInteractions(context);\n+    }\n+\n+    @Test\n+    @MockitoSettings(strictness = Strictness.LENIENT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc84677f850ccc649c79e02881c669429560e5fe"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NjE1MA==", "bodyText": "Not covered.", "url": "https://github.com/zaproxy/zaproxy/pull/6245#discussion_r516546150", "createdAt": "2020-11-03T09:59:45Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanData.java", "diffHunk": "@@ -160,36 +173,63 @@ private boolean isCustomPage(HttpMessage msg, CustomPage.Type cpType) {\n     }\n \n     /**\n-     * Tells whether or not the message matches {@code CustomPage.Type.OK_200} definitions.\n+     * Tells whether or not the message matches {@code CustomPage.Type.OK_200} definitions. Falls\n+     * back to simply checking the response status code for \"200 - Ok\". Checks if the message\n+     * matches {@code CustomPage.Type.ERROR_500} or {@code CusotmPage.Type.NOTFOUND_404} first, in\n+     * case the user is trying to override something.\n      *\n      * @param msg the message that will be checked\n      * @return {@code true} if the message matches, {@code false} otherwise\n      * @since TODO Add version\n      */\n     public boolean isPage200(HttpMessage msg) {\n-        return isCustomPage(msg, CustomPage.Type.OK_200);\n+        if (isCustomPage(msg, CustomPage.Type.NOTFOUND_404)\n+                || isCustomPage(msg, CustomPage.Type.ERROR_500)) {\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc84677f850ccc649c79e02881c669429560e5fe"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NjE4OA==", "bodyText": "Not covered.", "url": "https://github.com/zaproxy/zaproxy/pull/6245#discussion_r516546188", "createdAt": "2020-11-03T09:59:47Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanData.java", "diffHunk": "@@ -160,36 +173,63 @@ private boolean isCustomPage(HttpMessage msg, CustomPage.Type cpType) {\n     }\n \n     /**\n-     * Tells whether or not the message matches {@code CustomPage.Type.OK_200} definitions.\n+     * Tells whether or not the message matches {@code CustomPage.Type.OK_200} definitions. Falls\n+     * back to simply checking the response status code for \"200 - Ok\". Checks if the message\n+     * matches {@code CustomPage.Type.ERROR_500} or {@code CusotmPage.Type.NOTFOUND_404} first, in\n+     * case the user is trying to override something.\n      *\n      * @param msg the message that will be checked\n      * @return {@code true} if the message matches, {@code false} otherwise\n      * @since TODO Add version\n      */\n     public boolean isPage200(HttpMessage msg) {\n-        return isCustomPage(msg, CustomPage.Type.OK_200);\n+        if (isCustomPage(msg, CustomPage.Type.NOTFOUND_404)\n+                || isCustomPage(msg, CustomPage.Type.ERROR_500)) {\n+            return false;\n+        }\n+        return isCustomPage(msg, CustomPage.Type.OK_200)\n+                ? true\n+                : msg.getResponseHeader().getStatusCode() == HttpStatusCode.OK;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc84677f850ccc649c79e02881c669429560e5fe"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NjIwMA==", "bodyText": "One branch not covered.", "url": "https://github.com/zaproxy/zaproxy/pull/6245#discussion_r516546200", "createdAt": "2020-11-03T09:59:49Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanData.java", "diffHunk": "@@ -160,36 +173,63 @@ private boolean isCustomPage(HttpMessage msg, CustomPage.Type cpType) {\n     }\n \n     /**\n-     * Tells whether or not the message matches {@code CustomPage.Type.OK_200} definitions.\n+     * Tells whether or not the message matches {@code CustomPage.Type.OK_200} definitions. Falls\n+     * back to simply checking the response status code for \"200 - Ok\". Checks if the message\n+     * matches {@code CustomPage.Type.ERROR_500} or {@code CusotmPage.Type.NOTFOUND_404} first, in\n+     * case the user is trying to override something.\n      *\n      * @param msg the message that will be checked\n      * @return {@code true} if the message matches, {@code false} otherwise\n      * @since TODO Add version\n      */\n     public boolean isPage200(HttpMessage msg) {\n-        return isCustomPage(msg, CustomPage.Type.OK_200);\n+        if (isCustomPage(msg, CustomPage.Type.NOTFOUND_404)\n+                || isCustomPage(msg, CustomPage.Type.ERROR_500)) {\n+            return false;\n+        }\n+        return isCustomPage(msg, CustomPage.Type.OK_200)\n+                ? true\n+                : msg.getResponseHeader().getStatusCode() == HttpStatusCode.OK;\n     }\n \n     /**\n-     * Tells whether or not the message matches {@code CustomPage.Type.ERROR_500} definitions.\n+     * Tells whether or not the message matches {@code CustomPage.Type.ERROR_500} definitions. Falls\n+     * back to simply checking the response status code for \"500 - Internal Server Error\". Checks if\n+     * the message matches {@code CustomPage.Type.OK_200} or {@code CustomPage.Type.NOTFOUND_404}\n+     * first, in case the user is trying to override something.\n      *\n      * @param msg the message that will be checked\n      * @return {@code true} if the message matches, {@code false} otherwise\n      * @since TODO Add version\n      */\n     public boolean isPage500(HttpMessage msg) {\n-        return isCustomPage(msg, CustomPage.Type.ERROR_500);\n+        if (isCustomPage(msg, CustomPage.Type.OK_200)\n+                || isCustomPage(msg, CustomPage.Type.NOTFOUND_404)) {\n+            return false;\n+        }\n+        return isCustomPage(msg, CustomPage.Type.ERROR_500)\n+                ? true\n+                : msg.getResponseHeader().getStatusCode() == HttpStatusCode.INTERNAL_SERVER_ERROR;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc84677f850ccc649c79e02881c669429560e5fe"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NjIzMQ==", "bodyText": "One branch not covered.", "url": "https://github.com/zaproxy/zaproxy/pull/6245#discussion_r516546231", "createdAt": "2020-11-03T09:59:51Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanData.java", "diffHunk": "@@ -160,36 +173,63 @@ private boolean isCustomPage(HttpMessage msg, CustomPage.Type cpType) {\n     }\n \n     /**\n-     * Tells whether or not the message matches {@code CustomPage.Type.OK_200} definitions.\n+     * Tells whether or not the message matches {@code CustomPage.Type.OK_200} definitions. Falls\n+     * back to simply checking the response status code for \"200 - Ok\". Checks if the message\n+     * matches {@code CustomPage.Type.ERROR_500} or {@code CusotmPage.Type.NOTFOUND_404} first, in\n+     * case the user is trying to override something.\n      *\n      * @param msg the message that will be checked\n      * @return {@code true} if the message matches, {@code false} otherwise\n      * @since TODO Add version\n      */\n     public boolean isPage200(HttpMessage msg) {\n-        return isCustomPage(msg, CustomPage.Type.OK_200);\n+        if (isCustomPage(msg, CustomPage.Type.NOTFOUND_404)\n+                || isCustomPage(msg, CustomPage.Type.ERROR_500)) {\n+            return false;\n+        }\n+        return isCustomPage(msg, CustomPage.Type.OK_200)\n+                ? true\n+                : msg.getResponseHeader().getStatusCode() == HttpStatusCode.OK;\n     }\n \n     /**\n-     * Tells whether or not the message matches {@code CustomPage.Type.ERROR_500} definitions.\n+     * Tells whether or not the message matches {@code CustomPage.Type.ERROR_500} definitions. Falls\n+     * back to simply checking the response status code for \"500 - Internal Server Error\". Checks if\n+     * the message matches {@code CustomPage.Type.OK_200} or {@code CustomPage.Type.NOTFOUND_404}\n+     * first, in case the user is trying to override something.\n      *\n      * @param msg the message that will be checked\n      * @return {@code true} if the message matches, {@code false} otherwise\n      * @since TODO Add version\n      */\n     public boolean isPage500(HttpMessage msg) {\n-        return isCustomPage(msg, CustomPage.Type.ERROR_500);\n+        if (isCustomPage(msg, CustomPage.Type.OK_200)\n+                || isCustomPage(msg, CustomPage.Type.NOTFOUND_404)) {\n+            return false;\n+        }\n+        return isCustomPage(msg, CustomPage.Type.ERROR_500)\n+                ? true\n+                : msg.getResponseHeader().getStatusCode() == HttpStatusCode.INTERNAL_SERVER_ERROR;\n     }\n \n     /**\n      * Tells whether or not the message matches {@code CustomPage.Type.NOTFOUND_404} definitions.\n+     * Falls back to simply checking the response status code for \"404 - Not Found\". Checks if the\n+     * message matches {@code CustomPage.Type.OK_200} or {@code CustomPage.Type.ERROR_500} first, in\n+     * case the user is trying to override something.\n      *\n      * @param msg the message that will be checked\n      * @return {@code true} if the message matches, {@code false} otherwise\n      * @since TODO Add version\n      */\n     public boolean isPage404(HttpMessage msg) {\n-        return isCustomPage(msg, CustomPage.Type.NOTFOUND_404);\n+        if (isCustomPage(msg, CustomPage.Type.OK_200)\n+                || isCustomPage(msg, CustomPage.Type.ERROR_500)) {\n+            return false;\n+        }\n+        return isCustomPage(msg, CustomPage.Type.NOTFOUND_404)\n+                ? true\n+                : msg.getResponseHeader().getStatusCode() == HttpStatusCode.NOT_FOUND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc84677f850ccc649c79e02881c669429560e5fe"}, "originalPosition": 120}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc84677f850ccc649c79e02881c669429560e5fe", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/bc84677f850ccc649c79e02881c669429560e5fe", "committedDate": "2020-10-30T02:27:51Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "c4315fb11a152a19c5eb8771810327857ae8a5fa", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/c4315fb11a152a19c5eb8771810327857ae8a5fa", "committedDate": "2020-11-03T13:04:46Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c4315fb11a152a19c5eb8771810327857ae8a5fa", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/c4315fb11a152a19c5eb8771810327857ae8a5fa", "committedDate": "2020-11-03T13:04:46Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "7d8c484ff46894141f9b719ba9e96858ddd38dd9", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/7d8c484ff46894141f9b719ba9e96858ddd38dd9", "committedDate": "2020-11-04T12:44:51Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d8c484ff46894141f9b719ba9e96858ddd38dd9", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/7d8c484ff46894141f9b719ba9e96858ddd38dd9", "committedDate": "2020-11-04T12:44:51Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "711c16f32213e89c2370caa70a172278729f7edf", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/711c16f32213e89c2370caa70a172278729f7edf", "committedDate": "2020-11-04T22:18:27Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "711c16f32213e89c2370caa70a172278729f7edf", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/711c16f32213e89c2370caa70a172278729f7edf", "committedDate": "2020-11-04T22:18:27Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "a04d1235d3b0a8fe68a73f6973b7f497594c5c9c", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/a04d1235d3b0a8fe68a73f6973b7f497594c5c9c", "committedDate": "2020-11-05T12:36:37Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MjQxODQ0", "url": "https://github.com/zaproxy/zaproxy/pull/6245#pullrequestreview-524241844", "createdAt": "2020-11-05T13:08:47Z", "commit": {"oid": "a04d1235d3b0a8fe68a73f6973b7f497594c5c9c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzowODo0N1rOHuCeeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzowODo0N1rOHuCeeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAzNzExMg==", "bodyText": "Changes on these two lines are probably unnecessary in the end, will revert shortly.", "url": "https://github.com/zaproxy/zaproxy/pull/6245#discussion_r518037112", "createdAt": "2020-11-05T13:08:47Z", "author": {"login": "kingthorin"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanData.java", "diffHunk": "@@ -148,8 +161,8 @@ public TechSet getTechSet() {\n      * @param cpType the custom page type to be checked\n      * @return {@code true} if the message matches, {@code false} otherwise\n      */\n-    private boolean isCustomPage(HttpMessage msg, CustomPage.Type cpType) {\n-        if (context == null) {\n+    boolean isCustomPage(HttpMessage msg, CustomPage.Type cpType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a04d1235d3b0a8fe68a73f6973b7f497594c5c9c"}, "originalPosition": 61}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a04d1235d3b0a8fe68a73f6973b7f497594c5c9c", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/a04d1235d3b0a8fe68a73f6973b7f497594c5c9c", "committedDate": "2020-11-05T12:36:37Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "8fab4e95fb8377924b9a2841e5d5763049311c01", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/8fab4e95fb8377924b9a2841e5d5763049311c01", "committedDate": "2020-11-05T13:34:43Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8fab4e95fb8377924b9a2841e5d5763049311c01", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/8fab4e95fb8377924b9a2841e5d5763049311c01", "committedDate": "2020-11-05T13:34:43Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "ec15b27a435d27e4cee86fc938392d55d13e0e06", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/ec15b27a435d27e4cee86fc938392d55d13e0e06", "committedDate": "2020-11-06T17:19:41Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3314d09ffdcb66aa5eb4b014bb0ccb86f86dc57", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/e3314d09ffdcb66aa5eb4b014bb0ccb86f86dc57", "committedDate": "2020-11-06T17:28:22Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec15b27a435d27e4cee86fc938392d55d13e0e06", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/ec15b27a435d27e4cee86fc938392d55d13e0e06", "committedDate": "2020-11-06T17:19:41Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}, "afterCommit": {"oid": "e3314d09ffdcb66aa5eb4b014bb0ccb86f86dc57", "author": {"user": {"login": "kingthorin", "name": "Rick M"}}, "url": "https://github.com/zaproxy/zaproxy/commit/e3314d09ffdcb66aa5eb4b014bb0ccb86f86dc57", "committedDate": "2020-11-06T17:28:22Z", "message": "PassiveScanData add unit tests & active scan status code fallbacks\n\n- Clarify/tweak handling of Custom Page checks for active scanning.\nFallback to using status codes if there isn't a context in play.\n- Add UnitTests for PassiveScanData and status code fallback for passive\nscan handling.\n- Re-implement\n`HttpStatusCode.isClientError`/`HttpStatusCode.isServerError` to take\nadvantage of Custom Pages and Analyser as applicable for both ascan and\npscan.\n- For `isPage404`/`isPage500`/`isClientError`/`isServerError` check\n`CustomPage.Type.OK_200` first. In `isPage200` check\n`CustomPage.Type.ERROR_500` or `CustomPage.Type.NOTFOUND_404` first\n(both ascan and pscan, in case the user is trying to override\nsomething).\n- Fix \"Cusotm\" > \"Custom\" typos in PassiveScanData and AbstractPlugin.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MzU0NzE4", "url": "https://github.com/zaproxy/zaproxy/pull/6245#pullrequestreview-525354718", "createdAt": "2020-11-06T17:29:18Z", "commit": {"oid": "e3314d09ffdcb66aa5eb4b014bb0ccb86f86dc57"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MzU3MDQy", "url": "https://github.com/zaproxy/zaproxy/pull/6245#pullrequestreview-525357042", "createdAt": "2020-11-06T17:32:31Z", "commit": {"oid": "e3314d09ffdcb66aa5eb4b014bb0ccb86f86dc57"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 140, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}