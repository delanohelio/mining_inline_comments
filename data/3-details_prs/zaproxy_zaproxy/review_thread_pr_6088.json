{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NzQ5MzQ0", "number": 6088, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTo1NjoyOFrOEqdfIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMzo0NToyMlrOEsDfZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTU4NzU1OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTo1NjoyOFrOHcrnqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTo1NjoyOFrOHcrnqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzNjg0MA==", "bodyText": "The IS_ could be removed, more common without it, same for the key.", "url": "https://github.com/zaproxy/zaproxy/pull/6088#discussion_r499836840", "createdAt": "2020-10-05T19:56:28Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java", "diffHunk": "@@ -43,6 +43,9 @@\n     private static final String CONFIRM_REMOVE_TOKEN_KEY =\n             ANTI_CSRF_BASE_KEY + \".confirmRemoveToken\";\n \n+    private static final String IS_PARTIAL_MATCHING_ENABLED_KEY =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a131708d1a00eea153633bc291ff14533b71e37c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTU4NzY1OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTo1NjozMFrOHcrnvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTo1NjozMFrOHcrnvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzNjg2MQ==", "bodyText": "partial...", "url": "https://github.com/zaproxy/zaproxy/pull/6088#discussion_r499836861", "createdAt": "2020-10-05T19:56:30Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java", "diffHunk": "@@ -54,14 +57,17 @@\n         \"csrf_token\",\n         \"_csrf\",\n         \"_csrfSecret\",\n-        \"__csrf_magic\"\n+        \"__csrf_magic\",\n+        \"CSRF\"\n     };\n \n     private List<AntiCsrfParamToken> tokens = null;\n     private List<String> enabledTokensNames = null;\n \n     private boolean confirmRemoveToken = true;\n \n+    private boolean isPartialMatchingEnabled = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a131708d1a00eea153633bc291ff14533b71e37c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTU4ODYwOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTo1Njo0OFrOHcroUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTo1Njo0OFrOHcroUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzNzAxMQ==", "bodyText": "Any reason to not have this exposed in the API? (Same for the setter.)", "url": "https://github.com/zaproxy/zaproxy/pull/6088#discussion_r499837011", "createdAt": "2020-10-05T19:56:48Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java", "diffHunk": "@@ -196,4 +203,17 @@ public void setConfirmRemoveToken(boolean confirmRemove) {\n         this.confirmRemoveToken = confirmRemove;\n         getConfig().setProperty(CONFIRM_REMOVE_TOKEN_KEY, confirmRemoveToken);\n     }\n+\n+    /** Returns true if should detect CSRF variables by searching for partial matches. */\n+    @ZapApiIgnore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a131708d1a00eea153633bc291ff14533b71e37c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTU4ODg5OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTo1Njo1MlrOHcroeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTo1Njo1MlrOHcroeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzNzA0OQ==", "bodyText": "isPartial...", "url": "https://github.com/zaproxy/zaproxy/pull/6088#discussion_r499837049", "createdAt": "2020-10-05T19:56:52Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java", "diffHunk": "@@ -196,4 +203,17 @@ public void setConfirmRemoveToken(boolean confirmRemove) {\n         this.confirmRemoveToken = confirmRemove;\n         getConfig().setProperty(CONFIRM_REMOVE_TOKEN_KEY, confirmRemoveToken);\n     }\n+\n+    /** Returns true if should detect CSRF variables by searching for partial matches. */\n+    @ZapApiIgnore\n+    public boolean getIsPartialMatchingEnabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a131708d1a00eea153633bc291ff14533b71e37c"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTU4OTQ5OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTo1NzowMlrOHcro0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTo1NzowMlrOHcro0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzNzEzOA==", "bodyText": "setPartial...", "url": "https://github.com/zaproxy/zaproxy/pull/6088#discussion_r499837138", "createdAt": "2020-10-05T19:57:02Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java", "diffHunk": "@@ -196,4 +203,17 @@ public void setConfirmRemoveToken(boolean confirmRemove) {\n         this.confirmRemoveToken = confirmRemove;\n         getConfig().setProperty(CONFIRM_REMOVE_TOKEN_KEY, confirmRemoveToken);\n     }\n+\n+    /** Returns true if should detect CSRF variables by searching for partial matches. */\n+    @ZapApiIgnore\n+    public boolean getIsPartialMatchingEnabled() {\n+        return isPartialMatchingEnabled;\n+    }\n+\n+    /** Define if ZAP should detect CSRF variables by searching for partial matches. */\n+    @ZapApiIgnore\n+    public void setIsPartialMatchingEnabled(boolean enabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a131708d1a00eea153633bc291ff14533b71e37c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTU5MTA1OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTo1NzozMlrOHcrp1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTo1NzozMlrOHcrp1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzNzM5Ng==", "bodyText": "Does it need to be public? The following could be called directly in the method.", "url": "https://github.com/zaproxy/zaproxy/pull/6088#discussion_r499837396", "createdAt": "2020-10-05T19:57:32Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java", "diffHunk": "@@ -196,6 +197,11 @@ protected AntiCsrfParam getParam() {\n         return this.getParam().getTokensNames();\n     }\n \n+    /** Returns true if should detect CSRF variables by searching for partial matches. */\n+    public Boolean getIsPartialMatchingEnabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a131708d1a00eea153633bc291ff14533b71e37c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTU5MjA5OnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTo1Nzo1NlrOHcrqeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTo1Nzo1NlrOHcrqeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzNzU2Mg==", "bodyText": "The null check could be moved to isKnownAntiCsrfToken as well.", "url": "https://github.com/zaproxy/zaproxy/pull/6088#discussion_r499837562", "createdAt": "2020-10-05T19:57:56Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java", "diffHunk": "@@ -362,24 +368,14 @@ public String getTokenValue(HttpMessage tokenMsg, String tokenName) {\n \n                         String attId = inputElement.getAttributeValue(\"ID\");\n                         boolean found = false;\n-                        if (attId != null) {\n-                            for (String tokenName : this.getAntiCsrfTokenNames()) {\n-                                if (tokenName.equalsIgnoreCase(attId)) {\n-                                    list.add(new AntiCsrfToken(msg, attId, value, formIndex));\n-                                    found = true;\n-                                    break;\n-                                }\n-                            }\n+                        if (attId != null && isKnownAntiCsrfToken(attId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a131708d1a00eea153633bc291ff14533b71e37c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NjI4MjIzOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMzo0MDo1N1rOHfKL0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMzo0MDo1N1rOHfKL0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQzNDc2OA==", "bodyText": "Just noticed that it's missing the d in Enabled.", "url": "https://github.com/zaproxy/zaproxy/pull/6088#discussion_r502434768", "createdAt": "2020-10-09T13:40:57Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java", "diffHunk": "@@ -43,6 +43,9 @@\n     private static final String CONFIRM_REMOVE_TOKEN_KEY =\n             ANTI_CSRF_BASE_KEY + \".confirmRemoveToken\";\n \n+    private static final String PARTIAL_MATCHING_ENABLED =\n+            ANTI_CSRF_BASE_KEY + \".partialMatchingEnable\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fd4a133d9b73b40fd3669e5f306da1dc6dc4b2d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NjI5NjU1OnYy", "diffSide": "RIGHT", "path": "zap/src/main/resources/org/zaproxy/zap/resources/Messages.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMzo0NDozNFrOHfKUxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMzo0NDozNFrOHfKUxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQzNzA2MA==", "bodyText": "variables \u2192 tokens (Same comment for other descriptions.)", "url": "https://github.com/zaproxy/zaproxy/pull/6088#discussion_r502437060", "createdAt": "2020-10-09T13:44:34Z", "author": {"login": "thc202"}, "path": "zap/src/main/resources/org/zaproxy/zap/resources/Messages.properties", "diffHunk": "@@ -11,6 +11,10 @@ acsrf.api.desc =\n acsrf.api.other.genForm = Generate a form for testing lack of anti-CSRF tokens - typically invoked via ZAP\n acsrf.api.other.genForm.param.hrefId = \n acsrf.api.view.optionTokensNames = Lists the names of all anti-CSRF tokens\n+acsrf.api.view.optionPartialMatchingEnabled = Define if ZAP should detect CSRF variables by searching for partial matches", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fd4a133d9b73b40fd3669e5f306da1dc6dc4b2d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NjI5NjcxOnYy", "diffSide": "RIGHT", "path": "zap/src/main/resources/org/zaproxy/zap/resources/Messages.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMzo0NDozOFrOHfKU4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMzo0NDozOFrOHfKU4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQzNzA5MA==", "bodyText": "This one should not be needed.", "url": "https://github.com/zaproxy/zaproxy/pull/6088#discussion_r502437090", "createdAt": "2020-10-09T13:44:38Z", "author": {"login": "thc202"}, "path": "zap/src/main/resources/org/zaproxy/zap/resources/Messages.properties", "diffHunk": "@@ -11,6 +11,10 @@ acsrf.api.desc =\n acsrf.api.other.genForm = Generate a form for testing lack of anti-CSRF tokens - typically invoked via ZAP\n acsrf.api.other.genForm.param.hrefId = \n acsrf.api.view.optionTokensNames = Lists the names of all anti-CSRF tokens\n+acsrf.api.view.optionPartialMatchingEnabled = Define if ZAP should detect CSRF variables by searching for partial matches\n+acsrf.api.action.isPartialMatchingEnabled = Returns true if should detect CSRF variables by searching for partial matches.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fd4a133d9b73b40fd3669e5f306da1dc6dc4b2d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NjI5OTEwOnYy", "diffSide": "RIGHT", "path": "zap/src/test/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRFUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMzo0NTowOVrOHfKWQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMzo0NTowOVrOHfKWQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQzNzQ0MA==", "bodyText": "Could you move this to after the comment? (Same comment for the following test.)", "url": "https://github.com/zaproxy/zaproxy/pull/6088#discussion_r502437440", "createdAt": "2020-10-09T13:45:09Z", "author": {"login": "thc202"}, "path": "zap/src/test/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRFUnitTest.java", "diffHunk": "@@ -240,6 +240,49 @@ void shouldGetTokensFromInputFieldsIfIdAndNameIsAKnownTokenWithDifferentCase() {\n             assertAntiCsrfToken(\n                     tokens.get(1), message, KNOWN_TOKEN_2.toLowerCase(Locale.ROOT), \"value2\", 0);\n         }\n+\n+        @Test\n+        void\n+                shouldGetTokensFromInputFieldsIfIdAndNameIncludesAKnownTokenAndPartialMatchingEnabled() {\n+            given(antiCsrfParam.isPartialMatchingEnabled()).willReturn(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fd4a133d9b73b40fd3669e5f306da1dc6dc4b2d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NjI5OTkwOnYy", "diffSide": "RIGHT", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMzo0NToyMlrOHfKWyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMzo0NToyMlrOHfKWyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQzNzU3Nw==", "bodyText": "variables \u2192 tokens (Same comment for the following JavaDoc.)", "url": "https://github.com/zaproxy/zaproxy/pull/6088#discussion_r502437577", "createdAt": "2020-10-09T13:45:22Z", "author": {"login": "thc202"}, "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java", "diffHunk": "@@ -196,4 +203,19 @@ public void setConfirmRemoveToken(boolean confirmRemove) {\n         this.confirmRemoveToken = confirmRemove;\n         getConfig().setProperty(CONFIRM_REMOVE_TOKEN_KEY, confirmRemoveToken);\n     }\n+\n+    /** Returns true if should detect CSRF variables by searching for partial matches. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fd4a133d9b73b40fd3669e5f306da1dc6dc4b2d"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 627, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}