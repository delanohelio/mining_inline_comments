{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNDcwMDcz", "number": 967, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjowMjo0OVrODYZWtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjo1ODo1MFrODYZ6rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTA3ODMwOnYy", "diffSide": "RIGHT", "path": "azure-mgmt-resources/src/main/java/com/azure/management/ManagementUserAgentPolicy.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjowMjo0OVrOFeOytw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNzoyNjoyNFrOFeQFKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0Mzk1OQ==", "bodyText": "Maybe another way to reuse this part? \"new\" everytime seems not a good practise.", "url": "https://github.com/Azure/azure-libraries-for-java/pull/967#discussion_r367243959", "createdAt": "2020-01-16T06:02:49Z", "author": {"login": "weidongxu-microsoft"}, "path": "azure-mgmt-resources/src/main/java/com/azure/management/ManagementUserAgentPolicy.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.azure.management;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import reactor.core.publisher.Mono;\n+\n+public class ManagementUserAgentPolicy implements HttpPipelinePolicy {\n+    private final String USER_AGENT_KEY = \"User-Agent\";\n+    private final String SDK_NAME_KEY = \"Sdk-Name\";\n+    private final String SDK_VERSION_KEY = \"Sdk-Version\";\n+    private final String APPLICATION_ID_KEY = \"Application-Id\";\n+\n+    private final String defaultSdkName = this.getClass().getPackage().getName();\n+    private final String defaultSdkVersion = this.getClass().getPackage().getSpecificationVersion();\n+\n+    private final HttpLogOptions httpLogOptions;\n+    private final Configuration configuration;\n+\n+    public ManagementUserAgentPolicy() {\n+        this.httpLogOptions = new HttpLogOptions();\n+        this.configuration = Configuration.getGlobalConfiguration();\n+    }\n+\n+    public ManagementUserAgentPolicy(HttpLogOptions httpLogOptions, Configuration configuration) {\n+        if (httpLogOptions == null) {\n+            this.httpLogOptions = new HttpLogOptions();\n+        } else {\n+            this.httpLogOptions = httpLogOptions;\n+        }\n+\n+        if (configuration == null) {\n+            this.configuration = Configuration.getGlobalConfiguration();\n+        } else {\n+            this.configuration = configuration;\n+        }\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next){\n+        String userAgent = context.getData(USER_AGENT_KEY).orElse(\"\").toString();\n+        if (!userAgent.isEmpty()) {\n+            context.getHttpRequest().setHeader(USER_AGENT_KEY, userAgent);\n+            return next.process();\n+        }\n+\n+        String sdkName = context.getData(SDK_NAME_KEY).orElse(\"\").toString();\n+        if (sdkName.isEmpty()) {\n+            sdkName = defaultSdkName;\n+        }\n+\n+        String sdkVersion = context.getData(SDK_VERSION_KEY).orElse(\"\").toString();\n+        if (sdkVersion.isEmpty()) {\n+            sdkVersion = defaultSdkVersion;\n+        }\n+\n+        String applicationId = context.getData(APPLICATION_ID_KEY).orElse(\"\").toString();\n+        if (applicationId.isEmpty()) {\n+            applicationId = httpLogOptions.getApplicationId();\n+        }\n+\n+        return new UserAgentPolicy(applicationId, sdkName, sdkVersion, configuration).process(context, next);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04678d1dcc3e489ded6274e557ec9d80d55a73d4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI1NjU4Mw==", "bodyText": "@tanyi, @xccc-msft, you might look at the first two chapters of this book: https://learning.oreilly.com/library/view/effective-java-3rd/9780134686097/ch2.xhtml#lev2", "url": "https://github.com/Azure/azure-libraries-for-java/pull/967#discussion_r367256583", "createdAt": "2020-01-16T06:54:28Z", "author": {"login": "yaohaizh"}, "path": "azure-mgmt-resources/src/main/java/com/azure/management/ManagementUserAgentPolicy.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.azure.management;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import reactor.core.publisher.Mono;\n+\n+public class ManagementUserAgentPolicy implements HttpPipelinePolicy {\n+    private final String USER_AGENT_KEY = \"User-Agent\";\n+    private final String SDK_NAME_KEY = \"Sdk-Name\";\n+    private final String SDK_VERSION_KEY = \"Sdk-Version\";\n+    private final String APPLICATION_ID_KEY = \"Application-Id\";\n+\n+    private final String defaultSdkName = this.getClass().getPackage().getName();\n+    private final String defaultSdkVersion = this.getClass().getPackage().getSpecificationVersion();\n+\n+    private final HttpLogOptions httpLogOptions;\n+    private final Configuration configuration;\n+\n+    public ManagementUserAgentPolicy() {\n+        this.httpLogOptions = new HttpLogOptions();\n+        this.configuration = Configuration.getGlobalConfiguration();\n+    }\n+\n+    public ManagementUserAgentPolicy(HttpLogOptions httpLogOptions, Configuration configuration) {\n+        if (httpLogOptions == null) {\n+            this.httpLogOptions = new HttpLogOptions();\n+        } else {\n+            this.httpLogOptions = httpLogOptions;\n+        }\n+\n+        if (configuration == null) {\n+            this.configuration = Configuration.getGlobalConfiguration();\n+        } else {\n+            this.configuration = configuration;\n+        }\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next){\n+        String userAgent = context.getData(USER_AGENT_KEY).orElse(\"\").toString();\n+        if (!userAgent.isEmpty()) {\n+            context.getHttpRequest().setHeader(USER_AGENT_KEY, userAgent);\n+            return next.process();\n+        }\n+\n+        String sdkName = context.getData(SDK_NAME_KEY).orElse(\"\").toString();\n+        if (sdkName.isEmpty()) {\n+            sdkName = defaultSdkName;\n+        }\n+\n+        String sdkVersion = context.getData(SDK_VERSION_KEY).orElse(\"\").toString();\n+        if (sdkVersion.isEmpty()) {\n+            sdkVersion = defaultSdkVersion;\n+        }\n+\n+        String applicationId = context.getData(APPLICATION_ID_KEY).orElse(\"\").toString();\n+        if (applicationId.isEmpty()) {\n+            applicationId = httpLogOptions.getApplicationId();\n+        }\n+\n+        return new UserAgentPolicy(applicationId, sdkName, sdkVersion, configuration).process(context, next);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0Mzk1OQ=="}, "originalCommit": {"oid": "04678d1dcc3e489ded6274e557ec9d80d55a73d4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI2NTA2Ng==", "bodyText": "The functions in this policy are private, maybe I copy it if we don't use new.", "url": "https://github.com/Azure/azure-libraries-for-java/pull/967#discussion_r367265066", "createdAt": "2020-01-16T07:26:24Z", "author": {"login": "ChenTanyi"}, "path": "azure-mgmt-resources/src/main/java/com/azure/management/ManagementUserAgentPolicy.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.azure.management;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import reactor.core.publisher.Mono;\n+\n+public class ManagementUserAgentPolicy implements HttpPipelinePolicy {\n+    private final String USER_AGENT_KEY = \"User-Agent\";\n+    private final String SDK_NAME_KEY = \"Sdk-Name\";\n+    private final String SDK_VERSION_KEY = \"Sdk-Version\";\n+    private final String APPLICATION_ID_KEY = \"Application-Id\";\n+\n+    private final String defaultSdkName = this.getClass().getPackage().getName();\n+    private final String defaultSdkVersion = this.getClass().getPackage().getSpecificationVersion();\n+\n+    private final HttpLogOptions httpLogOptions;\n+    private final Configuration configuration;\n+\n+    public ManagementUserAgentPolicy() {\n+        this.httpLogOptions = new HttpLogOptions();\n+        this.configuration = Configuration.getGlobalConfiguration();\n+    }\n+\n+    public ManagementUserAgentPolicy(HttpLogOptions httpLogOptions, Configuration configuration) {\n+        if (httpLogOptions == null) {\n+            this.httpLogOptions = new HttpLogOptions();\n+        } else {\n+            this.httpLogOptions = httpLogOptions;\n+        }\n+\n+        if (configuration == null) {\n+            this.configuration = Configuration.getGlobalConfiguration();\n+        } else {\n+            this.configuration = configuration;\n+        }\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next){\n+        String userAgent = context.getData(USER_AGENT_KEY).orElse(\"\").toString();\n+        if (!userAgent.isEmpty()) {\n+            context.getHttpRequest().setHeader(USER_AGENT_KEY, userAgent);\n+            return next.process();\n+        }\n+\n+        String sdkName = context.getData(SDK_NAME_KEY).orElse(\"\").toString();\n+        if (sdkName.isEmpty()) {\n+            sdkName = defaultSdkName;\n+        }\n+\n+        String sdkVersion = context.getData(SDK_VERSION_KEY).orElse(\"\").toString();\n+        if (sdkVersion.isEmpty()) {\n+            sdkVersion = defaultSdkVersion;\n+        }\n+\n+        String applicationId = context.getData(APPLICATION_ID_KEY).orElse(\"\").toString();\n+        if (applicationId.isEmpty()) {\n+            applicationId = httpLogOptions.getApplicationId();\n+        }\n+\n+        return new UserAgentPolicy(applicationId, sdkName, sdkVersion, configuration).process(context, next);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0Mzk1OQ=="}, "originalCommit": {"oid": "04678d1dcc3e489ded6274e557ec9d80d55a73d4"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTE2MDg0OnYy", "diffSide": "RIGHT", "path": "azure-mgmt-resources/src/main/java/com/azure/management/ManagementUserAgentPolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjo1MzowNlrOFePivA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjo1MzowNlrOFePivA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI1NjI1Mg==", "bodyText": "The prefix of Management doesn't necessary since this is already under management package.", "url": "https://github.com/Azure/azure-libraries-for-java/pull/967#discussion_r367256252", "createdAt": "2020-01-16T06:53:06Z", "author": {"login": "yaohaizh"}, "path": "azure-mgmt-resources/src/main/java/com/azure/management/ManagementUserAgentPolicy.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.azure.management;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import reactor.core.publisher.Mono;\n+\n+public class ManagementUserAgentPolicy implements HttpPipelinePolicy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04678d1dcc3e489ded6274e557ec9d80d55a73d4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTE2NDgyOnYy", "diffSide": "RIGHT", "path": "azure-mgmt-resources/src/main/java/com/azure/management/ManagementUserAgentPolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjo1NToyOVrOFePlEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjo1NToyOVrOFePlEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI1Njg1MQ==", "bodyText": "Header comment license", "url": "https://github.com/Azure/azure-libraries-for-java/pull/967#discussion_r367256851", "createdAt": "2020-01-16T06:55:29Z", "author": {"login": "yaohaizh"}, "path": "azure-mgmt-resources/src/main/java/com/azure/management/ManagementUserAgentPolicy.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.azure.management;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04678d1dcc3e489ded6274e557ec9d80d55a73d4"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTE3MDM2OnYy", "diffSide": "RIGHT", "path": "azure-mgmt-resources/src/main/java/com/azure/management/ManagementUserAgentPolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjo1ODo1MFrOFePoZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjo1ODo1MFrOFePoZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI1NzcwMw==", "bodyText": "this(options, configuration) , but not duplicate code", "url": "https://github.com/Azure/azure-libraries-for-java/pull/967#discussion_r367257703", "createdAt": "2020-01-16T06:58:50Z", "author": {"login": "yaohaizh"}, "path": "azure-mgmt-resources/src/main/java/com/azure/management/ManagementUserAgentPolicy.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.azure.management;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import reactor.core.publisher.Mono;\n+\n+public class ManagementUserAgentPolicy implements HttpPipelinePolicy {\n+    private final String USER_AGENT_KEY = \"User-Agent\";\n+    private final String SDK_NAME_KEY = \"Sdk-Name\";\n+    private final String SDK_VERSION_KEY = \"Sdk-Version\";\n+    private final String APPLICATION_ID_KEY = \"Application-Id\";\n+\n+    private final String defaultSdkName = this.getClass().getPackage().getName();\n+    private final String defaultSdkVersion = this.getClass().getPackage().getSpecificationVersion();\n+\n+    private final HttpLogOptions httpLogOptions;\n+    private final Configuration configuration;\n+\n+    public ManagementUserAgentPolicy() {\n+        this.httpLogOptions = new HttpLogOptions();\n+        this.configuration = Configuration.getGlobalConfiguration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04678d1dcc3e489ded6274e557ec9d80d55a73d4"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2569, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}