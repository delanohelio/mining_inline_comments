{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2OTc5OTg2", "number": 1035, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNjowMTo1MFrODg8uWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNjowMTo1MFrODg8uWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODc1OTI5OnYy", "diffSide": "RIGHT", "path": "azure-mgmt-resources/src/test/java/com/azure/management/resources/core/TestResourceNamer.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNjowMTo1MFrOFrb_tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNjoyMjoyM1rOFrcS4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA5MTc2Ng==", "bodyText": "Probably better to just let it fail? Seems should not happen in normal case.", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1035#discussion_r381091766", "createdAt": "2020-02-19T06:01:50Z", "author": {"login": "weidongxu-microsoft"}, "path": "azure-mgmt-resources/src/test/java/com/azure/management/resources/core/TestResourceNamer.java", "diffHunk": "@@ -28,7 +29,11 @@ public TestResourceNamer(String name, InterceptorManager interceptorManager) {\n     @Override\n     public String randomName(String prefix, int maxLen) {\n         if (interceptorManager.isPlaybackMode()) {\n-            return interceptorManager.popVariable();\n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb5b72eef08c9ccee1d6413d746e0928ce666b9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA5MjU4Nw==", "bodyText": "It happened usually, since we only record the variable in main thread. Multi-thread behaves strange.", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1035#discussion_r381092587", "createdAt": "2020-02-19T06:05:26Z", "author": {"login": "ChenTanyi"}, "path": "azure-mgmt-resources/src/test/java/com/azure/management/resources/core/TestResourceNamer.java", "diffHunk": "@@ -28,7 +29,11 @@ public TestResourceNamer(String name, InterceptorManager interceptorManager) {\n     @Override\n     public String randomName(String prefix, int maxLen) {\n         if (interceptorManager.isPlaybackMode()) {\n-            return interceptorManager.popVariable();\n+            try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA5MTc2Ng=="}, "originalCommit": {"oid": "6eb5b72eef08c9ccee1d6413d746e0928ce666b9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA5MzU1MQ==", "bodyText": "If the name doesn't match, it would cause other exception in playback.", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1035#discussion_r381093551", "createdAt": "2020-02-19T06:09:31Z", "author": {"login": "ChenTanyi"}, "path": "azure-mgmt-resources/src/test/java/com/azure/management/resources/core/TestResourceNamer.java", "diffHunk": "@@ -28,7 +29,11 @@ public TestResourceNamer(String name, InterceptorManager interceptorManager) {\n     @Override\n     public String randomName(String prefix, int maxLen) {\n         if (interceptorManager.isPlaybackMode()) {\n-            return interceptorManager.popVariable();\n+            try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA5MTc2Ng=="}, "originalCommit": {"oid": "6eb5b72eef08c9ccee1d6413d746e0928ce666b9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA5NDU2Ng==", "bodyText": "I mean Exception is expected if something went wrong with recording. Better to just fail fast, instead of making up something, and fail far-away when people have no idea what is the cause.", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1035#discussion_r381094566", "createdAt": "2020-02-19T06:13:55Z", "author": {"login": "weidongxu-microsoft"}, "path": "azure-mgmt-resources/src/test/java/com/azure/management/resources/core/TestResourceNamer.java", "diffHunk": "@@ -28,7 +29,11 @@ public TestResourceNamer(String name, InterceptorManager interceptorManager) {\n     @Override\n     public String randomName(String prefix, int maxLen) {\n         if (interceptorManager.isPlaybackMode()) {\n-            return interceptorManager.popVariable();\n+            try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA5MTc2Ng=="}, "originalCommit": {"oid": "6eb5b72eef08c9ccee1d6413d746e0928ce666b9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA5NjY3NQ==", "bodyText": "Some of the reason about it:\n\nThe random uuid in the async function does not affect the playback when it differ.\nThe async function would run into random thread, which could not make every record success. This makes it hard to distinguish record successful or not.\n\nSo I just skip this error in list, if the variable affect the playback process, it would throw not match exception during request.", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1035#discussion_r381096675", "createdAt": "2020-02-19T06:22:23Z", "author": {"login": "ChenTanyi"}, "path": "azure-mgmt-resources/src/test/java/com/azure/management/resources/core/TestResourceNamer.java", "diffHunk": "@@ -28,7 +29,11 @@ public TestResourceNamer(String name, InterceptorManager interceptorManager) {\n     @Override\n     public String randomName(String prefix, int maxLen) {\n         if (interceptorManager.isPlaybackMode()) {\n-            return interceptorManager.popVariable();\n+            try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA5MTc2Ng=="}, "originalCommit": {"oid": "6eb5b72eef08c9ccee1d6413d746e0928ce666b9"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2612, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}