{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNDA5NDU2", "number": 1143, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjo1Mzo1OVrODrFWcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjo1Mzo1OVrODrFWcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTAzMDI0OnYy", "diffSide": "RIGHT", "path": "azure-mgmt-containerservice/src/main/java/com/microsoft/azure/management/containerservice/implementation/KubernetesClustersImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjo1Mzo1OVrOF7OBWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjo1Nzo0NVrOF7OF0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MDAyNg==", "bodyText": "Usually use isEmpty()", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1143#discussion_r397640026", "createdAt": "2020-03-25T06:53:59Z", "author": {"login": "weidongxu-microsoft"}, "path": "azure-mgmt-containerservice/src/main/java/com/microsoft/azure/management/containerservice/implementation/KubernetesClustersImpl.java", "diffHunk": "@@ -157,51 +156,45 @@ public void call(TreeSet<String> kubernetesVersions, OrchestratorVersionProfileL\n \n     @Override\n     public byte[] getAdminKubeConfigContent(String resourceGroupName, String kubernetesClusterName) {\n-        ManagedClusterAccessProfileInner profileInner = this.manager().inner().managedClusters().getAccessProfile(resourceGroupName, kubernetesClusterName, KubernetesClusterAccessProfileRole.ADMIN.toString());\n-        if (profileInner == null) {\n-            return new byte[0];\n-        } else {\n-            return profileInner.kubeConfig();\n-        }\n+        return this.getAdminKubeConfigContentAsync(resourceGroupName, kubernetesClusterName).toBlocking().last();\n     }\n \n     @Override\n     public Observable<byte[]> getAdminKubeConfigContentAsync(String resourceGroupName, String kubernetesClusterName) {\n         return this.manager().inner().managedClusters()\n-            .getAccessProfileAsync(resourceGroupName, kubernetesClusterName, KubernetesClusterAccessProfileRole.ADMIN.toString())\n-            .map(new Func1<ManagedClusterAccessProfileInner, byte[]>() {\n+            .listClusterAdminCredentialsAsync(resourceGroupName, kubernetesClusterName)\n+            .map(new Func1<CredentialResultsInner, byte[]>() {\n                 @Override\n-                public byte[] call(ManagedClusterAccessProfileInner profileInner) {\n-                    if (profileInner == null) {\n+                public byte[] call(CredentialResultsInner credentialInner) {\n+                    if (credentialInner == null\n+                            || credentialInner.kubeconfigs() == null\n+                            || credentialInner.kubeconfigs().size() == 0) {\n                         return new byte[0];\n                     } else {\n-                        return profileInner.kubeConfig();\n+                        return credentialInner.kubeconfigs().get(0).value();\n                     }\n                 }\n             });\n     }\n \n     @Override\n     public byte[] getUserKubeConfigContent(String resourceGroupName, String kubernetesClusterName) {\n-        ManagedClusterAccessProfileInner profileInner = this.manager().inner().managedClusters().getAccessProfile(resourceGroupName, kubernetesClusterName, KubernetesClusterAccessProfileRole.USER.toString());\n-        if (profileInner == null) {\n-            return new byte[0];\n-        } else {\n-            return profileInner.kubeConfig();\n-        }\n+        return this.getUserKubeConfigContentAsync(resourceGroupName, kubernetesClusterName).toBlocking().last();\n     }\n \n     @Override\n     public Observable<byte[]> getUserKubeConfigContentAsync(String resourceGroupName, String kubernetesClusterName) {\n         return this.manager().inner().managedClusters()\n-            .getAccessProfileAsync(resourceGroupName, kubernetesClusterName, KubernetesClusterAccessProfileRole.USER.toString())\n-            .map(new Func1<ManagedClusterAccessProfileInner, byte[]>() {\n+            .listClusterUserCredentialsAsync(resourceGroupName, kubernetesClusterName)\n+            .map(new Func1<CredentialResultsInner, byte[]>() {\n                 @Override\n-                public byte[] call(ManagedClusterAccessProfileInner profileInner) {\n-                    if (profileInner == null) {\n+                public byte[] call(CredentialResultsInner credentialInner) {\n+                    if (credentialInner == null\n+                        || credentialInner.kubeconfigs() == null\n+                        || credentialInner.kubeconfigs().size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "378b6c870d8bc6120a06d3c031b572b98ef58980"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MTE3MQ==", "bodyText": "done", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1143#discussion_r397641171", "createdAt": "2020-03-25T06:57:45Z", "author": {"login": "ChenTanyi"}, "path": "azure-mgmt-containerservice/src/main/java/com/microsoft/azure/management/containerservice/implementation/KubernetesClustersImpl.java", "diffHunk": "@@ -157,51 +156,45 @@ public void call(TreeSet<String> kubernetesVersions, OrchestratorVersionProfileL\n \n     @Override\n     public byte[] getAdminKubeConfigContent(String resourceGroupName, String kubernetesClusterName) {\n-        ManagedClusterAccessProfileInner profileInner = this.manager().inner().managedClusters().getAccessProfile(resourceGroupName, kubernetesClusterName, KubernetesClusterAccessProfileRole.ADMIN.toString());\n-        if (profileInner == null) {\n-            return new byte[0];\n-        } else {\n-            return profileInner.kubeConfig();\n-        }\n+        return this.getAdminKubeConfigContentAsync(resourceGroupName, kubernetesClusterName).toBlocking().last();\n     }\n \n     @Override\n     public Observable<byte[]> getAdminKubeConfigContentAsync(String resourceGroupName, String kubernetesClusterName) {\n         return this.manager().inner().managedClusters()\n-            .getAccessProfileAsync(resourceGroupName, kubernetesClusterName, KubernetesClusterAccessProfileRole.ADMIN.toString())\n-            .map(new Func1<ManagedClusterAccessProfileInner, byte[]>() {\n+            .listClusterAdminCredentialsAsync(resourceGroupName, kubernetesClusterName)\n+            .map(new Func1<CredentialResultsInner, byte[]>() {\n                 @Override\n-                public byte[] call(ManagedClusterAccessProfileInner profileInner) {\n-                    if (profileInner == null) {\n+                public byte[] call(CredentialResultsInner credentialInner) {\n+                    if (credentialInner == null\n+                            || credentialInner.kubeconfigs() == null\n+                            || credentialInner.kubeconfigs().size() == 0) {\n                         return new byte[0];\n                     } else {\n-                        return profileInner.kubeConfig();\n+                        return credentialInner.kubeconfigs().get(0).value();\n                     }\n                 }\n             });\n     }\n \n     @Override\n     public byte[] getUserKubeConfigContent(String resourceGroupName, String kubernetesClusterName) {\n-        ManagedClusterAccessProfileInner profileInner = this.manager().inner().managedClusters().getAccessProfile(resourceGroupName, kubernetesClusterName, KubernetesClusterAccessProfileRole.USER.toString());\n-        if (profileInner == null) {\n-            return new byte[0];\n-        } else {\n-            return profileInner.kubeConfig();\n-        }\n+        return this.getUserKubeConfigContentAsync(resourceGroupName, kubernetesClusterName).toBlocking().last();\n     }\n \n     @Override\n     public Observable<byte[]> getUserKubeConfigContentAsync(String resourceGroupName, String kubernetesClusterName) {\n         return this.manager().inner().managedClusters()\n-            .getAccessProfileAsync(resourceGroupName, kubernetesClusterName, KubernetesClusterAccessProfileRole.USER.toString())\n-            .map(new Func1<ManagedClusterAccessProfileInner, byte[]>() {\n+            .listClusterUserCredentialsAsync(resourceGroupName, kubernetesClusterName)\n+            .map(new Func1<CredentialResultsInner, byte[]>() {\n                 @Override\n-                public byte[] call(ManagedClusterAccessProfileInner profileInner) {\n-                    if (profileInner == null) {\n+                public byte[] call(CredentialResultsInner credentialInner) {\n+                    if (credentialInner == null\n+                        || credentialInner.kubeconfigs() == null\n+                        || credentialInner.kubeconfigs().size() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MDAyNg=="}, "originalCommit": {"oid": "378b6c870d8bc6120a06d3c031b572b98ef58980"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2531, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}