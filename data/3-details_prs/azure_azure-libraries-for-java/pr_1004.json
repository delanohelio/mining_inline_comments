{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMjMwNTM0", "number": 1004, "title": "feat: migrate resource group tagging interceptor to V2", "bodyText": "", "createdAt": "2020-02-05T07:51:45Z", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1004", "merged": true, "mergeCommit": {"oid": "f809923ffc9fdc1095a8c4a784bbe6d6631ec288"}, "closed": true, "closedAt": "2020-02-05T08:35:34Z", "author": {"login": "ChenTanyi"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBQP_MgH2gAyMzcxMjMwNTM0OmI3MmYzYTU3YjAzZDJmZTExNTExMjdlMGQwZjZkYjY4ZDc5YzM4Yzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBR9AvAH2gAyMzcxMjMwNTM0OjUzZmE3ZjNiMzdjNDg2ZTUyYzk1NjE1MzI3M2U3YzlmYmExYzRmZGM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b72f3a57b03d2fe1151127e0d0f6db68d79c38c9", "author": {"user": {"login": "ChenTanyi", "name": "Tanyi Chen"}}, "url": "https://github.com/Azure/azure-libraries-for-java/commit/b72f3a57b03d2fe1151127e0d0f6db68d79c38c9", "committedDate": "2020-02-05T06:35:57Z", "message": "feat: migrate resource group tagging interceptor to V2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNTI0OTIy", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1004#pullrequestreview-353524922", "createdAt": "2020-02-05T08:07:16Z", "commit": {"oid": "b72f3a57b03d2fe1151127e0d0f6db68d79c38c9"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwODowNzoxNlrOFluuig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwODoxMDowMlrOFluyQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwNzIxMA==", "bodyText": "Do not use exception as flow control.", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1004#discussion_r375107210", "createdAt": "2020-02-05T08:07:16Z", "author": {"login": "weidongxu-microsoft"}, "path": "azure-mgmt-resources/src/test/java/com/azure/management/resources/core/ResourceGroupTaggingPolicy.java", "diffHunk": "@@ -0,0 +1,88 @@\n+\n+\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License. See License.txt in the project root for\n+ * license information.\n+ */\n+\n+package com.azure.management.resources.core;\n+\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.management.serializer.AzureJacksonAdapter;\n+import com.azure.core.util.serializer.SerializerEncoding;\n+import com.azure.management.resources.models.ResourceGroupInner;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Http Pipeline Policy for tagging resource groups created in tests.\n+ */\n+public class ResourceGroupTaggingPolicy implements HttpPipelinePolicy {\n+//    private static final String LOGGING_CONTEXT = \"com.microsoft.azure.management.resources.ResourceGroups createOrUpdate\";\n+    private static final String CALLER_METHOD = \"com.azure.management.resources.models.ResourceGroupsInner$ResourceGroupsService.createOrUpdate\";\n+    private AzureJacksonAdapter adapter = new AzureJacksonAdapter();\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        if (\"PUT\".equals(context.getHttpRequest().getHttpMethod().name()) &&\n+                context.getHttpRequest().getUrl().toString().contains(\"/resourcegroups/\") &&\n+                CALLER_METHOD.equals(context.getData(\"caller-method\").orElse(\"\").toString())) {\n+            return context.getHttpRequest().copy().getBody().flatMap(\n+                byteBuffer -> {\n+                    byte[] body = new byte[byteBuffer.remaining()];\n+                    byteBuffer.get(body);\n+                    String bodyStr = new String(body, StandardCharsets.UTF_8);\n+\n+                    ResourceGroupInner resourceGroupInner;\n+                    try {\n+                        resourceGroupInner = adapter.deserialize(bodyStr, ResourceGroupInner.class, SerializerEncoding.JSON);\n+                        if (resourceGroupInner == null) {\n+                            throw new IOException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b72f3a57b03d2fe1151127e0d0f6db68d79c38c9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwNzMzNA==", "bodyText": "Clean up a bit.", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1004#discussion_r375107334", "createdAt": "2020-02-05T08:07:37Z", "author": {"login": "weidongxu-microsoft"}, "path": "azure-mgmt-resources/src/test/java/com/azure/management/resources/core/ResourceGroupTaggingPolicy.java", "diffHunk": "@@ -0,0 +1,88 @@\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b72f3a57b03d2fe1151127e0d0f6db68d79c38c9"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwODE2Mw==", "bodyText": "Will it overwrite users with same name?", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1004#discussion_r375108163", "createdAt": "2020-02-05T08:10:02Z", "author": {"login": "weidongxu-microsoft"}, "path": "azure-mgmt-resources/src/test/java/com/azure/management/resources/core/ResourceGroupTaggingPolicy.java", "diffHunk": "@@ -0,0 +1,88 @@\n+\n+\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License. See License.txt in the project root for\n+ * license information.\n+ */\n+\n+package com.azure.management.resources.core;\n+\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.management.serializer.AzureJacksonAdapter;\n+import com.azure.core.util.serializer.SerializerEncoding;\n+import com.azure.management.resources.models.ResourceGroupInner;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Http Pipeline Policy for tagging resource groups created in tests.\n+ */\n+public class ResourceGroupTaggingPolicy implements HttpPipelinePolicy {\n+//    private static final String LOGGING_CONTEXT = \"com.microsoft.azure.management.resources.ResourceGroups createOrUpdate\";\n+    private static final String CALLER_METHOD = \"com.azure.management.resources.models.ResourceGroupsInner$ResourceGroupsService.createOrUpdate\";\n+    private AzureJacksonAdapter adapter = new AzureJacksonAdapter();\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        if (\"PUT\".equals(context.getHttpRequest().getHttpMethod().name()) &&\n+                context.getHttpRequest().getUrl().toString().contains(\"/resourcegroups/\") &&\n+                CALLER_METHOD.equals(context.getData(\"caller-method\").orElse(\"\").toString())) {\n+            return context.getHttpRequest().copy().getBody().flatMap(\n+                byteBuffer -> {\n+                    byte[] body = new byte[byteBuffer.remaining()];\n+                    byteBuffer.get(body);\n+                    String bodyStr = new String(body, StandardCharsets.UTF_8);\n+\n+                    ResourceGroupInner resourceGroupInner;\n+                    try {\n+                        resourceGroupInner = adapter.deserialize(bodyStr, ResourceGroupInner.class, SerializerEncoding.JSON);\n+                        if (resourceGroupInner == null) {\n+                            throw new IOException();\n+                        }\n+                    } catch (IOException e) {\n+                        return Mono.error(new RuntimeException(\"Failed to deserialize \" + bodyStr));\n+                    }\n+\n+                    Map<String, String> tags = resourceGroupInner.getTags();\n+                    if (tags == null) {\n+                        tags = new HashMap<>();\n+                    }\n+                    tags.put(\"product\", \"javasdk\");\n+                    tags.put(\"cause\", \"automation\");\n+                    tags.put(\"date\", Instant.now().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b72f3a57b03d2fe1151127e0d0f6db68d79c38c9"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNTMxNTk4", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1004#pullrequestreview-353531598", "createdAt": "2020-02-05T08:21:48Z", "commit": {"oid": "b72f3a57b03d2fe1151127e0d0f6db68d79c38c9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9341caefc6c6eb610495cc765ba30ad4219cb53f", "author": {"user": {"login": "ChenTanyi", "name": "Tanyi Chen"}}, "url": "https://github.com/Azure/azure-libraries-for-java/commit/9341caefc6c6eb610495cc765ba30ad4219cb53f", "committedDate": "2020-02-05T08:30:59Z", "message": "fix: throw original IOException and throw runtime exception for null pointer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53fa7f3b37c486e52c956153273e7c9fba1c4fdc", "author": {"user": {"login": "ChenTanyi", "name": "Tanyi Chen"}}, "url": "https://github.com/Azure/azure-libraries-for-java/commit/53fa7f3b37c486e52c956153273e7c9fba1c4fdc", "committedDate": "2020-02-05T08:35:02Z", "message": "fix: remove extra line"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1476, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}