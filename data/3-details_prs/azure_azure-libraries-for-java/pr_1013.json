{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyODEzMjgx", "number": 1013, "title": "Migrate ProviderRegistrationPolicy and ResourceManagerThrottlingPolicy", "bodyText": "All had been tested.\nV1: https://github.com/Azure/azure-libraries-for-java/blob/bc5a8263bb43d6f03ef6cc74d99efe8f1c925b29/azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/utils/ProviderRegistrationInterceptor.java\nhttps://github.com/Azure/azure-libraries-for-java/blob/bc5a8263bb43d6f03ef6cc74d99efe8f1c925b29/azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/utils/ResourceManagerThrottlingInterceptor.java\nIssue: The ResourceManagerThrottling makes logging more and more, will test why", "createdAt": "2020-02-09T10:26:53Z", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1013", "merged": true, "mergeCommit": {"oid": "49845939782e93306941e320af9b9a35e6032914"}, "closed": true, "closedAt": "2020-02-13T03:18:16Z", "author": {"login": "ChenTanyi"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBk3UsgH2gAyMzcyODEzMjgxOmE5ZmEyZTU0MmM2YmQwOGFkYjA0YjkxOWQ5MWIwZTI5NTA3YmJjMzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDx33_AFqTM1NzkyNTgxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a9fa2e542c6bd08adb04b919d91b0e29507bbc33", "author": {"user": {"login": "ChenTanyi", "name": "Tanyi Chen"}}, "url": "https://github.com/Azure/azure-libraries-for-java/commit/a9fa2e542c6bd08adb04b919d91b0e29507bbc33", "committedDate": "2020-02-06T06:37:01Z", "message": "feat: add ProviderRegistrationPolicy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "642d9dd32f90a929ff74b3eb2d2afed559ca5f79", "author": {"user": {"login": "ChenTanyi", "name": "Tanyi Chen"}}, "url": "https://github.com/Azure/azure-libraries-for-java/commit/642d9dd32f90a929ff74b3eb2d2afed559ca5f79", "committedDate": "2020-02-09T10:24:23Z", "message": "feat: add ResourceManagerThrottlingPolicy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjEwNzk0", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1013#pullrequestreview-355610794", "createdAt": "2020-02-09T14:29:03Z", "commit": {"oid": "642d9dd32f90a929ff74b3eb2d2afed559ca5f79"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNDoyOTowM1rOFnVVNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNDoyOTowM1rOFnVVNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4ODI3OQ==", "bodyText": "For boolean feauntion, should naming with is", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1013#discussion_r376788279", "createdAt": "2020-02-09T14:29:03Z", "author": {"login": "yaohaizh"}, "path": "azure-mgmt-resources/src/main/java/com/azure/management/resources/fluentcore/utils/ProviderRegistrationPolicy.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License. See License.txt in the project root for\n+ * license information.\n+ */\n+\n+package com.azure.management.resources.fluentcore.utils;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.management.CloudError;\n+import com.azure.core.management.serializer.AzureJacksonAdapter;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.serializer.SerializerEncoding;\n+import com.azure.management.AzureTokenCredential;\n+import com.azure.management.RestClient;\n+import com.azure.management.RestClientBuilder;\n+import com.azure.management.resources.Provider;\n+import com.azure.management.resources.fluentcore.arm.ResourceUtils;\n+import com.azure.management.resources.implementation.ResourceManager;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A Http Pipeline Policy for automatic provider registration in Azure.\n+ */\n+public class ProviderRegistrationPolicy implements HttpPipelinePolicy {\n+    private final static String MISSING_SUBSCRIPTION_REGISTRATION = \"MissingSubscriptionRegistration\";\n+    private final AzureTokenCredential credential;\n+\n+    /**\n+     * Initialize a provider registration policy with a credential that's authorized\n+     * to register the provider.\n+     * @param credential the credential for provider registration\n+     */\n+    public ProviderRegistrationPolicy(AzureTokenCredential credential) {\n+        this.credential = credential;\n+    }\n+\n+    private boolean responseSuccessful(HttpResponse response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642d9dd32f90a929ff74b3eb2d2afed559ca5f79"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjEyMTgw", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1013#pullrequestreview-355612180", "createdAt": "2020-02-09T14:52:57Z", "commit": {"oid": "642d9dd32f90a929ff74b3eb2d2afed559ca5f79"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjUzOTEz", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1013#pullrequestreview-355653913", "createdAt": "2020-02-10T01:16:28Z", "commit": {"oid": "642d9dd32f90a929ff74b3eb2d2afed559ca5f79"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMToxNjoyOFrOFnYRFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMToxNjoyOFrOFnYRFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgzNjM3NQ==", "bodyText": "Please double check the code. I think v1 code is incorrect. Commonly no one calls wait on an ReentrantLock.", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1013#discussion_r376836375", "createdAt": "2020-02-10T01:16:28Z", "author": {"login": "weidongxu-microsoft"}, "path": "azure-mgmt-resources/src/main/java/com/azure/management/resources/fluentcore/utils/ResourceManagerThrottlingPolicy.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License. See License.txt in the project root for\n+ * license information.\n+ */\n+\n+package com.azure.management.resources.fluentcore.utils;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.DateTimeRfc1123;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.management.resources.fluentcore.arm.ResourceUtils;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A Http Pipeline Policy for automatic retry when Azure Resource Manager is throttling because of too many read/write requests.\n+ * <p>\n+ * For each subscription and tenant, Azure Resource Manager limits read requests to 15,000 per hour and\n+ *   write requests to 1,200 per hour. These limits apply to each Azure Resource Manager instance.\n+ */\n+public class ResourceManagerThrottlingPolicy implements HttpPipelinePolicy {\n+    private static final ConcurrentMap<String, ReentrantLock> REENTRANT_LOCK_MAP = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        final HttpRequest request = context.getHttpRequest();\n+        String extractSubscriptionId = ResourceUtils.extractFromResourceId(request.getUrl().getPath(), \"subscriptions\");\n+        if (extractSubscriptionId == null) {\n+            extractSubscriptionId = \"global\";\n+        }\n+        final String subscriptionId = extractSubscriptionId;\n+        REENTRANT_LOCK_MAP.putIfAbsent(subscriptionId, new ReentrantLock());\n+        try {\n+            synchronized (REENTRANT_LOCK_MAP.get(subscriptionId)) {\n+                if (REENTRANT_LOCK_MAP.get(subscriptionId).isLocked()) {\n+                    REENTRANT_LOCK_MAP.get(subscriptionId).wait();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642d9dd32f90a929ff74b3eb2d2afed559ca5f79"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjU4OTA3", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1013#pullrequestreview-355658907", "createdAt": "2020-02-10T01:52:06Z", "commit": {"oid": "642d9dd32f90a929ff74b3eb2d2afed559ca5f79"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMTo1MjowNlrOFnYiwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMTo1MjowNlrOFnYiwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0MDg5Nw==", "bodyText": "Not sure about proxy, or any other configure with origin restClient.\nIf you are also not sure, add a TODO?", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1013#discussion_r376840897", "createdAt": "2020-02-10T01:52:06Z", "author": {"login": "weidongxu-microsoft"}, "path": "azure-mgmt-resources/src/main/java/com/azure/management/resources/fluentcore/utils/ProviderRegistrationPolicy.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License. See License.txt in the project root for\n+ * license information.\n+ */\n+\n+package com.azure.management.resources.fluentcore.utils;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.management.CloudError;\n+import com.azure.core.management.serializer.AzureJacksonAdapter;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.serializer.SerializerEncoding;\n+import com.azure.management.AzureTokenCredential;\n+import com.azure.management.RestClient;\n+import com.azure.management.RestClientBuilder;\n+import com.azure.management.resources.Provider;\n+import com.azure.management.resources.fluentcore.arm.ResourceUtils;\n+import com.azure.management.resources.implementation.ResourceManager;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A Http Pipeline Policy for automatic provider registration in Azure.\n+ */\n+public class ProviderRegistrationPolicy implements HttpPipelinePolicy {\n+    private final static String MISSING_SUBSCRIPTION_REGISTRATION = \"MissingSubscriptionRegistration\";\n+    private final AzureTokenCredential credential;\n+\n+    /**\n+     * Initialize a provider registration policy with a credential that's authorized\n+     * to register the provider.\n+     * @param credential the credential for provider registration\n+     */\n+    public ProviderRegistrationPolicy(AzureTokenCredential credential) {\n+        this.credential = credential;\n+    }\n+\n+    private boolean responseSuccessful(HttpResponse response) {\n+        return response.getStatusCode() >= 200 && response.getStatusCode() < 300;\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        final HttpRequest request = context.getHttpRequest();\n+        return next.process().flatMap(\n+            response -> {\n+                if (!responseSuccessful(response)) {\n+                    HttpResponse bufferedResponse = response.buffer();\n+                    return FluxUtil.collectBytesInByteBufferStream(bufferedResponse.getBody()).flatMap(\n+                        body -> {\n+                            String bodyStr = new String(body, StandardCharsets.UTF_8);\n+\n+                            AzureJacksonAdapter jacksonAdapter = new AzureJacksonAdapter();\n+                            CloudError cloudError;\n+                            try {\n+                                cloudError = jacksonAdapter.deserialize(bodyStr, CloudError.class, SerializerEncoding.JSON);\n+                            } catch (IOException e) {\n+                                return Mono.just(bufferedResponse);\n+                            }\n+\n+                            if (cloudError != null && MISSING_SUBSCRIPTION_REGISTRATION.equals(cloudError.getCode())) {\n+                                String subscriptionId = ResourceUtils.extractFromResourceId(request.getUrl().getPath(), \"subscriptions\");\n+                                RestClient restClient = new RestClientBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642d9dd32f90a929ff74b3eb2d2afed559ca5f79"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjU5Mzkx", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1013#pullrequestreview-355659391", "createdAt": "2020-02-10T01:55:14Z", "commit": {"oid": "642d9dd32f90a929ff74b3eb2d2afed559ca5f79"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMTo1NToxNFrOFnYk4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMTo1NToxNFrOFnYk4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0MTQ0Mw==", "bodyText": "You seems calling a sync version? Should use the async?", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1013#discussion_r376841443", "createdAt": "2020-02-10T01:55:14Z", "author": {"login": "weidongxu-microsoft"}, "path": "azure-mgmt-resources/src/main/java/com/azure/management/resources/fluentcore/utils/ProviderRegistrationPolicy.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License. See License.txt in the project root for\n+ * license information.\n+ */\n+\n+package com.azure.management.resources.fluentcore.utils;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.management.CloudError;\n+import com.azure.core.management.serializer.AzureJacksonAdapter;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.serializer.SerializerEncoding;\n+import com.azure.management.AzureTokenCredential;\n+import com.azure.management.RestClient;\n+import com.azure.management.RestClientBuilder;\n+import com.azure.management.resources.Provider;\n+import com.azure.management.resources.fluentcore.arm.ResourceUtils;\n+import com.azure.management.resources.implementation.ResourceManager;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A Http Pipeline Policy for automatic provider registration in Azure.\n+ */\n+public class ProviderRegistrationPolicy implements HttpPipelinePolicy {\n+    private final static String MISSING_SUBSCRIPTION_REGISTRATION = \"MissingSubscriptionRegistration\";\n+    private final AzureTokenCredential credential;\n+\n+    /**\n+     * Initialize a provider registration policy with a credential that's authorized\n+     * to register the provider.\n+     * @param credential the credential for provider registration\n+     */\n+    public ProviderRegistrationPolicy(AzureTokenCredential credential) {\n+        this.credential = credential;\n+    }\n+\n+    private boolean responseSuccessful(HttpResponse response) {\n+        return response.getStatusCode() >= 200 && response.getStatusCode() < 300;\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        final HttpRequest request = context.getHttpRequest();\n+        return next.process().flatMap(\n+            response -> {\n+                if (!responseSuccessful(response)) {\n+                    HttpResponse bufferedResponse = response.buffer();\n+                    return FluxUtil.collectBytesInByteBufferStream(bufferedResponse.getBody()).flatMap(\n+                        body -> {\n+                            String bodyStr = new String(body, StandardCharsets.UTF_8);\n+\n+                            AzureJacksonAdapter jacksonAdapter = new AzureJacksonAdapter();\n+                            CloudError cloudError;\n+                            try {\n+                                cloudError = jacksonAdapter.deserialize(bodyStr, CloudError.class, SerializerEncoding.JSON);\n+                            } catch (IOException e) {\n+                                return Mono.just(bufferedResponse);\n+                            }\n+\n+                            if (cloudError != null && MISSING_SUBSCRIPTION_REGISTRATION.equals(cloudError.getCode())) {\n+                                String subscriptionId = ResourceUtils.extractFromResourceId(request.getUrl().getPath(), \"subscriptions\");\n+                                RestClient restClient = new RestClientBuilder()\n+                                        .withBaseUrl(String.format(\"%s://%s\", request.getUrl().getProtocol(), request.getUrl().getHost()))\n+                                        .withCredential(credential)\n+                                        .withSerializerAdapter(jacksonAdapter).buildClient();\n+                                ResourceManager resourceManager = ResourceManager.authenticate(restClient)\n+                                        .withSubscription(subscriptionId);\n+                                Pattern providerPattern = Pattern.compile(\".*'(.*)'\");\n+                                Matcher providerMatcher = providerPattern.matcher(cloudError.getMessage());\n+                                providerMatcher.find();\n+                                Provider provider = registerProvider(providerMatcher.group(1), resourceManager);\n+                                while (provider.registrationState().equalsIgnoreCase(\"Unregistered\")\n+                                    || provider.registrationState().equalsIgnoreCase(\"Registering\")) {\n+                                    SdkContext.sleep(5 * 1000);\n+                                    provider = resourceManager.providers().getByName(provider.namespace());\n+                                }\n+\n+                                // Retry after registration\n+                                return next.process();\n+                            }\n+                            return Mono.just(bufferedResponse);\n+                        }\n+                    );\n+                }\n+                return Mono.just(response);\n+            }\n+        );\n+    }\n+\n+    private Provider registerProvider(String namespace, ResourceManager resourceManager) {\n+        return resourceManager.providers().register(namespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642d9dd32f90a929ff74b3eb2d2afed559ca5f79"}, "originalPosition": 101}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e7e2b560c19d4348c915d0ba51e9a28ef4128a2", "author": {"user": {"login": "ChenTanyi", "name": "Tanyi Chen"}}, "url": "https://github.com/Azure/azure-libraries-for-java/commit/5e7e2b560c19d4348c915d0ba51e9a28ef4128a2", "committedDate": "2020-02-11T10:30:04Z", "message": "fix: make provider register become async"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e0b18a1886edf025b6af6423cc99622efcbf8f2", "author": {"user": {"login": "ChenTanyi", "name": "Tanyi Chen"}}, "url": "https://github.com/Azure/azure-libraries-for-java/commit/2e0b18a1886edf025b6af6423cc99622efcbf8f2", "committedDate": "2020-02-12T08:08:40Z", "message": "fix: remove synchronized, deal with every 429, since every subscription has several limitation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3OTI1ODE4", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1013#pullrequestreview-357925818", "createdAt": "2020-02-13T02:54:14Z", "commit": {"oid": "2e0b18a1886edf025b6af6423cc99622efcbf8f2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1482, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}