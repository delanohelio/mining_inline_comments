{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2OTI0NDA1", "number": 1033, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzoxNDo1M1rODg7UUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzoxNTo1OFrODg7U5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODUyODgzOnYy", "diffSide": "RIGHT", "path": "azure-mgmt-appservice/src/main/java/com/azure/management/appservice/implementation/WebAppsImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzoxNDo1M1rOFrZ2Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo0ODoxMVrOFraRVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1NjYwMg==", "bodyText": "Why not use PagedFlux.mapPage()", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1033#discussion_r381056602", "createdAt": "2020-02-19T03:14:53Z", "author": {"login": "yaohaizh"}, "path": "azure-mgmt-appservice/src/main/java/com/azure/management/appservice/implementation/WebAppsImpl.java", "diffHunk": "@@ -82,10 +65,23 @@ protected WebAppImpl wrapModel(SiteInner inner) {\n         return wrapModel(inner, null, null);\n     }\n \n-    protected PagedIterable<WebApp> wrapList(PagedIterable<SiteInner> pagedList) {\n-        return pagedList.mapPage(this::wrapModel);\n-    }\n+//    protected PagedIterable<WebApp> wrapList(PagedIterable<SiteInner> pagedList) {\n+//        return pagedList.mapPage(this::wrapModel);\n+//    }\n \n+    @Override\n+    protected PagedFlux<WebApp> wrapPageAsync(PagedFlux<SiteInner> innerPage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c32d6a179ebda3b1867adc2f5931336a41998c6"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2MzUxMQ==", "bodyText": "I need flatMap, not map.", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1033#discussion_r381063511", "createdAt": "2020-02-19T03:48:11Z", "author": {"login": "weidongxu-microsoft"}, "path": "azure-mgmt-appservice/src/main/java/com/azure/management/appservice/implementation/WebAppsImpl.java", "diffHunk": "@@ -82,10 +65,23 @@ protected WebAppImpl wrapModel(SiteInner inner) {\n         return wrapModel(inner, null, null);\n     }\n \n-    protected PagedIterable<WebApp> wrapList(PagedIterable<SiteInner> pagedList) {\n-        return pagedList.mapPage(this::wrapModel);\n-    }\n+//    protected PagedIterable<WebApp> wrapList(PagedIterable<SiteInner> pagedList) {\n+//        return pagedList.mapPage(this::wrapModel);\n+//    }\n \n+    @Override\n+    protected PagedFlux<WebApp> wrapPageAsync(PagedFlux<SiteInner> innerPage) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1NjYwMg=="}, "originalCommit": {"oid": "8c32d6a179ebda3b1867adc2f5931336a41998c6"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODUzMDI5OnYy", "diffSide": "RIGHT", "path": "azure-mgmt-resources/src/main/java/com/azure/management/resources/fluentcore/utils/PagedConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzoxNTo1OFrOFrZ3Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzoxNTo1OFrOFrZ3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1NjgxOA==", "bodyText": "PagedFlux.mapPage", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1033#discussion_r381056818", "createdAt": "2020-02-19T03:15:58Z", "author": {"login": "yaohaizh"}, "path": "azure-mgmt-resources/src/main/java/com/azure/management/resources/fluentcore/utils/PagedConverter.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License. See License.txt in the project root for\n+ * license information.\n+ */\n+\n+package com.azure.management.resources.fluentcore.utils;\n+\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.PagedResponseBase;\n+import com.azure.core.util.paging.PageRetriever;\n+import org.reactivestreams.Publisher;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Utility class for conversion of PagedResponse.\n+ */\n+public class PagedConverter {\n+\n+    private PagedConverter() {\n+\n+    }\n+\n+    /**\n+     * Applies flatMap transform to elements of PagedFlux.\n+     *\n+     * @param mapper the flatMap transform of element T to Publisher of S.\n+     * @return the PagedFlux.\n+     */\n+    public static <T, S> PagedFlux<S> flatMapPage(PagedFlux<T> pagedFlux, Function<? super T, ? extends Publisher<? extends S>> mapper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c32d6a179ebda3b1867adc2f5931336a41998c6"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2609, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}