{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NzY0NDcx", "number": 1199, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNTo0NjowNFrOEBQF4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDoyOToxMVrOEB9ltg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzQ3NjgyOnYy", "diffSide": "RIGHT", "path": "azure-mgmt-compute/src/main/java/com/microsoft/azure/management/compute/implementation/ProximityPlacementGroupImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNTo0NjowNFrOGc_X4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNTo1NTozMlrOGc_giQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1MTYxNg==", "bodyText": "What does this function do?", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1199#discussion_r433051616", "createdAt": "2020-06-01T05:46:04Z", "author": {"login": "ChenTanyi"}, "path": "azure-mgmt-compute/src/main/java/com/microsoft/azure/management/compute/implementation/ProximityPlacementGroupImpl.java", "diffHunk": "@@ -69,12 +69,12 @@ public ProximityPlacementGroupInner inner() {\n     }\n \n \n-    private List<String> getStringListFromSubResourceList(List<SubResource> subList) {\n+    private List<String> getStringListFromSubResourceList(List<SubResourceWithColocationStatus> subList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5aaf22dc388315e442ae5d020e2b5bbe948255"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1MzgzMw==", "bodyText": "It's to return a list of resource ids. The changes come from swagger and apply here.", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1199#discussion_r433053833", "createdAt": "2020-06-01T05:55:32Z", "author": {"login": "xseeseesee"}, "path": "azure-mgmt-compute/src/main/java/com/microsoft/azure/management/compute/implementation/ProximityPlacementGroupImpl.java", "diffHunk": "@@ -69,12 +69,12 @@ public ProximityPlacementGroupInner inner() {\n     }\n \n \n-    private List<String> getStringListFromSubResourceList(List<SubResource> subList) {\n+    private List<String> getStringListFromSubResourceList(List<SubResourceWithColocationStatus> subList) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1MTYxNg=="}, "originalCommit": {"oid": "5b5aaf22dc388315e442ae5d020e2b5bbe948255"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDkyOTkxOnYy", "diffSide": "RIGHT", "path": "azure-mgmt-compute/src/test/java/com/microsoft/azure/management/compute/VirtualMachineOperationsTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDoyODoyNFrOGeIOyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMzoyMjoxNlrOGeKvBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NTMyMQ==", "bodyText": "Assert if the vm state is deallocated. When it is deallocated, vm entity will still be there.", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1199#discussion_r434245321", "createdAt": "2020-06-03T00:28:24Z", "author": {"login": "sandeepkv93"}, "path": "azure-mgmt-compute/src/test/java/com/microsoft/azure/management/compute/VirtualMachineOperationsTests.java", "diffHunk": "@@ -702,6 +702,40 @@ public void canRunScriptOnVM() {\n         Assert.assertTrue(runResult.value().size() > 0);\n     }\n \n+    @Test\n+    public void canPerformSimulateEvictionOnSpotVirtualMachine() {\n+        VirtualMachine virtualMachine = computeManager.virtualMachines()\n+                .define(VMNAME)\n+                .withRegion(REGION)\n+                .withNewResourceGroup(RG_NAME)\n+                .withNewPrimaryNetwork(\"10.0.0.0/28\")\n+                .withPrimaryPrivateIPAddressDynamic()\n+                .withoutPrimaryPublicIPAddress()\n+                .withPopularLinuxImage(KnownLinuxVirtualMachineImage.UBUNTU_SERVER_16_04_LTS)\n+                .withRootUsername(\"firstuser\")\n+                .withRootPassword(\"afh123RVS!\")\n+                .withSpotPriority(VirtualMachineEvictionPolicyTypes.DEALLOCATE)\n+                .withSize(VirtualMachineSizeTypes.STANDARD_D2_V3)\n+                .create();\n+\n+        Assert.assertNotNull(virtualMachine.osDiskStorageAccountType());\n+        Assert.assertTrue(virtualMachine.osDiskSize() > 0);\n+        Disk disk = computeManager.disks().getById(virtualMachine.osDiskId());\n+        Assert.assertNotNull(disk);\n+        Assert.assertEquals(DiskState.ATTACHED, disk.inner().diskState());\n+\n+        // call simulate eviction\n+        virtualMachine.simulateEviction();\n+        SdkContext.sleep(30 * 60 * 1000);\n+\n+        virtualMachine = computeManager.virtualMachines().getById(virtualMachine.id());\n+        Assert.assertNotNull(virtualMachine);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161a5c26a5a63de16f58edca99afc82d957808b8"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4NjM0Mw==", "bodyText": "Do we need to get such state via InstanceView?", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1199#discussion_r434286343", "createdAt": "2020-06-03T03:22:16Z", "author": {"login": "xseeseesee"}, "path": "azure-mgmt-compute/src/test/java/com/microsoft/azure/management/compute/VirtualMachineOperationsTests.java", "diffHunk": "@@ -702,6 +702,40 @@ public void canRunScriptOnVM() {\n         Assert.assertTrue(runResult.value().size() > 0);\n     }\n \n+    @Test\n+    public void canPerformSimulateEvictionOnSpotVirtualMachine() {\n+        VirtualMachine virtualMachine = computeManager.virtualMachines()\n+                .define(VMNAME)\n+                .withRegion(REGION)\n+                .withNewResourceGroup(RG_NAME)\n+                .withNewPrimaryNetwork(\"10.0.0.0/28\")\n+                .withPrimaryPrivateIPAddressDynamic()\n+                .withoutPrimaryPublicIPAddress()\n+                .withPopularLinuxImage(KnownLinuxVirtualMachineImage.UBUNTU_SERVER_16_04_LTS)\n+                .withRootUsername(\"firstuser\")\n+                .withRootPassword(\"afh123RVS!\")\n+                .withSpotPriority(VirtualMachineEvictionPolicyTypes.DEALLOCATE)\n+                .withSize(VirtualMachineSizeTypes.STANDARD_D2_V3)\n+                .create();\n+\n+        Assert.assertNotNull(virtualMachine.osDiskStorageAccountType());\n+        Assert.assertTrue(virtualMachine.osDiskSize() > 0);\n+        Disk disk = computeManager.disks().getById(virtualMachine.osDiskId());\n+        Assert.assertNotNull(disk);\n+        Assert.assertEquals(DiskState.ATTACHED, disk.inner().diskState());\n+\n+        // call simulate eviction\n+        virtualMachine.simulateEviction();\n+        SdkContext.sleep(30 * 60 * 1000);\n+\n+        virtualMachine = computeManager.virtualMachines().getById(virtualMachine.id());\n+        Assert.assertNotNull(virtualMachine);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NTMyMQ=="}, "originalCommit": {"oid": "161a5c26a5a63de16f58edca99afc82d957808b8"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDkzMTEwOnYy", "diffSide": "RIGHT", "path": "azure-mgmt-compute/src/test/java/com/microsoft/azure/management/compute/VirtualMachineScaleSetOperationsTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDoyOToxMVrOGeIPhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDoyOToxMVrOGeIPhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NTUxMQ==", "bodyText": "Same as Single VM. Check the vm state of each VM.", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1199#discussion_r434245511", "createdAt": "2020-06-03T00:29:11Z", "author": {"login": "sandeepkv93"}, "path": "azure-mgmt-compute/src/test/java/com/microsoft/azure/management/compute/VirtualMachineScaleSetOperationsTests.java", "diffHunk": "@@ -1143,6 +1144,56 @@ public void canCreateLowPriorityVMSSInstance() throws Exception {\n         Assert.assertEquals(vmss.billingProfile().maxPrice(), (Double)2000.0);\n     }\n \n+    @Test\n+    public void canPerformSimulateEvictionOnSpotVMSSInstance() {\n+        final String vmssName = generateRandomResourceName(\"vmss\", 10);\n+\n+        ResourceGroup resourceGroup = this.resourceManager.resourceGroups()\n+                .define(RG_NAME)\n+                .withRegion(REGION)\n+                .create();\n+\n+        Network network = this.networkManager\n+                .networks()\n+                .define(\"vmssvnet\")\n+                .withRegion(REGION)\n+                .withExistingResourceGroup(resourceGroup)\n+                .withAddressSpace(\"10.0.0.0/28\")\n+                .withSubnet(\"subnet1\", \"10.0.0.0/28\")\n+                .create();\n+\n+        VirtualMachineScaleSet vmss = computeManager.virtualMachineScaleSets()\n+                .define(vmssName)\n+                .withRegion(REGION)\n+                .withExistingResourceGroup(RG_NAME)\n+                .withSku(VirtualMachineScaleSetSkuTypes.STANDARD_D3_V2)\n+                .withExistingPrimaryNetworkSubnet(network, \"subnet1\")\n+                .withoutPrimaryInternetFacingLoadBalancer()\n+                .withoutPrimaryInternalLoadBalancer()\n+                .withPopularLinuxImage(KnownLinuxVirtualMachineImage.UBUNTU_SERVER_16_04_LTS)\n+                .withRootUsername(\"jvuser\")\n+                .withRootPassword(\"123OData!@#123\")\n+                .withSpotPriorityVirtualMachine(VirtualMachineEvictionPolicyTypes.DEALLOCATE)\n+                .create();\n+\n+        PagedList<VirtualMachineScaleSetVM> vmInstances = vmss.virtualMachines().list();\n+        for (VirtualMachineScaleSetVM instance: vmInstances) {\n+            Assert.assertTrue(instance.osDiskSizeInGB() > 0);\n+            //Disk disk = computeManager.disks().getById(instance.osDiskId());\n+            //Assert.assertEquals(DiskState.ATTACHED, disk.inner().diskState());\n+            // call simulate eviction\n+            vmss.virtualMachines().simulateEviction(instance.instanceId());\n+        }\n+\n+        SdkContext.sleep(30 * 60 * 1000);\n+\n+        for (VirtualMachineScaleSetVM instance: vmInstances) {\n+            instance.refresh();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161a5c26a5a63de16f58edca99afc82d957808b8"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2553, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}