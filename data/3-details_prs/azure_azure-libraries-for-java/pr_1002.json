{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNjI4NDE4", "number": 1002, "title": "feat: rewrite authentication policy to use default scope", "bodyText": "", "createdAt": "2020-02-04T03:27:05Z", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1002", "merged": true, "mergeCommit": {"oid": "d422e9ea0aea7d314be1d7d03bd2ffd3506070b7"}, "closed": true, "closedAt": "2020-02-04T07:08:58Z", "author": {"login": "ChenTanyi"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcA47lhgH2gAyMzcwNjI4NDE4OjdiNWE4OGE4MzZiOWRmYjdjM2YyMDkzNTk3MDVhYTU4MjQ2MjE4MDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcA53bmgFqTM1MjcxODc3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7b5a88a836b9dfb7c3f209359705aa5824621804", "author": {"user": {"login": "ChenTanyi", "name": "Tanyi Chen"}}, "url": "https://github.com/Azure/azure-libraries-for-java/commit/7b5a88a836b9dfb7c3f209359705aa5824621804", "committedDate": "2020-02-04T03:25:51Z", "message": "feat: rewrite authentication policy to use default scope"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNzExODIy", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1002#pullrequestreview-352711822", "createdAt": "2020-02-04T03:58:48Z", "commit": {"oid": "7b5a88a836b9dfb7c3f209359705aa5824621804"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzo1ODo0OFrOFlHdQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzo1ODo0OFrOFlHdQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2MzgwOA==", "bodyText": "Is it possible to have UPPERCASE of getProtocol?", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1002#discussion_r374463808", "createdAt": "2020-02-04T03:58:48Z", "author": {"login": "weidongxu-microsoft"}, "path": "azure-mgmt-resources/src/main/java/com/azure/management/BearerTokenAuthenticationPolicy.java", "diffHunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.management.AzureEnvironment;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Rewrite the BearerTokenAuthenticationPolicy, it will use default scope when scopes parameter is empty.\n+ */\n+public class BearerTokenAuthenticationPolicy implements HttpPipelinePolicy {\n+    private static final String AUTHORIZATION_HEADER_KEY = \"Authorization\";\n+    private static final String AUTHORIZATION_HEADER_VALUE_FORMAT = \"Bearer %s\";\n+\n+    private final Map<String, AccessToken> tokenCache;\n+    private final TokenCredential credential;\n+    private final String[] scopes;\n+    private final AzureEnvironment environment;\n+\n+    public BearerTokenAuthenticationPolicy(TokenCredential credential, String... scopes) {\n+        Objects.requireNonNull(credential);\n+        this.credential = credential;\n+        this.scopes = scopes;\n+        this.tokenCache = new HashMap<>();\n+\n+        if (credential instanceof AzureTokenCredential) {\n+            this.environment = ((AzureTokenCredential) credential).getEnvironment();\n+        } else {\n+            this.environment = AzureEnvironment.AZURE;\n+        }\n+    }\n+\n+    private String getDefaultScopeFromRequest(HttpRequest request) {\n+        String host = request.getUrl().getHost();\n+        String resource = this.environment.getManagementEndpoint();\n+        for (Map.Entry<String, String> endpoint : this.environment.endpoints().entrySet()) {\n+            if (host.contains(endpoint.getValue())) {\n+                if (endpoint.getKey().equals(AzureEnvironment.Endpoint.KEYVAULT.identifier())) {\n+                    resource = String.format(\"https://%s/\", endpoint.getValue().replaceAll(\"^\\\\.*\", \"\"));\n+                    break;\n+                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.GRAPH.identifier())) {\n+                    resource = this.environment.getGraphEndpoint();\n+                    break;\n+                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.LOG_ANALYTICS.identifier())) {\n+                    resource = this.environment.getLogAnalyticsEndpoint();\n+                    break;\n+                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.APPLICATION_INSIGHTS.identifier())) {\n+                    resource = this.environment.getApplicationInsightsEndpoint();\n+                    break;\n+                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.DATA_LAKE_STORE.identifier())\n+                        || endpoint.getKey().equals(AzureEnvironment.Endpoint.DATA_LAKE_ANALYTICS.identifier())) {\n+                    resource = this.environment.getDataLakeEndpointResourceId();\n+                    break;\n+                }\n+            }\n+        }\n+        return resource + \"/.default\";\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        if (\"http\".equals(context.getHttpRequest().getUrl().getProtocol())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b5a88a836b9dfb7c3f209359705aa5824621804"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8c239e0be3b74443ee3db01bea5f0308543db29", "author": {"user": {"login": "ChenTanyi", "name": "Tanyi Chen"}}, "url": "https://github.com/Azure/azure-libraries-for-java/commit/e8c239e0be3b74443ee3db01bea5f0308543db29", "committedDate": "2020-02-04T04:09:25Z", "message": "fix: handle UPPERCASE protocol"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNzE2NTY0", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1002#pullrequestreview-352716564", "createdAt": "2020-02-04T04:20:30Z", "commit": {"oid": "7b5a88a836b9dfb7c3f209359705aa5824621804"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNDoyMDozMFrOFlHspQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNDoyMDozMFrOFlHspQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2Nzc0OQ==", "bodyText": "Not sure about doOnNext, it could still follow by an Error instead of Complete. Maybe doOnSuccess?\nInput of doOnSuccess could be null.", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1002#discussion_r374467749", "createdAt": "2020-02-04T04:20:30Z", "author": {"login": "weidongxu-microsoft"}, "path": "azure-mgmt-resources/src/main/java/com/azure/management/BearerTokenAuthenticationPolicy.java", "diffHunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.management.AzureEnvironment;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Rewrite the BearerTokenAuthenticationPolicy, it will use default scope when scopes parameter is empty.\n+ */\n+public class BearerTokenAuthenticationPolicy implements HttpPipelinePolicy {\n+    private static final String AUTHORIZATION_HEADER_KEY = \"Authorization\";\n+    private static final String AUTHORIZATION_HEADER_VALUE_FORMAT = \"Bearer %s\";\n+\n+    private final Map<String, AccessToken> tokenCache;\n+    private final TokenCredential credential;\n+    private final String[] scopes;\n+    private final AzureEnvironment environment;\n+\n+    public BearerTokenAuthenticationPolicy(TokenCredential credential, String... scopes) {\n+        Objects.requireNonNull(credential);\n+        this.credential = credential;\n+        this.scopes = scopes;\n+        this.tokenCache = new HashMap<>();\n+\n+        if (credential instanceof AzureTokenCredential) {\n+            this.environment = ((AzureTokenCredential) credential).getEnvironment();\n+        } else {\n+            this.environment = AzureEnvironment.AZURE;\n+        }\n+    }\n+\n+    private String getDefaultScopeFromRequest(HttpRequest request) {\n+        String host = request.getUrl().getHost();\n+        String resource = this.environment.getManagementEndpoint();\n+        for (Map.Entry<String, String> endpoint : this.environment.endpoints().entrySet()) {\n+            if (host.contains(endpoint.getValue())) {\n+                if (endpoint.getKey().equals(AzureEnvironment.Endpoint.KEYVAULT.identifier())) {\n+                    resource = String.format(\"https://%s/\", endpoint.getValue().replaceAll(\"^\\\\.*\", \"\"));\n+                    break;\n+                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.GRAPH.identifier())) {\n+                    resource = this.environment.getGraphEndpoint();\n+                    break;\n+                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.LOG_ANALYTICS.identifier())) {\n+                    resource = this.environment.getLogAnalyticsEndpoint();\n+                    break;\n+                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.APPLICATION_INSIGHTS.identifier())) {\n+                    resource = this.environment.getApplicationInsightsEndpoint();\n+                    break;\n+                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.DATA_LAKE_STORE.identifier())\n+                        || endpoint.getKey().equals(AzureEnvironment.Endpoint.DATA_LAKE_ANALYTICS.identifier())) {\n+                    resource = this.environment.getDataLakeEndpointResourceId();\n+                    break;\n+                }\n+            }\n+        }\n+        return resource + \"/.default\";\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        if (\"http\".equals(context.getHttpRequest().getUrl().getProtocol())) {\n+            return Mono.error(new RuntimeException(\"token credentials require a URL using the HTTPS protocol scheme\"));\n+        }\n+\n+        String[] scopes;\n+        if (this.scopes == null || this.scopes.length == 0) {\n+            scopes = new String[] {getDefaultScopeFromRequest(context.getHttpRequest())};\n+        } else {\n+            scopes = this.scopes;\n+        }\n+        assert scopes.length > 0;\n+\n+        Mono<AccessToken> tokenResult;\n+        AccessToken token = tokenCache.get(scopes[0]);\n+        if (token == null || token.isExpired()) {\n+            tokenResult = this.credential.getToken(new TokenRequestContext().addScopes(scopes)).doOnNext(accessToken -> this.tokenCache.put(scopes[0], accessToken));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b5a88a836b9dfb7c3f209359705aa5824621804"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNzE4Nzc2", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1002#pullrequestreview-352718776", "createdAt": "2020-02-04T04:31:14Z", "commit": {"oid": "e8c239e0be3b74443ee3db01bea5f0308543db29"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1473, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}