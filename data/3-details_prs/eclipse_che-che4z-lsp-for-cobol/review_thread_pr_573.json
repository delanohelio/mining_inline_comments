{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MTk3ODQ2", "number": 573, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODoyODowOVrOExGxsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDo1NTo1N1rOExKAkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTI2NzA1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/domain/modules/EngineModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODoyODowOVrOHnD5zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODoyODowOVrOHnD5zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcyMDQ2MA==", "bodyText": "I see some of those binding override the service ones. It would be better not to duplicate them", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/573#discussion_r510720460", "createdAt": "2020-10-23T08:28:09Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/domain/modules/EngineModule.java", "diffHunk": "@@ -53,6 +61,12 @@ protected void configure() {\n     bind(CobolLineReaderDelegate.class).to(CompilerDirectivesTransformation.class);\n     bind(CobolLineWriter.class).to(CobolLineWriterImpl.class);\n     bind(CobolLinesTransformation.class).to(ContinuationLineTransformation.class);\n+    bind(DefaultErrorStrategy.class).to(CobolErrorStrategy.class);\n+    bind(MessageService.class).to(PropertiesMessageService.class);\n+    bind(LocaleStore.class).to(LocaleStoreImpl.class);\n+    bind(Communications.class).to(ServerCommunications.class);\n+    bind(String.class).annotatedWith(named(\"resourceFileLocation\")).toInstance(\"message/messages\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a61a45bb49d2a90e3a0e64e2385af3388264d5a"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTI3NjIxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/delegates/communications/ServerCommunications.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODozMDozNVrOHnD_ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODozMDozNVrOHnD_ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcyMTg5OA==", "bodyText": "Google Guice docs recommend not to make the injectable fields final", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/573#discussion_r510721898", "createdAt": "2020-10-23T08:30:35Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/delegates/communications/ServerCommunications.java", "diffHunk": "@@ -44,21 +45,18 @@\n @Slf4j\n public class ServerCommunications implements Communications {\n \n-  static final String CANNOT_FIND_LANGUAGE_ENGINE = \"Cannot find a language engine for the given language ID: \";\n-  static final String SYNTAX_ANALYSIS_IN_PROGRESS = \": Syntax analysis in progress\";\n-  static final String NO_SYNTAX_ERRORS = \"No syntax errors detected in \";\n-  static final String EXTENSION_UNSUPPORTED = \"The given document extension is unsupported: \";\n-\n-  private Provider<LanguageClient> provider;\n-  private FileSystemService files;\n-\n   private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(5);\n   private final Set<String> uriInProgress = new HashSet<>();\n+  private final MessageService messageService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a61a45bb49d2a90e3a0e64e2385af3388264d5a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTI5MTEyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/messages/LocaleStoreImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODozNDozOVrOHnEIzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODozNDozOVrOHnEIzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcyNDMwMA==", "bodyText": "Asterisks in the middle of the comment after formatting", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/573#discussion_r510724300", "createdAt": "2020-10-23T08:34:39Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/messages/LocaleStoreImpl.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.broadcom.lsp.cobol.core.messages;\n+\n+import com.broadcom.lsp.cobol.service.delegates.communications.Communications;\n+import com.google.common.collect.Iterables;\n+import com.google.gson.JsonPrimitive;\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.MessageType;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Concrete implementation for {@link LocaleStore}\n+ *\n+ * <p>* Stores the locale for entire application and is single point of contact for all locale\n+ * related * issues. This class update application locale, notify subscriber in case of locale\n+ * update and * returns currently set locale.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a61a45bb49d2a90e3a0e64e2385af3388264d5a"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTI5MzkxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/strategy/CobolErrorStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODozNToxNlrOHnEKXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODozNToxNlrOHnEKXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcyNDcwMg==", "bodyText": "Should be @Singleton", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/573#discussion_r510724702", "createdAt": "2020-10-23T08:35:16Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/strategy/CobolErrorStrategy.java", "diffHunk": "@@ -14,32 +14,54 @@\n  */\n package com.broadcom.lsp.cobol.core.strategy;\n \n+import com.broadcom.lsp.cobol.core.messages.MessageService;\n+import com.google.inject.Inject;\n import lombok.extern.slf4j.Slf4j;\n import org.antlr.v4.runtime.*;\n import org.antlr.v4.runtime.misc.IntervalSet;\n \n+import java.util.MissingResourceException;\n+\n @Slf4j\n public class CobolErrorStrategy extends DefaultErrorStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a61a45bb49d2a90e3a0e64e2385af3388264d5a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTMwNDkxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/messages/LocaleStoreImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODozODoyMlrOHnERPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODozODoyMlrOHnERPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcyNjQ2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LocaleEnum localeEnum = Enum.valueOf(LocaleEnum.class, locale.toUpperCase());\n          \n          \n            \n                  LocaleEnum localeEnum = LocaleEnum.valueOf(locale.toUpperCase());", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/573#discussion_r510726460", "createdAt": "2020-10-23T08:38:22Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/messages/LocaleStoreImpl.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.broadcom.lsp.cobol.core.messages;\n+\n+import com.broadcom.lsp.cobol.service.delegates.communications.Communications;\n+import com.google.common.collect.Iterables;\n+import com.google.gson.JsonPrimitive;\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.MessageType;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Concrete implementation for {@link LocaleStore}\n+ *\n+ * <p>* Stores the locale for entire application and is single point of contact for all locale\n+ * related * issues. This class update application locale, notify subscriber in case of locale\n+ * update and * returns currently set locale.\n+ */\n+@Slf4j\n+@Singleton\n+public final class LocaleStoreImpl implements LocaleStore {\n+  private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n+  private final Lock readLock = readWriteLock.readLock();\n+  private final Lock writeLock = readWriteLock.writeLock();\n+  private final Locale defaultLocale = new Locale(\"en\", \"en\");\n+  private Communications communication;\n+  private LocaleEnum supportedLocale;\n+  private List<Consumer<Locale>> notifyList = new ArrayList<>();\n+\n+  @Inject\n+  public LocaleStoreImpl(Communications communications) {\n+    this.communication = communications;\n+  }\n+\n+  /**\n+   * Return the application current locale.\n+   *\n+   * @return {@link LocaleEnum}\n+   */\n+  @Override\n+  public LocaleEnum getSupportedLocale() {\n+    readLock.lock();\n+    try {\n+      if (Objects.isNull(supportedLocale))\n+        return Enum.valueOf(LocaleEnum.class, defaultLocale.getCountry().toUpperCase());\n+      return supportedLocale;\n+    } finally {\n+      readLock.unlock();\n+    }\n+  }\n+\n+  private void setSupportedLocale(LocaleEnum supportedLocale) {\n+    writeLock.lock();\n+    try {\n+      this.supportedLocale = supportedLocale;\n+    } finally {\n+      writeLock.unlock();\n+    }\n+  }\n+\n+  /**\n+   * Update the locale for an application.\n+   *\n+   * @param locale to be updated.\n+   */\n+  @Override\n+  public void updateLocale(String locale) {\n+    try {\n+      LocaleEnum localeEnum = Enum.valueOf(LocaleEnum.class, locale.toUpperCase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ed294eb5bca1852f11ca0b6aabeb774444cea98"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTMxMzk3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/messages/PropertiesMessageService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODo0MDo0MFrOHnEWug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODo0MDo0MFrOHnEWug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcyNzg2Ng==", "bodyText": "Injectable fields should not be final", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/573#discussion_r510727866", "createdAt": "2020-10-23T08:40:40Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/messages/PropertiesMessageService.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.broadcom.lsp.cobol.core.messages;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * This class is an properties file implementation of {@link MessageService} . It loads messages\n+ * from a properties file into memory to be used latter on for logging or messaging.\n+ */\n+@Singleton\n+public class PropertiesMessageService implements MessageService {\n+\n+  private final String baseName;\n+  private final LocaleStore localeStore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ed294eb5bca1852f11ca0b6aabeb774444cea98"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTM4MDIzOnYy", "diffSide": "RIGHT", "path": "server/src/main/resources/message/messages_en.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODo1NzozNVrOHnE_Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODo1NzozNVrOHnE_Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDczODI2Mw==", "bodyText": "# comments-out the text after it. I don't think the logging messages should be externalized. They are mostly for us, not for the users", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/573#discussion_r510738263", "createdAt": "2020-10-23T08:57:35Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/resources/message/messages_en.properties", "diffHunk": "@@ -0,0 +1,28 @@\n+CobolLineReaderImpl.longLineMsg=Source text cannot go past column 80\n+CobolLineReaderImpl.incorrectLineFormat=Unexpected indicator area content\n+CobolLineReaderImpl.registerFormatError=Syntax error by CobolLineReaderImpl#registerFormatError: %s", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ed294eb5bca1852f11ca0b6aabeb774444cea98"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTQxNjIwOnYy", "diffSide": "RIGHT", "path": "server/src/main/resources/message/messages_en.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTowNzoyNFrOHnFVOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTowNzoyNFrOHnFVOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0Mzg2Nw==", "bodyText": "This key pattern will work for now, but I would prefer storing by purpose, e.g. error/notification, not by class. We may review and change it later.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/573#discussion_r510743867", "createdAt": "2020-10-23T09:07:24Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/resources/message/messages_en.properties", "diffHunk": "@@ -0,0 +1,28 @@\n+CobolLineReaderImpl.longLineMsg=Source text cannot go past column 80", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e23f870b813763d6e51c1809cf5ea18c63add97"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTcwMDc2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/messages/LocaleStoreImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDoyNTo0N1rOHnICMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDoyNTo0N1rOHnICMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc4ODE0Nw==", "bodyText": "communications", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/573#discussion_r510788147", "createdAt": "2020-10-23T10:25:47Z", "author": {"login": "asatklichov"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/messages/LocaleStoreImpl.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.broadcom.lsp.cobol.core.messages;\n+\n+import com.broadcom.lsp.cobol.service.delegates.communications.Communications;\n+import com.google.common.collect.Iterables;\n+import com.google.gson.JsonPrimitive;\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.MessageType;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Concrete implementation for {@link LocaleStore}\n+ *\n+ * <p>Stores the locale for entire application and is single point of contact for all locale related\n+ * issues. This class update application locale, notify subscriber in case of locale update and\n+ * returns currently set locale.\n+ */\n+@Slf4j\n+@Singleton\n+public final class LocaleStoreImpl implements LocaleStore {\n+  private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n+  private final Lock readLock = readWriteLock.readLock();\n+  private final Lock writeLock = readWriteLock.writeLock();\n+  private final Locale defaultLocale = new Locale(\"en\", \"en\");\n+  private Communications communication;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "414d7ab5e61490852e541299e109b18783a91afb"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTcxODQ4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/messages/LocaleStoreImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDozMDo1MFrOHnIMyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMjowNzoxNlrOHnLB2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc5MDg1OQ==", "bodyText": "This \"return\" should be moved to end of method. Regarding to finally would be more readable", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/573#discussion_r510790859", "createdAt": "2020-10-23T10:30:50Z", "author": {"login": "asatklichov"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/messages/LocaleStoreImpl.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.broadcom.lsp.cobol.core.messages;\n+\n+import com.broadcom.lsp.cobol.service.delegates.communications.Communications;\n+import com.google.common.collect.Iterables;\n+import com.google.gson.JsonPrimitive;\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.MessageType;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Concrete implementation for {@link LocaleStore}\n+ *\n+ * <p>Stores the locale for entire application and is single point of contact for all locale related\n+ * issues. This class update application locale, notify subscriber in case of locale update and\n+ * returns currently set locale.\n+ */\n+@Slf4j\n+@Singleton\n+public final class LocaleStoreImpl implements LocaleStore {\n+  private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n+  private final Lock readLock = readWriteLock.readLock();\n+  private final Lock writeLock = readWriteLock.writeLock();\n+  private final Locale defaultLocale = new Locale(\"en\", \"en\");\n+  private Communications communication;\n+  private LocaleEnum supportedLocale;\n+  private List<Consumer<Locale>> notifyList = new ArrayList<>();\n+\n+  @Inject\n+  public LocaleStoreImpl(Communications communications) {\n+    this.communication = communications;\n+  }\n+\n+  /**\n+   * Return the application current locale.\n+   *\n+   * @return {@link LocaleEnum}\n+   */\n+  @Override\n+  public LocaleEnum getSupportedLocale() {\n+    readLock.lock();\n+    try {\n+      if (Objects.isNull(supportedLocale))\n+        return Enum.valueOf(LocaleEnum.class, defaultLocale.getCountry().toUpperCase());\n+      return supportedLocale;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "414d7ab5e61490852e541299e109b18783a91afb"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgzMTg2Mw==", "bodyText": "moving return to the last stmt in the method. return in finally might give a sonar issue of - \"Jump statements should not occur in \"finally\" blocks\"", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/573#discussion_r510831863", "createdAt": "2020-10-23T11:56:57Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/messages/LocaleStoreImpl.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.broadcom.lsp.cobol.core.messages;\n+\n+import com.broadcom.lsp.cobol.service.delegates.communications.Communications;\n+import com.google.common.collect.Iterables;\n+import com.google.gson.JsonPrimitive;\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.MessageType;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Concrete implementation for {@link LocaleStore}\n+ *\n+ * <p>Stores the locale for entire application and is single point of contact for all locale related\n+ * issues. This class update application locale, notify subscriber in case of locale update and\n+ * returns currently set locale.\n+ */\n+@Slf4j\n+@Singleton\n+public final class LocaleStoreImpl implements LocaleStore {\n+  private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n+  private final Lock readLock = readWriteLock.readLock();\n+  private final Lock writeLock = readWriteLock.writeLock();\n+  private final Locale defaultLocale = new Locale(\"en\", \"en\");\n+  private Communications communication;\n+  private LocaleEnum supportedLocale;\n+  private List<Consumer<Locale>> notifyList = new ArrayList<>();\n+\n+  @Inject\n+  public LocaleStoreImpl(Communications communications) {\n+    this.communication = communications;\n+  }\n+\n+  /**\n+   * Return the application current locale.\n+   *\n+   * @return {@link LocaleEnum}\n+   */\n+  @Override\n+  public LocaleEnum getSupportedLocale() {\n+    readLock.lock();\n+    try {\n+      if (Objects.isNull(supportedLocale))\n+        return Enum.valueOf(LocaleEnum.class, defaultLocale.getCountry().toUpperCase());\n+      return supportedLocale;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc5MDg1OQ=="}, "originalCommit": {"oid": "414d7ab5e61490852e541299e109b18783a91afb"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgzNzIwOA==", "bodyText": "Of course I wrote, end-of-method.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/573#discussion_r510837208", "createdAt": "2020-10-23T12:07:16Z", "author": {"login": "asatklichov"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/messages/LocaleStoreImpl.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.broadcom.lsp.cobol.core.messages;\n+\n+import com.broadcom.lsp.cobol.service.delegates.communications.Communications;\n+import com.google.common.collect.Iterables;\n+import com.google.gson.JsonPrimitive;\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.MessageType;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Concrete implementation for {@link LocaleStore}\n+ *\n+ * <p>Stores the locale for entire application and is single point of contact for all locale related\n+ * issues. This class update application locale, notify subscriber in case of locale update and\n+ * returns currently set locale.\n+ */\n+@Slf4j\n+@Singleton\n+public final class LocaleStoreImpl implements LocaleStore {\n+  private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n+  private final Lock readLock = readWriteLock.readLock();\n+  private final Lock writeLock = readWriteLock.writeLock();\n+  private final Locale defaultLocale = new Locale(\"en\", \"en\");\n+  private Communications communication;\n+  private LocaleEnum supportedLocale;\n+  private List<Consumer<Locale>> notifyList = new ArrayList<>();\n+\n+  @Inject\n+  public LocaleStoreImpl(Communications communications) {\n+    this.communication = communications;\n+  }\n+\n+  /**\n+   * Return the application current locale.\n+   *\n+   * @return {@link LocaleEnum}\n+   */\n+  @Override\n+  public LocaleEnum getSupportedLocale() {\n+    readLock.lock();\n+    try {\n+      if (Objects.isNull(supportedLocale))\n+        return Enum.valueOf(LocaleEnum.class, defaultLocale.getCountry().toUpperCase());\n+      return supportedLocale;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc5MDg1OQ=="}, "originalCommit": {"oid": "414d7ab5e61490852e541299e109b18783a91afb"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTcyMjcxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/messages/LocaleStoreImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDozMjowOVrOHnIPVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMTowNzo0OVrOHnJSdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc5MTUxMQ==", "bodyText": "Why you catch unchecked (runtime) exception?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/573#discussion_r510791511", "createdAt": "2020-10-23T10:32:09Z", "author": {"login": "asatklichov"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/messages/LocaleStoreImpl.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.broadcom.lsp.cobol.core.messages;\n+\n+import com.broadcom.lsp.cobol.service.delegates.communications.Communications;\n+import com.google.common.collect.Iterables;\n+import com.google.gson.JsonPrimitive;\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.MessageType;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Concrete implementation for {@link LocaleStore}\n+ *\n+ * <p>Stores the locale for entire application and is single point of contact for all locale related\n+ * issues. This class update application locale, notify subscriber in case of locale update and\n+ * returns currently set locale.\n+ */\n+@Slf4j\n+@Singleton\n+public final class LocaleStoreImpl implements LocaleStore {\n+  private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n+  private final Lock readLock = readWriteLock.readLock();\n+  private final Lock writeLock = readWriteLock.writeLock();\n+  private final Locale defaultLocale = new Locale(\"en\", \"en\");\n+  private Communications communication;\n+  private LocaleEnum supportedLocale;\n+  private List<Consumer<Locale>> notifyList = new ArrayList<>();\n+\n+  @Inject\n+  public LocaleStoreImpl(Communications communications) {\n+    this.communication = communications;\n+  }\n+\n+  /**\n+   * Return the application current locale.\n+   *\n+   * @return {@link LocaleEnum}\n+   */\n+  @Override\n+  public LocaleEnum getSupportedLocale() {\n+    readLock.lock();\n+    try {\n+      if (Objects.isNull(supportedLocale))\n+        return Enum.valueOf(LocaleEnum.class, defaultLocale.getCountry().toUpperCase());\n+      return supportedLocale;\n+    } finally {\n+      readLock.unlock();\n+    }\n+  }\n+\n+  private void setSupportedLocale(LocaleEnum supportedLocale) {\n+    writeLock.lock();\n+    try {\n+      this.supportedLocale = supportedLocale;\n+    } finally {\n+      writeLock.unlock();\n+    }\n+  }\n+\n+  /**\n+   * Update the locale for an application.\n+   *\n+   * @param locale to be updated.\n+   */\n+  @Override\n+  public void updateLocale(String locale) {\n+    try {\n+      LocaleEnum localeEnum = LocaleEnum.valueOf(locale.toUpperCase());\n+      setSupportedLocale(localeEnum);\n+      Locale updatedLocale = new Locale(locale);\n+      notifyList.forEach(consumer -> consumer.accept(updatedLocale));\n+    } catch (IllegalArgumentException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "414d7ab5e61490852e541299e109b18783a91afb"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgwODY5NQ==", "bodyText": "To catch a scenario of invalid locale ( not supported locale).", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/573#discussion_r510808695", "createdAt": "2020-10-23T11:07:49Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/messages/LocaleStoreImpl.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.broadcom.lsp.cobol.core.messages;\n+\n+import com.broadcom.lsp.cobol.service.delegates.communications.Communications;\n+import com.google.common.collect.Iterables;\n+import com.google.gson.JsonPrimitive;\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.MessageType;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Concrete implementation for {@link LocaleStore}\n+ *\n+ * <p>Stores the locale for entire application and is single point of contact for all locale related\n+ * issues. This class update application locale, notify subscriber in case of locale update and\n+ * returns currently set locale.\n+ */\n+@Slf4j\n+@Singleton\n+public final class LocaleStoreImpl implements LocaleStore {\n+  private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n+  private final Lock readLock = readWriteLock.readLock();\n+  private final Lock writeLock = readWriteLock.writeLock();\n+  private final Locale defaultLocale = new Locale(\"en\", \"en\");\n+  private Communications communication;\n+  private LocaleEnum supportedLocale;\n+  private List<Consumer<Locale>> notifyList = new ArrayList<>();\n+\n+  @Inject\n+  public LocaleStoreImpl(Communications communications) {\n+    this.communication = communications;\n+  }\n+\n+  /**\n+   * Return the application current locale.\n+   *\n+   * @return {@link LocaleEnum}\n+   */\n+  @Override\n+  public LocaleEnum getSupportedLocale() {\n+    readLock.lock();\n+    try {\n+      if (Objects.isNull(supportedLocale))\n+        return Enum.valueOf(LocaleEnum.class, defaultLocale.getCountry().toUpperCase());\n+      return supportedLocale;\n+    } finally {\n+      readLock.unlock();\n+    }\n+  }\n+\n+  private void setSupportedLocale(LocaleEnum supportedLocale) {\n+    writeLock.lock();\n+    try {\n+      this.supportedLocale = supportedLocale;\n+    } finally {\n+      writeLock.unlock();\n+    }\n+  }\n+\n+  /**\n+   * Update the locale for an application.\n+   *\n+   * @param locale to be updated.\n+   */\n+  @Override\n+  public void updateLocale(String locale) {\n+    try {\n+      LocaleEnum localeEnum = LocaleEnum.valueOf(locale.toUpperCase());\n+      setSupportedLocale(localeEnum);\n+      Locale updatedLocale = new Locale(locale);\n+      notifyList.forEach(consumer -> consumer.accept(updatedLocale));\n+    } catch (IllegalArgumentException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc5MTUxMQ=="}, "originalCommit": {"oid": "414d7ab5e61490852e541299e109b18783a91afb"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTcyNTIwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/messages/LocaleStoreImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDozMjo1NVrOHnIQww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMTowODoxN1rOHnJTRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc5MTg3NQ==", "bodyText": "same", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/573#discussion_r510791875", "createdAt": "2020-10-23T10:32:55Z", "author": {"login": "asatklichov"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/messages/LocaleStoreImpl.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.broadcom.lsp.cobol.core.messages;\n+\n+import com.broadcom.lsp.cobol.service.delegates.communications.Communications;\n+import com.google.common.collect.Iterables;\n+import com.google.gson.JsonPrimitive;\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.MessageType;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Concrete implementation for {@link LocaleStore}\n+ *\n+ * <p>Stores the locale for entire application and is single point of contact for all locale related\n+ * issues. This class update application locale, notify subscriber in case of locale update and\n+ * returns currently set locale.\n+ */\n+@Slf4j\n+@Singleton\n+public final class LocaleStoreImpl implements LocaleStore {\n+  private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n+  private final Lock readLock = readWriteLock.readLock();\n+  private final Lock writeLock = readWriteLock.writeLock();\n+  private final Locale defaultLocale = new Locale(\"en\", \"en\");\n+  private Communications communication;\n+  private LocaleEnum supportedLocale;\n+  private List<Consumer<Locale>> notifyList = new ArrayList<>();\n+\n+  @Inject\n+  public LocaleStoreImpl(Communications communications) {\n+    this.communication = communications;\n+  }\n+\n+  /**\n+   * Return the application current locale.\n+   *\n+   * @return {@link LocaleEnum}\n+   */\n+  @Override\n+  public LocaleEnum getSupportedLocale() {\n+    readLock.lock();\n+    try {\n+      if (Objects.isNull(supportedLocale))\n+        return Enum.valueOf(LocaleEnum.class, defaultLocale.getCountry().toUpperCase());\n+      return supportedLocale;\n+    } finally {\n+      readLock.unlock();\n+    }\n+  }\n+\n+  private void setSupportedLocale(LocaleEnum supportedLocale) {\n+    writeLock.lock();\n+    try {\n+      this.supportedLocale = supportedLocale;\n+    } finally {\n+      writeLock.unlock();\n+    }\n+  }\n+\n+  /**\n+   * Update the locale for an application.\n+   *\n+   * @param locale to be updated.\n+   */\n+  @Override\n+  public void updateLocale(String locale) {\n+    try {\n+      LocaleEnum localeEnum = LocaleEnum.valueOf(locale.toUpperCase());\n+      setSupportedLocale(localeEnum);\n+      Locale updatedLocale = new Locale(locale);\n+      notifyList.forEach(consumer -> consumer.accept(updatedLocale));\n+    } catch (IllegalArgumentException e) {\n+      handleUnSupportedLocale(locale);\n+    }\n+  }\n+\n+  /**\n+   * Update the locale for an application.\n+   *\n+   * @param locale to be updated.\n+   */\n+  @Override\n+  public void updateLocale(LocaleEnum locale) {\n+    try {\n+      setSupportedLocale(locale);\n+    } catch (IllegalArgumentException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "414d7ab5e61490852e541299e109b18783a91afb"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgwODkwMQ==", "bodyText": "same case", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/573#discussion_r510808901", "createdAt": "2020-10-23T11:08:17Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/messages/LocaleStoreImpl.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.broadcom.lsp.cobol.core.messages;\n+\n+import com.broadcom.lsp.cobol.service.delegates.communications.Communications;\n+import com.google.common.collect.Iterables;\n+import com.google.gson.JsonPrimitive;\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.MessageType;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Concrete implementation for {@link LocaleStore}\n+ *\n+ * <p>Stores the locale for entire application and is single point of contact for all locale related\n+ * issues. This class update application locale, notify subscriber in case of locale update and\n+ * returns currently set locale.\n+ */\n+@Slf4j\n+@Singleton\n+public final class LocaleStoreImpl implements LocaleStore {\n+  private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n+  private final Lock readLock = readWriteLock.readLock();\n+  private final Lock writeLock = readWriteLock.writeLock();\n+  private final Locale defaultLocale = new Locale(\"en\", \"en\");\n+  private Communications communication;\n+  private LocaleEnum supportedLocale;\n+  private List<Consumer<Locale>> notifyList = new ArrayList<>();\n+\n+  @Inject\n+  public LocaleStoreImpl(Communications communications) {\n+    this.communication = communications;\n+  }\n+\n+  /**\n+   * Return the application current locale.\n+   *\n+   * @return {@link LocaleEnum}\n+   */\n+  @Override\n+  public LocaleEnum getSupportedLocale() {\n+    readLock.lock();\n+    try {\n+      if (Objects.isNull(supportedLocale))\n+        return Enum.valueOf(LocaleEnum.class, defaultLocale.getCountry().toUpperCase());\n+      return supportedLocale;\n+    } finally {\n+      readLock.unlock();\n+    }\n+  }\n+\n+  private void setSupportedLocale(LocaleEnum supportedLocale) {\n+    writeLock.lock();\n+    try {\n+      this.supportedLocale = supportedLocale;\n+    } finally {\n+      writeLock.unlock();\n+    }\n+  }\n+\n+  /**\n+   * Update the locale for an application.\n+   *\n+   * @param locale to be updated.\n+   */\n+  @Override\n+  public void updateLocale(String locale) {\n+    try {\n+      LocaleEnum localeEnum = LocaleEnum.valueOf(locale.toUpperCase());\n+      setSupportedLocale(localeEnum);\n+      Locale updatedLocale = new Locale(locale);\n+      notifyList.forEach(consumer -> consumer.accept(updatedLocale));\n+    } catch (IllegalArgumentException e) {\n+      handleUnSupportedLocale(locale);\n+    }\n+  }\n+\n+  /**\n+   * Update the locale for an application.\n+   *\n+   * @param locale to be updated.\n+   */\n+  @Override\n+  public void updateLocale(LocaleEnum locale) {\n+    try {\n+      setSupportedLocale(locale);\n+    } catch (IllegalArgumentException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc5MTg3NQ=="}, "originalCommit": {"oid": "414d7ab5e61490852e541299e109b18783a91afb"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTcyNjQ4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDozMzoxOVrOHnIRfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDozMzoxOVrOHnIRfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc5MjA2Mg==", "bodyText": "This one is also for logs and doesn't need to localize", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/573#discussion_r510792062", "createdAt": "2020-10-23T10:33:19Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -66,12 +66,12 @@\n     implements TextDocumentService, EventObserver<RunAnalysisEvent> {\n   private static final List<String> COBOL_IDS = Arrays.asList(\"cobol\", \"cbl\", \"cob\");\n   private static final String GIT_FS_URI = \"gitfs:/\";\n-  private static final String GITFS_URI_NOT_SUPPORTED = \"GITFS URI not supported\";\n+  public static final String DESC_ERROR_MSG = \"CobolTextDocumentService.descErrorMsg\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "414d7ab5e61490852e541299e109b18783a91afb"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTczNDI5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/delegates/communications/ServerCommunications.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDozNTo0NVrOHnIWJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDo0MTowNVrOHnIgNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc5MzI1Mw==", "bodyText": "Where do you call this method?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/573#discussion_r510793253", "createdAt": "2020-10-23T10:35:45Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/delegates/communications/ServerCommunications.java", "diffHunk": "@@ -115,7 +118,21 @@ public void notifyThatDocumentAnalysed(String uri) {\n    */\n   @Override\n   public void notifyThatExtensionIsUnsupported(String extension) {\n-    runAsync(() -> logMessage(Error, EXTENSION_UNSUPPORTED + extension));\n+    runAsync(\n+        () ->\n+            logMessage(\n+                Error, messageService.getMessage(\"Communications.extUnsupported\", extension)));\n+  }\n+\n+  /**\n+   * show a supplied message to the client with the supplied {@link MessageType}\n+   *\n+   * @param messageType {@link MessageType}\n+   * @param message to be displayed at client end.\n+   */\n+  @Override\n+  public void notifyGeneralMessage(MessageType messageType, String message) {\n+    runAsync(() -> showMessage(messageType, message));\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "414d7ab5e61490852e541299e109b18783a91afb"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc5NTgyOA==", "bodyText": "https://github.com/ap891843/che-che4z-lsp-for-cobol/blob/dd2e6e91b467b1321b59399fa98cc98f4dc05587/server/src/main/java/com/broadcom/lsp/cobol/core/messages/LocaleStoreImpl.java#L118\nfrom the localeStore, when the user selects a locale not supported yet.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/573#discussion_r510795828", "createdAt": "2020-10-23T10:41:05Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/delegates/communications/ServerCommunications.java", "diffHunk": "@@ -115,7 +118,21 @@ public void notifyThatDocumentAnalysed(String uri) {\n    */\n   @Override\n   public void notifyThatExtensionIsUnsupported(String extension) {\n-    runAsync(() -> logMessage(Error, EXTENSION_UNSUPPORTED + extension));\n+    runAsync(\n+        () ->\n+            logMessage(\n+                Error, messageService.getMessage(\"Communications.extUnsupported\", extension)));\n+  }\n+\n+  /**\n+   * show a supplied message to the client with the supplied {@link MessageType}\n+   *\n+   * @param messageType {@link MessageType}\n+   * @param message to be displayed at client end.\n+   */\n+  @Override\n+  public void notifyGeneralMessage(MessageType messageType, String message) {\n+    runAsync(() -> showMessage(messageType, message));\n   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc5MzI1Mw=="}, "originalCommit": {"oid": "414d7ab5e61490852e541299e109b18783a91afb"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTc2NjU4OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/TestModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDo0NjoyMFrOHnIp5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDo0NjoyMFrOHnIp5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc5ODMxMA==", "bodyText": "\"message/messages\" folders ?\nIn our case they are not messages (JMS, Kafka, or AMQP, ... ), just raw-text, better would be: resourceBundles  or properties", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/573#discussion_r510798310", "createdAt": "2020-10-23T10:46:20Z", "author": {"login": "asatklichov"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/TestModule.java", "diffHunk": "@@ -60,6 +61,9 @@ protected void configure() {\n     bind(String.class)\n         .annotatedWith(named(PATH_TO_TEST_RESOURCES))\n         .toProvider(() -> ofNullable(getProperty(PATH_TO_TEST_RESOURCES)).orElse(\"\"));\n+    bind(LocaleStore.class).to(LocaleStoreImpl.class);\n+    bind(MessageService.class).to(PropertiesMessageService.class);\n+    bind(String.class).annotatedWith(named(\"resourceFileLocation\")).toInstance(\"message/messages\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "414d7ab5e61490852e541299e109b18783a91afb"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTc3MzQ4OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/core/messages/PropertiesMessageServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDo0ODo0NFrOHnIuJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDo0ODo0NFrOHnIuJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc5OTM5Nw==", "bodyText": "LocaleEnum.EN", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/573#discussion_r510799397", "createdAt": "2020-10-23T10:48:44Z", "author": {"login": "asatklichov"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/core/messages/PropertiesMessageServiceTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.broadcom.lsp.cobol.core.messages;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Locale;\n+import java.util.MissingResourceException;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+class PropertiesMessageServiceTest {\n+\n+  private static MessageService messageService;\n+  private LocaleStore localeMock;\n+\n+  @BeforeEach\n+  public void beforeAll() {\n+    localeMock = mock(LocaleStore.class);\n+    when(localeMock.getApplicationLocale()).thenReturn(new Locale(\"en\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "414d7ab5e61490852e541299e109b18783a91afb"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTc5NjY3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/core/strategy/CobolErrorStrategyTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDo1NTo1N1rOHnI8Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMToxNzoxOFrOHnJi7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgwMjk2Nw==", "bodyText": "cameCased: rulereport -> ruleReport", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/573#discussion_r510802967", "createdAt": "2020-10-23T10:55:57Z", "author": {"login": "asatklichov"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/core/strategy/CobolErrorStrategyTest.java", "diffHunk": "@@ -36,7 +39,9 @@ void noViableAltExceptionTest() {\n \n     NoViableAltException error =\n         new NoViableAltException(recognizer, stream, token, token, null, null);\n-    CobolErrorStrategy strategy = new CobolErrorStrategy();\n+    CobolErrorStrategy strategy = new CobolErrorStrategy(messageService);\n+    when(messageService.getMessage(matches(\"ErrorStrategy.rulereportNoViableAlternative\"), anyString()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2e6e91b467b1321b59399fa98cc98f4dc05587"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgxMjkwOA==", "bodyText": "nice catch, its actually a usecase", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/573#discussion_r510812908", "createdAt": "2020-10-23T11:17:18Z", "author": {"login": "ap891843"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/core/strategy/CobolErrorStrategyTest.java", "diffHunk": "@@ -36,7 +39,9 @@ void noViableAltExceptionTest() {\n \n     NoViableAltException error =\n         new NoViableAltException(recognizer, stream, token, token, null, null);\n-    CobolErrorStrategy strategy = new CobolErrorStrategy();\n+    CobolErrorStrategy strategy = new CobolErrorStrategy(messageService);\n+    when(messageService.getMessage(matches(\"ErrorStrategy.rulereportNoViableAlternative\"), anyString()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgwMjk2Nw=="}, "originalCommit": {"oid": "dd2e6e91b467b1321b59399fa98cc98f4dc05587"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3801, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}