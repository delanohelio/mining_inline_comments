{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNTkzNzQ3", "number": 650, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDozMzozMlrOE4sDhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjowOTo1MlrOE7IOKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODc3NTEwOnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/src/services/util/FSUtils.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDozMzozMlrOHywnQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjoyNzo1MlrOH2bf2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4NzMyOA==", "bodyText": "if this if (uri) comes first then no need another if, if (!uri)  can be removed", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/650#discussion_r522987328", "createdAt": "2020-11-13T14:33:32Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/services/util/FSUtils.ts", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+import {URL} from \"url\";\n+import * as path from \"path\";\n+import {readdirSync, existsSync} from \"fs\";\n+import {SettingsUtils} from \"./SettingsUtils\";\n+import * as fs from \"fs\";\n+\n+/**\n+ * This method is responsible to return a valid URI without extension if the extension is not provided or an URI\n+ * that contains an allowed extension.\n+ * @param folder is the first part of the URI referred to the folder defined in the setting.json\n+ * @param entityName is the name of entity identified by the LSP server that needs to be found locally\n+ * @param extensions an optional parameter to produce an URI of an allowed extension list, verifying that\n+ * this URI really exists on FS.\n+ *\n+ */\n+export function getURIFrom(folder: string, entityName: string, extensions?: string[]): URL {\n+    if (!extensions) {\n+        const url = new URL(path.join(folder, entityName));\n+        if (existsSync(url)) {\n+            return url;\n+        }\n+    } else {\n+        const fileList = readdirSync(new URL(folder));\n+        for (const extension of extensions) {\n+            const copybookFileWithExtension = (entityName + extension).toUpperCase();\n+            const found = fileList.find(filename => filename.toUpperCase() === copybookFileWithExtension.toUpperCase())\n+            if (found) {\n+                return new URL(path.join(folder, found));\n+            }\n+        }\n+    }\n+}\n+\n+/**\n+ * This function construct an URI from a valid resource provided from the setting configuration\n+ * @param resource represent the file to search within the workspace folder list\n+ * @return an URI representation of the file or undefined if not found\n+ */\n+export function getURIFromResource(resource: string): URL {\n+    for (const workspaceFolder of SettingsUtils.getWorkspacesURI()) {\n+        const uri: URL = new URL(path.join(workspaceFolder, resource));\n+        if (fs.existsSync(uri)) {\n+            return uri;\n+        }\n+    }\n+}\n+\n+/**\n+ * This method scans the list of folders as given input and find the required entity name within the folder.\n+ * If found returns its URI representation\n+ * @param entityName name of the entity asked by the server\n+ * @param targetFolders list of folders from where to search the copybook\n+ * @param extensions list of extensions\n+ */\n+export function searchInWorkspace(entityName: string, targetFolders: string[], extensions: string[]): string {\n+    if (targetFolders) {\n+        const localFolderList: string[] = targetFolders\n+            .map(getURIFromResource)\n+            .filter((url: URL) => url !== undefined)\n+            .map((url: URL) => url.href);\n+        for (const folder of localFolderList) {\n+            let uri: URL = getURIFrom(folder, entityName);\n+            if (!uri) {\n+                uri = getURIFrom(folder, entityName, extensions);\n+            }\n+            if (uri) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eafebbb92b6641dfe6c4d439809ae9b0cfe0b94b"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzNTY3NQ==", "bodyText": "Maybe I didn't get you right. It can be like this:\n            let uri: URL = getURIFrom(folder, entityName);\n            if (uri) {\n                return uri.href;\n            }\n            uri = getURIFrom(folder, entityName, extensions);\n\nBut after all the uri can be undefined and I need to check it again before the return.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/650#discussion_r526835675", "createdAt": "2020-11-19T12:27:52Z", "author": {"login": "grianbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/services/util/FSUtils.ts", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+import {URL} from \"url\";\n+import * as path from \"path\";\n+import {readdirSync, existsSync} from \"fs\";\n+import {SettingsUtils} from \"./SettingsUtils\";\n+import * as fs from \"fs\";\n+\n+/**\n+ * This method is responsible to return a valid URI without extension if the extension is not provided or an URI\n+ * that contains an allowed extension.\n+ * @param folder is the first part of the URI referred to the folder defined in the setting.json\n+ * @param entityName is the name of entity identified by the LSP server that needs to be found locally\n+ * @param extensions an optional parameter to produce an URI of an allowed extension list, verifying that\n+ * this URI really exists on FS.\n+ *\n+ */\n+export function getURIFrom(folder: string, entityName: string, extensions?: string[]): URL {\n+    if (!extensions) {\n+        const url = new URL(path.join(folder, entityName));\n+        if (existsSync(url)) {\n+            return url;\n+        }\n+    } else {\n+        const fileList = readdirSync(new URL(folder));\n+        for (const extension of extensions) {\n+            const copybookFileWithExtension = (entityName + extension).toUpperCase();\n+            const found = fileList.find(filename => filename.toUpperCase() === copybookFileWithExtension.toUpperCase())\n+            if (found) {\n+                return new URL(path.join(folder, found));\n+            }\n+        }\n+    }\n+}\n+\n+/**\n+ * This function construct an URI from a valid resource provided from the setting configuration\n+ * @param resource represent the file to search within the workspace folder list\n+ * @return an URI representation of the file or undefined if not found\n+ */\n+export function getURIFromResource(resource: string): URL {\n+    for (const workspaceFolder of SettingsUtils.getWorkspacesURI()) {\n+        const uri: URL = new URL(path.join(workspaceFolder, resource));\n+        if (fs.existsSync(uri)) {\n+            return uri;\n+        }\n+    }\n+}\n+\n+/**\n+ * This method scans the list of folders as given input and find the required entity name within the folder.\n+ * If found returns its URI representation\n+ * @param entityName name of the entity asked by the server\n+ * @param targetFolders list of folders from where to search the copybook\n+ * @param extensions list of extensions\n+ */\n+export function searchInWorkspace(entityName: string, targetFolders: string[], extensions: string[]): string {\n+    if (targetFolders) {\n+        const localFolderList: string[] = targetFolders\n+            .map(getURIFromResource)\n+            .filter((url: URL) => url !== undefined)\n+            .map((url: URL) => url.href);\n+        for (const folder of localFolderList) {\n+            let uri: URL = getURIFrom(folder, entityName);\n+            if (!uri) {\n+                uri = getURIFrom(folder, entityName, extensions);\n+            }\n+            if (uri) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4NzMyOA=="}, "originalCommit": {"oid": "eafebbb92b6641dfe6c4d439809ae9b0cfe0b94b"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODg1MzY3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/delegates/validations/UseCaseUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDo1MjoyOVrOHyxXfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjozNDoxNFrOH2b34Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk5OTY3Ng==", "bodyText": "Semantically it would make more sense to pass the subroutine list before the mode because the mode in most cases will be the same.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/650#discussion_r522999676", "createdAt": "2020-11-13T14:52:29Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/service/delegates/validations/UseCaseUtils.java", "diffHunk": "@@ -188,7 +182,7 @@ public static void waitForDiagnostics(TestLanguageClient client) {\n    * @return the entire analysis result\n    */\n   public static AnalysisResult analyze(String fileName, String text, List<CobolText> copybooks) {\n-    return analyze(fileName, text, copybooks, CopybookProcessingMode.ENABLED);\n+    return analyze(fileName, text, copybooks, CopybookProcessingMode.ENABLED, List.of());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eafebbb92b6641dfe6c4d439809ae9b0cfe0b94b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg0MTgyNQ==", "bodyText": "Yes, you are right.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/650#discussion_r526841825", "createdAt": "2020-11-19T12:34:14Z", "author": {"login": "grianbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/service/delegates/validations/UseCaseUtils.java", "diffHunk": "@@ -188,7 +182,7 @@ public static void waitForDiagnostics(TestLanguageClient client) {\n    * @return the entire analysis result\n    */\n   public static AnalysisResult analyze(String fileName, String text, List<CobolText> copybooks) {\n-    return analyze(fileName, text, copybooks, CopybookProcessingMode.ENABLED);\n+    return analyze(fileName, text, copybooks, CopybookProcessingMode.ENABLED, List.of());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk5OTY3Ng=="}, "originalCommit": {"oid": "eafebbb92b6641dfe6c4d439809ae9b0cfe0b94b"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTIzNjU5OnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/src/__tests__/extensionTest.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNjoyNToxMlrOHy1B5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjoxODoxNlrOH2bJ7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA1OTY4Ng==", "bodyText": "Please, remove the commented-out code", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/650#discussion_r523059686", "createdAt": "2020-11-13T16:25:12Z", "author": {"login": "temanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/extensionTest.spec.ts", "diffHunk": "@@ -90,6 +90,7 @@ const middleware: Middleware = new Middleware(new CopybookURI(profileService), c\n const languageClientService: LanguageClientService = new LanguageClientService(middleware);\n languageClientService.checkPrerequisites = jest.fn(() => Promise.resolve());\n languageClientService.start = jest.fn().mockResolvedValue(true);\n+//languageClientService.addRequestHandler = jest.fn();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eafebbb92b6641dfe6c4d439809ae9b0cfe0b94b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzMDA2Mw==", "bodyText": "done", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/650#discussion_r526830063", "createdAt": "2020-11-19T12:18:16Z", "author": {"login": "grianbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/extensionTest.spec.ts", "diffHunk": "@@ -90,6 +90,7 @@ const middleware: Middleware = new Middleware(new CopybookURI(profileService), c\n const languageClientService: LanguageClientService = new LanguageClientService(middleware);\n languageClientService.checkPrerequisites = jest.fn(() => Promise.resolve());\n languageClientService.start = jest.fn().mockResolvedValue(true);\n+//languageClientService.addRequestHandler = jest.fn();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA1OTY4Ng=="}, "originalCommit": {"oid": "eafebbb92b6641dfe6c4d439809ae9b0cfe0b94b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTMzNTQ3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/delegates/references/SubroutineLocations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNjo0OTo1N1rOHy1_Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjoyOToyOFrOH2bjWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA3NTM5MA==", "bodyText": "I see you miss a test for it. Not a big deal though, but we miss coverage here.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/650#discussion_r523075390", "createdAt": "2020-11-13T16:49:57Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/delegates/references/SubroutineLocations.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.broadcom.lsp.cobol.service.delegates.references;\n+\n+import com.broadcom.lsp.cobol.service.CobolDocumentModel;\n+import lombok.NonNull;\n+import org.eclipse.lsp4j.Location;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/** This class is a provider for locations of subroutine defined/used in the document */\n+public class SubroutineLocations implements SemanticLocations {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eafebbb92b6641dfe6c4d439809ae9b0cfe0b94b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzNjU2OQ==", "bodyText": "Done", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/650#discussion_r526836569", "createdAt": "2020-11-19T12:29:28Z", "author": {"login": "grianbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/delegates/references/SubroutineLocations.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.broadcom.lsp.cobol.service.delegates.references;\n+\n+import com.broadcom.lsp.cobol.service.CobolDocumentModel;\n+import lombok.NonNull;\n+import org.eclipse.lsp4j.Location;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/** This class is a provider for locations of subroutine defined/used in the document */\n+public class SubroutineLocations implements SemanticLocations {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA3NTM5MA=="}, "originalCommit": {"oid": "eafebbb92b6641dfe6c4d439809ae9b0cfe0b94b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTg1NzQyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/visitor/CobolVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTo1NDo1NVrOHzxiQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjoyODo0NVrOH2bhyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA1MTAwOQ==", "bodyText": "Subroutine errors are expected to point only to the name, so it would be enough to pass only one Locality and do not apply the interval calculation", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/650#discussion_r524051009", "createdAt": "2020-11-16T09:54:55Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/visitor/CobolVisitor.java", "diffHunk": "@@ -594,6 +622,17 @@ private void reportVariableNotDefined(String dataName, Locality start, Locality\n     errors.add(error);\n   }\n \n+  private void reportSubroutineNotDefined(String name, Locality start, Locality stop) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eafebbb92b6641dfe6c4d439809ae9b0cfe0b94b"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzNjE2OQ==", "bodyText": "Good point. Fixed.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/650#discussion_r526836169", "createdAt": "2020-11-19T12:28:45Z", "author": {"login": "grianbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/visitor/CobolVisitor.java", "diffHunk": "@@ -594,6 +622,17 @@ private void reportVariableNotDefined(String dataName, Locality start, Locality\n     errors.add(error);\n   }\n \n+  private void reportSubroutineNotDefined(String name, Locality start, Locality stop) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA1MTAwOQ=="}, "originalCommit": {"oid": "eafebbb92b6641dfe6c4d439809ae9b0cfe0b94b"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjM2MTQwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/usecases/engine/UseCaseEngine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMToxMDo1NlrOHz2rnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNTowNTozMlrOH2i_DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzNTMyNA==", "bodyText": "Should assert also the subroutine definitions", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/650#discussion_r524135324", "createdAt": "2020-11-16T11:10:56Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/usecases/engine/UseCaseEngine.java", "diffHunk": "@@ -216,6 +245,8 @@ private static void assertResultEquals(AnalysisResult actual, TestData expected)\n     assertResult(\n         \"Section definition:\", expected.getSectionDefinitions(), actual.getSectionDefinitions());\n     assertResult(\"Section usages:\", expected.getSectionUsages(), actual.getSectionUsages());\n+\n+    assertResult(\"Subroutine usage:\", expected.getSubroutineUsages(), actual.getSubroutineUsages());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eafebbb92b6641dfe6c4d439809ae9b0cfe0b94b"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk1ODM0OQ==", "bodyText": "Done", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/650#discussion_r526958349", "createdAt": "2020-11-19T15:05:32Z", "author": {"login": "grianbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/usecases/engine/UseCaseEngine.java", "diffHunk": "@@ -216,6 +245,8 @@ private static void assertResultEquals(AnalysisResult actual, TestData expected)\n     assertResult(\n         \"Section definition:\", expected.getSectionDefinitions(), actual.getSectionDefinitions());\n     assertResult(\"Section usages:\", expected.getSectionUsages(), actual.getSectionUsages());\n+\n+    assertResult(\"Subroutine usage:\", expected.getSubroutineUsages(), actual.getSubroutineUsages());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzNTMyNA=="}, "originalCommit": {"oid": "eafebbb92b6641dfe6c4d439809ae9b0cfe0b94b"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDM2MTM5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/delegates/completions/SubroutineCompletion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjowOTo1MlrOH2mHqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjowOTo1MlrOH2mHqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwOTcwNQ==", "bodyText": "Missing javadoc", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/650#discussion_r527009705", "createdAt": "2020-11-19T16:09:52Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/delegates/completions/SubroutineCompletion.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.broadcom.lsp.cobol.service.delegates.completions;\n+\n+import com.broadcom.lsp.cobol.service.CobolDocumentModel;\n+import com.broadcom.lsp.cobol.service.SubroutineService;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import lombok.NonNull;\n+import org.eclipse.lsp4j.CompletionItemKind;\n+\n+import java.util.Collection;\n+\n+import static com.broadcom.lsp.cobol.service.delegates.completions.CompletionOrder.SUBROUTINES;\n+\n+@Singleton\n+public class SubroutineCompletion implements Completion {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f221cc4c86ab409be5a200598e746b11895c6245"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3854, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}