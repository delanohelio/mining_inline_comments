{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NDk2MDE2", "number": 265, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTo1Njo1N1rODvfK3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMDowMDo0MlrODvfQhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTIwMzUwOnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/delegates/dependency/CopybookDependencyService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTo1Njo1N1rOGB8CZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMDo0MDo0OFrOGB9lLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4NTQxNA==", "bodyText": "This name describes the logic of the method, but not the expected result. It would be better to use something like shouldUpdateDependecies() or any more descriptive name. But it is not obligatory.\nThe real question here is exposing the internal implementation by using a data bus event in the interface. I would prefer to hide it if it is possible", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/265#discussion_r404685414", "createdAt": "2020-04-07T09:56:57Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/delegates/dependency/CopybookDependencyService.java", "diffHunk": "@@ -24,11 +26,14 @@\n  * management\n  */\n public interface CopybookDependencyService {\n+\n+  void addCopybookInDepFile(RequiredCopybookEvent event, String requiredCopybookName);\n+\n+  boolean isFileInDidOpen(RequiredCopybookEvent event);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77cf43a78dfb964480988044f329a86fb4551143"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY5Mjc3OQ==", "bodyText": "Yeah we already agree that is better hide this implementation detail, the problem is that I need PowerMock to do that, and I opened an issue to track the activity to make it private again!", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/265#discussion_r404692779", "createdAt": "2020-04-07T10:09:05Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/delegates/dependency/CopybookDependencyService.java", "diffHunk": "@@ -24,11 +26,14 @@\n  * management\n  */\n public interface CopybookDependencyService {\n+\n+  void addCopybookInDepFile(RequiredCopybookEvent event, String requiredCopybookName);\n+\n+  boolean isFileInDidOpen(RequiredCopybookEvent event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4NTQxNA=="}, "originalCommit": {"oid": "77cf43a78dfb964480988044f329a86fb4551143"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY5NDM3MQ==", "bodyText": "For the naming I could change it no problem but is just check that the enum type for the document is DID_OPEN, I don't see any relation with update the dependency. Furthermore we can in the future use this method for checks not dependent on the dependency file update. Let me know if I miss something from the picture", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/265#discussion_r404694371", "createdAt": "2020-04-07T10:11:45Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/delegates/dependency/CopybookDependencyService.java", "diffHunk": "@@ -24,11 +26,14 @@\n  * management\n  */\n public interface CopybookDependencyService {\n+\n+  void addCopybookInDepFile(RequiredCopybookEvent event, String requiredCopybookName);\n+\n+  boolean isFileInDidOpen(RequiredCopybookEvent event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4NTQxNA=="}, "originalCommit": {"oid": "77cf43a78dfb964480988044f329a86fb4551143"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcxMDcwMQ==", "bodyText": "There is a little difference between the naming by method logic and by its purpose. The first one describes how the method works, and the second one describes the useful outcome of the method. Here I don't really care that processing type was used to invoke this event, the only important thing is if I need to apply some changes according to that.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/265#discussion_r404710701", "createdAt": "2020-04-07T10:40:48Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/delegates/dependency/CopybookDependencyService.java", "diffHunk": "@@ -24,11 +26,14 @@\n  * management\n  */\n public interface CopybookDependencyService {\n+\n+  void addCopybookInDepFile(RequiredCopybookEvent event, String requiredCopybookName);\n+\n+  boolean isFileInDidOpen(RequiredCopybookEvent event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4NTQxNA=="}, "originalCommit": {"oid": "77cf43a78dfb964480988044f329a86fb4551143"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTIxNzk3OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMDowMDo0MlrOGB8LbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMDo0MTo1N1rOGB9npg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4NzcyNQ==", "bodyText": "Why do you need to sort it?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/265#discussion_r404687725", "createdAt": "2020-04-07T10:00:42Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java", "diffHunk": "@@ -85,36 +92,35 @@\n    * the filesystem service capabilities using the physical filesystem\n    */\n   @Before\n-  public void buildFS() {\n-    intializeSettings();\n+  public void buildTempFilesystem() {\n+    intializeSettingsWithSomeContent();\n+\n     createWorkspaceFolderStructure();\n-    createCopybookStructure();\n-    createDependencyFileStructure();\n+    createCopybookFolders();\n+    createDependencyFolder();\n \n-    // populate copybook folder and dependency file with some content\n     createCopybookFiles();\n+    createNestedCopybooks();\n     createDependencyFile();\n   }\n \n   @After\n-  public void cleanupTempFolder() {\n+  public void cleanupTempFilesystem() {\n     try {\n-      Files.walk(getWorkspaceFolderPath())\n-          .sorted(Comparator.reverseOrder())\n-          .map(Path::toFile)\n-          .forEach(File::delete);\n+      deleteFolders();\n     } catch (IOException e) {\n       log.error(e.getMessage());\n     }\n   }\n \n-  /**\n-   * This method define the steps necessary to emulate the json settings provided by the user in the\n-   * settings.json\n-   */\n-  private void intializeSettings() {\n-    // SettingsProvider settingsProvider = new SettingsProvider();\n+  private void deleteFolders() throws IOException {\n+    Files.walk(getWorkspaceFolderPath())\n+        .sorted(Comparator.reverseOrder())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77cf43a78dfb964480988044f329a86fb4551143"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY5OTM0Nw==", "bodyText": "Because I need to remove folders and item recursively.\nSo if I try to remove a non empty folder I got exception. So I ordered to have the files first and then the folder (that will be removed easily since there isn't any file inside of it).\nHere the reference I used in the past.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/265#discussion_r404699347", "createdAt": "2020-04-07T10:20:19Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java", "diffHunk": "@@ -85,36 +92,35 @@\n    * the filesystem service capabilities using the physical filesystem\n    */\n   @Before\n-  public void buildFS() {\n-    intializeSettings();\n+  public void buildTempFilesystem() {\n+    intializeSettingsWithSomeContent();\n+\n     createWorkspaceFolderStructure();\n-    createCopybookStructure();\n-    createDependencyFileStructure();\n+    createCopybookFolders();\n+    createDependencyFolder();\n \n-    // populate copybook folder and dependency file with some content\n     createCopybookFiles();\n+    createNestedCopybooks();\n     createDependencyFile();\n   }\n \n   @After\n-  public void cleanupTempFolder() {\n+  public void cleanupTempFilesystem() {\n     try {\n-      Files.walk(getWorkspaceFolderPath())\n-          .sorted(Comparator.reverseOrder())\n-          .map(Path::toFile)\n-          .forEach(File::delete);\n+      deleteFolders();\n     } catch (IOException e) {\n       log.error(e.getMessage());\n     }\n   }\n \n-  /**\n-   * This method define the steps necessary to emulate the json settings provided by the user in the\n-   * settings.json\n-   */\n-  private void intializeSettings() {\n-    // SettingsProvider settingsProvider = new SettingsProvider();\n+  private void deleteFolders() throws IOException {\n+    Files.walk(getWorkspaceFolderPath())\n+        .sorted(Comparator.reverseOrder())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4NzcyNQ=="}, "originalCommit": {"oid": "77cf43a78dfb964480988044f329a86fb4551143"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcxMTMzNA==", "bodyText": "Nice trick, I didn't know about that", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/265#discussion_r404711334", "createdAt": "2020-04-07T10:41:57Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java", "diffHunk": "@@ -85,36 +92,35 @@\n    * the filesystem service capabilities using the physical filesystem\n    */\n   @Before\n-  public void buildFS() {\n-    intializeSettings();\n+  public void buildTempFilesystem() {\n+    intializeSettingsWithSomeContent();\n+\n     createWorkspaceFolderStructure();\n-    createCopybookStructure();\n-    createDependencyFileStructure();\n+    createCopybookFolders();\n+    createDependencyFolder();\n \n-    // populate copybook folder and dependency file with some content\n     createCopybookFiles();\n+    createNestedCopybooks();\n     createDependencyFile();\n   }\n \n   @After\n-  public void cleanupTempFolder() {\n+  public void cleanupTempFilesystem() {\n     try {\n-      Files.walk(getWorkspaceFolderPath())\n-          .sorted(Comparator.reverseOrder())\n-          .map(Path::toFile)\n-          .forEach(File::delete);\n+      deleteFolders();\n     } catch (IOException e) {\n       log.error(e.getMessage());\n     }\n   }\n \n-  /**\n-   * This method define the steps necessary to emulate the json settings provided by the user in the\n-   * settings.json\n-   */\n-  private void intializeSettings() {\n-    // SettingsProvider settingsProvider = new SettingsProvider();\n+  private void deleteFolders() throws IOException {\n+    Files.walk(getWorkspaceFolderPath())\n+        .sorted(Comparator.reverseOrder())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4NzcyNQ=="}, "originalCommit": {"oid": "77cf43a78dfb964480988044f329a86fb4551143"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4001, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}