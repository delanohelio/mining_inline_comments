{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MjY4MDE0", "number": 608, "title": "Add Language Features Support for Sections #502", "bodyText": "Implement completion and definition/reference support for sections inside the PROCEDURE DIVISION", "createdAt": "2020-11-04T09:55:28Z", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608", "merged": true, "mergeCommit": {"oid": "a4ccac1541c9c5cbd9f36bf528e30fd611bb0d87"}, "closed": true, "closedAt": "2020-11-05T12:37:27Z", "author": {"login": "Nurkambay"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZKvhdAFqTUyMzIwMzIyOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZhNMMgBqjM5NjIwNjIzMzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMjAzMjI5", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#pullrequestreview-523203229", "createdAt": "2020-11-04T09:56:18Z", "commit": {"oid": "77cbb63f7ca65ac0c2816b3f014e41989b167e52"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwOTo1NjoxOFrOHtQ0Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwOTo1NjoxOFrOHtQ0Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIyMzQzOA==", "bodyText": "private is not needed for @Value annotation", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#discussion_r517223438", "createdAt": "2020-11-04T09:56:18Z", "author": {"login": "Nurkambay"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/semantics/SemanticContext.java", "diffHunk": "@@ -29,15 +30,18 @@\n  * variables, paragraphs, copybooks etc., with their definitions and usages.\n  */\n @Value\n+@Builder\n @AllArgsConstructor\n public class SemanticContext {\n-  private Map<String, Collection<Location>> variableDefinitions;\n-  private Map<String, Collection<Location>> variableUsages;\n-  private Map<String, Collection<Location>> paragraphDefinitions;\n-  private Map<String, Collection<Location>> paragraphUsages;\n-  private Map<String, Collection<Location>> constantDefinitions;\n-  private Map<String, Collection<Location>> constantUsages;\n-  private Map<String, Collection<Location>> copybookDefinitions;\n-  private Map<String, Collection<Location>> copybookUsages;\n-  private List<DocumentSymbol> outlineTree;\n+  Map<String, Collection<Location>> variableDefinitions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77cbb63f7ca65ac0c2816b3f014e41989b167e52"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMjAzNjUx", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#pullrequestreview-523203651", "createdAt": "2020-11-04T09:56:48Z", "commit": {"oid": "77cbb63f7ca65ac0c2816b3f014e41989b167e52"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwOTo1Njo0OVrOHtQ1Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwOTo1Njo0OVrOHtQ1Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIyMzczOA==", "bodyText": "Maybe the order should be different", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#discussion_r517223738", "createdAt": "2020-11-04T09:56:49Z", "author": {"login": "Nurkambay"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/delegates/completions/CompletionOrder.java", "diffHunk": "@@ -19,6 +19,7 @@\n public enum CompletionOrder {\n   VARIABLES,\n   PARAGRAPHS,\n+  SECTIONS,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77cbb63f7ca65ac0c2816b3f014e41989b167e52"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMjA2NDQy", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#pullrequestreview-523206442", "createdAt": "2020-11-04T10:00:01Z", "commit": {"oid": "77cbb63f7ca65ac0c2816b3f014e41989b167e52"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDowMDowMVrOHtQ9zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDowMDowMVrOHtQ9zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIyNTkzNQ==", "bodyText": "Builder better for a big list of parameters", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#discussion_r517225935", "createdAt": "2020-11-04T10:00:01Z", "author": {"login": "Nurkambay"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/core/engine/CobolLanguageEngineTest.java", "diffHunk": "@@ -132,18 +132,21 @@ void testLanguageEngineRun() {\n                         List.of()))));\n \n     ResultWithErrors<SemanticContext> expected =\n-        new ResultWithErrors<>(\n-            new SemanticContext(\n-                Map.of(),\n-                Map.of(),\n-                Map.of(),\n-                Map.of(),\n-                getConstantDefinitions(),\n-                Map.of(),\n-                Map.of(),\n-                Map.of(),\n-                expectedOutlineTree),\n-            List.of(error));\n+            new ResultWithErrors<>(\n+                    SemanticContext.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77cbb63f7ca65ac0c2816b3f014e41989b167e52"}, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "77cbb63f7ca65ac0c2816b3f014e41989b167e52", "author": {"user": {"login": "Nurkambay", "name": "Leonid Baranov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/77cbb63f7ca65ac0c2816b3f014e41989b167e52", "committedDate": "2020-11-04T09:53:05Z", "message": "feat: Add Language Features Support for Sections #502\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>"}, "afterCommit": {"oid": "080e9e324aca5e0fa9069794f2dfa5fdb8daabef", "author": {"user": {"login": "Nurkambay", "name": "Leonid Baranov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/080e9e324aca5e0fa9069794f2dfa5fdb8daabef", "committedDate": "2020-11-04T10:00:36Z", "message": "feat: Add Language Features Support for Sections #502\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "080e9e324aca5e0fa9069794f2dfa5fdb8daabef", "author": {"user": {"login": "Nurkambay", "name": "Leonid Baranov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/080e9e324aca5e0fa9069794f2dfa5fdb8daabef", "committedDate": "2020-11-04T10:00:36Z", "message": "feat: Add Language Features Support for Sections #502\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>"}, "afterCommit": {"oid": "7aba39f611bebd601115363210e4d790ae702844", "author": {"user": {"login": "Nurkambay", "name": "Leonid Baranov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/7aba39f611bebd601115363210e4d790ae702844", "committedDate": "2020-11-04T10:29:19Z", "message": "feat: Add Language Features Support for Sections #502\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMjEwMjAz", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#pullrequestreview-523210203", "createdAt": "2020-11-04T10:04:40Z", "commit": {"oid": "080e9e324aca5e0fa9069794f2dfa5fdb8daabef"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDowNDo0MFrOHtRIyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDozMzoxN1rOHtSOOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIyODc0Ng==", "bodyText": "@AllArgsConstructor can be removed, added as a part of @value", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#discussion_r517228746", "createdAt": "2020-11-04T10:04:40Z", "author": {"login": "asatklichov"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/semantics/SemanticContext.java", "diffHunk": "@@ -29,15 +30,18 @@\n  * variables, paragraphs, copybooks etc., with their definitions and usages.\n  */\n @Value\n+@Builder\n @AllArgsConstructor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080e9e324aca5e0fa9069794f2dfa5fdb8daabef"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzMDQwNQ==", "bodyText": "Why not  List ?  in UseCasePreprocessorListener, AnalysisResult they are List, so better to keep same", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#discussion_r517230405", "createdAt": "2020-11-04T10:07:18Z", "author": {"login": "asatklichov"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/semantics/SemanticContext.java", "diffHunk": "@@ -29,15 +30,18 @@\n  * variables, paragraphs, copybooks etc., with their definitions and usages.\n  */\n @Value\n+@Builder\n @AllArgsConstructor\n public class SemanticContext {\n-  private Map<String, Collection<Location>> variableDefinitions;\n-  private Map<String, Collection<Location>> variableUsages;\n-  private Map<String, Collection<Location>> paragraphDefinitions;\n-  private Map<String, Collection<Location>> paragraphUsages;\n-  private Map<String, Collection<Location>> constantDefinitions;\n-  private Map<String, Collection<Location>> constantUsages;\n-  private Map<String, Collection<Location>> copybookDefinitions;\n-  private Map<String, Collection<Location>> copybookUsages;\n-  private List<DocumentSymbol> outlineTree;\n+  Map<String, Collection<Location>> variableDefinitions;\n+  Map<String, Collection<Location>> variableUsages;\n+  Map<String, Collection<Location>> paragraphDefinitions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080e9e324aca5e0fa9069794f2dfa5fdb8daabef"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzMzY1Mw==", "bodyText": "@nonnull is non-consistent here, because of  ofNullable (yes empty value returned).  Moreover as in SectionLocations class you can add: @nonnull CobolDocumentModel", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#discussion_r517233653", "createdAt": "2020-11-04T10:12:37Z", "author": {"login": "asatklichov"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/delegates/completions/SectionCompletion.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.broadcom.lsp.cobol.service.delegates.completions;\n+\n+import com.broadcom.lsp.cobol.service.CobolDocumentModel;\n+import com.broadcom.lsp.cobol.service.delegates.validations.AnalysisResult;\n+import com.google.inject.Singleton;\n+import lombok.NonNull;\n+import org.eclipse.lsp4j.CompletionItemKind;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n+\n+import static com.broadcom.lsp.cobol.service.delegates.completions.CompletionOrder.SECTIONS;\n+\n+/**\n+ * Provide completion functionality for sections\n+ */\n+@Singleton\n+public class SectionCompletion implements Completion {\n+\n+  @NonNull\n+  @Override\n+  public Collection<String> getCompletionSource(CobolDocumentModel document) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080e9e324aca5e0fa9069794f2dfa5fdb8daabef"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzNzMyNA==", "bodyText": "I suggest to introduce constructor (chain) to which provides all theses init-values by default. Otherwise it will be reteated all the like this way.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#discussion_r517237324", "createdAt": "2020-11-04T10:18:45Z", "author": {"login": "asatklichov"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/delegates/validations/AnalysisResult.java", "diffHunk": "@@ -30,23 +29,25 @@\n  * Diagnostic} grouped by related documents, all the\n  */\n @Value\n-@AllArgsConstructor\n @Builder(toBuilder = true)\n public class AnalysisResult {\n-  private Map<String, List<Diagnostic>> diagnostics;\n-  private Map<String, List<Location>> variableDefinitions;\n-  private Map<String, List<Location>> variableUsages;\n-  private Map<String, List<Location>> paragraphDefinitions;\n-  private Map<String, List<Location>> paragraphUsages;\n-  private Map<String, List<Location>> constantDefinitions;\n-  private Map<String, List<Location>> constantUsages;\n-  private Map<String, List<Location>> copybookDefinitions;\n-  private Map<String, List<Location>> copybookUsages;\n-  private List<DocumentSymbol> outlineTree;\n+  Map<String, List<Diagnostic>> diagnostics;\n+  Map<String, List<Location>> variableDefinitions;\n+  Map<String, List<Location>> variableUsages;\n+  Map<String, List<Location>> paragraphDefinitions;\n+  Map<String, List<Location>> paragraphUsages;\n+  Map<String, List<Location>> sectionDefinitions;\n+  Map<String, List<Location>> sectionUsages;\n+  Map<String, List<Location>> constantDefinitions;\n+  Map<String, List<Location>> constantUsages;\n+  Map<String, List<Location>> copybookDefinitions;\n+  Map<String, List<Location>> copybookUsages;\n+  List<DocumentSymbol> outlineTree;\n \n   public static AnalysisResult empty() {\n     return new AnalysisResult(\n-        Map.of(), Map.of(), Map.of(), Map.of(), Map.of(), Map.of(), Map.of(), Map.of(), Map.of(),\n+        Map.of(), Map.of(), Map.of(), Map.of(), Map.of(), Map.of(),  Map.of(), Map.of(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080e9e324aca5e0fa9069794f2dfa5fdb8daabef"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0MTMzMA==", "bodyText": "Defining Builder with default values(Map.of()) would help here not to repeat Map.of()", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#discussion_r517241330", "createdAt": "2020-11-04T10:25:04Z", "author": {"login": "asatklichov"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/core/engine/CobolLanguageEngineTest.java", "diffHunk": "@@ -132,18 +132,21 @@ void testLanguageEngineRun() {\n                         List.of()))));\n \n     ResultWithErrors<SemanticContext> expected =\n-        new ResultWithErrors<>(\n-            new SemanticContext(\n-                Map.of(),\n-                Map.of(),\n-                Map.of(),\n-                Map.of(),\n-                getConstantDefinitions(),\n-                Map.of(),\n-                Map.of(),\n-                Map.of(),\n-                expectedOutlineTree),\n-            List.of(error));\n+            new ResultWithErrors<>(\n+                    SemanticContext.builder()\n+                            .constantDefinitions(getConstantDefinitions())\n+                            .outlineTree(expectedOutlineTree)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080e9e324aca5e0fa9069794f2dfa5fdb8daabef"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0MjY4Mw==", "bodyText": "new Completions(Set.of(new SectionCompletion()) so above two lines can be removed", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#discussion_r517242683", "createdAt": "2020-11-04T10:27:09Z", "author": {"login": "asatklichov"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/service/delegates/completions/SectionCompletionTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.broadcom.lsp.cobol.service.delegates.completions;\n+\n+import com.broadcom.lsp.cobol.service.CobolDocumentModel;\n+import com.broadcom.lsp.cobol.service.delegates.validations.AnalysisResult;\n+import org.eclipse.lsp4j.*;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.*;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/** Test to check SectionCompletion */\n+class SectionCompletionTest {\n+    private static final String TEXT =\n+            \"       Identification Division. \\n\"\n+                    + \"       Program-id.    ProgramId.\\n\"\n+                    + \"       Data Division.\\n\"\n+                    + \"       Working-Storage Section.\\n\"\n+                    + \"       01   outer1.\\n\"\n+                    + \"        02   INNER1      PIC 9(4) Binary. \\n\"\n+                    + \"        02   inner2      PIC X(10).\\n\"\n+                    + \"       Procedure Division section.\\n\"\n+                    + \"       000-Main-Logic Section.\\n\"\n+                    + \"           Perform 100-Test.\\n\"\n+                    + \"           Stop Run.\\n\"\n+                    + \"       100-Test Section.\\n\"\n+                    + \"           Move INNER1 of OUTER1 to Str.\\n\"\n+                    + \"       End program ProgramId.\";\n+\n+    /**\n+     * this test creates a test document, scans it for section names, adds them to completionItems,\n+     * then attempts to find the expected output\n+     */\n+    @Test\n+    void testSectionCompletion() {\n+        CobolDocumentModel document = createModel();\n+\n+        Set<Completion> completionSet = new HashSet<>();\n+        completionSet.add(new SectionCompletion());\n+        Completions completions = new Completions(completionSet);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080e9e324aca5e0fa9069794f2dfa5fdb8daabef"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0MzM4Nw==", "bodyText": "or logic here can be extracted as a method and can be re-used on below assertion as well", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#discussion_r517243387", "createdAt": "2020-11-04T10:28:18Z", "author": {"login": "asatklichov"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/service/delegates/completions/SectionCompletionTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.broadcom.lsp.cobol.service.delegates.completions;\n+\n+import com.broadcom.lsp.cobol.service.CobolDocumentModel;\n+import com.broadcom.lsp.cobol.service.delegates.validations.AnalysisResult;\n+import org.eclipse.lsp4j.*;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.*;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/** Test to check SectionCompletion */\n+class SectionCompletionTest {\n+    private static final String TEXT =\n+            \"       Identification Division. \\n\"\n+                    + \"       Program-id.    ProgramId.\\n\"\n+                    + \"       Data Division.\\n\"\n+                    + \"       Working-Storage Section.\\n\"\n+                    + \"       01   outer1.\\n\"\n+                    + \"        02   INNER1      PIC 9(4) Binary. \\n\"\n+                    + \"        02   inner2      PIC X(10).\\n\"\n+                    + \"       Procedure Division section.\\n\"\n+                    + \"       000-Main-Logic Section.\\n\"\n+                    + \"           Perform 100-Test.\\n\"\n+                    + \"           Stop Run.\\n\"\n+                    + \"       100-Test Section.\\n\"\n+                    + \"           Move INNER1 of OUTER1 to Str.\\n\"\n+                    + \"       End program ProgramId.\";\n+\n+    /**\n+     * this test creates a test document, scans it for section names, adds them to completionItems,\n+     * then attempts to find the expected output\n+     */\n+    @Test\n+    void testSectionCompletion() {\n+        CobolDocumentModel document = createModel();\n+\n+        Set<Completion> completionSet = new HashSet<>();\n+        completionSet.add(new SectionCompletion());\n+        Completions completions = new Completions(completionSet);\n+        List<CompletionItem> completionItems =\n+                completions.collectFor(document, createCompletionParams()).getItems();\n+\n+        assertEquals(2, completionItems.size());\n+        assertTrue(\n+                completionItems.get(0).getLabel().contains(\"100-Test\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080e9e324aca5e0fa9069794f2dfa5fdb8daabef"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0NTczNQ==", "bodyText": "This if condition, itself can be asserted, so test continues", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#discussion_r517245735", "createdAt": "2020-11-04T10:31:57Z", "author": {"login": "asatklichov"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/usecases/engine/UseCaseEngine.java", "diffHunk": "@@ -209,10 +210,17 @@ private static void assertResultEquals(AnalysisResult actual, TestData expected)\n     assertResult(\"Constant usages:\", expected.getConstantUsages(), actual.getConstantUsages());\n \n     assertResult(\n-        \"Paragraph definition:\",\n-        expected.getParagraphDefinitions(),\n-        actual.getParagraphDefinitions());\n-    assertResult(\"Paragraph usage:\", expected.getParagraphUsages(), actual.getParagraphUsages());\n+        \"Paragraph definition:\", expected.getParagraphDefinitions(), actual.getParagraphDefinitions());\n+\n+    if (!actual.getParagraphUsages().equals(actual.getSectionUsages())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aba39f611bebd601115363210e4d790ae702844"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0NjUyMw==", "bodyText": "This if condition, itself can be asserted, so test continues;", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#discussion_r517246523", "createdAt": "2020-11-04T10:33:17Z", "author": {"login": "asatklichov"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/usecases/engine/UseCaseEngine.java", "diffHunk": "@@ -209,10 +210,17 @@ private static void assertResultEquals(AnalysisResult actual, TestData expected)\n     assertResult(\"Constant usages:\", expected.getConstantUsages(), actual.getConstantUsages());\n \n     assertResult(\n-        \"Paragraph definition:\",\n-        expected.getParagraphDefinitions(),\n-        actual.getParagraphDefinitions());\n-    assertResult(\"Paragraph usage:\", expected.getParagraphUsages(), actual.getParagraphUsages());\n+        \"Paragraph definition:\", expected.getParagraphDefinitions(), actual.getParagraphDefinitions());\n+\n+    if (!actual.getParagraphUsages().equals(actual.getSectionUsages())) {\n+      assertResult(\"Paragraph usages:\", expected.getParagraphUsages(), actual.getParagraphUsages());\n+    }\n+\n+    if (expected.getSectionDefinitions().size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aba39f611bebd601115363210e4d790ae702844"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMjE3MDUy", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#pullrequestreview-523217052", "createdAt": "2020-11-04T10:13:28Z", "commit": {"oid": "080e9e324aca5e0fa9069794f2dfa5fdb8daabef"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDoxMzoyOFrOHtRdzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDoyNzo1NFrOHtSBAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzNDEyNg==", "bodyText": "It is ok", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#discussion_r517234126", "createdAt": "2020-11-04T10:13:28Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/delegates/completions/CompletionOrder.java", "diffHunk": "@@ -19,6 +19,7 @@\n public enum CompletionOrder {\n   VARIABLES,\n   PARAGRAPHS,\n+  SECTIONS,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIyMzczOA=="}, "originalCommit": {"oid": "77cbb63f7ca65ac0c2816b3f014e41989b167e52"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzNTc3NQ==", "bodyText": "To differ from the paragraphs, I would suggest using CompletionItemKind.Function here", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#discussion_r517235775", "createdAt": "2020-11-04T10:16:04Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/delegates/completions/SectionCompletion.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.broadcom.lsp.cobol.service.delegates.completions;\n+\n+import com.broadcom.lsp.cobol.service.CobolDocumentModel;\n+import com.broadcom.lsp.cobol.service.delegates.validations.AnalysisResult;\n+import com.google.inject.Singleton;\n+import lombok.NonNull;\n+import org.eclipse.lsp4j.CompletionItemKind;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n+\n+import static com.broadcom.lsp.cobol.service.delegates.completions.CompletionOrder.SECTIONS;\n+\n+/**\n+ * Provide completion functionality for sections\n+ */\n+@Singleton\n+public class SectionCompletion implements Completion {\n+\n+  @NonNull\n+  @Override\n+  public Collection<String> getCompletionSource(CobolDocumentModel document) {\n+    return Optional.ofNullable(document)\n+        .map(CobolDocumentModel::getAnalysisResult)\n+        .map(AnalysisResult::getSections)\n+        .orElse(Collections.emptySet());\n+  }\n+\n+  @NonNull\n+  @Override\n+  public String getSortOrderPrefix() {\n+    return SECTIONS.prefix;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public CompletionItemKind getKind() {\n+    return CompletionItemKind.Method;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080e9e324aca5e0fa9069794f2dfa5fdb8daabef"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0MzEzNw==", "bodyText": "This is not really representative, better using somethin like assertThat(list, contains(\"foo\", \"boo\")); from Hamcrest", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#discussion_r517243137", "createdAt": "2020-11-04T10:27:54Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/service/delegates/completions/SectionCompletionTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.broadcom.lsp.cobol.service.delegates.completions;\n+\n+import com.broadcom.lsp.cobol.service.CobolDocumentModel;\n+import com.broadcom.lsp.cobol.service.delegates.validations.AnalysisResult;\n+import org.eclipse.lsp4j.*;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.*;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/** Test to check SectionCompletion */\n+class SectionCompletionTest {\n+    private static final String TEXT =\n+            \"       Identification Division. \\n\"\n+                    + \"       Program-id.    ProgramId.\\n\"\n+                    + \"       Data Division.\\n\"\n+                    + \"       Working-Storage Section.\\n\"\n+                    + \"       01   outer1.\\n\"\n+                    + \"        02   INNER1      PIC 9(4) Binary. \\n\"\n+                    + \"        02   inner2      PIC X(10).\\n\"\n+                    + \"       Procedure Division section.\\n\"\n+                    + \"       000-Main-Logic Section.\\n\"\n+                    + \"           Perform 100-Test.\\n\"\n+                    + \"           Stop Run.\\n\"\n+                    + \"       100-Test Section.\\n\"\n+                    + \"           Move INNER1 of OUTER1 to Str.\\n\"\n+                    + \"       End program ProgramId.\";\n+\n+    /**\n+     * this test creates a test document, scans it for section names, adds them to completionItems,\n+     * then attempts to find the expected output\n+     */\n+    @Test\n+    void testSectionCompletion() {\n+        CobolDocumentModel document = createModel();\n+\n+        Set<Completion> completionSet = new HashSet<>();\n+        completionSet.add(new SectionCompletion());\n+        Completions completions = new Completions(completionSet);\n+        List<CompletionItem> completionItems =\n+                completions.collectFor(document, createCompletionParams()).getItems();\n+\n+        assertEquals(2, completionItems.size());\n+        assertTrue(\n+                completionItems.get(0).getLabel().contains(\"100-Test\")\n+                        || completionItems.get(0).getLabel().contains(\"000-Main-Logic\"),\n+                \"100-Test\");\n+        assertTrue(\n+                completionItems.get(1).getLabel().contains(\"100-Test\")\n+                        || completionItems.get(1).getLabel().contains(\"000-Main-Logic\"),\n+                \"000-Main-Logic\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080e9e324aca5e0fa9069794f2dfa5fdb8daabef"}, "originalPosition": 53}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7aba39f611bebd601115363210e4d790ae702844", "author": {"user": {"login": "Nurkambay", "name": "Leonid Baranov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/7aba39f611bebd601115363210e4d790ae702844", "committedDate": "2020-11-04T10:29:19Z", "message": "feat: Add Language Features Support for Sections #502\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>"}, "afterCommit": {"oid": "efb119fa0267b9b71231aa1b3b86498c8315e549", "author": {"user": {"login": "Nurkambay", "name": "Leonid Baranov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/efb119fa0267b9b71231aa1b3b86498c8315e549", "committedDate": "2020-11-04T11:05:11Z", "message": "feat: Add Language Features Support for Sections #502\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "efb119fa0267b9b71231aa1b3b86498c8315e549", "author": {"user": {"login": "Nurkambay", "name": "Leonid Baranov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/efb119fa0267b9b71231aa1b3b86498c8315e549", "committedDate": "2020-11-04T11:05:11Z", "message": "feat: Add Language Features Support for Sections #502\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>"}, "afterCommit": {"oid": "4c0ab2807c9c5b69fa9f662207e0dc50554d8661", "author": {"user": {"login": "Nurkambay", "name": "Leonid Baranov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/4c0ab2807c9c5b69fa9f662207e0dc50554d8661", "committedDate": "2020-11-04T11:41:50Z", "message": "feat: Add Language Features Support for Sections #502\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMjk1MjQz", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#pullrequestreview-523295243", "createdAt": "2020-11-04T11:59:19Z", "commit": {"oid": "4c0ab2807c9c5b69fa9f662207e0dc50554d8661"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c0ab2807c9c5b69fa9f662207e0dc50554d8661", "author": {"user": {"login": "Nurkambay", "name": "Leonid Baranov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/4c0ab2807c9c5b69fa9f662207e0dc50554d8661", "committedDate": "2020-11-04T11:41:50Z", "message": "feat: Add Language Features Support for Sections #502\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>"}, "afterCommit": {"oid": "555f16bf725cbee819a0482a529f31f387fe5c0d", "author": {"user": {"login": "Nurkambay", "name": "Leonid Baranov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/555f16bf725cbee819a0482a529f31f387fe5c0d", "committedDate": "2020-11-04T14:38:21Z", "message": "feat: Add Language Features Support for Sections #502\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "555f16bf725cbee819a0482a529f31f387fe5c0d", "author": {"user": {"login": "Nurkambay", "name": "Leonid Baranov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/555f16bf725cbee819a0482a529f31f387fe5c0d", "committedDate": "2020-11-04T14:38:21Z", "message": "feat: Add Language Features Support for Sections #502\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>"}, "afterCommit": {"oid": "da52da94c16eec194bda9c33c887545d596febea", "author": {"user": {"login": "Nurkambay", "name": "Leonid Baranov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/da52da94c16eec194bda9c33c887545d596febea", "committedDate": "2020-11-04T14:45:48Z", "message": "feat: Add Language Features Support for Sections #502\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNDI4NjU0", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#pullrequestreview-523428654", "createdAt": "2020-11-04T14:44:57Z", "commit": {"oid": "555f16bf725cbee819a0482a529f31f387fe5c0d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo0NTo0OVrOHtbWCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo1Njo1NlrOHtb2Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM5NTk3Ng==", "bodyText": "Please, provide javadocs for the class and all the public methods", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#discussion_r517395976", "createdAt": "2020-11-04T14:45:49Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/semantics/GroupContext.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.broadcom.lsp.cobol.core.semantics;\n+\n+import com.broadcom.lsp.cobol.core.messages.MessageService;\n+import com.broadcom.lsp.cobol.core.model.ErrorSeverity;\n+import com.broadcom.lsp.cobol.core.model.Locality;\n+import com.broadcom.lsp.cobol.core.model.SyntaxError;\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import lombok.NoArgsConstructor;\n+import org.eclipse.lsp4j.Location;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+@NoArgsConstructor\n+public class GroupContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555f16bf725cbee819a0482a529f31f387fe5c0d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwMTA3OQ==", "bodyText": "Please, add a javadoc here.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#discussion_r517401079", "createdAt": "2020-11-04T14:52:50Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/core/semantics/GroupContextTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.broadcom.lsp.cobol.core.semantics;\n+\n+import com.broadcom.lsp.cobol.core.model.Locality;\n+import org.eclipse.lsp4j.Location;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class GroupContextTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da52da94c16eec194bda9c33c887545d596febea"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwMTQwNw==", "bodyText": "Please, cover this method with a test", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#discussion_r517401407", "createdAt": "2020-11-04T14:53:18Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/semantics/GroupContext.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.broadcom.lsp.cobol.core.semantics;\n+\n+import com.broadcom.lsp.cobol.core.messages.MessageService;\n+import com.broadcom.lsp.cobol.core.model.ErrorSeverity;\n+import com.broadcom.lsp.cobol.core.model.Locality;\n+import com.broadcom.lsp.cobol.core.model.SyntaxError;\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import lombok.NoArgsConstructor;\n+import org.eclipse.lsp4j.Location;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+@NoArgsConstructor\n+public class GroupContext {\n+  private final Multimap<String, Location> sections = HashMultimap.create();\n+  private final Multimap<String, Location> paragraphs = HashMultimap.create();\n+\n+  private final Multimap<String, Locality> candidateUsageLocalities = HashMultimap.create();\n+\n+  public void addSectionDefinition(String name, Locality locality) {\n+    sections.put(name, locality.toLocation());\n+  }\n+\n+  public void addParagraphDefinition(String name, Locality locality) {\n+    paragraphs.put(name, locality.toLocation());\n+  }\n+\n+  public void addCandidateUsage(String name, Locality locality) {\n+    candidateUsageLocalities.put(name, locality);\n+  }\n+\n+  public Map<String, Collection<Location>> getParagraphDefinitions() {\n+    return paragraphs.asMap();\n+  }\n+\n+  public Map<String, Collection<Location>> getSectionDefinitions() {\n+    return sections.asMap();\n+  }\n+\n+  public Map<String, Collection<Location>> getParagraphUsages() {\n+    return prepareUsages(paragraphs.keySet());\n+  }\n+\n+  public Map<String, Collection<Location>> getSectionUsages() {\n+    return prepareUsages(sections.keySet());\n+  }\n+\n+  public List<SyntaxError> generateParagraphErrors(MessageService messageService) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da52da94c16eec194bda9c33c887545d596febea"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwMjgxMQ==", "bodyText": "Why did you replace it?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#discussion_r517402811", "createdAt": "2020-11-04T14:55:07Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/usecases/TestParagraphNotDefined.java", "diffHunk": "@@ -1,38 +1,47 @@\n package com.broadcom.lsp.cobol.usecases;\n \n-import com.broadcom.lsp.cobol.service.delegates.validations.SourceInfoLevels;\n-import com.broadcom.lsp.cobol.usecases.engine.UseCaseEngine;\n import org.eclipse.lsp4j.Diagnostic;\n-import org.eclipse.lsp4j.DiagnosticSeverity;\n-import org.eclipse.lsp4j.Position;\n import org.eclipse.lsp4j.Range;\n import org.junit.jupiter.api.Test;\n \n import java.util.List;\n-import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n \n /** This test checks that performing not defined paragraph causes a diagnostic error */\n-class TestParagraphNotDefined {\n+class TestParagraphNotDefined extends NegativeUseCase {\n   private static final String TEXT =\n       \"        IDENTIFICATION DIVISION.\\r\\n\"\n           + \"        PROGRAM-ID. test1.\\r\\n\"\n           + \"        DATA DIVISION.\\r\\n\"\n           + \"        WORKING-STORAGE SECTION.\\r\\n\"\n           + \"        PROCEDURE DIVISION.\\r\\n\"\n-          + \"        {#*PROGA}.\\r\\n\"\n-          + \"           PERFORM {#PRINT-DATA|1}.\";\n+          + \"        PROGA.\\r\\n\"\n+          + \"           PERFORM PRINT-DATA.\";\n+\n+  TestParagraphNotDefined() {\n+    super(TEXT);\n+  }\n+\n \n   @Test\n-  void test() {\n-    UseCaseEngine.runTest(\n-        TEXT,\n-        List.of(),\n-        Map.of(\n-            \"1\",\n-            new Diagnostic(\n-                null,\n-                \"The following paragraph is not defined: PRINT-DATA\",\n-                DiagnosticSeverity.Error,\n-                SourceInfoLevels.ERROR.getText())));\n+  public void test() {\n+    super.test();\n+  }\n+\n+  @Override\n+  protected void assertDiagnostics(List<Diagnostic> diagnostics) {\n+    {\n+      assertEquals(1, diagnostics.size(), \"Number of diagnostics\");\n+\n+      Diagnostic diagnostic = diagnostics.get(0);\n+      assertEquals(\"The following paragraph is not defined: PRINT-DATA\", diagnostic.getMessage());\n+\n+      Range range = diagnostic.getRange();\n+      assertEquals(6, range.getStart().getLine(), \"Diagnostic start line\");\n+      assertEquals(19, range.getStart().getCharacter(), \"Diagnostic start character\");\n+      assertEquals(6, range.getEnd().getLine(), \"Diagnostic end line\");\n+      assertEquals(29, range.getEnd().getCharacter(), \"Diagnostic end character\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da52da94c16eec194bda9c33c887545d596febea"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwNDIwMw==", "bodyText": "You don't need this condition, the assertion should be applied in any case", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#discussion_r517404203", "createdAt": "2020-11-04T14:56:56Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/usecases/engine/UseCaseEngine.java", "diffHunk": "@@ -209,10 +210,14 @@ private static void assertResultEquals(AnalysisResult actual, TestData expected)\n     assertResult(\"Constant usages:\", expected.getConstantUsages(), actual.getConstantUsages());\n \n     assertResult(\n-        \"Paragraph definition:\",\n-        expected.getParagraphDefinitions(),\n-        actual.getParagraphDefinitions());\n-    assertResult(\"Paragraph usage:\", expected.getParagraphUsages(), actual.getParagraphUsages());\n+        \"Paragraph definition:\", expected.getParagraphDefinitions(), actual.getParagraphDefinitions());\n+    assertResult(\"Paragraph usages:\", expected.getParagraphUsages(), actual.getParagraphUsages());\n+\n+    if (!expected.getSectionDefinitions().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da52da94c16eec194bda9c33c887545d596febea"}, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da52da94c16eec194bda9c33c887545d596febea", "author": {"user": {"login": "Nurkambay", "name": "Leonid Baranov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/da52da94c16eec194bda9c33c887545d596febea", "committedDate": "2020-11-04T14:45:48Z", "message": "feat: Add Language Features Support for Sections #502\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>"}, "afterCommit": {"oid": "58ebc3e4a5cf544a4a8a8addd7bcdb0d883a68c9", "author": {"user": {"login": "Nurkambay", "name": "Leonid Baranov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/58ebc3e4a5cf544a4a8a8addd7bcdb0d883a68c9", "committedDate": "2020-11-04T15:07:50Z", "message": "feat: Add Language Features Support for Sections #502\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "58ebc3e4a5cf544a4a8a8addd7bcdb0d883a68c9", "author": {"user": {"login": "Nurkambay", "name": "Leonid Baranov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/58ebc3e4a5cf544a4a8a8addd7bcdb0d883a68c9", "committedDate": "2020-11-04T15:07:50Z", "message": "feat: Add Language Features Support for Sections #502\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>"}, "afterCommit": {"oid": "530350b6219b8f5e1e827022498f3a3078e9236d", "author": {"user": {"login": "Nurkambay", "name": "Leonid Baranov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/530350b6219b8f5e1e827022498f3a3078e9236d", "committedDate": "2020-11-05T09:25:51Z", "message": "feat: Add Language Features Support for Sections #502\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MDc2MjEw", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#pullrequestreview-524076210", "createdAt": "2020-11-05T09:33:15Z", "commit": {"oid": "530350b6219b8f5e1e827022498f3a3078e9236d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "530350b6219b8f5e1e827022498f3a3078e9236d", "author": {"user": {"login": "Nurkambay", "name": "Leonid Baranov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/530350b6219b8f5e1e827022498f3a3078e9236d", "committedDate": "2020-11-05T09:25:51Z", "message": "feat: Add Language Features Support for Sections #502\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>"}, "afterCommit": {"oid": "67d8ff438b7c6cbda208e98863bf9245446bec24", "author": {"user": {"login": "Nurkambay", "name": "Leonid Baranov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/67d8ff438b7c6cbda208e98863bf9245446bec24", "committedDate": "2020-11-05T10:40:40Z", "message": "feat: Add Language Features Support for Sections #502\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "67d8ff438b7c6cbda208e98863bf9245446bec24", "author": {"user": {"login": "Nurkambay", "name": "Leonid Baranov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/67d8ff438b7c6cbda208e98863bf9245446bec24", "committedDate": "2020-11-05T10:40:40Z", "message": "feat: Add Language Features Support for Sections #502\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>"}, "afterCommit": {"oid": "09feb8646fce9b556fb90c99e2838cae8762b4ff", "author": {"user": {"login": "Nurkambay", "name": "Leonid Baranov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/09feb8646fce9b556fb90c99e2838cae8762b4ff", "committedDate": "2020-11-05T10:41:04Z", "message": "feat: Add Language Features Support for Sections #502\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MTYyNzEy", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/608#pullrequestreview-524162712", "createdAt": "2020-11-05T11:20:43Z", "commit": {"oid": "09feb8646fce9b556fb90c99e2838cae8762b4ff"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47ef23ed5f96ff18fd102933a1d69fe8c3912a19", "author": {"user": {"login": "Nurkambay", "name": "Leonid Baranov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/47ef23ed5f96ff18fd102933a1d69fe8c3912a19", "committedDate": "2020-11-05T12:06:25Z", "message": "feat: Add Language Features Support for Sections #502\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09feb8646fce9b556fb90c99e2838cae8762b4ff", "author": {"user": {"login": "Nurkambay", "name": "Leonid Baranov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/09feb8646fce9b556fb90c99e2838cae8762b4ff", "committedDate": "2020-11-05T10:41:04Z", "message": "feat: Add Language Features Support for Sections #502\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>"}, "afterCommit": {"oid": "47ef23ed5f96ff18fd102933a1d69fe8c3912a19", "author": {"user": {"login": "Nurkambay", "name": "Leonid Baranov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/47ef23ed5f96ff18fd102933a1d69fe8c3912a19", "committedDate": "2020-11-05T12:06:25Z", "message": "feat: Add Language Features Support for Sections #502\n\nSigned-off-by: Leonid Baranov <leonid.baranov@broadcom.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 864, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}