{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NzI4MTk4", "number": 207, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODozMTowMFrODg-pNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMzoyMzo0NVrODhETJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTA3MzgyOnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/providers/SettingsProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODozMTowMFrOFre9qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODozMTowMFrOFre9qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0MDM5Mg==", "bodyText": "We usually use javax.annotation.Nonnull instead of Lombok", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/207#discussion_r381140392", "createdAt": "2020-02-19T08:31:00Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/providers/SettingsProvider.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+\n+package com.ca.lsp.cobol.service.providers;\n+\n+import com.ca.lsp.cobol.model.ConfigurationSettingsStorable;\n+import com.google.inject.Provider;\n+import com.google.inject.Singleton;\n+import lombok.NonNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0221aa7b36653fe5c19e975506efc148b945f6"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTA3NzU3OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CobolWorkspaceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODozMjoxOFrOFre_zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODozMjoxOFrOFre_zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0MDk0MA==", "bodyText": "I think we could remove this comment", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/207#discussion_r381140940", "createdAt": "2020-02-19T08:32:18Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CobolWorkspaceServiceImpl.java", "diffHunk": "@@ -93,7 +93,7 @@ public CobolWorkspaceServiceImpl(DataBusBroker dataBus, Provider<LanguageClient>\n   public void didChangeConfiguration(DidChangeConfigurationParams params) {\n     /* section and scope has to be set to whatever we agree on for the dependencies graph */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0221aa7b36653fe5c19e975506efc148b945f6"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTA3ODc5OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/utils/Utility.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODozMjo0NlrOFrfAiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODozMjo0NlrOFrfAiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0MTEyOQ==", "bodyText": "Please, provide more descriptive name for this class", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/207#discussion_r381141129", "createdAt": "2020-02-19T08:32:46Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/utils/Utility.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+\n+package com.ca.lsp.cobol.utils;\n+\n+import lombok.experimental.UtilityClass;\n+import org.eclipse.lsp4j.ConfigurationItem;\n+import org.eclipse.lsp4j.ConfigurationParams;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@UtilityClass\n+public final class Utility {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0221aa7b36653fe5c19e975506efc148b945f6"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTA4MjY1OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/utils/Utility.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODozNDowMVrOFrfC7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODozNDowMVrOFrfC7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0MTc0MQ==", "bodyText": "Seems like it is replaceable with Collections#singletonList()", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/207#discussion_r381141741", "createdAt": "2020-02-19T08:34:01Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/utils/Utility.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+\n+package com.ca.lsp.cobol.utils;\n+\n+import lombok.experimental.UtilityClass;\n+import org.eclipse.lsp4j.ConfigurationItem;\n+import org.eclipse.lsp4j.ConfigurationParams;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@UtilityClass\n+public final class Utility {\n+\n+  public ConfigurationParams createParams() {\n+    ConfigurationParams params = new ConfigurationParams();\n+    List<ConfigurationItem> itemList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0221aa7b36653fe5c19e975506efc148b945f6"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTA4NjU2OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/model/ConfigurationSettingsStorable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODozNToyOVrOFrfFiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODozNToyOVrOFrfFiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0MjQxMQ==", "bodyText": "I think it is better to use @Value here to make this class immutable", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/207#discussion_r381142411", "createdAt": "2020-02-19T08:35:29Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/model/ConfigurationSettingsStorable.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+\n+package com.ca.lsp.cobol.model;\n+\n+import lombok.Data;\n+\n+import java.util.List;\n+\n+@Data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0221aa7b36653fe5c19e975506efc148b945f6"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTA5MDA0OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/InitializeConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODozNjo0NFrOFrfHxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODozNjo0NFrOFrfHxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0Mjk4MQ==", "bodyText": "Please, make this field static too.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/207#discussion_r381142981", "createdAt": "2020-02-19T08:36:44Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/InitializeConfigurationTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+\n+package com.ca.lsp.cobol.service;\n+\n+import com.ca.lsp.cobol.model.ConfigurationSettingsStorable;\n+import com.ca.lsp.cobol.service.providers.ClientProvider;\n+import com.ca.lsp.cobol.service.providers.SettingsProvider;\n+import com.ca.lsp.cobol.utils.Utility;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import org.eclipse.lsp4j.ConfigurationParams;\n+import org.eclipse.lsp4j.InitializedParams;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * This test class checks if the workspace calls client configuration at the initialize method and\n+ * retrieves the setting configuration\n+ */\n+public class InitializeConfigurationTest {\n+  private LanguageClient client = Mockito.mock(LanguageClient.class);\n+  private ClientProvider provider = new ClientProvider();\n+  private SettingsProvider settingsProvider = Mockito.mock(SettingsProvider.class);\n+  private final String PROFILE_NAME = \"myProfile\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0221aa7b36653fe5c19e975506efc148b945f6"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTA5ODY3OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CobolWorkspaceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODozOTo0NFrOFrfNMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODozOTo0NFrOFrfNMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0NDM3MA==", "bodyText": "Can we use an enum here so that we can share the common key across multiple actors (CWS, FSS, MTD..)?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/207#discussion_r381144370", "createdAt": "2020-02-19T08:39:44Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CobolWorkspaceServiceImpl.java", "diffHunk": "@@ -93,7 +93,7 @@ public CobolWorkspaceServiceImpl(DataBusBroker dataBus, Provider<LanguageClient>\n   public void didChangeConfiguration(DidChangeConfigurationParams params) {\n     /* section and scope has to be set to whatever we agree on for the dependencies graph */\n     try {\n-      fetchSettings(null, null)\n+      fetchSettings(\"broadcom-cobol-lsp.cpy-manager\", null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0221aa7b36653fe5c19e975506efc148b945f6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTEwMDcxOnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/InitializeConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODo0MDoyNFrOFrfOcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODo0MDoyNFrOFrfOcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0NDY4OQ==", "bodyText": "Due to you don't share these fields between different methods, I think it is better to keep them local, but it is up to you", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/207#discussion_r381144689", "createdAt": "2020-02-19T08:40:24Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/InitializeConfigurationTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+\n+package com.ca.lsp.cobol.service;\n+\n+import com.ca.lsp.cobol.model.ConfigurationSettingsStorable;\n+import com.ca.lsp.cobol.service.providers.ClientProvider;\n+import com.ca.lsp.cobol.service.providers.SettingsProvider;\n+import com.ca.lsp.cobol.utils.Utility;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import org.eclipse.lsp4j.ConfigurationParams;\n+import org.eclipse.lsp4j.InitializedParams;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * This test class checks if the workspace calls client configuration at the initialize method and\n+ * retrieves the setting configuration\n+ */\n+public class InitializeConfigurationTest {\n+  private LanguageClient client = Mockito.mock(LanguageClient.class);\n+  private ClientProvider provider = new ClientProvider();\n+  private SettingsProvider settingsProvider = Mockito.mock(SettingsProvider.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0221aa7b36653fe5c19e975506efc148b945f6"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTEwODQ0OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyLanguageServerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODo0Mjo1OVrOFrfTHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODo0Mjo1OVrOFrfTHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0NTg4Nw==", "bodyText": "We can wrap this activity in a method with a meaningful javadoc", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/207#discussion_r381145887", "createdAt": "2020-02-19T08:42:59Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyLanguageServerImpl.java", "diffHunk": "@@ -96,6 +107,50 @@ public void initialized(@Nullable InitializedParams params) {\n                     \"copybooksWatcher\", \"workspace/didChangeWatchedFiles\", createWatcher()),\n                 new Registration(\"configurationChange\", \"workspace/didChangeConfiguration\", null)));\n     client.registerCapability(registrationParams);\n+    try {\n+      fetchSettings(\"broadcom-cobol-lsp.cpy-manager\", null)\n+          .thenAccept(\n+              e -> {\n+                JsonObject jsonObject = (JsonObject) e.get(0);\n+                ConfigurationSettingsStorable configurationSettingsStorable =\n+                    isValidJson(jsonObject);\n+                ((SettingsProvider) settingsProvider).set(configurationSettingsStorable);\n+              });\n+    } catch (RuntimeException e) {\n+      log.error(e.getMessage());\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0221aa7b36653fe5c19e975506efc148b945f6"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTExNjI1OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/providers/SettingsProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODo0NTozNlrOFrfXyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOToxMTo1OFrOFrgLmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0NzA4MQ==", "bodyText": "It would be better to mark this method @Nullable to show that null in configurationSettingsStorable is a valid case", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/207#discussion_r381147081", "createdAt": "2020-02-19T08:45:36Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/providers/SettingsProvider.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+\n+package com.ca.lsp.cobol.service.providers;\n+\n+import com.ca.lsp.cobol.model.ConfigurationSettingsStorable;\n+import com.google.inject.Provider;\n+import com.google.inject.Singleton;\n+import lombok.NonNull;\n+\n+@Singleton\n+public class SettingsProvider implements Provider<ConfigurationSettingsStorable> {\n+  private ConfigurationSettingsStorable configurationSettingsStorable;\n+\n+  public void set(@NonNull ConfigurationSettingsStorable configurationSettingsStorable) {\n+    this.configurationSettingsStorable = configurationSettingsStorable;\n+  }\n+\n+  @Override\n+  public ConfigurationSettingsStorable get() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0221aa7b36653fe5c19e975506efc148b945f6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2MDM0Ng==", "bodyText": "IMHO I will not push the developer to use nullable, I prefer a meaningful javadoc. For notNull the discussion is different.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/207#discussion_r381160346", "createdAt": "2020-02-19T09:11:58Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/providers/SettingsProvider.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+\n+package com.ca.lsp.cobol.service.providers;\n+\n+import com.ca.lsp.cobol.model.ConfigurationSettingsStorable;\n+import com.google.inject.Provider;\n+import com.google.inject.Singleton;\n+import lombok.NonNull;\n+\n+@Singleton\n+public class SettingsProvider implements Provider<ConfigurationSettingsStorable> {\n+  private ConfigurationSettingsStorable configurationSettingsStorable;\n+\n+  public void set(@NonNull ConfigurationSettingsStorable configurationSettingsStorable) {\n+    this.configurationSettingsStorable = configurationSettingsStorable;\n+  }\n+\n+  @Override\n+  public ConfigurationSettingsStorable get() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0NzA4MQ=="}, "originalCommit": {"oid": "cb0221aa7b36653fe5c19e975506efc148b945f6"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTEyMTk2OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyLanguageServerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODo0NzozMFrOFrfbPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODo0NzozMFrOFrfbPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0Nzk2NQ==", "bodyText": "The name pattern 'is***', according to Java naming convention, used mostly for boolean methods. It would be more descriptive if you rename it so something like parseSettings", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/207#discussion_r381147965", "createdAt": "2020-02-19T08:47:30Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyLanguageServerImpl.java", "diffHunk": "@@ -96,6 +107,50 @@ public void initialized(@Nullable InitializedParams params) {\n                     \"copybooksWatcher\", \"workspace/didChangeWatchedFiles\", createWatcher()),\n                 new Registration(\"configurationChange\", \"workspace/didChangeConfiguration\", null)));\n     client.registerCapability(registrationParams);\n+    try {\n+      fetchSettings(\"broadcom-cobol-lsp.cpy-manager\", null)\n+          .thenAccept(\n+              e -> {\n+                JsonObject jsonObject = (JsonObject) e.get(0);\n+                ConfigurationSettingsStorable configurationSettingsStorable =\n+                    isValidJson(jsonObject);\n+                ((SettingsProvider) settingsProvider).set(configurationSettingsStorable);\n+              });\n+    } catch (RuntimeException e) {\n+      log.error(e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * @param jsonObject - the object which comes from the client and contains configuration settings\n+   * @return a custom object of type ConfigurableSettingsStorage if the JSON is valid or null if it\n+   *     is failing the check\n+   */\n+  private ConfigurationSettingsStorable isValidJson(JsonObject jsonObject) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0221aa7b36653fe5c19e975506efc148b945f6"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTEyNjkyOnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyLanguageServerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODo0OTowOVrOFrfeXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODo0OTowOVrOFrfeXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0ODc2Nw==", "bodyText": "Could you, please, provide some more descriptive name for this method?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/207#discussion_r381148767", "createdAt": "2020-02-19T08:49:09Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyLanguageServerImpl.java", "diffHunk": "@@ -96,6 +107,50 @@ public void initialized(@Nullable InitializedParams params) {\n                     \"copybooksWatcher\", \"workspace/didChangeWatchedFiles\", createWatcher()),\n                 new Registration(\"configurationChange\", \"workspace/didChangeConfiguration\", null)));\n     client.registerCapability(registrationParams);\n+    try {\n+      fetchSettings(\"broadcom-cobol-lsp.cpy-manager\", null)\n+          .thenAccept(\n+              e -> {\n+                JsonObject jsonObject = (JsonObject) e.get(0);\n+                ConfigurationSettingsStorable configurationSettingsStorable =\n+                    isValidJson(jsonObject);\n+                ((SettingsProvider) settingsProvider).set(configurationSettingsStorable);\n+              });\n+    } catch (RuntimeException e) {\n+      log.error(e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * @param jsonObject - the object which comes from the client and contains configuration settings\n+   * @return a custom object of type ConfigurableSettingsStorage if the JSON is valid or null if it\n+   *     is failing the check\n+   */\n+  private ConfigurationSettingsStorable isValidJson(JsonObject jsonObject) {\n+    Gson gson = new Gson();\n+    try {\n+      return gson.fromJson(jsonObject, ConfigurationSettingsStorable.class);\n+    } catch (JsonSyntaxException e) {\n+      log.error(e.getMessage());\n+      return null;\n+    }\n+  }\n+\n+  private CompletableFuture<List<Object>> fetchSettings(String section, String scope) {\n+    LanguageClient client = clientProvider.get();\n+    ConfigurationParams params = new ConfigurationParams();\n+    params.setItems(elemToList(section, scope));\n+    return client.configuration(params);\n+  }\n+\n+  @Nonnull\n+  private List<ConfigurationItem> elemToList(String section, String scope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0221aa7b36653fe5c19e975506efc148b945f6"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTEzMDU3OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyLanguageServerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODo1MDoyNFrOFrfgww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODo1NjozNlrOFrftCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0OTM3OQ==", "bodyText": "can we use directly clientProvider.get() and get rid of client object?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/207#discussion_r381149379", "createdAt": "2020-02-19T08:50:24Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyLanguageServerImpl.java", "diffHunk": "@@ -96,6 +107,50 @@ public void initialized(@Nullable InitializedParams params) {\n                     \"copybooksWatcher\", \"workspace/didChangeWatchedFiles\", createWatcher()),\n                 new Registration(\"configurationChange\", \"workspace/didChangeConfiguration\", null)));\n     client.registerCapability(registrationParams);\n+    try {\n+      fetchSettings(\"broadcom-cobol-lsp.cpy-manager\", null)\n+          .thenAccept(\n+              e -> {\n+                JsonObject jsonObject = (JsonObject) e.get(0);\n+                ConfigurationSettingsStorable configurationSettingsStorable =\n+                    isValidJson(jsonObject);\n+                ((SettingsProvider) settingsProvider).set(configurationSettingsStorable);\n+              });\n+    } catch (RuntimeException e) {\n+      log.error(e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * @param jsonObject - the object which comes from the client and contains configuration settings\n+   * @return a custom object of type ConfigurableSettingsStorage if the JSON is valid or null if it\n+   *     is failing the check\n+   */\n+  private ConfigurationSettingsStorable isValidJson(JsonObject jsonObject) {\n+    Gson gson = new Gson();\n+    try {\n+      return gson.fromJson(jsonObject, ConfigurationSettingsStorable.class);\n+    } catch (JsonSyntaxException e) {\n+      log.error(e.getMessage());\n+      return null;\n+    }\n+  }\n+\n+  private CompletableFuture<List<Object>> fetchSettings(String section, String scope) {\n+    LanguageClient client = clientProvider.get();\n+    ConfigurationParams params = new ConfigurationParams();\n+    params.setItems(elemToList(section, scope));\n+    return client.configuration(params);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0221aa7b36653fe5c19e975506efc148b945f6"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1MjUyMQ==", "bodyText": "Moreover according with its constructor, ConfigurationParams could accept directly the list (coming fromelemToList()) and so we can simplify the logic of this method", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/207#discussion_r381152521", "createdAt": "2020-02-19T08:56:36Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyLanguageServerImpl.java", "diffHunk": "@@ -96,6 +107,50 @@ public void initialized(@Nullable InitializedParams params) {\n                     \"copybooksWatcher\", \"workspace/didChangeWatchedFiles\", createWatcher()),\n                 new Registration(\"configurationChange\", \"workspace/didChangeConfiguration\", null)));\n     client.registerCapability(registrationParams);\n+    try {\n+      fetchSettings(\"broadcom-cobol-lsp.cpy-manager\", null)\n+          .thenAccept(\n+              e -> {\n+                JsonObject jsonObject = (JsonObject) e.get(0);\n+                ConfigurationSettingsStorable configurationSettingsStorable =\n+                    isValidJson(jsonObject);\n+                ((SettingsProvider) settingsProvider).set(configurationSettingsStorable);\n+              });\n+    } catch (RuntimeException e) {\n+      log.error(e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * @param jsonObject - the object which comes from the client and contains configuration settings\n+   * @return a custom object of type ConfigurableSettingsStorage if the JSON is valid or null if it\n+   *     is failing the check\n+   */\n+  private ConfigurationSettingsStorable isValidJson(JsonObject jsonObject) {\n+    Gson gson = new Gson();\n+    try {\n+      return gson.fromJson(jsonObject, ConfigurationSettingsStorable.class);\n+    } catch (JsonSyntaxException e) {\n+      log.error(e.getMessage());\n+      return null;\n+    }\n+  }\n+\n+  private CompletableFuture<List<Object>> fetchSettings(String section, String scope) {\n+    LanguageClient client = clientProvider.get();\n+    ConfigurationParams params = new ConfigurationParams();\n+    params.setItems(elemToList(section, scope));\n+    return client.configuration(params);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0OTM3OQ=="}, "originalCommit": {"oid": "cb0221aa7b36653fe5c19e975506efc148b945f6"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTE2NTE3OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyLanguageServerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOTowMToxNVrOFrf2bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOTowMToxNVrOFrf2bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1NDkyNw==", "bodyText": "Can we inline those strings?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/207#discussion_r381154927", "createdAt": "2020-02-19T09:01:15Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyLanguageServerImpl.java", "diffHunk": "@@ -96,6 +107,50 @@ public void initialized(@Nullable InitializedParams params) {\n                     \"copybooksWatcher\", \"workspace/didChangeWatchedFiles\", createWatcher()),\n                 new Registration(\"configurationChange\", \"workspace/didChangeConfiguration\", null)));\n     client.registerCapability(registrationParams);\n+    try {\n+      fetchSettings(\"broadcom-cobol-lsp.cpy-manager\", null)\n+          .thenAccept(\n+              e -> {\n+                JsonObject jsonObject = (JsonObject) e.get(0);\n+                ConfigurationSettingsStorable configurationSettingsStorable =\n+                    isValidJson(jsonObject);\n+                ((SettingsProvider) settingsProvider).set(configurationSettingsStorable);\n+              });\n+    } catch (RuntimeException e) {\n+      log.error(e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * @param jsonObject - the object which comes from the client and contains configuration settings\n+   * @return a custom object of type ConfigurableSettingsStorage if the JSON is valid or null if it\n+   *     is failing the check\n+   */\n+  private ConfigurationSettingsStorable isValidJson(JsonObject jsonObject) {\n+    Gson gson = new Gson();\n+    try {\n+      return gson.fromJson(jsonObject, ConfigurationSettingsStorable.class);\n+    } catch (JsonSyntaxException e) {\n+      log.error(e.getMessage());\n+      return null;\n+    }\n+  }\n+\n+  private CompletableFuture<List<Object>> fetchSettings(String section, String scope) {\n+    LanguageClient client = clientProvider.get();\n+    ConfigurationParams params = new ConfigurationParams();\n+    params.setItems(elemToList(section, scope));\n+    return client.configuration(params);\n+  }\n+\n+  @Nonnull\n+  private List<ConfigurationItem> elemToList(String section, String scope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0221aa7b36653fe5c19e975506efc148b945f6"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTIxNzQ4OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/DidChangeConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOToxNzoyNFrOFrgWSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMzozODoyM1rOFroUYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2MzA4MQ==", "bodyText": "can we use a mock here?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/207#discussion_r381163081", "createdAt": "2020-02-19T09:17:24Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/DidChangeConfigurationTest.java", "diffHunk": "@@ -49,7 +49,7 @@ public void testDidChangeConfiguration() {\n     ArgumentCaptor<FetchedSettingsEvent> captor =\n         ArgumentCaptor.forClass(FetchedSettingsEvent.class);\n \n-    ConfigurationParams params = createParams();\n+    ConfigurationParams params = Utility.createParams();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0221aa7b36653fe5c19e975506efc148b945f6"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI5MzY2NQ==", "bodyText": "what is the value to you use a mock?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/207#discussion_r381293665", "createdAt": "2020-02-19T13:38:23Z", "author": {"login": "sergiuilie"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/DidChangeConfigurationTest.java", "diffHunk": "@@ -49,7 +49,7 @@ public void testDidChangeConfiguration() {\n     ArgumentCaptor<FetchedSettingsEvent> captor =\n         ArgumentCaptor.forClass(FetchedSettingsEvent.class);\n \n-    ConfigurationParams params = createParams();\n+    ConfigurationParams params = Utility.createParams();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2MzA4MQ=="}, "originalCommit": {"oid": "cb0221aa7b36653fe5c19e975506efc148b945f6"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTMxNDMzOnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/InitializeConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOTo0Mjo1MlrOFrhQ4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOTo0Mjo1MlrOFrhQ4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE3ODA4MQ==", "bodyText": "can we get rid of throws ExecutionException and InterruptedException?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/207#discussion_r381178081", "createdAt": "2020-02-19T09:42:52Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/InitializeConfigurationTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+\n+package com.ca.lsp.cobol.service;\n+\n+import com.ca.lsp.cobol.model.ConfigurationSettingsStorable;\n+import com.ca.lsp.cobol.service.providers.ClientProvider;\n+import com.ca.lsp.cobol.service.providers.SettingsProvider;\n+import com.ca.lsp.cobol.utils.Utility;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import org.eclipse.lsp4j.ConfigurationParams;\n+import org.eclipse.lsp4j.InitializedParams;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * This test class checks if the workspace calls client configuration at the initialize method and\n+ * retrieves the setting configuration\n+ */\n+public class InitializeConfigurationTest {\n+  private LanguageClient client = Mockito.mock(LanguageClient.class);\n+  private ClientProvider provider = new ClientProvider();\n+  private SettingsProvider settingsProvider = Mockito.mock(SettingsProvider.class);\n+  private final String PROFILE_NAME = \"myProfile\";\n+\n+  @Test\n+  public void testInitializeConfiguration() throws ExecutionException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0221aa7b36653fe5c19e975506efc148b945f6"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDAwMDM5OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/model/ConfigurationSettingsStorable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMzoyMzo0NVrOFrn2YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMzoyMzo0NVrOFrn2YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI4NTk4NQ==", "bodyText": "Seems like we have an unused import here", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/207#discussion_r381285985", "createdAt": "2020-02-19T13:23:45Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/model/ConfigurationSettingsStorable.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+\n+package com.ca.lsp.cobol.model;\n+\n+import lombok.Data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5443f9185ece0f077f7b2e5526154e94565e2c4b"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4131, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}