{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NTgzNTE0", "number": 157, "title": "Coverage for core parser", "bodyText": "as per issue #110\nincreased total unit testing code coverage to 69.3%", "createdAt": "2020-01-27T16:24:55Z", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/157", "merged": true, "mergeCommit": {"oid": "ea88e6fbcb89d6c4e822a861085d5a87c645a234"}, "closed": true, "closedAt": "2020-01-30T15:24:31Z", "author": {"login": "abdrabrcom"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4nSgcAH2gAyMzY3NTgzNTE0OjMwY2ZiNTQ4OWZiMWE2OTU5MmJjMzQxYTYxYjQ2YjVlODZlYzY3OGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_b1s1gFqTM1MDg4NzA4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "30cfb5489fb1a69592bc341a61b46b5e86ec678d", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/30cfb5489fb1a69592bc341a61b46b5e86ec678d", "committedDate": "2020-01-09T10:21:12Z", "message": "adding junit test for PreprocessorStringUtils\n\nSigned-off-by: Ramy Abdalla <ramy.abdalla@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "165b8d8cd08c102fac8a1d5cc20938d2e7f2951d", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/165b8d8cd08c102fac8a1d5cc20938d2e7f2951d", "committedDate": "2020-01-09T10:22:10Z", "message": "added junit tests to CobolTestSuite\n\nSigned-off-by: Ramy Abdalla <ramy.abdalla@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "601616541e4c5c190a5a166e1feaf151a77dbaa6", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/601616541e4c5c190a5a166e1feaf151a77dbaa6", "committedDate": "2020-01-09T10:24:39Z", "message": "Merge branch 'development' into CoverageForCoreParser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed06780195d2bae19fa5aeb4474cf6c5ff44a0db", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/ed06780195d2bae19fa5aeb4474cf6c5ff44a0db", "committedDate": "2020-01-13T13:19:28Z", "message": "merging development\n\nSigned-off-by: Ramy Abdalla <ramy.abdalla@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cccc3334f713a6f252b2c0e5abf4fa92f14b85c7", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/cccc3334f713a6f252b2c0e5abf4fa92f14b85c7", "committedDate": "2020-01-14T10:42:18Z", "message": "Merge branch 'development' into CoverageForCoreParser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f16efea5eb4be91dc149b3bc2abafccd077c3f0", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/0f16efea5eb4be91dc149b3bc2abafccd077c3f0", "committedDate": "2020-01-16T10:12:15Z", "message": "Merge branch 'development' into CoverageForCoreParser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c9b8b50806cfa6b1b45b9302e64810c50dd860d", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/1c9b8b50806cfa6b1b45b9302e64810c50dd860d", "committedDate": "2020-01-16T14:02:22Z", "message": "adding junit test for CobolLineIndicatorProcessorImpl\n\nSigned-off-by: Ramy Abdalla <ramy.abdalla@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4618c68f1f513d69f2e43c9197594b7ce98f3b30", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/4618c68f1f513d69f2e43c9197594b7ce98f3b30", "committedDate": "2020-01-20T10:41:07Z", "message": "increased coverage on CobolLineIndicatorProcessorImplTest\n\nSigned-off-by: Ramy Abdalla <ramy.abdalla@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c028727bf31acdf41ccfa3cbc12915b5a7851cf", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/0c028727bf31acdf41ccfa3cbc12915b5a7851cf", "committedDate": "2020-01-20T10:42:21Z", "message": "Merge branch 'development' into CoverageForCoreParser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13e0ca6499c94f110a6e8d6cced63ec3751c74ad", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/13e0ca6499c94f110a6e8d6cced63ec3751c74ad", "committedDate": "2020-01-23T10:48:37Z", "message": "Merge branch 'development' into CoverageForCoreParser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1c32d10eb396a0b54849e57799d637275fc9a89", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/b1c32d10eb396a0b54849e57799d637275fc9a89", "committedDate": "2020-01-27T12:01:44Z", "message": "Merge branch 'development' into CoverageForCoreParser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "961348fc648e23d5015b3243956fe6de52b3e36b", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/961348fc648e23d5015b3243956fe6de52b3e36b", "committedDate": "2020-01-27T12:02:36Z", "message": "added coverage for CobolErrorStrategy class\n\nSigned-off-by: Ramy Abdalla <ramy.abdalla@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ca20b3329a545f63ece5306422145e645153074", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/0ca20b3329a545f63ece5306422145e645153074", "committedDate": "2020-01-27T12:23:05Z", "message": "corrected copyright and added missing test classes\n\nSigned-off-by: Ramy Abdalla <ramy.abdalla@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b28fc0127f7233263a9daa4b28fae6a4bd34784", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/9b28fc0127f7233263a9daa4b28fae6a4bd34784", "committedDate": "2020-01-27T13:12:17Z", "message": "fixed copyright in PreprocessorStringUtilsTest\n\nSigned-off-by: Ramy Abdalla <ramy.abdalla@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c388edd9110a9838a700dcefd8a782d2f59d466b", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/c388edd9110a9838a700dcefd8a782d2f59d466b", "committedDate": "2020-01-27T15:05:46Z", "message": "Merge branch 'development' into CoverageForCoreParser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93566f1ba80add99f2d1c3090766fed3515cbfcf", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/93566f1ba80add99f2d1c3090766fed3515cbfcf", "committedDate": "2020-01-27T15:39:56Z", "message": "adjusted CobolLineIndicatorProcessorImplTest after refactoring\n\nSigned-off-by: Ramy Abdalla <ramy.abdalla@broadcom.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4ODAwMDU5", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/157#pullrequestreview-348800059", "createdAt": "2020-01-27T16:29:47Z", "commit": {"oid": "93566f1ba80add99f2d1c3090766fed3515cbfcf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNjoyOTo0N1rOFiJGZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNjozNjoxOFrOFiJVxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0NDk5Ng==", "bodyText": "These fields may be converted to local variables", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/157#discussion_r371344996", "createdAt": "2020-01-27T16:29:47Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/preprocessor/sub/line/rewriter/impl/CobolLineIndicatorProcessorImplTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.core.cobol.preprocessor.sub.line.rewriter.impl;\n+\n+import static com.ca.lsp.core.cobol.preprocessor.CobolSourceFormat.FIXED;\n+import static com.ca.lsp.core.cobol.preprocessor.ProcessingConstants.COMMENT_TAG;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.COMMENT;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.COMPILER_DIRECTIVE;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.CONTINUATION;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.NORMAL;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.DEBUG;\n+import static com.ca.lsp.core.cobol.preprocessor.ProcessingConstants.WS;\n+import static org.junit.Assert.assertEquals;\n+\n+import com.ca.lsp.core.cobol.preprocessor.sub.CobolLine;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.junit.Test;\n+\n+public class CobolLineIndicatorProcessorImplTest {\n+  private static final String EMPTY_STRING = \"\";\n+  private CobolLine CONTINUATION_LINE = new CobolLine();\n+  private CobolLine TRAILING_QUOTE_CONTINUATION_LINE = new CobolLine();\n+  private CobolLine EMPTY_CONTINUATION_LINE_TO_TEST = new CobolLine();\n+  private CobolLine SINGLE_CONTINUATION_LINE_TO_TEST = new CobolLine();\n+  private CobolLine GOOD_CONTINUATION_LINE_TO_TEST = new CobolLine();\n+  private CobolLine BAD_CONTINUATION_LINE_TO_TEST = new CobolLine();\n+  private CobolLine COMMENT_LINE_TO_TEST = new CobolLine();\n+  private CobolLine CONTINUATION_LINE_WITH_END_QUOTES = new CobolLine();\n+  private CobolLine COMPILER_DIRECTIVE_LINE_TO_TEST = new CobolLine();\n+  private CobolLine NORMAL_LINE_TO_TEST = new CobolLine();\n+  private CobolLine DEBUG_LINE_TO_TEST = new CobolLine();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93566f1ba80add99f2d1c3090766fed3515cbfcf"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0NTc4OQ==", "bodyText": "Please, remove the commented line", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/157#discussion_r371345789", "createdAt": "2020-01-27T16:31:03Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/preprocessor/sub/line/rewriter/impl/CobolLineIndicatorProcessorImplTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.core.cobol.preprocessor.sub.line.rewriter.impl;\n+\n+import static com.ca.lsp.core.cobol.preprocessor.CobolSourceFormat.FIXED;\n+import static com.ca.lsp.core.cobol.preprocessor.ProcessingConstants.COMMENT_TAG;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.COMMENT;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.COMPILER_DIRECTIVE;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.CONTINUATION;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.NORMAL;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.DEBUG;\n+import static com.ca.lsp.core.cobol.preprocessor.ProcessingConstants.WS;\n+import static org.junit.Assert.assertEquals;\n+\n+import com.ca.lsp.core.cobol.preprocessor.sub.CobolLine;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.junit.Test;\n+\n+public class CobolLineIndicatorProcessorImplTest {\n+  private static final String EMPTY_STRING = \"\";\n+  private CobolLine CONTINUATION_LINE = new CobolLine();\n+  private CobolLine TRAILING_QUOTE_CONTINUATION_LINE = new CobolLine();\n+  private CobolLine EMPTY_CONTINUATION_LINE_TO_TEST = new CobolLine();\n+  private CobolLine SINGLE_CONTINUATION_LINE_TO_TEST = new CobolLine();\n+  private CobolLine GOOD_CONTINUATION_LINE_TO_TEST = new CobolLine();\n+  private CobolLine BAD_CONTINUATION_LINE_TO_TEST = new CobolLine();\n+  private CobolLine COMMENT_LINE_TO_TEST = new CobolLine();\n+  private CobolLine CONTINUATION_LINE_WITH_END_QUOTES = new CobolLine();\n+  private CobolLine COMPILER_DIRECTIVE_LINE_TO_TEST = new CobolLine();\n+  private CobolLine NORMAL_LINE_TO_TEST = new CobolLine();\n+  private CobolLine DEBUG_LINE_TO_TEST = new CobolLine();\n+\n+  @Test\n+  public void processLinesTest() {\n+    CONTINUATION_LINE.setType(CONTINUATION);\n+    CONTINUATION_LINE.setIndicatorArea(\"-\");\n+    CONTINUATION_LINE.setContentAreaA(\"        \\\"CONTINUED LINE ENDS HERE\\\"     \");\n+\n+    GOOD_CONTINUATION_LINE_TO_TEST.setType(CONTINUATION);\n+    GOOD_CONTINUATION_LINE_TO_TEST.setSuccessor(CONTINUATION_LINE);\n+    GOOD_CONTINUATION_LINE_TO_TEST.setIndicatorArea(WS);\n+    GOOD_CONTINUATION_LINE_TO_TEST.setContentAreaA(\"       \\\"RANDOM TEXT   \");\n+    GOOD_CONTINUATION_LINE_TO_TEST.setContentAreaB(\"        \");\n+\n+    SINGLE_CONTINUATION_LINE_TO_TEST.setType(CONTINUATION);\n+    SINGLE_CONTINUATION_LINE_TO_TEST.setSuccessor(CONTINUATION_LINE);\n+    SINGLE_CONTINUATION_LINE_TO_TEST.setIndicatorArea(WS);\n+    SINGLE_CONTINUATION_LINE_TO_TEST.setContentAreaA(\"       'RANDOM TEXT   \");\n+    SINGLE_CONTINUATION_LINE_TO_TEST.setContentAreaB(\"        \");\n+\n+    TRAILING_QUOTE_CONTINUATION_LINE.setType(CONTINUATION);\n+    TRAILING_QUOTE_CONTINUATION_LINE.setSuccessor(CONTINUATION_LINE);\n+    TRAILING_QUOTE_CONTINUATION_LINE.setIndicatorArea(WS);\n+    TRAILING_QUOTE_CONTINUATION_LINE.setContentAreaA(\"         \\\"\");\n+    TRAILING_QUOTE_CONTINUATION_LINE.setContentAreaB(\"\");\n+\n+    BAD_CONTINUATION_LINE_TO_TEST.setType(CONTINUATION);\n+    BAD_CONTINUATION_LINE_TO_TEST.setPredecessor(GOOD_CONTINUATION_LINE_TO_TEST);\n+    BAD_CONTINUATION_LINE_TO_TEST.setContentAreaA(\"        \\\"RANDOM TEXT   \");\n+    BAD_CONTINUATION_LINE_TO_TEST.setContentAreaB(\"        \");\n+\n+    EMPTY_CONTINUATION_LINE_TO_TEST.setType(CONTINUATION);\n+    EMPTY_CONTINUATION_LINE_TO_TEST.setSuccessor(null);\n+    EMPTY_CONTINUATION_LINE_TO_TEST.setContentAreaA(\"           \");\n+    EMPTY_CONTINUATION_LINE_TO_TEST.setContentAreaB(\"           \");\n+\n+    COMMENT_LINE_TO_TEST.setType(COMMENT);\n+    COMMENT_LINE_TO_TEST.setIndicatorArea(\"*\");\n+    COMMENT_LINE_TO_TEST.setContentAreaA(\"THIS IS A COMMENT        \");\n+\n+    COMPILER_DIRECTIVE_LINE_TO_TEST.setType(COMPILER_DIRECTIVE);\n+    COMPILER_DIRECTIVE_LINE_TO_TEST.setIndicatorArea(WS);\n+    COMPILER_DIRECTIVE_LINE_TO_TEST.setContentAreaA(\"DEFINE\");\n+\n+    NORMAL_LINE_TO_TEST.setType(NORMAL);\n+    NORMAL_LINE_TO_TEST.setFormat(FIXED);\n+    NORMAL_LINE_TO_TEST.setIndicatorArea(WS);\n+    NORMAL_LINE_TO_TEST.setContentAreaA(\"         RANDOM TEXT ,  \");\n+\n+    DEBUG_LINE_TO_TEST.setType(DEBUG);\n+    DEBUG_LINE_TO_TEST.setIndicatorArea(WS);\n+    DEBUG_LINE_TO_TEST.setContentAreaA(\"     DEBUG LINE HERE      \");\n+\n+    CONTINUATION_LINE_WITH_END_QUOTES.setType(CONTINUATION);\n+    CONTINUATION_LINE_WITH_END_QUOTES.setPredecessor(CONTINUATION_LINE);\n+    CONTINUATION_LINE_WITH_END_QUOTES.setSuccessor(CONTINUATION_LINE);\n+    CONTINUATION_LINE_WITH_END_QUOTES.setIndicatorArea(WS);\n+    CONTINUATION_LINE_WITH_END_QUOTES.setContentAreaA(\"       \\\"RANDOM TEXT \\\"  \");\n+    CONTINUATION_LINE_WITH_END_QUOTES.setContentAreaB(\"        \");\n+\n+    final List<CobolLine> listOfLines =\n+        Arrays.asList(\n+            GOOD_CONTINUATION_LINE_TO_TEST,\n+            SINGLE_CONTINUATION_LINE_TO_TEST,\n+            TRAILING_QUOTE_CONTINUATION_LINE,\n+            CONTINUATION_LINE,\n+            BAD_CONTINUATION_LINE_TO_TEST,\n+            EMPTY_CONTINUATION_LINE_TO_TEST,\n+            COMMENT_LINE_TO_TEST,\n+            COMPILER_DIRECTIVE_LINE_TO_TEST,\n+            NORMAL_LINE_TO_TEST,\n+            DEBUG_LINE_TO_TEST,\n+            CONTINUATION_LINE_WITH_END_QUOTES);\n+    CobolLineIndicatorProcessorImpl processor = new CobolLineIndicatorProcessorImpl();\n+    processor.processLines(listOfLines);\n+\n+    // assertEquals(\"RANDOM TEXT\",processor.processLine(CONTINUATION_LINE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93566f1ba80add99f2d1c3090766fed3515cbfcf"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0NjIxMQ==", "bodyText": "Please, provide the javadoc description for this and following classes", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/157#discussion_r371346211", "createdAt": "2020-01-27T16:31:48Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/preprocessor/sub/line/rewriter/impl/CobolLineIndicatorProcessorImplTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.core.cobol.preprocessor.sub.line.rewriter.impl;\n+\n+import static com.ca.lsp.core.cobol.preprocessor.CobolSourceFormat.FIXED;\n+import static com.ca.lsp.core.cobol.preprocessor.ProcessingConstants.COMMENT_TAG;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.COMMENT;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.COMPILER_DIRECTIVE;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.CONTINUATION;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.NORMAL;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.DEBUG;\n+import static com.ca.lsp.core.cobol.preprocessor.ProcessingConstants.WS;\n+import static org.junit.Assert.assertEquals;\n+\n+import com.ca.lsp.core.cobol.preprocessor.sub.CobolLine;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.junit.Test;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93566f1ba80add99f2d1c3090766fed3515cbfcf"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0NzA5Ng==", "bodyText": "These lines are not formatted properly", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/157#discussion_r371347096", "createdAt": "2020-01-27T16:33:14Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/preprocessor/sub/util/PreprocessorStringUtilsTest.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.core.cobol.preprocessor.sub.util;\n+\n+import static org.junit.Assert.assertEquals;\n+import org.junit.Test;\n+\n+\n+public class PreprocessorStringUtilsTest {\n+\n+  final String TEST_SINGLE_QUOTE_STRING = \"\\'TESTING IF ALL QUOTES WILL BE REMOVED\\'\";\n+  final String TEST_DOUBLE_QUOTE_STRING = \"\\\"TESTING IF ALL QUOTES WILL BE REMOVED\\\"\";\n+  final String EXPECTED_STRING = \"TESTING IF ALL QUOTES WILL BE REMOVED\";\n+\n+  @Test\n+  public void trimQuotesTest() {\n+    assertEquals(EXPECTED_STRING,PreprocessorStringUtils.trimQuotes(TEST_SINGLE_QUOTE_STRING));\n+    assertEquals(EXPECTED_STRING,PreprocessorStringUtils.trimQuotes(TEST_DOUBLE_QUOTE_STRING));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93566f1ba80add99f2d1c3090766fed3515cbfcf"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0ODkzMg==", "bodyText": "Method names should be in a camel-case starting with a lower-case character.\nThe same for the other methods here.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/157#discussion_r371348932", "createdAt": "2020-01-27T16:36:18Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/strategy/CobolErrorStrategyTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.core.cobol.strategy;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import org.antlr.v4.runtime.FailedPredicateException;\n+import org.antlr.v4.runtime.InputMismatchException;\n+import org.antlr.v4.runtime.NoViableAltException;\n+import org.antlr.v4.runtime.Parser;\n+import org.antlr.v4.runtime.RecognitionException;\n+import org.antlr.v4.runtime.Token;\n+import org.antlr.v4.runtime.TokenStream;\n+import org.antlr.v4.runtime.VocabularyImpl;\n+import org.antlr.v4.runtime.misc.IntervalSet;\n+import org.junit.Test;\n+\n+public class CobolErrorStrategyTest {\n+  @Test\n+  public void NoViableAltExceptionTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93566f1ba80add99f2d1c3090766fed3515cbfcf"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff451978dc41ee4bc7807f8747a87e492157e7a6", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/ff451978dc41ee4bc7807f8747a87e492157e7a6", "committedDate": "2020-01-27T17:04:52Z", "message": "converted fields to local variables and removed commented line and added javadoc\n\nSigned-off-by: Ramy Abdalla <ramy.abdalla@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bc2a4fe940301b9eb8c00d40fc5a3f381315556", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/7bc2a4fe940301b9eb8c00d40fc5a3f381315556", "committedDate": "2020-01-27T17:06:12Z", "message": "corrected formatting for CobolLineIndicatorProcessorImplTest\n\nSigned-off-by: Ramy Abdalla <ramy.abdalla@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf547f19f5375da893fdf346deea382fe4567395", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/cf547f19f5375da893fdf346deea382fe4567395", "committedDate": "2020-01-27T17:07:32Z", "message": "switched methods to camel-case naming in CobolErrorStrategyTest\n\nSigned-off-by: Ramy Abdalla <ramy.abdalla@broadcom.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MTg5NjEx", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/157#pullrequestreview-349189611", "createdAt": "2020-01-28T08:17:42Z", "commit": {"oid": "cf547f19f5375da893fdf346deea382fe4567395"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwODoxNzo0M1rOFicKzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwODoxNzo0M1rOFicKzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY1NzQyMg==", "bodyText": "Do we really need to emphasize this \"to test\"?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/157#discussion_r371657422", "createdAt": "2020-01-28T08:17:43Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/preprocessor/sub/line/rewriter/impl/CobolLineIndicatorProcessorImplTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.core.cobol.preprocessor.sub.line.rewriter.impl;\n+\n+import static com.ca.lsp.core.cobol.preprocessor.CobolSourceFormat.FIXED;\n+import static com.ca.lsp.core.cobol.preprocessor.ProcessingConstants.COMMENT_TAG;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.COMMENT;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.COMPILER_DIRECTIVE;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.CONTINUATION;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.NORMAL;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.DEBUG;\n+import static com.ca.lsp.core.cobol.preprocessor.ProcessingConstants.WS;\n+import static org.junit.Assert.assertEquals;\n+\n+import com.ca.lsp.core.cobol.preprocessor.sub.CobolLine;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.junit.Test;\n+\n+public class CobolLineIndicatorProcessorImplTest {\n+\n+  /**\n+   * Testing preprocessing formatting for COBOL files, making sure that only needed information is\n+   * being passed to the parser to avoid issues and making token recognition easier\n+   */\n+  @Test\n+  public void processLinesTest() {\n+    final String EMPTY_STRING = \"\";\n+    CobolLine continuationLine = new CobolLine();\n+    CobolLine trailingQuoteContinuationLine = new CobolLine();\n+    CobolLine emptyContinuationLineToTest = new CobolLine();\n+    CobolLine singleContinuationLineToTest = new CobolLine();\n+    CobolLine goodContinuationLineToTest = new CobolLine();\n+    CobolLine badContinuationLineToTest = new CobolLine();\n+    CobolLine commentLineToTest = new CobolLine();\n+    CobolLine continuationLineWithEndQuotes = new CobolLine();\n+    CobolLine compilerDirectiveLineToTest = new CobolLine();\n+    CobolLine normalLineToTest = new CobolLine();\n+    CobolLine debugLineToTest = new CobolLine();\n+    continuationLine.setType(CONTINUATION);\n+    continuationLine.setIndicatorArea(\"-\");\n+    continuationLine.setContentAreaA(\"        \\\"CONTINUED LINE ENDS HERE\\\"     \");\n+\n+    goodContinuationLineToTest.setType(CONTINUATION);\n+    goodContinuationLineToTest.setSuccessor(continuationLine);\n+    goodContinuationLineToTest.setIndicatorArea(WS);\n+    goodContinuationLineToTest.setContentAreaA(\"       \\\"RANDOM TEXT   \");\n+    goodContinuationLineToTest.setContentAreaB(\"        \");\n+\n+    singleContinuationLineToTest.setType(CONTINUATION);\n+    singleContinuationLineToTest.setSuccessor(continuationLine);\n+    singleContinuationLineToTest.setIndicatorArea(WS);\n+    singleContinuationLineToTest.setContentAreaA(\"       'RANDOM TEXT   \");\n+    singleContinuationLineToTest.setContentAreaB(\"        \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf547f19f5375da893fdf346deea382fe4567395"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MTkwMTEw", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/157#pullrequestreview-349190110", "createdAt": "2020-01-28T08:18:51Z", "commit": {"oid": "cf547f19f5375da893fdf346deea382fe4567395"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwODoxODo1MVrOFicMVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwODoxODo1MVrOFicMVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY1NzgxMw==", "bodyText": "We should add a line of comment (or a javadoc if defined in single unit test) to explain in detail what we are trying to verify.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/157#discussion_r371657813", "createdAt": "2020-01-28T08:18:51Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/preprocessor/sub/line/rewriter/impl/CobolLineIndicatorProcessorImplTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.core.cobol.preprocessor.sub.line.rewriter.impl;\n+\n+import static com.ca.lsp.core.cobol.preprocessor.CobolSourceFormat.FIXED;\n+import static com.ca.lsp.core.cobol.preprocessor.ProcessingConstants.COMMENT_TAG;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.COMMENT;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.COMPILER_DIRECTIVE;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.CONTINUATION;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.NORMAL;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.DEBUG;\n+import static com.ca.lsp.core.cobol.preprocessor.ProcessingConstants.WS;\n+import static org.junit.Assert.assertEquals;\n+\n+import com.ca.lsp.core.cobol.preprocessor.sub.CobolLine;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.junit.Test;\n+\n+public class CobolLineIndicatorProcessorImplTest {\n+\n+  /**\n+   * Testing preprocessing formatting for COBOL files, making sure that only needed information is\n+   * being passed to the parser to avoid issues and making token recognition easier\n+   */\n+  @Test\n+  public void processLinesTest() {\n+    final String EMPTY_STRING = \"\";\n+    CobolLine continuationLine = new CobolLine();\n+    CobolLine trailingQuoteContinuationLine = new CobolLine();\n+    CobolLine emptyContinuationLineToTest = new CobolLine();\n+    CobolLine singleContinuationLineToTest = new CobolLine();\n+    CobolLine goodContinuationLineToTest = new CobolLine();\n+    CobolLine badContinuationLineToTest = new CobolLine();\n+    CobolLine commentLineToTest = new CobolLine();\n+    CobolLine continuationLineWithEndQuotes = new CobolLine();\n+    CobolLine compilerDirectiveLineToTest = new CobolLine();\n+    CobolLine normalLineToTest = new CobolLine();\n+    CobolLine debugLineToTest = new CobolLine();\n+    continuationLine.setType(CONTINUATION);\n+    continuationLine.setIndicatorArea(\"-\");\n+    continuationLine.setContentAreaA(\"        \\\"CONTINUED LINE ENDS HERE\\\"     \");\n+\n+    goodContinuationLineToTest.setType(CONTINUATION);\n+    goodContinuationLineToTest.setSuccessor(continuationLine);\n+    goodContinuationLineToTest.setIndicatorArea(WS);\n+    goodContinuationLineToTest.setContentAreaA(\"       \\\"RANDOM TEXT   \");\n+    goodContinuationLineToTest.setContentAreaB(\"        \");\n+\n+    singleContinuationLineToTest.setType(CONTINUATION);\n+    singleContinuationLineToTest.setSuccessor(continuationLine);\n+    singleContinuationLineToTest.setIndicatorArea(WS);\n+    singleContinuationLineToTest.setContentAreaA(\"       'RANDOM TEXT   \");\n+    singleContinuationLineToTest.setContentAreaB(\"        \");\n+\n+    trailingQuoteContinuationLine.setType(CONTINUATION);\n+    trailingQuoteContinuationLine.setSuccessor(continuationLine);\n+    trailingQuoteContinuationLine.setIndicatorArea(WS);\n+    trailingQuoteContinuationLine.setContentAreaA(\"         \\\"\");\n+    trailingQuoteContinuationLine.setContentAreaB(\"\");\n+\n+    badContinuationLineToTest.setType(CONTINUATION);\n+    badContinuationLineToTest.setPredecessor(goodContinuationLineToTest);\n+    badContinuationLineToTest.setContentAreaA(\"        \\\"RANDOM TEXT   \");\n+    badContinuationLineToTest.setContentAreaB(\"        \");\n+\n+    emptyContinuationLineToTest.setType(CONTINUATION);\n+    emptyContinuationLineToTest.setSuccessor(null);\n+    emptyContinuationLineToTest.setContentAreaA(\"           \");\n+    emptyContinuationLineToTest.setContentAreaB(\"           \");\n+\n+    commentLineToTest.setType(COMMENT);\n+    commentLineToTest.setIndicatorArea(\"*\");\n+    commentLineToTest.setContentAreaA(\"THIS IS A COMMENT        \");\n+\n+    compilerDirectiveLineToTest.setType(COMPILER_DIRECTIVE);\n+    compilerDirectiveLineToTest.setIndicatorArea(WS);\n+    compilerDirectiveLineToTest.setContentAreaA(\"DEFINE\");\n+\n+    normalLineToTest.setType(NORMAL);\n+    normalLineToTest.setFormat(FIXED);\n+    normalLineToTest.setIndicatorArea(WS);\n+    normalLineToTest.setContentAreaA(\"         RANDOM TEXT ,  \");\n+\n+    debugLineToTest.setType(DEBUG);\n+    debugLineToTest.setIndicatorArea(WS);\n+    debugLineToTest.setContentAreaA(\"     DEBUG LINE HERE      \");\n+\n+    continuationLineWithEndQuotes.setType(CONTINUATION);\n+    continuationLineWithEndQuotes.setPredecessor(continuationLine);\n+    continuationLineWithEndQuotes.setSuccessor(continuationLine);\n+    continuationLineWithEndQuotes.setIndicatorArea(WS);\n+    continuationLineWithEndQuotes.setContentAreaA(\"       \\\"RANDOM TEXT \\\"  \");\n+    continuationLineWithEndQuotes.setContentAreaB(\"        \");\n+\n+    final List<CobolLine> listOfLines =\n+        Arrays.asList(\n+            goodContinuationLineToTest,\n+            singleContinuationLineToTest,\n+            trailingQuoteContinuationLine,\n+            continuationLine,\n+            badContinuationLineToTest,\n+            emptyContinuationLineToTest,\n+            commentLineToTest,\n+            compilerDirectiveLineToTest,\n+            normalLineToTest,\n+            debugLineToTest,\n+            continuationLineWithEndQuotes);\n+    CobolLineIndicatorProcessorImpl processor = new CobolLineIndicatorProcessorImpl();\n+    processor.processLines(listOfLines);\n+\n+    assertEquals(\n+        WS + \"\\\"RANDOM TEXT           \",\n+        processor.processLines(listOfLines).get(0).getIndicatorArea()\n+            + processor.processLines(listOfLines).get(0).getContentArea());\n+    assertEquals(\n+        WS + \"'RANDOM TEXT           \",\n+        processor.processLines(listOfLines).get(1).getIndicatorArea()\n+            + processor.processLines(listOfLines).get(1).getContentArea());\n+    assertEquals(\n+        WS + \"\\\"\",\n+        processor.processLines(listOfLines).get(2).getIndicatorArea()\n+            + processor.processLines(listOfLines).get(2).getContentArea());\n+    assertEquals(\n+        WS + \"CONTINUED LINE ENDS HERE\\\"\",\n+        processor.processLines(listOfLines).get(3).getIndicatorArea()\n+            + processor.processLines(listOfLines).get(3).getContentArea());\n+    assertEquals(\n+        WS + \"RANDOM TEXT\",\n+        processor.processLines(listOfLines).get(4).getIndicatorArea()\n+            + processor.processLines(listOfLines).get(4).getContentArea());\n+    assertEquals(\n+        WS + EMPTY_STRING,\n+        processor.processLines(listOfLines).get(5).getIndicatorArea()\n+            + processor.processLines(listOfLines).get(5).getContentArea());\n+    assertEquals(\n+        COMMENT_TAG + WS + \"THIS IS A COMMENT\",\n+        processor.processLines(listOfLines).get(6).getIndicatorArea()\n+            + processor.processLines(listOfLines).get(6).getContentArea());\n+    assertEquals(\n+        WS + EMPTY_STRING,\n+        processor.processLines(listOfLines).get(7).getIndicatorArea()\n+            + processor.processLines(listOfLines).get(7).getContentArea());\n+    assertEquals(\n+        WS + \"         RANDOM TEXT , \",\n+        processor.processLines(listOfLines).get(8).getIndicatorArea()\n+            + processor.processLines(listOfLines).get(8).getContentArea());\n+    assertEquals(\n+        WS + \"     DEBUG LINE HERE\",\n+        processor.processLines(listOfLines).get(9).getIndicatorArea()\n+            + processor.processLines(listOfLines).get(9).getContentArea());\n+    assertEquals(\n+        WS + \"RANDOM TEXT \\\"\",\n+        processor.processLines(listOfLines).get(10).getIndicatorArea()\n+            + processor.processLines(listOfLines).get(10).getContentArea());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf547f19f5375da893fdf346deea382fe4567395"}, "originalPosition": 167}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MjA0NzA3", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/157#pullrequestreview-349204707", "createdAt": "2020-01-28T08:48:28Z", "commit": {"oid": "cf547f19f5375da893fdf346deea382fe4567395"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwODo0ODoyOFrOFic6Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwODo0ODoyOFrOFic6Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2OTU3NA==", "bodyText": "These constants should be private", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/157#discussion_r371669574", "createdAt": "2020-01-28T08:48:28Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/preprocessor/sub/util/PreprocessorStringUtilsTest.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.core.cobol.preprocessor.sub.util;\n+\n+import static org.junit.Assert.assertEquals;\n+import org.junit.Test;\n+\n+public class PreprocessorStringUtilsTest {\n+\n+  static final String TEST_SINGLE_QUOTE_STRING = \"\\'TESTING IF ALL QUOTES WILL BE REMOVED\\'\";\n+  static final String TEST_DOUBLE_QUOTE_STRING = \"\\\"TESTING IF ALL QUOTES WILL BE REMOVED\\\"\";\n+  static final String EXPECTED_STRING = \"TESTING IF ALL QUOTES WILL BE REMOVED\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf547f19f5375da893fdf346deea382fe4567395"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MjA5MzE2", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/157#pullrequestreview-349209316", "createdAt": "2020-01-28T08:56:17Z", "commit": {"oid": "cf547f19f5375da893fdf346deea382fe4567395"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwODo1NjoxN1rOFidIxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwODo1NjoxN1rOFidIxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY3MzI4Nw==", "bodyText": "Every class should have a javadoc comment before the class name describing its purpose", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/157#discussion_r371673287", "createdAt": "2020-01-28T08:56:17Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/preprocessor/sub/line/rewriter/impl/CobolLineIndicatorProcessorImplTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.core.cobol.preprocessor.sub.line.rewriter.impl;\n+\n+import static com.ca.lsp.core.cobol.preprocessor.CobolSourceFormat.FIXED;\n+import static com.ca.lsp.core.cobol.preprocessor.ProcessingConstants.COMMENT_TAG;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.COMMENT;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.COMPILER_DIRECTIVE;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.CONTINUATION;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.NORMAL;\n+import static com.ca.lsp.core.cobol.preprocessor.sub.CobolLineTypeEnum.DEBUG;\n+import static com.ca.lsp.core.cobol.preprocessor.ProcessingConstants.WS;\n+import static org.junit.Assert.assertEquals;\n+\n+import com.ca.lsp.core.cobol.preprocessor.sub.CobolLine;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.junit.Test;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0NjIxMQ=="}, "originalCommit": {"oid": "93566f1ba80add99f2d1c3090766fed3515cbfcf"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c41b14bc6bdeb98caa8abadf55b4d58d61eba06", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/8c41b14bc6bdeb98caa8abadf55b4d58d61eba06", "committedDate": "2020-01-28T09:40:52Z", "message": "Merge branch 'development' into CoverageForCoreParser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01e8448394c156b87c71ae151a50895511c4e57d", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/01e8448394c156b87c71ae151a50895511c4e57d", "committedDate": "2020-01-28T17:24:02Z", "message": "adjusting CobolLineIndicatorProcessorImplTest work in progress\n\nSigned-off-by: Ramy Abdalla <ramy.abdalla@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90cf1304ad493df6527d40c7decc943640743bd4", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/90cf1304ad493df6527d40c7decc943640743bd4", "committedDate": "2020-01-29T10:34:15Z", "message": "Merge branch 'development' into CoverageForCoreParser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f11078f8dc7362b5012657cae7e00e9205b8faa", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/0f11078f8dc7362b5012657cae7e00e9205b8faa", "committedDate": "2020-01-30T12:38:51Z", "message": "Merge branch 'development' into CoverageForCoreParser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72b5c4668d619f9d374e41c1d551afe24a8df1a3", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/72b5c4668d619f9d374e41c1d551afe24a8df1a3", "committedDate": "2020-01-30T12:44:06Z", "message": "removed unused import\n\nSigned-off-by: Ramy Abdalla <ramy.abdalla@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "357f35e92b5973506e14bd24ebbb3db6253447ef", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/357f35e92b5973506e14bd24ebbb3db6253447ef", "committedDate": "2020-01-30T12:45:02Z", "message": "reworked CobolLineIndicatorProcessorImplTest.java\n\nSigned-off-by: Ramy Abdalla <ramy.abdalla@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a64956fb2d1c6dc0a5881f4ad4bbea5881e5883c", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/a64956fb2d1c6dc0a5881f4ad4bbea5881e5883c", "committedDate": "2020-01-30T13:30:57Z", "message": "added javadoc format documentation for each test class\n\nSigned-off-by: Ramy Abdalla <ramy.abdalla@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94eb6e158116013c91ad8acf64a9f3eaa22dc075", "author": {"user": null}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/94eb6e158116013c91ad8acf64a9f3eaa22dc075", "committedDate": "2020-01-30T14:56:56Z", "message": "added javadoc comments for classes CobolErrorStrategyTest and CobolLineIndicatorProcessorImplTest\n\nSigned-off-by: Ramy Abdalla <ramy.abdalla@broadcom.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwODg3MDg0", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/157#pullrequestreview-350887084", "createdAt": "2020-01-30T14:58:15Z", "commit": {"oid": "94eb6e158116013c91ad8acf64a9f3eaa22dc075"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1173, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}