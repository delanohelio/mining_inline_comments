{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzODM0NjA5", "number": 448, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDo1ODo0MFrOEV3ckA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODowMDoyOVrOEWsQPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzYzOTg0OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/preprocessor/sub/document/impl/CobolSemanticParserListenerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDo1ODo0MFrOG83aCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDo1ODo0MFrOG83aCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3NTUzMA==", "bodyText": "I think it may be just \"equals\" due to we specify it using enum.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r466475530", "createdAt": "2020-08-06T14:58:40Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/preprocessor/sub/document/impl/CobolSemanticParserListenerImpl.java", "diffHunk": "@@ -132,12 +137,15 @@ public void exitCopyStatement(@Nonnull CopyStatementContext ctx) {\n     /*\n      * define the copy book\n      */\n-    CopySourceContext copySource = ctx.copySource();\n-    String copybookName = retrieveCopybookName(copySource);\n-    Position position = retrievePosition(copySource);\n-    defineCopybook(copybookName, position);\n-    checkCopybookNameLength(copybookName, position);\n-    this.preprocessorCleanerService.excludeStatementFromText(ctx, COMMENT_TAG, tokens);\n+\n+    if (copybookScanAnalysis.equalsIgnoreCase(\"ENABLED\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e5ba4d85de32fc5a3012aff6b4242c177fccaa0"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzY1MjQ2OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/preprocessor/sub/document/impl/CobolSemanticParserListenerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTowMTozM1rOG83iHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjozNjo0N1rOG9OOOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3NzU5Ng==", "bodyText": "I'm not sure if we need this check while analyzing the extended document. In fact, it checks the semantics, but I don't know if it will be useful for the user at that stage", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r466477596", "createdAt": "2020-08-06T15:01:33Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/preprocessor/sub/document/impl/CobolSemanticParserListenerImpl.java", "diffHunk": "@@ -132,12 +137,15 @@ public void exitCopyStatement(@Nonnull CopyStatementContext ctx) {\n     /*\n      * define the copy book\n      */\n-    CopySourceContext copySource = ctx.copySource();\n-    String copybookName = retrieveCopybookName(copySource);\n-    Position position = retrievePosition(copySource);\n-    defineCopybook(copybookName, position);\n-    checkCopybookNameLength(copybookName, position);\n-    this.preprocessorCleanerService.excludeStatementFromText(ctx, COMMENT_TAG, tokens);\n+\n+    if (copybookScanAnalysis.equalsIgnoreCase(\"ENABLED\")) {\n+      CopySourceContext copySource = ctx.copySource();\n+      String copybookName = retrieveCopybookName(copySource);\n+      Position position = retrievePosition(copySource);\n+      defineCopybook(copybookName, position);\n+      checkCopybookNameLength(copybookName, position);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e5ba4d85de32fc5a3012aff6b4242c177fccaa0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0OTMzOQ==", "bodyText": "well.. the purpose here is to don't throw syntax errors for copybooks that are not found", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r466849339", "createdAt": "2020-08-07T06:36:47Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/preprocessor/sub/document/impl/CobolSemanticParserListenerImpl.java", "diffHunk": "@@ -132,12 +137,15 @@ public void exitCopyStatement(@Nonnull CopyStatementContext ctx) {\n     /*\n      * define the copy book\n      */\n-    CopySourceContext copySource = ctx.copySource();\n-    String copybookName = retrieveCopybookName(copySource);\n-    Position position = retrievePosition(copySource);\n-    defineCopybook(copybookName, position);\n-    checkCopybookNameLength(copybookName, position);\n-    this.preprocessorCleanerService.excludeStatementFromText(ctx, COMMENT_TAG, tokens);\n+\n+    if (copybookScanAnalysis.equalsIgnoreCase(\"ENABLED\")) {\n+      CopySourceContext copySource = ctx.copySource();\n+      String copybookName = retrieveCopybookName(copySource);\n+      Position position = retrievePosition(copySource);\n+      defineCopybook(copybookName, position);\n+      checkCopybookNameLength(copybookName, position);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3NzU5Ng=="}, "originalCommit": {"oid": "3e5ba4d85de32fc5a3012aff6b4242c177fccaa0"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzY4NTA1OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/TextDocumentSyncType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTowOTowN1rOG832tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTowOTowN1rOG832tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4Mjg3MA==", "bodyText": "Do you use DID_CLOSE?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r466482870", "createdAt": "2020-08-06T15:09:07Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/TextDocumentSyncType.java", "diffHunk": "@@ -9,13 +9,17 @@\n  * SPDX-License-Identifier: EPL-2.0\n  *\n  * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n  *\n- *   Broadcom, Inc. - initial API and implementation\n  */\n+\n package com.ca.lsp.cobol.service;\n \n-/** This enum class used to track text synchronization type for the processed document. */\n+/**\n+ * This enum class contains the kind of document synchronization that could be sent from the client\n+ */\n public enum TextDocumentSyncType {\n   DID_OPEN,\n-  DID_CHANGE\n+  DID_CHANGE,\n+  DID_CLOSE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e5ba4d85de32fc5a3012aff6b4242c177fccaa0"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzc0ODkwOnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CopybookScanAnalysis.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNToyNDowOFrOG84e1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNToyNDowOFrOG84e1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ5MzE0Mg==", "bodyText": "The faster would be to check the sync type first, then do regex matching", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r466493142", "createdAt": "2020-08-06T15:24:08Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CopybookScanAnalysis.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import static com.ca.lsp.cobol.service.utils.FileSystemService.isFileUnderExtendedSourceFolder;\n+\n+/** This enum class used to track text synchronization type for the processed document. */\n+public enum CopybookScanAnalysis {\n+  ENABLED,\n+  DISABLED;\n+\n+  /**\n+   * This method verify if enable or disable copybook management based on two factors: 1) the file\n+   * is an extended source file, 2) the file is open in DID_OPEN|DID_CHANGE\n+   *\n+   * @param uri of the document opened in the editor by the client\n+   * @param textDocSyncType define the document sync mode that could be [{@link\n+   *     TextDocumentSyncType#DID_OPEN}|{@link TextDocumentSyncType#DID_CHANGE}]\n+   * @return A value of that could be [{@link CopybookScanAnalysis#ENABLED}|{@link\n+   *     CopybookScanAnalysis#DISABLED}]\n+   */\n+  public static CopybookScanAnalysis getCopybookScanAnalysis(String uri, String textDocSyncType) {\n+\n+    return isFileUnderExtendedSourceFolder(uri)\n+        ? DISABLED\n+        : getCopybookScanAnalysisByDocSync(textDocSyncType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e5ba4d85de32fc5a3012aff6b4242c177fccaa0"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzgyMzM3OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CopybookScanAnalysis.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTo0MDoyNlrOG85MyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzoyMzozNVrOG9PV9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNDkwNA==", "bodyText": "I'm not sure that you need this as a separate enum. You may just reuse the TextDocumentSyncType, but change its semantic: rename to something more descriptive, e.g. CopybookProcessingMode and redefine its elements to something kinda RESOLVE, IGNORE and SKIP.\nThe RESOLVE will act as DID_OPEN now, IGNORE as DID_CHANGE (as I can see, we don't really check this value, only equity to DID_OPEN, but let it be), and SKIP will disable the copybook processing for the extended sources.\nSo, you will call the isFileUnderExtendedSourceFolder() on didOpen or didChange and send the according value. The value is that the purpose of the parameter goes from its name, i.e. it is more descriptive. Also, you will have only one enum instead of two.\nThis is only an idea, the decision is up to you", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r466504904", "createdAt": "2020-08-06T15:40:26Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CopybookScanAnalysis.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import static com.ca.lsp.cobol.service.utils.FileSystemService.isFileUnderExtendedSourceFolder;\n+\n+/** This enum class used to track text synchronization type for the processed document. */\n+public enum CopybookScanAnalysis {\n+  ENABLED,\n+  DISABLED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e5ba4d85de32fc5a3012aff6b4242c177fccaa0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0NzI1MQ==", "bodyText": "Initially I defined one enum and trowed away did_open, change and so on. But later on I verified that we still need to distinguish if a document is in did_open or did_change. Because there are two conditions that will disable the copybook analysis:\n\nthe file is an extended document\nthe file is in did_change\n\nSo for that reason I decided to separate those two concerns into two enums.\nBtw I like the name you suggested CopybookProcessingMode and the values, so if u are agree I will rename the enum CopybookScanAnalysis that didn't like a lot as name.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r466847251", "createdAt": "2020-08-07T06:31:02Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CopybookScanAnalysis.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import static com.ca.lsp.cobol.service.utils.FileSystemService.isFileUnderExtendedSourceFolder;\n+\n+/** This enum class used to track text synchronization type for the processed document. */\n+public enum CopybookScanAnalysis {\n+  ENABLED,\n+  DISABLED;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNDkwNA=="}, "originalCommit": {"oid": "3e5ba4d85de32fc5a3012aff6b4242c177fccaa0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2MzE5Mw==", "bodyText": "Ok, why not", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r466863193", "createdAt": "2020-08-07T07:12:42Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CopybookScanAnalysis.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import static com.ca.lsp.cobol.service.utils.FileSystemService.isFileUnderExtendedSourceFolder;\n+\n+/** This enum class used to track text synchronization type for the processed document. */\n+public enum CopybookScanAnalysis {\n+  ENABLED,\n+  DISABLED;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNDkwNA=="}, "originalCommit": {"oid": "3e5ba4d85de32fc5a3012aff6b4242c177fccaa0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2NzcwMg==", "bodyText": "\ud83d\udcaa", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r466867702", "createdAt": "2020-08-07T07:23:35Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CopybookScanAnalysis.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import static com.ca.lsp.cobol.service.utils.FileSystemService.isFileUnderExtendedSourceFolder;\n+\n+/** This enum class used to track text synchronization type for the processed document. */\n+public enum CopybookScanAnalysis {\n+  ENABLED,\n+  DISABLED;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNDkwNA=="}, "originalCommit": {"oid": "3e5ba4d85de32fc5a3012aff6b4242c177fccaa0"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzgyOTI5OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CopybookScanAnalysis.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTo0MTo0MVrOG85QYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTo0MTo0MVrOG85QYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNTgyNQ==", "bodyText": "\"This method checks...\" would be more correct here", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r466505825", "createdAt": "2020-08-06T15:41:41Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CopybookScanAnalysis.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import static com.ca.lsp.cobol.service.utils.FileSystemService.isFileUnderExtendedSourceFolder;\n+\n+/** This enum class used to track text synchronization type for the processed document. */\n+public enum CopybookScanAnalysis {\n+  ENABLED,\n+  DISABLED;\n+\n+  /**\n+   * This method verify if enable or disable copybook management based on two factors: 1) the file\n+   * is an extended source file, 2) the file is open in DID_OPEN|DID_CHANGE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e5ba4d85de32fc5a3012aff6b4242c177fccaa0"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzgzMzM2OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/utils/FileSystemService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTo0Mjo0NVrOG85TCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODowNDoxNlrOG9Qh8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNjUwNw==", "bodyText": "Are you sure that you want to provide an implementation in the interface? Usually, we must use an interface for other purposes.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r466506507", "createdAt": "2020-08-06T15:42:45Z", "author": {"login": "grianbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/utils/FileSystemService.java", "diffHunk": "@@ -73,4 +74,15 @@\n    */\n   @Nonnull\n   String decodeURI(@Nonnull String uri);\n+\n+  /**\n+   * This method validate an URI to verify if is defined as extended document, accordining to a\n+   * regex.\n+   *\n+   * @param uri document URI opened in the client\n+   * @return true if the document is an extended document, false otherwise\n+   */\n+  static boolean isFileUnderExtendedSourceFolder(String uri) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e5ba4d85de32fc5a3012aff6b4242c177fccaa0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1Mjc5Mw==", "bodyText": "Well.. this method took in input an URI and this class looks appropriate for that concern and I don't want to create any derivatives of that regex match at the moment, but I am welcome to evaluate alternatives!", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r466852793", "createdAt": "2020-08-07T06:46:13Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/utils/FileSystemService.java", "diffHunk": "@@ -73,4 +74,15 @@\n    */\n   @Nonnull\n   String decodeURI(@Nonnull String uri);\n+\n+  /**\n+   * This method validate an URI to verify if is defined as extended document, accordining to a\n+   * regex.\n+   *\n+   * @param uri document URI opened in the client\n+   * @return true if the document is an extended document, false otherwise\n+   */\n+  static boolean isFileUnderExtendedSourceFolder(String uri) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNjUwNw=="}, "originalCommit": {"oid": "3e5ba4d85de32fc5a3012aff6b4242c177fccaa0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg4NzE1Mw==", "bodyText": "As you see, we keep implementations in the WorkspaceFileService class but use this one only for function declarations. I want to suggest to follow this.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r466887153", "createdAt": "2020-08-07T08:04:16Z", "author": {"login": "grianbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/utils/FileSystemService.java", "diffHunk": "@@ -73,4 +74,15 @@\n    */\n   @Nonnull\n   String decodeURI(@Nonnull String uri);\n+\n+  /**\n+   * This method validate an URI to verify if is defined as extended document, accordining to a\n+   * regex.\n+   *\n+   * @param uri document URI opened in the client\n+   * @return true if the document is an extended document, false otherwise\n+   */\n+  static boolean isFileUnderExtendedSourceFolder(String uri) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNjUwNw=="}, "originalCommit": {"oid": "3e5ba4d85de32fc5a3012aff6b4242c177fccaa0"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzgzNzIzOnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/utils/FileSystemService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTo0Mzo0M1rOG85ViA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTo0Mzo0M1rOG85ViA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNzE0NA==", "bodyText": "A couple of typos here, \"This method validates the URI to verify if is defined as an extended document, according to the regex.\"", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r466507144", "createdAt": "2020-08-06T15:43:43Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/utils/FileSystemService.java", "diffHunk": "@@ -73,4 +74,15 @@\n    */\n   @Nonnull\n   String decodeURI(@Nonnull String uri);\n+\n+  /**\n+   * This method validate an URI to verify if is defined as extended document, accordining to a\n+   * regex.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e5ba4d85de32fc5a3012aff6b4242c177fccaa0"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzg0Mjc4OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/MyTextDocumentServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTo0NDo1NFrOG85Y_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTo0NDo1NFrOG85Y_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwODAyOA==", "bodyText": "\"This test verifies\" here and further", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r466508028", "createdAt": "2020-08-06T15:44:54Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/MyTextDocumentServiceTest.java", "diffHunk": "@@ -157,6 +158,60 @@ public void testNotAllowedFileExtensionAnalysis() {\n                         .equals(\"The given document extension is unsupported: \" + CPY_EXTENSION)));\n   }\n \n+  /**\n+   * This test verify that when an extended document is opened, the code is analyzed and the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e5ba4d85de32fc5a3012aff6b4242c177fccaa0"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzg1MDk4OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/utils/FileSystemService.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTo0Njo0NVrOG85eBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0MzoyOFrOG9YZLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwOTMxOQ==", "bodyText": "It is not clear what you mean here. Because (?:) is a non-captured group, but inside you have a captured one. Probably file:///.*?/\\.c4z/\\.extsrcs/.+ will be enough.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r466509319", "createdAt": "2020-08-06T15:46:45Z", "author": {"login": "grianbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/utils/FileSystemService.java", "diffHunk": "@@ -73,4 +74,15 @@\n    */\n   @Nonnull\n   String decodeURI(@Nonnull String uri);\n+\n+  /**\n+   * This method validate an URI to verify if is defined as extended document, accordining to a\n+   * regex.\n+   *\n+   * @param uri document URI opened in the client\n+   * @return true if the document is an extended document, false otherwise\n+   */\n+  static boolean isFileUnderExtendedSourceFolder(String uri) {\n+    return Pattern.matches(\"file:///(?:(.*?/\\\\.c4z/\\\\.extsrcs/.+)|\\\\.c4z/\\\\.extsrcs/.+)\", uri);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e5ba4d85de32fc5a3012aff6b4242c177fccaa0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk5MjAyNg==", "bodyText": "To plan further a refactoring, getting rid of FileSystemService interface (tbd), I will move the method into the WorkspaceFileService class", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r466992026", "createdAt": "2020-08-07T11:52:29Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/utils/FileSystemService.java", "diffHunk": "@@ -73,4 +74,15 @@\n    */\n   @Nonnull\n   String decodeURI(@Nonnull String uri);\n+\n+  /**\n+   * This method validate an URI to verify if is defined as extended document, accordining to a\n+   * regex.\n+   *\n+   * @param uri document URI opened in the client\n+   * @return true if the document is an extended document, false otherwise\n+   */\n+  static boolean isFileUnderExtendedSourceFolder(String uri) {\n+    return Pattern.matches(\"file:///(?:(.*?/\\\\.c4z/\\\\.extsrcs/.+)|\\\\.c4z/\\\\.extsrcs/.+)\", uri);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwOTMxOQ=="}, "originalCommit": {"oid": "3e5ba4d85de32fc5a3012aff6b4242c177fccaa0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk5Mjc0MQ==", "bodyText": "Why do you want to get rid of it?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r466992741", "createdAt": "2020-08-07T11:54:00Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/utils/FileSystemService.java", "diffHunk": "@@ -73,4 +74,15 @@\n    */\n   @Nonnull\n   String decodeURI(@Nonnull String uri);\n+\n+  /**\n+   * This method validate an URI to verify if is defined as extended document, accordining to a\n+   * regex.\n+   *\n+   * @param uri document URI opened in the client\n+   * @return true if the document is an extended document, false otherwise\n+   */\n+  static boolean isFileUnderExtendedSourceFolder(String uri) {\n+    return Pattern.matches(\"file:///(?:(.*?/\\\\.c4z/\\\\.extsrcs/.+)|\\\\.c4z/\\\\.extsrcs/.+)\", uri);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwOTMxOQ=="}, "originalCommit": {"oid": "3e5ba4d85de32fc5a3012aff6b4242c177fccaa0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAwNjc2Nw==", "bodyText": "because we came up that WorkspaceFileService could be an utility class with no needs of an interface \ud83d\ude13", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r467006767", "createdAt": "2020-08-07T12:24:13Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/utils/FileSystemService.java", "diffHunk": "@@ -73,4 +74,15 @@\n    */\n   @Nonnull\n   String decodeURI(@Nonnull String uri);\n+\n+  /**\n+   * This method validate an URI to verify if is defined as extended document, accordining to a\n+   * regex.\n+   *\n+   * @param uri document URI opened in the client\n+   * @return true if the document is an extended document, false otherwise\n+   */\n+  static boolean isFileUnderExtendedSourceFolder(String uri) {\n+    return Pattern.matches(\"file:///(?:(.*?/\\\\.c4z/\\\\.extsrcs/.+)|\\\\.c4z/\\\\.extsrcs/.+)\", uri);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwOTMxOQ=="}, "originalCommit": {"oid": "3e5ba4d85de32fc5a3012aff6b4242c177fccaa0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAwOTUyOQ==", "bodyText": "But the initial idea of that was to simplify testing of CopybookService. Please, have a look at CopybookServiceTest", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r467009529", "createdAt": "2020-08-07T12:29:47Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/utils/FileSystemService.java", "diffHunk": "@@ -73,4 +74,15 @@\n    */\n   @Nonnull\n   String decodeURI(@Nonnull String uri);\n+\n+  /**\n+   * This method validate an URI to verify if is defined as extended document, accordining to a\n+   * regex.\n+   *\n+   * @param uri document URI opened in the client\n+   * @return true if the document is an extended document, false otherwise\n+   */\n+  static boolean isFileUnderExtendedSourceFolder(String uri) {\n+    return Pattern.matches(\"file:///(?:(.*?/\\\\.c4z/\\\\.extsrcs/.+)|\\\\.c4z/\\\\.extsrcs/.+)\", uri);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwOTMxOQ=="}, "originalCommit": {"oid": "3e5ba4d85de32fc5a3012aff6b4242c177fccaa0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxNTk4Mw==", "bodyText": "yes and in future you could mock directly the utility class rather than the interface, right? BTW is not a decision that we have to make now! ;)", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r467015983", "createdAt": "2020-08-07T12:43:28Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/utils/FileSystemService.java", "diffHunk": "@@ -73,4 +74,15 @@\n    */\n   @Nonnull\n   String decodeURI(@Nonnull String uri);\n+\n+  /**\n+   * This method validate an URI to verify if is defined as extended document, accordining to a\n+   * regex.\n+   *\n+   * @param uri document URI opened in the client\n+   * @return true if the document is an extended document, false otherwise\n+   */\n+  static boolean isFileUnderExtendedSourceFolder(String uri) {\n+    return Pattern.matches(\"file:///(?:(.*?/\\\\.c4z/\\\\.extsrcs/.+)|\\\\.c4z/\\\\.extsrcs/.+)\", uri);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwOTMxOQ=="}, "originalCommit": {"oid": "3e5ba4d85de32fc5a3012aff6b4242c177fccaa0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjI5MTgzOnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/utils/WorkspaceFileService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODowMDoyOVrOG-EvKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODozNzoxOVrOG-F0iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc0MjUwNw==", "bodyText": "Isn't it overriding of an interface method?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r467742507", "createdAt": "2020-08-10T08:00:29Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/utils/WorkspaceFileService.java", "diffHunk": "@@ -86,4 +87,16 @@ public Path getPathFromURI(@Nonnull String uri) {\n       return null;\n     }\n   }\n+\n+  /**\n+   * This method validates an URI to verify if is defined as extended document, according to a\n+   * regex.\n+   *\n+   * @param uri document URI opened in the client\n+   * @return true if the document is an extended document, false otherwise\n+   */\n+  public static boolean isFileUnderExtendedSourceFolder(String uri) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e8c0848c5d5b1299973a3614a2dd7c058b62fdd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc0NjcwNQ==", "bodyText": "No but is a intermediate step to transform this class in an utility class later on!", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r467746705", "createdAt": "2020-08-10T08:09:51Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/utils/WorkspaceFileService.java", "diffHunk": "@@ -86,4 +87,16 @@ public Path getPathFromURI(@Nonnull String uri) {\n       return null;\n     }\n   }\n+\n+  /**\n+   * This method validates an URI to verify if is defined as extended document, according to a\n+   * regex.\n+   *\n+   * @param uri document URI opened in the client\n+   * @return true if the document is an extended document, false otherwise\n+   */\n+  public static boolean isFileUnderExtendedSourceFolder(String uri) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc0MjUwNw=="}, "originalCommit": {"oid": "4e8c0848c5d5b1299973a3614a2dd7c058b62fdd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc2MDI2NA==", "bodyText": "I cannot say that I like it, because, you know, there is nothing more permanent than a temporary solution. But I'll accept it", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/448#discussion_r467760264", "createdAt": "2020-08-10T08:37:19Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/utils/WorkspaceFileService.java", "diffHunk": "@@ -86,4 +87,16 @@ public Path getPathFromURI(@Nonnull String uri) {\n       return null;\n     }\n   }\n+\n+  /**\n+   * This method validates an URI to verify if is defined as extended document, according to a\n+   * regex.\n+   *\n+   * @param uri document URI opened in the client\n+   * @return true if the document is an extended document, false otherwise\n+   */\n+  public static boolean isFileUnderExtendedSourceFolder(String uri) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc0MjUwNw=="}, "originalCommit": {"oid": "4e8c0848c5d5b1299973a3614a2dd7c058b62fdd"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3916, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}