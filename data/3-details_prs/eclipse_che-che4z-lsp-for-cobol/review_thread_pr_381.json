{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwODYzNTMx", "number": 381, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzo1NDoyNlrOEDVf5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOTowODoyM1rOEDXChA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTMzNDEzOnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/src/__tests__/JavaCheckTest.ts", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzo1NDoyNlrOGgSyiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODo1NTo1MlrOGgUymQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxNTQ2NQ==", "bodyText": "Just a tiny suggestion: this try/catch for negative cases could be probably extracted as separate function", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436515465", "createdAt": "2020-06-08T07:54:26Z", "author": {"login": "zacanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/JavaCheckTest.ts", "diffHunk": "@@ -27,8 +28,93 @@ describe(\"Check Java version\", () => {\n         expect(JavaCheck.isJavaVersionSupported('openjdk version \"12.0.1\" 2018-10-16')).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 11 2018-09-25\")).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 12 2019-03-19\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 13 2019-09-17\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 14 2020-03-17\")).toBeTruthy();\n     });\n-    it(\"checks if Java version is not supported\", async () => {\n+\n+    it(\"when version is not supported\", async () => {\n         expect(JavaCheck.isJavaVersionSupported('java version \"1.7.0_131\"')).toBeFalsy();\n+        expect(JavaCheck.isJavaVersionSupported('java version \"1.5.0_22\"')).toBeFalsy();\n+    });\n+});\n+\n+describe(\"Checks Java installation\", () => {\n+\n+    let javaCheck: JavaCheck;\n+    let map: any;\n+    let checkFn: any;\n+    let stderrFn: any;\n+    const expectedErrMsgJavaVersionFound = \"Java version 8 expected\";\n+    const expectedErrMsgJavaVersionNotFound = \"Java 8 is not found\";\n+\n+    beforeEach(() => {\n+        javaCheck = new JavaCheck();\n+        checkFn = (event, callbackFn) => {\n+            map[event] = callbackFn;\n+        };\n+        stderrFn = (event, callbackFn) => {\n+            map[event] = callbackFn;\n+        };\n+        map = {};\n+    });\n+\n+    it(\"when required version is supported\", async () => {\n+        (cp as any).spawn = jest.fn().mockReturnValue({stderr: {on: stderrFn}, on: jest.fn()});\n+        const promise = javaCheck.isJavaInstalled();\n+        map.data(\"java 11 2018-09-25\");\n+\n+        try {\n+            expect(await promise).toEqual(undefined);\n+        } catch (e) {\n+            expect(e.toString()).toEqual(expectedErrMsgJavaVersionFound);\n+        }\n+    });\n+\n+    it(\"when required version is not supported\", async () => {\n+        (cp as any).spawn = jest.fn().mockReturnValue({stderr: {on: stderrFn}, on: jest.fn()});\n+        const promise = javaCheck.isJavaInstalled();\n+        map.data('java version \"1.5.0_22\"');\n+\n+        try {\n+            await promise;\n+        } catch (e) {\n+            expect(e.toString()).toEqual(expectedErrMsgJavaVersionFound);\n+        }\n+    });\n+\n+    it(\"when 'error' event is emitted  - spawned\", async () => {\n+        (cp as any).spawn = jest.fn().mockReturnValue({stderr: {on: jest.fn()}, on: checkFn});\n+        const promise = javaCheck.isJavaInstalled();\n+        map.error(\"Error: spawn java ENOENT\");\n+\n+        try {\n+            await promise;\n+        } catch (e) {\n+            expect(e.toString()).toEqual(expectedErrMsgJavaVersionNotFound);\n+        }\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8959103e8e5ae2cb5b94dd73340d8613dc693aa4"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU0MDgxMQ==", "bodyText": "Instead of try/catch block, you could use this:\nawait expect(promise).rejects.toEqual(expectedErrMsgJavaVersionNotFound);", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436540811", "createdAt": "2020-06-08T08:42:30Z", "author": {"login": "grianbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/JavaCheckTest.ts", "diffHunk": "@@ -27,8 +28,93 @@ describe(\"Check Java version\", () => {\n         expect(JavaCheck.isJavaVersionSupported('openjdk version \"12.0.1\" 2018-10-16')).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 11 2018-09-25\")).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 12 2019-03-19\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 13 2019-09-17\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 14 2020-03-17\")).toBeTruthy();\n     });\n-    it(\"checks if Java version is not supported\", async () => {\n+\n+    it(\"when version is not supported\", async () => {\n         expect(JavaCheck.isJavaVersionSupported('java version \"1.7.0_131\"')).toBeFalsy();\n+        expect(JavaCheck.isJavaVersionSupported('java version \"1.5.0_22\"')).toBeFalsy();\n+    });\n+});\n+\n+describe(\"Checks Java installation\", () => {\n+\n+    let javaCheck: JavaCheck;\n+    let map: any;\n+    let checkFn: any;\n+    let stderrFn: any;\n+    const expectedErrMsgJavaVersionFound = \"Java version 8 expected\";\n+    const expectedErrMsgJavaVersionNotFound = \"Java 8 is not found\";\n+\n+    beforeEach(() => {\n+        javaCheck = new JavaCheck();\n+        checkFn = (event, callbackFn) => {\n+            map[event] = callbackFn;\n+        };\n+        stderrFn = (event, callbackFn) => {\n+            map[event] = callbackFn;\n+        };\n+        map = {};\n+    });\n+\n+    it(\"when required version is supported\", async () => {\n+        (cp as any).spawn = jest.fn().mockReturnValue({stderr: {on: stderrFn}, on: jest.fn()});\n+        const promise = javaCheck.isJavaInstalled();\n+        map.data(\"java 11 2018-09-25\");\n+\n+        try {\n+            expect(await promise).toEqual(undefined);\n+        } catch (e) {\n+            expect(e.toString()).toEqual(expectedErrMsgJavaVersionFound);\n+        }\n+    });\n+\n+    it(\"when required version is not supported\", async () => {\n+        (cp as any).spawn = jest.fn().mockReturnValue({stderr: {on: stderrFn}, on: jest.fn()});\n+        const promise = javaCheck.isJavaInstalled();\n+        map.data('java version \"1.5.0_22\"');\n+\n+        try {\n+            await promise;\n+        } catch (e) {\n+            expect(e.toString()).toEqual(expectedErrMsgJavaVersionFound);\n+        }\n+    });\n+\n+    it(\"when 'error' event is emitted  - spawned\", async () => {\n+        (cp as any).spawn = jest.fn().mockReturnValue({stderr: {on: jest.fn()}, on: checkFn});\n+        const promise = javaCheck.isJavaInstalled();\n+        map.error(\"Error: spawn java ENOENT\");\n+\n+        try {\n+            await promise;\n+        } catch (e) {\n+            expect(e.toString()).toEqual(expectedErrMsgJavaVersionNotFound);\n+        }\n+    });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxNTQ2NQ=="}, "originalCommit": {"oid": "8959103e8e5ae2cb5b94dd73340d8613dc693aa4"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU0MzI1Mg==", "bodyText": "Just a tiny suggestion: this try/catch for negative cases could be probably extracted as separate function\n\n@zacanbrcom Thanks done", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436543252", "createdAt": "2020-06-08T08:47:05Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/JavaCheckTest.ts", "diffHunk": "@@ -27,8 +28,93 @@ describe(\"Check Java version\", () => {\n         expect(JavaCheck.isJavaVersionSupported('openjdk version \"12.0.1\" 2018-10-16')).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 11 2018-09-25\")).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 12 2019-03-19\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 13 2019-09-17\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 14 2020-03-17\")).toBeTruthy();\n     });\n-    it(\"checks if Java version is not supported\", async () => {\n+\n+    it(\"when version is not supported\", async () => {\n         expect(JavaCheck.isJavaVersionSupported('java version \"1.7.0_131\"')).toBeFalsy();\n+        expect(JavaCheck.isJavaVersionSupported('java version \"1.5.0_22\"')).toBeFalsy();\n+    });\n+});\n+\n+describe(\"Checks Java installation\", () => {\n+\n+    let javaCheck: JavaCheck;\n+    let map: any;\n+    let checkFn: any;\n+    let stderrFn: any;\n+    const expectedErrMsgJavaVersionFound = \"Java version 8 expected\";\n+    const expectedErrMsgJavaVersionNotFound = \"Java 8 is not found\";\n+\n+    beforeEach(() => {\n+        javaCheck = new JavaCheck();\n+        checkFn = (event, callbackFn) => {\n+            map[event] = callbackFn;\n+        };\n+        stderrFn = (event, callbackFn) => {\n+            map[event] = callbackFn;\n+        };\n+        map = {};\n+    });\n+\n+    it(\"when required version is supported\", async () => {\n+        (cp as any).spawn = jest.fn().mockReturnValue({stderr: {on: stderrFn}, on: jest.fn()});\n+        const promise = javaCheck.isJavaInstalled();\n+        map.data(\"java 11 2018-09-25\");\n+\n+        try {\n+            expect(await promise).toEqual(undefined);\n+        } catch (e) {\n+            expect(e.toString()).toEqual(expectedErrMsgJavaVersionFound);\n+        }\n+    });\n+\n+    it(\"when required version is not supported\", async () => {\n+        (cp as any).spawn = jest.fn().mockReturnValue({stderr: {on: stderrFn}, on: jest.fn()});\n+        const promise = javaCheck.isJavaInstalled();\n+        map.data('java version \"1.5.0_22\"');\n+\n+        try {\n+            await promise;\n+        } catch (e) {\n+            expect(e.toString()).toEqual(expectedErrMsgJavaVersionFound);\n+        }\n+    });\n+\n+    it(\"when 'error' event is emitted  - spawned\", async () => {\n+        (cp as any).spawn = jest.fn().mockReturnValue({stderr: {on: jest.fn()}, on: checkFn});\n+        const promise = javaCheck.isJavaInstalled();\n+        map.error(\"Error: spawn java ENOENT\");\n+\n+        try {\n+            await promise;\n+        } catch (e) {\n+            expect(e.toString()).toEqual(expectedErrMsgJavaVersionNotFound);\n+        }\n+    });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxNTQ2NQ=="}, "originalCommit": {"oid": "8959103e8e5ae2cb5b94dd73340d8613dc693aa4"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU0ODI0OQ==", "bodyText": "Instead of try/catch block, you could use this:\nawait expect(promise).rejects.toEqual(expectedErrMsgJavaVersionNotFound);\n\n@grianbrcom Thanks, altered", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436548249", "createdAt": "2020-06-08T08:55:52Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/JavaCheckTest.ts", "diffHunk": "@@ -27,8 +28,93 @@ describe(\"Check Java version\", () => {\n         expect(JavaCheck.isJavaVersionSupported('openjdk version \"12.0.1\" 2018-10-16')).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 11 2018-09-25\")).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 12 2019-03-19\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 13 2019-09-17\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 14 2020-03-17\")).toBeTruthy();\n     });\n-    it(\"checks if Java version is not supported\", async () => {\n+\n+    it(\"when version is not supported\", async () => {\n         expect(JavaCheck.isJavaVersionSupported('java version \"1.7.0_131\"')).toBeFalsy();\n+        expect(JavaCheck.isJavaVersionSupported('java version \"1.5.0_22\"')).toBeFalsy();\n+    });\n+});\n+\n+describe(\"Checks Java installation\", () => {\n+\n+    let javaCheck: JavaCheck;\n+    let map: any;\n+    let checkFn: any;\n+    let stderrFn: any;\n+    const expectedErrMsgJavaVersionFound = \"Java version 8 expected\";\n+    const expectedErrMsgJavaVersionNotFound = \"Java 8 is not found\";\n+\n+    beforeEach(() => {\n+        javaCheck = new JavaCheck();\n+        checkFn = (event, callbackFn) => {\n+            map[event] = callbackFn;\n+        };\n+        stderrFn = (event, callbackFn) => {\n+            map[event] = callbackFn;\n+        };\n+        map = {};\n+    });\n+\n+    it(\"when required version is supported\", async () => {\n+        (cp as any).spawn = jest.fn().mockReturnValue({stderr: {on: stderrFn}, on: jest.fn()});\n+        const promise = javaCheck.isJavaInstalled();\n+        map.data(\"java 11 2018-09-25\");\n+\n+        try {\n+            expect(await promise).toEqual(undefined);\n+        } catch (e) {\n+            expect(e.toString()).toEqual(expectedErrMsgJavaVersionFound);\n+        }\n+    });\n+\n+    it(\"when required version is not supported\", async () => {\n+        (cp as any).spawn = jest.fn().mockReturnValue({stderr: {on: stderrFn}, on: jest.fn()});\n+        const promise = javaCheck.isJavaInstalled();\n+        map.data('java version \"1.5.0_22\"');\n+\n+        try {\n+            await promise;\n+        } catch (e) {\n+            expect(e.toString()).toEqual(expectedErrMsgJavaVersionFound);\n+        }\n+    });\n+\n+    it(\"when 'error' event is emitted  - spawned\", async () => {\n+        (cp as any).spawn = jest.fn().mockReturnValue({stderr: {on: jest.fn()}, on: checkFn});\n+        const promise = javaCheck.isJavaInstalled();\n+        map.error(\"Error: spawn java ENOENT\");\n+\n+        try {\n+            await promise;\n+        } catch (e) {\n+            expect(e.toString()).toEqual(expectedErrMsgJavaVersionNotFound);\n+        }\n+    });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxNTQ2NQ=="}, "originalCommit": {"oid": "8959103e8e5ae2cb5b94dd73340d8613dc693aa4"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTU2MzQ1OnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/src/__tests__/JavaCheckTest.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOTowMjowNFrOGgVB1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMDozMTo0M1rOGgYASw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1MjE0OQ==", "bodyText": "it when version is supported - not really readable )", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436552149", "createdAt": "2020-06-08T09:02:04Z", "author": {"login": "ishche"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/JavaCheckTest.ts", "diffHunk": "@@ -12,10 +12,11 @@\n  *   Broadcom, Inc. - initial API and implementation\n  */\n \n-import { JavaCheck } from \"../services/JavaCheck\";\n+import * as cp from \"child_process\";\n+import {JavaCheck} from \"../services/JavaCheck\";\n \n-describe(\"Check Java version\", () => {\n-    it(\"checks if Java version is supported\", async () => {\n+describe(\"Checks Java version\", () => {\n+    it(\"when version is supported\", async () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c896c58f0d4538cc3168426576d1163eac44521"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYwMDkwNw==", "bodyText": "changed, thanks", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436600907", "createdAt": "2020-06-08T10:31:43Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/JavaCheckTest.ts", "diffHunk": "@@ -12,10 +12,11 @@\n  *   Broadcom, Inc. - initial API and implementation\n  */\n \n-import { JavaCheck } from \"../services/JavaCheck\";\n+import * as cp from \"child_process\";\n+import {JavaCheck} from \"../services/JavaCheck\";\n \n-describe(\"Check Java version\", () => {\n-    it(\"checks if Java version is supported\", async () => {\n+describe(\"Checks Java version\", () => {\n+    it(\"when version is supported\", async () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1MjE0OQ=="}, "originalCommit": {"oid": "2c896c58f0d4538cc3168426576d1163eac44521"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTU4MzUzOnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/src/__tests__/JavaCheckTest.ts", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOTowNzozMlrOGgVOKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMToxODozNVrOGgZWkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1NTMwNw==", "bodyText": "It can be const", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436555307", "createdAt": "2020-06-08T09:07:32Z", "author": {"login": "ishche"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/JavaCheckTest.ts", "diffHunk": "@@ -27,8 +28,73 @@ describe(\"Check Java version\", () => {\n         expect(JavaCheck.isJavaVersionSupported('openjdk version \"12.0.1\" 2018-10-16')).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 11 2018-09-25\")).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 12 2019-03-19\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 13 2019-09-17\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 14 2020-03-17\")).toBeTruthy();\n     });\n-    it(\"checks if Java version is not supported\", async () => {\n+\n+    it(\"when version is not supported\", async () => {\n         expect(JavaCheck.isJavaVersionSupported('java version \"1.7.0_131\"')).toBeFalsy();\n+        expect(JavaCheck.isJavaVersionSupported('java version \"1.5.0_22\"')).toBeFalsy();\n+    });\n+});\n+\n+describe(\"Checks Java installation\", () => {\n+\n+    let javaCheck: JavaCheck;\n+    let map: any;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c896c58f0d4538cc3168426576d1163eac44521"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU4NzI2NA==", "bodyText": "We change it according to test-case, so can't be const", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436587264", "createdAt": "2020-06-08T10:04:59Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/JavaCheckTest.ts", "diffHunk": "@@ -27,8 +28,73 @@ describe(\"Check Java version\", () => {\n         expect(JavaCheck.isJavaVersionSupported('openjdk version \"12.0.1\" 2018-10-16')).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 11 2018-09-25\")).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 12 2019-03-19\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 13 2019-09-17\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 14 2020-03-17\")).toBeTruthy();\n     });\n-    it(\"checks if Java version is not supported\", async () => {\n+\n+    it(\"when version is not supported\", async () => {\n         expect(JavaCheck.isJavaVersionSupported('java version \"1.7.0_131\"')).toBeFalsy();\n+        expect(JavaCheck.isJavaVersionSupported('java version \"1.5.0_22\"')).toBeFalsy();\n+    });\n+});\n+\n+describe(\"Checks Java installation\", () => {\n+\n+    let javaCheck: JavaCheck;\n+    let map: any;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1NTMwNw=="}, "originalCommit": {"oid": "2c896c58f0d4538cc3168426576d1163eac44521"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYxOTcwMA==", "bodyText": "I don't see where you change the reference to the map object in code.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436619700", "createdAt": "2020-06-08T11:11:01Z", "author": {"login": "ishche"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/JavaCheckTest.ts", "diffHunk": "@@ -27,8 +28,73 @@ describe(\"Check Java version\", () => {\n         expect(JavaCheck.isJavaVersionSupported('openjdk version \"12.0.1\" 2018-10-16')).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 11 2018-09-25\")).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 12 2019-03-19\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 13 2019-09-17\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 14 2020-03-17\")).toBeTruthy();\n     });\n-    it(\"checks if Java version is not supported\", async () => {\n+\n+    it(\"when version is not supported\", async () => {\n         expect(JavaCheck.isJavaVersionSupported('java version \"1.7.0_131\"')).toBeFalsy();\n+        expect(JavaCheck.isJavaVersionSupported('java version \"1.5.0_22\"')).toBeFalsy();\n+    });\n+});\n+\n+describe(\"Checks Java installation\", () => {\n+\n+    let javaCheck: JavaCheck;\n+    let map: any;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1NTMwNw=="}, "originalCommit": {"oid": "2c896c58f0d4538cc3168426576d1163eac44521"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYyMjk5NA==", "bodyText": "in each test map needs to be clean-up", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436622994", "createdAt": "2020-06-08T11:18:35Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/JavaCheckTest.ts", "diffHunk": "@@ -27,8 +28,73 @@ describe(\"Check Java version\", () => {\n         expect(JavaCheck.isJavaVersionSupported('openjdk version \"12.0.1\" 2018-10-16')).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 11 2018-09-25\")).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 12 2019-03-19\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 13 2019-09-17\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 14 2020-03-17\")).toBeTruthy();\n     });\n-    it(\"checks if Java version is not supported\", async () => {\n+\n+    it(\"when version is not supported\", async () => {\n         expect(JavaCheck.isJavaVersionSupported('java version \"1.7.0_131\"')).toBeFalsy();\n+        expect(JavaCheck.isJavaVersionSupported('java version \"1.5.0_22\"')).toBeFalsy();\n+    });\n+});\n+\n+describe(\"Checks Java installation\", () => {\n+\n+    let javaCheck: JavaCheck;\n+    let map: any;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1NTMwNw=="}, "originalCommit": {"oid": "2c896c58f0d4538cc3168426576d1163eac44521"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTU4NjYwOnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/src/__tests__/JavaCheckTest.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOTowODoyM1rOGgVQBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMToyMTo1MFrOGgZcHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1NTc4MA==", "bodyText": "Are we supporting java 8 still?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436555780", "createdAt": "2020-06-08T09:08:23Z", "author": {"login": "ishche"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/JavaCheckTest.ts", "diffHunk": "@@ -27,8 +28,73 @@ describe(\"Check Java version\", () => {\n         expect(JavaCheck.isJavaVersionSupported('openjdk version \"12.0.1\" 2018-10-16')).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 11 2018-09-25\")).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 12 2019-03-19\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 13 2019-09-17\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 14 2020-03-17\")).toBeTruthy();\n     });\n-    it(\"checks if Java version is not supported\", async () => {\n+\n+    it(\"when version is not supported\", async () => {\n         expect(JavaCheck.isJavaVersionSupported('java version \"1.7.0_131\"')).toBeFalsy();\n+        expect(JavaCheck.isJavaVersionSupported('java version \"1.5.0_22\"')).toBeFalsy();\n+    });\n+});\n+\n+describe(\"Checks Java installation\", () => {\n+\n+    let javaCheck: JavaCheck;\n+    let map: any;\n+    let checkFn: any;\n+    let stderrFn: any;\n+    const expectedErrMsgSupportedJavaVersion = \"Java version 8 expected\";\n+    const expectedErrMsgJavaVersionNotFound = \"Java 8 is not found\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c896c58f0d4538cc3168426576d1163eac44521"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU5MzM4MA==", "bodyText": "We will update that outdated message with \"Minimum expected Java version is 8\" in service class.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436593380", "createdAt": "2020-06-08T10:16:41Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/JavaCheckTest.ts", "diffHunk": "@@ -27,8 +28,73 @@ describe(\"Check Java version\", () => {\n         expect(JavaCheck.isJavaVersionSupported('openjdk version \"12.0.1\" 2018-10-16')).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 11 2018-09-25\")).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 12 2019-03-19\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 13 2019-09-17\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 14 2020-03-17\")).toBeTruthy();\n     });\n-    it(\"checks if Java version is not supported\", async () => {\n+\n+    it(\"when version is not supported\", async () => {\n         expect(JavaCheck.isJavaVersionSupported('java version \"1.7.0_131\"')).toBeFalsy();\n+        expect(JavaCheck.isJavaVersionSupported('java version \"1.5.0_22\"')).toBeFalsy();\n+    });\n+});\n+\n+describe(\"Checks Java installation\", () => {\n+\n+    let javaCheck: JavaCheck;\n+    let map: any;\n+    let checkFn: any;\n+    let stderrFn: any;\n+    const expectedErrMsgSupportedJavaVersion = \"Java version 8 expected\";\n+    const expectedErrMsgJavaVersionNotFound = \"Java 8 is not found\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1NTc4MA=="}, "originalCommit": {"oid": "2c896c58f0d4538cc3168426576d1163eac44521"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYyNDQxNQ==", "bodyText": "Oh, sorry, I miss that one map = {};", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436624415", "createdAt": "2020-06-08T11:21:50Z", "author": {"login": "ishche"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/JavaCheckTest.ts", "diffHunk": "@@ -27,8 +28,73 @@ describe(\"Check Java version\", () => {\n         expect(JavaCheck.isJavaVersionSupported('openjdk version \"12.0.1\" 2018-10-16')).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 11 2018-09-25\")).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 12 2019-03-19\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 13 2019-09-17\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 14 2020-03-17\")).toBeTruthy();\n     });\n-    it(\"checks if Java version is not supported\", async () => {\n+\n+    it(\"when version is not supported\", async () => {\n         expect(JavaCheck.isJavaVersionSupported('java version \"1.7.0_131\"')).toBeFalsy();\n+        expect(JavaCheck.isJavaVersionSupported('java version \"1.5.0_22\"')).toBeFalsy();\n+    });\n+});\n+\n+describe(\"Checks Java installation\", () => {\n+\n+    let javaCheck: JavaCheck;\n+    let map: any;\n+    let checkFn: any;\n+    let stderrFn: any;\n+    const expectedErrMsgSupportedJavaVersion = \"Java version 8 expected\";\n+    const expectedErrMsgJavaVersionNotFound = \"Java 8 is not found\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1NTc4MA=="}, "originalCommit": {"oid": "2c896c58f0d4538cc3168426576d1163eac44521"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4051, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}