{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0OTE1MTk2", "number": 517, "title": "refactor: rewrite CopybookRepository to use Guava cache", "bodyText": "Signed-off-by: Anton Grigorev anton.grigorev@broadcom.com", "createdAt": "2020-09-11T10:29:53Z", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/517", "merged": true, "mergeCommit": {"oid": "e5dbf1f3b2eb94270f0ad3837532cbb76f350bda"}, "closed": true, "closedAt": "2020-09-15T09:56:26Z", "author": {"login": "grianbrcom"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdH1mSxAFqTQ4NjcwMDY5NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJElYKAFqTQ4ODUwOTQxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NzAwNjk0", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/517#pullrequestreview-486700694", "createdAt": "2020-09-11T10:46:09Z", "commit": {"oid": "129e8022cce87060d269afe45217ecb14d7bc898"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo0NjowOVrOHQZ9Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzozMzo1NVrOHQfDDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NDUxOQ==", "bodyText": "Maybe, it would be better to make these values configurable too", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/517#discussion_r486964519", "createdAt": "2020-09-11T10:46:09Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/domain/cobol/databus/impl/CopybookRepositoryLRU.java", "diffHunk": "@@ -40,111 +39,55 @@\n @Singleton\n public class CopybookRepositoryLRU implements CopybookRepository {\n   @Getter private final int cacheMaxSize;\n-  @Setter @NonNull private ArrayList<CopybookStorable> cpyRepo;\n-  private final Comparator<CopybookStorable> storableComparator =\n-      Comparator.comparingInt(CopybookStorable::getHit); // Time last recently used\n-  private final Comparator<CopybookStorable> timeComparator =\n-      Comparator.comparingLong(CopybookStorable::getGenDt);\n-\n-  @NonNull private final AtomicBoolean isSort = new AtomicBoolean(false);\n+  private Cache<String, CopybookModel> cache;\n \n   @Inject\n   public CopybookRepositoryLRU(@Named(\"CACHE-MAX-SIZE\") int cacheSize) {\n     cacheMaxSize = cacheSize;\n-    cpyRepo = new ArrayList<>(cacheMaxSize);\n-  }\n-\n-  @Override\n-  public synchronized void sortCache() {\n-    if (!isSort.get()) {\n-      cpyRepo.sort(storableComparator.reversed().thenComparing(timeComparator));\n-    }\n-    isSort.set(true);\n-  }\n-\n-  @Override\n-  public Optional<CopybookStorable> getCopybookStorableFromCache(@NonNull long uuid) {\n-    ArrayList<CopybookStorable> shallowCpy = (ArrayList<CopybookStorable>) cpyRepo.clone();\n-    Optional<CopybookStorable> cpy =\n-        shallowCpy.stream().filter(copy -> uuid == copy.getId()).findAny();\n-    if (cpy.isPresent()) return cpy.map(SerializationUtils::clone);\n-    return cpy;\n+    cache = CacheBuilder.newBuilder()\n+        .maximumSize(cacheMaxSize)\n+        .expireAfterAccess(3, TimeUnit.HOURS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "129e8022cce87060d269afe45217ecb14d7bc898"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0Nzk1MQ==", "bodyText": "Shouldn't we copy the object? Or it is assured by the Cache?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/517#discussion_r487047951", "createdAt": "2020-09-11T13:33:55Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/domain/cobol/databus/impl/DefaultDataBusBroker.java", "diffHunk": "@@ -92,31 +90,21 @@ public void unSubscribe(@NonNull RegistryId registryId, @NonNull S dataSubscribe\n   }\n \n   @Override\n-  public CopybookStorable storeData(@NonNull CopybookStorable storable) {\n-    CopybookStorable deepCopy = SerializationUtils.clone(storable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "129e8022cce87060d269afe45217ecb14d7bc898"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NTg3MTU4", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/517#pullrequestreview-487587158", "createdAt": "2020-09-14T09:42:08Z", "commit": {"oid": "129e8022cce87060d269afe45217ecb14d7bc898"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo0MjowOFrOHRL7Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo0MjowOFrOHRL7Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4MzIwMg==", "bodyText": "I think you may extract this builder and reuse the code for both constructors", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/517#discussion_r487783202", "createdAt": "2020-09-14T09:42:08Z", "author": {"login": "zacanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/domain/cobol/databus/impl/CopybookRepositoryLRU.java", "diffHunk": "@@ -40,111 +39,55 @@\n @Singleton\n public class CopybookRepositoryLRU implements CopybookRepository {\n   @Getter private final int cacheMaxSize;\n-  @Setter @NonNull private ArrayList<CopybookStorable> cpyRepo;\n-  private final Comparator<CopybookStorable> storableComparator =\n-      Comparator.comparingInt(CopybookStorable::getHit); // Time last recently used\n-  private final Comparator<CopybookStorable> timeComparator =\n-      Comparator.comparingLong(CopybookStorable::getGenDt);\n-\n-  @NonNull private final AtomicBoolean isSort = new AtomicBoolean(false);\n+  private Cache<String, CopybookModel> cache;\n \n   @Inject\n   public CopybookRepositoryLRU(@Named(\"CACHE-MAX-SIZE\") int cacheSize) {\n     cacheMaxSize = cacheSize;\n-    cpyRepo = new ArrayList<>(cacheMaxSize);\n-  }\n-\n-  @Override\n-  public synchronized void sortCache() {\n-    if (!isSort.get()) {\n-      cpyRepo.sort(storableComparator.reversed().thenComparing(timeComparator));\n-    }\n-    isSort.set(true);\n-  }\n-\n-  @Override\n-  public Optional<CopybookStorable> getCopybookStorableFromCache(@NonNull long uuid) {\n-    ArrayList<CopybookStorable> shallowCpy = (ArrayList<CopybookStorable>) cpyRepo.clone();\n-    Optional<CopybookStorable> cpy =\n-        shallowCpy.stream().filter(copy -> uuid == copy.getId()).findAny();\n-    if (cpy.isPresent()) return cpy.map(SerializationUtils::clone);\n-    return cpy;\n+    cache = CacheBuilder.newBuilder()\n+        .maximumSize(cacheMaxSize)\n+        .expireAfterAccess(3, TimeUnit.HOURS)\n+        .build();\n   }\n \n-  private Optional<CopybookStorable> getCopybookStorableInstance(@NonNull long uuid) {\n-    return cpyRepo.stream().filter(copy -> uuid == copy.getId()).findAny();\n+  /** For test purpose only */\n+  CopybookRepositoryLRU(@Named(\"CACHE-MAX-SIZE\") int cacheSize, Ticker ticker) {\n+    cacheMaxSize = cacheSize;\n+    cache = CacheBuilder.newBuilder()\n+        .maximumSize(cacheMaxSize)\n+        .expireAfterAccess(3, TimeUnit.HOURS)\n+        .ticker(ticker)\n+        .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "129e8022cce87060d269afe45217ecb14d7bc898"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NTkxMDgx", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/517#pullrequestreview-487591081", "createdAt": "2020-09-14T09:47:25Z", "commit": {"oid": "129e8022cce87060d269afe45217ecb14d7bc898"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo0NzoyNVrOHRMHKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo0NzoyNVrOHRMHKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NjI4MQ==", "bodyText": "I think is more safety to use Math.toIntExact(cache.size())", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/517#discussion_r487786281", "createdAt": "2020-09-14T09:47:25Z", "author": {"login": "zacanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/domain/cobol/databus/impl/CopybookRepositoryLRU.java", "diffHunk": "@@ -40,111 +39,55 @@\n @Singleton\n public class CopybookRepositoryLRU implements CopybookRepository {\n   @Getter private final int cacheMaxSize;\n-  @Setter @NonNull private ArrayList<CopybookStorable> cpyRepo;\n-  private final Comparator<CopybookStorable> storableComparator =\n-      Comparator.comparingInt(CopybookStorable::getHit); // Time last recently used\n-  private final Comparator<CopybookStorable> timeComparator =\n-      Comparator.comparingLong(CopybookStorable::getGenDt);\n-\n-  @NonNull private final AtomicBoolean isSort = new AtomicBoolean(false);\n+  private Cache<String, CopybookModel> cache;\n \n   @Inject\n   public CopybookRepositoryLRU(@Named(\"CACHE-MAX-SIZE\") int cacheSize) {\n     cacheMaxSize = cacheSize;\n-    cpyRepo = new ArrayList<>(cacheMaxSize);\n-  }\n-\n-  @Override\n-  public synchronized void sortCache() {\n-    if (!isSort.get()) {\n-      cpyRepo.sort(storableComparator.reversed().thenComparing(timeComparator));\n-    }\n-    isSort.set(true);\n-  }\n-\n-  @Override\n-  public Optional<CopybookStorable> getCopybookStorableFromCache(@NonNull long uuid) {\n-    ArrayList<CopybookStorable> shallowCpy = (ArrayList<CopybookStorable>) cpyRepo.clone();\n-    Optional<CopybookStorable> cpy =\n-        shallowCpy.stream().filter(copy -> uuid == copy.getId()).findAny();\n-    if (cpy.isPresent()) return cpy.map(SerializationUtils::clone);\n-    return cpy;\n+    cache = CacheBuilder.newBuilder()\n+        .maximumSize(cacheMaxSize)\n+        .expireAfterAccess(3, TimeUnit.HOURS)\n+        .build();\n   }\n \n-  private Optional<CopybookStorable> getCopybookStorableInstance(@NonNull long uuid) {\n-    return cpyRepo.stream().filter(copy -> uuid == copy.getId()).findAny();\n+  /** For test purpose only */\n+  CopybookRepositoryLRU(@Named(\"CACHE-MAX-SIZE\") int cacheSize, Ticker ticker) {\n+    cacheMaxSize = cacheSize;\n+    cache = CacheBuilder.newBuilder()\n+        .maximumSize(cacheMaxSize)\n+        .expireAfterAccess(3, TimeUnit.HOURS)\n+        .ticker(ticker)\n+        .build();\n   }\n \n   @Override\n-  public void setSort(boolean isSort) {\n-    this.isSort.set(isSort);\n+  public Optional<CopybookModel> getCopybookStorableFromCache(@NonNull String name) {\n+    return Optional.ofNullable(cache.getIfPresent(name));\n   }\n \n   @Override\n-  public synchronized void persist(@NonNull CopybookStorable deepCopy) {\n-    cpyRepo.removeIf(CopybookStorable::isExpired);\n-\n-    if (!isStored(deepCopy.getId())) {\n-      if (cpyRepo.size() < getCacheMaxSize()) {\n-        cpyRepo.add(deepCopy);\n-        return;\n-      }\n-      cpyRepo.remove(cpyRepo.size() - 1);\n-      cpyRepo.add(deepCopy);\n-    }\n+  public synchronized void persist(@NonNull CopybookModel copybookModel) {\n+    cache.put(copybookModel.getName(), copybookModel);\n   }\n \n   @Override\n   public String logContent() {\n-    StringBuilder chars = new StringBuilder();\n-    cpyRepo.forEach(\n-        l ->\n-            chars\n-                .append(System.getProperty(\"line.separator\"))\n-                .append(l)\n-                .append(System.getProperty(\"line.separator\")));\n-    return chars.toString();\n+    return cache.asMap().toString();\n   }\n \n   @Override\n   public int size() {\n-    return cpyRepo.size();\n-  }\n-\n-  public Optional<CopybookStorable> topItem() {\n-    return (cpyRepo.isEmpty()) ? Optional.empty() : Optional.of(cpyRepo.get(0));\n-  }\n-\n-  public Optional<CopybookStorable> lastItem() {\n-    return (cpyRepo.isEmpty()) ? Optional.empty() : Optional.of(cpyRepo.get(size() - 1));\n-  }\n-\n-  @Override\n-  public boolean isStored(@NonNull StringBuilder id) {\n-    long uuid = CopybookRepository.calculateUUID(id);\n-    return isStored(uuid);\n-  }\n-\n-  @Override\n-  public boolean isStored(@NonNull String id) {\n-    long uuid = CopybookRepository.calculateUUID(id);\n-    return isStored(uuid);\n+    return (int)cache.size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "129e8022cce87060d269afe45217ecb14d7bc898"}, "originalPosition": 137}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NjMzODY5", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/517#pullrequestreview-487633869", "createdAt": "2020-09-14T10:47:25Z", "commit": {"oid": "129e8022cce87060d269afe45217ecb14d7bc898"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDo0NzoyNlrOHROKzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDo0NzoyNlrOHROKzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxOTk4Mw==", "bodyText": "can we safely reuse the instance of CopybookModel instead to create a new one?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/517#discussion_r487819983", "createdAt": "2020-09-14T10:47:26Z", "author": {"login": "zacanbrcom"}, "path": "server/src/main/java/com/ca/lsp/core/cobol/preprocessor/sub/document/impl/SynchronousCopybookResolution.java", "diffHunk": "@@ -113,7 +111,8 @@ public void observerCallback(@Nonnull FetchedCopybookEvent event) {\n     String content = event.getContent();\n \n     broker.unSubscribe(this);\n-    ofNullable(content).ifPresent(it -> broker.storeData(new CopybookStorable(name, uri, content)));\n+    CopybookModel copybookModel = new CopybookModel(name, uri, content);\n+    ofNullable(content).ifPresent(it -> broker.storeData(copybookModel));\n     waitForResolving.complete(new CopybookModel(name, uri, content));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "129e8022cce87060d269afe45217ecb14d7bc898"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NjM5Njc3", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/517#pullrequestreview-487639677", "createdAt": "2020-09-14T10:55:43Z", "commit": {"oid": "129e8022cce87060d269afe45217ecb14d7bc898"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDo1NTo0M1rOHRObLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDo1NTo0M1rOHRObLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyNDE3Mw==", "bodyText": "I think we may get rid of the \"dummy stuff\" loaded in this provider, I saw that in some test we create an instance of CopybookModel directly though its constuctor", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/517#discussion_r487824173", "createdAt": "2020-09-14T10:55:43Z", "author": {"login": "zacanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/domain/CopybookStorableProvider.java", "diffHunk": "@@ -29,10 +29,10 @@\n   private static final String COPYBOOK_CONTENT = \"000000 IDENTIFICATION DIVISION.\";\n \n   @Singleton\n-  private static CopybookStorable STORABLE_INSTANCE =\n-      new CopybookStorable(COPYBOOK_NAME, COPYBOOK_URI, COPYBOOK_CONTENT);\n+  private static CopybookModel STORABLE_INSTANCE =\n+      new CopybookModel(COPYBOOK_NAME, COPYBOOK_URI, COPYBOOK_CONTENT);\n \n-  protected CopybookStorable getDummyStorable() {\n+  protected CopybookModel getDummyStorable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "129e8022cce87060d269afe45217ecb14d7bc898"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NjQzMzQ5", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/517#pullrequestreview-487643349", "createdAt": "2020-09-14T11:01:14Z", "commit": {"oid": "129e8022cce87060d269afe45217ecb14d7bc898"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTowMToxNFrOHROmTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTowMToxNFrOHROmTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyNzAyMg==", "bodyText": "Question - not sure: can we use Duration.ofHours(3).toNanos()?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/517#discussion_r487827022", "createdAt": "2020-09-14T11:01:14Z", "author": {"login": "zacanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/domain/cobol/databus/impl/CopybookRepositoryLRUTest.java", "diffHunk": "@@ -58,37 +55,52 @@ void cacheSizeIsNotNegative() {\n   }\n \n   /**\n-   * This test verifies that a CopybookStorable object stored successfully in the cache. After\n+   * This test verifies that a CopybookModel object stored successfully in the cache. After\n    * calling the persist method, the cache size increased by one\n    */\n   @Test\n   void testPersist() {\n     var prevCacheSize = repository.size();\n-    repository.persist(new CopybookStorable(\"NEW_STO\", \"URI\", \"DUMMY CONTENT\"));\n+    repository.persist(new CopybookModel(\"NEW_STO\", \"URI\", \"DUMMY CONTENT\"));\n     assertEquals(repository.size(), prevCacheSize + 1);\n   }\n \n   /**\n    * This test validates that the cache is throwing the expired elements away, the elements which\n    * are older than 3h\n    *\n-   * @throws NoSuchFieldException\n    */\n   @Test\n-  void testCacheExpiration() throws NoSuchFieldException {\n-    var genDt = Instant.now().minus(4, ChronoUnit.HOURS).getEpochSecond();\n-    var storableCpy = new CopybookStorable(\"REMOVE\", \"URI\", \"DUMMY CONTENT\");\n+  void testCacheExpiration() {\n+    SettableTicker ticker = new SettableTicker();\n+    repository = new CopybookRepositoryLRU(CACHE_SIZE, ticker);\n+    repository.persist(new CopybookModel(\"REMOVE\", \"URI\", \"DUMMY CONTENT\"));\n+    ticker.incrementNanoseconds(1);\n+\n+    // then passed 3 hours\n+    ticker.incrementNanoseconds((long)3 * 60 * 60 * 1000000000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "129e8022cce87060d269afe45217ecb14d7bc898"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3ODY1NjU4", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/517#pullrequestreview-487865658", "createdAt": "2020-09-14T15:04:19Z", "commit": {"oid": "129e8022cce87060d269afe45217ecb14d7bc898"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "551a51232283faf89a752a6bac3312d5587dfd4e", "author": {"user": {"login": "grianbrcom", "name": "Anton Grigorev"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/551a51232283faf89a752a6bac3312d5587dfd4e", "committedDate": "2020-09-15T09:20:21Z", "message": "refactor: rewrite CopybookRepository to use Guava cache\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "129e8022cce87060d269afe45217ecb14d7bc898", "author": {"user": {"login": "grianbrcom", "name": "Anton Grigorev"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/129e8022cce87060d269afe45217ecb14d7bc898", "committedDate": "2020-09-11T10:29:13Z", "message": "refactor: rewrite CopybookRepository to use Guava cache\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>"}, "afterCommit": {"oid": "551a51232283faf89a752a6bac3312d5587dfd4e", "author": {"user": {"login": "grianbrcom", "name": "Anton Grigorev"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/551a51232283faf89a752a6bac3312d5587dfd4e", "committedDate": "2020-09-15T09:20:21Z", "message": "refactor: rewrite CopybookRepository to use Guava cache\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NTA5NDEx", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/517#pullrequestreview-488509411", "createdAt": "2020-09-15T09:43:00Z", "commit": {"oid": "551a51232283faf89a752a6bac3312d5587dfd4e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1022, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}