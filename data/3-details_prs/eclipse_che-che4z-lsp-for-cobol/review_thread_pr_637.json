{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MDQ4OTg1", "number": 637, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDoxNTo0NVrOE3pCGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMTowODoxMlrOE3qJsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Nzc5NDE3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/ConfigurableTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDoxNTo0NVrOHxG1aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDozMjoxM1rOHxHZhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI1NDI0OQ==", "bodyText": "Why is it protected?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/637#discussion_r521254249", "createdAt": "2020-11-11T10:15:45Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/ConfigurableTest.java", "diffHunk": "@@ -14,20 +14,29 @@\n  */\n package com.broadcom.lsp.cobol;\n \n-import com.broadcom.lsp.cobol.domain.modules.EngineModule;\n-import com.broadcom.lsp.cobol.domain.modules.LangServerCtx;\n import com.broadcom.lsp.cobol.domain.modules.DatabusModule;\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.BeforeAll;\n+import com.broadcom.lsp.cobol.domain.modules.EngineModule;\n+import com.broadcom.lsp.cobol.positive.CobolTextRegistry;\n+import com.broadcom.lsp.cobol.positive.FolderTextRegistry;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import org.junit.jupiter.api.TestInstance;\n \n+import static java.lang.System.getProperty;\n+import static java.util.Optional.ofNullable;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n public abstract class ConfigurableTest {\n-  @BeforeAll\n-  public static void setUp() {\n-    LangServerCtx.getGuiceCtx(new TestModule(), new EngineModule(), new DatabusModule());\n-  }\n+  protected static final String PATH_TO_TEST_RESOURCES = \"filesToTestPath\";\n+  protected Injector injector =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db8754412d3a86f10494887ae7baad5649d99b0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI1NTc3OQ==", "bodyText": "Yes, correct need not be. Private would suffice.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/637#discussion_r521255779", "createdAt": "2020-11-11T10:18:24Z", "author": {"login": "ap891843"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/ConfigurableTest.java", "diffHunk": "@@ -14,20 +14,29 @@\n  */\n package com.broadcom.lsp.cobol;\n \n-import com.broadcom.lsp.cobol.domain.modules.EngineModule;\n-import com.broadcom.lsp.cobol.domain.modules.LangServerCtx;\n import com.broadcom.lsp.cobol.domain.modules.DatabusModule;\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.BeforeAll;\n+import com.broadcom.lsp.cobol.domain.modules.EngineModule;\n+import com.broadcom.lsp.cobol.positive.CobolTextRegistry;\n+import com.broadcom.lsp.cobol.positive.FolderTextRegistry;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import org.junit.jupiter.api.TestInstance;\n \n+import static java.lang.System.getProperty;\n+import static java.util.Optional.ofNullable;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n public abstract class ConfigurableTest {\n-  @BeforeAll\n-  public static void setUp() {\n-    LangServerCtx.getGuiceCtx(new TestModule(), new EngineModule(), new DatabusModule());\n-  }\n+  protected static final String PATH_TO_TEST_RESOURCES = \"filesToTestPath\";\n+  protected Injector injector =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI1NDI0OQ=="}, "originalCommit": {"oid": "1db8754412d3a86f10494887ae7baad5649d99b0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2MzQ5Mw==", "bodyText": "resolved on chat.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/637#discussion_r521263493", "createdAt": "2020-11-11T10:32:13Z", "author": {"login": "ap891843"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/ConfigurableTest.java", "diffHunk": "@@ -14,20 +14,29 @@\n  */\n package com.broadcom.lsp.cobol;\n \n-import com.broadcom.lsp.cobol.domain.modules.EngineModule;\n-import com.broadcom.lsp.cobol.domain.modules.LangServerCtx;\n import com.broadcom.lsp.cobol.domain.modules.DatabusModule;\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.BeforeAll;\n+import com.broadcom.lsp.cobol.domain.modules.EngineModule;\n+import com.broadcom.lsp.cobol.positive.CobolTextRegistry;\n+import com.broadcom.lsp.cobol.positive.FolderTextRegistry;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import org.junit.jupiter.api.TestInstance;\n \n+import static java.lang.System.getProperty;\n+import static java.util.Optional.ofNullable;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n public abstract class ConfigurableTest {\n-  @BeforeAll\n-  public static void setUp() {\n-    LangServerCtx.getGuiceCtx(new TestModule(), new EngineModule(), new DatabusModule());\n-  }\n+  protected static final String PATH_TO_TEST_RESOURCES = \"filesToTestPath\";\n+  protected Injector injector =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI1NDI0OQ=="}, "originalCommit": {"oid": "1db8754412d3a86f10494887ae7baad5649d99b0"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Nzc5NjE3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/ConfigurableTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDoxNjoxOFrOHxG2pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDoxODo0MlrOHxG8CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI1NDU2NA==", "bodyText": "Seems like it may be encapsulated in PositiveTest", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/637#discussion_r521254564", "createdAt": "2020-11-11T10:16:18Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/ConfigurableTest.java", "diffHunk": "@@ -14,20 +14,29 @@\n  */\n package com.broadcom.lsp.cobol;\n \n-import com.broadcom.lsp.cobol.domain.modules.EngineModule;\n-import com.broadcom.lsp.cobol.domain.modules.LangServerCtx;\n import com.broadcom.lsp.cobol.domain.modules.DatabusModule;\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.BeforeAll;\n+import com.broadcom.lsp.cobol.domain.modules.EngineModule;\n+import com.broadcom.lsp.cobol.positive.CobolTextRegistry;\n+import com.broadcom.lsp.cobol.positive.FolderTextRegistry;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import org.junit.jupiter.api.TestInstance;\n \n+import static java.lang.System.getProperty;\n+import static java.util.Optional.ofNullable;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n public abstract class ConfigurableTest {\n-  @BeforeAll\n-  public static void setUp() {\n-    LangServerCtx.getGuiceCtx(new TestModule(), new EngineModule(), new DatabusModule());\n-  }\n+  protected static final String PATH_TO_TEST_RESOURCES = \"filesToTestPath\";\n+  protected Injector injector =\n+      Guice.createInjector(new TestModule(), new EngineModule(), new DatabusModule());\n \n-  @AfterAll\n-  public static void tearDown() {\n-    LangServerCtx.shutdown();\n+  /**\n+   * Retrieve {@link CobolTextRegistry} using file-based implementation.\n+   *\n+   * @return {@link CobolTextRegistry}.\n+   */\n+  public static CobolTextRegistry retrieveTextsRegistry() {\n+    return new FolderTextRegistry(ofNullable(getProperty(PATH_TO_TEST_RESOURCES)).orElse(\"\"));\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db8754412d3a86f10494887ae7baad5649d99b0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI1NTk0NQ==", "bodyText": "We need this for negativeTest as well", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/637#discussion_r521255945", "createdAt": "2020-11-11T10:18:42Z", "author": {"login": "ap891843"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/ConfigurableTest.java", "diffHunk": "@@ -14,20 +14,29 @@\n  */\n package com.broadcom.lsp.cobol;\n \n-import com.broadcom.lsp.cobol.domain.modules.EngineModule;\n-import com.broadcom.lsp.cobol.domain.modules.LangServerCtx;\n import com.broadcom.lsp.cobol.domain.modules.DatabusModule;\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.BeforeAll;\n+import com.broadcom.lsp.cobol.domain.modules.EngineModule;\n+import com.broadcom.lsp.cobol.positive.CobolTextRegistry;\n+import com.broadcom.lsp.cobol.positive.FolderTextRegistry;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import org.junit.jupiter.api.TestInstance;\n \n+import static java.lang.System.getProperty;\n+import static java.util.Optional.ofNullable;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n public abstract class ConfigurableTest {\n-  @BeforeAll\n-  public static void setUp() {\n-    LangServerCtx.getGuiceCtx(new TestModule(), new EngineModule(), new DatabusModule());\n-  }\n+  protected static final String PATH_TO_TEST_RESOURCES = \"filesToTestPath\";\n+  protected Injector injector =\n+      Guice.createInjector(new TestModule(), new EngineModule(), new DatabusModule());\n \n-  @AfterAll\n-  public static void tearDown() {\n-    LangServerCtx.shutdown();\n+  /**\n+   * Retrieve {@link CobolTextRegistry} using file-based implementation.\n+   *\n+   * @return {@link CobolTextRegistry}.\n+   */\n+  public static CobolTextRegistry retrieveTextsRegistry() {\n+    return new FolderTextRegistry(ofNullable(getProperty(PATH_TO_TEST_RESOURCES)).orElse(\"\"));\n   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI1NDU2NA=="}, "originalCommit": {"oid": "1db8754412d3a86f10494887ae7baad5649d99b0"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Nzk3NzQ1OnYy", "diffSide": "LEFT", "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/PositiveTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMTowODoxMlrOHxIljg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMToxMzo0OFrOHxIwvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI4Mjk1OA==", "bodyText": "copybooks not initialized", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/637#discussion_r521282958", "createdAt": "2020-11-11T11:08:12Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/PositiveTest.java", "diffHunk": "@@ -47,10 +44,7 @@\n    * @return a collection of objects that would be passed to the constructor one by one.\n    */\n   private static Stream<CobolText> retrieveTextsToTest() {\n-    CobolTextRegistry registry =\n-        new FolderTextRegistry(ofNullable(getProperty(PATH_TO_TEST_RESOURCES)).orElse(\"\"));\n-    copybooks = registry.getCopybooks();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db8754412d3a86f10494887ae7baad5649d99b0"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI4NTgyMw==", "bodyText": "Great catch!\nDone.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/637#discussion_r521285823", "createdAt": "2020-11-11T11:13:48Z", "author": {"login": "ap891843"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/PositiveTest.java", "diffHunk": "@@ -47,10 +44,7 @@\n    * @return a collection of objects that would be passed to the constructor one by one.\n    */\n   private static Stream<CobolText> retrieveTextsToTest() {\n-    CobolTextRegistry registry =\n-        new FolderTextRegistry(ofNullable(getProperty(PATH_TO_TEST_RESOURCES)).orElse(\"\"));\n-    copybooks = registry.getCopybooks();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI4Mjk1OA=="}, "originalCommit": {"oid": "1db8754412d3a86f10494887ae7baad5649d99b0"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3838, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}