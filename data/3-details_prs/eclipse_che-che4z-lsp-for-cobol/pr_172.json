{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5OTk3MjE0", "number": 172, "title": "141 dep file management", "bodyText": "Purpose of this PR (related to the #141) is to introduce a mechanism on the server side to generate a cobdep folder that contains dependency files for each cobol file opened in the IDE that contains copybooks.\nThis feature has to be considered as POC and future modification could be applied in different PRs to improve the performance, handle edge cases and be consistent with the overall solution.\nMoreover after the definition of a FileSystem related class, all the logic related to filesystem has been removed from the WorkspaceService that has to deal with watch files, as described by its interface.\nFor that reason some unit test will be removed from the WorkspaceService with further PRs.", "createdAt": "2020-02-02T10:50:42Z", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172", "merged": true, "mergeCommit": {"oid": "e8cc7a919ab1d333eacb4bd33f79408bd342840e"}, "closed": true, "closedAt": "2020-02-03T17:43:55Z", "author": {"login": "zacanbrcom"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb61dUqAH2gAyMzY5OTk3MjE0OjAyMWE5ODI4NjE2ZjM2N2U1NDE2NTRjNDQxNDAyYTNlYzMzOWNhMWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcAvv9IAFqTM1MjM5OTA1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "021a9828616f367e541654c441402a3ec339ca1e", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/021a9828616f367e541654c441402a3ec339ca1e", "committedDate": "2020-01-16T07:59:32Z", "message": "Introduce new event RUN_ANALYSIS covered by unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "feb936585b6af83496e276bd3f7d63b7a7743826", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/feb936585b6af83496e276bd3f7d63b7a7743826", "committedDate": "2020-01-16T08:14:36Z", "message": "Generation dummy cobdeps folder with dep file for e2e test purpose"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b23c0f730a6fd18424bc92cac00a98ace551380b", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/b23c0f730a6fd18424bc92cac00a98ace551380b", "committedDate": "2020-01-16T08:49:14Z", "message": "Definition test class to cover end to end subscribe, unsubscribe and publish"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1b4d208f6f0f9a8c4f012b9075f8cbc27fbb5f6", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/e1b4d208f6f0f9a8c4f012b9075f8cbc27fbb5f6", "committedDate": "2020-01-24T09:01:28Z", "message": "Introduce unit test for dep file management"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "304b4f964642e3fede7e84a40f9892889030ae47", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/304b4f964642e3fede7e84a40f9892889030ae47", "committedDate": "2020-01-28T14:23:19Z", "message": "Refine implementation for a better error management in folder and dep file creation/update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "797746d138d63952fe7e28d866d57f1ca506c413", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/797746d138d63952fe7e28d866d57f1ca506c413", "committedDate": "2020-01-28T15:14:25Z", "message": "Merge remote-tracking branch 'remotes/origin/development' into 141_DepFileManagement\n\n# Conflicts:\n#\tcom.ca.lsp.cobol/lsp-core-domain/src/main/java/com/broadcom/lsp/domain/cobol/event/api/CopybookEventFactory.java\n#\tcom.ca.lsp.cobol/lsp-core-domain/src/main/java/com/broadcom/lsp/domain/cobol/event/factory/RunAnalysisSubscriberFactory.java\n#\tcom.ca.lsp.cobol/lsp-core-domain/src/main/java/com/broadcom/lsp/domain/cobol/event/impl/RunAnalysisEventSubscriber.java\n#\tcom.ca.lsp.cobol/lsp-core-domain/src/main/java/com/broadcom/lsp/domain/cobol/event/model/DataEventType.java\n#\tcom.ca.lsp.cobol/lsp-core-domain/src/main/java/com/broadcom/lsp/domain/cobol/event/model/RunAnalysisEvent.java\n#\tcom.ca.lsp.cobol/lsp-core-domain/src/test/java/com/broadcom/lsp/domain/cobol/event/CopybookEventSubscribersTest.java\n#\tcom.ca.lsp.cobol/lsp-core-domain/src/test/java/com/broadcom/lsp/domain/cobol/event/CopybookEventsTest.java\n#\tcom.ca.lsp.cobol/lsp-service-cobol/pom.xml\n#\tcom.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CobolWorkspaceServiceImpl.java\n#\tcom.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyLanguageServerImpl.java\n#\tcom.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/WorkspaceServiceTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44f96bbc344991f5ab44615edc6617d67189a973", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/44f96bbc344991f5ab44615edc6617d67189a973", "committedDate": "2020-01-29T07:16:45Z", "message": "Adjustment after merge with development branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4d0c85621993867570c1a8a35e19efbe8249d31", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/e4d0c85621993867570c1a8a35e19efbe8249d31", "committedDate": "2020-01-29T07:30:31Z", "message": "Fix search for copybook only in COPYBOOKS folder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdf75e221d57fb1201b5f3022655108dda4839e7", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/cdf75e221d57fb1201b5f3022655108dda4839e7", "committedDate": "2020-01-29T14:53:09Z", "message": "Update header and provide E2E integration test for FileSystemService with databus"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "948cdf18150575154070d8fbd0d3d528d5145596", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/948cdf18150575154070d8fbd0d3d528d5145596", "committedDate": "2020-01-29T15:03:59Z", "message": "Merge remote-tracking branch 'remotes/origin/development' into 141_DepFileManagement\n\n# Conflicts:\n#\tcom.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/usecases/AnalyzeCopybookCaching.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b38f8a70c7d877a63be3b3580759cf3a9321c6ad", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/b38f8a70c7d877a63be3b3580759cf3a9321c6ad", "committedDate": "2020-01-29T15:59:27Z", "message": "Consume documentURI information sent on the databus by the preprocessor in order to generate dependency files with the same name as the cobol file scanned by the preprocessor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c411fbcb268497a965fd1ede188ba54fc8e64d57", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/c411fbcb268497a965fd1ede188ba54fc8e64d57", "committedDate": "2020-01-30T17:17:02Z", "message": "Modify write function to address issues related to the concurrent writing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecf643c0f789e90ec1142e4b5736de9427261cea", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/ecf643c0f789e90ec1142e4b5736de9427261cea", "committedDate": "2020-01-31T09:09:30Z", "message": "Fix failed test after the introduction of DocumentURI and improved write dependency of file checking for not empty values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4809f9471923367ae12edc9ac4c5fdf3a3939caa", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/4809f9471923367ae12edc9ac4c5fdf3a3939caa", "committedDate": "2020-01-31T11:06:14Z", "message": "Improve create and write on dependency file, cover edge cases that can happen due to failed sync with the filesystem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "489aa7b5b59c9f96571d26f2e5fcc1fa825adb6f", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/489aa7b5b59c9f96571d26f2e5fcc1fa825adb6f", "committedDate": "2020-02-02T09:26:09Z", "message": "Add notification message related to gitfs unsupported filesystem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "622c2f02756c07797b03159cec43fe66670908da", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/622c2f02756c07797b03159cec43fe66670908da", "committedDate": "2020-02-02T09:29:16Z", "message": "Merge remote-tracking branch 'remotes/origin/development' into 141_DepFileManagement\n\n# Conflicts:\n#\tcom.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyTextDocumentService.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb6cb57467192dc724fb5be3ceb958f35027fac3", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/bb6cb57467192dc724fb5be3ceb958f35027fac3", "committedDate": "2020-02-02T11:15:05Z", "message": "Fix duplicates in pom, removed old TODO and unused variables"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMTEyNjM0", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#pullrequestreview-352112634", "createdAt": "2020-02-03T09:23:40Z", "commit": {"oid": "bb6cb57467192dc724fb5be3ceb958f35027fac3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOToyMzo0MFrOFkqx4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTozNzo1NlrOFkrLxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5Mzk1Mg==", "bodyText": "if you will apply changes please change the copyright year as well", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r373993952", "createdAt": "2020-02-03T09:23:40Z", "author": {"login": "sergiuilie"}, "path": "com.ca.lsp.cobol/lsp-core-domain/src/test/java/com/broadcom/lsp/domain/cobol/databus/impl/DatabusConfigProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2019 Broadcom.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb6cb57467192dc724fb5be3ceb958f35027fac3"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5Nzc1Ng==", "bodyText": "create final variables for the string used in the condition", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r373997756", "createdAt": "2020-02-03T09:31:47Z", "author": {"login": "sergiuilie"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyTextDocumentService.java", "diffHunk": "@@ -137,9 +138,14 @@\n         .whenComplete(reportExceptionIfThrown(createDescriptiveErrorMessage(\"formatting\", uri)));\n   }\n \n+  @SneakyThrows\n   @Override\n   public void didOpen(DidOpenTextDocumentParams params) {\n     String uri = params.getTextDocument().getUri();\n+    if (uri.startsWith(\"gitfs:/\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb6cb57467192dc724fb5be3ceb958f35027fac3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwMDA4NQ==", "bodyText": "how do you value this test? if I delete one call from the tests they are still passing, what is the output here?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374000085", "createdAt": "2020-02-03T09:36:48Z", "author": {"login": "sergiuilie"}, "path": "com.ca.lsp.cobol/lsp-core-domain/src/test/java/com/broadcom/lsp/domain/cobol/databus/impl/DatabusEventSubscriptionE2ETest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.broadcom.lsp.domain.cobol.databus.impl;\n+\n+import com.broadcom.lsp.domain.cobol.event.model.DataEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.Test;\n+\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * This class contains all the unit tests related to the pubblish/subscribe pattern handled by the\n+ * databus.\n+ */\n+@Slf4j\n+public class DatabusEventSubscriptionE2ETest extends DatabusConfigProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb6cb57467192dc724fb5be3ceb958f35027fac3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwMDU4MA==", "bodyText": "FileSystemConfigurationTest", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374000580", "createdAt": "2020-02-03T09:37:56Z", "author": {"login": "sergiuilie"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.cobol;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+\n+import javax.annotation.Nonnull;\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Slf4j\n+public class FileSystemConfiguration extends ConfigurableTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb6cb57467192dc724fb5be3ceb958f35027fac3"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMTEzMjk2", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#pullrequestreview-352113296", "createdAt": "2020-02-03T09:24:50Z", "commit": {"oid": "bb6cb57467192dc724fb5be3ceb958f35027fac3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOToyNDo1MFrOFkqz5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTo1ODoyM1rOFkr0XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5NDQ3MA==", "bodyText": "I think this entire interface should be also removed", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r373994470", "createdAt": "2020-02-03T09:24:50Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CobolWorkspaceService.java", "diffHunk": "@@ -17,18 +17,11 @@\n \n import com.broadcom.lsp.domain.cobol.event.api.EventObserver;\n import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n-import org.eclipse.lsp4j.WorkspaceFolder;\n+import org.eclipse.lsp4j.services.WorkspaceService;\n \n import java.io.IOException;\n-import java.nio.file.Path;\n-import java.util.List;\n \n public interface CobolWorkspaceService", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb6cb57467192dc724fb5be3ceb958f35027fac3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5NjM3OQ==", "bodyText": "Seems like there was some problem with the copying of this comment", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r373996379", "createdAt": "2020-02-03T09:28:52Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/FileSystemServiceImpl.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ *\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ * Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n+import com.broadcom.lsp.domain.cobol.event.model.FetchedCopybookEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.io.FilenameUtils;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.*;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+@Singleton\n+@Slf4j\n+public class FileSystemServiceImpl implements FileSystemService {\n+  private static final String COBDEPS = \".cobdeps\";\n+  private static final String COPYBOOK_FOLDER_NAME = \"COPYBOOKS\";\n+  public static final String DEP_EXTENSION = \".dep\";\n+  private final DefaultDataBusBroker dataBus;\n+  private List<WorkspaceFolder> workspaceFolders;\n+\n+  @Inject\n+  public FileSystemServiceImpl(DefaultDataBusBroker dataBus) {\n+    this.dataBus = dataBus;\n+    dataBus.subscribe(DataEventType.REQUIRED_COPYBOOK_EVENT, this);\n+  }\n+\n+  /**\n+   * Store the informations about the workspace folder defined by the client IDE\n+   *\n+   * @param workspaceFolders list of workspace folders sent by the client to the server\n+   */\n+  @Override\n+  public void setWorkspaceFolders(List<WorkspaceFolder> workspaceFolders) {\n+    this.workspaceFolders = workspaceFolders;\n+  }\n+\n+  /**\n+   * @param copybookName (i.e. COPYTEST)\n+   * @return String that represent the content of a found copybook under the workspace folder or\n+   *     null if copybook is not found\n+   */\n+  @Override\n+  public String getContentByCopybookName(String copybookName) {\n+    return Optional.ofNullable(getPathByCopybookName(copybookName))\n+        .map(this::retrieveContentByPath)\n+        .orElse(null);\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb6cb57467192dc724fb5be3ceb958f35027fac3"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5NzE5OQ==", "bodyText": "Please, make this check case insensitive and extract the list as a class field", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r373997199", "createdAt": "2020-02-03T09:30:35Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/FileSystemServiceImpl.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ *\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ * Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n+import com.broadcom.lsp.domain.cobol.event.model.FetchedCopybookEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.io.FilenameUtils;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.*;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+@Singleton\n+@Slf4j\n+public class FileSystemServiceImpl implements FileSystemService {\n+  private static final String COBDEPS = \".cobdeps\";\n+  private static final String COPYBOOK_FOLDER_NAME = \"COPYBOOKS\";\n+  public static final String DEP_EXTENSION = \".dep\";\n+  private final DefaultDataBusBroker dataBus;\n+  private List<WorkspaceFolder> workspaceFolders;\n+\n+  @Inject\n+  public FileSystemServiceImpl(DefaultDataBusBroker dataBus) {\n+    this.dataBus = dataBus;\n+    dataBus.subscribe(DataEventType.REQUIRED_COPYBOOK_EVENT, this);\n+  }\n+\n+  /**\n+   * Store the informations about the workspace folder defined by the client IDE\n+   *\n+   * @param workspaceFolders list of workspace folders sent by the client to the server\n+   */\n+  @Override\n+  public void setWorkspaceFolders(List<WorkspaceFolder> workspaceFolders) {\n+    this.workspaceFolders = workspaceFolders;\n+  }\n+\n+  /**\n+   * @param copybookName (i.e. COPYTEST)\n+   * @return String that represent the content of a found copybook under the workspace folder or\n+   *     null if copybook is not found\n+   */\n+  @Override\n+  public String getContentByCopybookName(String copybookName) {\n+    return Optional.ofNullable(getPathByCopybookName(copybookName))\n+        .map(this::retrieveContentByPath)\n+        .orElse(null);\n+  }\n+\n+  /**\n+   * From a given copybook name (without file extension) this method will return the URI of the file\n+   * * - if exists\n+   *\n+   * @param fileName (i.e. COPYTEST)\n+   * @return URI of file (i.e. file:///C:/Users/test/AppData/Local/Temp/WORKSPACE/COPYTEST.cpy) or *\n+   *     null if not found. This case should be covered by an appropriate diagnostic message * using\n+   *     the Communication service delegate object\n+   */\n+  protected Path getPathByCopybookName(String fileName) {\n+    return workspaceFoldersAsPathList().stream()\n+        .map(it -> searchInDirectory(fileName, it))\n+        .map(it -> it.orElse(null))\n+        .filter(Objects::nonNull)\n+        .findAny()\n+        .orElse(null);\n+  }\n+\n+  private List<Path> workspaceFoldersAsPathList() {\n+    return getWorkspaceFolders().stream()\n+        .map(this::getPathFromWorkspaceFolder)\n+        .collect(Collectors.toList());\n+  }\n+\n+  private List<WorkspaceFolder> getWorkspaceFolders() {\n+    return workspaceFolders;\n+  }\n+\n+  /**\n+   * @param it workspace folder\n+   * @return the Path of the workspace folder\n+   * @throws IllegalArgumentException if the URI of WorkspaceFolder is not valid\n+   */\n+  @Nonnull\n+  private Path getPathFromWorkspaceFolder(WorkspaceFolder it) {\n+    try {\n+      return Paths.get(new URI(it.getUri()));\n+    } catch (URISyntaxException e) {\n+      throw new IllegalArgumentException(\"Workspace URI not valid\");\n+    }\n+  }\n+\n+  /**\n+   * Delegated method to search in directory\n+   *\n+   * @param fileName name provided by preprocessor\n+   * @param workspaceFolderPath NIO Path of workspace folder\n+   * @return a valid path of the copybook file or null if not found\n+   */\n+  private Optional<Path> searchInDirectory(String fileName, Path workspaceFolderPath) {\n+    return Optional.ofNullable(applySearch(fileName, getCopybookFolderPath(workspaceFolderPath)));\n+  }\n+\n+  private Path getCopybookFolderPath(Path workspaceFolderPath) {\n+    return Paths.get(workspaceFolderPath + filesystemSeparator() + COPYBOOK_FOLDER_NAME);\n+  }\n+\n+  /**\n+   * @param fileName copybook name\n+   * @param workspaceFolderPath physical path of workspace where to search for the copybook\n+   * @return Path of the found copybook in the workspace folder\n+   */\n+  private Path applySearch(String fileName, Path workspaceFolderPath) {\n+    try (Stream<Path> pathStream =\n+        Files.find(\n+            workspaceFolderPath,\n+            100,\n+            (path, basicFileAttributes) -> {\n+              File resFile = path.toFile();\n+              return resFile.isFile()\n+                  && !resFile.isDirectory()\n+                  && resFile.getName().contains(\".\")\n+                  && resFile\n+                      .getName()\n+                      .substring(0, resFile.getName().lastIndexOf('.'))\n+                      .equalsIgnoreCase(fileName)\n+                  && isValidExtension(resFile.getAbsoluteFile().toString().toLowerCase());\n+            },\n+            FileVisitOption.FOLLOW_LINKS)) {\n+      return pathStream.findAny().orElse(null);\n+    } catch (IOException e) {\n+      log.error(\"[copybook not found in copybook folder]\" + e.getLocalizedMessage());\n+      return null;\n+    }\n+  }\n+\n+  private boolean isValidExtension(String filePath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb6cb57467192dc724fb5be3ceb958f35027fac3"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5ODQ1NA==", "bodyText": "I think that null check for cobolFileName is required here", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r373998454", "createdAt": "2020-02-03T09:33:18Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/FileSystemServiceImpl.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ *\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ * Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n+import com.broadcom.lsp.domain.cobol.event.model.FetchedCopybookEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.io.FilenameUtils;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.*;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+@Singleton\n+@Slf4j\n+public class FileSystemServiceImpl implements FileSystemService {\n+  private static final String COBDEPS = \".cobdeps\";\n+  private static final String COPYBOOK_FOLDER_NAME = \"COPYBOOKS\";\n+  public static final String DEP_EXTENSION = \".dep\";\n+  private final DefaultDataBusBroker dataBus;\n+  private List<WorkspaceFolder> workspaceFolders;\n+\n+  @Inject\n+  public FileSystemServiceImpl(DefaultDataBusBroker dataBus) {\n+    this.dataBus = dataBus;\n+    dataBus.subscribe(DataEventType.REQUIRED_COPYBOOK_EVENT, this);\n+  }\n+\n+  /**\n+   * Store the informations about the workspace folder defined by the client IDE\n+   *\n+   * @param workspaceFolders list of workspace folders sent by the client to the server\n+   */\n+  @Override\n+  public void setWorkspaceFolders(List<WorkspaceFolder> workspaceFolders) {\n+    this.workspaceFolders = workspaceFolders;\n+  }\n+\n+  /**\n+   * @param copybookName (i.e. COPYTEST)\n+   * @return String that represent the content of a found copybook under the workspace folder or\n+   *     null if copybook is not found\n+   */\n+  @Override\n+  public String getContentByCopybookName(String copybookName) {\n+    return Optional.ofNullable(getPathByCopybookName(copybookName))\n+        .map(this::retrieveContentByPath)\n+        .orElse(null);\n+  }\n+\n+  /**\n+   * From a given copybook name (without file extension) this method will return the URI of the file\n+   * * - if exists\n+   *\n+   * @param fileName (i.e. COPYTEST)\n+   * @return URI of file (i.e. file:///C:/Users/test/AppData/Local/Temp/WORKSPACE/COPYTEST.cpy) or *\n+   *     null if not found. This case should be covered by an appropriate diagnostic message * using\n+   *     the Communication service delegate object\n+   */\n+  protected Path getPathByCopybookName(String fileName) {\n+    return workspaceFoldersAsPathList().stream()\n+        .map(it -> searchInDirectory(fileName, it))\n+        .map(it -> it.orElse(null))\n+        .filter(Objects::nonNull)\n+        .findAny()\n+        .orElse(null);\n+  }\n+\n+  private List<Path> workspaceFoldersAsPathList() {\n+    return getWorkspaceFolders().stream()\n+        .map(this::getPathFromWorkspaceFolder)\n+        .collect(Collectors.toList());\n+  }\n+\n+  private List<WorkspaceFolder> getWorkspaceFolders() {\n+    return workspaceFolders;\n+  }\n+\n+  /**\n+   * @param it workspace folder\n+   * @return the Path of the workspace folder\n+   * @throws IllegalArgumentException if the URI of WorkspaceFolder is not valid\n+   */\n+  @Nonnull\n+  private Path getPathFromWorkspaceFolder(WorkspaceFolder it) {\n+    try {\n+      return Paths.get(new URI(it.getUri()));\n+    } catch (URISyntaxException e) {\n+      throw new IllegalArgumentException(\"Workspace URI not valid\");\n+    }\n+  }\n+\n+  /**\n+   * Delegated method to search in directory\n+   *\n+   * @param fileName name provided by preprocessor\n+   * @param workspaceFolderPath NIO Path of workspace folder\n+   * @return a valid path of the copybook file or null if not found\n+   */\n+  private Optional<Path> searchInDirectory(String fileName, Path workspaceFolderPath) {\n+    return Optional.ofNullable(applySearch(fileName, getCopybookFolderPath(workspaceFolderPath)));\n+  }\n+\n+  private Path getCopybookFolderPath(Path workspaceFolderPath) {\n+    return Paths.get(workspaceFolderPath + filesystemSeparator() + COPYBOOK_FOLDER_NAME);\n+  }\n+\n+  /**\n+   * @param fileName copybook name\n+   * @param workspaceFolderPath physical path of workspace where to search for the copybook\n+   * @return Path of the found copybook in the workspace folder\n+   */\n+  private Path applySearch(String fileName, Path workspaceFolderPath) {\n+    try (Stream<Path> pathStream =\n+        Files.find(\n+            workspaceFolderPath,\n+            100,\n+            (path, basicFileAttributes) -> {\n+              File resFile = path.toFile();\n+              return resFile.isFile()\n+                  && !resFile.isDirectory()\n+                  && resFile.getName().contains(\".\")\n+                  && resFile\n+                      .getName()\n+                      .substring(0, resFile.getName().lastIndexOf('.'))\n+                      .equalsIgnoreCase(fileName)\n+                  && isValidExtension(resFile.getAbsoluteFile().toString().toLowerCase());\n+            },\n+            FileVisitOption.FOLLOW_LINKS)) {\n+      return pathStream.findAny().orElse(null);\n+    } catch (IOException e) {\n+      log.error(\"[copybook not found in copybook folder]\" + e.getLocalizedMessage());\n+      return null;\n+    }\n+  }\n+\n+  private boolean isValidExtension(String filePath) {\n+    List<String> validExtensions = Arrays.asList(\"cpy\", \"cbl\", \"cobol\", \"cob\");\n+    return validExtensions.stream()\n+        .anyMatch(ext -> ext.equals(filePath.substring(filePath.lastIndexOf('.') + 1)));\n+  }\n+\n+  /**\n+   * @param uriForFileName of copybook found under workspace folder\n+   * @return content of the file as String content\n+   */\n+  @Nullable\n+  private String retrieveContentByPath(Path uriForFileName) {\n+    String content = null;\n+    try (Stream<String> stream = Files.lines(uriForFileName)) {\n+      content = stream.reduce((s1, s2) -> s1 + \"\\r\\n\" + s2).orElse(null);\n+    } catch (IOException e) {\n+      log.error(\"[retrieve content by path]\" + Arrays.toString(e.getStackTrace()));\n+    }\n+    return content;\n+  }\n+\n+  /** create the task and pass it to the executor service */\n+  @Override\n+  public void observerCallback(RequiredCopybookEvent event) {\n+    String requiredCopybookName = event.getName();\n+    Path path = getPathByCopybookName(requiredCopybookName);\n+    String content = Optional.ofNullable(path).map(this::retrieveContentByPath).orElse(null);\n+\n+    addCopybookInDepFile(requiredCopybookName, event.getDocumentUri());\n+\n+    dataBus.postData(\n+        FetchedCopybookEvent.builder()\n+            .name(requiredCopybookName)\n+            .uri(Optional.ofNullable(path).map(Path::toUri).map(URI::toString).orElse(null))\n+            .content(content)\n+            .build());\n+  }\n+\n+  @Beta\n+  void addCopybookInDepFile(String requiredCopybookName, String documentUri) {\n+    String cobolFileName = getCobolFileNameFromUri(documentUri);\n+    Path dependencyFolder = initializeDependencyFolder();\n+    Path dependencyFile = retrieveDependencyFile(dependencyFolder, cobolFileName);\n+\n+    if (!depFileExists(dependencyFile)) {\n+      generateDependencyFile(cobolFileName, dependencyFolder);\n+    }\n+    // check why dependency file path is sometimes null\n+    updateDependencyList(dependencyFile, requiredCopybookName);\n+  }\n+\n+  private String getCobolFileNameFromUri(String documentUri) {\n+    String result = null;\n+    try {\n+      result = FilenameUtils.getBaseName(Paths.get(new URI(documentUri)).getFileName().toString());\n+    } catch (URISyntaxException e) {\n+      log.error(\"URI not found for the given document \" + documentUri);\n+    }\n+    return result;\n+  }\n+\n+  private Path retrieveDependencyFile(Path dependencyFolderPath, String cobolFileName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb6cb57467192dc724fb5be3ceb958f35027fac3"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwMDk4OA==", "bodyText": "Please, describe the purpose of this class", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374000988", "createdAt": "2020-02-03T09:38:49Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.cobol;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+\n+import javax.annotation.Nonnull;\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb6cb57467192dc724fb5be3ceb958f35027fac3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwMTM3Nw==", "bodyText": "Check?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374001377", "createdAt": "2020-02-03T09:39:38Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.cobol;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+\n+import javax.annotation.Nonnull;\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Slf4j\n+public class FileSystemConfiguration extends ConfigurableTest {\n+  protected static final String COPYBOOK_CONTENT =\n+      \"000230 77  REPORT-STATUS           PIC 99 VALUE ZERO.\";\n+  protected static final String WORKSPACE_FOLDER_NAME = \"test\";\n+  protected static final String WS_FOLDER_NAME = \"WORKSPACE\";\n+  protected static final String CPYB_FOLDER_NAME = \"COPYBOOKS\";\n+  protected static final String CPYB_INNER_NAME = \"INNER\";\n+  protected static final String CPY_OUTER_NAME_ONLY2 = \"copy2\";\n+  protected static final String EMPTY_COPYBOOK_NAME = \" \";\n+  public static final String DOCUMENT_URI = \"file:///C:/Users/test/Test.cbl\";\n+  protected static final String CPY_OUTER_FILE_NAME_WITH_EXT = \"copy.cpy\";\n+  protected static final String CPY_OUTER_ANOTHER_FILE_NAME_WITH_EXT = \"copy3.out\";\n+  protected static final String CPY_INNER_FILE_NAME_WITH_EXT = \"copy2.cpy\";\n+  protected static final String DEP_FILE_COST_NAME = \"SOMEPROG\";\n+  private URI workspaceFolderPath = null;\n+  private Path innerCopybooksPath = null;\n+  protected Path workspacePath = createPathOfName(WS_FOLDER_NAME, Optional.empty());\n+\n+  /*\n+  STRUCTURE FOLDER USED FOR TEST PURPOSES\n+  ***************************************\n+  TEMP/\n+  \u2514\u2500\u2500 WORKSPACE/\n+      \u251c\u2500\u2500 .cobdeps\n+      \u2502   \u2514\u2500\u2500 SOMEPROG.dep\n+      \u2514\u2500\u2500\u2500 COPYBOOKS\n+          \u251c\u2500\u2500 INNER/\n+          \u2502   \u2514\u2500\u2500 copy2.cpy\n+          \u251c\u2500\u2500 copy3.out\n+          \u2514\u2500\u2500 copy.cpy\n+  ***************************************\n+  */\n+\n+  protected List<WorkspaceFolder> initWorkspaceFolderList() {\n+    Path copybooksPath = createPathOfName(CPYB_FOLDER_NAME, Optional.of(workspacePath));\n+    Path cpyFilePath = createPathOfName(CPY_OUTER_FILE_NAME_WITH_EXT, Optional.of(copybooksPath));\n+    Path anotherCpyFilePath =\n+        createPathOfName(CPY_OUTER_ANOTHER_FILE_NAME_WITH_EXT, Optional.of(copybooksPath));\n+    innerCopybooksPath = createPathOfName(CPYB_INNER_NAME, Optional.of(copybooksPath));\n+\n+    // create two cpy files\n+    createTempDirAndFile(workspacePath, copybooksPath, cpyFilePath, anotherCpyFilePath);\n+    createInnerFolderAndFile(\n+        copybooksPath,\n+        createPathOfName(CPY_INNER_FILE_NAME_WITH_EXT, Optional.of(innerCopybooksPath)));\n+\n+    WorkspaceFolder workspaceFolder = new WorkspaceFolder();\n+    workspaceFolder.setName(WORKSPACE_FOLDER_NAME);\n+    workspaceFolder.setUri(adjustURI(getWorkspaceFolderPath().toString()));\n+    setWorkspaceFolderPath(workspacePath.toUri());\n+\n+    return Collections.singletonList(workspaceFolder);\n+  }\n+\n+  protected URI getWorkspaceFolderPath() {\n+    return workspaceFolderPath;\n+  }\n+\n+  private void setWorkspaceFolderPath(URI workspaceFolderPath) {\n+    this.workspaceFolderPath = workspaceFolderPath;\n+  }\n+\n+  protected String filesystemSeparator() {\n+    return FileSystems.getDefault().getSeparator();\n+  }\n+\n+  /*\n+  Remove the last slash from the URI path in order to replicate the behaviour of the client IDE that send to the server\n+  the path of the opened workspace without the last slash.\n+   */\n+  private String adjustURI(String originalUri) {\n+    return originalUri.substring(0, originalUri.length() - 1);\n+  }\n+\n+  @Nonnull\n+  private Path createPathOfName(String folderName, Optional<Path> parentFolder) {\n+\n+    // creck if the workspace folder already exists (parent folder)..", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb6cb57467192dc724fb5be3ceb958f35027fac3"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwMTc5OA==", "bodyText": "Please, replace the printStackTrace calls with logging", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374001798", "createdAt": "2020-02-03T09:40:22Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.cobol;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+\n+import javax.annotation.Nonnull;\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Slf4j\n+public class FileSystemConfiguration extends ConfigurableTest {\n+  protected static final String COPYBOOK_CONTENT =\n+      \"000230 77  REPORT-STATUS           PIC 99 VALUE ZERO.\";\n+  protected static final String WORKSPACE_FOLDER_NAME = \"test\";\n+  protected static final String WS_FOLDER_NAME = \"WORKSPACE\";\n+  protected static final String CPYB_FOLDER_NAME = \"COPYBOOKS\";\n+  protected static final String CPYB_INNER_NAME = \"INNER\";\n+  protected static final String CPY_OUTER_NAME_ONLY2 = \"copy2\";\n+  protected static final String EMPTY_COPYBOOK_NAME = \" \";\n+  public static final String DOCUMENT_URI = \"file:///C:/Users/test/Test.cbl\";\n+  protected static final String CPY_OUTER_FILE_NAME_WITH_EXT = \"copy.cpy\";\n+  protected static final String CPY_OUTER_ANOTHER_FILE_NAME_WITH_EXT = \"copy3.out\";\n+  protected static final String CPY_INNER_FILE_NAME_WITH_EXT = \"copy2.cpy\";\n+  protected static final String DEP_FILE_COST_NAME = \"SOMEPROG\";\n+  private URI workspaceFolderPath = null;\n+  private Path innerCopybooksPath = null;\n+  protected Path workspacePath = createPathOfName(WS_FOLDER_NAME, Optional.empty());\n+\n+  /*\n+  STRUCTURE FOLDER USED FOR TEST PURPOSES\n+  ***************************************\n+  TEMP/\n+  \u2514\u2500\u2500 WORKSPACE/\n+      \u251c\u2500\u2500 .cobdeps\n+      \u2502   \u2514\u2500\u2500 SOMEPROG.dep\n+      \u2514\u2500\u2500\u2500 COPYBOOKS\n+          \u251c\u2500\u2500 INNER/\n+          \u2502   \u2514\u2500\u2500 copy2.cpy\n+          \u251c\u2500\u2500 copy3.out\n+          \u2514\u2500\u2500 copy.cpy\n+  ***************************************\n+  */\n+\n+  protected List<WorkspaceFolder> initWorkspaceFolderList() {\n+    Path copybooksPath = createPathOfName(CPYB_FOLDER_NAME, Optional.of(workspacePath));\n+    Path cpyFilePath = createPathOfName(CPY_OUTER_FILE_NAME_WITH_EXT, Optional.of(copybooksPath));\n+    Path anotherCpyFilePath =\n+        createPathOfName(CPY_OUTER_ANOTHER_FILE_NAME_WITH_EXT, Optional.of(copybooksPath));\n+    innerCopybooksPath = createPathOfName(CPYB_INNER_NAME, Optional.of(copybooksPath));\n+\n+    // create two cpy files\n+    createTempDirAndFile(workspacePath, copybooksPath, cpyFilePath, anotherCpyFilePath);\n+    createInnerFolderAndFile(\n+        copybooksPath,\n+        createPathOfName(CPY_INNER_FILE_NAME_WITH_EXT, Optional.of(innerCopybooksPath)));\n+\n+    WorkspaceFolder workspaceFolder = new WorkspaceFolder();\n+    workspaceFolder.setName(WORKSPACE_FOLDER_NAME);\n+    workspaceFolder.setUri(adjustURI(getWorkspaceFolderPath().toString()));\n+    setWorkspaceFolderPath(workspacePath.toUri());\n+\n+    return Collections.singletonList(workspaceFolder);\n+  }\n+\n+  protected URI getWorkspaceFolderPath() {\n+    return workspaceFolderPath;\n+  }\n+\n+  private void setWorkspaceFolderPath(URI workspaceFolderPath) {\n+    this.workspaceFolderPath = workspaceFolderPath;\n+  }\n+\n+  protected String filesystemSeparator() {\n+    return FileSystems.getDefault().getSeparator();\n+  }\n+\n+  /*\n+  Remove the last slash from the URI path in order to replicate the behaviour of the client IDE that send to the server\n+  the path of the opened workspace without the last slash.\n+   */\n+  private String adjustURI(String originalUri) {\n+    return originalUri.substring(0, originalUri.length() - 1);\n+  }\n+\n+  @Nonnull\n+  private Path createPathOfName(String folderName, Optional<Path> parentFolder) {\n+\n+    // creck if the workspace folder already exists (parent folder)..\n+    return parentFolder\n+        .map(\n+            path ->\n+                Paths.get(parentFolder.get() + System.getProperty(\"file.separator\") + folderName))\n+        .orElseGet(\n+            () ->\n+                Paths.get(\n+                    System.getProperty(\"java.io.tmpdir\")\n+                        + System.getProperty(\"file.separator\")\n+                        + folderName));\n+  }\n+\n+  // util methods to create dummy cobol code inside copybook file\n+  private void createInnerFolderAndFile(Path parentFolder, Path copybookFile) {\n+    try {\n+      // create parent folder\n+      if (Files.exists(parentFolder)) {\n+        if (!Files.exists(copybookFile)) {\n+          Files.createDirectory(innerCopybooksPath);\n+          // create file into it\n+          Path copybookFilePath = Files.createFile(copybookFile);\n+          generateDummyContentForFile(copybookFilePath);\n+        }\n+      }\n+    } catch (IOException e) {\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb6cb57467192dc724fb5be3ceb958f35027fac3"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwMzQ4Mg==", "bodyText": "Using Thread.sleep() in tests is a code smell, it is better to use Awaitility here.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374003482", "createdAt": "2020-02-03T09:43:49Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/FileSystemE2ETest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.cdi.LangServerCtx;\n+import com.broadcom.lsp.domain.cobol.databus.impl.AbstractDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.UnknownEvent;\n+import com.ca.lsp.cobol.FileSystemConfiguration;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Comparator;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * This class contains all the unit test that perform the publish/subscribe acrivities for generate\n+ * the dependency file.\n+ */\n+public class FileSystemE2ETest extends FileSystemConfiguration {\n+  public static final String CPY_NAME_WITHOUT_EXT = \"copy2\";\n+  DefaultDataBusBroker broker =\n+      (DefaultDataBusBroker) LangServerCtx.getInjector().getInstance(AbstractDataBusBroker.class);\n+\n+  private FileSystemServiceImpl fileSystemService = new FileSystemServiceImpl(broker);\n+\n+  @Before\n+  public void initActivities() {\n+    // the delegate will prepare the structure and this method will just setup the list of workspace\n+    // folders\n+    fileSystemService.setWorkspaceFolders(initWorkspaceFolderList());\n+  }\n+\n+  @After\n+  public void cleanupTempFolder() {\n+    try {\n+      Files.walk(Paths.get(getWorkspaceFolderPath()))\n+          .sorted(Comparator.reverseOrder())\n+          .map(Path::toFile)\n+          .forEach(File::delete);\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+\n+    broker.invalidateCache();\n+  }\n+\n+  /**\n+   * This test verify that when the preprocessor publish a require copybook event the FileSystem\n+   * service subscribed to it react generating the dependency file.\n+   */\n+  @Test\n+  public void generateDependencyFileOnCallback() throws InterruptedException {\n+    // generate a required copybook event\n+    broker.postData(\n+        RequiredCopybookEvent.builder()\n+            .name(CPY_NAME_WITHOUT_EXT)\n+            .documentUri(DOCUMENT_URI)\n+            .build());\n+    Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb6cb57467192dc724fb5be3ceb958f35027fac3"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwMzg1NQ==", "bodyText": "Please, replace with logging", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374003855", "createdAt": "2020-02-03T09:44:33Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/FileSystemE2ETest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.cdi.LangServerCtx;\n+import com.broadcom.lsp.domain.cobol.databus.impl.AbstractDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.UnknownEvent;\n+import com.ca.lsp.cobol.FileSystemConfiguration;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Comparator;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * This class contains all the unit test that perform the publish/subscribe acrivities for generate\n+ * the dependency file.\n+ */\n+public class FileSystemE2ETest extends FileSystemConfiguration {\n+  public static final String CPY_NAME_WITHOUT_EXT = \"copy2\";\n+  DefaultDataBusBroker broker =\n+      (DefaultDataBusBroker) LangServerCtx.getInjector().getInstance(AbstractDataBusBroker.class);\n+\n+  private FileSystemServiceImpl fileSystemService = new FileSystemServiceImpl(broker);\n+\n+  @Before\n+  public void initActivities() {\n+    // the delegate will prepare the structure and this method will just setup the list of workspace\n+    // folders\n+    fileSystemService.setWorkspaceFolders(initWorkspaceFolderList());\n+  }\n+\n+  @After\n+  public void cleanupTempFolder() {\n+    try {\n+      Files.walk(Paths.get(getWorkspaceFolderPath()))\n+          .sorted(Comparator.reverseOrder())\n+          .map(Path::toFile)\n+          .forEach(File::delete);\n+    } catch (IOException e) {\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb6cb57467192dc724fb5be3ceb958f35027fac3"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwNzM2NQ==", "bodyText": "Do we need a class cast here? I think it will work if you call the impl class.\nStill, the best practice is to interact only with the interface methods.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374007365", "createdAt": "2020-02-03T09:51:25Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/FileSystemServiceTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ *\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ * Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.cdi.LangServerCtx;\n+import com.broadcom.lsp.domain.cobol.event.api.EventObserver;\n+import com.broadcom.lsp.domain.cobol.event.model.FetchedCopybookEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.ca.lsp.cobol.FileSystemConfiguration;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.*;\n+\n+@Slf4j\n+public class FileSystemServiceTest extends FileSystemConfiguration\n+    implements EventObserver<RequiredCopybookEvent> {\n+\n+  private static final String DEP_EXTENSION = \".dep\";\n+  private FileSystemServiceImpl fileSystemService =\n+      (FileSystemServiceImpl) LangServerCtx.getInjector().getInstance(FileSystemService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb6cb57467192dc724fb5be3ceb958f35027fac3"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwODExMQ==", "bodyText": "This comment is out-of-date", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374008111", "createdAt": "2020-02-03T09:52:46Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/mocks/MockFileSystemService.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ *\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ * Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.ca.lsp.cobol.service.mocks;\n+\n+import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.ca.lsp.cobol.positive.CobolTextRegistry;\n+import com.ca.lsp.cobol.service.FileSystemService;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import net.jodah.concurrentunit.Waiter;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.*;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * This class is used to mock the actual behavior of {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb6cb57467192dc724fb5be3ceb958f35027fac3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAxMDA0Nw==", "bodyText": "Should it be MockFileSystemService here?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374010047", "createdAt": "2020-02-03T09:56:30Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/TestModule.java", "diffHunk": "@@ -51,9 +55,13 @@ protected void configure() {\n     bind(LanguageServer.class).to(TestLanguageServer.class);\n     bind(LanguageEngineFacade.class).to(CobolLanguageEngineFacade.class);\n     bind(WorkspaceService.class).to(MockWorkspaceService.class);\n+\n+    bind(FileSystemService.class).to(FileSystemServiceImpl.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb6cb57467192dc724fb5be3ceb958f35027fac3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAxMDk3Mw==", "bodyText": "By idea, this binding should be from the widest to the most possibly precise, i.e. DataBusBroker -> DefaultDataBusBroker", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#discussion_r374010973", "createdAt": "2020-02-03T09:58:23Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/TestModule.java", "diffHunk": "@@ -51,9 +55,13 @@ protected void configure() {\n     bind(LanguageServer.class).to(TestLanguageServer.class);\n     bind(LanguageEngineFacade.class).to(CobolLanguageEngineFacade.class);\n     bind(WorkspaceService.class).to(MockWorkspaceService.class);\n+\n+    bind(FileSystemService.class).to(FileSystemServiceImpl.class);\n+\n     bind(Communications.class).to(ServerCommunications.class);\n     bind(TextDocumentService.class).to(MyTextDocumentService.class);\n     bind(CobolTextRegistry.class).to(ZipTextRegistry.class);\n+    bind(AbstractDataBusBroker.class).to(DefaultDataBusBroker.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb6cb57467192dc724fb5be3ceb958f35027fac3"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5f7f0fa8a5ab28ffb2467043b98d765bd2d4578", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/e5f7f0fa8a5ab28ffb2467043b98d765bd2d4578", "committedDate": "2020-02-03T16:14:50Z", "message": "Address request changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "216d765929081f17bfd39326492eb0a2458caf68", "author": {"user": {"login": "sergiuilie", "name": "Sergiu Ilie"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/216d765929081f17bfd39326492eb0a2458caf68", "committedDate": "2020-02-03T16:33:16Z", "message": "Align positive test parameters"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMzkxNTgz", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#pullrequestreview-352391583", "createdAt": "2020-02-03T16:34:14Z", "commit": {"oid": "e5f7f0fa8a5ab28ffb2467043b98d765bd2d4578"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMzk5MDU3", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/172#pullrequestreview-352399057", "createdAt": "2020-02-03T16:44:00Z", "commit": {"oid": "216d765929081f17bfd39326492eb0a2458caf68"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1178, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}