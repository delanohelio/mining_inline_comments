{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNDc5MDE2", "number": 557, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjozOTozN1rOEtkgFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTo0OToxMlrOEt6kfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjE5NDEzOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/CobolTextHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjozOTozN1rOHhb0lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjozOTozN1rOHhb0lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgyMDg4NQ==", "bodyText": "Please, provide the Javadoc for this class", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/557#discussion_r504820885", "createdAt": "2020-10-14T16:39:37Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/CobolTextHelper.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.broadcom.lsp.cobol.positive;\n+\n+import lombok.experimental.UtilityClass;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+\n+@Slf4j\n+@UtilityClass\n+public class CobolTextHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7f3b3292e98f8f02337cef9f744e40677bf00f8"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjIwODcxOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/FolderTextRegistry.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjo0MzoyMFrOHhb9iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTowOToyOFrOHh9-Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgyMzE3Ng==", "bodyText": "COBOL files don't necessarily have extensions, so it may cause wrong behavior in some cases.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/557#discussion_r504823176", "createdAt": "2020-10-14T16:43:20Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/FolderTextRegistry.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.broadcom.lsp.cobol.positive;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.ListMultimap;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/** Registry for Cobol source code files. */\n+@Slf4j\n+@Singleton\n+public class FolderTextRegistry implements CobolTextRegistry {\n+\n+    private static final String POSITIVE_ENTRY = \"positive\";\n+    private static final String NEGATIVE_ENTRY = \"negative\";\n+    private static final String COPYBOOK_ENTRY = \"copybooks\";\n+\n+    private final ListMultimap<String, CobolText> texts = ArrayListMultimap.create();\n+\n+    @Inject\n+    public FolderTextRegistry(@Named(\"filesToTestPath\") String pathToTestResources) {\n+        if (StringUtils.isNotEmpty(pathToTestResources)) {\n+            try {\n+                collectFilesToTest(pathToTestResources);\n+            } catch (IOException e) {\n+                LOG.error(e.getMessage());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public List<CobolText> getPositives() {\n+        return Collections.unmodifiableList(texts.get(POSITIVE_ENTRY));\n+    }\n+\n+    @Override\n+    public List<CobolText> getNegatives() {\n+        return Collections.unmodifiableList(texts.get(NEGATIVE_ENTRY));\n+    }\n+\n+    @Override\n+    public List<CobolText> getCopybooks() {\n+        return Collections.unmodifiableList(texts.get(COPYBOOK_ENTRY));\n+    }\n+\n+    private void collectFilesToTest(String folderPath) throws IOException {\n+        Files.walk(Paths.get(folderPath))\n+                .filter(Files::isRegularFile)\n+                .forEach(this::processFile);\n+    }\n+\n+    private void processFile(Path path) {\n+        String[] parts = path.toString().split(\"/\");\n+        if (parts.length < 2) {\n+            return;\n+        }\n+\n+        String name = parts[parts.length - 1];\n+        String folder = parts[parts.length - 2];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7f3b3292e98f8f02337cef9f744e40677bf00f8"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM2MDM4MA==", "bodyText": "Can you clarify?\nWe have a path like user/folder/filename the last part will be a filename (no matter if it has an extension or not)\nAnd the previous will be a folder name that will be mapped to one of 3 types.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/557#discussion_r505360380", "createdAt": "2020-10-15T08:49:22Z", "author": {"login": "Nurkambay"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/FolderTextRegistry.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.broadcom.lsp.cobol.positive;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.ListMultimap;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/** Registry for Cobol source code files. */\n+@Slf4j\n+@Singleton\n+public class FolderTextRegistry implements CobolTextRegistry {\n+\n+    private static final String POSITIVE_ENTRY = \"positive\";\n+    private static final String NEGATIVE_ENTRY = \"negative\";\n+    private static final String COPYBOOK_ENTRY = \"copybooks\";\n+\n+    private final ListMultimap<String, CobolText> texts = ArrayListMultimap.create();\n+\n+    @Inject\n+    public FolderTextRegistry(@Named(\"filesToTestPath\") String pathToTestResources) {\n+        if (StringUtils.isNotEmpty(pathToTestResources)) {\n+            try {\n+                collectFilesToTest(pathToTestResources);\n+            } catch (IOException e) {\n+                LOG.error(e.getMessage());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public List<CobolText> getPositives() {\n+        return Collections.unmodifiableList(texts.get(POSITIVE_ENTRY));\n+    }\n+\n+    @Override\n+    public List<CobolText> getNegatives() {\n+        return Collections.unmodifiableList(texts.get(NEGATIVE_ENTRY));\n+    }\n+\n+    @Override\n+    public List<CobolText> getCopybooks() {\n+        return Collections.unmodifiableList(texts.get(COPYBOOK_ENTRY));\n+    }\n+\n+    private void collectFilesToTest(String folderPath) throws IOException {\n+        Files.walk(Paths.get(folderPath))\n+                .filter(Files::isRegularFile)\n+                .forEach(this::processFile);\n+    }\n+\n+    private void processFile(Path path) {\n+        String[] parts = path.toString().split(\"/\");\n+        if (parts.length < 2) {\n+            return;\n+        }\n+\n+        String name = parts[parts.length - 1];\n+        String folder = parts[parts.length - 2];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgyMzE3Ng=="}, "originalCommit": {"oid": "c7f3b3292e98f8f02337cef9f744e40677bf00f8"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4MDM1NQ==", "bodyText": "Yes, you're right, I just misunderstood the code", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/557#discussion_r505380355", "createdAt": "2020-10-15T09:09:28Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/FolderTextRegistry.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.broadcom.lsp.cobol.positive;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.ListMultimap;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/** Registry for Cobol source code files. */\n+@Slf4j\n+@Singleton\n+public class FolderTextRegistry implements CobolTextRegistry {\n+\n+    private static final String POSITIVE_ENTRY = \"positive\";\n+    private static final String NEGATIVE_ENTRY = \"negative\";\n+    private static final String COPYBOOK_ENTRY = \"copybooks\";\n+\n+    private final ListMultimap<String, CobolText> texts = ArrayListMultimap.create();\n+\n+    @Inject\n+    public FolderTextRegistry(@Named(\"filesToTestPath\") String pathToTestResources) {\n+        if (StringUtils.isNotEmpty(pathToTestResources)) {\n+            try {\n+                collectFilesToTest(pathToTestResources);\n+            } catch (IOException e) {\n+                LOG.error(e.getMessage());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public List<CobolText> getPositives() {\n+        return Collections.unmodifiableList(texts.get(POSITIVE_ENTRY));\n+    }\n+\n+    @Override\n+    public List<CobolText> getNegatives() {\n+        return Collections.unmodifiableList(texts.get(NEGATIVE_ENTRY));\n+    }\n+\n+    @Override\n+    public List<CobolText> getCopybooks() {\n+        return Collections.unmodifiableList(texts.get(COPYBOOK_ENTRY));\n+    }\n+\n+    private void collectFilesToTest(String folderPath) throws IOException {\n+        Files.walk(Paths.get(folderPath))\n+                .filter(Files::isRegularFile)\n+                .forEach(this::processFile);\n+    }\n+\n+    private void processFile(Path path) {\n+        String[] parts = path.toString().split(\"/\");\n+        if (parts.length < 2) {\n+            return;\n+        }\n+\n+        String name = parts[parts.length - 1];\n+        String folder = parts[parts.length - 2];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgyMzE3Ng=="}, "originalCommit": {"oid": "c7f3b3292e98f8f02337cef9f744e40677bf00f8"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjM4Njc3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/CobolTextHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzozMDozNFrOHhdsqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzozMDozNFrOHhdsqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg1MTYyNw==", "bodyText": "I hope that you can use this line here:\nfullText = IOUtils.toString(stream, StandardCharsets.UTF_8.name());\n\nWe already have Apache IO library in our project.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/557#discussion_r504851627", "createdAt": "2020-10-14T17:30:34Z", "author": {"login": "grianbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/CobolTextHelper.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.broadcom.lsp.cobol.positive;\n+\n+import lombok.experimental.UtilityClass;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+\n+@Slf4j\n+@UtilityClass\n+public class CobolTextHelper {\n+    public CobolText fromStream(String name, InputStream stream) {\n+        String fullText = null;\n+        try {\n+            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(stream));\n+            StringBuilder builder = new StringBuilder();\n+\n+            for (String line = bufferedReader.readLine();\n+                 line != null;\n+                 line = bufferedReader.readLine()) {\n+                builder.append(line).append(\"\\r\\n\");\n+            }\n+            fullText = builder.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7f3b3292e98f8f02337cef9f744e40677bf00f8"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjQxMjA4OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/TestModule.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzozNzoyNlrOHhd8hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODoyMjowN1rOHh6ytA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg1NTY4NQ==", "bodyText": "If we don't plan to use a zip file as a registry, we can delete the entire ZipTextRegistry class and CobolTextHelper.\nIn case we work only with a folder registry, we can read a file via Files.readString(path) in FolderTextRegistry::processFile, no needs to touch InputStream at all.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/557#discussion_r504855685", "createdAt": "2020-10-14T17:37:26Z", "author": {"login": "grianbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/TestModule.java", "diffHunk": "@@ -61,7 +62,7 @@ protected void configure() {\n     bind(CopybookService.class).to(CopybookServiceImpl.class);\n     bind(Communications.class).to(ServerCommunications.class);\n     bind(TextDocumentService.class).to(CobolTextDocumentService.class);\n-    bind(CobolTextRegistry.class).to(ZipTextRegistry.class);\n+    bind(CobolTextRegistry.class).to(FolderTextRegistry.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7f3b3292e98f8f02337cef9f744e40677bf00f8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMxMTM3Mg==", "bodyText": "Actually, I don't know do we need to have the ability to use ZipTextRegistry. In that case, maybe it is better to be able to detect by path what registry needs to be used here.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/557#discussion_r505311372", "createdAt": "2020-10-15T08:07:46Z", "author": {"login": "Nurkambay"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/TestModule.java", "diffHunk": "@@ -61,7 +62,7 @@ protected void configure() {\n     bind(CopybookService.class).to(CopybookServiceImpl.class);\n     bind(Communications.class).to(ServerCommunications.class);\n     bind(TextDocumentService.class).to(CobolTextDocumentService.class);\n-    bind(CobolTextRegistry.class).to(ZipTextRegistry.class);\n+    bind(CobolTextRegistry.class).to(FolderTextRegistry.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg1NTY4NQ=="}, "originalCommit": {"oid": "c7f3b3292e98f8f02337cef9f744e40677bf00f8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMyMjA5Mw==", "bodyText": "We don't need the ZipTextRegistry anymore, so you may remove this class. Also, seems like we don't need this binding - we do not inject this object anywhere", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/557#discussion_r505322093", "createdAt": "2020-10-15T08:16:32Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/TestModule.java", "diffHunk": "@@ -61,7 +62,7 @@ protected void configure() {\n     bind(CopybookService.class).to(CopybookServiceImpl.class);\n     bind(Communications.class).to(ServerCommunications.class);\n     bind(TextDocumentService.class).to(CobolTextDocumentService.class);\n-    bind(CobolTextRegistry.class).to(ZipTextRegistry.class);\n+    bind(CobolTextRegistry.class).to(FolderTextRegistry.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg1NTY4NQ=="}, "originalCommit": {"oid": "c7f3b3292e98f8f02337cef9f744e40677bf00f8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMyODMwOA==", "bodyText": "Got it", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/557#discussion_r505328308", "createdAt": "2020-10-15T08:22:07Z", "author": {"login": "Nurkambay"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/TestModule.java", "diffHunk": "@@ -61,7 +62,7 @@ protected void configure() {\n     bind(CopybookService.class).to(CopybookServiceImpl.class);\n     bind(Communications.class).to(ServerCommunications.class);\n     bind(TextDocumentService.class).to(CobolTextDocumentService.class);\n-    bind(CobolTextRegistry.class).to(ZipTextRegistry.class);\n+    bind(CobolTextRegistry.class).to(FolderTextRegistry.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg1NTY4NQ=="}, "originalCommit": {"oid": "c7f3b3292e98f8f02337cef9f744e40677bf00f8"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTI0ODk1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/CobolTextHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODoxMToxOVrOHh6Cdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODoyMTozN1rOHh6wTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMxNTk1OA==", "bodyText": "As I see, for error case, it is still returning the object, and once used below no validation there. Better return Optional object and check ifPresent..", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/557#discussion_r505315958", "createdAt": "2020-10-15T08:11:19Z", "author": {"login": "asatklichov"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/CobolTextHelper.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.broadcom.lsp.cobol.positive;\n+\n+import lombok.experimental.UtilityClass;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+\n+@Slf4j\n+@UtilityClass\n+public class CobolTextHelper {\n+    public CobolText fromStream(String name, InputStream stream) {\n+        String fullText = null;\n+        try {\n+            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(stream));\n+            StringBuilder builder = new StringBuilder();\n+\n+            for (String line = bufferedReader.readLine();\n+                 line != null;\n+                 line = bufferedReader.readLine()) {\n+                builder.append(line).append(\"\\r\\n\");\n+            }\n+            fullText = builder.toString();\n+        } catch (IOException e) {\n+            LOG.error(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7f3b3292e98f8f02337cef9f744e40677bf00f8"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMyNzY5Mw==", "bodyText": "I have just moved this code from one class to another, but I agree it can be re-implemented better \ud83d\udc4d", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/557#discussion_r505327693", "createdAt": "2020-10-15T08:21:37Z", "author": {"login": "Nurkambay"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/CobolTextHelper.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.broadcom.lsp.cobol.positive;\n+\n+import lombok.experimental.UtilityClass;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+\n+@Slf4j\n+@UtilityClass\n+public class CobolTextHelper {\n+    public CobolText fromStream(String name, InputStream stream) {\n+        String fullText = null;\n+        try {\n+            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(stream));\n+            StringBuilder builder = new StringBuilder();\n+\n+            for (String line = bufferedReader.readLine();\n+                 line != null;\n+                 line = bufferedReader.readLine()) {\n+                builder.append(line).append(\"\\r\\n\");\n+            }\n+            fullText = builder.toString();\n+        } catch (IOException e) {\n+            LOG.error(e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMxNTk1OA=="}, "originalCommit": {"oid": "c7f3b3292e98f8f02337cef9f744e40677bf00f8"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTI1MjQxOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/FolderTextRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODoxMTo1NlrOHh6EuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODoxMTo1NlrOHh6EuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMxNjUzNw==", "bodyText": "Regarding to above check here only ifPresent needed", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/557#discussion_r505316537", "createdAt": "2020-10-15T08:11:56Z", "author": {"login": "asatklichov"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/FolderTextRegistry.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.broadcom.lsp.cobol.positive;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.ListMultimap;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/** Registry for Cobol source code files. */\n+@Slf4j\n+@Singleton\n+public class FolderTextRegistry implements CobolTextRegistry {\n+\n+    private static final String POSITIVE_ENTRY = \"positive\";\n+    private static final String NEGATIVE_ENTRY = \"negative\";\n+    private static final String COPYBOOK_ENTRY = \"copybooks\";\n+\n+    private final ListMultimap<String, CobolText> texts = ArrayListMultimap.create();\n+\n+    @Inject\n+    public FolderTextRegistry(@Named(\"filesToTestPath\") String pathToTestResources) {\n+        if (StringUtils.isNotEmpty(pathToTestResources)) {\n+            try {\n+                collectFilesToTest(pathToTestResources);\n+            } catch (IOException e) {\n+                LOG.error(e.getMessage());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public List<CobolText> getPositives() {\n+        return Collections.unmodifiableList(texts.get(POSITIVE_ENTRY));\n+    }\n+\n+    @Override\n+    public List<CobolText> getNegatives() {\n+        return Collections.unmodifiableList(texts.get(NEGATIVE_ENTRY));\n+    }\n+\n+    @Override\n+    public List<CobolText> getCopybooks() {\n+        return Collections.unmodifiableList(texts.get(COPYBOOK_ENTRY));\n+    }\n+\n+    private void collectFilesToTest(String folderPath) throws IOException {\n+        Files.walk(Paths.get(folderPath))\n+                .filter(Files::isRegularFile)\n+                .forEach(this::processFile);\n+    }\n+\n+    private void processFile(Path path) {\n+        String[] parts = path.toString().split(\"/\");\n+        if (parts.length < 2) {\n+            return;\n+        }\n+\n+        String name = parts[parts.length - 1];\n+        String folder = parts[parts.length - 2];\n+\n+        try (InputStream stream = Files.newInputStream(path)) {\n+            CobolText loadCobolText = CobolTextHelper.fromStream(name, stream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7f3b3292e98f8f02337cef9f744e40677bf00f8"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTI4OTY5OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/CobolTextHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODoxNzozNVrOHh6eqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTowNToyMVrOHh9ydQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMyMzE3Nw==", "bodyText": "There is a new StringJoiner if you like to try here", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/557#discussion_r505323177", "createdAt": "2020-10-15T08:17:35Z", "author": {"login": "asatklichov"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/CobolTextHelper.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.broadcom.lsp.cobol.positive;\n+\n+import lombok.experimental.UtilityClass;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+\n+@Slf4j\n+@UtilityClass\n+public class CobolTextHelper {\n+    public CobolText fromStream(String name, InputStream stream) {\n+        String fullText = null;\n+        try {\n+            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(stream));\n+            StringBuilder builder = new StringBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7f3b3292e98f8f02337cef9f744e40677bf00f8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM3NzM5Nw==", "bodyText": "Not needed anymore.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/557#discussion_r505377397", "createdAt": "2020-10-15T09:05:21Z", "author": {"login": "Nurkambay"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/CobolTextHelper.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.broadcom.lsp.cobol.positive;\n+\n+import lombok.experimental.UtilityClass;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+\n+@Slf4j\n+@UtilityClass\n+public class CobolTextHelper {\n+    public CobolText fromStream(String name, InputStream stream) {\n+        String fullText = null;\n+        try {\n+            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(stream));\n+            StringBuilder builder = new StringBuilder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMyMzE3Nw=="}, "originalCommit": {"oid": "c7f3b3292e98f8f02337cef9f744e40677bf00f8"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTY3MDI1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/FolderTextRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOToxODo0OVrOHh-aUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOToyNjozNVrOHh-vYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4NzYwMw==", "bodyText": "I just noticed that this class is not used in the dependency injection, so it would be better to remove these @Inject and @Named", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/557#discussion_r505387603", "createdAt": "2020-10-15T09:18:49Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/FolderTextRegistry.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.broadcom.lsp.cobol.positive;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.ListMultimap;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/** Registry for Cobol source code files. */\n+@Slf4j\n+@Singleton\n+public class FolderTextRegistry implements CobolTextRegistry {\n+\n+    private static final String POSITIVE_ENTRY = \"positive\";\n+    private static final String NEGATIVE_ENTRY = \"negative\";\n+    private static final String COPYBOOK_ENTRY = \"copybooks\";\n+\n+    private final ListMultimap<String, CobolText> texts = ArrayListMultimap.create();\n+\n+    @Inject", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10a3fb737b4eeb702f15041874ab355d1b53da6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM5Mjk5Mw==", "bodyText": "Agree", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/557#discussion_r505392993", "createdAt": "2020-10-15T09:26:35Z", "author": {"login": "Nurkambay"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/FolderTextRegistry.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.broadcom.lsp.cobol.positive;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.ListMultimap;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/** Registry for Cobol source code files. */\n+@Slf4j\n+@Singleton\n+public class FolderTextRegistry implements CobolTextRegistry {\n+\n+    private static final String POSITIVE_ENTRY = \"positive\";\n+    private static final String NEGATIVE_ENTRY = \"negative\";\n+    private static final String COPYBOOK_ENTRY = \"copybooks\";\n+\n+    private final ListMultimap<String, CobolText> texts = ArrayListMultimap.create();\n+\n+    @Inject", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4NzYwMw=="}, "originalCommit": {"oid": "b10a3fb737b4eeb702f15041874ab355d1b53da6"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTc0NTM4OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/FolderTextRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTozNTowOVrOHh_JoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTozNTowOVrOHh_JoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM5OTcxMw==", "bodyText": "In my case, the path contains the other slashes \\. I think this regex should match both cases", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/557#discussion_r505399713", "createdAt": "2020-10-15T09:35:09Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/FolderTextRegistry.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.broadcom.lsp.cobol.positive;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.ListMultimap;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/** Registry for Cobol source code files. */\n+@Slf4j\n+@Singleton\n+public class FolderTextRegistry implements CobolTextRegistry {\n+\n+    private static final String POSITIVE_ENTRY = \"positive\";\n+    private static final String NEGATIVE_ENTRY = \"negative\";\n+    private static final String COPYBOOK_ENTRY = \"copybooks\";\n+\n+    private final ListMultimap<String, CobolText> texts = ArrayListMultimap.create();\n+\n+    @Inject\n+    public FolderTextRegistry(@Named(\"filesToTestPath\") String pathToTestResources) {\n+        if (StringUtils.isNotEmpty(pathToTestResources)) {\n+            try {\n+                collectFilesToTest(pathToTestResources);\n+            } catch (IOException e) {\n+                LOG.error(e.getMessage());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public List<CobolText> getPositives() {\n+        return Collections.unmodifiableList(texts.get(POSITIVE_ENTRY));\n+    }\n+\n+    @Override\n+    public List<CobolText> getNegatives() {\n+        return Collections.unmodifiableList(texts.get(NEGATIVE_ENTRY));\n+    }\n+\n+    @Override\n+    public List<CobolText> getCopybooks() {\n+        return Collections.unmodifiableList(texts.get(COPYBOOK_ENTRY));\n+    }\n+\n+    private void collectFilesToTest(String folderPath) throws IOException {\n+        Files.walk(Paths.get(folderPath))\n+                .filter(Files::isRegularFile)\n+                .forEach(this::processFile);\n+    }\n+\n+    private void processFile(Path path) {\n+        String[] parts = path.toString().split(\"/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10a3fb737b4eeb702f15041874ab355d1b53da6"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTc4MjAzOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/FolderTextRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTo0MzoyMlrOHh_hfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTo1Mzo1MFrOHh__mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQwNTgyMA==", "bodyText": "You should also check if the given folder name is allowed (i.e. positive, negative, or copybooks), or it will consume also git files.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/557#discussion_r505405820", "createdAt": "2020-10-15T09:43:22Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/FolderTextRegistry.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package com.broadcom.lsp.cobol.positive;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.ListMultimap;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/** Registry for Cobol source code files. */\n+@Slf4j\n+public class FolderTextRegistry implements CobolTextRegistry {\n+  private static final String POSITIVE_ENTRY = \"positive\";\n+  private static final String NEGATIVE_ENTRY = \"negative\";\n+  private static final String COPYBOOK_ENTRY = \"copybooks\";\n+\n+  private final ListMultimap<String, CobolText> texts = ArrayListMultimap.create();\n+\n+  public FolderTextRegistry(String pathToTestResources) {\n+    if (StringUtils.isNotEmpty(pathToTestResources)) {\n+        try {\n+            collectFilesToTest(pathToTestResources);\n+        } catch (IOException e) {\n+            LOG.error(e.getMessage());\n+        }\n+    }\n+  }\n+\n+  @Override\n+  public List<CobolText> getPositives() {\n+    return Collections.unmodifiableList(texts.get(POSITIVE_ENTRY));\n+  }\n+\n+  @Override\n+  public List<CobolText> getNegatives() {\n+        return Collections.unmodifiableList(texts.get(NEGATIVE_ENTRY));\n+    }\n+\n+  @Override\n+  public List<CobolText> getCopybooks() {\n+    return Collections.unmodifiableList(texts.get(COPYBOOK_ENTRY));\n+  }\n+\n+  private void collectFilesToTest(String folderPath) throws IOException {\n+    Files.walk(Paths.get(folderPath))\n+      .filter(Files::isRegularFile)\n+      .forEach(this::processFile);\n+  }\n+\n+  private void processFile(Path path) {\n+    String[] parts = path.toString().split(\"/\");\n+    if (parts.length < 2) {\n+      return;\n+    }\n+\n+    String name = parts[parts.length - 1];\n+    String folder = parts[parts.length - 2];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1273d1a5ed14ec123faa5b0b514901d419f9e7b7"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQxMzUyOQ==", "bodyText": "Done", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/557#discussion_r505413529", "createdAt": "2020-10-15T09:53:50Z", "author": {"login": "Nurkambay"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/FolderTextRegistry.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package com.broadcom.lsp.cobol.positive;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.ListMultimap;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/** Registry for Cobol source code files. */\n+@Slf4j\n+public class FolderTextRegistry implements CobolTextRegistry {\n+  private static final String POSITIVE_ENTRY = \"positive\";\n+  private static final String NEGATIVE_ENTRY = \"negative\";\n+  private static final String COPYBOOK_ENTRY = \"copybooks\";\n+\n+  private final ListMultimap<String, CobolText> texts = ArrayListMultimap.create();\n+\n+  public FolderTextRegistry(String pathToTestResources) {\n+    if (StringUtils.isNotEmpty(pathToTestResources)) {\n+        try {\n+            collectFilesToTest(pathToTestResources);\n+        } catch (IOException e) {\n+            LOG.error(e.getMessage());\n+        }\n+    }\n+  }\n+\n+  @Override\n+  public List<CobolText> getPositives() {\n+    return Collections.unmodifiableList(texts.get(POSITIVE_ENTRY));\n+  }\n+\n+  @Override\n+  public List<CobolText> getNegatives() {\n+        return Collections.unmodifiableList(texts.get(NEGATIVE_ENTRY));\n+    }\n+\n+  @Override\n+  public List<CobolText> getCopybooks() {\n+    return Collections.unmodifiableList(texts.get(COPYBOOK_ENTRY));\n+  }\n+\n+  private void collectFilesToTest(String folderPath) throws IOException {\n+    Files.walk(Paths.get(folderPath))\n+      .filter(Files::isRegularFile)\n+      .forEach(this::processFile);\n+  }\n+\n+  private void processFile(Path path) {\n+    String[] parts = path.toString().split(\"/\");\n+    if (parts.length < 2) {\n+      return;\n+    }\n+\n+    String name = parts[parts.length - 1];\n+    String folder = parts[parts.length - 2];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQwNTgyMA=="}, "originalCommit": {"oid": "1273d1a5ed14ec123faa5b0b514901d419f9e7b7"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTgwNDgxOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/FolderTextRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTo0ODowOFrOHh_wFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTo0ODowOFrOHh_wFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQwOTU1OQ==", "bodyText": "Why do we need this restriction?\nIt matches folder/file.ext, and also matches file.ext. But in the last case we will have an error in line:\nString folder = parts[parts.length - 2];", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/557#discussion_r505409559", "createdAt": "2020-10-15T09:48:08Z", "author": {"login": "grianbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/FolderTextRegistry.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package com.broadcom.lsp.cobol.positive;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.ListMultimap;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/** Registry for Cobol source code files. */\n+@Slf4j\n+public class FolderTextRegistry implements CobolTextRegistry {\n+  private static final String POSITIVE_ENTRY = \"positive\";\n+  private static final String NEGATIVE_ENTRY = \"negative\";\n+  private static final String COPYBOOK_ENTRY = \"copybooks\";\n+\n+  private final ListMultimap<String, CobolText> texts = ArrayListMultimap.create();\n+\n+  public FolderTextRegistry(String pathToTestResources) {\n+    if (StringUtils.isNotEmpty(pathToTestResources)) {\n+        try {\n+            collectFilesToTest(pathToTestResources);\n+        } catch (IOException e) {\n+            LOG.error(e.getMessage());\n+        }\n+    }\n+  }\n+\n+  @Override\n+  public List<CobolText> getPositives() {\n+    return Collections.unmodifiableList(texts.get(POSITIVE_ENTRY));\n+  }\n+\n+  @Override\n+  public List<CobolText> getNegatives() {\n+        return Collections.unmodifiableList(texts.get(NEGATIVE_ENTRY));\n+    }\n+\n+  @Override\n+  public List<CobolText> getCopybooks() {\n+    return Collections.unmodifiableList(texts.get(COPYBOOK_ENTRY));\n+  }\n+\n+  private void collectFilesToTest(String folderPath) throws IOException {\n+    Files.walk(Paths.get(folderPath))\n+      .filter(Files::isRegularFile)\n+      .forEach(this::processFile);\n+  }\n+\n+  private void processFile(Path path) {\n+    String[] parts = path.toString().split(\"/\");\n+    if (parts.length < 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1273d1a5ed14ec123faa5b0b514901d419f9e7b7"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTgwOTg5OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/FolderTextRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTo0OToxMlrOHh_zTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDowMTowMVrOHiATXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQxMDM4Mg==", "bodyText": "Could it be the following?\n    String name = path.getFileName().toString();\n    String folder = path.getParent().toString();", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/557#discussion_r505410382", "createdAt": "2020-10-15T09:49:12Z", "author": {"login": "grianbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/FolderTextRegistry.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package com.broadcom.lsp.cobol.positive;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.ListMultimap;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/** Registry for Cobol source code files. */\n+@Slf4j\n+public class FolderTextRegistry implements CobolTextRegistry {\n+  private static final String POSITIVE_ENTRY = \"positive\";\n+  private static final String NEGATIVE_ENTRY = \"negative\";\n+  private static final String COPYBOOK_ENTRY = \"copybooks\";\n+\n+  private final ListMultimap<String, CobolText> texts = ArrayListMultimap.create();\n+\n+  public FolderTextRegistry(String pathToTestResources) {\n+    if (StringUtils.isNotEmpty(pathToTestResources)) {\n+        try {\n+            collectFilesToTest(pathToTestResources);\n+        } catch (IOException e) {\n+            LOG.error(e.getMessage());\n+        }\n+    }\n+  }\n+\n+  @Override\n+  public List<CobolText> getPositives() {\n+    return Collections.unmodifiableList(texts.get(POSITIVE_ENTRY));\n+  }\n+\n+  @Override\n+  public List<CobolText> getNegatives() {\n+        return Collections.unmodifiableList(texts.get(NEGATIVE_ENTRY));\n+    }\n+\n+  @Override\n+  public List<CobolText> getCopybooks() {\n+    return Collections.unmodifiableList(texts.get(COPYBOOK_ENTRY));\n+  }\n+\n+  private void collectFilesToTest(String folderPath) throws IOException {\n+    Files.walk(Paths.get(folderPath))\n+      .filter(Files::isRegularFile)\n+      .forEach(this::processFile);\n+  }\n+\n+  private void processFile(Path path) {\n+    String[] parts = path.toString().split(\"/\");\n+    if (parts.length < 2) {\n+      return;\n+    }\n+\n+    String name = parts[parts.length - 1];\n+    String folder = parts[parts.length - 2];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1273d1a5ed14ec123faa5b0b514901d419f9e7b7"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQxODU4OA==", "bodyText": "I got the idea.\n    String name = path.getFileName().toString();\n    String folder = Optional.ofNullable(path.getParent())\n            .map(Path::getFileName)\n            .map(Path::toString)\n            .orElse(\"\");", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/557#discussion_r505418588", "createdAt": "2020-10-15T10:01:01Z", "author": {"login": "Nurkambay"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/positive/FolderTextRegistry.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package com.broadcom.lsp.cobol.positive;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.ListMultimap;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/** Registry for Cobol source code files. */\n+@Slf4j\n+public class FolderTextRegistry implements CobolTextRegistry {\n+  private static final String POSITIVE_ENTRY = \"positive\";\n+  private static final String NEGATIVE_ENTRY = \"negative\";\n+  private static final String COPYBOOK_ENTRY = \"copybooks\";\n+\n+  private final ListMultimap<String, CobolText> texts = ArrayListMultimap.create();\n+\n+  public FolderTextRegistry(String pathToTestResources) {\n+    if (StringUtils.isNotEmpty(pathToTestResources)) {\n+        try {\n+            collectFilesToTest(pathToTestResources);\n+        } catch (IOException e) {\n+            LOG.error(e.getMessage());\n+        }\n+    }\n+  }\n+\n+  @Override\n+  public List<CobolText> getPositives() {\n+    return Collections.unmodifiableList(texts.get(POSITIVE_ENTRY));\n+  }\n+\n+  @Override\n+  public List<CobolText> getNegatives() {\n+        return Collections.unmodifiableList(texts.get(NEGATIVE_ENTRY));\n+    }\n+\n+  @Override\n+  public List<CobolText> getCopybooks() {\n+    return Collections.unmodifiableList(texts.get(COPYBOOK_ENTRY));\n+  }\n+\n+  private void collectFilesToTest(String folderPath) throws IOException {\n+    Files.walk(Paths.get(folderPath))\n+      .filter(Files::isRegularFile)\n+      .forEach(this::processFile);\n+  }\n+\n+  private void processFile(Path path) {\n+    String[] parts = path.toString().split(\"/\");\n+    if (parts.length < 2) {\n+      return;\n+    }\n+\n+    String name = parts[parts.length - 1];\n+    String folder = parts[parts.length - 2];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQxMDM4Mg=="}, "originalCommit": {"oid": "1273d1a5ed14ec123faa5b0b514901d419f9e7b7"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3995, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}