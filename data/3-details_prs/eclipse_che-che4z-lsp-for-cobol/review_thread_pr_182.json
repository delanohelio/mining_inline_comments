{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwODAxNzcz", "number": 182, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo0MjozMFrODc9rTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjoxODo0NlrODgcfWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjk3MjMwOnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/tslint.json", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo0MjozMFrOFlSs9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToxNDoxNFrOFlo7xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0ODA1NQ==", "bodyText": "Why do we store tslint config on the repository?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/182#discussion_r374648055", "createdAt": "2020-02-04T12:42:30Z", "author": {"login": "temanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/tslint.json", "diffHunk": "@@ -31,7 +31,8 @@\n         \"arrow-parens\": [\n             true,\n             \"ban-single-arg-parens\"\n-        ]\n+        ],\n+        \"prettier\": true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "456d8f1a37a5d46e4adcceff3d9e31e5a4dcd962"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY1Njc2Mg==", "bodyText": "To have it nice for everyone. It's project-specific settings so I put them to project.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/182#discussion_r374656762", "createdAt": "2020-02-04T13:02:44Z", "author": {"login": "ishche"}, "path": "clients/cobol-lsp-vscode-extension/tslint.json", "diffHunk": "@@ -31,7 +31,8 @@\n         \"arrow-parens\": [\n             true,\n             \"ban-single-arg-parens\"\n-        ]\n+        ],\n+        \"prettier\": true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0ODA1NQ=="}, "originalCommit": {"oid": "456d8f1a37a5d46e4adcceff3d9e31e5a4dcd962"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcwODAwOA==", "bodyText": "Isn't tslint a dead project?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/182#discussion_r374708008", "createdAt": "2020-02-04T14:39:18Z", "author": {"login": "temanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/tslint.json", "diffHunk": "@@ -31,7 +31,8 @@\n         \"arrow-parens\": [\n             true,\n             \"ban-single-arg-parens\"\n-        ]\n+        ],\n+        \"prettier\": true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0ODA1NQ=="}, "originalCommit": {"oid": "456d8f1a37a5d46e4adcceff3d9e31e5a4dcd962"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcxOTkzMg==", "bodyText": "It is. But I believe that eslint understand tslint configuration.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/182#discussion_r374719932", "createdAt": "2020-02-04T14:57:59Z", "author": {"login": "ishche"}, "path": "clients/cobol-lsp-vscode-extension/tslint.json", "diffHunk": "@@ -31,7 +31,8 @@\n         \"arrow-parens\": [\n             true,\n             \"ban-single-arg-parens\"\n-        ]\n+        ],\n+        \"prettier\": true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0ODA1NQ=="}, "originalCommit": {"oid": "456d8f1a37a5d46e4adcceff3d9e31e5a4dcd962"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDczMzYzMA==", "bodyText": "I think that it deserves an additional user story to provide a proper eslint config for our requirements.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/182#discussion_r374733630", "createdAt": "2020-02-04T15:18:15Z", "author": {"login": "temanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/tslint.json", "diffHunk": "@@ -31,7 +31,8 @@\n         \"arrow-parens\": [\n             true,\n             \"ban-single-arg-parens\"\n-        ]\n+        ],\n+        \"prettier\": true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0ODA1NQ=="}, "originalCommit": {"oid": "456d8f1a37a5d46e4adcceff3d9e31e5a4dcd962"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxMjI5Mg==", "bodyText": "Also, the story should be about switching to eslint. I agree.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/182#discussion_r375012292", "createdAt": "2020-02-05T01:14:14Z", "author": {"login": "ishche"}, "path": "clients/cobol-lsp-vscode-extension/tslint.json", "diffHunk": "@@ -31,7 +31,8 @@\n         \"arrow-parens\": [\n             true,\n             \"ban-single-arg-parens\"\n-        ]\n+        ],\n+        \"prettier\": true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0ODA1NQ=="}, "originalCommit": {"oid": "456d8f1a37a5d46e4adcceff3d9e31e5a4dcd962"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjk5NDg2OnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/src/CopybooksDownloader.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo1MDoyNFrOFlS6WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo1MDoyNFrOFlS6WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY1MTQ4MA==", "bodyText": "\ud83d\ude20", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/182#discussion_r374651480", "createdAt": "2020-02-04T12:50:24Z", "author": {"login": "temanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/CopybooksDownloader.ts", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+import { IProfile } from \"@zowe/imperative\";\n+import * as fs from \"fs\";\n+import * as path from \"path\";\n+import * as vscode from \"vscode\";\n+import { ProfilesMap, ZoweApi } from \"./ZoweApi\";\n+\n+export const DEPENDENCIES_FOLDER: string = \".cobdeps\";\n+export const COPYBOOKS_FOLDER: string = \".copybooks\";\n+\n+const SETTINGS_ROOT = \"cobol-language-support\";\n+\n+export class CopybooksDownloader {\n+    public constructor(private zoweApi: ZoweApi) { }\n+\n+    /**\n+     * @param copybooks array of copybooks names to download\n+     */\n+    // tslint:disable-next-line: cognitive-complexity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "456d8f1a37a5d46e4adcceff3d9e31e5a4dcd962"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjQyOTA4OnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/package.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDo0NTo1N1rOFqgAIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDo0NTo1N1rOFqgAIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEwODgzMg==", "bodyText": "in order to use autocomplete in settings.json we can not combine different properties under one structure to have something like:\nbroadcom-cobol-lsp.cpy-manager: { paths: {}, profiles: {} } \nthis link is useful for future implementation", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/182#discussion_r380108832", "createdAt": "2020-02-17T10:45:57Z", "author": {"login": "sergiuilie"}, "path": "clients/cobol-lsp-vscode-extension/package.json", "diffHunk": "@@ -38,7 +50,24 @@\n                     \".cob\"\n                 ]\n             }\n-        ]\n+        ],\n+        \"configuration\": {\n+            \"title\": \"Broadcom COBOL LSP\",\n+            \"properties\": {\n+                \"broadcom-cobol-lsp.cpy-manager.profiles\": {\n+                    \"type\": \"Object\",\n+                    \"description\": \"Program name to profile map\"\n+                },\n+                \"broadcom-cobol-lsp.cpy-manager.paths\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "badec55fb86db4c26c0640aed9df01748f9f971f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzE1MDI1OnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/src/CopybooksDownloader.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDo0MzoyNVrOFqm0Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMjoyMjowNFrOFqwyFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMDQ5OQ==", "bodyText": "just a question, I do like the minimalistic style but do you think that for a newcomer it is easy to read and understand cb and ds variable names?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/182#discussion_r380220499", "createdAt": "2020-02-17T14:43:25Z", "author": {"login": "sergiuilie"}, "path": "clients/cobol-lsp-vscode-extension/src/CopybooksDownloader.ts", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+import * as fs from \"fs\";\n+import * as path from \"path\";\n+import * as vscode from \"vscode\";\n+import { SETTINGS_SECTION } from \"./extension\";\n+import { ProfileService } from \"./ProfileService\";\n+import { ZoweApi } from \"./ZoweApi\";\n+\n+export const DEPENDENCIES_FOLDER: string = \".cobdeps\";\n+export const COPYBOOKS_FOLDER: string = \".copybooks\";\n+\n+export class CopybooksDownloader {\n+    public constructor(\n+        private zoweApi: ZoweApi,\n+        private profileService: ProfileService) { }\n+\n+    public async redownloadDependencies(message: string = \"Redownload dependencies requested.\") {\n+        (await vscode.workspace.findFiles(\".cobdeps/**/*.dep\")).forEach(dep => {\n+            const errFile = dep.fsPath.substr(0, dep.fsPath.length - 4) + \".err\";\n+            if (fs.existsSync(errFile)) {\n+                try {\n+                    fs.unlinkSync(errFile);\n+                } catch (error) {\n+                    vscode.window.showErrorMessage(error.toString());\n+                }\n+            }\n+            this.downloadDependencies(dep, message);\n+        });\n+    }\n+    /**\n+     * @param copybooks array of copybooks names to download\n+     */\n+    public async downloadDependencies(uri: vscode.Uri,\n+                                      message: string = \"Program contains dependencies to missing copybooks.\",\n+                                     ): Promise<void> {\n+        // TODO Maybe introduce download queue?\n+        const missingCopybooksFilePath = uri.fsPath.substr(0, uri.fsPath.length - \".dep\".length) + \".err\";\n+        const copybooks: string[] = fs.readFileSync(uri.fsPath).toString().split(\"\\n\")\n+            .filter(e => e.trim().length > 0)\n+            .map(e => e.trim());\n+        const missingCopybooks: string[] = this.readMissingCopybooks(missingCopybooksFilePath);\n+        if (vscode.workspace.workspaceFolders.length === 0) {\n+            vscode.window.showErrorMessage(\"No workspace folder opened.\");\n+            return;\n+        }\n+\n+        const cb: Set<string> = new Set(copybooks);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d5234dd434d511ba2e74337040bb7f7f4cb307c"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM4Mzc2Nw==", "bodyText": "ds seem pretty clear for me, cb - not)\nrenamed", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/182#discussion_r380383767", "createdAt": "2020-02-17T22:22:04Z", "author": {"login": "ishche"}, "path": "clients/cobol-lsp-vscode-extension/src/CopybooksDownloader.ts", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+import * as fs from \"fs\";\n+import * as path from \"path\";\n+import * as vscode from \"vscode\";\n+import { SETTINGS_SECTION } from \"./extension\";\n+import { ProfileService } from \"./ProfileService\";\n+import { ZoweApi } from \"./ZoweApi\";\n+\n+export const DEPENDENCIES_FOLDER: string = \".cobdeps\";\n+export const COPYBOOKS_FOLDER: string = \".copybooks\";\n+\n+export class CopybooksDownloader {\n+    public constructor(\n+        private zoweApi: ZoweApi,\n+        private profileService: ProfileService) { }\n+\n+    public async redownloadDependencies(message: string = \"Redownload dependencies requested.\") {\n+        (await vscode.workspace.findFiles(\".cobdeps/**/*.dep\")).forEach(dep => {\n+            const errFile = dep.fsPath.substr(0, dep.fsPath.length - 4) + \".err\";\n+            if (fs.existsSync(errFile)) {\n+                try {\n+                    fs.unlinkSync(errFile);\n+                } catch (error) {\n+                    vscode.window.showErrorMessage(error.toString());\n+                }\n+            }\n+            this.downloadDependencies(dep, message);\n+        });\n+    }\n+    /**\n+     * @param copybooks array of copybooks names to download\n+     */\n+    public async downloadDependencies(uri: vscode.Uri,\n+                                      message: string = \"Program contains dependencies to missing copybooks.\",\n+                                     ): Promise<void> {\n+        // TODO Maybe introduce download queue?\n+        const missingCopybooksFilePath = uri.fsPath.substr(0, uri.fsPath.length - \".dep\".length) + \".err\";\n+        const copybooks: string[] = fs.readFileSync(uri.fsPath).toString().split(\"\\n\")\n+            .filter(e => e.trim().length > 0)\n+            .map(e => e.trim());\n+        const missingCopybooks: string[] = this.readMissingCopybooks(missingCopybooksFilePath);\n+        if (vscode.workspace.workspaceFolders.length === 0) {\n+            vscode.window.showErrorMessage(\"No workspace folder opened.\");\n+            return;\n+        }\n+\n+        const cb: Set<string> = new Set(copybooks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMDQ5OQ=="}, "originalCommit": {"oid": "5d5234dd434d511ba2e74337040bb7f7f4cb307c"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzI3MTU0OnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/src/ProfileService.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNToxNzozMFrOFqn-BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMjoxMzoyNFrOFqwqjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIzOTM2NQ==", "bodyText": "you don't get any error here? can you assign empty object to the settingsProfile?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/182#discussion_r380239365", "createdAt": "2020-02-17T15:17:30Z", "author": {"login": "sergiuilie"}, "path": "clients/cobol-lsp-vscode-extension/src/ProfileService.ts", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+import { IProfile } from \"@zowe/imperative\";\n+import * as path from \"path\";\n+import * as vscode from \"vscode\";\n+import { SETTINGS_SECTION } from \"./extension\";\n+import { ProfilesMap, ZoweApi } from \"./ZoweApi\";\n+\n+export class ProfileService {\n+    constructor(private zoweApi: ZoweApi) {\n+    }\n+\n+    public async getProfile(depFile: vscode.Uri): Promise<string> {\n+        const programName = this.getProgramNameFromDepFile(depFile);\n+        const detectedProfile = (await this.findProfileByDependenciesFile(depFile))\n+            || this.tryGetProfileFromSettings(programName);\n+        if (detectedProfile) {\n+            return detectedProfile;\n+        }\n+        const profiles: ProfilesMap = await this.zoweApi.listZOSMFProfiles();\n+        if (Object.keys(profiles).length === 0) {\n+            await vscode.window.showErrorMessage(\"Zowe profile is missing.\");\n+            return undefined;\n+        }\n+        if (Object.keys(profiles).length === 1) {\n+            return Object.keys(profiles)[0];\n+        }\n+        const defaultName = this.zoweApi.getDefaultProfileName();\n+        let items: vscode.QuickPickItem[] = [];\n+        Object.keys(profiles).forEach(name => {\n+            const profile: IProfile = profiles[name];\n+            const item: vscode.QuickPickItem = {\n+                description: profile.username + \"@\" + profile.host + \":\" + profile.port,\n+                label: name,\n+            };\n+            if (defaultName === name) {\n+                items = [item].concat(items);\n+            } else {\n+                items.push(item);\n+            }\n+        });\n+\n+        const selectedProfile = await vscode.window.showQuickPick(items,\n+            { placeHolder: defaultName, canPickMany: false });\n+        if (selectedProfile) {\n+            let settingsProfiles = vscode.workspace.getConfiguration().get(SETTINGS_SECTION + \".profiles\");\n+            settingsProfiles = settingsProfiles ? settingsProfiles : {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d5234dd434d511ba2e74337040bb7f7f4cb307c"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM4MTgzOA==", "bodyText": "It is an empty object according to package.json\nI use it as a map to store a profile name for program.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/182#discussion_r380381838", "createdAt": "2020-02-17T22:13:24Z", "author": {"login": "ishche"}, "path": "clients/cobol-lsp-vscode-extension/src/ProfileService.ts", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+import { IProfile } from \"@zowe/imperative\";\n+import * as path from \"path\";\n+import * as vscode from \"vscode\";\n+import { SETTINGS_SECTION } from \"./extension\";\n+import { ProfilesMap, ZoweApi } from \"./ZoweApi\";\n+\n+export class ProfileService {\n+    constructor(private zoweApi: ZoweApi) {\n+    }\n+\n+    public async getProfile(depFile: vscode.Uri): Promise<string> {\n+        const programName = this.getProgramNameFromDepFile(depFile);\n+        const detectedProfile = (await this.findProfileByDependenciesFile(depFile))\n+            || this.tryGetProfileFromSettings(programName);\n+        if (detectedProfile) {\n+            return detectedProfile;\n+        }\n+        const profiles: ProfilesMap = await this.zoweApi.listZOSMFProfiles();\n+        if (Object.keys(profiles).length === 0) {\n+            await vscode.window.showErrorMessage(\"Zowe profile is missing.\");\n+            return undefined;\n+        }\n+        if (Object.keys(profiles).length === 1) {\n+            return Object.keys(profiles)[0];\n+        }\n+        const defaultName = this.zoweApi.getDefaultProfileName();\n+        let items: vscode.QuickPickItem[] = [];\n+        Object.keys(profiles).forEach(name => {\n+            const profile: IProfile = profiles[name];\n+            const item: vscode.QuickPickItem = {\n+                description: profile.username + \"@\" + profile.host + \":\" + profile.port,\n+                label: name,\n+            };\n+            if (defaultName === name) {\n+                items = [item].concat(items);\n+            } else {\n+                items.push(item);\n+            }\n+        });\n+\n+        const selectedProfile = await vscode.window.showQuickPick(items,\n+            { placeHolder: defaultName, canPickMany: false });\n+        if (selectedProfile) {\n+            let settingsProfiles = vscode.workspace.getConfiguration().get(SETTINGS_SECTION + \".profiles\");\n+            settingsProfiles = settingsProfiles ? settingsProfiles : {};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIzOTM2NQ=="}, "originalCommit": {"oid": "5d5234dd434d511ba2e74337040bb7f7f4cb307c"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzMwNTg0OnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/src/ZoweApi.ts", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNToyNzo0MlrOFqoTQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTo0Njo0N1rOFxLVFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0NDgwMA==", "bodyText": "we are depending a lot on this hardcoded parts from Zowe", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/182#discussion_r380244800", "createdAt": "2020-02-17T15:27:42Z", "author": {"login": "sergiuilie"}, "path": "clients/cobol-lsp-vscode-extension/src/ZoweApi.ts", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+import { BasicProfileManager, IProfile, Session, RestClient, AbstractSession } from \"@zowe/imperative\";\n+import * as os from \"os\";\n+import * as path from \"path\";\n+\n+export interface ProfilesMap {\n+    [key: string]: IProfile;\n+}\n+\n+export class ZoweApi {\n+    private profileManager = new BasicProfileManager({\n+        profileRootDirectory: path.join(os.homedir(), \".zowe\", \"profiles\"),\n+        type: \"zosmf\",\n+    });\n+\n+    public async listZOSMFProfiles(): Promise<ProfilesMap> {\n+        const profiles: ProfilesMap = {};\n+        for (const loadedProfile of await this.profileManager.loadAll()) {\n+            if (loadedProfile.failNotFound) {\n+                profiles[loadedProfile.name] = loadedProfile.profile;\n+            }\n+        }\n+        return profiles;\n+    }\n+\n+    public getDefaultProfileName() {\n+        return this.profileManager.getDefaultProfileName();\n+    }\n+\n+    public async fetchMember(dataset: string, member: string, profileName: string): Promise<string> {\n+        const session: Session = await this.createSession(profileName);\n+\n+        // default should be https\n+        const rpath = `/zosmf/restfiles/ds/${dataset}(${member})`;\n+        return await RestClient.getExpectString(session, rpath, [{\n+            \"Content-Type\": \"application/json\", \"X-CSRF-ZOSMF-HEADER\": \"\" }]);\n+    }\n+\n+    public async listMembers(dataset: string, profileName: string): Promise<string[]> {\n+        // default should be https\n+        const session: Session = await this.createSession(profileName);\n+        const rpath = `/zosmf/restfiles/ds/${dataset}/member`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d5234dd434d511ba2e74337040bb7f7f4cb307c"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM4MjI1Ng==", "bodyText": "It's not Zowe, it's zOSMF. Can you describe more, what problem do you see here?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/182#discussion_r380382256", "createdAt": "2020-02-17T22:15:08Z", "author": {"login": "ishche"}, "path": "clients/cobol-lsp-vscode-extension/src/ZoweApi.ts", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+import { BasicProfileManager, IProfile, Session, RestClient, AbstractSession } from \"@zowe/imperative\";\n+import * as os from \"os\";\n+import * as path from \"path\";\n+\n+export interface ProfilesMap {\n+    [key: string]: IProfile;\n+}\n+\n+export class ZoweApi {\n+    private profileManager = new BasicProfileManager({\n+        profileRootDirectory: path.join(os.homedir(), \".zowe\", \"profiles\"),\n+        type: \"zosmf\",\n+    });\n+\n+    public async listZOSMFProfiles(): Promise<ProfilesMap> {\n+        const profiles: ProfilesMap = {};\n+        for (const loadedProfile of await this.profileManager.loadAll()) {\n+            if (loadedProfile.failNotFound) {\n+                profiles[loadedProfile.name] = loadedProfile.profile;\n+            }\n+        }\n+        return profiles;\n+    }\n+\n+    public getDefaultProfileName() {\n+        return this.profileManager.getDefaultProfileName();\n+    }\n+\n+    public async fetchMember(dataset: string, member: string, profileName: string): Promise<string> {\n+        const session: Session = await this.createSession(profileName);\n+\n+        // default should be https\n+        const rpath = `/zosmf/restfiles/ds/${dataset}(${member})`;\n+        return await RestClient.getExpectString(session, rpath, [{\n+            \"Content-Type\": \"application/json\", \"X-CSRF-ZOSMF-HEADER\": \"\" }]);\n+    }\n+\n+    public async listMembers(dataset: string, profileName: string): Promise<string[]> {\n+        // default should be https\n+        const session: Session = await this.createSession(profileName);\n+        const rpath = `/zosmf/restfiles/ds/${dataset}/member`;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0NDgwMA=="}, "originalCommit": {"oid": "5d5234dd434d511ba2e74337040bb7f7f4cb307c"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI5MDA3Mg==", "bodyText": "it is not a problem, the thing is that we hardcode the path and if they change something we are dependent on them", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/182#discussion_r381290072", "createdAt": "2020-02-19T13:31:43Z", "author": {"login": "sergiuilie"}, "path": "clients/cobol-lsp-vscode-extension/src/ZoweApi.ts", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+import { BasicProfileManager, IProfile, Session, RestClient, AbstractSession } from \"@zowe/imperative\";\n+import * as os from \"os\";\n+import * as path from \"path\";\n+\n+export interface ProfilesMap {\n+    [key: string]: IProfile;\n+}\n+\n+export class ZoweApi {\n+    private profileManager = new BasicProfileManager({\n+        profileRootDirectory: path.join(os.homedir(), \".zowe\", \"profiles\"),\n+        type: \"zosmf\",\n+    });\n+\n+    public async listZOSMFProfiles(): Promise<ProfilesMap> {\n+        const profiles: ProfilesMap = {};\n+        for (const loadedProfile of await this.profileManager.loadAll()) {\n+            if (loadedProfile.failNotFound) {\n+                profiles[loadedProfile.name] = loadedProfile.profile;\n+            }\n+        }\n+        return profiles;\n+    }\n+\n+    public getDefaultProfileName() {\n+        return this.profileManager.getDefaultProfileName();\n+    }\n+\n+    public async fetchMember(dataset: string, member: string, profileName: string): Promise<string> {\n+        const session: Session = await this.createSession(profileName);\n+\n+        // default should be https\n+        const rpath = `/zosmf/restfiles/ds/${dataset}(${member})`;\n+        return await RestClient.getExpectString(session, rpath, [{\n+            \"Content-Type\": \"application/json\", \"X-CSRF-ZOSMF-HEADER\": \"\" }]);\n+    }\n+\n+    public async listMembers(dataset: string, profileName: string): Promise<string[]> {\n+        // default should be https\n+        const session: Session = await this.createSession(profileName);\n+        const rpath = `/zosmf/restfiles/ds/${dataset}/member`;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0NDgwMA=="}, "originalCommit": {"oid": "5d5234dd434d511ba2e74337040bb7f7f4cb307c"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzExMDE2Ng==", "bodyText": "I agree I would prefer to have these values in some resource file", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/182#discussion_r387110166", "createdAt": "2020-03-03T15:46:47Z", "author": {"login": "temanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/ZoweApi.ts", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+import { BasicProfileManager, IProfile, Session, RestClient, AbstractSession } from \"@zowe/imperative\";\n+import * as os from \"os\";\n+import * as path from \"path\";\n+\n+export interface ProfilesMap {\n+    [key: string]: IProfile;\n+}\n+\n+export class ZoweApi {\n+    private profileManager = new BasicProfileManager({\n+        profileRootDirectory: path.join(os.homedir(), \".zowe\", \"profiles\"),\n+        type: \"zosmf\",\n+    });\n+\n+    public async listZOSMFProfiles(): Promise<ProfilesMap> {\n+        const profiles: ProfilesMap = {};\n+        for (const loadedProfile of await this.profileManager.loadAll()) {\n+            if (loadedProfile.failNotFound) {\n+                profiles[loadedProfile.name] = loadedProfile.profile;\n+            }\n+        }\n+        return profiles;\n+    }\n+\n+    public getDefaultProfileName() {\n+        return this.profileManager.getDefaultProfileName();\n+    }\n+\n+    public async fetchMember(dataset: string, member: string, profileName: string): Promise<string> {\n+        const session: Session = await this.createSession(profileName);\n+\n+        // default should be https\n+        const rpath = `/zosmf/restfiles/ds/${dataset}(${member})`;\n+        return await RestClient.getExpectString(session, rpath, [{\n+            \"Content-Type\": \"application/json\", \"X-CSRF-ZOSMF-HEADER\": \"\" }]);\n+    }\n+\n+    public async listMembers(dataset: string, profileName: string): Promise<string[]> {\n+        // default should be https\n+        const session: Session = await this.createSession(profileName);\n+        const rpath = `/zosmf/restfiles/ds/${dataset}/member`;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0NDgwMA=="}, "originalCommit": {"oid": "5d5234dd434d511ba2e74337040bb7f7f4cb307c"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzQwOTg3OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/TestModule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo1ODowOVrOFqpSpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo1ODowOVrOFqpSpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2MTAzMA==", "bodyText": "what does it have to do with the client?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/182#discussion_r380261030", "createdAt": "2020-02-17T15:58:09Z", "author": {"login": "sergiuilie"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/TestModule.java", "diffHunk": "@@ -16,6 +16,8 @@\n package com.ca.lsp.cobol;\n \n import com.broadcom.lsp.cdi.module.DefaultModule;\n+import com.broadcom.lsp.domain.cobol.databus.impl.AbstractDataBusBroker;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d5234dd434d511ba2e74337040bb7f7f4cb307c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzQ3ODAyOnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/package.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjoxODo0NlrOFqp7rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMjoxNjozNVrOFqwtaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3MTUzNQ==", "bodyText": "can the profile be a string?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/182#discussion_r380271535", "createdAt": "2020-02-17T16:18:46Z", "author": {"login": "sergiuilie"}, "path": "clients/cobol-lsp-vscode-extension/package.json", "diffHunk": "@@ -38,7 +50,24 @@\n                     \".cob\"\n                 ]\n             }\n-        ]\n+        ],\n+        \"configuration\": {\n+            \"title\": \"Broadcom COBOL LSP\",\n+            \"properties\": {\n+                \"broadcom-cobol-lsp.cpy-manager.profiles\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a630026de83afe95de6f65d039369621d0ee20"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM4MjU2OQ==", "bodyText": "Zowe Profile is a pretty complex structure, here I use an object to store relation with program name (string) to profile name (string)", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/182#discussion_r380382569", "createdAt": "2020-02-17T22:16:35Z", "author": {"login": "ishche"}, "path": "clients/cobol-lsp-vscode-extension/package.json", "diffHunk": "@@ -38,7 +50,24 @@\n                     \".cob\"\n                 ]\n             }\n-        ]\n+        ],\n+        \"configuration\": {\n+            \"title\": \"Broadcom COBOL LSP\",\n+            \"properties\": {\n+                \"broadcom-cobol-lsp.cpy-manager.profiles\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3MTUzNQ=="}, "originalCommit": {"oid": "01a630026de83afe95de6f65d039369621d0ee20"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4107, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}