{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NDU1MjIz", "number": 229, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODo1NjowMlrODmM7BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTozOToyNFrODmNwnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzg0MTk2OnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/src/CopybooksDownloader.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODo1NjowMlrOFze6Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTo0Nzo1NlrOFzgeGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyODEwNw==", "bodyText": "What means that? Can we remove it?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/229#discussion_r389528107", "createdAt": "2020-03-09T08:56:02Z", "author": {"login": "zacanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/CopybooksDownloader.ts", "diffHunk": "@@ -14,81 +14,64 @@\n \n import * as fs from \"fs\";\n import * as vscode from \"vscode\";\n-import { SETTINGS_SECTION } from \"./constants\";\n-import { CopybookProfile, DownloadQueue } from \"./DownloadQueue\";\n-import { checkWorkspace, createCopybookPath, createDatasetPath } from \"./PathUtils\";\n+import { DEPENDENCIES_FOLDER, SETTINGS_SECTION } from \"./constants\";\n import { ProfileService } from \"./ProfileService\";\n+import { DependenciesDesc, loadDepFile } from \"./services/DependencyService\";\n+import { CopybookProfile, DownloadQueue } from \"./services/DownloadQueue\";\n+import { checkWorkspace, createCopybookPath, createDatasetPath } from \"./services/PathUtils\";\n import { ZoweApi } from \"./ZoweApi\";\n+import { CopybookResolver } from \"./services/CopybookResolver\";\n \n export class CopybooksDownloader implements vscode.Disposable {\n     private queue: DownloadQueue = new DownloadQueue();\n \n     public constructor(\n+        private resolver: CopybookResolver,\n         private zoweApi: ZoweApi,\n         private profileService: ProfileService) { }\n \n     public async redownloadDependencies(message: string = \"Redownload dependencies requested.\") {\n-        (await vscode.workspace.findFiles(\".cobdeps/**/*.dep\")).forEach(dep => {\n-            const errFile = dep.fsPath.substr(0, dep.fsPath.length - 4) + \".err\";\n-            if (fs.existsSync(errFile)) {\n-                try {\n-                    fs.unlinkSync(errFile);\n-                } catch (error) {\n-                    vscode.window.showErrorMessage(error.toString());\n-                }\n-            }\n+        (await vscode.workspace.findFiles(DEPENDENCIES_FOLDER + \"/**/*.dep\")).forEach(dep => {\n             this.downloadDependencies(dep, message);\n         });\n     }\n     /**\n      * @param copybooks array of copybooks names to download\n      */\n-    public async downloadDependencies(uri: vscode.Uri, message: string = \"\"): Promise<void> {\n+    async downloadCopybooks(copybooks: string[], programName: string): Promise<void> {\n+        // TODO do it right", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb79a4a7334b0def7db4a804e21792e346fb12a"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0OTY4NA==", "bodyText": "Not yet. As I mentioned in the description, work is in progress, and this class will be also refactored.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/229#discussion_r389549684", "createdAt": "2020-03-09T09:40:04Z", "author": {"login": "ishche"}, "path": "clients/cobol-lsp-vscode-extension/src/CopybooksDownloader.ts", "diffHunk": "@@ -14,81 +14,64 @@\n \n import * as fs from \"fs\";\n import * as vscode from \"vscode\";\n-import { SETTINGS_SECTION } from \"./constants\";\n-import { CopybookProfile, DownloadQueue } from \"./DownloadQueue\";\n-import { checkWorkspace, createCopybookPath, createDatasetPath } from \"./PathUtils\";\n+import { DEPENDENCIES_FOLDER, SETTINGS_SECTION } from \"./constants\";\n import { ProfileService } from \"./ProfileService\";\n+import { DependenciesDesc, loadDepFile } from \"./services/DependencyService\";\n+import { CopybookProfile, DownloadQueue } from \"./services/DownloadQueue\";\n+import { checkWorkspace, createCopybookPath, createDatasetPath } from \"./services/PathUtils\";\n import { ZoweApi } from \"./ZoweApi\";\n+import { CopybookResolver } from \"./services/CopybookResolver\";\n \n export class CopybooksDownloader implements vscode.Disposable {\n     private queue: DownloadQueue = new DownloadQueue();\n \n     public constructor(\n+        private resolver: CopybookResolver,\n         private zoweApi: ZoweApi,\n         private profileService: ProfileService) { }\n \n     public async redownloadDependencies(message: string = \"Redownload dependencies requested.\") {\n-        (await vscode.workspace.findFiles(\".cobdeps/**/*.dep\")).forEach(dep => {\n-            const errFile = dep.fsPath.substr(0, dep.fsPath.length - 4) + \".err\";\n-            if (fs.existsSync(errFile)) {\n-                try {\n-                    fs.unlinkSync(errFile);\n-                } catch (error) {\n-                    vscode.window.showErrorMessage(error.toString());\n-                }\n-            }\n+        (await vscode.workspace.findFiles(DEPENDENCIES_FOLDER + \"/**/*.dep\")).forEach(dep => {\n             this.downloadDependencies(dep, message);\n         });\n     }\n     /**\n      * @param copybooks array of copybooks names to download\n      */\n-    public async downloadDependencies(uri: vscode.Uri, message: string = \"\"): Promise<void> {\n+    async downloadCopybooks(copybooks: string[], programName: string): Promise<void> {\n+        // TODO do it right", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyODEwNw=="}, "originalCommit": {"oid": "1fb79a4a7334b0def7db4a804e21792e346fb12a"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1MzY4OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/229#discussion_r389553688", "createdAt": "2020-03-09T09:47:56Z", "author": {"login": "zacanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/CopybooksDownloader.ts", "diffHunk": "@@ -14,81 +14,64 @@\n \n import * as fs from \"fs\";\n import * as vscode from \"vscode\";\n-import { SETTINGS_SECTION } from \"./constants\";\n-import { CopybookProfile, DownloadQueue } from \"./DownloadQueue\";\n-import { checkWorkspace, createCopybookPath, createDatasetPath } from \"./PathUtils\";\n+import { DEPENDENCIES_FOLDER, SETTINGS_SECTION } from \"./constants\";\n import { ProfileService } from \"./ProfileService\";\n+import { DependenciesDesc, loadDepFile } from \"./services/DependencyService\";\n+import { CopybookProfile, DownloadQueue } from \"./services/DownloadQueue\";\n+import { checkWorkspace, createCopybookPath, createDatasetPath } from \"./services/PathUtils\";\n import { ZoweApi } from \"./ZoweApi\";\n+import { CopybookResolver } from \"./services/CopybookResolver\";\n \n export class CopybooksDownloader implements vscode.Disposable {\n     private queue: DownloadQueue = new DownloadQueue();\n \n     public constructor(\n+        private resolver: CopybookResolver,\n         private zoweApi: ZoweApi,\n         private profileService: ProfileService) { }\n \n     public async redownloadDependencies(message: string = \"Redownload dependencies requested.\") {\n-        (await vscode.workspace.findFiles(\".cobdeps/**/*.dep\")).forEach(dep => {\n-            const errFile = dep.fsPath.substr(0, dep.fsPath.length - 4) + \".err\";\n-            if (fs.existsSync(errFile)) {\n-                try {\n-                    fs.unlinkSync(errFile);\n-                } catch (error) {\n-                    vscode.window.showErrorMessage(error.toString());\n-                }\n-            }\n+        (await vscode.workspace.findFiles(DEPENDENCIES_FOLDER + \"/**/*.dep\")).forEach(dep => {\n             this.downloadDependencies(dep, message);\n         });\n     }\n     /**\n      * @param copybooks array of copybooks names to download\n      */\n-    public async downloadDependencies(uri: vscode.Uri, message: string = \"\"): Promise<void> {\n+    async downloadCopybooks(copybooks: string[], programName: string): Promise<void> {\n+        // TODO do it right", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyODEwNw=="}, "originalCommit": {"oid": "1fb79a4a7334b0def7db4a804e21792e346fb12a"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzkwMTA2OnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/src/__tests__/PathUtilsTest.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOToxNTo0N1rOFzfd8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOToxNTo0N1rOFzfd8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzNzI2NA==", "bodyText": "Can we regroup those three assignment in a BeforeEach?\n    beforeEach(() => {\n        vscode.workspace.workspaceFolders = [{uri: {fsPath}} as any];\n      });", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/229#discussion_r389537264", "createdAt": "2020-03-09T09:15:47Z", "author": {"login": "zacanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/PathUtilsTest.ts", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+import * as vscode from \"vscode\";\n+import { checkWorkspace, createCopybookPath, createDatasetPath } from \"../services/PathUtils\";\n+\n+describe(\"PathUtils tests\", () => {\n+    const fsPath = \"/projects\";\n+    const profile = \"profile\";\n+    const dataset = \"dataset\";\n+\n+    it(\"creates copybook path\", () => {\n+        vscode.workspace.workspaceFolders = [{uri: {fsPath}} as any];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb79a4a7334b0def7db4a804e21792e346fb12a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzkwMjk3OnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/src/ProfileService.ts", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOToxNjoyMFrOFzffDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjoxNjoyMlrOF0WY7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzNzU1MQ==", "bodyText": "In fact, we support also .cob and .cobol case insensitively as valid file extensions for COBOL files.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/229#discussion_r389537551", "createdAt": "2020-03-09T09:16:20Z", "author": {"login": "temanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/ProfileService.ts", "diffHunk": "@@ -63,27 +66,23 @@ export class ProfileService {\n         return undefined;\n     }\n \n-    private async findProfileByDependenciesFile(depFile: vscode.Uri): Promise<string | undefined> {\n-        const depName = path.basename(depFile.fsPath, \".dep\");\n+    private async findProfileByDependenciesFile(programName: string): Promise<string | undefined> {\n         for (const doc of vscode.workspace.textDocuments) {\n             const docPath = doc.fileName;\n             if (!docPath.toLowerCase().endsWith(\".cbl\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb79a4a7334b0def7db4a804e21792e346fb12a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1ODE2Ng==", "bodyText": "Is it \".cob\" (as it now in package.json) or \".cobol\"?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/229#discussion_r389558166", "createdAt": "2020-03-09T09:56:16Z", "author": {"login": "ishche"}, "path": "clients/cobol-lsp-vscode-extension/src/ProfileService.ts", "diffHunk": "@@ -63,27 +66,23 @@ export class ProfileService {\n         return undefined;\n     }\n \n-    private async findProfileByDependenciesFile(depFile: vscode.Uri): Promise<string | undefined> {\n-        const depName = path.basename(depFile.fsPath, \".dep\");\n+    private async findProfileByDependenciesFile(programName: string): Promise<string | undefined> {\n         for (const doc of vscode.workspace.textDocuments) {\n             const docPath = doc.fileName;\n             if (!docPath.toLowerCase().endsWith(\".cbl\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzNzU1MQ=="}, "originalCommit": {"oid": "1fb79a4a7334b0def7db4a804e21792e346fb12a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU4OTY5Ng==", "bodyText": "I think both", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/229#discussion_r389589696", "createdAt": "2020-03-09T10:58:51Z", "author": {"login": "zacanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/ProfileService.ts", "diffHunk": "@@ -63,27 +66,23 @@ export class ProfileService {\n         return undefined;\n     }\n \n-    private async findProfileByDependenciesFile(depFile: vscode.Uri): Promise<string | undefined> {\n-        const depName = path.basename(depFile.fsPath, \".dep\");\n+    private async findProfileByDependenciesFile(programName: string): Promise<string | undefined> {\n         for (const doc of vscode.workspace.textDocuments) {\n             const docPath = doc.fileName;\n             if (!docPath.toLowerCase().endsWith(\".cbl\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzNzU1MQ=="}, "originalCommit": {"oid": "1fb79a4a7334b0def7db4a804e21792e346fb12a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQwMjA0Nw==", "bodyText": "Are you going to do something with it in this PR or later on?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/229#discussion_r390402047", "createdAt": "2020-03-10T15:29:22Z", "author": {"login": "temanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/ProfileService.ts", "diffHunk": "@@ -63,27 +66,23 @@ export class ProfileService {\n         return undefined;\n     }\n \n-    private async findProfileByDependenciesFile(depFile: vscode.Uri): Promise<string | undefined> {\n-        const depName = path.basename(depFile.fsPath, \".dep\");\n+    private async findProfileByDependenciesFile(programName: string): Promise<string | undefined> {\n         for (const doc of vscode.workspace.textDocuments) {\n             const docPath = doc.fileName;\n             if (!docPath.toLowerCase().endsWith(\".cbl\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzNzU1MQ=="}, "originalCommit": {"oid": "1fb79a4a7334b0def7db4a804e21792e346fb12a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzNzEwMQ==", "bodyText": "It's there already", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/229#discussion_r390437101", "createdAt": "2020-03-10T16:16:22Z", "author": {"login": "ishche"}, "path": "clients/cobol-lsp-vscode-extension/src/ProfileService.ts", "diffHunk": "@@ -63,27 +66,23 @@ export class ProfileService {\n         return undefined;\n     }\n \n-    private async findProfileByDependenciesFile(depFile: vscode.Uri): Promise<string | undefined> {\n-        const depName = path.basename(depFile.fsPath, \".dep\");\n+    private async findProfileByDependenciesFile(programName: string): Promise<string | undefined> {\n         for (const doc of vscode.workspace.textDocuments) {\n             const docPath = doc.fileName;\n             if (!docPath.toLowerCase().endsWith(\".cbl\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzNzU1MQ=="}, "originalCommit": {"oid": "1fb79a4a7334b0def7db4a804e21792e346fb12a"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzkxOTgxOnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/src/__tests__/PathUtilsTest.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOToyMTozN1rOFzfpKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTo1OToyNFrOFzg2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0MDEzNw==", "bodyText": "test failing because of the wrong path expected due to the OS", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/229#discussion_r389540137", "createdAt": "2020-03-09T09:21:37Z", "author": {"login": "sergiuilie"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/PathUtilsTest.ts", "diffHunk": "@@ -0,0 +1,37 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb79a4a7334b0def7db4a804e21792e346fb12a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1OTg2NA==", "bodyText": "updated", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/229#discussion_r389559864", "createdAt": "2020-03-09T09:59:24Z", "author": {"login": "ishche"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/PathUtilsTest.ts", "diffHunk": "@@ -0,0 +1,37 @@\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0MDEzNw=="}, "originalCommit": {"oid": "1fb79a4a7334b0def7db4a804e21792e346fb12a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzk1NjYyOnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/src/CopybooksDownloader.ts", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTozMjozNFrOFzf_sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMTowMDoxOFrOFzitXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0NTkwNg==", "bodyText": "Ideally we should take care of the cognitive complexity.\nIf there is no space at moment to fix that please file an issue on GH to tackle it later on with a specific fix.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/229#discussion_r389545906", "createdAt": "2020-03-09T09:32:34Z", "author": {"login": "zacanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/CopybooksDownloader.ts", "diffHunk": "@@ -14,81 +14,64 @@\n \n import * as fs from \"fs\";\n import * as vscode from \"vscode\";\n-import { SETTINGS_SECTION } from \"./constants\";\n-import { CopybookProfile, DownloadQueue } from \"./DownloadQueue\";\n-import { checkWorkspace, createCopybookPath, createDatasetPath } from \"./PathUtils\";\n+import { DEPENDENCIES_FOLDER, SETTINGS_SECTION } from \"./constants\";\n import { ProfileService } from \"./ProfileService\";\n+import { DependenciesDesc, loadDepFile } from \"./services/DependencyService\";\n+import { CopybookProfile, DownloadQueue } from \"./services/DownloadQueue\";\n+import { checkWorkspace, createCopybookPath, createDatasetPath } from \"./services/PathUtils\";\n import { ZoweApi } from \"./ZoweApi\";\n+import { CopybookResolver } from \"./services/CopybookResolver\";\n \n export class CopybooksDownloader implements vscode.Disposable {\n     private queue: DownloadQueue = new DownloadQueue();\n \n     public constructor(\n+        private resolver: CopybookResolver,\n         private zoweApi: ZoweApi,\n         private profileService: ProfileService) { }\n \n     public async redownloadDependencies(message: string = \"Redownload dependencies requested.\") {\n-        (await vscode.workspace.findFiles(\".cobdeps/**/*.dep\")).forEach(dep => {\n-            const errFile = dep.fsPath.substr(0, dep.fsPath.length - 4) + \".err\";\n-            if (fs.existsSync(errFile)) {\n-                try {\n-                    fs.unlinkSync(errFile);\n-                } catch (error) {\n-                    vscode.window.showErrorMessage(error.toString());\n-                }\n-            }\n+        (await vscode.workspace.findFiles(DEPENDENCIES_FOLDER + \"/**/*.dep\")).forEach(dep => {\n             this.downloadDependencies(dep, message);\n         });\n     }\n     /**\n      * @param copybooks array of copybooks names to download\n      */\n-    public async downloadDependencies(uri: vscode.Uri, message: string = \"\"): Promise<void> {\n+    async downloadCopybooks(copybooks: string[], programName: string): Promise<void> {\n+        // TODO do it right\n+        const profile: string = await this.profileService.getProfile(programName);\n+        if (!profile) {\n+            return;\n+        }\n+        copybooks.forEach(copybook => this.queue.push(copybook, profile));\n+    }\n+\n+    public async downloadDependencies(depFileUri: vscode.Uri, message: string = \"\"): Promise<void> {\n         if (!checkWorkspace()) {\n             return;\n         }\n-        const profile: string = await this.profileService.getProfile(uri);\n+        const depDesc: DependenciesDesc = loadDepFile(depFileUri);\n+        const profile: string = await this.profileService.getProfile(depDesc.programName);\n         if (!profile) {\n             return;\n         }\n \n-        const missingCopybooks: string[] = await this.listMissingCopybooks(uri, profile);\n+        const missingCopybooks: string[] = await this.listMissingCopybooks(depDesc.copybooks, profile);\n \n         if (!message.length) {\n             missingCopybooks.forEach(copybook => this.queue.push(copybook, profile));\n         } else if (missingCopybooks.length > 0) {\n-            // TODO: refactor: move to external class\n-            const downloadCopybookAction = \"Download Copybooks\";\n-            const actionDatasets = \"Edit Datasets\";\n-            const actionProfile = \"Change zowe profile\";\n-            const actions = [];\n-            if ((await this.listPathDatasets()).length > 0) {\n-                actions.push(downloadCopybookAction);\n-            }\n-            if (message !== \"Configuration was updated\") {\n-                actions.push(actionDatasets);\n-                actions.push(actionProfile);\n-            }\n-            const action: string = await vscode.window.showInformationMessage(\n-                message,\n-                ...actions);\n-            if (action === downloadCopybookAction) {\n-                missingCopybooks.forEach(copybook => this.queue.push(copybook, profile));\n-            }\n-            if (action === actionDatasets) {\n-                vscode.commands.executeCommand(\"workbench.action.openSettings\",\n-                    \"broadcom-cobol-lsp.cpy-manager.paths\");\n-            }\n-            if (action === actionProfile) {\n-                vscode.commands.executeCommand(\"workbench.action.openSettings\",\n-                    \"broadcom-cobol-lsp.cpy-manager.profiles\");\n-            }\n+            this.resolver.fixMissingDownloads(message, missingCopybooks, profile, {\n+                hasPaths: (await this.listPathDatasets()).length > 0,\n+            });\n         }\n \n     }\n \n     // tslint:disable-next-line: cognitive-complexity\n     public async start() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb79a4a7334b0def7db4a804e21792e346fb12a"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1MzUyNw==", "bodyText": "It turns out it's not so complex after all )", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/229#discussion_r389553527", "createdAt": "2020-03-09T09:47:36Z", "author": {"login": "ishche"}, "path": "clients/cobol-lsp-vscode-extension/src/CopybooksDownloader.ts", "diffHunk": "@@ -14,81 +14,64 @@\n \n import * as fs from \"fs\";\n import * as vscode from \"vscode\";\n-import { SETTINGS_SECTION } from \"./constants\";\n-import { CopybookProfile, DownloadQueue } from \"./DownloadQueue\";\n-import { checkWorkspace, createCopybookPath, createDatasetPath } from \"./PathUtils\";\n+import { DEPENDENCIES_FOLDER, SETTINGS_SECTION } from \"./constants\";\n import { ProfileService } from \"./ProfileService\";\n+import { DependenciesDesc, loadDepFile } from \"./services/DependencyService\";\n+import { CopybookProfile, DownloadQueue } from \"./services/DownloadQueue\";\n+import { checkWorkspace, createCopybookPath, createDatasetPath } from \"./services/PathUtils\";\n import { ZoweApi } from \"./ZoweApi\";\n+import { CopybookResolver } from \"./services/CopybookResolver\";\n \n export class CopybooksDownloader implements vscode.Disposable {\n     private queue: DownloadQueue = new DownloadQueue();\n \n     public constructor(\n+        private resolver: CopybookResolver,\n         private zoweApi: ZoweApi,\n         private profileService: ProfileService) { }\n \n     public async redownloadDependencies(message: string = \"Redownload dependencies requested.\") {\n-        (await vscode.workspace.findFiles(\".cobdeps/**/*.dep\")).forEach(dep => {\n-            const errFile = dep.fsPath.substr(0, dep.fsPath.length - 4) + \".err\";\n-            if (fs.existsSync(errFile)) {\n-                try {\n-                    fs.unlinkSync(errFile);\n-                } catch (error) {\n-                    vscode.window.showErrorMessage(error.toString());\n-                }\n-            }\n+        (await vscode.workspace.findFiles(DEPENDENCIES_FOLDER + \"/**/*.dep\")).forEach(dep => {\n             this.downloadDependencies(dep, message);\n         });\n     }\n     /**\n      * @param copybooks array of copybooks names to download\n      */\n-    public async downloadDependencies(uri: vscode.Uri, message: string = \"\"): Promise<void> {\n+    async downloadCopybooks(copybooks: string[], programName: string): Promise<void> {\n+        // TODO do it right\n+        const profile: string = await this.profileService.getProfile(programName);\n+        if (!profile) {\n+            return;\n+        }\n+        copybooks.forEach(copybook => this.queue.push(copybook, profile));\n+    }\n+\n+    public async downloadDependencies(depFileUri: vscode.Uri, message: string = \"\"): Promise<void> {\n         if (!checkWorkspace()) {\n             return;\n         }\n-        const profile: string = await this.profileService.getProfile(uri);\n+        const depDesc: DependenciesDesc = loadDepFile(depFileUri);\n+        const profile: string = await this.profileService.getProfile(depDesc.programName);\n         if (!profile) {\n             return;\n         }\n \n-        const missingCopybooks: string[] = await this.listMissingCopybooks(uri, profile);\n+        const missingCopybooks: string[] = await this.listMissingCopybooks(depDesc.copybooks, profile);\n \n         if (!message.length) {\n             missingCopybooks.forEach(copybook => this.queue.push(copybook, profile));\n         } else if (missingCopybooks.length > 0) {\n-            // TODO: refactor: move to external class\n-            const downloadCopybookAction = \"Download Copybooks\";\n-            const actionDatasets = \"Edit Datasets\";\n-            const actionProfile = \"Change zowe profile\";\n-            const actions = [];\n-            if ((await this.listPathDatasets()).length > 0) {\n-                actions.push(downloadCopybookAction);\n-            }\n-            if (message !== \"Configuration was updated\") {\n-                actions.push(actionDatasets);\n-                actions.push(actionProfile);\n-            }\n-            const action: string = await vscode.window.showInformationMessage(\n-                message,\n-                ...actions);\n-            if (action === downloadCopybookAction) {\n-                missingCopybooks.forEach(copybook => this.queue.push(copybook, profile));\n-            }\n-            if (action === actionDatasets) {\n-                vscode.commands.executeCommand(\"workbench.action.openSettings\",\n-                    \"broadcom-cobol-lsp.cpy-manager.paths\");\n-            }\n-            if (action === actionProfile) {\n-                vscode.commands.executeCommand(\"workbench.action.openSettings\",\n-                    \"broadcom-cobol-lsp.cpy-manager.profiles\");\n-            }\n+            this.resolver.fixMissingDownloads(message, missingCopybooks, profile, {\n+                hasPaths: (await this.listPathDatasets()).length > 0,\n+            });\n         }\n \n     }\n \n     // tslint:disable-next-line: cognitive-complexity\n     public async start() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0NTkwNg=="}, "originalCommit": {"oid": "1fb79a4a7334b0def7db4a804e21792e346fb12a"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU2OTYxMg==", "bodyText": "Well.. when I removed the tslint I got the warning about complexity 28 lines instead of 15.\nBut I'm fine with that.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/229#discussion_r389569612", "createdAt": "2020-03-09T10:18:24Z", "author": {"login": "zacanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/CopybooksDownloader.ts", "diffHunk": "@@ -14,81 +14,64 @@\n \n import * as fs from \"fs\";\n import * as vscode from \"vscode\";\n-import { SETTINGS_SECTION } from \"./constants\";\n-import { CopybookProfile, DownloadQueue } from \"./DownloadQueue\";\n-import { checkWorkspace, createCopybookPath, createDatasetPath } from \"./PathUtils\";\n+import { DEPENDENCIES_FOLDER, SETTINGS_SECTION } from \"./constants\";\n import { ProfileService } from \"./ProfileService\";\n+import { DependenciesDesc, loadDepFile } from \"./services/DependencyService\";\n+import { CopybookProfile, DownloadQueue } from \"./services/DownloadQueue\";\n+import { checkWorkspace, createCopybookPath, createDatasetPath } from \"./services/PathUtils\";\n import { ZoweApi } from \"./ZoweApi\";\n+import { CopybookResolver } from \"./services/CopybookResolver\";\n \n export class CopybooksDownloader implements vscode.Disposable {\n     private queue: DownloadQueue = new DownloadQueue();\n \n     public constructor(\n+        private resolver: CopybookResolver,\n         private zoweApi: ZoweApi,\n         private profileService: ProfileService) { }\n \n     public async redownloadDependencies(message: string = \"Redownload dependencies requested.\") {\n-        (await vscode.workspace.findFiles(\".cobdeps/**/*.dep\")).forEach(dep => {\n-            const errFile = dep.fsPath.substr(0, dep.fsPath.length - 4) + \".err\";\n-            if (fs.existsSync(errFile)) {\n-                try {\n-                    fs.unlinkSync(errFile);\n-                } catch (error) {\n-                    vscode.window.showErrorMessage(error.toString());\n-                }\n-            }\n+        (await vscode.workspace.findFiles(DEPENDENCIES_FOLDER + \"/**/*.dep\")).forEach(dep => {\n             this.downloadDependencies(dep, message);\n         });\n     }\n     /**\n      * @param copybooks array of copybooks names to download\n      */\n-    public async downloadDependencies(uri: vscode.Uri, message: string = \"\"): Promise<void> {\n+    async downloadCopybooks(copybooks: string[], programName: string): Promise<void> {\n+        // TODO do it right\n+        const profile: string = await this.profileService.getProfile(programName);\n+        if (!profile) {\n+            return;\n+        }\n+        copybooks.forEach(copybook => this.queue.push(copybook, profile));\n+    }\n+\n+    public async downloadDependencies(depFileUri: vscode.Uri, message: string = \"\"): Promise<void> {\n         if (!checkWorkspace()) {\n             return;\n         }\n-        const profile: string = await this.profileService.getProfile(uri);\n+        const depDesc: DependenciesDesc = loadDepFile(depFileUri);\n+        const profile: string = await this.profileService.getProfile(depDesc.programName);\n         if (!profile) {\n             return;\n         }\n \n-        const missingCopybooks: string[] = await this.listMissingCopybooks(uri, profile);\n+        const missingCopybooks: string[] = await this.listMissingCopybooks(depDesc.copybooks, profile);\n \n         if (!message.length) {\n             missingCopybooks.forEach(copybook => this.queue.push(copybook, profile));\n         } else if (missingCopybooks.length > 0) {\n-            // TODO: refactor: move to external class\n-            const downloadCopybookAction = \"Download Copybooks\";\n-            const actionDatasets = \"Edit Datasets\";\n-            const actionProfile = \"Change zowe profile\";\n-            const actions = [];\n-            if ((await this.listPathDatasets()).length > 0) {\n-                actions.push(downloadCopybookAction);\n-            }\n-            if (message !== \"Configuration was updated\") {\n-                actions.push(actionDatasets);\n-                actions.push(actionProfile);\n-            }\n-            const action: string = await vscode.window.showInformationMessage(\n-                message,\n-                ...actions);\n-            if (action === downloadCopybookAction) {\n-                missingCopybooks.forEach(copybook => this.queue.push(copybook, profile));\n-            }\n-            if (action === actionDatasets) {\n-                vscode.commands.executeCommand(\"workbench.action.openSettings\",\n-                    \"broadcom-cobol-lsp.cpy-manager.paths\");\n-            }\n-            if (action === actionProfile) {\n-                vscode.commands.executeCommand(\"workbench.action.openSettings\",\n-                    \"broadcom-cobol-lsp.cpy-manager.profiles\");\n-            }\n+            this.resolver.fixMissingDownloads(message, missingCopybooks, profile, {\n+                hasPaths: (await this.listPathDatasets()).length > 0,\n+            });\n         }\n \n     }\n \n     // tslint:disable-next-line: cognitive-complexity\n     public async start() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0NTkwNg=="}, "originalCommit": {"oid": "1fb79a4a7334b0def7db4a804e21792e346fb12a"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3ODA2MA==", "bodyText": "Hm.. didn't get this warning on my site. Sorry, I'll double-check.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/229#discussion_r389578060", "createdAt": "2020-03-09T10:34:52Z", "author": {"login": "ishche"}, "path": "clients/cobol-lsp-vscode-extension/src/CopybooksDownloader.ts", "diffHunk": "@@ -14,81 +14,64 @@\n \n import * as fs from \"fs\";\n import * as vscode from \"vscode\";\n-import { SETTINGS_SECTION } from \"./constants\";\n-import { CopybookProfile, DownloadQueue } from \"./DownloadQueue\";\n-import { checkWorkspace, createCopybookPath, createDatasetPath } from \"./PathUtils\";\n+import { DEPENDENCIES_FOLDER, SETTINGS_SECTION } from \"./constants\";\n import { ProfileService } from \"./ProfileService\";\n+import { DependenciesDesc, loadDepFile } from \"./services/DependencyService\";\n+import { CopybookProfile, DownloadQueue } from \"./services/DownloadQueue\";\n+import { checkWorkspace, createCopybookPath, createDatasetPath } from \"./services/PathUtils\";\n import { ZoweApi } from \"./ZoweApi\";\n+import { CopybookResolver } from \"./services/CopybookResolver\";\n \n export class CopybooksDownloader implements vscode.Disposable {\n     private queue: DownloadQueue = new DownloadQueue();\n \n     public constructor(\n+        private resolver: CopybookResolver,\n         private zoweApi: ZoweApi,\n         private profileService: ProfileService) { }\n \n     public async redownloadDependencies(message: string = \"Redownload dependencies requested.\") {\n-        (await vscode.workspace.findFiles(\".cobdeps/**/*.dep\")).forEach(dep => {\n-            const errFile = dep.fsPath.substr(0, dep.fsPath.length - 4) + \".err\";\n-            if (fs.existsSync(errFile)) {\n-                try {\n-                    fs.unlinkSync(errFile);\n-                } catch (error) {\n-                    vscode.window.showErrorMessage(error.toString());\n-                }\n-            }\n+        (await vscode.workspace.findFiles(DEPENDENCIES_FOLDER + \"/**/*.dep\")).forEach(dep => {\n             this.downloadDependencies(dep, message);\n         });\n     }\n     /**\n      * @param copybooks array of copybooks names to download\n      */\n-    public async downloadDependencies(uri: vscode.Uri, message: string = \"\"): Promise<void> {\n+    async downloadCopybooks(copybooks: string[], programName: string): Promise<void> {\n+        // TODO do it right\n+        const profile: string = await this.profileService.getProfile(programName);\n+        if (!profile) {\n+            return;\n+        }\n+        copybooks.forEach(copybook => this.queue.push(copybook, profile));\n+    }\n+\n+    public async downloadDependencies(depFileUri: vscode.Uri, message: string = \"\"): Promise<void> {\n         if (!checkWorkspace()) {\n             return;\n         }\n-        const profile: string = await this.profileService.getProfile(uri);\n+        const depDesc: DependenciesDesc = loadDepFile(depFileUri);\n+        const profile: string = await this.profileService.getProfile(depDesc.programName);\n         if (!profile) {\n             return;\n         }\n \n-        const missingCopybooks: string[] = await this.listMissingCopybooks(uri, profile);\n+        const missingCopybooks: string[] = await this.listMissingCopybooks(depDesc.copybooks, profile);\n \n         if (!message.length) {\n             missingCopybooks.forEach(copybook => this.queue.push(copybook, profile));\n         } else if (missingCopybooks.length > 0) {\n-            // TODO: refactor: move to external class\n-            const downloadCopybookAction = \"Download Copybooks\";\n-            const actionDatasets = \"Edit Datasets\";\n-            const actionProfile = \"Change zowe profile\";\n-            const actions = [];\n-            if ((await this.listPathDatasets()).length > 0) {\n-                actions.push(downloadCopybookAction);\n-            }\n-            if (message !== \"Configuration was updated\") {\n-                actions.push(actionDatasets);\n-                actions.push(actionProfile);\n-            }\n-            const action: string = await vscode.window.showInformationMessage(\n-                message,\n-                ...actions);\n-            if (action === downloadCopybookAction) {\n-                missingCopybooks.forEach(copybook => this.queue.push(copybook, profile));\n-            }\n-            if (action === actionDatasets) {\n-                vscode.commands.executeCommand(\"workbench.action.openSettings\",\n-                    \"broadcom-cobol-lsp.cpy-manager.paths\");\n-            }\n-            if (action === actionProfile) {\n-                vscode.commands.executeCommand(\"workbench.action.openSettings\",\n-                    \"broadcom-cobol-lsp.cpy-manager.profiles\");\n-            }\n+            this.resolver.fixMissingDownloads(message, missingCopybooks, profile, {\n+                hasPaths: (await this.listPathDatasets()).length > 0,\n+            });\n         }\n \n     }\n \n     // tslint:disable-next-line: cognitive-complexity\n     public async start() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0NTkwNg=="}, "originalCommit": {"oid": "1fb79a4a7334b0def7db4a804e21792e346fb12a"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU5MDE4Mg==", "bodyText": "", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/229#discussion_r389590182", "createdAt": "2020-03-09T10:59:56Z", "author": {"login": "zacanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/CopybooksDownloader.ts", "diffHunk": "@@ -14,81 +14,64 @@\n \n import * as fs from \"fs\";\n import * as vscode from \"vscode\";\n-import { SETTINGS_SECTION } from \"./constants\";\n-import { CopybookProfile, DownloadQueue } from \"./DownloadQueue\";\n-import { checkWorkspace, createCopybookPath, createDatasetPath } from \"./PathUtils\";\n+import { DEPENDENCIES_FOLDER, SETTINGS_SECTION } from \"./constants\";\n import { ProfileService } from \"./ProfileService\";\n+import { DependenciesDesc, loadDepFile } from \"./services/DependencyService\";\n+import { CopybookProfile, DownloadQueue } from \"./services/DownloadQueue\";\n+import { checkWorkspace, createCopybookPath, createDatasetPath } from \"./services/PathUtils\";\n import { ZoweApi } from \"./ZoweApi\";\n+import { CopybookResolver } from \"./services/CopybookResolver\";\n \n export class CopybooksDownloader implements vscode.Disposable {\n     private queue: DownloadQueue = new DownloadQueue();\n \n     public constructor(\n+        private resolver: CopybookResolver,\n         private zoweApi: ZoweApi,\n         private profileService: ProfileService) { }\n \n     public async redownloadDependencies(message: string = \"Redownload dependencies requested.\") {\n-        (await vscode.workspace.findFiles(\".cobdeps/**/*.dep\")).forEach(dep => {\n-            const errFile = dep.fsPath.substr(0, dep.fsPath.length - 4) + \".err\";\n-            if (fs.existsSync(errFile)) {\n-                try {\n-                    fs.unlinkSync(errFile);\n-                } catch (error) {\n-                    vscode.window.showErrorMessage(error.toString());\n-                }\n-            }\n+        (await vscode.workspace.findFiles(DEPENDENCIES_FOLDER + \"/**/*.dep\")).forEach(dep => {\n             this.downloadDependencies(dep, message);\n         });\n     }\n     /**\n      * @param copybooks array of copybooks names to download\n      */\n-    public async downloadDependencies(uri: vscode.Uri, message: string = \"\"): Promise<void> {\n+    async downloadCopybooks(copybooks: string[], programName: string): Promise<void> {\n+        // TODO do it right\n+        const profile: string = await this.profileService.getProfile(programName);\n+        if (!profile) {\n+            return;\n+        }\n+        copybooks.forEach(copybook => this.queue.push(copybook, profile));\n+    }\n+\n+    public async downloadDependencies(depFileUri: vscode.Uri, message: string = \"\"): Promise<void> {\n         if (!checkWorkspace()) {\n             return;\n         }\n-        const profile: string = await this.profileService.getProfile(uri);\n+        const depDesc: DependenciesDesc = loadDepFile(depFileUri);\n+        const profile: string = await this.profileService.getProfile(depDesc.programName);\n         if (!profile) {\n             return;\n         }\n \n-        const missingCopybooks: string[] = await this.listMissingCopybooks(uri, profile);\n+        const missingCopybooks: string[] = await this.listMissingCopybooks(depDesc.copybooks, profile);\n \n         if (!message.length) {\n             missingCopybooks.forEach(copybook => this.queue.push(copybook, profile));\n         } else if (missingCopybooks.length > 0) {\n-            // TODO: refactor: move to external class\n-            const downloadCopybookAction = \"Download Copybooks\";\n-            const actionDatasets = \"Edit Datasets\";\n-            const actionProfile = \"Change zowe profile\";\n-            const actions = [];\n-            if ((await this.listPathDatasets()).length > 0) {\n-                actions.push(downloadCopybookAction);\n-            }\n-            if (message !== \"Configuration was updated\") {\n-                actions.push(actionDatasets);\n-                actions.push(actionProfile);\n-            }\n-            const action: string = await vscode.window.showInformationMessage(\n-                message,\n-                ...actions);\n-            if (action === downloadCopybookAction) {\n-                missingCopybooks.forEach(copybook => this.queue.push(copybook, profile));\n-            }\n-            if (action === actionDatasets) {\n-                vscode.commands.executeCommand(\"workbench.action.openSettings\",\n-                    \"broadcom-cobol-lsp.cpy-manager.paths\");\n-            }\n-            if (action === actionProfile) {\n-                vscode.commands.executeCommand(\"workbench.action.openSettings\",\n-                    \"broadcom-cobol-lsp.cpy-manager.profiles\");\n-            }\n+            this.resolver.fixMissingDownloads(message, missingCopybooks, profile, {\n+                hasPaths: (await this.listPathDatasets()).length > 0,\n+            });\n         }\n \n     }\n \n     // tslint:disable-next-line: cognitive-complexity\n     public async start() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0NTkwNg=="}, "originalCommit": {"oid": "1fb79a4a7334b0def7db4a804e21792e346fb12a"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU5MDM2Ng==", "bodyText": "Btw I think we can plan a small refactor later on", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/229#discussion_r389590366", "createdAt": "2020-03-09T11:00:18Z", "author": {"login": "zacanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/CopybooksDownloader.ts", "diffHunk": "@@ -14,81 +14,64 @@\n \n import * as fs from \"fs\";\n import * as vscode from \"vscode\";\n-import { SETTINGS_SECTION } from \"./constants\";\n-import { CopybookProfile, DownloadQueue } from \"./DownloadQueue\";\n-import { checkWorkspace, createCopybookPath, createDatasetPath } from \"./PathUtils\";\n+import { DEPENDENCIES_FOLDER, SETTINGS_SECTION } from \"./constants\";\n import { ProfileService } from \"./ProfileService\";\n+import { DependenciesDesc, loadDepFile } from \"./services/DependencyService\";\n+import { CopybookProfile, DownloadQueue } from \"./services/DownloadQueue\";\n+import { checkWorkspace, createCopybookPath, createDatasetPath } from \"./services/PathUtils\";\n import { ZoweApi } from \"./ZoweApi\";\n+import { CopybookResolver } from \"./services/CopybookResolver\";\n \n export class CopybooksDownloader implements vscode.Disposable {\n     private queue: DownloadQueue = new DownloadQueue();\n \n     public constructor(\n+        private resolver: CopybookResolver,\n         private zoweApi: ZoweApi,\n         private profileService: ProfileService) { }\n \n     public async redownloadDependencies(message: string = \"Redownload dependencies requested.\") {\n-        (await vscode.workspace.findFiles(\".cobdeps/**/*.dep\")).forEach(dep => {\n-            const errFile = dep.fsPath.substr(0, dep.fsPath.length - 4) + \".err\";\n-            if (fs.existsSync(errFile)) {\n-                try {\n-                    fs.unlinkSync(errFile);\n-                } catch (error) {\n-                    vscode.window.showErrorMessage(error.toString());\n-                }\n-            }\n+        (await vscode.workspace.findFiles(DEPENDENCIES_FOLDER + \"/**/*.dep\")).forEach(dep => {\n             this.downloadDependencies(dep, message);\n         });\n     }\n     /**\n      * @param copybooks array of copybooks names to download\n      */\n-    public async downloadDependencies(uri: vscode.Uri, message: string = \"\"): Promise<void> {\n+    async downloadCopybooks(copybooks: string[], programName: string): Promise<void> {\n+        // TODO do it right\n+        const profile: string = await this.profileService.getProfile(programName);\n+        if (!profile) {\n+            return;\n+        }\n+        copybooks.forEach(copybook => this.queue.push(copybook, profile));\n+    }\n+\n+    public async downloadDependencies(depFileUri: vscode.Uri, message: string = \"\"): Promise<void> {\n         if (!checkWorkspace()) {\n             return;\n         }\n-        const profile: string = await this.profileService.getProfile(uri);\n+        const depDesc: DependenciesDesc = loadDepFile(depFileUri);\n+        const profile: string = await this.profileService.getProfile(depDesc.programName);\n         if (!profile) {\n             return;\n         }\n \n-        const missingCopybooks: string[] = await this.listMissingCopybooks(uri, profile);\n+        const missingCopybooks: string[] = await this.listMissingCopybooks(depDesc.copybooks, profile);\n \n         if (!message.length) {\n             missingCopybooks.forEach(copybook => this.queue.push(copybook, profile));\n         } else if (missingCopybooks.length > 0) {\n-            // TODO: refactor: move to external class\n-            const downloadCopybookAction = \"Download Copybooks\";\n-            const actionDatasets = \"Edit Datasets\";\n-            const actionProfile = \"Change zowe profile\";\n-            const actions = [];\n-            if ((await this.listPathDatasets()).length > 0) {\n-                actions.push(downloadCopybookAction);\n-            }\n-            if (message !== \"Configuration was updated\") {\n-                actions.push(actionDatasets);\n-                actions.push(actionProfile);\n-            }\n-            const action: string = await vscode.window.showInformationMessage(\n-                message,\n-                ...actions);\n-            if (action === downloadCopybookAction) {\n-                missingCopybooks.forEach(copybook => this.queue.push(copybook, profile));\n-            }\n-            if (action === actionDatasets) {\n-                vscode.commands.executeCommand(\"workbench.action.openSettings\",\n-                    \"broadcom-cobol-lsp.cpy-manager.paths\");\n-            }\n-            if (action === actionProfile) {\n-                vscode.commands.executeCommand(\"workbench.action.openSettings\",\n-                    \"broadcom-cobol-lsp.cpy-manager.profiles\");\n-            }\n+            this.resolver.fixMissingDownloads(message, missingCopybooks, profile, {\n+                hasPaths: (await this.listPathDatasets()).length > 0,\n+            });\n         }\n \n     }\n \n     // tslint:disable-next-line: cognitive-complexity\n     public async start() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0NTkwNg=="}, "originalCommit": {"oid": "1fb79a4a7334b0def7db4a804e21792e346fb12a"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzk2MDM1OnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/src/CopybooksDownloader.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTozMzo0MFrOFzgB0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTozMzo0MFrOFzgB0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0NjQ0OQ==", "bodyText": "pls remove this extra line :D", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/229#discussion_r389546449", "createdAt": "2020-03-09T09:33:40Z", "author": {"login": "zacanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/CopybooksDownloader.ts", "diffHunk": "@@ -135,27 +118,14 @@ export class CopybooksDownloader implements vscode.Disposable {\n     public dispose() {\n         this.queue.stop();\n     }\n-    public async processDownloadError(title: string) {\n-        const actionDatasets = \"Edit Datasets\";\n-        const actionProfile = \"Change zowe profile\";\n-        const action = await vscode.window.showErrorMessage(title,\n-            actionDatasets, actionProfile);\n-        if (action === actionDatasets) {\n-            vscode.commands.executeCommand(\"workbench.action.openSettings\",\n-                \"broadcom-cobol-lsp.cpy-manager.paths\");\n-        }\n-        if (action === actionProfile) {\n-            vscode.commands.executeCommand(\"workbench.action.openSettings\",\n-                \"broadcom-cobol-lsp.cpy-manager.profiles\");\n-        }\n-    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb79a4a7334b0def7db4a804e21792e346fb12a"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzk2NTQwOnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/src/services/DependencyService.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTozNToxNlrOFzgE4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTozNToxNlrOFzgE4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0NzIzMw==", "bodyText": "Maybe it would be better to move \".dep\" to constants?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/229#discussion_r389547233", "createdAt": "2020-03-09T09:35:16Z", "author": {"login": "temanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/services/DependencyService.ts", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+import * as fs from \"fs\";\n+import * as path from \"path\";\n+import * as vscode from \"vscode\";\n+\n+export interface DependenciesDesc {\n+    programName: string;\n+    copybooks: string[];\n+}\n+\n+export function loadDepFile(depFileUri: vscode.Uri): DependenciesDesc {\n+    const copybooks: string[] = fs.readFileSync(depFileUri.fsPath).toString().split(\"\\n\")\n+        .filter(e => e.trim().length > 0)\n+        .map(e => e.trim());\n+    const programName: string = path.basename(depFileUri.fsPath, \".dep\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb79a4a7334b0def7db4a804e21792e346fb12a"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzk3MDg3OnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/src/services/JavaCheck.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTozNjo1MVrOFzgIMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTozNjo1MVrOFzgIMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0ODA4MQ==", "bodyText": "The new Java to be released next week, we should if this regex is actual later on", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/229#discussion_r389548081", "createdAt": "2020-03-09T09:36:51Z", "author": {"login": "temanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/services/JavaCheck.ts", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+import * as cp from \"child_process\";\n+\n+export class JavaCheck {\n+    public static isJavaVersionSupported(versionString: string) {\n+        // tslint:disable-next-line: max-line-length\n+        const versionPattern = new RegExp('(java|openjdk) (version)? ?\"?((9|[0-9][0-9])|(1|9|[0-9][0-9])\\.(1|8|[0-9][0-9]).*).*');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb79a4a7334b0def7db4a804e21792e346fb12a"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzk3OTE3OnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/src/services/JavaCheck.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTozOToyNFrOFzgNPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTozOToyNFrOFzgNPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0OTM3NA==", "bodyText": "Is better extract the pattern as constant and get rid of the tslint max length", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/229#discussion_r389549374", "createdAt": "2020-03-09T09:39:24Z", "author": {"login": "zacanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/services/JavaCheck.ts", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+import * as cp from \"child_process\";\n+\n+export class JavaCheck {\n+    public static isJavaVersionSupported(versionString: string) {\n+        // tslint:disable-next-line: max-line-length", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb79a4a7334b0def7db4a804e21792e346fb12a"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4147, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}