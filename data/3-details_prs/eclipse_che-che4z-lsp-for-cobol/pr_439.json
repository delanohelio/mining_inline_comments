{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NzMwNjI5", "number": 439, "title": "feat: Outline view support", "bodyText": "Signed-off-by: Anton Grigorev anton.grigorev@broadcom.com", "createdAt": "2020-07-23T14:02:37Z", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439", "merged": true, "mergeCommit": {"oid": "828adc347815f3bd17f5b537cda761151f1a0597"}, "closed": true, "closedAt": "2020-08-26T14:53:16Z", "author": {"login": "grianbrcom"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5CQZSgBqjM1ODk5ODQ2NDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCslLfgFqTQ3NTUzOTgwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "85ae680095afbcd912177036068ee17430e09454", "author": {"user": {"login": "grianbrcom", "name": "Anton Grigorev"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/85ae680095afbcd912177036068ee17430e09454", "committedDate": "2020-07-27T12:04:03Z", "message": "Add unit tests for service.\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>"}, "afterCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863", "author": {"user": {"login": "grianbrcom", "name": "Anton Grigorev"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/bfcbc0889d7e5e7548da611d9d78118db624e863", "committedDate": "2020-07-27T13:57:18Z", "message": "feat: Outline view support\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MjM2Njcy", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-458236672", "createdAt": "2020-07-30T09:27:46Z", "commit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwOToyNzo0N1rOG5bWMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjo0Nzo0MVrOG5he1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg3MDA2Nw==", "bodyText": "no need this null init.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r462870067", "createdAt": "2020-07-30T09:27:47Z", "author": {"login": "asatklichov"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/semantics/SemanticContext.java", "diffHunk": "@@ -18,16 +18,30 @@\n \n import com.ca.lsp.core.cobol.model.CopybookUsage;\n import com.ca.lsp.core.cobol.model.CopybookSemanticContext;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlineTree;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n import lombok.Value;\n \n import java.util.List;\n \n @Value\n+@AllArgsConstructor()\n+@Builder(toBuilder = true)\n public class SemanticContext {\n-  private CobolVariableContext variables = new CobolVariableContext();\n-  private SubContext<String> paragraphs = new CobolNamedContext();\n-  private SubContext<String> copybooks = new CobolNamedContext();\n+  private CobolVariableContext variables;\n+  private SubContext<String> paragraphs;\n+  private SubContext<String> copybooks;\n   private List<CopybookUsage> copybookUsageTracker;\n+  private OutlineTree outlineTree;\n+\n+  public SemanticContext(List<CopybookUsage> copybookUsageTracker) {\n+    variables = new CobolVariableContext();\n+    paragraphs = new CobolNamedContext();\n+    copybooks = new CobolNamedContext();\n+    this.copybookUsageTracker = copybookUsageTracker;\n+    outlineTree = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1MTIzNQ==", "bodyText": "name.strip() is unicode aware on whitespaces", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r462951235", "createdAt": "2020-07-30T12:11:27Z", "author": {"login": "asatklichov"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/semantics/outline/OutlineTreeBuilder.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package com.ca.lsp.core.cobol.semantics.outline;\n+\n+import com.broadcom.lsp.domain.common.model.Position;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Multimap;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.Token;\n+\n+import java.util.*;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+@Slf4j\n+public class OutlineTreeBuilder {\n+  private List<OutlineNode> rootNodes = new ArrayList<>();\n+  private Map<ParserRuleContext, OutlineNode> nodesByContext = new HashMap<>();\n+  private Deque<Variable> variables;\n+  private OutlineNode latestVariable;\n+\n+  public void addProgram(ParserRuleContext parserRuleContext) {\n+    OutlineNode outlineNode = constructNode(null, NodeType.PROGRAM, parserRuleContext);\n+    rootNodes.add(outlineNode);\n+    nodesByContext.put(parserRuleContext, outlineNode);\n+  }\n+\n+  public void addNodeToParent(String name, NodeType nodeType, ParserRuleContext parserRuleContext) {\n+    name = name.trim();\n+    OutlineNode outlineNode = constructNode(name, nodeType, parserRuleContext);\n+    addNodeToParent(outlineNode, parserRuleContext);\n+  }\n+\n+  private void addNodeToParent(OutlineNode outlineNode, ParserRuleContext parserRuleContext) {\n+    nodesByContext.put(parserRuleContext, outlineNode);\n+    ParserRuleContext parent = parserRuleContext.getParent();\n+    while (parent != null) {\n+      OutlineNode parentNode = nodesByContext.get(parent);\n+      if (parentNode != null) {\n+        parentNode.getNestedNodes().add(outlineNode);\n+        return;\n+      }\n+      parent = parent.getParent();\n+    }\n+    rootNodes.add(outlineNode);\n+  }\n+\n+  public void renameProgram(String name, ParserRuleContext parserRuleContext) {\n+    name = name.trim();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1MjQ5OQ==", "bodyText": "name.strip()", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r462952499", "createdAt": "2020-07-30T12:13:59Z", "author": {"login": "asatklichov"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/semantics/outline/OutlineTreeBuilder.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package com.ca.lsp.core.cobol.semantics.outline;\n+\n+import com.broadcom.lsp.domain.common.model.Position;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Multimap;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.Token;\n+\n+import java.util.*;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+@Slf4j\n+public class OutlineTreeBuilder {\n+  private List<OutlineNode> rootNodes = new ArrayList<>();\n+  private Map<ParserRuleContext, OutlineNode> nodesByContext = new HashMap<>();\n+  private Deque<Variable> variables;\n+  private OutlineNode latestVariable;\n+\n+  public void addProgram(ParserRuleContext parserRuleContext) {\n+    OutlineNode outlineNode = constructNode(null, NodeType.PROGRAM, parserRuleContext);\n+    rootNodes.add(outlineNode);\n+    nodesByContext.put(parserRuleContext, outlineNode);\n+  }\n+\n+  public void addNodeToParent(String name, NodeType nodeType, ParserRuleContext parserRuleContext) {\n+    name = name.trim();\n+    OutlineNode outlineNode = constructNode(name, nodeType, parserRuleContext);\n+    addNodeToParent(outlineNode, parserRuleContext);\n+  }\n+\n+  private void addNodeToParent(OutlineNode outlineNode, ParserRuleContext parserRuleContext) {\n+    nodesByContext.put(parserRuleContext, outlineNode);\n+    ParserRuleContext parent = parserRuleContext.getParent();\n+    while (parent != null) {\n+      OutlineNode parentNode = nodesByContext.get(parent);\n+      if (parentNode != null) {\n+        parentNode.getNestedNodes().add(outlineNode);\n+        return;\n+      }\n+      parent = parent.getParent();\n+    }\n+    rootNodes.add(outlineNode);\n+  }\n+\n+  public void renameProgram(String name, ParserRuleContext parserRuleContext) {\n+    name = name.trim();\n+    ParserRuleContext parent = parserRuleContext.getParent();\n+    while (parent != null) {\n+      OutlineNode parentNode = nodesByContext.get(parent);\n+      if (parentNode != null && parentNode.getNodeType() == NodeType.PROGRAM) {\n+        parentNode.setName(name);\n+        return;\n+      }\n+      parent = parent.getParent();\n+    }\n+    LOG.warn(\"Can't rename program '{}'. Program node is not found.\", name);\n+  }\n+\n+  public void initVariables() {\n+    variables = new ArrayDeque<>();\n+    latestVariable = null;\n+  }\n+\n+  public void addVariable(int level, String name, NodeType nodeType, ParserRuleContext parserRuleContext) {\n+    name = name.trim();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1NDAxMA==", "bodyText": "List.of()", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r462954010", "createdAt": "2020-07-30T12:16:56Z", "author": {"login": "asatklichov"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/semantics/outline/OutlineTreeBuilder.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package com.ca.lsp.core.cobol.semantics.outline;\n+\n+import com.broadcom.lsp.domain.common.model.Position;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Multimap;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.Token;\n+\n+import java.util.*;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+@Slf4j\n+public class OutlineTreeBuilder {\n+  private List<OutlineNode> rootNodes = new ArrayList<>();\n+  private Map<ParserRuleContext, OutlineNode> nodesByContext = new HashMap<>();\n+  private Deque<Variable> variables;\n+  private OutlineNode latestVariable;\n+\n+  public void addProgram(ParserRuleContext parserRuleContext) {\n+    OutlineNode outlineNode = constructNode(null, NodeType.PROGRAM, parserRuleContext);\n+    rootNodes.add(outlineNode);\n+    nodesByContext.put(parserRuleContext, outlineNode);\n+  }\n+\n+  public void addNodeToParent(String name, NodeType nodeType, ParserRuleContext parserRuleContext) {\n+    name = name.trim();\n+    OutlineNode outlineNode = constructNode(name, nodeType, parserRuleContext);\n+    addNodeToParent(outlineNode, parserRuleContext);\n+  }\n+\n+  private void addNodeToParent(OutlineNode outlineNode, ParserRuleContext parserRuleContext) {\n+    nodesByContext.put(parserRuleContext, outlineNode);\n+    ParserRuleContext parent = parserRuleContext.getParent();\n+    while (parent != null) {\n+      OutlineNode parentNode = nodesByContext.get(parent);\n+      if (parentNode != null) {\n+        parentNode.getNestedNodes().add(outlineNode);\n+        return;\n+      }\n+      parent = parent.getParent();\n+    }\n+    rootNodes.add(outlineNode);\n+  }\n+\n+  public void renameProgram(String name, ParserRuleContext parserRuleContext) {\n+    name = name.trim();\n+    ParserRuleContext parent = parserRuleContext.getParent();\n+    while (parent != null) {\n+      OutlineNode parentNode = nodesByContext.get(parent);\n+      if (parentNode != null && parentNode.getNodeType() == NodeType.PROGRAM) {\n+        parentNode.setName(name);\n+        return;\n+      }\n+      parent = parent.getParent();\n+    }\n+    LOG.warn(\"Can't rename program '{}'. Program node is not found.\", name);\n+  }\n+\n+  public void initVariables() {\n+    variables = new ArrayDeque<>();\n+    latestVariable = null;\n+  }\n+\n+  public void addVariable(int level, String name, NodeType nodeType, ParserRuleContext parserRuleContext) {\n+    name = name.trim();\n+    while (!variables.isEmpty() && variables.peekLast().level >= level) {\n+      variables.removeLast();\n+    }\n+    Variable groupItem = variables.peekLast();\n+    OutlineNode outlineNode = constructNode(name, nodeType, parserRuleContext);\n+    if (level == 88) {\n+      if (latestVariable == null) {\n+        addNodeToParent(outlineNode, parserRuleContext);\n+      } else {\n+        latestVariable.getNestedNodes().add(outlineNode);\n+      }\n+      return;\n+    }\n+    latestVariable = outlineNode;\n+    if (groupItem != null) {\n+      groupItem.outlineNode.getNestedNodes().add(outlineNode);\n+    } else {\n+      addNodeToParent(outlineNode, parserRuleContext);\n+    }\n+    if (NodeType.STRUCT == nodeType ||\n+        NodeType.REDEFINES == nodeType) {\n+      variables.addLast(new Variable(level, outlineNode));\n+    }\n+  }\n+\n+  public OutlineTree build(Multimap<String, Position> copybookUsages) {\n+    rootNodes.forEach(this::recalculateStructRange);\n+    for (Map.Entry<String, Position> copybook: copybookUsages.entries()) {\n+      String name = copybook.getKey();\n+      Position position = copybook.getValue();\n+      OutlineRange outlineRange = new OutlineRange(\n+          new OutlinePosition(position.getLine(), position.getCharPositionInLine()),\n+          new OutlinePosition(position.getLine(), position.getCharPositionInLine()+name.length())\n+      );\n+      OutlineNode outlineNode = new OutlineNode(\"COPY \" + name, NodeType.COPYBOOK, outlineRange, ImmutableList.of());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1NjQ1MA==", "bodyText": "These divisions are good candidates to be reused, would be better to define them either const or enum \"PROCEDURE DIVISION\", \"ENVIRONMENT DIVISION\", \"DATA DIVISION\"", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r462956450", "createdAt": "2020-07-30T12:21:31Z", "author": {"login": "asatklichov"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java", "diffHunk": "@@ -64,35 +70,31 @@ public CobolVisitor(\n   public Class visitIdentificationDivision(IdentificationDivisionContext ctx) {\n     Token token = ctx.getStart();\n     areaAWarning(ctx.start.getCharPositionInLine(), token.getText(), token.getLine());\n-    return visitChildren(ctx);\n-  }\n-\n-  @Override\n-  public Class visitProgramIdParagraph(ProgramIdParagraphContext ctx) {\n-    if (ctx.programName() != null) {\n-      programName = ctx.programName().getText();\n-    }\n+    outlineTreeBuilder.addNodeToParent(\"IDENTIFICATION DIVISION\", NodeType.DIVISION, ctx);\n     return visitChildren(ctx);\n   }\n \n   @Override\n   public Class visitProcedureDivision(ProcedureDivisionContext ctx) {\n     Token token = ctx.getStart();\n     areaAWarning(ctx.start.getCharPositionInLine(), token.getText(), token.getLine());\n+    outlineTreeBuilder.addNodeToParent(\"PROCEDURE DIVISION\", NodeType.DIVISION, ctx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2NTUwOQ==", "bodyText": "Same, const/enum for SECTIONs (6 of them), like didvisions", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r462965509", "createdAt": "2020-07-30T12:38:41Z", "author": {"login": "asatklichov"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java", "diffHunk": "@@ -186,6 +222,64 @@ public Class visitEndProgramStatement(EndProgramStatementContext ctx) {\n     return visitChildren(ctx);\n   }\n \n+  @Override\n+  public Class visitProgramIdParagraph(ProgramIdParagraphContext ctx) {\n+    Optional<String> programName = Optional.ofNullable(ctx.programName()).map(RuleContext::getText);\n+    if (programName.isPresent()) {\n+      String name = programName.get();\n+      this.programName = name;\n+      outlineTreeBuilder.renameProgram(name, ctx);\n+      outlineTreeBuilder.addNodeToParent(\"PROGRAM-ID \" + name, NodeType.PROGRAM_ID, ctx);\n+    }\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitConfigurationSection(ConfigurationSectionContext ctx) {\n+    outlineTreeBuilder.addNodeToParent(\"CONFIGURATION SECTION\", NodeType.SECTION, ctx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2NzEyNg==", "bodyText": "List.of()", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r462967126", "createdAt": "2020-07-30T12:41:37Z", "author": {"login": "asatklichov"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/OutlineService.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.api.EventObserver;\n+import com.broadcom.lsp.domain.cobol.event.model.AnalysisFinishedEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n+import com.ca.lsp.core.cobol.semantics.outline.NodeType;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlineNode;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlinePosition;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlineRange;\n+import com.google.inject.Inject;\n+import com.google.inject.assistedinject.Assisted;\n+import com.google.inject.internal.cglib.core.$CollectionUtils;\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.*;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class OutlineService implements EventObserver<AnalysisFinishedEvent> {\n+\n+  private transient DataBusBroker databus;\n+  private transient MyTextDocumentService textDocumentService;\n+  private String documentUri;\n+  private transient CompletableFuture<MyDocumentModel> waitForDocumentModel;\n+\n+  @Inject\n+  public OutlineService(\n+      DataBusBroker databus,\n+      MyTextDocumentService textDocumentService,\n+      @Assisted(\"documentUri\") String documentUri) {\n+    this.databus = databus;\n+    this.textDocumentService = textDocumentService;\n+    this.documentUri = documentUri;\n+    this.waitForDocumentModel = new CompletableFuture<>();\n+  }\n+\n+  public List<Either<SymbolInformation, DocumentSymbol>> collectSymbols() {\n+    return collectSymbols(extractDocumentModel());\n+  }\n+\n+  static List<Either<SymbolInformation, DocumentSymbol>>collectSymbols(MyDocumentModel documentModel) {\n+    if (documentModel == null || documentModel.getAnalysisResult().getOutlineTree() == null) {\n+      return Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2NzMyNQ==", "bodyText": "is getAnalysisResult() safe for NPE ?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r462967325", "createdAt": "2020-07-30T12:41:59Z", "author": {"login": "asatklichov"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/OutlineService.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.api.EventObserver;\n+import com.broadcom.lsp.domain.cobol.event.model.AnalysisFinishedEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n+import com.ca.lsp.core.cobol.semantics.outline.NodeType;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlineNode;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlinePosition;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlineRange;\n+import com.google.inject.Inject;\n+import com.google.inject.assistedinject.Assisted;\n+import com.google.inject.internal.cglib.core.$CollectionUtils;\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.*;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class OutlineService implements EventObserver<AnalysisFinishedEvent> {\n+\n+  private transient DataBusBroker databus;\n+  private transient MyTextDocumentService textDocumentService;\n+  private String documentUri;\n+  private transient CompletableFuture<MyDocumentModel> waitForDocumentModel;\n+\n+  @Inject\n+  public OutlineService(\n+      DataBusBroker databus,\n+      MyTextDocumentService textDocumentService,\n+      @Assisted(\"documentUri\") String documentUri) {\n+    this.databus = databus;\n+    this.textDocumentService = textDocumentService;\n+    this.documentUri = documentUri;\n+    this.waitForDocumentModel = new CompletableFuture<>();\n+  }\n+\n+  public List<Either<SymbolInformation, DocumentSymbol>> collectSymbols() {\n+    return collectSymbols(extractDocumentModel());\n+  }\n+\n+  static List<Either<SymbolInformation, DocumentSymbol>>collectSymbols(MyDocumentModel documentModel) {\n+    if (documentModel == null || documentModel.getAnalysisResult().getOutlineTree() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2OTcxOA==", "bodyText": "consturctor with nulls, ... better define explicit default constructor.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r462969718", "createdAt": "2020-07-30T12:46:11Z", "author": {"login": "asatklichov"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/OutlineServiceTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package com.ca.lsp.cobol.service;\n+\n+import com.ca.lsp.cobol.service.delegates.validations.AnalysisResult;\n+import com.ca.lsp.core.cobol.semantics.outline.*;\n+import lombok.Value;\n+import org.eclipse.lsp4j.*;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class OutlineServiceTest {\n+  @Test\n+  public void collectSymbols() {\n+    MyDocumentModel documentModel = new MyDocumentModel(\"\",\n+        new AnalysisResult(null, null, null, null, null, null, null,\n+            new OutlineTree(List.of(outlineNode(\"FOO\", NodeType.FIELD, from(3, 3), to(4, 4))))));\n+    List<Either<SymbolInformation, DocumentSymbol>> expectedResult = List.of(Either.forRight(\n+        documentSymbol(\"FOO\", SymbolKind.Variable, from(2, 3), to(3, 4))\n+    ));\n+    assertEquals(expectedResult, OutlineService.collectSymbols(documentModel));\n+  }\n+\n+  @Test\n+  public void collectSymbolsForNullDocumentModel() {\n+    assertEquals(Collections.EMPTY_LIST, OutlineService.collectSymbols(null));\n+  }\n+\n+  @Test\n+  public void collectSymbolsForNullOutlineTree() {\n+    MyDocumentModel documentModel = new MyDocumentModel(\"\",\n+        new AnalysisResult(null, null, null, null, null, null, null, null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk3MDU4MQ==", "bodyText": "consturctor with nulls, ... better define explicit default constructor.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r462970581", "createdAt": "2020-07-30T12:47:41Z", "author": {"login": "asatklichov"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/MyTextDocumentServiceTest.java", "diffHunk": "@@ -175,9 +175,9 @@ public void observerCallback() {\n     // created two dummy analysis result, one with error and another without\n     // those object will be used as result of dynamic stubbing stage\n     AnalysisResult resultNoErrors =\n-        new AnalysisResult(diagnosticsNoErrors, null, null, null, null, null, null);\n+        new AnalysisResult(diagnosticsNoErrors, null, null, null, null, null, null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MzI2NzE4", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-458326718", "createdAt": "2020-07-30T11:50:46Z", "commit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMTo1MDo0NlrOG5ftuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjo1NTo1NFrOG5hxSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk0MTYyNw==", "bodyText": "I think you may remove this line, the stack will be printed on the next one", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r462941627", "createdAt": "2020-07-30T11:50:46Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/OutlineService.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.api.EventObserver;\n+import com.broadcom.lsp.domain.cobol.event.model.AnalysisFinishedEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n+import com.ca.lsp.core.cobol.semantics.outline.NodeType;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlineNode;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlinePosition;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlineRange;\n+import com.google.inject.Inject;\n+import com.google.inject.assistedinject.Assisted;\n+import com.google.inject.internal.cglib.core.$CollectionUtils;\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.*;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class OutlineService implements EventObserver<AnalysisFinishedEvent> {\n+\n+  private transient DataBusBroker databus;\n+  private transient MyTextDocumentService textDocumentService;\n+  private String documentUri;\n+  private transient CompletableFuture<MyDocumentModel> waitForDocumentModel;\n+\n+  @Inject\n+  public OutlineService(\n+      DataBusBroker databus,\n+      MyTextDocumentService textDocumentService,\n+      @Assisted(\"documentUri\") String documentUri) {\n+    this.databus = databus;\n+    this.textDocumentService = textDocumentService;\n+    this.documentUri = documentUri;\n+    this.waitForDocumentModel = new CompletableFuture<>();\n+  }\n+\n+  public List<Either<SymbolInformation, DocumentSymbol>> collectSymbols() {\n+    return collectSymbols(extractDocumentModel());\n+  }\n+\n+  static List<Either<SymbolInformation, DocumentSymbol>>collectSymbols(MyDocumentModel documentModel) {\n+    if (documentModel == null || documentModel.getAnalysisResult().getOutlineTree() == null) {\n+      return Collections.emptyList();\n+    }\n+    return documentModel.getAnalysisResult().getOutlineTree().getOutlineNodes().stream()\n+        .map(OutlineService::convert)\n+        .map(Either::<SymbolInformation, DocumentSymbol>forRight)\n+        .collect(Collectors.toList());\n+  }\n+\n+  static DocumentSymbol convert(OutlineNode outlineNode) {\n+    return new DocumentSymbol(\n+        outlineNode.getName(),\n+        convert(outlineNode.getNodeType()),\n+        convert(outlineNode.getOutlineRange()),\n+        convert(outlineNode.getOutlineRange()),\n+        \"\",\n+        outlineNode.getNestedNodes().stream()\n+            .map(OutlineService::convert)\n+            .collect(Collectors.toList())\n+    );\n+  }\n+\n+  static SymbolKind convert(NodeType nodeType) {\n+    switch (nodeType) {\n+      case PROGRAM:\n+        return SymbolKind.Class;\n+      case DIVISION:\n+      case PROCEDURE:\n+      case PROCEDURE_SECTION:\n+      case PROGRAM_ID:\n+        return SymbolKind.Method;\n+      case FIELD:\n+      case FIELD_66:\n+        return SymbolKind.Variable;\n+      case FIELD_88:\n+        return SymbolKind.EnumMember;\n+      case STRUCT:\n+        return SymbolKind.Struct;\n+      case SECTION:\n+        return SymbolKind.Object;\n+      case FILE:\n+      case COPYBOOK:\n+        return SymbolKind.File;\n+      case REDEFINES:\n+        return SymbolKind.Constant;\n+      default:\n+        return SymbolKind.Null;\n+    }\n+  }\n+\n+  static Range convert(OutlineRange outlineRange) {\n+    return new Range(convert(outlineRange.getStart()), convert(outlineRange.getEnd()));\n+  }\n+\n+  static Position convert(OutlinePosition outlinePosition) {\n+    return new Position(outlinePosition.getLine() - 1, outlinePosition.getCharacter());\n+  }\n+\n+  private MyDocumentModel extractDocumentModel() {\n+    Object subscriber = databus.subscribe(DataEventType.ANALYSIS_FINISHED_EVENT, this);\n+    try {\n+      MyDocumentModel documentModel = textDocumentService.getDocs().get(documentUri);\n+      if (documentModel.getAnalysisResult().getOutlineTree() != null) {\n+        return documentModel;\n+      }\n+      return waitForDocumentModel.get(1, TimeUnit.MINUTES);\n+    } catch (InterruptedException | ExecutionException e) {\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk0MjU0NQ==", "bodyText": "In this case, you will create a new service on each request, isn't it too expensive?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r462942545", "createdAt": "2020-07-30T11:52:42Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyTextDocumentService.java", "diffHunk": "@@ -272,6 +274,13 @@ private void notifyAnalysisFinished(String uri, Map<String, List<Location>> copy\n             .build());\n   }\n \n+  @Override\n+  public CompletableFuture<List<Either<SymbolInformation, DocumentSymbol>>> documentSymbol(DocumentSymbolParams params) {\n+    String uri = params.getTextDocument().getUri();\n+    return supplyAsync(() -> outlineServiceFactory.create(uri).collectSymbols())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk0MzI0MA==", "bodyText": "The action message here should be human-readable, something like \"symbol analysis\"", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r462943240", "createdAt": "2020-07-30T11:54:17Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyTextDocumentService.java", "diffHunk": "@@ -272,6 +274,13 @@ private void notifyAnalysisFinished(String uri, Map<String, List<Location>> copy\n             .build());\n   }\n \n+  @Override\n+  public CompletableFuture<List<Either<SymbolInformation, DocumentSymbol>>> documentSymbol(DocumentSymbolParams params) {\n+    String uri = params.getTextDocument().getUri();\n+    return supplyAsync(() -> outlineServiceFactory.create(uri).collectSymbols())\n+        .whenComplete(reportExceptionIfThrown(createDescriptiveErrorMessage(\"documentSymbol\", uri)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1MDczOA==", "bodyText": "?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r462950738", "createdAt": "2020-07-30T12:10:30Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/visitor/VisitorOutlineAnalysisTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package com.ca.lsp.core.cobol.visitor;\n+\n+import com.broadcom.lsp.cdi.EngineModule;\n+import com.broadcom.lsp.cdi.LangServerCtx;\n+import com.broadcom.lsp.cdi.module.databus.DatabusModule;\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n+import com.broadcom.lsp.domain.cobol.databus.model.CopybookStorable;\n+import com.ca.lsp.core.cobol.engine.CobolLanguageEngine;\n+import com.ca.lsp.core.cobol.model.ResultWithErrors;\n+import com.ca.lsp.core.cobol.semantics.SemanticContext;\n+import com.ca.lsp.core.cobol.semantics.outline.NodeType;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlineNode;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlineTree;\n+import com.google.common.io.Resources;\n+import edu.emory.mathcs.backport.java.util.Arrays;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2NjMzMg==", "bodyText": "Maybe, if you add a ThreadLocal with CompletableFuture that will be waiting for the analysis result, you won't need this complicated structure. You may complete this future in notifyAnalysisFinished.\nIn this case, you will send the response only when analysis finished, even if you receive the request too early", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r462966332", "createdAt": "2020-07-30T12:40:11Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyTextDocumentService.java", "diffHunk": "@@ -272,6 +274,13 @@ private void notifyAnalysisFinished(String uri, Map<String, List<Location>> copy\n             .build());\n   }\n \n+  @Override\n+  public CompletableFuture<List<Either<SymbolInformation, DocumentSymbol>>> documentSymbol(DocumentSymbolParams params) {\n+    String uri = params.getTextDocument().getUri();\n+    return supplyAsync(() -> outlineServiceFactory.create(uri).collectSymbols())\n+        .whenComplete(reportExceptionIfThrown(createDescriptiveErrorMessage(\"documentSymbol\", uri)));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2OTY1Mg==", "bodyText": "You may define it as a use-case test and simplify the preparation for it.\nAlso, using DI in tests is a bad practice, so it would be better to avoid as much as we can.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r462969652", "createdAt": "2020-07-30T12:46:04Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/visitor/VisitorOutlineAnalysisTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package com.ca.lsp.core.cobol.visitor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk3MTY0NQ==", "bodyText": "You may just put it in ifPresent()", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r462971645", "createdAt": "2020-07-30T12:49:35Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java", "diffHunk": "@@ -186,6 +222,64 @@ public Class visitEndProgramStatement(EndProgramStatementContext ctx) {\n     return visitChildren(ctx);\n   }\n \n+  @Override\n+  public Class visitProgramIdParagraph(ProgramIdParagraphContext ctx) {\n+    Optional<String> programName = Optional.ofNullable(ctx.programName()).map(RuleContext::getText);\n+    if (programName.isPresent()) {\n+      String name = programName.get();\n+      this.programName = name;\n+      outlineTreeBuilder.renameProgram(name, ctx);\n+      outlineTreeBuilder.addNodeToParent(\"PROGRAM-ID \" + name, NodeType.PROGRAM_ID, ctx);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk3NTMwNQ==", "bodyText": "I think you don't really need this assignment, you may trim the name directly on the next line, the same for some of the following cases", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r462975305", "createdAt": "2020-07-30T12:55:54Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/semantics/outline/OutlineTreeBuilder.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package com.ca.lsp.core.cobol.semantics.outline;\n+\n+import com.broadcom.lsp.domain.common.model.Position;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Multimap;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.Token;\n+\n+import java.util.*;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+@Slf4j\n+public class OutlineTreeBuilder {\n+  private List<OutlineNode> rootNodes = new ArrayList<>();\n+  private Map<ParserRuleContext, OutlineNode> nodesByContext = new HashMap<>();\n+  private Deque<Variable> variables;\n+  private OutlineNode latestVariable;\n+\n+  public void addProgram(ParserRuleContext parserRuleContext) {\n+    OutlineNode outlineNode = constructNode(null, NodeType.PROGRAM, parserRuleContext);\n+    rootNodes.add(outlineNode);\n+    nodesByContext.put(parserRuleContext, outlineNode);\n+  }\n+\n+  public void addNodeToParent(String name, NodeType nodeType, ParserRuleContext parserRuleContext) {\n+    name = name.trim();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NzkyNDM3", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-459792437", "createdAt": "2020-08-03T07:06:27Z", "commit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNzowNjoyN1rOG6uYNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNzowNjoyN1rOG6uYNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIzMDQ1NA==", "bodyText": "Missing header! (in multiple places!)", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r464230454", "createdAt": "2020-08-03T07:06:27Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/semantics/outline/NodeType.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.ca.lsp.core.cobol.semantics.outline;\n+\n+public enum NodeType {\n+  PROGRAM,\n+  PROGRAM_ID,\n+  DIVISION,\n+  SECTION,\n+  STRUCT,\n+  REDEFINES,\n+  FIELD,\n+  FIELD_66,\n+  FIELD_88,\n+  COPYBOOK,\n+  PROCEDURE,\n+  PROCEDURE_SECTION,\n+  FILE\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5ODIxNTQ3", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-459821547", "createdAt": "2020-08-03T07:58:27Z", "commit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNzo1ODoyN1rOG6vvcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNzo1ODoyN1rOG6vvcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI1Mjc4NQ==", "bodyText": "optional: we could extract the number associated with the enum field 66, ... since will never change", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r464252785", "createdAt": "2020-08-03T07:58:27Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java", "diffHunk": "@@ -117,9 +119,35 @@ public Class visitProcedureSectionHeader(ProcedureSectionHeaderContext ctx) {\n     return visitChildren(ctx);\n   }\n \n+  @Override\n+  public Class visitWorkingStorageSection(WorkingStorageSectionContext ctx) {\n+    outlineTreeBuilder.addNodeToParent(\"WORKING-STORAGE SECTION\", NodeType.SECTION, ctx);\n+    outlineTreeBuilder.initVariables();\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitDataDescriptionEntryFormat2(DataDescriptionEntryFormat2Context ctx) {\n+    outlineTreeBuilder.addVariable(66, ctx.dataName1().getText(), NodeType.FIELD_66, ctx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5ODI1MDc3", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-459825077", "createdAt": "2020-08-03T08:04:10Z", "commit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODowNDoxMFrOG6v6AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODowNDoxMFrOG6v6AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI1NTQ4OA==", "bodyText": "I would suggest a more clear name that reflect the check in a range", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r464255488", "createdAt": "2020-08-03T08:04:10Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/semantics/outline/OutlineNode.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.ca.lsp.core.cobol.semantics.outline;\n+\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.Setter;\n+\n+import java.util.List;\n+\n+@AllArgsConstructor\n+@Data\n+@Setter(AccessLevel.PACKAGE)\n+public class OutlineNode {\n+  String name;\n+  NodeType nodeType;\n+  OutlineRange outlineRange;\n+  List<OutlineNode> nestedNodes;\n+\n+  public boolean isInside(OutlineNode outlineNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5ODY0OTM3", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-459864937", "createdAt": "2020-08-03T09:03:34Z", "commit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOTowMzozNFrOG6xw0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOTowMzozNFrOG6xw0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI4NTkwNQ==", "bodyText": "Would be better to rename this method since what is doing at this level is to add a new node. the inner private method will be responsible to put that node at the right level", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r464285905", "createdAt": "2020-08-03T09:03:34Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java", "diffHunk": "@@ -186,6 +222,64 @@ public Class visitEndProgramStatement(EndProgramStatementContext ctx) {\n     return visitChildren(ctx);\n   }\n \n+  @Override\n+  public Class visitProgramIdParagraph(ProgramIdParagraphContext ctx) {\n+    Optional<String> programName = Optional.ofNullable(ctx.programName()).map(RuleContext::getText);\n+    if (programName.isPresent()) {\n+      String name = programName.get();\n+      this.programName = name;\n+      outlineTreeBuilder.renameProgram(name, ctx);\n+      outlineTreeBuilder.addNodeToParent(\"PROGRAM-ID \" + name, NodeType.PROGRAM_ID, ctx);\n+    }\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitConfigurationSection(ConfigurationSectionContext ctx) {\n+    outlineTreeBuilder.addNodeToParent(\"CONFIGURATION SECTION\", NodeType.SECTION, ctx);\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitInputOutputSection(InputOutputSectionContext ctx) {\n+    outlineTreeBuilder.addNodeToParent(\"INPUT-OUTPUT SECTION\", NodeType.SECTION, ctx);\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitSelectClause(SelectClauseContext ctx) {\n+    outlineTreeBuilder.addNodeToParent(ctx.fileName().getText(), NodeType.FILE, ctx);\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitFileSection(FileSectionContext ctx) {\n+    outlineTreeBuilder.addNodeToParent(\"FILE SECTION\", NodeType.SECTION, ctx);\n+    outlineTreeBuilder.initVariables();\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitLinkageSection(LinkageSectionContext ctx) {\n+    outlineTreeBuilder.addNodeToParent(\"LINKAGE SECTION\", NodeType.SECTION, ctx);\n+    outlineTreeBuilder.initVariables();\n+    return visitChildren(ctx);\n+  }\n+\n+  @Override\n+  public Class visitLocalStorageSection(LocalStorageSectionContext ctx) {\n+    outlineTreeBuilder.addNodeToParent(\"LOCAL STORAGE SECTION\", NodeType.SECTION, ctx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 182}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5ODcwMDgz", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-459870083", "createdAt": "2020-08-03T09:11:23Z", "commit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOToxMToyM1rOG6yAvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOToxMToyM1rOG6yAvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI4OTk4Mg==", "bodyText": "optional: it's super cool but I am afraid that will be a bit complicated for the developer understand what is going on here,\nmaybe extract the last  part ( hasRedefines ? NodeType.REDEFINES : NodeType.STRUCT) may help", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r464289982", "createdAt": "2020-08-03T09:11:23Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java", "diffHunk": "@@ -138,13 +167,20 @@ public Class visitDataDescriptionEntryFormat1(DataDescriptionEntryFormat1Context\n     if (tokenText.equals(\"01\") || tokenText.equals(\"1\") || tokenText.equals(\"77\")) {\n       areaAWarning(ctx.start.getCharPositionInLine(), tokenText, token.getLine());\n     }\n+    String name = Optional.ofNullable(ctx.dataName1()).map(RuleContext::getText).orElse(\"FILLER\");\n+    int level = Integer.parseInt(ctx.otherLevel().getText());\n+    boolean hasPic = !ctx.dataPictureClause().isEmpty();\n+    boolean hasRedefines = !ctx.dataRedefinesClause().isEmpty();\n+    NodeType nodeType = hasPic ? NodeType.FIELD : hasRedefines ? NodeType.REDEFINES : NodeType.STRUCT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5ODc1ODI5", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-459875829", "createdAt": "2020-08-03T09:20:11Z", "commit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOToyMDoxMVrOG6ySyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOToyMDoxMVrOG6ySyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI5NDYwMA==", "bodyText": "Any plan to test also some negative scenarios?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r464294600", "createdAt": "2020-08-03T09:20:11Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/semantics/outline/OutlineNodeTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.ca.lsp.core.cobol.semantics.outline;\n+\n+import edu.emory.mathcs.backport.java.util.Arrays;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static org.junit.Assert.*;\n+\n+@RunWith(Parameterized.class)\n+public class OutlineNodeTest {\n+\n+  private static OutlineNode constructNode(int startLine, int startSymbol, int stopLine, int stopSymbol) {\n+    return new OutlineNode(\"\", NodeType.FIELD,\n+        new OutlineRange(new OutlinePosition(startLine, startSymbol), new OutlinePosition(stopLine, stopSymbol)),\n+        Collections.emptyList());\n+  }\n+\n+  @Parameterized.Parameters\n+  public static Collection<Object[]> data() {\n+    return Arrays.asList(new Object[][] {\n+        {constructNode(1, 1, 10, 1), constructNode(3, 40, 5, 10), true},\n+        {constructNode(5, 1, 5, 20), constructNode(5, 3, 5, 10), true},\n+        {constructNode(4, 1, 6, 7), constructNode(3, 40, 6, 3), false},\n+        {constructNode(4, 1, 6, 8), constructNode(4, 5, 7, 5), false},\n+        {constructNode(2, 1, 2, 9), constructNode(3, 1, 3, 8), false},\n+        {constructNode(5, 1, 5, 20), constructNode(5, 3, 5, 30), false},\n+    });\n+  }\n+\n+  private final OutlineNode first, second;\n+  private final boolean result;\n+\n+  public OutlineNodeTest(OutlineNode first, OutlineNode second, boolean result) {\n+    this.first = first;\n+    this.second = second;\n+    this.result = result;\n+  }\n+\n+  @Test\n+  public void isInside() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5ODc2OTMy", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-459876932", "createdAt": "2020-08-03T09:21:48Z", "commit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOToyMTo0OFrOG6yWWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOToyMTo0OFrOG6yWWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI5NTUxMw==", "bodyText": "You can think a better name for that test! ;)", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r464295513", "createdAt": "2020-08-03T09:21:48Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/visitor/VisitorOutlineAnalysisTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package com.ca.lsp.core.cobol.visitor;\n+\n+import com.broadcom.lsp.cdi.EngineModule;\n+import com.broadcom.lsp.cdi.LangServerCtx;\n+import com.broadcom.lsp.cdi.module.databus.DatabusModule;\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n+import com.broadcom.lsp.domain.cobol.databus.model.CopybookStorable;\n+import com.ca.lsp.core.cobol.engine.CobolLanguageEngine;\n+import com.ca.lsp.core.cobol.model.ResultWithErrors;\n+import com.ca.lsp.core.cobol.semantics.SemanticContext;\n+import com.ca.lsp.core.cobol.semantics.outline.NodeType;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlineNode;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlineTree;\n+import com.google.common.io.Resources;\n+import edu.emory.mathcs.backport.java.util.Arrays;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.ca.lsp.core.cobol.semantics.outline.NodeType.*;\n+import static org.junit.Assert.assertEquals;\n+\n+public class VisitorOutlineAnalysisTest {\n+\n+  @BeforeClass\n+  public static void setUp() {\n+    LangServerCtx.getGuiceCtx(new EngineModule(), new DatabusModule());\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    LangServerCtx.shutdown();\n+  }\n+\n+  private OutlineTree extractOutlineTree(String srcName) throws IOException {\n+    DataBusBroker dataBus = LangServerCtx.getInjector().getInstance(DataBusBroker.class);\n+    for (String name: List.of(\"FOO\", \"BAR\", \"BAZ\")) {\n+      dataBus.storeData(CopybookStorable.builder()\n+          .name(name)\n+          .content(\"\")\n+          .uri(name)\n+          .build());\n+    }\n+    CobolLanguageEngine engine = LangServerCtx.getInjector().getInstance(CobolLanguageEngine.class);\n+    String program = Resources.toString(Resources.getResource(srcName), Charset.defaultCharset());\n+    ResultWithErrors<SemanticContext> result = engine.run(\"\", program, \"\");\n+    return result.getResult().getOutlineTree();\n+  }\n+\n+  @Test\n+  public void testIt() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5ODc3NzY2", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-459877766", "createdAt": "2020-08-03T09:23:02Z", "commit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOToyMzowMlrOG6yY8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOToyMzowMlrOG6yY8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI5NjE3Nw==", "bodyText": "extract this in a separate method will made your test much easier to read..", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r464296177", "createdAt": "2020-08-03T09:23:02Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/visitor/VisitorOutlineAnalysisTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package com.ca.lsp.core.cobol.visitor;\n+\n+import com.broadcom.lsp.cdi.EngineModule;\n+import com.broadcom.lsp.cdi.LangServerCtx;\n+import com.broadcom.lsp.cdi.module.databus.DatabusModule;\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n+import com.broadcom.lsp.domain.cobol.databus.model.CopybookStorable;\n+import com.ca.lsp.core.cobol.engine.CobolLanguageEngine;\n+import com.ca.lsp.core.cobol.model.ResultWithErrors;\n+import com.ca.lsp.core.cobol.semantics.SemanticContext;\n+import com.ca.lsp.core.cobol.semantics.outline.NodeType;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlineNode;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlineTree;\n+import com.google.common.io.Resources;\n+import edu.emory.mathcs.backport.java.util.Arrays;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.ca.lsp.core.cobol.semantics.outline.NodeType.*;\n+import static org.junit.Assert.assertEquals;\n+\n+public class VisitorOutlineAnalysisTest {\n+\n+  @BeforeClass\n+  public static void setUp() {\n+    LangServerCtx.getGuiceCtx(new EngineModule(), new DatabusModule());\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    LangServerCtx.shutdown();\n+  }\n+\n+  private OutlineTree extractOutlineTree(String srcName) throws IOException {\n+    DataBusBroker dataBus = LangServerCtx.getInjector().getInstance(DataBusBroker.class);\n+    for (String name: List.of(\"FOO\", \"BAR\", \"BAZ\")) {\n+      dataBus.storeData(CopybookStorable.builder()\n+          .name(name)\n+          .content(\"\")\n+          .uri(name)\n+          .build());\n+    }\n+    CobolLanguageEngine engine = LangServerCtx.getInjector().getInstance(CobolLanguageEngine.class);\n+    String program = Resources.toString(Resources.getResource(srcName), Charset.defaultCharset());\n+    ResultWithErrors<SemanticContext> result = engine.run(\"\", program, \"\");\n+    return result.getResult().getOutlineTree();\n+  }\n+\n+  @Test\n+  public void testIt() throws IOException {\n+    OutlineTree tree = extractOutlineTree(\"outline/TwoPrograms.cbl\");\n+    List<OutlineNode> expectedNodes = nested(\n+        node(\"COPY FOO\", COPYBOOK),\n+        node(\"HELLO-WORLD\", PROGRAM, nested(\n+            node(\"IDENTIFICATION DIVISION\", DIVISION, nested(\n+                node(\"PROGRAM-ID HELLO-WORLD\", PROGRAM_ID)\n+            )),\n+            node(\"DATA DIVISION\", DIVISION, nested(\n+                node(\"WORKING-STORAGE SECTION\", SECTION, nested(\n+                    node(\"COPY BAR\", COPYBOOK),\n+                    node(\"User-Num1\", FIELD),\n+                    node(\"User-Num2\", FIELD),\n+                    node(\"User-Address\", STRUCT, nested(\n+                        node(\"COPY BAZ\", COPYBOOK),\n+                        node(\"User-City\", FIELD),\n+                        node(\"User-Country\", FIELD),\n+                        node(\"User-Index\", FIELD),\n+                        node(\"User-Phone\", FIELD)\n+                    )),\n+                    node(\"FILLER\", STRUCT, nested(\n+                        node(\"FOO\", FIELD)\n+                    ))\n+                ))\n+            )),\n+            node(\"PROCEDURE DIVISION\", DIVISION, nested(\n+                node(\"000-Main-Logic\", PROCEDURE),\n+                node(\"100-Print-User\", PROCEDURE)\n+            ))\n+        )),\n+        node(\"OUTLINE\", PROGRAM, nested(\n+            node(\"IDENTIFICATION DIVISION\", DIVISION, nested(\n+                node(\"PROGRAM-ID OUTLINE\", PROGRAM_ID)\n+            )),\n+            node(\"ENVIRONMENT DIVISION\", DIVISION, nested(\n+                node(\"CONFIGURATION SECTION\", SECTION),\n+                node(\"INPUT-OUTPUT SECTION\", SECTION, nested(\n+                    node(\"TRANS-FILE-IN\", FILE)\n+                ))\n+            )),\n+            node(\"DATA DIVISION\", DIVISION, nested(\n+                node(\"FILE SECTION\", SECTION, nested(\n+                    node(\"TRANS-FILE-IN\", FILE, nested(\n+                        node(\"FILE-RECORD\", FIELD)\n+                    )),\n+                    node(\"TERMS-FILE\", FILE, nested(\n+                        node(\"TERMS-RECORD\", STRUCT, nested(\n+                            node(\"TERMS-KEY\", FIELD),\n+                            node(\"FILLER\", FIELD)\n+                        ))\n+                    ))\n+                )),\n+                node(\"WORKING-STORAGE SECTION\", SECTION, nested(\n+                    node(\"COLR-DISPLAY\", FIELD),\n+                    node(\"CTLFILE-REC\", STRUCT, nested(\n+                        node(\"CTLFILE-PRIME\", FIELD),\n+                        node(\"CTLFILE-PAST-DUE-DIFF\", FIELD)\n+                    )),\n+                    node(\"CTLFILE-REC-12\", REDEFINES, nested(\n+                        node(\"CTLFILE-DB-DATE\", FIELD),\n+                        node(\"CTLFILE-ATB-DATE\", FIELD),\n+                        node(\"COST-RECORD-CODE\", FIELD, nested(\n+                            node(\"HEADER\", FIELD_88),\n+                            node(\"SUPPLR\", FIELD_88),\n+                            node(\"WREHOUSE\", FIELD_88)\n+                        ))\n+                    ))\n+                )),\n+                node(\"LINKAGE SECTION\", SECTION, nested(\n+                    node(\"LINK-PRM0\", STRUCT, nested(\n+                        node(\"PARM-LENGTH\", FIELD),\n+                        node(\"PARM\", FIELD)\n+                    ))\n+                ))\n+            )),\n+            node(\"PROCEDURE DIVISION\", DIVISION, nested(\n+                node(\"000-PROGRAM-DRIVER\", PROCEDURE_SECTION),\n+                node(\"100-HOUSEKEEPING\", PROCEDURE_SECTION, nested(\n+                    node(\"110-OPEN-FILES\", PROCEDURE),\n+                    node(\"112-READ-WAREHOUS-FILE\", PROCEDURE),\n+                    node(\"199-EXIT\", PROCEDURE)\n+                ))\n+            ))\n+        ))\n+    );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 143}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5ODgwNTQy", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-459880542", "createdAt": "2020-08-03T09:27:06Z", "commit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOToyNzowNlrOG6yhqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOToyNzowNlrOG6yhqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI5ODQxMA==", "bodyText": "which is the benefit to use the google.io library instead of use the built-in NIO?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r464298410", "createdAt": "2020-08-03T09:27:06Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/visitor/VisitorOutlineAnalysisTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package com.ca.lsp.core.cobol.visitor;\n+\n+import com.broadcom.lsp.cdi.EngineModule;\n+import com.broadcom.lsp.cdi.LangServerCtx;\n+import com.broadcom.lsp.cdi.module.databus.DatabusModule;\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n+import com.broadcom.lsp.domain.cobol.databus.model.CopybookStorable;\n+import com.ca.lsp.core.cobol.engine.CobolLanguageEngine;\n+import com.ca.lsp.core.cobol.model.ResultWithErrors;\n+import com.ca.lsp.core.cobol.semantics.SemanticContext;\n+import com.ca.lsp.core.cobol.semantics.outline.NodeType;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlineNode;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlineTree;\n+import com.google.common.io.Resources;\n+import edu.emory.mathcs.backport.java.util.Arrays;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.ca.lsp.core.cobol.semantics.outline.NodeType.*;\n+import static org.junit.Assert.assertEquals;\n+\n+public class VisitorOutlineAnalysisTest {\n+\n+  @BeforeClass\n+  public static void setUp() {\n+    LangServerCtx.getGuiceCtx(new EngineModule(), new DatabusModule());\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    LangServerCtx.shutdown();\n+  }\n+\n+  private OutlineTree extractOutlineTree(String srcName) throws IOException {\n+    DataBusBroker dataBus = LangServerCtx.getInjector().getInstance(DataBusBroker.class);\n+    for (String name: List.of(\"FOO\", \"BAR\", \"BAZ\")) {\n+      dataBus.storeData(CopybookStorable.builder()\n+          .name(name)\n+          .content(\"\")\n+          .uri(name)\n+          .build());\n+    }\n+    CobolLanguageEngine engine = LangServerCtx.getInjector().getInstance(CobolLanguageEngine.class);\n+    String program = Resources.toString(Resources.getResource(srcName), Charset.defaultCharset());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5ODk2NDc4", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-459896478", "createdAt": "2020-08-03T09:51:09Z", "commit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOTo1MToxMFrOG6zT3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOTo1MToxMFrOG6zT3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMxMTI2MQ==", "bodyText": "If I understood correctly looks like you used iteration and recursion in the same method.\nI would prefer to separate the complexity for create the structure from the visiting and assert", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r464311261", "createdAt": "2020-08-03T09:51:10Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/visitor/VisitorOutlineAnalysisTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package com.ca.lsp.core.cobol.visitor;\n+\n+import com.broadcom.lsp.cdi.EngineModule;\n+import com.broadcom.lsp.cdi.LangServerCtx;\n+import com.broadcom.lsp.cdi.module.databus.DatabusModule;\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n+import com.broadcom.lsp.domain.cobol.databus.model.CopybookStorable;\n+import com.ca.lsp.core.cobol.engine.CobolLanguageEngine;\n+import com.ca.lsp.core.cobol.model.ResultWithErrors;\n+import com.ca.lsp.core.cobol.semantics.SemanticContext;\n+import com.ca.lsp.core.cobol.semantics.outline.NodeType;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlineNode;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlineTree;\n+import com.google.common.io.Resources;\n+import edu.emory.mathcs.backport.java.util.Arrays;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.ca.lsp.core.cobol.semantics.outline.NodeType.*;\n+import static org.junit.Assert.assertEquals;\n+\n+public class VisitorOutlineAnalysisTest {\n+\n+  @BeforeClass\n+  public static void setUp() {\n+    LangServerCtx.getGuiceCtx(new EngineModule(), new DatabusModule());\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    LangServerCtx.shutdown();\n+  }\n+\n+  private OutlineTree extractOutlineTree(String srcName) throws IOException {\n+    DataBusBroker dataBus = LangServerCtx.getInjector().getInstance(DataBusBroker.class);\n+    for (String name: List.of(\"FOO\", \"BAR\", \"BAZ\")) {\n+      dataBus.storeData(CopybookStorable.builder()\n+          .name(name)\n+          .content(\"\")\n+          .uri(name)\n+          .build());\n+    }\n+    CobolLanguageEngine engine = LangServerCtx.getInjector().getInstance(CobolLanguageEngine.class);\n+    String program = Resources.toString(Resources.getResource(srcName), Charset.defaultCharset());\n+    ResultWithErrors<SemanticContext> result = engine.run(\"\", program, \"\");\n+    return result.getResult().getOutlineTree();\n+  }\n+\n+  @Test\n+  public void testIt() throws IOException {\n+    OutlineTree tree = extractOutlineTree(\"outline/TwoPrograms.cbl\");\n+    List<OutlineNode> expectedNodes = nested(\n+        node(\"COPY FOO\", COPYBOOK),\n+        node(\"HELLO-WORLD\", PROGRAM, nested(\n+            node(\"IDENTIFICATION DIVISION\", DIVISION, nested(\n+                node(\"PROGRAM-ID HELLO-WORLD\", PROGRAM_ID)\n+            )),\n+            node(\"DATA DIVISION\", DIVISION, nested(\n+                node(\"WORKING-STORAGE SECTION\", SECTION, nested(\n+                    node(\"COPY BAR\", COPYBOOK),\n+                    node(\"User-Num1\", FIELD),\n+                    node(\"User-Num2\", FIELD),\n+                    node(\"User-Address\", STRUCT, nested(\n+                        node(\"COPY BAZ\", COPYBOOK),\n+                        node(\"User-City\", FIELD),\n+                        node(\"User-Country\", FIELD),\n+                        node(\"User-Index\", FIELD),\n+                        node(\"User-Phone\", FIELD)\n+                    )),\n+                    node(\"FILLER\", STRUCT, nested(\n+                        node(\"FOO\", FIELD)\n+                    ))\n+                ))\n+            )),\n+            node(\"PROCEDURE DIVISION\", DIVISION, nested(\n+                node(\"000-Main-Logic\", PROCEDURE),\n+                node(\"100-Print-User\", PROCEDURE)\n+            ))\n+        )),\n+        node(\"OUTLINE\", PROGRAM, nested(\n+            node(\"IDENTIFICATION DIVISION\", DIVISION, nested(\n+                node(\"PROGRAM-ID OUTLINE\", PROGRAM_ID)\n+            )),\n+            node(\"ENVIRONMENT DIVISION\", DIVISION, nested(\n+                node(\"CONFIGURATION SECTION\", SECTION),\n+                node(\"INPUT-OUTPUT SECTION\", SECTION, nested(\n+                    node(\"TRANS-FILE-IN\", FILE)\n+                ))\n+            )),\n+            node(\"DATA DIVISION\", DIVISION, nested(\n+                node(\"FILE SECTION\", SECTION, nested(\n+                    node(\"TRANS-FILE-IN\", FILE, nested(\n+                        node(\"FILE-RECORD\", FIELD)\n+                    )),\n+                    node(\"TERMS-FILE\", FILE, nested(\n+                        node(\"TERMS-RECORD\", STRUCT, nested(\n+                            node(\"TERMS-KEY\", FIELD),\n+                            node(\"FILLER\", FIELD)\n+                        ))\n+                    ))\n+                )),\n+                node(\"WORKING-STORAGE SECTION\", SECTION, nested(\n+                    node(\"COLR-DISPLAY\", FIELD),\n+                    node(\"CTLFILE-REC\", STRUCT, nested(\n+                        node(\"CTLFILE-PRIME\", FIELD),\n+                        node(\"CTLFILE-PAST-DUE-DIFF\", FIELD)\n+                    )),\n+                    node(\"CTLFILE-REC-12\", REDEFINES, nested(\n+                        node(\"CTLFILE-DB-DATE\", FIELD),\n+                        node(\"CTLFILE-ATB-DATE\", FIELD),\n+                        node(\"COST-RECORD-CODE\", FIELD, nested(\n+                            node(\"HEADER\", FIELD_88),\n+                            node(\"SUPPLR\", FIELD_88),\n+                            node(\"WREHOUSE\", FIELD_88)\n+                        ))\n+                    ))\n+                )),\n+                node(\"LINKAGE SECTION\", SECTION, nested(\n+                    node(\"LINK-PRM0\", STRUCT, nested(\n+                        node(\"PARM-LENGTH\", FIELD),\n+                        node(\"PARM\", FIELD)\n+                    ))\n+                ))\n+            )),\n+            node(\"PROCEDURE DIVISION\", DIVISION, nested(\n+                node(\"000-PROGRAM-DRIVER\", PROCEDURE_SECTION),\n+                node(\"100-HOUSEKEEPING\", PROCEDURE_SECTION, nested(\n+                    node(\"110-OPEN-FILES\", PROCEDURE),\n+                    node(\"112-READ-WAREHOUS-FILE\", PROCEDURE),\n+                    node(\"199-EXIT\", PROCEDURE)\n+                ))\n+            ))\n+        ))\n+    );\n+    check(expectedNodes, tree.getOutlineNodes(), \"\");\n+  }\n+\n+  private void check(List<OutlineNode> expected, List<OutlineNode> actual, String level) {\n+    Map<String, OutlineNode> expectedMap = toMap(expected);\n+    Map<String, OutlineNode> actualMap = toMap(actual);\n+    assertEquals(\"Elements on level \" + level, expectedMap.keySet(), actualMap.keySet());\n+    for (String nodeName: expectedMap.keySet()) {\n+      OutlineNode expectedNode = expectedMap.get(nodeName);\n+      OutlineNode actualNode = actualMap.get(nodeName);\n+      String newLevel = level + '/' + nodeName;\n+      assertEquals(\"Node types for \" + newLevel, expectedNode.getNodeType(), actualNode.getNodeType());\n+      check(expectedNode.getNestedNodes(), actualNode.getNestedNodes(), newLevel);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 158}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5OTAyNzMx", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-459902731", "createdAt": "2020-08-03T10:00:56Z", "commit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDowMDo1NlrOG6zmtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDowMDo1NlrOG6zmtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMxNjA4NQ==", "bodyText": "There are some unused imports", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r464316085", "createdAt": "2020-08-03T10:00:56Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/OutlineService.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.api.EventObserver;\n+import com.broadcom.lsp.domain.cobol.event.model.AnalysisFinishedEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n+import com.ca.lsp.core.cobol.semantics.outline.NodeType;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlineNode;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlinePosition;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlineRange;\n+import com.google.inject.Inject;\n+import com.google.inject.assistedinject.Assisted;\n+import com.google.inject.internal.cglib.core.$CollectionUtils;\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.*;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5OTE1NzM5", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-459915739", "createdAt": "2020-08-03T10:22:17Z", "commit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDoyMjoxN1rOG60OGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDoyMjoxN1rOG60OGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMyNjE2OA==", "bodyText": "not sure if might create strange results but I would recommend to use an empty outline object rather than a null reference", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r464326168", "createdAt": "2020-08-03T10:22:17Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/delegates/validations/AnalysisResult.java", "diffHunk": "@@ -42,7 +44,8 @@ public static AnalysisResult empty() {\n         Collections.emptyMap(),\n         Collections.emptyMap(),\n         Collections.emptyMap(),\n-        Collections.emptyMap());\n+        Collections.emptyMap(),\n+        null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5OTIxMDA4", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-459921008", "createdAt": "2020-08-03T10:31:27Z", "commit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDozMToyN1rOG60eQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDozMToyN1rOG60eQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzMDMwNA==", "bodyText": "I will suggest to don't ignore it until we can still use socket communication (for developer purposes)", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r464330304", "createdAt": "2020-08-03T10:31:27Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/LangServerBootstrapTest.java", "diffHunk": "@@ -78,6 +79,7 @@ public void isPipeEnabledInvalidArgument() {\n   }\n \n   @Test\n+  @Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5OTI2Mzgy", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-459926382", "createdAt": "2020-08-03T10:41:34Z", "commit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDo0MTozNFrOG60u5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDo0MTozNFrOG60u5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzNDU2Nw==", "bodyText": "please add a brief explanation of the purpose", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r464334567", "createdAt": "2020-08-03T10:41:34Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/OutlineServiceTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package com.ca.lsp.cobol.service;\n+\n+import com.ca.lsp.cobol.service.delegates.validations.AnalysisResult;\n+import com.ca.lsp.core.cobol.semantics.outline.*;\n+import lombok.Value;\n+import org.eclipse.lsp4j.*;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class OutlineServiceTest {\n+  @Test\n+  public void collectSymbols() {\n+    MyDocumentModel documentModel = new MyDocumentModel(\"\",\n+        new AnalysisResult(null, null, null, null, null, null, null,\n+            new OutlineTree(List.of(outlineNode(\"FOO\", NodeType.FIELD, from(3, 3), to(4, 4))))));\n+    List<Either<SymbolInformation, DocumentSymbol>> expectedResult = List.of(Either.forRight(\n+        documentSymbol(\"FOO\", SymbolKind.Variable, from(2, 3), to(3, 4))\n+    ));\n+    assertEquals(expectedResult, OutlineService.collectSymbols(documentModel));\n+  }\n+\n+  @Test\n+  public void collectSymbolsForNullDocumentModel() {\n+    assertEquals(Collections.EMPTY_LIST, OutlineService.collectSymbols(null));\n+  }\n+\n+  @Test\n+  public void collectSymbolsForNullOutlineTree() {\n+    MyDocumentModel documentModel = new MyDocumentModel(\"\",\n+        new AnalysisResult(null, null, null, null, null, null, null, null));\n+    assertEquals(Collections.EMPTY_LIST, OutlineService.collectSymbols(documentModel));\n+  }\n+\n+  @Test\n+  public void convert() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5OTI2ODc0", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-459926874", "createdAt": "2020-08-03T10:42:27Z", "commit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDo0MjoyN1rOG60wVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDo0MjoyN1rOG60wVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzNDkzNQ==", "bodyText": "might be better to wrap it in a method to improve readability", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r464334935", "createdAt": "2020-08-03T10:42:27Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/OutlineServiceTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package com.ca.lsp.cobol.service;\n+\n+import com.ca.lsp.cobol.service.delegates.validations.AnalysisResult;\n+import com.ca.lsp.core.cobol.semantics.outline.*;\n+import lombok.Value;\n+import org.eclipse.lsp4j.*;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class OutlineServiceTest {\n+  @Test\n+  public void collectSymbols() {\n+    MyDocumentModel documentModel = new MyDocumentModel(\"\",\n+        new AnalysisResult(null, null, null, null, null, null, null,\n+            new OutlineTree(List.of(outlineNode(\"FOO\", NodeType.FIELD, from(3, 3), to(4, 4))))));\n+    List<Either<SymbolInformation, DocumentSymbol>> expectedResult = List.of(Either.forRight(\n+        documentSymbol(\"FOO\", SymbolKind.Variable, from(2, 3), to(3, 4))\n+    ));\n+    assertEquals(expectedResult, OutlineService.collectSymbols(documentModel));\n+  }\n+\n+  @Test\n+  public void collectSymbolsForNullDocumentModel() {\n+    assertEquals(Collections.EMPTY_LIST, OutlineService.collectSymbols(null));\n+  }\n+\n+  @Test\n+  public void collectSymbolsForNullOutlineTree() {\n+    MyDocumentModel documentModel = new MyDocumentModel(\"\",\n+        new AnalysisResult(null, null, null, null, null, null, null, null));\n+    assertEquals(Collections.EMPTY_LIST, OutlineService.collectSymbols(documentModel));\n+  }\n+\n+  @Test\n+  public void convert() {\n+    // The structure is the following:\n+    // root\n+    // |- first\n+    // |  |- FILLER\n+    // |- second\n+    OutlineNode outlineNode = outlineNode(\"root\", NodeType.PROGRAM, from(1, 1), to(10, 45),\n+        outlineNode(\"first\", NodeType.DIVISION, from(2, 2), to(2, 10),\n+            outlineNode(\"FILLER\", NodeType.STRUCT, from(3, 4), to(3, 8))),\n+        outlineNode(\"second\", NodeType.COPYBOOK, from(5, 3), to(5, 20)));\n+    DocumentSymbol expectedDocumentSymbol = documentSymbol(\"root\", SymbolKind.Class, from(0, 1), to(9, 45),\n+        documentSymbol(\"first\", SymbolKind.Method, from(1, 2), to(1, 10),\n+            documentSymbol(\"FILLER\", SymbolKind.Struct, from(2, 4), to(2, 8))),\n+        documentSymbol(\"second\", SymbolKind.File, from(4, 3), to(4, 20)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5OTI4MDc4", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-459928078", "createdAt": "2020-08-03T10:44:28Z", "commit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDo0NDoyOVrOG60zoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDo0NDoyOVrOG60zoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzNTc3Ng==", "bodyText": "can be renamed as Cursor?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r464335776", "createdAt": "2020-08-03T10:44:29Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/OutlineServiceTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package com.ca.lsp.cobol.service;\n+\n+import com.ca.lsp.cobol.service.delegates.validations.AnalysisResult;\n+import com.ca.lsp.core.cobol.semantics.outline.*;\n+import lombok.Value;\n+import org.eclipse.lsp4j.*;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class OutlineServiceTest {\n+  @Test\n+  public void collectSymbols() {\n+    MyDocumentModel documentModel = new MyDocumentModel(\"\",\n+        new AnalysisResult(null, null, null, null, null, null, null,\n+            new OutlineTree(List.of(outlineNode(\"FOO\", NodeType.FIELD, from(3, 3), to(4, 4))))));\n+    List<Either<SymbolInformation, DocumentSymbol>> expectedResult = List.of(Either.forRight(\n+        documentSymbol(\"FOO\", SymbolKind.Variable, from(2, 3), to(3, 4))\n+    ));\n+    assertEquals(expectedResult, OutlineService.collectSymbols(documentModel));\n+  }\n+\n+  @Test\n+  public void collectSymbolsForNullDocumentModel() {\n+    assertEquals(Collections.EMPTY_LIST, OutlineService.collectSymbols(null));\n+  }\n+\n+  @Test\n+  public void collectSymbolsForNullOutlineTree() {\n+    MyDocumentModel documentModel = new MyDocumentModel(\"\",\n+        new AnalysisResult(null, null, null, null, null, null, null, null));\n+    assertEquals(Collections.EMPTY_LIST, OutlineService.collectSymbols(documentModel));\n+  }\n+\n+  @Test\n+  public void convert() {\n+    // The structure is the following:\n+    // root\n+    // |- first\n+    // |  |- FILLER\n+    // |- second\n+    OutlineNode outlineNode = outlineNode(\"root\", NodeType.PROGRAM, from(1, 1), to(10, 45),\n+        outlineNode(\"first\", NodeType.DIVISION, from(2, 2), to(2, 10),\n+            outlineNode(\"FILLER\", NodeType.STRUCT, from(3, 4), to(3, 8))),\n+        outlineNode(\"second\", NodeType.COPYBOOK, from(5, 3), to(5, 20)));\n+    DocumentSymbol expectedDocumentSymbol = documentSymbol(\"root\", SymbolKind.Class, from(0, 1), to(9, 45),\n+        documentSymbol(\"first\", SymbolKind.Method, from(1, 2), to(1, 10),\n+            documentSymbol(\"FILLER\", SymbolKind.Struct, from(2, 4), to(2, 8))),\n+        documentSymbol(\"second\", SymbolKind.File, from(4, 3), to(4, 20)));\n+    assertEquals(expectedDocumentSymbol, OutlineService.convert(outlineNode));\n+  }\n+\n+  private OutlineNode outlineNode(String name, NodeType nodeType, Point from, Point to, OutlineNode... nestedNodes) {\n+    return new OutlineNode(name, nodeType,\n+        new OutlineRange(new OutlinePosition(from.line, from.character), new OutlinePosition(to.line, to.character)),\n+        Arrays.asList(nestedNodes));\n+  }\n+\n+  private Point from(int line, int character) {\n+    return new Point(line, character);\n+  }\n+\n+  private Point to(int line, int character) {\n+    return new Point(line, character);\n+  }\n+\n+  private DocumentSymbol documentSymbol(String name, SymbolKind kind, Point from, Point to, DocumentSymbol... children) {\n+    Range range = new Range(new Position(from.line, from.character), new Position(to.line, to.character));\n+    return new DocumentSymbol(name, kind, range, range, \"\", Arrays.asList(children));\n+  }\n+\n+  @Value\n+  private class Point {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5OTI4Nzgw", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-459928780", "createdAt": "2020-08-03T10:45:40Z", "commit": {"oid": "bfcbc0889d7e5e7548da611d9d78118db624e863"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "15698adc7b7cc3a3096aa5b03b7dcd9557e1d419", "author": {"user": {"login": "grianbrcom", "name": "Anton Grigorev"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/15698adc7b7cc3a3096aa5b03b7dcd9557e1d419", "committedDate": "2020-08-04T12:48:47Z", "message": "Fixing comments\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>"}, "afterCommit": {"oid": "579a98427e803035895d8676d87dfd8ea1a193a1", "author": {"user": {"login": "grianbrcom", "name": "Anton Grigorev"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/579a98427e803035895d8676d87dfd8ea1a193a1", "committedDate": "2020-08-21T15:21:44Z", "message": "feat: Outline view support\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "579a98427e803035895d8676d87dfd8ea1a193a1", "author": {"user": {"login": "grianbrcom", "name": "Anton Grigorev"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/579a98427e803035895d8676d87dfd8ea1a193a1", "committedDate": "2020-08-21T15:21:44Z", "message": "feat: Outline view support\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>"}, "afterCommit": {"oid": "ba804e9a2113d0490ec91b431213eb399fb508c7", "author": {"user": {"login": "grianbrcom", "name": "Anton Grigorev"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/ba804e9a2113d0490ec91b431213eb399fb508c7", "committedDate": "2020-08-24T16:36:39Z", "message": "feat: Outline view support\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MTgyOTY0", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-474182964", "createdAt": "2020-08-25T06:53:11Z", "commit": {"oid": "ba804e9a2113d0490ec91b431213eb399fb508c7"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjo1MzoxMVrOHGJ-vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjo1NToxNlrOHGKCZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxNzAyMA==", "bodyText": "Optional (2x):  List.of()", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r476217020", "createdAt": "2020-08-25T06:53:11Z", "author": {"login": "asatklichov"}, "path": "server/src/test/java/com/ca/lsp/cobol/service/delegates/outline/OutlineTaskTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+package com.ca.lsp.cobol.service.delegates.outline;\n+\n+import com.ca.lsp.cobol.service.MyDocumentModel;\n+import com.ca.lsp.cobol.service.delegates.validations.AnalysisResult;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlineTree;\n+import lombok.Value;\n+import org.eclipse.lsp4j.DocumentSymbol;\n+import org.eclipse.lsp4j.SymbolInformation;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class OutlineTaskTest {\n+  @Test\n+  public void collectSymbols() {\n+    DocumentSymbol theDocumentSymbol = new DocumentSymbol();\n+    MyDocumentModel documentModel = new MyDocumentModel(\"\", AnalysisResult.builder().outlineTree(\n+        new OutlineTree(List.of(theDocumentSymbol), true)).build());\n+    List<Either<SymbolInformation, DocumentSymbol>> expectedResult = List.of(Either.forRight(theDocumentSymbol));\n+    assertEquals(expectedResult, OutlineTask.collectSymbols(documentModel));\n+  }\n+\n+  @Test\n+  public void collectSymbolsForNullDocumentModel() {\n+    assertEquals(Collections.EMPTY_LIST, OutlineTask.collectSymbols(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba804e9a2113d0490ec91b431213eb399fb508c7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxNzk1OQ==", "bodyText": "Optional: List.of()", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r476217959", "createdAt": "2020-08-25T06:55:16Z", "author": {"login": "asatklichov"}, "path": "server/src/test/java/com/ca/lsp/cobol/usecases/TestOutlineTree.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package com.ca.lsp.cobol.usecases;\n+\n+import com.ca.lsp.cobol.positive.CobolText;\n+import com.ca.lsp.cobol.service.delegates.validations.AnalysisResult;\n+import com.ca.lsp.core.cobol.semantics.outline.NodeType;\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.lsp4j.DocumentSymbol;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.ca.lsp.cobol.service.delegates.validations.UseCaseUtils.DOCUMENT_URI;\n+import static com.ca.lsp.cobol.service.delegates.validations.UseCaseUtils.analyze;\n+import static com.ca.lsp.core.cobol.semantics.outline.NodeType.*;\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestOutlineTree {\n+  @Test\n+  void test() throws IOException {\n+    String TEXT = IOUtils.toString(\n+        getClass().getClassLoader().getResourceAsStream(\"usecases/TestOutlineTree.cbl\"), StandardCharsets.UTF_8);\n+    List<CobolText> copybooks = List.of(\n+        new CobolText(\"FOO\", \"\"),\n+        new CobolText(\"BAR\", \"000100     01 HIDE-IT PIC 9(9).\"),\n+        new CobolText(\"BAZ\", \"\")\n+    );\n+    List<DocumentSymbol> expectedNodes = getExpectedOutlineNodes();\n+    AnalysisResult result = analyze(DOCUMENT_URI, TEXT, copybooks);\n+    assertNodeListEquals(expectedNodes, result.getOutlineTree().getOutlineNodes(), \"/\");\n+  }\n+\n+  private List<DocumentSymbol> getExpectedOutlineNodes() {\n+    return nested(\n+        node(\"COPY FOO\", COPYBOOK),\n+        node(\"PROGRAM: HELLO-WORLD\", PROGRAM, nested(\n+            node(\"IDENTIFICATION DIVISION\", DIVISION, nested(\n+                node(\"PROGRAM-ID HELLO-WORLD\", PROGRAM_ID)\n+            )),\n+            node(\"DATA DIVISION\", DIVISION, nested(\n+                node(\"WORKING-STORAGE SECTION\", SECTION, nested(\n+                    node(\"COPY BAR\", COPYBOOK),\n+                    node(\"User-Num1\", FIELD),\n+                    node(\"User-Num2\", FIELD),\n+                    node(\"User-Address\", STRUCT, nested(\n+                        node(\"COPY BAZ\", COPYBOOK),\n+                        node(\"User-City\", FIELD),\n+                        node(\"User-Country\", FIELD),\n+                        node(\"User-Index\", FIELD),\n+                        node(\"User-Phone\", FIELD)\n+                    )),\n+                    node(\"FILLER\", STRUCT, nested(\n+                        node(\"FOO\", FIELD)\n+                    ))\n+                ))\n+            )),\n+            node(\"PROCEDURE DIVISION\", DIVISION, nested(\n+                node(\"000-Main-Logic\", PROCEDURE),\n+                node(\"100-Print-User\", PROCEDURE)\n+            ))\n+        )),\n+        node(\"PROGRAM: OUTLINE\", PROGRAM, nested(\n+            node(\"IDENTIFICATION DIVISION\", DIVISION, nested(\n+                node(\"PROGRAM-ID OUTLINE\", PROGRAM_ID)\n+            )),\n+            node(\"ENVIRONMENT DIVISION\", DIVISION, nested(\n+                node(\"CONFIGURATION SECTION\", SECTION),\n+                node(\"INPUT-OUTPUT SECTION\", SECTION, nested(\n+                    node(\"TRANS-FILE-IN\", FILE)\n+                ))\n+            )),\n+            node(\"DATA DIVISION\", DIVISION, nested(\n+                node(\"FILE SECTION\", SECTION, nested(\n+                    node(\"TRANS-FILE-IN\", FILE, nested(\n+                        node(\"FILE-RECORD\", FIELD)\n+                    )),\n+                    node(\"TERMS-FILE\", FILE, nested(\n+                        node(\"TERMS-RECORD\", STRUCT, nested(\n+                            node(\"TERMS-KEY\", FIELD),\n+                            node(\"FILLER\", FIELD)\n+                        ))\n+                    ))\n+                )),\n+                node(\"WORKING-STORAGE SECTION\", SECTION, nested(\n+                    node(\"COLR-DISPLAY\", FIELD),\n+                    node(\"CTLFILE-REC\", STRUCT, nested(\n+                        node(\"CTLFILE-PRIME\", FIELD),\n+                        node(\"CTLFILE-PAST-DUE-DIFF\", FIELD)\n+                    )),\n+                    node(\"CTLFILE-REC-12\", REDEFINES, nested(\n+                        node(\"CTLFILE-DB-DATE\", FIELD),\n+                        node(\"CTLFILE-ATB-DATE\", FIELD),\n+                        node(\"COST-RECORD-CODE\", FIELD, nested(\n+                            node(\"HEADER\", FIELD_88),\n+                            node(\"SUPPLR\", FIELD_88),\n+                            node(\"WREHOUSE\", FIELD_88)\n+                        ))\n+                    ))\n+                )),\n+                node(\"LINKAGE SECTION\", SECTION, nested(\n+                    node(\"LINK-PRM0\", STRUCT, nested(\n+                        node(\"PARM-LENGTH\", FIELD),\n+                        node(\"PARM\", FIELD)\n+                    ))\n+                ))\n+            )),\n+            node(\"PROCEDURE DIVISION\", DIVISION, nested(\n+                node(\"000-PROGRAM-DRIVER\", PROCEDURE_SECTION),\n+                node(\"100-HOUSEKEEPING\", PROCEDURE_SECTION, nested(\n+                    node(\"110-OPEN-FILES\", PROCEDURE),\n+                    node(\"112-READ-WAREHOUS-FILE\", PROCEDURE),\n+                    node(\"199-EXIT\", PROCEDURE)\n+                ))\n+            ))\n+        ))\n+    );\n+  }\n+\n+  private void assertNodeListEquals(List<DocumentSymbol> expected, List<DocumentSymbol> actual, String level) {\n+    Map<String, DocumentSymbol> expectedMap = toMap(expected);\n+    Map<String, DocumentSymbol> actualMap = toMap(actual);\n+    assertEquals(\"Elements on level \" + level, expectedMap.keySet(), actualMap.keySet());\n+    for (DocumentSymbol expectedNode: expectedMap.values()) {\n+      assertNodeEquals(expectedNode, actualMap.get(expectedNode.getName()), level);\n+    }\n+  }\n+\n+  /**\n+   * The method compares only node types and nested nodes.\n+   * Two outline nodes with different ranges will be equal.\n+   */\n+  private void assertNodeEquals(DocumentSymbol expected, DocumentSymbol actual, String oldLevel) {\n+    String level = oldLevel + '/' + expected.getName();\n+    assertEquals(\"Node types for \" + level, expected.getKind(), actual.getKind());\n+    assertNodeListEquals(expected.getChildren(), actual.getChildren(), level);\n+  }\n+\n+  private Map<String, DocumentSymbol> toMap(List<DocumentSymbol> nodes) {\n+    return nodes.stream().collect(Collectors.toMap(DocumentSymbol::getName, Function.identity()));\n+  }\n+\n+  private List<DocumentSymbol> nested(DocumentSymbol... nodes) {\n+    return Arrays.asList(nodes);\n+  }\n+\n+  private DocumentSymbol node(String name, NodeType nodeType) {\n+    return node(name, nodeType, Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba804e9a2113d0490ec91b431213eb399fb508c7"}, "originalPosition": 153}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba804e9a2113d0490ec91b431213eb399fb508c7", "author": {"user": {"login": "grianbrcom", "name": "Anton Grigorev"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/ba804e9a2113d0490ec91b431213eb399fb508c7", "committedDate": "2020-08-24T16:36:39Z", "message": "feat: Outline view support\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>"}, "afterCommit": {"oid": "3d493cc60c9894c198bdd4d3a6e7102d00efb126", "author": {"user": {"login": "grianbrcom", "name": "Anton Grigorev"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/3d493cc60c9894c198bdd4d3a6e7102d00efb126", "committedDate": "2020-08-25T08:40:23Z", "message": "feat: Outline view support #481\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MjQyNzQ4", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-474242748", "createdAt": "2020-08-25T08:16:31Z", "commit": {"oid": "ba804e9a2113d0490ec91b431213eb399fb508c7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODoxNjozMVrOHGM10w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDowNDoxN1rOHGRB0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI2Mzg5MQ==", "bodyText": "I don't really like that the task is required to retrieve some data itself because it violates the purity principle. I will accept it now, but I feel like it might be improved later.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r476263891", "createdAt": "2020-08-25T08:16:31Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/ca/lsp/cobol/service/delegates/outline/OutlineTask.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+package com.ca.lsp.cobol.service.delegates.outline;\n+\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.api.EventObserver;\n+import com.broadcom.lsp.domain.cobol.event.model.AnalysisFinishedEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n+import com.ca.lsp.cobol.service.MyDocumentModel;\n+import com.ca.lsp.cobol.service.MyTextDocumentService;\n+import com.google.inject.Inject;\n+import com.google.inject.assistedinject.Assisted;\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.DocumentSymbol;\n+import org.eclipse.lsp4j.SymbolInformation;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * This task provides DocumentSymbol structure for the document. This structure is used for Outlive view.\n+ */\n+@Slf4j\n+public class OutlineTask implements EventObserver<AnalysisFinishedEvent> {\n+\n+  private transient DataBusBroker databus;\n+  private transient MyTextDocumentService textDocumentService;\n+  private String documentUri;\n+  private transient CompletableFuture<MyDocumentModel> waitForDocumentModel;\n+\n+  @Inject\n+  public OutlineTask(\n+      DataBusBroker databus,\n+      MyTextDocumentService textDocumentService,\n+      @Assisted(\"documentUri\") String documentUri) {\n+    this.databus = databus;\n+    this.textDocumentService = textDocumentService;\n+    this.documentUri = documentUri;\n+    this.waitForDocumentModel = new CompletableFuture<>();\n+  }\n+\n+  public List<Either<SymbolInformation, DocumentSymbol>> collectSymbols() {\n+    return collectSymbols(extractDocumentModel());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba804e9a2113d0490ec91b431213eb399fb508c7"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI2OTE3OA==", "bodyText": "Missing javadoc for test class", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r476269178", "createdAt": "2020-08-25T08:24:54Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/ca/lsp/cobol/service/delegates/outline/OutlineTaskTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+package com.ca.lsp.cobol.service.delegates.outline;\n+\n+import com.ca.lsp.cobol.service.MyDocumentModel;\n+import com.ca.lsp.cobol.service.delegates.validations.AnalysisResult;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlineTree;\n+import lombok.Value;\n+import org.eclipse.lsp4j.DocumentSymbol;\n+import org.eclipse.lsp4j.SymbolInformation;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba804e9a2113d0490ec91b431213eb399fb508c7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwODc5NA==", "bodyText": "Please, add a javadoc here", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r476308794", "createdAt": "2020-08-25T09:25:06Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/ca/lsp/cobol/usecases/TestOutlineTree.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package com.ca.lsp.cobol.usecases;\n+\n+import com.ca.lsp.cobol.positive.CobolText;\n+import com.ca.lsp.cobol.service.delegates.validations.AnalysisResult;\n+import com.ca.lsp.core.cobol.semantics.outline.NodeType;\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.lsp4j.DocumentSymbol;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.ca.lsp.cobol.service.delegates.validations.UseCaseUtils.DOCUMENT_URI;\n+import static com.ca.lsp.cobol.service.delegates.validations.UseCaseUtils.analyze;\n+import static com.ca.lsp.core.cobol.semantics.outline.NodeType.*;\n+import static org.junit.Assert.assertEquals;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d493cc60c9894c198bdd4d3a6e7102d00efb126"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwOTU2NA==", "bodyText": "I am not really sure about the legal headers for test data, so I prefer to include them into the test class as String constant", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r476309564", "createdAt": "2020-08-25T09:26:24Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/resources/usecases/TestOutlineTree.cbl", "diffHunk": "@@ -0,0 +1,94 @@\n+000010 COPY FOO.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d493cc60c9894c198bdd4d3a6e7102d00efb126"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxNzYzMw==", "bodyText": "May it be something like \"VariableNode\" not to have name interferences", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r476317633", "createdAt": "2020-08-25T09:39:35Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/ca/lsp/core/cobol/semantics/outline/OutlineTreeBuilder.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+package com.ca.lsp.core.cobol.semantics.outline;\n+\n+import com.broadcom.lsp.domain.common.model.Position;\n+import com.google.common.collect.Multimap;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.DocumentSymbol;\n+import org.eclipse.lsp4j.Range;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The builder for constructing outline tree.\n+ *\n+ * Uses ParserRuleContext for finding the element's parent.\n+ */\n+@Slf4j\n+public class OutlineTreeBuilder {\n+  private List<DocumentSymbol> rootNodes = new ArrayList<>();\n+  private Map<ParserRuleContext, DocumentSymbol> nodesByContext = new HashMap<>();\n+  private Deque<Variable> variables;\n+  private DocumentSymbol latestVariable;\n+  private Map<Token, Position> positionMapping;\n+\n+  public OutlineTreeBuilder(String documentUri, Map<Token, Position> positionMapping) {\n+    this.positionMapping = Collections.unmodifiableMap(positionMapping.entrySet().stream()\n+        .filter(tokenPositionEntry -> tokenPositionEntry.getValue().getDocumentURI().equals(documentUri))\n+        .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));\n+  }\n+\n+  public void addProgram(ParserRuleContext parserRuleContext) {\n+    DocumentSymbol outlineNode = constructNode(\"PROGRAM\", NodeType.PROGRAM, parserRuleContext);\n+    if (outlineNode == null) {\n+      return;\n+    }\n+    rootNodes.add(outlineNode);\n+    nodesByContext.put(parserRuleContext, outlineNode);\n+  }\n+\n+  public void addNode(String name, NodeType nodeType, ParserRuleContext parserRuleContext) {\n+    DocumentSymbol outlineNode = constructNode(name, nodeType, parserRuleContext);\n+    if (outlineNode == null) {\n+      return;\n+    }\n+    addNodeToParent(outlineNode, parserRuleContext);\n+  }\n+\n+  private void addNodeToParent(DocumentSymbol outlineNode, ParserRuleContext parserRuleContext) {\n+    nodesByContext.put(parserRuleContext, outlineNode);\n+    ParserRuleContext parent = parserRuleContext.getParent();\n+    while (parent != null) {\n+      DocumentSymbol parentNode = nodesByContext.get(parent);\n+      if (parentNode != null) {\n+        parentNode.getChildren().add(outlineNode);\n+        return;\n+      }\n+      parent = parent.getParent();\n+    }\n+    rootNodes.add(outlineNode);\n+  }\n+\n+  public void renameProgram(String name, ParserRuleContext parserRuleContext) {\n+    ParserRuleContext parent = parserRuleContext.getParent();\n+    while (parent != null) {\n+      DocumentSymbol parentNode = nodesByContext.get(parent);\n+      if (parentNode != null && parentNode.getKind() == NodeType.PROGRAM.getSymbolKind()) {\n+        parentNode.setName(\"PROGRAM: \" + name);\n+        return;\n+      }\n+      parent = parent.getParent();\n+    }\n+    LOG.warn(\"Can't rename program '{}'. Program node is not found.\", name);\n+  }\n+\n+  public void initVariables() {\n+    variables = new ArrayDeque<>();\n+    latestVariable = null;\n+  }\n+\n+  public void addVariable(int level, String name, NodeType nodeType, ParserRuleContext parserRuleContext) {\n+    DocumentSymbol outlineNode = constructNode(name, nodeType, parserRuleContext);\n+    if (outlineNode == null) {\n+      return;\n+    }\n+    while (!variables.isEmpty() && variables.peekLast().level >= level) {\n+      variables.removeLast();\n+    }\n+    Variable groupItem = variables.peekLast();\n+    if (level == 88) {\n+      if (latestVariable == null) {\n+        addNodeToParent(outlineNode, parserRuleContext);\n+      } else {\n+        latestVariable.getChildren().add(outlineNode);\n+      }\n+      return;\n+    }\n+    latestVariable = outlineNode;\n+    if (groupItem != null) {\n+      groupItem.outlineNode.getChildren().add(outlineNode);\n+    } else {\n+      addNodeToParent(outlineNode, parserRuleContext);\n+    }\n+    if (NodeType.STRUCT == nodeType ||\n+        NodeType.REDEFINES == nodeType) {\n+      variables.addLast(new Variable(level, outlineNode));\n+    }\n+  }\n+\n+  public OutlineTree build(Multimap<String, Position> copybookUsages) {\n+    rootNodes.forEach(this::recalculateStructRange);\n+    for (Map.Entry<String, Position> copybook: copybookUsages.entries()) {\n+      String name = copybook.getKey();\n+      Position position = copybook.getValue();\n+      Range outlineRange = new Range(\n+          new org.eclipse.lsp4j.Position(position.getLine(), position.getCharPositionInLine()),\n+          new org.eclipse.lsp4j.Position(position.getLine(), position.getCharPositionInLine()+name.length())\n+      );\n+      DocumentSymbol outlineNode = new DocumentSymbol(\"COPY \" + name, NodeType.COPYBOOK.getSymbolKind(), outlineRange, outlineRange, \"\", List.of());\n+      addOutlineNodeToTree(rootNodes, outlineNode);\n+    }\n+    return new OutlineTree(rootNodes, true);\n+  }\n+\n+  private void recalculateStructRange(DocumentSymbol node) {\n+    node.getChildren().forEach(this::recalculateStructRange);\n+    if (node.getKind() == NodeType.STRUCT.getSymbolKind()) {\n+      node.getRange().setEnd(node.getChildren().stream()\n+          .map(DocumentSymbol::getRange)\n+          .map(Range::getEnd)\n+          .max(Comparator.comparingInt(org.eclipse.lsp4j.Position::getLine)\n+              .thenComparingInt(org.eclipse.lsp4j.Position::getCharacter))\n+          .orElse(node.getRange().getEnd()));\n+    }\n+  }\n+\n+  private void addOutlineNodeToTree(List<DocumentSymbol> outlineNodes, DocumentSymbol outlineNode) {\n+    outlineNodes.stream()\n+        .filter(it -> RangeUtils.isInsideRange(it, outlineNode))\n+        .findFirst()\n+        .ifPresentOrElse(\n+            it -> addOutlineNodeToTree(it.getChildren(), outlineNode),\n+            () -> outlineNodes.add(outlineNode));\n+  }\n+\n+  private DocumentSymbol constructNode(String name, NodeType type, ParserRuleContext parserRuleContext) {\n+    Range range = extractRange(parserRuleContext);\n+    if (range == null) {\n+      return null;\n+    }\n+    return new DocumentSymbol(name, type.getSymbolKind(), range, range, \"\", new ArrayList<>());\n+  }\n+\n+  private Range extractRange(ParserRuleContext parserRuleContext) {\n+    org.eclipse.lsp4j.Position start = extractPosition(parserRuleContext.start);\n+    org.eclipse.lsp4j.Position stop = extractPosition(parserRuleContext.stop);\n+    if (start == null || stop == null) {\n+      return null;\n+    }\n+    return new Range(start, stop);\n+  }\n+\n+  private org.eclipse.lsp4j.Position extractPosition(Token token) {\n+    Position position = positionMapping.get(token);\n+    if (position == null) {\n+      return null;\n+    }\n+    return new org.eclipse.lsp4j.Position(position.getLine(), position.getCharPositionInLine());\n+  }\n+\n+  @Value\n+  private class Variable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d493cc60c9894c198bdd4d3a6e7102d00efb126"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzMjQ5OA==", "bodyText": "In this case, the positions will be null if the rule is adjacent to a copybook. I would recommend a filtration for tokens by channel 0 - they are guaranteed to present in the mapping.  The tokens might be taken from the BufferedTokenStream by the source interval", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r476332498", "createdAt": "2020-08-25T10:04:17Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/ca/lsp/core/cobol/semantics/outline/OutlineTreeBuilder.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+package com.ca.lsp.core.cobol.semantics.outline;\n+\n+import com.broadcom.lsp.domain.common.model.Position;\n+import com.google.common.collect.Multimap;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.DocumentSymbol;\n+import org.eclipse.lsp4j.Range;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The builder for constructing outline tree.\n+ *\n+ * Uses ParserRuleContext for finding the element's parent.\n+ */\n+@Slf4j\n+public class OutlineTreeBuilder {\n+  private List<DocumentSymbol> rootNodes = new ArrayList<>();\n+  private Map<ParserRuleContext, DocumentSymbol> nodesByContext = new HashMap<>();\n+  private Deque<Variable> variables;\n+  private DocumentSymbol latestVariable;\n+  private Map<Token, Position> positionMapping;\n+\n+  public OutlineTreeBuilder(String documentUri, Map<Token, Position> positionMapping) {\n+    this.positionMapping = Collections.unmodifiableMap(positionMapping.entrySet().stream()\n+        .filter(tokenPositionEntry -> tokenPositionEntry.getValue().getDocumentURI().equals(documentUri))\n+        .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));\n+  }\n+\n+  public void addProgram(ParserRuleContext parserRuleContext) {\n+    DocumentSymbol outlineNode = constructNode(\"PROGRAM\", NodeType.PROGRAM, parserRuleContext);\n+    if (outlineNode == null) {\n+      return;\n+    }\n+    rootNodes.add(outlineNode);\n+    nodesByContext.put(parserRuleContext, outlineNode);\n+  }\n+\n+  public void addNode(String name, NodeType nodeType, ParserRuleContext parserRuleContext) {\n+    DocumentSymbol outlineNode = constructNode(name, nodeType, parserRuleContext);\n+    if (outlineNode == null) {\n+      return;\n+    }\n+    addNodeToParent(outlineNode, parserRuleContext);\n+  }\n+\n+  private void addNodeToParent(DocumentSymbol outlineNode, ParserRuleContext parserRuleContext) {\n+    nodesByContext.put(parserRuleContext, outlineNode);\n+    ParserRuleContext parent = parserRuleContext.getParent();\n+    while (parent != null) {\n+      DocumentSymbol parentNode = nodesByContext.get(parent);\n+      if (parentNode != null) {\n+        parentNode.getChildren().add(outlineNode);\n+        return;\n+      }\n+      parent = parent.getParent();\n+    }\n+    rootNodes.add(outlineNode);\n+  }\n+\n+  public void renameProgram(String name, ParserRuleContext parserRuleContext) {\n+    ParserRuleContext parent = parserRuleContext.getParent();\n+    while (parent != null) {\n+      DocumentSymbol parentNode = nodesByContext.get(parent);\n+      if (parentNode != null && parentNode.getKind() == NodeType.PROGRAM.getSymbolKind()) {\n+        parentNode.setName(\"PROGRAM: \" + name);\n+        return;\n+      }\n+      parent = parent.getParent();\n+    }\n+    LOG.warn(\"Can't rename program '{}'. Program node is not found.\", name);\n+  }\n+\n+  public void initVariables() {\n+    variables = new ArrayDeque<>();\n+    latestVariable = null;\n+  }\n+\n+  public void addVariable(int level, String name, NodeType nodeType, ParserRuleContext parserRuleContext) {\n+    DocumentSymbol outlineNode = constructNode(name, nodeType, parserRuleContext);\n+    if (outlineNode == null) {\n+      return;\n+    }\n+    while (!variables.isEmpty() && variables.peekLast().level >= level) {\n+      variables.removeLast();\n+    }\n+    Variable groupItem = variables.peekLast();\n+    if (level == 88) {\n+      if (latestVariable == null) {\n+        addNodeToParent(outlineNode, parserRuleContext);\n+      } else {\n+        latestVariable.getChildren().add(outlineNode);\n+      }\n+      return;\n+    }\n+    latestVariable = outlineNode;\n+    if (groupItem != null) {\n+      groupItem.outlineNode.getChildren().add(outlineNode);\n+    } else {\n+      addNodeToParent(outlineNode, parserRuleContext);\n+    }\n+    if (NodeType.STRUCT == nodeType ||\n+        NodeType.REDEFINES == nodeType) {\n+      variables.addLast(new Variable(level, outlineNode));\n+    }\n+  }\n+\n+  public OutlineTree build(Multimap<String, Position> copybookUsages) {\n+    rootNodes.forEach(this::recalculateStructRange);\n+    for (Map.Entry<String, Position> copybook: copybookUsages.entries()) {\n+      String name = copybook.getKey();\n+      Position position = copybook.getValue();\n+      Range outlineRange = new Range(\n+          new org.eclipse.lsp4j.Position(position.getLine(), position.getCharPositionInLine()),\n+          new org.eclipse.lsp4j.Position(position.getLine(), position.getCharPositionInLine()+name.length())\n+      );\n+      DocumentSymbol outlineNode = new DocumentSymbol(\"COPY \" + name, NodeType.COPYBOOK.getSymbolKind(), outlineRange, outlineRange, \"\", List.of());\n+      addOutlineNodeToTree(rootNodes, outlineNode);\n+    }\n+    return new OutlineTree(rootNodes, true);\n+  }\n+\n+  private void recalculateStructRange(DocumentSymbol node) {\n+    node.getChildren().forEach(this::recalculateStructRange);\n+    if (node.getKind() == NodeType.STRUCT.getSymbolKind()) {\n+      node.getRange().setEnd(node.getChildren().stream()\n+          .map(DocumentSymbol::getRange)\n+          .map(Range::getEnd)\n+          .max(Comparator.comparingInt(org.eclipse.lsp4j.Position::getLine)\n+              .thenComparingInt(org.eclipse.lsp4j.Position::getCharacter))\n+          .orElse(node.getRange().getEnd()));\n+    }\n+  }\n+\n+  private void addOutlineNodeToTree(List<DocumentSymbol> outlineNodes, DocumentSymbol outlineNode) {\n+    outlineNodes.stream()\n+        .filter(it -> RangeUtils.isInsideRange(it, outlineNode))\n+        .findFirst()\n+        .ifPresentOrElse(\n+            it -> addOutlineNodeToTree(it.getChildren(), outlineNode),\n+            () -> outlineNodes.add(outlineNode));\n+  }\n+\n+  private DocumentSymbol constructNode(String name, NodeType type, ParserRuleContext parserRuleContext) {\n+    Range range = extractRange(parserRuleContext);\n+    if (range == null) {\n+      return null;\n+    }\n+    return new DocumentSymbol(name, type.getSymbolKind(), range, range, \"\", new ArrayList<>());\n+  }\n+\n+  private Range extractRange(ParserRuleContext parserRuleContext) {\n+    org.eclipse.lsp4j.Position start = extractPosition(parserRuleContext.start);\n+    org.eclipse.lsp4j.Position stop = extractPosition(parserRuleContext.stop);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d493cc60c9894c198bdd4d3a6e7102d00efb126"}, "originalPosition": 172}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NDE4NDkw", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-474418490", "createdAt": "2020-08-25T12:14:13Z", "commit": {"oid": "3d493cc60c9894c198bdd4d3a6e7102d00efb126"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjoxNDoxM1rOHGVMcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjoxNDoxM1rOHGVMcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQwMDc1NQ==", "bodyText": "looks like this class is no longer used", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r476400755", "createdAt": "2020-08-25T12:14:13Z", "author": {"login": "zacanbrcom"}, "path": "server/src/test/java/com/ca/lsp/cobol/service/delegates/outline/OutlineTaskTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+package com.ca.lsp.cobol.service.delegates.outline;\n+\n+import com.ca.lsp.cobol.service.MyDocumentModel;\n+import com.ca.lsp.cobol.service.delegates.validations.AnalysisResult;\n+import com.ca.lsp.core.cobol.semantics.outline.OutlineTree;\n+import lombok.Value;\n+import org.eclipse.lsp4j.DocumentSymbol;\n+import org.eclipse.lsp4j.SymbolInformation;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class OutlineTaskTest {\n+  @Test\n+  public void collectSymbols() {\n+    DocumentSymbol theDocumentSymbol = new DocumentSymbol();\n+    MyDocumentModel documentModel = new MyDocumentModel(\"\", AnalysisResult.builder().outlineTree(\n+        new OutlineTree(List.of(theDocumentSymbol), true)).build());\n+    List<Either<SymbolInformation, DocumentSymbol>> expectedResult = List.of(Either.forRight(theDocumentSymbol));\n+    assertEquals(expectedResult, OutlineTask.collectSymbols(documentModel));\n+  }\n+\n+  @Test\n+  public void collectSymbolsForNullDocumentModel() {\n+    assertEquals(List.of(), OutlineTask.collectSymbols(null));\n+  }\n+\n+  @Test\n+  public void collectSymbolsForNullOutlineTree() {\n+    MyDocumentModel documentModel = new MyDocumentModel(\"\", AnalysisResult.builder().build());\n+    assertEquals(List.of(), OutlineTask.collectSymbols(documentModel));\n+  }\n+\n+  @Value\n+  private class Cursor {\n+    int line;\n+    int character;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d493cc60c9894c198bdd4d3a6e7102d00efb126"}, "originalPosition": 56}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d493cc60c9894c198bdd4d3a6e7102d00efb126", "author": {"user": {"login": "grianbrcom", "name": "Anton Grigorev"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/3d493cc60c9894c198bdd4d3a6e7102d00efb126", "committedDate": "2020-08-25T08:40:23Z", "message": "feat: Outline view support #481\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>"}, "afterCommit": {"oid": "f520ff96a29a66db4318ad588a21e422a76663bf", "author": {"user": {"login": "grianbrcom", "name": "Anton Grigorev"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/f520ff96a29a66db4318ad588a21e422a76663bf", "committedDate": "2020-08-25T14:45:23Z", "message": "feat: Outline view support #481\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NTc2MDk4", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-474576098", "createdAt": "2020-08-25T15:05:52Z", "commit": {"oid": "f520ff96a29a66db4318ad588a21e422a76663bf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTowNTo1MlrOHGcl7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTowNTo1MlrOHGcl7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUyMTk2Nw==", "bodyText": "Will it work if we receive this request two times for one analysis? I.e. when we receive didOpen and outline, then didChange and outline again, but at the time when the didChange has not put the new feature to the map?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#discussion_r476521967", "createdAt": "2020-08-25T15:05:52Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/ca/lsp/cobol/service/MyTextDocumentService.java", "diffHunk": "@@ -276,6 +280,16 @@ private void notifyAnalysisFinished(String uri, Map<String, List<Location>> copy\n             .build());\n   }\n \n+  @Override\n+  public CompletableFuture<List<Either<SymbolInformation, DocumentSymbol>>> documentSymbol(DocumentSymbolParams params) {\n+    String uri = params.getTextDocument().getUri();\n+    return outlineMap.get(uri)\n+        .thenApply(documentSymbols -> documentSymbols.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f520ff96a29a66db4318ad588a21e422a76663bf"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MzA1NzQw", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-475305740", "createdAt": "2020-08-26T09:16:48Z", "commit": {"oid": "f520ff96a29a66db4318ad588a21e422a76663bf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MzIzMzc2", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-475323376", "createdAt": "2020-08-26T09:40:14Z", "commit": {"oid": "f520ff96a29a66db4318ad588a21e422a76663bf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f520ff96a29a66db4318ad588a21e422a76663bf", "author": {"user": {"login": "grianbrcom", "name": "Anton Grigorev"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/f520ff96a29a66db4318ad588a21e422a76663bf", "committedDate": "2020-08-25T14:45:23Z", "message": "feat: Outline view support #481\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>"}, "afterCommit": {"oid": "f6034fd67b4daf24055c3bbb35bd70ed752c3d0d", "author": {"user": {"login": "grianbrcom", "name": "Anton Grigorev"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/f6034fd67b4daf24055c3bbb35bd70ed752c3d0d", "committedDate": "2020-08-26T09:56:32Z", "message": "feat: Outline view support #481\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MzQ3MTI5", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-475347129", "createdAt": "2020-08-26T10:12:47Z", "commit": {"oid": "f6034fd67b4daf24055c3bbb35bd70ed752c3d0d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16ba495c5226575a2d530a3c1bc9a9dec156d2d5", "author": {"user": {"login": "grianbrcom", "name": "Anton Grigorev"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/16ba495c5226575a2d530a3c1bc9a9dec156d2d5", "committedDate": "2020-08-26T11:12:48Z", "message": "feat: Outline view support #481\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f6034fd67b4daf24055c3bbb35bd70ed752c3d0d", "author": {"user": {"login": "grianbrcom", "name": "Anton Grigorev"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/f6034fd67b4daf24055c3bbb35bd70ed752c3d0d", "committedDate": "2020-08-26T09:56:32Z", "message": "feat: Outline view support #481\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>"}, "afterCommit": {"oid": "16ba495c5226575a2d530a3c1bc9a9dec156d2d5", "author": {"user": {"login": "grianbrcom", "name": "Anton Grigorev"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/16ba495c5226575a2d530a3c1bc9a9dec156d2d5", "committedDate": "2020-08-26T11:12:48Z", "message": "feat: Outline view support #481\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NTEwNjgx", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-475510681", "createdAt": "2020-08-26T13:52:21Z", "commit": {"oid": "16ba495c5226575a2d530a3c1bc9a9dec156d2d5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NTM5ODAx", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/439#pullrequestreview-475539801", "createdAt": "2020-08-26T14:21:31Z", "commit": {"oid": "16ba495c5226575a2d530a3c1bc9a9dec156d2d5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 973, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}