{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMjEyNzU4", "number": 586, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTo0NjoyN1rOEzQsnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMjowODozMFrOEzRKFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTg2Mzk3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/usecases/TestSqlIncludeStatementNotDefinedCorrectly.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTo0NjoyN1rOHqYFkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTo0NjoyN1rOHqYFkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5Njg4Mw==", "bodyText": "Seems not formatted well", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/586#discussion_r514196883", "createdAt": "2020-10-29T11:46:27Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/usecases/TestSqlIncludeStatementNotDefinedCorrectly.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.broadcom.lsp.cobol.usecases;\n+\n+import com.broadcom.lsp.cobol.positive.CobolText;\n+import com.broadcom.lsp.cobol.service.delegates.validations.SourceInfoLevels;\n+import com.broadcom.lsp.cobol.usecases.engine.UseCaseEngine;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.eclipse.lsp4j.DiagnosticSeverity.Error;\n+\n+/** This test checks sql include statement if it is defined correctly. */\n+class TestSqlIncludeStatementNotDefinedCorrectly {\n+  private static final String TEXT =\n+      \"       IDENTIFICATION DIVISION.\\n\"\n+          + \"       PROGRAM-ID. HELLO-SQL.\\n\"\n+          + \"       DATA DIVISION.\\n\"\n+          + \"       WORKING-STORAGE SECTION.\\n\"\n+          + \"       01 {$*SQLCA}.\\n\"\n+          + \"       EXEC  {INCLUDE|1} STRUCT1 END-EXEC.\";\n+\n+  @Test\n+  void test() {\n+    UseCaseEngine.runTest(\n+        TEXT,\n+        List.of(),\n+        Map.of(\n+            \"1\",\n+            new Diagnostic(\n+                    null,\n+                \"Missing token SQL at execSqlStatement\",\n+                Error,\n+                SourceInfoLevels.ERROR.getText())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9d468532f2a0b162ade8247a9160be3b1a9effd"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTkzOTQxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/preprocessor/delegates/GrammarPreprocessorListenerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMjowODozMFrOHqYz3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzo0OTozM1rOHqcsxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIwODczNA==", "bodyText": "Seems like this is an extra check. SQL INCLUDE doesn't allow replacing clauses, so nothing will be applied in any case. You may change it by checking replacingClauses.isEmpty() and don't pass the flag to this method.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/586#discussion_r514208734", "createdAt": "2020-10-29T12:08:30Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/preprocessor/delegates/GrammarPreprocessorListenerImpl.java", "diffHunk": "@@ -145,36 +146,50 @@ public void enterCopyStatement(@NonNull CopyStatementContext ctx) {\n \n   @Override\n   public void exitCopyStatement(@NonNull CopyStatementContext ctx) {\n+    collectAndAccumulateCopybookData(ctx.copySource(), true, retrieveCopybookStatementPosition(ctx), ctx.getSourceInterval());\n+  }\n+\n+\n+  @Override public void enterIncludeStatement(@NonNull IncludeStatementContext ctx) {\n+    push();\n+  }\n+\n+  @Override public void exitIncludeStatement(@NonNull IncludeStatementContext ctx) {\n+    collectAndAccumulateCopybookData(ctx.copySource(), false, retrieveCopybookStatementPosition(ctx), ctx.getSourceInterval());\n+  }\n+\n+  private void collectAndAccumulateCopybookData(CopySourceContext copySource, boolean applyReplacing, Locality copybookStatementPosition,  Interval sourceInterval) {\n     if (!copybookProcessingMode.analyze) {\n       pop();\n       return;\n     }\n-    CopySourceContext copySource = ctx.copySource();\n \n     String copybookName = retrieveCopybookName(copySource);\n     Locality locality = retrievePosition(copySource);\n     CopybookModel model = getCopyBookContent(copybookName, locality);\n \n     String uri = model.getUri();\n-    String rawContent = model.getContent();\n+    String content = model.getContent();\n \n-    String copybookId = randomUUID().toString();\n-    String replacedContent = applyReplacing(rawContent, replacingClauses);\n-    replacingClauses.clear();\n+    if (applyReplacing) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9d468532f2a0b162ade8247a9160be3b1a9effd"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI3MjQ1Mg==", "bodyText": "Seems like this is an extra check. SQL INCLUDE doesn't allow replacing clauses, so nothing will be applied in any case. You may change it by checking replacingClauses.isEmpty() and don't pass the flag to this method.\n\ndone", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/586#discussion_r514272452", "createdAt": "2020-10-29T13:49:33Z", "author": {"login": "asatklichov"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/preprocessor/delegates/GrammarPreprocessorListenerImpl.java", "diffHunk": "@@ -145,36 +146,50 @@ public void enterCopyStatement(@NonNull CopyStatementContext ctx) {\n \n   @Override\n   public void exitCopyStatement(@NonNull CopyStatementContext ctx) {\n+    collectAndAccumulateCopybookData(ctx.copySource(), true, retrieveCopybookStatementPosition(ctx), ctx.getSourceInterval());\n+  }\n+\n+\n+  @Override public void enterIncludeStatement(@NonNull IncludeStatementContext ctx) {\n+    push();\n+  }\n+\n+  @Override public void exitIncludeStatement(@NonNull IncludeStatementContext ctx) {\n+    collectAndAccumulateCopybookData(ctx.copySource(), false, retrieveCopybookStatementPosition(ctx), ctx.getSourceInterval());\n+  }\n+\n+  private void collectAndAccumulateCopybookData(CopySourceContext copySource, boolean applyReplacing, Locality copybookStatementPosition,  Interval sourceInterval) {\n     if (!copybookProcessingMode.analyze) {\n       pop();\n       return;\n     }\n-    CopySourceContext copySource = ctx.copySource();\n \n     String copybookName = retrieveCopybookName(copySource);\n     Locality locality = retrievePosition(copySource);\n     CopybookModel model = getCopyBookContent(copybookName, locality);\n \n     String uri = model.getUri();\n-    String rawContent = model.getContent();\n+    String content = model.getContent();\n \n-    String copybookId = randomUUID().toString();\n-    String replacedContent = applyReplacing(rawContent, replacingClauses);\n-    replacingClauses.clear();\n+    if (applyReplacing) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIwODczNA=="}, "originalCommit": {"oid": "b9d468532f2a0b162ade8247a9160be3b1a9effd"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3815, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}