{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2ODE2OTMz", "number": 567, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzo0ODowN1rOEvyYVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDo0MzoyOVrOEv0SeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTQzOTU2OnYy", "diffSide": "RIGHT", "path": "server/pom.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzo0ODowN1rOHk9jJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDozMjo0M1rOHlAGmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUxOTIwNA==", "bodyText": "Do we need to add new TPSR for it?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/567#discussion_r508519204", "createdAt": "2020-10-20T13:48:07Z", "author": {"login": "Nurkambay"}, "path": "server/pom.xml", "diffHunk": "@@ -168,6 +168,12 @@\n             <version>${mockito.core.version}</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4acae56be8ace0f5a83af4d9fbe5774bd08d5a01"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUyMTg4MQ==", "bodyText": "I will check it", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/567#discussion_r508521881", "createdAt": "2020-10-20T13:51:15Z", "author": {"login": "temanbrcom"}, "path": "server/pom.xml", "diffHunk": "@@ -168,6 +168,12 @@\n             <version>${mockito.core.version}</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUxOTIwNA=="}, "originalCommit": {"oid": "4acae56be8ace0f5a83af4d9fbe5774bd08d5a01"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUyMjMwNQ==", "bodyText": "Should be a part of eclipse IP already, but better double check.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/567#discussion_r508522305", "createdAt": "2020-10-20T13:51:45Z", "author": {"login": "asatklichov"}, "path": "server/pom.xml", "diffHunk": "@@ -168,6 +168,12 @@\n             <version>${mockito.core.version}</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUxOTIwNA=="}, "originalCommit": {"oid": "4acae56be8ace0f5a83af4d9fbe5774bd08d5a01"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2MTA0OQ==", "bodyText": "Should be a part of this https://dev.eclipse.org/ipzilla/show_bug.cgi?id=21365\nAlready approved", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/567#discussion_r508561049", "createdAt": "2020-10-20T14:32:43Z", "author": {"login": "temanbrcom"}, "path": "server/pom.xml", "diffHunk": "@@ -168,6 +168,12 @@\n             <version>${mockito.core.version}</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUxOTIwNA=="}, "originalCommit": {"oid": "4acae56be8ace0f5a83af4d9fbe5774bd08d5a01"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTQ0OTc5OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/delegates/communications/ServerCommunicationsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzo1MDoxMlrOHk9prA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzo1MDoxMlrOHk9prA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUyMDg3Ng==", "bodyText": "safer check: !\"testCancelProgressNotification()\".equals(info.getDisplayName())", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/567#discussion_r508520876", "createdAt": "2020-10-20T13:50:12Z", "author": {"login": "asatklichov"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/service/delegates/communications/ServerCommunicationsTest.java", "diffHunk": "@@ -16,42 +16,157 @@\n package com.broadcom.lsp.cobol.service.delegates.communications;\n \n import com.broadcom.lsp.cobol.service.utils.FileSystemService;\n-import org.eclipse.lsp4j.MessageParams;\n-import org.eclipse.lsp4j.MessageType;\n+import com.google.inject.Provider;\n+import org.eclipse.lsp4j.*;\n import org.eclipse.lsp4j.services.LanguageClient;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.mockito.ArgumentCaptor;\n+import org.junit.jupiter.api.TestInfo;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.internal.util.reflection.FieldSetter;\n+import org.mockito.junit.jupiter.MockitoExtension;\n \n+import java.util.*;\n+\n+import static com.broadcom.lsp.cobol.service.delegates.communications.ServerCommunications.*;\n import static com.broadcom.lsp.cobol.service.delegates.validations.UseCaseUtils.DOCUMENT_URI;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.mockito.ArgumentCaptor.forClass;\n+import static org.eclipse.lsp4j.MessageType.Error;\n+import static org.eclipse.lsp4j.MessageType.Info;\n import static org.mockito.Mockito.*;\n \n /** This unit tests verifies the capabilities of {@link ServerCommunications} */\n+@ExtendWith(MockitoExtension.class)\n class ServerCommunicationsTest {\n-  // TODO: Cover the rest of the methods\n+\n+  private static final int TEST_TIMEOUT = 10000;\n+\n+  @Mock\n+  private Provider<LanguageClient> provider;\n+\n+  @Mock\n+  private LanguageClient client;\n+\n+  @Mock\n+  private FileSystemService files;\n+\n+  @Mock\n+  private HashSet<String> uriInProgress;\n+\n+  @InjectMocks\n+  private ServerCommunications communications;\n+\n+  @BeforeEach\n+  void init(TestInfo info) {\n+    if (!info.getDisplayName().equals(\"testCancelProgressNotification()\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4acae56be8ace0f5a83af4d9fbe5774bd08d5a01"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTQ4ODU1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/delegates/communications/ServerCommunicationsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzo1NjoxNlrOHk-B_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDowODoyOFrOHk-zFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUyNzEwMQ==", "bodyText": "Java 9 Map.of   can be used if we do not modify the map", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/567#discussion_r508527101", "createdAt": "2020-10-20T13:56:16Z", "author": {"login": "asatklichov"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/service/delegates/communications/ServerCommunicationsTest.java", "diffHunk": "@@ -16,42 +16,157 @@\n package com.broadcom.lsp.cobol.service.delegates.communications;\n \n import com.broadcom.lsp.cobol.service.utils.FileSystemService;\n-import org.eclipse.lsp4j.MessageParams;\n-import org.eclipse.lsp4j.MessageType;\n+import com.google.inject.Provider;\n+import org.eclipse.lsp4j.*;\n import org.eclipse.lsp4j.services.LanguageClient;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.mockito.ArgumentCaptor;\n+import org.junit.jupiter.api.TestInfo;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.internal.util.reflection.FieldSetter;\n+import org.mockito.junit.jupiter.MockitoExtension;\n \n+import java.util.*;\n+\n+import static com.broadcom.lsp.cobol.service.delegates.communications.ServerCommunications.*;\n import static com.broadcom.lsp.cobol.service.delegates.validations.UseCaseUtils.DOCUMENT_URI;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.mockito.ArgumentCaptor.forClass;\n+import static org.eclipse.lsp4j.MessageType.Error;\n+import static org.eclipse.lsp4j.MessageType.Info;\n import static org.mockito.Mockito.*;\n \n /** This unit tests verifies the capabilities of {@link ServerCommunications} */\n+@ExtendWith(MockitoExtension.class)\n class ServerCommunicationsTest {\n-  // TODO: Cover the rest of the methods\n+\n+  private static final int TEST_TIMEOUT = 10000;\n+\n+  @Mock\n+  private Provider<LanguageClient> provider;\n+\n+  @Mock\n+  private LanguageClient client;\n+\n+  @Mock\n+  private FileSystemService files;\n+\n+  @Mock\n+  private HashSet<String> uriInProgress;\n+\n+  @InjectMocks\n+  private ServerCommunications communications;\n+\n+  @BeforeEach\n+  void init(TestInfo info) {\n+    if (!info.getDisplayName().equals(\"testCancelProgressNotification()\")) {\n+      when(provider.get()).thenReturn(client);\n+    }\n+  }\n+\n   /**\n    * Method {@link ServerCommunications#notifyThatDocumentAnalysed(String)} should asynchronously\n    * call logging on the client for a specific message with a document name retrieved from uri\n    */\n   @Test\n-  void testNotifyThatDocumentAnalysed() {\n+  void testNotifyThatDocumentAnalysed_multi_segment_uri() {\n     assertDocumentAnalysedNotification(DOCUMENT_URI, \"document.cbl\");\n     assertDocumentAnalysedNotification(\"document.cbl\", \"document.cbl\");\n     assertDocumentAnalysedNotification(\"\", \"\");\n   }\n \n+  /**\n+   * Method {@link ServerCommunications#notifyThatEngineNotFound(String)} should asynchronously\n+   * populate message with a language type on the client\n+   */\n+  @Test\n+  void testNotifyThatEngineNotFound() {\n+    String data = UUID.randomUUID().toString();\n+    communications.notifyThatEngineNotFound(data);\n+    verify(client, timeout(TEST_TIMEOUT)).showMessage(eq(new MessageParams(Error, CANNOT_FIND_LANGUAGE_ENGINE + data)));\n+  }\n+\n+  /**\n+   * Method {@link ServerCommunications#notifyThatLoadingInProgress(String)} should asynchronously\n+   * populate message with an URI on the client\n+   */\n+  @Test\n+  void testNotifyThatLoadingInProgress() {\n+    String data = UUID.randomUUID().toString();\n+    when(files.decodeURI(data)).thenReturn(data);\n+\n+    communications.notifyThatLoadingInProgress(data);\n+    verify(client, timeout(TEST_TIMEOUT)).showMessage(eq(new MessageParams(Info, data + SYNTAX_ANALYSIS_IN_PROGRESS)));\n+  }\n+\n+  /**\n+   * Method {@link ServerCommunications#notifyThatDocumentAnalysed(String)} should asynchronously\n+   * call logging on the client for a specific message with an URI\n+   */\n+  @Test\n+  void testNotifyThatDocumentAnalysed() {\n+    String data = UUID.randomUUID().toString();\n+    when(files.decodeURI(data)).thenReturn(data);\n+\n+    communications.notifyThatDocumentAnalysed(data);\n+    verify(client, timeout(TEST_TIMEOUT)).logMessage(eq(new MessageParams(Info, NO_SYNTAX_ERRORS + data)));\n+  }\n+\n+  /**\n+   * Method {@link ServerCommunications#notifyThatExtensionIsUnsupported(String)} should asynchronously\n+   * call logging on the client for a specific message with an extension\n+   */\n+  @Test\n+  void testNotifyThatExtensionIsUnsupported() {\n+    String data = UUID.randomUUID().toString();\n+\n+    communications.notifyThatExtensionIsUnsupported(data);\n+    verify(client, timeout(TEST_TIMEOUT)).logMessage(eq(new MessageParams(Error, EXTENSION_UNSUPPORTED + data)));\n+  }\n+\n+  /**\n+   * Method {@link ServerCommunications#publishDiagnostics(Map)} should\n+   * raise a diagnostic message to the client with syntax error retrieved by the COBOL\n+   * LSP server for related files.\n+   */\n+  @Test\n+  void testPublishDiagnostics() {\n+    String uri = UUID.randomUUID().toString();\n+\n+    // Prepare diagnostic map\n+    Map<String, List<Diagnostic>> map = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4acae56be8ace0f5a83af4d9fbe5774bd08d5a01"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUzOTY2OQ==", "bodyText": "Fixed", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/567#discussion_r508539669", "createdAt": "2020-10-20T14:08:28Z", "author": {"login": "Nurkambay"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/service/delegates/communications/ServerCommunicationsTest.java", "diffHunk": "@@ -16,42 +16,157 @@\n package com.broadcom.lsp.cobol.service.delegates.communications;\n \n import com.broadcom.lsp.cobol.service.utils.FileSystemService;\n-import org.eclipse.lsp4j.MessageParams;\n-import org.eclipse.lsp4j.MessageType;\n+import com.google.inject.Provider;\n+import org.eclipse.lsp4j.*;\n import org.eclipse.lsp4j.services.LanguageClient;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.mockito.ArgumentCaptor;\n+import org.junit.jupiter.api.TestInfo;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.internal.util.reflection.FieldSetter;\n+import org.mockito.junit.jupiter.MockitoExtension;\n \n+import java.util.*;\n+\n+import static com.broadcom.lsp.cobol.service.delegates.communications.ServerCommunications.*;\n import static com.broadcom.lsp.cobol.service.delegates.validations.UseCaseUtils.DOCUMENT_URI;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.mockito.ArgumentCaptor.forClass;\n+import static org.eclipse.lsp4j.MessageType.Error;\n+import static org.eclipse.lsp4j.MessageType.Info;\n import static org.mockito.Mockito.*;\n \n /** This unit tests verifies the capabilities of {@link ServerCommunications} */\n+@ExtendWith(MockitoExtension.class)\n class ServerCommunicationsTest {\n-  // TODO: Cover the rest of the methods\n+\n+  private static final int TEST_TIMEOUT = 10000;\n+\n+  @Mock\n+  private Provider<LanguageClient> provider;\n+\n+  @Mock\n+  private LanguageClient client;\n+\n+  @Mock\n+  private FileSystemService files;\n+\n+  @Mock\n+  private HashSet<String> uriInProgress;\n+\n+  @InjectMocks\n+  private ServerCommunications communications;\n+\n+  @BeforeEach\n+  void init(TestInfo info) {\n+    if (!info.getDisplayName().equals(\"testCancelProgressNotification()\")) {\n+      when(provider.get()).thenReturn(client);\n+    }\n+  }\n+\n   /**\n    * Method {@link ServerCommunications#notifyThatDocumentAnalysed(String)} should asynchronously\n    * call logging on the client for a specific message with a document name retrieved from uri\n    */\n   @Test\n-  void testNotifyThatDocumentAnalysed() {\n+  void testNotifyThatDocumentAnalysed_multi_segment_uri() {\n     assertDocumentAnalysedNotification(DOCUMENT_URI, \"document.cbl\");\n     assertDocumentAnalysedNotification(\"document.cbl\", \"document.cbl\");\n     assertDocumentAnalysedNotification(\"\", \"\");\n   }\n \n+  /**\n+   * Method {@link ServerCommunications#notifyThatEngineNotFound(String)} should asynchronously\n+   * populate message with a language type on the client\n+   */\n+  @Test\n+  void testNotifyThatEngineNotFound() {\n+    String data = UUID.randomUUID().toString();\n+    communications.notifyThatEngineNotFound(data);\n+    verify(client, timeout(TEST_TIMEOUT)).showMessage(eq(new MessageParams(Error, CANNOT_FIND_LANGUAGE_ENGINE + data)));\n+  }\n+\n+  /**\n+   * Method {@link ServerCommunications#notifyThatLoadingInProgress(String)} should asynchronously\n+   * populate message with an URI on the client\n+   */\n+  @Test\n+  void testNotifyThatLoadingInProgress() {\n+    String data = UUID.randomUUID().toString();\n+    when(files.decodeURI(data)).thenReturn(data);\n+\n+    communications.notifyThatLoadingInProgress(data);\n+    verify(client, timeout(TEST_TIMEOUT)).showMessage(eq(new MessageParams(Info, data + SYNTAX_ANALYSIS_IN_PROGRESS)));\n+  }\n+\n+  /**\n+   * Method {@link ServerCommunications#notifyThatDocumentAnalysed(String)} should asynchronously\n+   * call logging on the client for a specific message with an URI\n+   */\n+  @Test\n+  void testNotifyThatDocumentAnalysed() {\n+    String data = UUID.randomUUID().toString();\n+    when(files.decodeURI(data)).thenReturn(data);\n+\n+    communications.notifyThatDocumentAnalysed(data);\n+    verify(client, timeout(TEST_TIMEOUT)).logMessage(eq(new MessageParams(Info, NO_SYNTAX_ERRORS + data)));\n+  }\n+\n+  /**\n+   * Method {@link ServerCommunications#notifyThatExtensionIsUnsupported(String)} should asynchronously\n+   * call logging on the client for a specific message with an extension\n+   */\n+  @Test\n+  void testNotifyThatExtensionIsUnsupported() {\n+    String data = UUID.randomUUID().toString();\n+\n+    communications.notifyThatExtensionIsUnsupported(data);\n+    verify(client, timeout(TEST_TIMEOUT)).logMessage(eq(new MessageParams(Error, EXTENSION_UNSUPPORTED + data)));\n+  }\n+\n+  /**\n+   * Method {@link ServerCommunications#publishDiagnostics(Map)} should\n+   * raise a diagnostic message to the client with syntax error retrieved by the COBOL\n+   * LSP server for related files.\n+   */\n+  @Test\n+  void testPublishDiagnostics() {\n+    String uri = UUID.randomUUID().toString();\n+\n+    // Prepare diagnostic map\n+    Map<String, List<Diagnostic>> map = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUyNzEwMQ=="}, "originalCommit": {"oid": "4acae56be8ace0f5a83af4d9fbe5774bd08d5a01"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTQ4OTY0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/delegates/communications/ServerCommunications.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzo1NjoyM1rOHk-CsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzo1NjoyM1rOHk-CsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUyNzI4MA==", "bodyText": "The actual fix", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/567#discussion_r508527280", "createdAt": "2020-10-20T13:56:23Z", "author": {"login": "Nurkambay"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/delegates/communications/ServerCommunications.java", "diffHunk": "@@ -109,7 +115,7 @@ public void notifyThatDocumentAnalysed(String uri) {\n    */\n   @Override\n   public void notifyThatExtensionIsUnsupported(String extension) {\n-    runAsync(() -> showMessage(Error, \"The given document extension is unsupported: \" + extension));\n+    runAsync(() -> logMessage(Error, EXTENSION_UNSUPPORTED + extension));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4acae56be8ace0f5a83af4d9fbe5774bd08d5a01"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTUwOTczOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/delegates/communications/ServerCommunications.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzo1ODo1NlrOHk-PTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDoxMToxNFrOHk-9Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUzMDUwOA==", "bodyText": "From Guice docs: Avoid using field injection with final fields, which has weak semantics.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/567#discussion_r508530508", "createdAt": "2020-10-20T13:58:56Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/delegates/communications/ServerCommunications.java", "diffHunk": "@@ -43,8 +43,14 @@\n  */\n @Slf4j\n public class ServerCommunications implements Communications {\n-  private Provider<LanguageClient> provider;\n-  private FileSystemService files;\n+\n+  static final String CANNOT_FIND_LANGUAGE_ENGINE = \"Cannot find a language engine for the given language ID: \";\n+  static final String SYNTAX_ANALYSIS_IN_PROGRESS = \": Syntax analysis in progress\";\n+  static final String NO_SYNTAX_ERRORS = \"No syntax errors detected in \";\n+  static final String EXTENSION_UNSUPPORTED = \"The given document extension is unsupported: \";\n+\n+  private final Provider<LanguageClient> provider;\n+  private final FileSystemService files;\n \n   private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(5);\n   private final Set<String> uriInProgress = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4acae56be8ace0f5a83af4d9fbe5774bd08d5a01"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU0MjI3NA==", "bodyText": "Fixed", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/567#discussion_r508542274", "createdAt": "2020-10-20T14:11:14Z", "author": {"login": "Nurkambay"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/delegates/communications/ServerCommunications.java", "diffHunk": "@@ -43,8 +43,14 @@\n  */\n @Slf4j\n public class ServerCommunications implements Communications {\n-  private Provider<LanguageClient> provider;\n-  private FileSystemService files;\n+\n+  static final String CANNOT_FIND_LANGUAGE_ENGINE = \"Cannot find a language engine for the given language ID: \";\n+  static final String SYNTAX_ANALYSIS_IN_PROGRESS = \": Syntax analysis in progress\";\n+  static final String NO_SYNTAX_ERRORS = \"No syntax errors detected in \";\n+  static final String EXTENSION_UNSUPPORTED = \"The given document extension is unsupported: \";\n+\n+  private final Provider<LanguageClient> provider;\n+  private final FileSystemService files;\n \n   private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(5);\n   private final Set<String> uriInProgress = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUzMDUwOA=="}, "originalCommit": {"oid": "4acae56be8ace0f5a83af4d9fbe5774bd08d5a01"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTc1MjI0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/delegates/communications/ServerCommunicationsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDo0MzoyOVrOHlAqqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDo0NTowNVrOHlAv5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU3MDI4Mg==", "bodyText": "clean-up needed", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/567#discussion_r508570282", "createdAt": "2020-10-20T14:43:29Z", "author": {"login": "asatklichov"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/service/delegates/communications/ServerCommunicationsTest.java", "diffHunk": "@@ -16,42 +16,156 @@\n package com.broadcom.lsp.cobol.service.delegates.communications;\n \n import com.broadcom.lsp.cobol.service.utils.FileSystemService;\n-import org.eclipse.lsp4j.MessageParams;\n-import org.eclipse.lsp4j.MessageType;\n+import com.google.inject.Provider;\n+import org.eclipse.lsp4j.*;\n import org.eclipse.lsp4j.services.LanguageClient;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.mockito.ArgumentCaptor;\n+import org.junit.jupiter.api.TestInfo;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.internal.util.reflection.FieldSetter;\n+import org.mockito.junit.jupiter.MockitoExtension;\n \n+import java.util.*;\n+\n+import static com.broadcom.lsp.cobol.service.delegates.communications.ServerCommunications.*;\n import static com.broadcom.lsp.cobol.service.delegates.validations.UseCaseUtils.DOCUMENT_URI;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.mockito.ArgumentCaptor.forClass;\n+import static org.eclipse.lsp4j.MessageType.Error;\n+import static org.eclipse.lsp4j.MessageType.Info;\n import static org.mockito.Mockito.*;\n \n /** This unit tests verifies the capabilities of {@link ServerCommunications} */\n+@ExtendWith(MockitoExtension.class)\n class ServerCommunicationsTest {\n-  // TODO: Cover the rest of the methods\n+\n+  private static final int TEST_TIMEOUT = 10000;\n+\n+  @Mock\n+  private Provider<LanguageClient> provider;\n+\n+  @Mock\n+  private LanguageClient client;\n+\n+  @Mock\n+  private FileSystemService files;\n+\n+  @Mock\n+  private HashSet<String> uriInProgress;\n+\n+  @InjectMocks\n+  private ServerCommunications communications;\n+\n+  @BeforeEach\n+  void init(TestInfo info) {\n+    if (!\"testCancelProgressNotification()\".equals(info.getDisplayName())) {\n+      when(provider.get()).thenReturn(client);\n+    }\n+  }\n+\n   /**\n    * Method {@link ServerCommunications#notifyThatDocumentAnalysed(String)} should asynchronously\n    * call logging on the client for a specific message with a document name retrieved from uri\n    */\n   @Test\n-  void testNotifyThatDocumentAnalysed() {\n+  void testNotifyThatDocumentAnalysed_multi_segment_uri() {\n     assertDocumentAnalysedNotification(DOCUMENT_URI, \"document.cbl\");\n     assertDocumentAnalysedNotification(\"document.cbl\", \"document.cbl\");\n     assertDocumentAnalysedNotification(\"\", \"\");\n   }\n \n+  /**\n+   * Method {@link ServerCommunications#notifyThatEngineNotFound(String)} should asynchronously\n+   * populate message with a language type on the client\n+   */\n+  @Test\n+  void testNotifyThatEngineNotFound() {\n+    String data = UUID.randomUUID().toString();\n+    communications.notifyThatEngineNotFound(data);\n+    verify(client, timeout(TEST_TIMEOUT)).showMessage(eq(new MessageParams(Error, CANNOT_FIND_LANGUAGE_ENGINE + data)));\n+  }\n+\n+  /**\n+   * Method {@link ServerCommunications#notifyThatLoadingInProgress(String)} should asynchronously\n+   * populate message with an URI on the client\n+   */\n+  @Test\n+  void testNotifyThatLoadingInProgress() {\n+    String data = UUID.randomUUID().toString();\n+    when(files.decodeURI(data)).thenReturn(data);\n+\n+    communications.notifyThatLoadingInProgress(data);\n+    verify(client, timeout(TEST_TIMEOUT)).showMessage(eq(new MessageParams(Info, data + SYNTAX_ANALYSIS_IN_PROGRESS)));\n+  }\n+\n+  /**\n+   * Method {@link ServerCommunications#notifyThatDocumentAnalysed(String)} should asynchronously\n+   * call logging on the client for a specific message with an URI\n+   */\n+  @Test\n+  void testNotifyThatDocumentAnalysed() {\n+    String data = UUID.randomUUID().toString();\n+    when(files.decodeURI(data)).thenReturn(data);\n+\n+    communications.notifyThatDocumentAnalysed(data);\n+    verify(client, timeout(TEST_TIMEOUT)).logMessage(eq(new MessageParams(Info, NO_SYNTAX_ERRORS + data)));\n+  }\n+\n+  /**\n+   * Method {@link ServerCommunications#notifyThatExtensionIsUnsupported(String)} should asynchronously\n+   * call logging on the client for a specific message with an extension\n+   */\n+  @Test\n+  void testNotifyThatExtensionIsUnsupported() {\n+    String data = UUID.randomUUID().toString();\n+\n+    communications.notifyThatExtensionIsUnsupported(data);\n+    verify(client, timeout(TEST_TIMEOUT)).logMessage(eq(new MessageParams(Error, EXTENSION_UNSUPPORTED + data)));\n+  }\n+\n+  /**\n+   * Method {@link ServerCommunications#publishDiagnostics(Map)} should\n+   * raise a diagnostic message to the client with syntax error retrieved by the COBOL\n+   * LSP server for related files.\n+   */\n+  @Test\n+  void testPublishDiagnostics() {\n+    String uri = UUID.randomUUID().toString();\n+\n+    // Prepare diagnostic map\n+    Diagnostic diagnostic = new Diagnostic(new Range(), \"\\r\\ntest\\r\\n\");\n+    List<Diagnostic> diagnostics = List.of(diagnostic);\n+    //map.put(uri, diagnostics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "254db8d462536afe6150cc852d1a3069add53517"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU3MTYyMw==", "bodyText": "Fixed", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/567#discussion_r508571623", "createdAt": "2020-10-20T14:45:05Z", "author": {"login": "Nurkambay"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/service/delegates/communications/ServerCommunicationsTest.java", "diffHunk": "@@ -16,42 +16,156 @@\n package com.broadcom.lsp.cobol.service.delegates.communications;\n \n import com.broadcom.lsp.cobol.service.utils.FileSystemService;\n-import org.eclipse.lsp4j.MessageParams;\n-import org.eclipse.lsp4j.MessageType;\n+import com.google.inject.Provider;\n+import org.eclipse.lsp4j.*;\n import org.eclipse.lsp4j.services.LanguageClient;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.mockito.ArgumentCaptor;\n+import org.junit.jupiter.api.TestInfo;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.internal.util.reflection.FieldSetter;\n+import org.mockito.junit.jupiter.MockitoExtension;\n \n+import java.util.*;\n+\n+import static com.broadcom.lsp.cobol.service.delegates.communications.ServerCommunications.*;\n import static com.broadcom.lsp.cobol.service.delegates.validations.UseCaseUtils.DOCUMENT_URI;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.mockito.ArgumentCaptor.forClass;\n+import static org.eclipse.lsp4j.MessageType.Error;\n+import static org.eclipse.lsp4j.MessageType.Info;\n import static org.mockito.Mockito.*;\n \n /** This unit tests verifies the capabilities of {@link ServerCommunications} */\n+@ExtendWith(MockitoExtension.class)\n class ServerCommunicationsTest {\n-  // TODO: Cover the rest of the methods\n+\n+  private static final int TEST_TIMEOUT = 10000;\n+\n+  @Mock\n+  private Provider<LanguageClient> provider;\n+\n+  @Mock\n+  private LanguageClient client;\n+\n+  @Mock\n+  private FileSystemService files;\n+\n+  @Mock\n+  private HashSet<String> uriInProgress;\n+\n+  @InjectMocks\n+  private ServerCommunications communications;\n+\n+  @BeforeEach\n+  void init(TestInfo info) {\n+    if (!\"testCancelProgressNotification()\".equals(info.getDisplayName())) {\n+      when(provider.get()).thenReturn(client);\n+    }\n+  }\n+\n   /**\n    * Method {@link ServerCommunications#notifyThatDocumentAnalysed(String)} should asynchronously\n    * call logging on the client for a specific message with a document name retrieved from uri\n    */\n   @Test\n-  void testNotifyThatDocumentAnalysed() {\n+  void testNotifyThatDocumentAnalysed_multi_segment_uri() {\n     assertDocumentAnalysedNotification(DOCUMENT_URI, \"document.cbl\");\n     assertDocumentAnalysedNotification(\"document.cbl\", \"document.cbl\");\n     assertDocumentAnalysedNotification(\"\", \"\");\n   }\n \n+  /**\n+   * Method {@link ServerCommunications#notifyThatEngineNotFound(String)} should asynchronously\n+   * populate message with a language type on the client\n+   */\n+  @Test\n+  void testNotifyThatEngineNotFound() {\n+    String data = UUID.randomUUID().toString();\n+    communications.notifyThatEngineNotFound(data);\n+    verify(client, timeout(TEST_TIMEOUT)).showMessage(eq(new MessageParams(Error, CANNOT_FIND_LANGUAGE_ENGINE + data)));\n+  }\n+\n+  /**\n+   * Method {@link ServerCommunications#notifyThatLoadingInProgress(String)} should asynchronously\n+   * populate message with an URI on the client\n+   */\n+  @Test\n+  void testNotifyThatLoadingInProgress() {\n+    String data = UUID.randomUUID().toString();\n+    when(files.decodeURI(data)).thenReturn(data);\n+\n+    communications.notifyThatLoadingInProgress(data);\n+    verify(client, timeout(TEST_TIMEOUT)).showMessage(eq(new MessageParams(Info, data + SYNTAX_ANALYSIS_IN_PROGRESS)));\n+  }\n+\n+  /**\n+   * Method {@link ServerCommunications#notifyThatDocumentAnalysed(String)} should asynchronously\n+   * call logging on the client for a specific message with an URI\n+   */\n+  @Test\n+  void testNotifyThatDocumentAnalysed() {\n+    String data = UUID.randomUUID().toString();\n+    when(files.decodeURI(data)).thenReturn(data);\n+\n+    communications.notifyThatDocumentAnalysed(data);\n+    verify(client, timeout(TEST_TIMEOUT)).logMessage(eq(new MessageParams(Info, NO_SYNTAX_ERRORS + data)));\n+  }\n+\n+  /**\n+   * Method {@link ServerCommunications#notifyThatExtensionIsUnsupported(String)} should asynchronously\n+   * call logging on the client for a specific message with an extension\n+   */\n+  @Test\n+  void testNotifyThatExtensionIsUnsupported() {\n+    String data = UUID.randomUUID().toString();\n+\n+    communications.notifyThatExtensionIsUnsupported(data);\n+    verify(client, timeout(TEST_TIMEOUT)).logMessage(eq(new MessageParams(Error, EXTENSION_UNSUPPORTED + data)));\n+  }\n+\n+  /**\n+   * Method {@link ServerCommunications#publishDiagnostics(Map)} should\n+   * raise a diagnostic message to the client with syntax error retrieved by the COBOL\n+   * LSP server for related files.\n+   */\n+  @Test\n+  void testPublishDiagnostics() {\n+    String uri = UUID.randomUUID().toString();\n+\n+    // Prepare diagnostic map\n+    Diagnostic diagnostic = new Diagnostic(new Range(), \"\\r\\ntest\\r\\n\");\n+    List<Diagnostic> diagnostics = List.of(diagnostic);\n+    //map.put(uri, diagnostics);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU3MDI4Mg=="}, "originalCommit": {"oid": "254db8d462536afe6150cc852d1a3069add53517"}, "originalPosition": 131}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3797, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}