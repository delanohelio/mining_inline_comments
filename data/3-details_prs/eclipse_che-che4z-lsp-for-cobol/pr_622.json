{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NjM4NzEx", "number": 622, "title": "using custom thread pool executor #615", "bodyText": "Signed-off-by: Azat Satklichov azat.satklichov@broadcom.com", "createdAt": "2020-11-06T10:04:07Z", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622", "merged": true, "mergeCommit": {"oid": "ca84abe7a1fe783c6ebe09bb28b543e3ffffd7e8"}, "closed": true, "closedAt": "2020-11-11T10:55:49Z", "author": {"login": "asatklichov"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZ0UYYAFqTUyNTAyNTUwOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbbkYfAFqTUyODA1NTk0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MDI1NTA5", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#pullrequestreview-525025509", "createdAt": "2020-11-06T10:22:40Z", "commit": {"oid": "ea27044a59b96aceb9db2c8e860090b07bc56442"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDoyMjo0MFrOHuoRxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDoyMjo0MFrOHuoRxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY1NjQ1Mw==", "bodyText": "Any specific reason to start the server using this executor service?\nIf we don't, we can use customExecutor to stop all server processing by shutting down the customExecutor during shutdown call before exit.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r518656453", "createdAt": "2020-11-06T10:22:40Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/LangServerBootstrap.java", "diffHunk": "@@ -78,30 +85,37 @@ private void start(\n     }\n   }\n \n-  Launcher<LanguageClient> launchServer(@NonNull String[] args, @NonNull LanguageServer server)\n+  Launcher<LanguageClient> launchServer(\n+      @NonNull String[] args,\n+      @NonNull LanguageServer server,\n+      @NonNull ExecutorService executorService)\n       throws IOException {\n     return isPipeEnabled(args)\n-        ? createServerLauncher(server, System.in, System.out)\n-        : createServerLauncherWithSocket(server);\n+        ? createServerLauncher(server, System.in, System.out, executorService)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea27044a59b96aceb9db2c8e860090b07bc56442"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MDQ0MzA3", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#pullrequestreview-525044307", "createdAt": "2020-11-06T10:49:41Z", "commit": {"oid": "ea27044a59b96aceb9db2c8e860090b07bc56442"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDo0OTo0MlrOHupLjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDo1NDoxNlrOHupVJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3MTI0Ng==", "bodyText": "So, it creates a new executor on each call?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r518671246", "createdAt": "2020-11-06T10:49:42Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.broadcom.lsp.cobol.service.utils;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+\n+import java.util.concurrent.*;\n+\n+/**\n+ * {@inheritDoc}\n+ *\n+ * <p>Implements API for our CustomThreadPoolExecutor created using ThreadPoolExecutor and\n+ * ScheduledThreadPoolExecutor.\n+ *\n+ * <p>The main configuration parameters are: corePoolSize, maximumPoolSize, and keepAliveTime. The\n+ * pool consists of a fixed number of core threads that are kept inside all the time, and some\n+ * excessive threads that may be spawned and then terminated when they are not needed anymore.\n+ */\n+@Singleton\n+public class CustomThreadPoolExecutorService implements CustomThreadPoolExecutor {\n+\n+  private int corePoolSize;\n+  private int maximumPoolSize;\n+  private int keepAliveTime;\n+  private int corePoolSizeForScheduledThreadPool;\n+\n+  @Inject\n+  public CustomThreadPoolExecutorService(\n+      @Named(\"CORE-POOL-SIZE\") int corePoolSize,\n+      @Named(\"MAX-POOL-SIZE\") int maximumPoolSize,\n+      @Named(\"KEEP-ALIVE-TIME-IN-SECONDS\") int keepAliveTim,\n+      @Named(\"CORE-POOL-SIZE-FOR-SCHEDULED-POOL\") int corePoolSizeForScheduledThreadPool) {\n+    this.corePoolSize = corePoolSize;\n+    this.maximumPoolSize = maximumPoolSize;\n+    this.keepAliveTime = keepAliveTime;\n+    this.corePoolSizeForScheduledThreadPool = corePoolSizeForScheduledThreadPool;\n+  }\n+\n+  private ExecutorService getThreadPoolExecutor(\n+      int corePoolSize, int maxPoolSize, long keepAliveTime) {\n+    return new ThreadPoolExecutor(\n+        corePoolSize,\n+        maxPoolSize,\n+        keepAliveTime,\n+        TimeUnit.SECONDS,\n+        new LinkedBlockingQueue<Runnable>());\n+  }\n+\n+  private ScheduledExecutorService getScheduledThreadPoolExecutor(\n+      int corePoolSizeForScheduledThreadPool) {\n+    return new ScheduledThreadPoolExecutor(corePoolSizeForScheduledThreadPool);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea27044a59b96aceb9db2c8e860090b07bc56442"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3MTk1Nw==", "bodyText": "Could you, please, rewrite it to avoid using the LangServerCtx? We plan to get rid of this class", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r518671957", "createdAt": "2020-11-06T10:51:02Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/LangServerBootstrapTest.java", "diffHunk": "@@ -49,10 +65,12 @@ void initCtx() {\n \n     // Bound class in Service module\n     CobolLanguageServer server = getInjector().getInstance(CobolLanguageServer.class);\n+    CustomThreadPoolExecutor customExecutor = LangServerCtx.getInjector().getInstance(CustomThreadPoolExecutor.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea27044a59b96aceb9db2c8e860090b07bc56442"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3MzcwMw==", "bodyText": "Will schedule each task in a new executor", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r518673703", "createdAt": "2020-11-06T10:54:16Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/delegates/communications/ServerCommunications.java", "diffHunk": "@@ -83,7 +87,7 @@ public void notifyThatEngineNotFound(String languageType) {\n   public void notifyThatLoadingInProgress(String uri) {\n     String decodedUri = files.decodeURI(uri);\n     uriInProgress.add(decodedUri);\n-    executor.schedule(\n+    customExecutor.getScheduledThreadPoolExecutor().schedule(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea27044a59b96aceb9db2c8e860090b07bc56442"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NjU4MjYw", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#pullrequestreview-525658260", "createdAt": "2020-11-07T14:54:18Z", "commit": {"oid": "ea27044a59b96aceb9db2c8e860090b07bc56442"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNDo1NDoxOFrOHvIjpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNTowNDoxNlrOHvInIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4NTMxOQ==", "bodyText": "Why are you bind CustomThreadPoolExecutor in two modules? I think that we can define it only in one place.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r519185319", "createdAt": "2020-11-07T14:54:18Z", "author": {"login": "grianbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/domain/modules/ServiceModule.java", "diffHunk": "@@ -50,6 +53,7 @@\n public class ServiceModule extends AbstractModule {\n   @Override\n   protected void configure() {\n+    bind(CustomThreadPoolExecutor.class).to(CustomThreadPoolExecutorService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea27044a59b96aceb9db2c8e860090b07bc56442"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4NjIwOQ==", "bodyText": "I suppose that this getter also must return the same ThreadPool each time.\nI see that you want to rewrite getScheduledThreadPoolExecutor, I just want to mark this place for not to forget.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r519186209", "createdAt": "2020-11-07T15:04:16Z", "author": {"login": "grianbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.broadcom.lsp.cobol.service.utils;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+\n+import java.util.concurrent.*;\n+\n+/**\n+ * {@inheritDoc}\n+ *\n+ * <p>Implements API for our CustomThreadPoolExecutor created using ThreadPoolExecutor and\n+ * ScheduledThreadPoolExecutor.\n+ *\n+ * <p>The main configuration parameters are: corePoolSize, maximumPoolSize, and keepAliveTime. The\n+ * pool consists of a fixed number of core threads that are kept inside all the time, and some\n+ * excessive threads that may be spawned and then terminated when they are not needed anymore.\n+ */\n+@Singleton\n+public class CustomThreadPoolExecutorService implements CustomThreadPoolExecutor {\n+\n+  private int corePoolSize;\n+  private int maximumPoolSize;\n+  private int keepAliveTime;\n+  private int corePoolSizeForScheduledThreadPool;\n+\n+  @Inject\n+  public CustomThreadPoolExecutorService(\n+      @Named(\"CORE-POOL-SIZE\") int corePoolSize,\n+      @Named(\"MAX-POOL-SIZE\") int maximumPoolSize,\n+      @Named(\"KEEP-ALIVE-TIME-IN-SECONDS\") int keepAliveTim,\n+      @Named(\"CORE-POOL-SIZE-FOR-SCHEDULED-POOL\") int corePoolSizeForScheduledThreadPool) {\n+    this.corePoolSize = corePoolSize;\n+    this.maximumPoolSize = maximumPoolSize;\n+    this.keepAliveTime = keepAliveTime;\n+    this.corePoolSizeForScheduledThreadPool = corePoolSizeForScheduledThreadPool;\n+  }\n+\n+  private ExecutorService getThreadPoolExecutor(\n+      int corePoolSize, int maxPoolSize, long keepAliveTime) {\n+    return new ThreadPoolExecutor(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea27044a59b96aceb9db2c8e860090b07bc56442"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MjUxMjk1", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#pullrequestreview-526251295", "createdAt": "2020-11-09T13:22:41Z", "commit": {"oid": "6c2f16d38e7dbf624fed54d4b2c6181c3c2a17d9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMzoyMjo0MVrOHvutog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMzoyNzoyNVrOHvu47Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgxMDQ2Ng==", "bodyText": "Why do you store those values?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r519810466", "createdAt": "2020-11-09T13:22:41Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.broadcom.lsp.cobol.service.utils;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+import lombok.NonNull;\n+\n+import java.util.Map;\n+import java.util.concurrent.*;\n+\n+import static java.util.Collections.singletonMap;\n+\n+/**\n+ * {@inheritDoc}\n+ *\n+ * <p>Implements API for our CustomThreadPoolExecutor created using ThreadPoolExecutor and\n+ * ScheduledThreadPoolExecutor.\n+ *\n+ * <p>The main configuration parameters are: corePoolSize, maximumPoolSize, and keepAliveTime. The\n+ * pool consists of a fixed number of core threads that are kept inside all the time, and some\n+ * excessive threads that may be spawned and then terminated when they are not needed anymore.\n+ */\n+@Singleton\n+public class CustomThreadPoolExecutorService implements CustomThreadPoolExecutor {\n+\n+  private static final String CUSTOM_THREAD_POOL = \"CUSTOM_THREAD_POOL\";\n+  private static final String CUSTOM_SCHEDULED_THREAD_POOL = \"CUSTOM_SCHEDULED_THREAD_POOL\";\n+\n+  private int corePoolSize;\n+  private int maximumPoolSize;\n+  private int keepAliveTime;\n+  private int corePoolSizeForScheduledThreadPool;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c2f16d38e7dbf624fed54d4b2c6181c3c2a17d9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgxMDY1Ng==", "bodyText": "Why don't store the executors without maps?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r519810656", "createdAt": "2020-11-09T13:23:01Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.broadcom.lsp.cobol.service.utils;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+import lombok.NonNull;\n+\n+import java.util.Map;\n+import java.util.concurrent.*;\n+\n+import static java.util.Collections.singletonMap;\n+\n+/**\n+ * {@inheritDoc}\n+ *\n+ * <p>Implements API for our CustomThreadPoolExecutor created using ThreadPoolExecutor and\n+ * ScheduledThreadPoolExecutor.\n+ *\n+ * <p>The main configuration parameters are: corePoolSize, maximumPoolSize, and keepAliveTime. The\n+ * pool consists of a fixed number of core threads that are kept inside all the time, and some\n+ * excessive threads that may be spawned and then terminated when they are not needed anymore.\n+ */\n+@Singleton\n+public class CustomThreadPoolExecutorService implements CustomThreadPoolExecutor {\n+\n+  private static final String CUSTOM_THREAD_POOL = \"CUSTOM_THREAD_POOL\";\n+  private static final String CUSTOM_SCHEDULED_THREAD_POOL = \"CUSTOM_SCHEDULED_THREAD_POOL\";\n+\n+  private int corePoolSize;\n+  private int maximumPoolSize;\n+  private int keepAliveTime;\n+  private int corePoolSizeForScheduledThreadPool;\n+\n+  private Map<String, ExecutorService> executorServiceMap = Map.of();\n+  private Map<String, ScheduledExecutorService> scheduledExecutorServiceMap = Map.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c2f16d38e7dbf624fed54d4b2c6181c3c2a17d9"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgxMzM1Nw==", "bodyText": "The name doesn't reflect the purpose of the class. It is either a Provider that just holds and returns the executors or an Executor, but in this case, it should not expose the nested executors and just provide the API to control the tasks.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r519813357", "createdAt": "2020-11-09T13:27:25Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.broadcom.lsp.cobol.service.utils;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+import lombok.NonNull;\n+\n+import java.util.Map;\n+import java.util.concurrent.*;\n+\n+import static java.util.Collections.singletonMap;\n+\n+/**\n+ * {@inheritDoc}\n+ *\n+ * <p>Implements API for our CustomThreadPoolExecutor created using ThreadPoolExecutor and\n+ * ScheduledThreadPoolExecutor.\n+ *\n+ * <p>The main configuration parameters are: corePoolSize, maximumPoolSize, and keepAliveTime. The\n+ * pool consists of a fixed number of core threads that are kept inside all the time, and some\n+ * excessive threads that may be spawned and then terminated when they are not needed anymore.\n+ */\n+@Singleton\n+public class CustomThreadPoolExecutorService implements CustomThreadPoolExecutor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c2f16d38e7dbf624fed54d4b2c6181c3c2a17d9"}, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e152341fcba97e4022c5cf4ae0b992b03eff3fbf", "author": {"user": {"login": "asatklichov", "name": "Azat Satklichov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/e152341fcba97e4022c5cf4ae0b992b03eff3fbf", "committedDate": "2020-11-09T14:01:54Z", "message": "refactor: changes on code-review comments\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>"}, "afterCommit": {"oid": "291ed034484978f0a0149a233c9dfdb835c73605", "author": {"user": {"login": "asatklichov", "name": "Azat Satklichov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/291ed034484978f0a0149a233c9dfdb835c73605", "committedDate": "2020-11-09T14:14:55Z", "message": "refactor: using custom thread pool executor #615\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cbc43f36f076622bde71f1fe754b2f49bcb1d7e2", "author": {"user": {"login": "asatklichov", "name": "Azat Satklichov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/cbc43f36f076622bde71f1fe754b2f49bcb1d7e2", "committedDate": "2020-11-09T14:39:50Z", "message": "refactor: using custom thread pool executor #615\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>"}, "afterCommit": {"oid": "05a95eb60c9ef6fe0ad465dcb25eda581252bfda", "author": {"user": {"login": "asatklichov", "name": "Azat Satklichov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/05a95eb60c9ef6fe0ad465dcb25eda581252bfda", "committedDate": "2020-11-09T14:42:37Z", "message": "refactor: using custom thread pool executor #615\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MzQzNTM2", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#pullrequestreview-526343536", "createdAt": "2020-11-09T15:02:14Z", "commit": {"oid": "05a95eb60c9ef6fe0ad465dcb25eda581252bfda"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDIyMTA1", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#pullrequestreview-527422105", "createdAt": "2020-11-10T17:09:11Z", "commit": {"oid": "05a95eb60c9ef6fe0ad465dcb25eda581252bfda"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzowOToxMVrOHwmr1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxMDozMFrOHwmvcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcyNzUxMQ==", "bodyText": "Please, add the LICENSE header.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r520727511", "createdAt": "2020-11-10T17:09:11Z", "author": {"login": "grianbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutor.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.broadcom.lsp.cobol.service.utils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a95eb60c9ef6fe0ad465dcb25eda581252bfda"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcyNzY2OQ==", "bodyText": "Please, add the LICENSE header.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r520727669", "createdAt": "2020-11-10T17:09:21Z", "author": {"login": "grianbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/utils/CustomThreadPoolExecutorService.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.broadcom.lsp.cobol.service.utils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a95eb60c9ef6fe0ad465dcb25eda581252bfda"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcyODQzMg==", "bodyText": "Please, add the LICENSE header.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#discussion_r520728432", "createdAt": "2020-11-10T17:10:30Z", "author": {"login": "grianbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/utils/CustomThreadPoolExecutorTest.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.broadcom.lsp.cobol.utils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a95eb60c9ef6fe0ad465dcb25eda581252bfda"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94180ba45c4168f863573923cba587f6db9c2167", "author": {"user": {"login": "asatklichov", "name": "Azat Satklichov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/94180ba45c4168f863573923cba587f6db9c2167", "committedDate": "2020-11-11T08:23:17Z", "message": "refactor: using custom thread pool executor #615\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bca3edc3519e421f7d550d2b6123436146ec3e04", "author": {"user": {"login": "asatklichov", "name": "Azat Satklichov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/bca3edc3519e421f7d550d2b6123436146ec3e04", "committedDate": "2020-11-11T08:21:56Z", "message": "refactor: add licence header\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>"}, "afterCommit": {"oid": "94180ba45c4168f863573923cba587f6db9c2167", "author": {"user": {"login": "asatklichov", "name": "Azat Satklichov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/94180ba45c4168f863573923cba587f6db9c2167", "committedDate": "2020-11-11T08:23:17Z", "message": "refactor: using custom thread pool executor #615\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MDU1OTQy", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/622#pullrequestreview-528055942", "createdAt": "2020-11-11T10:40:22Z", "commit": {"oid": "94180ba45c4168f863573923cba587f6db9c2167"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 874, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}