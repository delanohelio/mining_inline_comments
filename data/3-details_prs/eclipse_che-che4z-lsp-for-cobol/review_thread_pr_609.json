{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1Mjc5ODAz", "number": 609, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDoxOToxOFrOE1KNRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzo0ODozN1rOE1iLeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTc3MjIzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/engine/CobolLanguageEngine.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDoxOToxOFrOHtRrnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMzoyNzowMFrOHtX-Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzNzY2Mw==", "bodyText": "Guice dynamically creates a subclass that applies interceptors by overriding methods. So can't have private method.\nOr else we will have to adopt another lib like CGI etc.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517237663", "createdAt": "2020-11-04T10:19:18Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/engine/CobolLanguageEngine.java", "diffHunk": "@@ -113,6 +119,18 @@ public CobolLanguageEngine(TextPreprocessor preprocessor, DefaultErrorStrategy d\n     return new ResultWithErrors<>(visitor.getSemanticContext(), accumulatedErrors);\n   }\n \n+  @CheckThreadInterruption\n+  protected CobolParser getCobolParser(CommonTokenStream tokens) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4b006e6443889633e8af49fa6fc7392a5fc3be2"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI3NTIyOQ==", "bodyText": "I think here it may be package-private", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517275229", "createdAt": "2020-11-04T11:23:58Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/engine/CobolLanguageEngine.java", "diffHunk": "@@ -113,6 +119,18 @@ public CobolLanguageEngine(TextPreprocessor preprocessor, DefaultErrorStrategy d\n     return new ResultWithErrors<>(visitor.getSemanticContext(), accumulatedErrors);\n   }\n \n+  @CheckThreadInterruption\n+  protected CobolParser getCobolParser(CommonTokenStream tokens) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzNzY2Mw=="}, "originalCommit": {"oid": "f4b006e6443889633e8af49fa6fc7392a5fc3be2"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM0MDc1OA==", "bodyText": "Please, mark the affected classes with @SuppressWarnings(\"WeakerAccess\") not to show the warnings", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517340758", "createdAt": "2020-11-04T13:27:00Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/engine/CobolLanguageEngine.java", "diffHunk": "@@ -113,6 +119,18 @@ public CobolLanguageEngine(TextPreprocessor preprocessor, DefaultErrorStrategy d\n     return new ResultWithErrors<>(visitor.getSemanticContext(), accumulatedErrors);\n   }\n \n+  @CheckThreadInterruption\n+  protected CobolParser getCobolParser(CommonTokenStream tokens) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzNzY2Mw=="}, "originalCommit": {"oid": "f4b006e6443889633e8af49fa6fc7392a5fc3be2"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTgyOTI2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDozMzoxOFrOHtSOSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDo0MTo1NlrOHtSiMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0NjUzNw==", "bodyText": "Default impl has a max pool size of Integer.MAX_VALUE. Can that be a problem?\nsuggestion?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517246537", "createdAt": "2020-11-04T10:33:18Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -71,6 +70,8 @@\n   private final Map<String, CobolDocumentModel> docs = new ConcurrentHashMap<>();\n   private final Map<String, CompletableFuture<List<DocumentSymbol>>> outlineMap =\n       new ConcurrentHashMap<>();\n+  private final Map<String, Future<Void>> futureMap = new ConcurrentHashMap<>();\n+  private final ExecutorService threadPool = Executors.newCachedThreadPool();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4b006e6443889633e8af49fa6fc7392a5fc3be2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI1MTYzNA==", "bodyText": "It won't be problem, because by default in one sec idle-thread will be killed.\nBUT, we are introducing another thread-pool here, so in LSP we have 3 more. We need to discuss it internally.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517251634", "createdAt": "2020-11-04T10:41:56Z", "author": {"login": "asatklichov"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -71,6 +70,8 @@\n   private final Map<String, CobolDocumentModel> docs = new ConcurrentHashMap<>();\n   private final Map<String, CompletableFuture<List<DocumentSymbol>>> outlineMap =\n       new ConcurrentHashMap<>();\n+  private final Map<String, Future<Void>> futureMap = new ConcurrentHashMap<>();\n+  private final ExecutorService threadPool = Executors.newCachedThreadPool();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0NjUzNw=="}, "originalCommit": {"oid": "f4b006e6443889633e8af49fa6fc7392a5fc3be2"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTgzNTI5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDozNDo1MVrOHtSSAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMzo1ODozMlrOHtZOFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0NzQ4OA==", "bodyText": "This might give an indication to user that the processing is stopped, while its not. Do we want to handle this in method interceptor?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517247488", "createdAt": "2020-11-04T10:34:51Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -197,8 +198,15 @@ public void didChange(DidChangeTextDocumentParams params) {\n   public void didClose(DidCloseTextDocumentParams params) {\n     String uri = params.getTextDocument().getUri();\n     LOG.info(format(\"Document closing invoked on URI %s\", uri));\n+    interruptAnalysis(uri);\n+    communications.cancelProgressNotification(uri);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4b006e6443889633e8af49fa6fc7392a5fc3be2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI1MjA3Ng==", "bodyText": "Yes, it should be part of aspect", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517252076", "createdAt": "2020-11-04T10:42:42Z", "author": {"login": "asatklichov"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -197,8 +198,15 @@ public void didChange(DidChangeTextDocumentParams params) {\n   public void didClose(DidCloseTextDocumentParams params) {\n     String uri = params.getTextDocument().getUri();\n     LOG.info(format(\"Document closing invoked on URI %s\", uri));\n+    interruptAnalysis(uri);\n+    communications.cancelProgressNotification(uri);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0NzQ4OA=="}, "originalCommit": {"oid": "f4b006e6443889633e8af49fa6fc7392a5fc3be2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM1NjI1Mg==", "bodyText": "I should not be a part of the aspect, it will lead only to the spreading of logic. Please, encapsulate all the Communications usages in the service.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517356252", "createdAt": "2020-11-04T13:51:06Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -197,8 +198,15 @@ public void didChange(DidChangeTextDocumentParams params) {\n   public void didClose(DidCloseTextDocumentParams params) {\n     String uri = params.getTextDocument().getUri();\n     LOG.info(format(\"Document closing invoked on URI %s\", uri));\n+    interruptAnalysis(uri);\n+    communications.cancelProgressNotification(uri);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0NzQ4OA=="}, "originalCommit": {"oid": "f4b006e6443889633e8af49fa6fc7392a5fc3be2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2MTE3NQ==", "bodyText": "Yes, it does make the code less clean. Adding it in aspect has brought some extra complexity and spread the responsibility.\nShould have discussed before implementing :(", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517361175", "createdAt": "2020-11-04T13:58:32Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -197,8 +198,15 @@ public void didChange(DidChangeTextDocumentParams params) {\n   public void didClose(DidCloseTextDocumentParams params) {\n     String uri = params.getTextDocument().getUri();\n     LOG.info(format(\"Document closing invoked on URI %s\", uri));\n+    interruptAnalysis(uri);\n+    communications.cancelProgressNotification(uri);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0NzQ4OA=="}, "originalCommit": {"oid": "f4b006e6443889633e8af49fa6fc7392a5fc3be2"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTg0MjExOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/AOPThreadInterrupt.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDozNjozNlrOHtSWEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDo0OTo0M1rOHtS0dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0ODUzMA==", "bodyText": "Rename with ThreadInterruptAspect", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517248530", "createdAt": "2020-11-04T10:36:36Z", "author": {"login": "asatklichov"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/AOPThreadInterrupt.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.broadcom.lsp.cobol.core.annotation;\n+\n+/**\n+ * This is a marker interface. Implementing this class would enable the {@link\n+ * CheckThreadInterruption} annotation to be used for member methods of the class.\n+ */\n+public interface AOPThreadInterrupt {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4b006e6443889633e8af49fa6fc7392a5fc3be2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI1NjMxMQ==", "bodyText": "Or  InterruptableThreadAspect", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517256311", "createdAt": "2020-11-04T10:49:43Z", "author": {"login": "asatklichov"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/AOPThreadInterrupt.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.broadcom.lsp.cobol.core.annotation;\n+\n+/**\n+ * This is a marker interface. Implementing this class would enable the {@link\n+ * CheckThreadInterruption} annotation to be used for member methods of the class.\n+ */\n+public interface AOPThreadInterrupt {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0ODUzMA=="}, "originalCommit": {"oid": "f4b006e6443889633e8af49fa6fc7392a5fc3be2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTg3NDIyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDo0NTozMFrOHtSqkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMzo0MzoyMVrOHtYnGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI1Mzc3OA==", "bodyText": "Isn't it better complete with some meaning meaning message, complete(\"Analyze-completed\") ?    CompletableFuture", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517253778", "createdAt": "2020-11-04T10:45:30Z", "author": {"login": "asatklichov"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -248,8 +262,13 @@ private void analyzeDocumentFirstTime(String uri, String text, boolean userReque\n               ofNullable(docs.get(uri)).ifPresent(doc -> doc.setAnalysisResult(result));\n               publishResult(uri, result, copybookProcessingMode);\n               outlineMap.get(uri).complete(result.getOutlineTree());\n-            })\n-        .whenComplete(reportExceptionIfThrown(createDescriptiveErrorMessage(\"analysis\", uri)));\n+              completableFuture.complete(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4b006e6443889633e8af49fa6fc7392a5fc3be2"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM1MTE5Mg==", "bodyText": "CompletableFuture , so returning null. Anyways we need it only for chaining. I will hold this PR as suggested for tomorrow's session.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517351192", "createdAt": "2020-11-04T13:43:21Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -248,8 +262,13 @@ private void analyzeDocumentFirstTime(String uri, String text, boolean userReque\n               ofNullable(docs.get(uri)).ifPresent(doc -> doc.setAnalysisResult(result));\n               publishResult(uri, result, copybookProcessingMode);\n               outlineMap.get(uri).complete(result.getOutlineTree());\n-            })\n-        .whenComplete(reportExceptionIfThrown(createDescriptiveErrorMessage(\"analysis\", uri)));\n+              completableFuture.complete(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI1Mzc3OA=="}, "originalCommit": {"oid": "f4b006e6443889633e8af49fa6fc7392a5fc3be2"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTkxMzY5OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/CobolTextDocumentServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDo1NjowMVrOHtTDAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDo1NjowMVrOHtTDAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI2MDAzMw==", "bodyText": "Optional: These size tests can be replaced with more readable  hamcrest-tests, see CobolLineReaderImplTest", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517260033", "createdAt": "2020-11-04T10:56:01Z", "author": {"login": "asatklichov"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/service/CobolTextDocumentServiceTest.java", "diffHunk": "@@ -424,10 +424,13 @@ void testImmediateClosingOfDocumentDoNotCauseNPE() {\n             new TextDocumentItem(UseCaseUtils.DOCUMENT_URI, LANGUAGE, 0, TEXT_EXAMPLE)));\n \n     assertEquals(1, service.getDocs().size());\n+    assertEquals(1, service.getFutureMap().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4b006e6443889633e8af49fa6fc7392a5fc3be2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjAyMDUyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/core/annotation/HandleThreadInterruptionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMToyNjo0M1rOHtUEPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMToyNjo0M1rOHtUEPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI3NjczMg==", "bodyText": "Missing Javadoc", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517276732", "createdAt": "2020-11-04T11:26:43Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/core/annotation/HandleThreadInterruptionTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.broadcom.lsp.cobol.core.annotation;\n+\n+import org.antlr.v4.runtime.misc.ParseCancellationException;\n+import org.aopalliance.intercept.MethodInvocation;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.mockito.Mockito.*;\n+\n+class HandleThreadInterruptionTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4b006e6443889633e8af49fa6fc7392a5fc3be2"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjA0NTQ0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMTozNDoxMlrOHtUTvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMTozNDoxMlrOHtUTvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4MDcwMg==", "bodyText": "Please, move this method up to follow getDocs() for consistency", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517280702", "createdAt": "2020-11-04T11:34:12Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -319,4 +338,8 @@ private String createDescriptiveErrorMessage(String action, String uri) {\n   private BiConsumer<Object, Throwable> reportExceptionIfThrown(String message) {\n     return (res, ex) -> ofNullable(ex).ifPresent(it -> LOG.error(message, it));\n   }\n+\n+  Map<String, Future<Void>> getFutureMap() {\n+    return new HashMap<>(futureMap);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4b006e6443889633e8af49fa6fc7392a5fc3be2"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjIzNTc2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CopybookServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjozMToxMlrOHtWFSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjozMToxMlrOHtWFSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMwOTc2OQ==", "bodyText": "May be package-private", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517309769", "createdAt": "2020-11-04T12:31:12Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CopybookServiceImpl.java", "diffHunk": "@@ -108,7 +111,8 @@ public void store(CopybookModel copybookModel) {\n     copybookCache.put(copybookModel.getName(), copybookModel);\n   }\n \n-  private CopybookModel resolveSync(\n+  @CheckThreadInterruption\n+  protected CopybookModel resolveSync(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4b006e6443889633e8af49fa6fc7392a5fc3be2"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjUxMjY0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMzo0NjoxMVrOHtYuLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMzo0OTo1M1rOHtY3sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM1MzAwNg==", "bodyText": "removed communications.cancelProgressNotification and handled inside aspect. But from user perspective, we still see message on UI (analysis in progress) as we usually take more time than 3 sec to stop processing.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517353006", "createdAt": "2020-11-04T13:46:11Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -197,8 +202,14 @@ public void didChange(DidChangeTextDocumentParams params) {\n   public void didClose(DidCloseTextDocumentParams params) {\n     String uri = params.getTextDocument().getUri();\n     LOG.info(format(\"Document closing invoked on URI %s\", uri));\n+    interruptAnalysis(uri);\n     communications.publishDiagnostics(Map.of(uri, List.of()));\n     docs.remove(uri);\n+    clearAnalysedFutureObject(uri);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356e6fcd64e0545b67f64a8e9fd06ce21bb59977"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM1NTQ0MQ==", "bodyText": "We cannot control this message when it is already sent. It is expected behavior.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517355441", "createdAt": "2020-11-04T13:49:53Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -197,8 +202,14 @@ public void didChange(DidChangeTextDocumentParams params) {\n   public void didClose(DidCloseTextDocumentParams params) {\n     String uri = params.getTextDocument().getUri();\n     LOG.info(format(\"Document closing invoked on URI %s\", uri));\n+    interruptAnalysis(uri);\n     communications.publishDiagnostics(Map.of(uri, List.of()));\n     docs.remove(uri);\n+    clearAnalysedFutureObject(uri);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM1MzAwNg=="}, "originalCommit": {"oid": "356e6fcd64e0545b67f64a8e9fd06ce21bb59977"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjU2MzE5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/HandleThreadInterruption.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMzo1ODozNVrOHtZONA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDoyNDowNFrOHtaXng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2MTIwNA==", "bodyText": "This should be encapsulated inside CobolTextDocumentService", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517361204", "createdAt": "2020-11-04T13:58:35Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/HandleThreadInterruption.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.broadcom.lsp.cobol.core.annotation;\n+\n+import com.broadcom.lsp.cobol.domain.modules.LangServerCtx;\n+import com.broadcom.lsp.cobol.service.CobolTextDocumentService;\n+import com.broadcom.lsp.cobol.service.delegates.communications.Communications;\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.misc.ParseCancellationException;\n+import org.aopalliance.intercept.Joinpoint;\n+import org.aopalliance.intercept.MethodInterceptor;\n+import org.aopalliance.intercept.MethodInvocation;\n+\n+/**\n+ * Intercepts calls on an {@link ThreadInterruptAspect} on its way to the target.\n+ *\n+ * <p>NOTE: Guice dynamically creates a subclass that applies interceptors by overriding methods.\n+ */\n+@Slf4j\n+public class HandleThreadInterruption implements MethodInterceptor {\n+\n+  /**\n+   * Implement this method to perform extra treatments before and after the invocation. Polite\n+   * implementations would certainly like to invoke {@link Joinpoint#proceed()}.\n+   *\n+   * @param invocation the method invocation joinpoint\n+   * @return the result of the call to {@link Joinpoint#proceed()}, might be intercepted by the\n+   *     interceptor.\n+   * @throws Throwable if the interceptors or the target-object throws an exception.\n+   */\n+  @Override\n+  public Object invoke(MethodInvocation invocation) throws Throwable {\n+    if (Thread.interrupted()) {\n+      String uri = CobolTextDocumentService.threadContextUri.get();\n+      LOG.debug(invocation.getMethod().getName() + \" is interrupted by user for uri: \" + uri);\n+      LangServerCtx.getInjector().getInstance(Communications.class).cancelProgressNotification(uri);\n+      CobolTextDocumentService.threadContextUri.remove();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356e6fcd64e0545b67f64a8e9fd06ce21bb59977"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM3OTk5OA==", "bodyText": "done", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517379998", "createdAt": "2020-11-04T14:24:04Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/HandleThreadInterruption.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.broadcom.lsp.cobol.core.annotation;\n+\n+import com.broadcom.lsp.cobol.domain.modules.LangServerCtx;\n+import com.broadcom.lsp.cobol.service.CobolTextDocumentService;\n+import com.broadcom.lsp.cobol.service.delegates.communications.Communications;\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.misc.ParseCancellationException;\n+import org.aopalliance.intercept.Joinpoint;\n+import org.aopalliance.intercept.MethodInterceptor;\n+import org.aopalliance.intercept.MethodInvocation;\n+\n+/**\n+ * Intercepts calls on an {@link ThreadInterruptAspect} on its way to the target.\n+ *\n+ * <p>NOTE: Guice dynamically creates a subclass that applies interceptors by overriding methods.\n+ */\n+@Slf4j\n+public class HandleThreadInterruption implements MethodInterceptor {\n+\n+  /**\n+   * Implement this method to perform extra treatments before and after the invocation. Polite\n+   * implementations would certainly like to invoke {@link Joinpoint#proceed()}.\n+   *\n+   * @param invocation the method invocation joinpoint\n+   * @return the result of the call to {@link Joinpoint#proceed()}, might be intercepted by the\n+   *     interceptor.\n+   * @throws Throwable if the interceptors or the target-object throws an exception.\n+   */\n+  @Override\n+  public Object invoke(MethodInvocation invocation) throws Throwable {\n+    if (Thread.interrupted()) {\n+      String uri = CobolTextDocumentService.threadContextUri.get();\n+      LOG.debug(invocation.getMethod().getName() + \" is interrupted by user for uri: \" + uri);\n+      LangServerCtx.getInjector().getInstance(Communications.class).cancelProgressNotification(uri);\n+      CobolTextDocumentService.threadContextUri.remove();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2MTIwNA=="}, "originalCommit": {"oid": "356e6fcd64e0545b67f64a8e9fd06ce21bb59977"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjU2NzE0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/visitor/CobolVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMzo1OToyN1rOHtZQpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDoyNDoxOFrOHtaYWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2MTgyOA==", "bodyText": "Same here", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517361828", "createdAt": "2020-11-04T13:59:27Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/visitor/CobolVisitor.java", "diffHunk": "@@ -679,4 +683,17 @@ private void checkProgramNameIdentical(Token token) {\n         .collect(Collectors.toList());\n   }\n \n+  // NOTE: CobolVisitor is not managed by Guice DI, so can't use annotation here.\n+  @Override\n+  public Class visitChildren(RuleNode node) {\n+    if(Thread.interrupted()) { // todo: replace with a custom thread\n+      String uri = CobolTextDocumentService.threadContextUri.get();\n+      LOG.debug(\"visitChildren method interrupted by user for uri: \"+uri);\n+      Communications communications = LangServerCtx.getInjector().getInstance(Communications.class);\n+      communications.cancelProgressNotification(CobolTextDocumentService.threadContextUri.get());\n+      CobolTextDocumentService.threadContextUri.remove();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356e6fcd64e0545b67f64a8e9fd06ce21bb59977"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM4MDE4NQ==", "bodyText": "Done", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517380185", "createdAt": "2020-11-04T14:24:18Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/visitor/CobolVisitor.java", "diffHunk": "@@ -679,4 +683,17 @@ private void checkProgramNameIdentical(Token token) {\n         .collect(Collectors.toList());\n   }\n \n+  // NOTE: CobolVisitor is not managed by Guice DI, so can't use annotation here.\n+  @Override\n+  public Class visitChildren(RuleNode node) {\n+    if(Thread.interrupted()) { // todo: replace with a custom thread\n+      String uri = CobolTextDocumentService.threadContextUri.get();\n+      LOG.debug(\"visitChildren method interrupted by user for uri: \"+uri);\n+      Communications communications = LangServerCtx.getInjector().getInstance(Communications.class);\n+      communications.cancelProgressNotification(CobolTextDocumentService.threadContextUri.get());\n+      CobolTextDocumentService.threadContextUri.remove();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2MTgyOA=="}, "originalCommit": {"oid": "356e6fcd64e0545b67f64a8e9fd06ce21bb59977"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjU4MDczOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CopybookServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowMjoxNVrOHtZYmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowMjoxNVrOHtZYmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2Mzg2NQ==", "bodyText": "Please, add @SuppressWarnings(\"WeakerAccess\") here", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517363865", "createdAt": "2020-11-04T14:02:15Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CopybookServiceImpl.java", "diffHunk": "@@ -45,7 +47,7 @@\n  */\n @Slf4j\n @Singleton\n-public class CopybookServiceImpl implements CopybookService {\n+public class CopybookServiceImpl implements CopybookService, ThreadInterruptAspect {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356e6fcd64e0545b67f64a8e9fd06ce21bb59977"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjU4MjIxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/engine/CobolLanguageEngine.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowMjozNVrOHtZZig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowMjozNVrOHtZZig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NDEwNg==", "bodyText": "Please, add @SuppressWarnings(\"WeakerAccess\")", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517364106", "createdAt": "2020-11-04T14:02:35Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/engine/CobolLanguageEngine.java", "diffHunk": "@@ -51,14 +53,17 @@\n  */\n @Slf4j\n @Singleton", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356e6fcd64e0545b67f64a8e9fd06ce21bb59977"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTY2OTk3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/HandleThreadInterruption.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzozODoyOFrOHt2rnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzozODoyOFrOHt2rnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0Mzg2OQ==", "bodyText": "In the general handler, a general exception is expected. So, you can rename the whole handler or change exception.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517843869", "createdAt": "2020-11-05T07:38:28Z", "author": {"login": "grianbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/HandleThreadInterruption.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.broadcom.lsp.cobol.core.annotation;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.misc.ParseCancellationException;\n+import org.aopalliance.intercept.Joinpoint;\n+import org.aopalliance.intercept.MethodInterceptor;\n+import org.aopalliance.intercept.MethodInvocation;\n+\n+/**\n+ * Intercepts calls on an {@link ThreadInterruptAspect} on its way to the target.\n+ *\n+ * <p>NOTE: Guice dynamically creates a subclass that applies interceptors by overriding methods.\n+ */\n+@Slf4j\n+public class HandleThreadInterruption implements MethodInterceptor {\n+\n+  /**\n+   * Implement this method to perform extra treatments before and after the invocation. Polite\n+   * implementations would certainly like to invoke {@link Joinpoint#proceed()}.\n+   *\n+   * @param invocation the method invocation joinpoint\n+   * @return the result of the call to {@link Joinpoint#proceed()}, might be intercepted by the\n+   *     interceptor.\n+   * @throws Throwable if the interceptors or the target-object throws an exception.\n+   */\n+  @Override\n+  public Object invoke(MethodInvocation invocation) throws Throwable {\n+    if (Thread.interrupted()) {\n+      LOG.debug(invocation.getMethod().getName() + \" is interrupted by user\");\n+      throw new ParseCancellationException(\"Parsing interrupted by user.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6180275b6bc74e02f6b46b954e8bae05151442d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTY5OTc3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzo0ODozN1rOHt29Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwODo1NTo0NlrOHt5QWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0ODQwNg==", "bodyText": "There is no need for CompletableFuture at all. You can add these two calls at the end of the submitted function, instead of completableFuture.complete(null);.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517848406", "createdAt": "2020-11-05T07:48:37Z", "author": {"login": "grianbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -248,8 +265,13 @@ private void analyzeDocumentFirstTime(String uri, String text, boolean userReque\n               ofNullable(docs.get(uri)).ifPresent(doc -> doc.setAnalysisResult(result));\n               publishResult(uri, result, copybookProcessingMode);\n               outlineMap.get(uri).complete(result.getOutlineTree());\n-            })\n-        .whenComplete(reportExceptionIfThrown(createDescriptiveErrorMessage(\"analysis\", uri)));\n+              completableFuture.complete(null);\n+              return null;\n+            });\n+    futureMap.put(uri, docAnalysisFuture);\n+    completableFuture\n+        .whenComplete(reportExceptionIfThrown(createDescriptiveErrorMessage(\"analysis\", uri)))\n+        .whenComplete((val1, val2) -> clearAnalysedFutureObject(uri));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6180275b6bc74e02f6b46b954e8bae05151442d"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4NjA0Mg==", "bodyText": "why didn't I think of this? \ud83e\udd26", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517886042", "createdAt": "2020-11-05T08:55:46Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -248,8 +265,13 @@ private void analyzeDocumentFirstTime(String uri, String text, boolean userReque\n               ofNullable(docs.get(uri)).ifPresent(doc -> doc.setAnalysisResult(result));\n               publishResult(uri, result, copybookProcessingMode);\n               outlineMap.get(uri).complete(result.getOutlineTree());\n-            })\n-        .whenComplete(reportExceptionIfThrown(createDescriptiveErrorMessage(\"analysis\", uri)));\n+              completableFuture.complete(null);\n+              return null;\n+            });\n+    futureMap.put(uri, docAnalysisFuture);\n+    completableFuture\n+        .whenComplete(reportExceptionIfThrown(createDescriptiveErrorMessage(\"analysis\", uri)))\n+        .whenComplete((val1, val2) -> clearAnalysedFutureObject(uri));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0ODQwNg=="}, "originalCommit": {"oid": "b6180275b6bc74e02f6b46b954e8bae05151442d"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3824, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}