{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMDU5MjM3", "number": 130, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwODo0NzoxNVrODWeL3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwOTowODozNlrODWeiFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODg5ODIwOnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/visitor/LevenshteinDistanceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwODo0NzoxNVrOFbP-dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwODo0NzoxNVrOFbP-dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDExNzYyMg==", "bodyText": "Please extract this Token in a separate builder method", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/130#discussion_r364117622", "createdAt": "2020-01-08T08:47:15Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/visitor/LevenshteinDistanceTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ *\n+ *  * Copyright (c) 2020 Broadcom.\n+ *  * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *  *\n+ *  * This program and the accompanying materials are made\n+ *  * available under the terms of the Eclipse Public License 2.0\n+ *  * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *  *\n+ *  * SPDX-License-Identifier: EPL-2.0\n+ *  *\n+ *  * Contributors:\n+ *  *   Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.ca.lsp.core.cobol.visitor;\n+\n+import com.broadcom.lsp.domain.cobol.model.Position;\n+import com.ca.lsp.core.cobol.model.SyntaxError;\n+import com.ca.lsp.core.cobol.parser.CobolParser;\n+import com.ca.lsp.core.cobol.parser.listener.SemanticListener;\n+import org.antlr.v4.runtime.CharStream;\n+import org.antlr.v4.runtime.Token;\n+import org.antlr.v4.runtime.TokenSource;\n+import org.junit.Test;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+public class LevenshteinDistanceTest {\n+  private CobolVisitor visitor = new CobolVisitor();\n+  List<SyntaxError> errors = new CopyOnWriteArrayList<>();\n+\n+  @Test\n+  public void testDistance() {\n+    errors.add(new SyntaxError(new Position(\"\", 1, 1, 1, 1, 1), null, 2, \"addedSuggestion\", 2));\n+    visitor.setSemanticErrors(new SemanticListener(errors));\n+    CobolParser.StatementContext node = mock(CobolParser.StatementContext.class);\n+    when(node.getStart())\n+        .thenReturn(\n+            new Token() {\n+              @Override\n+              public String getText() {\n+                return \"MOVES\";\n+              }\n+\n+              @Override\n+              public int getType() {\n+                return 0;\n+              }\n+\n+              @Override\n+              public int getLine() {\n+                return 0;\n+              }\n+\n+              @Override\n+              public int getCharPositionInLine() {\n+                return 0;\n+              }\n+\n+              @Override\n+              public int getChannel() {\n+                return 0;\n+              }\n+\n+              @Override\n+              public int getTokenIndex() {\n+                return 0;\n+              }\n+\n+              @Override\n+              public int getStartIndex() {\n+                return 0;\n+              }\n+\n+              @Override\n+              public int getStopIndex() {\n+                return 0;\n+              }\n+\n+              @Override\n+              public TokenSource getTokenSource() {\n+                return null;\n+              }\n+\n+              @Override\n+              public CharStream getInputStream() {\n+                return null;\n+              }\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6078cfc0a564eb71398dc26caf12e85f3395e4b"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODk1NTA4OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/visitor/LevenshteinDistanceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwOTowODozNlrOFbQg2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwOTowODozNlrOFbQg2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDEyNjQyNA==", "bodyText": "Please, check your copyright settings to avoid double asterisks at the beginning", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/130#discussion_r364126424", "createdAt": "2020-01-08T09:08:36Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/visitor/LevenshteinDistanceTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ *\n+ *  * Copyright (c) 2020 Broadcom.\n+ *  * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *  *\n+ *  * This program and the accompanying materials are made\n+ *  * available under the terms of the Eclipse Public License 2.0\n+ *  * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *  *\n+ *  * SPDX-License-Identifier: EPL-2.0\n+ *  *\n+ *  * Contributors:\n+ *  *   Broadcom, Inc. - initial API and implementation\n+ *\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f12c50d6cea6a9eb00b8889d1fcf99bdb987d295"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4079, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}