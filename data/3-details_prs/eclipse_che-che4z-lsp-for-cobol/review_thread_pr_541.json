{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MTc5MjI3", "number": 541, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDoxNDowOVrOEpwz6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDoyNTo0MlrOEpxBJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjI2Nzk0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/ca/lsp/cobol/usecases/engine/UseCasePreprocessorListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDoxNDowOVrOHboYxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDoxNDowOVrOHboYxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczNTMwMA==", "bodyText": "I guess now it must be PREDEFINED_VARIABLES because it contains XML, etc.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/541#discussion_r498735300", "createdAt": "2020-10-02T10:14:09Z", "author": {"login": "grianbrcom"}, "path": "server/src/test/java/com/ca/lsp/cobol/usecases/engine/UseCasePreprocessorListener.java", "diffHunk": "@@ -43,11 +44,54 @@\n  * UseCasePreprocessor.g4\n  */\n public class UseCasePreprocessorListener extends UseCasePreprocessorBaseListener {\n+  private List<String> PREDEFINED_EIB_VARIABLES =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d873b2cfb3fbaf42724eb183b12054bbac0fd673"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjI3ODY1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/ca/lsp/core/cobol/semantics/PredefinedVariableContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDoxODowN1rOHbofhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDo1NDoyMFrOHbpbaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczNzAyOQ==", "bodyText": "What's about constructing a list and then convert it into a map?\nLike you did in server/src/test/java/com/ca/lsp/cobol/usecases/engine/UseCasePreprocessorListener.java.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/541#discussion_r498737029", "createdAt": "2020-10-02T10:18:07Z", "author": {"login": "grianbrcom"}, "path": "server/src/main/java/com/ca/lsp/core/cobol/semantics/PredefinedVariableContext.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.ca.lsp.core.cobol.semantics;\n+\n+import com.ca.lsp.core.cobol.model.Variable;\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import lombok.EqualsAndHashCode;\n+import lombok.NoArgsConstructor;\n+import org.eclipse.lsp4j.Location;\n+\n+import java.util.List;\n+\n+/**\n+ * This class represents a structure to store variables of a COBOL program and build a variable\n+ * hierarchy.\n+ */\n+@EqualsAndHashCode\n+@NoArgsConstructor\n+public class PredefinedVariableContext implements SubContext<Variable> {\n+  private static final Location MOCK_LOCATION = new Location();\n+  private static final Multimap<String, Location> VARIABLE_DEFINITIONS = HashMultimap.create();\n+\n+  private final Multimap<String, Location> variableUsages = HashMultimap.create();\n+\n+  static {\n+    // EXEC interface block fields\n+    VARIABLE_DEFINITIONS.put(\"EIBAID\", MOCK_LOCATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d873b2cfb3fbaf42724eb183b12054bbac0fd673"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc1MjM2Mw==", "bodyText": "I wanted to avoid unnecessary objects in the production code", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/541#discussion_r498752363", "createdAt": "2020-10-02T10:54:20Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/ca/lsp/core/cobol/semantics/PredefinedVariableContext.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.ca.lsp.core.cobol.semantics;\n+\n+import com.ca.lsp.core.cobol.model.Variable;\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import lombok.EqualsAndHashCode;\n+import lombok.NoArgsConstructor;\n+import org.eclipse.lsp4j.Location;\n+\n+import java.util.List;\n+\n+/**\n+ * This class represents a structure to store variables of a COBOL program and build a variable\n+ * hierarchy.\n+ */\n+@EqualsAndHashCode\n+@NoArgsConstructor\n+public class PredefinedVariableContext implements SubContext<Variable> {\n+  private static final Location MOCK_LOCATION = new Location();\n+  private static final Multimap<String, Location> VARIABLE_DEFINITIONS = HashMultimap.create();\n+\n+  private final Multimap<String, Location> variableUsages = HashMultimap.create();\n+\n+  static {\n+    // EXEC interface block fields\n+    VARIABLE_DEFINITIONS.put(\"EIBAID\", MOCK_LOCATION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczNzAyOQ=="}, "originalCommit": {"oid": "d873b2cfb3fbaf42724eb183b12054bbac0fd673"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjI5MjI2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/ca/lsp/cobol/service/delegates/completions/CompletionOrder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDoyMjozN1rOHbonuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDo0MDo1NFrOHbpGPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczOTEyOA==", "bodyText": "Just in case if you want an autonumbering:\nfinal String prefix = String.valueOf(this.ordinal());", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/541#discussion_r498739128", "createdAt": "2020-10-02T10:22:37Z", "author": {"login": "grianbrcom"}, "path": "server/src/main/java/com/ca/lsp/cobol/service/delegates/completions/CompletionOrder.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.ca.lsp.cobol.service.delegates.completions;\n+\n+import lombok.AllArgsConstructor;\n+\n+/** This enum explicitly defines the order for completions suggestions with sorting prefixes */\n+@AllArgsConstructor\n+public enum CompletionOrder {\n+  VARIABLES(\"0\"),\n+  PARAGRAPHS(\"1\"),\n+  COPYBOOKS(\"2\"),\n+  CONSTANTS(\"3\"),\n+  SNIPPETS(\"4\"),\n+  KEYWORDS(\"5\");\n+  final String prefix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d873b2cfb3fbaf42724eb183b12054bbac0fd673"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc0Njk0MA==", "bodyText": "Nice one", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/541#discussion_r498746940", "createdAt": "2020-10-02T10:40:54Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/ca/lsp/cobol/service/delegates/completions/CompletionOrder.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.ca.lsp.cobol.service.delegates.completions;\n+\n+import lombok.AllArgsConstructor;\n+\n+/** This enum explicitly defines the order for completions suggestions with sorting prefixes */\n+@AllArgsConstructor\n+public enum CompletionOrder {\n+  VARIABLES(\"0\"),\n+  PARAGRAPHS(\"1\"),\n+  COPYBOOKS(\"2\"),\n+  CONSTANTS(\"3\"),\n+  SNIPPETS(\"4\"),\n+  KEYWORDS(\"5\");\n+  final String prefix;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczOTEyOA=="}, "originalCommit": {"oid": "d873b2cfb3fbaf42724eb183b12054bbac0fd673"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjMwMTgzOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/ca/lsp/core/cobol/engine/CobolLanguageEngineTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDoyNTo0MlrOHbotUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDozOTo1NVrOHbpElw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc0MDU2Mg==", "bodyText": "The third time you describe constants. It will be good to define them once.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/541#discussion_r498740562", "createdAt": "2020-10-02T10:25:42Z", "author": {"login": "grianbrcom"}, "path": "server/src/test/java/com/ca/lsp/core/cobol/engine/CobolLanguageEngineTest.java", "diffHunk": "@@ -123,11 +127,68 @@ void testLanguageEngineRun() {\n     ResultWithErrors<SemanticContext> expected =\n         new ResultWithErrors<>(\n             new SemanticContext(\n-                Map.of(), Map.of(), Map.of(), Map.of(), Map.of(), Map.of(), expectedOutlineTree),\n+                Map.of(),\n+                Map.of(),\n+                Map.of(),\n+                Map.of(),\n+                getConstantDefinitions(),\n+                Map.of(),\n+                Map.of(),\n+                Map.of(),\n+                expectedOutlineTree),\n             List.of(error));\n \n     ResultWithErrors<SemanticContext> actual = engine.run(URI, TEXT, PROCESSING_MODE);\n \n     assertEquals(expected, actual);\n   }\n+\n+  private Map<String, Collection<Location>> getConstantDefinitions() {\n+    Location mockLocation = new Location();\n+    Multimap<String, Location> result = HashMultimap.create();\n+    result.put(\"EIBAID\", mockLocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d873b2cfb3fbaf42724eb183b12054bbac0fd673"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc0NjUxOQ==", "bodyText": "I agree. I am planning to split this test and leave only the significant logic as a part of reducing the level of duplication in the entire test set.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/541#discussion_r498746519", "createdAt": "2020-10-02T10:39:55Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/ca/lsp/core/cobol/engine/CobolLanguageEngineTest.java", "diffHunk": "@@ -123,11 +127,68 @@ void testLanguageEngineRun() {\n     ResultWithErrors<SemanticContext> expected =\n         new ResultWithErrors<>(\n             new SemanticContext(\n-                Map.of(), Map.of(), Map.of(), Map.of(), Map.of(), Map.of(), expectedOutlineTree),\n+                Map.of(),\n+                Map.of(),\n+                Map.of(),\n+                Map.of(),\n+                getConstantDefinitions(),\n+                Map.of(),\n+                Map.of(),\n+                Map.of(),\n+                expectedOutlineTree),\n             List.of(error));\n \n     ResultWithErrors<SemanticContext> actual = engine.run(URI, TEXT, PROCESSING_MODE);\n \n     assertEquals(expected, actual);\n   }\n+\n+  private Map<String, Collection<Location>> getConstantDefinitions() {\n+    Location mockLocation = new Location();\n+    Multimap<String, Location> result = HashMultimap.create();\n+    result.put(\"EIBAID\", mockLocation);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc0MDU2Mg=="}, "originalCommit": {"oid": "d873b2cfb3fbaf42724eb183b12054bbac0fd673"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3980, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}