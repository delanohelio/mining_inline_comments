{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMDM0MTg0", "number": 382, "title": "Client code coverage", "bodyText": "Purpose of this PR:\n\nadd some leftover from previous fetch-priority branch\nimprove code coverage for CopybookDownloadService and CopybookURI", "createdAt": "2020-06-08T10:26:56Z", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/382", "merged": true, "mergeCommit": {"oid": "c33cb12884f34cfc792a2327389f5beb4edce960"}, "closed": true, "closedAt": "2020-06-10T09:27:27Z", "author": {"login": "zacanbrcom"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoOOUlAH2gAyNDMxMDM0MTg0OjI4NDU4NDk1ZmQ5ZjdkMzFmODY4ZTkxOGQzMGFjNDQ3ZjFkODY1YjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcp1qVPgFqTQyNzg0MzU4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "28458495fd9f7d31f868e918d30ac447f1d865b6", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/28458495fd9f7d31f868e918d30ac447f1d865b6", "committedDate": "2020-06-05T08:17:22Z", "message": "test: Improve code coverage foc CopybookDownloadService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c518226ac079a3c5b9112b39cc1d2fff68fb3e0", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/0c518226ac079a3c5b9112b39cc1d2fff68fb3e0", "committedDate": "2020-06-05T08:41:07Z", "message": "refactor: Adjust fetch copybook command action"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fee1796effa1a792458dbae492ca016a8f5aa965", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/fee1796effa1a792458dbae492ca016a8f5aa965", "committedDate": "2020-06-08T09:49:06Z", "message": "test: improve code coverage for CopybookURI #23"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a8aa0cf35db8c2660ef8abfa8500c3b62d1c84a", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/9a8aa0cf35db8c2660ef8abfa8500c3b62d1c84a", "committedDate": "2020-06-09T07:06:43Z", "message": "Merge remote-tracking branch 'remotes/origin/development' into client-code-coverage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2OTY2MDkz", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/382#pullrequestreview-426966093", "createdAt": "2020-06-09T09:37:15Z", "commit": {"oid": "9a8aa0cf35db8c2660ef8abfa8500c3b62d1c84a"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTozNzoxNlrOGhBSwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTozOTozNVrOGhBYUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI3NzM3OA==", "bodyText": "You could use this: expect(uri).toMatch(CPY_FOLDER_NAME);", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/382#discussion_r437277378", "createdAt": "2020-06-09T09:37:16Z", "author": {"login": "grianbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/CopybookResolveURITest.ts", "diffHunk": "@@ -110,3 +116,51 @@ describe(\"With allowed input parameters, the list of URI that represent copybook\n         expect(buildResultArrayFrom([\"HLQ.DATASET1.DATASET2\"], \"PRF\")).toBe(1);\n     });\n });\n+\n+describe(\"Prioritize search criteria for copybooks test suite\", () => {\n+    function provideMockValueForLocalAndDSN(localPath: string, dsnPath: string) {\n+        vscode.workspace.getConfiguration = jest.fn().mockReturnValueOnce({\n+            get: jest.fn().mockReturnValueOnce([localPath]),\n+        }).mockReturnValueOnce({\n+            get: jest.fn().mockReturnValueOnce([dsnPath]),\n+        });\n+    }\n+\n+    const profileService: ProfileService = new ProfileService(undefined);\n+    const copybookDownloadService: CopybookDownloadService = new CopybookDownloadService(undefined, undefined, undefined, undefined);\n+    const copybookURI: CopybookURI = new CopybookURI(profileService, copybookDownloadService);\n+    profileService.getProfile = jest.fn().mockReturnValue(\"PRF\");\n+    copybookDownloadService.downloadCopybook = jest.fn().mockReturnValue(\"CPY\");\n+\n+    const spySearchInWorkspace = jest.spyOn(CopybookURI, \"searchInWorkspace\");\n+    test(\"With only a local folder defined in the settings.json, the search is applied locally\", async () => {\n+        vscode.workspace.getConfiguration = jest.fn().mockReturnValue({\n+            get: jest.fn().mockReturnValue([CPY_FOLDER_NAME]),\n+        });\n+\n+        const uri: string = await copybookURI.resolveCopybookURI(copybookName, \"PRGNAME\");\n+        expect(uri.includes(CPY_FOLDER_NAME)).toBe(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a8aa0cf35db8c2660ef8abfa8500c3b62d1c84a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI3ODgwMQ==", "bodyText": "Another example: expect(uri).not.toBe(\"\");", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/382#discussion_r437278801", "createdAt": "2020-06-09T09:39:35Z", "author": {"login": "grianbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/CopybookResolveURITest.ts", "diffHunk": "@@ -110,3 +116,51 @@ describe(\"With allowed input parameters, the list of URI that represent copybook\n         expect(buildResultArrayFrom([\"HLQ.DATASET1.DATASET2\"], \"PRF\")).toBe(1);\n     });\n });\n+\n+describe(\"Prioritize search criteria for copybooks test suite\", () => {\n+    function provideMockValueForLocalAndDSN(localPath: string, dsnPath: string) {\n+        vscode.workspace.getConfiguration = jest.fn().mockReturnValueOnce({\n+            get: jest.fn().mockReturnValueOnce([localPath]),\n+        }).mockReturnValueOnce({\n+            get: jest.fn().mockReturnValueOnce([dsnPath]),\n+        });\n+    }\n+\n+    const profileService: ProfileService = new ProfileService(undefined);\n+    const copybookDownloadService: CopybookDownloadService = new CopybookDownloadService(undefined, undefined, undefined, undefined);\n+    const copybookURI: CopybookURI = new CopybookURI(profileService, copybookDownloadService);\n+    profileService.getProfile = jest.fn().mockReturnValue(\"PRF\");\n+    copybookDownloadService.downloadCopybook = jest.fn().mockReturnValue(\"CPY\");\n+\n+    const spySearchInWorkspace = jest.spyOn(CopybookURI, \"searchInWorkspace\");\n+    test(\"With only a local folder defined in the settings.json, the search is applied locally\", async () => {\n+        vscode.workspace.getConfiguration = jest.fn().mockReturnValue({\n+            get: jest.fn().mockReturnValue([CPY_FOLDER_NAME]),\n+        });\n+\n+        const uri: string = await copybookURI.resolveCopybookURI(copybookName, \"PRGNAME\");\n+        expect(uri.includes(CPY_FOLDER_NAME)).toBe(true);\n+        expect(spySearchInWorkspace).toBeCalledTimes(1);\n+\n+    });\n+\n+    test(\"With no settings provided, two search strategies are applied and function return an empty string\", async () => {\n+        profileService.getProfile = jest.fn().mockReturnValue(\"PRF\");\n+        copybookDownloadService.downloadCopybook = jest.fn().mockReturnValue(\"CPY\");\n+        provideMockValueForLocalAndDSN(\"\", \"\");\n+\n+        const uri: string = await copybookURI.resolveCopybookURI(copybookName, \"PRGNAME\");\n+        expect(uri).toBe(\"\");\n+        expect(spySearchInWorkspace).toBeCalledTimes(2);\n+    });\n+\n+    test(\"With both local and dsn references defined in the settings.json, the search is applied on local resources\" +\n+        \"first\", async () => {\n+        provideMockValueForLocalAndDSN(CPY_FOLDER_NAME, \"\");\n+\n+        const uri: string = await copybookURI.resolveCopybookURI(copybookName, \"PRGNAME\");\n+        expect(uri === \"\").toBe(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a8aa0cf35db8c2660ef8abfa8500c3b62d1c84a"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2OTk1OTU0", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/382#pullrequestreview-426995954", "createdAt": "2020-06-09T10:15:39Z", "commit": {"oid": "9a8aa0cf35db8c2660ef8abfa8500c3b62d1c84a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxNTo0MFrOGhCqAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxNTo0MFrOGhCqAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5OTcxNA==", "bodyText": "CopybookDownloadService sometimes created with null, sometimes with undefined.  Even though they have differences, I think here it is used on  same purpose. Can we use  one ?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/382#discussion_r437299714", "createdAt": "2020-06-09T10:15:40Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/CopybookDownloadServiceTest.ts", "diffHunk": "@@ -12,119 +12,207 @@\n  *   Broadcom, Inc. - initial API and implementation\n  */\n \n+import * as fs from \"fs-extra\";\n+import * as path from \"path\";\n import * as vscode from \"vscode\";\n+import {C4Z_FOLDER, COPYBOOKS_FOLDER} from \"../constants\";\n import {CopybookDownloadService} from \"../services/CopybookDownloadService\";\n-import {CopybooksPathGenerator} from \"../services/CopybooksPathGenerator\";\n+import {CopybookFix} from \"../services/CopybookFix\";\n+import {CopybooksPathGenerator, createCopybookPath, createDatasetPath} from \"../services/CopybooksPathGenerator\";\n import {CopybookProfile} from \"../services/DownloadQueue\";\n+import {ProfileService} from \"../services/ProfileService\";\n+import {ZoweApi} from \"../services/ZoweApi\";\n import {Type, ZoweError} from \"../services/ZoweError\";\n \n-// tslint:disable: no-unused-expression no-string-literal\n-describe(\"Copybook downloader\", () => {\n-    vscode.workspace.workspaceFolders = [{} as any];\n-    vscode.window.showInformationMessage = () => Promise.resolve(\"Download Copybooks\");\n-    const profile = \"zoweProfile\";\n-    const copybookProfile = new CopybookProfile(\"copybook\", profile);\n-    const zoweGeneralError = new ZoweError(\"zowe error\", Type.General);\n-    it(\"Can download copybook\", async () => {\n-        /* WORK IN PROGRESS\n-                const zoweApi: any = {\n-                    listZOSMFProfiles: jest.fn().mockReturnValue([\"Something\"]),\n-                };\n-                const profileService: any = {\n-                    getProfile: jest.fn().mockReturnValue(profile),\n-                };\n-                const cbd: CopybooksDownloader = new CopybooksDownloader(zoweApi, profileService);\n-                const uri: any = {};\n-                (cbd as any).listMissingCopybooks = () => [\"COPYBVOOK\"];\n-                try {\n-                    await cbd.downloadDependencies(uri);\n-                    cbd.start();\n-                } finally {\n-                    cbd.dispose();\n-                }\n-\n-                expect(zoweApi.listZOSMFProfiles).toBeCalled();\n-        */\n+vscode.workspace.workspaceFolders = [{} as any];\n+vscode.window.showInformationMessage = () => Promise.resolve(\"Download Copybooks\");\n+const profile = \"zoweProfile\";\n+const copybookProfile = new CopybookProfile(\"copybook\", profile);\n+const zoweGeneralError = new ZoweError(\"zowe error\", Type.General);\n+const copybookFix: CopybookFix = new CopybookFix();\n \n+describe(\"Test fetchCopybook against bad and correct configurations\", () => {\n+    let zoweApi: ZoweApi;\n+    let copybookDownloadService: CopybookDownloadService;\n+\n+    beforeAll(() => {\n+        zoweApi = new ZoweApi();\n+        copybookDownloadService = new CopybookDownloadService(copybookFix, zoweApi, null, null);\n     });\n-    it(\"fetchCopybook rethrow ZoweError from zoweApi\", async () => {\n-        const zoweApi: any = {\n-            listMembers: jest.fn().mockRejectedValue(zoweGeneralError),\n-        };\n-        const cbd = new CopybookDownloadService(null, zoweApi, null, null);\n-        expect((cbd as any).fetchCopybook(null, null)).rejects.toEqual(zoweGeneralError);\n+\n+    test(\"Given a copybook name that is not a valid member on MF, the copybook is not downloaded\", async () => {\n+        zoweApi.listMembers = jest.fn().mockReturnValue(\"ANTHMEM\");\n+\n+        const result = await (copybookDownloadService as any).fetchCopybook(\"HLQ.DSN1\", copybookProfile);\n+        expect(result).toBe(false);\n+    });\n+\n+    test(\"Given a copybook name but a wrong instance of profile, the copybook is not downloaded and exception is thrown\", async () => {\n+        zoweApi.listMembers = jest.fn().mockReturnValue(\"copybook\");\n+        copybookFix.processDownloadError = jest.fn();\n+        const result = await (copybookDownloadService as any).fetchCopybook(\"HLQ.DSN1\", undefined);\n+        expect(result).toBe(false);\n     });\n-    it(\"handleCopybook rethrow ZoweError from zoweApi\", async () => {\n+\n+    test(\"Given a copybook name that is a valid member on MF, the fetchCopybook correctly invoke download from MF\", async () => {\n+        zoweApi.listMembers = jest.fn().mockReturnValue(\"copybook\");\n+        (copybookDownloadService as any).downloadCopybookFromMFUsingZowe = jest.fn();\n+        const result = await (copybookDownloadService as any).fetchCopybook(\"HLQ.DSN1\", copybookProfile);\n+        expect(result).toBe(true);\n+    });\n+});\n+describe(\"Receiving an error from zowe api layer, copybooks are not retrivied and user is correctly notified\", () => {\n+    describe(\"Suite of tests related to fetchCopybook\", () => {\n+        it(\"fetchCopybook rethrow ZoweError from zoweApi\", async () => {\n+            const zoweApi: any = {\n+                listMembers: jest.fn().mockRejectedValue(zoweGeneralError),\n+            };\n+            const cbd = new CopybookDownloadService(null, zoweApi, null, null);\n+            expect((cbd as any).fetchCopybook(null, null)).rejects.toEqual(zoweGeneralError);\n+        });\n+    });\n+\n+    describe(\"Suite of tests related to handleCopybook\", () => {\n         const zoweApi: any = {\n             listMembers: jest.fn().mockRejectedValue(zoweGeneralError),\n         };\n         const cbd = new CopybookDownloadService(null, zoweApi, null, null);\n-        expect((cbd as any).handleCopybook(null, null, null)).rejects.toEqual(zoweGeneralError);\n-    });\n-    it(\"handleDataset rethow non NotFound ZoweErrors\", async () => {\n-        const cbd = new CopybookDownloadService(null, null, null, null);\n-        (cbd as any).handleCopybook = jest.fn().mockRejectedValue(zoweGeneralError);\n-        const toDownload = [copybookProfile];\n-        const progress = {report: jest.fn()};\n-        expect((cbd as any).handleDataset(null, toDownload, null, progress)).rejects.toEqual(zoweGeneralError);\n-    });\n-    it(\"handleDataset show an error if copybook is not found\", async () => {\n-        const zoweError = new ZoweError(\"not found\", Type.NotFound);\n-        const cbd = new CopybookDownloadService(null, null, null, null);\n-        (cbd as any).handleCopybook = jest.fn().mockRejectedValue(zoweError);\n-        const toDownload = [copybookProfile];\n-        const progress = {report: jest.fn()};\n-        vscode.window.showErrorMessage = jest.fn();\n-        await (cbd as any).handleDataset(\"DATA.SET\", toDownload, null, progress);\n-        expect(vscode.window.showErrorMessage).toHaveBeenCalledWith(\"Dataset DATA.SET not found.\");\n-    });\n-    it(\"handleDataset show an error for non ZoweError\", async () => {\n-        const errorMessage = \"The error\";\n-        const cbd = new CopybookDownloadService(null, null, null, null);\n-        (cbd as any).handleCopybook = jest.fn().mockRejectedValue(new Error(errorMessage));\n-        const toDownload = [copybookProfile];\n-        const progress = {report: jest.fn()};\n-        vscode.window.showErrorMessage = jest.fn();\n-        await (cbd as any).handleDataset(\"DATA.SET\", toDownload, null, progress);\n-        expect(vscode.window.showErrorMessage).toHaveBeenCalledWith(\"Error: \" + errorMessage);\n+\n+        it(\"handleCopybook rethrow ZoweError from zoweApi\", async () => {\n+            expect((cbd as any).handleCopybook(null, null, null)).rejects.toEqual(zoweGeneralError);\n+        });\n+\n+        it(\"handleCopybook delete copybook from its internal queue if the copybook is a valid member on MF\", async () => {\n+            // simulate that the copybook required is a valid member name on MF\n+            (cbd as any).fetchCopybook = jest.fn().mockReturnValue(true);\n+\n+            // simulate that the a copybook not found is already defined in a queue\n+            const errorQueue: Set<string> = new Set();\n+            errorQueue.add(\"copybook\");\n+\n+            await (cbd as any).handleCopybook(\"DSNAME1\", copybookProfile, errorQueue);\n+\n+            // after the analysis - since the item in the queue is a valid member on MF it should be removed from the\n+            // error queue\n+            expect(errorQueue.size).toBe(0);\n+        });\n+\n     });\n-    it(\"handleQueue show an error for non ZoweError\", async () => {\n-        const errorMessage = \"The error\";\n-        const pathGenerator = new CopybooksPathGenerator(null);\n-        pathGenerator.listDatasets = jest.fn().mockResolvedValue([\"dataset\"]);\n-        const cbd = new CopybookDownloadService(null, null, null, pathGenerator);\n-        (cbd as any).handleDataset = jest.fn().mockRejectedValue(new Error(errorMessage));\n-        vscode.window.showErrorMessage = jest.fn();\n-        await (cbd as any).handleQueue(copybookProfile, new Set(), null);\n-        expect(vscode.window.showErrorMessage).toHaveBeenCalledWith(\"Error: \" + errorMessage);\n+\n+    describe(\"Suite of tests related to handleDataset\", () => {\n+\n+        it(\"handleDataset rethow non NotFound ZoweErrors\", async () => {\n+            const cbd = new CopybookDownloadService(null, null, null, null);\n+            (cbd as any).handleCopybook = jest.fn().mockRejectedValue(zoweGeneralError);\n+            const toDownload = [copybookProfile];\n+            const progress = {report: jest.fn()};\n+            expect((cbd as any).handleDataset(null, toDownload, null, progress)).rejects.toEqual(zoweGeneralError);\n+        });\n+        it(\"handleDataset show an error if copybook is not found\", async () => {\n+            const zoweError = new ZoweError(\"not found\", Type.NotFound);\n+            const cbd = new CopybookDownloadService(null, null, null, null);\n+            (cbd as any).handleCopybook = jest.fn().mockRejectedValue(zoweError);\n+            const toDownload = [copybookProfile];\n+            const progress = {report: jest.fn()};\n+            vscode.window.showErrorMessage = jest.fn();\n+            await (cbd as any).handleDataset(\"DATA.SET\", toDownload, null, progress);\n+            expect(vscode.window.showErrorMessage).toHaveBeenCalledWith(\"Dataset DATA.SET not found.\");\n+        });\n+        it(\"handleDataset show an error for non ZoweError\", async () => {\n+            const errorMessage = \"The error\";\n+            const cbd = new CopybookDownloadService(null, null, null, null);\n+            (cbd as any).handleCopybook = jest.fn().mockRejectedValue(new Error(errorMessage));\n+            const toDownload = [copybookProfile];\n+            const progress = {report: jest.fn()};\n+            vscode.window.showErrorMessage = jest.fn();\n+            await (cbd as any).handleDataset(\"DATA.SET\", toDownload, null, progress);\n+            expect(vscode.window.showErrorMessage).toHaveBeenCalledWith(\"Error: \" + errorMessage);\n+        });\n     });\n-    it(\"handleQueue handle Invalid credentials ZoweError\", async () => {\n-        const pathGenerator = new CopybooksPathGenerator(null);\n-        pathGenerator.listDatasets = jest.fn().mockResolvedValue([\"dataset\"]);\n-        const cbd = new CopybookDownloadService(null, null, null, pathGenerator);\n-        (cbd as any).handleDataset = jest.fn().mockRejectedValue(new ZoweError(\"\", Type.InvalidCredentials));\n-        vscode.window.showErrorMessage = jest.fn();\n-        await (cbd as any).handleQueue(copybookProfile, new Set(), null);\n-        expect(vscode.window.showErrorMessage)\n-            .toHaveBeenCalledWith(\"Incorrect credentials in Zowe profile zoweProfile.\");\n+\n+    describe(\"Suite of tests related to handleQueue\", () => {\n+        it(\"handleQueue show an error for non ZoweError\", async () => {\n+            const errorMessage = \"The error\";\n+            const pathGenerator = new CopybooksPathGenerator(null);\n+            pathGenerator.listDatasets = jest.fn().mockResolvedValue([\"dataset\"]);\n+            const cbd = new CopybookDownloadService(null, null, null, pathGenerator);\n+            (cbd as any).handleDataset = jest.fn().mockRejectedValue(new Error(errorMessage));\n+            vscode.window.showErrorMessage = jest.fn();\n+            await (cbd as any).handleQueue(copybookProfile, new Set(), null);\n+            expect(vscode.window.showErrorMessage).toHaveBeenCalledWith(\"Error: \" + errorMessage);\n+        });\n+        it(\"handleQueue handle Invalid credentials ZoweError\", async () => {\n+            const pathGenerator = new CopybooksPathGenerator(null);\n+            pathGenerator.listDatasets = jest.fn().mockResolvedValue([\"dataset\"]);\n+            const cbd = new CopybookDownloadService(null, null, null, pathGenerator);\n+            (cbd as any).handleDataset = jest.fn().mockRejectedValue(new ZoweError(\"\", Type.InvalidCredentials));\n+            vscode.window.showErrorMessage = jest.fn();\n+            await (cbd as any).handleQueue(copybookProfile, new Set(), null);\n+            expect(vscode.window.showErrorMessage)\n+                .toHaveBeenCalledWith(\"Incorrect credentials in Zowe profile zoweProfile.\");\n+        });\n+        it(\"handleQueue handle Connection refused ZoweError\", async () => {\n+            const pathGenerator = new CopybooksPathGenerator(null);\n+            pathGenerator.listDatasets = jest.fn().mockResolvedValue([\"dataset\"]);\n+            const cbd = new CopybookDownloadService(null, null, null, pathGenerator);\n+            (cbd as any).handleDataset = jest.fn().mockRejectedValue(new ZoweError(\"\", Type.ConnRefused));\n+            vscode.window.showErrorMessage = jest.fn();\n+            await (cbd as any).handleQueue(copybookProfile, new Set(), null);\n+            expect(vscode.window.showErrorMessage)\n+                .toHaveBeenCalledWith(\"Connection to mainframe using Zowe profile zoweProfile failed.\");\n+        });\n+        it(\"handleQueue handle No password ZoweError\", async () => {\n+            const pathGenerator = new CopybooksPathGenerator(null);\n+            pathGenerator.listDatasets = jest.fn().mockResolvedValue([\"dataset\"]);\n+            const cbd = new CopybookDownloadService(null, null, null, pathGenerator);\n+            (cbd as any).handleDataset = jest.fn().mockRejectedValue(new ZoweError(\"\", Type.NoPassword));\n+            vscode.window.showErrorMessage = jest.fn();\n+            await (cbd as any).handleQueue(copybookProfile, new Set(), null);\n+            expect(vscode.window.showErrorMessage).toHaveBeenCalledWith(\"No password in Zowe profile zoweProfile.\");\n+        });\n     });\n-    it(\"handleQueue handle Connection refused ZoweError\", async () => {\n-        const pathGenerator = new CopybooksPathGenerator(null);\n-        pathGenerator.listDatasets = jest.fn().mockResolvedValue([\"dataset\"]);\n-        const cbd = new CopybookDownloadService(null, null, null, pathGenerator);\n-        (cbd as any).handleDataset = jest.fn().mockRejectedValue(new ZoweError(\"\", Type.ConnRefused));\n-        vscode.window.showErrorMessage = jest.fn();\n-        await (cbd as any).handleQueue(copybookProfile, new Set(), null);\n-        expect(vscode.window.showErrorMessage)\n-            .toHaveBeenCalledWith(\"Connection to mainframe using Zowe profile zoweProfile failed.\");\n+});\n+\n+describe(\"Test the creation of folders that contains copybooks downloaded from MF against correct configuration in settings provided by the user\", () => {\n+    function setupScenario() {\n+        const testFolder = path.join(__dirname, C4Z_FOLDER, COPYBOOKS_FOLDER, \"profile\", \"dataset\");\n+        const copybookURIPath = path.join(testFolder, \"copybook\" + \".cpy\");\n+        const zoweApi = new ZoweApi();\n+        const copybooksDownloadService: CopybookDownloadService = new CopybookDownloadService(undefined, zoweApi, undefined, undefined);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a8aa0cf35db8c2660ef8abfa8500c3b62d1c84a"}, "originalPosition": 260}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2OTk4MzIx", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/382#pullrequestreview-426998321", "createdAt": "2020-06-09T10:19:03Z", "commit": {"oid": "9a8aa0cf35db8c2660ef8abfa8500c3b62d1c84a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxOTowM1rOGhCxFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxOTowM1rOGhCxFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMwMTUyNw==", "bodyText": "we can remove these comments, method has good naming", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/382#discussion_r437301527", "createdAt": "2020-06-09T10:19:03Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/CopybookDownloadServiceTest.ts", "diffHunk": "@@ -12,119 +12,207 @@\n  *   Broadcom, Inc. - initial API and implementation\n  */\n \n+import * as fs from \"fs-extra\";\n+import * as path from \"path\";\n import * as vscode from \"vscode\";\n+import {C4Z_FOLDER, COPYBOOKS_FOLDER} from \"../constants\";\n import {CopybookDownloadService} from \"../services/CopybookDownloadService\";\n-import {CopybooksPathGenerator} from \"../services/CopybooksPathGenerator\";\n+import {CopybookFix} from \"../services/CopybookFix\";\n+import {CopybooksPathGenerator, createCopybookPath, createDatasetPath} from \"../services/CopybooksPathGenerator\";\n import {CopybookProfile} from \"../services/DownloadQueue\";\n+import {ProfileService} from \"../services/ProfileService\";\n+import {ZoweApi} from \"../services/ZoweApi\";\n import {Type, ZoweError} from \"../services/ZoweError\";\n \n-// tslint:disable: no-unused-expression no-string-literal\n-describe(\"Copybook downloader\", () => {\n-    vscode.workspace.workspaceFolders = [{} as any];\n-    vscode.window.showInformationMessage = () => Promise.resolve(\"Download Copybooks\");\n-    const profile = \"zoweProfile\";\n-    const copybookProfile = new CopybookProfile(\"copybook\", profile);\n-    const zoweGeneralError = new ZoweError(\"zowe error\", Type.General);\n-    it(\"Can download copybook\", async () => {\n-        /* WORK IN PROGRESS\n-                const zoweApi: any = {\n-                    listZOSMFProfiles: jest.fn().mockReturnValue([\"Something\"]),\n-                };\n-                const profileService: any = {\n-                    getProfile: jest.fn().mockReturnValue(profile),\n-                };\n-                const cbd: CopybooksDownloader = new CopybooksDownloader(zoweApi, profileService);\n-                const uri: any = {};\n-                (cbd as any).listMissingCopybooks = () => [\"COPYBVOOK\"];\n-                try {\n-                    await cbd.downloadDependencies(uri);\n-                    cbd.start();\n-                } finally {\n-                    cbd.dispose();\n-                }\n-\n-                expect(zoweApi.listZOSMFProfiles).toBeCalled();\n-        */\n+vscode.workspace.workspaceFolders = [{} as any];\n+vscode.window.showInformationMessage = () => Promise.resolve(\"Download Copybooks\");\n+const profile = \"zoweProfile\";\n+const copybookProfile = new CopybookProfile(\"copybook\", profile);\n+const zoweGeneralError = new ZoweError(\"zowe error\", Type.General);\n+const copybookFix: CopybookFix = new CopybookFix();\n \n+describe(\"Test fetchCopybook against bad and correct configurations\", () => {\n+    let zoweApi: ZoweApi;\n+    let copybookDownloadService: CopybookDownloadService;\n+\n+    beforeAll(() => {\n+        zoweApi = new ZoweApi();\n+        copybookDownloadService = new CopybookDownloadService(copybookFix, zoweApi, null, null);\n     });\n-    it(\"fetchCopybook rethrow ZoweError from zoweApi\", async () => {\n-        const zoweApi: any = {\n-            listMembers: jest.fn().mockRejectedValue(zoweGeneralError),\n-        };\n-        const cbd = new CopybookDownloadService(null, zoweApi, null, null);\n-        expect((cbd as any).fetchCopybook(null, null)).rejects.toEqual(zoweGeneralError);\n+\n+    test(\"Given a copybook name that is not a valid member on MF, the copybook is not downloaded\", async () => {\n+        zoweApi.listMembers = jest.fn().mockReturnValue(\"ANTHMEM\");\n+\n+        const result = await (copybookDownloadService as any).fetchCopybook(\"HLQ.DSN1\", copybookProfile);\n+        expect(result).toBe(false);\n+    });\n+\n+    test(\"Given a copybook name but a wrong instance of profile, the copybook is not downloaded and exception is thrown\", async () => {\n+        zoweApi.listMembers = jest.fn().mockReturnValue(\"copybook\");\n+        copybookFix.processDownloadError = jest.fn();\n+        const result = await (copybookDownloadService as any).fetchCopybook(\"HLQ.DSN1\", undefined);\n+        expect(result).toBe(false);\n     });\n-    it(\"handleCopybook rethrow ZoweError from zoweApi\", async () => {\n+\n+    test(\"Given a copybook name that is a valid member on MF, the fetchCopybook correctly invoke download from MF\", async () => {\n+        zoweApi.listMembers = jest.fn().mockReturnValue(\"copybook\");\n+        (copybookDownloadService as any).downloadCopybookFromMFUsingZowe = jest.fn();\n+        const result = await (copybookDownloadService as any).fetchCopybook(\"HLQ.DSN1\", copybookProfile);\n+        expect(result).toBe(true);\n+    });\n+});\n+describe(\"Receiving an error from zowe api layer, copybooks are not retrivied and user is correctly notified\", () => {\n+    describe(\"Suite of tests related to fetchCopybook\", () => {\n+        it(\"fetchCopybook rethrow ZoweError from zoweApi\", async () => {\n+            const zoweApi: any = {\n+                listMembers: jest.fn().mockRejectedValue(zoweGeneralError),\n+            };\n+            const cbd = new CopybookDownloadService(null, zoweApi, null, null);\n+            expect((cbd as any).fetchCopybook(null, null)).rejects.toEqual(zoweGeneralError);\n+        });\n+    });\n+\n+    describe(\"Suite of tests related to handleCopybook\", () => {\n         const zoweApi: any = {\n             listMembers: jest.fn().mockRejectedValue(zoweGeneralError),\n         };\n         const cbd = new CopybookDownloadService(null, zoweApi, null, null);\n-        expect((cbd as any).handleCopybook(null, null, null)).rejects.toEqual(zoweGeneralError);\n-    });\n-    it(\"handleDataset rethow non NotFound ZoweErrors\", async () => {\n-        const cbd = new CopybookDownloadService(null, null, null, null);\n-        (cbd as any).handleCopybook = jest.fn().mockRejectedValue(zoweGeneralError);\n-        const toDownload = [copybookProfile];\n-        const progress = {report: jest.fn()};\n-        expect((cbd as any).handleDataset(null, toDownload, null, progress)).rejects.toEqual(zoweGeneralError);\n-    });\n-    it(\"handleDataset show an error if copybook is not found\", async () => {\n-        const zoweError = new ZoweError(\"not found\", Type.NotFound);\n-        const cbd = new CopybookDownloadService(null, null, null, null);\n-        (cbd as any).handleCopybook = jest.fn().mockRejectedValue(zoweError);\n-        const toDownload = [copybookProfile];\n-        const progress = {report: jest.fn()};\n-        vscode.window.showErrorMessage = jest.fn();\n-        await (cbd as any).handleDataset(\"DATA.SET\", toDownload, null, progress);\n-        expect(vscode.window.showErrorMessage).toHaveBeenCalledWith(\"Dataset DATA.SET not found.\");\n-    });\n-    it(\"handleDataset show an error for non ZoweError\", async () => {\n-        const errorMessage = \"The error\";\n-        const cbd = new CopybookDownloadService(null, null, null, null);\n-        (cbd as any).handleCopybook = jest.fn().mockRejectedValue(new Error(errorMessage));\n-        const toDownload = [copybookProfile];\n-        const progress = {report: jest.fn()};\n-        vscode.window.showErrorMessage = jest.fn();\n-        await (cbd as any).handleDataset(\"DATA.SET\", toDownload, null, progress);\n-        expect(vscode.window.showErrorMessage).toHaveBeenCalledWith(\"Error: \" + errorMessage);\n+\n+        it(\"handleCopybook rethrow ZoweError from zoweApi\", async () => {\n+            expect((cbd as any).handleCopybook(null, null, null)).rejects.toEqual(zoweGeneralError);\n+        });\n+\n+        it(\"handleCopybook delete copybook from its internal queue if the copybook is a valid member on MF\", async () => {\n+            // simulate that the copybook required is a valid member name on MF\n+            (cbd as any).fetchCopybook = jest.fn().mockReturnValue(true);\n+\n+            // simulate that the a copybook not found is already defined in a queue\n+            const errorQueue: Set<string> = new Set();\n+            errorQueue.add(\"copybook\");\n+\n+            await (cbd as any).handleCopybook(\"DSNAME1\", copybookProfile, errorQueue);\n+\n+            // after the analysis - since the item in the queue is a valid member on MF it should be removed from the\n+            // error queue\n+            expect(errorQueue.size).toBe(0);\n+        });\n+\n     });\n-    it(\"handleQueue show an error for non ZoweError\", async () => {\n-        const errorMessage = \"The error\";\n-        const pathGenerator = new CopybooksPathGenerator(null);\n-        pathGenerator.listDatasets = jest.fn().mockResolvedValue([\"dataset\"]);\n-        const cbd = new CopybookDownloadService(null, null, null, pathGenerator);\n-        (cbd as any).handleDataset = jest.fn().mockRejectedValue(new Error(errorMessage));\n-        vscode.window.showErrorMessage = jest.fn();\n-        await (cbd as any).handleQueue(copybookProfile, new Set(), null);\n-        expect(vscode.window.showErrorMessage).toHaveBeenCalledWith(\"Error: \" + errorMessage);\n+\n+    describe(\"Suite of tests related to handleDataset\", () => {\n+\n+        it(\"handleDataset rethow non NotFound ZoweErrors\", async () => {\n+            const cbd = new CopybookDownloadService(null, null, null, null);\n+            (cbd as any).handleCopybook = jest.fn().mockRejectedValue(zoweGeneralError);\n+            const toDownload = [copybookProfile];\n+            const progress = {report: jest.fn()};\n+            expect((cbd as any).handleDataset(null, toDownload, null, progress)).rejects.toEqual(zoweGeneralError);\n+        });\n+        it(\"handleDataset show an error if copybook is not found\", async () => {\n+            const zoweError = new ZoweError(\"not found\", Type.NotFound);\n+            const cbd = new CopybookDownloadService(null, null, null, null);\n+            (cbd as any).handleCopybook = jest.fn().mockRejectedValue(zoweError);\n+            const toDownload = [copybookProfile];\n+            const progress = {report: jest.fn()};\n+            vscode.window.showErrorMessage = jest.fn();\n+            await (cbd as any).handleDataset(\"DATA.SET\", toDownload, null, progress);\n+            expect(vscode.window.showErrorMessage).toHaveBeenCalledWith(\"Dataset DATA.SET not found.\");\n+        });\n+        it(\"handleDataset show an error for non ZoweError\", async () => {\n+            const errorMessage = \"The error\";\n+            const cbd = new CopybookDownloadService(null, null, null, null);\n+            (cbd as any).handleCopybook = jest.fn().mockRejectedValue(new Error(errorMessage));\n+            const toDownload = [copybookProfile];\n+            const progress = {report: jest.fn()};\n+            vscode.window.showErrorMessage = jest.fn();\n+            await (cbd as any).handleDataset(\"DATA.SET\", toDownload, null, progress);\n+            expect(vscode.window.showErrorMessage).toHaveBeenCalledWith(\"Error: \" + errorMessage);\n+        });\n     });\n-    it(\"handleQueue handle Invalid credentials ZoweError\", async () => {\n-        const pathGenerator = new CopybooksPathGenerator(null);\n-        pathGenerator.listDatasets = jest.fn().mockResolvedValue([\"dataset\"]);\n-        const cbd = new CopybookDownloadService(null, null, null, pathGenerator);\n-        (cbd as any).handleDataset = jest.fn().mockRejectedValue(new ZoweError(\"\", Type.InvalidCredentials));\n-        vscode.window.showErrorMessage = jest.fn();\n-        await (cbd as any).handleQueue(copybookProfile, new Set(), null);\n-        expect(vscode.window.showErrorMessage)\n-            .toHaveBeenCalledWith(\"Incorrect credentials in Zowe profile zoweProfile.\");\n+\n+    describe(\"Suite of tests related to handleQueue\", () => {\n+        it(\"handleQueue show an error for non ZoweError\", async () => {\n+            const errorMessage = \"The error\";\n+            const pathGenerator = new CopybooksPathGenerator(null);\n+            pathGenerator.listDatasets = jest.fn().mockResolvedValue([\"dataset\"]);\n+            const cbd = new CopybookDownloadService(null, null, null, pathGenerator);\n+            (cbd as any).handleDataset = jest.fn().mockRejectedValue(new Error(errorMessage));\n+            vscode.window.showErrorMessage = jest.fn();\n+            await (cbd as any).handleQueue(copybookProfile, new Set(), null);\n+            expect(vscode.window.showErrorMessage).toHaveBeenCalledWith(\"Error: \" + errorMessage);\n+        });\n+        it(\"handleQueue handle Invalid credentials ZoweError\", async () => {\n+            const pathGenerator = new CopybooksPathGenerator(null);\n+            pathGenerator.listDatasets = jest.fn().mockResolvedValue([\"dataset\"]);\n+            const cbd = new CopybookDownloadService(null, null, null, pathGenerator);\n+            (cbd as any).handleDataset = jest.fn().mockRejectedValue(new ZoweError(\"\", Type.InvalidCredentials));\n+            vscode.window.showErrorMessage = jest.fn();\n+            await (cbd as any).handleQueue(copybookProfile, new Set(), null);\n+            expect(vscode.window.showErrorMessage)\n+                .toHaveBeenCalledWith(\"Incorrect credentials in Zowe profile zoweProfile.\");\n+        });\n+        it(\"handleQueue handle Connection refused ZoweError\", async () => {\n+            const pathGenerator = new CopybooksPathGenerator(null);\n+            pathGenerator.listDatasets = jest.fn().mockResolvedValue([\"dataset\"]);\n+            const cbd = new CopybookDownloadService(null, null, null, pathGenerator);\n+            (cbd as any).handleDataset = jest.fn().mockRejectedValue(new ZoweError(\"\", Type.ConnRefused));\n+            vscode.window.showErrorMessage = jest.fn();\n+            await (cbd as any).handleQueue(copybookProfile, new Set(), null);\n+            expect(vscode.window.showErrorMessage)\n+                .toHaveBeenCalledWith(\"Connection to mainframe using Zowe profile zoweProfile failed.\");\n+        });\n+        it(\"handleQueue handle No password ZoweError\", async () => {\n+            const pathGenerator = new CopybooksPathGenerator(null);\n+            pathGenerator.listDatasets = jest.fn().mockResolvedValue([\"dataset\"]);\n+            const cbd = new CopybookDownloadService(null, null, null, pathGenerator);\n+            (cbd as any).handleDataset = jest.fn().mockRejectedValue(new ZoweError(\"\", Type.NoPassword));\n+            vscode.window.showErrorMessage = jest.fn();\n+            await (cbd as any).handleQueue(copybookProfile, new Set(), null);\n+            expect(vscode.window.showErrorMessage).toHaveBeenCalledWith(\"No password in Zowe profile zoweProfile.\");\n+        });\n     });\n-    it(\"handleQueue handle Connection refused ZoweError\", async () => {\n-        const pathGenerator = new CopybooksPathGenerator(null);\n-        pathGenerator.listDatasets = jest.fn().mockResolvedValue([\"dataset\"]);\n-        const cbd = new CopybookDownloadService(null, null, null, pathGenerator);\n-        (cbd as any).handleDataset = jest.fn().mockRejectedValue(new ZoweError(\"\", Type.ConnRefused));\n-        vscode.window.showErrorMessage = jest.fn();\n-        await (cbd as any).handleQueue(copybookProfile, new Set(), null);\n-        expect(vscode.window.showErrorMessage)\n-            .toHaveBeenCalledWith(\"Connection to mainframe using Zowe profile zoweProfile failed.\");\n+});\n+\n+describe(\"Test the creation of folders that contains copybooks downloaded from MF against correct configuration in settings provided by the user\", () => {\n+    function setupScenario() {\n+        const testFolder = path.join(__dirname, C4Z_FOLDER, COPYBOOKS_FOLDER, \"profile\", \"dataset\");\n+        const copybookURIPath = path.join(testFolder, \"copybook\" + \".cpy\");\n+        const zoweApi = new ZoweApi();\n+        const copybooksDownloadService: CopybookDownloadService = new CopybookDownloadService(undefined, zoweApi, undefined, undefined);\n+\n+        zoweApi.fetchMember = jest.fn().mockReturnValue(\"\");\n+        (createCopybookPath as any) = jest.fn().mockReturnValue(copybookURIPath);\n+        (createDatasetPath as any) = jest.fn().mockReturnValue(testFolder);\n+        return {copybookURIPath, copybooksDownloadService};\n+    }\n+\n+    function cleanupScenario() {\n+        fs.remove(path.join(__dirname, C4Z_FOLDER));\n+    }\n+\n+    test(\"With a valid configuration of dataset, copybook is created on FS\", async () => {\n+        const {copybookURIPath, copybooksDownloadService} = setupScenario();\n+        await (copybooksDownloadService as any).downloadCopybookFromMFUsingZowe(\"dataset\", \"copybook\", \"profile\");\n+        expect(fs.existsSync(copybookURIPath)).toBe(true);\n+\n+        // remove folder and file created to run the scenario", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a8aa0cf35db8c2660ef8abfa8500c3b62d1c84a"}, "originalPosition": 277}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MDExMjQz", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/382#pullrequestreview-427011243", "createdAt": "2020-06-09T10:37:33Z", "commit": {"oid": "9a8aa0cf35db8c2660ef8abfa8500c3b62d1c84a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be9f8f7593c46b52008ae05fae77043f357ef37c", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/be9f8f7593c46b52008ae05fae77043f357ef37c", "committedDate": "2020-06-10T08:26:31Z", "message": "refactor: Move shared local variables in describe function for CopybookDownloadServiceTest #382"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e67be80e5f78df8fdab9c64e76e44df147d97c9", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/9e67be80e5f78df8fdab9c64e76e44df147d97c9", "committedDate": "2020-06-10T08:27:08Z", "message": "Merge remote-tracking branch 'remotes/origin/development' into client-code-coverage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3ODQzNTg3", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/382#pullrequestreview-427843587", "createdAt": "2020-06-10T08:48:11Z", "commit": {"oid": "9e67be80e5f78df8fdab9c64e76e44df147d97c9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1132, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}