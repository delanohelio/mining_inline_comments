{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NzE4MjEz", "number": 681, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNjo1Nzo1NVrOE-hKHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzoxNzozMFrOE-hb8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTkwNDI5OnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/README.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNjo1Nzo1NVrOH7t8sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMTozODoxMFrOH73PuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM4MDg0OQ==", "bodyText": "\"The COBOL Language Support extension supports...\" sounds somehow redundant for me", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/681#discussion_r532380849", "createdAt": "2020-11-30T06:57:55Z", "author": {"login": "temanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/README.md", "diffHunk": "@@ -30,29 +30,68 @@ Autocomplete speeds up the coding process by intuitively suggesting the most lik\n - COBOL keywords\n - COBOL variables\n - COBOL paragraphs\n-- Code Snippet\n-- Copybook variables\n-- Copybook paragraphs\n+- CICS keywords\n+- Code Snippets\n+- Copybook variable and paragraph names\n - Names of copybooks that are used in the program\n+- Names of locally-stored subroutines that are used in the program\n \n-![Autocomplete](https://github.com/eclipse/che-che4z-lsp-for-cobol/raw/master/docs/images/CLSAutocorrect.gif)\n+The autocomplete feature is only available in the main COBOL file, not in copybooks.\n \n+![Autocomplete](/docs/images/CLSAutocorrect.gif)\n+\t\t\n ### Syntax and Semantic Check for Code\n This feature checks for mistakes and errors in COBOL code. The syntax check feature reviews the whole content of the code and suggests fixes, through syntax and semantic analysis which returns diagnostics on the entire context of the code, not just keywords.\n \n-![Syntax check](https://github.com/eclipse/che-che4z-lsp-for-cobol/raw/master/docs/images/CLSErrorHighlighting.gif)\n+This feature is also enabled for CICS keywords and variables.\n \n+![Syntax check](/docs/images/CLSErrorHighlighting.gif)\n+\t\t\t\n ### Syntax Highlighting\n The extension enables syntax highlighting for COBOL code.\n-\n+\t\n ### Syntax Coloring\n Contrasting colors are used in displayed code for ease of identifying and distinguishing keywords, variables, and paragraphs.\n \n+### Outline View and Breadcrumb View\n+The extension enables outline view and breadcrumb view, which show the structure of elements within the program and allow easy navigation between them.\n+\n+### Code Snippets\n+Before you write your COBOL code from scratch, search the snippet library for useful templates.\n+\n+**Follow these steps:**\n+\n+1. Press `F1` to open the command palette.\n+2. Type **Insert Snippet** and press enter.\n+3. Select the snippet that you want to insert.\n+\n+![Code snippets](/docs/images/Snippet.gif)\n+\n+You can also insert a code snippet by typing the name of the snippet in your code and clicking on the autocomplete text.\n+\n+The COBOL Language Support extension also supports user snippets. Add your custom snippets to the `COBOL.json` file in your user snippets folder.\n+\n+## Subroutine Support\n+\n+The COBOL Language Support extension supports subroutines specified in CALL statements if the called program is stored in a local folder in your workspace. The Go To Definition and Find All References functionalities, as well as autocomplete, are extended to work for names of subroutines. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c67b9c4415599fd15de3c433528d7adf5d6c1bc2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUyMzczMw==", "bodyText": "how is it redundant, the first \"support\" is part of the name of the extension", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/681#discussion_r532523733", "createdAt": "2020-11-30T11:20:56Z", "author": {"login": "zeibura"}, "path": "clients/cobol-lsp-vscode-extension/README.md", "diffHunk": "@@ -30,29 +30,68 @@ Autocomplete speeds up the coding process by intuitively suggesting the most lik\n - COBOL keywords\n - COBOL variables\n - COBOL paragraphs\n-- Code Snippet\n-- Copybook variables\n-- Copybook paragraphs\n+- CICS keywords\n+- Code Snippets\n+- Copybook variable and paragraph names\n - Names of copybooks that are used in the program\n+- Names of locally-stored subroutines that are used in the program\n \n-![Autocomplete](https://github.com/eclipse/che-che4z-lsp-for-cobol/raw/master/docs/images/CLSAutocorrect.gif)\n+The autocomplete feature is only available in the main COBOL file, not in copybooks.\n \n+![Autocomplete](/docs/images/CLSAutocorrect.gif)\n+\t\t\n ### Syntax and Semantic Check for Code\n This feature checks for mistakes and errors in COBOL code. The syntax check feature reviews the whole content of the code and suggests fixes, through syntax and semantic analysis which returns diagnostics on the entire context of the code, not just keywords.\n \n-![Syntax check](https://github.com/eclipse/che-che4z-lsp-for-cobol/raw/master/docs/images/CLSErrorHighlighting.gif)\n+This feature is also enabled for CICS keywords and variables.\n \n+![Syntax check](/docs/images/CLSErrorHighlighting.gif)\n+\t\t\t\n ### Syntax Highlighting\n The extension enables syntax highlighting for COBOL code.\n-\n+\t\n ### Syntax Coloring\n Contrasting colors are used in displayed code for ease of identifying and distinguishing keywords, variables, and paragraphs.\n \n+### Outline View and Breadcrumb View\n+The extension enables outline view and breadcrumb view, which show the structure of elements within the program and allow easy navigation between them.\n+\n+### Code Snippets\n+Before you write your COBOL code from scratch, search the snippet library for useful templates.\n+\n+**Follow these steps:**\n+\n+1. Press `F1` to open the command palette.\n+2. Type **Insert Snippet** and press enter.\n+3. Select the snippet that you want to insert.\n+\n+![Code snippets](/docs/images/Snippet.gif)\n+\n+You can also insert a code snippet by typing the name of the snippet in your code and clicking on the autocomplete text.\n+\n+The COBOL Language Support extension also supports user snippets. Add your custom snippets to the `COBOL.json` file in your user snippets folder.\n+\n+## Subroutine Support\n+\n+The COBOL Language Support extension supports subroutines specified in CALL statements if the called program is stored in a local folder in your workspace. The Go To Definition and Find All References functionalities, as well as autocomplete, are extended to work for names of subroutines. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM4MDg0OQ=="}, "originalCommit": {"oid": "c67b9c4415599fd15de3c433528d7adf5d6c1bc2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUzMzE3Ng==", "bodyText": "I just meant to use some other word not to repeat \"support\" into one sentence, but I have not found an example though. It is up to you, I don't insist", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/681#discussion_r532533176", "createdAt": "2020-11-30T11:38:10Z", "author": {"login": "temanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/README.md", "diffHunk": "@@ -30,29 +30,68 @@ Autocomplete speeds up the coding process by intuitively suggesting the most lik\n - COBOL keywords\n - COBOL variables\n - COBOL paragraphs\n-- Code Snippet\n-- Copybook variables\n-- Copybook paragraphs\n+- CICS keywords\n+- Code Snippets\n+- Copybook variable and paragraph names\n - Names of copybooks that are used in the program\n+- Names of locally-stored subroutines that are used in the program\n \n-![Autocomplete](https://github.com/eclipse/che-che4z-lsp-for-cobol/raw/master/docs/images/CLSAutocorrect.gif)\n+The autocomplete feature is only available in the main COBOL file, not in copybooks.\n \n+![Autocomplete](/docs/images/CLSAutocorrect.gif)\n+\t\t\n ### Syntax and Semantic Check for Code\n This feature checks for mistakes and errors in COBOL code. The syntax check feature reviews the whole content of the code and suggests fixes, through syntax and semantic analysis which returns diagnostics on the entire context of the code, not just keywords.\n \n-![Syntax check](https://github.com/eclipse/che-che4z-lsp-for-cobol/raw/master/docs/images/CLSErrorHighlighting.gif)\n+This feature is also enabled for CICS keywords and variables.\n \n+![Syntax check](/docs/images/CLSErrorHighlighting.gif)\n+\t\t\t\n ### Syntax Highlighting\n The extension enables syntax highlighting for COBOL code.\n-\n+\t\n ### Syntax Coloring\n Contrasting colors are used in displayed code for ease of identifying and distinguishing keywords, variables, and paragraphs.\n \n+### Outline View and Breadcrumb View\n+The extension enables outline view and breadcrumb view, which show the structure of elements within the program and allow easy navigation between them.\n+\n+### Code Snippets\n+Before you write your COBOL code from scratch, search the snippet library for useful templates.\n+\n+**Follow these steps:**\n+\n+1. Press `F1` to open the command palette.\n+2. Type **Insert Snippet** and press enter.\n+3. Select the snippet that you want to insert.\n+\n+![Code snippets](/docs/images/Snippet.gif)\n+\n+You can also insert a code snippet by typing the name of the snippet in your code and clicking on the autocomplete text.\n+\n+The COBOL Language Support extension also supports user snippets. Add your custom snippets to the `COBOL.json` file in your user snippets folder.\n+\n+## Subroutine Support\n+\n+The COBOL Language Support extension supports subroutines specified in CALL statements if the called program is stored in a local folder in your workspace. The Go To Definition and Find All References functionalities, as well as autocomplete, are extended to work for names of subroutines. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM4MDg0OQ=="}, "originalCommit": {"oid": "c67b9c4415599fd15de3c433528d7adf5d6c1bc2"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTkyNzUzOnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzowODoxOFrOH7uJow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMDowODoyM1rOH7z8gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM4NDE2Mw==", "bodyText": "Also sections and subroutines", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/681#discussion_r532384163", "createdAt": "2020-11-30T07:08:18Z", "author": {"login": "temanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/README.md", "diffHunk": "@@ -30,29 +30,68 @@ Autocomplete speeds up the coding process by intuitively suggesting the most lik\n - COBOL keywords\n - COBOL variables\n - COBOL paragraphs\n-- Code Snippet\n-- Copybook variables\n-- Copybook paragraphs\n+- CICS keywords\n+- Code Snippets\n+- Copybook variable and paragraph names", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c67b9c4415599fd15de3c433528d7adf5d6c1bc2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ3OTEwNA==", "bodyText": "Subroutines are mentioned", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/681#discussion_r532479104", "createdAt": "2020-11-30T10:08:23Z", "author": {"login": "zeibura"}, "path": "clients/cobol-lsp-vscode-extension/README.md", "diffHunk": "@@ -30,29 +30,68 @@ Autocomplete speeds up the coding process by intuitively suggesting the most lik\n - COBOL keywords\n - COBOL variables\n - COBOL paragraphs\n-- Code Snippet\n-- Copybook variables\n-- Copybook paragraphs\n+- CICS keywords\n+- Code Snippets\n+- Copybook variable and paragraph names", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM4NDE2Mw=="}, "originalCommit": {"oid": "c67b9c4415599fd15de3c433528d7adf5d6c1bc2"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTk0OTkyOnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzoxNzozMFrOH7uWFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMToyNDozM1rOH72yUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM4NzM0OA==", "bodyText": "I'm not sure, but I think we should explain in more detail that the user may enable the coloring for copybooks without extensions by selecting \"COBOL Copybook\" language id", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/681#discussion_r532387348", "createdAt": "2020-11-30T07:17:30Z", "author": {"login": "temanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/README.md", "diffHunk": "@@ -93,28 +134,60 @@ Copybooks downloaded from the mainframe using an older version of COBOL Language\n \n The extension includes the following copybook support features:\n \n-* Semantic analysis for keywords, variables, and paragraphs across copybooks, to ensure and maintain compatibility of copybooks called in code.\n-* Inbuilt protection against recursive and missing copybooks. If the copybook is missing or contains looping code, an error displays, preventing issues only being discovered when the code is executed.\n-* Variables and paragraphs are defined across copybooks. This ensures consistency of code, and prevents issues in error diagnostics caused by incorrect variables or paragraphs in code.\n+#### Syntax and Semantic Check\n+\n+Syntax and semantic analysis are enabled for keywords, variables, and paragraphs across all copybooks used in the COBOL file, to ensure and maintain compatibility of copybooks called in code.\n+\n+The semantic analysis feature takes into account `COPY REPLACING` statements which alter the content of copybooks when checking for errors.\n+\n+![Semantic check before and after a REPLACING statement](/docs/images/CPYReplacing.gif)\n+\n+#### Syntax Coloring\n+\n+Syntax coloring is automatically enabled for copybook files with the extension `.cpy`, as long as they are used in the main COBOL file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c67b9c4415599fd15de3c433528d7adf5d6c1bc2"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUyNTY1MA==", "bodyText": "Done (on both readmes)", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/681#discussion_r532525650", "createdAt": "2020-11-30T11:24:33Z", "author": {"login": "zeibura"}, "path": "clients/cobol-lsp-vscode-extension/README.md", "diffHunk": "@@ -93,28 +134,60 @@ Copybooks downloaded from the mainframe using an older version of COBOL Language\n \n The extension includes the following copybook support features:\n \n-* Semantic analysis for keywords, variables, and paragraphs across copybooks, to ensure and maintain compatibility of copybooks called in code.\n-* Inbuilt protection against recursive and missing copybooks. If the copybook is missing or contains looping code, an error displays, preventing issues only being discovered when the code is executed.\n-* Variables and paragraphs are defined across copybooks. This ensures consistency of code, and prevents issues in error diagnostics caused by incorrect variables or paragraphs in code.\n+#### Syntax and Semantic Check\n+\n+Syntax and semantic analysis are enabled for keywords, variables, and paragraphs across all copybooks used in the COBOL file, to ensure and maintain compatibility of copybooks called in code.\n+\n+The semantic analysis feature takes into account `COPY REPLACING` statements which alter the content of copybooks when checking for errors.\n+\n+![Semantic check before and after a REPLACING statement](/docs/images/CPYReplacing.gif)\n+\n+#### Syntax Coloring\n+\n+Syntax coloring is automatically enabled for copybook files with the extension `.cpy`, as long as they are used in the main COBOL file.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM4NzM0OA=="}, "originalCommit": {"oid": "c67b9c4415599fd15de3c433528d7adf5d6c1bc2"}, "originalPosition": 130}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3875, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}