{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2MjY4MjQ0", "number": 493, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDo0ODo0OVrOEe2TzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDo0ODo0OVrOEe2TzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzgyNTQxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/ca/lsp/cobol/service/delegates/validations/CobolLanguageEngineFacade.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDo0ODo0OVrOHKw1yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMTo1NDoxM1rOHKy04Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0ODAxMQ==", "bodyText": "What about using something like this one?\n    return source.entrySet().stream().collect(toMap(Map.Entry::getKey, it -> new ArrayList<>(it.getValue())));", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/493#discussion_r481048011", "createdAt": "2020-09-01T10:48:49Z", "author": {"login": "grianbrcom"}, "path": "server/src/main/java/com/ca/lsp/cobol/service/delegates/validations/CobolLanguageEngineFacade.java", "diffHunk": "@@ -145,27 +141,11 @@ private static DiagnosticSeverity checkSeverity(ErrorSeverity severity) {\n     return DiagnosticSeverity.forValue(severity.ordinal() + 1);\n   }\n \n-  private static Range convertRange(Position position) {\n-    int positionLine = position.getLine() - ERR_POS_INDEX;\n-    int cPosInLn = position.getCharPositionInLine();\n-\n-    return new Range(\n-        new org.eclipse.lsp4j.Position(positionLine, cPosInLn),\n-        new org.eclipse.lsp4j.Position(\n-            positionLine,\n-            ((position.getStopPosition() - position.getStartPosition())\n-                + cPosInLn\n-                + ERR_POS_INDEX)));\n+  private Map<String, List<Location>> convertLocations(Map<String, Collection<Location>> source) {\n+    return source.entrySet().stream().collect(toMap(Map.Entry::getKey, this::repackCollection));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3498183ac7e6b7f602ac90dd067108c500fb64ab"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4MDU0NQ==", "bodyText": "yeah, makes sense", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/493#discussion_r481080545", "createdAt": "2020-09-01T11:54:13Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/ca/lsp/cobol/service/delegates/validations/CobolLanguageEngineFacade.java", "diffHunk": "@@ -145,27 +141,11 @@ private static DiagnosticSeverity checkSeverity(ErrorSeverity severity) {\n     return DiagnosticSeverity.forValue(severity.ordinal() + 1);\n   }\n \n-  private static Range convertRange(Position position) {\n-    int positionLine = position.getLine() - ERR_POS_INDEX;\n-    int cPosInLn = position.getCharPositionInLine();\n-\n-    return new Range(\n-        new org.eclipse.lsp4j.Position(positionLine, cPosInLn),\n-        new org.eclipse.lsp4j.Position(\n-            positionLine,\n-            ((position.getStopPosition() - position.getStartPosition())\n-                + cPosInLn\n-                + ERR_POS_INDEX)));\n+  private Map<String, List<Location>> convertLocations(Map<String, Collection<Location>> source) {\n+    return source.entrySet().stream().collect(toMap(Map.Entry::getKey, this::repackCollection));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0ODAxMQ=="}, "originalCommit": {"oid": "3498183ac7e6b7f602ac90dd067108c500fb64ab"}, "originalPosition": 112}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3938, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}