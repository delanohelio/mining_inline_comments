{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MTcyNTgw", "number": 201, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo1NDozNlrODgdLaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo1NDozNlrODgdLaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzU5MDgzOnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo1NDozNlrOFqq_QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOToxMjo1M1rOFq6aEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4ODgzMg==", "bodyText": "I saw a huge effort to use static imports here. According with the official documentation:\n\nSo when should you use static import? Very sparingly! Only use it when you'd otherwise be tempted to declare local copies of constants, or to abuse inheritance (the Constant Interface Antipattern). In other words, use it when you require frequent access to static members from one or two classes. If you overuse the static import feature, it can make your program unreadable and unmaintainable, polluting its namespace with all the static members you import. Readers of your code (including you, a few months after you wrote it) will not know which class a static member comes from. Importing all of the static members from a class can be particularly harmful to readability; if you need only one or two members, import them individually. Used appropriately, static import can make your program more readable, by removing the boilerplate of repetition of class names.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/201#discussion_r380288832", "createdAt": "2020-02-17T16:54:36Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java", "diffHunk": "@@ -140,68 +144,77 @@ public Class visitDataName2(\n   }\n \n   public Class visitInData(\n-      String child, int childStartLine, int childPositionInLine, CobolParser.InDataContext ctx) {\n+      String child, int childStartLine, int childPositionInLine, InDataContext ctx) {\n     checkForDataName2(ctx.dataName2(), child, childStartLine, childPositionInLine);\n     return visitChildren(ctx);\n   }\n \n   public Class visitInTable(\n-      String child, int childStartLine, int childPositionInLine, CobolParser.InTableContext ctx) {\n+      String child, int childStartLine, int childPositionInLine, InTableContext ctx) {\n     checkForDataName2(ctx.tableCall().dataName2(), child, childStartLine, childPositionInLine);\n     return visitChildren(ctx);\n   }\n \n   @Override\n-  public Class visitParagraphNameUsage(CobolParser.ParagraphNameUsageContext ctx) {\n+  public Class visitParagraphNameUsage(ParagraphNameUsageContext ctx) {\n     addUsage(semanticContext.getParagraphs(), ctx);\n     return visitChildren(ctx);\n   }\n \n   private void checkForDataName2(\n-      CobolParser.DataName2Context ctx, String child, int childStartLine, int childPositionInLine) {\n+      DataName2Context ctx, String child, int childStartLine, int childPositionInLine) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5de51850faca9431133860451852f86433d93cf3"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0MTQ1OA==", "bodyText": "Used appropriately, static import can make your program more readable, by removing the boilerplate of repetition of class names.\nIt is our case, isn't it?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/201#discussion_r380541458", "createdAt": "2020-02-18T09:12:53Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java", "diffHunk": "@@ -140,68 +144,77 @@ public Class visitDataName2(\n   }\n \n   public Class visitInData(\n-      String child, int childStartLine, int childPositionInLine, CobolParser.InDataContext ctx) {\n+      String child, int childStartLine, int childPositionInLine, InDataContext ctx) {\n     checkForDataName2(ctx.dataName2(), child, childStartLine, childPositionInLine);\n     return visitChildren(ctx);\n   }\n \n   public Class visitInTable(\n-      String child, int childStartLine, int childPositionInLine, CobolParser.InTableContext ctx) {\n+      String child, int childStartLine, int childPositionInLine, InTableContext ctx) {\n     checkForDataName2(ctx.tableCall().dataName2(), child, childStartLine, childPositionInLine);\n     return visitChildren(ctx);\n   }\n \n   @Override\n-  public Class visitParagraphNameUsage(CobolParser.ParagraphNameUsageContext ctx) {\n+  public Class visitParagraphNameUsage(ParagraphNameUsageContext ctx) {\n     addUsage(semanticContext.getParagraphs(), ctx);\n     return visitChildren(ctx);\n   }\n \n   private void checkForDataName2(\n-      CobolParser.DataName2Context ctx, String child, int childStartLine, int childPositionInLine) {\n+      DataName2Context ctx, String child, int childStartLine, int childPositionInLine) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4ODgzMg=="}, "originalCommit": {"oid": "5de51850faca9431133860451852f86433d93cf3"}, "originalPosition": 162}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4128, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}