{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxODk3Njg2", "number": 505, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTozOTo1MVrOEhKkhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTozOTo1MVrOEhKkhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjExNjU1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/ca/lsp/cobol/usecases/TestProgramIdWithQuotes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTozOTo1MVrOHOVEQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTo0MjowN1rOHOVJug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4NzI2NA==", "bodyText": "Just in case if you want it, you can use parametrized test here:\n  @ParameterizedTest\n  @ValueSource(strings = {TEXT_WITH_SINGLE_QUOTES,\n      TEXT_WITH_DOUBLE_QUOTES, \n      TEXT_WITH_ID_QUOTED,\n      TEXT_WITH_END_QUOTED\n  })\n  void test(String text) {\n    UseCaseEngine.runTest(text, List.of(), Map.of());\n  }", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/505#discussion_r484787264", "createdAt": "2020-09-08T09:39:51Z", "author": {"login": "grianbrcom"}, "path": "server/src/test/java/com/ca/lsp/cobol/usecases/TestProgramIdWithQuotes.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.ca.lsp.cobol.usecases;\n+\n+import com.ca.lsp.cobol.usecases.engine.UseCaseEngine;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/** This use case checks that the program ID check works correctly even with quotes */\n+class TestProgramIdWithQuotes {\n+\n+  private static final String TEXT_WITH_SINGLE_QUOTES =\n+      \"       IDENTIFICATION DIVISION.\\n\"\n+          + \"       PROGRAM-ID. 'TEST1'.\\n\"\n+          + \"       DATA DIVISION.\\n\"\n+          + \"       PROCEDURE DIVISION.\\n\"\n+          + \"       END PROGRAM 'TEST1'.\";\n+\n+  private static final String TEXT_WITH_DOUBLE_QUOTES =\n+      \"       IDENTIFICATION DIVISION.\\n\"\n+          + \"       PROGRAM-ID. \\\"TEST1\\\".\\n\"\n+          + \"       DATA DIVISION.\\n\"\n+          + \"       PROCEDURE DIVISION.\\n\"\n+          + \"       END PROGRAM \\\"TEST1\\\".\";\n+\n+  private static final String TEXT_WITH_ID_QUOTED =\n+      \"       IDENTIFICATION DIVISION.\\n\"\n+          + \"       PROGRAM-ID. 'TEST1'.\\n\"\n+          + \"       DATA DIVISION.\\n\"\n+          + \"       PROCEDURE DIVISION.\\n\"\n+          + \"       END PROGRAM TEST1.\";\n+\n+  private static final String TEXT_WITH_END_QUOTED =\n+      \"       IDENTIFICATION DIVISION.\\n\"\n+          + \"       PROGRAM-ID. TEST1.\\n\"\n+          + \"       DATA DIVISION.\\n\"\n+          + \"       PROCEDURE DIVISION.\\n\"\n+          + \"       END PROGRAM 'TEST1'.\";\n+\n+  @Test\n+  void test() {\n+    UseCaseEngine.runTest(TEXT_WITH_SINGLE_QUOTES, List.of(), Map.of());\n+    UseCaseEngine.runTest(TEXT_WITH_DOUBLE_QUOTES, List.of(), Map.of());\n+    UseCaseEngine.runTest(TEXT_WITH_ID_QUOTED, List.of(), Map.of());\n+    UseCaseEngine.runTest(TEXT_WITH_END_QUOTED, List.of(), Map.of());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcd7f3698d92c308b83bb9a8eba14dcea83d439"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4ODY2Ng==", "bodyText": "Makes sense", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/505#discussion_r484788666", "createdAt": "2020-09-08T09:42:07Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/ca/lsp/cobol/usecases/TestProgramIdWithQuotes.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.ca.lsp.cobol.usecases;\n+\n+import com.ca.lsp.cobol.usecases.engine.UseCaseEngine;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/** This use case checks that the program ID check works correctly even with quotes */\n+class TestProgramIdWithQuotes {\n+\n+  private static final String TEXT_WITH_SINGLE_QUOTES =\n+      \"       IDENTIFICATION DIVISION.\\n\"\n+          + \"       PROGRAM-ID. 'TEST1'.\\n\"\n+          + \"       DATA DIVISION.\\n\"\n+          + \"       PROCEDURE DIVISION.\\n\"\n+          + \"       END PROGRAM 'TEST1'.\";\n+\n+  private static final String TEXT_WITH_DOUBLE_QUOTES =\n+      \"       IDENTIFICATION DIVISION.\\n\"\n+          + \"       PROGRAM-ID. \\\"TEST1\\\".\\n\"\n+          + \"       DATA DIVISION.\\n\"\n+          + \"       PROCEDURE DIVISION.\\n\"\n+          + \"       END PROGRAM \\\"TEST1\\\".\";\n+\n+  private static final String TEXT_WITH_ID_QUOTED =\n+      \"       IDENTIFICATION DIVISION.\\n\"\n+          + \"       PROGRAM-ID. 'TEST1'.\\n\"\n+          + \"       DATA DIVISION.\\n\"\n+          + \"       PROCEDURE DIVISION.\\n\"\n+          + \"       END PROGRAM TEST1.\";\n+\n+  private static final String TEXT_WITH_END_QUOTED =\n+      \"       IDENTIFICATION DIVISION.\\n\"\n+          + \"       PROGRAM-ID. TEST1.\\n\"\n+          + \"       DATA DIVISION.\\n\"\n+          + \"       PROCEDURE DIVISION.\\n\"\n+          + \"       END PROGRAM 'TEST1'.\";\n+\n+  @Test\n+  void test() {\n+    UseCaseEngine.runTest(TEXT_WITH_SINGLE_QUOTES, List.of(), Map.of());\n+    UseCaseEngine.runTest(TEXT_WITH_DOUBLE_QUOTES, List.of(), Map.of());\n+    UseCaseEngine.runTest(TEXT_WITH_ID_QUOTED, List.of(), Map.of());\n+    UseCaseEngine.runTest(TEXT_WITH_END_QUOTED, List.of(), Map.of());\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4NzI2NA=="}, "originalCommit": {"oid": "0fcd7f3698d92c308b83bb9a8eba14dcea83d439"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3944, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}