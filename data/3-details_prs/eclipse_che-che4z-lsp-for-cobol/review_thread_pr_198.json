{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MDEyNTUz", "number": 198, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODoxNzo0N1rODgTKew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDoxMzoxMlrODgVbcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTk1MDAzOnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/visitor/LevenshteinDistanceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODoxNzo0N1rOFqbesQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODozNTo0NVrOFqb7lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzNDczNw==", "bodyText": "It looks like a good candidate for a factory method.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/198#discussion_r380034737", "createdAt": "2020-02-17T08:17:47Z", "author": {"login": "ishche"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/visitor/LevenshteinDistanceTest.java", "diffHunk": "@@ -37,7 +37,7 @@\n \n   @Test\n   public void testDistance() {\n-    errors.add(new SyntaxError(new Position(\"\", 1, 1, 1, 1), null, \"\", 2));\n+    errors.add(new SyntaxError(new Position(\"\", 1, 1, 1, 1), null, \"\", 2, null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53db3fd8584da813fe84e5af69fd55d9b053b495"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA0MjEzMw==", "bodyText": "I have factory method changes in another branch, don't want to have a merge conflict.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/198#discussion_r380042133", "createdAt": "2020-02-17T08:35:45Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/visitor/LevenshteinDistanceTest.java", "diffHunk": "@@ -37,7 +37,7 @@\n \n   @Test\n   public void testDistance() {\n-    errors.add(new SyntaxError(new Position(\"\", 1, 1, 1, 1), null, \"\", 2));\n+    errors.add(new SyntaxError(new Position(\"\", 1, 1, 1, 1), null, \"\", 2, null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzNDczNw=="}, "originalCommit": {"oid": "53db3fd8584da813fe84e5af69fd55d9b053b495"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjAzMjQ0OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/engine/CobolLanguageEngine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODo0NzoxM1rOFqcPEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODo0NzoxM1rOFqcPEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA0NzEyMQ==", "bodyText": "Please update the header :*(", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/198#discussion_r380047121", "createdAt": "2020-02-17T08:47:13Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/engine/CobolLanguageEngine.java", "diffHunk": "@@ -40,8 +40,7 @@\n \n     CobolPreprocessorImpl preprocessor = new CobolPreprocessorImpl();\n \n-    ResultWithErrors<PreprocessedInput> preProcessedInput =\n-        preprocessor.process(documentUri, text);\n+    ResultWithErrors<PreprocessedInput> preProcessedInput = preprocessor.process(documentUri, text);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53db3fd8584da813fe84e5af69fd55d9b053b495"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjAzNjcxOnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/model/ErrorCode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODo0ODozNlrOFqcRlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTowNzo1N1rOFqc2fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA0Nzc2Ng==", "bodyText": "I will be more specific, like ''..in the predefined copybook folder\"", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/198#discussion_r380047766", "createdAt": "2020-02-17T08:48:36Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/model/ErrorCode.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.ca.lsp.core.cobol.model;\n+\n+/**\n+ * This enum represents the error codes that are used to determine some special type of errors. See\n+ * the instance documentation for more details.\n+ */\n+public enum ErrorCode {\n+  /** This copybook does not present in the workspace */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53db3fd8584da813fe84e5af69fd55d9b053b495"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NzIxNQ==", "bodyText": "The \"predefined\" is too strict here, I would prefer just \"...in the copybook folder\"", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/198#discussion_r380057215", "createdAt": "2020-02-17T09:07:57Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/model/ErrorCode.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.ca.lsp.core.cobol.model;\n+\n+/**\n+ * This enum represents the error codes that are used to determine some special type of errors. See\n+ * the instance documentation for more details.\n+ */\n+public enum ErrorCode {\n+  /** This copybook does not present in the workspace */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA0Nzc2Ng=="}, "originalCommit": {"oid": "53db3fd8584da813fe84e5af69fd55d9b053b495"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjA0MjMxOnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/model/SyntaxError.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODo1MDoyOFrOFqcVFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODo1MDoyOFrOFqcVFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA0ODY2MA==", "bodyText": "better use errorCode as name", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/198#discussion_r380048660", "createdAt": "2020-02-17T08:50:28Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/model/SyntaxError.java", "diffHunk": "@@ -27,12 +27,15 @@\n   private final List<String> ruleStack;\n   private final String suggestion;\n   private final int severity;\n+  private final ErrorCode code;\n \n+  //Please, don't use static imports for this method: https://github.com/rzwitserloot/lombok/issues/2044\n   @Builder(builderMethodName = \"syntaxError\")\n-  public SyntaxError(Position position, List<String> ruleStack, String suggestion, int severity) {\n+  public SyntaxError(Position position, List<String> ruleStack, String suggestion, int severity, ErrorCode code) {\n     this.position = position;\n     this.ruleStack = ruleStack;\n     this.suggestion = suggestion;\n     this.severity = severity;\n+    this.code = code;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53db3fd8584da813fe84e5af69fd55d9b053b495"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjMyMTEyOnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/WorkspaceServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDoxMzoxMlrOFqe-PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMTo0NDoyNVrOFqhnAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA5MTk2NA==", "bodyText": "I didn't get why is required to use JsonPrimitive object, is not used in every definition of ExecuteCommandParams", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/198#discussion_r380091964", "createdAt": "2020-02-17T10:13:12Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/WorkspaceServiceTest.java", "diffHunk": "@@ -15,31 +15,113 @@\n  */\n package com.ca.lsp.cobol.service;\n \n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n import com.broadcom.lsp.domain.cobol.event.model.RunAnalysisEvent;\n+import com.google.gson.JsonPrimitive;\n import lombok.extern.slf4j.Slf4j;\n import org.eclipse.lsp4j.DidChangeWatchedFilesParams;\n-import org.eclipse.lsp4j.FileChangeType;\n+import org.eclipse.lsp4j.ExecuteCommandParams;\n import org.eclipse.lsp4j.FileEvent;\n import org.junit.Test;\n import org.mockito.ArgumentCaptor;\n \n-import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n \n-import static junit.framework.TestCase.assertNotNull;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.verify;\n+import static com.ca.lsp.cobol.service.delegates.validations.UseCaseUtils.DOCUMENT_URI;\n+import static com.ca.lsp.core.cobol.model.ErrorCode.MISSING_COPYBOOK;\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.singletonList;\n+import static org.eclipse.lsp4j.FileChangeType.Changed;\n+import static org.junit.Assert.*;\n+import static org.mockito.ArgumentCaptor.forClass;\n+import static org.mockito.Mockito.*;\n \n+/**\n+ * This test checks the entry points of the {@link org.eclipse.lsp4j.services.WorkspaceService}\n+ * implementation.\n+ */\n @Slf4j\n public class WorkspaceServiceTest {\n+\n+  /**\n+   * Test of the workspace/executeCommand entry point. Assert that on a MISSING_COPYBOOK the {@link\n+   * RequiredCopybookEvent} is fired.\n+   */\n+  @Test\n+  public void testExecuteCommand() {\n+    DataBusBroker broker = mock(DataBusBroker.class);\n+    ArgumentCaptor<RequiredCopybookEvent> captor = forClass(RequiredCopybookEvent.class);\n+    String copybookName = \"COPYBOOK\";\n+\n+    CobolWorkspaceService service = new CobolWorkspaceServiceImpl(broker, null);\n+\n+    CompletableFuture<Object> result =\n+        service.executeCommand(\n+            new ExecuteCommandParams(\n+                MISSING_COPYBOOK.name(),\n+                asList(new JsonPrimitive(copybookName), new JsonPrimitive(DOCUMENT_URI))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453da429e958184a64ea6b262a687a3ab04f7388"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzNTE2OQ==", "bodyText": "This ExecuteCommandParams has the List<Object> arguments field, and it uses not java objects, but JSONs, that are represented in java as JsonObject or, in case of strings, as JsonPrimitive", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/198#discussion_r380135169", "createdAt": "2020-02-17T11:44:25Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/WorkspaceServiceTest.java", "diffHunk": "@@ -15,31 +15,113 @@\n  */\n package com.ca.lsp.cobol.service;\n \n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n import com.broadcom.lsp.domain.cobol.event.model.RunAnalysisEvent;\n+import com.google.gson.JsonPrimitive;\n import lombok.extern.slf4j.Slf4j;\n import org.eclipse.lsp4j.DidChangeWatchedFilesParams;\n-import org.eclipse.lsp4j.FileChangeType;\n+import org.eclipse.lsp4j.ExecuteCommandParams;\n import org.eclipse.lsp4j.FileEvent;\n import org.junit.Test;\n import org.mockito.ArgumentCaptor;\n \n-import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n \n-import static junit.framework.TestCase.assertNotNull;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.verify;\n+import static com.ca.lsp.cobol.service.delegates.validations.UseCaseUtils.DOCUMENT_URI;\n+import static com.ca.lsp.core.cobol.model.ErrorCode.MISSING_COPYBOOK;\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.singletonList;\n+import static org.eclipse.lsp4j.FileChangeType.Changed;\n+import static org.junit.Assert.*;\n+import static org.mockito.ArgumentCaptor.forClass;\n+import static org.mockito.Mockito.*;\n \n+/**\n+ * This test checks the entry points of the {@link org.eclipse.lsp4j.services.WorkspaceService}\n+ * implementation.\n+ */\n @Slf4j\n public class WorkspaceServiceTest {\n+\n+  /**\n+   * Test of the workspace/executeCommand entry point. Assert that on a MISSING_COPYBOOK the {@link\n+   * RequiredCopybookEvent} is fired.\n+   */\n+  @Test\n+  public void testExecuteCommand() {\n+    DataBusBroker broker = mock(DataBusBroker.class);\n+    ArgumentCaptor<RequiredCopybookEvent> captor = forClass(RequiredCopybookEvent.class);\n+    String copybookName = \"COPYBOOK\";\n+\n+    CobolWorkspaceService service = new CobolWorkspaceServiceImpl(broker, null);\n+\n+    CompletableFuture<Object> result =\n+        service.executeCommand(\n+            new ExecuteCommandParams(\n+                MISSING_COPYBOOK.name(),\n+                asList(new JsonPrimitive(copybookName), new JsonPrimitive(DOCUMENT_URI))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA5MTk2NA=="}, "originalCommit": {"oid": "453da429e958184a64ea6b262a687a3ab04f7388"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4125, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}