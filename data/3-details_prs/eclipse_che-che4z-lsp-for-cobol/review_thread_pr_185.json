{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMzM5MTMx", "number": 185, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjozODozM1rODdUQ2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNTowMDoxMlrODdXNzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDY3MjkwOnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CobolWorkspaceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjozODozM1rOFl2SIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjozODozM1rOFl2SIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzMTAwOA==", "bodyText": "Could you, please, use more precise exception type?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/185#discussion_r375231008", "createdAt": "2020-02-05T12:38:33Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CobolWorkspaceServiceImpl.java", "diffHunk": "@@ -16,32 +16,92 @@\n package com.ca.lsp.cobol.service;\n \n import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.databus.model.RegistryId;\n+import com.broadcom.lsp.domain.cobol.event.model.*;\n import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n import com.broadcom.lsp.domain.cobol.event.model.RunAnalysisEvent;\n import com.google.inject.Inject;\n+import com.google.inject.Provider;\n import com.google.inject.Singleton;\n import lombok.extern.slf4j.Slf4j;\n import org.eclipse.lsp4j.DidChangeConfigurationParams;\n import org.eclipse.lsp4j.DidChangeWatchedFilesParams;\n+import org.eclipse.lsp4j.*;\n+import org.eclipse.lsp4j.services.LanguageClient;\n \n import javax.annotation.Nonnull;\n import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.FileVisitOption;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.stream.Stream;\n \n @Slf4j\n @Singleton\n public class CobolWorkspaceServiceImpl implements CobolWorkspaceService {\n   private final DefaultDataBusBroker dataBus;\n+  private Provider<LanguageClient> clientProvider;\n \n   @Inject\n-  public CobolWorkspaceServiceImpl(DefaultDataBusBroker dataBus) {\n+  public CobolWorkspaceServiceImpl(\n+      DefaultDataBusBroker dataBus, Provider<LanguageClient> clientProvider) {\n     this.dataBus = dataBus;\n+    this.clientProvider = clientProvider;\n     dataBus.subscribe(DataEventType.REQUIRED_COPYBOOK_EVENT, this);\n   }\n \n+  /**\n+   * This is a notification triggered automatically when the user modify configuration settings in\n+   * the client\n+   *\n+   * @param params - LSPSpecification -> The actual changed settings; Actually -> null all the time.\n+   */\n   @Override\n   public void didChangeConfiguration(DidChangeConfigurationParams params) {\n-    throw new UnsupportedOperationException(\"Functionality not implemented yet\");\n+    /** section and scope has to be set to whatever we agree on for the dependencies graph */\n+    try {\n+      fetchSettings(null, null)\n+          .thenAccept(\n+              e -> {\n+                dataBus.postData(FetchedSettingsEvent.builder().content(e).build());\n+              });\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59976c70106b2dd9f79660d0748fc4bafd500b02"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDY5MDM4OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CobolWorkspaceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo0NDo0OFrOFl2cug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzo0MzoxN1rOFl4H4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzMzcyMg==", "bodyText": "Modifying a given argument is a bad practice due to the function is not pure that reduces testability. It would be better if you create the itemList inside elemToList() or return an element from the method and add it in the caller.\nAlso, SonarCloud will show a code smell that the returned value is ignored.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/185#discussion_r375233722", "createdAt": "2020-02-05T12:44:48Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CobolWorkspaceServiceImpl.java", "diffHunk": "@@ -16,32 +16,92 @@\n package com.ca.lsp.cobol.service;\n \n import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.databus.model.RegistryId;\n+import com.broadcom.lsp.domain.cobol.event.model.*;\n import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n import com.broadcom.lsp.domain.cobol.event.model.RunAnalysisEvent;\n import com.google.inject.Inject;\n+import com.google.inject.Provider;\n import com.google.inject.Singleton;\n import lombok.extern.slf4j.Slf4j;\n import org.eclipse.lsp4j.DidChangeConfigurationParams;\n import org.eclipse.lsp4j.DidChangeWatchedFilesParams;\n+import org.eclipse.lsp4j.*;\n+import org.eclipse.lsp4j.services.LanguageClient;\n \n import javax.annotation.Nonnull;\n import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.FileVisitOption;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.stream.Stream;\n \n @Slf4j\n @Singleton\n public class CobolWorkspaceServiceImpl implements CobolWorkspaceService {\n   private final DefaultDataBusBroker dataBus;\n+  private Provider<LanguageClient> clientProvider;\n \n   @Inject\n-  public CobolWorkspaceServiceImpl(DefaultDataBusBroker dataBus) {\n+  public CobolWorkspaceServiceImpl(\n+      DefaultDataBusBroker dataBus, Provider<LanguageClient> clientProvider) {\n     this.dataBus = dataBus;\n+    this.clientProvider = clientProvider;\n     dataBus.subscribe(DataEventType.REQUIRED_COPYBOOK_EVENT, this);\n   }\n \n+  /**\n+   * This is a notification triggered automatically when the user modify configuration settings in\n+   * the client\n+   *\n+   * @param params - LSPSpecification -> The actual changed settings; Actually -> null all the time.\n+   */\n   @Override\n   public void didChangeConfiguration(DidChangeConfigurationParams params) {\n-    throw new UnsupportedOperationException(\"Functionality not implemented yet\");\n+    /** section and scope has to be set to whatever we agree on for the dependencies graph */\n+    try {\n+      fetchSettings(null, null)\n+          .thenAccept(\n+              e -> {\n+                dataBus.postData(FetchedSettingsEvent.builder().content(e).build());\n+              });\n+    } catch (Exception e) {\n+      log.error(e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * After client notifies the server that there is a setting change we need to request the client\n+   * those changing by sending a workspace/configuration JSON request\n+   *\n+   * @param section - The configuration section asked for.\n+   * @param scope - The scope to get the configuration section for.\n+   * @return - CompletedFuture which contains an object with the settings asked for.\n+   */\n+  private CompletableFuture<List<Object>> fetchSettings(String section, String scope) {\n+    LanguageClient client = clientProvider.get();\n+    ConfigurationParams params = new ConfigurationParams();\n+    List<ConfigurationItem> itemList = new ArrayList<>();\n+    elemToList(itemList, section, scope);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59976c70106b2dd9f79660d0748fc4bafd500b02"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI2MTE1NA==", "bodyText": "I want also say that pass null as function argument is a bad practice until is not strictly required (and in case should be explained the reason)", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/185#discussion_r375261154", "createdAt": "2020-02-05T13:43:17Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CobolWorkspaceServiceImpl.java", "diffHunk": "@@ -16,32 +16,92 @@\n package com.ca.lsp.cobol.service;\n \n import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.databus.model.RegistryId;\n+import com.broadcom.lsp.domain.cobol.event.model.*;\n import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n import com.broadcom.lsp.domain.cobol.event.model.RunAnalysisEvent;\n import com.google.inject.Inject;\n+import com.google.inject.Provider;\n import com.google.inject.Singleton;\n import lombok.extern.slf4j.Slf4j;\n import org.eclipse.lsp4j.DidChangeConfigurationParams;\n import org.eclipse.lsp4j.DidChangeWatchedFilesParams;\n+import org.eclipse.lsp4j.*;\n+import org.eclipse.lsp4j.services.LanguageClient;\n \n import javax.annotation.Nonnull;\n import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.FileVisitOption;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.stream.Stream;\n \n @Slf4j\n @Singleton\n public class CobolWorkspaceServiceImpl implements CobolWorkspaceService {\n   private final DefaultDataBusBroker dataBus;\n+  private Provider<LanguageClient> clientProvider;\n \n   @Inject\n-  public CobolWorkspaceServiceImpl(DefaultDataBusBroker dataBus) {\n+  public CobolWorkspaceServiceImpl(\n+      DefaultDataBusBroker dataBus, Provider<LanguageClient> clientProvider) {\n     this.dataBus = dataBus;\n+    this.clientProvider = clientProvider;\n     dataBus.subscribe(DataEventType.REQUIRED_COPYBOOK_EVENT, this);\n   }\n \n+  /**\n+   * This is a notification triggered automatically when the user modify configuration settings in\n+   * the client\n+   *\n+   * @param params - LSPSpecification -> The actual changed settings; Actually -> null all the time.\n+   */\n   @Override\n   public void didChangeConfiguration(DidChangeConfigurationParams params) {\n-    throw new UnsupportedOperationException(\"Functionality not implemented yet\");\n+    /** section and scope has to be set to whatever we agree on for the dependencies graph */\n+    try {\n+      fetchSettings(null, null)\n+          .thenAccept(\n+              e -> {\n+                dataBus.postData(FetchedSettingsEvent.builder().content(e).build());\n+              });\n+    } catch (Exception e) {\n+      log.error(e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * After client notifies the server that there is a setting change we need to request the client\n+   * those changing by sending a workspace/configuration JSON request\n+   *\n+   * @param section - The configuration section asked for.\n+   * @param scope - The scope to get the configuration section for.\n+   * @return - CompletedFuture which contains an object with the settings asked for.\n+   */\n+  private CompletableFuture<List<Object>> fetchSettings(String section, String scope) {\n+    LanguageClient client = clientProvider.get();\n+    ConfigurationParams params = new ConfigurationParams();\n+    List<ConfigurationItem> itemList = new ArrayList<>();\n+    elemToList(itemList, section, scope);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzMzcyMg=="}, "originalCommit": {"oid": "59976c70106b2dd9f79660d0748fc4bafd500b02"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDc4NDY1OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyLanguageServerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzoxNzozMlrOFl3VBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzoxNzozMlrOFl3VBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI0ODEzMg==", "bodyText": "Also here, it is better to add elements to the list in this method, not passing the list to the delegated methods", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/185#discussion_r375248132", "createdAt": "2020-02-05T13:17:32Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyLanguageServerImpl.java", "diffHunk": "@@ -69,13 +68,22 @@\n   @Override\n   public void initialized(@Nullable InitializedParams params) {\n     LanguageClient client = clientProvider.get();\n-    Registration registration =\n-        new Registration(\"copybooksWatcher\", \"workspace/didChangeWatchedFiles\", createWatcher());\n-    RegistrationParams registrationParams =\n-        new RegistrationParams(Collections.singletonList(registration));\n+    List<Registration> registrationList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59976c70106b2dd9f79660d0748fc4bafd500b02"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDgyODIwOnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-core-domain/src/main/java/com/broadcom/lsp/domain/cobol/databus/model/RegistryId.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzozMToyMlrOFl3vcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzozMToyMlrOFl3vcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI1NDg5Ng==", "bodyText": "Please update the header", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/185#discussion_r375254896", "createdAt": "2020-02-05T13:31:22Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-domain/src/main/java/com/broadcom/lsp/domain/cobol/databus/model/RegistryId.java", "diffHunk": "@@ -28,6 +28,7 @@\n   GENERAL_REGISTRY_ID(\"general-registry\"),\n   SCANNER_REGISTRY_ID(\"scanner-registry\"),\n   FETCHER_REGISTRY_ID(\"fetcher-registry\"),\n-  CPY_REGISTRY_ID(\"cpy-registry\");\n+  CPY_REGISTRY_ID(\"cpy-registry\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64d4cb533779e4f638a74dfb5290a4b9f8902afe"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDg5MTU4OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CobolWorkspaceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzo1MDoyMlrOFl4WPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzo1MDoyMlrOFl4WPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI2NDgyOA==", "bodyText": "Pls remove the extra '*' on the right \ud83d\udc7c", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/185#discussion_r375264828", "createdAt": "2020-02-05T13:50:22Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CobolWorkspaceServiceImpl.java", "diffHunk": "@@ -16,32 +16,81 @@\n package com.ca.lsp.cobol.service;\n \n import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.*;\n import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n import com.broadcom.lsp.domain.cobol.event.model.RunAnalysisEvent;\n import com.google.inject.Inject;\n+import com.google.inject.Provider;\n import com.google.inject.Singleton;\n import lombok.extern.slf4j.Slf4j;\n import org.eclipse.lsp4j.DidChangeConfigurationParams;\n import org.eclipse.lsp4j.DidChangeWatchedFilesParams;\n+import org.eclipse.lsp4j.*;\n+import org.eclipse.lsp4j.services.LanguageClient;\n \n import javax.annotation.Nonnull;\n import java.io.IOException;\n+import java.util.*;\n+import java.util.concurrent.*;\n \n @Slf4j\n @Singleton\n public class CobolWorkspaceServiceImpl implements CobolWorkspaceService {\n   private final DefaultDataBusBroker dataBus;\n+  private Provider<LanguageClient> clientProvider;\n \n   @Inject\n-  public CobolWorkspaceServiceImpl(DefaultDataBusBroker dataBus) {\n+  public CobolWorkspaceServiceImpl(\n+      DefaultDataBusBroker dataBus, Provider<LanguageClient> clientProvider) {\n     this.dataBus = dataBus;\n+    this.clientProvider = clientProvider;\n     dataBus.subscribe(DataEventType.REQUIRED_COPYBOOK_EVENT, this);\n   }\n \n+  /**\n+   * This is a notification triggered automatically when the user modify configuration settings in\n+   * the client\n+   *\n+   * @param params - LSPSpecification -> The actual changed settings; Actually -> null all the time.\n+   */\n   @Override\n   public void didChangeConfiguration(DidChangeConfigurationParams params) {\n-    throw new UnsupportedOperationException(\"Functionality not implemented yet\");\n+    /** section and scope has to be set to whatever we agree on for the dependencies graph */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64d4cb533779e4f638a74dfb5290a4b9f8902afe"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTA5NTI1OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/DidChangeConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNDo0NDo1OVrOFl6UrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNDo0NDo1OVrOFl6UrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI5NzE5Ng==", "bodyText": "I think this inner class could be private static", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/185#discussion_r375297196", "createdAt": "2020-02-05T14:44:59Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/DidChangeConfigurationTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.FetchedSettingsEvent;\n+import lombok.AllArgsConstructor;\n+import org.eclipse.lsp4j.ConfigurationItem;\n+import org.eclipse.lsp4j.ConfigurationParams;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * This test class checks if the workspace calls client configuration method and post data into the\n+ * databus\n+ */\n+public class DidChangeConfigurationTest {\n+  private LanguageClient client = Mockito.mock(LanguageClient.class);\n+  private DefaultDataBusBroker broker = mock(DefaultDataBusBroker.class);\n+  private ClientProvider provider = new ClientProvider();\n+\n+  @AllArgsConstructor\n+  public class TestObject {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "684bd3d72699e175e30b825d598c229835d5f979"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTE1NjYzOnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/DidChangeConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNTowMDoxMlrOFl660A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNTowMDoxMlrOFl660A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMwNjk2MA==", "bodyText": "Could you provide a quick doc about what this test is doing", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/185#discussion_r375306960", "createdAt": "2020-02-05T15:00:12Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/DidChangeConfigurationTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.domain.cobol.databus.impl.DefaultDataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.FetchedSettingsEvent;\n+import lombok.AllArgsConstructor;\n+import org.eclipse.lsp4j.ConfigurationItem;\n+import org.eclipse.lsp4j.ConfigurationParams;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * This test class checks if the workspace calls client configuration method and post data into the\n+ * databus\n+ */\n+public class DidChangeConfigurationTest {\n+  private LanguageClient client = Mockito.mock(LanguageClient.class);\n+  private DefaultDataBusBroker broker = mock(DefaultDataBusBroker.class);\n+  private ClientProvider provider = new ClientProvider();\n+\n+  @AllArgsConstructor\n+  public class TestObject {\n+    private String settings;\n+  }\n+\n+  /** testObject - the object which should be returned by workspace/configuration */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "684bd3d72699e175e30b825d598c229835d5f979"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4110, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}