{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNDM5MjQy", "number": 551, "title": "Typed variable model + split definition logic", "bodyText": "", "createdAt": "2020-10-09T08:40:02Z", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/551", "merged": true, "mergeCommit": {"oid": "d8a54dcb557f5abb714eaf92135708f1ed66f1bc"}, "closed": true, "closedAt": "2020-10-09T13:49:56Z", "author": {"login": "temanbrcom"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQIZwmAH2gAyNTAwNDM5MjQyOjlhNWEyNGRhNzYxMGQ1MjM3OTI4ZmE3ZDJlMzQ2NWEzODVhODE0YTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQ13MsgH2gAyNTAwNDM5MjQyOmI0NDhmNTY0YzkwN2I5MGZiODhlNWQyN2M3ZTU5NDE5MDIxMjcwZjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9a5a24da7610d5237928fa7d2e3465a385a814a1", "author": {"user": {"login": "temanbrcom", "name": "Andrei Temnikov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/9a5a24da7610d5237928fa7d2e3465a385a814a1", "committedDate": "2020-10-07T08:07:24Z", "message": "refactor: Provide a typed model for variables"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1NDg3Mzc2", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/551#pullrequestreview-505487376", "createdAt": "2020-10-09T08:57:22Z", "commit": {"oid": "442af2d4a5ab029e5c367d221d681ceeeb293322"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODo1NzoyMlrOHfBLNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDoxMTo0NVrOHfDpuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI4NzE1OQ==", "bodyText": "seems not formatted", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/551#discussion_r502287159", "createdAt": "2020-10-09T08:57:22Z", "author": {"login": "asatklichov"}, "path": "server/src/main/antlr4/com/ca/lsp/core/cobol/parser/CobolParser.g4", "diffHunk": "@@ -932,17 +932,27 @@ libraryIsGlobalClause\n    ;\n \n dataDescriptionEntry\n-   : dataDescriptionEntryFormat1 | dataDescriptionEntryFormat2 | dataDescriptionEntryFormat3 | dataDescriptionEntryExecSql\n+   : dataDescriptionEntryFormat1 | dataDescriptionEntryFormat2 | dataDescriptionEntryFormat1Level77 | dataDescriptionEntryFormat3 | dataDescriptionEntryExecSql\n    ;\n \n dataDescriptionEntryFormat1\n-   : otherLevel (FILLER | dataName1)? (dataGroupUsageClause | dataRedefinesClause | dataIntegerStringClause | dataExternalClause | dataGlobalClause | dataTypeDefClause | dataThreadLocalClause | dataPictureClause | dataCommonOwnLocalClause | dataTypeClause | dataUsingClause | dataUsageClause | dataValueClause | dataReceivedByClause | dataOccursClause | dataSignClause | dataSynchronizedClause | dataJustifiedClause | dataBlankWhenZeroClause | dataWithLowerBoundsClause | dataAlignedClause | dataRecordAreaClause)* (DOT_FS|DOT_FS2)\n+   : LEVEL_NUMBER (FILLER | dataName1)? (dataGroupUsageClause | dataRedefinesClause | dataIntegerStringClause | dataExternalClause\n+   | dataGlobalClause | dataTypeDefClause | dataThreadLocalClause | dataPictureClause | dataCommonOwnLocalClause | dataTypeClause\n+   | dataUsingClause | dataUsageClause | dataValueClause | dataReceivedByClause | dataOccursClause | dataSignClause | dataSynchronizedClause\n+   | dataJustifiedClause | dataBlankWhenZeroClause | dataWithLowerBoundsClause | dataAlignedClause | dataRecordAreaClause)* (DOT_FS|DOT_FS2)\n    ;\n \n dataDescriptionEntryFormat2\n    : LEVEL_NUMBER_66 dataName1 dataRenamesClause DOT_FS\n    ;\n \n+dataDescriptionEntryFormat1Level77\n+   : LEVEL_NUMBER_77 dataName1 (dataPictureClause | dataRedefinesClause | dataIntegerStringClause | dataExternalClause\n+   | dataGlobalClause | dataTypeDefClause | dataThreadLocalClause | dataCommonOwnLocalClause | dataTypeClause | dataUsingClause\n+   | dataUsageClause | dataValueClause | dataReceivedByClause | dataOccursClause | dataSignClause | dataSynchronizedClause\n+   | dataJustifiedClause | dataBlankWhenZeroClause | dataWithLowerBoundsClause | dataAlignedClause | dataRecordAreaClause)* (DOT_FS|DOT_FS2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442af2d4a5ab029e5c367d221d681ceeeb293322"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI4ODIxNw==", "bodyText": "optional: ConditionalDataName  looks more nice", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/551#discussion_r502288217", "createdAt": "2020-10-09T08:59:08Z", "author": {"login": "asatklichov"}, "path": "server/src/main/java/com/ca/lsp/core/cobol/model/variables/ConditionalName.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.ca.lsp.core.cobol.model.variables;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+\n+/**\n+ * This value class represents a conditional data name entry, that has a level number 88. It cannot\n+ * be a top element in the structure. It always contains a variable name and a value, but not PIC\n+ * clause.\n+ */\n+@Value\n+@AllArgsConstructor\n+public class ConditionalName implements Variable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442af2d4a5ab029e5c367d221d681ceeeb293322"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMyNDExMA==", "bodyText": "Do we modify this returned list? Otherwise better  to use List.of(children)", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/551#discussion_r502324110", "createdAt": "2020-10-09T10:04:43Z", "author": {"login": "asatklichov"}, "path": "server/src/main/java/com/ca/lsp/core/cobol/model/variables/GroupItem.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.ca.lsp.core.cobol.model.variables;\n+\n+import lombok.Value;\n+\n+import javax.annotation.Nonnull;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This value class represents a group item COBOL variable. Group elements can have nested\n+ * variables. They cannot have neither PIC nor VALUE clauses. Can be the top element of the\n+ * structure with level 01, as well as nested ones with higher level numbers.\n+ */\n+@Value\n+public class GroupItem implements StructuredVariable {\n+  private String name;\n+  private List<Variable> children = new ArrayList<>();\n+\n+  public GroupItem(@Nonnull String name) {\n+    this.name = name;\n+  }\n+\n+  /**\n+   * Add a new nested variable to this structure\n+   *\n+   * @param child - a nested variable. Can be a group or element, or all the other allowed type\n+   *     item.\n+   */\n+  public void addChild(Variable child) {\n+    children.add(child);\n+  }\n+\n+  /**\n+   * Return a list of already defined nested variables\n+   *\n+   * @return defined nested variables.\n+   */\n+  public List<Variable> getChildren() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442af2d4a5ab029e5c367d221d681ceeeb293322"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMyNjY0MQ==", "bodyText": "if used as read-only purpose later the better use List.of(children)", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/551#discussion_r502326641", "createdAt": "2020-10-09T10:09:40Z", "author": {"login": "asatklichov"}, "path": "server/src/main/java/com/ca/lsp/core/cobol/model/variables/Table.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.ca.lsp.core.cobol.model.variables;\n+\n+import lombok.Value;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This value class represents the Table variable that may have nested variables, and an optional\n+ * index\n+ */\n+@Value\n+public class Table implements StructuredVariable {\n+\n+  private String name;\n+  private int occursTimes;\n+  private IndexItem index;\n+  private List<Variable> children = new ArrayList<>();\n+\n+  public Table(@Nonnull String name, int occursTimes, @Nullable IndexItem index) {\n+    this.name = name;\n+    this.occursTimes = occursTimes;\n+    this.index = index;\n+  }\n+\n+  /**\n+   * Add a new nested variable to this one\n+   *\n+   * @param child - a nested variable. Can be a group or element item.\n+   */\n+  public void addChild(Variable child) {\n+    children.add(child);\n+  }\n+\n+  /**\n+   * Return a list of already defined nested variables\n+   *\n+   * @return defined nested variables.\n+   */\n+  public List<Variable> getChildren() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442af2d4a5ab029e5c367d221d681ceeeb293322"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMyNzczNw==", "bodyText": "\"01\" isn't it Level 01?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/551#discussion_r502327737", "createdAt": "2020-10-09T10:11:45Z", "author": {"login": "asatklichov"}, "path": "server/src/main/java/com/ca/lsp/core/cobol/visitor/CobolVisitor.java", "diffHunk": "@@ -332,10 +333,10 @@ public Class visitParagraphName(ParagraphNameContext ctx) {\n   public Class visitDataDescriptionEntryFormat1(DataDescriptionEntryFormat1Context ctx) {\n     Token token = ctx.getStart();\n     String tokenText = token.getText();\n-    if (tokenText.equals(\"01\") || tokenText.equals(\"1\") || tokenText.equals(\"77\")) {\n+    if (tokenText.equals(\"01\") || tokenText.equals(\"1\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442af2d4a5ab029e5c367d221d681ceeeb293322"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cfc8840006903f1dd35d32a78ef37ee2269dd12", "author": {"user": {"login": "temanbrcom", "name": "Andrei Temnikov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/3cfc8840006903f1dd35d32a78ef37ee2269dd12", "committedDate": "2020-10-09T10:32:31Z", "message": "refactor: Extract processing of 77 level number\n\nExtract 77 level definition grammar rule. Make visitor process\nthis type of definitions separately to allow additional type checks."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78940266633a8fecfedfcec17c5cd24c5de5895f", "author": {"user": {"login": "temanbrcom", "name": "Andrei Temnikov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/78940266633a8fecfedfcec17c5cd24c5de5895f", "committedDate": "2020-10-09T10:57:24Z", "message": "refactor: Provide more descriptive names for variable model"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "442af2d4a5ab029e5c367d221d681ceeeb293322", "author": {"user": {"login": "temanbrcom", "name": "Andrei Temnikov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/442af2d4a5ab029e5c367d221d681ceeeb293322", "committedDate": "2020-10-08T14:29:24Z", "message": "refactor: Extract processing of 77 level number\n\nExtract 77 level definition grammar rule. Make visitor process\nthis type of definitions separately to allow additional type checks."}, "afterCommit": {"oid": "78940266633a8fecfedfcec17c5cd24c5de5895f", "author": {"user": {"login": "temanbrcom", "name": "Andrei Temnikov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/78940266633a8fecfedfcec17c5cd24c5de5895f", "committedDate": "2020-10-09T10:57:24Z", "message": "refactor: Provide more descriptive names for variable model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e8fd8775d75820e137bb3fb4eb8374b599a0026", "author": {"user": {"login": "temanbrcom", "name": "Andrei Temnikov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/4e8fd8775d75820e137bb3fb4eb8374b599a0026", "committedDate": "2020-10-09T11:12:03Z", "message": "refactor: Store unique definitions for variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b448f564c907b90fb88e5d27c7e59419021270f9", "author": {"user": {"login": "temanbrcom", "name": "Andrei Temnikov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/b448f564c907b90fb88e5d27c7e59419021270f9", "committedDate": "2020-10-09T13:05:17Z", "message": "refactor: Make children lists of group items immutable"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1047, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}