{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1OTEyMTgx", "number": 613, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOToxNjoxMlrOE1kKyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMTo0MzowN1rOE4H8Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjAyNTcxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOToxNjoxMlrOHt6DWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOToyMzo0M1rOHt6Wag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5OTA5Nw==", "bodyText": "As per LSP spec, after this call no other service call can/should be handled. Should we have a logic to return no-valid from all our service after this call is made.\nWhy I didn't implement it?\nVScode actually never waits for us to call exit. Upon closing, it fires a shutdown call and then fires an exit call.\nDetails mentioned in the PR comment.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r517899097", "createdAt": "2020-11-05T09:16:12Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "diffHunk": "@@ -124,14 +125,21 @@ private void getLocaleFromClient() {\n     settingsService.getConfiguration(LOCALE.label).thenAccept(localeStore.notifyLocaleStore());\n   }\n \n+  public int getExitCode() {\n+    return exitCode;\n+  }\n+\n   @Override\n   public CompletableFuture<Object> shutdown() {\n+    LOG.info(\"LS for COBOL received shutdown request\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a0f40f85fb4b78b97a6de2aea54a61e31621a7d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkwMzk3OA==", "bodyText": "We support different IDEs, should it would be better not to rely on the client implementation", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r517903978", "createdAt": "2020-11-05T09:23:43Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "diffHunk": "@@ -124,14 +125,21 @@ private void getLocaleFromClient() {\n     settingsService.getConfiguration(LOCALE.label).thenAccept(localeStore.notifyLocaleStore());\n   }\n \n+  public int getExitCode() {\n+    return exitCode;\n+  }\n+\n   @Override\n   public CompletableFuture<Object> shutdown() {\n+    LOG.info(\"LS for COBOL received shutdown request\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5OTA5Nw=="}, "originalCommit": {"oid": "8a0f40f85fb4b78b97a6de2aea54a61e31621a7d"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDgxOTA3OnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/src/__tests__/LanguageClientServiceTest.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDowNDozNVrOHunsIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1MDoxNFrOHvkWiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0NjgxOA==", "bodyText": "It is not clear to me what does this test checks from the description", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r518646818", "createdAt": "2020-11-06T10:04:35Z", "author": {"login": "temanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/LanguageClientServiceTest.spec.ts", "diffHunk": "@@ -104,4 +104,12 @@ describe(\"LanguageClientService positive scenario\", () => {\n             },\n         });\n     });\n+\n+    test(\"Test LanguageClientService exit language server is calls exit on languageClient\", () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0MDcxNQ==", "bodyText": "updated", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r519640715", "createdAt": "2020-11-09T08:50:14Z", "author": {"login": "ap891843"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/LanguageClientServiceTest.spec.ts", "diffHunk": "@@ -104,4 +104,12 @@ describe(\"LanguageClientService positive scenario\", () => {\n             },\n         });\n     });\n+\n+    test(\"Test LanguageClientService exit language server is calls exit on languageClient\", () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0NjgxOA=="}, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDgzMjAzOnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/src/services/LanguageClientService.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDowODozMlrOHun0NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1MDoyMVrOHvkW2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0ODg4NQ==", "bodyText": "Doesn't it mean that it will stop a new LanguageClient instance?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r518648885", "createdAt": "2020-11-06T10:08:32Z", "author": {"login": "temanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/services/LanguageClientService.ts", "diffHunk": "@@ -43,11 +43,19 @@ export class LanguageClientService {\n     }\n \n     public start(): vscode.Disposable {\n-        const languageClient = new LanguageClient(LANGUAGE_ID,\n+        const languageClient = this.getLanguageClient();\n+        return languageClient.start();\n+    }\n+\n+    public stop(): Thenable<void> {\n+        return this.getLanguageClient().stop();\n+    }\n+\n+    private getLanguageClient() {\n+        return new LanguageClient(LANGUAGE_ID,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyMDExNA==", "bodyText": "yes, this is the wrong implementation.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r518820114", "createdAt": "2020-11-06T15:20:23Z", "author": {"login": "ap891843"}, "path": "clients/cobol-lsp-vscode-extension/src/services/LanguageClientService.ts", "diffHunk": "@@ -43,11 +43,19 @@ export class LanguageClientService {\n     }\n \n     public start(): vscode.Disposable {\n-        const languageClient = new LanguageClient(LANGUAGE_ID,\n+        const languageClient = this.getLanguageClient();\n+        return languageClient.start();\n+    }\n+\n+    public stop(): Thenable<void> {\n+        return this.getLanguageClient().stop();\n+    }\n+\n+    private getLanguageClient() {\n+        return new LanguageClient(LANGUAGE_ID,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0ODg4NQ=="}, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0MDc5Mw==", "bodyText": "updated", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r519640793", "createdAt": "2020-11-09T08:50:21Z", "author": {"login": "ap891843"}, "path": "clients/cobol-lsp-vscode-extension/src/services/LanguageClientService.ts", "diffHunk": "@@ -43,11 +43,19 @@ export class LanguageClientService {\n     }\n \n     public start(): vscode.Disposable {\n-        const languageClient = new LanguageClient(LANGUAGE_ID,\n+        const languageClient = this.getLanguageClient();\n+        return languageClient.start();\n+    }\n+\n+    public stop(): Thenable<void> {\n+        return this.getLanguageClient().stop();\n+    }\n+\n+    private getLanguageClient() {\n+        return new LanguageClient(LANGUAGE_ID,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0ODg4NQ=="}, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDgzNDA2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/CheckServerShutdownState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDowOTowOFrOHun1hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDowOTowOFrOHun1hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0OTIyMg==", "bodyText": "Please, add a Javadoc", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r518649222", "createdAt": "2020-11-06T10:09:08Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/CheckServerShutdownState.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.broadcom.lsp.cobol.core.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.METHOD)\n+public @interface CheckServerShutdownState {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDgzNTEwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/CheckServerShutdownState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDowOToyNlrOHun2Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1MDozMFrOHvkXOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0OTM4Mw==", "bodyText": "Missing copyright header", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r518649383", "createdAt": "2020-11-06T10:09:26Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/CheckServerShutdownState.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.broadcom.lsp.cobol.core.annotation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0MDg5MA==", "bodyText": "done", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r519640890", "createdAt": "2020-11-09T08:50:30Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/CheckServerShutdownState.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.broadcom.lsp.cobol.core.annotation;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0OTM4Mw=="}, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDgzNTU5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/HandleShutdownState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDowOTozMlrOHun2bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1MDozN1rOHvkXdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0OTQ1NQ==", "bodyText": "Missing copyright header", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r518649455", "createdAt": "2020-11-06T10:09:32Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/HandleShutdownState.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.broadcom.lsp.cobol.core.annotation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0MDk1MA==", "bodyText": "done", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r519640950", "createdAt": "2020-11-09T08:50:37Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/HandleShutdownState.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.broadcom.lsp.cobol.core.annotation;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0OTQ1NQ=="}, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDgzODMxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/HandleShutdownState.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDoxMDoxN1rOHun4Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDoxMDoxN1rOHun4Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0OTg3NA==", "bodyText": "Missing Javadoc", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r518649874", "createdAt": "2020-11-06T10:10:17Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/HandleShutdownState.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.broadcom.lsp.cobol.core.annotation;\n+\n+import com.broadcom.lsp.cobol.service.DisposableLanguageServer;\n+import com.google.inject.Inject;\n+import lombok.extern.slf4j.Slf4j;\n+import org.aopalliance.intercept.MethodInterceptor;\n+import org.aopalliance.intercept.MethodInvocation;\n+import org.eclipse.lsp4j.services.LanguageServer;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+@Slf4j\n+public class HandleShutdownState implements MethodInterceptor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDg0OTc0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDoxMzozN1rOHun--Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjoxMzoxMlrOHvry_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY1MTY0MQ==", "bodyText": "Not an LSP request, no need to check it", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r518651641", "createdAt": "2020-11-06T10:13:37Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -213,11 +224,13 @@ private void interruptAnalysis(String uri) {\n   }\n \n   @Override\n+  @CheckServerShutdownState\n   public void didSave(DidSaveTextDocumentParams params) {\n     LOG.info(\"Document saved...\");\n   }\n \n   @Override\n+  @CheckServerShutdownState", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NDg2OQ==", "bodyText": "I spent major time here. Using interceptor actually leads to some proxy classes and it seems without this annotation here, this method is marked final which leads to error while spying. I get the below error\n\njava.lang.VerifyError: class com.broadcom.lsp.cobol.service.CobolTextDocumentService$$EnhancerByGuice$$c86ee31e$MockitoMock$565924183 overrides final method com.broadcom.lsp.cobol.service.CobolTextDocumentService$$EnhancerByGuice$$c86ee31e.observerCallback(Ljava/lang/Object;)\n\nThis confuses me if guice interceptors are the right approach.  This is a question to all reviewers, if you feel the same , I will re-work this with some other approach.\nFor now, I have kept this annotation as is.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r519644869", "createdAt": "2020-11-09T08:57:18Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -213,11 +224,13 @@ private void interruptAnalysis(String uri) {\n   }\n \n   @Override\n+  @CheckServerShutdownState\n   public void didSave(DidSaveTextDocumentParams params) {\n     LOG.info(\"Document saved...\");\n   }\n \n   @Override\n+  @CheckServerShutdownState", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY1MTY0MQ=="}, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2MjY4Nw==", "bodyText": "It deserves some further investigation, but ok, let's leave the annotation there.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r519762687", "createdAt": "2020-11-09T12:13:12Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -213,11 +224,13 @@ private void interruptAnalysis(String uri) {\n   }\n \n   @Override\n+  @CheckServerShutdownState\n   public void didSave(DidSaveTextDocumentParams params) {\n     LOG.info(\"Document saved...\");\n   }\n \n   @Override\n+  @CheckServerShutdownState", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY1MTY0MQ=="}, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDg3OTAwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDoyMjoyMFrOHuoRDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1NzozMlrOHvknOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY1NjI3MQ==", "bodyText": "Nice idea to create a class for it, but it should be either static or a separate class because it is not strongly connected with the outer class.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r518656271", "createdAt": "2020-11-06T10:22:20Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "diffHunk": "@@ -145,4 +187,11 @@ private ExecuteCommandOptions collectExecuteCommandList() {\n     return new ExecuteCommandOptions(\n         stream(ErrorCode.values()).map(ErrorCode::name).collect(toList()));\n   }\n+\n+  /** Represents the JSON RPC response structure for shutdown command as per LSP specification */\n+  @AllArgsConstructor\n+  private class ShutdownResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NDk4Ng==", "bodyText": "done", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r519644986", "createdAt": "2020-11-09T08:57:32Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "diffHunk": "@@ -145,4 +187,11 @@ private ExecuteCommandOptions collectExecuteCommandList() {\n     return new ExecuteCommandOptions(\n         stream(ErrorCode.values()).map(ErrorCode::name).collect(toList()));\n   }\n+\n+  /** Represents the JSON RPC response structure for shutdown command as per LSP specification */\n+  @AllArgsConstructor\n+  private class ShutdownResponse {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY1NjI3MQ=="}, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDg4NDE3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDoyMzo1MlrOHuoUJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1Nzo0MFrOHvknjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY1NzA2Mw==", "bodyText": "A misplaced comma in the comment, as well as in a comment below", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r518657063", "createdAt": "2020-11-06T10:23:52Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "diffHunk": "@@ -124,14 +127,53 @@ private void getLocaleFromClient() {\n     settingsService.getConfiguration(LOCALE.label).thenAccept(localeStore.notifyLocaleStore());\n   }\n \n+  @Override\n+  public int getExitCode() {\n+    return exitCode;\n+  }\n+\n   @Override\n   public CompletableFuture<Object> shutdown() {\n-    return supplyAsync(() -> TRUE);\n+    LOG.info(\"LS for COBOL received shutdown request\");\n+    exitCode = 0;\n+    try {\n+      cancelAllProcessing();\n+    } catch (Exception exception) {\n+      return supplyAsync(() -> new ShutdownResponse(null, exception.getMessage()));\n+    }\n+    return supplyAsync(() -> new ShutdownResponse(null, String.valueOf(exitCode)));\n+  }\n+\n+  /**\n+   * Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and\n+   * returns a list of the tasks that were awaiting execution. These tasks are drained (removed)\n+   * from the task queue upon return from this method.\n+   *\n+   * <p>There are no guarantees beyond best-effort attempts to stop processing actively executing\n+   * tasks. This implementation cancels tasks via Thread.interrupt(), so any task that fails to\n+   * respond to interrupts may never terminate.\n+   *\n+   * <p>Source:\n+   * https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#shutdownNow--\n+   */\n+  private void cancelAllProcessing() {\n+    // NOTE: shutdownNow principally is not a bad practice when we know what we are doing.\n+    //      Here in this case, since we are only stopping our own threads which don't\n+    //      require any clean up.It's ok. Java doc doesn't mention any bad practice for this.\n+\n+    // cancels all the running task and clears empty queue ,initiated on forkJoinPool.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NTA2OQ==", "bodyText": "done", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r519645069", "createdAt": "2020-11-09T08:57:40Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "diffHunk": "@@ -124,14 +127,53 @@ private void getLocaleFromClient() {\n     settingsService.getConfiguration(LOCALE.label).thenAccept(localeStore.notifyLocaleStore());\n   }\n \n+  @Override\n+  public int getExitCode() {\n+    return exitCode;\n+  }\n+\n   @Override\n   public CompletableFuture<Object> shutdown() {\n-    return supplyAsync(() -> TRUE);\n+    LOG.info(\"LS for COBOL received shutdown request\");\n+    exitCode = 0;\n+    try {\n+      cancelAllProcessing();\n+    } catch (Exception exception) {\n+      return supplyAsync(() -> new ShutdownResponse(null, exception.getMessage()));\n+    }\n+    return supplyAsync(() -> new ShutdownResponse(null, String.valueOf(exitCode)));\n+  }\n+\n+  /**\n+   * Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and\n+   * returns a list of the tasks that were awaiting execution. These tasks are drained (removed)\n+   * from the task queue upon return from this method.\n+   *\n+   * <p>There are no guarantees beyond best-effort attempts to stop processing actively executing\n+   * tasks. This implementation cancels tasks via Thread.interrupt(), so any task that fails to\n+   * respond to interrupts may never terminate.\n+   *\n+   * <p>Source:\n+   * https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#shutdownNow--\n+   */\n+  private void cancelAllProcessing() {\n+    // NOTE: shutdownNow principally is not a bad practice when we know what we are doing.\n+    //      Here in this case, since we are only stopping our own threads which don't\n+    //      require any clean up.It's ok. Java doc doesn't mention any bad practice for this.\n+\n+    // cancels all the running task and clears empty queue ,initiated on forkJoinPool.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY1NzA2Mw=="}, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDg4OTA1OnYy", "diffSide": "LEFT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/strategy/Messages.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDoyNTowOVrOHuoW5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1Nzo1M1rOHvkoIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY1Nzc2Nw==", "bodyText": "Why did you remove this class?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r518657767", "createdAt": "2020-11-06T10:25:09Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/strategy/Messages.java", "diffHunk": "@@ -1,51 +0,0 @@\n-/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyMjI2OQ==", "bodyText": "I guess we don't use this class now and all the messages are being handled through the resource bundle. I will check this again. Did see this yesterday in the Coverity Scan, so thought of removing it.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r518822269", "createdAt": "2020-11-06T15:23:36Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/strategy/Messages.java", "diffHunk": "@@ -1,51 +0,0 @@\n-/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY1Nzc2Nw=="}, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg0MTAwOQ==", "bodyText": "I agree to delete it, but please do it as a separate commit not to bring a mess to this one", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r518841009", "createdAt": "2020-11-06T15:52:40Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/strategy/Messages.java", "diffHunk": "@@ -1,51 +0,0 @@\n-/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY1Nzc2Nw=="}, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NTIxNg==", "bodyText": "done", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r519645216", "createdAt": "2020-11-09T08:57:53Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/strategy/Messages.java", "diffHunk": "@@ -1,51 +0,0 @@\n-/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY1Nzc2Nw=="}, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDkwNjI5OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/CobolTextDocumentServiceTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDoyOTo1N1rOHuohWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTowOToxOFrOHvlDJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY2MDQ0MQ==", "bodyText": "Please, don't use this type of DI in tests", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r518660441", "createdAt": "2020-11-06T10:29:57Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/service/CobolTextDocumentServiceTest.java", "diffHunk": "@@ -437,6 +441,58 @@ void testImmediateClosingOfDocumentDoNotCauseNPE() {\n     verify(communications, timeout(2000)).cancelProgressNotification(UseCaseUtils.DOCUMENT_URI);\n   }\n \n+  /**\n+   * This method tests that after a shutdown request, {@link TextDocumentService} always return\n+   * SHUTDOWN_RESPONSE\n+   *\n+   * @throws ExecutionException\n+   * @throws InterruptedException\n+   */\n+  @Test\n+  void whenShutdownIsFired_ThenNewRequestReturnInvalidResponse()\n+      throws ExecutionException, InterruptedException {\n+    CobolTextDocumentService service =\n+        (CobolTextDocumentService)\n+            LangServerCtx.getInjector().getInstance(TextDocumentService.class);\n+    LanguageServer server = LangServerCtx.getInjector().getInstance(LanguageServer.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0ODIyNA==", "bodyText": "working on it, seems like I overlooked", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r519648224", "createdAt": "2020-11-09T09:02:45Z", "author": {"login": "ap891843"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/service/CobolTextDocumentServiceTest.java", "diffHunk": "@@ -437,6 +441,58 @@ void testImmediateClosingOfDocumentDoNotCauseNPE() {\n     verify(communications, timeout(2000)).cancelProgressNotification(UseCaseUtils.DOCUMENT_URI);\n   }\n \n+  /**\n+   * This method tests that after a shutdown request, {@link TextDocumentService} always return\n+   * SHUTDOWN_RESPONSE\n+   *\n+   * @throws ExecutionException\n+   * @throws InterruptedException\n+   */\n+  @Test\n+  void whenShutdownIsFired_ThenNewRequestReturnInvalidResponse()\n+      throws ExecutionException, InterruptedException {\n+    CobolTextDocumentService service =\n+        (CobolTextDocumentService)\n+            LangServerCtx.getInjector().getInstance(TextDocumentService.class);\n+    LanguageServer server = LangServerCtx.getInjector().getInstance(LanguageServer.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY2MDQ0MQ=="}, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MjEzMw==", "bodyText": "done", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r519652133", "createdAt": "2020-11-09T09:09:18Z", "author": {"login": "ap891843"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/service/CobolTextDocumentServiceTest.java", "diffHunk": "@@ -437,6 +441,58 @@ void testImmediateClosingOfDocumentDoNotCauseNPE() {\n     verify(communications, timeout(2000)).cancelProgressNotification(UseCaseUtils.DOCUMENT_URI);\n   }\n \n+  /**\n+   * This method tests that after a shutdown request, {@link TextDocumentService} always return\n+   * SHUTDOWN_RESPONSE\n+   *\n+   * @throws ExecutionException\n+   * @throws InterruptedException\n+   */\n+  @Test\n+  void whenShutdownIsFired_ThenNewRequestReturnInvalidResponse()\n+      throws ExecutionException, InterruptedException {\n+    CobolTextDocumentService service =\n+        (CobolTextDocumentService)\n+            LangServerCtx.getInjector().getInstance(TextDocumentService.class);\n+    LanguageServer server = LangServerCtx.getInjector().getInstance(LanguageServer.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY2MDQ0MQ=="}, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NDMyNzgyOnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/src/__tests__/LanguageClientServiceTest.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNDoxMjowNFrOHvIUrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1ODo1MFrOHvkqUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4MTQ4Ng==", "bodyText": "The test pass even if I remove those three lines. I suggest to remove them.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r519181486", "createdAt": "2020-11-07T14:12:04Z", "author": {"login": "grianbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/LanguageClientServiceTest.spec.ts", "diffHunk": "@@ -104,4 +104,12 @@ describe(\"LanguageClientService positive scenario\", () => {\n             },\n         });\n     });\n+\n+    test(\"Test LanguageClientService exit language server is calls exit on languageClient\", () => {\n+        jest.clearAllMocks();\n+        new JavaCheck().isJavaInstalled = jest.fn().mockResolvedValue(true);\n+        vscode.workspace.getConfiguration(expect.any(String)).get = jest.fn().mockReturnValue(9999);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NTc3Nw==", "bodyText": "done", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r519645777", "createdAt": "2020-11-09T08:58:50Z", "author": {"login": "ap891843"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/LanguageClientServiceTest.spec.ts", "diffHunk": "@@ -104,4 +104,12 @@ describe(\"LanguageClientService positive scenario\", () => {\n             },\n         });\n     });\n+\n+    test(\"Test LanguageClientService exit language server is calls exit on languageClient\", () => {\n+        jest.clearAllMocks();\n+        new JavaCheck().isJavaInstalled = jest.fn().mockResolvedValue(true);\n+        vscode.workspace.getConfiguration(expect.any(String)).get = jest.fn().mockReturnValue(9999);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4MTQ4Ng=="}, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NDMyOTA3OnYy", "diffSide": "RIGHT", "path": "clients/cobol-lsp-vscode-extension/src/extension.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNDoxNDowOVrOHvIVSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1ODo1N1rOHvkqjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4MTY0MQ==", "bodyText": "Could you please keep in on one line? Or add indentation on 39 line.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r519181641", "createdAt": "2020-11-07T14:14:09Z", "author": {"login": "grianbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/extension.ts", "diffHunk": "@@ -32,18 +32,18 @@ import {TelemetryService} from \"./services/reporter/TelemetryService\";\n import {createFileWithGivenPath, initializeSettings} from \"./services/Settings\";\n import {ZoweApi} from \"./services/ZoweApi\";\n \n+const zoweApi: ZoweApi = new ZoweApi();\n+const profileService: ProfileService = new ProfileService(zoweApi);\n+const copybooksPathGenerator: CopybooksPathGenerator = new CopybooksPathGenerator(profileService);\n+const copyBooksDownloader: CopybookDownloadService =\n+new CopybookDownloadService(zoweApi, profileService, copybooksPathGenerator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NTgzOA==", "bodyText": "done", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r519645838", "createdAt": "2020-11-09T08:58:57Z", "author": {"login": "ap891843"}, "path": "clients/cobol-lsp-vscode-extension/src/extension.ts", "diffHunk": "@@ -32,18 +32,18 @@ import {TelemetryService} from \"./services/reporter/TelemetryService\";\n import {createFileWithGivenPath, initializeSettings} from \"./services/Settings\";\n import {ZoweApi} from \"./services/ZoweApi\";\n \n+const zoweApi: ZoweApi = new ZoweApi();\n+const profileService: ProfileService = new ProfileService(zoweApi);\n+const copybooksPathGenerator: CopybooksPathGenerator = new CopybooksPathGenerator(profileService);\n+const copyBooksDownloader: CopybookDownloadService =\n+new CopybookDownloadService(zoweApi, profileService, copybooksPathGenerator);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4MTY0MQ=="}, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NDMzNjY4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/HandleShutdownState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNDoyNDo1M1rOHvIYzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1OTowOFrOHvkq8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4MjU0Mg==", "bodyText": "You don't really need to resolve this future asynchronously. Please, use this instead:\nreturn CompletableFuture.completedFuture(SHUTDOWN_RESPONSE);", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r519182542", "createdAt": "2020-11-07T14:24:53Z", "author": {"login": "grianbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/HandleShutdownState.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.broadcom.lsp.cobol.core.annotation;\n+\n+import com.broadcom.lsp.cobol.service.DisposableLanguageServer;\n+import com.google.inject.Inject;\n+import lombok.extern.slf4j.Slf4j;\n+import org.aopalliance.intercept.MethodInterceptor;\n+import org.aopalliance.intercept.MethodInvocation;\n+import org.eclipse.lsp4j.services.LanguageServer;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+@Slf4j\n+public class HandleShutdownState implements MethodInterceptor {\n+  private static final String SHUTDOWN_RESPONSE = \"InvalidRequest\";\n+  private LanguageServer server;\n+\n+  @Inject\n+  public void setServer(LanguageServer server) {\n+    this.server = server;\n+  }\n+\n+  @Override\n+  public Object invoke(MethodInvocation invocation) throws Throwable {\n+    if (server instanceof DisposableLanguageServer) {\n+      DisposableLanguageServer languageServer = (DisposableLanguageServer) server;\n+      if (languageServer.getExitCode() == DisposableLanguageServer.SHUTDOWN_EXIT_CODE) {\n+        LOG.info(invocation.getMethod().getName() + \" invoked after shutdown\");\n+        return CompletableFuture.supplyAsync(() -> SHUTDOWN_RESPONSE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NTkzNw==", "bodyText": "done", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r519645937", "createdAt": "2020-11-09T08:59:08Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/HandleShutdownState.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.broadcom.lsp.cobol.core.annotation;\n+\n+import com.broadcom.lsp.cobol.service.DisposableLanguageServer;\n+import com.google.inject.Inject;\n+import lombok.extern.slf4j.Slf4j;\n+import org.aopalliance.intercept.MethodInterceptor;\n+import org.aopalliance.intercept.MethodInvocation;\n+import org.eclipse.lsp4j.services.LanguageServer;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+@Slf4j\n+public class HandleShutdownState implements MethodInterceptor {\n+  private static final String SHUTDOWN_RESPONSE = \"InvalidRequest\";\n+  private LanguageServer server;\n+\n+  @Inject\n+  public void setServer(LanguageServer server) {\n+    this.server = server;\n+  }\n+\n+  @Override\n+  public Object invoke(MethodInvocation invocation) throws Throwable {\n+    if (server instanceof DisposableLanguageServer) {\n+      DisposableLanguageServer languageServer = (DisposableLanguageServer) server;\n+      if (languageServer.getExitCode() == DisposableLanguageServer.SHUTDOWN_EXIT_CODE) {\n+        LOG.info(invocation.getMethod().getName() + \" invoked after shutdown\");\n+        return CompletableFuture.supplyAsync(() -> SHUTDOWN_RESPONSE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4MjU0Mg=="}, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NDM0MTQ0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNDozMToxNlrOHvIbCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1OToxOFrOHvkrew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4MzExNA==", "bodyText": "You can use CompletableFuture.completedFuture in both returns.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r519183114", "createdAt": "2020-11-07T14:31:16Z", "author": {"login": "grianbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "diffHunk": "@@ -124,14 +127,53 @@ private void getLocaleFromClient() {\n     settingsService.getConfiguration(LOCALE.label).thenAccept(localeStore.notifyLocaleStore());\n   }\n \n+  @Override\n+  public int getExitCode() {\n+    return exitCode;\n+  }\n+\n   @Override\n   public CompletableFuture<Object> shutdown() {\n-    return supplyAsync(() -> TRUE);\n+    LOG.info(\"LS for COBOL received shutdown request\");\n+    exitCode = 0;\n+    try {\n+      cancelAllProcessing();\n+    } catch (Exception exception) {\n+      return supplyAsync(() -> new ShutdownResponse(null, exception.getMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NjA3NQ==", "bodyText": "done", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r519646075", "createdAt": "2020-11-09T08:59:18Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "diffHunk": "@@ -124,14 +127,53 @@ private void getLocaleFromClient() {\n     settingsService.getConfiguration(LOCALE.label).thenAccept(localeStore.notifyLocaleStore());\n   }\n \n+  @Override\n+  public int getExitCode() {\n+    return exitCode;\n+  }\n+\n   @Override\n   public CompletableFuture<Object> shutdown() {\n-    return supplyAsync(() -> TRUE);\n+    LOG.info(\"LS for COBOL received shutdown request\");\n+    exitCode = 0;\n+    try {\n+      cancelAllProcessing();\n+    } catch (Exception exception) {\n+      return supplyAsync(() -> new ShutdownResponse(null, exception.getMessage()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4MzExNA=="}, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NDM0NDI3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNDozNTowMlrOHvIcXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1OTozMFrOHvkr-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4MzQ1NQ==", "bodyText": "It makes sense to update exitCode after successfully done the cancelAllProcessing call.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r519183455", "createdAt": "2020-11-07T14:35:02Z", "author": {"login": "grianbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "diffHunk": "@@ -124,14 +127,53 @@ private void getLocaleFromClient() {\n     settingsService.getConfiguration(LOCALE.label).thenAccept(localeStore.notifyLocaleStore());\n   }\n \n+  @Override\n+  public int getExitCode() {\n+    return exitCode;\n+  }\n+\n   @Override\n   public CompletableFuture<Object> shutdown() {\n-    return supplyAsync(() -> TRUE);\n+    LOG.info(\"LS for COBOL received shutdown request\");\n+    exitCode = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NjIwMw==", "bodyText": "done", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r519646203", "createdAt": "2020-11-09T08:59:30Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "diffHunk": "@@ -124,14 +127,53 @@ private void getLocaleFromClient() {\n     settingsService.getConfiguration(LOCALE.label).thenAccept(localeStore.notifyLocaleStore());\n   }\n \n+  @Override\n+  public int getExitCode() {\n+    return exitCode;\n+  }\n+\n   @Override\n   public CompletableFuture<Object> shutdown() {\n-    return supplyAsync(() -> TRUE);\n+    LOG.info(\"LS for COBOL received shutdown request\");\n+    exitCode = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4MzQ1NQ=="}, "originalCommit": {"oid": "46dd72f92204022be93287a288a51758dda8b42b"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzYxMzIyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/NonSyntheticMethodMatcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOToxNToyNlrOHvlRsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOToxNToyNlrOHvlRsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1NTg1Nw==", "bodyText": "What if we write methods in lambda way?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r519655857", "createdAt": "2020-11-09T09:15:26Z", "author": {"login": "asatklichov"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/NonSyntheticMethodMatcher.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.broadcom.lsp.cobol.core.annotation;\n+\n+import com.google.inject.matcher.AbstractMatcher;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * Custom {@link com.google.inject.matcher.Matcher} to identify any synthetic method and returns\n+ * false if the method is synthetic\n+ */\n+public class NonSyntheticMethodMatcher extends AbstractMatcher<Method> {\n+\n+  /**\n+   * match any synthetic method and returns false if the method is synthetic\n+   *\n+   * @param method\n+   * @return true if method is non-synthetic and false otherwise\n+   */\n+  @Override\n+  public boolean matches(Method method) {\n+    return !method.isSynthetic();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ceba3083767dcd1c9c3e81491e2552bba4445b9"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODE0OTIxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjowMToyNFrOHxKOwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzo1ODo1OFrOHxOR7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMwOTg5MA==", "bodyText": "I just tested it and noticed that this message should be \"COBOL LS server exits with code:\"", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r521309890", "createdAt": "2020-11-11T12:01:24Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "diffHunk": "@@ -126,12 +134,45 @@ private void getLocaleFromClient() {\n \n   @Override\n   public CompletableFuture<Object> shutdown() {\n-    return supplyAsync(() -> TRUE);\n+    LOG.info(\"LS for COBOL received shutdown request\");\n+    try {\n+      cancelAllProcessing();\n+      exitCode = 0;\n+    } catch (Exception exception) {\n+      return CompletableFuture.completedFuture(new ShutdownResponse(null, exception.getMessage()));\n+    }\n+    return CompletableFuture.completedFuture(new ShutdownResponse(null, String.valueOf(exitCode)));\n+  }\n+\n+  /**\n+   * Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and\n+   * returns a list of the tasks that were awaiting execution. These tasks are drained (removed)\n+   * from the task queue upon return from this method.\n+   *\n+   * <p>There are no guarantees beyond best-effort attempts to stop processing actively executing\n+   * tasks. This implementation cancels tasks via Thread.interrupt(), so any task that fails to\n+   * respond to interrupts may never terminate.\n+   *\n+   * <p>Source:\n+   * https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#shutdownNow--\n+   */\n+  private void cancelAllProcessing() {\n+    // NOTE: shutdownNow principally is not a bad practice when we know what we are doing.\n+    //      Here in this case, since we are only stopping our own threads which don't\n+    //      require any clean up.It's ok. Java doc doesn't mention any bad practice for this.\n+\n+    // cancels all the running task and clears empty queue on forkJoinPool.\n+    ForkJoinPool.commonPool().shutdownNow();\n+\n+    // cancels all the running task and clears empty queue on CobolTextDocumentService executor.\n+    ((CobolTextDocumentService) getTextDocumentService()).disposeAllOperation(this);\n+    LOG.info(\"All processing abandoned as per shutdown call\");\n   }\n \n   @Override\n   public void exit() {\n-    // not supported\n+    LOG.info(\"LS for COBOL exiting with code: \" + exitCode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da14f00c21184317c3d317d00dd596b2d91123e7"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM3NjIzOQ==", "bodyText": "Done", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r521376239", "createdAt": "2020-11-11T13:58:58Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "diffHunk": "@@ -126,12 +134,45 @@ private void getLocaleFromClient() {\n \n   @Override\n   public CompletableFuture<Object> shutdown() {\n-    return supplyAsync(() -> TRUE);\n+    LOG.info(\"LS for COBOL received shutdown request\");\n+    try {\n+      cancelAllProcessing();\n+      exitCode = 0;\n+    } catch (Exception exception) {\n+      return CompletableFuture.completedFuture(new ShutdownResponse(null, exception.getMessage()));\n+    }\n+    return CompletableFuture.completedFuture(new ShutdownResponse(null, String.valueOf(exitCode)));\n+  }\n+\n+  /**\n+   * Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and\n+   * returns a list of the tasks that were awaiting execution. These tasks are drained (removed)\n+   * from the task queue upon return from this method.\n+   *\n+   * <p>There are no guarantees beyond best-effort attempts to stop processing actively executing\n+   * tasks. This implementation cancels tasks via Thread.interrupt(), so any task that fails to\n+   * respond to interrupts may never terminate.\n+   *\n+   * <p>Source:\n+   * https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#shutdownNow--\n+   */\n+  private void cancelAllProcessing() {\n+    // NOTE: shutdownNow principally is not a bad practice when we know what we are doing.\n+    //      Here in this case, since we are only stopping our own threads which don't\n+    //      require any clean up.It's ok. Java doc doesn't mention any bad practice for this.\n+\n+    // cancels all the running task and clears empty queue on forkJoinPool.\n+    ForkJoinPool.commonPool().shutdownNow();\n+\n+    // cancels all the running task and clears empty queue on CobolTextDocumentService executor.\n+    ((CobolTextDocumentService) getTextDocumentService()).disposeAllOperation(this);\n+    LOG.info(\"All processing abandoned as per shutdown call\");\n   }\n \n   @Override\n   public void exit() {\n-    // not supported\n+    LOG.info(\"LS for COBOL exiting with code: \" + exitCode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMwOTg5MA=="}, "originalCommit": {"oid": "da14f00c21184317c3d317d00dd596b2d91123e7"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODE1MTYwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjowMjoxMVrOHxKQOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzo1ODo1MVrOHxORqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxMDI2NA==", "bodyText": "Should be \"COBOL LS received shutdown request\"", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r521310264", "createdAt": "2020-11-11T12:02:11Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "diffHunk": "@@ -126,12 +134,45 @@ private void getLocaleFromClient() {\n \n   @Override\n   public CompletableFuture<Object> shutdown() {\n-    return supplyAsync(() -> TRUE);\n+    LOG.info(\"LS for COBOL received shutdown request\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da14f00c21184317c3d317d00dd596b2d91123e7"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM3NjE2OA==", "bodyText": "done", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r521376168", "createdAt": "2020-11-11T13:58:51Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "diffHunk": "@@ -126,12 +134,45 @@ private void getLocaleFromClient() {\n \n   @Override\n   public CompletableFuture<Object> shutdown() {\n-    return supplyAsync(() -> TRUE);\n+    LOG.info(\"LS for COBOL received shutdown request\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxMDI2NA=="}, "originalCommit": {"oid": "da14f00c21184317c3d317d00dd596b2d91123e7"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODgxODAwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/LangServerBootstrap.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDo1NDozMVrOHxQlAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNToyODo0NlrOHxSCag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQxMzg4OA==", "bodyText": "Reverting back custom thread pool changes for this class.\nReason:\nManage thread for the process we initiate and let LSP4J manage its thread. This helps in the shutdown process where we shutdown the custom thread pool to shutdown all current processes.\n@asatklichov\n@grianbrcom\n@Nurkambay\n@temanbrcom", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r521413888", "createdAt": "2020-11-11T14:54:31Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/LangServerBootstrap.java", "diffHunk": "@@ -56,23 +54,19 @@ public static void main(String[] args)\n     Injector injector = initCtx();\n     LanguageServer server = injector.getInstance(LanguageServer.class);\n     ClientProvider provider = injector.getInstance(ClientProvider.class);\n-    CustomThreadPoolExecutor customExecutor = injector.getInstance(CustomThreadPoolExecutor.class);\n \n-    start(args, server, provider, customExecutor.getThreadPoolExecutor());\n+    start(args, server, provider);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f27c36e208b5c505752a6ca748c88433e9eddf97"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzNDEzNA==", "bodyText": "But in this case, we still have a separate executor for LSP4J and another one for the data bus and other stuff, right?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r521434134", "createdAt": "2020-11-11T15:23:31Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/LangServerBootstrap.java", "diffHunk": "@@ -56,23 +54,19 @@ public static void main(String[] args)\n     Injector injector = initCtx();\n     LanguageServer server = injector.getInstance(LanguageServer.class);\n     ClientProvider provider = injector.getInstance(ClientProvider.class);\n-    CustomThreadPoolExecutor customExecutor = injector.getInstance(CustomThreadPoolExecutor.class);\n \n-    start(args, server, provider, customExecutor.getThreadPoolExecutor());\n+    start(args, server, provider);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQxMzg4OA=="}, "originalCommit": {"oid": "f27c36e208b5c505752a6ca748c88433e9eddf97"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzNzgwMg==", "bodyText": "Yes, LSP4J uses a new cached thread pool for its use, if we don't provide (it creates using Executors.newCachedThreadPool()).\nAnd our process will use the custom thread pool (dataBus/ textDocumnetService etc).", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r521437802", "createdAt": "2020-11-11T15:28:46Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/LangServerBootstrap.java", "diffHunk": "@@ -56,23 +54,19 @@ public static void main(String[] args)\n     Injector injector = initCtx();\n     LanguageServer server = injector.getInstance(LanguageServer.class);\n     ClientProvider provider = injector.getInstance(ClientProvider.class);\n-    CustomThreadPoolExecutor customExecutor = injector.getInstance(CustomThreadPoolExecutor.class);\n \n-    start(args, server, provider, customExecutor.getThreadPoolExecutor());\n+    start(args, server, provider);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQxMzg4OA=="}, "originalCommit": {"oid": "f27c36e208b5c505752a6ca748c88433e9eddf97"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODk1NDc0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNToyNTowNFrOHxR4mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjowODoyNVrOHxTvzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzNTI5MA==", "bodyText": "Should we shutdown also the scheduled pool here?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r521435290", "createdAt": "2020-11-11T15:25:04Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "diffHunk": "@@ -126,12 +138,45 @@ private void getLocaleFromClient() {\n \n   @Override\n   public CompletableFuture<Object> shutdown() {\n-    return supplyAsync(() -> TRUE);\n+    LOG.info(\"COBOL LS received shutdown request\");\n+    try {\n+      cancelAllProcessing();\n+      exitCode = 0;\n+    } catch (Exception exception) {\n+      return CompletableFuture.completedFuture(new ShutdownResponse(null, exception.getMessage()));\n+    }\n+    return CompletableFuture.completedFuture(new ShutdownResponse(null, String.valueOf(exitCode)));\n+  }\n+\n+  /**\n+   * Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and\n+   * returns a list of the tasks that were awaiting execution. These tasks are drained (removed)\n+   * from the task queue upon return from this method.\n+   *\n+   * <p>There are no guarantees beyond best-effort attempts to stop processing actively executing\n+   * tasks. This implementation cancels tasks via Thread.interrupt(), so any task that fails to\n+   * respond to interrupts may never terminate.\n+   *\n+   * <p>Source:\n+   * https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#shutdownNow--\n+   */\n+  private void cancelAllProcessing() {\n+    // NOTE: shutdownNow principally is not a bad practice when we know what we are doing.\n+    //      Here in this case, since we are only stopping our own threads which don't\n+    //      require any clean up.It's ok. Java doc doesn't mention any bad practice for this.\n+\n+    // cancels all the running task and clears empty queue on forkJoinPool.\n+    ForkJoinPool.commonPool().shutdownNow();\n+\n+    // cancels all the running task on COBOL LS custom executor service.\n+    customThreadPoolExecutor.getThreadPoolExecutor().shutdownNow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f27c36e208b5c505752a6ca748c88433e9eddf97"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ2NTgwNA==", "bodyText": "done", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r521465804", "createdAt": "2020-11-11T16:08:25Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolLanguageServer.java", "diffHunk": "@@ -126,12 +138,45 @@ private void getLocaleFromClient() {\n \n   @Override\n   public CompletableFuture<Object> shutdown() {\n-    return supplyAsync(() -> TRUE);\n+    LOG.info(\"COBOL LS received shutdown request\");\n+    try {\n+      cancelAllProcessing();\n+      exitCode = 0;\n+    } catch (Exception exception) {\n+      return CompletableFuture.completedFuture(new ShutdownResponse(null, exception.getMessage()));\n+    }\n+    return CompletableFuture.completedFuture(new ShutdownResponse(null, String.valueOf(exitCode)));\n+  }\n+\n+  /**\n+   * Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and\n+   * returns a list of the tasks that were awaiting execution. These tasks are drained (removed)\n+   * from the task queue upon return from this method.\n+   *\n+   * <p>There are no guarantees beyond best-effort attempts to stop processing actively executing\n+   * tasks. This implementation cancels tasks via Thread.interrupt(), so any task that fails to\n+   * respond to interrupts may never terminate.\n+   *\n+   * <p>Source:\n+   * https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#shutdownNow--\n+   */\n+  private void cancelAllProcessing() {\n+    // NOTE: shutdownNow principally is not a bad practice when we know what we are doing.\n+    //      Here in this case, since we are only stopping our own threads which don't\n+    //      require any clean up.It's ok. Java doc doesn't mention any bad practice for this.\n+\n+    // cancels all the running task and clears empty queue on forkJoinPool.\n+    ForkJoinPool.commonPool().shutdownNow();\n+\n+    // cancels all the running task on COBOL LS custom executor service.\n+    customThreadPoolExecutor.getThreadPoolExecutor().shutdownNow();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzNTI5MA=="}, "originalCommit": {"oid": "f27c36e208b5c505752a6ca748c88433e9eddf97"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODk2MjExOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNToyNjo1MlrOHxR9dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjowODoxOFrOHxTvbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzNjUzMg==", "bodyText": "Optional: this name seems very wordy, especially on the usages. Maybe, executors would be enough?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r521436532", "createdAt": "2020-11-11T15:26:52Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -87,14 +92,16 @@\n       Completions completions,\n       Occurrences occurrences,\n       DataBusBroker dataBus,\n-      CodeActions actions) {\n+      CodeActions actions,\n+      CustomThreadPoolExecutor customThreadPoolExecutor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f27c36e208b5c505752a6ca748c88433e9eddf97"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ2NTcxMA==", "bodyText": "done", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r521465710", "createdAt": "2020-11-11T16:08:18Z", "author": {"login": "ap891843"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -87,14 +92,16 @@\n       Completions completions,\n       Occurrences occurrences,\n       DataBusBroker dataBus,\n-      CodeActions actions) {\n+      CodeActions actions,\n+      CustomThreadPoolExecutor customThreadPoolExecutor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzNjUzMg=="}, "originalCommit": {"oid": "f27c36e208b5c505752a6ca748c88433e9eddf97"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODk3OTAwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/CobolTextDocumentServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNTozMDo0NVrOHxSIIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjowODoxMlrOHxTvMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzOTI2Nw==", "bodyText": "Replaceable with builder", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r521439267", "createdAt": "2020-11-11T15:30:45Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/service/CobolTextDocumentServiceTest.java", "diffHunk": "@@ -178,7 +183,14 @@ void disableCopybookAnalysisOnExtendedDoc() {\n \n   private CobolTextDocumentService buildServiceWithMockEngine(LanguageEngineFacade engine) {\n     return new CobolTextDocumentService(\n-        mock(Communications.class), engine, null, null, null, mock(DataBusBroker.class), null);\n+        mock(Communications.class),\n+        engine,\n+        null,\n+        null,\n+        null,\n+        mock(DataBusBroker.class),\n+        null,\n+        getCustomExecutor());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f27c36e208b5c505752a6ca748c88433e9eddf97"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ2NTY1MQ==", "bodyText": "done", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r521465651", "createdAt": "2020-11-11T16:08:12Z", "author": {"login": "ap891843"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/service/CobolTextDocumentServiceTest.java", "diffHunk": "@@ -178,7 +183,14 @@ void disableCopybookAnalysisOnExtendedDoc() {\n \n   private CobolTextDocumentService buildServiceWithMockEngine(LanguageEngineFacade engine) {\n     return new CobolTextDocumentService(\n-        mock(Communications.class), engine, null, null, null, mock(DataBusBroker.class), null);\n+        mock(Communications.class),\n+        engine,\n+        null,\n+        null,\n+        null,\n+        mock(DataBusBroker.class),\n+        null,\n+        getCustomExecutor());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzOTI2Nw=="}, "originalCommit": {"oid": "f27c36e208b5c505752a6ca748c88433e9eddf97"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTIwODczOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/DocumentExtensionTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjoyMjozOVrOHxUVRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjoyMjozOVrOHxUVRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NTM5Nw==", "bodyText": "In this case, we will create a connection to DI that we are actually want to get rid of. Will work for now; may be fixed in #261", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r521475397", "createdAt": "2020-11-11T16:22:39Z", "author": {"login": "temanbrcom"}, "path": "server/src/test/java/com/broadcom/lsp/cobol/service/DocumentExtensionTests.java", "diffHunk": "@@ -34,7 +35,7 @@\n  * extensions. If an extension of a document is unsupported (i.e. not \"cob\", \"cbl\" or \"cobol\"\n  * ignoring case) then the according to notification should be sent.\n  */\n-class DocumentExtensionTests {\n+class DocumentExtensionTests extends ConfigurableTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1f079d128a2a4953172addb695dc16f86dc73c2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Mjg1ODQ2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMTo0MzowN1rOHx3DHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMTo0MzowN1rOHx3DHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA0NDE4OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/613#discussion_r522044188", "createdAt": "2020-11-12T11:43:07Z", "author": {"login": "asatklichov"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -108,70 +115,85 @@\n   }\n \n   @Override\n+  @CheckServerShutdownState\n   public CompletableFuture<Either<List<CompletionItem>, CompletionList>> completion(\n       CompletionParams params) {\n     String uri = params.getTextDocument().getUri();\n     return CompletableFuture.<Either<List<CompletionItem>, CompletionList>>supplyAsync(\n-            () -> Either.forRight(completions.collectFor(docs.get(uri), params)))\n+            () -> Either.forRight(completions.collectFor(docs.get(uri), params)),\n+            executors.getThreadPoolExecutor())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1f079d128a2a4953172addb695dc16f86dc73c2"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3829, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}