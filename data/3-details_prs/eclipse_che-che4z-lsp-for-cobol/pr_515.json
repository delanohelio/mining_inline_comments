{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzOTU1MTU1", "number": 515, "title": "472 - Use Microsoft VS Code's Telemetry that collects telemetry data", "bodyText": "Closes #472.\nThis PR introduce the support for collecting telemetry event to better understand how the core functionalities had been used by our users on daily activity. The results will help to better prioritize feature and bug-fix for in demand functionalities.\nThe COBOL Language Support developer could use the TelemetryService#registerEvent() or TelemetryService#registerExceptionEvent() to send generic events or exception events that will be sent to the designed telemetry server.\nThe target telemetry server used is managed by the TelemetryFactory so that TelemetryService is agnostic about the external server that collect telemetry data and is sorely responsible to get the content from the developer, apply some logic to validate the data and then send it to the target telemetry server using the factory.\nPrerequisite to collect the telemetry data is that user should not disable VSC Extension Telemetry", "createdAt": "2020-09-10T14:49:57Z", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515", "merged": true, "mergeCommit": {"oid": "da468d404589cbc51ac3b6a0a224da7ae6b7110a"}, "closed": true, "closedAt": "2020-09-21T10:01:10Z", "author": {"login": "zacanbrcom"}, "timelineItems": {"totalCount": 51, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHy-mWAFqTQ4NjY1MTA4Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdK_-bSgBqjM3ODc3MzEzMjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NjUxMDg3", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#pullrequestreview-486651087", "createdAt": "2020-09-11T09:28:58Z", "commit": {"oid": "967d879ce7d5d8912b2bb3079cf841dba7a9cfd2"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOToyODo1OVrOHQWgLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDozNjoyNFrOHQZsfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkwNzk0OQ==", "bodyText": "Optional: externalize this mock in beforeEach(..)  then it can be re-usable in below test", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r486907949", "createdAt": "2020-09-11T09:28:59Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/TelemetryReporterImpl.spec.ts", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+import * as path from \"path\";\n+import * as vscode from \"vscode\";\n+import {TelemetryReporterImpl} from \"../services/reporter/TelemetryReporterImpl\";\n+import {ExtensionUtils} from \"../services/settings/util/ExtensionUtils\";\n+\n+const INVALID_TELEMETRY_KEY: string = \"INVALID_INSTRUMENTATION_KEY\";\n+\n+function generatePath(...pathSegments) {\n+    vscode.Uri.file = jest.fn().mockReturnValue({\n+        fsPath: path.join(path.join(__dirname, \"../../\"), ...pathSegments),\n+    });\n+}\n+\n+describe(\"Telemetry key retrieval functionality is able to return a decoded existing key or a default string\", () => {\n+    beforeEach(() => {\n+        jest.clearAllMocks();\n+    });\n+\n+    test(\"Given an existent flat file that contains telemetry key, then the content of that file is not empty and is returned\", async () => {\n+        (ExtensionUtils as any).getExtensionPath = jest.fn().mockReturnValue(path.join(__dirname, \"../../\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d879ce7d5d8912b2bb3079cf841dba7a9cfd2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkxMDQxOA==", "bodyText": "Better naming for \"type\" like eventType.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r486910418", "createdAt": "2020-09-11T09:31:34Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/TelemetryServiceTest.spec.ts", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+import * as path from \"path\";\n+import {sep} from \"path\";\n+import TelemetryReporter from \"vscode-extension-telemetry\";\n+import {TelemetryReporterImpl} from \"../services/reporter/TelemetryReporterImpl\";\n+import {TelemetryService} from \"../services/reporter/TelemetryService\";\n+import {ExtensionUtils} from \"../services/settings/util/ExtensionUtils\";\n+\n+const USERNAME: string = \"usernameToAnonymize\";\n+const FAKE_ROOT_PATH = \"C:\" + sep + \"Users\" + sep + USERNAME + \"folder1\" + sep + \"folder2\" + sep + \"folder3\" + sep;\n+let spySendTelemetry;\n+let spySendExceptionTelemetry;\n+jest.mock(\"vscode-extension-telemetry\");\n+\n+function runScenario(expectedNumberOfCalls, type: string, eventName?: string, categories?: string[], rootCause?: string, telemetryMeasurements?: Map<string, number>) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d879ce7d5d8912b2bb3079cf841dba7a9cfd2"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkxNjM3Mw==", "bodyText": "Regarding to method definition extracted startTime = Date.now() can be reused", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r486916373", "createdAt": "2020-09-11T09:37:50Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/TelemetryServiceTest.spec.ts", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+import * as path from \"path\";\n+import {sep} from \"path\";\n+import TelemetryReporter from \"vscode-extension-telemetry\";\n+import {TelemetryReporterImpl} from \"../services/reporter/TelemetryReporterImpl\";\n+import {TelemetryService} from \"../services/reporter/TelemetryService\";\n+import {ExtensionUtils} from \"../services/settings/util/ExtensionUtils\";\n+\n+const USERNAME: string = \"usernameToAnonymize\";\n+const FAKE_ROOT_PATH = \"C:\" + sep + \"Users\" + sep + USERNAME + \"folder1\" + sep + \"folder2\" + sep + \"folder3\" + sep;\n+let spySendTelemetry;\n+let spySendExceptionTelemetry;\n+jest.mock(\"vscode-extension-telemetry\");\n+\n+function runScenario(expectedNumberOfCalls, type: string, eventName?: string, categories?: string[], rootCause?: string, telemetryMeasurements?: Map<string, number>) {\n+    if (type === \"log\") {\n+        TelemetryService.registerEvent(eventName, categories, undefined, telemetryMeasurements);\n+        expect(spySendTelemetry).toBeCalledTimes(expectedNumberOfCalls);\n+    } else {\n+        TelemetryService.registerExceptionEvent(eventName, rootCause, categories);\n+        expect(spySendExceptionTelemetry).toBeCalledTimes(expectedNumberOfCalls);\n+    }\n+}\n+\n+function setupScenario() {\n+    ExtensionUtils.getIDEName = jest.fn().mockReturnValue(\"testingIde\");\n+    ExtensionUtils.getPackageVersion = jest.fn().mockReturnValue(\"1.0\");\n+    (TelemetryReporterImpl as any).getTelemetryKeyId = jest.fn().mockReturnValue(\"key_id_for_testing_purposes\");\n+    (TelemetryService as any).getUsername = jest.fn().mockReturnValue(USERNAME);\n+    jest.mock(\"vscode-extension-telemetry\");\n+    spySendTelemetry = jest.spyOn(TelemetryReporter.prototype, \"sendTelemetryEvent\");\n+    spySendExceptionTelemetry = jest.spyOn(TelemetryReporter.prototype, \"sendTelemetryErrorEvent\");\n+}\n+\n+describe(\"TelemetryService information are consistent before send them to the telemetry server\", () => {\n+    beforeEach(() => {\n+        jest.clearAllMocks();\n+    });\n+    beforeAll(() => {\n+        setupScenario();\n+    });\n+    afterEach(() => {\n+        jest.clearAllMocks();\n+    });\n+\n+    test(\"Given a fulfilled telemetry event, the data is correctly collected and sent to the telemetry server\", () => {\n+        runScenario(1, \"log\", \"test\");\n+    });\n+\n+    test(\"Given a fulfilled telemetry measurement event, the data is contained as part of a telemetry event and their data are sent to the telemetry server\", () => {\n+        runScenario(1, \"log\", \"test the download\", undefined, undefined, new Map().set(\"time elapsed\", TelemetryService.calculateTimeElapsed(Date.now() - 100, Date.now())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d879ce7d5d8912b2bb3079cf841dba7a9cfd2"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkyMjU5Mw==", "bodyText": "to be consistent, please declare to all", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r486922593", "createdAt": "2020-09-11T09:44:04Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/TelemetryServiceTest.spec.ts", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+import * as path from \"path\";\n+import {sep} from \"path\";\n+import TelemetryReporter from \"vscode-extension-telemetry\";\n+import {TelemetryReporterImpl} from \"../services/reporter/TelemetryReporterImpl\";\n+import {TelemetryService} from \"../services/reporter/TelemetryService\";\n+import {ExtensionUtils} from \"../services/settings/util/ExtensionUtils\";\n+\n+const USERNAME: string = \"usernameToAnonymize\";\n+const FAKE_ROOT_PATH = \"C:\" + sep + \"Users\" + sep + USERNAME + \"folder1\" + sep + \"folder2\" + sep + \"folder3\" + sep;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d879ce7d5d8912b2bb3079cf841dba7a9cfd2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkyNjMzOQ==", "bodyText": "has wrong", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r486926339", "createdAt": "2020-09-11T09:47:48Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/extension.ts", "diffHunk": "@@ -47,6 +50,8 @@ export async function activate(context: vscode.ExtensionContext) {\n         await languageClientService.checkPrerequisites();\n     } catch (err) {\n         vscode.window.showErrorMessage(err.toString());\n+        TelemetryService.registerExceptionEvent(\"RuntimeException\", err.toString(), [\"bootstrap\", \"experiment-tag\"], \"Client have wrong Java version installed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d879ce7d5d8912b2bb3079cf841dba7a9cfd2"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkzMTU2Mw==", "bodyText": "please rephrase \"User hover a miss copybook\"", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r486931563", "createdAt": "2020-09-11T09:53:10Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/services/CopybooksCodeActionProvider.ts", "diffHunk": "@@ -24,12 +25,14 @@ export class CopybooksCodeActionProvider implements vscode.CodeActionProvider {\n         if (!this.shouldHaveCodeAction(context)) {\n             return [];\n         }\n+        // Telemetry should be collected only if shouldHaveCodeAction is true\n+        TelemetryService.registerEvent(\"QuickFix for copybook activation\", [\"COBOL\", \"hover\", \"copybook\", \"quickfix\"], \"User hover a miss copybook\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d879ce7d5d8912b2bb3079cf841dba7a9cfd2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk0MjcxNA==", "bodyText": "This block can be removed (implicitly returns undefined), if logic performed valid content.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r486942714", "createdAt": "2020-09-11T10:03:00Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/services/reporter/TelemetryReporterImpl.ts", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+import * as fs from \"fs\";\n+import * as path from \"path\";\n+import * as vscode from \"vscode\";\n+import TelemetryReporter from \"vscode-extension-telemetry\";\n+import {EXTENSION_ID, TELEMETRY_DEFAULT_CONTENT} from \"../../constants\";\n+import {ExtensionUtils} from \"../settings/util/ExtensionUtils\";\n+import {TelemetryEvent} from \"./model/TelemetryEvent\";\n+import {TelemetryMeasurement} from \"./model/TelemetryMeasurement\";\n+import {TelemetryReport} from \"./TelemetryReport\";\n+\n+export class TelemetryReporterImpl implements TelemetryReport {\n+    public static getInstance(): TelemetryReporterImpl {\n+        if (!TelemetryReporterImpl.instance) {\n+            TelemetryReporterImpl.instance = new TelemetryReporterImpl(this.getTelemetryKeyId());\n+        }\n+        return TelemetryReporterImpl.instance;\n+    }\n+\n+    private static instance: TelemetryReporterImpl;\n+\n+    /**\n+     * This method return the value of the instrumentation key necessary to create the telemetry reporter from an\n+     * external file configuration. If the file doesn't exists it returns a generic value that will not be valid\n+     * for collect telemetry event.\n+     */\n+    private static getTelemetryKeyId(): string {\n+        return fs.existsSync(this.getTelemetryResourcePath()) ? this.getInstrumentationKey() : TELEMETRY_DEFAULT_CONTENT;\n+    }\n+\n+    private static getTelemetryResourcePath() {\n+        return vscode.Uri.file(\n+            path.join(ExtensionUtils.getExtensionPath(), \"resources\", \"TELEMETRY_KEY\")).fsPath;\n+    }\n+\n+    private static getInstrumentationKey(): string {\n+        return Buffer.from(fs.readFileSync(this.getTelemetryResourcePath(), \"utf8\").replace(/(\\r\\n|\\n|\\r)/gm, \"\"), \"base64\").toString();\n+    }\n+\n+    private static covertData(content: TelemetryEvent) {\n+        return {\n+            categories: content.getCategories().toString(),\n+            event: content.getEventName(),\n+            IDE: ExtensionUtils.getIDEName(),\n+            notes: content.getNotes(),\n+            timestamp: content.getTimestamp(),\n+            rootCause: content.getRootCause(),\n+        };\n+    }\n+\n+    private static convertMeasurements(content: Map<string, number>): TelemetryMeasurement {\n+        if (!content) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d879ce7d5d8912b2bb3079cf841dba7a9cfd2"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk0OTIzMg==", "bodyText": "shortened form: we can remove above private fields and just define within constructor like constructor(private ...", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r486949232", "createdAt": "2020-09-11T10:13:32Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/services/reporter/TelemetryReporterImpl.ts", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+import * as fs from \"fs\";\n+import * as path from \"path\";\n+import * as vscode from \"vscode\";\n+import TelemetryReporter from \"vscode-extension-telemetry\";\n+import {EXTENSION_ID, TELEMETRY_DEFAULT_CONTENT} from \"../../constants\";\n+import {ExtensionUtils} from \"../settings/util/ExtensionUtils\";\n+import {TelemetryEvent} from \"./model/TelemetryEvent\";\n+import {TelemetryMeasurement} from \"./model/TelemetryMeasurement\";\n+import {TelemetryReport} from \"./TelemetryReport\";\n+\n+export class TelemetryReporterImpl implements TelemetryReport {\n+    public static getInstance(): TelemetryReporterImpl {\n+        if (!TelemetryReporterImpl.instance) {\n+            TelemetryReporterImpl.instance = new TelemetryReporterImpl(this.getTelemetryKeyId());\n+        }\n+        return TelemetryReporterImpl.instance;\n+    }\n+\n+    private static instance: TelemetryReporterImpl;\n+\n+    /**\n+     * This method return the value of the instrumentation key necessary to create the telemetry reporter from an\n+     * external file configuration. If the file doesn't exists it returns a generic value that will not be valid\n+     * for collect telemetry event.\n+     */\n+    private static getTelemetryKeyId(): string {\n+        return fs.existsSync(this.getTelemetryResourcePath()) ? this.getInstrumentationKey() : TELEMETRY_DEFAULT_CONTENT;\n+    }\n+\n+    private static getTelemetryResourcePath() {\n+        return vscode.Uri.file(\n+            path.join(ExtensionUtils.getExtensionPath(), \"resources\", \"TELEMETRY_KEY\")).fsPath;\n+    }\n+\n+    private static getInstrumentationKey(): string {\n+        return Buffer.from(fs.readFileSync(this.getTelemetryResourcePath(), \"utf8\").replace(/(\\r\\n|\\n|\\r)/gm, \"\"), \"base64\").toString();\n+    }\n+\n+    private static covertData(content: TelemetryEvent) {\n+        return {\n+            categories: content.getCategories().toString(),\n+            event: content.getEventName(),\n+            IDE: ExtensionUtils.getIDEName(),\n+            notes: content.getNotes(),\n+            timestamp: content.getTimestamp(),\n+            rootCause: content.getRootCause(),\n+        };\n+    }\n+\n+    private static convertMeasurements(content: Map<string, number>): TelemetryMeasurement {\n+        if (!content) {\n+            return undefined;\n+        }\n+\n+        const result: TelemetryMeasurement = {};\n+\n+        for (const [key, value] of content) {\n+            if (value) {\n+                result[key] = value;\n+            }\n+        }\n+        return result;\n+    }\n+\n+    private readonly telemetryKeyId: string;\n+    private reporter: TelemetryReporter;\n+\n+    private constructor(telemetryKeyId: string) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d879ce7d5d8912b2bb3079cf841dba7a9cfd2"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1MTk1Ng==", "bodyText": "shortened form(negation is slow): we can remove return, just:\nif (this.isValidEventName(eventName)){\nTelemetryFactory.getReporter()....\n}", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r486951956", "createdAt": "2020-09-11T10:18:57Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/services/reporter/TelemetryService.ts", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+import {userInfo} from \"os\";\n+import {sep} from \"path\";\n+import {TelemetryEvent} from \"./model/TelemetryEvent\";\n+import {TelemetryFactory} from \"./TelemetryFactory\";\n+\n+export class TelemetryService {\n+    /**\n+     *  This method calculate the time elapsed between two number representation of dates expressed as\n+     *  number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.\n+     * @param startTime numeric representation of a starting time\n+     * @param endTime numeric representation of a ending time\n+     */\n+    public static calculateTimeElapsed(startTime: number, endTime: number): number | undefined {\n+        return ((startTime && endTime) && (endTime >= startTime)) ? ((endTime - startTime) / 1000) : undefined;\n+    }\n+\n+    /**\n+     * This method collect the data event for telemetry purpose, apply basic validation\n+     * and delegate the reporter service to sent them to the target telemetry server\n+     * @param eventName name assigned for the event for the telemetry\n+     * @param categories optional list of keywords (act as tags)\n+     * @param notes optional brief description\n+     * @param telemetryMeasurement optional set of numeric data with a key name\n+     */\n+    public static registerEvent(eventName: string, categories?: string[], notes?: string, telemetryMeasurement?: Map<string, number>) {\n+        if (!this.isValidEventName(eventName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d879ce7d5d8912b2bb3079cf841dba7a9cfd2"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1MjU1NA==", "bodyText": "please define return type,  : void", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r486952554", "createdAt": "2020-09-11T10:20:02Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/services/reporter/TelemetryService.ts", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+import {userInfo} from \"os\";\n+import {sep} from \"path\";\n+import {TelemetryEvent} from \"./model/TelemetryEvent\";\n+import {TelemetryFactory} from \"./TelemetryFactory\";\n+\n+export class TelemetryService {\n+    /**\n+     *  This method calculate the time elapsed between two number representation of dates expressed as\n+     *  number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.\n+     * @param startTime numeric representation of a starting time\n+     * @param endTime numeric representation of a ending time\n+     */\n+    public static calculateTimeElapsed(startTime: number, endTime: number): number | undefined {\n+        return ((startTime && endTime) && (endTime >= startTime)) ? ((endTime - startTime) / 1000) : undefined;\n+    }\n+\n+    /**\n+     * This method collect the data event for telemetry purpose, apply basic validation\n+     * and delegate the reporter service to sent them to the target telemetry server\n+     * @param eventName name assigned for the event for the telemetry\n+     * @param categories optional list of keywords (act as tags)\n+     * @param notes optional brief description\n+     * @param telemetryMeasurement optional set of numeric data with a key name\n+     */\n+    public static registerEvent(eventName: string, categories?: string[], notes?: string, telemetryMeasurement?: Map<string, number>) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d879ce7d5d8912b2bb3079cf841dba7a9cfd2"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1Mjg2NQ==", "bodyText": "return type", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r486952865", "createdAt": "2020-09-11T10:20:34Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/services/reporter/TelemetryService.ts", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+import {userInfo} from \"os\";\n+import {sep} from \"path\";\n+import {TelemetryEvent} from \"./model/TelemetryEvent\";\n+import {TelemetryFactory} from \"./TelemetryFactory\";\n+\n+export class TelemetryService {\n+    /**\n+     *  This method calculate the time elapsed between two number representation of dates expressed as\n+     *  number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.\n+     * @param startTime numeric representation of a starting time\n+     * @param endTime numeric representation of a ending time\n+     */\n+    public static calculateTimeElapsed(startTime: number, endTime: number): number | undefined {\n+        return ((startTime && endTime) && (endTime >= startTime)) ? ((endTime - startTime) / 1000) : undefined;\n+    }\n+\n+    /**\n+     * This method collect the data event for telemetry purpose, apply basic validation\n+     * and delegate the reporter service to sent them to the target telemetry server\n+     * @param eventName name assigned for the event for the telemetry\n+     * @param categories optional list of keywords (act as tags)\n+     * @param notes optional brief description\n+     * @param telemetryMeasurement optional set of numeric data with a key name\n+     */\n+    public static registerEvent(eventName: string, categories?: string[], notes?: string, telemetryMeasurement?: Map<string, number>) {\n+        if (!this.isValidEventName(eventName)) {\n+            return;\n+        }\n+        TelemetryFactory.getReporter().reportEvent(this.createTelemetryEvent(eventName, categories, notes, undefined, telemetryMeasurement));\n+\n+    }\n+\n+    /**\n+     * This method collect the exception data event for telemetry purpose, apply basic validation\n+     * and delegate the reporter service to sent them to the target telemetry server\n+     * @param eventName name assigned for the event for the telemetry\n+     * @param rootCause the stacktrace attached for debugging purpose.\n+     * @param categories optional list of keywords (act as tags)\n+     * @param notes optional brief description\n+     * @param telemetryMeasurement optional set of numeric data with a key name\n+     */\n+    public static registerExceptionEvent(eventName = \"RuntimeException\", rootCause: string, categories?: string[], notes?: string, telemetryMeasurement?: Map<string, number>) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d879ce7d5d8912b2bb3079cf841dba7a9cfd2"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1MzIwOA==", "bodyText": "shortened faster-form:\nif (this.isValidEventName(eventName) && this.isValidRootCause(rootCause)) {\nTelemetryFactory.getReporter(). ..\n}", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r486953208", "createdAt": "2020-09-11T10:21:19Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/services/reporter/TelemetryService.ts", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+import {userInfo} from \"os\";\n+import {sep} from \"path\";\n+import {TelemetryEvent} from \"./model/TelemetryEvent\";\n+import {TelemetryFactory} from \"./TelemetryFactory\";\n+\n+export class TelemetryService {\n+    /**\n+     *  This method calculate the time elapsed between two number representation of dates expressed as\n+     *  number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.\n+     * @param startTime numeric representation of a starting time\n+     * @param endTime numeric representation of a ending time\n+     */\n+    public static calculateTimeElapsed(startTime: number, endTime: number): number | undefined {\n+        return ((startTime && endTime) && (endTime >= startTime)) ? ((endTime - startTime) / 1000) : undefined;\n+    }\n+\n+    /**\n+     * This method collect the data event for telemetry purpose, apply basic validation\n+     * and delegate the reporter service to sent them to the target telemetry server\n+     * @param eventName name assigned for the event for the telemetry\n+     * @param categories optional list of keywords (act as tags)\n+     * @param notes optional brief description\n+     * @param telemetryMeasurement optional set of numeric data with a key name\n+     */\n+    public static registerEvent(eventName: string, categories?: string[], notes?: string, telemetryMeasurement?: Map<string, number>) {\n+        if (!this.isValidEventName(eventName)) {\n+            return;\n+        }\n+        TelemetryFactory.getReporter().reportEvent(this.createTelemetryEvent(eventName, categories, notes, undefined, telemetryMeasurement));\n+\n+    }\n+\n+    /**\n+     * This method collect the exception data event for telemetry purpose, apply basic validation\n+     * and delegate the reporter service to sent them to the target telemetry server\n+     * @param eventName name assigned for the event for the telemetry\n+     * @param rootCause the stacktrace attached for debugging purpose.\n+     * @param categories optional list of keywords (act as tags)\n+     * @param notes optional brief description\n+     * @param telemetryMeasurement optional set of numeric data with a key name\n+     */\n+    public static registerExceptionEvent(eventName = \"RuntimeException\", rootCause: string, categories?: string[], notes?: string, telemetryMeasurement?: Map<string, number>) {\n+        if (!(this.isValidEventName(eventName) && this.isValidRootCause(rootCause))) {\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d879ce7d5d8912b2bb3079cf841dba7a9cfd2"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1NTIxNw==", "bodyText": "Will this work if rootCause = null ?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r486955217", "createdAt": "2020-09-11T10:25:38Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/services/reporter/TelemetryService.ts", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+import {userInfo} from \"os\";\n+import {sep} from \"path\";\n+import {TelemetryEvent} from \"./model/TelemetryEvent\";\n+import {TelemetryFactory} from \"./TelemetryFactory\";\n+\n+export class TelemetryService {\n+    /**\n+     *  This method calculate the time elapsed between two number representation of dates expressed as\n+     *  number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.\n+     * @param startTime numeric representation of a starting time\n+     * @param endTime numeric representation of a ending time\n+     */\n+    public static calculateTimeElapsed(startTime: number, endTime: number): number | undefined {\n+        return ((startTime && endTime) && (endTime >= startTime)) ? ((endTime - startTime) / 1000) : undefined;\n+    }\n+\n+    /**\n+     * This method collect the data event for telemetry purpose, apply basic validation\n+     * and delegate the reporter service to sent them to the target telemetry server\n+     * @param eventName name assigned for the event for the telemetry\n+     * @param categories optional list of keywords (act as tags)\n+     * @param notes optional brief description\n+     * @param telemetryMeasurement optional set of numeric data with a key name\n+     */\n+    public static registerEvent(eventName: string, categories?: string[], notes?: string, telemetryMeasurement?: Map<string, number>) {\n+        if (!this.isValidEventName(eventName)) {\n+            return;\n+        }\n+        TelemetryFactory.getReporter().reportEvent(this.createTelemetryEvent(eventName, categories, notes, undefined, telemetryMeasurement));\n+\n+    }\n+\n+    /**\n+     * This method collect the exception data event for telemetry purpose, apply basic validation\n+     * and delegate the reporter service to sent them to the target telemetry server\n+     * @param eventName name assigned for the event for the telemetry\n+     * @param rootCause the stacktrace attached for debugging purpose.\n+     * @param categories optional list of keywords (act as tags)\n+     * @param notes optional brief description\n+     * @param telemetryMeasurement optional set of numeric data with a key name\n+     */\n+    public static registerExceptionEvent(eventName = \"RuntimeException\", rootCause: string, categories?: string[], notes?: string, telemetryMeasurement?: Map<string, number>) {\n+        if (!(this.isValidEventName(eventName) && this.isValidRootCause(rootCause))) {\n+            return;\n+        }\n+\n+        TelemetryFactory.getReporter().reportExceptionEvent(this.createTelemetryEvent(eventName, categories, notes, this.anonymizeContent(rootCause), telemetryMeasurement));\n+    }\n+\n+    private static isValidEventName(eventName: string): boolean {\n+        return eventName !== undefined && eventName.trim() !== \"\";\n+    }\n+\n+    private static createTelemetryEvent(eventName: string, categories: string[], notes: string, rootCause?: string, telemetryMeasurement?: Map<string, number>) {\n+        const telemetryEvent = new TelemetryEvent();\n+        telemetryEvent.setEventName(eventName);\n+        telemetryEvent.setCategories(this.resolveCategories(categories));\n+        telemetryEvent.setNotes(notes);\n+        telemetryEvent.setRootCause(rootCause);\n+        telemetryEvent.setMeasurements(telemetryMeasurement);\n+\n+        return telemetryEvent;\n+    }\n+\n+    private static resolveCategories(categories: string[]): string {\n+        return (categories) ? categories.toString() : \"N.D\";\n+    }\n+\n+    private static isValidRootCause(rootCause: string): boolean {\n+        return rootCause !== undefined && rootCause.trim() !== \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d879ce7d5d8912b2bb3079cf841dba7a9cfd2"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MDI1NQ==", "bodyText": "I would suggest to redesign this private fields. In TS private fields usage is a bit different than Java. Another alternative is via constructor(public, .. ).  Thanks", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r486960255", "createdAt": "2020-09-11T10:36:24Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/services/reporter/model/TelemetryEvent.ts", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+export class TelemetryEvent {\n+    private readonly timestamp: string;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d879ce7d5d8912b2bb3079cf841dba7a9cfd2"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NDM5NzM4", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#pullrequestreview-488439738", "createdAt": "2020-09-15T08:20:18Z", "commit": {"oid": "326444b872e9b065970229cc419570cb7acfdc72"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODoyMDoxOFrOHR2UfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODozNTo0OVrOHR28Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ3NzgyMA==", "bodyText": "Extra space on similar  Usage Data", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r488477820", "createdAt": "2020-09-15T08:20:18Z", "author": {"login": "temanbrcom"}, "path": "README.md", "diffHunk": "@@ -129,3 +129,24 @@ The Find All References and Go To Definition functionalities are extended to wor\n * Inbuilt protection against recursive and missing copybooks. If the copybook is missing or contains looping code, an error displays, preventing issues only being discovered when the code is executed.  \n * Variables and paragraphs are defined across copybooks. This ensures consistency of code, and prevents issues in error diagnostics caused by incorrect variables or paragraphs in code. \n * Functionality to skip variable levels when called, reducing call time.\n+\n+### Privacy Notice\n+The extensions for Visual Studio Code developed by Broadcom Inc., including its corporate affiliates and subsidiaries, (\"Broadcom\") are provided free of charge, but in order to better understand and meet its users\u2019 needs, Broadcom may collect, use, analyze and retain anonymous users\u2019 metadata and interaction data, (collectively, \u201cUsage Data\u201d) and aggregate such Usage Data with similar  Usage Data of other Broadcom customers. Please, find more detailed information in License and Service Terms & Repository.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326444b872e9b065970229cc419570cb7acfdc72"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ4NjI2OQ==", "bodyText": "Seems like here should be something like \"The user hovers a missed copybook\"", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r488486269", "createdAt": "2020-09-15T08:33:02Z", "author": {"login": "temanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/services/CopybooksCodeActionProvider.ts", "diffHunk": "@@ -24,12 +25,14 @@ export class CopybooksCodeActionProvider implements vscode.CodeActionProvider {\n         if (!this.shouldHaveCodeAction(context)) {\n             return [];\n         }\n+        // Telemetry should be collected only if shouldHaveCodeAction is true\n+        TelemetryService.registerEvent(\"QuickFix for copybook activation\", [\"COBOL\", \"hover\", \"copybook\", \"quickfix\"], \"User hover a miss copybook\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkzMTU2Mw=="}, "originalCommit": {"oid": "967d879ce7d5d8912b2bb3079cf841dba7a9cfd2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ4NzQ1Mw==", "bodyText": "The user invokes the open settings quick fix to see the copybook locations stored in the settings file", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r488487453", "createdAt": "2020-09-15T08:34:58Z", "author": {"login": "temanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/commands/OpenSettingsCommand.ts", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+import * as vscode from \"vscode\";\n+import {TelemetryService} from \"../services/reporter/TelemetryService\";\n+\n+export function gotoCopybookSettings(): void {\n+    TelemetryService.registerEvent(\"open settings\", [\"COBOL\", \"copybook\", \"settings\"], \"User invoke the open settings quickfix to saw the copybook locations stored in settings file config.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326444b872e9b065970229cc419570cb7acfdc72"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ4Nzk5OQ==", "bodyText": "The user tries to resolve a copybook that is not currently found", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r488487999", "createdAt": "2020-09-15T08:35:49Z", "author": {"login": "temanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/commands/FetchCopybookCommand.ts", "diffHunk": "@@ -12,7 +12,9 @@\n  *   Broadcom, Inc. - initial API and implementation\n  */\n import {CopybookDownloadService} from \"../services/CopybookDownloadService\";\n+import {TelemetryService} from \"../services/reporter/TelemetryService\";\n \n export function fetchCopybookCommand(copybook: string, downloader: CopybookDownloadService, programName: string) {\n+    TelemetryService.registerEvent(\"Fetch copybook\", [\"COBOL\", \"copybook\", \"quickfix\"], \"User try to resolve a copybook that is not currently found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326444b872e9b065970229cc419570cb7acfdc72"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NDcyNjA4", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#pullrequestreview-488472608", "createdAt": "2020-09-15T08:59:42Z", "commit": {"oid": "13649344ad3d6ce05ad099a1e7ec815cc1270704"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODo1OTo0MlrOHR340w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODo1OTo0MlrOHR340w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwMzUwNw==", "bodyText": "Please find more detailed information in License and Service Terms & Repository.\n\nIn where? Is this supposed to say \"in the license file in the repository\"?\nCan we just link to where the user can find more info?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r488503507", "createdAt": "2020-09-15T08:59:42Z", "author": {"login": "zeibura"}, "path": "README.md", "diffHunk": "@@ -129,3 +129,24 @@ The Find All References and Go To Definition functionalities are extended to wor\n * Inbuilt protection against recursive and missing copybooks. If the copybook is missing or contains looping code, an error displays, preventing issues only being discovered when the code is executed.  \n * Variables and paragraphs are defined across copybooks. This ensures consistency of code, and prevents issues in error diagnostics caused by incorrect variables or paragraphs in code. \n * Functionality to skip variable levels when called, reducing call time.\n+\n+### Privacy Notice\n+The extensions for Visual Studio Code developed by Broadcom Inc., including its corporate affiliates and subsidiaries, (\"Broadcom\") are provided free of charge, but in order to better understand and meet its users\u2019 needs, Broadcom may collect, use, analyze and retain anonymous user metadata and interaction data, (collectively, \u201cUsage Data\u201d) and aggregate such Usage Data with similar Usage Data of other Broadcom customers. Please find more detailed information in License and Service Terms & Repository.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13649344ad3d6ce05ad099a1e7ec815cc1270704"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NTMzNDY4", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#pullrequestreview-488533468", "createdAt": "2020-09-15T10:14:48Z", "commit": {"oid": "13649344ad3d6ce05ad099a1e7ec815cc1270704"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NTc3ODM2", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#pullrequestreview-488577836", "createdAt": "2020-09-15T11:17:34Z", "commit": {"oid": "13649344ad3d6ce05ad099a1e7ec815cc1270704"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NTQ0NDAx", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#pullrequestreview-488544401", "createdAt": "2020-09-15T10:30:22Z", "commit": {"oid": "13649344ad3d6ce05ad099a1e7ec815cc1270704"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDozMDoyMlrOHR7U0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTowNjo0NFrOHR8heQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU1OTgyNw==", "bodyText": "You miss sep between USERNAME and \"folder1\". It will be good to use here something like this:\nconst FAKE_ROOT_PATH = path.join(\"C:\", \"Users\", USERNAME, \"folder1\", \"folder2\", \"folder3\");", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r488559827", "createdAt": "2020-09-15T10:30:22Z", "author": {"login": "grianbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/TelemetryServiceTest.spec.ts", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+import * as path from \"path\";\n+import {sep} from \"path\";\n+import TelemetryReporter from \"vscode-extension-telemetry\";\n+import {TelemetryReporterImpl} from \"../services/reporter/TelemetryReporterImpl\";\n+import {TelemetryService} from \"../services/reporter/TelemetryService\";\n+import {ExtensionUtils} from \"../services/settings/util/ExtensionUtils\";\n+\n+const USERNAME: string = \"usernameToAnonymize\";\n+const FAKE_ROOT_PATH = \"C:\" + sep + \"Users\" + sep + USERNAME + \"folder1\" + sep + \"folder2\" + sep + \"folder3\" + sep;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13649344ad3d6ce05ad099a1e7ec815cc1270704"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU2MTc2OQ==", "bodyText": "You've already mocked the telemetry extension on line 26. One line can be deleted.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r488561769", "createdAt": "2020-09-15T10:33:55Z", "author": {"login": "grianbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/TelemetryServiceTest.spec.ts", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+import * as path from \"path\";\n+import {sep} from \"path\";\n+import TelemetryReporter from \"vscode-extension-telemetry\";\n+import {TelemetryReporterImpl} from \"../services/reporter/TelemetryReporterImpl\";\n+import {TelemetryService} from \"../services/reporter/TelemetryService\";\n+import {ExtensionUtils} from \"../services/settings/util/ExtensionUtils\";\n+\n+const USERNAME: string = \"usernameToAnonymize\";\n+const FAKE_ROOT_PATH = \"C:\" + sep + \"Users\" + sep + USERNAME + \"folder1\" + sep + \"folder2\" + sep + \"folder3\" + sep;\n+let spySendTelemetry;\n+let spySendExceptionTelemetry;\n+jest.mock(\"vscode-extension-telemetry\");\n+\n+function runScenario(expectedNumberOfCalls, type: string, eventName?: string, categories?: string[], rootCause?: string, telemetryMeasurements?: Map<string, number>) {\n+    if (type === \"log\") {\n+        TelemetryService.registerEvent(eventName, categories, undefined, telemetryMeasurements);\n+        expect(spySendTelemetry).toBeCalledTimes(expectedNumberOfCalls);\n+    } else {\n+        TelemetryService.registerExceptionEvent(eventName, rootCause, categories);\n+        expect(spySendExceptionTelemetry).toBeCalledTimes(expectedNumberOfCalls);\n+    }\n+}\n+\n+function setupScenario() {\n+    ExtensionUtils.getIDEName = jest.fn().mockReturnValue(\"testingIde\");\n+    ExtensionUtils.getPackageVersion = jest.fn().mockReturnValue(\"1.0\");\n+    (TelemetryReporterImpl as any).getTelemetryKeyId = jest.fn().mockReturnValue(\"key_id_for_testing_purposes\");\n+    (TelemetryService as any).getUsername = jest.fn().mockReturnValue(USERNAME);\n+    jest.mock(\"vscode-extension-telemetry\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13649344ad3d6ce05ad099a1e7ec815cc1270704"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3Mjg0Mg==", "bodyText": "You can delete \"broadcom-cobol-lsp\" argument here because the command doesn't use arguments.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r488572842", "createdAt": "2020-09-15T10:54:15Z", "author": {"login": "grianbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/services/CopybookFix.ts", "diffHunk": "@@ -32,7 +32,7 @@ export class CopybookFix {\n         const actionSettings = \"Change settings\";\n         const action = await vscode.window.showErrorMessage(title, actionSettings);\n         if (action === actionSettings) {\n-            vscode.commands.executeCommand(\"workbench.action.openSettings\", \"broadcom-cobol-lsp\");\n+            vscode.commands.executeCommand(\"broadcom-cobol-lsp.cpy-manager.goto-settings\", \"broadcom-cobol-lsp\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13649344ad3d6ce05ad099a1e7ec815cc1270704"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NzQ5Ng==", "bodyText": "Typo: convertData.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r488577496", "createdAt": "2020-09-15T11:02:57Z", "author": {"login": "grianbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/services/reporter/TelemetryReporterImpl.ts", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+import * as fs from \"fs\";\n+import * as path from \"path\";\n+import * as vscode from \"vscode\";\n+import TelemetryReporter from \"vscode-extension-telemetry\";\n+import {EXTENSION_ID, TELEMETRY_DEFAULT_CONTENT} from \"../../constants\";\n+import {ExtensionUtils} from \"../settings/util/ExtensionUtils\";\n+import {TelemetryEvent} from \"./model/TelemetryEvent\";\n+import {TelemetryMeasurement} from \"./model/TelemetryMeasurement\";\n+import {TelemetryReport} from \"./TelemetryReport\";\n+\n+export class TelemetryReporterImpl implements TelemetryReport {\n+    public static getInstance(): TelemetryReporterImpl {\n+        if (!TelemetryReporterImpl.instance) {\n+            TelemetryReporterImpl.instance = new TelemetryReporterImpl(this.getTelemetryKeyId());\n+        }\n+        return TelemetryReporterImpl.instance;\n+    }\n+\n+    private static instance: TelemetryReporterImpl;\n+\n+    /**\n+     * This method return the value of the instrumentation key necessary to create the telemetry reporter from an\n+     * external file configuration. If the file doesn't exists it returns a generic value that will not be valid\n+     * for collect telemetry event.\n+     */\n+    private static getTelemetryKeyId(): string {\n+        return fs.existsSync(this.getTelemetryResourcePath()) ? this.getInstrumentationKey() : TELEMETRY_DEFAULT_CONTENT;\n+    }\n+\n+    private static getTelemetryResourcePath() {\n+        return vscode.Uri.file(\n+            path.join(ExtensionUtils.getExtensionPath(), \"resources\", \"TELEMETRY_KEY\")).fsPath;\n+    }\n+\n+    private static getInstrumentationKey(): string {\n+        return Buffer.from(fs.readFileSync(this.getTelemetryResourcePath(), \"utf8\"), \"base64\").toString().trim();\n+    }\n+\n+    private static covertData(content: TelemetryEvent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13649344ad3d6ce05ad099a1e7ec815cc1270704"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3Nzg1Mw==", "bodyText": "Why do you need that lazy initialization?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r488577853", "createdAt": "2020-09-15T11:03:43Z", "author": {"login": "grianbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/services/reporter/TelemetryReporterImpl.ts", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+import * as fs from \"fs\";\n+import * as path from \"path\";\n+import * as vscode from \"vscode\";\n+import TelemetryReporter from \"vscode-extension-telemetry\";\n+import {EXTENSION_ID, TELEMETRY_DEFAULT_CONTENT} from \"../../constants\";\n+import {ExtensionUtils} from \"../settings/util/ExtensionUtils\";\n+import {TelemetryEvent} from \"./model/TelemetryEvent\";\n+import {TelemetryMeasurement} from \"./model/TelemetryMeasurement\";\n+import {TelemetryReport} from \"./TelemetryReport\";\n+\n+export class TelemetryReporterImpl implements TelemetryReport {\n+    public static getInstance(): TelemetryReporterImpl {\n+        if (!TelemetryReporterImpl.instance) {\n+            TelemetryReporterImpl.instance = new TelemetryReporterImpl(this.getTelemetryKeyId());\n+        }\n+        return TelemetryReporterImpl.instance;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13649344ad3d6ce05ad099a1e7ec815cc1270704"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3OTQ0OQ==", "bodyText": "You could also use casting if you would like to:\n    private static convertMeasurements(content: Map<string, number>): TelemetryMeasurement {\n        return content as unknown as TelemetryMeasurement;\n    }", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r488579449", "createdAt": "2020-09-15T11:06:44Z", "author": {"login": "grianbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/services/reporter/TelemetryReporterImpl.ts", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+import * as fs from \"fs\";\n+import * as path from \"path\";\n+import * as vscode from \"vscode\";\n+import TelemetryReporter from \"vscode-extension-telemetry\";\n+import {EXTENSION_ID, TELEMETRY_DEFAULT_CONTENT} from \"../../constants\";\n+import {ExtensionUtils} from \"../settings/util/ExtensionUtils\";\n+import {TelemetryEvent} from \"./model/TelemetryEvent\";\n+import {TelemetryMeasurement} from \"./model/TelemetryMeasurement\";\n+import {TelemetryReport} from \"./TelemetryReport\";\n+\n+export class TelemetryReporterImpl implements TelemetryReport {\n+    public static getInstance(): TelemetryReporterImpl {\n+        if (!TelemetryReporterImpl.instance) {\n+            TelemetryReporterImpl.instance = new TelemetryReporterImpl(this.getTelemetryKeyId());\n+        }\n+        return TelemetryReporterImpl.instance;\n+    }\n+\n+    private static instance: TelemetryReporterImpl;\n+\n+    /**\n+     * This method return the value of the instrumentation key necessary to create the telemetry reporter from an\n+     * external file configuration. If the file doesn't exists it returns a generic value that will not be valid\n+     * for collect telemetry event.\n+     */\n+    private static getTelemetryKeyId(): string {\n+        return fs.existsSync(this.getTelemetryResourcePath()) ? this.getInstrumentationKey() : TELEMETRY_DEFAULT_CONTENT;\n+    }\n+\n+    private static getTelemetryResourcePath() {\n+        return vscode.Uri.file(\n+            path.join(ExtensionUtils.getExtensionPath(), \"resources\", \"TELEMETRY_KEY\")).fsPath;\n+    }\n+\n+    private static getInstrumentationKey(): string {\n+        return Buffer.from(fs.readFileSync(this.getTelemetryResourcePath(), \"utf8\").replace(/(\\r\\n|\\n|\\r)/gm, \"\"), \"base64\").toString();\n+    }\n+\n+    private static covertData(content: TelemetryEvent) {\n+        return {\n+            categories: content.getCategories().toString(),\n+            event: content.getEventName(),\n+            IDE: ExtensionUtils.getIDEName(),\n+            notes: content.getNotes(),\n+            timestamp: content.getTimestamp(),\n+            rootCause: content.getRootCause(),\n+        };\n+    }\n+\n+    private static convertMeasurements(content: Map<string, number>): TelemetryMeasurement {\n+        if (!content) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk0MjcxNA=="}, "originalCommit": {"oid": "967d879ce7d5d8912b2bb3079cf841dba7a9cfd2"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NTg2Njgy", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#pullrequestreview-488586682", "createdAt": "2020-09-15T11:30:11Z", "commit": {"oid": "13649344ad3d6ce05ad099a1e7ec815cc1270704"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTozMDoxMlrOHR9TaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTozMDoxMlrOHR9TaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5MjIzMw==", "bodyText": "Command name and title don't match.\nThe command named with cpy-manager part, but in OpenSettingsCommand workbench.action.openSettings executed with only broadcom-cobol-lsp as a parameter.\nI see two options:\n\nchange the title to \"Open plugin settings\" and command to \"broadcom-cobol-lsp.goto-settings\"\nchange filtering string in OpenSettingsCommand to \"broadcom-cobol-lsp.cpy-manager\".", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r488592233", "createdAt": "2020-09-15T11:30:12Z", "author": {"login": "grianbrcom"}, "path": "clients/cobol-lsp-vscode-extension/package.json", "diffHunk": "@@ -52,6 +52,10 @@\n             {\n                 \"command\": \"broadcom-cobol-lsp.cpy-manager.edit-dataset-paths\",\n                 \"title\": \"Edit dataset paths\"\n+            },\n+            {\n+                \"command\": \"broadcom-cobol-lsp.cpy-manager.goto-settings\",\n+                \"title\": \"Open Copybook location settings\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13649344ad3d6ce05ad099a1e7ec815cc1270704"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NjI3NzYx", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#pullrequestreview-489627761", "createdAt": "2020-09-16T13:31:34Z", "commit": {"oid": "73faa1964afcacde8a96a12aa7c399a116dc3495"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NjgwMzA2", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#pullrequestreview-489680306", "createdAt": "2020-09-16T14:23:55Z", "commit": {"oid": "cc439cbe817a195c797862ff718dcee5edf61525"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMzA1ODAw", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#pullrequestreview-490305800", "createdAt": "2020-09-17T07:16:18Z", "commit": {"oid": "cc439cbe817a195c797862ff718dcee5edf61525"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzoxNjoxOFrOHTUl7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzoxNjoxOFrOHTUl7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAyMjM4MA==", "bodyText": "@zacanbrcom I believe this should be ||. It can't be null and undefined at the same time.\nreturn content !== null || content !== undefined;", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r490022380", "createdAt": "2020-09-17T07:16:18Z", "author": {"login": "asatklichov"}, "path": "clients/cobol-lsp-vscode-extension/src/services/util/Utils.ts", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+/**\n+ * This class collect utility methods for general purpose activities\n+ */\n+export class Utils {\n+    /**\n+     * This method provide a quick way to assure that a string is not null or undefined.\n+     * The idea is to have something similar to the util library {@link node.isNullOrUndefined} that is deprecated.\n+     * @param content the string value target of the validation\n+     * @return true if the content is not null or undefined, false otherwise\n+     */\n+    public static isNotNullOrUndefined(content: string): boolean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc439cbe817a195c797862ff718dcee5edf61525"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNDU1MTg4", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#pullrequestreview-490455188", "createdAt": "2020-09-17T10:27:51Z", "commit": {"oid": "95237f5da83e506579e2eed088ebe29c8b70660b"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDoyNzo1MlrOHTbqQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDozMzoxN1rOHTb1hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEzODE3Nw==", "bodyText": "You can clear all mocks after the tests. There is no need to do it before.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r490138177", "createdAt": "2020-09-17T10:27:52Z", "author": {"login": "grianbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/__tests__/TelemetryServiceTest.spec.ts", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Broadcom, Inc. - initial API and implementation\n+ */\n+\n+import * as path from \"path\";\n+import TelemetryReporter from \"vscode-extension-telemetry\";\n+import {TelemetryService} from \"../services/reporter/TelemetryService\";\n+import {TelemetryReporterImpl} from \"../services/reporter/TelemetryReporterImpl\";\n+\n+const USERNAME: string = \"usernameToAnonymize\";\n+const FAKE_ROOT_PATH: string = path.join(\"C:\", \"Users\", USERNAME, \"folder1\", \"folder2\", \"folder3\");\n+let spySendTelemetry;\n+let spySendExceptionTelemetry;\n+jest.mock(\"vscode-extension-telemetry\");\n+jest.mock(\"../services/util/ExtensionUtils\");\n+\n+function runScenario(expectedNumberOfCalls, eventType: string, eventName?: string, categories?: string[], rootCause?: string, telemetryMeasurements?: Map<string, number>) {\n+    if (eventType === \"log\") {\n+        TelemetryService.registerEvent(eventName, categories, undefined, telemetryMeasurements);\n+        expect(spySendTelemetry).toBeCalledTimes(expectedNumberOfCalls);\n+    } else {\n+        TelemetryService.registerExceptionEvent(eventName, rootCause, categories);\n+        expect(spySendExceptionTelemetry).toBeCalledTimes(expectedNumberOfCalls);\n+    }\n+}\n+\n+function setupScenario() {\n+    (TelemetryReporterImpl as any).getTelemetryKeyId = jest.fn().mockReturnValue(\"key_id_for_testing_purposes\");\n+    (TelemetryService as any).getUsername = jest.fn().mockReturnValue(USERNAME);\n+    spySendTelemetry = jest.spyOn(TelemetryReporter.prototype, \"sendTelemetryEvent\");\n+    spySendExceptionTelemetry = jest.spyOn(TelemetryReporter.prototype, \"sendTelemetryErrorEvent\");\n+}\n+\n+describe(\"TelemetryService information are consistent before send them to the telemetry server\", () => {\n+    beforeEach(() => {\n+        jest.clearAllMocks();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95237f5da83e506579e2eed088ebe29c8b70660b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0MTA2MA==", "bodyText": "You don't have params for this command. You can call it this way:\nvscode.commands.executeCommand(\"broadcom-cobol-lsp.cpy-manager.goto-settings\");", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/515#discussion_r490141060", "createdAt": "2020-09-17T10:33:17Z", "author": {"login": "grianbrcom"}, "path": "clients/cobol-lsp-vscode-extension/src/services/copybook/CopybookFix.ts", "diffHunk": "@@ -32,7 +32,7 @@ export class CopybookFix {\n         const actionSettings = \"Change settings\";\n         const action = await vscode.window.showErrorMessage(title, actionSettings);\n         if (action === actionSettings) {\n-            vscode.commands.executeCommand(\"workbench.action.openSettings\", \"broadcom-cobol-lsp\");\n+            vscode.commands.executeCommand(\"broadcom-cobol-lsp.cpy-manager.goto-settings\", \"cpy-manager\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95237f5da83e506579e2eed088ebe29c8b70660b"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e5fc6dde82400e300b4236cf17b65d7f5256b810", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/e5fc6dde82400e300b4236cf17b65d7f5256b810", "committedDate": "2020-09-18T12:26:58Z", "message": "fix: create temp file for handle telemetry key for testing purposes"}, "afterCommit": {"oid": "3dc7be45698c797127c57ffa72cbe0b645bbb17e", "author": {"user": {"login": "temanbrcom", "name": "Andrei Temnikov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/3dc7be45698c797127c57ffa72cbe0b645bbb17e", "committedDate": "2020-09-21T09:04:43Z", "message": "refactor: Invert utils method logic to clarify API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f3f407b7eed1357dc34643d593757eafa0d7643", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/4f3f407b7eed1357dc34643d593757eafa0d7643", "committedDate": "2020-09-21T09:07:58Z", "message": "feat: introduce telemetry event recording GH-472"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61bedcdecdc8cbbb6ced8ef49c419354d672475e", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/61bedcdecdc8cbbb6ced8ef49c419354d672475e", "committedDate": "2020-09-21T09:08:08Z", "message": "Merge branch 'development' into 472_telemetry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "930af1460f7660eb1437329b486fae35c5fc94c6", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/930af1460f7660eb1437329b486fae35c5fc94c6", "committedDate": "2020-09-21T09:08:09Z", "message": "refactor: introduce telemetry event recording with telemetry key in resource folder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7df812f53e4f8848645e3c73014119bcf09e157c", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/7df812f53e4f8848645e3c73014119bcf09e157c", "committedDate": "2020-09-21T09:08:23Z", "message": "refactor: add telemetry for quickfix and minor telemetry API changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cfebb90d0197b76f36e07576655ff2ae16a973c", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/5cfebb90d0197b76f36e07576655ff2ae16a973c", "committedDate": "2020-09-21T09:08:34Z", "message": "refactor: telemetry API changes to send custom measuraments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c2c0b72729dd88d07f5d1ca5b49cd34684efe7f", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/9c2c0b72729dd88d07f5d1ca5b49cd34684efe7f", "committedDate": "2020-09-21T09:08:42Z", "message": "refactor: telemetry API changes to avoid unnecessary event duplication"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cf2c450b82a79bcfe88c9583f50f1186cd3f5e8", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/7cf2c450b82a79bcfe88c9583f50f1186cd3f5e8", "committedDate": "2020-09-21T09:08:42Z", "message": "Merge remote-tracking branch 'remotes/origin/development' into 472_telemetry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d78438ae64698e738a6e6b84b2c557af88f64d7d", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/d78438ae64698e738a6e6b84b2c557af88f64d7d", "committedDate": "2020-09-21T09:08:43Z", "message": "refactor: remove not necessary log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e247ace5896e846de23203a8e60dfb7a543897ed", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/e247ace5896e846de23203a8e60dfb7a543897ed", "committedDate": "2020-09-21T09:08:43Z", "message": "refactor: getInstrumentationKey decode in base 64 the value retrived from flat file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f8343fa3f808bb1e3be98700e48e73e01b53b23", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/2f8343fa3f808bb1e3be98700e48e73e01b53b23", "committedDate": "2020-09-21T09:08:43Z", "message": "refactor: modify Jenkinsfile to encode telemetry key and push its value to flat file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e97c8abd223ed315bea6b93704ff54658eaccaca", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/e97c8abd223ed315bea6b93704ff54658eaccaca", "committedDate": "2020-09-21T09:08:43Z", "message": "test: clean mocks before start each test in ExtensionUtils.spec.ts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77357721604569f8650b4db4d0e953529712569f", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/77357721604569f8650b4db4d0e953529712569f", "committedDate": "2020-09-21T09:08:43Z", "message": "refactor: generate cross platform example path for anonymize username in ExtensionUtils.spec.ts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3dc7be45698c797127c57ffa72cbe0b645bbb17e", "author": {"user": {"login": "temanbrcom", "name": "Andrei Temnikov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/3dc7be45698c797127c57ffa72cbe0b645bbb17e", "committedDate": "2020-09-21T09:04:43Z", "message": "refactor: Invert utils method logic to clarify API"}, "afterCommit": {"oid": "0e3a551e33f65775c50ee0a13510f98ed1aa011d", "author": {"user": {"login": "temanbrcom", "name": "Andrei Temnikov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/0e3a551e33f65775c50ee0a13510f98ed1aa011d", "committedDate": "2020-09-21T09:11:01Z", "message": "refactor: Invert utils method logic to clarify API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2e7a071b59d4997fb832b6262c71a0994744ec3", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/a2e7a071b59d4997fb832b6262c71a0994744ec3", "committedDate": "2020-09-21T09:20:48Z", "message": "test: mock getUsername function in TelemetryServiceTest.spec.ts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25ad5e12b772a2ae6eb7c320f9ba1c7a5bd5b37d", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/25ad5e12b772a2ae6eb7c320f9ba1c7a5bd5b37d", "committedDate": "2020-09-21T09:20:57Z", "message": "Merge remote-tracking branch 'remotes/origin/development' into 472_telemetry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6d9ecd1157b9c6e6b1d143f91673393fc453e1c", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/f6d9ecd1157b9c6e6b1d143f91673393fc453e1c", "committedDate": "2020-09-21T09:20:57Z", "message": "ci: Add stage for telemtry key generation on build GH-472"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e2f5bab9a0cead6045112c678d05100abe8e5a4", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/6e2f5bab9a0cead6045112c678d05100abe8e5a4", "committedDate": "2020-09-21T09:20:57Z", "message": "refactor: minor changes in API and linting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da7fd58db3441f73dfa2a4b01b434d64c10646ba", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/da7fd58db3441f73dfa2a4b01b434d64c10646ba", "committedDate": "2020-09-21T09:20:57Z", "message": "refactor: minor changes in API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ced6465c224b805310a82a1ccde5321a12870bf9", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/ced6465c224b805310a82a1ccde5321a12870bf9", "committedDate": "2020-09-21T09:20:58Z", "message": "refactor: Collect telemetry event using Microsoft Telemetry Extension API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e792b5edf57b5e8d30c29da91e0bc3381d4bd130", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/e792b5edf57b5e8d30c29da91e0bc3381d4bd130", "committedDate": "2020-09-21T09:20:58Z", "message": "Merge branch 'development' into 472-Telemetry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e71af72328bc30cbc8625634e2d16f605a1f07b5", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/e71af72328bc30cbc8625634e2d16f605a1f07b5", "committedDate": "2020-09-21T09:20:58Z", "message": "refactor: decrypt telemetry key"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "087c8fdee1e78fc809b4e91ba78ba73508afeac2", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/087c8fdee1e78fc809b4e91ba78ba73508afeac2", "committedDate": "2020-09-21T09:20:59Z", "message": "Merge branch 'development' into 472-Telemetry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "039bc57cc7d4f62cec4e7099ad50f5bc433c3cf8", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/039bc57cc7d4f62cec4e7099ad50f5bc433c3cf8", "committedDate": "2020-09-21T09:20:59Z", "message": "doc: introduce privacy notice section"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "839314c4e51c594e0e57c20905589e727cdeca10", "author": {"user": {"login": "zeibura", "name": "Zeibura Kathau"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/839314c4e51c594e0e57c20905589e727cdeca10", "committedDate": "2020-09-21T09:20:59Z", "message": "doc: Edit privacy notes section\n\nSigned-off-by: Zeibura Kathau <zeibura.kathau@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5de305bb27c9a39409991eed84a53390a8a91c82", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/5de305bb27c9a39409991eed84a53390a8a91c82", "committedDate": "2020-09-21T09:21:04Z", "message": "refactor: apply request of change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12574c96981fa57c1a1ee6b1f940b55e88a62e87", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/12574c96981fa57c1a1ee6b1f940b55e88a62e87", "committedDate": "2020-09-21T09:21:04Z", "message": "Merge remote-tracking branch 'remotes/origin/development' into 472-Telemetry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bf315fcfc9a481b453de330d2ab623700a4a19b", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/0bf315fcfc9a481b453de330d2ab623700a4a19b", "committedDate": "2020-09-21T09:21:04Z", "message": "refactor: apply request of change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56b78108230b5ce76ca5f2fcfe76f951d9d83842", "author": {"user": {"login": "temanbrcom", "name": "Andrei Temnikov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/56b78108230b5ce76ca5f2fcfe76f951d9d83842", "committedDate": "2020-09-21T09:23:40Z", "message": "Merge remote-tracking branch 'origin/472-Telemetry' into 472-Telemetry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cf680edc8e586a9936b7b99d5aba6f1252487a5", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/8cf680edc8e586a9936b7b99d5aba6f1252487a5", "committedDate": "2020-09-21T09:23:58Z", "message": "refactor: apply request of change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "453553e647dbb0694a10372d8a8cbf6923d00a12", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/453553e647dbb0694a10372d8a8cbf6923d00a12", "committedDate": "2020-09-21T09:23:59Z", "message": "Merge remote-tracking branch 'origin/development' into 472-Telemetry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8962552afbcd9687dee9beccabfa3baada9b4145", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/8962552afbcd9687dee9beccabfa3baada9b4145", "committedDate": "2020-09-21T09:23:59Z", "message": "refactor: apply request of change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6bccd692a795396c72be78b1a5d31925b94e011", "author": {"user": {"login": "zeibura", "name": "Zeibura Kathau"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/c6bccd692a795396c72be78b1a5d31925b94e011", "committedDate": "2020-09-21T09:23:59Z", "message": "get rid off comma after \"please\"\n\nSigned-off-by: Zeibura Kathau <zeibura.kathau@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b2a7f5c5f8cbbbdf8215abbb2577e84ad30107e", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/3b2a7f5c5f8cbbbdf8215abbb2577e84ad30107e", "committedDate": "2020-09-21T09:23:59Z", "message": "Merge remote-tracking branch 'origin/development' into 472-Telemetry\n\nrefactor: apply request of change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88faeb7acd507b65e5694e2fb0a9bc0caf95e8b6", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/88faeb7acd507b65e5694e2fb0a9bc0caf95e8b6", "committedDate": "2020-09-21T09:24:00Z", "message": "refactor: apply request of change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9e4c1509770f1e7aea1bace5facb7d1c2b76ace", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/c9e4c1509770f1e7aea1bace5facb7d1c2b76ace", "committedDate": "2020-09-21T09:24:00Z", "message": "Merge remote-tracking branch 'origin/development' into 472-Telemetry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f04e7fc68bdc9cc5ba443997a83a585c536ee04f", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/f04e7fc68bdc9cc5ba443997a83a585c536ee04f", "committedDate": "2020-09-21T09:24:00Z", "message": "refactor: update TELEMETRY_KEY with default encoding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9620eb156bbd0a664751c59e3d41869e6ff1ded7", "author": {"user": {"login": "zacanbrcom", "name": "Andrea Zaccaro"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/9620eb156bbd0a664751c59e3d41869e6ff1ded7", "committedDate": "2020-09-21T09:24:00Z", "message": "fix: create temp file for handle telemetry key for testing purposes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec9f1eedf1e5a296c37dd37bda91dd41fe0c08a7", "author": {"user": {"login": "temanbrcom", "name": "Andrei Temnikov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/ec9f1eedf1e5a296c37dd37bda91dd41fe0c08a7", "committedDate": "2020-09-21T09:24:01Z", "message": "refactor: Invert utils method logic to clarify API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0e3a551e33f65775c50ee0a13510f98ed1aa011d", "author": {"user": {"login": "temanbrcom", "name": "Andrei Temnikov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/0e3a551e33f65775c50ee0a13510f98ed1aa011d", "committedDate": "2020-09-21T09:11:01Z", "message": "refactor: Invert utils method logic to clarify API"}, "afterCommit": {"oid": "ec9f1eedf1e5a296c37dd37bda91dd41fe0c08a7", "author": {"user": {"login": "temanbrcom", "name": "Andrei Temnikov"}}, "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/ec9f1eedf1e5a296c37dd37bda91dd41fe0c08a7", "committedDate": "2020-09-21T09:24:01Z", "message": "refactor: Invert utils method logic to clarify API"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1018, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}