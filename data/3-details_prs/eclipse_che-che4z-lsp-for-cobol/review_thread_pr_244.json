{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NzA4OTQ1", "number": 244, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwODowMjowNFrODnXVlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwODowMjowNFrODnXVlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjAzNDEzOnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/preprocessor/sub/document/impl/CobolSemanticParserListenerImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwODowMjowNFrOF1UYGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwODowNjo0OVrOF1UfDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1MjY5OQ==", "bodyText": "I saw that this routine is very similar as the method toSyntaxError()\nI think is a good idea try to define a more general function and call it two times or even better delegate this responsibility to an appropriate class and made it more general and available for all the core and service module", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/244#discussion_r391452699", "createdAt": "2020-03-12T08:02:04Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/preprocessor/sub/document/impl/CobolSemanticParserListenerImpl.java", "diffHunk": "@@ -134,9 +136,21 @@ public void exitCopyStatement(@Nonnull CopyStatementContext ctx) {\n     String copybookName = retrieveCopybookName(copySource);\n     Position position = retrievePosition(copySource);\n     defineCopybook(copybookName, position);\n+    checkCopybookNameLength(copybookName, position);\n     this.preprocessorCleanerService.excludeStatementFromText(ctx, COMMENT_TAG, tokens);\n   }\n \n+  private void checkCopybookNameLength(String copybookName, Position position) {\n+    if (copybookName != null && copybookName.length() > 8) {\n+      errors.add(\n+          SyntaxError.syntaxError()\n+              .severity(3)\n+              .suggestion(String.format(COPYBOOK_OVER_8_CHARACTERS, copybookName))\n+              .position(position)\n+              .build());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "466e8764a13bf38b601f9f96b44688b2253542e6"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1MzkyMA==", "bodyText": "This class is going to be deleted and its logic will be moved to CobolSemanticParser, so at least for me it is better to keep it like this and refactor later.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/244#discussion_r391453920", "createdAt": "2020-03-12T08:05:28Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/preprocessor/sub/document/impl/CobolSemanticParserListenerImpl.java", "diffHunk": "@@ -134,9 +136,21 @@ public void exitCopyStatement(@Nonnull CopyStatementContext ctx) {\n     String copybookName = retrieveCopybookName(copySource);\n     Position position = retrievePosition(copySource);\n     defineCopybook(copybookName, position);\n+    checkCopybookNameLength(copybookName, position);\n     this.preprocessorCleanerService.excludeStatementFromText(ctx, COMMENT_TAG, tokens);\n   }\n \n+  private void checkCopybookNameLength(String copybookName, Position position) {\n+    if (copybookName != null && copybookName.length() > 8) {\n+      errors.add(\n+          SyntaxError.syntaxError()\n+              .severity(3)\n+              .suggestion(String.format(COPYBOOK_OVER_8_CHARACTERS, copybookName))\n+              .position(position)\n+              .build());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1MjY5OQ=="}, "originalCommit": {"oid": "466e8764a13bf38b601f9f96b44688b2253542e6"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1NDQ3Ng==", "bodyText": "ok", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/244#discussion_r391454476", "createdAt": "2020-03-12T08:06:49Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/preprocessor/sub/document/impl/CobolSemanticParserListenerImpl.java", "diffHunk": "@@ -134,9 +136,21 @@ public void exitCopyStatement(@Nonnull CopyStatementContext ctx) {\n     String copybookName = retrieveCopybookName(copySource);\n     Position position = retrievePosition(copySource);\n     defineCopybook(copybookName, position);\n+    checkCopybookNameLength(copybookName, position);\n     this.preprocessorCleanerService.excludeStatementFromText(ctx, COMMENT_TAG, tokens);\n   }\n \n+  private void checkCopybookNameLength(String copybookName, Position position) {\n+    if (copybookName != null && copybookName.length() > 8) {\n+      errors.add(\n+          SyntaxError.syntaxError()\n+              .severity(3)\n+              .suggestion(String.format(COPYBOOK_OVER_8_CHARACTERS, copybookName))\n+              .position(position)\n+              .build());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1MjY5OQ=="}, "originalCommit": {"oid": "466e8764a13bf38b601f9f96b44688b2253542e6"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4165, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}