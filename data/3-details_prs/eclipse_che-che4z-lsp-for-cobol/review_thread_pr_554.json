{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyMTI3Nzgy", "number": 554, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToyNToxMlrOEs8tCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToyNToyMlrOEs8tQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTY3MzcwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/preprocessor/delegates/reader/CobolLineReaderImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToyNToxMlrOHgdn3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMjowMDo0MVrOHgjKZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwMTgyMA==", "bodyText": "I expect we will have a code smell about ignored return value here.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/554#discussion_r503801820", "createdAt": "2020-10-13T09:25:12Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/preprocessor/delegates/reader/CobolLineReaderImpl.java", "diffHunk": "@@ -95,33 +99,23 @@\n     CobolLine cobolLine = new CobolLine();\n     line = getDelegate().apply(line);\n \n-    ResultWithErrors<String> result = checkLineLength(line, uri, lineNumber);\n-    String adjustedLine = result.getResult();\n-    List<SyntaxError> errors = new ArrayList<>(result.getErrors());\n-\n-    if (adjustedLine.length() > 0) {\n-      for (int i = adjustedLine.length(); i > 0; i--) {\n-        if (i > 72) {\n-          cobolLine.setCommentArea(adjustedLine.substring(72, i));\n-          i = 73;\n-        } else if (i > 11) {\n-          cobolLine.setContentAreaB(adjustedLine.substring(11, i));\n-          i = 12;\n-        } else if (i > 7) {\n-          cobolLine.setContentAreaA(adjustedLine.substring(7, i));\n-          i = 8;\n-        } else if (i > 6) {\n-          String indicatorArea = adjustedLine.substring(6, 7);\n-          ResultWithErrors<CobolLineTypeEnum> type = determineType(indicatorArea, uri, lineNumber);\n-          cobolLine.setIndicatorArea(indicatorArea);\n-          cobolLine.setType(type.getResult());\n-          errors.addAll(type.getErrors());\n-          i = 7;\n-        } else {\n-          cobolLine.setSequenceArea(adjustedLine.substring(0, i));\n-          i = 0;\n-        }\n-      }\n+    List<SyntaxError> errors = new ArrayList<>();\n+\n+    Matcher matcher = COBOL_LINE_PATTERN.matcher(line);\n+    matcher.matches();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d8c87b99a1237ef73fe760478e326384251c888"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg5MjU4Mg==", "bodyText": "In theory, any line must match this pattern. I'll log an error in case the line didn't match.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/554#discussion_r503892582", "createdAt": "2020-10-13T12:00:41Z", "author": {"login": "grianbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/preprocessor/delegates/reader/CobolLineReaderImpl.java", "diffHunk": "@@ -95,33 +99,23 @@\n     CobolLine cobolLine = new CobolLine();\n     line = getDelegate().apply(line);\n \n-    ResultWithErrors<String> result = checkLineLength(line, uri, lineNumber);\n-    String adjustedLine = result.getResult();\n-    List<SyntaxError> errors = new ArrayList<>(result.getErrors());\n-\n-    if (adjustedLine.length() > 0) {\n-      for (int i = adjustedLine.length(); i > 0; i--) {\n-        if (i > 72) {\n-          cobolLine.setCommentArea(adjustedLine.substring(72, i));\n-          i = 73;\n-        } else if (i > 11) {\n-          cobolLine.setContentAreaB(adjustedLine.substring(11, i));\n-          i = 12;\n-        } else if (i > 7) {\n-          cobolLine.setContentAreaA(adjustedLine.substring(7, i));\n-          i = 8;\n-        } else if (i > 6) {\n-          String indicatorArea = adjustedLine.substring(6, 7);\n-          ResultWithErrors<CobolLineTypeEnum> type = determineType(indicatorArea, uri, lineNumber);\n-          cobolLine.setIndicatorArea(indicatorArea);\n-          cobolLine.setType(type.getResult());\n-          errors.addAll(type.getErrors());\n-          i = 7;\n-        } else {\n-          cobolLine.setSequenceArea(adjustedLine.substring(0, i));\n-          i = 0;\n-        }\n-      }\n+    List<SyntaxError> errors = new ArrayList<>();\n+\n+    Matcher matcher = COBOL_LINE_PATTERN.matcher(line);\n+    matcher.matches();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwMTgyMA=="}, "originalCommit": {"oid": "3d8c87b99a1237ef73fe760478e326384251c888"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTY3NDI2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/preprocessor/delegates/reader/CobolLineReaderImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToyNToyMlrOHgdoQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDo0MDo0NlrOHggdMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwMTkyMw==", "bodyText": "Amazing", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/554#discussion_r503801923", "createdAt": "2020-10-13T09:25:22Z", "author": {"login": "temanbrcom"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/preprocessor/delegates/reader/CobolLineReaderImpl.java", "diffHunk": "@@ -43,6 +45,8 @@\n   private static final int MAX_LINE_LENGTH = 80;\n   private static final String LONG_LINE_MSG = \"Source text cannot go past column 80\";\n   private static final String INCORRECT_LINE_FORMAT_MSG = \"Unexpected indicator area content\";\n+  private static final Pattern COBOL_LINE_PATTERN = Pattern.compile(\n+      \"^(?<sequence>.{0,6})(?<indicator>.?)(?<contentA>.{0,4})(?<contentB>.{0,61})(?<comment>.{0,8})(?<extra>.*)$\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d8c87b99a1237ef73fe760478e326384251c888"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0ODI0Mw==", "bodyText": "Beautiful mind", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/554#discussion_r503848243", "createdAt": "2020-10-13T10:40:46Z", "author": {"login": "asatklichov"}, "path": "server/src/main/java/com/broadcom/lsp/cobol/core/preprocessor/delegates/reader/CobolLineReaderImpl.java", "diffHunk": "@@ -43,6 +45,8 @@\n   private static final int MAX_LINE_LENGTH = 80;\n   private static final String LONG_LINE_MSG = \"Source text cannot go past column 80\";\n   private static final String INCORRECT_LINE_FORMAT_MSG = \"Unexpected indicator area content\";\n+  private static final Pattern COBOL_LINE_PATTERN = Pattern.compile(\n+      \"^(?<sequence>.{0,6})(?<indicator>.?)(?<contentA>.{0,4})(?<contentB>.{0,61})(?<comment>.{0,8})(?<extra>.*)$\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwMTkyMw=="}, "originalCommit": {"oid": "3d8c87b99a1237ef73fe760478e326384251c888"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3991, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}