{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNTk5NDA0", "number": 145, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMTo0MTo1NVrODYebpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjowMDoxNlrODaJS4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTkxMDE0OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMTo0MTo1NlrOFeWpug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMTo0NjoxMFrOFeWvkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM3MjczMA==", "bodyText": "I think u wanted to indent a sub items here - usually that's done by just SPACE and *", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/145#discussion_r367372730", "createdAt": "2020-01-16T11:41:56Z", "author": {"login": "fox0r"}, "path": "README.md", "diffHunk": "@@ -15,51 +15,45 @@ COBOL Language Support standardizes the communication between language tooling f\n \n ## Prerequisites\n \n-- Java 8 or newer\n-- (Optional) COBOL 3rd party plugin (required for Syntax colouring)\n-- Copybook path must be defined as **\"COPYBOOKS\"** folder in current workspace (required for copybook support)\n+- Java version 8 or higher\n+- To enable syntax coloring, a third-party COBOL extension is required. The Che4z basic stack and Code4z pack both contain Bitlang, which fulfils this requirement.\n+- To use the COBOL Language Support extension while working with copybooks, place the copybook files inside a **\"COPYBOOKS\"** folder within the current workspace.\n \n+## Features\n COBOL Language Support defines the protocol that is used between an editor or IDE, and a language server that provides the following COBOL syntax awareness features:\n \n-- **Autocomplete**\n+### Autocomplete\n+Autocomplete speeds up the coding process by intuitively suggesting the most likely variables or paragraphs to follow existing code. The extension provides live suggestions while you type for:\n \n-\t- Provides live suggestions while you type for:\n-\t\t- COBOL keywords\n-\t\t- COBOL variables\n-\t\t- COBOL paragraphs\n-\t\t- Code Snippet\n-\t\t\n-\t![Autocomplete](Autocompletev2.gif)\n-\n-- **Syntax and Semantic Check for Code**\n+* COBOL keywords\n+* COBOL variables\n+* COBOL paragraphs\n+* Code Snippet\n+* Copybook variables\n+* Copybook paragraphs\n \n-\t- Checks for mistakes and errors in COBOL code. Syntax check reviews and provides suggested fixes for the whole content of the code, through syntax and semantic analysis which returns diagnostics on the entire context of the code, not just keywords.\n-\t\n-\t![Syntax check](SyntaxCheckv2.gif)\n+![Autocomplete](Autocompletev2.gif)\n \t\t\n-- **Syntax Highlighting**\n-\t\n-\t- Enables syntax highlighting for COBOL code.\n-\t\n-- **Syntax Colouring** (with third-party plugins)\n+### Syntax and Semantic Check for Code\n+This feature checks for mistakes and errors in COBOL code. The syntax check feature reviews the whole content of the code and suggests fixes, through syntax and semantic analysis which returns diagnostics on the entire context of the code, not just keywords.\n \n-\t- Contrasting colors used in displayed code for ease of identifying and distinguishing keywords, variables, and paragraphs.\n+![Syntax check](SyntaxCheckv2.gif)\n+\t\t\t\n+### Syntax Highlighting\n+The extension enables syntax highlighting for COBOL code.\n \t\n-- **Copybook Support**\n+### Syntax Coloring\n+Contrasting colors are used in displayed code for ease of identifying and distinguishing keywords, variables, and paragraphs.\n \n-\t- Semantic analysis for keywords, variables, and paragraphs, across copybooks supported.\n-\t\t- Ensures and maintains compatibility of copybooks called in code.\n-\t- Inbuilt protection against recursive + missing copybooks.\n-\t\t- Protects against code errors where copybook may contain looping code which could crash processes.\n-\t\t- Error message shows where copybook is missing, preventing issue only being discovered when code is executed.  \n-\t- Variables and paragraphs defined across copybooks.\n-\t\t- Ensures consistency of code, assisting with error diagnostics as issues will not be caused by incorrect variables or paragraphs in code. \n-\t- Autocomplete updated to include copybook variables and paragraphs.\n-\t\t- Speeds up coding process by intuitively suggesting most likely variables or paragraphs to follow existing code.\n-\t- Functionality to skip variable levels when called, reducing call time.\n-\t- Inbuilt search function to identify all references filled with paragraphs and variables from copybooks:\n-\t\t- Find all references:\n-\t\t\t- Easily identifies all occurences of variables and paragraphs in the code\n-\t\t- Go To Definition:\n-\t\t\t- Right click on any variable or paragraph to reveal a definition of the element\t\n+A third-party plugin is required to enable syntax coloring. The Che4z basic stack and Code4z pack both contain Bitlang, which fulfils this requirement.\n \t\n+### Copybook Support\n+To use the COBOL Language Support extension while working with copybooks, place the copybook files inside a **\"COPYBOOKS\"** folder within the current workspace. The extension includes the following copybook support features:\n+\n+* Semantic analysis for keywords, variables, and paragraphs across copybooks, to ensure and maintain compatibility of copybooks called in code.\n+* Inbuilt protection against recursive and missing copybooks. If the copybook is missing or contains looping code, an error displays, preventing issues only being discovered when the code is executed.  \n+* Variables and paragraphs are defined across copybooks. This ensures consistency of code, and prevents issues in error diagnostics caused by incorrect variables or paragraphs in code. \n+* Functionality to skip variable levels when called, reducing call time.\n+* Find All References and Go To Definition functionalities.\n+** **Find All References** identifies all occurrences of variables and paragraphs from copybooks in the code.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "111f6fae84e768278441ec5a967089eb46ca7823"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM3NDIyNQ==", "bodyText": "Oops, sorry, fixed, forgot this was MD and not adoc.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/145#discussion_r367374225", "createdAt": "2020-01-16T11:46:10Z", "author": {"login": "zeibura"}, "path": "README.md", "diffHunk": "@@ -15,51 +15,45 @@ COBOL Language Support standardizes the communication between language tooling f\n \n ## Prerequisites\n \n-- Java 8 or newer\n-- (Optional) COBOL 3rd party plugin (required for Syntax colouring)\n-- Copybook path must be defined as **\"COPYBOOKS\"** folder in current workspace (required for copybook support)\n+- Java version 8 or higher\n+- To enable syntax coloring, a third-party COBOL extension is required. The Che4z basic stack and Code4z pack both contain Bitlang, which fulfils this requirement.\n+- To use the COBOL Language Support extension while working with copybooks, place the copybook files inside a **\"COPYBOOKS\"** folder within the current workspace.\n \n+## Features\n COBOL Language Support defines the protocol that is used between an editor or IDE, and a language server that provides the following COBOL syntax awareness features:\n \n-- **Autocomplete**\n+### Autocomplete\n+Autocomplete speeds up the coding process by intuitively suggesting the most likely variables or paragraphs to follow existing code. The extension provides live suggestions while you type for:\n \n-\t- Provides live suggestions while you type for:\n-\t\t- COBOL keywords\n-\t\t- COBOL variables\n-\t\t- COBOL paragraphs\n-\t\t- Code Snippet\n-\t\t\n-\t![Autocomplete](Autocompletev2.gif)\n-\n-- **Syntax and Semantic Check for Code**\n+* COBOL keywords\n+* COBOL variables\n+* COBOL paragraphs\n+* Code Snippet\n+* Copybook variables\n+* Copybook paragraphs\n \n-\t- Checks for mistakes and errors in COBOL code. Syntax check reviews and provides suggested fixes for the whole content of the code, through syntax and semantic analysis which returns diagnostics on the entire context of the code, not just keywords.\n-\t\n-\t![Syntax check](SyntaxCheckv2.gif)\n+![Autocomplete](Autocompletev2.gif)\n \t\t\n-- **Syntax Highlighting**\n-\t\n-\t- Enables syntax highlighting for COBOL code.\n-\t\n-- **Syntax Colouring** (with third-party plugins)\n+### Syntax and Semantic Check for Code\n+This feature checks for mistakes and errors in COBOL code. The syntax check feature reviews the whole content of the code and suggests fixes, through syntax and semantic analysis which returns diagnostics on the entire context of the code, not just keywords.\n \n-\t- Contrasting colors used in displayed code for ease of identifying and distinguishing keywords, variables, and paragraphs.\n+![Syntax check](SyntaxCheckv2.gif)\n+\t\t\t\n+### Syntax Highlighting\n+The extension enables syntax highlighting for COBOL code.\n \t\n-- **Copybook Support**\n+### Syntax Coloring\n+Contrasting colors are used in displayed code for ease of identifying and distinguishing keywords, variables, and paragraphs.\n \n-\t- Semantic analysis for keywords, variables, and paragraphs, across copybooks supported.\n-\t\t- Ensures and maintains compatibility of copybooks called in code.\n-\t- Inbuilt protection against recursive + missing copybooks.\n-\t\t- Protects against code errors where copybook may contain looping code which could crash processes.\n-\t\t- Error message shows where copybook is missing, preventing issue only being discovered when code is executed.  \n-\t- Variables and paragraphs defined across copybooks.\n-\t\t- Ensures consistency of code, assisting with error diagnostics as issues will not be caused by incorrect variables or paragraphs in code. \n-\t- Autocomplete updated to include copybook variables and paragraphs.\n-\t\t- Speeds up coding process by intuitively suggesting most likely variables or paragraphs to follow existing code.\n-\t- Functionality to skip variable levels when called, reducing call time.\n-\t- Inbuilt search function to identify all references filled with paragraphs and variables from copybooks:\n-\t\t- Find all references:\n-\t\t\t- Easily identifies all occurences of variables and paragraphs in the code\n-\t\t- Go To Definition:\n-\t\t\t- Right click on any variable or paragraph to reveal a definition of the element\t\n+A third-party plugin is required to enable syntax coloring. The Che4z basic stack and Code4z pack both contain Bitlang, which fulfils this requirement.\n \t\n+### Copybook Support\n+To use the COBOL Language Support extension while working with copybooks, place the copybook files inside a **\"COPYBOOKS\"** folder within the current workspace. The extension includes the following copybook support features:\n+\n+* Semantic analysis for keywords, variables, and paragraphs across copybooks, to ensure and maintain compatibility of copybooks called in code.\n+* Inbuilt protection against recursive and missing copybooks. If the copybook is missing or contains looping code, an error displays, preventing issues only being discovered when the code is executed.  \n+* Variables and paragraphs are defined across copybooks. This ensures consistency of code, and prevents issues in error diagnostics caused by incorrect variables or paragraphs in code. \n+* Functionality to skip variable levels when called, reducing call time.\n+* Find All References and Go To Definition functionalities.\n+** **Find All References** identifies all occurrences of variables and paragraphs from copybooks in the code.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM3MjczMA=="}, "originalCommit": {"oid": "111f6fae84e768278441ec5a967089eb46ca7823"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzQxODU5OnYy", "diffSide": "LEFT", "path": "clients/cobol-lsp-vscode-extension/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjowMDoxNlrOFg7wmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjowMDoxNlrOFg7wmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA3Nzg0OQ==", "bodyText": "Why do we need this replacement?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/145#discussion_r370077849", "createdAt": "2020-01-23T12:00:16Z", "author": {"login": "temanbrcom"}, "path": "clients/cobol-lsp-vscode-extension/README.md", "diffHunk": "@@ -4,7 +4,7 @@\n [![GitHub issues](https://img.shields.io/github/issues-raw/eclipse/che-che4z-lsp-for-cobol)](https://github.com/eclipse/che-che4z-lsp-for-cobol/issues)\n [![slack](https://img.shields.io/badge/chat-on%20Slack-blue)](https://join.slack.com/t/che4z/shared_invite/enQtNzk0MzA4NDMzOTIwLWIzMjEwMjJlOGMxNmMyNzQ1NWZlMzkxNmQ3M2VkYWNjMmE0MGQ0MjIyZmY3MTdhZThkZDg3NGNhY2FmZTEwNzQ)\n <a href=\"https://sonarcloud.io/dashboard?id=eclipse_che-che4z-lsp-for-cobol\">\n-<img src=\"https://sonarcloud.io/images/project_badges/sonarcloud-black.svg\" width=\"94\" height=\"20\" href=\"\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f0ef20cc423cb49b7a041c0a5c7e1ed1be96832"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4091, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}