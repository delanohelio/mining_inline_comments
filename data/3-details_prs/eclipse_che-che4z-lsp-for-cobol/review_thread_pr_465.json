{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwODMwODIz", "number": 465, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjoyNToxMlrOEagQsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToxOTozMVrOEalTsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjI2OTk0OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/usecases/TestReplacingPseudoTextReplacesLevelNumber.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjoyNToxMlrOHD-Zvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjoyODoyN1rOHD-g4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkzMDE3NQ==", "bodyText": "why only this \"by\" was made lowercase?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/465#discussion_r473930175", "createdAt": "2020-08-20T12:25:12Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/usecases/TestReplacingPseudoTextReplacesLevelNumber.java", "diffHunk": "@@ -34,7 +34,7 @@\n           + \"2      DATA DIVISION.\\n\"\n           + \"3      WORKING-STORAGE SECTION.\\n\"\n           + \"4      01  {$*PARENT}.\\n\"\n-          + \"5      COPY {~REPL} REPLACING == 01 AA-PARENT == BY == 05  EE-PARENT ==\\n\"\n+          + \"5      COPY {~REPL} REPLACING == 01 AA-PARENT == by == 05  EE-PARENT ==\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f4c3ec0b4ae5851263abacc953e94c52e49bbe"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkzMjAwMg==", "bodyText": "Here and later it is just to assert case-insensitivity. This exact test class was chosen randomly", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/465#discussion_r473932002", "createdAt": "2020-08-20T12:28:27Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/usecases/TestReplacingPseudoTextReplacesLevelNumber.java", "diffHunk": "@@ -34,7 +34,7 @@\n           + \"2      DATA DIVISION.\\n\"\n           + \"3      WORKING-STORAGE SECTION.\\n\"\n           + \"4      01  {$*PARENT}.\\n\"\n-          + \"5      COPY {~REPL} REPLACING == 01 AA-PARENT == BY == 05  EE-PARENT ==\\n\"\n+          + \"5      COPY {~REPL} REPLACING == 01 AA-PARENT == by == 05  EE-PARENT ==\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkzMDE3NQ=="}, "originalCommit": {"oid": "15f4c3ec0b4ae5851263abacc953e94c52e49bbe"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjI3MjI1OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/preprocessor/sub/util/impl/ReplacingServiceImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjoyNTo0NVrOHD-bEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjoyNTo0NVrOHD-bEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkzMDUxNA==", "bodyText": "is there a type on bY?", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/465#discussion_r473930514", "createdAt": "2020-08-20T12:25:45Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/preprocessor/sub/util/impl/ReplacingServiceImplTest.java", "diffHunk": "@@ -15,214 +15,57 @@\n \n package com.ca.lsp.core.cobol.preprocessor.sub.util.impl;\n \n-import com.ca.lsp.core.cobol.parser.CobolPreprocessor.*;\n import com.ca.lsp.core.cobol.preprocessor.sub.util.ReplacingService;\n-import com.ca.lsp.core.cobol.preprocessor.sub.util.TokenUtils;\n-import org.antlr.v4.runtime.BufferedTokenStream;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.junit.jupiter.api.Test;\n \n import java.util.List;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n \n /** This test checks the logic of {@link ReplacingServiceImpl} */\n class ReplacingServiceImplTest {\n-\n   @Test\n-  void applyReplacingPseudoText() {\n-    String original = \" A    1 \";\n-    String expected = \" B 2 \";\n-\n-    BufferedTokenStream tokenStream = mock(BufferedTokenStream.class);\n-    TokenUtils tokenUtils = mock(TokenUtils.class);\n-\n-    ReplaceClauseContext aToB = mock(ReplaceClauseContext.class);\n-\n-    ReplacePseudoTextContext aToBLiteral = mock(ReplacePseudoTextContext.class);\n-\n-    PseudoReplaceableContext aReplaceable = mock(PseudoReplaceableContext.class);\n-    PseudoReplacementContext bReplacement = mock(PseudoReplacementContext.class);\n-\n-    List<ReplaceClauseContext> replaceClauses = List.of(aToB);\n-\n-    when(aToB.replacePseudoText()).thenReturn(aToBLiteral);\n-    when(aToBLiteral.pseudoReplaceable()).thenReturn(aReplaceable);\n-    when(aToBLiteral.pseudoReplacement()).thenReturn(bReplacement);\n-    when(tokenUtils.retrieveTextIncludingHiddenTokens(aReplaceable, tokenStream))\n-        .thenReturn(\"==A 1 ==\");\n-    when(tokenUtils.retrieveTextIncludingHiddenTokens(bReplacement, tokenStream))\n-        .thenReturn(\"== B    2 ==\");\n-\n-    ReplacingService replacingService = new ReplacingServiceImpl(tokenUtils);\n-    String actual = replacingService.applyReplacing(original, replaceClauses, tokenStream);\n-\n-    assertEquals(expected, actual);\n+  void testApplyReplacing() {\n+    ReplacingService replacingService = new ReplacingServiceImpl();\n+    assertEquals(\n+        \"   05\\n\\r.   .CHILD23\\r\\n.\",\n+        replacingService.applyReplacing(\n+            \"   01\\n\\r.   .CHILD13\\r\\n.\",\n+            List.of(\n+                Pair.of(\"(?<=[\\\\.\\\\s\\\\r\\\\n])01(?=[\\\\.\\\\s\\\\r\\\\n])\", \"05\"),\n+                Pair.of(\"CHILD1\", \"CHILD2\"))));\n+\n+    assertEquals(\"01 ABC.\", replacingService.applyReplacing(\"01 ABC.\", List.of(Pair.of(\"\", \"\"))));\n   }\n \n   @Test\n-  void applyReplacingTwoCobolWords() {\n-    String original = \" A A 1 \";\n-    String expected = \" B B 2 \";\n-\n-    BufferedTokenStream tokenStream = mock(BufferedTokenStream.class);\n-    TokenUtils tokenUtils = mock(TokenUtils.class);\n-\n-    ReplaceClauseContext aToB = mock(ReplaceClauseContext.class);\n-    ReplaceClauseContext oneTo2 = mock(ReplaceClauseContext.class);\n-\n-    ReplaceliteralContext aToBLiteral = mock(ReplaceliteralContext.class);\n-    ReplaceliteralContext oneTo2Literal = mock(ReplaceliteralContext.class);\n-\n-    ReplaceableContext aReplaceable = mock(ReplaceableContext.class);\n-    ReplacementContext bReplacement = mock(ReplacementContext.class);\n-\n-    ReplaceableContext oneReplaceable = mock(ReplaceableContext.class);\n-    ReplacementContext twoReplacement = mock(ReplacementContext.class);\n-\n-    ReplaceSameElementContext aReplaceableElement = mock(ReplaceSameElementContext.class);\n-    ReplaceSameElementContext bReplacementElement = mock(ReplaceSameElementContext.class);\n-\n-    ReplaceSameElementContext oneReplaceableElement = mock(ReplaceSameElementContext.class);\n-    ReplaceSameElementContext twoReplacementElement = mock(ReplaceSameElementContext.class);\n-    CobolWordContext cobolWordContext = mock(CobolWordContext.class);\n-\n-    List<ReplaceClauseContext> replaceClauses = List.of(aToB, oneTo2);\n-\n-    when(aToB.replaceliteral()).thenReturn(aToBLiteral);\n-    when(oneTo2.replaceliteral()).thenReturn(oneTo2Literal);\n-    when(aToBLiteral.replaceable()).thenReturn(aReplaceable);\n-    when(aToBLiteral.replacement()).thenReturn(bReplacement);\n-    when(oneTo2Literal.replaceable()).thenReturn(oneReplaceable);\n-    when(oneTo2Literal.replacement()).thenReturn(twoReplacement);\n-    when(aReplaceable.replaceSameElement()).thenReturn(aReplaceableElement);\n-    when(bReplacement.replaceSameElement()).thenReturn(bReplacementElement);\n-    when(oneReplaceable.replaceSameElement()).thenReturn(oneReplaceableElement);\n-    when(twoReplacement.replaceSameElement()).thenReturn(twoReplacementElement);\n-    when(aReplaceableElement.cobolWord()).thenReturn(cobolWordContext);\n-    when(bReplacementElement.cobolWord()).thenReturn(cobolWordContext);\n-    when(oneReplaceableElement.cobolWord()).thenReturn(cobolWordContext);\n-    when(twoReplacementElement.cobolWord()).thenReturn(cobolWordContext);\n-    when(aReplaceableElement.getText()).thenReturn(\"A\");\n-    when(bReplacementElement.getText()).thenReturn(\"B\");\n-    when(oneReplaceableElement.getText()).thenReturn(\"1\");\n-    when(twoReplacementElement.getText()).thenReturn(\"2\");\n-\n-    ReplacingService replacingService = new ReplacingServiceImpl(tokenUtils);\n-    String actual = replacingService.applyReplacing(original, replaceClauses, tokenStream);\n-\n-    assertEquals(expected, actual);\n+  void retrievePseudoTextReplacingPattern() {\n+    ReplacingService replacingService = new ReplacingServiceImpl();\n+    assertEquals(\n+        Pair.of(\"01\", \"05\"),\n+        replacingService.retrievePseudoTextReplacingPattern(\"==01== BY ==05==\"));\n+    assertEquals(Pair.of(\"\", \"\"), replacingService.retrievePseudoTextReplacingPattern(\"\"));\n+    assertEquals(\n+        Pair.of(\"a +b +\\nc\", \"\"),\n+        replacingService.retrievePseudoTextReplacingPattern(\"==a   b  \\nc== bY ====\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f4c3ec0b4ae5851263abacc953e94c52e49bbe"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjMxODA2OnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/preprocessor/sub/util/impl/ReplacingServiceImplTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjozODo0M1rOHD-3Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTowOTozNFrOHEGK2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkzNzY3MA==", "bodyText": "great job to simplify the test, I would recommend a line of comment that explain what we provide as input and what is returned as output by the replacing service", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/465#discussion_r473937670", "createdAt": "2020-08-20T12:38:43Z", "author": {"login": "zacanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/preprocessor/sub/util/impl/ReplacingServiceImplTest.java", "diffHunk": "@@ -15,214 +15,57 @@\n \n package com.ca.lsp.core.cobol.preprocessor.sub.util.impl;\n \n-import com.ca.lsp.core.cobol.parser.CobolPreprocessor.*;\n import com.ca.lsp.core.cobol.preprocessor.sub.util.ReplacingService;\n-import com.ca.lsp.core.cobol.preprocessor.sub.util.TokenUtils;\n-import org.antlr.v4.runtime.BufferedTokenStream;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.junit.jupiter.api.Test;\n \n import java.util.List;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n \n /** This test checks the logic of {@link ReplacingServiceImpl} */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f4c3ec0b4ae5851263abacc953e94c52e49bbe"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA1NzQzNA==", "bodyText": "Yeah, makes sense", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/465#discussion_r474057434", "createdAt": "2020-08-20T15:09:34Z", "author": {"login": "temanbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/preprocessor/sub/util/impl/ReplacingServiceImplTest.java", "diffHunk": "@@ -15,214 +15,57 @@\n \n package com.ca.lsp.core.cobol.preprocessor.sub.util.impl;\n \n-import com.ca.lsp.core.cobol.parser.CobolPreprocessor.*;\n import com.ca.lsp.core.cobol.preprocessor.sub.util.ReplacingService;\n-import com.ca.lsp.core.cobol.preprocessor.sub.util.TokenUtils;\n-import org.antlr.v4.runtime.BufferedTokenStream;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.junit.jupiter.api.Test;\n \n import java.util.List;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n \n /** This test checks the logic of {@link ReplacingServiceImpl} */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkzNzY3MA=="}, "originalCommit": {"oid": "15f4c3ec0b4ae5851263abacc953e94c52e49bbe"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzA5MzczOnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/preprocessor/sub/document/impl/GrammarPreprocessorListenerImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToxODo1NFrOHEGj_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToxODo1NFrOHEGj_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2Mzg3MQ==", "bodyText": "I think that you could delete this line.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/465#discussion_r474063871", "createdAt": "2020-08-20T15:18:54Z", "author": {"login": "grianbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/preprocessor/sub/document/impl/GrammarPreprocessorListenerImplTest.java", "diffHunk": "@@ -403,18 +404,18 @@ void testMissingCopybook() {\n             tokens,\n             new ArrayDeque<>(),\n             CPY_MODE_ENABLED,\n-            tokenUtils,\n+            //            tokenUtils,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f4c3ec0b4ae5851263abacc953e94c52e49bbe"}, "originalPosition": 268}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzA5NjgwOnYy", "diffSide": "RIGHT", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/preprocessor/sub/document/impl/GrammarPreprocessorListenerImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToxOTozMVrOHEGl3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToxOTozMVrOHEGl3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2NDM1MQ==", "bodyText": "And here too.", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/465#discussion_r474064351", "createdAt": "2020-08-20T15:19:31Z", "author": {"login": "grianbrcom"}, "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/test/java/com/ca/lsp/core/cobol/preprocessor/sub/document/impl/GrammarPreprocessorListenerImplTest.java", "diffHunk": "@@ -456,33 +457,36 @@ void testCopybookProcessingDisabled() {\n \n   @Test\n   void testCompilerOptionsExcluded() {\n-    CompilerOptionsContext context = mock(CompilerOptionsContext.class);\n-\n     BufferedTokenStream tokens = mock(BufferedTokenStream.class);\n-    TokenUtils tokenUtils = mock(TokenUtils.class);\n+    Token hidden = mock(Token.class);\n+    when(hidden.getText()).thenReturn(\" \");\n+    when(tokens.getHiddenTokensToLeft(anyInt(), anyInt())).thenReturn(List.of(hidden));\n+    CompilerOptionsContext context = mock(CompilerOptionsContext.class);\n     when(context.getSourceInterval()).thenReturn(new Interval(1, 4));\n \n-    when(tokenUtils.retrieveHiddenTextToLeft(anyInt(), eq(tokens))).thenReturn(\"\");\n-    when(tokenUtils.retrieveHiddenTextToLeft(eq(7), eq(tokens))).thenReturn(\" \");\n-\n-    when(tokenUtils.notEOF(any(TerminalNode.class))).thenReturn(true);\n-\n     GrammarPreprocessorListenerImpl listener =\n         new GrammarPreprocessorListenerImpl(\n-            DOCUMENT_URI, tokens, null, null, tokenUtils, null, null, null);\n+            DOCUMENT_URI,\n+            tokens,\n+            null,\n+            null,\n+            //                tokenUtils,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f4c3ec0b4ae5851263abacc953e94c52e49bbe"}, "originalPosition": 345}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3925, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}