{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0NzM5OTA1", "number": 1330, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMTozMTo0NlrOEe3Kiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNDo1MzoyNlrOEmH-VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzk2NTU1OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/WorkerStorageImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMTozMTo0NlrOHKyI5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNjowMjoyNFrOHK9ipw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA2OTI4Ng==", "bodyText": "Ich w\u00fcrde den Cache ganz wegnehmen und auf das vorhandene Keyset zugreifen.\nDer Rechenaufwand ist denke ich vollkommen im Rahmen hierf\u00fcr.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic Collection<ImportId> getTableImports(TableId tableId) {\n          \n          \n            \n            \t\treturn this.tableImports.get(tableId);\n          \n          \n            \n            \t}\n          \n          \n            \n            \t\tpublic Collection<ImportId> getTableImports(TableId tableId) {\n          \n          \n            \n            \t\treturn imports.getAllKeys().stream()\n          \n          \n            \n            \t\t\t.map(ImportId.class::cast)\n          \n          \n            \n            \t\t\t.filter(i -> i.getTable().equals(tableId))\n          \n          \n            \n            \t\t\t.collect(Collectors.toSet());\n          \n          \n            \n            \t}", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r481069286", "createdAt": "2020-09-01T11:31:46Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/WorkerStorageImpl.java", "diffHunk": "@@ -138,12 +146,40 @@ public void removeConcept(ConceptId id) {\n \t\t}\n \t}\n \n+\n+\t@Override\n+\tpublic void addImport(Import imp) throws JSONException {\n+\t\tsuper.addImport(imp);\n+\n+\t\tregisterTableImport(imp.getId());\n+\t}\n+\n+\t@Override\n+\tpublic void updateImport(Import imp) throws JSONException {\n+\t\tsuper.updateImport(imp);\n+\t}\n+\n \t@Override\n \tpublic void removeImport(ImportId id){\n-\t\timports.remove(id);\n+\t\tsuper.removeImport(id);\n+\n+\t\tunregisterTableImport(id);\n \n \t\tif (bucketManager != null){\n \t\t\tbucketManager.removeImport(id);\n \t\t}\n \t}\n+\n+\tpublic void registerTableImport(ImportId impId) {\n+\t\ttableImports.put(impId.getTable(),impId);\n+\t}\n+\n+\tpublic void unregisterTableImport(ImportId impId) {\n+\t\ttableImports.remove(impId.getTable(), impId);\n+\t}\n+\n+\tpublic Collection<ImportId> getTableImports(TableId tableId) {\n+\t\treturn this.tableImports.get(tableId);\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI1NjEwMw==", "bodyText": "Wir k\u00f6nnen es gerne Profilen aber ich denke schon, dass die Caches Vorteile haben", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r481256103", "createdAt": "2020-09-01T16:02:24Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/WorkerStorageImpl.java", "diffHunk": "@@ -138,12 +146,40 @@ public void removeConcept(ConceptId id) {\n \t\t}\n \t}\n \n+\n+\t@Override\n+\tpublic void addImport(Import imp) throws JSONException {\n+\t\tsuper.addImport(imp);\n+\n+\t\tregisterTableImport(imp.getId());\n+\t}\n+\n+\t@Override\n+\tpublic void updateImport(Import imp) throws JSONException {\n+\t\tsuper.updateImport(imp);\n+\t}\n+\n \t@Override\n \tpublic void removeImport(ImportId id){\n-\t\timports.remove(id);\n+\t\tsuper.removeImport(id);\n+\n+\t\tunregisterTableImport(id);\n \n \t\tif (bucketManager != null){\n \t\t\tbucketManager.removeImport(id);\n \t\t}\n \t}\n+\n+\tpublic void registerTableImport(ImportId impId) {\n+\t\ttableImports.put(impId.getTable(),impId);\n+\t}\n+\n+\tpublic void unregisterTableImport(ImportId impId) {\n+\t\ttableImports.remove(impId.getTable(), impId);\n+\t}\n+\n+\tpublic Collection<ImportId> getTableImports(TableId tableId) {\n+\t\treturn this.tableImports.get(tableId);\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA2OTI4Ng=="}, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODMwNDgxOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzowNTowNFrOHK1Vdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzowNTowNFrOHK1Vdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyMTY1NQ==", "bodyText": "Info ist hier denke ich immer noch angebracht", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r481121655", "createdAt": "2020-09-01T13:05:04Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -359,7 +359,7 @@ private static void dumpToFile(@NonNull ByteIterable obj, @NonNull String keyOfD\n \t\t}\n \t\t// Write dump\n \t\ttry {\n-\t\t\tlog.info(\"Dumping value of key {} to {} (because it cannot be deserialized anymore).\", keyOfDump, dumpfile.getCanonicalPath());\n+\t\t\tlog.warn(\"Dumping value of key {} to {} (because it cannot be deserialized anymore).\", keyOfDump, dumpfile.getCanonicalPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODMxMDU4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/conditions/EqualCondition.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzowNjoyOVrOHK1Y-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzoxNjoyNFrOHVDGxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyMjU1NA==", "bodyText": "Interessant, dann sollte values final werden/sein.", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r481122554", "createdAt": "2020-09-01T13:06:29Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/conditions/EqualCondition.java", "diffHunk": "@@ -3,20 +3,20 @@\n import java.util.HashSet;\n import java.util.Map;\n \n-import org.hibernate.validator.constraints.NotEmpty;\n-\n import com.bakdata.conquery.io.cps.CPSType;\n import com.bakdata.conquery.util.CalculatedValue;\n-\n import lombok.Getter;\n import lombok.Setter;\n+import org.hibernate.validator.constraints.NotEmpty;\n \n /**\n  * This condition requires each value to be exactly as given in the list.\n  */\n @CPSType(id=\"EQUAL\", base=CTCondition.class)\n public class EqualCondition implements CTCondition {\n \n+\t// TODO: 06.08.2020 FK: @JsonCreator that uses different Sets for different applications. eg Collections.singleton or ArraySet (for small sets)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI1NTQzNQ==", "bodyText": "Habe ich daf\u00fcr keinen PR gestellt? das war ez aber noch keinen Speicherverbrauch getracket", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r481255435", "createdAt": "2020-09-01T16:01:43Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/conditions/EqualCondition.java", "diffHunk": "@@ -3,20 +3,20 @@\n import java.util.HashSet;\n import java.util.Map;\n \n-import org.hibernate.validator.constraints.NotEmpty;\n-\n import com.bakdata.conquery.io.cps.CPSType;\n import com.bakdata.conquery.util.CalculatedValue;\n-\n import lombok.Getter;\n import lombok.Setter;\n+import org.hibernate.validator.constraints.NotEmpty;\n \n /**\n  * This condition requires each value to be exactly as given in the list.\n  */\n @CPSType(id=\"EQUAL\", base=CTCondition.class)\n public class EqualCondition implements CTCondition {\n \n+\t// TODO: 06.08.2020 FK: @JsonCreator that uses different Sets for different applications. eg Collections.singleton or ArraySet (for small sets)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyMjU1NA=="}, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgzMzAyOA==", "bodyText": "Ich habe mit den PR angeschaut, den du meinst", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r491833028", "createdAt": "2020-09-21T07:16:24Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/conditions/EqualCondition.java", "diffHunk": "@@ -3,20 +3,20 @@\n import java.util.HashSet;\n import java.util.Map;\n \n-import org.hibernate.validator.constraints.NotEmpty;\n-\n import com.bakdata.conquery.io.cps.CPSType;\n import com.bakdata.conquery.util.CalculatedValue;\n-\n import lombok.Getter;\n import lombok.Setter;\n+import org.hibernate.validator.constraints.NotEmpty;\n \n /**\n  * This condition requires each value to be exactly as given in the list.\n  */\n @CPSType(id=\"EQUAL\", base=CTCondition.class)\n public class EqualCondition implements CTCondition {\n \n+\t// TODO: 06.08.2020 FK: @JsonCreator that uses different Sets for different applications. eg Collections.singleton or ArraySet (for small sets)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyMjU1NA=="}, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODMyOTQ0OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/datasets/Import.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzoxMToyNFrOHK1k6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTo1NDoyNlrOHK9GiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyNTYxMQ==", "bodyText": "Warum wird die entityBucketSize auf `0 gesetzt? Was ist so besonders am Preprocessing?", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r481125611", "createdAt": "2020-09-01T13:11:24Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/datasets/Import.java", "diffHunk": "@@ -148,7 +157,7 @@ private String applyTemplate(String templateName) {\n \t}\n \n \tpublic static Import createForPreprocessing(String table, String tag, PPColumn[] columns) {\n-\t\tImport imp = new Import();\n+\t\tImport imp = new Import(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0ODc2MA==", "bodyText": "Das wird hier nicht verwendet aber da sollte dann ein Kommentar hin", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r481248760", "createdAt": "2020-09-01T15:54:15Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/datasets/Import.java", "diffHunk": "@@ -148,7 +157,7 @@ private String applyTemplate(String templateName) {\n \t}\n \n \tpublic static Import createForPreprocessing(String table, String tag, PPColumn[] columns) {\n-\t\tImport imp = new Import();\n+\t\tImport imp = new Import(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyNTYxMQ=="}, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0ODkwNQ==", "bodyText": "Oder die Klassen besser getrennt werden", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r481248905", "createdAt": "2020-09-01T15:54:26Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/datasets/Import.java", "diffHunk": "@@ -148,7 +157,7 @@ private String applyTemplate(String templateName) {\n \t}\n \n \tpublic static Import createForPreprocessing(String table, String tag, PPColumn[] columns) {\n-\t\tImport imp = new Import();\n+\t\tImport imp = new Import(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyNTYxMQ=="}, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODM2NDI3OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/entity/Entity.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzoxOTo0OFrOHK16qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzoxOTo0OFrOHK16qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEzMTE3OQ==", "bodyText": "Die Methode w\u00fcrde ich umkrempeln und in den BucketManager schieben, um Indirektion einzusparen.", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r481131179", "createdAt": "2020-09-01T13:19:48Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/entity/Entity.java", "diffHunk": "@@ -28,58 +16,21 @@\n public class Entity {\n \t@Getter\n \tprivate final int id;\n-\tprivate final ListMultimap<TableId, Bucket> buckets = ArrayListMultimap.create();\n-\tprivate final HashBasedTable<ConnectorId, BucketId, EntityRow> cBlocks = HashBasedTable.create();\n-\n-\tpublic void addBucket(TableId id, Bucket bucket) {\n-\t\tbuckets.put(id, bucket);\n-\t}\n \n-\tpublic void addCBlock(Connector con, Import imp, Table table, Bucket bucket, CBlock cBlock) {\n-\t\tif (cBlocks.put(con.getId(), bucket.getId(), new EntityRow(bucket, cBlock, con, imp, table)) != null) {\n-\t\t\tthrow new IllegalStateException(\"multiple CBlocks for block \" + bucket + \" & connector \" + con);\n-\t\t}\n-\t}\n \n \t/**\n-\t * Test if there is any known associated data to the Entity.\n+\t * Test if there is any known associated data to the Entity in the {@link BucketManager}\n+\t * @param bucketManager\n \t */\n-\tpublic boolean isEmpty() {\n-\t\treturn cBlocks.isEmpty() && buckets.isEmpty();\n+\tpublic boolean isEmpty(BucketManager bucketManager) {\n+\t\treturn !bucketManager.hasBucket(getBucket(id, bucketManager.getBucketSize()));\n \t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODM5NDkxOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/entity/EntityRow.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzoyNjo1N1rOHK2Nsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzoyNjo1N1rOHK2Nsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEzNjA1MA==", "bodyText": "Das ist dann f\u00fcr einen n\u00e4chsten PR oder wolltest du das nochmachen?", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r481136050", "createdAt": "2020-09-01T13:26:57Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/entity/EntityRow.java", "diffHunk": "@@ -1,19 +1,11 @@\n package com.bakdata.conquery.models.query.entity;\n \n-import com.bakdata.conquery.models.concepts.Connector;\n-import com.bakdata.conquery.models.datasets.Import;\n-import com.bakdata.conquery.models.datasets.Table;\n-import com.bakdata.conquery.models.events.Bucket;\n import com.bakdata.conquery.models.events.CBlock;\n import lombok.Data;\n import lombok.RequiredArgsConstructor;\n \n @Data @RequiredArgsConstructor\n public class EntityRow {\n \t//TODO Only the CBlock is used, remove this class.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODQyMzg2OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/QPNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzozMzo0NVrOHK2fhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzozMzo0NVrOHK2fhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE0MDYxMw==", "bodyText": "Doku", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r481140613", "createdAt": "2020-09-01T13:33:45Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/QPNode.java", "diffHunk": "@@ -19,12 +18,9 @@\n \tprotected QueryExecutionContext context;\n \tprotected Entity entity;\n \n-\tpublic void init(Entity entity) {\n-\t\tthis.entity = entity;\n-\t\tinit();\n-\t}\n-\n-\tprotected void init() {\n+\tpublic void init(Entity entity, QueryExecutionContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODg2ODcwOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/ConceptQueryPlan.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTowNTowNlrOHK6yUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDowMDo0NlrOHMfcXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIxMDk2Mg==", "bodyText": "warum gibt es hier den member entity, der letztendlich in execute nicht benutzt wird.", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r481210962", "createdAt": "2020-09-01T15:05:06Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/ConceptQueryPlan.java", "diffHunk": "@@ -81,9 +81,9 @@ protected void checkRequiredTables(WorkerStorage storage) {\n \t\t}\n \t}\n \n-\tpublic void init(Entity entity) {\n+\tpublic void init(Entity entity, QueryExecutionContext ctx) {\n \t\tthis.entity = entity;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI1MzcyNQ==", "bodyText": "Das ist diese misch-masch OOP Implementierung aller QueryEngine Objekte, aber guter Punkt, muss mal schauen, wie man die smarter setzen kann, wird ja schon benutzt", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r481253725", "createdAt": "2020-09-01T16:00:01Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/ConceptQueryPlan.java", "diffHunk": "@@ -81,9 +81,9 @@ protected void checkRequiredTables(WorkerStorage storage) {\n \t\t}\n \t}\n \n-\tpublic void init(Entity entity) {\n+\tpublic void init(Entity entity, QueryExecutionContext ctx) {\n \t\tthis.entity = entity;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIxMDk2Mg=="}, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2MDEyNg==", "bodyText": "Habe gerade versucht die init vor den execute schritt zu schieben, aber da gibt es echt viele abh\u00e4ngigkeiten vA in den Formularen, dass das am Ende echt nur uneinheitlicher als jetzt ist", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r482860126", "createdAt": "2020-09-03T10:00:46Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/ConceptQueryPlan.java", "diffHunk": "@@ -81,9 +81,9 @@ protected void checkRequiredTables(WorkerStorage storage) {\n \t\t}\n \t}\n \n-\tpublic void init(Entity entity) {\n+\tpublic void init(Entity entity, QueryExecutionContext ctx) {\n \t\tthis.entity = entity;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIxMDk2Mg=="}, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODg4Nzk1OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/SecondaryIdQueryPlan.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTowNzo1NFrOHK6-uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDowMTozMVrOHMfeJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIxNDEzNg==", "bodyText": "@OverRide", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r481214136", "createdAt": "2020-09-01T15:07:54Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/SecondaryIdQueryPlan.java", "diffHunk": "@@ -56,39 +57,47 @@ private Column findSecondaryIdColumn(TableId tableId, NamespacedStorage storage)\n \t */\n \tprivate ConceptQueryPlan createChild(Object key, QueryExecutionContext currentContext, Bucket currentBucket) {\n \t\tConceptQueryPlan plan = query.clone(new CloneContext(currentContext.getStorage()));\n-\t\tplan.init(query.getEntity());\n+\t\tplan.init(query.getEntity(), currentContext);\n \t\tplan.nextTable(currentContext, currentSecondaryIdColumn.getId().getTable());\n \t\tplan.isOfInterest(currentBucket);\n \t\tplan.nextBlock(currentBucket);\n \t\treturn plan;\n \t}\n-\t\n+\n+\tpublic void init(QueryExecutionContext ctx, Entity entity) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2MDU4MQ==", "bodyText": "ist keine ConceptQueryPlan, also klappt das nicht", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r482860581", "createdAt": "2020-09-03T10:01:31Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/SecondaryIdQueryPlan.java", "diffHunk": "@@ -56,39 +57,47 @@ private Column findSecondaryIdColumn(TableId tableId, NamespacedStorage storage)\n \t */\n \tprivate ConceptQueryPlan createChild(Object key, QueryExecutionContext currentContext, Bucket currentBucket) {\n \t\tConceptQueryPlan plan = query.clone(new CloneContext(currentContext.getStorage()));\n-\t\tplan.init(query.getEntity());\n+\t\tplan.init(query.getEntity(), currentContext);\n \t\tplan.nextTable(currentContext, currentSecondaryIdColumn.getId().getTable());\n \t\tplan.isOfInterest(currentBucket);\n \t\tplan.nextBlock(currentBucket);\n \t\treturn plan;\n \t}\n-\t\n+\n+\tpublic void init(QueryExecutionContext ctx, Entity entity) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIxNDEzNg=="}, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODkxNTA2OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/SecondaryIdQueryPlan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNToxMTo0NFrOHK7PuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNToxMTo0NFrOHK7PuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIxODQ4OA==", "bodyText": "Hier vermischt du init- und execution-Phase von diesem Object. Da beide die selben Parameter bekommen, sollte man \u00fcberlegen ob die Init-Phase noch etwas besonderes macht oder weggelassen werden kann.", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r481218488", "createdAt": "2020-09-01T15:11:44Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/SecondaryIdQueryPlan.java", "diffHunk": "@@ -56,39 +57,47 @@ private Column findSecondaryIdColumn(TableId tableId, NamespacedStorage storage)\n \t */\n \tprivate ConceptQueryPlan createChild(Object key, QueryExecutionContext currentContext, Bucket currentBucket) {\n \t\tConceptQueryPlan plan = query.clone(new CloneContext(currentContext.getStorage()));\n-\t\tplan.init(query.getEntity());\n+\t\tplan.init(query.getEntity(), currentContext);\n \t\tplan.nextTable(currentContext, currentSecondaryIdColumn.getId().getTable());\n \t\tplan.isOfInterest(currentBucket);\n \t\tplan.nextBlock(currentBucket);\n \t\treturn plan;\n \t}\n-\t\n+\n+\tpublic void init(QueryExecutionContext ctx, Entity entity) {\n+\t\tquery.init(entity, ctx);\n+\t}\n+\n \t/**\n \t * This is the same execution as a typical ConceptQueryPlan. The difference\n \t * is that this method will create a new cloned child for each distinct\n \t * secondaryId it encounters during iteration.\n \t */\n \t@Override\n \tpublic EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n-\t\tif(!query.isOfInterest(entity)){\n+\n+\n+\t\tinit(ctx, entity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODkyMTk5OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/SecondaryIdQueryPlan.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNToxMjo0MVrOHK7UVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDoxNDoyOVrOHSqCiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIxOTY3MA==", "bodyText": "Wieder das Vermischen. query sollte schon initializiert sein.", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r481219670", "createdAt": "2020-09-01T15:12:41Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/SecondaryIdQueryPlan.java", "diffHunk": "@@ -56,39 +57,47 @@ private Column findSecondaryIdColumn(TableId tableId, NamespacedStorage storage)\n \t */\n \tprivate ConceptQueryPlan createChild(Object key, QueryExecutionContext currentContext, Bucket currentBucket) {\n \t\tConceptQueryPlan plan = query.clone(new CloneContext(currentContext.getStorage()));\n-\t\tplan.init(query.getEntity());\n+\t\tplan.init(query.getEntity(), currentContext);\n \t\tplan.nextTable(currentContext, currentSecondaryIdColumn.getId().getTable());\n \t\tplan.isOfInterest(currentBucket);\n \t\tplan.nextBlock(currentBucket);\n \t\treturn plan;\n \t}\n-\t\n+\n+\tpublic void init(QueryExecutionContext ctx, Entity entity) {\n+\t\tquery.init(entity, ctx);\n+\t}\n+\n \t/**\n \t * This is the same execution as a typical ConceptQueryPlan. The difference\n \t * is that this method will create a new cloned child for each distinct\n \t * secondaryId it encounters during iteration.\n \t */\n \t@Override\n \tpublic EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n-\t\tif(!query.isOfInterest(entity)){\n+\n+\n+\t\tinit(ctx, entity);\n+\n+\t\tif (!query.isOfInterest(entity)) {\n \t\t\treturn EntityResult.notContained();\n \t\t}\n \n \t\tquery.checkRequiredTables(ctx.getStorage());\n-\t\tquery.init(entity);\n+\t\tquery.init(entity, ctx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMyNTE5Mw==", "bodyText": "war hier tats\u00e4chlich falsch", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r489325193", "createdAt": "2020-09-16T10:14:29Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/SecondaryIdQueryPlan.java", "diffHunk": "@@ -56,39 +57,47 @@ private Column findSecondaryIdColumn(TableId tableId, NamespacedStorage storage)\n \t */\n \tprivate ConceptQueryPlan createChild(Object key, QueryExecutionContext currentContext, Bucket currentBucket) {\n \t\tConceptQueryPlan plan = query.clone(new CloneContext(currentContext.getStorage()));\n-\t\tplan.init(query.getEntity());\n+\t\tplan.init(query.getEntity(), currentContext);\n \t\tplan.nextTable(currentContext, currentSecondaryIdColumn.getId().getTable());\n \t\tplan.isOfInterest(currentBucket);\n \t\tplan.nextBlock(currentBucket);\n \t\treturn plan;\n \t}\n-\t\n+\n+\tpublic void init(QueryExecutionContext ctx, Entity entity) {\n+\t\tquery.init(entity, ctx);\n+\t}\n+\n \t/**\n \t * This is the same execution as a typical ConceptQueryPlan. The difference\n \t * is that this method will create a new cloned child for each distinct\n \t * secondaryId it encounters during iteration.\n \t */\n \t@Override\n \tpublic EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n-\t\tif(!query.isOfInterest(entity)){\n+\n+\n+\t\tinit(ctx, entity);\n+\n+\t\tif (!query.isOfInterest(entity)) {\n \t\t\treturn EntityResult.notContained();\n \t\t}\n \n \t\tquery.checkRequiredTables(ctx.getStorage());\n-\t\tquery.init(entity);\n+\t\tquery.init(entity, ctx);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIxOTY3MA=="}, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODk4NTg5OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/specific/DateRestrictingNode.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNToyNjozNFrOHK78aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNDozMDozMVrOHV9CJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyOTkyOA==", "bodyText": "Sollte hier nicht ein Error geworfen werden? Das w\u00e4re doch ein IllegalState, oder?", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r481229928", "createdAt": "2020-09-01T15:26:34Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/specific/DateRestrictingNode.java", "diffHunk": "@@ -55,8 +54,7 @@ public void nextTable(QueryExecutionContext ctx, TableId currentTable) {\n \n \t@Override\n \tpublic boolean isOfInterest(Bucket bucket) {\n-\t\tEntityRow currentRow = Objects.requireNonNull(preCurrentRow.get(bucket.getId()));\n-\t\tCBlock cBlock = currentRow.getCBlock();\n+\t\tCBlock cBlock = Objects.requireNonNull(preCurrentRow.get(bucket.getId()));\n \t\tint localId = bucket.toLocal(entity.getId());\n \t\tif(cBlock.getMinDate()[localId] > cBlock.getMaxDate()[localId]) {\n \t\t\treturn false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2MTU2MA==", "bodyText": "Ist doch hier eine NullPointerException dann?", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r482861560", "createdAt": "2020-09-03T10:03:07Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/specific/DateRestrictingNode.java", "diffHunk": "@@ -55,8 +54,7 @@ public void nextTable(QueryExecutionContext ctx, TableId currentTable) {\n \n \t@Override\n \tpublic boolean isOfInterest(Bucket bucket) {\n-\t\tEntityRow currentRow = Objects.requireNonNull(preCurrentRow.get(bucket.getId()));\n-\t\tCBlock cBlock = currentRow.getCBlock();\n+\t\tCBlock cBlock = Objects.requireNonNull(preCurrentRow.get(bucket.getId()));\n \t\tint localId = bucket.toLocal(entity.getId());\n \t\tif(cBlock.getMinDate()[localId] > cBlock.getMaxDate()[localId]) {\n \t\t\treturn false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyOTkyOA=="}, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgzMzQxMg==", "bodyText": "Ich meinte das if(cBlock.getMinDate()[localId] > cBlock.getMaxDate()[localId])", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r491833412", "createdAt": "2020-09-21T07:17:23Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/specific/DateRestrictingNode.java", "diffHunk": "@@ -55,8 +54,7 @@ public void nextTable(QueryExecutionContext ctx, TableId currentTable) {\n \n \t@Override\n \tpublic boolean isOfInterest(Bucket bucket) {\n-\t\tEntityRow currentRow = Objects.requireNonNull(preCurrentRow.get(bucket.getId()));\n-\t\tCBlock cBlock = currentRow.getCBlock();\n+\t\tCBlock cBlock = Objects.requireNonNull(preCurrentRow.get(bucket.getId()));\n \t\tint localId = bucket.toLocal(entity.getId());\n \t\tif(cBlock.getMinDate()[localId] > cBlock.getMaxDate()[localId]) {\n \t\t\treturn false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyOTkyOA=="}, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1MTQxNA==", "bodyText": "ah, das sieht nach einem bug aus D:", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r491851414", "createdAt": "2020-09-21T07:54:38Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/specific/DateRestrictingNode.java", "diffHunk": "@@ -55,8 +54,7 @@ public void nextTable(QueryExecutionContext ctx, TableId currentTable) {\n \n \t@Override\n \tpublic boolean isOfInterest(Bucket bucket) {\n-\t\tEntityRow currentRow = Objects.requireNonNull(preCurrentRow.get(bucket.getId()));\n-\t\tCBlock cBlock = currentRow.getCBlock();\n+\t\tCBlock cBlock = Objects.requireNonNull(preCurrentRow.get(bucket.getId()));\n \t\tint localId = bucket.toLocal(entity.getId());\n \t\tif(cBlock.getMinDate()[localId] > cBlock.getMaxDate()[localId]) {\n \t\t\treturn false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyOTkyOA=="}, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc4MTg2NQ==", "bodyText": "nein, dh, dass sie nicht included sind.", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r492781865", "createdAt": "2020-09-22T14:30:13Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/specific/DateRestrictingNode.java", "diffHunk": "@@ -55,8 +54,7 @@ public void nextTable(QueryExecutionContext ctx, TableId currentTable) {\n \n \t@Override\n \tpublic boolean isOfInterest(Bucket bucket) {\n-\t\tEntityRow currentRow = Objects.requireNonNull(preCurrentRow.get(bucket.getId()));\n-\t\tCBlock cBlock = currentRow.getCBlock();\n+\t\tCBlock cBlock = Objects.requireNonNull(preCurrentRow.get(bucket.getId()));\n \t\tint localId = bucket.toLocal(entity.getId());\n \t\tif(cBlock.getMinDate()[localId] > cBlock.getMaxDate()[localId]) {\n \t\t\treturn false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyOTkyOA=="}, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc4MjExOA==", "bodyText": "com.bakdata.conquery.models.events.CBlock#initIndizes", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r492782118", "createdAt": "2020-09-22T14:30:31Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/specific/DateRestrictingNode.java", "diffHunk": "@@ -55,8 +54,7 @@ public void nextTable(QueryExecutionContext ctx, TableId currentTable) {\n \n \t@Override\n \tpublic boolean isOfInterest(Bucket bucket) {\n-\t\tEntityRow currentRow = Objects.requireNonNull(preCurrentRow.get(bucket.getId()));\n-\t\tCBlock cBlock = currentRow.getCBlock();\n+\t\tCBlock cBlock = Objects.requireNonNull(preCurrentRow.get(bucket.getId()));\n \t\tint localId = bucket.toLocal(entity.getId());\n \t\tif(cBlock.getMinDate()[localId] > cBlock.getMaxDate()[localId]) {\n \t\t\treturn false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyOTkyOA=="}, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTA0NTQ5OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/worker/Worker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTo0MDo1MlrOHK8iVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTo0MDo1MlrOHK8iVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzOTYzOQ==", "bodyText": "entityBucketSize sollte in der WorkerInformation stecken, das wird auf dem release-Branch deutlicher. Dort existiert die WorkerInformation nur noch im WorkerStorage und bleibt so konsistent f\u00fcr den Worker sollte sich die entityBucketSize zwischen neustarts \u00e4ndern.", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r481239639", "createdAt": "2020-09-01T15:40:52Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/worker/Worker.java", "diffHunk": "@@ -34,12 +34,12 @@\n \t@Getter\n \tprivate final ExecutorService executorService;\n \t\n-\tpublic Worker(WorkerInformation info, JobManager jobManager, WorkerStorage storage, QueryExecutor queryExecutor, ExecutorService executorService) {\n+\tpublic Worker(WorkerInformation info, JobManager jobManager, WorkerStorage storage, QueryExecutor queryExecutor, ExecutorService executorService, int entityBucketSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTA1ODYzOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/resources/admin/AdminServlet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTo0NDowMVrOHK8qrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTo0NDowMVrOHK8qrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0MTc3NA==", "bodyText": "Hier hast du masterCommand.getConfig() und ConqueryConfig.getInstance().getCluster().getEntityBucketSize()", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r481241774", "createdAt": "2020-09-01T15:44:01Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/resources/admin/AdminServlet.java", "diffHunk": "@@ -81,12 +82,14 @@ public void register(MasterCommand masterCommand, AuthorizationController contro\n \t\tjerseyConfig.register(new ViewMessageBodyWriter(masterCommand.getEnvironment().metrics(), Collections.singleton(freemarker)));\n \n \t\tadminProcessor = new AdminProcessor(\n-\t\t\tmasterCommand.getConfig(),\n-\t\t\tmasterCommand.getStorage(),\n-\t\t\tmasterCommand.getNamespaces(),\n-\t\t\tmasterCommand.getJobManager(),\n-\t\t\tmasterCommand.getMaintenanceService(),\n-\t\t\tmasterCommand.getValidator());\n+\t\t\t\tmasterCommand.getConfig(),\n+\t\t\t\tmasterCommand.getStorage(),\n+\t\t\t\tmasterCommand.getNamespaces(),\n+\t\t\t\tmasterCommand.getJobManager(),\n+\t\t\t\tmasterCommand.getMaintenanceService(),\n+\t\t\t\tmasterCommand.getValidator(),\n+\t\t\t\tConqueryConfig.getInstance().getCluster().getEntityBucketSize()\n+\t\t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTA2NDkzOnYy", "diffSide": "RIGHT", "path": "backend/src/test/java/com/bakdata/conquery/integration/tests/RestartTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTo0NToyNlrOHK8ulw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTo0NToyNlrOHK8ulw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0Mjc3NQ==", "bodyText": "\ud83d\ude04", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r481242775", "createdAt": "2020-09-01T15:45:26Z", "author": {"login": "thoniTUB"}, "path": "backend/src/test/java/com/bakdata/conquery/integration/tests/RestartTest.java", "diffHunk": "@@ -49,13 +52,13 @@ public void execute(String name, TestConquery testConquery) throws Exception {\n \n \t\tMasterCommand master = testConquery.getStandaloneCommand().getMaster();\n \t\tAdminProcessor adminProcessor = new AdminProcessor(\n-\n \t\t\t\tmaster.getConfig(),\n \t\t\t\tmaster.getStorage(),\n \t\t\t\tmaster.getNamespaces(),\n \t\t\t\tmaster.getJobManager(),\n \t\t\t\tmaster.getMaintenanceService(),\n-\t\t\t\tmaster.getValidator()\n+\t\t\t\tmaster.getValidator(),\n+\t\t\t\tentityBucketSize // todo this is unhealthy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTA2Njk0OnYy", "diffSide": "RIGHT", "path": "backend/src/test/java/com/bakdata/conquery/integration/tests/RestartTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTo0NTo1NFrOHK8vzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTo0NTo1NFrOHK8vzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0MzA4Ng==", "bodyText": "Exsistiert der jetzt noch?", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r481243086", "createdAt": "2020-09-01T15:45:54Z", "author": {"login": "thoniTUB"}, "path": "backend/src/test/java/com/bakdata/conquery/integration/tests/RestartTest.java", "diffHunk": "@@ -115,7 +118,7 @@ public void execute(String name, TestConquery testConquery) throws Exception {\n \t\t}\n \n \t\t// TODO: 21.07.2020 FK: This is temporary logging for finding a bug in CI.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3426aca5062885248e532f59b422d4d06d48076d"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NDExOTg4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/events/CBlock.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNDo1MzoyNlrOHV-LMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNDo1MzoyNlrOHV-LMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwMDgxOA==", "bodyText": "In C ist das nicht gerne gesehen, bei Java kann ich mir sowas auch vorstellen, weil man sowas produzieren kann:\nprivate int minDate, maxDate []; oder private int [] minDate, maxDate;\nDann ist auf den ersten Blick nicht ganz klar was gemeint ist, wenn nicht eine Zeile pro Deklaration verwendet wird.", "url": "https://github.com/bakdata/conquery/pull/1330#discussion_r492800818", "createdAt": "2020-09-22T14:53:26Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/CBlock.java", "diffHunk": "@@ -43,8 +43,7 @@\n \t * Statistic for fast lookup if entity is of interest.\n \t * Int array for memory performance.\n \t */\n-\tprivate int[] minDate;\n-\tprivate int[] maxDate;\n+\tprivate int[] minDate, maxDate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c051729b3d46e11baf493e54cb9fc9550dff930"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1362, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}