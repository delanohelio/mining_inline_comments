{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNjU1ODU0", "number": 1064, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODoyNDoyN1rODpaNuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzowNjowOFrODp3CoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzQ3NzA1OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODoyNDoyN1rOF4kLdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODoyNDoyN1rOF4kLdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg1NzMzMg==", "bodyText": "da hast du was vergessen", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394857332", "createdAt": "2020-03-19T08:24:27Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,117 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+import com.bakdata.conquery.io.HasResourceBundle;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.collections4.list.UnmodifiableList;\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n-public enum DateContextMode {\n+public enum DateContextMode implements HasResourceBundle {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\tArrayUtils.indexOf(DateContextMode.values(), this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzQ4NTAwOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODoyNzoyMFrOF4kQ8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODoyNzoyMFrOF4kQ8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg1ODczNg==", "bodyText": "l\u00f6schen", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394858736", "createdAt": "2020-03-19T08:27:20Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,117 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+import com.bakdata.conquery.io.HasResourceBundle;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.collections4.list.UnmodifiableList;\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n-public enum DateContextMode {\n+public enum DateContextMode implements HasResourceBundle {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\tArrayUtils.indexOf(DateContextMode.values(), this);\n+\t\t\treturn List.of(range);\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * years.\n \t */\n-\tYEAR_WISE,\n+\tYEARS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredYears();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * quarters.\n \t */\n-\tQUARTER_WISE;\n+\tQUARTERS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredQuarters();\n+\t\t}\n+\t},\n+\t\n+\t/**\n+\t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n+\t * days.\n+\t */\n+\tDAYS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredDays();\n+\t\t}\n+\t};\n+\t\n+//\tThis causes a runtime error at the moment. See workaround below.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzQ5MDMyOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODoyOTowMlrOF4kUaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODoyOTowMlrOF4kUaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg1OTYyNw==", "bodyText": "ouch", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394859627", "createdAt": "2020-03-19T08:29:02Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,117 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+import com.bakdata.conquery.io.HasResourceBundle;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.collections4.list.UnmodifiableList;\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n-public enum DateContextMode {\n+public enum DateContextMode implements HasResourceBundle {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\tArrayUtils.indexOf(DateContextMode.values(), this);\n+\t\t\treturn List.of(range);\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * years.\n \t */\n-\tYEAR_WISE,\n+\tYEARS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredYears();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * quarters.\n \t */\n-\tQUARTER_WISE;\n+\tQUARTERS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredQuarters();\n+\t\t}\n+\t},\n+\t\n+\t/**\n+\t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n+\t * days.\n+\t */\n+\tDAYS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredDays();\n+\t\t}\n+\t};\n+\t\n+//\tThis causes a runtime error at the moment. See workaround below.\n+//\tprivate DateContextMode() {\n+//\t\tList<DateContextMode> list = new ArrayList<>();\n+//\t\tDateContextMode current = this;\n+//\t\tdo {\n+//\t\t\tlist.add(current);\n+//\t\t\tcurrent = getNextCoarserSubdivision(current);\n+//\t\t}while(current != null);\n+//\t\t\n+//\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+//\t}\n+\t\n+\tprivate List<DateContextMode> thisAndCoarserSubdivisions;\n+\t\n+\t/**\n+\t * WORKAROUND because the eclipse compiler has bug similar to this one:\n+\t * https://bugs.eclipse.org/bugs/show_bug.cgi?id=81454", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzQ5NDcwOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODozMDozOFrOF4kXcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjo0Nzo1M1rOF43Uxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDQwMA==", "bodyText": "Find ich cute, aber k\u00f6nntest du auch fast \u00fcber ein privates Feld l\u00f6sen, dass du in der declaration setzt.", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394860400", "createdAt": "2020-03-19T08:30:38Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,117 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+import com.bakdata.conquery.io.HasResourceBundle;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.collections4.list.UnmodifiableList;\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n-public enum DateContextMode {\n+public enum DateContextMode implements HasResourceBundle {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\tArrayUtils.indexOf(DateContextMode.values(), this);\n+\t\t\treturn List.of(range);\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * years.\n \t */\n-\tYEAR_WISE,\n+\tYEARS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredYears();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * quarters.\n \t */\n-\tQUARTER_WISE;\n+\tQUARTERS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredQuarters();\n+\t\t}\n+\t},\n+\t\n+\t/**\n+\t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n+\t * days.\n+\t */\n+\tDAYS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredDays();\n+\t\t}\n+\t};\n+\t\n+//\tThis causes a runtime error at the moment. See workaround below.\n+//\tprivate DateContextMode() {\n+//\t\tList<DateContextMode> list = new ArrayList<>();\n+//\t\tDateContextMode current = this;\n+//\t\tdo {\n+//\t\t\tlist.add(current);\n+//\t\t\tcurrent = getNextCoarserSubdivision(current);\n+//\t\t}while(current != null);\n+//\t\t\n+//\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+//\t}\n+\t\n+\tprivate List<DateContextMode> thisAndCoarserSubdivisions;\n+\t\n+\t/**\n+\t * WORKAROUND because the eclipse compiler has bug similar to this one:\n+\t * https://bugs.eclipse.org/bugs/show_bug.cgi?id=81454\n+\t */\n+\t@JsonIgnore\n+\tpublic List<DateContextMode> getThisAndCoarserSubdivisions(){\n+\t\tif (thisAndCoarserSubdivisions != null) {\n+\t\t\treturn thisAndCoarserSubdivisions;\n+\t\t}\n+\t\tList<DateContextMode> list = new ArrayList<>();\n+\t\tDateContextMode current = this;\n+\t\tdo {\n+\t\t\t// Sort from coarse to finer\n+\t\t\tlist.add(0,current);\n+\t\t\tcurrent = getNextCoarserSubdivision(current);\n+\t\t}while(current != null);\n+\t\t\n+\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+\t\treturn thisAndCoarserSubdivisions;\n+\t}\n+\t\n+\n+\tpublic List<CDateRange> subdivideRange(CDateRange range){\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\t\n+\tprivate static DateContextMode getNextCoarserSubdivision(DateContextMode mode) {\n+\t\tDateContextMode[] modes = DateContextMode.values();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxMTQ5NQ==", "bodyText": "Also ich kann das hier machen und die Funktion weglassen:\n\t@Getter\n\t@JsonIgnore\n\tprivate DateContextMode[] thisAndCoarserSubdivisions;\n\n\t\n\t@JsonIgnore\n\tpublic DateContextMode[] getThisAndCoarserSubdivisions(){\n\t\tif (thisAndCoarserSubdivisions != null) {\n\t\t\treturn thisAndCoarserSubdivisions;\n\t\t}\n\t\tthisAndCoarserSubdivisions = org.apache.commons.lang3.ArrayUtils.subarray(DateContextMode.values(), 0, this.ordinal()+1);\n\t\treturn thisAndCoarserSubdivisions;\t\t\n\t}\n\nIch kann aber nicht in der Initialisierungsphase auf DateContextMode.values() zugreifen. Das gibt mit eine NullPointerException", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395011495", "createdAt": "2020-03-19T13:08:53Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,117 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+import com.bakdata.conquery.io.HasResourceBundle;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.collections4.list.UnmodifiableList;\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n-public enum DateContextMode {\n+public enum DateContextMode implements HasResourceBundle {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\tArrayUtils.indexOf(DateContextMode.values(), this);\n+\t\t\treturn List.of(range);\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * years.\n \t */\n-\tYEAR_WISE,\n+\tYEARS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredYears();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * quarters.\n \t */\n-\tQUARTER_WISE;\n+\tQUARTERS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredQuarters();\n+\t\t}\n+\t},\n+\t\n+\t/**\n+\t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n+\t * days.\n+\t */\n+\tDAYS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredDays();\n+\t\t}\n+\t};\n+\t\n+//\tThis causes a runtime error at the moment. See workaround below.\n+//\tprivate DateContextMode() {\n+//\t\tList<DateContextMode> list = new ArrayList<>();\n+//\t\tDateContextMode current = this;\n+//\t\tdo {\n+//\t\t\tlist.add(current);\n+//\t\t\tcurrent = getNextCoarserSubdivision(current);\n+//\t\t}while(current != null);\n+//\t\t\n+//\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+//\t}\n+\t\n+\tprivate List<DateContextMode> thisAndCoarserSubdivisions;\n+\t\n+\t/**\n+\t * WORKAROUND because the eclipse compiler has bug similar to this one:\n+\t * https://bugs.eclipse.org/bugs/show_bug.cgi?id=81454\n+\t */\n+\t@JsonIgnore\n+\tpublic List<DateContextMode> getThisAndCoarserSubdivisions(){\n+\t\tif (thisAndCoarserSubdivisions != null) {\n+\t\t\treturn thisAndCoarserSubdivisions;\n+\t\t}\n+\t\tList<DateContextMode> list = new ArrayList<>();\n+\t\tDateContextMode current = this;\n+\t\tdo {\n+\t\t\t// Sort from coarse to finer\n+\t\t\tlist.add(0,current);\n+\t\t\tcurrent = getNextCoarserSubdivision(current);\n+\t\t}while(current != null);\n+\t\t\n+\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+\t\treturn thisAndCoarserSubdivisions;\n+\t}\n+\t\n+\n+\tpublic List<CDateRange> subdivideRange(CDateRange range){\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\t\n+\tprivate static DateContextMode getNextCoarserSubdivision(DateContextMode mode) {\n+\t\tDateContextMode[] modes = DateContextMode.values();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDQwMA=="}, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNTE2NQ==", "bodyText": "@Getter\n\t@JsonIgnore\n\tprivate DateContextMode coarser;\n\n\t\n\t@JsonIgnore\n\tpublic DateContextMode[] getThisAndCoarserSubdivisions(){\n\t\tif (thisAndCoarserSubdivisions != null) {\n\t\t\treturn thisAndCoarserSubdivisions;\n\t\t}\n                return thisAndCoarserSubdivisions = coarser != null ? List.concat(List.of(this), coarser.getThisAndCoarserSubdivisions()) : List.of(this);\n\n\t}\n\n\nAber das mit ordinal - 1 geht eigentlich auch, wobei du da halt die reihenfolge beachten musst, was ok aber doof ist, machen wir auch woanders.  Du kannst in dem Schema von mir halt unterschiedliche Pfade gehen, wenn das interessant sein sollte (denke nicht tbh).", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395015165", "createdAt": "2020-03-19T13:14:49Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,117 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+import com.bakdata.conquery.io.HasResourceBundle;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.collections4.list.UnmodifiableList;\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n-public enum DateContextMode {\n+public enum DateContextMode implements HasResourceBundle {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\tArrayUtils.indexOf(DateContextMode.values(), this);\n+\t\t\treturn List.of(range);\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * years.\n \t */\n-\tYEAR_WISE,\n+\tYEARS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredYears();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * quarters.\n \t */\n-\tQUARTER_WISE;\n+\tQUARTERS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredQuarters();\n+\t\t}\n+\t},\n+\t\n+\t/**\n+\t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n+\t * days.\n+\t */\n+\tDAYS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredDays();\n+\t\t}\n+\t};\n+\t\n+//\tThis causes a runtime error at the moment. See workaround below.\n+//\tprivate DateContextMode() {\n+//\t\tList<DateContextMode> list = new ArrayList<>();\n+//\t\tDateContextMode current = this;\n+//\t\tdo {\n+//\t\t\tlist.add(current);\n+//\t\t\tcurrent = getNextCoarserSubdivision(current);\n+//\t\t}while(current != null);\n+//\t\t\n+//\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+//\t}\n+\t\n+\tprivate List<DateContextMode> thisAndCoarserSubdivisions;\n+\t\n+\t/**\n+\t * WORKAROUND because the eclipse compiler has bug similar to this one:\n+\t * https://bugs.eclipse.org/bugs/show_bug.cgi?id=81454\n+\t */\n+\t@JsonIgnore\n+\tpublic List<DateContextMode> getThisAndCoarserSubdivisions(){\n+\t\tif (thisAndCoarserSubdivisions != null) {\n+\t\t\treturn thisAndCoarserSubdivisions;\n+\t\t}\n+\t\tList<DateContextMode> list = new ArrayList<>();\n+\t\tDateContextMode current = this;\n+\t\tdo {\n+\t\t\t// Sort from coarse to finer\n+\t\t\tlist.add(0,current);\n+\t\t\tcurrent = getNextCoarserSubdivision(current);\n+\t\t}while(current != null);\n+\t\t\n+\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+\t\treturn thisAndCoarserSubdivisions;\n+\t}\n+\t\n+\n+\tpublic List<CDateRange> subdivideRange(CDateRange range){\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\t\n+\tprivate static DateContextMode getNextCoarserSubdivision(DateContextMode mode) {\n+\t\tDateContextMode[] modes = DateContextMode.values();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDQwMA=="}, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNTMyMA==", "bodyText": "das ist pseudeocode fyi", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395015320", "createdAt": "2020-03-19T13:15:05Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,117 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+import com.bakdata.conquery.io.HasResourceBundle;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.collections4.list.UnmodifiableList;\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n-public enum DateContextMode {\n+public enum DateContextMode implements HasResourceBundle {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\tArrayUtils.indexOf(DateContextMode.values(), this);\n+\t\t\treturn List.of(range);\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * years.\n \t */\n-\tYEAR_WISE,\n+\tYEARS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredYears();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * quarters.\n \t */\n-\tQUARTER_WISE;\n+\tQUARTERS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredQuarters();\n+\t\t}\n+\t},\n+\t\n+\t/**\n+\t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n+\t * days.\n+\t */\n+\tDAYS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredDays();\n+\t\t}\n+\t};\n+\t\n+//\tThis causes a runtime error at the moment. See workaround below.\n+//\tprivate DateContextMode() {\n+//\t\tList<DateContextMode> list = new ArrayList<>();\n+//\t\tDateContextMode current = this;\n+//\t\tdo {\n+//\t\t\tlist.add(current);\n+//\t\t\tcurrent = getNextCoarserSubdivision(current);\n+//\t\t}while(current != null);\n+//\t\t\n+//\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+//\t}\n+\t\n+\tprivate List<DateContextMode> thisAndCoarserSubdivisions;\n+\t\n+\t/**\n+\t * WORKAROUND because the eclipse compiler has bug similar to this one:\n+\t * https://bugs.eclipse.org/bugs/show_bug.cgi?id=81454\n+\t */\n+\t@JsonIgnore\n+\tpublic List<DateContextMode> getThisAndCoarserSubdivisions(){\n+\t\tif (thisAndCoarserSubdivisions != null) {\n+\t\t\treturn thisAndCoarserSubdivisions;\n+\t\t}\n+\t\tList<DateContextMode> list = new ArrayList<>();\n+\t\tDateContextMode current = this;\n+\t\tdo {\n+\t\t\t// Sort from coarse to finer\n+\t\t\tlist.add(0,current);\n+\t\t\tcurrent = getNextCoarserSubdivision(current);\n+\t\t}while(current != null);\n+\t\t\n+\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+\t\treturn thisAndCoarserSubdivisions;\n+\t}\n+\t\n+\n+\tpublic List<CDateRange> subdivideRange(CDateRange range){\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\t\n+\tprivate static DateContextMode getNextCoarserSubdivision(DateContextMode mode) {\n+\t\tDateContextMode[] modes = DateContextMode.values();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDQwMA=="}, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEwOTI1MQ==", "bodyText": "Aber wann setzt du coarser?", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395109251", "createdAt": "2020-03-19T15:22:20Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,117 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+import com.bakdata.conquery.io.HasResourceBundle;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.collections4.list.UnmodifiableList;\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n-public enum DateContextMode {\n+public enum DateContextMode implements HasResourceBundle {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\tArrayUtils.indexOf(DateContextMode.values(), this);\n+\t\t\treturn List.of(range);\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * years.\n \t */\n-\tYEAR_WISE,\n+\tYEARS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredYears();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * quarters.\n \t */\n-\tQUARTER_WISE;\n+\tQUARTERS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredQuarters();\n+\t\t}\n+\t},\n+\t\n+\t/**\n+\t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n+\t * days.\n+\t */\n+\tDAYS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredDays();\n+\t\t}\n+\t};\n+\t\n+//\tThis causes a runtime error at the moment. See workaround below.\n+//\tprivate DateContextMode() {\n+//\t\tList<DateContextMode> list = new ArrayList<>();\n+//\t\tDateContextMode current = this;\n+//\t\tdo {\n+//\t\t\tlist.add(current);\n+//\t\t\tcurrent = getNextCoarserSubdivision(current);\n+//\t\t}while(current != null);\n+//\t\t\n+//\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+//\t}\n+\t\n+\tprivate List<DateContextMode> thisAndCoarserSubdivisions;\n+\t\n+\t/**\n+\t * WORKAROUND because the eclipse compiler has bug similar to this one:\n+\t * https://bugs.eclipse.org/bugs/show_bug.cgi?id=81454\n+\t */\n+\t@JsonIgnore\n+\tpublic List<DateContextMode> getThisAndCoarserSubdivisions(){\n+\t\tif (thisAndCoarserSubdivisions != null) {\n+\t\t\treturn thisAndCoarserSubdivisions;\n+\t\t}\n+\t\tList<DateContextMode> list = new ArrayList<>();\n+\t\tDateContextMode current = this;\n+\t\tdo {\n+\t\t\t// Sort from coarse to finer\n+\t\t\tlist.add(0,current);\n+\t\t\tcurrent = getNextCoarserSubdivision(current);\n+\t\t}while(current != null);\n+\t\t\n+\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+\t\treturn thisAndCoarserSubdivisions;\n+\t}\n+\t\n+\n+\tpublic List<CDateRange> subdivideRange(CDateRange range){\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\t\n+\tprivate static DateContextMode getNextCoarserSubdivision(DateContextMode mode) {\n+\t\tDateContextMode[] modes = DateContextMode.values();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDQwMA=="}, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0Nzk4MA==", "bodyText": "Im Konstruktor des Enums, also noch nen RequiredArgsCtor dran pappen.\nBeispiel: com.bakdata.conquery.io.xodus.StoreInfo", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395147980", "createdAt": "2020-03-19T16:15:06Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,117 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+import com.bakdata.conquery.io.HasResourceBundle;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.collections4.list.UnmodifiableList;\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n-public enum DateContextMode {\n+public enum DateContextMode implements HasResourceBundle {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\tArrayUtils.indexOf(DateContextMode.values(), this);\n+\t\t\treturn List.of(range);\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * years.\n \t */\n-\tYEAR_WISE,\n+\tYEARS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredYears();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * quarters.\n \t */\n-\tQUARTER_WISE;\n+\tQUARTERS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredQuarters();\n+\t\t}\n+\t},\n+\t\n+\t/**\n+\t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n+\t * days.\n+\t */\n+\tDAYS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredDays();\n+\t\t}\n+\t};\n+\t\n+//\tThis causes a runtime error at the moment. See workaround below.\n+//\tprivate DateContextMode() {\n+//\t\tList<DateContextMode> list = new ArrayList<>();\n+//\t\tDateContextMode current = this;\n+//\t\tdo {\n+//\t\t\tlist.add(current);\n+//\t\t\tcurrent = getNextCoarserSubdivision(current);\n+//\t\t}while(current != null);\n+//\t\t\n+//\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+//\t}\n+\t\n+\tprivate List<DateContextMode> thisAndCoarserSubdivisions;\n+\t\n+\t/**\n+\t * WORKAROUND because the eclipse compiler has bug similar to this one:\n+\t * https://bugs.eclipse.org/bugs/show_bug.cgi?id=81454\n+\t */\n+\t@JsonIgnore\n+\tpublic List<DateContextMode> getThisAndCoarserSubdivisions(){\n+\t\tif (thisAndCoarserSubdivisions != null) {\n+\t\t\treturn thisAndCoarserSubdivisions;\n+\t\t}\n+\t\tList<DateContextMode> list = new ArrayList<>();\n+\t\tDateContextMode current = this;\n+\t\tdo {\n+\t\t\t// Sort from coarse to finer\n+\t\t\tlist.add(0,current);\n+\t\t\tcurrent = getNextCoarserSubdivision(current);\n+\t\t}while(current != null);\n+\t\t\n+\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+\t\treturn thisAndCoarserSubdivisions;\n+\t}\n+\t\n+\n+\tpublic List<CDateRange> subdivideRange(CDateRange range){\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\t\n+\tprivate static DateContextMode getNextCoarserSubdivision(DateContextMode mode) {\n+\t\tDateContextMode[] modes = DateContextMode.values();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDQwMA=="}, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE3MTAxNA==", "bodyText": "Ah okay, jetzt wei\u00df ich was du meinst ;)", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395171014", "createdAt": "2020-03-19T16:47:53Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,117 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+import com.bakdata.conquery.io.HasResourceBundle;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.collections4.list.UnmodifiableList;\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n-public enum DateContextMode {\n+public enum DateContextMode implements HasResourceBundle {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\tArrayUtils.indexOf(DateContextMode.values(), this);\n+\t\t\treturn List.of(range);\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * years.\n \t */\n-\tYEAR_WISE,\n+\tYEARS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredYears();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * quarters.\n \t */\n-\tQUARTER_WISE;\n+\tQUARTERS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredQuarters();\n+\t\t}\n+\t},\n+\t\n+\t/**\n+\t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n+\t * days.\n+\t */\n+\tDAYS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredDays();\n+\t\t}\n+\t};\n+\t\n+//\tThis causes a runtime error at the moment. See workaround below.\n+//\tprivate DateContextMode() {\n+//\t\tList<DateContextMode> list = new ArrayList<>();\n+//\t\tDateContextMode current = this;\n+//\t\tdo {\n+//\t\t\tlist.add(current);\n+//\t\t\tcurrent = getNextCoarserSubdivision(current);\n+//\t\t}while(current != null);\n+//\t\t\n+//\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+//\t}\n+\t\n+\tprivate List<DateContextMode> thisAndCoarserSubdivisions;\n+\t\n+\t/**\n+\t * WORKAROUND because the eclipse compiler has bug similar to this one:\n+\t * https://bugs.eclipse.org/bugs/show_bug.cgi?id=81454\n+\t */\n+\t@JsonIgnore\n+\tpublic List<DateContextMode> getThisAndCoarserSubdivisions(){\n+\t\tif (thisAndCoarserSubdivisions != null) {\n+\t\t\treturn thisAndCoarserSubdivisions;\n+\t\t}\n+\t\tList<DateContextMode> list = new ArrayList<>();\n+\t\tDateContextMode current = this;\n+\t\tdo {\n+\t\t\t// Sort from coarse to finer\n+\t\t\tlist.add(0,current);\n+\t\t\tcurrent = getNextCoarserSubdivision(current);\n+\t\t}while(current != null);\n+\t\t\n+\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+\t\treturn thisAndCoarserSubdivisions;\n+\t}\n+\t\n+\n+\tpublic List<CDateRange> subdivideRange(CDateRange range){\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\t\n+\tprivate static DateContextMode getNextCoarserSubdivision(DateContextMode mode) {\n+\t\tDateContextMode[] modes = DateContextMode.values();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDQwMA=="}, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzQ5NTgwOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODozMTowMVrOF4kYLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjo0MjoyNlrOF4srrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDU4OQ==", "bodyText": "mode.ordinal() -1", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394860589", "createdAt": "2020-03-19T08:31:01Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,117 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+import com.bakdata.conquery.io.HasResourceBundle;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.collections4.list.UnmodifiableList;\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n-public enum DateContextMode {\n+public enum DateContextMode implements HasResourceBundle {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\tArrayUtils.indexOf(DateContextMode.values(), this);\n+\t\t\treturn List.of(range);\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * years.\n \t */\n-\tYEAR_WISE,\n+\tYEARS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredYears();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * quarters.\n \t */\n-\tQUARTER_WISE;\n+\tQUARTERS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredQuarters();\n+\t\t}\n+\t},\n+\t\n+\t/**\n+\t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n+\t * days.\n+\t */\n+\tDAYS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredDays();\n+\t\t}\n+\t};\n+\t\n+//\tThis causes a runtime error at the moment. See workaround below.\n+//\tprivate DateContextMode() {\n+//\t\tList<DateContextMode> list = new ArrayList<>();\n+//\t\tDateContextMode current = this;\n+//\t\tdo {\n+//\t\t\tlist.add(current);\n+//\t\t\tcurrent = getNextCoarserSubdivision(current);\n+//\t\t}while(current != null);\n+//\t\t\n+//\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+//\t}\n+\t\n+\tprivate List<DateContextMode> thisAndCoarserSubdivisions;\n+\t\n+\t/**\n+\t * WORKAROUND because the eclipse compiler has bug similar to this one:\n+\t * https://bugs.eclipse.org/bugs/show_bug.cgi?id=81454\n+\t */\n+\t@JsonIgnore\n+\tpublic List<DateContextMode> getThisAndCoarserSubdivisions(){\n+\t\tif (thisAndCoarserSubdivisions != null) {\n+\t\t\treturn thisAndCoarserSubdivisions;\n+\t\t}\n+\t\tList<DateContextMode> list = new ArrayList<>();\n+\t\tDateContextMode current = this;\n+\t\tdo {\n+\t\t\t// Sort from coarse to finer\n+\t\t\tlist.add(0,current);\n+\t\t\tcurrent = getNextCoarserSubdivision(current);\n+\t\t}while(current != null);\n+\t\t\n+\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+\t\treturn thisAndCoarserSubdivisions;\n+\t}\n+\t\n+\n+\tpublic List<CDateRange> subdivideRange(CDateRange range){\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\t\n+\tprivate static DateContextMode getNextCoarserSubdivision(DateContextMode mode) {\n+\t\tDateContextMode[] modes = DateContextMode.values();\n+\t\tint index = ArrayUtils.indexOf(modes, mode) - 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5NjY1NQ==", "bodyText": "Danke!", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394996655", "createdAt": "2020-03-19T12:42:26Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,117 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+import com.bakdata.conquery.io.HasResourceBundle;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.collections4.list.UnmodifiableList;\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n-public enum DateContextMode {\n+public enum DateContextMode implements HasResourceBundle {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\tArrayUtils.indexOf(DateContextMode.values(), this);\n+\t\t\treturn List.of(range);\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * years.\n \t */\n-\tYEAR_WISE,\n+\tYEARS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredYears();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * quarters.\n \t */\n-\tQUARTER_WISE;\n+\tQUARTERS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredQuarters();\n+\t\t}\n+\t},\n+\t\n+\t/**\n+\t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n+\t * days.\n+\t */\n+\tDAYS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredDays();\n+\t\t}\n+\t};\n+\t\n+//\tThis causes a runtime error at the moment. See workaround below.\n+//\tprivate DateContextMode() {\n+//\t\tList<DateContextMode> list = new ArrayList<>();\n+//\t\tDateContextMode current = this;\n+//\t\tdo {\n+//\t\t\tlist.add(current);\n+//\t\t\tcurrent = getNextCoarserSubdivision(current);\n+//\t\t}while(current != null);\n+//\t\t\n+//\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+//\t}\n+\t\n+\tprivate List<DateContextMode> thisAndCoarserSubdivisions;\n+\t\n+\t/**\n+\t * WORKAROUND because the eclipse compiler has bug similar to this one:\n+\t * https://bugs.eclipse.org/bugs/show_bug.cgi?id=81454\n+\t */\n+\t@JsonIgnore\n+\tpublic List<DateContextMode> getThisAndCoarserSubdivisions(){\n+\t\tif (thisAndCoarserSubdivisions != null) {\n+\t\t\treturn thisAndCoarserSubdivisions;\n+\t\t}\n+\t\tList<DateContextMode> list = new ArrayList<>();\n+\t\tDateContextMode current = this;\n+\t\tdo {\n+\t\t\t// Sort from coarse to finer\n+\t\t\tlist.add(0,current);\n+\t\t\tcurrent = getNextCoarserSubdivision(current);\n+\t\t}while(current != null);\n+\t\t\n+\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+\t\treturn thisAndCoarserSubdivisions;\n+\t}\n+\t\n+\n+\tpublic List<CDateRange> subdivideRange(CDateRange range){\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\t\n+\tprivate static DateContextMode getNextCoarserSubdivision(DateContextMode mode) {\n+\t\tDateContextMode[] modes = DateContextMode.values();\n+\t\tint index = ArrayUtils.indexOf(modes, mode) - 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDU4OQ=="}, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzQ5NzkzOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextModeResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODozMTo1MlrOF4kZsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNToyMzo0NFrOF4zn3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDk3OA==", "bodyText": "Bitte anreissen was das macht oder wo du das benutzt", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394860978", "createdAt": "2020-03-19T08:31:52Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextModeResource.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.bakdata.conquery.apiv1.forms;\n+\n+import java.util.ListResourceBundle;\n+\n+import lombok.Getter;\n+\n+\n+public class DateContextModeResource extends ListResourceBundle {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTExMDM2NA==", "bodyText": "Habs \u00fcberarbeitet", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395110364", "createdAt": "2020-03-19T15:23:44Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextModeResource.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.bakdata.conquery.apiv1.forms;\n+\n+import java.util.ListResourceBundle;\n+\n+import lombok.Getter;\n+\n+\n+public class DateContextModeResource extends ListResourceBundle {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDk3OA=="}, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzQ5OTQ5OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextModeResource_en.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODozMjoyM1rOF4katw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODozMjoyM1rOF4katw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MTIzOQ==", "bodyText": "\u00f6h", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394861239", "createdAt": "2020-03-19T08:32:23Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextModeResource_en.java", "diffHunk": "@@ -0,0 +1,4 @@\n+package com.bakdata.conquery.apiv1.forms;\n+\n+public class DateContextModeResource_en extends DateContextModeResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzUxMDE0OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/HasResourceBundle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODozNjowMVrOF4khgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODozNjowMVrOF4khgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2Mjk3OA==", "bodyText": "doku", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394862978", "createdAt": "2020-03-19T08:36:01Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/HasResourceBundle.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.bakdata.conquery.io;\n+\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+public interface HasResourceBundle {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzUxNDY0OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/externalservice/ResultType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODozNzozMlrOF4kkaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNToyNToyMlrOF4zscg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MzcyMw==", "bodyText": "Was k\u00f6nnte hier sonst noch sein? Das sieht gef\u00e4hrtlich aus", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394863723", "createdAt": "2020-03-19T08:37:32Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/externalservice/ResultType.java", "diffHunk": "@@ -37,12 +38,28 @@ public String print(PrintSettings cfg, Object f) {\n \t\t\tif(cfg.isPrettyPrint()) {\n \t\t\t\treturn DECIMAL_FORMAT.format(f);\n \t\t\t}\n+\t\t\treturn f.toString();\n+\t\t}\n+\t},\n+\tCATEGORICAL,\n+\tRESOLUTION {\n+\t\t@Override\n+\t\tpublic String print(PrintSettings cfg, Object f) {\n+\t\t\tDateContextMode mode = null;\n+\t\t\tif(!( f instanceof DateContextMode)) {\n+\t\t\t\tmode = DateContextMode.valueOf(f.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTExMTUzOA==", "bodyText": "Habs jetzt gecatched falls da etwas kaputt geht", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395111538", "createdAt": "2020-03-19T15:25:22Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/externalservice/ResultType.java", "diffHunk": "@@ -37,12 +38,28 @@ public String print(PrintSettings cfg, Object f) {\n \t\t\tif(cfg.isPrettyPrint()) {\n \t\t\t\treturn DECIMAL_FORMAT.format(f);\n \t\t\t}\n+\t\t\treturn f.toString();\n+\t\t}\n+\t},\n+\tCATEGORICAL,\n+\tRESOLUTION {\n+\t\t@Override\n+\t\tpublic String print(PrintSettings cfg, Object f) {\n+\t\t\tDateContextMode mode = null;\n+\t\t\tif(!( f instanceof DateContextMode)) {\n+\t\t\t\tmode = DateContextMode.valueOf(f.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MzcyMw=="}, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzUyODI5OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/export/RelExportGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODo0MjowOFrOF4ktTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNDoxMzoyMVrOF5HRyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2NTk5OQ==", "bodyText": "Kannst du das nicht schon in der Validierung machen?", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394865999", "createdAt": "2020-03-19T08:42:08Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/export/RelExportGenerator.java", "diffHunk": "@@ -22,6 +25,17 @@ public static RelativeFormQuery generate(Namespaces namespaces, RelativeMode mod\n \t\tConceptManipulator.DEFAULT_SELECTS_WHEN_EMPTY.consume(mode.getFeatures(), namespaces);\n \t\tConceptManipulator.DEFAULT_SELECTS_WHEN_EMPTY.consume(mode.getOutcomes(), namespaces);\n \t\t\n+\t\tList<DateContextMode> resolutions = null;\n+\t\tif(mode.getForm().isAlsoCreateCoarserSubdivisions()) {\n+\t\t\tif(mode.getForm().getResolution().size() != 1) {\n+\t\t\t\tthrow new IllegalStateException(\"Abort Form creation, because coarser subdivision are requested and multiple resolutions are given. With 'alsoCreateCoarserSubdivisions' set to true, provide only one resolution.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5NzQ5Mg==", "bodyText": "Jap , ich habe jetzt gesehen wie du @ValidationMethod benutzt das ist cool", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394997492", "createdAt": "2020-03-19T12:43:52Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/export/RelExportGenerator.java", "diffHunk": "@@ -22,6 +25,17 @@ public static RelativeFormQuery generate(Namespaces namespaces, RelativeMode mod\n \t\tConceptManipulator.DEFAULT_SELECTS_WHEN_EMPTY.consume(mode.getFeatures(), namespaces);\n \t\tConceptManipulator.DEFAULT_SELECTS_WHEN_EMPTY.consume(mode.getOutcomes(), namespaces);\n \t\t\n+\t\tList<DateContextMode> resolutions = null;\n+\t\tif(mode.getForm().isAlsoCreateCoarserSubdivisions()) {\n+\t\t\tif(mode.getForm().getResolution().size() != 1) {\n+\t\t\t\tthrow new IllegalStateException(\"Abort Form creation, because coarser subdivision are requested and multiple resolutions are given. With 'alsoCreateCoarserSubdivisions' set to true, provide only one resolution.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2NTk5OQ=="}, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzMjM5NA==", "bodyText": "Ich habe den Punkt doch wieder reverted, da der generator auch von anderen Formularen genutzt wird und hier die Validierung an einem Punkt gemacht wird", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395432394", "createdAt": "2020-03-20T04:13:21Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/export/RelExportGenerator.java", "diffHunk": "@@ -22,6 +25,17 @@ public static RelativeFormQuery generate(Namespaces namespaces, RelativeMode mod\n \t\tConceptManipulator.DEFAULT_SELECTS_WHEN_EMPTY.consume(mode.getFeatures(), namespaces);\n \t\tConceptManipulator.DEFAULT_SELECTS_WHEN_EMPTY.consume(mode.getOutcomes(), namespaces);\n \t\t\n+\t\tList<DateContextMode> resolutions = null;\n+\t\tif(mode.getForm().isAlsoCreateCoarserSubdivisions()) {\n+\t\t\tif(mode.getForm().getResolution().size() != 1) {\n+\t\t\t\tthrow new IllegalStateException(\"Abort Form creation, because coarser subdivision are requested and multiple resolutions are given. With 'alsoCreateCoarserSubdivisions' set to true, provide only one resolution.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2NTk5OQ=="}, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzUzMzAyOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/FormQueryPlan.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODo0MzoyOFrOF4kwVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjoxNTowOFrOF4165A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2Njc3Mw==", "bodyText": "Ich wei\u00df was die Funktion macht, aber das ist doch schon echt viel Magic. Kannst du die Zahlen in einem Enum halten und Doku dr\u00fcber schreiben?", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394866773", "createdAt": "2020-03-19T08:43:28Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/FormQueryPlan.java", "diffHunk": "@@ -49,18 +49,20 @@ public EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n \t}\n \t\n \tprivate Object[] addConstants(Object[] values, DateContext dateContext) {\n-\t\tint constants = dateContext.getEventDate() == null ? 2 : 3;\n+\t\tint constants = dateContext.getEventDate() == null ? 3 : 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MzM0Mw==", "bodyText": "Das in einem Enum zu machen, da fehlt mir gerade die Fantasie. W\u00fcrdest du ein Enum je Modus machen?", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395143343", "createdAt": "2020-03-19T16:08:30Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/FormQueryPlan.java", "diffHunk": "@@ -49,18 +49,20 @@ public EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n \t}\n \t\n \tprivate Object[] addConstants(Object[] values, DateContext dateContext) {\n-\t\tint constants = dateContext.getEventDate() == null ? 2 : 3;\n+\t\tint constants = dateContext.getEventDate() == null ? 3 : 4;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2Njc3Mw=="}, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0Njc4Nw==", "bodyText": "\u00e4h, ich meinte konstanten ehrlich gesagt. Sorry", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395146787", "createdAt": "2020-03-19T16:13:26Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/FormQueryPlan.java", "diffHunk": "@@ -49,18 +49,20 @@ public EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n \t}\n \t\n \tprivate Object[] addConstants(Object[] values, DateContext dateContext) {\n-\t\tint constants = dateContext.getEventDate() == null ? 2 : 3;\n+\t\tint constants = dateContext.getEventDate() == null ? 3 : 4;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2Njc3Mw=="}, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0ODAwNA==", "bodyText": "Ich w\u00fcrde das ganze in einem extra Feature machen. sodass von einem QueryPlan zum anderen nciht immer wieder ein neues Array alloziiert werden muss f\u00fcr jede Ergebniszeile, wie es momentan der Fall ist um Konstanten ranzujoinen.", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395148004", "createdAt": "2020-03-19T16:15:08Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/FormQueryPlan.java", "diffHunk": "@@ -49,18 +49,20 @@ public EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n \t}\n \t\n \tprivate Object[] addConstants(Object[] values, DateContext dateContext) {\n-\t\tint constants = dateContext.getEventDate() == null ? 2 : 3;\n+\t\tint constants = dateContext.getEventDate() == null ? 3 : 4;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2Njc3Mw=="}, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzU2MjA5OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODo1MjozNFrOF4lDCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODo1MjozNFrOF4lDCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg3MTU2MQ==", "bodyText": "Das Semikolon ist hier interessant gesetzt", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394871561", "createdAt": "2020-03-19T08:52:34Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java", "diffHunk": "@@ -66,22 +67,37 @@ public EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n \t\t// We look at the first result line to determine the length of the subresult\n \t\tint featureLength = featureResult.getValues().get(0).length;\n \t\tint outcomeLength = outcomeResult.getValues().get(0).length;\n-\t\t// Whole result is the concatenation of the subresults. However the sub result includes the date restriction which we drop.\n-\t\tint size = featureLength + outcomeLength - 2;\n-\n-\t\t// merge the full (index == null) lines\n-\t\tObject[] mergedFull = new Object[size];\n-\t\tsetFeatureValues(mergedFull, featureResult.getValues().get(0));\n-\t\tsetOutcomeValues(mergedFull, outcomeResult.getValues().get(0), featureLength);\n-\t\tvalues.add(mergedFull);\n+\t\t\n+\t\t/*\n+\t\t *  Whole result is the concatenation of the subresults. The final output format combines resolution info, index and eventdate of both sub queries.\n+\t\t *  The feature/outcome sub queries are of in form of: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE/OUTCOME_DR], [FEATURE/OUTCOME_SELECTS]... \n+\t\t *  The wanted format is: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE_DR], [OUTCOME_DR], [FEATURE_SELECTS]... , [OUTCOME_SELECTS]\n+\t\t */\n+\t\tint size = featureLength + outcomeLength - 3/*= [RESOLUTION], [INDEX], [EVENTDATE]*/;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Nzc1NTY4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOTo0ODozOFrOF4m_iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOTo0ODo0NVrOF4m_2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwMzQzMg==", "bodyText": "wie h\u00e4ufig brauchst du den? Finde dass man das List.of auch in den Callern machen kann, wenn es nur 1-2 sind", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394903432", "createdAt": "2020-03-19T09:48:38Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java", "diffHunk": "@@ -57,54 +58,48 @@\n \t */\n \t@Getter @Setter\n \tprivate LocalDate eventDate = null;\n+\t\n+\t/**\n+\t * Indicates under which temporal subdivision mode this instance was created.\n+\t */\n+\t@Getter\n+\t@Nullable\n+\tprivate DateContextMode subdivisionMode;\n \n+\tpublic static List<DateContext> generateAbsoluteContexts(CDateRange dateRangeMask, DateContextMode subdivisionMode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwMzUxNA==", "bodyText": "oder du machst ein ... draus", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394903514", "createdAt": "2020-03-19T09:48:45Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java", "diffHunk": "@@ -57,54 +58,48 @@\n \t */\n \t@Getter @Setter\n \tprivate LocalDate eventDate = null;\n+\t\n+\t/**\n+\t * Indicates under which temporal subdivision mode this instance was created.\n+\t */\n+\t@Getter\n+\t@Nullable\n+\tprivate DateContextMode subdivisionMode;\n \n+\tpublic static List<DateContext> generateAbsoluteContexts(CDateRange dateRangeMask, DateContextMode subdivisionMode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwMzQzMg=="}, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Nzc2ODU3OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOTo1MjoyMVrOF4nH-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOTo1MjoyMVrOF4nH-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwNTU5NQ==", "bodyText": "die index++/index-- geschichte sollte etwas dokumentiert sein, dass ist mir nr halb schl\u00fcssig", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394905595", "createdAt": "2020-03-19T09:52:21Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java", "diffHunk": "@@ -121,53 +116,50 @@\n \t * @param timeUnit\n \t * @return\n \t */\n-\tpublic static List<DateContext> generateRelativeContexts(int event, IndexPlacement indexPlacement, int featureTime,\n-\t\t\tint outcomeTime, boolean sliced, TimeUnit timeUnit) {\n+\tpublic static List<DateContext> generateRelativeContexts(int event, IndexPlacement indexPlacement, int featureTime,\tint outcomeTime, DateContextMode timeUnit, List<DateContextMode> subdivisionModes) {\n \t\tif (featureTime < 1 || outcomeTime < 1) {\n \t\t\tthrow new IllegalArgumentException(\"Relative times were smaller than 1 (featureTime: \" + featureTime\n \t\t\t\t\t+ \"; outcomeTime: \" + outcomeTime + \")\");\n \t\t}\n-\t\tList<DateContext> dcl = new ArrayList<>();\n+\t\tList<DateContext> dcList = new ArrayList<>();\n+\t\t\n+\t\tLocalDate eventdate = CDate.toLocalDate(event);\n \n \t\tCDateRange featureRange = generateFeatureRange(event, indexPlacement, featureTime, timeUnit);\n \t\tCDateRange outcomeRange = generateOutcomeRange(event, indexPlacement, outcomeTime, timeUnit);\n \n-\t\tdcl.add(new DateContext(featureRange, FeatureGroup.FEATURE, null, CDate.toLocalDate(event)));\n-\t\tdcl.add(new DateContext(outcomeRange, FeatureGroup.OUTCOME, null, CDate.toLocalDate(event)));\n-\n-\t\tif (sliced) {\n-\t\t\tList<CDateRange> featureRanges = null;\n-\t\t\tList<CDateRange> outcomeRanges = null;\n \n-\t\t\tswitch(timeUnit) {\n-\t\t\t\tcase DAYS:\n-\t\t\t\t\tfeatureRanges = featureRange.getCoveredDays();\n-\t\t\t\t\toutcomeRanges = outcomeRange.getCoveredDays();\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase QUARTERS:\n-\t\t\t\t\tfeatureRanges = featureRange.getCoveredQuarters();\n-\t\t\t\t\toutcomeRanges = outcomeRange.getCoveredQuarters();\n-\t\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t\tthrow new IllegalArgumentException(\"Resolution \" + timeUnit + \" not supported.\");\t\t\t\t\n-\t\t\t}\n-\n-\t\t\tint numRanges = featureRanges.size();\n-\t\t\tint idx = indexPlacement.equals(IndexPlacement.BEFORE) ? numRanges - 1 : numRanges;\n-\t\t\tfor (CDateRange range : featureRanges) {\n-\t\t\t\tdcl.add(new DateContext(range, FeatureGroup.FEATURE, -idx, CDate.toLocalDate(event)));\n-\t\t\t\tidx--;\n+\t\tfor(DateContextMode mode : subdivisionModes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTI0MDc5OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjoxNDoxN1rOF414iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzoxMzoxNFrOF44YPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0NzQwMA==", "bodyText": "With a complex if condition like this, it's always useful to extract the entire condition into a variable (or function) to give it a name that explains it", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395147400", "createdAt": "2020-03-19T16:14:17Z", "author": {"login": "Kadrian"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java", "diffHunk": "@@ -66,22 +67,37 @@ public EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n \t\t// We look at the first result line to determine the length of the subresult\n \t\tint featureLength = featureResult.getValues().get(0).length;\n \t\tint outcomeLength = outcomeResult.getValues().get(0).length;\n-\t\t// Whole result is the concatenation of the subresults. However the sub result includes the date restriction which we drop.\n-\t\tint size = featureLength + outcomeLength - 2;\n-\n-\t\t// merge the full (index == null) lines\n-\t\tObject[] mergedFull = new Object[size];\n-\t\tsetFeatureValues(mergedFull, featureResult.getValues().get(0));\n-\t\tsetOutcomeValues(mergedFull, outcomeResult.getValues().get(0), featureLength);\n-\t\tvalues.add(mergedFull);\n+\t\t\n+\t\t/*\n+\t\t *  Whole result is the concatenation of the subresults. The final output format combines resolution info, index and eventdate of both sub queries.\n+\t\t *  The feature/outcome sub queries are of in form of: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE/OUTCOME_DR], [FEATURE/OUTCOME_SELECTS]... \n+\t\t *  The wanted format is: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE_DR], [OUTCOME_DR], [FEATURE_SELECTS]... , [OUTCOME_SELECTS]\n+\t\t */\n+\t\tint size = featureLength + outcomeLength - 3/*= [RESOLUTION], [INDEX], [EVENTDATE]*/;\n+\n+\t\tint resultStartIndex = 0;\n+\t\tif(contexts.size()>=2\n+\t\t\t&& contexts.get(0).getSubdivisionMode().equals(DateContextMode.COMPLETE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE4ODI4NQ==", "bodyText": "Danke Kai, pass ich an", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395188285", "createdAt": "2020-03-19T17:13:14Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java", "diffHunk": "@@ -66,22 +67,37 @@ public EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n \t\t// We look at the first result line to determine the length of the subresult\n \t\tint featureLength = featureResult.getValues().get(0).length;\n \t\tint outcomeLength = outcomeResult.getValues().get(0).length;\n-\t\t// Whole result is the concatenation of the subresults. However the sub result includes the date restriction which we drop.\n-\t\tint size = featureLength + outcomeLength - 2;\n-\n-\t\t// merge the full (index == null) lines\n-\t\tObject[] mergedFull = new Object[size];\n-\t\tsetFeatureValues(mergedFull, featureResult.getValues().get(0));\n-\t\tsetOutcomeValues(mergedFull, outcomeResult.getValues().get(0), featureLength);\n-\t\tvalues.add(mergedFull);\n+\t\t\n+\t\t/*\n+\t\t *  Whole result is the concatenation of the subresults. The final output format combines resolution info, index and eventdate of both sub queries.\n+\t\t *  The feature/outcome sub queries are of in form of: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE/OUTCOME_DR], [FEATURE/OUTCOME_SELECTS]... \n+\t\t *  The wanted format is: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE_DR], [OUTCOME_DR], [FEATURE_SELECTS]... , [OUTCOME_SELECTS]\n+\t\t */\n+\t\tint size = featureLength + outcomeLength - 3/*= [RESOLUTION], [INDEX], [EVENTDATE]*/;\n+\n+\t\tint resultStartIndex = 0;\n+\t\tif(contexts.size()>=2\n+\t\t\t&& contexts.get(0).getSubdivisionMode().equals(DateContextMode.COMPLETE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0NzQwMA=="}, "originalCommit": {"oid": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTI0NzQxOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjoxNTo0OVrOF4181g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjoxNTo0OVrOF4181g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0ODUwMg==", "bodyText": "It's good to explain this. Would even be better if things like these would be documented in the code itself. So could this e.g. a special type / class / enum?", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395148502", "createdAt": "2020-03-19T16:15:49Z", "author": {"login": "Kadrian"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java", "diffHunk": "@@ -66,22 +67,37 @@ public EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n \t\t// We look at the first result line to determine the length of the subresult\n \t\tint featureLength = featureResult.getValues().get(0).length;\n \t\tint outcomeLength = outcomeResult.getValues().get(0).length;\n-\t\t// Whole result is the concatenation of the subresults. However the sub result includes the date restriction which we drop.\n-\t\tint size = featureLength + outcomeLength - 2;\n-\n-\t\t// merge the full (index == null) lines\n-\t\tObject[] mergedFull = new Object[size];\n-\t\tsetFeatureValues(mergedFull, featureResult.getValues().get(0));\n-\t\tsetOutcomeValues(mergedFull, outcomeResult.getValues().get(0), featureLength);\n-\t\tvalues.add(mergedFull);\n+\t\t\n+\t\t/*\n+\t\t *  Whole result is the concatenation of the subresults. The final output format combines resolution info, index and eventdate of both sub queries.\n+\t\t *  The feature/outcome sub queries are of in form of: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE/OUTCOME_DR], [FEATURE/OUTCOME_SELECTS]... ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTI1NTE2OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjoxNzo0MFrOF42CDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjoxNzo0MFrOF42CDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0OTgzNw==", "bodyText": "Agree with @awildturtok here, these numbers are quite magic, an enum would make this a lot easier to understand", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395149837", "createdAt": "2020-03-19T16:17:40Z", "author": {"login": "Kadrian"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java", "diffHunk": "@@ -99,24 +115,24 @@ private SubResult executeSubQuery(QueryExecutionContext ctx, FeatureGroup featur\n \t\treturn new SubResult((MultilineContainedEntityResult) sub.execute(ctx, entity));\n \t}\n \n-\tprivate void setOutcomeValues(Object[] result, Object[] value, int featureLength) {\n+\tprivate void setFeatureValues(Object[] result, Object[] value) {\n \t\t// copy everything up to including index\n-\t\tfor (int i = 0; i < 2; i++) {\n+\t\tfor (int i = 0; i < 3; i++) {\n \t\t\tresult[i] = value[i];\n \t\t}\n \t\t// copy daterange\n-\t\tresult[3] = value[2];\n-\t\tSystem.arraycopy(value, 3, result, 1 + featureLength, value.length - 3);\n+\t\tresult[3] = value[3];\n+\t\tSystem.arraycopy(value, 4, result, 5, value.length - 4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTI2MTQyOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjoxOToxMVrOF42GNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjo0NjoyMVrOF5SQfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1MDkwMA==", "bodyText": "Uh, ternary works even without a space in front of the question mark?", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395150900", "createdAt": "2020-03-19T16:19:11Z", "author": {"login": "Kadrian"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java", "diffHunk": "@@ -121,53 +116,50 @@\n \t * @param timeUnit\n \t * @return\n \t */\n-\tpublic static List<DateContext> generateRelativeContexts(int event, IndexPlacement indexPlacement, int featureTime,\n-\t\t\tint outcomeTime, boolean sliced, TimeUnit timeUnit) {\n+\tpublic static List<DateContext> generateRelativeContexts(int event, IndexPlacement indexPlacement, int featureTime,\tint outcomeTime, DateContextMode timeUnit, List<DateContextMode> subdivisionModes) {\n \t\tif (featureTime < 1 || outcomeTime < 1) {\n \t\t\tthrow new IllegalArgumentException(\"Relative times were smaller than 1 (featureTime: \" + featureTime\n \t\t\t\t\t+ \"; outcomeTime: \" + outcomeTime + \")\");\n \t\t}\n-\t\tList<DateContext> dcl = new ArrayList<>();\n+\t\tList<DateContext> dcList = new ArrayList<>();\n+\t\t\n+\t\tLocalDate eventdate = CDate.toLocalDate(event);\n \n \t\tCDateRange featureRange = generateFeatureRange(event, indexPlacement, featureTime, timeUnit);\n \t\tCDateRange outcomeRange = generateOutcomeRange(event, indexPlacement, outcomeTime, timeUnit);\n \n-\t\tdcl.add(new DateContext(featureRange, FeatureGroup.FEATURE, null, CDate.toLocalDate(event)));\n-\t\tdcl.add(new DateContext(outcomeRange, FeatureGroup.OUTCOME, null, CDate.toLocalDate(event)));\n-\n-\t\tif (sliced) {\n-\t\t\tList<CDateRange> featureRanges = null;\n-\t\t\tList<CDateRange> outcomeRanges = null;\n \n-\t\t\tswitch(timeUnit) {\n-\t\t\t\tcase DAYS:\n-\t\t\t\t\tfeatureRanges = featureRange.getCoveredDays();\n-\t\t\t\t\toutcomeRanges = outcomeRange.getCoveredDays();\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase QUARTERS:\n-\t\t\t\t\tfeatureRanges = featureRange.getCoveredQuarters();\n-\t\t\t\t\toutcomeRanges = outcomeRange.getCoveredQuarters();\n-\t\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t\tthrow new IllegalArgumentException(\"Resolution \" + timeUnit + \" not supported.\");\t\t\t\t\n-\t\t\t}\n-\n-\t\t\tint numRanges = featureRanges.size();\n-\t\t\tint idx = indexPlacement.equals(IndexPlacement.BEFORE) ? numRanges - 1 : numRanges;\n-\t\t\tfor (CDateRange range : featureRanges) {\n-\t\t\t\tdcl.add(new DateContext(range, FeatureGroup.FEATURE, -idx, CDate.toLocalDate(event)));\n-\t\t\t\tidx--;\n+\t\tfor(DateContextMode mode : subdivisionModes) {\n+\t\t\tList<CDateRange> featureRanges = mode.subdivideRange(featureRange);\n+\t\t\tint index = indexPlacement.equals(IndexPlacement.BEFORE) ? featureRanges.size() - 1 : featureRanges.size();\n+\t\t\tfor (CDateRange subRange : featureRanges) {\n+\t\t\t\tDateContext dc = new DateContext(\n+\t\t\t\t\tsubRange,\n+\t\t\t\t\tFeatureGroup.FEATURE,\n+\t\t\t\t\t// For now there is no index for complete\n+\t\t\t\t\tmode.equals(DateContextMode.COMPLETE)? null : -index,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1NTMyMA==", "bodyText": "Ach, die diskussion um whitespaces hab ich schon lange aufgegeben :D Wenn sie sch\u00f6n sind sind sie sch\u00f6n, wenn nicht werden sie beim n\u00e4chsten anfassen sch\u00f6n :D\n\ud83d\udde1 \ud83d\udde1 \ud83d\udde1 \ud83d\udde1", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395155320", "createdAt": "2020-03-19T16:25:32Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java", "diffHunk": "@@ -121,53 +116,50 @@\n \t * @param timeUnit\n \t * @return\n \t */\n-\tpublic static List<DateContext> generateRelativeContexts(int event, IndexPlacement indexPlacement, int featureTime,\n-\t\t\tint outcomeTime, boolean sliced, TimeUnit timeUnit) {\n+\tpublic static List<DateContext> generateRelativeContexts(int event, IndexPlacement indexPlacement, int featureTime,\tint outcomeTime, DateContextMode timeUnit, List<DateContextMode> subdivisionModes) {\n \t\tif (featureTime < 1 || outcomeTime < 1) {\n \t\t\tthrow new IllegalArgumentException(\"Relative times were smaller than 1 (featureTime: \" + featureTime\n \t\t\t\t\t+ \"; outcomeTime: \" + outcomeTime + \")\");\n \t\t}\n-\t\tList<DateContext> dcl = new ArrayList<>();\n+\t\tList<DateContext> dcList = new ArrayList<>();\n+\t\t\n+\t\tLocalDate eventdate = CDate.toLocalDate(event);\n \n \t\tCDateRange featureRange = generateFeatureRange(event, indexPlacement, featureTime, timeUnit);\n \t\tCDateRange outcomeRange = generateOutcomeRange(event, indexPlacement, outcomeTime, timeUnit);\n \n-\t\tdcl.add(new DateContext(featureRange, FeatureGroup.FEATURE, null, CDate.toLocalDate(event)));\n-\t\tdcl.add(new DateContext(outcomeRange, FeatureGroup.OUTCOME, null, CDate.toLocalDate(event)));\n-\n-\t\tif (sliced) {\n-\t\t\tList<CDateRange> featureRanges = null;\n-\t\t\tList<CDateRange> outcomeRanges = null;\n \n-\t\t\tswitch(timeUnit) {\n-\t\t\t\tcase DAYS:\n-\t\t\t\t\tfeatureRanges = featureRange.getCoveredDays();\n-\t\t\t\t\toutcomeRanges = outcomeRange.getCoveredDays();\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase QUARTERS:\n-\t\t\t\t\tfeatureRanges = featureRange.getCoveredQuarters();\n-\t\t\t\t\toutcomeRanges = outcomeRange.getCoveredQuarters();\n-\t\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t\tthrow new IllegalArgumentException(\"Resolution \" + timeUnit + \" not supported.\");\t\t\t\t\n-\t\t\t}\n-\n-\t\t\tint numRanges = featureRanges.size();\n-\t\t\tint idx = indexPlacement.equals(IndexPlacement.BEFORE) ? numRanges - 1 : numRanges;\n-\t\t\tfor (CDateRange range : featureRanges) {\n-\t\t\t\tdcl.add(new DateContext(range, FeatureGroup.FEATURE, -idx, CDate.toLocalDate(event)));\n-\t\t\t\tidx--;\n+\t\tfor(DateContextMode mode : subdivisionModes) {\n+\t\t\tList<CDateRange> featureRanges = mode.subdivideRange(featureRange);\n+\t\t\tint index = indexPlacement.equals(IndexPlacement.BEFORE) ? featureRanges.size() - 1 : featureRanges.size();\n+\t\t\tfor (CDateRange subRange : featureRanges) {\n+\t\t\t\tDateContext dc = new DateContext(\n+\t\t\t\t\tsubRange,\n+\t\t\t\t\tFeatureGroup.FEATURE,\n+\t\t\t\t\t// For now there is no index for complete\n+\t\t\t\t\tmode.equals(DateContextMode.COMPLETE)? null : -index,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1MDkwMA=="}, "originalCommit": {"oid": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ2MTM1OQ==", "bodyText": "In the Javascript world we don't even discuss this, everybody just uses the code formatter https://prettier.io/ to auto-format on save. Is there something like this in the Java land?", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395461359", "createdAt": "2020-03-20T06:53:17Z", "author": {"login": "Kadrian"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java", "diffHunk": "@@ -121,53 +116,50 @@\n \t * @param timeUnit\n \t * @return\n \t */\n-\tpublic static List<DateContext> generateRelativeContexts(int event, IndexPlacement indexPlacement, int featureTime,\n-\t\t\tint outcomeTime, boolean sliced, TimeUnit timeUnit) {\n+\tpublic static List<DateContext> generateRelativeContexts(int event, IndexPlacement indexPlacement, int featureTime,\tint outcomeTime, DateContextMode timeUnit, List<DateContextMode> subdivisionModes) {\n \t\tif (featureTime < 1 || outcomeTime < 1) {\n \t\t\tthrow new IllegalArgumentException(\"Relative times were smaller than 1 (featureTime: \" + featureTime\n \t\t\t\t\t+ \"; outcomeTime: \" + outcomeTime + \")\");\n \t\t}\n-\t\tList<DateContext> dcl = new ArrayList<>();\n+\t\tList<DateContext> dcList = new ArrayList<>();\n+\t\t\n+\t\tLocalDate eventdate = CDate.toLocalDate(event);\n \n \t\tCDateRange featureRange = generateFeatureRange(event, indexPlacement, featureTime, timeUnit);\n \t\tCDateRange outcomeRange = generateOutcomeRange(event, indexPlacement, outcomeTime, timeUnit);\n \n-\t\tdcl.add(new DateContext(featureRange, FeatureGroup.FEATURE, null, CDate.toLocalDate(event)));\n-\t\tdcl.add(new DateContext(outcomeRange, FeatureGroup.OUTCOME, null, CDate.toLocalDate(event)));\n-\n-\t\tif (sliced) {\n-\t\t\tList<CDateRange> featureRanges = null;\n-\t\t\tList<CDateRange> outcomeRanges = null;\n \n-\t\t\tswitch(timeUnit) {\n-\t\t\t\tcase DAYS:\n-\t\t\t\t\tfeatureRanges = featureRange.getCoveredDays();\n-\t\t\t\t\toutcomeRanges = outcomeRange.getCoveredDays();\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase QUARTERS:\n-\t\t\t\t\tfeatureRanges = featureRange.getCoveredQuarters();\n-\t\t\t\t\toutcomeRanges = outcomeRange.getCoveredQuarters();\n-\t\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t\tthrow new IllegalArgumentException(\"Resolution \" + timeUnit + \" not supported.\");\t\t\t\t\n-\t\t\t}\n-\n-\t\t\tint numRanges = featureRanges.size();\n-\t\t\tint idx = indexPlacement.equals(IndexPlacement.BEFORE) ? numRanges - 1 : numRanges;\n-\t\t\tfor (CDateRange range : featureRanges) {\n-\t\t\t\tdcl.add(new DateContext(range, FeatureGroup.FEATURE, -idx, CDate.toLocalDate(event)));\n-\t\t\t\tidx--;\n+\t\tfor(DateContextMode mode : subdivisionModes) {\n+\t\t\tList<CDateRange> featureRanges = mode.subdivideRange(featureRange);\n+\t\t\tint index = indexPlacement.equals(IndexPlacement.BEFORE) ? featureRanges.size() - 1 : featureRanges.size();\n+\t\t\tfor (CDateRange subRange : featureRanges) {\n+\t\t\t\tDateContext dc = new DateContext(\n+\t\t\t\t\tsubRange,\n+\t\t\t\t\tFeatureGroup.FEATURE,\n+\t\t\t\t\t// For now there is no index for complete\n+\t\t\t\t\tmode.equals(DateContextMode.COMPLETE)? null : -index,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1MDkwMA=="}, "originalCommit": {"oid": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxMDg0Ng==", "bodyText": "Wir hatten ein paar Probleme damit, weil die Formatting Plugins der verschiedenen IDEs sich nicht exakt gleich verhalten und die Diffs immer sehr gro\u00df waren.", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395610846", "createdAt": "2020-03-20T12:43:18Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java", "diffHunk": "@@ -121,53 +116,50 @@\n \t * @param timeUnit\n \t * @return\n \t */\n-\tpublic static List<DateContext> generateRelativeContexts(int event, IndexPlacement indexPlacement, int featureTime,\n-\t\t\tint outcomeTime, boolean sliced, TimeUnit timeUnit) {\n+\tpublic static List<DateContext> generateRelativeContexts(int event, IndexPlacement indexPlacement, int featureTime,\tint outcomeTime, DateContextMode timeUnit, List<DateContextMode> subdivisionModes) {\n \t\tif (featureTime < 1 || outcomeTime < 1) {\n \t\t\tthrow new IllegalArgumentException(\"Relative times were smaller than 1 (featureTime: \" + featureTime\n \t\t\t\t\t+ \"; outcomeTime: \" + outcomeTime + \")\");\n \t\t}\n-\t\tList<DateContext> dcl = new ArrayList<>();\n+\t\tList<DateContext> dcList = new ArrayList<>();\n+\t\t\n+\t\tLocalDate eventdate = CDate.toLocalDate(event);\n \n \t\tCDateRange featureRange = generateFeatureRange(event, indexPlacement, featureTime, timeUnit);\n \t\tCDateRange outcomeRange = generateOutcomeRange(event, indexPlacement, outcomeTime, timeUnit);\n \n-\t\tdcl.add(new DateContext(featureRange, FeatureGroup.FEATURE, null, CDate.toLocalDate(event)));\n-\t\tdcl.add(new DateContext(outcomeRange, FeatureGroup.OUTCOME, null, CDate.toLocalDate(event)));\n-\n-\t\tif (sliced) {\n-\t\t\tList<CDateRange> featureRanges = null;\n-\t\t\tList<CDateRange> outcomeRanges = null;\n \n-\t\t\tswitch(timeUnit) {\n-\t\t\t\tcase DAYS:\n-\t\t\t\t\tfeatureRanges = featureRange.getCoveredDays();\n-\t\t\t\t\toutcomeRanges = outcomeRange.getCoveredDays();\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase QUARTERS:\n-\t\t\t\t\tfeatureRanges = featureRange.getCoveredQuarters();\n-\t\t\t\t\toutcomeRanges = outcomeRange.getCoveredQuarters();\n-\t\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t\tthrow new IllegalArgumentException(\"Resolution \" + timeUnit + \" not supported.\");\t\t\t\t\n-\t\t\t}\n-\n-\t\t\tint numRanges = featureRanges.size();\n-\t\t\tint idx = indexPlacement.equals(IndexPlacement.BEFORE) ? numRanges - 1 : numRanges;\n-\t\t\tfor (CDateRange range : featureRanges) {\n-\t\t\t\tdcl.add(new DateContext(range, FeatureGroup.FEATURE, -idx, CDate.toLocalDate(event)));\n-\t\t\t\tidx--;\n+\t\tfor(DateContextMode mode : subdivisionModes) {\n+\t\t\tList<CDateRange> featureRanges = mode.subdivideRange(featureRange);\n+\t\t\tint index = indexPlacement.equals(IndexPlacement.BEFORE) ? featureRanges.size() - 1 : featureRanges.size();\n+\t\t\tfor (CDateRange subRange : featureRanges) {\n+\t\t\t\tDateContext dc = new DateContext(\n+\t\t\t\t\tsubRange,\n+\t\t\t\t\tFeatureGroup.FEATURE,\n+\t\t\t\t\t// For now there is no index for complete\n+\t\t\t\t\tmode.equals(DateContextMode.COMPLETE)? null : -index,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1MDkwMA=="}, "originalCommit": {"oid": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxMjI4NQ==", "bodyText": "Meine Einstellung, dass nur die Zeilen formiert werden, die ich angefasst habe ist verloren gegangen", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395612285", "createdAt": "2020-03-20T12:46:21Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java", "diffHunk": "@@ -121,53 +116,50 @@\n \t * @param timeUnit\n \t * @return\n \t */\n-\tpublic static List<DateContext> generateRelativeContexts(int event, IndexPlacement indexPlacement, int featureTime,\n-\t\t\tint outcomeTime, boolean sliced, TimeUnit timeUnit) {\n+\tpublic static List<DateContext> generateRelativeContexts(int event, IndexPlacement indexPlacement, int featureTime,\tint outcomeTime, DateContextMode timeUnit, List<DateContextMode> subdivisionModes) {\n \t\tif (featureTime < 1 || outcomeTime < 1) {\n \t\t\tthrow new IllegalArgumentException(\"Relative times were smaller than 1 (featureTime: \" + featureTime\n \t\t\t\t\t+ \"; outcomeTime: \" + outcomeTime + \")\");\n \t\t}\n-\t\tList<DateContext> dcl = new ArrayList<>();\n+\t\tList<DateContext> dcList = new ArrayList<>();\n+\t\t\n+\t\tLocalDate eventdate = CDate.toLocalDate(event);\n \n \t\tCDateRange featureRange = generateFeatureRange(event, indexPlacement, featureTime, timeUnit);\n \t\tCDateRange outcomeRange = generateOutcomeRange(event, indexPlacement, outcomeTime, timeUnit);\n \n-\t\tdcl.add(new DateContext(featureRange, FeatureGroup.FEATURE, null, CDate.toLocalDate(event)));\n-\t\tdcl.add(new DateContext(outcomeRange, FeatureGroup.OUTCOME, null, CDate.toLocalDate(event)));\n-\n-\t\tif (sliced) {\n-\t\t\tList<CDateRange> featureRanges = null;\n-\t\t\tList<CDateRange> outcomeRanges = null;\n \n-\t\t\tswitch(timeUnit) {\n-\t\t\t\tcase DAYS:\n-\t\t\t\t\tfeatureRanges = featureRange.getCoveredDays();\n-\t\t\t\t\toutcomeRanges = outcomeRange.getCoveredDays();\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase QUARTERS:\n-\t\t\t\t\tfeatureRanges = featureRange.getCoveredQuarters();\n-\t\t\t\t\toutcomeRanges = outcomeRange.getCoveredQuarters();\n-\t\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t\tthrow new IllegalArgumentException(\"Resolution \" + timeUnit + \" not supported.\");\t\t\t\t\n-\t\t\t}\n-\n-\t\t\tint numRanges = featureRanges.size();\n-\t\t\tint idx = indexPlacement.equals(IndexPlacement.BEFORE) ? numRanges - 1 : numRanges;\n-\t\t\tfor (CDateRange range : featureRanges) {\n-\t\t\t\tdcl.add(new DateContext(range, FeatureGroup.FEATURE, -idx, CDate.toLocalDate(event)));\n-\t\t\t\tidx--;\n+\t\tfor(DateContextMode mode : subdivisionModes) {\n+\t\t\tList<CDateRange> featureRanges = mode.subdivideRange(featureRange);\n+\t\t\tint index = indexPlacement.equals(IndexPlacement.BEFORE) ? featureRanges.size() - 1 : featureRanges.size();\n+\t\t\tfor (CDateRange subRange : featureRanges) {\n+\t\t\t\tDateContext dc = new DateContext(\n+\t\t\t\t\tsubRange,\n+\t\t\t\t\tFeatureGroup.FEATURE,\n+\t\t\t\t\t// For now there is no index for complete\n+\t\t\t\t\tmode.equals(DateContextMode.COMPLETE)? null : -index,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1MDkwMA=="}, "originalCommit": {"oid": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTI2NzE0OnYy", "diffSide": "RIGHT", "path": "frontend/yarn.lock", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjoyMDozNVrOF42J-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzoxMTo1MFrOF44UdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1MTg2NA==", "bodyText": "Hmm. This change shouldn't be part of your PR I guess ;-)", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395151864", "createdAt": "2020-03-19T16:20:35Z", "author": {"login": "Kadrian"}, "path": "frontend/yarn.lock", "diffHunk": "@@ -1938,16 +1938,11 @@ acorn-walk@^6.0.1:\n   resolved \"https://registry.yarnpkg.com/acorn-walk/-/acorn-walk-6.2.0.tgz#123cb8f3b84c2171f1f7fb252615b1c78a6b1a8c\"\n   integrity sha512-7evsyfH1cLOCdAzZAd43Cic04yKydNx0cF+7tiA19p1XnLLPU4dpCQOqpjqwokFe//vS0QqfqqjCS2JkiIs0cA==\n \n-acorn@^6.0.1:\n+acorn@^6.0.1, acorn@^6.2.1:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE2OTkwNw==", "bodyText": "Ja wie kommt der denn da rein?", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395169907", "createdAt": "2020-03-19T16:46:20Z", "author": {"login": "thoniTUB"}, "path": "frontend/yarn.lock", "diffHunk": "@@ -1938,16 +1938,11 @@ acorn-walk@^6.0.1:\n   resolved \"https://registry.yarnpkg.com/acorn-walk/-/acorn-walk-6.2.0.tgz#123cb8f3b84c2171f1f7fb252615b1c78a6b1a8c\"\n   integrity sha512-7evsyfH1cLOCdAzZAd43Cic04yKydNx0cF+7tiA19p1XnLLPU4dpCQOqpjqwokFe//vS0QqfqqjCS2JkiIs0cA==\n \n-acorn@^6.0.1:\n+acorn@^6.0.1, acorn@^6.2.1:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1MTg2NA=="}, "originalCommit": {"oid": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE4NzMxNw==", "bodyText": "ach der dependabot", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395187317", "createdAt": "2020-03-19T17:11:50Z", "author": {"login": "thoniTUB"}, "path": "frontend/yarn.lock", "diffHunk": "@@ -1938,16 +1938,11 @@ acorn-walk@^6.0.1:\n   resolved \"https://registry.yarnpkg.com/acorn-walk/-/acorn-walk-6.2.0.tgz#123cb8f3b84c2171f1f7fb252615b1c78a6b1a8c\"\n   integrity sha512-7evsyfH1cLOCdAzZAd43Cic04yKydNx0cF+7tiA19p1XnLLPU4dpCQOqpjqwokFe//vS0QqfqqjCS2JkiIs0cA==\n \n-acorn@^6.0.1:\n+acorn@^6.0.1, acorn@^6.2.1:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1MTg2NA=="}, "originalCommit": {"oid": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjE5Mjc1OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzowMzo0M1rOF5SzJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzowNzo1N1rOF545Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyMTE1OA==", "bodyText": "Du kannst in einem enum auch abstrakte Methoden machen", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395621158", "createdAt": "2020-03-20T13:03:43Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,115 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import c10n.C10N;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import lombok.RequiredArgsConstructor;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n+@RequiredArgsConstructor\n public enum DateContextMode {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE(null){\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn List.of(range);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString(Locale locale) {\n+\t\t\treturn C10N.get(DateContextModeC10n.class, locale).complete();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * years.\n \t */\n-\tYEAR_WISE,\n+\tYEARS(COMPLETE){\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredYears();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString(Locale locale) {\n+\t\t\treturn C10N.get(DateContextModeC10n.class, locale).year();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * quarters.\n \t */\n-\tQUARTER_WISE;\n+\tQUARTERS(YEARS){\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredQuarters();\n+\t\t}\n+\t\t\n+\n+\t\t@Override\n+\t\tpublic String toString(Locale locale) {\n+\t\t\treturn C10N.get(DateContextModeC10n.class, locale).quarter();\n+\t\t}\n+\t},\n+\t\n+\t/**\n+\t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n+\t * days.\n+\t */\n+\tDAYS(QUARTERS){\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredDays();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString(Locale locale) {\n+\t\t\treturn C10N.get(DateContextModeC10n.class, locale).day();\n+\t\t}\n+\t};\n+\t\n+\t@JsonIgnore\n+\tprivate final DateContextMode coarser;\n+\n+\n+\tprivate List<DateContextMode> thisAndCoarserSubdivisions;\n+\n+\t\n+\t@JsonIgnore\n+\tpublic List<DateContextMode> getThisAndCoarserSubdivisions(){\n+\t\tif (thisAndCoarserSubdivisions != null) {\n+\t\t\treturn thisAndCoarserSubdivisions;\n+\t\t}\n+\t\tList<DateContextMode> thisAndCoarser = new ArrayList<>();\n+\t\tif(coarser != null) {\n+\t\t\tthisAndCoarser.addAll(coarser.getThisAndCoarserSubdivisions());\n+\t\t}\n+\t\tthisAndCoarser.add(this);\n+\t\treturn thisAndCoarserSubdivisions = Collections.unmodifiableList(thisAndCoarser);\n+\t\t\n+\t}\n+\t\t\n+\n+\tpublic List<CDateRange> subdivideRange(CDateRange range){\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\tpublic String toString(Locale locale) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca3919f3646e7842350d033afee870caf8e1db1"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NTM0Mg==", "bodyText": "Danke! Me blind", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r396245342", "createdAt": "2020-03-23T07:07:57Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,115 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import c10n.C10N;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import lombok.RequiredArgsConstructor;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n+@RequiredArgsConstructor\n public enum DateContextMode {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE(null){\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn List.of(range);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString(Locale locale) {\n+\t\t\treturn C10N.get(DateContextModeC10n.class, locale).complete();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * years.\n \t */\n-\tYEAR_WISE,\n+\tYEARS(COMPLETE){\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredYears();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString(Locale locale) {\n+\t\t\treturn C10N.get(DateContextModeC10n.class, locale).year();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * quarters.\n \t */\n-\tQUARTER_WISE;\n+\tQUARTERS(YEARS){\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredQuarters();\n+\t\t}\n+\t\t\n+\n+\t\t@Override\n+\t\tpublic String toString(Locale locale) {\n+\t\t\treturn C10N.get(DateContextModeC10n.class, locale).quarter();\n+\t\t}\n+\t},\n+\t\n+\t/**\n+\t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n+\t * days.\n+\t */\n+\tDAYS(QUARTERS){\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredDays();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString(Locale locale) {\n+\t\t\treturn C10N.get(DateContextModeC10n.class, locale).day();\n+\t\t}\n+\t};\n+\t\n+\t@JsonIgnore\n+\tprivate final DateContextMode coarser;\n+\n+\n+\tprivate List<DateContextMode> thisAndCoarserSubdivisions;\n+\n+\t\n+\t@JsonIgnore\n+\tpublic List<DateContextMode> getThisAndCoarserSubdivisions(){\n+\t\tif (thisAndCoarserSubdivisions != null) {\n+\t\t\treturn thisAndCoarserSubdivisions;\n+\t\t}\n+\t\tList<DateContextMode> thisAndCoarser = new ArrayList<>();\n+\t\tif(coarser != null) {\n+\t\t\tthisAndCoarser.addAll(coarser.getThisAndCoarserSubdivisions());\n+\t\t}\n+\t\tthisAndCoarser.add(this);\n+\t\treturn thisAndCoarserSubdivisions = Collections.unmodifiableList(thisAndCoarser);\n+\t\t\n+\t}\n+\t\t\n+\n+\tpublic List<CDateRange> subdivideRange(CDateRange range){\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\tpublic String toString(Locale locale) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyMTE1OA=="}, "originalCommit": {"oid": "5ca3919f3646e7842350d033afee870caf8e1db1"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjE5Njg0OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/jersey/LocaleFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzowNTowOFrOF5S13g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzowNTowOFrOF5S13g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyMTg1NA==", "bodyText": "Doku", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395621854", "createdAt": "2020-03-20T13:05:08Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/jersey/LocaleFilter.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.bakdata.conquery.io.jersey;\n+\n+import java.io.IOException;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+\n+import com.bakdata.conquery.models.i18n.I18n;\n+\n+\n+public class LocaleFilter implements ContainerRequestFilter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca3919f3646e7842350d033afee870caf8e1db1"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjIwMDAxOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/externalservice/ResultType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzowNjowOFrOF5S39Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzowNjowOFrOF5S39Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyMjM4OQ==", "bodyText": "e noch als cause?", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395622389", "createdAt": "2020-03-20T13:06:08Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/externalservice/ResultType.java", "diffHunk": "@@ -37,12 +36,24 @@ public String print(PrintSettings cfg, Object f) {\n \t\t\tif(cfg.isPrettyPrint()) {\n \t\t\t\treturn DECIMAL_FORMAT.format(f);\n \t\t\t}\n-\t\t\telse {\n-\t\t\t\treturn f.toString();\n-\t\t\t}\n+\t\t\treturn f.toString();\n \t\t}\n \t},\n \tCATEGORICAL,\n+\tRESOLUTION {\n+\t\t@Override\n+\t\tpublic String print(PrintSettings cfg, Object f) {\n+\t\t\tif(f instanceof DateContextMode) {\n+\t\t\t\treturn ((DateContextMode)f).toString(cfg.getLocale());\n+\t\t\t}\n+\t\t\ttry {\n+\t\t\t\t// If the object was parsed as a simple string, try to convert it to a DateContextMode to get Internationalization\n+\t\t\t\treturn DateContextMode.valueOf(f.toString()).toString(cfg.getLocale());\t\t\t\t\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tthrow new IllegalArgumentException(f+ \" is not a valid resolution\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca3919f3646e7842350d033afee870caf8e1db1"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1438, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}