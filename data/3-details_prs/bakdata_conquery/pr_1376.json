{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2OTcyODIy", "number": 1376, "title": "Feature/provide shared groups on stored query infos", "bodyText": "returns the groups a query is shared with on the stored query endpoint", "createdAt": "2020-10-02T15:16:38Z", "url": "https://github.com/bakdata/conquery/pull/1376", "merged": true, "mergeCommit": {"oid": "85e6c4ece0f00682e68df9c3f64f0aa1a194e65e"}, "closed": true, "closedAt": "2020-10-08T14:21:53Z", "author": {"login": "thoniTUB"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQIR7ngFqTUwMzYxMTEwMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQiHHVABqjM4NTU2Mzg1MjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNjExMTAz", "url": "https://github.com/bakdata/conquery/pull/1376#pullrequestreview-503611103", "createdAt": "2020-10-07T07:51:09Z", "commit": {"oid": "cce5d629ec0b332cc4f6ac9ec6674fec36b300d3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNzo1MTowOVrOHdm2bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNzo1ODozOFrOHdnIdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNzI3OQ==", "bodyText": "import", "url": "https://github.com/bakdata/conquery/pull/1376#discussion_r500807279", "createdAt": "2020-10-07T07:51:09Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/RequestAwareUriBuilder.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.bakdata.conquery.apiv1;\n+\n+import static com.bakdata.conquery.resources.ResourceConstants.API;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+public abstract class RequestAwareUriBuilder extends javax.ws.rs.core.UriBuilder {\n+\n+\tpublic static javax.ws.rs.core.UriBuilder fromRequest(HttpServletRequest request) {\n+\t\treturn javax.ws.rs.core.UriBuilder.fromUri(RequestHelper.getRequestURL(request)).path(API);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce5d629ec0b332cc4f6ac9ec6674fec36b300d3"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNzU0NA==", "bodyText": "was macht die Klasse au\u00dfer einer Helper Methode?", "url": "https://github.com/bakdata/conquery/pull/1376#discussion_r500807544", "createdAt": "2020-10-07T07:51:34Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/RequestAwareUriBuilder.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.bakdata.conquery.apiv1;\n+\n+import static com.bakdata.conquery.resources.ResourceConstants.API;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+public abstract class RequestAwareUriBuilder extends javax.ws.rs.core.UriBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce5d629ec0b332cc4f6ac9ec6674fec36b300d3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwODM3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\telse if(!(query instanceof ManagedQuery)) {\n          \n          \n            \n            \n          \n          \n            \n            \t\tif(!(query instanceof ManagedQuery)) {", "url": "https://github.com/bakdata/conquery/pull/1376#discussion_r500808370", "createdAt": "2020-10-07T07:52:53Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/StoredQueriesProcessor.java", "diffHunk": "@@ -66,12 +68,15 @@ public void deleteQuery(Namespace namespace, ManagedExecutionId queryId) {\n \t\tstorage.removeExecution(queryId);\n \t}\n \n-\tpublic ExecutionStatus getQueryWithSource(ManagedExecutionId queryId, User user) {\n+\tpublic StoredQuerySingleInfo getQueryWithSource(ManagedExecutionId queryId, User user, UriBuilder url) {\n \t\tManagedExecution<?> query = storage.getExecution(queryId);\n \t\tif (query == null) {\n-\t\t\treturn null;\n+\t\t\tthrow new WebApplicationException(Response.Status.NOT_FOUND);\n \t\t}\n-\t\treturn query.buildStatus(storage, null, user, EnumSet.of(CreationFlag.WITH_COLUMN_DESCIPTION, CreationFlag.WITH_SOURCE));\n+\t\telse if(!(query instanceof ManagedQuery)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce5d629ec0b332cc4f6ac9ec6674fec36b300d3"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwODc4MQ==", "bodyText": "\u00f6hm, ist das nicht was f\u00fcr Kai?", "url": "https://github.com/bakdata/conquery/pull/1376#discussion_r500808781", "createdAt": "2020-10-07T07:53:30Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/StoredQuerySingleInfo.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package com.bakdata.conquery.apiv1;\n+\n+import java.net.URL;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.ws.rs.core.UriBuilder;\n+\n+import com.bakdata.conquery.io.xodus.MetaStorage;\n+import com.bakdata.conquery.models.auth.entities.Group;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.permissions.Ability;\n+import com.bakdata.conquery.models.auth.permissions.QueryPermission;\n+import com.bakdata.conquery.models.identifiable.ids.specific.GroupId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ManagedExecutionId;\n+import com.bakdata.conquery.models.query.ManagedQuery;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.shiro.authz.Permission;\n+\n+/**\n+ * API-Class that holds exactly the informations that the front end needs when querying an stored query.\n+ * \n+ * @implNote It can be tedious to maintain several Api classes for different end points that have\n+ * overlapping information. GraphQL might be a solution for this.\n+ */\n+@AllArgsConstructor\n+@Getter\n+public class StoredQuerySingleInfo {\n+\tprivate ManagedExecutionId id;\n+\tprivate String label;\n+\tprivate ZonedDateTime createdAt; // ISO timestamp: 2019-06-18T11:11:50.528626+02:00\n+\tprivate boolean own;\n+\tprivate boolean shared;\n+\tprivate boolean system;\n+\t@JsonProperty(\"isPristineLabel\")\n+\tprivate boolean isPristineLabel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce5d629ec0b332cc4f6ac9ec6674fec36b300d3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwOTQ3NA==", "bodyText": "den Unterstrich w\u00fcrde ich vermeiden, verusch hier lieber einen passenderen Namen zu finden", "url": "https://github.com/bakdata/conquery/pull/1376#discussion_r500809474", "createdAt": "2020-10-07T07:54:43Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "diffHunk": "@@ -204,29 +207,38 @@ protected void setStatusBase(@NonNull MetaStorage storage, URLBuilder url, @NonN\n \t\tstatus.setStatus(state);\n \t\tstatus.setOwner(Optional.ofNullable(owner).orElse(null));\n \t\tstatus.setOwnerName(Optional.ofNullable(owner).map(owner -> storage.getUser(owner)).map(User::getLabel).orElse(null));\n-\t\tstatus.setResultUrl(\n-\t\t\tisReadyToDownload(url, user)\n-\t\t\t\t? getDownloadURL(url)\n-\t\t\t\t: null);\n+\t\tstatus.setResultUrl(getDownloadURL(url, user).orElse(null));\n \t\tif (state.equals(ExecutionState.FAILED) && error != null) {\n \t\t\t// Use plain format here to have a uniform serialization.\n \t\t\tstatus.setError(error.asPlain());\n \t\t}\n \t}\n+\t\n+\n+\t@SneakyThrows({MalformedURLException.class, IllegalArgumentException.class, UriBuilderException.class})\n+\tpublic final Optional<URL> getDownloadURL(UriBuilder url, User user) {\n+\t\tif(isReadyToDownload(url, user)) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\treturn Optional.ofNullable(_getDownloadURL(url));\n+\t}\n \n \t/**\n \t * Allows the implementation to define an specific endpoint from where the result is to be downloaded.\n+\t * @throws UriBuilderException \n+\t * @throws IllegalArgumentException \n+\t * @throws MalformedURLException \n \t */\n-\tprotected abstract URL getDownloadURL(URLBuilder url);\n+\tprotected abstract URL _getDownloadURL(UriBuilder url) throws MalformedURLException, IllegalArgumentException, UriBuilderException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce5d629ec0b332cc4f6ac9ec6674fec36b300d3"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxMTI4Mg==", "bodyText": "wo ist der User hin?", "url": "https://github.com/bakdata/conquery/pull/1376#discussion_r500811282", "createdAt": "2020-10-07T07:57:38Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/resources/api/StoredQueriesResource.java", "diffHunk": "@@ -42,18 +40,18 @@\n \tprivate StoredQueriesProcessor processor;\n \n \t@GET\n-\tpublic List<ExecutionStatus> getAllQueries(@Auth User user, DatasetId datasetId, @Context HttpServletRequest req) {\n-\t\treturn processor.getAllQueries(namespace, req, user)\n+\tpublic List<ExecutionStatus> getAllQueries(DatasetId datasetId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce5d629ec0b332cc4f6ac9ec6674fec36b300d3"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxMTg5NA==", "bodyText": "das localhost sieht mir hier falsch aus, was machst du damit? Schau mal ob du eher den eigenen Hostname kriegst?", "url": "https://github.com/bakdata/conquery/pull/1376#discussion_r500811894", "createdAt": "2020-10-07T07:58:38Z", "author": {"login": "awildturtok"}, "path": "backend/src/test/java/com/bakdata/conquery/integration/tests/ConceptPermissionTest.java", "diffHunk": "@@ -83,7 +86,7 @@ public void execute(StandaloneSupport conquery) throws Exception {\n \t}\n \t\n \tpublic static void executeAndWaitUntilFinish(QueryProcessor processor, Dataset dataset, QueryDescription query, User user, MetaStorage storage ) {\n-\t\tExecutionStatus status = processor.postQuery(dataset, query, null, user);\n+\t\tExecutionStatus status = processor.postQuery(dataset, query, UriBuilder.fromUri(URI.create(\"http://localhost\")), user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce5d629ec0b332cc4f6ac9ec6674fec36b300d3"}, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "118dee3db544bf650540ff056a9071e98c580e71", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/118dee3db544bf650540ff056a9071e98c580e71", "committedDate": "2020-10-07T10:55:47Z", "message": "rename method previously starting with an underscore"}, "afterCommit": {"oid": "ff7f5f2550afa0fc31362dda1065d8d327698cb8", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/ff7f5f2550afa0fc31362dda1065d8d327698cb8", "committedDate": "2020-10-07T11:02:32Z", "message": "rename method previously starting with an underscore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzOTgxNzc3", "url": "https://github.com/bakdata/conquery/pull/1376#pullrequestreview-503981777", "createdAt": "2020-10-07T15:05:44Z", "commit": {"oid": "eafb726efe9d95824ffc7585506a0b7c67ef1302"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTowNTo0NFrOHd4Asw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTowNTo0NFrOHd4Asw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA4ODQzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public interface RequestAwareUriBuilder {\n          \n          \n            \n            import lombok.experimental.UtilityClass;\n          \n          \n            \n            \n          \n          \n            \n            @UtilityClass\n          \n          \n            \n            public class RequestAwareUriBuilder {", "url": "https://github.com/bakdata/conquery/pull/1376#discussion_r501088435", "createdAt": "2020-10-07T15:05:44Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/RequestAwareUriBuilder.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.bakdata.conquery.apiv1;\n+\n+import static com.bakdata.conquery.resources.ResourceConstants.API;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.ws.rs.core.UriBuilder;\n+\n+public interface RequestAwareUriBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eafb726efe9d95824ffc7585506a0b7c67ef1302"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4732aee34660e8a81e6edf46db1485879716e6d", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/b4732aee34660e8a81e6edf46db1485879716e6d", "committedDate": "2020-10-08T14:00:46Z", "message": "wip: add specific class for stored query endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9721f33e4950d145cd24c93b07d5643078560402", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/9721f33e4950d145cd24c93b07d5643078560402", "committedDate": "2020-10-08T14:00:46Z", "message": "makes api class more typed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1459dcdd2da8e480f29bad0f0c603aaba555763", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/c1459dcdd2da8e480f29bad0f0c603aaba555763", "committedDate": "2020-10-08T14:00:46Z", "message": "more work on api class for stored queries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02de2cb1a5134e4b5b78dc7071b870807f2a0856", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/02de2cb1a5134e4b5b78dc7071b870807f2a0856", "committedDate": "2020-10-08T14:00:47Z", "message": "return query description query with list of permitted groups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c62cf4ebd62e93d6dbeb17b6c65fd746be1634ed", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/c62cf4ebd62e93d6dbeb17b6c65fd746be1634ed", "committedDate": "2020-10-08T14:00:47Z", "message": "fixes compile errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d68b17e02b5cda2ee5692167764c144b362d417a", "author": {"user": {"login": "bakdata-bot", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/d68b17e02b5cda2ee5692167764c144b362d417a", "committedDate": "2020-10-08T14:02:30Z", "message": "generalize UriBuilding\n\nsimplyfy uri building\n\ncorrects download method path\n\nautomatic update to docs\n\nmake RequestAwareUriBuilder an interface\n\nimprove readablility of if\n\nrename method previously starting with an underscore\n\nfixes missing negation\n\nadds test for downloadlink generation\n\nfixes download path generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd0e32b84f6e404af411b1486031fff337010e71", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/bd0e32b84f6e404af411b1486031fff337010e71", "committedDate": "2020-10-08T14:04:08Z", "message": "review changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eafb726efe9d95824ffc7585506a0b7c67ef1302", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/eafb726efe9d95824ffc7585506a0b7c67ef1302", "committedDate": "2020-10-07T12:45:41Z", "message": "fixes download path generation"}, "afterCommit": {"oid": "bd0e32b84f6e404af411b1486031fff337010e71", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/bd0e32b84f6e404af411b1486031fff337010e71", "committedDate": "2020-10-08T14:04:08Z", "message": "review changes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4807, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}