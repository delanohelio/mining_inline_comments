{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMTIxMzI0", "number": 1311, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOTo0MjoyOFrOEVVtBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOTo0OTowNVrOEVV2Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODExMTQxOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/events/BucketManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOTo0MjoyOFrOG8CMjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOTo0MjoyOFrOG8CMjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwMzcyNg==", "bodyText": "was hat sich da ge\u00e4ndert?", "url": "https://github.com/bakdata/conquery/pull/1311#discussion_r465603726", "createdAt": "2020-08-05T09:42:28Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/BucketManager.java", "diffHunk": "@@ -57,7 +57,7 @@ public BucketManager(JobManager jobManager, WorkerStorage storage, WorkerInforma\n \t}\n \n \tpublic void fullUpdate() {\n-\t\tfor (Concept<?> c : concepts) {\n+\t\tfor (Concept<?> c : concepts.values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f79fb9970c458825b2e48ee5526de9b03b5f559"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODExNzI5OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/identifiable/IdMap.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOTo0NDoxM1rOG8CQLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzoyOTozM1rOG9Z5HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwNDY1NA==", "bodyText": "Freches Hibernate", "url": "https://github.com/bakdata/conquery/pull/1311#discussion_r465604654", "createdAt": "2020-08-05T09:44:13Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/identifiable/IdMap.java", "diffHunk": "@@ -10,11 +9,19 @@\n import java.util.concurrent.ConcurrentMap;\n import java.util.stream.Stream;\n \n+import javax.validation.Valid;\n+\n import com.bakdata.conquery.models.identifiable.ids.IId;\n import com.google.common.collect.ForwardingMap;\n \n-public class IdMap<ID extends IId<? super V>, V extends Identifiable<? extends ID>> extends ForwardingMap <ID ,V > implements Iterable<V>{\n+/**\n+ * A typesafe mapping for the ID-system that does not allow a remapping of an existing key.\n+ * \n+ * @implNote implementation of {@link Iterable} is dropped, because hibernate could not decide on how to validate this map (either with an map-extractor or an iterable-extractor).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f79fb9970c458825b2e48ee5526de9b03b5f559"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwNDkwNQ==", "bodyText": "G\u00e4be es da nicht ne Anno die Hibernate sagt wie man da Validaten soll", "url": "https://github.com/bakdata/conquery/pull/1311#discussion_r465604905", "createdAt": "2020-08-05T09:44:37Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/identifiable/IdMap.java", "diffHunk": "@@ -10,11 +9,19 @@\n import java.util.concurrent.ConcurrentMap;\n import java.util.stream.Stream;\n \n+import javax.validation.Valid;\n+\n import com.bakdata.conquery.models.identifiable.ids.IId;\n import com.google.common.collect.ForwardingMap;\n \n-public class IdMap<ID extends IId<? super V>, V extends Identifiable<? extends ID>> extends ForwardingMap <ID ,V > implements Iterable<V>{\n+/**\n+ * A typesafe mapping for the ID-system that does not allow a remapping of an existing key.\n+ * \n+ * @implNote implementation of {@link Iterable} is dropped, because hibernate could not decide on how to validate this map (either with an map-extractor or an iterable-extractor).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwNDY1NA=="}, "originalCommit": {"oid": "8f79fb9970c458825b2e48ee5526de9b03b5f559"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwNjQ0Nw==", "bodyText": "https://stackoverflow.com/a/15935133/409761\nHilft das?", "url": "https://github.com/bakdata/conquery/pull/1311#discussion_r465606447", "createdAt": "2020-08-05T09:47:22Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/identifiable/IdMap.java", "diffHunk": "@@ -10,11 +9,19 @@\n import java.util.concurrent.ConcurrentMap;\n import java.util.stream.Stream;\n \n+import javax.validation.Valid;\n+\n import com.bakdata.conquery.models.identifiable.ids.IId;\n import com.google.common.collect.ForwardingMap;\n \n-public class IdMap<ID extends IId<? super V>, V extends Identifiable<? extends ID>> extends ForwardingMap <ID ,V > implements Iterable<V>{\n+/**\n+ * A typesafe mapping for the ID-system that does not allow a remapping of an existing key.\n+ * \n+ * @implNote implementation of {@link Iterable} is dropped, because hibernate could not decide on how to validate this map (either with an map-extractor or an iterable-extractor).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwNDY1NA=="}, "originalCommit": {"oid": "8f79fb9970c458825b2e48ee5526de9b03b5f559"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA0MDU0MQ==", "bodyText": "Das ist ein anderes Problem. So wie ich das verstehe, wei\u00df Hibernate da, wie er die Collection auspacken soll, nur nicht was drinne ist. Hier wusste Hibernate nicht, wie es auspacken soll.", "url": "https://github.com/bakdata/conquery/pull/1311#discussion_r467040541", "createdAt": "2020-08-07T13:29:33Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/identifiable/IdMap.java", "diffHunk": "@@ -10,11 +9,19 @@\n import java.util.concurrent.ConcurrentMap;\n import java.util.stream.Stream;\n \n+import javax.validation.Valid;\n+\n import com.bakdata.conquery.models.identifiable.ids.IId;\n import com.google.common.collect.ForwardingMap;\n \n-public class IdMap<ID extends IId<? super V>, V extends Identifiable<? extends ID>> extends ForwardingMap <ID ,V > implements Iterable<V>{\n+/**\n+ * A typesafe mapping for the ID-system that does not allow a remapping of an existing key.\n+ * \n+ * @implNote implementation of {@link Iterable} is dropped, because hibernate could not decide on how to validate this map (either with an map-extractor or an iterable-extractor).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwNDY1NA=="}, "originalCommit": {"oid": "8f79fb9970c458825b2e48ee5526de9b03b5f559"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODEzMjQyOnYy", "diffSide": "RIGHT", "path": "backend/src/test/java/com/bakdata/conquery/integration/IntegrationTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOTo0ODoyM1rOG8CZaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOTo0ODoyM1rOG8CZaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwNzAxNg==", "bodyText": "This", "url": "https://github.com/bakdata/conquery/pull/1311#discussion_r465607016", "createdAt": "2020-08-05T09:48:23Z", "author": {"login": "awildturtok"}, "path": "backend/src/test/java/com/bakdata/conquery/integration/IntegrationTests.java", "diffHunk": "@@ -64,7 +64,7 @@\n \tpublic Stream<DynamicNode> programmaticTests() {\n \t\tList<Class<?>> programmatic = CPSTypeIdResolver\n \t\t\t.SCAN_RESULT\n-\t\t\t.getClassesImplementing(ProgrammaticIntegrationTest.class.getName())\n+\t\t\t.getClassesImplementing(ProgrammaticIntegrationTest.This.class.getName())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f79fb9970c458825b2e48ee5526de9b03b5f559"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODEzNDM2OnYy", "diffSide": "RIGHT", "path": "backend/src/test/java/com/bakdata/conquery/integration/tests/ConceptPermissionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOTo0ODo1M1rOG8CalA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOTo0ODo1M1rOG8CalA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwNzMxNg==", "bodyText": "This", "url": "https://github.com/bakdata/conquery/pull/1311#discussion_r465607316", "createdAt": "2020-08-05T09:48:53Z", "author": {"login": "awildturtok"}, "path": "backend/src/test/java/com/bakdata/conquery/integration/tests/ConceptPermissionTest.java", "diffHunk": "@@ -29,7 +29,7 @@\n import org.apache.shiro.authz.UnauthorizedException;\n \n @Slf4j\n-public class ConceptPermissionTest extends IntegrationTest.Simple implements ProgrammaticIntegrationTest {\n+public class ConceptPermissionTest extends IntegrationTest.Simple implements ProgrammaticIntegrationTest.This {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f79fb9970c458825b2e48ee5526de9b03b5f559"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODEzNTAzOnYy", "diffSide": "RIGHT", "path": "backend/src/test/java/com/bakdata/conquery/integration/tests/ProgrammaticIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOTo0OTowNVrOG8CbBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOTo0OTowNVrOG8CbBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwNzQyOA==", "bodyText": "This", "url": "https://github.com/bakdata/conquery/pull/1311#discussion_r465607428", "createdAt": "2020-08-05T09:49:05Z", "author": {"login": "awildturtok"}, "path": "backend/src/test/java/com/bakdata/conquery/integration/tests/ProgrammaticIntegrationTest.java", "diffHunk": "@@ -3,5 +3,9 @@\n import com.bakdata.conquery.integration.IntegrationTest;\n \n public interface ProgrammaticIntegrationTest extends IntegrationTest {\n+\t\n+\tinterface This extends ProgrammaticIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f79fb9970c458825b2e48ee5526de9b03b5f559"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1345, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}