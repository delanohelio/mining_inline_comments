{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMTE1MzE5", "number": 1414, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDoyODoxMFrOE3KSwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMTowMDo0MFrOE3LGcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Mjc1Nzc4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/internationalization/CQElementC10n.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDoyODoxMFrOHwV-1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDoyODoxMFrOHwV-1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1Mzg0Ng==", "bodyText": "Doku", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520453846", "createdAt": "2020-11-10T10:28:10Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/internationalization/CQElementC10n.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.bakdata.conquery.internationalization;\n+\n+import c10n.annotations.De;\n+import c10n.annotations.En;\n+\n+public interface CQElementC10n {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Mjc2MTM5OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/events/Bucket.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDoyOTowMVrOHwWBIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzo0MTowN1rOHwdBEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1NDQzMw==", "bodyText": "ist das ein Bug gewesen?", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520454433", "createdAt": "2020-11-10T10:29:01Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/Bucket.java", "diffHunk": "@@ -80,6 +80,13 @@ public BucketId createId() {\n \t}\n \n \tpublic boolean containsLocalEntity(int localEntity) {\n+\t\tif(offsets.length != 1 && offsets.length != getBucketSize()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2OTEwNg==", "bodyText": "@awildturtok das war sehr komisch, und hat aufeinmal die CI gefailed, obwohl ich mit dem PR eigentlich nichts in die Richtung angepasst hatte. Das sollten wir im Auge behalten", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520569106", "createdAt": "2020-11-10T13:41:07Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/Bucket.java", "diffHunk": "@@ -80,6 +80,13 @@ public BucketId createId() {\n \t}\n \n \tpublic boolean containsLocalEntity(int localEntity) {\n+\t\tif(offsets.length != 1 && offsets.length != getBucketSize()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1NDQzMw=="}, "originalCommit": {"oid": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Mjc2MjY5OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDoyOToxOVrOHwWB6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDozMjo1OFrOHwWK9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1NDYzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Some unusual suffix. Its not too bad if someone actually this. \n          \n          \n            \n            \t * Some unusual suffix. Its not too bad if someone actually uses this.", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520454634", "createdAt": "2020-11-10T10:29:19Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "diffHunk": "@@ -75,6 +75,11 @@\n @NoArgsConstructor\n @JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"type\")\n public abstract class ManagedExecution<R extends ShardResult> extends IdentifiableImpl<ManagedExecutionId> implements Taggable, Shareable, Labelable {\n+\t\n+\t/**\n+\t * Some unusual suffix. Its not too bad if someone actually this. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1Njk1MQ==", "bodyText": "Die Strategie finde ich etwas merkw\u00fcrdig, du f\u00fcgst hier bewusst ins Label M\u00fcll hinzu, damit du sicher bist, dass es nicht gesetzt ist? W\u00fcrde es nicht mehr Sinn machen, das hier eben ungesetzt zu lassen und ne Migration zum ent-setzen zu machen?", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520456951", "createdAt": "2020-11-10T10:32:58Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "diffHunk": "@@ -75,6 +75,11 @@\n @NoArgsConstructor\n @JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"type\")\n public abstract class ManagedExecution<R extends ShardResult> extends IdentifiableImpl<ManagedExecutionId> implements Taggable, Shareable, Labelable {\n+\t\n+\t/**\n+\t * Some unusual suffix. Its not too bad if someone actually this. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1NDYzNA=="}, "originalCommit": {"oid": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Mjc4NDg2OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ResultProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDozNDo1M1rOHwWPlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDozNDowNVrOHwfZPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1ODEzMg==", "bodyText": "macht das sinn, den im SerializingStore zu haben?", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520458132", "createdAt": "2020-11-10T10:34:53Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ResultProcessor.java", "diffHunk": "@@ -51,8 +53,17 @@ public static ResponseBuilder getResult(User user, DatasetId datasetId, ManagedE\n \n \t\ttry {\n \t\t\tStreamingOutput out = exec.getResult(mappingState, settings, charset, config.getCsv().getLineSeparator());\n-\n-\t\t\treturn Response.ok(out);\n+\t\t\t\n+\t\t\tResponseBuilder response = Response.ok(out);\n+\t\t\tString label = exec.getLabel();\n+\t\t\tif(!(Strings.isNullOrEmpty(label) || label.isBlank())) {\n+\t\t\t\t// Set filename from label if the label was set, otherwise the browser will name the file according to the request path\n+\t\t\t\tresponse.header(\"Content-Disposition\", String.format(\n+\t\t\t\t\t\"attachment; filename=\\\"%s.%s\\\"\",\n+\t\t\t\t\tSerializingStore.SAVE_FILENAME_REPLACEMENT_MATCHER.matcher(exec.getLabel()).replaceAll(\"_\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU4MTAwNg==", "bodyText": "Jetzt kann er da eigentlich raus.", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520581006", "createdAt": "2020-11-10T13:57:48Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ResultProcessor.java", "diffHunk": "@@ -51,8 +53,17 @@ public static ResponseBuilder getResult(User user, DatasetId datasetId, ManagedE\n \n \t\ttry {\n \t\t\tStreamingOutput out = exec.getResult(mappingState, settings, charset, config.getCsv().getLineSeparator());\n-\n-\t\t\treturn Response.ok(out);\n+\t\t\t\n+\t\t\tResponseBuilder response = Response.ok(out);\n+\t\t\tString label = exec.getLabel();\n+\t\t\tif(!(Strings.isNullOrEmpty(label) || label.isBlank())) {\n+\t\t\t\t// Set filename from label if the label was set, otherwise the browser will name the file according to the request path\n+\t\t\t\tresponse.header(\"Content-Disposition\", String.format(\n+\t\t\t\t\t\"attachment; filename=\\\"%s.%s\\\"\",\n+\t\t\t\t\tSerializingStore.SAVE_FILENAME_REPLACEMENT_MATCHER.matcher(exec.getLabel()).replaceAll(\"_\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1ODEzMg=="}, "originalCommit": {"oid": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwODA2Mw==", "bodyText": "Ist raus", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520608063", "createdAt": "2020-11-10T14:34:05Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ResultProcessor.java", "diffHunk": "@@ -51,8 +53,17 @@ public static ResponseBuilder getResult(User user, DatasetId datasetId, ManagedE\n \n \t\ttry {\n \t\t\tStreamingOutput out = exec.getResult(mappingState, settings, charset, config.getCsv().getLineSeparator());\n-\n-\t\t\treturn Response.ok(out);\n+\t\t\t\n+\t\t\tResponseBuilder response = Response.ok(out);\n+\t\t\tString label = exec.getLabel();\n+\t\t\tif(!(Strings.isNullOrEmpty(label) || label.isBlank())) {\n+\t\t\t\t// Set filename from label if the label was set, otherwise the browser will name the file according to the request path\n+\t\t\t\tresponse.header(\"Content-Disposition\", String.format(\n+\t\t\t\t\t\"attachment; filename=\\\"%s.%s\\\"\",\n+\t\t\t\t\tSerializingStore.SAVE_FILENAME_REPLACEMENT_MATCHER.matcher(exec.getLabel()).replaceAll(\"_\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1ODEzMg=="}, "originalCommit": {"oid": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Mjg3MDY1OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDo1NjoxM1rOHwXEsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDo1NjoxM1rOHwXEsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3MTczMA==", "bodyText": "Die ganze Strategie musst du etwas weiter ausf\u00fchren", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520471730", "createdAt": "2020-11-10T10:56:13Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java", "diffHunk": "@@ -219,4 +230,48 @@ protected URL getDownloadURLInternal(@NonNull UriBuilder url) throws MalformedUR\n \t\t\t.build()\n \t\t\t.toURL();\n \t}\n+\n+\tprivate static final int MAX_CONCEPT_LABEL_CONCAT_LENGTH = 20;\n+\t@Override\n+\tprotected void makeDefaultLabel(final StringBuilder sb) {\n+\t\tfinal Map<Class<? extends Visitable>,List<Visitable>> sortedContents = new HashMap<>();\n+\t\tQueryVisitor visitor = new QueryVisitor() {\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic void accept(Visitable t) {\n+\t\t\t\tsortedContents.computeIfAbsent(t.getClass(), (clazz) -> new ArrayList<>()).add(t);\n+\t\t\t}\n+\t\t};\n+\t\tquery.visit(visitor);\n+\t\t\n+\t\tList<Visitable> externals = sortedContents.computeIfAbsent(CQExternal.class, (clazz)-> List.of());\n+\t\tif(!externals.isEmpty()) {\n+\t\t\tif (sb.length() > 0) {\n+\t\t\t\tsb.append(\" \");\n+\t\t\t}\n+\t\t\tsb.append(C10N.get(CQElementC10n.class, I18n.LOCALE.get()).external());\n+\t\t}\n+\t\t\n+\t\tif( !sortedContents.computeIfAbsent(CQReusedQuery.class, (clazz)-> List.of()).isEmpty()) {\n+\t\t\tif (sb.length() > 0) {\n+\t\t\t\tsb.append(\" \");\n+\t\t\t}\n+\t\t\tsb.append(C10N.get(CQElementC10n.class, I18n.LOCALE.get()).reused());\n+\t\t}\n+\t\t\n+\t\tfinal AtomicInteger length = new AtomicInteger();\n+\t\tString usedConcepts = sortedContents.computeIfAbsent(CQConcept.class, (clazz)-> List.of()).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Mjg3NjA2OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDo1NzoyOVrOHwXH9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzo0MzowNlrOHwdGjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3MjU2Ng==", "bodyText": "W\u00fcrde es nicht fast ausreichen, die einfach zusammen zu kleben und dann truncaten mit einer elipsis (...)? Aber eigentlich coole Idee!", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520472566", "createdAt": "2020-11-10T10:57:29Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java", "diffHunk": "@@ -219,4 +230,48 @@ protected URL getDownloadURLInternal(@NonNull UriBuilder url) throws MalformedUR\n \t\t\t.build()\n \t\t\t.toURL();\n \t}\n+\n+\tprivate static final int MAX_CONCEPT_LABEL_CONCAT_LENGTH = 20;\n+\t@Override\n+\tprotected void makeDefaultLabel(final StringBuilder sb) {\n+\t\tfinal Map<Class<? extends Visitable>,List<Visitable>> sortedContents = new HashMap<>();\n+\t\tQueryVisitor visitor = new QueryVisitor() {\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic void accept(Visitable t) {\n+\t\t\t\tsortedContents.computeIfAbsent(t.getClass(), (clazz) -> new ArrayList<>()).add(t);\n+\t\t\t}\n+\t\t};\n+\t\tquery.visit(visitor);\n+\t\t\n+\t\tList<Visitable> externals = sortedContents.computeIfAbsent(CQExternal.class, (clazz)-> List.of());\n+\t\tif(!externals.isEmpty()) {\n+\t\t\tif (sb.length() > 0) {\n+\t\t\t\tsb.append(\" \");\n+\t\t\t}\n+\t\t\tsb.append(C10N.get(CQElementC10n.class, I18n.LOCALE.get()).external());\n+\t\t}\n+\t\t\n+\t\tif( !sortedContents.computeIfAbsent(CQReusedQuery.class, (clazz)-> List.of()).isEmpty()) {\n+\t\t\tif (sb.length() > 0) {\n+\t\t\t\tsb.append(\" \");\n+\t\t\t}\n+\t\t\tsb.append(C10N.get(CQElementC10n.class, I18n.LOCALE.get()).reused());\n+\t\t}\n+\t\t\n+\t\tfinal AtomicInteger length = new AtomicInteger();\n+\t\tString usedConcepts = sortedContents.computeIfAbsent(CQConcept.class, (clazz)-> List.of()).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU3MDUwOA==", "bodyText": "hatte ich auch gedacht, aber da ich das label der Query auch als validen Dateinamen nehmen m\u00f6chte wollte ich nicht, dass der default Name einen komischen Dateinamen erzeugt.", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520570508", "createdAt": "2020-11-10T13:43:06Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java", "diffHunk": "@@ -219,4 +230,48 @@ protected URL getDownloadURLInternal(@NonNull UriBuilder url) throws MalformedUR\n \t\t\t.build()\n \t\t\t.toURL();\n \t}\n+\n+\tprivate static final int MAX_CONCEPT_LABEL_CONCAT_LENGTH = 20;\n+\t@Override\n+\tprotected void makeDefaultLabel(final StringBuilder sb) {\n+\t\tfinal Map<Class<? extends Visitable>,List<Visitable>> sortedContents = new HashMap<>();\n+\t\tQueryVisitor visitor = new QueryVisitor() {\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic void accept(Visitable t) {\n+\t\t\t\tsortedContents.computeIfAbsent(t.getClass(), (clazz) -> new ArrayList<>()).add(t);\n+\t\t\t}\n+\t\t};\n+\t\tquery.visit(visitor);\n+\t\t\n+\t\tList<Visitable> externals = sortedContents.computeIfAbsent(CQExternal.class, (clazz)-> List.of());\n+\t\tif(!externals.isEmpty()) {\n+\t\t\tif (sb.length() > 0) {\n+\t\t\t\tsb.append(\" \");\n+\t\t\t}\n+\t\t\tsb.append(C10N.get(CQElementC10n.class, I18n.LOCALE.get()).external());\n+\t\t}\n+\t\t\n+\t\tif( !sortedContents.computeIfAbsent(CQReusedQuery.class, (clazz)-> List.of()).isEmpty()) {\n+\t\t\tif (sb.length() > 0) {\n+\t\t\t\tsb.append(\" \");\n+\t\t\t}\n+\t\t\tsb.append(C10N.get(CQElementC10n.class, I18n.LOCALE.get()).reused());\n+\t\t}\n+\t\t\n+\t\tfinal AtomicInteger length = new AtomicInteger();\n+\t\tString usedConcepts = sortedContents.computeIfAbsent(CQConcept.class, (clazz)-> List.of()).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3MjU2Ng=="}, "originalCommit": {"oid": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Mjg4MTQwOnYy", "diffSide": "LEFT", "path": "backend/src/main/java/com/bakdata/conquery/models/types/specific/StringTypeDictionary.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDo1ODozN1rOHwXLPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzo0NDoxNlrOHwdJ5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3MzQwNg==", "bodyText": "nice! Damit habe ich etwas gestruggled bei meinen Buckets!", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520473406", "createdAt": "2020-11-10T10:58:37Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/types/specific/StringTypeDictionary.java", "diffHunk": "@@ -34,18 +34,23 @@\n public class StringTypeDictionary extends CTypeVarInt<Integer> {\n \n \t@NotNull @Nonnull\n-\tprivate DictionaryId dictionaryId = new DictionaryId(new DatasetId(\"null\"), UUID.randomUUID().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU3MTM2NA==", "bodyText": "Das geh\u00f6rt auch noch zum Fix von dem wierden Bug", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520571364", "createdAt": "2020-11-10T13:44:16Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/types/specific/StringTypeDictionary.java", "diffHunk": "@@ -34,18 +34,23 @@\n public class StringTypeDictionary extends CTypeVarInt<Integer> {\n \n \t@NotNull @Nonnull\n-\tprivate DictionaryId dictionaryId = new DictionaryId(new DatasetId(\"null\"), UUID.randomUUID().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3MzQwNg=="}, "originalCommit": {"oid": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Mjg5MDA4OnYy", "diffSide": "RIGHT", "path": "backend/src/test/java/com/bakdata/conquery/util/NonPersistentNamespaceStorage.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMTowMDo0MFrOHwXQig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDoyODowNVrOHwfHmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3NDc2Mg==", "bodyText": "den hast du ausversehen gepusht?", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520474762", "createdAt": "2020-11-10T11:00:40Z", "author": {"login": "awildturtok"}, "path": "backend/src/test/java/com/bakdata/conquery/util/NonPersistentNamespaceStorage.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package com.bakdata.conquery.util;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+\n+import javax.validation.Validator;\n+\n+import com.bakdata.conquery.io.xodus.MetaStorage;\n+import com.bakdata.conquery.io.xodus.NamespaceStorage;\n+import com.bakdata.conquery.models.concepts.Concept;\n+import com.bakdata.conquery.models.concepts.StructureNode;\n+import com.bakdata.conquery.models.datasets.Dataset;\n+import com.bakdata.conquery.models.datasets.Import;\n+import com.bakdata.conquery.models.dictionary.Dictionary;\n+import com.bakdata.conquery.models.dictionary.DirectDictionary;\n+import com.bakdata.conquery.models.exceptions.JSONException;\n+import com.bakdata.conquery.models.identifiable.CentralRegistry;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ConceptId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DictionaryId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ImportId;\n+import com.bakdata.conquery.models.identifiable.mapping.PersistentIdMap;\n+import lombok.NonNull;\n+\n+public class NonPersistentNamespaceStorage implements NamespaceStorage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU3NjUwMg==", "bodyText": "Mhhm, ich glaube den habe ich im Test mal gebraucht, ihn aber letztlich vereinfacht sodass der Store nicht mehr ben\u00f6tigt wurde", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520576502", "createdAt": "2020-11-10T13:51:30Z", "author": {"login": "thoniTUB"}, "path": "backend/src/test/java/com/bakdata/conquery/util/NonPersistentNamespaceStorage.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package com.bakdata.conquery.util;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+\n+import javax.validation.Validator;\n+\n+import com.bakdata.conquery.io.xodus.MetaStorage;\n+import com.bakdata.conquery.io.xodus.NamespaceStorage;\n+import com.bakdata.conquery.models.concepts.Concept;\n+import com.bakdata.conquery.models.concepts.StructureNode;\n+import com.bakdata.conquery.models.datasets.Dataset;\n+import com.bakdata.conquery.models.datasets.Import;\n+import com.bakdata.conquery.models.dictionary.Dictionary;\n+import com.bakdata.conquery.models.dictionary.DirectDictionary;\n+import com.bakdata.conquery.models.exceptions.JSONException;\n+import com.bakdata.conquery.models.identifiable.CentralRegistry;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ConceptId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DictionaryId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ImportId;\n+import com.bakdata.conquery.models.identifiable.mapping.PersistentIdMap;\n+import lombok.NonNull;\n+\n+public class NonPersistentNamespaceStorage implements NamespaceStorage {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3NDc2Mg=="}, "originalCommit": {"oid": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMzU0NA==", "bodyText": "Habe Sie wieder raus geschmissen", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520603544", "createdAt": "2020-11-10T14:28:05Z", "author": {"login": "thoniTUB"}, "path": "backend/src/test/java/com/bakdata/conquery/util/NonPersistentNamespaceStorage.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package com.bakdata.conquery.util;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+\n+import javax.validation.Validator;\n+\n+import com.bakdata.conquery.io.xodus.MetaStorage;\n+import com.bakdata.conquery.io.xodus.NamespaceStorage;\n+import com.bakdata.conquery.models.concepts.Concept;\n+import com.bakdata.conquery.models.concepts.StructureNode;\n+import com.bakdata.conquery.models.datasets.Dataset;\n+import com.bakdata.conquery.models.datasets.Import;\n+import com.bakdata.conquery.models.dictionary.Dictionary;\n+import com.bakdata.conquery.models.dictionary.DirectDictionary;\n+import com.bakdata.conquery.models.exceptions.JSONException;\n+import com.bakdata.conquery.models.identifiable.CentralRegistry;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ConceptId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DictionaryId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ImportId;\n+import com.bakdata.conquery.models.identifiable.mapping.PersistentIdMap;\n+import lombok.NonNull;\n+\n+public class NonPersistentNamespaceStorage implements NamespaceStorage {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3NDc2Mg=="}, "originalCommit": {"oid": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1515, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}