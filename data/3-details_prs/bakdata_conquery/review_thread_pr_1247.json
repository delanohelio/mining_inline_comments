{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMTA2ODI4", "number": 1247, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjo0MzowMVrOEK4SJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoyMDowNFrOEPiBmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODQzMzY1OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjo0MzowMVrOGsLH0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjo0MzowMVrOGsLH0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3Mjc1NA==", "bodyText": "kannst du das im constructor reingeben?", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r448972754", "createdAt": "2020-07-02T12:43:01Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -94,6 +115,22 @@ public SerializingStore(XodusStore store, Validator validator, IStoreInfo storeI\n \t\tkeyReader = Jackson.BINARY_MAPPER\n \t\t\t\t\t\t\t.readerFor(storeInfo.getKeyType())\n \t\t\t\t\t\t\t.withView(InternalOnly.class);\n+\t\t\n+\t\tremoveUnreadablesFromUnderlyingStore = ConqueryConfig.getInstance().getStorage().isRemoveUnreadablesFromStore();\n+\t\t\n+\t\t// Prepare dump directory if there is one set in the config\n+\t\tOptional<File> dumpUnreadable = ConqueryConfig.getInstance().getStorage().getUnreadbleDataDumpDirectory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6de402e728ed3f6bdd6f793503248bf5ce8517de"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODQzOTI0OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjo0NDozNVrOGsLLTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDowNjowMlrOGysmdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3MzY0Ng==", "bodyText": "das kannst du als lokale variablen umsetzen", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r448973646", "createdAt": "2020-07-02T12:44:35Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -71,6 +81,17 @@\n \t */\n \tprivate final IStoreInfo storeInfo;\n \n+\tprivate int totalProcessed = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6de402e728ed3f6bdd6f793503248bf5ce8517de"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxMjcyNQ==", "bodyText": "Hab ich gemacht, war auch gut f\u00fcr den test", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r455812725", "createdAt": "2020-07-16T14:06:02Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -71,6 +81,17 @@\n \t */\n \tprivate final IStoreInfo storeInfo;\n \n+\tprivate int totalProcessed = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3MzY0Ng=="}, "originalCommit": {"oid": "6de402e728ed3f6bdd6f793503248bf5ce8517de"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODQ0NjM0OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjo0NjoyOVrOGsLPqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDowMjo1OVrOGysdog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3NDc2MQ==", "bodyText": "kann mir vorstellen, dass das ganz sch\u00f6n lange logs werden. w\u00fcrde das glaube ich eher pro element einzeln loggen dann habeben wir nicht eine ewig lange zeile", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r448974761", "createdAt": "2020-07-02T12:46:29Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -115,22 +152,65 @@ public void add(KEY key, VALUE value) throws JSONException {\n \n \t@Override\n \tpublic VALUE get(KEY key) {\n-\t\treturn readValue(store.get(writeKey(key)));\n+\t\tByteIterable binValue = store.get(writeKey(key));\n+\t\ttry {\n+\t\t\treturn readValue(binValue);\t\t\t\n+\t\t} catch (Exception e) {\n+\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\tdumpToFile(binValue, key.toString(), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t}\n+\t\t\tif(removeUnreadablesFromUnderlyingStore) {\n+\t\t\t\tremove(key);\n+\t\t\t\t// Null seems to be an acceptable return value in this case\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tThrowables.throwIfUnchecked(e);\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n \t}\n \n \t@Override\n \tpublic void forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\t\ttotalProcessed = 0;\n+\t\tfailedKeys = 0;\n+\t\tfailedValues = 0;\n+\t\tArrayList<ByteIterable> unreadables = new ArrayList<>();\n \t\tstore.forEach((k, v) -> {\n+\t\t\ttotalProcessed++;\n \t\t\ttry {\n \t\t\t\ttry {\n \t\t\t\t\tconsumer.accept(readKey(k), readValue(v), v.getLength());\n \t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tlog.warn(\"Could not parse value for key \" + readKey(k), e);\n+\t\t\t\t\tif(unreadableValuesDumpDir != null) {\t\t\t\t\t\t\n+\t\t\t\t\t\tdumpToFile(v, Jackson.BINARY_MAPPER.readerFor(String.class).readValue(k.getBytesUnsafe()), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlog.warn(\"Could not parse value for key \" + readKey(k), e);\t\t\t\t\t\t\n+\t\t\t\t\t}\n+\t\t\t\t\tif(removeUnreadablesFromUnderlyingStore) {\n+\t\t\t\t\t\tunreadables.add(k);\n+\t\t\t\t\t}\n+\t\t\t\t\tfailedValues++;\n \t\t\t\t}\n \t\t\t} catch (Exception e) {\n \t\t\t\tlog.warn(\"Could not parse key \" + k, e);\n+\t\t\t\tfailedKeys++;\n \t\t\t}\n \t\t});\n+\t\t// Print some statistics\n+\t\tlog.info(String.format(\"While processing store %s:\\n\\tEntries processed:\\t%d\\n\\tKey read failure:\\t%d (%.2f%%)\\n\\tValue read failure:\\t%d (%.2f%%)\",\n+\t\t\tthis.storeInfo.getXodusName(),\n+\t\t\ttotalProcessed, failedKeys,\n+\t\t\t(float) failedKeys/totalProcessed*100,\n+\t\t\tfailedValues,\n+\t\t\t(float) failedValues/totalProcessed*100));\n+\t\t\n+\t\tif(removeUnreadablesFromUnderlyingStore) {\n+\t\t\tlog.info(\"Removing the following unreadable elements from the store {}: {}\", storeInfo.getXodusName(), unreadables.stream()\n+\t\t\t\t.map(ByteIterable::getBytesUnsafe)\n+\t\t\t\t.map(String::new)\n+\t\t\t\t.collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6de402e728ed3f6bdd6f793503248bf5ce8517de"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxMDQ2Ng==", "bodyText": "Ich hab das  log gek\u00fcrzt", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r455810466", "createdAt": "2020-07-16T14:02:59Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -115,22 +152,65 @@ public void add(KEY key, VALUE value) throws JSONException {\n \n \t@Override\n \tpublic VALUE get(KEY key) {\n-\t\treturn readValue(store.get(writeKey(key)));\n+\t\tByteIterable binValue = store.get(writeKey(key));\n+\t\ttry {\n+\t\t\treturn readValue(binValue);\t\t\t\n+\t\t} catch (Exception e) {\n+\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\tdumpToFile(binValue, key.toString(), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t}\n+\t\t\tif(removeUnreadablesFromUnderlyingStore) {\n+\t\t\t\tremove(key);\n+\t\t\t\t// Null seems to be an acceptable return value in this case\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tThrowables.throwIfUnchecked(e);\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n \t}\n \n \t@Override\n \tpublic void forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\t\ttotalProcessed = 0;\n+\t\tfailedKeys = 0;\n+\t\tfailedValues = 0;\n+\t\tArrayList<ByteIterable> unreadables = new ArrayList<>();\n \t\tstore.forEach((k, v) -> {\n+\t\t\ttotalProcessed++;\n \t\t\ttry {\n \t\t\t\ttry {\n \t\t\t\t\tconsumer.accept(readKey(k), readValue(v), v.getLength());\n \t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tlog.warn(\"Could not parse value for key \" + readKey(k), e);\n+\t\t\t\t\tif(unreadableValuesDumpDir != null) {\t\t\t\t\t\t\n+\t\t\t\t\t\tdumpToFile(v, Jackson.BINARY_MAPPER.readerFor(String.class).readValue(k.getBytesUnsafe()), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlog.warn(\"Could not parse value for key \" + readKey(k), e);\t\t\t\t\t\t\n+\t\t\t\t\t}\n+\t\t\t\t\tif(removeUnreadablesFromUnderlyingStore) {\n+\t\t\t\t\t\tunreadables.add(k);\n+\t\t\t\t\t}\n+\t\t\t\t\tfailedValues++;\n \t\t\t\t}\n \t\t\t} catch (Exception e) {\n \t\t\t\tlog.warn(\"Could not parse key \" + k, e);\n+\t\t\t\tfailedKeys++;\n \t\t\t}\n \t\t});\n+\t\t// Print some statistics\n+\t\tlog.info(String.format(\"While processing store %s:\\n\\tEntries processed:\\t%d\\n\\tKey read failure:\\t%d (%.2f%%)\\n\\tValue read failure:\\t%d (%.2f%%)\",\n+\t\t\tthis.storeInfo.getXodusName(),\n+\t\t\ttotalProcessed, failedKeys,\n+\t\t\t(float) failedKeys/totalProcessed*100,\n+\t\t\tfailedValues,\n+\t\t\t(float) failedValues/totalProcessed*100));\n+\t\t\n+\t\tif(removeUnreadablesFromUnderlyingStore) {\n+\t\t\tlog.info(\"Removing the following unreadable elements from the store {}: {}\", storeInfo.getXodusName(), unreadables.stream()\n+\t\t\t\t.map(ByteIterable::getBytesUnsafe)\n+\t\t\t\t.map(String::new)\n+\t\t\t\t.collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3NDc2MQ=="}, "originalCommit": {"oid": "6de402e728ed3f6bdd6f793503248bf5ce8517de"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODQ0ODc3OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjo0NzoxMVrOGsLRPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjo0NzoxMVrOGsLRPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3NTE2NA==", "bodyText": "Namen sanitizen f\u00fcr filename", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r448975164", "createdAt": "2020-07-02T12:47:11Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -209,6 +290,36 @@ private ByteIterable write(Object obj, ObjectWriter writer) {\n \t\t}\n \t}\n \n+\t/**\n+\t * Dumps the content of an unreadable value to a file as a json (it tries to parse it as an object and than tries to dump it as a json).\n+\t * @param obj The object to dump.\n+\t * @param keyOfDump The key under which the unreadable value is accessible. It is used for the file name.\n+\t * @param unreadableDumpDir The director to dump to. The method assumes that the directory exists and is okay to write to.\n+\t * @param storeName The name of the store which is also used in the dump file name.\n+\t */\n+\tprivate static void dumpToFile(@NonNull ByteIterable obj, @NonNull String keyOfDump, @NonNull File unreadableDumpDir, @NonNull String storeName) {\n+\t\t// Create dump filehandle\n+\t\tFile dumpfile = new File(Path.of(unreadableDumpDir.getAbsolutePath(), String.format(\"%s-%s-%s.json\",\n+\t\t\t\tDateTimeFormatter.BASIC_ISO_DATE.format(LocalDateTime.now()),\n+\t\t\t\tstoreName,\n+\t\t\t\tkeyOfDump", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6de402e728ed3f6bdd6f793503248bf5ce8517de"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODQ1MzUxOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjo0ODoyNlrOGsLUDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjo0ODoyNlrOGsLUDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3NTg4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tlog.warn(\"Unable to dump unreadable value of key \" + keyOfDump + \" to file \" + dumpfile +\".\", e);\n          \n          \n            \n            \t\t\tlog.error(\"Unable to dump unreadable value of key `{}` to file `{}`\",keyOfDump, dumpfile, e);", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r448975884", "createdAt": "2020-07-02T12:48:26Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -209,6 +290,36 @@ private ByteIterable write(Object obj, ObjectWriter writer) {\n \t\t}\n \t}\n \n+\t/**\n+\t * Dumps the content of an unreadable value to a file as a json (it tries to parse it as an object and than tries to dump it as a json).\n+\t * @param obj The object to dump.\n+\t * @param keyOfDump The key under which the unreadable value is accessible. It is used for the file name.\n+\t * @param unreadableDumpDir The director to dump to. The method assumes that the directory exists and is okay to write to.\n+\t * @param storeName The name of the store which is also used in the dump file name.\n+\t */\n+\tprivate static void dumpToFile(@NonNull ByteIterable obj, @NonNull String keyOfDump, @NonNull File unreadableDumpDir, @NonNull String storeName) {\n+\t\t// Create dump filehandle\n+\t\tFile dumpfile = new File(Path.of(unreadableDumpDir.getAbsolutePath(), String.format(\"%s-%s-%s.json\",\n+\t\t\t\tDateTimeFormatter.BASIC_ISO_DATE.format(LocalDateTime.now()),\n+\t\t\t\tstoreName,\n+\t\t\t\tkeyOfDump\n+\t\t\t\t)\n+\t\t\t).toString());\n+\t\tif(dumpfile.exists()) {\n+\t\t\tlog.warn(\"Abort dumping of file {} because it already exists.\",dumpfile);\n+\t\t\treturn;\n+\t\t}\n+\t\t// Write dump\n+\t\ttry {\n+\t\t\tlog.info(\"Dumping value of key {} to {} (because it cannot be deserialized anymore).\", keyOfDump, dumpfile.getCanonicalPath());\n+\t\t\tJsonNode dump = Jackson.BINARY_MAPPER.readerFor(JsonNode.class).readValue(obj.getBytesUnsafe(), 0, obj.getLength());\n+\t\t\tJackson.MAPPER.writer().writeValue(dumpfile, dump);\n+\t\t}\n+\t\tcatch (IOException e) {\n+\t\t\tlog.warn(\"Unable to dump unreadable value of key \" + keyOfDump + \" to file \" + dumpfile +\".\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6de402e728ed3f6bdd6f793503248bf5ce8517de"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODQ1NTMwOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/config/StorageConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjo0ODo1OFrOGsLVIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDowNTozNVrOGyslNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3NjE2MQ==", "bodyText": "reicht null nicht?", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r448976161", "createdAt": "2020-07-02T12:48:58Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/config/StorageConfig.java", "diffHunk": "@@ -21,4 +23,14 @@\n \tprivate boolean useWeakDictionaryCaching = true;\n \t@NotNull\n \tprivate Duration weakCacheDuration = Duration.hours(48);\n+\t\n+\t/**\n+\t * Flag for the {@link SerializingStore} whether to delete values from the underlying store, that cannot be mapped to an object anymore.\n+\t */\n+\tprivate boolean removeUnreadablesFromStore = false;\n+\t\n+\t/**\n+\t * When set, all values that could not be deserialized from the persistent store, are dump into individual files.\n+\t */\n+\tprivate Optional<File> unreadbleDataDumpDirectory = Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6de402e728ed3f6bdd6f793503248bf5ce8517de"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxMjQwNw==", "bodyText": "Ich fand den guava anspruch ganz gut, dass man kein null ausgibt, damit man sich dar\u00fcber Gedanken macht wenn mal etwas nicht gesetzt ist.\nIn einer Klasse intern kann man weiterhin null nutzen, aber da Konfigurationen genau dazu ausgelegt sind, dass sie andere Sachen konfigurieren finde ich optional hier besser", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r455812407", "createdAt": "2020-07-16T14:05:35Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/config/StorageConfig.java", "diffHunk": "@@ -21,4 +23,14 @@\n \tprivate boolean useWeakDictionaryCaching = true;\n \t@NotNull\n \tprivate Duration weakCacheDuration = Duration.hours(48);\n+\t\n+\t/**\n+\t * Flag for the {@link SerializingStore} whether to delete values from the underlying store, that cannot be mapped to an object anymore.\n+\t */\n+\tprivate boolean removeUnreadablesFromStore = false;\n+\t\n+\t/**\n+\t * When set, all values that could not be deserialized from the persistent store, are dump into individual files.\n+\t */\n+\tprivate Optional<File> unreadbleDataDumpDirectory = Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3NjE2MQ=="}, "originalCommit": {"oid": "6de402e728ed3f6bdd6f793503248bf5ce8517de"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjM4MDU0OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo0NzozNlrOGzK2Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTo0NzowOFrOGzP8YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwODI4Ng==", "bodyText": "Finde ich in get fragw\u00fcrdig weil du dann theoretisch immer IO im hauptpfad hast", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r456308286", "createdAt": "2020-07-17T08:47:36Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -115,22 +151,90 @@ public void add(KEY key, VALUE value) throws JSONException {\n \n \t@Override\n \tpublic VALUE get(KEY key) {\n-\t\treturn readValue(store.get(writeKey(key)));\n+\t\tByteIterable binValue = store.get(writeKey(key));\n+\t\ttry {\n+\t\t\treturn readValue(binValue);\t\t\t\n+\t\t} catch (Exception e) {\n+\t\t\tif(unreadableValuesDumpDir != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3da3ca60bc214ce77a1e1d0d6d74a2aad55dd4b9"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM5MTEyNQ==", "bodyText": "Aber der ganze store ist doch IO", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r456391125", "createdAt": "2020-07-17T11:45:35Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -115,22 +151,90 @@ public void add(KEY key, VALUE value) throws JSONException {\n \n \t@Override\n \tpublic VALUE get(KEY key) {\n-\t\treturn readValue(store.get(writeKey(key)));\n+\t\tByteIterable binValue = store.get(writeKey(key));\n+\t\ttry {\n+\t\t\treturn readValue(binValue);\t\t\t\n+\t\t} catch (Exception e) {\n+\t\t\tif(unreadableValuesDumpDir != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwODI4Ng=="}, "originalCommit": {"oid": "3da3ca60bc214ce77a1e1d0d6d74a2aad55dd4b9"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM5MTc3Nw==", "bodyText": "Lol, Fair!", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r456391777", "createdAt": "2020-07-17T11:47:08Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -115,22 +151,90 @@ public void add(KEY key, VALUE value) throws JSONException {\n \n \t@Override\n \tpublic VALUE get(KEY key) {\n-\t\treturn readValue(store.get(writeKey(key)));\n+\t\tByteIterable binValue = store.get(writeKey(key));\n+\t\ttry {\n+\t\t\treturn readValue(binValue);\t\t\t\n+\t\t} catch (Exception e) {\n+\t\t\tif(unreadableValuesDumpDir != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwODI4Ng=="}, "originalCommit": {"oid": "3da3ca60bc214ce77a1e1d0d6d74a2aad55dd4b9"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjM4NDQ1OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo0ODo0MlrOGzK4lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjo1NDowOVrOGzR3Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwODg4NQ==", "bodyText": "Das du da den BinaryMaper verwendest sieht mir falsch aus. reicht es nicht die Daten einfach zu dumpen?", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r456308885", "createdAt": "2020-07-17T08:48:42Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -115,22 +151,90 @@ public void add(KEY key, VALUE value) throws JSONException {\n \n \t@Override\n \tpublic VALUE get(KEY key) {\n-\t\treturn readValue(store.get(writeKey(key)));\n+\t\tByteIterable binValue = store.get(writeKey(key));\n+\t\ttry {\n+\t\t\treturn readValue(binValue);\t\t\t\n+\t\t} catch (Exception e) {\n+\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\tdumpToFile(binValue, key.toString(), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t}\n+\t\t\tif(removeUnreadablesFromUnderlyingStore) {\n+\t\t\t\tremove(key);\n+\t\t\t\t// Null seems to be an acceptable return value in this case\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tThrowables.throwIfUnchecked(e);\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n \t}\n \n \t@Override\n-\tpublic void forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\tpublic IterationResult forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\t\tIterationResult result = new IterationResult();\n+\t\tArrayList<ByteIterable> unreadables = new ArrayList<>();\n \t\tstore.forEach((k, v) -> {\n+\t\t\tresult.incrTotalProcessed();\n+\t\t\t// Try to read the key first\n+\t\t\tKEY key = null;\n \t\t\ttry {\n-\t\t\t\ttry {\n-\t\t\t\t\tconsumer.accept(readKey(k), readValue(v), v.getLength());\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tlog.warn(\"Could not parse value for key \" + readKey(k), e);\n+\t\t\t\tkey = readKey(k);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tdumpToFile(v, Jackson.BINARY_MAPPER.readerFor(String.class).readValue(k.getBytesUnsafe()), unreadableValuesDumpDir, storeInfo.getXodusName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3da3ca60bc214ce77a1e1d0d6d74a2aad55dd4b9"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3OTA4Mw==", "bodyText": "Ich m\u00f6chte aber schon einen sinnigen Dateinamen haben. Da dachte ich dass der Key eines Objektes ganz gut ist", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r456379083", "createdAt": "2020-07-17T11:15:12Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -115,22 +151,90 @@ public void add(KEY key, VALUE value) throws JSONException {\n \n \t@Override\n \tpublic VALUE get(KEY key) {\n-\t\treturn readValue(store.get(writeKey(key)));\n+\t\tByteIterable binValue = store.get(writeKey(key));\n+\t\ttry {\n+\t\t\treturn readValue(binValue);\t\t\t\n+\t\t} catch (Exception e) {\n+\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\tdumpToFile(binValue, key.toString(), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t}\n+\t\t\tif(removeUnreadablesFromUnderlyingStore) {\n+\t\t\t\tremove(key);\n+\t\t\t\t// Null seems to be an acceptable return value in this case\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tThrowables.throwIfUnchecked(e);\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n \t}\n \n \t@Override\n-\tpublic void forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\tpublic IterationResult forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\t\tIterationResult result = new IterationResult();\n+\t\tArrayList<ByteIterable> unreadables = new ArrayList<>();\n \t\tstore.forEach((k, v) -> {\n+\t\t\tresult.incrTotalProcessed();\n+\t\t\t// Try to read the key first\n+\t\t\tKEY key = null;\n \t\t\ttry {\n-\t\t\t\ttry {\n-\t\t\t\t\tconsumer.accept(readKey(k), readValue(v), v.getLength());\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tlog.warn(\"Could not parse value for key \" + readKey(k), e);\n+\t\t\t\tkey = readKey(k);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tdumpToFile(v, Jackson.BINARY_MAPPER.readerFor(String.class).readValue(k.getBytesUnsafe()), unreadableValuesDumpDir, storeInfo.getXodusName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwODg4NQ=="}, "originalCommit": {"oid": "3da3ca60bc214ce77a1e1d0d6d74a2aad55dd4b9"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQyMzIzOQ==", "bodyText": "Ich nehme jetzt die unsafe bytes zu einem String und lasse dar\u00fcber den savefilename regex laufen.", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r456423239", "createdAt": "2020-07-17T12:54:09Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -115,22 +151,90 @@ public void add(KEY key, VALUE value) throws JSONException {\n \n \t@Override\n \tpublic VALUE get(KEY key) {\n-\t\treturn readValue(store.get(writeKey(key)));\n+\t\tByteIterable binValue = store.get(writeKey(key));\n+\t\ttry {\n+\t\t\treturn readValue(binValue);\t\t\t\n+\t\t} catch (Exception e) {\n+\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\tdumpToFile(binValue, key.toString(), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t}\n+\t\t\tif(removeUnreadablesFromUnderlyingStore) {\n+\t\t\t\tremove(key);\n+\t\t\t\t// Null seems to be an acceptable return value in this case\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tThrowables.throwIfUnchecked(e);\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n \t}\n \n \t@Override\n-\tpublic void forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\tpublic IterationResult forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\t\tIterationResult result = new IterationResult();\n+\t\tArrayList<ByteIterable> unreadables = new ArrayList<>();\n \t\tstore.forEach((k, v) -> {\n+\t\t\tresult.incrTotalProcessed();\n+\t\t\t// Try to read the key first\n+\t\t\tKEY key = null;\n \t\t\ttry {\n-\t\t\t\ttry {\n-\t\t\t\t\tconsumer.accept(readKey(k), readValue(v), v.getLength());\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tlog.warn(\"Could not parse value for key \" + readKey(k), e);\n+\t\t\t\tkey = readKey(k);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tdumpToFile(v, Jackson.BINARY_MAPPER.readerFor(String.class).readValue(k.getBytesUnsafe()), unreadableValuesDumpDir, storeInfo.getXodusName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwODg4NQ=="}, "originalCommit": {"oid": "3da3ca60bc214ce77a1e1d0d6d74a2aad55dd4b9"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjM4ODc4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo0OTo1N1rOGzK7SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjo1NDo1NlrOGzR44A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwOTU3Ng==", "bodyText": "Refactor mal den ganzen Try-Catch Block in eine Funtion die eine Deserialisierende Funktion bekommt und einen Wert rausgibt, dann sparst du dir redundanz und aufgebl\u00e4hten code", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r456309576", "createdAt": "2020-07-17T08:49:57Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -115,22 +151,90 @@ public void add(KEY key, VALUE value) throws JSONException {\n \n \t@Override\n \tpublic VALUE get(KEY key) {\n-\t\treturn readValue(store.get(writeKey(key)));\n+\t\tByteIterable binValue = store.get(writeKey(key));\n+\t\ttry {\n+\t\t\treturn readValue(binValue);\t\t\t\n+\t\t} catch (Exception e) {\n+\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\tdumpToFile(binValue, key.toString(), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t}\n+\t\t\tif(removeUnreadablesFromUnderlyingStore) {\n+\t\t\t\tremove(key);\n+\t\t\t\t// Null seems to be an acceptable return value in this case\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tThrowables.throwIfUnchecked(e);\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n \t}\n \n \t@Override\n-\tpublic void forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\tpublic IterationResult forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\t\tIterationResult result = new IterationResult();\n+\t\tArrayList<ByteIterable> unreadables = new ArrayList<>();\n \t\tstore.forEach((k, v) -> {\n+\t\t\tresult.incrTotalProcessed();\n+\t\t\t// Try to read the key first\n+\t\t\tKEY key = null;\n \t\t\ttry {\n-\t\t\t\ttry {\n-\t\t\t\t\tconsumer.accept(readKey(k), readValue(v), v.getLength());\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tlog.warn(\"Could not parse value for key \" + readKey(k), e);\n+\t\t\t\tkey = readKey(k);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3da3ca60bc214ce77a1e1d0d6d74a2aad55dd4b9"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQyMzY0OA==", "bodyText": "hab die Funktion ausgelagert", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r456423648", "createdAt": "2020-07-17T12:54:56Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -115,22 +151,90 @@ public void add(KEY key, VALUE value) throws JSONException {\n \n \t@Override\n \tpublic VALUE get(KEY key) {\n-\t\treturn readValue(store.get(writeKey(key)));\n+\t\tByteIterable binValue = store.get(writeKey(key));\n+\t\ttry {\n+\t\t\treturn readValue(binValue);\t\t\t\n+\t\t} catch (Exception e) {\n+\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\tdumpToFile(binValue, key.toString(), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t}\n+\t\t\tif(removeUnreadablesFromUnderlyingStore) {\n+\t\t\t\tremove(key);\n+\t\t\t\t// Null seems to be an acceptable return value in this case\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tThrowables.throwIfUnchecked(e);\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n \t}\n \n \t@Override\n-\tpublic void forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\tpublic IterationResult forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\t\tIterationResult result = new IterationResult();\n+\t\tArrayList<ByteIterable> unreadables = new ArrayList<>();\n \t\tstore.forEach((k, v) -> {\n+\t\t\tresult.incrTotalProcessed();\n+\t\t\t// Try to read the key first\n+\t\t\tKEY key = null;\n \t\t\ttry {\n-\t\t\t\ttry {\n-\t\t\t\t\tconsumer.accept(readKey(k), readValue(v), v.getLength());\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tlog.warn(\"Could not parse value for key \" + readKey(k), e);\n+\t\t\t\tkey = readKey(k);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwOTU3Ng=="}, "originalCommit": {"oid": "3da3ca60bc214ce77a1e1d0d6d74a2aad55dd4b9"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjM5MTE3OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo1MDo0MFrOGzK8xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo1MDo0MFrOGzK8xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwOTk1OQ==", "bodyText": "das if kannst du dir hier sparen weil du hier ja nur collectest", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r456309959", "createdAt": "2020-07-17T08:50:40Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -115,22 +151,90 @@ public void add(KEY key, VALUE value) throws JSONException {\n \n \t@Override\n \tpublic VALUE get(KEY key) {\n-\t\treturn readValue(store.get(writeKey(key)));\n+\t\tByteIterable binValue = store.get(writeKey(key));\n+\t\ttry {\n+\t\t\treturn readValue(binValue);\t\t\t\n+\t\t} catch (Exception e) {\n+\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\tdumpToFile(binValue, key.toString(), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t}\n+\t\t\tif(removeUnreadablesFromUnderlyingStore) {\n+\t\t\t\tremove(key);\n+\t\t\t\t// Null seems to be an acceptable return value in this case\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tThrowables.throwIfUnchecked(e);\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n \t}\n \n \t@Override\n-\tpublic void forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\tpublic IterationResult forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\t\tIterationResult result = new IterationResult();\n+\t\tArrayList<ByteIterable> unreadables = new ArrayList<>();\n \t\tstore.forEach((k, v) -> {\n+\t\t\tresult.incrTotalProcessed();\n+\t\t\t// Try to read the key first\n+\t\t\tKEY key = null;\n \t\t\ttry {\n-\t\t\t\ttry {\n-\t\t\t\t\tconsumer.accept(readKey(k), readValue(v), v.getLength());\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tlog.warn(\"Could not parse value for key \" + readKey(k), e);\n+\t\t\t\tkey = readKey(k);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tdumpToFile(v, Jackson.BINARY_MAPPER.readerFor(String.class).readValue(k.getBytesUnsafe()), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (IOException e1) {\n+\t\t\t\t\t\tlog.warn(\"Cannot dump value for key (Bytes {}) to file because the key could not be parsed to in to a String\", k.toString());\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tlog.warn(\"Could not parse key \" + k, e);\n \t\t\t\t}\n+\t\t\t\tif(removeUnreadablesFromUnderlyingStore) {\n+\t\t\t\t\tunreadables.add(k);\n+\t\t\t\t}\n+\t\t\t\tresult.incrFailedKeys();\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\t\n+\t\t\t// Try to read the value\n+\t\t\tVALUE value = null;\n+\t\t\ttry {\n+\t\t\t\tvalue = readValue(v);\n \t\t\t} catch (Exception e) {\n-\t\t\t\tlog.warn(\"Could not parse key \" + k, e);\n+\t\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\t\tdumpToFile(v, key.toString(), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t\t} else {\n+\t\t\t\t\tlog.warn(\"Could not parse value for key \" + key, e);\t\t\t\t\t\t\n+\t\t\t\t}\n+\t\t\t\tif(removeUnreadablesFromUnderlyingStore) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3da3ca60bc214ce77a1e1d0d6d74a2aad55dd4b9"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjM5MjMwOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo1MDo1NlrOGzK9cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo1MDo1NlrOGzK9cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxMDEzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tlog.info(\"Removing {} unreadable elements from the store {}.\", unreadables.size(), storeInfo.getXodusName());\n          \n          \n            \n            \t\t\tlog.warn(\"Removing {} unreadable elements from the store {}.\", unreadables.size(), storeInfo.getXodusName());", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r456310130", "createdAt": "2020-07-17T08:50:56Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -115,22 +151,90 @@ public void add(KEY key, VALUE value) throws JSONException {\n \n \t@Override\n \tpublic VALUE get(KEY key) {\n-\t\treturn readValue(store.get(writeKey(key)));\n+\t\tByteIterable binValue = store.get(writeKey(key));\n+\t\ttry {\n+\t\t\treturn readValue(binValue);\t\t\t\n+\t\t} catch (Exception e) {\n+\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\tdumpToFile(binValue, key.toString(), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t}\n+\t\t\tif(removeUnreadablesFromUnderlyingStore) {\n+\t\t\t\tremove(key);\n+\t\t\t\t// Null seems to be an acceptable return value in this case\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tThrowables.throwIfUnchecked(e);\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n \t}\n \n \t@Override\n-\tpublic void forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\tpublic IterationResult forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\t\tIterationResult result = new IterationResult();\n+\t\tArrayList<ByteIterable> unreadables = new ArrayList<>();\n \t\tstore.forEach((k, v) -> {\n+\t\t\tresult.incrTotalProcessed();\n+\t\t\t// Try to read the key first\n+\t\t\tKEY key = null;\n \t\t\ttry {\n-\t\t\t\ttry {\n-\t\t\t\t\tconsumer.accept(readKey(k), readValue(v), v.getLength());\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tlog.warn(\"Could not parse value for key \" + readKey(k), e);\n+\t\t\t\tkey = readKey(k);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tdumpToFile(v, Jackson.BINARY_MAPPER.readerFor(String.class).readValue(k.getBytesUnsafe()), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (IOException e1) {\n+\t\t\t\t\t\tlog.warn(\"Cannot dump value for key (Bytes {}) to file because the key could not be parsed to in to a String\", k.toString());\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tlog.warn(\"Could not parse key \" + k, e);\n \t\t\t\t}\n+\t\t\t\tif(removeUnreadablesFromUnderlyingStore) {\n+\t\t\t\t\tunreadables.add(k);\n+\t\t\t\t}\n+\t\t\t\tresult.incrFailedKeys();\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\t\n+\t\t\t// Try to read the value\n+\t\t\tVALUE value = null;\n+\t\t\ttry {\n+\t\t\t\tvalue = readValue(v);\n \t\t\t} catch (Exception e) {\n-\t\t\t\tlog.warn(\"Could not parse key \" + k, e);\n+\t\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\t\tdumpToFile(v, key.toString(), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t\t} else {\n+\t\t\t\t\tlog.warn(\"Could not parse value for key \" + key, e);\t\t\t\t\t\t\n+\t\t\t\t}\n+\t\t\t\tif(removeUnreadablesFromUnderlyingStore) {\n+\t\t\t\t\tunreadables.add(k);\n+\t\t\t\t}\n+\t\t\t\tresult.incrFailedValues();\n+\t\t\t\treturn;\n \t\t\t}\n+\t\t\t\n+\t\t\t// Apply the conusmer to key and value\n+\t\t\ttry {\n+\t\t\t\tconsumer.accept(key, value, v.getLength());\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tlog.warn(\"Unable to apply for-each consumer on key[{}]\", key, e);\n+\t\t\t}\n+\n \t\t});\n+\t\t// Print some statistics\n+\t\tlog.info(String.format(\"While processing store %s:\\n\\tEntries processed:\\t%d\\n\\tKey read failure:\\t%d (%.2f%%)\\n\\tValue read failure:\\t%d (%.2f%%)\",\n+\t\t\tthis.storeInfo.getXodusName(),\n+\t\t\tresult.getTotalProcessed(), result.getFailedKeys(),\n+\t\t\t(float) result.getFailedKeys()/result.getTotalProcessed()*100,\n+\t\t\tresult.getFailedValues(),\n+\t\t\t(float) result.getFailedValues()/result.getTotalProcessed()*100));\n+\t\t\n+\t\t// Remove corrupted entries from the store if configured so\n+\t\tif(removeUnreadablesFromUnderlyingStore) {\n+\t\t\tlog.info(\"Removing {} unreadable elements from the store {}.\", unreadables.size(), storeInfo.getXodusName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3da3ca60bc214ce77a1e1d0d6d74a2aad55dd4b9"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjM5MzU2OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo1MToyMlrOGzK-QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo1MToyMlrOGzK-QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxMDMzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tlog.trace(\"Removing value to key {} from store\", key, storeInfo.getXodusName());\n          \n          \n            \n            \t\tlog.trace(\"Removing value to key {} from Store[{}]\", key, storeInfo.getXodusName());", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r456310337", "createdAt": "2020-07-17T08:51:22Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -148,6 +252,7 @@ public void update(KEY key, VALUE value) throws JSONException {\n \n \t@Override\n \tpublic void remove(KEY key) {\n+\t\tlog.trace(\"Removing value to key {} from store\", key, storeInfo.getXodusName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3da3ca60bc214ce77a1e1d0d6d74a2aad55dd4b9"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjM5NjQzOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo1MjoxM1rOGzLACg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTo1MjoxMVrOGzQFSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxMDc5NA==", "bodyText": "W\u00e4re glaube ich auch Sinnvoller alles in eine Datei zu schreiben/appenden, dann sparst du dir IO und File Handles.", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r456310794", "createdAt": "2020-07-17T08:52:13Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -209,6 +314,44 @@ private ByteIterable write(Object obj, ObjectWriter writer) {\n \t\t}\n \t}\n \n+\t/**\n+\t * Dumps the content of an unreadable value to a file as a json (it tries to parse it as an object and than tries to dump it as a json).\n+\t * @param obj The object to dump.\n+\t * @param keyOfDump The key under which the unreadable value is accessible. It is used for the file name.\n+\t * @param unreadableDumpDir The director to dump to. The method assumes that the directory exists and is okay to write to.\n+\t * @param storeName The name of the store which is also used in the dump file name.\n+\t */\n+\tprivate static void dumpToFile(@NonNull ByteIterable obj, @NonNull String keyOfDump, @NonNull File unreadableDumpDir, @NonNull String storeName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3da3ca60bc214ce77a1e1d0d6d74a2aad55dd4b9"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM5NDA1Ng==", "bodyText": "Da die dumps momentan leichter mit find und grep zu sichten sind lasse ich es erstmal so", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r456394056", "createdAt": "2020-07-17T11:52:11Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -209,6 +314,44 @@ private ByteIterable write(Object obj, ObjectWriter writer) {\n \t\t}\n \t}\n \n+\t/**\n+\t * Dumps the content of an unreadable value to a file as a json (it tries to parse it as an object and than tries to dump it as a json).\n+\t * @param obj The object to dump.\n+\t * @param keyOfDump The key under which the unreadable value is accessible. It is used for the file name.\n+\t * @param unreadableDumpDir The director to dump to. The method assumes that the directory exists and is okay to write to.\n+\t * @param storeName The name of the store which is also used in the dump file name.\n+\t */\n+\tprivate static void dumpToFile(@NonNull ByteIterable obj, @NonNull String keyOfDump, @NonNull File unreadableDumpDir, @NonNull String storeName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxMDc5NA=="}, "originalCommit": {"oid": "3da3ca60bc214ce77a1e1d0d6d74a2aad55dd4b9"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjQwMjQ0OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo1NDowN1rOGzLD1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo1NDowN1rOGzLD1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxMTc2NA==", "bodyText": "https://stackoverflow.com/a/15075907/409761", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r456311764", "createdAt": "2020-07-17T08:54:07Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -209,6 +314,44 @@ private ByteIterable write(Object obj, ObjectWriter writer) {\n \t\t}\n \t}\n \n+\t/**\n+\t * Dumps the content of an unreadable value to a file as a json (it tries to parse it as an object and than tries to dump it as a json).\n+\t * @param obj The object to dump.\n+\t * @param keyOfDump The key under which the unreadable value is accessible. It is used for the file name.\n+\t * @param unreadableDumpDir The director to dump to. The method assumes that the directory exists and is okay to write to.\n+\t * @param storeName The name of the store which is also used in the dump file name.\n+\t */\n+\tprivate static void dumpToFile(@NonNull ByteIterable obj, @NonNull String keyOfDump, @NonNull File unreadableDumpDir, @NonNull String storeName) {\n+\t\t// Create dump filehandle\n+\t\tFile dumpfile = new File(unreadableDumpDir, makeDumpfileName(keyOfDump, storeName));\n+\t\tif(dumpfile.exists()) {\n+\t\t\tlog.warn(\"Abort dumping of file {} because it already exists.\",dumpfile);\n+\t\t\treturn;\n+\t\t}\n+\t\t// Write dump\n+\t\ttry {\n+\t\t\tlog.info(\"Dumping value of key {} to {} (because it cannot be deserialized anymore).\", keyOfDump, dumpfile.getCanonicalPath());\n+\t\t\tJsonNode dump = Jackson.BINARY_MAPPER.readerFor(JsonNode.class).readValue(obj.getBytesUnsafe(), 0, obj.getLength());\n+\t\t\tJackson.MAPPER.writer().writeValue(dumpfile, dump);\n+\t\t}\n+\t\tcatch (IOException e) {\n+\t\t\tlog.error(\"Unable to dump unreadable value of key `{}` to file `{}`\",keyOfDump, dumpfile, e);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Generates a valid file name from the key of the dump object, the store and the current time.\n+\t * However, it does not ensure that there is no file with such a name.\n+\t */\n+\tprivate static String makeDumpfileName(String keyOfDump, String storeName) {\n+\t\treturn String.format(\"%s-%s-%s.%s\",\n+\t\t\tDateTimeFormatter.BASIC_ISO_DATE.format(LocalDateTime.now()),\n+\t\t\tstoreName,\n+\t\t\tkeyOfDump,\n+\t\t\tDUMP_FILE_EXTENTION\n+\t\t\t).replaceAll(\"[\\\\\\\\/:*?\\\"<>|]\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3da3ca60bc214ce77a1e1d0d6d74a2aad55dd4b9"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzE4ODUyOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoxMjoyNFrOGzScSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzo1ODoxMlrOGzUFcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMjcxNA==", "bodyText": "Ist das nicht sogar komplett statisch?", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r456432714", "createdAt": "2020-07-17T13:12:24Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -115,22 +155,100 @@ public void add(KEY key, VALUE value) throws JSONException {\n \n \t@Override\n \tpublic VALUE get(KEY key) {\n-\t\treturn readValue(store.get(writeKey(key)));\n+\t\tByteIterable binValue = store.get(writeKey(key));\n+\t\ttry {\n+\t\t\treturn readValue(binValue);\t\t\t\n+\t\t} catch (Exception e) {\n+\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\tdumpToFile(binValue, key.toString(), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t}\n+\t\t\tif(removeUnreadablesFromUnderlyingStore) {\n+\t\t\t\tremove(key);\n+\t\t\t\t// Null seems to be an acceptable return value in this case\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tThrowables.throwIfUnchecked(e);\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n \t}\n \n+\t/**\n+\t * Iterates a given consumer over the entries of this store.\n+\t * Depending on the {@link StorageConfig} corrupt entries may be dump to a file and/or removed from the store.\n+\t * These entries are not submitted to the consumer.\n+\t */\n \t@Override\n-\tpublic void forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\tpublic IterationStatistic forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\t\tIterationStatistic result = new IterationStatistic();\n+\t\tArrayList<ByteIterable> unreadables = new ArrayList<>();\n \t\tstore.forEach((k, v) -> {\n+\t\t\tresult.incrTotalProcessed();\n+\n+\t\t\t// Try to read the key first\n+\t\t\tKEY key = getDeserializedAndDumpFailed(\n+\t\t\t\tk,\n+\t\t\t\tthis::readKey,\n+\t\t\t\t() -> new String(k.getBytesUnsafe()),\n+\t\t\t\tv,\n+\t\t\t\t\"Could not parse key [{}]\");\n+\t\t\tif (key == null) {\n+\t\t\t\tunreadables.add(k);\n+\t\t\t\tresult.incrFailedKeys();\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\t// Try to read the value\n+\t\t\tVALUE value = getDeserializedAndDumpFailed(\n+\t\t\t\tv, \n+\t\t\t\tthis::readValue, \n+\t\t\t\t() -> key.toString(),\n+\t\t\t\tv, \n+\t\t\t\t\"Could not parse value for key [{}]\");\n+\t\t\tif (value == null) {\n+\t\t\t\tunreadables.add(k);\n+\t\t\t\tresult.incrFailedValues();\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\t// Apply the conusmer to key and value\n \t\t\ttry {\n-\t\t\t\ttry {\n-\t\t\t\t\tconsumer.accept(readKey(k), readValue(v), v.getLength());\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tlog.warn(\"Could not parse value for key \" + readKey(k), e);\n-\t\t\t\t}\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tlog.warn(\"Could not parse key \" + k, e);\n+\t\t\t\tconsumer.accept(key, value, v.getLength());\n+\t\t\t}\n+\t\t\tcatch (Exception e) {\n+\t\t\t\tlog.warn(\"Unable to apply for-each consumer on key[{}]\", key, e);\n \t\t\t}\n+\n \t\t});\n+\t\t// Print some statistics\n+\t\tlog.info(\n+\t\t\tString.format(\n+\t\t\t\t\"While processing store %s:\\n\\tEntries processed:\\t%d\\n\\tKey read failure:\\t%d (%.2f%%)\\n\\tValue read failure:\\t%d (%.2f%%)\",\n+\t\t\t\tthis.storeInfo.getXodusName(),\n+\t\t\t\tresult.getTotalProcessed(),\n+\t\t\t\tresult.getFailedKeys(),\n+\t\t\t\t(float) result.getFailedKeys() / result.getTotalProcessed() * 100,\n+\t\t\t\tresult.getFailedValues(),\n+\t\t\t\t(float) result.getFailedValues() / result.getTotalProcessed() * 100));\n+\n+\t\t// Remove corrupted entries from the store if configured so\n+\t\tif (removeUnreadablesFromUnderlyingStore) {\n+\t\t\tlog.warn(\"Removing {} unreadable elements from the store {}.\", unreadables.size(), storeInfo.getXodusName());\n+\t\t\tunreadables.forEach(store::remove);\n+\t\t}\n+\t\treturn result;\n+\t}\n+\t\n+\tprivate <TYPE> TYPE getDeserializedAndDumpFailed(ByteIterable serial, Function<ByteIterable, TYPE> deserializer, Supplier<String> onFailKeyStringSupplier, ByteIterable onFailOrigValue, String onFailWarnMsgFmt ){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b97152388bee6773ae9b50f23a0271cc3d1b520"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ1OTYzMw==", "bodyText": "Ja das kann man machen, dann m\u00fcssten die Config parameter noch reingereicht werden, aber dann ist die Parameterliste super lang.\nDa die Methode privat ist w\u00fcrde ich es so lassen", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r456459633", "createdAt": "2020-07-17T13:58:12Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -115,22 +155,100 @@ public void add(KEY key, VALUE value) throws JSONException {\n \n \t@Override\n \tpublic VALUE get(KEY key) {\n-\t\treturn readValue(store.get(writeKey(key)));\n+\t\tByteIterable binValue = store.get(writeKey(key));\n+\t\ttry {\n+\t\t\treturn readValue(binValue);\t\t\t\n+\t\t} catch (Exception e) {\n+\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\tdumpToFile(binValue, key.toString(), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t}\n+\t\t\tif(removeUnreadablesFromUnderlyingStore) {\n+\t\t\t\tremove(key);\n+\t\t\t\t// Null seems to be an acceptable return value in this case\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tThrowables.throwIfUnchecked(e);\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n \t}\n \n+\t/**\n+\t * Iterates a given consumer over the entries of this store.\n+\t * Depending on the {@link StorageConfig} corrupt entries may be dump to a file and/or removed from the store.\n+\t * These entries are not submitted to the consumer.\n+\t */\n \t@Override\n-\tpublic void forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\tpublic IterationStatistic forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\t\tIterationStatistic result = new IterationStatistic();\n+\t\tArrayList<ByteIterable> unreadables = new ArrayList<>();\n \t\tstore.forEach((k, v) -> {\n+\t\t\tresult.incrTotalProcessed();\n+\n+\t\t\t// Try to read the key first\n+\t\t\tKEY key = getDeserializedAndDumpFailed(\n+\t\t\t\tk,\n+\t\t\t\tthis::readKey,\n+\t\t\t\t() -> new String(k.getBytesUnsafe()),\n+\t\t\t\tv,\n+\t\t\t\t\"Could not parse key [{}]\");\n+\t\t\tif (key == null) {\n+\t\t\t\tunreadables.add(k);\n+\t\t\t\tresult.incrFailedKeys();\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\t// Try to read the value\n+\t\t\tVALUE value = getDeserializedAndDumpFailed(\n+\t\t\t\tv, \n+\t\t\t\tthis::readValue, \n+\t\t\t\t() -> key.toString(),\n+\t\t\t\tv, \n+\t\t\t\t\"Could not parse value for key [{}]\");\n+\t\t\tif (value == null) {\n+\t\t\t\tunreadables.add(k);\n+\t\t\t\tresult.incrFailedValues();\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\t// Apply the conusmer to key and value\n \t\t\ttry {\n-\t\t\t\ttry {\n-\t\t\t\t\tconsumer.accept(readKey(k), readValue(v), v.getLength());\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tlog.warn(\"Could not parse value for key \" + readKey(k), e);\n-\t\t\t\t}\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tlog.warn(\"Could not parse key \" + k, e);\n+\t\t\t\tconsumer.accept(key, value, v.getLength());\n+\t\t\t}\n+\t\t\tcatch (Exception e) {\n+\t\t\t\tlog.warn(\"Unable to apply for-each consumer on key[{}]\", key, e);\n \t\t\t}\n+\n \t\t});\n+\t\t// Print some statistics\n+\t\tlog.info(\n+\t\t\tString.format(\n+\t\t\t\t\"While processing store %s:\\n\\tEntries processed:\\t%d\\n\\tKey read failure:\\t%d (%.2f%%)\\n\\tValue read failure:\\t%d (%.2f%%)\",\n+\t\t\t\tthis.storeInfo.getXodusName(),\n+\t\t\t\tresult.getTotalProcessed(),\n+\t\t\t\tresult.getFailedKeys(),\n+\t\t\t\t(float) result.getFailedKeys() / result.getTotalProcessed() * 100,\n+\t\t\t\tresult.getFailedValues(),\n+\t\t\t\t(float) result.getFailedValues() / result.getTotalProcessed() * 100));\n+\n+\t\t// Remove corrupted entries from the store if configured so\n+\t\tif (removeUnreadablesFromUnderlyingStore) {\n+\t\t\tlog.warn(\"Removing {} unreadable elements from the store {}.\", unreadables.size(), storeInfo.getXodusName());\n+\t\t\tunreadables.forEach(store::remove);\n+\t\t}\n+\t\treturn result;\n+\t}\n+\t\n+\tprivate <TYPE> TYPE getDeserializedAndDumpFailed(ByteIterable serial, Function<ByteIterable, TYPE> deserializer, Supplier<String> onFailKeyStringSupplier, ByteIterable onFailOrigValue, String onFailWarnMsgFmt ){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMjcxNA=="}, "originalCommit": {"oid": "0b97152388bee6773ae9b50f23a0271cc3d1b520"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzE5NzIyOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoxNDo0MlrOGzShUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDowMTo1OVrOGzUOlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNDAwMg==", "bodyText": "Sollte das nicht immer warnen?", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r456434002", "createdAt": "2020-07-17T13:14:42Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -115,22 +155,100 @@ public void add(KEY key, VALUE value) throws JSONException {\n \n \t@Override\n \tpublic VALUE get(KEY key) {\n-\t\treturn readValue(store.get(writeKey(key)));\n+\t\tByteIterable binValue = store.get(writeKey(key));\n+\t\ttry {\n+\t\t\treturn readValue(binValue);\t\t\t\n+\t\t} catch (Exception e) {\n+\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\tdumpToFile(binValue, key.toString(), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t}\n+\t\t\tif(removeUnreadablesFromUnderlyingStore) {\n+\t\t\t\tremove(key);\n+\t\t\t\t// Null seems to be an acceptable return value in this case\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tThrowables.throwIfUnchecked(e);\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n \t}\n \n+\t/**\n+\t * Iterates a given consumer over the entries of this store.\n+\t * Depending on the {@link StorageConfig} corrupt entries may be dump to a file and/or removed from the store.\n+\t * These entries are not submitted to the consumer.\n+\t */\n \t@Override\n-\tpublic void forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\tpublic IterationStatistic forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\t\tIterationStatistic result = new IterationStatistic();\n+\t\tArrayList<ByteIterable> unreadables = new ArrayList<>();\n \t\tstore.forEach((k, v) -> {\n+\t\t\tresult.incrTotalProcessed();\n+\n+\t\t\t// Try to read the key first\n+\t\t\tKEY key = getDeserializedAndDumpFailed(\n+\t\t\t\tk,\n+\t\t\t\tthis::readKey,\n+\t\t\t\t() -> new String(k.getBytesUnsafe()),\n+\t\t\t\tv,\n+\t\t\t\t\"Could not parse key [{}]\");\n+\t\t\tif (key == null) {\n+\t\t\t\tunreadables.add(k);\n+\t\t\t\tresult.incrFailedKeys();\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\t// Try to read the value\n+\t\t\tVALUE value = getDeserializedAndDumpFailed(\n+\t\t\t\tv, \n+\t\t\t\tthis::readValue, \n+\t\t\t\t() -> key.toString(),\n+\t\t\t\tv, \n+\t\t\t\t\"Could not parse value for key [{}]\");\n+\t\t\tif (value == null) {\n+\t\t\t\tunreadables.add(k);\n+\t\t\t\tresult.incrFailedValues();\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\t// Apply the conusmer to key and value\n \t\t\ttry {\n-\t\t\t\ttry {\n-\t\t\t\t\tconsumer.accept(readKey(k), readValue(v), v.getLength());\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tlog.warn(\"Could not parse value for key \" + readKey(k), e);\n-\t\t\t\t}\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tlog.warn(\"Could not parse key \" + k, e);\n+\t\t\t\tconsumer.accept(key, value, v.getLength());\n+\t\t\t}\n+\t\t\tcatch (Exception e) {\n+\t\t\t\tlog.warn(\"Unable to apply for-each consumer on key[{}]\", key, e);\n \t\t\t}\n+\n \t\t});\n+\t\t// Print some statistics\n+\t\tlog.info(\n+\t\t\tString.format(\n+\t\t\t\t\"While processing store %s:\\n\\tEntries processed:\\t%d\\n\\tKey read failure:\\t%d (%.2f%%)\\n\\tValue read failure:\\t%d (%.2f%%)\",\n+\t\t\t\tthis.storeInfo.getXodusName(),\n+\t\t\t\tresult.getTotalProcessed(),\n+\t\t\t\tresult.getFailedKeys(),\n+\t\t\t\t(float) result.getFailedKeys() / result.getTotalProcessed() * 100,\n+\t\t\t\tresult.getFailedValues(),\n+\t\t\t\t(float) result.getFailedValues() / result.getTotalProcessed() * 100));\n+\n+\t\t// Remove corrupted entries from the store if configured so\n+\t\tif (removeUnreadablesFromUnderlyingStore) {\n+\t\t\tlog.warn(\"Removing {} unreadable elements from the store {}.\", unreadables.size(), storeInfo.getXodusName());\n+\t\t\tunreadables.forEach(store::remove);\n+\t\t}\n+\t\treturn result;\n+\t}\n+\t\n+\tprivate <TYPE> TYPE getDeserializedAndDumpFailed(ByteIterable serial, Function<ByteIterable, TYPE> deserializer, Supplier<String> onFailKeyStringSupplier, ByteIterable onFailOrigValue, String onFailWarnMsgFmt ){\n+\t\ttry {\n+\t\t\treturn deserializer.apply(serial);\t\t\t\n+\t\t} catch (Exception e) {\n+\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\tdumpToFile(onFailOrigValue, onFailKeyStringSupplier.get(), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t} else {\n+\t\t\t\tlog.warn(onFailWarnMsgFmt, onFailKeyStringSupplier.get(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b97152388bee6773ae9b50f23a0271cc3d1b520"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNDE0Ng==", "bodyText": "Sonst wei\u00dft du ja gar nicht sicher, dass es was gedumpt hat?", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r456434146", "createdAt": "2020-07-17T13:14:56Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -115,22 +155,100 @@ public void add(KEY key, VALUE value) throws JSONException {\n \n \t@Override\n \tpublic VALUE get(KEY key) {\n-\t\treturn readValue(store.get(writeKey(key)));\n+\t\tByteIterable binValue = store.get(writeKey(key));\n+\t\ttry {\n+\t\t\treturn readValue(binValue);\t\t\t\n+\t\t} catch (Exception e) {\n+\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\tdumpToFile(binValue, key.toString(), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t}\n+\t\t\tif(removeUnreadablesFromUnderlyingStore) {\n+\t\t\t\tremove(key);\n+\t\t\t\t// Null seems to be an acceptable return value in this case\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tThrowables.throwIfUnchecked(e);\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n \t}\n \n+\t/**\n+\t * Iterates a given consumer over the entries of this store.\n+\t * Depending on the {@link StorageConfig} corrupt entries may be dump to a file and/or removed from the store.\n+\t * These entries are not submitted to the consumer.\n+\t */\n \t@Override\n-\tpublic void forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\tpublic IterationStatistic forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\t\tIterationStatistic result = new IterationStatistic();\n+\t\tArrayList<ByteIterable> unreadables = new ArrayList<>();\n \t\tstore.forEach((k, v) -> {\n+\t\t\tresult.incrTotalProcessed();\n+\n+\t\t\t// Try to read the key first\n+\t\t\tKEY key = getDeserializedAndDumpFailed(\n+\t\t\t\tk,\n+\t\t\t\tthis::readKey,\n+\t\t\t\t() -> new String(k.getBytesUnsafe()),\n+\t\t\t\tv,\n+\t\t\t\t\"Could not parse key [{}]\");\n+\t\t\tif (key == null) {\n+\t\t\t\tunreadables.add(k);\n+\t\t\t\tresult.incrFailedKeys();\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\t// Try to read the value\n+\t\t\tVALUE value = getDeserializedAndDumpFailed(\n+\t\t\t\tv, \n+\t\t\t\tthis::readValue, \n+\t\t\t\t() -> key.toString(),\n+\t\t\t\tv, \n+\t\t\t\t\"Could not parse value for key [{}]\");\n+\t\t\tif (value == null) {\n+\t\t\t\tunreadables.add(k);\n+\t\t\t\tresult.incrFailedValues();\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\t// Apply the conusmer to key and value\n \t\t\ttry {\n-\t\t\t\ttry {\n-\t\t\t\t\tconsumer.accept(readKey(k), readValue(v), v.getLength());\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tlog.warn(\"Could not parse value for key \" + readKey(k), e);\n-\t\t\t\t}\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tlog.warn(\"Could not parse key \" + k, e);\n+\t\t\t\tconsumer.accept(key, value, v.getLength());\n+\t\t\t}\n+\t\t\tcatch (Exception e) {\n+\t\t\t\tlog.warn(\"Unable to apply for-each consumer on key[{}]\", key, e);\n \t\t\t}\n+\n \t\t});\n+\t\t// Print some statistics\n+\t\tlog.info(\n+\t\t\tString.format(\n+\t\t\t\t\"While processing store %s:\\n\\tEntries processed:\\t%d\\n\\tKey read failure:\\t%d (%.2f%%)\\n\\tValue read failure:\\t%d (%.2f%%)\",\n+\t\t\t\tthis.storeInfo.getXodusName(),\n+\t\t\t\tresult.getTotalProcessed(),\n+\t\t\t\tresult.getFailedKeys(),\n+\t\t\t\t(float) result.getFailedKeys() / result.getTotalProcessed() * 100,\n+\t\t\t\tresult.getFailedValues(),\n+\t\t\t\t(float) result.getFailedValues() / result.getTotalProcessed() * 100));\n+\n+\t\t// Remove corrupted entries from the store if configured so\n+\t\tif (removeUnreadablesFromUnderlyingStore) {\n+\t\t\tlog.warn(\"Removing {} unreadable elements from the store {}.\", unreadables.size(), storeInfo.getXodusName());\n+\t\t\tunreadables.forEach(store::remove);\n+\t\t}\n+\t\treturn result;\n+\t}\n+\t\n+\tprivate <TYPE> TYPE getDeserializedAndDumpFailed(ByteIterable serial, Function<ByteIterable, TYPE> deserializer, Supplier<String> onFailKeyStringSupplier, ByteIterable onFailOrigValue, String onFailWarnMsgFmt ){\n+\t\ttry {\n+\t\t\treturn deserializer.apply(serial);\t\t\t\n+\t\t} catch (Exception e) {\n+\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\tdumpToFile(onFailOrigValue, onFailKeyStringSupplier.get(), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t} else {\n+\t\t\t\tlog.warn(onFailWarnMsgFmt, onFailKeyStringSupplier.get(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNDAwMg=="}, "originalCommit": {"oid": "0b97152388bee6773ae9b50f23a0271cc3d1b520"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ2MTk3Mw==", "bodyText": "ich habs etwas umge\u00e4ndert damit der stacktrace nur geworfen wird, wenn TRACE aktiviert wird", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r456461973", "createdAt": "2020-07-17T14:01:59Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -115,22 +155,100 @@ public void add(KEY key, VALUE value) throws JSONException {\n \n \t@Override\n \tpublic VALUE get(KEY key) {\n-\t\treturn readValue(store.get(writeKey(key)));\n+\t\tByteIterable binValue = store.get(writeKey(key));\n+\t\ttry {\n+\t\t\treturn readValue(binValue);\t\t\t\n+\t\t} catch (Exception e) {\n+\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\tdumpToFile(binValue, key.toString(), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t}\n+\t\t\tif(removeUnreadablesFromUnderlyingStore) {\n+\t\t\t\tremove(key);\n+\t\t\t\t// Null seems to be an acceptable return value in this case\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tThrowables.throwIfUnchecked(e);\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n \t}\n \n+\t/**\n+\t * Iterates a given consumer over the entries of this store.\n+\t * Depending on the {@link StorageConfig} corrupt entries may be dump to a file and/or removed from the store.\n+\t * These entries are not submitted to the consumer.\n+\t */\n \t@Override\n-\tpublic void forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\tpublic IterationStatistic forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\t\tIterationStatistic result = new IterationStatistic();\n+\t\tArrayList<ByteIterable> unreadables = new ArrayList<>();\n \t\tstore.forEach((k, v) -> {\n+\t\t\tresult.incrTotalProcessed();\n+\n+\t\t\t// Try to read the key first\n+\t\t\tKEY key = getDeserializedAndDumpFailed(\n+\t\t\t\tk,\n+\t\t\t\tthis::readKey,\n+\t\t\t\t() -> new String(k.getBytesUnsafe()),\n+\t\t\t\tv,\n+\t\t\t\t\"Could not parse key [{}]\");\n+\t\t\tif (key == null) {\n+\t\t\t\tunreadables.add(k);\n+\t\t\t\tresult.incrFailedKeys();\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\t// Try to read the value\n+\t\t\tVALUE value = getDeserializedAndDumpFailed(\n+\t\t\t\tv, \n+\t\t\t\tthis::readValue, \n+\t\t\t\t() -> key.toString(),\n+\t\t\t\tv, \n+\t\t\t\t\"Could not parse value for key [{}]\");\n+\t\t\tif (value == null) {\n+\t\t\t\tunreadables.add(k);\n+\t\t\t\tresult.incrFailedValues();\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\t// Apply the conusmer to key and value\n \t\t\ttry {\n-\t\t\t\ttry {\n-\t\t\t\t\tconsumer.accept(readKey(k), readValue(v), v.getLength());\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tlog.warn(\"Could not parse value for key \" + readKey(k), e);\n-\t\t\t\t}\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tlog.warn(\"Could not parse key \" + k, e);\n+\t\t\t\tconsumer.accept(key, value, v.getLength());\n+\t\t\t}\n+\t\t\tcatch (Exception e) {\n+\t\t\t\tlog.warn(\"Unable to apply for-each consumer on key[{}]\", key, e);\n \t\t\t}\n+\n \t\t});\n+\t\t// Print some statistics\n+\t\tlog.info(\n+\t\t\tString.format(\n+\t\t\t\t\"While processing store %s:\\n\\tEntries processed:\\t%d\\n\\tKey read failure:\\t%d (%.2f%%)\\n\\tValue read failure:\\t%d (%.2f%%)\",\n+\t\t\t\tthis.storeInfo.getXodusName(),\n+\t\t\t\tresult.getTotalProcessed(),\n+\t\t\t\tresult.getFailedKeys(),\n+\t\t\t\t(float) result.getFailedKeys() / result.getTotalProcessed() * 100,\n+\t\t\t\tresult.getFailedValues(),\n+\t\t\t\t(float) result.getFailedValues() / result.getTotalProcessed() * 100));\n+\n+\t\t// Remove corrupted entries from the store if configured so\n+\t\tif (removeUnreadablesFromUnderlyingStore) {\n+\t\t\tlog.warn(\"Removing {} unreadable elements from the store {}.\", unreadables.size(), storeInfo.getXodusName());\n+\t\t\tunreadables.forEach(store::remove);\n+\t\t}\n+\t\treturn result;\n+\t}\n+\t\n+\tprivate <TYPE> TYPE getDeserializedAndDumpFailed(ByteIterable serial, Function<ByteIterable, TYPE> deserializer, Supplier<String> onFailKeyStringSupplier, ByteIterable onFailOrigValue, String onFailWarnMsgFmt ){\n+\t\ttry {\n+\t\t\treturn deserializer.apply(serial);\t\t\t\n+\t\t} catch (Exception e) {\n+\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\tdumpToFile(onFailOrigValue, onFailKeyStringSupplier.get(), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t} else {\n+\t\t\t\tlog.warn(onFailWarnMsgFmt, onFailKeyStringSupplier.get(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNDAwMg=="}, "originalCommit": {"oid": "0b97152388bee6773ae9b50f23a0271cc3d1b520"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzIwMDE4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoxNToyOFrOGzSjDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoxNToyOFrOGzSjDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNDQ0Ng==", "bodyText": "hier fehlt etwas doku aber brauchst es nicht \u00fcbertreiben intention reicht", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r456434446", "createdAt": "2020-07-17T13:15:28Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/SerializingStore.java", "diffHunk": "@@ -115,22 +155,100 @@ public void add(KEY key, VALUE value) throws JSONException {\n \n \t@Override\n \tpublic VALUE get(KEY key) {\n-\t\treturn readValue(store.get(writeKey(key)));\n+\t\tByteIterable binValue = store.get(writeKey(key));\n+\t\ttry {\n+\t\t\treturn readValue(binValue);\t\t\t\n+\t\t} catch (Exception e) {\n+\t\t\tif(unreadableValuesDumpDir != null) {\n+\t\t\t\tdumpToFile(binValue, key.toString(), unreadableValuesDumpDir, storeInfo.getXodusName());\n+\t\t\t}\n+\t\t\tif(removeUnreadablesFromUnderlyingStore) {\n+\t\t\t\tremove(key);\n+\t\t\t\t// Null seems to be an acceptable return value in this case\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tThrowables.throwIfUnchecked(e);\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n \t}\n \n+\t/**\n+\t * Iterates a given consumer over the entries of this store.\n+\t * Depending on the {@link StorageConfig} corrupt entries may be dump to a file and/or removed from the store.\n+\t * These entries are not submitted to the consumer.\n+\t */\n \t@Override\n-\tpublic void forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\tpublic IterationStatistic forEach(StoreEntryConsumer<KEY, VALUE> consumer) {\n+\t\tIterationStatistic result = new IterationStatistic();\n+\t\tArrayList<ByteIterable> unreadables = new ArrayList<>();\n \t\tstore.forEach((k, v) -> {\n+\t\t\tresult.incrTotalProcessed();\n+\n+\t\t\t// Try to read the key first\n+\t\t\tKEY key = getDeserializedAndDumpFailed(\n+\t\t\t\tk,\n+\t\t\t\tthis::readKey,\n+\t\t\t\t() -> new String(k.getBytesUnsafe()),\n+\t\t\t\tv,\n+\t\t\t\t\"Could not parse key [{}]\");\n+\t\t\tif (key == null) {\n+\t\t\t\tunreadables.add(k);\n+\t\t\t\tresult.incrFailedKeys();\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\t// Try to read the value\n+\t\t\tVALUE value = getDeserializedAndDumpFailed(\n+\t\t\t\tv, \n+\t\t\t\tthis::readValue, \n+\t\t\t\t() -> key.toString(),\n+\t\t\t\tv, \n+\t\t\t\t\"Could not parse value for key [{}]\");\n+\t\t\tif (value == null) {\n+\t\t\t\tunreadables.add(k);\n+\t\t\t\tresult.incrFailedValues();\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\t// Apply the conusmer to key and value\n \t\t\ttry {\n-\t\t\t\ttry {\n-\t\t\t\t\tconsumer.accept(readKey(k), readValue(v), v.getLength());\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tlog.warn(\"Could not parse value for key \" + readKey(k), e);\n-\t\t\t\t}\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tlog.warn(\"Could not parse key \" + k, e);\n+\t\t\t\tconsumer.accept(key, value, v.getLength());\n+\t\t\t}\n+\t\t\tcatch (Exception e) {\n+\t\t\t\tlog.warn(\"Unable to apply for-each consumer on key[{}]\", key, e);\n \t\t\t}\n+\n \t\t});\n+\t\t// Print some statistics\n+\t\tlog.info(\n+\t\t\tString.format(\n+\t\t\t\t\"While processing store %s:\\n\\tEntries processed:\\t%d\\n\\tKey read failure:\\t%d (%.2f%%)\\n\\tValue read failure:\\t%d (%.2f%%)\",\n+\t\t\t\tthis.storeInfo.getXodusName(),\n+\t\t\t\tresult.getTotalProcessed(),\n+\t\t\t\tresult.getFailedKeys(),\n+\t\t\t\t(float) result.getFailedKeys() / result.getTotalProcessed() * 100,\n+\t\t\t\tresult.getFailedValues(),\n+\t\t\t\t(float) result.getFailedValues() / result.getTotalProcessed() * 100));\n+\n+\t\t// Remove corrupted entries from the store if configured so\n+\t\tif (removeUnreadablesFromUnderlyingStore) {\n+\t\t\tlog.warn(\"Removing {} unreadable elements from the store {}.\", unreadables.size(), storeInfo.getXodusName());\n+\t\t\tunreadables.forEach(store::remove);\n+\t\t}\n+\t\treturn result;\n+\t}\n+\t\n+\tprivate <TYPE> TYPE getDeserializedAndDumpFailed(ByteIterable serial, Function<ByteIterable, TYPE> deserializer, Supplier<String> onFailKeyStringSupplier, ByteIterable onFailOrigValue, String onFailWarnMsgFmt ){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b97152388bee6773ae9b50f23a0271cc3d1b520"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzIxNTYzOnYy", "diffSide": "RIGHT", "path": "backend/src/test/java/com/bakdata/conquery/io/xodus/stores/SerializingStoreDumpTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoyMDowNFrOGzSsmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoyMDowNFrOGzSsmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNjg5MA==", "bodyText": "Das nimmt auch ein Lambda wie in PreprocessorCommand: listFiles(((dir, name) -> name.endsWith(ConqueryConstants.EXTENSION_DESCRIPTION)));", "url": "https://github.com/bakdata/conquery/pull/1247#discussion_r456436890", "createdAt": "2020-07-17T13:20:04Z", "author": {"login": "awildturtok"}, "path": "backend/src/test/java/com/bakdata/conquery/io/xodus/stores/SerializingStoreDumpTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package com.bakdata.conquery.io.xodus.stores;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.FileFilter;\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.validation.Validator;\n+\n+import com.bakdata.conquery.apiv1.QueryDescription;\n+import com.bakdata.conquery.io.jackson.Jackson;\n+import com.bakdata.conquery.io.xodus.StoreInfo;\n+import com.bakdata.conquery.io.xodus.stores.SerializingStore.IterationStatistic;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.config.StorageConfig;\n+import com.bakdata.conquery.models.exceptions.JSONException;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ManagedExecutionId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.UserId;\n+import com.bakdata.conquery.models.query.concept.ConceptQuery;\n+import com.bakdata.conquery.models.query.concept.specific.CQReusedQuery;\n+import com.google.common.io.Files;\n+import io.dropwizard.jersey.validation.Validators;\n+import jetbrains.exodus.env.Environment;\n+import jetbrains.exodus.env.Environments;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.io.FileUtils;\n+import org.assertj.core.api.Condition;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+@Slf4j\n+public class SerializingStoreDumpTest {\n+\n+\tprivate File tmpDir;\n+\tprivate Environment env;\n+\tprivate StorageConfig config;\n+\t\n+\t// Test data\n+\tprivate final ConceptQuery cQuery = new ConceptQuery(new CQReusedQuery(new ManagedExecutionId(new DatasetId(\"testD\"), UUID.randomUUID())));\n+\tprivate final User user = new User(\"username\",\"userlabel\");\n+\t\n+\t@BeforeEach\n+\tpublic void init() {\n+\t\ttmpDir = Files.createTempDir();\n+\t\tenv = Environments.newInstance(tmpDir);\n+\t\tconfig = new StorageConfig();\n+\t}\n+\t\n+\t@AfterEach\n+\tpublic void destroy() throws IOException {\n+\t\tenv.close();\n+\t\tFileUtils.deleteDirectory(tmpDir);\n+\t}\n+\t\n+\tprivate <KEY, VALUE> SerializingStore<KEY, VALUE> createSerializedStore(StorageConfig config, Environment environment, Validator validator, IStoreInfo storeId) {\n+\t\treturn new SerializingStore<>(config, new XodusStore(environment, storeId), validator, storeId);\n+\t}\n+\t\n+\t/**\n+\t * Tests if entries with corrupted values are dumped.\n+\t */\n+\t@Test\n+\tpublic void testCorruptValueDump() throws JSONException, IOException {\n+\t\t// Set dump directory to this tests temp-dir\n+\t\tconfig.setUnreadbleDataDumpDirectory(Optional.of(tmpDir));\n+\t\t\n+\t\t// Open a store and insert a valid key-value pair (UserId & User)\n+\t\ttry (SerializingStore<UserId, User> store = createSerializedStore(config, env, Validators.newValidator(), StoreInfo.AUTH_USER)){\n+\t\t\tstore.add(user.getId(), user);\n+\t\t}\n+\t\t\n+\t\t// Open that store again, with a different config to insert a corrupt entry (UserId & ManagedQuery)\t\t\n+\t\ttry (SerializingStore<UserId, QueryDescription> store = createSerializedStore(config, env, Validators.newValidator(), new CorruptableStoreInfo(StoreInfo.AUTH_USER.getXodusName(), UserId.class, QueryDescription.class))){\n+\t\t\tstore.add(new UserId(\"testU2\"), cQuery);\n+\t\t}\n+\t\t\n+\t\t// Reopen the store with the initial value and try to iterate over all entries (this triggers the dump or removal of invalid entries)\n+\t\ttry (SerializingStore<UserId, User> store = createSerializedStore(config, env, Validators.newValidator(), StoreInfo.AUTH_USER)){\n+\t\t\tIterationStatistic expectedResult = new IterationStatistic();\n+\t\t\texpectedResult.setTotalProcessed(2);\n+\t\t\texpectedResult.setFailedKeys(0);\n+\t\t\texpectedResult.setFailedValues(1);\n+\t\t\t\n+\t\t\t// Iterate (do nothing with the entries themselves)\n+\t\t\tIterationStatistic result = store.forEach((k,v,s) -> {});\n+\t\t\tassertThat(result).isEqualTo(expectedResult);\n+\t\t}\n+\t\t\n+\t\t// Test if the correct number of dumpfiles was generated\n+\t\tCondition<File> dumpFileCond = new Condition<>(f -> f.getName().endsWith(SerializingStore.DUMP_FILE_EXTENTION) , \"dump file\");\n+\t\tassertThat(tmpDir.listFiles()).areExactly(1, dumpFileCond);\n+\t\t\n+\t\t// Test if the dump is correct\n+\t\tFile dumpFile = getDumpFile(dumpFileCond);\n+\n+\t\tassertThat((QueryDescription) Jackson.MAPPER.readerFor(QueryDescription.class).readValue(dumpFile)).isEqualTo(cQuery);\n+\t}\n+\n+\tprivate File getDumpFile(Condition<File> dumpFileCond) {\n+\t\tFile dumpFile = tmpDir.listFiles(new FileFilter() {\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean accept(File pathname) {\n+\t\t\t\treturn dumpFileCond.matches(pathname);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b97152388bee6773ae9b50f23a0271cc3d1b520"}, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1280, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}