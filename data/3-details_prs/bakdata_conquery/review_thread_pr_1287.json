{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NTE3MjQw", "number": 1287, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzo1NTo1NFrOEQ7uHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoyNTo1OFrOERVWpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTkxMTMyOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/filter/SingleColumnEventFilterNode.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzo1NTo1NFrOG1XDMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTowNjozMlrOG2F3AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYwNTM2MQ==", "bodyText": "Inline this class", "url": "https://github.com/bakdata/conquery/pull/1287#discussion_r458605361", "createdAt": "2020-07-22T07:55:54Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/filter/SingleColumnEventFilterNode.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.bakdata.conquery.models.query.queryplan.filter;\n+\n+import java.util.Set;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public abstract class SingleColumnEventFilterNode<FE_TYPE> extends EventFilterNode<FE_TYPE> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a24540461df64c44a1660c7544d18b6c84c6cbe"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0NTI3OA==", "bodyText": "Die Umbenennung verstehe ich nicht so wirklich", "url": "https://github.com/bakdata/conquery/pull/1287#discussion_r459245278", "createdAt": "2020-07-23T06:48:45Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/filter/SingleColumnEventFilterNode.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.bakdata.conquery.models.query.queryplan.filter;\n+\n+import java.util.Set;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public abstract class SingleColumnEventFilterNode<FE_TYPE> extends EventFilterNode<FE_TYPE> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYwNTM2MQ=="}, "originalCommit": {"oid": "1a24540461df64c44a1660c7544d18b6c84c6cbe"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM3MjI4OQ==", "bodyText": "das ist keine Umebennung sondern eine neue Klasse jetzt trenne ich in der FiltersNode nach Filter und FilterNode was uns leere \u00dcberpr\u00fcfungen spart", "url": "https://github.com/bakdata/conquery/pull/1287#discussion_r459372289", "createdAt": "2020-07-23T11:06:32Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/filter/SingleColumnEventFilterNode.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.bakdata.conquery.models.query.queryplan.filter;\n+\n+import java.util.Set;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public abstract class SingleColumnEventFilterNode<FE_TYPE> extends EventFilterNode<FE_TYPE> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYwNTM2MQ=="}, "originalCommit": {"oid": "1a24540461df64c44a1660c7544d18b6c84c6cbe"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTkxNDg4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/specific/FiltersNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzo1Njo1NFrOG1XFgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzo1Njo1NFrOG1XFgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYwNTk1NQ==", "bodyText": "Namen sind doof", "url": "https://github.com/bakdata/conquery/pull/1287#discussion_r458605955", "createdAt": "2020-07-22T07:56:54Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/specific/FiltersNode.java", "diffHunk": "@@ -64,23 +90,30 @@ public boolean isContained() {\n \t\t\t\treturn false;\n \t\t\t}\n \t\t}\n-\t\treturn getChild().isContained();\n+\n+\t\treturn hit;\n \t}\n \t\n \t@Override\n \tpublic FiltersNode doClone(CloneContext ctx) {\n-\t\tList<FilterNode<?>> copy = new ArrayList<>(filters);\n-\t\tcopy.replaceAll(fn->fn.clone(ctx));\n+\t\tList<FilterNode<?>> _filters = new ArrayList<>(filters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a24540461df64c44a1660c7544d18b6c84c6cbe"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTk3MjMyOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQConcept.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjozNDowN1rOG19yEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTowNzo1MlrOG2F5aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIzOTk1NQ==", "bodyText": "Kannst du diese Zeile nach Zeile 99 packen, dort werden die anderen Selects zusammengeholt und es l\u00e4sst sich bestimmt noch etwas vereinfachen.", "url": "https://github.com/bakdata/conquery/pull/1287#discussion_r459239955", "createdAt": "2020-07-23T06:34:07Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQConcept.java", "diffHunk": "@@ -72,7 +70,7 @@\n \tpublic QPNode createQueryPlan(QueryPlanContext context, ConceptQueryPlan plan) {\n \t\tConceptElement<?>[] concepts = resolveConcepts(ids, context.getCentralRegistry());\n \n-\t\tList<AggregatorNode<?>> conceptAggregators = createConceptAggregators(plan, selects);\n+\t\tList<Aggregator<?>> conceptAggregators = createConceptAggregators(plan, selects);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11b175404bd51f0bc4182e6e088579f93e3a89ab"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM3MjczNg==", "bodyText": "nein weil da die ausgew\u00e4hlten Selects noch nicht bekannt sind", "url": "https://github.com/bakdata/conquery/pull/1287#discussion_r459372736", "createdAt": "2020-07-23T11:07:33Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQConcept.java", "diffHunk": "@@ -72,7 +70,7 @@\n \tpublic QPNode createQueryPlan(QueryPlanContext context, ConceptQueryPlan plan) {\n \t\tConceptElement<?>[] concepts = resolveConcepts(ids, context.getCentralRegistry());\n \n-\t\tList<AggregatorNode<?>> conceptAggregators = createConceptAggregators(plan, selects);\n+\t\tList<Aggregator<?>> conceptAggregators = createConceptAggregators(plan, selects);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIzOTk1NQ=="}, "originalCommit": {"oid": "11b175404bd51f0bc4182e6e088579f93e3a89ab"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM3MjkwNw==", "bodyText": "und sie nur Pro Tabelle sind", "url": "https://github.com/bakdata/conquery/pull/1287#discussion_r459372907", "createdAt": "2020-07-23T11:07:52Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQConcept.java", "diffHunk": "@@ -72,7 +70,7 @@\n \tpublic QPNode createQueryPlan(QueryPlanContext context, ConceptQueryPlan plan) {\n \t\tConceptElement<?>[] concepts = resolveConcepts(ids, context.getCentralRegistry());\n \n-\t\tList<AggregatorNode<?>> conceptAggregators = createConceptAggregators(plan, selects);\n+\t\tList<Aggregator<?>> conceptAggregators = createConceptAggregators(plan, selects);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIzOTk1NQ=="}, "originalCommit": {"oid": "11b175404bd51f0bc4182e6e088579f93e3a89ab"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTk4MTA4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQConcept.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjozNzozOVrOG193EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjozNzozOVrOG193EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0MTIzMw==", "bodyText": "resolvedSelects w\u00fcrde ich z.B. tableSelects nennen", "url": "https://github.com/bakdata/conquery/pull/1287#discussion_r459241233", "createdAt": "2020-07-23T06:37:39Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQConcept.java", "diffHunk": "@@ -98,31 +96,34 @@ public QPNode createQueryPlan(QueryPlanContext context, ConceptQueryPlan plan) {\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tList<AggregatorNode<?>> aggregators = new ArrayList<>();\n+\t\t\tList<Aggregator<?>> aggregators = new ArrayList<>();\n \t\t\t//add aggregators\n \n \t\t\taggregators.addAll(conceptAggregators);\n \t\t\taggregators.addAll(createConceptAggregators(plan, resolvedSelects));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11b175404bd51f0bc4182e6e088579f93e3a89ab"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjAyOTc2OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/ConceptQueryPlan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjo1NjoyNVrOG1-SoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjo1NjoyNVrOG1-SoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0ODI4OQ==", "bodyText": "for-Loop-Klammern", "url": "https://github.com/bakdata/conquery/pull/1287#discussion_r459248289", "createdAt": "2020-07-23T06:56:25Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/ConceptQueryPlan.java", "diffHunk": "@@ -50,10 +50,10 @@ public ConceptQueryPlan clone(CloneContext ctx) {\n \t\tcheckRequiredTables(ctx.getStorage());\n \t\t\n \t\tConceptQueryPlan clone = new ConceptQueryPlan(false);\n-\t\tclone.setChild(child.clone(ctx));\n+\t\tclone.setChild(ctx.clone((QPNode) child));\n \t\tfor(Aggregator<?> agg:aggregators)\n-\t\t\tclone.aggregators.add(agg.clone(ctx));\n-\t\tclone.specialDateUnion = specialDateUnion.clone(ctx);\n+\t\t\tclone.aggregators.add(ctx.clone((Aggregator<?>) agg));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11b175404bd51f0bc4182e6e088579f93e3a89ab"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjA0MDE5OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/ConceptQueryPlan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzowMDoxMlrOG1-Ydg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzowMDoxMlrOG1-Ydg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0OTc4Mg==", "bodyText": "muss hier gecastet werden?", "url": "https://github.com/bakdata/conquery/pull/1287#discussion_r459249782", "createdAt": "2020-07-23T07:00:12Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/ConceptQueryPlan.java", "diffHunk": "@@ -50,10 +50,10 @@ public ConceptQueryPlan clone(CloneContext ctx) {\n \t\tcheckRequiredTables(ctx.getStorage());\n \t\t\n \t\tConceptQueryPlan clone = new ConceptQueryPlan(false);\n-\t\tclone.setChild(child.clone(ctx));\n+\t\tclone.setChild(ctx.clone((QPNode) child));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11b175404bd51f0bc4182e6e088579f93e3a89ab"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjA0OTYyOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/QPParentNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzowNDowMlrOG1-eKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTozMTozMFrOG2GiNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1MTI0MA==", "bodyText": "Hier dr\u00fcber sind noch isOfInterest Methoden ohne fast-fail", "url": "https://github.com/bakdata/conquery/pull/1287#discussion_r459251240", "createdAt": "2020-07-23T07:04:02Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/QPParentNode.java", "diffHunk": "@@ -99,25 +97,25 @@ public boolean isOfInterest(Entity entity) {\n \t\t}\n \t\treturn interest;\n \t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11b175404bd51f0bc4182e6e088579f93e3a89ab"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4MzM1MA==", "bodyText": "Manuel hat die mit Absicht so gemacht, weil die ConceptNode hier was prefetched, ich hab das mal geschoben, weil das d\u00e4mlich war.", "url": "https://github.com/bakdata/conquery/pull/1287#discussion_r459383350", "createdAt": "2020-07-23T11:31:30Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/QPParentNode.java", "diffHunk": "@@ -99,25 +97,25 @@ public boolean isOfInterest(Entity entity) {\n \t\t}\n \t\treturn interest;\n \t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1MTI0MA=="}, "originalCommit": {"oid": "11b175404bd51f0bc4182e6e088579f93e3a89ab"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjA2MDU3OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/SpecialDateUnion.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzowODoxNlrOG1-klQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTozNzo0OFrOG2Gs4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1Mjg4NQ==", "bodyText": "Ist der jetzt noch special?", "url": "https://github.com/bakdata/conquery/pull/1287#discussion_r459252885", "createdAt": "2020-07-23T07:08:16Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/SpecialDateUnion.java", "diffHunk": "@@ -1,21 +1,49 @@\n package com.bakdata.conquery.models.query.queryplan.aggregators.specific;\n \n import com.bakdata.conquery.models.common.CDateSet;\n+import com.bakdata.conquery.models.common.daterange.CDateRange;\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n import com.bakdata.conquery.models.events.Bucket;\n import com.bakdata.conquery.models.externalservice.ResultType;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n import com.bakdata.conquery.models.query.queryplan.aggregators.Aggregator;\n import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import lombok.RequiredArgsConstructor;\n \n /**\n  * Special Aggregator, used to calculate the times an entity has events after filtering.\n  */\n+@RequiredArgsConstructor\n public class SpecialDateUnion implements Aggregator<String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11b175404bd51f0bc4182e6e088579f93e3a89ab"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4NjA4Mg==", "bodyText": "Im \u2764\ufe0f schon!", "url": "https://github.com/bakdata/conquery/pull/1287#discussion_r459386082", "createdAt": "2020-07-23T11:37:48Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/SpecialDateUnion.java", "diffHunk": "@@ -1,21 +1,49 @@\n package com.bakdata.conquery.models.query.queryplan.aggregators.specific;\n \n import com.bakdata.conquery.models.common.CDateSet;\n+import com.bakdata.conquery.models.common.daterange.CDateRange;\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n import com.bakdata.conquery.models.events.Bucket;\n import com.bakdata.conquery.models.externalservice.ResultType;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n import com.bakdata.conquery.models.query.queryplan.aggregators.Aggregator;\n import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import lombok.RequiredArgsConstructor;\n \n /**\n  * Special Aggregator, used to calculate the times an entity has events after filtering.\n  */\n+@RequiredArgsConstructor\n public class SpecialDateUnion implements Aggregator<String> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1Mjg4NQ=="}, "originalCommit": {"oid": "11b175404bd51f0bc4182e6e088579f93e3a89ab"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjEwMDc4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/filter/SingleColumnEventFilterNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoyMjoyMFrOG1-8NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMjo1NjowMFrOG2JMzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1ODkzMg==", "bodyText": "Eigentlich k\u00f6nnten wir hier auch die Table zur\u00fcckgeben anstatt der ID. Der Queryplan existiert ja nur noch auf dem Worker und muss nicht mehr serialisiert/deserializiert werden.\nK\u00f6nnen wir uns mal \u00fcberlegen, bei einiges Selects wird eine Table zu einer Id umgewandelt bevor der Aggregator erzeugt wird. Manche haben eine statische Table Id ALL_ID-Table.", "url": "https://github.com/bakdata/conquery/pull/1287#discussion_r459258932", "createdAt": "2020-07-23T07:22:20Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/filter/SingleColumnEventFilterNode.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.bakdata.conquery.models.query.queryplan.filter;\n+\n+import java.util.Set;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public abstract class SingleColumnEventFilterNode<FE_TYPE> extends EventFilterNode<FE_TYPE> {\n+\n+\tpublic SingleColumnEventFilterNode(Column column, FE_TYPE filterValue) {\n+\t\tsuper(filterValue);\n+\t\tthis.column = column;\n+\t}\n+\n+\t@NotNull @Getter @Setter\n+\tprivate Column column;\n+\n+\t@Override\n+\tpublic void collectRequiredTables(Set<TableId> requiredTables) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11b175404bd51f0bc4182e6e088579f93e3a89ab"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQyNzAyMg==", "bodyText": "Mache ich in einem separaten PR", "url": "https://github.com/bakdata/conquery/pull/1287#discussion_r459427022", "createdAt": "2020-07-23T12:56:00Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/filter/SingleColumnEventFilterNode.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.bakdata.conquery.models.query.queryplan.filter;\n+\n+import java.util.Set;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public abstract class SingleColumnEventFilterNode<FE_TYPE> extends EventFilterNode<FE_TYPE> {\n+\n+\tpublic SingleColumnEventFilterNode(Column column, FE_TYPE filterValue) {\n+\t\tsuper(filterValue);\n+\t\tthis.column = column;\n+\t}\n+\n+\t@NotNull @Getter @Setter\n+\tprivate Column column;\n+\n+\t@Override\n+\tpublic void collectRequiredTables(Set<TableId> requiredTables) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1ODkzMg=="}, "originalCommit": {"oid": "11b175404bd51f0bc4182e6e088579f93e3a89ab"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjExMTA5OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/specific/ExternalNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoyNTo1OFrOG1_Cig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoyNTo1OFrOG1_Cig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2MDU1NA==", "bodyText": "du kannst @NonNull an den Parameter machen", "url": "https://github.com/bakdata/conquery/pull/1287#discussion_r459260554", "createdAt": "2020-07-23T07:25:58Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/specific/ExternalNode.java", "diffHunk": "@@ -15,27 +12,25 @@\n import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n import com.bakdata.conquery.models.query.QueryExecutionContext;\n import com.bakdata.conquery.models.query.entity.Entity;\n-import com.bakdata.conquery.models.query.queryplan.QPChainNode;\n import com.bakdata.conquery.models.query.queryplan.QPNode;\n+import com.bakdata.conquery.models.query.queryplan.aggregators.specific.SpecialDateUnion;\n import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n-\n import lombok.Getter;\n+import org.hibernate.validator.constraints.NotEmpty;\n \n-public class ExternalNode extends QPChainNode {\n+public class ExternalNode extends QPNode {\n \n+\tprivate SpecialDateUnion dateUnion;\n \t@Getter\n \tprivate final DatasetId dataset;\n \t@Getter @NotEmpty\n \tprivate final Map<Integer, CDateSet> includedEntities;\n \tprivate CDateSet contained;\n \t\n-\tpublic ExternalNode(QPNode child, DatasetId dataset, Map<Integer, CDateSet> includedEntities) {\n-\t\tsuper(child);\n+\tpublic ExternalNode(SpecialDateUnion dateUnion, DatasetId dataset, Map<Integer, CDateSet> includedEntities) {\n+\t\tthis.dateUnion = dateUnion;\n \t\tthis.dataset = dataset;\n-\t\tthis.includedEntities = Objects.requireNonNullElse(\n-\t\t\tincludedEntities,\n-\t\t\tCollections.emptyMap()\n-\t\t);\n+\t\tthis.includedEntities = Objects.requireNonNull(includedEntities);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11b175404bd51f0bc4182e6e088579f93e3a89ab"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1305, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}