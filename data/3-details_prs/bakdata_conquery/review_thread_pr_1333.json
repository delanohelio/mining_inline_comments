{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MzQwMjcz", "number": 1333, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoxNzoxMlrOEoi3Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoyMTowNVrOEoi-Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTQ5NzExOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/NamespacedStorageImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoxNzoxMlrOHZspFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTozNTo1N1rOHdN2GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwNzg2MA==", "bodyText": "irgendwie wirkt das etwas redundant?", "url": "https://github.com/bakdata/conquery/pull/1333#discussion_r496707860", "createdAt": "2020-09-29T13:17:12Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/NamespacedStorageImpl.java", "diffHunk": "@@ -122,10 +127,15 @@ protected void createStores(Collector<KeyIncludingStore<?, ?>> collector) {\n \n \n \t\tcollector\n-\t\t\t.collect(dataset)\n-\t\t\t.collect(dictionaries)\n-\t\t\t.collect(concepts)\n-\t\t\t.collect(imports);\n+\t\t\t.collect(environment,dataset)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1044b6553af2a4f2b5acc5a300e5af064c0f37"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2ODk4NQ==", "bodyText": "Ich splitte das in einen Store und einen Environment collector okay?", "url": "https://github.com/bakdata/conquery/pull/1333#discussion_r498868985", "createdAt": "2020-10-02T14:48:23Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/NamespacedStorageImpl.java", "diffHunk": "@@ -122,10 +127,15 @@ protected void createStores(Collector<KeyIncludingStore<?, ?>> collector) {\n \n \n \t\tcollector\n-\t\t\t.collect(dataset)\n-\t\t\t.collect(dictionaries)\n-\t\t\t.collect(concepts)\n-\t\t\t.collect(imports);\n+\t\t\t.collect(environment,dataset)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwNzg2MA=="}, "originalCommit": {"oid": "1c1044b6553af2a4f2b5acc5a300e5af064c0f37"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5NzU5Mg==", "bodyText": "Okay, ich habs jetzt doch anders gemacht damit man mehr m\u00f6glichkeiten zum hinzuf\u00fcgen hat", "url": "https://github.com/bakdata/conquery/pull/1333#discussion_r500397592", "createdAt": "2020-10-06T15:35:57Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/NamespacedStorageImpl.java", "diffHunk": "@@ -122,10 +127,15 @@ protected void createStores(Collector<KeyIncludingStore<?, ?>> collector) {\n \n \n \t\tcollector\n-\t\t\t.collect(dataset)\n-\t\t\t.collect(dictionaries)\n-\t\t\t.collect(concepts)\n-\t\t\t.collect(imports);\n+\t\t\t.collect(environment,dataset)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwNzg2MA=="}, "originalCommit": {"oid": "1c1044b6553af2a4f2b5acc5a300e5af064c0f37"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTUxNDQ3OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/ConqueryStorageImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoyMTowNVrOHZs0AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDo0ODo0NVrOHbwj6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxMDY1Nw==", "bodyText": "Ich hab gerade mal geschaut, die Store::close Methode wird nirgends implementiert :D", "url": "https://github.com/bakdata/conquery/pull/1333#discussion_r496710657", "createdAt": "2020-09-29T13:21:05Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/ConqueryStorageImpl.java", "diffHunk": "@@ -14,63 +13,84 @@\n import com.bakdata.conquery.util.functions.Collector;\n import com.codahale.metrics.Timer;\n import com.google.common.base.Stopwatch;\n+import com.google.common.collect.Multimap;\n+import com.google.common.collect.MultimapBuilder;\n import jetbrains.exodus.env.Environment;\n-import jetbrains.exodus.env.Environments;\n import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n \n+/**\n+ * Base class of persistent storages to uniformly handle load of data and closing of storages.\n+ */\n @Getter @Slf4j\n public abstract class ConqueryStorageImpl implements ConqueryStorage {\n \n-\tprotected final File directory;\n \tprotected final Validator validator;\n-\tprotected final Environment environment;\n \tprotected final StorageConfig config;\n \t@Getter\n \tprotected final CentralRegistry centralRegistry = new CentralRegistry();\n \tprivate final List<KeyIncludingStore<?,?>> stores = new ArrayList<>();\n+\t\n+\tprivate final Multimap<Environment, KeyIncludingStore<?,?>> environmentToStores = MultimapBuilder.linkedHashKeys().arrayListValues().build();\n \n-\tpublic ConqueryStorageImpl(Validator validator, StorageConfig config, File directory) {\n-\t\tthis.directory = directory;\n+\tpublic ConqueryStorageImpl(Validator validator, StorageConfig config) {\n \t\tthis.validator = validator;\n-\t\tthis.environment = Environments.newInstance(directory, config.getXodus().createConfig());\n \t\tthis.config = config;\n \t}\n \n-\tprotected void createStores(Collector<KeyIncludingStore<?,?>> collector) {\n-\t}\n+\t/**\n+\t * Stores can contain of multiple environments, whose themselves can consist of multiple stores.\n+\t * This method collects this information as a mapping that is used to load and later close the stores.\n+\t * The environments should be collected in the order the stores should be loaded.\n+\t */\n+\tabstract protected void createStores(Collector<Environment,KeyIncludingStore<?,?>> collector);\n \n \t/**\n \t * Load all stores from disk.\n \t */\n \t@Override\n \tpublic void loadData() {\n-\t\tcreateStores(stores::add);\n-\t\tlog.info(\"Loading storage {} from {}\", this.getClass().getSimpleName(), directory);\n-\n-\t\ttry (final Timer.Context timer = JobMetrics.getStoreLoadingTimer()) {\n-\t\t\tStopwatch all = Stopwatch.createStarted();\n-\t\t\tfor (KeyIncludingStore<?, ?> store : stores) {\n-\t\t\t\tstore.loadData();\n+\t\tcreateStores(environmentToStores::put);\n+\t\tfor(Environment environment : environmentToStores.keySet()) {\n+\t\t\tlog.info(\"Loading storage {} from {}\", this.getClass().getSimpleName(), environment.getLocation());\n+\t\t\t\n+\t\t\ttry (final Timer.Context timer = JobMetrics.getStoreLoadingTimer()) {\n+\t\t\t\tStopwatch all = Stopwatch.createStarted();\n+\t\t\t\tfor (KeyIncludingStore<?, ?> store : environmentToStores.get(environment)) {\n+\t\t\t\t\tstore.loadData();\n+\t\t\t\t}\n+\t\t\t\tlog.info(\"Loading of environment {} completed within {}\", environment.getLocation(), all.stop());\n \t\t\t}\n-\t\t\tlog.info(\"Loaded complete {} storage within {}\", this.getClass().getSimpleName(), all.stop());\n \t\t}\n-\n \t}\n+\t\n \n \t@Override\n \tpublic void close() throws IOException {\n-\t\tfor(KeyIncludingStore<?, ?> store : stores) {\n-\t\t\tstore.close();\n+\t\tfor(Environment environment : environmentToStores.keySet()) {\n+\t\t\tlog.info(\"Closing stores of environment {}\", environment.getLocation());\n+\t\t\tfor (KeyIncludingStore<?, ?> store : environmentToStores.get(environment)) {\n+\t\t\t\tlog.info(\"Closing store {}\", store.toString());\n+\t\t\t\tstore.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1044b6553af2a4f2b5acc5a300e5af064c0f37"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2OTIyNg==", "bodyText": "Habe sie entfernt", "url": "https://github.com/bakdata/conquery/pull/1333#discussion_r498869226", "createdAt": "2020-10-02T14:48:45Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/ConqueryStorageImpl.java", "diffHunk": "@@ -14,63 +13,84 @@\n import com.bakdata.conquery.util.functions.Collector;\n import com.codahale.metrics.Timer;\n import com.google.common.base.Stopwatch;\n+import com.google.common.collect.Multimap;\n+import com.google.common.collect.MultimapBuilder;\n import jetbrains.exodus.env.Environment;\n-import jetbrains.exodus.env.Environments;\n import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n \n+/**\n+ * Base class of persistent storages to uniformly handle load of data and closing of storages.\n+ */\n @Getter @Slf4j\n public abstract class ConqueryStorageImpl implements ConqueryStorage {\n \n-\tprotected final File directory;\n \tprotected final Validator validator;\n-\tprotected final Environment environment;\n \tprotected final StorageConfig config;\n \t@Getter\n \tprotected final CentralRegistry centralRegistry = new CentralRegistry();\n \tprivate final List<KeyIncludingStore<?,?>> stores = new ArrayList<>();\n+\t\n+\tprivate final Multimap<Environment, KeyIncludingStore<?,?>> environmentToStores = MultimapBuilder.linkedHashKeys().arrayListValues().build();\n \n-\tpublic ConqueryStorageImpl(Validator validator, StorageConfig config, File directory) {\n-\t\tthis.directory = directory;\n+\tpublic ConqueryStorageImpl(Validator validator, StorageConfig config) {\n \t\tthis.validator = validator;\n-\t\tthis.environment = Environments.newInstance(directory, config.getXodus().createConfig());\n \t\tthis.config = config;\n \t}\n \n-\tprotected void createStores(Collector<KeyIncludingStore<?,?>> collector) {\n-\t}\n+\t/**\n+\t * Stores can contain of multiple environments, whose themselves can consist of multiple stores.\n+\t * This method collects this information as a mapping that is used to load and later close the stores.\n+\t * The environments should be collected in the order the stores should be loaded.\n+\t */\n+\tabstract protected void createStores(Collector<Environment,KeyIncludingStore<?,?>> collector);\n \n \t/**\n \t * Load all stores from disk.\n \t */\n \t@Override\n \tpublic void loadData() {\n-\t\tcreateStores(stores::add);\n-\t\tlog.info(\"Loading storage {} from {}\", this.getClass().getSimpleName(), directory);\n-\n-\t\ttry (final Timer.Context timer = JobMetrics.getStoreLoadingTimer()) {\n-\t\t\tStopwatch all = Stopwatch.createStarted();\n-\t\t\tfor (KeyIncludingStore<?, ?> store : stores) {\n-\t\t\t\tstore.loadData();\n+\t\tcreateStores(environmentToStores::put);\n+\t\tfor(Environment environment : environmentToStores.keySet()) {\n+\t\t\tlog.info(\"Loading storage {} from {}\", this.getClass().getSimpleName(), environment.getLocation());\n+\t\t\t\n+\t\t\ttry (final Timer.Context timer = JobMetrics.getStoreLoadingTimer()) {\n+\t\t\t\tStopwatch all = Stopwatch.createStarted();\n+\t\t\t\tfor (KeyIncludingStore<?, ?> store : environmentToStores.get(environment)) {\n+\t\t\t\t\tstore.loadData();\n+\t\t\t\t}\n+\t\t\t\tlog.info(\"Loading of environment {} completed within {}\", environment.getLocation(), all.stop());\n \t\t\t}\n-\t\t\tlog.info(\"Loaded complete {} storage within {}\", this.getClass().getSimpleName(), all.stop());\n \t\t}\n-\n \t}\n+\t\n \n \t@Override\n \tpublic void close() throws IOException {\n-\t\tfor(KeyIncludingStore<?, ?> store : stores) {\n-\t\t\tstore.close();\n+\t\tfor(Environment environment : environmentToStores.keySet()) {\n+\t\t\tlog.info(\"Closing stores of environment {}\", environment.getLocation());\n+\t\t\tfor (KeyIncludingStore<?, ?> store : environmentToStores.get(environment)) {\n+\t\t\t\tlog.info(\"Closing store {}\", store.toString());\n+\t\t\t\tstore.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxMDY1Nw=="}, "originalCommit": {"oid": "1c1044b6553af2a4f2b5acc5a300e5af064c0f37"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1368, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}