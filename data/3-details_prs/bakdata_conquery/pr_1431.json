{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNjQ4Nzk0", "number": 1431, "title": "Rework Buckets", "bodyText": "No longer use on-line compilation instead use column stores\nMake file format of Preprocessed Files explicit and rely on Binary-JSON instead.", "createdAt": "2020-11-13T15:29:00Z", "url": "https://github.com/bakdata/conquery/pull/1431", "merged": true, "mergeCommit": {"oid": "e782d6db87e4e533b62f26d53759b7018c97b7bf"}, "closed": true, "closedAt": "2021-02-01T15:12:20Z", "author": {"login": "awildturtok"}, "timelineItems": {"totalCount": 208, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdySxNCgH2gAyNTIwNjQ4Nzk0OjVhMDkyNWI5NzY0NGY5ZDY3OTFjNzY0NDJiODFhNjU4Mjk5MTEwYmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd14CxcAH2gAyNTIwNjQ4Nzk0OjRlOGIzNDMxMDNlOWFmODFkNTBmMTgzYmRiNmVjODI0NmNiNjRmZGQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5a0925b97644f9d6791c76442b81a658299110bf", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/5a0925b97644f9d6791c76442b81a658299110bf", "committedDate": "2021-01-21T11:25:29Z", "message": "Undo fast (and out of order) sending of messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f4583681393ddac1ac98b49742988d8ef250f75", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/4f4583681393ddac1ac98b49742988d8ef250f75", "committedDate": "2021-01-21T11:25:55Z", "message": "encapsulate Construction of ImportBucket"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63a92058a8127c0eae30d80129cb0dc49a3dcb3d", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/63a92058a8127c0eae30d80129cb0dc49a3dcb3d", "committedDate": "2021-01-21T15:36:03Z", "message": "minor code style issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eeb38c4343b2724a87118ebd7f422875b660dc14", "author": {"user": {"login": "bakdata-bot", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/eeb38c4343b2724a87118ebd7f422875b660dc14", "committedDate": "2021-02-01T10:43:32Z", "message": "automatic update to docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d6249097a95f3f27a5589ede40a176584c45d55", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/7d6249097a95f3f27a5589ede40a176584c45d55", "committedDate": "2021-02-01T11:32:57Z", "message": "fix setLines/getLines not returning proper values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49446e8bf304e9fe2868b0a7873d0494ba9b1538", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/49446e8bf304e9fe2868b0a7873d0494ba9b1538", "committedDate": "2021-02-01T13:07:45Z", "message": "documentation for StringTypeGuesser"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgwMzUxNzgx", "url": "https://github.com/bakdata/conquery/pull/1431#pullrequestreview-580351781", "createdAt": "2021-02-01T13:29:44Z", "commit": {"oid": "49446e8bf304e9fe2868b0a7873d0494ba9b1538"}, "state": "DISMISSED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMzoyOTo0NFrOIdhTHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxNDoxODoyM1rOIdjTyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzgyNTE4MA==", "bodyText": "shenanigans :D", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r567825180", "createdAt": "2021-02-01T13:29:44Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/stores/specific/string/StringTypeDictionary.java", "diffHunk": "@@ -19,6 +19,11 @@\n import lombok.Setter;\n import lombok.extern.slf4j.Slf4j;\n \n+/**\n+ * Strings are stored in a Dictionary, ids are handles into the Dictionary.\n+ *\n+ * @implNote this is NOT a {@link StringType}, but is the base class of it. This enables some shenanigans with encodings.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49446e8bf304e9fe2868b0a7873d0494ba9b1538"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzgyODE0MA==", "bodyText": "Wof\u00fcr ist das notwendig. Ist der resultierende ColumnStore dann valide, wenn er leer ist, aber dennoch Lines hat?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r567828140", "createdAt": "2021-02-01T13:34:12Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/stores/ColumnStore.java", "diffHunk": "@@ -51,31 +61,49 @@ public Object createScriptValue(JAVA_TYPE value) {\n \t\treturn value;\n \t}\n \n-\tpublic long estimateMemoryConsumption() {\n+\t/**\n+\t * Calculate estimate of total bytes used by this store.\n+\t */\n+\tpublic long estimateMemoryConsumptionBytes() {\n \t\tlong bits = estimateEventBits();\n \n-\t\treturn getLines() * bits;\n+\t\treturn Math.floorDiv(getLines() * bits, Byte.SIZE);\n \t}\n \n+\t/**\n+\t * Number of bits required to store a single value.\n+\t */\n \tpublic abstract long estimateEventBits();\n \n-\tpublic long estimateTypeSize() {\n+\t/**\n+\t * Bytes required to store auxilary data.\n+\t */\n+\tpublic long estimateTypeSizeBytes() {\n \t\treturn 0;\n \t}\n \n+\n+\tpublic abstract ColumnStore<JAVA_TYPE> doSelect(int[] starts, int[] lengths);\n+\n \t/**\n \t * Select the partition of this store.\n \t * The returning store has to accept queries up to {@code sum(lenghts)}, values may not be reordered.\n \t */\n-\tpublic abstract ColumnStore<JAVA_TYPE> select(int[] starts, int[] lengths);\n+\tpublic ColumnStore<JAVA_TYPE> select(int[] starts, int[] lengths){\n+\t\t//TODO FK: this is just WIP as getLines is only used for isEmpty and AdminEnd description, but detangling requires a lot of refactoring.\n+\t\tfinal ColumnStore<JAVA_TYPE> select = doSelect(starts, lengths);\n+\t\tselect.setLines(Arrays.stream(lengths).sum());\n+\t\treturn select;\n+\t}\n+\n+\n \n \t/**\n \t * Create an empty store that's only a description of the transformation.\n \t */\n \tpublic ColumnStore<JAVA_TYPE> createDescription() {\n-\t\tfinal ColumnStore<JAVA_TYPE> select = select(new int[0], new int[0]);\n+\t\tfinal ColumnStore<JAVA_TYPE> select = doSelect(new int[0], new int[0]);\n \t\tselect.setLines(getLines());\n-\t\tselect.setNullLines(getNullLines());\n \t\treturn select;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49446e8bf304e9fe2868b0a7873d0494ba9b1538"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg1NjYyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif(maxValue == Integer.MAX_VALUE){\n          \n          \n            \n            \t\tif(maxValue >= Integer.MAX_VALUE){\n          \n      \n    \n    \n  \n\nNur dass es mich beruhigt, weil maxValue  ein Long ist", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r567856624", "createdAt": "2021-02-01T14:16:22Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/parser/specific/IntegerParser.java", "diffHunk": "@@ -87,6 +87,10 @@ protected void registerValue(Long v) {\n \t\t\treturn new RebasingStore(minValue, Integer.MIN_VALUE, IntegerStore.create(getLines()));\n \t\t}\n \n+\t\tif(maxValue == Integer.MAX_VALUE){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49446e8bf304e9fe2868b0a7873d0494ba9b1538"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg1ODEyMg==", "bodyText": "dateStore.setLines(getLines()); delegated nicht an den unterliegenden store?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r567858122", "createdAt": "2021-02-01T14:18:23Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/parser/specific/DateParser.java", "diffHunk": "@@ -47,6 +47,9 @@ public Integer addLine(Integer v) {\n \t@Override\n \tprotected DateStore decideType() {\n \t\tColumnStore<Long> subDecision = subType.findBestType();\n-\t\treturn new DateStore(subDecision);\n+\t\tsubDecision.setLines(getLines());\n+\t\tfinal DateStore dateStore = new DateStore(subDecision);\n+\t\tdateStore.setLines(getLines());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49446e8bf304e9fe2868b0a7873d0494ba9b1538"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e8b343103e9af81d50f183bdb6ec8246cb64fdd", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/4e8b343103e9af81d50f183bdb6ec8246cb64fdd", "committedDate": "2021-02-01T14:32:56Z", "message": "fix typo for exceeding LongStore capacity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3774b1017b937c1561a2b1ed3d987b99bff8cb4d", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/3774b1017b937c1561a2b1ed3d987b99bff8cb4d", "committedDate": "2020-11-26T15:26:32Z", "message": "remove redundant VarIntType.java classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6433c57cb23280c2781e239bcb8c95e1b9d1d09a", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/6433c57cb23280c2781e239bcb8c95e1b9d1d09a", "committedDate": "2020-11-26T15:33:50Z", "message": "find index type for Strings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22fde31b27fded65057376f5c1203fbfeb3d1023", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/22fde31b27fded65057376f5c1203fbfeb3d1023", "committedDate": "2020-11-26T15:50:08Z", "message": "apply compression also to StringParser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62f848672ed33862386c7732733976c941d101c0", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/62f848672ed33862386c7732733976c941d101c0", "committedDate": "2020-11-27T10:23:17Z", "message": "Inject Dataset into ObjectMapper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af4929832a3dca807f4fd2dc8849be977db5149c", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/af4929832a3dca807f4fd2dc8849be977db5149c", "committedDate": "2020-11-27T11:12:27Z", "message": "Unify directly backed types via store"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7e7246bc7d2237508a9145098d24b7f14a9fbfa", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/f7e7246bc7d2237508a9145098d24b7f14a9fbfa", "committedDate": "2020-11-27T11:31:46Z", "message": "inject valueMapping into StringTypeDictionary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10b683587079a0e0a7b399bf97ee9f07aeabe7f9", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/10b683587079a0e0a7b399bf97ee9f07aeabe7f9", "committedDate": "2020-11-27T12:13:25Z", "message": "Recalculate underlying size instead, to reduce large int arrays IN SPAAAAAACE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44ac410a88784550efd3a5d97319d608ab4e732f", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/44ac410a88784550efd3a5d97319d608ab4e732f", "committedDate": "2020-11-27T14:06:30Z", "message": "add property anno"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1441d9de6e7928d7dd2e6667cb50872d6742756b", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/1441d9de6e7928d7dd2e6667cb50872d6742756b", "committedDate": "2020-11-30T13:56:30Z", "message": "remove unused or now redundant tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "008093734d4c112bbbe3e77f22e5a43049bfa9ab", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/008093734d4c112bbbe3e77f22e5a43049bfa9ab", "committedDate": "2020-11-30T14:41:04Z", "message": "remove duplicate store"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6360a56ce6e6fe49f460bb84cc0f75406e1f8cf", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/d6360a56ce6e6fe49f460bb84cc0f75406e1f8cf", "committedDate": "2020-11-30T14:44:13Z", "message": "add anyOpen back"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "734ff0c81365a830415a4d699c5af34b2cc9fcd2", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/734ff0c81365a830415a4d699c5af34b2cc9fcd2", "committedDate": "2020-11-30T14:56:57Z", "message": "remove now redundant DateRangeTypePacked.java store"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b56415285a1577ff16d44a1016fbbfd4cea7d15b", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/b56415285a1577ff16d44a1016fbbfd4cea7d15b", "committedDate": "2020-11-30T14:59:45Z", "message": "remove ChainedStringType.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "299d43b5682a270a0c6ce88900c08d51a370f020", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/299d43b5682a270a0c6ce88900c08d51a370f020", "committedDate": "2020-11-30T15:01:39Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a491ca3bd9b61297ea051a8b5d6a3930e6543589", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/a491ca3bd9b61297ea051a8b5d6a3930e6543589", "committedDate": "2020-11-30T15:17:33Z", "message": "cleanup StringType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41bd1dcb8a7967daa8474ba1255143fe1cb4c627", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/41bd1dcb8a7967daa8474ba1255143fe1cb4c627", "committedDate": "2020-11-30T15:22:55Z", "message": "docs for Int et al Stores"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3b9472da81abe8efaa8c3f52324c755949f7263", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/f3b9472da81abe8efaa8c3f52324c755949f7263", "committedDate": "2020-11-30T16:01:25Z", "message": "formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cda07b9dfe675ba200db2000b25da33bd78dba52", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/cda07b9dfe675ba200db2000b25da33bd78dba52", "committedDate": "2020-12-01T10:55:27Z", "message": "rework DateRangeParser to have two stores as they are hard to select"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7025607bdb114f8d3ed5b9471c2c4b1297264970", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/7025607bdb114f8d3ed5b9471c2c4b1297264970", "committedDate": "2020-12-01T11:12:28Z", "message": "rename localEntity to entity to reflect API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b286344de381d2cb5e4ea95fb35cfbb0bfa86a8", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/9b286344de381d2cb5e4ea95fb35cfbb0bfa86a8", "committedDate": "2020-12-01T11:30:34Z", "message": "add missig SerializationTests and broaden to ColumnStore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c71aecaf06db94b735c184b72601e9a95cb9e425", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/c71aecaf06db94b735c184b72601e9a95cb9e425", "committedDate": "2020-12-01T11:46:14Z", "message": "remove intermediate ColumnStoreAdapter.java class, merge with ColumnStore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a728eca849ed1f766a3eaea1a61015946ed9822", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/0a728eca849ed1f766a3eaea1a61015946ed9822", "committedDate": "2020-12-01T11:50:23Z", "message": "move loadDictionary into StringType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca186537eebd54ca0da7c5b2d3053a5ef1b98294", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/ca186537eebd54ca0da7c5b2d3053a5ef1b98294", "committedDate": "2020-12-01T13:24:41Z", "message": "completely inline ColumnStore.java class to avoid reduncancies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "830836b19f3eb2b03a09ccc9699fdbd44d36815e", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/830836b19f3eb2b03a09ccc9699fdbd44d36815e", "committedDate": "2020-12-01T13:32:16Z", "message": "heavy refactoring of CType.java, rename to ColumnStore.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42b9caaee24f6b53d0c0703fbfc9fa33c729786e", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/42b9caaee24f6b53d0c0703fbfc9fa33c729786e", "committedDate": "2020-12-01T13:35:58Z", "message": "merge packages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "509dec4dcf2336544bdd446d5c93b5a9edde09e3", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/509dec4dcf2336544bdd446d5c93b5a9edde09e3", "committedDate": "2020-12-01T13:38:29Z", "message": "cleanup packages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7595358a935bbbc8b2ea579a4d112da5d073926d", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/7595358a935bbbc8b2ea579a4d112da5d073926d", "committedDate": "2020-12-01T13:48:51Z", "message": "remove IntegerType.java as it is now a duplicate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6c3756b8a87f6abff1283bee15f6ddc457f5ffc", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/d6c3756b8a87f6abff1283bee15f6ddc457f5ffc", "committedDate": "2020-12-01T13:53:26Z", "message": "remove redundant classes and test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a56c11e2d89d83f2a1948c507113ff2fe05ca566", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/a56c11e2d89d83f2a1948c507113ff2fe05ca566", "committedDate": "2020-12-01T13:56:37Z", "message": "remove RealType.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abc40a757a7f1cb3202ca5939a341fc9f467a5e8", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/abc40a757a7f1cb3202ca5939a341fc9f467a5e8", "committedDate": "2020-12-01T13:57:52Z", "message": "Move DateStore to stores package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49cd9d66f60494d43ff7abbc044262801611cb5a", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/49cd9d66f60494d43ff7abbc044262801611cb5a", "committedDate": "2020-12-01T14:46:29Z", "message": "Merge remote-tracking branch 'origin/develop' into feature/bye-bye-bucket-templates\n\n# Conflicts:\n#\tbackend/src/main/java/com/bakdata/conquery/io/result/csv/QueryToCSVRenderer.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/events/Bucket.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/events/BucketManager.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/externalservice/ResultType.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/types/parser/specific/DecimalParser.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/types/parser/specific/string/MapTypeGuesser.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/types/parser/specific/string/StringParser.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/types/parser/specific/string/TrieTypeGuesser.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/types/specific/StringTypeDictionary.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/worker/Worker.java\n#\tbackend/src/test/java/com/bakdata/conquery/io/jackson/serializer/SerializationTestUtil.java\n#\tbackend/src/test/java/com/bakdata/conquery/models/SerializationTests.java\n#\tbackend/src/test/java/com/bakdata/conquery/models/types/SerializationTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4b31e787179d0ed097f850393657f741f8e4b35", "author": {"user": {"login": "bakdata-bot", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/d4b31e787179d0ed097f850393657f741f8e4b35", "committedDate": "2020-12-01T14:49:27Z", "message": "automatic update to docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d360cda86d7debdf05eb8d61bab085cf0a26cbd6", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/d360cda86d7debdf05eb8d61bab085cf0a26cbd6", "committedDate": "2020-12-02T16:47:14Z", "message": "add trace of row for GroovyPredicate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8e981d64b669e26798f9a3488ba45b4f1a18121", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/b8e981d64b669e26798f9a3488ba45b4f1a18121", "committedDate": "2020-12-02T16:53:51Z", "message": "add length to log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29a20783e5e65eeb66e166f58a5c939b921a7f88", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/29a20783e5e65eeb66e166f58a5c939b921a7f88", "committedDate": "2020-12-03T08:45:59Z", "message": "add map for Columns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea3aa804f3c7e4bb95e1a2d3f1f9f82ce6e3076f", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/ea3aa804f3c7e4bb95e1a2d3f1f9f82ce6e3076f", "committedDate": "2020-12-03T12:51:00Z", "message": "tighten up usage of parallel arrays"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b52d2f23ffce8f325dcc5153dfb47f2828625a8", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/0b52d2f23ffce8f325dcc5153dfb47f2828625a8", "committedDate": "2020-12-03T12:53:05Z", "message": "remove unused primaryColumn"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ac24abcfea4f82f6954c8ace92b272598fb0e33", "author": {"user": {"login": "bakdata-bot", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/0ac24abcfea4f82f6954c8ace92b272598fb0e33", "committedDate": "2020-12-03T12:55:36Z", "message": "automatic update to docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e00a2f156412734e47ea97622fd6843a753bb12", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/8e00a2f156412734e47ea97622fd6843a753bb12", "committedDate": "2020-12-03T14:42:06Z", "message": "remove unused PRIMARY_POSITION"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca61f1f4921348d90281e90b546adb77346f0020", "author": {"user": {"login": "bakdata-bot", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/ca61f1f4921348d90281e90b546adb77346f0020", "committedDate": "2020-12-03T14:45:05Z", "message": "automatic update to docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55a179044aea897e848b821bb55ec06133aa68a2", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/55a179044aea897e848b821bb55ec06133aa68a2", "committedDate": "2020-12-03T16:07:29Z", "message": "cleanup methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c555a8abacd18e2f3aa70e0d45fbbbf4ac9d285b", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/c555a8abacd18e2f3aa70e0d45fbbbf4ac9d285b", "committedDate": "2020-12-03T16:35:14Z", "message": "fix logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad8362adf4ca2856e094a1b3e3b10a5c3824d2eb", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/ad8362adf4ca2856e094a1b3e3b10a5c3824d2eb", "committedDate": "2020-12-03T16:35:30Z", "message": "Merge remote-tracking branch 'origin/develop' into feature/bye-bye-bucket-templates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e7eb6bc4888b24303af81aeb8121c011a47de0d", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/7e7eb6bc4888b24303af81aeb8121c011a47de0d", "committedDate": "2020-12-03T16:51:45Z", "message": "load dictionaries on bucket loading"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a914e64b5e4378d6a3c142d845ff6911d774f9c", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/9a914e64b5e4378d6a3c142d845ff6911d774f9c", "committedDate": "2020-12-03T17:31:37Z", "message": "fix parsing problems"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6690db2d60db74a740cf1ab86680780a4d731b27", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/6690db2d60db74a740cf1ab86680780a4d731b27", "committedDate": "2020-12-03T19:35:15Z", "message": "allow missing mapping in case they're not reuqired"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ae76a9fa52f078f462aeba73160bbadf275a8b9", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/7ae76a9fa52f078f462aeba73160bbadf275a8b9", "committedDate": "2020-12-03T19:49:28Z", "message": "fix dict check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "219fbcfebacd89e87fcc91aff8a938081629a74b", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/219fbcfebacd89e87fcc91aff8a938081629a74b", "committedDate": "2020-12-03T20:12:23Z", "message": "add missing toString for StringParser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd2bab494e76442c37b23a26a35d968f291260b9", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/bd2bab494e76442c37b23a26a35d968f291260b9", "committedDate": "2020-12-03T20:24:11Z", "message": "remove getTypeId from ColumnStore et al"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ca86da2475099f72192934d02b766fecc0f9934", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/1ca86da2475099f72192934d02b766fecc0f9934", "committedDate": "2020-12-04T10:43:43Z", "message": "delete unused classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37a0ce25a3eb8d6ef8da5ddbfc0322267d8d7511", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/37a0ce25a3eb8d6ef8da5ddbfc0322267d8d7511", "committedDate": "2020-12-04T10:47:31Z", "message": "Merge pull request #1450 from bakdata/feature/inject-ds-into-mapper\n\nInject Dataset into ObjectMapper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "926da27bb0962a833c299f2dc172353e3497aebd", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/926da27bb0962a833c299f2dc172353e3497aebd", "committedDate": "2020-12-04T10:57:21Z", "message": "Merge remote-tracking branch 'origin/develop' into feature/bye-bye-bucket-templates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09589b93025e11017fcfd269fa550900f73bd7b3", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/09589b93025e11017fcfd269fa550900f73bd7b3", "committedDate": "2020-12-04T11:23:27Z", "message": "Merge remote-tracking branch 'origin/master' into feature/bye-bye-bucket-templates\n\n# Conflicts:\n#\tbackend/src/main/java/com/bakdata/conquery/models/common/BitMapCDateSet.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/config/ConqueryConfig.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/events/Bucket.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/jobs/ImportJob.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ImportBucket.java\n#\tbackend/src/main/resources/com/bakdata/conquery/models/events/generation/BucketTemplate.ftl\n#\tdocs/Config JSON.md\n#\tdocs/REST API JSONs.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7617a759a25e65787759950015c7c25daf216af8", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/7617a759a25e65787759950015c7c25daf216af8", "committedDate": "2020-12-04T11:31:00Z", "message": "docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a64e7605227e2c752b4175b387618b5ca25cdd52", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/a64e7605227e2c752b4175b387618b5ca25cdd52", "committedDate": "2020-12-04T11:45:12Z", "message": "change size estimation back to bits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4a501847ba38c191c8ed035b6a3458b8f427c41", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/d4a501847ba38c191c8ed035b6a3458b8f427c41", "committedDate": "2020-12-04T11:47:41Z", "message": "fix import rendering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "537608c499dad3affc298f172f1a0ddaedf4220a", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/537608c499dad3affc298f172f1a0ddaedf4220a", "committedDate": "2020-12-04T12:06:17Z", "message": "merge fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1aa4b8de5832889f691b3b348dcc1fb0723b4ddf", "author": {"user": {"login": "bakdata-bot", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/1aa4b8de5832889f691b3b348dcc1fb0723b4ddf", "committedDate": "2020-12-04T12:08:53Z", "message": "automatic update to docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e2e3e9c6b94787cbf63ce0a7e45169372a28c44", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/7e2e3e9c6b94787cbf63ce0a7e45169372a28c44", "committedDate": "2020-12-04T12:10:57Z", "message": "Merge remote-tracking branch 'origin/release/KW41' into feature/bye-bye-bucket-templates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b187fc5945b42d895fa920dd6c6e583dca208632", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/b187fc5945b42d895fa920dd6c6e583dca208632", "committedDate": "2020-12-04T12:23:21Z", "message": "fix import size display again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c931daae6589e3537f30d9d3000fe36b283f16b", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/6c931daae6589e3537f30d9d3000fe36b283f16b", "committedDate": "2020-12-04T12:44:45Z", "message": "remove lambda"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "848c7579f7ecc3179cf19785a0c877f6f7a88f0a", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/848c7579f7ecc3179cf19785a0c877f6f7a88f0a", "committedDate": "2020-12-04T12:51:53Z", "message": "cleanup toString as it was printing the entire set"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1OTExMjc5", "url": "https://github.com/bakdata/conquery/pull/1431#pullrequestreview-545911279", "createdAt": "2020-12-07T08:14:58Z", "commit": {"oid": "848c7579f7ecc3179cf19785a0c877f6f7a88f0a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODoxNDo1OFrOIAan1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODoxNzoyMVrOIAas9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMwNzA5Mw==", "bodyText": "Ich habe gesehen, dass du einen neuen Serialisierungstest erstellt hast, aber da habe ich einen Bitstore nicht auf den ersten Blick gesehen.", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r537307093", "createdAt": "2020-12-07T08:14:58Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/io/jackson/serializer/BitSetSerializer.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.bakdata.conquery.io.jackson.serializer;\n+\n+import java.io.IOException;\n+import java.util.BitSet;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+public class BitSetSerializer extends StdSerializer<BitSet> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "848c7579f7ecc3179cf19785a0c877f6f7a88f0a"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMwODQwNg==", "bodyText": "Einmal bitte auf develop rebasen", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r537308406", "createdAt": "2020-12-07T08:17:21Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/NamespaceStorage.java", "diffHunk": "@@ -36,4 +37,7 @@ public static NamespaceStorage tryLoad(Validator validator, StorageConfig config\n \t\n \tPersistentIdMap getIdMapping();\n \tvoid updateIdMapping(PersistentIdMap idMap) throws JSONException;\n+\n+\tvoid setWorkerToBucketsMap(WorkerToBucketsMap map);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "848c7579f7ecc3179cf19785a0c877f6f7a88f0a"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "070f4782ef3711bf13959643f0a7193712d784c6", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/070f4782ef3711bf13959643f0a7193712d784c6", "committedDate": "2020-12-07T08:40:31Z", "message": "Merge remote-tracking branch 'origin/develop' into feature/bye-bye-bucket-templates\n\n# Conflicts:\n#\tbackend/src/main/java/com/bakdata/conquery/models/config/ConqueryConfig.java\n#\tdocs/Config JSON.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0561867a74178650e5ec890e12cfa15fe4eeb771", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/0561867a74178650e5ec890e12cfa15fe4eeb771", "committedDate": "2020-12-07T09:22:18Z", "message": "fix name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed1ca6c5a3ad3327a41f6b34754865f387324448", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/ed1ca6c5a3ad3327a41f6b34754865f387324448", "committedDate": "2020-12-10T14:10:19Z", "message": "Merge remote-tracking branch 'origin/develop' into feature/bye-bye-bucket-templates\n\n# Conflicts:\n#\tbackend/src/main/java/com/bakdata/conquery/models/events/Bucket.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/query/queryplan/TableExportQueryPlan.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "922669becc953b3ea74b437a08da49ee7957bd8c", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/922669becc953b3ea74b437a08da49ee7957bd8c", "committedDate": "2020-12-10T16:14:37Z", "message": "IntegerParser test all combinations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f16191bb409dc18ed6b4aa9b6f61c7c9b9313adb", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/f16191bb409dc18ed6b4aa9b6f61c7c9b9313adb", "committedDate": "2020-12-11T09:46:52Z", "message": "parser test for Decimal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fa5029ef57ad7c1eea70937d4b935d2f8918ea0", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/3fa5029ef57ad7c1eea70937d4b935d2f8918ea0", "committedDate": "2020-12-16T11:52:19Z", "message": "change delegation of get/get$Type to reduce unneccessary boxing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4b98de06bff934cb25ab0a8dff99b4e9be848c4", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/c4b98de06bff934cb25ab0a8dff99b4e9be848c4", "committedDate": "2020-12-16T11:57:33Z", "message": "fix compile error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc7d1ba811feb6d139627456117d109d3fcce02e", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/fc7d1ba811feb6d139627456117d109d3fcce02e", "committedDate": "2021-01-07T17:10:09Z", "message": "don't rebase if not necessary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3accd3f5f41a5a5656d1ae1800f5f64693923c5d", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/3accd3f5f41a5a5656d1ae1800f5f64693923c5d", "committedDate": "2021-01-14T13:15:30Z", "message": "clean up IntegerParser test to respect optional-only rebasing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36e46e37eed287e59c904437bd605293136760c6", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/36e46e37eed287e59c904437bd605293136760c6", "committedDate": "2021-01-14T13:27:04Z", "message": "Fix faulty delegation in StringTypeEncoded"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5e40c3362dcfc4c3a79baaece1e408d0e5b8194", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/f5e40c3362dcfc4c3a79baaece1e408d0e5b8194", "committedDate": "2021-01-14T13:43:33Z", "message": "fix DateParser not delegating properly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40dd948f38571cfe6a2e6f0815752837d087af83", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/40dd948f38571cfe6a2e6f0815752837d087af83", "committedDate": "2021-01-14T13:51:03Z", "message": "fix accidentally using wrong value registering mechanism"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22876f47eaa0088d8fa84f7ad87ecf4b4dc8412a", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/22876f47eaa0088d8fa84f7ad87ecf4b4dc8412a", "committedDate": "2021-01-14T16:04:00Z", "message": "fix not checking for not-set dates of Enitity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fa82603e6b6184c3d8eb0178e278e9530b5061b", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/7fa82603e6b6184c3d8eb0178e278e9530b5061b", "committedDate": "2021-01-14T16:29:17Z", "message": "Merge branch 'develop' into feature/bye-bye-bucket-templates\n\n# Conflicts:\n#\tbackend/src/main/java/com/bakdata/conquery/io/xodus/ModificationShieldedWorkerStorage.java\n#\tbackend/src/main/java/com/bakdata/conquery/io/xodus/NamespacedStorageImpl.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/datasets/Table.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/events/Bucket.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/events/BucketManager.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/jobs/ImportJob.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/preproc/Preprocessed.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/preproc/Preprocessor.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/query/queryplan/SecondaryIdQueryPlan.java\n#\tbackend/src/main/java/com/bakdata/conquery/resources/admin/rest/AdminDatasetResource.java\n#\tbackend/src/main/java/com/bakdata/conquery/resources/admin/rest/AdminProcessor.java\n#\tbackend/src/main/java/com/bakdata/conquery/resources/admin/ui/DatasetsUIResource.java\n#\tbackend/src/main/java/com/bakdata/conquery/resources/admin/ui/TablesUIResource.java\n#\tbackend/src/test/java/com/bakdata/conquery/integration/common/RequiredColumn.java\n#\tdocs/Concept JSONs.md\n#\tdocs/Table JSONs.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae8a22953a4a1f29badb798020465d33cbeb3381", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/ae8a22953a4a1f29badb798020465d33cbeb3381", "committedDate": "2021-01-14T16:35:21Z", "message": "post merge fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28", "author": {"user": {"login": "bakdata-bot", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/a6854c15bd3c37a57b5e915350def055cabd6c28", "committedDate": "2021-01-14T16:43:25Z", "message": "automatic update to docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5MDYyNTMw", "url": "https://github.com/bakdata/conquery/pull/1431#pullrequestreview-569062530", "createdAt": "2021-01-15T08:45:51Z", "commit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "state": "COMMENTED", "comments": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwODo0NTo1MlrOIUNC0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMjowMzozMVrOIUZrWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA1NjE0NQ==", "bodyText": "Na doch das darf er schon \u00fcber Methoden die der Worker selber nach drau\u00dfen, gibt, aber seinen Storage sollte er nicht nach drau\u00dfen geben und zur Modifikation freigeben", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558056145", "createdAt": "2021-01-15T08:45:52Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/ModificationShieldedWorkerStorage.java", "diffHunk": "@@ -19,12 +20,13 @@\n import com.bakdata.conquery.models.identifiable.ids.specific.ImportId;\n import com.bakdata.conquery.models.worker.WorkerInformation;\n import lombok.RequiredArgsConstructor;\n+import org.apache.commons.lang3.NotImplementedException;\n \n /**\n- * Provides a view on the storage that does not allow modification of the storage (update, delete). \n+ * Provides a view on the storage that does not allow modification of the storage (update, delete).\n  */\n @RequiredArgsConstructor\n-public class ModificationShieldedWorkerStorage {\n+public class ModificationShieldedWorkerStorage implements WorkerStorage {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk1NTEwMw=="}, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA2MjcwNQ==", "bodyText": "Warum m\u00fcssen die ImportColumns registriert werden?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558062705", "createdAt": "2021-01-15T08:50:29Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/NamespacedStorageImpl.java", "diffHunk": "@@ -129,16 +131,29 @@ protected void createStores(Multimap<Environment, KeyIncludingStore<?, ?>> envir\n \t\t\t\t\t\t  .onAdd(imp -> {\n \t\t\t\t\t\t\t  imp.loadExternalInfos(this);\n \n-\t\t\t\t\t\t\t  if (registerImports) {\n-\t\t\t\t\t\t\t\t  for (Concept<?> c : getAllConcepts()) {\n-\t\t\t\t\t\t\t\t\t  for (Connector con : c.getConnectors()) {\n-\t\t\t\t\t\t\t\t\t\t  if (con.getTable().getId().equals(imp.getTable())) {\n-\t\t\t\t\t\t\t\t\t\t\t  con.addImport(imp);\n-\t\t\t\t\t\t\t\t\t\t  }\n-\t\t\t\t\t\t\t\t\t  }\n-\t\t\t\t\t\t\t\t  }\n-\t\t\t\t\t\t\t  }\n-\t\t\t\t\t\t  });\n+\t\t\t\tif (registerImports) {\n+\t\t\t\t\tfor (Concept<?> c : getAllConcepts()) {\n+\t\t\t\t\t\tfor (Connector con : c.getConnectors()) {\n+\t\t\t\t\t\t\tif (con.getTable().getId().equals(imp.getTable())) {\n+\t\t\t\t\t\t\t\tcon.addImport(imp);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tcentralRegistry.register(imp);\n+\n+\t\t\t\tfor (ImportColumn column : imp.getColumns()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA2NjgzOA==", "bodyText": "Ist mir noch nie aufgefallen, diese Datei", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558066838", "createdAt": "2021-01-15T08:53:13Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/config/CouchDBConfig.java", "diffHunk": "@@ -1,5 +0,0 @@\n-package com.bakdata.conquery.models.config;\n-\n-public class CouchDBConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA2NzQ1NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558067455", "createdAt": "2021-01-15T08:53:38Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/datasets/Column.java", "diffHunk": "@@ -21,7 +21,6 @@\n public class Column extends Labeled<ColumnId> {\n \n \tpublic static final int UNKNOWN_POSITION = -1;\n-\tpublic static final int PRIMARY_POSITION = -2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA3MTc2OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558071768", "createdAt": "2021-01-15T08:56:25Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/datasets/ImportColumn.java", "diffHunk": "@@ -1,47 +1,30 @@\n package com.bakdata.conquery.models.datasets;\n \n import javax.validation.Valid;\n-import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n \n+import com.bakdata.conquery.models.events.stores.ColumnStore;\n import com.bakdata.conquery.models.identifiable.NamedImpl;\n import com.bakdata.conquery.models.identifiable.ids.specific.ImportColumnId;\n-import com.bakdata.conquery.models.types.CType;\n import com.fasterxml.jackson.annotation.JsonBackReference;\n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-import lombok.Getter;\n-import lombok.NoArgsConstructor;\n-import lombok.Setter;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import lombok.Data;\n+import lombok.RequiredArgsConstructor;\n \n-@Getter @Setter @NoArgsConstructor\n+@Data\n+@RequiredArgsConstructor(onConstructor_ = {@JsonCreator})\n public class ImportColumn extends NamedImpl<ImportColumnId> {\n+\t// TODO reduce usage of this class, it does nothing except hold a description", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA3MjIyNg==", "bodyText": "und einen Namen", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558072226", "createdAt": "2021-01-15T08:56:43Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/datasets/ImportColumn.java", "diffHunk": "@@ -1,47 +1,30 @@\n package com.bakdata.conquery.models.datasets;\n \n import javax.validation.Valid;\n-import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n \n+import com.bakdata.conquery.models.events.stores.ColumnStore;\n import com.bakdata.conquery.models.identifiable.NamedImpl;\n import com.bakdata.conquery.models.identifiable.ids.specific.ImportColumnId;\n-import com.bakdata.conquery.models.types.CType;\n import com.fasterxml.jackson.annotation.JsonBackReference;\n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-import lombok.Getter;\n-import lombok.NoArgsConstructor;\n-import lombok.Setter;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import lombok.Data;\n+import lombok.RequiredArgsConstructor;\n \n-@Getter @Setter @NoArgsConstructor\n+@Data\n+@RequiredArgsConstructor(onConstructor_ = {@JsonCreator})\n public class ImportColumn extends NamedImpl<ImportColumnId> {\n+\t// TODO reduce usage of this class, it does nothing except hold a description", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA3MTc2OA=="}, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA3NDAwNg==", "bodyText": "Hier m\u00fcssen dann die Tables umgeschrieben werden, oder?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558074006", "createdAt": "2021-01-15T08:57:42Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/datasets/Table.java", "diffHunk": "@@ -29,14 +29,7 @@\n \n \t@NsIdRef\n \tprivate Dataset dataset;\n-\n-\t@NotNull\n-\t@Valid\n-\t@JsonManagedReference\n-\tprivate Column primaryColumn; // TODO this is not used anywhere.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA3ODgwOA==", "bodyText": "Es sieht so aus als hat das DictionaryMapping jetzt eine persistentere Rolle. Kannst du bitte noch Doku hinzuf\u00fcgen", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558078808", "createdAt": "2021-01-15T09:00:29Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/dictionary/DictionaryMapping.java", "diffHunk": "@@ -19,20 +17,21 @@\n @RequiredArgsConstructor(access = AccessLevel.PRIVATE)\n @Getter\n @Slf4j\n+@ToString\n public class DictionaryMapping {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA4MTE5Nw==", "bodyText": "Bitte Doku, weshalb das Encoding hier notwendig ist und warum es nicht fix sein kann.", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558081197", "createdAt": "2021-01-15T09:02:05Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/dictionary/EncodedDictionary.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.bakdata.conquery.models.dictionary;\n+\n+import com.bakdata.conquery.models.events.stores.specific.string.StringTypeEncoded;\n+\n+public class EncodedDictionary {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA4MjQzMg==", "bodyText": "new Object() ?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558082432", "createdAt": "2021-01-15T09:02:50Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/dictionary/EncodedDictionary.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.bakdata.conquery.models.dictionary;\n+\n+import com.bakdata.conquery.models.events.stores.specific.string.StringTypeEncoded;\n+\n+public class EncodedDictionary {\n+\n+\tprivate final Dictionary dict;\n+\tprivate final StringTypeEncoded.Encoding encoding;\n+\n+\tpublic EncodedDictionary(Dictionary dict, StringTypeEncoded.Encoding encoding) {\n+\t\tsuper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE0MzkzMQ==", "bodyText": "Aber Int2IntArrayMap bewart dich nicht vor boxing und unboxing, oder wird das sofort wegoptimiert?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558143931", "createdAt": "2021-01-15T09:44:21Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/Bucket.java", "diffHunk": "@@ -40,155 +33,131 @@\n @Getter\n @Setter\n @ToString\n-@JsonDeserialize(using = BucketDeserializer.class)\n-public abstract class Bucket extends IdentifiableImpl<BucketId> implements Iterable<Integer>, JsonSerializable {\n+@RequiredArgsConstructor(onConstructor_ = {@JsonCreator})\n+public class Bucket extends IdentifiableImpl<BucketId> {\n \n \t@Min(0)\n-\tprivate int bucket;\n-\t@NotNull\n+\tprivate final int bucket;\n+\n+\tprivate final ImportId importId;\n+\n+\t// todo try to reduce reliance on import and use internal components instead\n \t@NsIdRef\n \tprivate Import imp;\n+\n \t@Min(0)\n-\tprivate int numberOfEvents;\n-\t@ToString.Exclude\n-\tprivate int[] offsets;\n-\t@NotNull\n-\t@Setter\n-\t@ToString.Exclude\n-\tprotected BitStore nullBits;\n+\tprivate final int numberOfEvents;\n \n-\tpublic Bucket(int bucket, Import imp, int[] offsets) {\n-\t\tthis.bucket = bucket;\n-\t\tthis.imp = imp;\n-\t\tthis.offsets = offsets;\n-\t}\n+\tprivate final CType<?,?>[] stores;\n \n-\t@Override\n-\tpublic BucketId createId() {\n-\t\treturn new BucketId(imp.getId(), bucket);\n-\t}\n \n+\t/**\n+\t * start of each Entity in {@code stores}.\n+\t */\n+\tprivate final Map<Integer, Integer> start;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk4NDkxMA=="}, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE0NjMzNw==", "bodyText": "schade", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558146337", "createdAt": "2021-01-15T09:45:44Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/Bucket.java", "diffHunk": "@@ -40,155 +33,131 @@\n @Getter\n @Setter\n @ToString\n-@JsonDeserialize(using = BucketDeserializer.class)\n-public abstract class Bucket extends IdentifiableImpl<BucketId> implements Iterable<Integer>, JsonSerializable {\n+@RequiredArgsConstructor(onConstructor_ = {@JsonCreator})\n+public class Bucket extends IdentifiableImpl<BucketId> {\n \n \t@Min(0)\n-\tprivate int bucket;\n-\t@NotNull\n+\tprivate final int bucket;\n+\n+\tprivate final ImportId importId;\n+\n+\t// todo try to reduce reliance on import and use internal components instead\n \t@NsIdRef\n \tprivate Import imp;\n+\n \t@Min(0)\n-\tprivate int numberOfEvents;\n-\t@ToString.Exclude\n-\tprivate int[] offsets;\n-\t@NotNull\n-\t@Setter\n-\t@ToString.Exclude\n-\tprotected BitStore nullBits;\n+\tprivate final int numberOfEvents;\n \n-\tpublic Bucket(int bucket, Import imp, int[] offsets) {\n-\t\tthis.bucket = bucket;\n-\t\tthis.imp = imp;\n-\t\tthis.offsets = offsets;\n-\t}\n+\tprivate final CType<?,?>[] stores;\n \n-\t@Override\n-\tpublic BucketId createId() {\n-\t\treturn new BucketId(imp.getId(), bucket);\n-\t}\n \n+\t/**\n+\t * start of each Entity in {@code stores}.\n+\t */\n+\tprivate final Map<Integer, Integer> start;\n+\n+\t/**\n+\t * Number of events per Entity in {@code stores}.\n+\t */\n+\tprivate final Map<Integer, Integer> length;\n+\n+\tprivate final int bucketSize;\n \n-\tpublic abstract int getBucketSize();\n \n \t@Override\n-\tpublic PrimitiveIterator.OfInt iterator() {\n-\t\treturn IntStream.range(0, getBucketSize())\n-\t\t\t\t\t\t.filter(this::containsLocalEntity)\n-\t\t\t\t\t\t.map(this::toGlobal)\n-\t\t\t\t\t\t.iterator();\n+\tpublic BucketId createId() {\n+\t\treturn new BucketId(importId, bucket);\n \t}\n \n-\tpublic boolean containsLocalEntity(int localEntity) {\n-\t\treturn offsets[localEntity] != -1;\n+\t/**\n+\t * Iterate entities\n+\t */\n+\tpublic Collection<Integer> entities() {\n+\t\treturn start.keySet();\n \t}\n \n-\tpublic abstract void initFields(int numberOfEntities);\n-\n-\tpublic int toLocal(int entity) {\n-\t\treturn entity - getBucketSize() * bucket;\n+\tpublic boolean containsEntity(int localEntity) {\n+\t\treturn start.containsKey(localEntity);\n \t}\n \n-\tpublic int toGlobal(int entity) {\n-\t\treturn entity + getBucketSize() * bucket;\n+\tpublic Iterable<BucketEntry> entries() {\n+\t\treturn () -> start.keySet()\n+\t\t\t\t\t\t  .stream()\n+\t\t\t\t\t\t  .flatMap(entity -> IntStream.range(getEntityStart(entity), getEntityEnd(entity))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t  .mapToObj(e -> new BucketEntry(entity, e))\n+\t\t\t\t\t\t  )\n+\t\t\t\t\t\t  .iterator();\n \t}\n \n-\n-\tpublic int getFirstEventOfLocal(int localEntity) {\n-\t\treturn offsets[localEntity];\n+\tpublic int getEntityStart(int entityId) {\n+\t\treturn start.get(entityId);\n \t}\n \n-\tpublic int getLastEventOfLocal(int localEntity) {\n-\t\tfor (localEntity++; localEntity < offsets.length; localEntity++) {\n-\t\t\tif (offsets[localEntity] != -1) {\n-\t\t\t\treturn offsets[localEntity];\n-\t\t\t}\n-\t\t}\n-\t\treturn numberOfEvents;\n+\tpublic int getEntityEnd(int entityId) {\n+\t\treturn start.get(entityId) + length.get(entityId);\n \t}\n \n-\t@Override\n-\tpublic void serialize(JsonGenerator gen, SerializerProvider serializers) throws IOException {\n-\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n-\n-\t\tjava.io.OutputStream outputStream = baos;\n-\t\ttry (Output output = new Output(outputStream)) {\n-\t\t\twriteContent(output);\n-\t\t}\n-\t\tbyte[] content = baos.toByteArray();\n-\t\tgen.writeStartObject();\n-\t\tgen.writeNumberField(Fields.bucket, bucket);\n-\t\tgen.writeStringField(Fields.imp, imp.getId().toString());\n-\t\tgen.writeNumberField(Fields.numberOfEvents, numberOfEvents);\n-\t\tgen.writeFieldName(Fields.offsets);\n-\t\tgen.writeArray(offsets, 0, offsets.length);\n-\t\tgen.writeBinaryField(\"content\", content);\n-\t\tgen.writeEndObject();\n+\tpublic final boolean has(int event, Column column) {\n+\t\treturn stores[column.getPosition()].has(event);\n \t}\n \n-\tpublic Iterable<BucketEntry> entries() {\n-\t\treturn () -> IntStream\n-\t\t\t\t\t\t\t .range(0, getBucketSize())\n-\t\t\t\t\t\t\t .filter(this::containsLocalEntity)\n-\t\t\t\t\t\t\t .boxed()\n-\t\t\t\t\t\t\t .flatMap(le -> IntStream\n-\t\t\t\t\t\t\t\t\t\t\t\t\t.range(getFirstEventOfLocal(le), getLastEventOfLocal(le))\n-\t\t\t\t\t\t\t\t\t\t\t\t\t.mapToObj(e -> new BucketEntry(le, e))\n-\t\t\t\t\t\t\t )\n-\t\t\t\t\t\t\t .iterator();\n+\tpublic int getString(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getString(event);\n \t}\n \n-\n-\tpublic boolean has(int event, Column column) {\n-\t\treturn has(event, column.getPosition());\n+\tpublic long getInteger(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getInteger(event);\n \t}\n \n-\tpublic abstract boolean has(int event, int columnPosition);\n-\n-\tpublic abstract int getString(int event, Column column);\n-\n-\tpublic abstract long getInteger(int event, Column column);\n-\n-\tpublic abstract boolean getBoolean(int event, Column column);\n-\n-\tpublic abstract double getReal(int event, Column column);\n+\tpublic boolean getBoolean(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getBoolean(event);\n+\t}\n \n-\tpublic abstract BigDecimal getDecimal(int event, Column column);\n+\tpublic double getReal(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getReal(event);\n+\t}\n \n-\tpublic abstract long getMoney(int event, Column column);\n+\tpublic BigDecimal getDecimal(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getDecimal(event);\n+\t}\n \n-\tpublic abstract int getDate(int event, Column column);\n+\tpublic long getMoney(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getMoney(event);\n+\t}\n \n-\tpublic abstract CDateRange getDateRange(int event, Column column);\n+\tpublic int getDate(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getDate(event);\n+\t}\n \n-\tpublic Object getRaw(int event, Column column) {\n-\t\treturn getRaw(event, column.getPosition());\n+\tpublic CDateRange getAsDateRange(int event, Column currentColumn) {\n+\t\treturn getDateRange(event, currentColumn);\n \t}\n \n-\tpublic abstract Object getRaw(int event, int columnPosition);\n+\tpublic CDateRange getDateRange(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getDateRange(event);\n+\t}\n \n \tpublic Object getAsObject(int event, Column column) {\n-\t\treturn getAsObject(event, column.getPosition());\n+\t\treturn stores[column.getPosition()].getAsObject(event);\n \t}\n \n-\tpublic abstract Object getAsObject(int event, int columnPosition);\n-\n-\tpublic abstract boolean eventIsContainedIn(int event, Column column, CDateRange dateRange);\n-\n \tpublic boolean eventIsContainedIn(int event, Column column, BitMapCDateSet dateRanges) {\n-\t\treturn dateRanges.intersects(getAsDateRange(event, column));\n+\t\treturn dateRanges.intersects(stores[column.getPosition()].getDateRange(event));\n \t}\n \n-\tpublic abstract CDateRange getAsDateRange(int event, Column currentColumn);\n \n-\t@Override\n-\tpublic void serializeWithType(JsonGenerator gen, SerializerProvider serializers, TypeSerializer typeSer) throws IOException {\n-\t\tthis.serialize(gen, serializers);\n-\t}\n+\tpublic Map<String, Object> calculateMap(int event) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk4OTU5MA=="}, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE1ODMzNg==", "bodyText": "Kannst du nicht imp.getColumns()[i].createId() aufrufen, oder besser noch von der ImportColumn auf die TableColumnId schlie\u00dfen?\nIch sehe jetzt leider nicht direkt wo das Problem ist", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558158336", "createdAt": "2021-01-15T09:53:01Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/Bucket.java", "diffHunk": "@@ -40,155 +33,131 @@\n @Getter\n @Setter\n @ToString\n-@JsonDeserialize(using = BucketDeserializer.class)\n-public abstract class Bucket extends IdentifiableImpl<BucketId> implements Iterable<Integer>, JsonSerializable {\n+@RequiredArgsConstructor(onConstructor_ = {@JsonCreator})\n+public class Bucket extends IdentifiableImpl<BucketId> {\n \n \t@Min(0)\n-\tprivate int bucket;\n-\t@NotNull\n+\tprivate final int bucket;\n+\n+\tprivate final ImportId importId;\n+\n+\t// todo try to reduce reliance on import and use internal components instead\n \t@NsIdRef\n \tprivate Import imp;\n+\n \t@Min(0)\n-\tprivate int numberOfEvents;\n-\t@ToString.Exclude\n-\tprivate int[] offsets;\n-\t@NotNull\n-\t@Setter\n-\t@ToString.Exclude\n-\tprotected BitStore nullBits;\n+\tprivate final int numberOfEvents;\n \n-\tpublic Bucket(int bucket, Import imp, int[] offsets) {\n-\t\tthis.bucket = bucket;\n-\t\tthis.imp = imp;\n-\t\tthis.offsets = offsets;\n-\t}\n+\tprivate final CType<?,?>[] stores;\n \n-\t@Override\n-\tpublic BucketId createId() {\n-\t\treturn new BucketId(imp.getId(), bucket);\n-\t}\n \n+\t/**\n+\t * start of each Entity in {@code stores}.\n+\t */\n+\tprivate final Map<Integer, Integer> start;\n+\n+\t/**\n+\t * Number of events per Entity in {@code stores}.\n+\t */\n+\tprivate final Map<Integer, Integer> length;\n+\n+\tprivate final int bucketSize;\n \n-\tpublic abstract int getBucketSize();\n \n \t@Override\n-\tpublic PrimitiveIterator.OfInt iterator() {\n-\t\treturn IntStream.range(0, getBucketSize())\n-\t\t\t\t\t\t.filter(this::containsLocalEntity)\n-\t\t\t\t\t\t.map(this::toGlobal)\n-\t\t\t\t\t\t.iterator();\n+\tpublic BucketId createId() {\n+\t\treturn new BucketId(importId, bucket);\n \t}\n \n-\tpublic boolean containsLocalEntity(int localEntity) {\n-\t\treturn offsets[localEntity] != -1;\n+\t/**\n+\t * Iterate entities\n+\t */\n+\tpublic Collection<Integer> entities() {\n+\t\treturn start.keySet();\n \t}\n \n-\tpublic abstract void initFields(int numberOfEntities);\n-\n-\tpublic int toLocal(int entity) {\n-\t\treturn entity - getBucketSize() * bucket;\n+\tpublic boolean containsEntity(int localEntity) {\n+\t\treturn start.containsKey(localEntity);\n \t}\n \n-\tpublic int toGlobal(int entity) {\n-\t\treturn entity + getBucketSize() * bucket;\n+\tpublic Iterable<BucketEntry> entries() {\n+\t\treturn () -> start.keySet()\n+\t\t\t\t\t\t  .stream()\n+\t\t\t\t\t\t  .flatMap(entity -> IntStream.range(getEntityStart(entity), getEntityEnd(entity))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t  .mapToObj(e -> new BucketEntry(entity, e))\n+\t\t\t\t\t\t  )\n+\t\t\t\t\t\t  .iterator();\n \t}\n \n-\n-\tpublic int getFirstEventOfLocal(int localEntity) {\n-\t\treturn offsets[localEntity];\n+\tpublic int getEntityStart(int entityId) {\n+\t\treturn start.get(entityId);\n \t}\n \n-\tpublic int getLastEventOfLocal(int localEntity) {\n-\t\tfor (localEntity++; localEntity < offsets.length; localEntity++) {\n-\t\t\tif (offsets[localEntity] != -1) {\n-\t\t\t\treturn offsets[localEntity];\n-\t\t\t}\n-\t\t}\n-\t\treturn numberOfEvents;\n+\tpublic int getEntityEnd(int entityId) {\n+\t\treturn start.get(entityId) + length.get(entityId);\n \t}\n \n-\t@Override\n-\tpublic void serialize(JsonGenerator gen, SerializerProvider serializers) throws IOException {\n-\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n-\n-\t\tjava.io.OutputStream outputStream = baos;\n-\t\ttry (Output output = new Output(outputStream)) {\n-\t\t\twriteContent(output);\n-\t\t}\n-\t\tbyte[] content = baos.toByteArray();\n-\t\tgen.writeStartObject();\n-\t\tgen.writeNumberField(Fields.bucket, bucket);\n-\t\tgen.writeStringField(Fields.imp, imp.getId().toString());\n-\t\tgen.writeNumberField(Fields.numberOfEvents, numberOfEvents);\n-\t\tgen.writeFieldName(Fields.offsets);\n-\t\tgen.writeArray(offsets, 0, offsets.length);\n-\t\tgen.writeBinaryField(\"content\", content);\n-\t\tgen.writeEndObject();\n+\tpublic final boolean has(int event, Column column) {\n+\t\treturn stores[column.getPosition()].has(event);\n \t}\n \n-\tpublic Iterable<BucketEntry> entries() {\n-\t\treturn () -> IntStream\n-\t\t\t\t\t\t\t .range(0, getBucketSize())\n-\t\t\t\t\t\t\t .filter(this::containsLocalEntity)\n-\t\t\t\t\t\t\t .boxed()\n-\t\t\t\t\t\t\t .flatMap(le -> IntStream\n-\t\t\t\t\t\t\t\t\t\t\t\t\t.range(getFirstEventOfLocal(le), getLastEventOfLocal(le))\n-\t\t\t\t\t\t\t\t\t\t\t\t\t.mapToObj(e -> new BucketEntry(le, e))\n-\t\t\t\t\t\t\t )\n-\t\t\t\t\t\t\t .iterator();\n+\tpublic int getString(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getString(event);\n \t}\n \n-\n-\tpublic boolean has(int event, Column column) {\n-\t\treturn has(event, column.getPosition());\n+\tpublic long getInteger(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getInteger(event);\n \t}\n \n-\tpublic abstract boolean has(int event, int columnPosition);\n-\n-\tpublic abstract int getString(int event, Column column);\n-\n-\tpublic abstract long getInteger(int event, Column column);\n-\n-\tpublic abstract boolean getBoolean(int event, Column column);\n-\n-\tpublic abstract double getReal(int event, Column column);\n+\tpublic boolean getBoolean(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getBoolean(event);\n+\t}\n \n-\tpublic abstract BigDecimal getDecimal(int event, Column column);\n+\tpublic double getReal(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getReal(event);\n+\t}\n \n-\tpublic abstract long getMoney(int event, Column column);\n+\tpublic BigDecimal getDecimal(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getDecimal(event);\n+\t}\n \n-\tpublic abstract int getDate(int event, Column column);\n+\tpublic long getMoney(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getMoney(event);\n+\t}\n \n-\tpublic abstract CDateRange getDateRange(int event, Column column);\n+\tpublic int getDate(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getDate(event);\n+\t}\n \n-\tpublic Object getRaw(int event, Column column) {\n-\t\treturn getRaw(event, column.getPosition());\n+\tpublic CDateRange getAsDateRange(int event, Column currentColumn) {\n+\t\treturn getDateRange(event, currentColumn);\n \t}\n \n-\tpublic abstract Object getRaw(int event, int columnPosition);\n+\tpublic CDateRange getDateRange(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getDateRange(event);\n+\t}\n \n \tpublic Object getAsObject(int event, Column column) {\n-\t\treturn getAsObject(event, column.getPosition());\n+\t\treturn stores[column.getPosition()].getAsObject(event);\n \t}\n \n-\tpublic abstract Object getAsObject(int event, int columnPosition);\n-\n-\tpublic abstract boolean eventIsContainedIn(int event, Column column, CDateRange dateRange);\n-\n \tpublic boolean eventIsContainedIn(int event, Column column, BitMapCDateSet dateRanges) {\n-\t\treturn dateRanges.intersects(getAsDateRange(event, column));\n+\t\treturn dateRanges.intersects(stores[column.getPosition()].getDateRange(event));\n \t}\n \n-\tpublic abstract CDateRange getAsDateRange(int event, Column currentColumn);\n \n-\t@Override\n-\tpublic void serializeWithType(JsonGenerator gen, SerializerProvider serializers, TypeSerializer typeSer) throws IOException {\n-\t\tthis.serialize(gen, serializers);\n-\t}\n+\tpublic Map<String, Object> calculateMap(int event) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk4OTU5MA=="}, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE2NDAyNA==", "bodyText": "Okay, ich habe ein Ticket erstellt", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558164024", "createdAt": "2021-01-15T09:56:37Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/CBlock.java", "diffHunk": "@@ -37,28 +36,22 @@\n \t\n \t/**\n \t * Bloom filter per entity for the first 64 {@link ConceptTreeChild}.\n-\t *\n-\t * Per Entity.\n \t */\n-\tprivate long[] includedConcepts;\n-\n-\t// TODO: 02.09.2020 FK: Make chop this onto a per-column basis\n+\tprivate Int2LongArrayMap includedConcepts = new Int2LongArrayMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAxNzk0MA=="}, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE2NzQzMQ==", "bodyText": "Doku f\u00fcr diesen SpecialStore bitte", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558167431", "createdAt": "2021-01-15T09:58:30Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/EmptyStore.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.bakdata.conquery.models.events;\n+\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.events.stores.ColumnStore;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+\n+@CPSType(base = ColumnStore.class, id = \"EMPTY\")\n+public class EmptyStore<T> extends ColumnStore<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE3MTgzOA==", "bodyText": "Warum ist der hier special?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558171838", "createdAt": "2021-01-15T10:01:17Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/parser/MajorTypeId.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.bakdata.conquery.models.events.parser;\n+\n+import java.util.function.Function;\n+\n+import com.bakdata.conquery.models.config.ParserConfig;\n+import com.bakdata.conquery.models.events.parser.specific.BooleanParser;\n+import com.bakdata.conquery.models.events.parser.specific.DateParser;\n+import com.bakdata.conquery.models.events.parser.specific.DateRangeParser;\n+import com.bakdata.conquery.models.events.parser.specific.DecimalParser;\n+import com.bakdata.conquery.models.events.parser.specific.IntegerParser;\n+import com.bakdata.conquery.models.events.parser.specific.MoneyParser;\n+import com.bakdata.conquery.models.events.parser.specific.RealParser;\n+import com.bakdata.conquery.models.events.parser.specific.string.StringParser;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+\n+@RequiredArgsConstructor\n+public enum MajorTypeId {\n+\n+\tSTRING(false, StringParser::new),\n+\tINTEGER(false, t -> new IntegerParser()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIxMDQ5OQ==", "bodyText": "Doku f\u00fcr die String Guesser bitte", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558210499", "createdAt": "2021-01-15T10:28:22Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/parser/specific/string/MapTypeGuesser.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.bakdata.conquery.models.events.parser.specific.string;\n+\n+import com.bakdata.conquery.models.dictionary.MapDictionary;\n+import com.bakdata.conquery.models.events.stores.ColumnStore;\n+import com.bakdata.conquery.models.events.stores.specific.string.StringType;\n+import com.bakdata.conquery.models.events.stores.specific.string.StringTypeDictionary;\n+import com.bakdata.conquery.models.events.stores.specific.string.StringTypeEncoded;\n+import lombok.RequiredArgsConstructor;\n+\n+@RequiredArgsConstructor\n+public class MapTypeGuesser implements TypeGuesser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIxOTc3Mg==", "bodyText": "nullLines wird hier nur als Statistik genutzt, oder?\nK\u00f6nnte man dem Member nicht auch die tats\u00e4chlichen nullLines geben und so die Berechnung vereinfachen?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558219772", "createdAt": "2021-01-15T10:36:37Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/stores/ColumnStore.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.bakdata.conquery.models.events.stores;\n+\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+import java.util.function.Function;\n+\n+import javax.annotation.CheckForNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.models.common.daterange.CDateRange;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+@Getter\n+@Setter\n+@RequiredArgsConstructor\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"type\")\n+@CPSBase\n+@ToString\n+public abstract class ColumnStore<JAVA_TYPE> {\n+\n+\tprivate int lines = 0;\n+\tprivate int nullLines = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyMDIyMA==", "bodyText": "Doku", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558220220", "createdAt": "2021-01-15T10:37:28Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/stores/ColumnStore.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.bakdata.conquery.models.events.stores;\n+\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+import java.util.function.Function;\n+\n+import javax.annotation.CheckForNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.models.common.daterange.CDateRange;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+@Getter\n+@Setter\n+@RequiredArgsConstructor\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"type\")\n+@CPSBase\n+@ToString\n+public abstract class ColumnStore<JAVA_TYPE> {\n+\n+\tprivate int lines = 0;\n+\tprivate int nullLines = 0;\n+\n+\t/**\n+\t * Helper method to select partitions of an array. Resulting array is of length sum(lengths). Incoming type T has to be of ArrayType or this will fail.\n+\t */\n+\tpublic static <T> T selectArray(int[] starts, int[] lengths, T values, Function<Integer, T> provider) {\n+\t\tint length = Arrays.stream(lengths).sum();\n+\n+\t\tfinal T out = provider.apply(length);\n+\n+\t\tint pos = 0;\n+\n+\t\tfor (int index = 0; index < starts.length; index++) {\n+\t\t\tSystem.arraycopy(values, starts[index], out, pos, lengths[index]);\n+\t\t\tpos += lengths[index];\n+\t\t}\n+\n+\t\treturn out;\n+\t}\n+\n+\tpublic Object createPrintValue(JAVA_TYPE value) {\n+\t\treturn value != null ? createScriptValue(value) : \"\";\n+\t}\n+\n+\tpublic Object createScriptValue(JAVA_TYPE value) {\n+\t\treturn value;\n+\t}\n+\n+\tpublic long estimateMemoryConsumption() {\n+\t\tlong bytes = estimateEventBits();\n+\n+\t\treturn getLines() * bytes;\n+\t}\n+\n+\tpublic abstract long estimateEventBits();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyMDY0Nw==", "bodyText": "public?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558220647", "createdAt": "2021-01-15T10:38:09Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/stores/ColumnStore.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.bakdata.conquery.models.events.stores;\n+\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+import java.util.function.Function;\n+\n+import javax.annotation.CheckForNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.models.common.daterange.CDateRange;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+@Getter\n+@Setter\n+@RequiredArgsConstructor\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"type\")\n+@CPSBase\n+@ToString\n+public abstract class ColumnStore<JAVA_TYPE> {\n+\n+\tprivate int lines = 0;\n+\tprivate int nullLines = 0;\n+\n+\t/**\n+\t * Helper method to select partitions of an array. Resulting array is of length sum(lengths). Incoming type T has to be of ArrayType or this will fail.\n+\t */\n+\tpublic static <T> T selectArray(int[] starts, int[] lengths, T values, Function<Integer, T> provider) {\n+\t\tint length = Arrays.stream(lengths).sum();\n+\n+\t\tfinal T out = provider.apply(length);\n+\n+\t\tint pos = 0;\n+\n+\t\tfor (int index = 0; index < starts.length; index++) {\n+\t\t\tSystem.arraycopy(values, starts[index], out, pos, lengths[index]);\n+\t\t\tpos += lengths[index];\n+\t\t}\n+\n+\t\treturn out;\n+\t}\n+\n+\tpublic Object createPrintValue(JAVA_TYPE value) {\n+\t\treturn value != null ? createScriptValue(value) : \"\";\n+\t}\n+\n+\tpublic Object createScriptValue(JAVA_TYPE value) {\n+\t\treturn value;\n+\t}\n+\n+\tpublic long estimateMemoryConsumption() {\n+\t\tlong bytes = estimateEventBits();\n+\n+\t\treturn getLines() * bytes;\n+\t}\n+\n+\tpublic abstract long estimateEventBits();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyMDIyMA=="}, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyNDgyMA==", "bodyText": "Ist die storeSize nicht (lines-nullLines)*56 bytes?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558224820", "createdAt": "2021-01-15T10:45:47Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/stores/base/DecimalStore.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.bakdata.conquery.models.events.stores.base;\n+\n+import java.math.BigDecimal;\n+\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.events.stores.ColumnStore;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import lombok.Getter;\n+import lombok.ToString;\n+\n+@CPSType(id = \"DECIMALS\", base = ColumnStore.class)\n+@Getter\n+@ToString(onlyExplicitlyIncluded = true)\n+public class DecimalStore extends ColumnStore<BigDecimal> {\n+\n+\tprivate final BigDecimal[] values;\n+\n+\t@JsonCreator\n+\tpublic DecimalStore(BigDecimal[] values) {\n+\t\tthis.values = values;\n+\t}\n+\n+\tpublic static DecimalStore create(int size) {\n+\t\treturn new DecimalStore(new BigDecimal[size]);\n+\t}\n+\n+\t@Override\n+\tpublic long estimateEventBits() {\n+\t\treturn 500; // It's a lot but non-deterministic so we have no idea :)\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyODk1OQ==", "bodyText": "Was passiert wenn value.equals(nullValue)?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558228959", "createdAt": "2021-01-15T10:53:30Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/stores/base/IntegerStore.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.bakdata.conquery.models.events.stores.base;\n+\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.events.stores.ColumnStore;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import lombok.Getter;\n+import lombok.ToString;\n+\n+\n+/**\n+ * Store values as ints, can only store 2^32-1 values, as MAX is used as NULL signifier.\n+ *\n+ * @apiNote do not instantiate this directly, but use {@link com.bakdata.conquery.models.events.parser.specific.IntegerParser}\n+ */\n+@CPSType(id = \"INTEGERS\", base = ColumnStore.class)\n+@Getter\n+@ToString(onlyExplicitlyIncluded = true)\n+public class IntegerStore extends ColumnStore<Long> {\n+\n+\tprivate final int nullValue;\n+\tprivate final int[] values;\n+\n+\t@JsonCreator\n+\tpublic IntegerStore(int[] values, int nullValue) {\n+\t\tthis.nullValue = nullValue;\n+\t\tthis.values = values;\n+\t}\n+\n+\tpublic static IntegerStore create(int size) {\n+\t\treturn new IntegerStore(new int[size], Integer.MAX_VALUE);\n+\t}\n+\n+\t@Override\n+\tpublic long estimateEventBits() {\n+\t\treturn Integer.SIZE;\n+\t}\n+\n+\tpublic IntegerStore select(int[] starts, int[] ends) {\n+\t\treturn new IntegerStore(ColumnStore.selectArray(starts, ends, values, int[]::new), nullValue);\n+\t}\n+\n+\t@Override\n+\tpublic void set(int event, Long value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIzMTg0OQ==", "bodyText": "Die anderen Stores sind nicht Iterable oder?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558231849", "createdAt": "2021-01-15T10:58:46Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/stores/specific/string/StringType.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.bakdata.conquery.models.events.stores.specific.string;\n+\n+import com.bakdata.conquery.io.xodus.NamespacedStorage;\n+import com.bakdata.conquery.models.dictionary.Dictionary;\n+import com.bakdata.conquery.models.events.stores.ColumnStore;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DictionaryId;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import lombok.NoArgsConstructor;\n+\n+/**\n+ * Every implementation must guarantee IDs between 0 and size.\n+ *\n+ * Abstract\n+ */\n+@NoArgsConstructor\n+public abstract class StringType extends ColumnStore<Integer> implements Iterable<String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIzMjI3Mw==", "bodyText": "Sollte ein Store nach seiner bef\u00fcllung noch mutable sein?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558232273", "createdAt": "2021-01-15T10:59:30Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/stores/ColumnStore.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.bakdata.conquery.models.events.stores;\n+\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+import java.util.function.Function;\n+\n+import javax.annotation.CheckForNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.models.common.daterange.CDateRange;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+@Getter\n+@Setter\n+@RequiredArgsConstructor\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"type\")\n+@CPSBase\n+@ToString\n+public abstract class ColumnStore<JAVA_TYPE> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIzMzk3MA==", "bodyText": "Oder erstmal eine DictionaryId, dann musst du sie dir nicht immer wieder zusammen bauen", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558233970", "createdAt": "2021-01-15T11:02:50Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/stores/specific/string/StringTypeDictionary.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package com.bakdata.conquery.models.events.stores.specific.string;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.Objects;\n+\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.io.jackson.InternalOnly;\n+import com.bakdata.conquery.io.xodus.NamespacedStorage;\n+import com.bakdata.conquery.models.dictionary.Dictionary;\n+import com.bakdata.conquery.models.dictionary.DictionaryEntry;\n+import com.bakdata.conquery.models.events.stores.ColumnStore;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DictionaryId;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.google.common.collect.Iterators;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Getter\n+@Setter\n+@Slf4j\n+@CPSType(base = ColumnStore.class, id = \"STRING_DICTIONARY\")\n+public class StringTypeDictionary extends ColumnStore<Integer> {\n+\n+\tprotected ColumnStore<Long> numberType;\n+\n+\t@JsonIgnore\n+\tprivate transient Dictionary dictionary;\n+\n+\t// todo use NsIdRef\n+\tprivate String name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIzNDY3NQ==", "bodyText": "bekommst du name, bzw. die id,  nicht aus dem dictionary", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558234675", "createdAt": "2021-01-15T11:04:13Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/stores/specific/string/StringTypeDictionary.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package com.bakdata.conquery.models.events.stores.specific.string;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.Objects;\n+\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.io.jackson.InternalOnly;\n+import com.bakdata.conquery.io.xodus.NamespacedStorage;\n+import com.bakdata.conquery.models.dictionary.Dictionary;\n+import com.bakdata.conquery.models.dictionary.DictionaryEntry;\n+import com.bakdata.conquery.models.events.stores.ColumnStore;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DictionaryId;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.google.common.collect.Iterators;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Getter\n+@Setter\n+@Slf4j\n+@CPSType(base = ColumnStore.class, id = \"STRING_DICTIONARY\")\n+public class StringTypeDictionary extends ColumnStore<Integer> {\n+\n+\tprotected ColumnStore<Long> numberType;\n+\n+\t@JsonIgnore\n+\tprivate transient Dictionary dictionary;\n+\n+\t// todo use NsIdRef\n+\tprivate String name;\n+\n+\t@InternalOnly\n+\tprivate DatasetId dataset;\n+\n+\tpublic StringTypeDictionary(ColumnStore<Long> numberType, Dictionary dictionary, String name) {\n+\t\tthis.numberType = numberType;\n+\t\tthis.dictionary = dictionary;\n+\t\tthis.name = name;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIzNTQyMQ==", "bodyText": "Wann w\u00fcrde man diese Funktion nehmen?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558235421", "createdAt": "2021-01-15T11:05:32Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/stores/specific/string/StringTypeDictionary.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package com.bakdata.conquery.models.events.stores.specific.string;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.Objects;\n+\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.io.jackson.InternalOnly;\n+import com.bakdata.conquery.io.xodus.NamespacedStorage;\n+import com.bakdata.conquery.models.dictionary.Dictionary;\n+import com.bakdata.conquery.models.dictionary.DictionaryEntry;\n+import com.bakdata.conquery.models.events.stores.ColumnStore;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DictionaryId;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.google.common.collect.Iterators;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Getter\n+@Setter\n+@Slf4j\n+@CPSType(base = ColumnStore.class, id = \"STRING_DICTIONARY\")\n+public class StringTypeDictionary extends ColumnStore<Integer> {\n+\n+\tprotected ColumnStore<Long> numberType;\n+\n+\t@JsonIgnore\n+\tprivate transient Dictionary dictionary;\n+\n+\t// todo use NsIdRef\n+\tprivate String name;\n+\n+\t@InternalOnly\n+\tprivate DatasetId dataset;\n+\n+\tpublic StringTypeDictionary(ColumnStore<Long> numberType, Dictionary dictionary, String name) {\n+\t\tthis.numberType = numberType;\n+\t\tthis.dictionary = dictionary;\n+\t\tthis.name = name;\n+\t}\n+\n+\t@JsonCreator\n+\tpublic StringTypeDictionary(ColumnStore<Long> numberType, DatasetId dataset, String name) {\n+\t\tthis.numberType = numberType;\n+\t\tthis.name = name;\n+\t\tthis.dataset = dataset;\n+\t}\n+\n+\t@Override\n+\tpublic Object createScriptValue(Integer value) {\n+\t\treturn getElement(value);\n+\t}\n+\n+\tpublic byte[] getElement(int value) {\n+\t\treturn dictionary.getElement(value);\n+\t}\n+\n+\t@Override\n+\tpublic Object createPrintValue(Integer value) {\n+\t\treturn getElement(value);\n+\t}\n+\n+\n+\tpublic void loadDictionaries(NamespacedStorage storage) {\n+\t\t// todo consider implementing this with Id-Injection instead of hand-wiring.\n+\t\tfinal DictionaryId dictionaryId = new DictionaryId(getDataset(), getName());\n+\t\tlog.trace(\"Loading Dictionary[{}]\", dictionaryId);\n+\t\tdictionary = Objects.requireNonNull(storage.getDictionary(dictionaryId));\n+\t}\n+\n+\tpublic int size() {\n+\t\treturn dictionary.size();\n+\t}\n+\n+\tpublic int getId(byte[] value) {\n+\t\treturn dictionary.getId(value);\n+\t}\n+\n+\tpublic Iterator<byte[]> iterator() {\n+\t\tif(dictionary == null){\n+\t\t\treturn Collections.emptyIterator();\n+\t\t}\n+\n+\t\treturn Iterators.transform(dictionary.iterator(), DictionaryEntry::getValue);\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn \"StringTypeDictionary[dictionary=\" + dictionary + \", numberType=\" + numberType + \"]\";\n+\t}\n+\n+\t@Override\n+\tpublic long estimateTypeSize() {\n+\t\treturn dictionary.estimateMemoryConsumption();\n+\t}\n+\n+\n+\tpublic void setUnderlyingDictionary(DictionaryId newDict) {\n+\t\tname = newDict.getDictionary();\n+\t\tthis.dataset = newDict.getDataset();\n+\t}\n+\n+\t@Override\n+\tpublic StringTypeDictionary select(int[] starts, int[] length) {\n+\t\treturn new StringTypeDictionary(numberType.select(starts, length), getDataset(), getName());\n+\t}\n+\n+\t@Override\n+\tpublic int getString(int event) {\n+\t\treturn (int) getNumberType().getInteger(event);\n+\t}\n+\n+\t@Override\n+\tpublic Integer get(int event) {\n+\t\treturn getString(event);\n+\t}\n+\n+\t@Override\n+\tpublic long estimateEventBits() {\n+\t\treturn numberType.estimateEventBits();\n+\t}\n+\n+\t@Override\n+\tpublic void set(int event, Integer value) {\n+\t\tif (value == null) {\n+\t\t\tnumberType.set(event, null);\n+\t\t}\n+\t\telse {\n+\t\t\tnumberType.set(event, value.longValue());\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic final boolean has(int event) {\n+\t\treturn numberType.has(event);\n+\t}\n+\n+\tpublic void setIndexStore(ColumnStore<Long> newType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI0NTYxNg==", "bodyText": "Ein 1 Byte Encoding w\u00e4re noch cool", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558245616", "createdAt": "2021-01-15T11:26:35Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/stores/specific/string/StringTypeEncoded.java", "diffHunk": "@@ -147,35 +75,109 @@ public String next() {\n \t\t\t}\n \t\t};\n \t}\n-\t\n+\n \t@Override\n \tpublic String toString() {\n \t\treturn \"StringTypeEncoded[encoding=\" + encoding + \", subType=\" + subType + \"]\";\n \t}\n-\t\n+\n \t@Override\n-\tpublic long estimateMemoryBitWidth() {\n-\t\treturn subType.estimateMemoryBitWidth();\n+\tpublic long estimateEventBits() {\n+\t\treturn subType.estimateEventBits();\n \t}\n-\t\n+\n \t@Override\n \tpublic long estimateMemoryConsumption() {\n \t\treturn subType.estimateMemoryConsumption();\n \t}\n-\t\n+\n \t@Override\n \tpublic long estimateTypeSize() {\n \t\treturn subType.estimateTypeSize();\n \t}\n-\t\n+\n \t@Override\n \tpublic Dictionary getUnderlyingDictionary() {\n \t\treturn subType.getDictionary();\n \t}\n-\t\n+\n \t@Override\n-\tpublic void adaptUnderlyingDictionary(Dictionary newDict, VarIntType newNumberType) {\n-\t\tsubType.adaptUnderlyingDictionary(newDict, newNumberType);\n-\t\tthis.setPrimitiveType(newNumberType.getPrimitiveType());\n+\tpublic void setUnderlyingDictionary(DictionaryId newDict) {\n+\t\tsubType.setUnderlyingDictionary(newDict);\n+\t}\n+\n+\t@Override\n+\tpublic void setIndexStore(ColumnStore<Long> newType) {\n+\t\tsubType.setIndexStore(newType);\n+\t}\n+\n+\t@Override\n+\tpublic StringTypeEncoded select(int[] starts, int[] length) {\n+\t\treturn new StringTypeEncoded(subType.select(starts, length), getEncoding());\n+\t}\n+\n+\t@Override\n+\tpublic void set(int event, Integer value) {\n+\t\tsubType.set(event, value);\n+\t}\n+\n+\t@Override\n+\tpublic Integer get(int event) {\n+\t\treturn getString(event);\n+\t}\n+\n+\t@Override\n+\tpublic int getString(int event) {\n+\t\treturn subType.getString(event);\n+\t}\n+\n+\t@Override\n+\tpublic boolean has(int event) {\n+\t\treturn subType.has(event);\n+\t}\n+\n+\t@RequiredArgsConstructor\n+\tpublic static enum Encoding {\n+\t\t// Order is for precedence, least specific encodings go last.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI0NjYxOA==", "bodyText": "prefix +suffix", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558246618", "createdAt": "2021-01-15T11:28:37Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/stores/specific/string/StringTypePrefixSuffix.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package com.bakdata.conquery.models.events.stores.specific.string;\n+\n+import java.util.Iterator;\n+\n+import javax.annotation.Nonnull;\n+\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.io.xodus.NamespacedStorage;\n+import com.bakdata.conquery.models.dictionary.Dictionary;\n+import com.bakdata.conquery.models.events.stores.ColumnStore;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DictionaryId;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+@Getter\n+@Setter\n+@CPSType(base = ColumnStore.class, id = \"STRING_PREFIX\")\n+@ToString(of = {\"prefix\", \"suffix\", \"subType\"})\n+public class StringTypePrefixSuffix extends StringType {\n+\n+\t@Nonnull\n+\tprotected StringType subType;\n+\n+\t@NonNull\n+\tprivate String prefix;\n+\n+\t@NonNull\n+\tprivate String suffix;\n+\n+\t@JsonCreator\n+\tpublic StringTypePrefixSuffix(StringType subType, String prefix, String suffix) {\n+\t\tsuper();\n+\t\tthis.subType = subType;\n+\t\tthis.prefix = prefix;\n+\t\tthis.suffix = suffix;\n+\t}\n+\n+\t@Override\n+\tpublic String getElement(int value) {\n+\t\treturn prefix + subType.getElement(value) + suffix;\n+\t}\n+\n+\t@Override\n+\tpublic String createScriptValue(Integer value) {\n+\t\treturn prefix + subType.createScriptValue(value);\n+\t}\n+\n+\t@Override\n+\tpublic int getId(String value) {\n+\t\tif (value.startsWith(prefix)) {\n+\t\t\treturn subType.getId(value.substring(prefix.length()));\n+\t\t}\n+\t\treturn -1;\n+\t}\n+\n+\t@Override\n+\tpublic void setIndexStore(ColumnStore<Long> indexStore) {\n+\t\tsubType.setIndexStore(indexStore);\n+\t}\n+\n+\t@Override\n+\tpublic Iterator<String> iterator() {\n+\t\tIterator<String> subIt = subType.iterator();\n+\t\treturn new Iterator<String>() {\n+\t\t\t@Override\n+\t\t\tpublic boolean hasNext() {\n+\t\t\t\treturn subIt.hasNext();\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic String next() {\n+\t\t\t\treturn prefix + subIt.next();\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\n+\t@Override\n+\tpublic StringTypePrefixSuffix select(int[] starts, int[] length) {\n+\t\treturn new StringTypePrefixSuffix(subType.select(starts, length), getPrefix(), getSuffix());\n+\t}\n+\n+\t@Override\n+\tpublic void loadDictionaries(NamespacedStorage storage) {\n+\t\tsubType.loadDictionaries(storage);\n+\t}\n+\n+\t@Override\n+\tpublic int size() {\n+\t\treturn subType.size();\n+\t}\n+\n+\t@Override\n+\tpublic long estimateEventBits() {\n+\t\treturn subType.estimateEventBits();\n+\t}\n+\n+\t@Override\n+\tpublic long estimateMemoryConsumption() {\n+\t\treturn subType.estimateMemoryConsumption();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI0NzgwNQ==", "bodyText": "Das ist von einem anderen Feature oder?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558247805", "createdAt": "2021-01-15T11:31:09Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/jobs/CalculateCBlocksJob.java", "diffHunk": "@@ -99,18 +104,29 @@ private void calculateEntityDateIndices(CBlock cBlock, Bucket bucket) {\n \n \t\t\t\tCDateRange range = bucket.getAsDateRange(entry.getEvent(), column);\n \n-\t\t\t\tcBlock.getMinDate()[entry.getLocalEntity()] = Math.min(cBlock.getMinDate()[entry.getLocalEntity()], range.getMinValue());\n+\t\t\t\tif (range.hasLowerBound()) {\n+\t\t\t\t\tint min = Math.min(\n+\t\t\t\t\t\t\tcBlock.getMinDate().getOrDefault(entry.getEntity(), Integer.MAX_VALUE),\n+\t\t\t\t\t\t\trange.getMinValue()\n+\t\t\t\t\t);\n+\n+\t\t\t\t\tcBlock.getMinDate()\n+\t\t\t\t\t\t  .put(entry.getEntity(), min);\n+\t\t\t\t}\n+\n+\t\t\t\tif (range.hasUpperBound()) {\n+\t\t\t\t\tint max = Math.max(\n+\t\t\t\t\t\t\tcBlock.getMaxDate().getOrDefault(entry.getEntity(), Integer.MIN_VALUE),\n+\t\t\t\t\t\t\trange.getMaxValue()\n+\t\t\t\t\t);\n \n-\t\t\t\tcBlock.getMaxDate()[entry.getLocalEntity()] = Math.max(cBlock.getMaxDate()[entry.getLocalEntity()], range.getMaxValue());\n+\t\t\t\t\tcBlock.getMaxDate()\n+\t\t\t\t\t\t  .put(entry.getEntity(), max);\n+\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI1MzE0Mg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558253142", "createdAt": "2021-01-15T11:42:20Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/specific/DateRestrictingNode.java", "diffHunk": "@@ -56,26 +56,24 @@ public void nextTable(QueryExecutionContext ctx, TableId currentTable) {\n \tpublic boolean isOfInterest(Bucket bucket) {\n \t\tCBlock cBlock = Objects.requireNonNull(preCurrentRow.get(bucket.getId()));\n \n-\t\tif(validityDateColumn == null) {\n+\t\tif (validityDateColumn == null) {\n \t\t\t// If there is no validity date set for a concept there is nothing to restrict\n \t\t\treturn true;\n \t\t}\n \n-\t\tint localId = bucket.toLocal(entity.getId());\n+\t\tint entityId = entity.getId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI1NDgyOA==", "bodyText": "Ich wusste nicht, dass es hierf\u00fcr templates gibt", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558254828", "createdAt": "2021-01-15T11:46:00Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/resources/admin/ui/DatasetsUIResource.java", "diffHunk": "@@ -100,6 +102,16 @@ public View getDataset() {\n \t\t);\n \t}\n \n+\t@GET\n+\t@Path(\"mapping\")\n+\tpublic View getIdMapping() {\n+\t\tPersistentIdMap mapping = namespace.getStorage().getIdMapping();\n+\t\tif (mapping != null && mapping.getCsvIdToExternalIdMap() != null) {\n+\t\t\treturn new UIView<>(\"idmapping.html.ftl\", processor.getUIContext(), mapping.getCsvIdToExternalIdMap());\n+\t\t}\n+\t\treturn new UIView<>(\"add_idmapping.html.ftl\", processor.getUIContext(), namespace.getDataset().getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI1Njc2Mw==", "bodyText": "Den wollen wir einfach nicht mehr?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558256763", "createdAt": "2021-01-15T11:50:00Z", "author": {"login": "thoniTUB"}, "path": "backend/src/test/java/com/bakdata/conquery/models/events/generation/GenerationTests.java", "diffHunk": "@@ -1,290 +0,0 @@\n-package com.bakdata.conquery.models.events.generation;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.api.Assertions.assertThatCode;\n-\n-import java.io.IOException;\n-import java.lang.reflect.InvocationTargetException;\n-import java.math.BigDecimal;\n-import java.time.LocalDate;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Random;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.Future;\n-import java.util.concurrent.TimeUnit;\n-import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n-import java.util.stream.Stream;\n-\n-import com.bakdata.conquery.io.jackson.serializer.SerializationTestUtil;\n-import com.bakdata.conquery.models.common.CDate;\n-import com.bakdata.conquery.models.config.ConqueryConfig;\n-import com.bakdata.conquery.models.config.ParserConfig;\n-import com.bakdata.conquery.models.datasets.Column;\n-import com.bakdata.conquery.models.datasets.Import;\n-import com.bakdata.conquery.models.datasets.ImportColumn;\n-import com.bakdata.conquery.models.events.Bucket;\n-import com.bakdata.conquery.models.exceptions.JSONException;\n-import com.bakdata.conquery.models.identifiable.CentralRegistry;\n-import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n-import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n-import com.bakdata.conquery.models.types.MajorTypeId;\n-import com.bakdata.conquery.models.types.parser.Decision;\n-import com.bakdata.conquery.models.types.parser.Parser;\n-import com.bakdata.conquery.models.types.parser.specific.string.StringParser;\n-import com.bakdata.conquery.models.types.specific.AStringType;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.commons.io.output.NullOutputStream;\n-import org.assertj.core.data.Offset;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.Arguments;\n-import org.junit.jupiter.params.provider.MethodSource;\n-\n-\n-@Slf4j\n-public class GenerationTests {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI1NzM2MQ==", "bodyText": "\ud83e\udd14", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558257361", "createdAt": "2021-01-15T11:51:16Z", "author": {"login": "thoniTUB"}, "path": "backend/src/test/java/com/bakdata/conquery/models/events/parser/specific/DecimalParserTest.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package com.bakdata.conquery.models.events.parser.specific;\n+\n+import com.bakdata.conquery.models.config.ParserConfig;\n+import org.junit.jupiter.api.Test;\n+\n+class DecimalParserTest {\n+\n+\t@Test\n+\tpublic void test(){\n+\t\tfinal DecimalParser parser = new DecimalParser(new ParserConfig());\n+\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI1OTA2OQ==", "bodyText": "Was genau wird hier getestet?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558259069", "createdAt": "2021-01-15T11:55:10Z", "author": {"login": "thoniTUB"}, "path": "backend/src/test/java/com/bakdata/conquery/models/events/stores/types/MajorTypesTest.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.bakdata.conquery.models.events.stores.types;\n+\n+import com.bakdata.conquery.models.config.ParserConfig;\n+import com.bakdata.conquery.models.events.parser.MajorTypeId;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+public class MajorTypesTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI2MDM0Ng==", "bodyText": "Ist dfas mit dem randomUUID so wichtig? kann man nicht einfach eine neue UUID erzeugen?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558260346", "createdAt": "2021-01-15T11:57:39Z", "author": {"login": "thoniTUB"}, "path": "backend/src/test/java/com/bakdata/conquery/models/events/stores/types/StringEncodingTest.java", "diffHunk": "@@ -37,35 +30,43 @@ private UUID randomUUID(Random random) {\n \t\tStringTypeEncoded.Encoding encoding = StringTypeEncoded.Encoding.Base64;\n \n \t\treturn Stream.generate(() -> randomUUID(random).toString().replace(\"-\", \"\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI2MTcxOQ==", "bodyText": "Der Content ge\u00e4ndert?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558261719", "createdAt": "2021-01-15T12:00:16Z", "author": {"login": "thoniTUB"}, "path": "backend/src/test/resources/tests/filter/NUMBER_INTEGER/content_NUMBER_Filter.csv", "diffHunk": "@@ -12,5 +12,3 @@ pid,nr,datum\n 7,,2010-08-14\n 8,,2010-08-15\n 8,200,2012-05-29\n-9,,2010-08-15\n-9,300,2012-05-29", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI2MzEyOA==", "bodyText": "existiert die Datei jetzt noch? github zeigt sie mir gerade nicht als gel\u00f6scht an", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r558263128", "createdAt": "2021-01-15T12:03:31Z", "author": {"login": "thoniTUB"}, "path": "backend/src/test/resources/tests/query/MULTIPLE_TABLES_ICD_QUERY2/arzt-content.csv", "diffHunk": "@@ -1,37 +0,0 @@\n-pid,icd_code,behandlungsquartal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6854c15bd3c37a57b5e915350def055cabd6c28"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42af1cd25dae99437c39363dfb5065c27657d9c9", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/42af1cd25dae99437c39363dfb5065c27657d9c9", "committedDate": "2021-01-15T14:36:35Z", "message": "Undo ModificationShieldedWorkerStorage implementing WorkerStorage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bb7fcbd3ea2cc4627a297276d9034188d5ab321", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/3bb7fcbd3ea2cc4627a297276d9034188d5ab321", "committedDate": "2021-01-15T14:36:35Z", "message": "Review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd3741b1eb4dc92268072bf325f2dd84da13ee32", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/dd3741b1eb4dc92268072bf325f2dd84da13ee32", "committedDate": "2021-01-15T14:55:15Z", "message": "code style issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9dc9b5ff30cbe86760f95b8e56b3dc5c48c1ea3", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/d9dc9b5ff30cbe86760f95b8e56b3dc5c48c1ea3", "committedDate": "2021-01-15T15:02:24Z", "message": "Add config properly to Parsers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3c8004b7fb64bf47610a23d399f0b05ac3f7127", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/c3c8004b7fb64bf47610a23d399f0b05ac3f7127", "committedDate": "2021-01-15T15:18:24Z", "message": "Estimate size better"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "976b6acd4bb70c1f38fff8dad04a833eaa33c4a3", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/976b6acd4bb70c1f38fff8dad04a833eaa33c4a3", "committedDate": "2021-01-15T15:40:05Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df0f14f691e4b9b1ca21ec8073f46db4dc41f4a6", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/df0f14f691e4b9b1ca21ec8073f46db4dc41f4a6", "committedDate": "2021-01-15T15:44:22Z", "message": "add person back"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b346250f6d6480acfd6ce26d1f8241123efa9ae6", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/b346250f6d6480acfd6ce26d1f8241123efa9ae6", "committedDate": "2021-01-15T16:36:58Z", "message": "add test for DecimalParser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e453c9fc5d3c516ea29432ff8485ba1e3273a70", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/2e453c9fc5d3c516ea29432ff8485ba1e3273a70", "committedDate": "2021-01-18T14:26:01Z", "message": "add is empty check for stores"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c306a2aa196e36b98b298b2e5a240d46f1dafdfd", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/c306a2aa196e36b98b298b2e5a240d46f1dafdfd", "committedDate": "2021-01-18T15:06:22Z", "message": "remove unused nullLines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01accd8c121fb4e24ca87b7a97603977ff429d88", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/01accd8c121fb4e24ca87b7a97603977ff429d88", "committedDate": "2021-01-18T15:35:36Z", "message": "add JsonIgnore anno"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc0d795da1ba86552e6169a61d36859500ae427e", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/dc0d795da1ba86552e6169a61d36859500ae427e", "committedDate": "2021-01-18T15:44:25Z", "message": "add check for null value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5419a5474404b8768aa206ee25c90fa71926eaca", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/5419a5474404b8768aa206ee25c90fa71926eaca", "committedDate": "2021-01-18T15:54:26Z", "message": "more documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "151ab6ba45e9662612c0cadd131613f565b198c3", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/151ab6ba45e9662612c0cadd131613f565b198c3", "committedDate": "2021-01-18T16:09:03Z", "message": "Documentation for Stores"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22803c5773a3e4db3f1beab9af8ef970838158f4", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/22803c5773a3e4db3f1beab9af8ef970838158f4", "committedDate": "2021-01-18T16:15:14Z", "message": "remove unused importId from Bucket"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fd8ac518596ec7cfa8866416598963ec4b5c051", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/0fd8ac518596ec7cfa8866416598963ec4b5c051", "committedDate": "2021-01-18T16:47:50Z", "message": "add documentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "099d4ea8856a8946506e0003579209a7cc42c3e3", "author": {"user": {"login": "bakdata-bot", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/099d4ea8856a8946506e0003579209a7cc42c3e3", "committedDate": "2021-01-19T14:35:57Z", "message": "automatic update to docs"}, "afterCommit": {"oid": "9a81749c1f3251bb3483d446a3c3d2da566b00e4", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/9a81749c1f3251bb3483d446a3c3d2da566b00e4", "committedDate": "2021-01-19T12:03:26Z", "message": "remove usage of TypeDescription in QueryEngine as that was a bug."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9fb0b577713ae11017a9b8772945f71f8a2d66e", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/d9fb0b577713ae11017a9b8772945f71f8a2d66e", "committedDate": "2021-01-20T10:46:08Z", "message": "don't use typeDescription in QueryEngine"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a81749c1f3251bb3483d446a3c3d2da566b00e4", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/9a81749c1f3251bb3483d446a3c3d2da566b00e4", "committedDate": "2021-01-19T12:03:26Z", "message": "remove usage of TypeDescription in QueryEngine as that was a bug."}, "afterCommit": {"oid": "d9fb0b577713ae11017a9b8772945f71f8a2d66e", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/d9fb0b577713ae11017a9b8772945f71f8a2d66e", "committedDate": "2021-01-20T10:46:08Z", "message": "don't use typeDescription in QueryEngine"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "befaff168f637373854aa71d86410bf4bf194d7f", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/befaff168f637373854aa71d86410bf4bf194d7f", "committedDate": "2021-01-21T09:59:48Z", "message": "Lazy Import Bucket"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c85b219e77c30ffb3df1dfb3df2d13664c62a0f7", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/c85b219e77c30ffb3df1dfb3df2d13664c62a0f7", "committedDate": "2020-09-03T12:31:59Z", "message": "first draft of ColumnStores"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf1f1e2110a431bff24bf2a664a5a19141622b57", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/bf1f1e2110a431bff24bf2a664a5a19141622b57", "committedDate": "2020-09-03T14:35:07Z", "message": "Expand ColumnStore and apply usage for CTypes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d81a101acbe064f11e0f87bbe97d0174c1a6afa2", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/d81a101acbe064f11e0f87bbe97d0174c1a6afa2", "committedDate": "2020-09-03T14:43:46Z", "message": "small fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33b030dc4fab683ddfc296a973e18d13c3172e10", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/33b030dc4fab683ddfc296a973e18d13c3172e10", "committedDate": "2020-09-04T09:52:52Z", "message": "add more stores for smaller units"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db10ea84c160094629b860c02323bcba595801a4", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/db10ea84c160094629b860c02323bcba595801a4", "committedDate": "2020-10-02T07:54:16Z", "message": "Add CPSType to ColumnStores"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06c2d19ae011d161f01a5702462d2b18c29cc1d0", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/06c2d19ae011d161f01a5702462d2b18c29cc1d0", "committedDate": "2020-10-02T07:55:45Z", "message": "Some exploratory work towards serializing Imports (this is really just for testing!)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20384bfa6aee77104d076306ab4e04db571e427d", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/20384bfa6aee77104d076306ab4e04db571e427d", "committedDate": "2020-10-05T10:17:34Z", "message": "remove ImportColumn from ColumnStore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a894c59765f18cbc7f77cf26804c7f3d9010cbde", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/a894c59765f18cbc7f77cf26804c7f3d9010cbde", "committedDate": "2020-10-05T10:20:19Z", "message": "some more column stores"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b82e2971a501c203881812f5e9dddd6a1dd1bbef", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/b82e2971a501c203881812f5e9dddd6a1dd1bbef", "committedDate": "2020-10-08T14:24:59Z", "message": "wip towards Column Ordered Preprocessed files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7357aa488e64b1f885efe6667f47613c50dce4ba", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/7357aa488e64b1f885efe6667f47613c50dce4ba", "committedDate": "2020-10-12T14:47:59Z", "message": "Directly store ColumnStore in Preprocessed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "597fa45d0657d6d67b3c85889bc414820b7fba9c", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/597fa45d0657d6d67b3c85889bc414820b7fba9c", "committedDate": "2020-10-13T09:58:55Z", "message": "ColumnStore#select to split stores and application in ImportJob"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2d81f48a6ea34c994d571bb33015143b6a61431", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/f2d81f48a6ea34c994d571bb33015143b6a61431", "committedDate": "2020-10-13T09:59:33Z", "message": "PackedDateRangeStore implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "549e206e21593092792e7d374d5a2da9ca58780a", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/549e206e21593092792e7d374d5a2da9ca58780a", "committedDate": "2020-10-13T12:26:34Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4877da1e0c121ac114e96bd5dd07b4d20a2c230e", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/4877da1e0c121ac114e96bd5dd07b4d20a2c230e", "committedDate": "2020-10-13T14:09:42Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56eb6f318afb2b219a33953c8a13bd969d0d3ab5", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/56eb6f318afb2b219a33953c8a13bd969d0d3ab5", "committedDate": "2020-10-14T07:57:48Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48736896309a8dba0346982334109ed58cd73fd5", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/48736896309a8dba0346982334109ed58cd73fd5", "committedDate": "2020-10-21T07:25:34Z", "message": "wip, testing why StringStore dont work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e83d999308d1c71db733cfc2e5ca90537f1ca65", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/3e83d999308d1c71db733cfc2e5ca90537f1ca65", "committedDate": "2020-10-21T11:07:35Z", "message": "remove unused methods cleanup structure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8431bab5a668c9b94c960cccbd7eec3964367e32", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/8431bab5a668c9b94c960cccbd7eec3964367e32", "committedDate": "2020-10-21T11:13:19Z", "message": "fix connector condition test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d07b5a047ea1dc56a6a240b7b1d1ff70df91642", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/4d07b5a047ea1dc56a6a240b7b1d1ff70df91642", "committedDate": "2020-10-21T12:42:37Z", "message": "massive cleanup of MULTIPLE_TABLES_ICD_KH_AU_QUERY test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c162621c8ac1be3634462698a826f13033e69f9", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/1c162621c8ac1be3634462698a826f13033e69f9", "committedDate": "2020-10-21T15:11:07Z", "message": "rework Bucket to be length based instead of start/end"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c23768442697c3ac9d8e380d773c9450ae5425fa", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/c23768442697c3ac9d8e380d773c9450ae5425fa", "committedDate": "2020-10-21T16:18:01Z", "message": "this now works!!!!"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97bb711622ca0df30766d363a9d07cb496a56a11", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/97bb711622ca0df30766d363a9d07cb496a56a11", "committedDate": "2020-10-22T09:34:52Z", "message": "cleanup Bucket class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1187dce54af7e1aec3578f19282f97e9ec9639f1", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/1187dce54af7e1aec3578f19282f97e9ec9639f1", "committedDate": "2020-10-22T09:55:36Z", "message": "refactor buckets and entities, send bucket immediately instead of all at once"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44fe7838e30813dfd974fce57cc0ac535e49b968", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/44fe7838e30813dfd974fce57cc0ac535e49b968", "committedDate": "2020-10-22T10:36:10Z", "message": "cleanup of Input reading"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72ce311603aeb49b691e00ea255ee8db3e45450b", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/72ce311603aeb49b691e00ea255ee8db3e45450b", "committedDate": "2020-10-22T12:55:55Z", "message": "reset ImportJob to work again."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53a533b132b0c3f7a0486d51e6f416e217432d5d", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/53a533b132b0c3f7a0486d51e6f416e217432d5d", "committedDate": "2020-10-22T13:00:51Z", "message": "reset ImportJob to work again."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1b427206e37fdb218f117b8257c5367f0adcffb", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/d1b427206e37fdb218f117b8257c5367f0adcffb", "committedDate": "2020-10-22T14:32:31Z", "message": "Merge remote-tracking branch 'origin/develop' into feature/bye-bye-bucket-templates\n\n# Conflicts:\n#\tbackend/src/main/java/com/bakdata/conquery/io/jackson/serializer/BucketDeserializer.java\n#\tbackend/src/main/java/com/bakdata/conquery/io/jackson/serializer/NsIdReferenceDeserializer.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/datasets/ImportColumn.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/dictionary/DictionaryMapping.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/dictionary/DirectDictionary.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/events/Bucket.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/events/BucketManager.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/events/CBlock.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/jobs/CalculateCBlocksJob.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/jobs/ImportJob.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ImportBucket.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/preproc/Preprocessed.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/query/queryplan/ConceptQueryPlan.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/query/queryplan/SecondaryIdQueryPlan.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/value/FirstValueAggregator.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/value/LastValueAggregator.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/query/queryplan/specific/ConceptNode.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/query/queryplan/specific/DateRestrictingNode.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/types/CType.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/types/parser/Transformer.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/types/specific/RealTypeDouble.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/types/specific/StringTypeDictionary.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/types/specific/StringTypeSingleton.java\n#\tbackend/src/main/java/com/bakdata/conquery/resources/admin/rest/AdminProcessor.java\n#\tbackend/src/test/java/com/bakdata/conquery/models/events/generation/GenerationTests.java\n#\tbackend/src/test/java/com/bakdata/conquery/models/types/SerializationTest.java\n#\tbackend/src/test/java/com/bakdata/conquery/models/types/StringEncodingTest.java\n#\tbackend/src/test/resources/tests/query/SIMPLE_TREECONCEPT_CONNECTOR_CONDITION_QUERY/SIMPLE_TREECONCEPT_Query.test.json\n#\tbackend/src/test/resources/tests/query/SIMPLE_TREECONCEPT_CONNECTOR_CONDITION_QUERY/content.csv"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "505081cd6d5d527f490257dffe8c75b05ae367dc", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/505081cd6d5d527f490257dffe8c75b05ae367dc", "committedDate": "2020-10-23T12:42:59Z", "message": "migrate CTypo to be ColumnStore and Transformer as the hoops we are jumping through to marry them is insane"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e00b17a529045f683dfd798c6babb9f8d7f74e92", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/e00b17a529045f683dfd798c6babb9f8d7f74e92", "committedDate": "2020-10-23T13:41:01Z", "message": "this compiles now"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb3bd6f187c0561af613544394ebadcad24243c5", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/eb3bd6f187c0561af613544394ebadcad24243c5", "committedDate": "2020-10-23T14:28:03Z", "message": "cleanup store layout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c159e60b2f2533d9f0720afadd681f4e4982b30", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/7c159e60b2f2533d9f0720afadd681f4e4982b30", "committedDate": "2020-10-23T14:29:44Z", "message": "DateTypeVarInt is now working again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "944ab1f5dc2371067876ece5f080642b385cc27c", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/944ab1f5dc2371067876ece5f080642b385cc27c", "committedDate": "2020-10-23T15:18:22Z", "message": "Fix not being able to Deserialze RealTypeDouble and fix CBlock default min/max"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "636ad3f3291dccf6c304b769d1f7f1949a79ec1a", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/636ad3f3291dccf6c304b769d1f7f1949a79ec1a", "committedDate": "2020-10-23T15:30:10Z", "message": "fix broken connector condition test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca9f8026feb0a16a20180d6b017128bbf5b34193", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/ca9f8026feb0a16a20180d6b017128bbf5b34193", "committedDate": "2020-10-23T16:10:54Z", "message": "fix StringTypeSingleton not properly implementing has"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "314f81bfe2405bb7f47e4353083c6adc96855d22", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/314f81bfe2405bb7f47e4353083c6adc96855d22", "committedDate": "2020-10-23T16:34:31Z", "message": "simplify test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f03ce06226e098955be159777a92e5cf361ce405", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/f03ce06226e098955be159777a92e5cf361ce405", "committedDate": "2020-11-10T13:57:35Z", "message": "fix not-deparsing values in StringTypeNumber"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98edca5586c18e34acd64c1e18ead177f37c679c", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/98edca5586c18e34acd64c1e18ead177f37c679c", "committedDate": "2020-11-10T13:59:29Z", "message": "cleanup ctor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d21aaf2b11329c5895dcf1e2bce9286f5c39e4d0", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/d21aaf2b11329c5895dcf1e2bce9286f5c39e4d0", "committedDate": "2020-11-10T14:07:36Z", "message": "cleanup redundant Decision usage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b2256f062a6d7cdc23fccaf88e70a05f6d99be4", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/5b2256f062a6d7cdc23fccaf88e70a05f6d99be4", "committedDate": "2020-11-10T14:32:45Z", "message": "- fix IsPresentCondition test\n- cleanup code around IsPresentCondition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d58e77ebbb31e073488785fa61143541779f393a", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/d58e77ebbb31e073488785fa61143541779f393a", "committedDate": "2020-11-10T14:50:49Z", "message": "implement DecimalTypeScaled"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3421b66c689d3245a68e5c3986f8ef69253e3a8a", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/3421b66c689d3245a68e5c3986f8ef69253e3a8a", "committedDate": "2020-11-10T17:17:55Z", "message": "Create only description of CType for PPHeader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf8340d4a3de1396734f0afff3f8e783838dfc67", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/bf8340d4a3de1396734f0afff3f8e783838dfc67", "committedDate": "2020-11-10T17:18:15Z", "message": "Add missing JsonCreator to DateRangeTypeQuarter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fb280bd7836e5e7251283d4cffdd8a2402f1ae0", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/1fb280bd7836e5e7251283d4cffdd8a2402f1ae0", "committedDate": "2020-11-11T08:32:50Z", "message": "Initialize value columns also"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed1e27049052f59312e7777ea07a54084659c5d3", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/ed1e27049052f59312e7777ea07a54084659c5d3", "committedDate": "2020-11-11T09:23:28Z", "message": "add todo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8720ac3e36dead42976c0b5fe37c708295f32a48", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/8720ac3e36dead42976c0b5fe37c708295f32a48", "committedDate": "2020-11-11T13:53:05Z", "message": "add missing JsonCreator and Getter annos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7abb94adf536e64e17f3f1127f78cdf3aee4e82e", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/7abb94adf536e64e17f3f1127f78cdf3aee4e82e", "committedDate": "2020-11-11T15:56:04Z", "message": "remove unused code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36cb41307e531ddd79fd4df487bb078b30fdbce0", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/36cb41307e531ddd79fd4df487bb078b30fdbce0", "committedDate": "2020-11-11T15:58:50Z", "message": "add missing JsonCreator anno"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07058bfc2dbd967891382f36494231347e59d004", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/07058bfc2dbd967891382f36494231347e59d004", "committedDate": "2020-11-13T09:53:38Z", "message": "decouple name of Dictionary/StringTypeDictionary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25fed10f5587df48573c6a0850ad80c905a96bda", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/25fed10f5587df48573c6a0850ad80c905a96bda", "committedDate": "2020-11-13T15:02:35Z", "message": "load dictionaries via explicit data structure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8776a83175bc98f668c4b6ff5605152d214f0bea", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/8776a83175bc98f668c4b6ff5605152d214f0bea", "committedDate": "2020-11-13T15:11:23Z", "message": "simplify calculateMap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03dc4cd27778176c6f24baf2ae89931bfa785eb3", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/03dc4cd27778176c6f24baf2ae89931bfa785eb3", "committedDate": "2020-11-13T15:20:22Z", "message": "Fix not updating the names of shared dictionaries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3d0b3e2040792b3e88769249f300ba592d92f5e", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/c3d0b3e2040792b3e88769249f300ba592d92f5e", "committedDate": "2020-11-13T17:09:21Z", "message": "add afterburner for perf gainzz"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "179c679deeaaa1e1c0fac6462c58b6877f0cb801", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/179c679deeaaa1e1c0fac6462c58b6877f0cb801", "committedDate": "2020-11-13T23:13:22Z", "message": "some more todos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9352ac4a3169aa5f68c5e1ef505e4a85484b1c5c", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/9352ac4a3169aa5f68c5e1ef505e4a85484b1c5c", "committedDate": "2020-11-16T10:27:02Z", "message": "use static reader/writer for DataContainer as they use caching which could speed up Preprocessing and ImportJob"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0d8cd53ec056d984a913af79b5d1196754144d9", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/d0d8cd53ec056d984a913af79b5d1196754144d9", "committedDate": "2020-11-16T12:14:18Z", "message": "decouple mapping from dict setting, this allows us to reduce complexity in ImportJob code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a02a8b6f16ba42c830cdc2c3abdbf960f97c2f6", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/4a02a8b6f16ba42c830cdc2c3abdbf960f97c2f6", "committedDate": "2020-11-16T12:21:34Z", "message": "remove special case usedBuckets field"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eba3a4a9975b562a9c42e76c3174b8b61159ee4", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/9eba3a4a9975b562a9c42e76c3174b8b61159ee4", "committedDate": "2020-11-16T12:38:32Z", "message": "remove weird Function to retrieve dictionary as proxy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22e38a57d9512c64be06eb150795b7f6a19bf9c9", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/22e38a57d9512c64be06eb150795b7f6a19bf9c9", "committedDate": "2020-11-16T13:01:12Z", "message": "track and remove Dictionaries related to Import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92938ee0ac059ce976b56e6f885231294b84dc8e", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/92938ee0ac059ce976b56e6f885231294b84dc8e", "committedDate": "2020-11-16T15:45:22Z", "message": "refactor code, make introduce parallelization into ImportJob"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45c2be0c46cf8cf195743bf40ed773a69c742ed6", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/45c2be0c46cf8cf195743bf40ed773a69c742ed6", "committedDate": "2020-11-16T16:01:52Z", "message": "undo parallel sectioning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6db0195dcb5e8a2521d2989ab6801a431dff6bd6", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/6db0195dcb5e8a2521d2989ab6801a431dff6bd6", "committedDate": "2020-11-16T16:39:48Z", "message": "remove weird dupe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "759d39273e98708383579d85e18f55d75783c6f2", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/759d39273e98708383579d85e18f55d75783c6f2", "committedDate": "2020-11-17T11:00:25Z", "message": "Some logging to find where the Dictionaries go missing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc413497909fc687bbda5d33170742b3d1b2a9fe", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/cc413497909fc687bbda5d33170742b3d1b2a9fe", "committedDate": "2020-11-17T11:06:59Z", "message": "fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a058502d8037b85737e19d2d522361ccf3cc866", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/2a058502d8037b85737e19d2d522361ccf3cc866", "committedDate": "2020-11-17T11:33:38Z", "message": "fix not setting name and dataset of dictionary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af5029d8bf19b01114f7162b2df4f4eb346fa5f5", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/af5029d8bf19b01114f7162b2df4f4eb346fa5f5", "committedDate": "2020-11-17T11:34:44Z", "message": "add some more logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d0177ab2bec20fa094f496ca77308e80440dcef", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/4d0177ab2bec20fa094f496ca77308e80440dcef", "committedDate": "2020-11-17T15:17:54Z", "message": "add missing Getter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51e1ccc29ecf1f215beb439810ebd950057d9807", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/51e1ccc29ecf1f215beb439810ebd950057d9807", "committedDate": "2020-11-17T15:51:01Z", "message": "add missing check for shared dictionary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa629a37d883794c9faf3a7ee0c203db818d79a8", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/fa629a37d883794c9faf3a7ee0c203db818d79a8", "committedDate": "2020-11-17T16:00:38Z", "message": "cleanup unused classes from code generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42471070cedf89524838007ddc49ec382d20c909", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/42471070cedf89524838007ddc49ec382d20c909", "committedDate": "2020-11-17T16:11:03Z", "message": "fix logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654", "committedDate": "2020-11-17T16:24:11Z", "message": "fix logic for detecting of missing dicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMjc0NTQ4", "url": "https://github.com/bakdata/conquery/pull/1431#pullrequestreview-533274548", "createdAt": "2020-11-18T09:54:27Z", "commit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "state": "COMMENTED", "comments": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwOTo1NDoyN1rOH1lp4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyMjo1OVrOH143Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk1MzUwNw==", "bodyText": "NotImplementedException -> UnsupportedOperationException", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r525953507", "createdAt": "2020-11-18T09:54:27Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/ModificationShieldedWorkerStorage.java", "diffHunk": "@@ -36,14 +38,54 @@ public CentralRegistry getCentralRegistry() {\n \t\treturn delegate.getCentralRegistry();\n \t}\n \n+\t@Override\n+\tpublic void loadData() {\n+\t\tthrow new NotImplementedException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk1NTEwMw==", "bodyText": "Dadurch machst du potentiell aus Compiletime-Fehlern Runtime-Fehler. K\u00f6nnen wir das umgehen?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r525955103", "createdAt": "2020-11-18T09:56:40Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/ModificationShieldedWorkerStorage.java", "diffHunk": "@@ -19,12 +20,13 @@\n import com.bakdata.conquery.models.identifiable.ids.specific.ImportId;\n import com.bakdata.conquery.models.worker.WorkerInformation;\n import lombok.RequiredArgsConstructor;\n+import org.apache.commons.lang3.NotImplementedException;\n \n /**\n- * Provides a view on the storage that does not allow modification of the storage (update, delete). \n+ * Provides a view on the storage that does not allow modification of the storage (update, delete).\n  */\n @RequiredArgsConstructor\n-public class ModificationShieldedWorkerStorage {\n+public class ModificationShieldedWorkerStorage implements WorkerStorage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk3MzE3NQ==", "bodyText": "Hier sind noch ein paar leere Bodies. Vllt eine Exception werfen", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r525973175", "createdAt": "2020-11-18T10:23:29Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/dictionary/DirectDictionary.java", "diffHunk": "@@ -3,19 +3,32 @@\n import java.nio.charset.StandardCharsets;\n import java.util.Iterator;\n \n-import com.bakdata.conquery.models.types.specific.AStringType;\n-import com.bakdata.conquery.models.types.specific.VarIntType;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DictionaryId;\n+import com.bakdata.conquery.models.types.specific.string.StringType;\n import com.google.common.collect.Iterators;\n \n-public class DirectDictionary extends AStringType<Integer> {\n+public class DirectDictionary extends StringType {\n \n \tprivate final Dictionary dict;\n \t\n \tpublic DirectDictionary(Dictionary dict) {\n-\t\tsuper(int.class);\n+\t\tsuper();\n \t\tthis.dict = dict;\n \t}\n-\t\n+\n+\n+\t// TODO why is this a StringType at all?\n+\n+\t@Override\n+\tpublic StringType select(int[] starts, int[] length) {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic void set(int event, Integer value) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk3NDAzMA==", "bodyText": "Ja es sieht eher aus, als w\u00fcrde die Klasse als Bridge fungieren", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r525974030", "createdAt": "2020-11-18T10:24:44Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/dictionary/DirectDictionary.java", "diffHunk": "@@ -3,19 +3,32 @@\n import java.nio.charset.StandardCharsets;\n import java.util.Iterator;\n \n-import com.bakdata.conquery.models.types.specific.AStringType;\n-import com.bakdata.conquery.models.types.specific.VarIntType;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DictionaryId;\n+import com.bakdata.conquery.models.types.specific.string.StringType;\n import com.google.common.collect.Iterators;\n \n-public class DirectDictionary extends AStringType<Integer> {\n+public class DirectDictionary extends StringType {\n \n \tprivate final Dictionary dict;\n \t\n \tpublic DirectDictionary(Dictionary dict) {\n-\t\tsuper(int.class);\n+\t\tsuper();\n \t\tthis.dict = dict;\n \t}\n-\t\n+\n+\n+\t// TODO why is this a StringType at all?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk4MDEwNA==", "bodyText": "Ist das Wrapping in ByteArrayList notwendig? Es wird in getId2Value und getElement nur wieder entpackt. Soweit ich das verstehe \u00e4ndern sich die eintr\u00e4ge auch nicht mehr nach dem sie drinne sind", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r525980104", "createdAt": "2020-11-18T10:33:57Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/dictionary/MapDictionary.java", "diffHunk": "@@ -7,46 +7,39 @@\n import java.util.List;\n import java.util.ListIterator;\n \n+import javax.validation.constraints.NotNull;\n+\n import com.bakdata.conquery.io.cps.CPSType;\n import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n-import com.bakdata.conquery.models.identifiable.ids.specific.DictionaryId;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.google.common.math.DoubleMath;\n import it.unimi.dsi.fastutil.Hash;\n import it.unimi.dsi.fastutil.bytes.ByteArrayList;\n import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;\n-import lombok.AllArgsConstructor;\n \n @CPSType(id = \"MAP_DICTIONARY\", base = Dictionary.class)\n-@AllArgsConstructor\n public class MapDictionary extends Dictionary {\n \n \tprivate Object2IntOpenHashMap<ByteArrayList> value2Id;\n \tprivate List<ByteArrayList> id2Value;\n \n-\tpublic MapDictionary() {\n+\tpublic MapDictionary(DatasetId dataset, @NotNull String name) {\n+\t\tsuper(dataset, name);\n \t\tvalue2Id = new Object2IntOpenHashMap<>();\n \t\tvalue2Id.defaultReturnValue(-1);\n \t\tid2Value = new ArrayList<>();\n \t}\n \n-\tpublic MapDictionary(DictionaryId dictionaryId) {\n-\t\tthis();\n-\t\tthis.setName(dictionaryId.getDictionary());\n-\t\tthis.setDataset(dictionaryId.getDataset());\n-\t}\n-\n \t@JsonCreator\n \tpublic MapDictionary(DatasetId datasetId, String name, byte[][] id2Value) {\n+\t\tsuper(datasetId, name);\n \t\tif (id2Value == null) {\n \t\t\tid2Value = new byte[0][];\n \t\t}\n \t\tthis.id2Value = new ArrayList<>(id2Value.length);\n \t\tvalue2Id = new Object2IntOpenHashMap<>(id2Value.length);\n \t\tvalue2Id.defaultReturnValue(-1);\n-\t\tthis.setName(name);\n-\t\tthis.setDataset(datasetId);\n \n \t\tfor (int i = 0; i < id2Value.length; i++) {\n \t\t\tByteArrayList v = new ByteArrayList(id2Value[i]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk4MDQzMA==", "bodyText": "Aber das ist etwas f\u00fcr einen extra PR", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r525980430", "createdAt": "2020-11-18T10:34:27Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/dictionary/MapDictionary.java", "diffHunk": "@@ -7,46 +7,39 @@\n import java.util.List;\n import java.util.ListIterator;\n \n+import javax.validation.constraints.NotNull;\n+\n import com.bakdata.conquery.io.cps.CPSType;\n import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n-import com.bakdata.conquery.models.identifiable.ids.specific.DictionaryId;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.google.common.math.DoubleMath;\n import it.unimi.dsi.fastutil.Hash;\n import it.unimi.dsi.fastutil.bytes.ByteArrayList;\n import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;\n-import lombok.AllArgsConstructor;\n \n @CPSType(id = \"MAP_DICTIONARY\", base = Dictionary.class)\n-@AllArgsConstructor\n public class MapDictionary extends Dictionary {\n \n \tprivate Object2IntOpenHashMap<ByteArrayList> value2Id;\n \tprivate List<ByteArrayList> id2Value;\n \n-\tpublic MapDictionary() {\n+\tpublic MapDictionary(DatasetId dataset, @NotNull String name) {\n+\t\tsuper(dataset, name);\n \t\tvalue2Id = new Object2IntOpenHashMap<>();\n \t\tvalue2Id.defaultReturnValue(-1);\n \t\tid2Value = new ArrayList<>();\n \t}\n \n-\tpublic MapDictionary(DictionaryId dictionaryId) {\n-\t\tthis();\n-\t\tthis.setName(dictionaryId.getDictionary());\n-\t\tthis.setDataset(dictionaryId.getDataset());\n-\t}\n-\n \t@JsonCreator\n \tpublic MapDictionary(DatasetId datasetId, String name, byte[][] id2Value) {\n+\t\tsuper(datasetId, name);\n \t\tif (id2Value == null) {\n \t\t\tid2Value = new byte[0][];\n \t\t}\n \t\tthis.id2Value = new ArrayList<>(id2Value.length);\n \t\tvalue2Id = new Object2IntOpenHashMap<>(id2Value.length);\n \t\tvalue2Id.defaultReturnValue(-1);\n-\t\tthis.setName(name);\n-\t\tthis.setDataset(datasetId);\n \n \t\tfor (int i = 0; i < id2Value.length; i++) {\n \t\t\tByteArrayList v = new ByteArrayList(id2Value[i]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk4MDEwNA=="}, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk4NDkxMA==", "bodyText": "W\u00e4re hier nicht eine ArrayList oder besser int[] angemessen wo: start[2] == -1 wenn die entity nicht vorhanden ist", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r525984910", "createdAt": "2020-11-18T10:41:25Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/Bucket.java", "diffHunk": "@@ -40,155 +33,131 @@\n @Getter\n @Setter\n @ToString\n-@JsonDeserialize(using = BucketDeserializer.class)\n-public abstract class Bucket extends IdentifiableImpl<BucketId> implements Iterable<Integer>, JsonSerializable {\n+@RequiredArgsConstructor(onConstructor_ = {@JsonCreator})\n+public class Bucket extends IdentifiableImpl<BucketId> {\n \n \t@Min(0)\n-\tprivate int bucket;\n-\t@NotNull\n+\tprivate final int bucket;\n+\n+\tprivate final ImportId importId;\n+\n+\t// todo try to reduce reliance on import and use internal components instead\n \t@NsIdRef\n \tprivate Import imp;\n+\n \t@Min(0)\n-\tprivate int numberOfEvents;\n-\t@ToString.Exclude\n-\tprivate int[] offsets;\n-\t@NotNull\n-\t@Setter\n-\t@ToString.Exclude\n-\tprotected BitStore nullBits;\n+\tprivate final int numberOfEvents;\n \n-\tpublic Bucket(int bucket, Import imp, int[] offsets) {\n-\t\tthis.bucket = bucket;\n-\t\tthis.imp = imp;\n-\t\tthis.offsets = offsets;\n-\t}\n+\tprivate final CType<?,?>[] stores;\n \n-\t@Override\n-\tpublic BucketId createId() {\n-\t\treturn new BucketId(imp.getId(), bucket);\n-\t}\n \n+\t/**\n+\t * start of each Entity in {@code stores}.\n+\t */\n+\tprivate final Map<Integer, Integer> start;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk4OTU5MA==", "bodyText": "Map<Column, Object> als R\u00fcckgabe. Momentan wird in den Column Conditions noch der Spaltenname an statt der SpaltenId gef\u00fchrt, was letztens zu einem Problem ohne Fehlermeldung gef\u00fchrt hat", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r525989590", "createdAt": "2020-11-18T10:48:41Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/Bucket.java", "diffHunk": "@@ -40,155 +33,131 @@\n @Getter\n @Setter\n @ToString\n-@JsonDeserialize(using = BucketDeserializer.class)\n-public abstract class Bucket extends IdentifiableImpl<BucketId> implements Iterable<Integer>, JsonSerializable {\n+@RequiredArgsConstructor(onConstructor_ = {@JsonCreator})\n+public class Bucket extends IdentifiableImpl<BucketId> {\n \n \t@Min(0)\n-\tprivate int bucket;\n-\t@NotNull\n+\tprivate final int bucket;\n+\n+\tprivate final ImportId importId;\n+\n+\t// todo try to reduce reliance on import and use internal components instead\n \t@NsIdRef\n \tprivate Import imp;\n+\n \t@Min(0)\n-\tprivate int numberOfEvents;\n-\t@ToString.Exclude\n-\tprivate int[] offsets;\n-\t@NotNull\n-\t@Setter\n-\t@ToString.Exclude\n-\tprotected BitStore nullBits;\n+\tprivate final int numberOfEvents;\n \n-\tpublic Bucket(int bucket, Import imp, int[] offsets) {\n-\t\tthis.bucket = bucket;\n-\t\tthis.imp = imp;\n-\t\tthis.offsets = offsets;\n-\t}\n+\tprivate final CType<?,?>[] stores;\n \n-\t@Override\n-\tpublic BucketId createId() {\n-\t\treturn new BucketId(imp.getId(), bucket);\n-\t}\n \n+\t/**\n+\t * start of each Entity in {@code stores}.\n+\t */\n+\tprivate final Map<Integer, Integer> start;\n+\n+\t/**\n+\t * Number of events per Entity in {@code stores}.\n+\t */\n+\tprivate final Map<Integer, Integer> length;\n+\n+\tprivate final int bucketSize;\n \n-\tpublic abstract int getBucketSize();\n \n \t@Override\n-\tpublic PrimitiveIterator.OfInt iterator() {\n-\t\treturn IntStream.range(0, getBucketSize())\n-\t\t\t\t\t\t.filter(this::containsLocalEntity)\n-\t\t\t\t\t\t.map(this::toGlobal)\n-\t\t\t\t\t\t.iterator();\n+\tpublic BucketId createId() {\n+\t\treturn new BucketId(importId, bucket);\n \t}\n \n-\tpublic boolean containsLocalEntity(int localEntity) {\n-\t\treturn offsets[localEntity] != -1;\n+\t/**\n+\t * Iterate entities\n+\t */\n+\tpublic Collection<Integer> entities() {\n+\t\treturn start.keySet();\n \t}\n \n-\tpublic abstract void initFields(int numberOfEntities);\n-\n-\tpublic int toLocal(int entity) {\n-\t\treturn entity - getBucketSize() * bucket;\n+\tpublic boolean containsEntity(int localEntity) {\n+\t\treturn start.containsKey(localEntity);\n \t}\n \n-\tpublic int toGlobal(int entity) {\n-\t\treturn entity + getBucketSize() * bucket;\n+\tpublic Iterable<BucketEntry> entries() {\n+\t\treturn () -> start.keySet()\n+\t\t\t\t\t\t  .stream()\n+\t\t\t\t\t\t  .flatMap(entity -> IntStream.range(getEntityStart(entity), getEntityEnd(entity))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t  .mapToObj(e -> new BucketEntry(entity, e))\n+\t\t\t\t\t\t  )\n+\t\t\t\t\t\t  .iterator();\n \t}\n \n-\n-\tpublic int getFirstEventOfLocal(int localEntity) {\n-\t\treturn offsets[localEntity];\n+\tpublic int getEntityStart(int entityId) {\n+\t\treturn start.get(entityId);\n \t}\n \n-\tpublic int getLastEventOfLocal(int localEntity) {\n-\t\tfor (localEntity++; localEntity < offsets.length; localEntity++) {\n-\t\t\tif (offsets[localEntity] != -1) {\n-\t\t\t\treturn offsets[localEntity];\n-\t\t\t}\n-\t\t}\n-\t\treturn numberOfEvents;\n+\tpublic int getEntityEnd(int entityId) {\n+\t\treturn start.get(entityId) + length.get(entityId);\n \t}\n \n-\t@Override\n-\tpublic void serialize(JsonGenerator gen, SerializerProvider serializers) throws IOException {\n-\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n-\n-\t\tjava.io.OutputStream outputStream = baos;\n-\t\ttry (Output output = new Output(outputStream)) {\n-\t\t\twriteContent(output);\n-\t\t}\n-\t\tbyte[] content = baos.toByteArray();\n-\t\tgen.writeStartObject();\n-\t\tgen.writeNumberField(Fields.bucket, bucket);\n-\t\tgen.writeStringField(Fields.imp, imp.getId().toString());\n-\t\tgen.writeNumberField(Fields.numberOfEvents, numberOfEvents);\n-\t\tgen.writeFieldName(Fields.offsets);\n-\t\tgen.writeArray(offsets, 0, offsets.length);\n-\t\tgen.writeBinaryField(\"content\", content);\n-\t\tgen.writeEndObject();\n+\tpublic final boolean has(int event, Column column) {\n+\t\treturn stores[column.getPosition()].has(event);\n \t}\n \n-\tpublic Iterable<BucketEntry> entries() {\n-\t\treturn () -> IntStream\n-\t\t\t\t\t\t\t .range(0, getBucketSize())\n-\t\t\t\t\t\t\t .filter(this::containsLocalEntity)\n-\t\t\t\t\t\t\t .boxed()\n-\t\t\t\t\t\t\t .flatMap(le -> IntStream\n-\t\t\t\t\t\t\t\t\t\t\t\t\t.range(getFirstEventOfLocal(le), getLastEventOfLocal(le))\n-\t\t\t\t\t\t\t\t\t\t\t\t\t.mapToObj(e -> new BucketEntry(le, e))\n-\t\t\t\t\t\t\t )\n-\t\t\t\t\t\t\t .iterator();\n+\tpublic int getString(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getString(event);\n \t}\n \n-\n-\tpublic boolean has(int event, Column column) {\n-\t\treturn has(event, column.getPosition());\n+\tpublic long getInteger(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getInteger(event);\n \t}\n \n-\tpublic abstract boolean has(int event, int columnPosition);\n-\n-\tpublic abstract int getString(int event, Column column);\n-\n-\tpublic abstract long getInteger(int event, Column column);\n-\n-\tpublic abstract boolean getBoolean(int event, Column column);\n-\n-\tpublic abstract double getReal(int event, Column column);\n+\tpublic boolean getBoolean(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getBoolean(event);\n+\t}\n \n-\tpublic abstract BigDecimal getDecimal(int event, Column column);\n+\tpublic double getReal(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getReal(event);\n+\t}\n \n-\tpublic abstract long getMoney(int event, Column column);\n+\tpublic BigDecimal getDecimal(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getDecimal(event);\n+\t}\n \n-\tpublic abstract int getDate(int event, Column column);\n+\tpublic long getMoney(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getMoney(event);\n+\t}\n \n-\tpublic abstract CDateRange getDateRange(int event, Column column);\n+\tpublic int getDate(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getDate(event);\n+\t}\n \n-\tpublic Object getRaw(int event, Column column) {\n-\t\treturn getRaw(event, column.getPosition());\n+\tpublic CDateRange getAsDateRange(int event, Column currentColumn) {\n+\t\treturn getDateRange(event, currentColumn);\n \t}\n \n-\tpublic abstract Object getRaw(int event, int columnPosition);\n+\tpublic CDateRange getDateRange(int event, Column column) {\n+\t\treturn stores[column.getPosition()].getDateRange(event);\n+\t}\n \n \tpublic Object getAsObject(int event, Column column) {\n-\t\treturn getAsObject(event, column.getPosition());\n+\t\treturn stores[column.getPosition()].getAsObject(event);\n \t}\n \n-\tpublic abstract Object getAsObject(int event, int columnPosition);\n-\n-\tpublic abstract boolean eventIsContainedIn(int event, Column column, CDateRange dateRange);\n-\n \tpublic boolean eventIsContainedIn(int event, Column column, BitMapCDateSet dateRanges) {\n-\t\treturn dateRanges.intersects(getAsDateRange(event, column));\n+\t\treturn dateRanges.intersects(stores[column.getPosition()].getDateRange(event));\n \t}\n \n-\tpublic abstract CDateRange getAsDateRange(int event, Column currentColumn);\n \n-\t@Override\n-\tpublic void serializeWithType(JsonGenerator gen, SerializerProvider serializers, TypeSerializer typeSer) throws IOException {\n-\t\tthis.serialize(gen, serializers);\n-\t}\n+\tpublic Map<String, Object> calculateMap(int event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk5MjAwMg==", "bodyText": "Okay, ich sehe, dass du von localentity wegkommen m\u00f6chtest, aber das ist denke ich ein wichtiger Faktor um den Object overhead gering zu halten.", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r525992002", "createdAt": "2020-11-18T10:52:24Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/Bucket.java", "diffHunk": "@@ -40,155 +33,131 @@\n @Getter\n @Setter\n @ToString\n-@JsonDeserialize(using = BucketDeserializer.class)\n-public abstract class Bucket extends IdentifiableImpl<BucketId> implements Iterable<Integer>, JsonSerializable {\n+@RequiredArgsConstructor(onConstructor_ = {@JsonCreator})\n+public class Bucket extends IdentifiableImpl<BucketId> {\n \n \t@Min(0)\n-\tprivate int bucket;\n-\t@NotNull\n+\tprivate final int bucket;\n+\n+\tprivate final ImportId importId;\n+\n+\t// todo try to reduce reliance on import and use internal components instead\n \t@NsIdRef\n \tprivate Import imp;\n+\n \t@Min(0)\n-\tprivate int numberOfEvents;\n-\t@ToString.Exclude\n-\tprivate int[] offsets;\n-\t@NotNull\n-\t@Setter\n-\t@ToString.Exclude\n-\tprotected BitStore nullBits;\n+\tprivate final int numberOfEvents;\n \n-\tpublic Bucket(int bucket, Import imp, int[] offsets) {\n-\t\tthis.bucket = bucket;\n-\t\tthis.imp = imp;\n-\t\tthis.offsets = offsets;\n-\t}\n+\tprivate final CType<?,?>[] stores;\n \n-\t@Override\n-\tpublic BucketId createId() {\n-\t\treturn new BucketId(imp.getId(), bucket);\n-\t}\n \n+\t/**\n+\t * start of each Entity in {@code stores}.\n+\t */\n+\tprivate final Map<Integer, Integer> start;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk4NDkxMA=="}, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAxNzk0MA==", "bodyText": "Kann der CBlock nicht Teil eines Buckets sein?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r526017940", "createdAt": "2020-11-18T11:34:52Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/CBlock.java", "diffHunk": "@@ -37,28 +36,22 @@\n \t\n \t/**\n \t * Bloom filter per entity for the first 64 {@link ConceptTreeChild}.\n-\t *\n-\t * Per Entity.\n \t */\n-\tprivate long[] includedConcepts;\n-\n-\t// TODO: 02.09.2020 FK: Make chop this onto a per-column basis\n+\tprivate Int2LongArrayMap includedConcepts = new Int2LongArrayMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAyMTI2Mw==", "bodyText": "Eine bessere ToString Methode bitte", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r526021263", "createdAt": "2020-11-18T11:40:51Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/stores/base/ByteStore.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.bakdata.conquery.models.events.stores.base;\n+\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.events.ColumnStore;\n+import com.bakdata.conquery.models.events.stores.ColumnStoreAdapter;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import lombok.Getter;\n+import lombok.ToString;\n+\n+\n+@CPSType(id = \"BYTES\", base = ColumnStore.class)\n+@Getter\n+@ToString(onlyExplicitlyIncluded = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAyNjUzNw==", "bodyText": "Das ist leider eine nifty Fehlerquelle. Du solltest null events separat flaggen. So schr\u00e4nkst du den Wertebereicht ein und dein get und set reagieren nicht darauf.", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r526026537", "createdAt": "2020-11-18T11:49:51Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/stores/base/ByteStore.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.bakdata.conquery.models.events.stores.base;\n+\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.events.ColumnStore;\n+import com.bakdata.conquery.models.events.stores.ColumnStoreAdapter;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import lombok.Getter;\n+import lombok.ToString;\n+\n+\n+@CPSType(id = \"BYTES\", base = ColumnStore.class)\n+@Getter\n+@ToString(onlyExplicitlyIncluded = true)\n+public class ByteStore extends ColumnStoreAdapter<Long> {\n+\n+\tprivate final byte nullValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE5ODM0Mw==", "bodyText": "Es war ja vorher schon fragw\u00fcrdig ob die Funktion einen realistischen wert zur\u00fcckgibt, aber ist es jetzt \u00fcberhaupt noch ein ding?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r526198343", "createdAt": "2020-11-18T15:53:54Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/datasets/Import.java", "diffHunk": "@@ -174,6 +61,17 @@ public static Import createForPreprocessing(String table, String tag, PPColumn[]\n \t\treturn imp;\n \t}\n \n+\t@Override\n+\tpublic ImportId createId() {\n+\t\treturn new ImportId(table, getName());\n+\t}\n+\n+\tpublic void loadExternalInfos(NamespacedStorage storage) {\n+\t\tfor (ImportColumn col : columns) {\n+\t\t\tcol.getType().loadDictionaries(storage);\n+\t\t}\n+\t}\n+\n \tpublic long estimateMemoryConsumption() {\n \t\tlong mem = 0;\n \t\tfor (ImportColumn col : columns) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIwMDY4OA==", "bodyText": "Sodass man local ids beibehalten kann, aber diese in der Implementierung verkapselt sind und nicht nachdrau\u00dfen dringen?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r526200688", "createdAt": "2020-11-18T15:56:10Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/CBlock.java", "diffHunk": "@@ -37,28 +36,22 @@\n \t\n \t/**\n \t * Bloom filter per entity for the first 64 {@link ConceptTreeChild}.\n-\t *\n-\t * Per Entity.\n \t */\n-\tprivate long[] includedConcepts;\n-\n-\t// TODO: 02.09.2020 FK: Make chop this onto a per-column basis\n+\tprivate Int2LongArrayMap includedConcepts = new Int2LongArrayMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAxNzk0MA=="}, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIwMTg1NQ==", "bodyText": "Ich habe das gef\u00fchl @Valid macht nichts, oder gibt es einen Validator f\u00fcr primitive Arrays?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r526201855", "createdAt": "2020-11-18T15:57:32Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/CBlock.java", "diffHunk": "@@ -37,28 +36,22 @@\n \t\n \t/**\n \t * Bloom filter per entity for the first 64 {@link ConceptTreeChild}.\n-\t *\n-\t * Per Entity.\n \t */\n-\tprivate long[] includedConcepts;\n-\n-\t// TODO: 02.09.2020 FK: Make chop this onto a per-column basis\n+\tprivate Int2LongArrayMap includedConcepts = new Int2LongArrayMap();\n+\t\n \t/**\n \t * Statistic for fast lookup if entity is of interest.\n \t * Int array for memory performance.\n-\t *\n-\t * Per Entity.\n \t */\n-\tprivate int[] minDate, maxDate;\n+\tprivate Int2IntMap minDate = new Int2IntArrayMap();\n+\tprivate Int2IntMap maxDate = new Int2IntArrayMap();\n \t\n \t/**\n \t * Represents the path in a {@link TreeConcept} to optimize lookup.\n \t * Nodes in the tree are simply enumerated.\n-\t *\n-\t * Per Event.\n \t */\n-\t@Nullable\n-\tprivate int[][] mostSpecificChildren = null;\n+\t@Valid\n+\tprivate int[][] mostSpecificChildren;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIwNDU3OA==", "bodyText": "Der Cast/Box/Unbox sieht komisch aus", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r526204578", "createdAt": "2020-11-18T16:00:56Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/stores/base/DateStore.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.bakdata.conquery.models.events.stores.base;\n+\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.common.CDate;\n+import com.bakdata.conquery.models.common.daterange.CDateRange;\n+import com.bakdata.conquery.models.events.ColumnStore;\n+import com.bakdata.conquery.models.events.stores.ColumnStoreAdapter;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import lombok.Getter;\n+import lombok.ToString;\n+\n+@CPSType(id = \"DATES\", base = ColumnStore.class)\n+@Getter\n+@ToString(onlyExplicitlyIncluded = true)\n+public class DateStore extends ColumnStoreAdapter<Integer> {\n+\n+\tprivate final ColumnStore<Long> store;\n+\n+\t@JsonCreator\n+\tpublic DateStore(ColumnStore<Long> store) {\n+\t\tthis.store = store;\n+\t}\n+\n+\tpublic static DateStore create(int size) {\n+\t\treturn new DateStore(IntegerStore.create(size));\n+\t}\n+\n+\tpublic DateStore select(int[] starts, int[] ends) {\n+\t\treturn new DateStore(store.select(starts,ends));\n+\t}\n+\n+\t@Override\n+\tpublic void set(int event, Integer value) {\n+\t\tif (value == null) {\n+\t\t\tstore.set(event, null);\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tstore.set(event, (long) value);\n+\t}\n+\n+\t@Override\n+\tpublic boolean has(int event) {\n+\t\treturn store.has(event);\n+\t}\n+\n+\t@Override\n+\tpublic CDateRange getDateRange(int event) {\n+\t\treturn CDateRange.exactly(get(event));\n+\t}\n+\n+\t@Override\n+\tpublic Integer get(int event) {\n+\t\treturn (int) store.getInteger(event);\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIwNzY4Ng==", "bodyText": "must du hier nicht .intValue() aufrufen?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r526207686", "createdAt": "2020-11-18T16:04:14Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/stores/base/DateStore.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.bakdata.conquery.models.events.stores.base;\n+\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.common.CDate;\n+import com.bakdata.conquery.models.common.daterange.CDateRange;\n+import com.bakdata.conquery.models.events.ColumnStore;\n+import com.bakdata.conquery.models.events.stores.ColumnStoreAdapter;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import lombok.Getter;\n+import lombok.ToString;\n+\n+@CPSType(id = \"DATES\", base = ColumnStore.class)\n+@Getter\n+@ToString(onlyExplicitlyIncluded = true)\n+public class DateStore extends ColumnStoreAdapter<Integer> {\n+\n+\tprivate final ColumnStore<Long> store;\n+\n+\t@JsonCreator\n+\tpublic DateStore(ColumnStore<Long> store) {\n+\t\tthis.store = store;\n+\t}\n+\n+\tpublic static DateStore create(int size) {\n+\t\treturn new DateStore(IntegerStore.create(size));\n+\t}\n+\n+\tpublic DateStore select(int[] starts, int[] ends) {\n+\t\treturn new DateStore(store.select(starts,ends));\n+\t}\n+\n+\t@Override\n+\tpublic void set(int event, Integer value) {\n+\t\tif (value == null) {\n+\t\t\tstore.set(event, null);\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tstore.set(event, (long) value);\n+\t}\n+\n+\t@Override\n+\tpublic boolean has(int event) {\n+\t\treturn store.has(event);\n+\t}\n+\n+\t@Override\n+\tpublic CDateRange getDateRange(int event) {\n+\t\treturn CDateRange.exactly(get(event));\n+\t}\n+\n+\t@Override\n+\tpublic Integer get(int event) {\n+\t\treturn (int) store.getInteger(event);\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIwNDU3OA=="}, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIxMDI0OQ==", "bodyText": "Ich verstehe noch nicht so ganz warum das manchmal dieser Store ist. Manchmal ColumnStore<> und manchmal ein Array", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r526210249", "createdAt": "2020-11-18T16:07:21Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/stores/date/PackedDateRangeStore.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.bakdata.conquery.models.events.stores.date;\n+\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.common.daterange.CDateRange;\n+import com.bakdata.conquery.models.events.ColumnStore;\n+import com.bakdata.conquery.models.events.stores.ColumnStoreAdapter;\n+import com.bakdata.conquery.models.events.stores.base.IntegerStore;\n+import com.bakdata.conquery.util.PackedUnsigned1616;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import lombok.Getter;\n+import lombok.ToString;\n+\n+@CPSType(id = \"PACKED_DATE_RANGES\", base = ColumnStore.class)\n+@Getter\n+@ToString(onlyExplicitlyIncluded = true)\n+public class PackedDateRangeStore extends ColumnStoreAdapter<CDateRange> {\n+\n+\tprivate final IntegerStore store;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIxMTAzNg==", "bodyText": "Format", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r526211036", "createdAt": "2020-11-18T16:08:26Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/jobs/CalculateCBlocksJob.java", "diffHunk": "@@ -98,18 +102,22 @@ private void calculateEntityDateIndices(CBlock cBlock, Bucket bucket) {\n \n \t\t\t\tCDateRange range = bucket.getAsDateRange(entry.getEvent(), column);\n \n-\t\t\t\tcBlock.getMinDate()[entry.getLocalEntity()] = Math.min(cBlock.getMinDate()[entry.getLocalEntity()], range.getMinValue());\n-\n-\t\t\t\tcBlock.getMaxDate()[entry.getLocalEntity()] = Math.max(cBlock.getMaxDate()[entry.getLocalEntity()], range.getMaxValue());\n+\t\t\t\tcBlock.getMinDate()\n+\t\t\t\t\t  .put(\n+\t\t\t\t\t\t\t  entry.getEntity(),\n+\t\t\t\t\t\t\t  Math.min(cBlock.getMinDate().getOrDefault(entry.getEntity(), Integer.MAX_VALUE), range.getMinValue())\n+\t\t\t\t\t  );\n+\n+\t\t\t\tcBlock.getMaxDate()\n+\t\t\t\t\t  .put(\n+\t\t\t\t\t\t\t  entry.getEntity(),\n+\t\t\t\t\t\t\t  Math.max(cBlock.getMaxDate()\n+\t\t\t\t\t\t\t\t\t\t\t .getOrDefault(entry.getEntity(), Integer.MIN_VALUE), range.getMaxValue())\n+\t\t\t\t\t  );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIyNDY5Mg==", "bodyText": "Bei ADD_IMPORT und hier IMPORT_BIT m\u00fcssen die Dictionaries geladen werden. Ich verstehe nicht warum", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r526224692", "createdAt": "2020-11-18T16:26:31Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ImportBucket.java", "diffHunk": "@@ -1,72 +1,39 @@\n package com.bakdata.conquery.models.messages.namespaces.specific;\n \n-import java.io.ByteArrayInputStream;\n-import java.util.Arrays;\n-\n-import javax.annotation.Nonnull;\n-import javax.validation.constraints.NotEmpty;\n-import javax.validation.constraints.NotNull;\n-\n import com.bakdata.conquery.io.cps.CPSType;\n-import com.bakdata.conquery.models.datasets.Import;\n import com.bakdata.conquery.models.events.Bucket;\n-import com.bakdata.conquery.models.events.generation.BlockFactory;\n-import com.bakdata.conquery.models.identifiable.ids.specific.BucketId;\n import com.bakdata.conquery.models.messages.namespaces.NamespacedMessage;\n import com.bakdata.conquery.models.messages.namespaces.WorkerMessage;\n+import com.bakdata.conquery.models.types.CType;\n import com.bakdata.conquery.models.worker.Worker;\n import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.jakewharton.byteunits.BinaryByteUnit;\n-import it.unimi.dsi.fastutil.ints.IntArrayList;\n import lombok.Getter;\n import lombok.RequiredArgsConstructor;\n import lombok.Setter;\n \n-@CPSType(id=\"IMPORT_BIT\", base=NamespacedMessage.class)\n-@RequiredArgsConstructor(onConstructor_ = @JsonCreator) @Getter @Setter\n+@CPSType(id = \"IMPORT_BIT\", base = NamespacedMessage.class)\n+@RequiredArgsConstructor(onConstructor_ = @JsonCreator)\n+@Getter\n+@Setter\n public class ImportBucket extends WorkerMessage.Slow {\n-\t\n-\t@Nonnull @NotNull\n-\tprivate final BucketId bucket;\n-\t@NotEmpty\n-\tprivate IntArrayList includedEntities = new IntArrayList();\n-\t@NotNull\n-\tprivate byte[][] bytes;\n-\t\n+\n+\tprivate final Bucket bucket;\n \n \t@Override\n \tpublic void react(Worker context) throws Exception {\n-\t\tgetProgressReporter().setMax(includedEntities.size());\n-\t\tImport imp = context.getStorage().getImport(bucket.getImp());\n-\t\t\n-\t\tBlockFactory factory = imp.getBlockFactory();\n-\t\tBucket[] buckets = new Bucket[includedEntities.size()];\n-\t\t\n-\t\tfor(int index=0;index<includedEntities.size();index++) {\n-\t\t\tint entity = includedEntities.getInt(index);\n-\t\t\t\n-\t\t\ttry(ByteArrayInputStream input = new ByteArrayInputStream(bytes[index])) {\n-\t\t\t\tbuckets[index] = factory.readSingleValue(bucket.getBucket(), imp, input);\n-\t\t\t\tif(input.available() > 0) {\n-\t\t\t\t\tthrow new IllegalStateException(\"After reading the block of \"+entity+\" there are still \"+input.available()+\" bytes remaining in its content\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tgetProgressReporter().report(1);\n+\t\t// todo get import via idRef instead.\n+\n+\t\t// todo encapsulate this better.\n+\t\tfor (CType<?, ?> store : bucket.getStores()) {\n+\t\t\tstore.loadDictionaries(context.getStorage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIzMzk5Mw==", "bodyText": "Okay, es gibt sie noch die localId. Bin verwirrt", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r526233993", "createdAt": "2020-11-18T16:38:26Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/specific/DateRestrictingNode.java", "diffHunk": "@@ -59,16 +59,16 @@ public boolean isOfInterest(Bucket bucket) {\n \t\t\treturn true;\n \t\t}\n \n-\t\tint localId = bucket.toLocal(entity.getId());\n+\t\tint localId = entity.getId();\n \n \t\t// This means the Entity is not contained.\n-\t\tif(cBlock.getMinDate()[localId] > cBlock.getMaxDate()[localId]) {\n+\t\tif(cBlock.getMinDate().get(localId) > cBlock.getMaxDate().get(localId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI0MTc0MA==", "bodyText": "Ist dieser Container noch notwendig?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r526241740", "createdAt": "2020-11-18T16:48:14Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/types/parser/Decision.java", "diffHunk": "@@ -1,13 +1,13 @@\n package com.bakdata.conquery.models.types.parser;\n \n import com.bakdata.conquery.models.types.CType;\n-\n import lombok.Data;\n-import lombok.RequiredArgsConstructor;\n \n-@RequiredArgsConstructor\n @Data\n-public class Decision<MAJOR_JAVA_TYPE, JAVA_TYPE, CTYPE extends CType<MAJOR_JAVA_TYPE, JAVA_TYPE>> {\n-\tprivate final Transformer<MAJOR_JAVA_TYPE, JAVA_TYPE> transformer;\n+public class Decision<CTYPE extends CType<?, ?>> {\n \tprivate final CTYPE type;\n+\n+\tpublic Decision(CTYPE type) {\n+\t\tthis.type = type;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI0NjY1OA==", "bodyText": "Hallo hier hinten", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r526246658", "createdAt": "2020-11-18T16:54:26Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/MoneyParser.java", "diffHunk": "@@ -4,30 +4,28 @@\n \n import com.bakdata.conquery.models.config.ConqueryConfig;\n import com.bakdata.conquery.models.config.ParserConfig;\n+import com.bakdata.conquery.models.events.stores.base.LongStore;\n import com.bakdata.conquery.models.exceptions.ParsingException;\n import com.bakdata.conquery.models.types.CType;\n import com.bakdata.conquery.models.types.parser.Decision;\n-import com.bakdata.conquery.models.types.parser.NoopTransformer;\n import com.bakdata.conquery.models.types.parser.Parser;\n-import com.bakdata.conquery.models.types.parser.Transformer;\n import com.bakdata.conquery.models.types.specific.MoneyTypeLong;\n import com.bakdata.conquery.models.types.specific.MoneyTypeVarInt;\n import com.bakdata.conquery.models.types.specific.VarIntType;\n import com.bakdata.conquery.util.NumberParsing;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import lombok.Getter;\n-import lombok.NonNull;\n import lombok.ToString;\n \n @ToString(callSuper = true)\n public class MoneyParser extends Parser<Long> {\n \n+\t@JsonIgnore\n+\t@Getter(lazy = true)\n+\tprivate final BigDecimal moneyFactor = BigDecimal.valueOf(10)\n+\t\t\t\t\t\t\t\t\t\t\t\t\t .pow(ConqueryConfig.getInstance().getLocale().getCurrency().getDefaultFractionDigits());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI1MzY4OA==", "bodyText": "Dieses Lambda hatte ich doch schonmal entfernt.", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r526253688", "createdAt": "2020-11-18T17:03:16Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/string/StringParser.java", "diffHunk": "@@ -1,58 +1,55 @@\n package com.bakdata.conquery.models.types.parser.specific.string;\n \n-import java.util.Collections;\n import java.util.Comparator;\n import java.util.EnumSet;\n-import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.Objects;\n-import java.util.UUID;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n import com.bakdata.conquery.models.config.ParserConfig;\n+import com.bakdata.conquery.models.events.stores.base.BooleanStore;\n import com.bakdata.conquery.models.exceptions.ParsingException;\n-import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n-import com.bakdata.conquery.models.identifiable.ids.specific.DictionaryId;\n+import com.bakdata.conquery.models.preproc.ColumnDescription;\n import com.bakdata.conquery.models.types.CType;\n import com.bakdata.conquery.models.types.parser.Decision;\n import com.bakdata.conquery.models.types.parser.Parser;\n-import com.bakdata.conquery.models.types.parser.Transformer;\n-import com.bakdata.conquery.models.types.parser.specific.VarIntParser;\n import com.bakdata.conquery.models.types.parser.specific.string.TypeGuesser.Guess;\n-import com.bakdata.conquery.models.types.specific.AStringType;\n-import com.bakdata.conquery.models.types.specific.StringTypeEncoded.Encoding;\n-import com.bakdata.conquery.models.types.specific.StringTypePrefix;\n-import com.bakdata.conquery.models.types.specific.StringTypeSingleton;\n-import com.bakdata.conquery.models.types.specific.StringTypeSuffix;\n-import com.bakdata.conquery.models.types.specific.VarIntType;\n+import com.bakdata.conquery.models.types.specific.string.StringType;\n+import com.bakdata.conquery.models.types.specific.string.StringTypeEncoded.Encoding;\n+import com.bakdata.conquery.models.types.specific.string.StringTypePrefix;\n+import com.bakdata.conquery.models.types.specific.string.StringTypeSingleton;\n+import com.bakdata.conquery.models.types.specific.string.StringTypeSuffix;\n import com.google.common.base.Strings;\n+import com.google.common.collect.BiMap;\n+import com.google.common.collect.HashBiMap;\n import com.jakewharton.byteunits.BinaryByteUnit;\n import lombok.Getter;\n-import lombok.NonNull;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n \n-@Slf4j @Getter\n+@Slf4j\n+@Getter\n public class StringParser extends Parser<Integer> {\n \n-\tprivate DictionaryId dictionaryId = new DictionaryId(new DatasetId(\"null\"), UUID.randomUUID().toString());\n-\tprivate VarIntParser indexType = new VarIntParser(); \n-\tprivate Map<String, Integer> strings = new LinkedHashMap<>();\n+\tprivate final String name;\n+\n+\tprivate BiMap<String, Integer> strings = HashBiMap.create();\n+\n \tprivate List<byte[]> decoded;\n \tprivate Encoding encoding;\n \tprivate String prefix = null;\n \tprivate String suffix = null;\n \n-\tpublic StringParser(ParserConfig config) {\n-\n+\tpublic StringParser(ColumnDescription description, ParserConfig config) {\n+\t\tthis.name = description.getName();\n \t}\n \n \t@Override\n \tprotected Integer parseValue(String value) throws ParsingException {\n-\t\treturn strings.computeIfAbsent(value, v-> {\n+\t\treturn strings.computeIfAbsent(value, v -> {\n \t\t\t//new values\n \n \t\t\t//set longest common prefix and suffix", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2MjI2Mw==", "bodyText": "Doku", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r526262263", "createdAt": "2020-11-18T17:14:47Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/types/specific/ChainedStringType.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.bakdata.conquery.models.types.specific;\n+\n+import java.util.function.Consumer;\n+\n+import javax.annotation.Nonnull;\n+\n+import com.bakdata.conquery.io.xodus.NamespacedStorage;\n+import com.bakdata.conquery.models.dictionary.Dictionary;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DictionaryId;\n+import com.bakdata.conquery.models.types.specific.string.StringType;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+@Getter @Setter\n+@ToString\n+public abstract class ChainedStringType extends StringType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2NDU2Nw==", "bodyText": "Warum implementiert CType ColumnStore?", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r526264567", "createdAt": "2020-11-18T17:17:57Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/types/specific/MoneyTypeLong.java", "diffHunk": "@@ -4,30 +4,53 @@\n \n import com.bakdata.conquery.io.cps.CPSType;\n import com.bakdata.conquery.models.config.ConqueryConfig;\n+import com.bakdata.conquery.models.events.ColumnStore;\n+import com.bakdata.conquery.models.events.stores.base.LongStore;\n import com.bakdata.conquery.models.types.CType;\n import com.bakdata.conquery.models.types.MajorTypeId;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n-\n import lombok.Getter;\n \n-@CPSType(base=CType.class, id=\"MONEY_LONG\")\n+@CPSType(base = ColumnStore.class, id = \"MONEY_LONG\")\n+@Getter\n public class MoneyTypeLong extends CType<Long, Long> {\n \n-\t@JsonIgnore @Getter(lazy = true)\n+\t@JsonIgnore\n+\t@Getter(lazy = true)\n \tprivate final BigDecimal moneyFactor = BigDecimal.valueOf(10)\n-\t\t.pow(ConqueryConfig.getInstance().getLocale().getCurrency().getDefaultFractionDigits());\n-\t\n-\tpublic MoneyTypeLong() {\n-\t\tsuper(MajorTypeId.MONEY, long.class);\n-\t}\n-\t\n-\t@Override\n-\tpublic boolean canStoreNull() {\n-\t\treturn true;\n+\t\t\t\t\t\t\t\t\t\t\t\t\t .pow(ConqueryConfig.getInstance().getLocale().getCurrency().getDefaultFractionDigits());\n+\n+\tprivate final LongStore store;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2NjkwMg==", "bodyText": "Achtung aus kommentiert", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r526266902", "createdAt": "2020-11-18T17:21:16Z", "author": {"login": "thoniTUB"}, "path": "backend/src/test/java/com/bakdata/conquery/models/concepts/tree/perf/CachedGroovyPerformanceTest.java", "diffHunk": "@@ -1,86 +1,86 @@\n-package com.bakdata.conquery.models.concepts.tree.perf;\n-\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-import com.bakdata.conquery.models.concepts.tree.ConceptTreeCache;\n-import com.bakdata.conquery.models.concepts.tree.TreeChildPrefixIndex;\n-import com.bakdata.conquery.models.exceptions.ConceptConfigurationException;\n-import com.bakdata.conquery.models.types.specific.StringTypeDictionary;\n-import com.bakdata.conquery.models.types.specific.StringTypeEncoded;\n-import com.bakdata.conquery.models.types.specific.StringTypeEncoded.Encoding;\n-import com.bakdata.conquery.models.types.specific.VarIntTypeInt;\n-import com.bakdata.conquery.util.CalculatedValue;\n-import com.bakdata.conquery.util.dict.SuccinctTrie;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.commons.lang3.RandomUtils;\n-\n-@Slf4j\n-public class CachedGroovyPerformanceTest extends AbstractSearchPerformanceTest<Integer> {\n-\n-\tprivate SuccinctTrie dict;\n-\tprivate ConceptTreeCache cache;\n-\tprivate List<Integer> ids;\n-\tprivate StringTypeEncoded type;\n-\n-\t@Override\n-\tpublic String getName() {\n-\t\treturn getClass().getSimpleName();\n-\t}\n-\n-\t@Override\n-\tpublic int[] getIterations(){\n-\t\treturn new int[]{1000, 10000, 100000, 500000};\n-\t}\n-\n-\n-\t@Override\n-\tpublic String getConceptSourceName() {\n-\t\treturn \"prefixes.concept.json\";\n-\t}\n-\n-\tpublic List<byte[]> getTestStrings() {\n-\t\treturn Arrays.asList(\n-\t\t\t\"63F\", \"J14B\", \"N01C\", \"I10C\", \"L36Z\", \"960Z\", \"M10B\", \"X07A\", \"F06E\", \"P04C\", \"R63E\", \"O65B\", \"G77B\", \"F60B\", \"I65A\", \"F57Z\", \"R16Z\", \"R01D\", \"I23B\", \"A11E\", \"B44D\", \"F14A\", \"N62B\", \"Q61C\", \"I43B\", \"L43Z\", \"B36A\", \"F12F\", \"Z64B\", \"G07B\"\n-\t\t)\n-\t\t.stream()\n-\t\t.map(String::getBytes)\n-\t\t.collect(Collectors.toList());\n-\t}\n-\n-\t@Override\n-\tpublic List<Integer> getTestKeys() {\n-\t\treturn ids;\n-\t}\n-\n-\t@Override\n-\tpublic void postprocessConcepts() {\n-\t\tdict = new SuccinctTrie();\n-\n-\t\tids = getTestStrings().stream().map(dict::add).collect(Collectors.toList());\n-\t\tdict.compress();\n-\n-\t\tTreeChildPrefixIndex.putIndexInto(newConcept);\n-\t\tTreeChildPrefixIndex.putIndexInto(referenceConcept);\n-\n-\t\ttype = new StringTypeEncoded(new StringTypeDictionary(new VarIntTypeInt(-1, +1)), Encoding.UTF8);\n-\t\ttype.getSubType().setDictionary(dict);\n-\t\tnewConcept.initializeIdCache(type, importId);\n-\n-\t\tcache = newConcept.getCache(importId);\n-\t}\n-\n-\t@Override\n-\tpublic void referenceSearch(Integer key) throws ConceptConfigurationException {\n-\t\treferenceConcept.findMostSpecificChild(type.getElement(key),  new CalculatedValue<>(() -> Collections.singletonMap(\"distinction\", RandomUtils.nextInt(8, 19 ))));\n-\t}\n-\n-\t@Override\n-\tpublic void newSearch(Integer key) throws ConceptConfigurationException {\n-\t\tcache.findMostSpecificChild(key, type.getElement(key), new CalculatedValue<>(() -> Collections.singletonMap(\"distinction\", RandomUtils.nextInt(8, 19 ))));\n-\t}\n-\n-}\n-\n+//package com.bakdata.conquery.models.concepts.tree.perf;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2NzE4Mw==", "bodyText": "Achtung aus kommentiert", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r526267183", "createdAt": "2020-11-18T17:21:38Z", "author": {"login": "thoniTUB"}, "path": "backend/src/test/java/com/bakdata/conquery/models/concepts/tree/PrefixIndexedTest.java", "diffHunk": "@@ -1,180 +1,180 @@\n-package com.bakdata.conquery.models.concepts.tree;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-import java.io.IOException;\n-import java.util.Collections;\n-import java.util.Map;\n-import java.util.stream.Stream;\n-\n-import com.bakdata.conquery.io.jackson.Jackson;\n-import com.bakdata.conquery.models.concepts.Concept;\n-import com.bakdata.conquery.models.datasets.Column;\n-import com.bakdata.conquery.models.datasets.Dataset;\n-import com.bakdata.conquery.models.datasets.Table;\n-import com.bakdata.conquery.models.exceptions.ConfigurationException;\n-import com.bakdata.conquery.models.exceptions.JSONException;\n-import com.bakdata.conquery.models.identifiable.CentralRegistry;\n-import com.bakdata.conquery.models.identifiable.ids.specific.ImportId;\n-import com.bakdata.conquery.models.types.MajorTypeId;\n-import com.bakdata.conquery.models.types.specific.StringTypeDictionary;\n-import com.bakdata.conquery.models.types.specific.StringTypeEncoded;\n-import com.bakdata.conquery.models.types.specific.StringTypeEncoded.Encoding;\n-import com.bakdata.conquery.models.types.specific.VarIntTypeInt;\n-import com.bakdata.conquery.models.worker.SingletonNamespaceCollection;\n-import com.bakdata.conquery.util.CalculatedValue;\n-import com.bakdata.conquery.util.dict.SuccinctTrie;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n-import com.github.powerlibraries.io.In;\n-import io.dropwizard.jersey.validation.Validators;\n-import lombok.extern.slf4j.Slf4j;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.Arguments;\n-import org.junit.jupiter.params.provider.MethodSource;\n-\n-@Slf4j\n-public class PrefixIndexedTest {\n-\n-\tprivate static final String CONCEPT_SOURCE = \"prefixes.concept.json\";\n-\n-\tprivate static SuccinctTrie dict;\n-\tprivate static TreeConcept indexedConcept;\n-\tprivate static TreeConcept oldConcept;\n-\tprivate static ImportId importId;\n-\tprivate static StringTypeEncoded type;\n-\t\n-\n-\tpublic static Stream<Arguments> getTestKeys() {\n-\t\tCalculatedValue<Map<String, Object>> rowMap = new CalculatedValue<>(Collections::emptyMap);\n-\n-\t\treturn Stream.of(\n-\t\t\t\t\"A047b\" , \"A0470\" , \"A0471\" , \"A0472\" , \"A0473\" , \"A0479\" , \"A3180\" , \"A3188\" , \"A4151\" , \"A4152\" , \"A4158\" , \"B2580\" , \"B2588\" , \"B3781\" , \"B3788\" , \"B9541\" , \"B9542\" , \"B9548\" , \"B9590\" , \"B9591\" , \"B9681\" , \"B9688\" , \"C4101\" , \"C4102\" , \"C4130\" , \"C4131\" , \"C4132\" , \"C7981\" , \"C7982\" , \"C7983\" , \"C7984\" , \"O029\" , \"Z935\" , \"M1202\" , \"E011\" , \"D370\" , \"P13\" , \"G259\" , \"J9921\" , \"I831\" , \"H950\" , \"E8331\" , \"H511\" , \"I11\" , \"S252\" , \"M0704\"\n-\t\t)\n-\t\t\t\t\t.map(key -> Arguments.of(key, rowMap));\n-\t}\n-\n-\n-\t@BeforeAll\n-\tpublic static void init() throws IOException, JSONException, ConfigurationException {\n-\t\tdict = new SuccinctTrie();\n-\n-\t\tgetTestKeys()\n-\t\t\t.map(args -> (String) args.get()[0])\n-\t\t\t.map(String::getBytes)\n-\t\t\t.forEach(dict::add);\n-\t\t\n-\t\tdict.compress();\n-\n-\t\tObjectNode node = Jackson.MAPPER.readerFor(ObjectNode.class).readValue(In.resource(PrefixIndexedTest.class, CONCEPT_SOURCE).asStream());\n-\n-\t\t// load concept tree from json\n-\t\tCentralRegistry registry = new CentralRegistry();\n-\n-\n-\t\tTable table = new Table();\n-\n-\t\ttable.setName(\"the_table\");\n-\t\tDataset dataset = new Dataset();\n-\n-\t\tdataset.setName(\"the_dataset\");\n-\n-\t\tregistry.register(dataset);\n-\n-\t\ttable.setDataset(dataset);\n-\n-\t\tColumn column = new Column();\n-\t\tcolumn.setName(\"the_column\");\n-\t\tcolumn.setType(MajorTypeId.STRING);\n-\n-\t\ttable.setColumns(new Column[]{column});\n-\t\tcolumn.setTable(table);\n-\n-\t\tregistry.register(table);\n-\t\tregistry.register(column);\n-\n-\t\timportId = new ImportId(table.getId(), \"import\");\n-\n-\t\t// load tree twice to to avoid references\n-\n-\t\tindexedConcept = new SingletonNamespaceCollection(registry).injectInto(dataset.injectInto(Jackson.MAPPER.readerFor(Concept.class))).readValue(node);\n-\n-\t\tindexedConcept.setDataset(dataset.getId());\n-\t\tindexedConcept.initElements(Validators.newValidator());\n-\n-\n-\t\tTreeChildPrefixIndex.putIndexInto(indexedConcept);\n-\t\ttype = new StringTypeEncoded(new StringTypeDictionary(new VarIntTypeInt(-1, +1)), Encoding.UTF8);\n-\t\ttype.getSubType().setDictionary(dict);\n-\t\tindexedConcept.initializeIdCache(type, importId);\n-\n-\t\toldConcept = new SingletonNamespaceCollection(registry).injectInto(dataset.injectInto(Jackson.MAPPER.readerFor(Concept.class))).readValue(node);\n-\n-\t\toldConcept.setDataset(dataset.getId());\n-\t\toldConcept.initElements(Validators.newValidator());\n-\n-\t\tassertThat(indexedConcept.getChildIndex()).isNotNull();\n-\t\tassertThat(oldConcept.getChildIndex()).isNull();\n-\t}\n-\n-\t@ParameterizedTest(name = \"{index}: {0}\")\n-\t@MethodSource(\"getTestKeys\")\n-\tpublic void basic(String key, CalculatedValue<Map<String, Object>> rowMap) throws JSONException {\n-\t\tlog.trace(\"Searching for {}\", key);\n-\n-\t\tConceptTreeChild idxResult = indexedConcept.findMostSpecificChild(key, rowMap);\n-\t\tConceptTreeChild oldResult = oldConcept.findMostSpecificChild(key, rowMap);\n-\n-\t\tif(oldResult == null) {\n-\t\t\tassertThat(idxResult).isNull();\n-\t\t}\n-\t\telse {\n-\t\t\tlog.trace(\"index_result: {}\", idxResult.getId());\n-\t\t\tlog.trace(\"normal_result: {}\", oldResult.getId());\n-\t\t\tassertThat(oldResult.getId())\n-\t\t\t\t\t.isEqualTo(idxResult.getId());\n-\t\t}\n-\t}\n-\n-\t@ParameterizedTest\n-\t@MethodSource(\"getTestKeys\")\n-\tpublic void withTail(String key, CalculatedValue<Map<String, Object>> rowMap) throws JSONException {\n-\t\tString keyWithTail = key + \".someTextAfterTheActualText\";\n-\n-\t\tlog.trace(\"Searching for {}\", key);\n-\n-\t\tConceptTreeChild idxResultTail = indexedConcept.findMostSpecificChild(keyWithTail, rowMap);\n-\t\tConceptTreeChild idxResult = indexedConcept.findMostSpecificChild(key, rowMap);\n-\n-\t\tassertThat(idxResult.getId()).isEqualTo(idxResultTail.getId());\n-\t}\n-\n-\t@ParameterizedTest\n-\t@MethodSource(\"getTestKeys\")\n-\tpublic void cached(String key, CalculatedValue<Map<String, Object>> rowMap) throws JSONException {\n-\t\tlog.trace(\"Searching for {}\", key);\n-\n-\t\tConceptTreeChild reference = indexedConcept.findMostSpecificChild(key, rowMap);\n-\t\tConceptTreeChild cached = indexedConcept.getCache(importId).findMostSpecificChild(type.getId(key), type.getElement(type.getId(key)), rowMap);\n-\t\tConceptTreeChild cached2 = indexedConcept.getCache(importId).findMostSpecificChild(type.getId(key), type.getElement(type.getId(key)), rowMap);\n-\n-\t\tassertThat(reference.getId())\n-\t\t\t\t.describedAs(\"%s hierarchical name\", key)\n-\t\t\t\t.isEqualTo(cached2.getId())\n-\t\t\t\t.isEqualTo(cached.getId())\n-\t\t;\n-\t}\n-\n-\n-\t@Test\n-\tpublic void missing() throws JSONException {\n-\t\tfinal String key = \"valueThatIsNotPresent\";\n-\n-\t\tlog.trace(\"Searching for Missing value {}\", key);\n-\n-\t\tConceptTreeChild idxResult = indexedConcept.findMostSpecificChild(key, new CalculatedValue<>(Collections::emptyMap));\n-\n-\t\tassertThat(idxResult).isNull();\n-\t}\n-}\n\\ No newline at end of file\n+//package com.bakdata.conquery.models.concepts.tree;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2NzQ2OA==", "bodyText": "Achtung aus kommentiert", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r526267468", "createdAt": "2020-11-18T17:21:59Z", "author": {"login": "thoniTUB"}, "path": "backend/src/test/java/com/bakdata/conquery/models/concepts/tree/perf/CachedPrefixPerformanceTest.java", "diffHunk": "@@ -1,88 +1,88 @@\n-package com.bakdata.conquery.models.concepts.tree.perf;\n-\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import com.bakdata.conquery.models.concepts.tree.ConceptTreeCache;\n-import com.bakdata.conquery.models.concepts.tree.TreeChildPrefixIndex;\n-import com.bakdata.conquery.models.exceptions.ConceptConfigurationException;\n-import com.bakdata.conquery.models.types.specific.StringTypeDictionary;\n-import com.bakdata.conquery.models.types.specific.StringTypeEncoded;\n-import com.bakdata.conquery.models.types.specific.StringTypeEncoded.Encoding;\n-import com.bakdata.conquery.models.types.specific.VarIntTypeInt;\n-import com.bakdata.conquery.util.CalculatedValue;\n-import com.bakdata.conquery.util.dict.SuccinctTrie;\n-import lombok.extern.slf4j.Slf4j;\n-\n-\n-@Slf4j\n-public class CachedPrefixPerformanceTest extends AbstractSearchPerformanceTest<Integer> {\n-\n-\tprivate final CalculatedValue<Map<String, Object>> rowMap = new CalculatedValue<>(Collections::emptyMap);\n-\n-\tprivate SuccinctTrie dict;\n-\tprivate ConceptTreeCache cache;\n-\tprivate List<Integer> ids;\n-\tprivate StringTypeEncoded type;\n-\n-\t@Override\n-\tpublic int[] getIterations(){\n-\t\treturn new int[]{1000, 10000, 100000, 500000};\n-\t}\n-\n-\t@Override\n-\tpublic String getName() {\n-\t\treturn getClass().getSimpleName();\n-\t}\n-\n-\t@Override\n-\tpublic String getConceptSourceName() {\n-\t\treturn \"prefixes.concept.json\";\n-\t}\n-\n-\tpublic List<byte[]> getTestStrings() {\n-\t\treturn Arrays.asList(\n-\t\t\t\t\"A047b\", \"A0470\", \"A0471\", \"A0472\", \"A0473\", \"A0479\", \"A3180\", \"A3188\", \"A4151\", \"A4152\", \"A4158\", \"B2580\", \"B2588\", \"B3781\", \"B3788\", \"B9541\", \"B9542\", \"B9548\", \"B9590\", \"B9591\", \"B9681\", \"B9688\", \"C4101\", \"C4102\", \"C4130\", \"C4131\", \"C4132\", \"C7981\", \"C7982\", \"C7983\", \"C7984\", \"O029\", \"Z935\", \"M1202\", \"E011\", \"D370\", \"P13\", \"G259\", \"J9921\", \"I831\", \"H950\", \"E8331\", \"H511\", \"I11\", \"S252\", \"M0704\"\n-\t\t)\n-\t\t.stream()\n-\t\t.map(String::getBytes)\n-\t\t.collect(Collectors.toList());\n-\t}\n-\n-\t@Override\n-\tpublic List<Integer> getTestKeys() {\n-\t\treturn ids;\n-\t}\n-\n-\n-\t@Override\n-\tpublic void postprocessConcepts() {\n-\t\tdict = new SuccinctTrie();\n-\n-\t\tids = getTestStrings().stream().map(dict::add).collect(Collectors.toList());\n-\t\tdict.compress();\n-\n-\t\tTreeChildPrefixIndex.putIndexInto(newConcept);\n-\t\tTreeChildPrefixIndex.putIndexInto(referenceConcept);\n-\n-\t\ttype = new StringTypeEncoded(new StringTypeDictionary(new VarIntTypeInt(-1, +1)), Encoding.UTF8);\n-\t\ttype.getSubType().setDictionary(dict);\n-\t\tnewConcept.initializeIdCache(type, importId);\n-\t\t\n-\t\tcache = newConcept.getCache(importId);\n-\t}\n-\n-\t@Override\n-\tpublic void referenceSearch(Integer key) throws ConceptConfigurationException {\n-\t\treferenceConcept.findMostSpecificChild(type.getElement(key), rowMap);\n-\t}\n-\n-\t@Override\n-\tpublic void newSearch(Integer key) throws ConceptConfigurationException {\n-\t\tcache.findMostSpecificChild(key, type.getElement(key), rowMap);\n-\t}\n-}\n-\n+//package com.bakdata.conquery.models.concepts.tree.perf;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2Nzc0Ng==", "bodyText": "Achtung aus kommentiert", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r526267746", "createdAt": "2020-11-18T17:22:20Z", "author": {"login": "thoniTUB"}, "path": "backend/src/test/java/com/bakdata/conquery/models/events/generation/GenerationTests.java", "diffHunk": "@@ -1,290 +1,290 @@\n-package com.bakdata.conquery.models.events.generation;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.api.Assertions.assertThatCode;\n-\n-import java.io.IOException;\n-import java.lang.reflect.InvocationTargetException;\n-import java.math.BigDecimal;\n-import java.time.LocalDate;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Random;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.Future;\n-import java.util.concurrent.TimeUnit;\n-import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n-import java.util.stream.Stream;\n-\n-import com.bakdata.conquery.io.jackson.serializer.SerializationTestUtil;\n-import com.bakdata.conquery.models.common.CDate;\n-import com.bakdata.conquery.models.config.ConqueryConfig;\n-import com.bakdata.conquery.models.config.ParserConfig;\n-import com.bakdata.conquery.models.datasets.Column;\n-import com.bakdata.conquery.models.datasets.Import;\n-import com.bakdata.conquery.models.datasets.ImportColumn;\n-import com.bakdata.conquery.models.events.Bucket;\n-import com.bakdata.conquery.models.exceptions.JSONException;\n-import com.bakdata.conquery.models.identifiable.CentralRegistry;\n-import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n-import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n-import com.bakdata.conquery.models.types.MajorTypeId;\n-import com.bakdata.conquery.models.types.parser.Decision;\n-import com.bakdata.conquery.models.types.parser.Parser;\n-import com.bakdata.conquery.models.types.parser.specific.string.StringParser;\n-import com.bakdata.conquery.models.types.specific.AStringType;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.commons.io.output.NullOutputStream;\n-import org.assertj.core.data.Offset;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.Arguments;\n-import org.junit.jupiter.params.provider.MethodSource;\n-\n-\n-@Slf4j\n-public class GenerationTests {\n-\n-\tprivate static final double requiredPrecision = Math.ulp(100f);\n-\n-\tpublic static Stream<Arguments> createRandomContent() {\n-\t\treturn IntStream\n-\t\t\t\t\t   .of(100)\n-\t\t\t\t\t   .mapToObj(numberOfValues -> {\n-\t\t\t\t\t\t\t\t\t Random r = new Random(7);\n-\t\t\t\t\t\t\t\t\t ArrayList<Object[]> arrays = new ArrayList<>();\n-\t\t\t\t\t\t\t\t\t for (int i = 0; i < numberOfValues; i++) {\n-\t\t\t\t\t\t\t\t\t\t Object[] event = new Object[20];\n-\t\t\t\t\t\t\t\t\t\t arrays.add(event);\n-\n-\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n-\t\t\t\t\t\t\t\t\t\t\t event[0] = (CDate.ofLocalDate(LocalDate.now()));\n-\t\t\t\t\t\t\t\t\t\t }\n-\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n-\t\t\t\t\t\t\t\t\t\t\t event[1] = Long.toHexString(r.nextLong());\n-\t\t\t\t\t\t\t\t\t\t }\n-\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n-\t\t\t\t\t\t\t\t\t\t\t event[2] = Integer.valueOf(r.nextInt()).toString();\n-\t\t\t\t\t\t\t\t\t\t }\n-\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n-\t\t\t\t\t\t\t\t\t\t\t event[3] = Integer.valueOf(r.nextInt()).toString();\n-\t\t\t\t\t\t\t\t\t\t }\n-\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n-\t\t\t\t\t\t\t\t\t\t\t event[4] = Long.valueOf(r.nextInt());\n-\t\t\t\t\t\t\t\t\t\t }\n-\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n-\t\t\t\t\t\t\t\t\t\t\t event[5] = Integer.valueOf((byte) r.nextInt()).toString();\n-\t\t\t\t\t\t\t\t\t\t }\n-\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n-\t\t\t\t\t\t\t\t\t\t\t event[6] = Integer.valueOf(r.nextInt()).toString();\n-\t\t\t\t\t\t\t\t\t\t }\n-\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n-\t\t\t\t\t\t\t\t\t\t\t event[7] = Long.valueOf((byte) r.nextInt());\n-\t\t\t\t\t\t\t\t\t\t }\n-\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n-\t\t\t\t\t\t\t\t\t\t\t event[8] = Long.valueOf((byte) r.nextInt());\n-\t\t\t\t\t\t\t\t\t\t }\n-\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n-\t\t\t\t\t\t\t\t\t\t\t event[9] = Integer.valueOf(r.nextInt()).toString();\n-\t\t\t\t\t\t\t\t\t\t }\n-\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n-\t\t\t\t\t\t\t\t\t\t\t event[10] = BigDecimal.valueOf(r.nextInt(4), r.nextInt(10) - 5);\n-\t\t\t\t\t\t\t\t\t\t }\n-\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n-\t\t\t\t\t\t\t\t\t\t\t event[11] = Long.valueOf((byte) r.nextInt());\n-\t\t\t\t\t\t\t\t\t\t }\n-\t\t\t\t\t\t\t\t\t\t event[12] = Long.valueOf(r.nextInt());\n-\t\t\t\t\t\t\t\t\t\t event[13] = Long.valueOf(r.nextInt());\n-\t\t\t\t\t\t\t\t\t\t //event[14] = null;\n-\t\t\t\t\t\t\t\t\t\t event[15] = Long.valueOf(r.nextInt());\n-\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n-\t\t\t\t\t\t\t\t\t\t\t event[16] = BigDecimal.valueOf(r.nextInt(4), r.nextInt(120) - 60);\n-\t\t\t\t\t\t\t\t\t\t }\n-\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n-\t\t\t\t\t\t\t\t\t\t\t event[17] = Integer.toString(r.nextInt(800));\n-\t\t\t\t\t\t\t\t\t\t }\n-\t\t\t\t\t\t\t\t\t\t // Inside ULP\n-\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n-\t\t\t\t\t\t\t\t\t\t\t event[18] = r.nextDouble() * 99d;\n-\t\t\t\t\t\t\t\t\t\t }\n-\t\t\t\t\t\t\t\t\t\t // Outside ULP\n-\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n-\t\t\t\t\t\t\t\t\t\t\t event[19] = r.nextDouble() * 1000d;\n-\t\t\t\t\t\t\t\t\t\t }\n-\n-\t\t\t\t\t\t\t\t\t }\n-\t\t\t\t\t\t\t\t\t arrays.trimToSize();\n-\n-\t\t\t\t\t\t\t\t\t return Arguments.of(numberOfValues, arrays);\n-\t\t\t\t\t\t\t\t }\n-\t\t\t\t\t   );\n-\t}\n-\n-\t@ParameterizedTest(name = \"{0}\")\n-\t@MethodSource(\"createRandomContent\")\n-\tpublic void testParallelSerialization(int numberOfValues, List<Object[]> arrays)\n-\t\t\tthrows ClassNotFoundException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, IOException, NoSuchMethodException, SecurityException, JSONException, InterruptedException {\n-\t\tExecutorService pool = Executors.newFixedThreadPool(100);\n-\t\tList<Future<?>> futures = new ArrayList<>();\n-\t\tfor (int i = 0; i < 30; i++) {\n-\t\t\tList<Object[]> l = arrays.stream().map(v -> Arrays.copyOf(v, v.length)).collect(Collectors.toList());\n-\t\t\tfutures.add(pool.submit(() -> generateBucket(l)));\n-\t\t}\n-\t\tpool.shutdown();\n-\t\tfor (Future<?> f : futures) {\n-\t\t\tassertThatCode(() -> f.get()).doesNotThrowAnyException();\n-\t\t}\n-\t\tpool.awaitTermination(1, TimeUnit.HOURS);\n-\t}\n-\n-\tpublic Bucket generateBucket(List<Object[]> arrays) throws IOException {\n-\t\tfinal ParserConfig parserConfig = new ParserConfig();\n-\t\tparserConfig.setMinPrecision(requiredPrecision);\n-\n-\t\tParser[] parser = new Parser[]{\n-\t\t\t\tMajorTypeId.DATE.createParser(parserConfig),\n-\t\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n-\t\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n-\t\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n-\t\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n-\t\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n-\t\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n-\t\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n-\t\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n-\t\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n-\t\t\t\tMajorTypeId.DECIMAL.createParser(parserConfig),\n-\t\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n-\t\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n-\t\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n-\t\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n-\t\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n-\t\t\t\tMajorTypeId.DECIMAL.createParser(parserConfig),\n-\t\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n-\t\t\t\tMajorTypeId.REAL.createParser(parserConfig),\n-\t\t\t\tMajorTypeId.REAL.createParser(parserConfig)\n-\t\t};\n-\n-\t\tassertThat(parser.length)\n-\t\t\t\t.describedAs(\"Length of Parsers and Rows.\")\n-\t\t\t\t.isEqualTo(arrays.get(0).length);\n-\n-\t\tfor (Object[] event : arrays) {\n-\t\t\tfor (int i = 0; i < parser.length; i++) {\n-\t\t\t\ttry {\n-\t\t\t\t\t//only parse strings, this test otherwise already creates parsed values\n-\t\t\t\t\tif (parser[i] instanceof StringParser && event[i] != null) {\n-\t\t\t\t\t\tevent[i] = parser[i].parse((String) event[i]);\n-\t\t\t\t\t}\n-\t\t\t\t\tparser[i].addLine(event[i]);\n-\t\t\t\t}\n-\t\t\t\tcatch (Exception e) {\n-\t\t\t\t\tthrow new IllegalArgumentException(\"Column \" + i, e);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfinal int entityBucketSize = ConqueryConfig.getInstance().getCluster().getEntityBucketSize();\n-\n-\t\tImport imp = new Import(entityBucketSize);\n-\t\timp.setTable(new TableId(new DatasetId(\"test_dataset\"), \"table\"));\n-\t\timp.setName(\"import\");\n-\t\timp.setColumns(IntStream.range(0, parser.length)\n-\t\t\t\t\t\t\t\t.mapToObj(i -> column(imp, i))\n-\t\t\t\t\t\t\t\t.toArray(ImportColumn[]::new)\n-\t\t);\n-\n-\t\tDecision[] decisions = Arrays.stream(parser).map(Parser::findBestType).toArray(Decision[]::new);\n-\t\tfor (int i = 0; i < parser.length; i++) {\n-\t\t\timp.getColumns()[i].setType(decisions[i].getType());\n-\t\t\tlog.info(\"{}: {} mapped to {}\", imp.getColumns()[i], parser[i], imp.getColumns()[i].getType());\n-\t\t}\n-\n-\t\tList<Object[]> result = new ArrayList<>(arrays.size());\n-\t\tfor (Object[] event : arrays) {\n-\t\t\tObject[] line = Arrays.copyOf(event, event.length);\n-\t\t\tfor (int i = 0; i < imp.getColumns().length; i++) {\n-\t\t\t\tif (event[i] != null) {\n-\t\t\t\t\tline[i] = decisions[i].getTransformer().transform(event[i]);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tresult.add(line);\n-\t\t}\n-\t\tfor (int i = 0; i < imp.getColumns().length; i++) {\n-\t\t\timp.getColumns()[i].getType().writeHeader(new NullOutputStream());\n-\t\t}\n-\n-\t\treturn imp.getBlockFactory().create(imp, result);\n-\t}\n-\n-\tprivate ImportColumn column(Import imp, int pos) {\n-\t\tImportColumn col = new ImportColumn();\n-\t\tcol.setName(String.format(\"@column%02d\", pos));\n-\t\tcol.setParent(imp);\n-\t\tcol.setPosition(pos);\n-\t\treturn col;\n-\t}\n-\n-\t@ParameterizedTest(name = \"{0}\")\n-\t@MethodSource(\"createRandomContent\")\n-\tpublic void testSerialization(int numberOfValues, List<Object[]> arrays)\n-\t\t\tthrows ClassNotFoundException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, IOException, NoSuchMethodException, SecurityException, JSONException {\n-\t\tList<Object[]> originalArrays = new ArrayList<>(arrays);\n-\t\toriginalArrays.replaceAll(v -> Arrays.copyOf(v, v.length));\n-\n-\t\tBucket bucket = generateBucket(arrays);\n-\t\tfor (int i = 0; i < arrays.size(); i++) {\n-\t\t\tfor (int c = 0; c < arrays.get(i).length; c++) {\n-\t\t\t\tColumn fake = new Column();\n-\t\t\t\tfake.setPosition(c);\n-\n-\t\t\t\tObject orig = originalArrays.get(i)[c];\n-\t\t\t\tString message = \"checking \" + c + \" \" + bucket.getImp().getColumns()[c].getType() + \":\" + i + \" = \" + orig;\n-\n-\t\t\t\tif (orig == null) {\n-\t\t\t\t\tassertThat(bucket.has(i, fake))\n-\t\t\t\t\t\t\t.as(message)\n-\t\t\t\t\t\t\t.isFalse();\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\tImportColumn impCol = bucket.getImp().getColumns()[c];\n-\t\t\t\t\tassertThat(bucket.has(i, fake))\n-\t\t\t\t\t\t\t.as(message + \" is not null\")\n-\t\t\t\t\t\t\t.isTrue();\n-\n-\t\t\t\t\tif (orig instanceof BigDecimal) {\n-\t\t\t\t\t\tassertThat((BigDecimal) bucket.getAsObject(i, fake))\n-\t\t\t\t\t\t\t\t.as(message)\n-\t\t\t\t\t\t\t\t.usingComparator(BigDecimal::compareTo)\n-\t\t\t\t\t\t\t\t.isEqualTo(orig);\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (impCol.getType().getTypeId() == MajorTypeId.STRING) {\n-\t\t\t\t\t\tassertThat(((AStringType<?>) impCol.getType()).getElement(bucket.getString(i, fake)))\n-\t\t\t\t\t\t\t\t.as(message)\n-\t\t\t\t\t\t\t\t.isEqualTo(orig);\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (impCol.getType().getTypeId() == MajorTypeId.REAL) {\n-\t\t\t\t\t\tassertThat(bucket.getReal(i, fake))\n-\t\t\t\t\t\t\t\t.as(message)\n-\t\t\t\t\t\t\t\t.isCloseTo((Double) orig, Offset.offset(requiredPrecision));\n-\t\t\t\t\t}\n-\t\t\t\t\telse {\n-\t\t\t\t\t\tassertThat(bucket.getAsObject(i, fake))\n-\t\t\t\t\t\t\t\t.as(message)\n-\t\t\t\t\t\t\t\t.isEqualTo(orig);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t}\n-\t\t\tbucket.calculateMap(i, bucket.getImp());\n-\t\t}\n-\t\tCentralRegistry registry = new CentralRegistry();\n-\t\tregistry.register(bucket.getImp());\n-\n-\t\tSerializationTestUtil\n-\t\t\t\t.forType(Bucket.class)\n-\t\t\t\t.registry(registry)\n-\t\t\t\t.test(bucket);\n-\t}\n-}\n+//package com.bakdata.conquery.models.events.generation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2ODIxMQ==", "bodyText": "Achtung aus kommentiert", "url": "https://github.com/bakdata/conquery/pull/1431#discussion_r526268211", "createdAt": "2020-11-18T17:22:59Z", "author": {"login": "thoniTUB"}, "path": "backend/src/test/java/com/bakdata/conquery/models/types/SerializationTest.java", "diffHunk": "@@ -1,96 +1,96 @@\n-package com.bakdata.conquery.models.types;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-import java.io.IOException;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import com.bakdata.conquery.io.cps.CPSTypeIdResolver;\n-import com.bakdata.conquery.io.jackson.serializer.SerializationTestUtil;\n-import com.bakdata.conquery.models.common.Range.IntegerRange;\n-import com.bakdata.conquery.models.dictionary.Dictionary;\n-import com.bakdata.conquery.models.exceptions.JSONException;\n-import com.bakdata.conquery.models.types.specific.BooleanTypeBoolean;\n-import com.bakdata.conquery.models.types.specific.DateRangeTypeDateRange;\n-import com.bakdata.conquery.models.types.specific.DateRangeTypePacked;\n-import com.bakdata.conquery.models.types.specific.DateRangeTypeQuarter;\n-import com.bakdata.conquery.models.types.specific.DateTypeVarInt;\n-import com.bakdata.conquery.models.types.specific.DecimalTypeBigDecimal;\n-import com.bakdata.conquery.models.types.specific.DecimalTypeScaled;\n-import com.bakdata.conquery.models.types.specific.IntegerTypeLong;\n-import com.bakdata.conquery.models.types.specific.IntegerTypeVarInt;\n-import com.bakdata.conquery.models.types.specific.MoneyTypeLong;\n-import com.bakdata.conquery.models.types.specific.MoneyTypeVarInt;\n-import com.bakdata.conquery.models.types.specific.RealTypeDouble;\n-import com.bakdata.conquery.models.types.specific.RealTypeFloat;\n-import com.bakdata.conquery.models.types.specific.StringTypeDictionary;\n-import com.bakdata.conquery.models.types.specific.StringTypeEncoded;\n-import com.bakdata.conquery.models.types.specific.StringTypeEncoded.Encoding;\n-import com.bakdata.conquery.models.types.specific.StringTypeNumber;\n-import com.bakdata.conquery.models.types.specific.StringTypePrefix;\n-import com.bakdata.conquery.models.types.specific.StringTypeSingleton;\n-import com.bakdata.conquery.models.types.specific.StringTypeSuffix;\n-import com.bakdata.conquery.models.types.specific.VarIntTypeByte;\n-import com.bakdata.conquery.models.types.specific.VarIntTypeInt;\n-import com.bakdata.conquery.models.types.specific.VarIntTypeShort;\n-import com.fasterxml.jackson.core.JsonParseException;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.MethodSource;\n-\n-public class SerializationTest {\n-\n-\tpublic static List<CType<?,?>> createCTypes() {\n-\t\treturn Arrays.asList(\n-\t\t\tnew DecimalTypeScaled(13, new IntegerTypeLong(-1,1)),\n-\t\t\tnew IntegerTypeVarInt(new VarIntTypeInt(-1, +1)),\n-\t\t\tnew MoneyTypeLong(),\n-\t\t\tnew DecimalTypeBigDecimal(),\n-\t\t\tnew BooleanTypeBoolean(),\n-\t\t\tnew MoneyTypeVarInt(new VarIntTypeInt(-1, +1)),\n-\t\t\tnew RealTypeDouble(),\n-\t\t\tnew DateTypeVarInt(new VarIntTypeInt(-1, +1)),\n-\t\t\tnew StringTypeDictionary(new VarIntTypeInt(-1, +1)),\n-\t\t\tnew StringTypeEncoded(new StringTypeDictionary(new VarIntTypeInt(-1, +1)),Encoding.Base16LowerCase),\n-\t\t\tnew StringTypePrefix(new StringTypeEncoded(new StringTypeDictionary(new VarIntTypeInt(-1, +1)),Encoding.Base16LowerCase), \"a\"),\n-\t\t\tnew StringTypeSuffix(new StringTypeEncoded(new StringTypeDictionary(new VarIntTypeInt(-1, +1)),Encoding.Base16LowerCase), \"a\"),\n-\t\t\tnew StringTypeNumber(new IntegerRange(0,7), new VarIntTypeInt(0, 7)),\n-\t\t\tnew StringTypeSingleton(\"a\"),\n-\t\t\tnew IntegerTypeLong(-1,+1),\n-\t\t\tnew DateRangeTypeDateRange(),\n-\t\t\tnew DateRangeTypeQuarter(),\n-\t\t\tnew DateRangeTypePacked(),\n-\t\t\tnew DateTypeVarInt(new VarIntTypeInt(-1, +1)),\n-\t\t\tnew VarIntTypeInt(-1, +1),\n-\t\t\tnew VarIntTypeByte((byte)-1, (byte)+1),\n-\t\t\tnew VarIntTypeShort((short)-1, (short)+1),\n-\t\t\tnew RealTypeFloat()\n-\t\t);\n-\t}\n-\t\n-\t@Test @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-\tpublic void testAllTypesCovered() {\n-\t\tassertThat(\n-\t\t\tcreateCTypes()\n-\t\t\t\t.stream()\n-\t\t\t\t.map(Object::getClass)\n-\t\t\t\t.collect(Collectors.toSet())\n-\t\t)\n-\t\t.containsAll(\n-\t\t\t(Set)CPSTypeIdResolver.listImplementations(CType.class)\n-\t\t);\n-\t}\n-\n-\t@ParameterizedTest @MethodSource(\"createCTypes\")\n-\tpublic void testSerialization(CType<?,?> type) throws JsonParseException, JsonMappingException, JsonProcessingException, IOException, JSONException {\n-\t\tSerializationTestUtil\n-\t\t\t.forType(CType.class)\n-\t\t\t.ignoreClasses(Arrays.asList(Dictionary.class))\n-\t\t\t.test(type);\n-\t}\n-}\n+//package com.bakdata.conquery.models.types;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf3b6dffe93f7eae60e7c2efcc4714fa90e2654"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa1172fe9dd5e2a69d8a0ac3933d82a57e5380ba", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/fa1172fe9dd5e2a69d8a0ac3933d82a57e5380ba", "committedDate": "2020-11-19T09:57:19Z", "message": "remove columnDescription from MajorTypeId ctor and instead use the names of the columns instead"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b307437d50e8efe6002b7afea23df73bd18e618e", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/b307437d50e8efe6002b7afea23df73bd18e618e", "committedDate": "2020-11-19T10:01:10Z", "message": "remove more unused code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c49e480b397143d6b337f7ea0fba626e67bf14c1", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/c49e480b397143d6b337f7ea0fba626e67bf14c1", "committedDate": "2020-11-19T10:05:26Z", "message": "remove unused Type from primaryColumn"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99372eb3c9944d488cce7e91e0d48f3b4189d7cf", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/99372eb3c9944d488cce7e91e0d48f3b4189d7cf", "committedDate": "2020-11-20T15:22:02Z", "message": "Decimate DirectDictionary.java, removing StringType extension as that did nothing but confuse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85c26894f9a33d9b2a2a17e24038d45f21c10d23", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/85c26894f9a33d9b2a2a17e24038d45f21c10d23", "committedDate": "2020-11-20T15:29:01Z", "message": "Copy-Constructor for efficient memory representation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a39be0511b2e9972bc565ee3b11ca59c40585bc", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/1a39be0511b2e9972bc565ee3b11ca59c40585bc", "committedDate": "2020-11-20T16:10:47Z", "message": "remove createForPreprocessing method and usage of ImportColumn in Preprocessed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd6f1a06fc0d8fe8e63a8a4c237518ca30b462f9", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/bd6f1a06fc0d8fe8e63a8a4c237518ca30b462f9", "committedDate": "2020-11-20T16:13:46Z", "message": "add todo for big refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e26daa668cc754d0246d0047b8a70169a27bd2d", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/6e26daa668cc754d0246d0047b8a70169a27bd2d", "committedDate": "2020-11-20T17:11:40Z", "message": "rip out primaryColumn as actual column, use StringParser and dictionary instead"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db45338246c2199435fc9cbae83666f9bfd2d38e", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/db45338246c2199435fc9cbae83666f9bfd2d38e", "committedDate": "2020-11-23T08:35:26Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c44d0f2a229748a380aff8027dda17e4c389df2b", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/c44d0f2a229748a380aff8027dda17e4c389df2b", "committedDate": "2020-11-25T12:08:12Z", "message": "Apply Type change to DateStore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19c1c432e00e6e47262da437f0a379e505721b55", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/19c1c432e00e6e47262da437f0a379e505721b55", "committedDate": "2020-11-25T12:13:04Z", "message": "Implement empty Store"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33cf026865d0fcf1059ddd7ea16397c5b87d0052", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/33cf026865d0fcf1059ddd7ea16397c5b87d0052", "committedDate": "2020-11-25T12:13:32Z", "message": "Change test logging to Debug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ec7ae81706ed826792bbd7179c69d51c9c496cc", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/0ec7ae81706ed826792bbd7179c69d51c9c496cc", "committedDate": "2020-11-25T12:14:53Z", "message": "don't send PrimaryDictionary to workers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5ead6a2f55a2b0f44ac8e57e4e96bfdc4886809", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/e5ead6a2f55a2b0f44ac8e57e4e96bfdc4886809", "committedDate": "2020-11-25T12:21:30Z", "message": "cleanup bucket selection into separate method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3476950af9fe48240f063ca370c30cf9377b1b1", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/e3476950af9fe48240f063ca370c30cf9377b1b1", "committedDate": "2020-11-25T13:07:03Z", "message": "fit DateTypeVarInt into only upperMost-Type scheme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e2670401bbb960c2ffb986c693ef3af0c5f8907", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/1e2670401bbb960c2ffb986c693ef3af0c5f8907", "committedDate": "2020-11-25T14:12:03Z", "message": "Cleanup passing down of null values to subParser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bfe5dc72b449c910960556b0dc1dd24add7c430", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/2bfe5dc72b449c910960556b0dc1dd24add7c430", "committedDate": "2020-11-25T14:19:08Z", "message": "Add missing TypeId to VarIntType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e6d0c96f26ac906afb2638c5d336f739dfefd9e", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/9e6d0c96f26ac906afb2638c5d336f739dfefd9e", "committedDate": "2020-11-25T14:40:45Z", "message": "remove unused method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a99eaf083e4b30c4af7768192b0aac767857a186", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/a99eaf083e4b30c4af7768192b0aac767857a186", "committedDate": "2020-11-25T15:01:20Z", "message": "Migrate DateTypeVarInt.java to DateStore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "609968c7b9fec5b1799518206aa413bafb5eed3a", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/609968c7b9fec5b1799518206aa413bafb5eed3a", "committedDate": "2020-11-25T15:31:17Z", "message": "Avoid direct usage of IntegerStore, instead use IntegerParser instead"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbd4217096042336f3f91c2b5144394671a5b08d", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/fbd4217096042336f3f91c2b5144394671a5b08d", "committedDate": "2020-11-26T10:58:42Z", "message": "Fix BitSet selection and add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9fc3143c670eadaf37f014a80363a6a2b241186", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/d9fc3143c670eadaf37f014a80363a6a2b241186", "committedDate": "2020-11-26T11:09:52Z", "message": "add (de-)serializer for BitSets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "602b396fc6e7a8dbf612815eaeee86ae986dd6be", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/602b396fc6e7a8dbf612815eaeee86ae986dd6be", "committedDate": "2020-11-26T11:14:35Z", "message": "move Serializers to proper package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94a8a96de3fe96a606976a78fba2ac3ef5fbf6a9", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/94a8a96de3fe96a606976a78fba2ac3ef5fbf6a9", "committedDate": "2020-11-26T11:44:38Z", "message": "fix casting issues with createScriptValue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1143881d08ee07587d9353a963d942026588b53", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/b1143881d08ee07587d9353a963d942026588b53", "committedDate": "2020-11-26T13:33:56Z", "message": "add Rebasing store to further compress Integers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b46081c097b70f98545af4db344a3ea1953ed964", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/b46081c097b70f98545af4db344a3ea1953ed964", "committedDate": "2020-11-26T15:03:50Z", "message": "fix a bug when allocating PackedStore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b98ae932d8f5c8b673d371f6088001305efa8cc6", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/b98ae932d8f5c8b673d371f6088001305efa8cc6", "committedDate": "2020-11-26T15:05:16Z", "message": "fix using wrong sized store"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84a305c05c140b9c934c1796bb99c2d67f73bcbd", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/84a305c05c140b9c934c1796bb99c2d67f73bcbd", "committedDate": "2020-11-26T15:11:36Z", "message": "fix usage of PackUnsigned.MAX_VALUE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bfce790f01e346fce1b7739ba294692ec4b4061", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/9bfce790f01e346fce1b7739ba294692ec4b4061", "committedDate": "2020-11-26T15:17:10Z", "message": "final fix for PackedDateRange"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4736, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}