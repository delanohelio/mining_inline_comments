{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0Nzk0MDAz", "number": 1418, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOTo0ODo1MFrOE3JQUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDoyMjowMFrOE3KIHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjU4NzY5OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/commands/PreprocessorCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOTo0ODo1MFrOHwUWXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDo1NTozM1rOHwXDLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQyNzEwMg==", "bodyText": ":(", "url": "https://github.com/bakdata/conquery/pull/1418#discussion_r520427102", "createdAt": "2020-11-10T09:48:50Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/commands/PreprocessorCommand.java", "diffHunk": "@@ -155,7 +178,7 @@ protected void run(Environment environment, Namespace namespace, ConqueryConfig\n \t\tif (!failed.isEmpty()) {\n \t\t\tlog.error(\"Failed {} Preprocessing Jobs:\", failed.size());\n \t\t\tfailed.forEach(desc -> log.error(\"\\tFailed Preprocessing for {}\", desc));\n-\t\t\tSystem.exit(Math.min(failed.size(), 100)); // Inspired by: https://www.gnu.org/software/parallel/man.html#EXIT-STATUS\n+\t\t\tSystem.exit(1); ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40794f68f031d2beed6fb15e8b7d33ce132467c8"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3MTM0MQ==", "bodyText": "@awildturtok Das hat einen praktischen Grund ;) die CI ist sonst nicht gefailed wenn es ein problem gab", "url": "https://github.com/bakdata/conquery/pull/1418#discussion_r520471341", "createdAt": "2020-11-10T10:55:33Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/commands/PreprocessorCommand.java", "diffHunk": "@@ -155,7 +178,7 @@ protected void run(Environment environment, Namespace namespace, ConqueryConfig\n \t\tif (!failed.isEmpty()) {\n \t\t\tlog.error(\"Failed {} Preprocessing Jobs:\", failed.size());\n \t\t\tfailed.forEach(desc -> log.error(\"\\tFailed Preprocessing for {}\", desc));\n-\t\t\tSystem.exit(Math.min(failed.size(), 100)); // Inspired by: https://www.gnu.org/software/parallel/man.html#EXIT-STATUS\n+\t\t\tSystem.exit(1); ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQyNzEwMg=="}, "originalCommit": {"oid": "40794f68f031d2beed6fb15e8b7d33ce132467c8"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjcyNzk4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/commands/PreprocessorCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDoyMToyM1rOHwVtEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzozNzozOVrOHwc3_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0OTI5Ng==", "bodyText": "Hier w\u00fcrde ein String.format doch auch reichen? du hast hier ja noch kein Performance-Bottleneck", "url": "https://github.com/bakdata/conquery/pull/1418#discussion_r520449296", "createdAt": "2020-11-10T10:21:23Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/commands/PreprocessorCommand.java", "diffHunk": "@@ -171,24 +194,41 @@ protected void run(Environment environment, Namespace namespace, ConqueryConfig\n \n \t\t\tfor (File descriptionFile : files) {\n \n-\t\t\t\tInputFile file = InputFile.fromDescriptionFile(descriptionFile, description, tag);\n-\t\t\t\ttry {\n-\t\t\t\t\tTableImportDescriptor descr = file.readDescriptor(validator, tag);\n-\t\t\t\t\tdescr.setInputFile(file);\n-\n-\t\t\t\t\t// Override name to tag if present\n-\t\t\t\t\tif (!Strings.isNullOrEmpty(tag)) {\n-\t\t\t\t\t\tdescr.setName(tag);\n-\t\t\t\t\t}\n+\t\t\t\ttryExtractDescriptor(validator, tag, description, descriptionFile).ifPresent(out::add);\n+\t\t\t}\n+\t\t}\n+\t\treturn out;\n+\t}\n \n-\t\t\t\t\tout.add(descr);\n-\t\t\t\t}\n-\t\t\t\tcatch (Exception e) {\n-\t\t\t\t\tlog.error(\"Failed to process \" + LogUtil.printPath(descriptionFile), e);\n-\t\t\t\t\tfailed.add(file.getDescriptionFile().toString());\n+\tprivate Optional<TableImportDescriptor> tryExtractDescriptor(Validator validator, String tag, PreprocessingDirectories description, File descriptionFile) throws IOException {\n+\t\tInputFile file = InputFile.fromDescriptionFile(descriptionFile, description, tag);\n+\t\ttry {\n+\t\t\tTableImportDescriptor descr = file.readDescriptor(validator, tag);\n+\t\t\t\n+\t\t\tfor(TableInputDescriptor inputs : descr.getInputs()) {\n+\t\t\t\tif(!inputs.getSourceFile().exists()) {\n+\t\t\t\t\tlog.trace(\"Skipping import {} because source file {} does not exists.\", descriptionFile, inputs.getSourceFile());\n+\t\t\t\t\tskipped.add(new StringBuilder().append(descriptionFile).append(\" with tag \").append(tag).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40794f68f031d2beed6fb15e8b7d33ce132467c8"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2Njc4Mg==", "bodyText": "Ja das stimmt, das w\u00e4re hier nicht so tragisch", "url": "https://github.com/bakdata/conquery/pull/1418#discussion_r520566782", "createdAt": "2020-11-10T13:37:39Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/commands/PreprocessorCommand.java", "diffHunk": "@@ -171,24 +194,41 @@ protected void run(Environment environment, Namespace namespace, ConqueryConfig\n \n \t\t\tfor (File descriptionFile : files) {\n \n-\t\t\t\tInputFile file = InputFile.fromDescriptionFile(descriptionFile, description, tag);\n-\t\t\t\ttry {\n-\t\t\t\t\tTableImportDescriptor descr = file.readDescriptor(validator, tag);\n-\t\t\t\t\tdescr.setInputFile(file);\n-\n-\t\t\t\t\t// Override name to tag if present\n-\t\t\t\t\tif (!Strings.isNullOrEmpty(tag)) {\n-\t\t\t\t\t\tdescr.setName(tag);\n-\t\t\t\t\t}\n+\t\t\t\ttryExtractDescriptor(validator, tag, description, descriptionFile).ifPresent(out::add);\n+\t\t\t}\n+\t\t}\n+\t\treturn out;\n+\t}\n \n-\t\t\t\t\tout.add(descr);\n-\t\t\t\t}\n-\t\t\t\tcatch (Exception e) {\n-\t\t\t\t\tlog.error(\"Failed to process \" + LogUtil.printPath(descriptionFile), e);\n-\t\t\t\t\tfailed.add(file.getDescriptionFile().toString());\n+\tprivate Optional<TableImportDescriptor> tryExtractDescriptor(Validator validator, String tag, PreprocessingDirectories description, File descriptionFile) throws IOException {\n+\t\tInputFile file = InputFile.fromDescriptionFile(descriptionFile, description, tag);\n+\t\ttry {\n+\t\t\tTableImportDescriptor descr = file.readDescriptor(validator, tag);\n+\t\t\t\n+\t\t\tfor(TableInputDescriptor inputs : descr.getInputs()) {\n+\t\t\t\tif(!inputs.getSourceFile().exists()) {\n+\t\t\t\t\tlog.trace(\"Skipping import {} because source file {} does not exists.\", descriptionFile, inputs.getSourceFile());\n+\t\t\t\t\tskipped.add(new StringBuilder().append(descriptionFile).append(\" with tag \").append(tag).toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0OTI5Ng=="}, "originalCommit": {"oid": "40794f68f031d2beed6fb15e8b7d33ce132467c8"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjczMDUyOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/commands/PreprocessorCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDoyMjowMFrOHwVunw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDoyMjowMFrOHwVunw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0OTY5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\n          \n          \n            \n            \t\t\t// Test if all Inputs exist", "url": "https://github.com/bakdata/conquery/pull/1418#discussion_r520449695", "createdAt": "2020-11-10T10:22:00Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/commands/PreprocessorCommand.java", "diffHunk": "@@ -171,24 +194,41 @@ protected void run(Environment environment, Namespace namespace, ConqueryConfig\n \n \t\t\tfor (File descriptionFile : files) {\n \n-\t\t\t\tInputFile file = InputFile.fromDescriptionFile(descriptionFile, description, tag);\n-\t\t\t\ttry {\n-\t\t\t\t\tTableImportDescriptor descr = file.readDescriptor(validator, tag);\n-\t\t\t\t\tdescr.setInputFile(file);\n-\n-\t\t\t\t\t// Override name to tag if present\n-\t\t\t\t\tif (!Strings.isNullOrEmpty(tag)) {\n-\t\t\t\t\t\tdescr.setName(tag);\n-\t\t\t\t\t}\n+\t\t\t\ttryExtractDescriptor(validator, tag, description, descriptionFile).ifPresent(out::add);\n+\t\t\t}\n+\t\t}\n+\t\treturn out;\n+\t}\n \n-\t\t\t\t\tout.add(descr);\n-\t\t\t\t}\n-\t\t\t\tcatch (Exception e) {\n-\t\t\t\t\tlog.error(\"Failed to process \" + LogUtil.printPath(descriptionFile), e);\n-\t\t\t\t\tfailed.add(file.getDescriptionFile().toString());\n+\tprivate Optional<TableImportDescriptor> tryExtractDescriptor(Validator validator, String tag, PreprocessingDirectories description, File descriptionFile) throws IOException {\n+\t\tInputFile file = InputFile.fromDescriptionFile(descriptionFile, description, tag);\n+\t\ttry {\n+\t\t\tTableImportDescriptor descr = file.readDescriptor(validator, tag);\n+\t\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40794f68f031d2beed6fb15e8b7d33ce132467c8"}, "originalPosition": 175}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1517, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}