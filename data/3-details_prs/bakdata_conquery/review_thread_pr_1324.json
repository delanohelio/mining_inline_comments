{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNDA5NzMz", "number": 1324, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDozNzoyNVrOEeVcFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToyMzo0NlrOEk7ZAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjQzOTkxOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/events/CBlock.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDozNzoyNVrOHJ7hbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDozODoyMVrOHJ7jhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE3NDQ0NQ==", "bodyText": "Das sieht komisch aus. Kannst du es standard m\u00e4\u00dfig mit etwas Validem initialisieren?", "url": "https://github.com/bakdata/conquery/pull/1324#discussion_r480174445", "createdAt": "2020-08-31T14:37:25Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/CBlock.java", "diffHunk": "@@ -50,8 +51,8 @@\n \t * Represents the path in a {@link TreeConcept} to optimize lookup.\n \t * Nodes in the tree are simply enumerated.\n \t */\n-\t@Valid\n-\tprivate List<int[]> mostSpecificChildren;\n+\t@Valid @NonNull\n+\tprivate List<int[]> mostSpecificChildren = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2778e9899a5268ccf5b8993273e1f9da0001cedf"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE3NDk4MA==", "bodyText": "Und ich frage mich ob @Valid etwas bewirkt.", "url": "https://github.com/bakdata/conquery/pull/1324#discussion_r480174980", "createdAt": "2020-08-31T14:38:21Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/CBlock.java", "diffHunk": "@@ -50,8 +51,8 @@\n \t * Represents the path in a {@link TreeConcept} to optimize lookup.\n \t * Nodes in the tree are simply enumerated.\n \t */\n-\t@Valid\n-\tprivate List<int[]> mostSpecificChildren;\n+\t@Valid @NonNull\n+\tprivate List<int[]> mostSpecificChildren = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE3NDQ0NQ=="}, "originalCommit": {"oid": "2778e9899a5268ccf5b8993273e1f9da0001cedf"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjQ4Mjc4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/jobs/CalculateCBlocksJob.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDo0NzozMlrOHJ76vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDo0NzozMlrOHJ76vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4MDkyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tif (connector.getConcept() instanceof TreeConcept) {\n          \n          \n            \n            \t\t\t\t\tfinal ConceptTreeConnector treeConnector = (ConceptTreeConnector) connector;\n          \n          \n            \n            \t\t\t\t\tcalculateCBlock(cBlock, treeConnector, info);\n          \n          \n            \n            \t\t\t\tif (connector instanceof ConceptTreeConnector) {\n          \n          \n            \n            \t\t\t\t\tcalculateCBlock(cBlock, (ConceptTreeConnector) connector, info);\n          \n      \n    \n    \n  \n\neine Indirektion weniger", "url": "https://github.com/bakdata/conquery/pull/1324#discussion_r480180924", "createdAt": "2020-08-31T14:47:32Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/jobs/CalculateCBlocksJob.java", "diffHunk": "@@ -63,12 +70,14 @@ public void execute() throws Exception {\n \n \t\t\t\tCBlock cBlock = createCBlock(connector, info);\n \t\t\t\tcBlock.initIndizes(info.getBucket().getBucketSize());\n-\t\t\t\tif (treeConcept) {\n-\t\t\t\t\tcalculateCBlock(cBlock, (ConceptTreeConnector) connector, info);\n+\t\t\t\tif (connector.getConcept() instanceof TreeConcept) {\n+\t\t\t\t\tfinal ConceptTreeConnector treeConnector = (ConceptTreeConnector) connector;\n+\t\t\t\t\tcalculateCBlock(cBlock, treeConnector, info);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2778e9899a5268ccf5b8993273e1f9da0001cedf"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjQ4OTIwOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/jobs/CalculateCBlocksJob.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDo0OTowMVrOHJ7-kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjozMzoyOFrOHMkcjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4MTkwNQ==", "bodyText": "Wir haben zwar nur zwei Concept Typen, aber das ist ein potentieller ClassCastError", "url": "https://github.com/bakdata/conquery/pull/1324#discussion_r480181905", "createdAt": "2020-08-31T14:49:01Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/jobs/CalculateCBlocksJob.java", "diffHunk": "@@ -63,12 +70,14 @@ public void execute() throws Exception {\n \n \t\t\t\tCBlock cBlock = createCBlock(connector, info);\n \t\t\t\tcBlock.initIndizes(info.getBucket().getBucketSize());\n-\t\t\t\tif (treeConcept) {\n-\t\t\t\t\tcalculateCBlock(cBlock, (ConceptTreeConnector) connector, info);\n+\t\t\t\tif (connector.getConcept() instanceof TreeConcept) {\n+\t\t\t\t\tfinal ConceptTreeConnector treeConnector = (ConceptTreeConnector) connector;\n+\t\t\t\t\tcalculateCBlock(cBlock, treeConnector, info);\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tcalculateCBlock(cBlock, (VirtualConceptConnector) connector, info);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2778e9899a5268ccf5b8993273e1f9da0001cedf"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkzOTc3OQ==", "bodyText": "@awildturtok kannst du das bitte noch korrigieren", "url": "https://github.com/bakdata/conquery/pull/1324#discussion_r482939779", "createdAt": "2020-09-03T12:29:29Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/jobs/CalculateCBlocksJob.java", "diffHunk": "@@ -63,12 +70,14 @@ public void execute() throws Exception {\n \n \t\t\t\tCBlock cBlock = createCBlock(connector, info);\n \t\t\t\tcBlock.initIndizes(info.getBucket().getBucketSize());\n-\t\t\t\tif (treeConcept) {\n-\t\t\t\t\tcalculateCBlock(cBlock, (ConceptTreeConnector) connector, info);\n+\t\t\t\tif (connector.getConcept() instanceof TreeConcept) {\n+\t\t\t\t\tfinal ConceptTreeConnector treeConnector = (ConceptTreeConnector) connector;\n+\t\t\t\t\tcalculateCBlock(cBlock, treeConnector, info);\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tcalculateCBlock(cBlock, (VirtualConceptConnector) connector, info);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4MTkwNQ=="}, "originalCommit": {"oid": "2778e9899a5268ccf5b8993273e1f9da0001cedf"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk0MjA5NQ==", "bodyText": "c670ee7#diff-42b51c06b9191a3addd05efc95d29722R77\nist hier behoben?", "url": "https://github.com/bakdata/conquery/pull/1324#discussion_r482942095", "createdAt": "2020-09-03T12:33:28Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/jobs/CalculateCBlocksJob.java", "diffHunk": "@@ -63,12 +70,14 @@ public void execute() throws Exception {\n \n \t\t\t\tCBlock cBlock = createCBlock(connector, info);\n \t\t\t\tcBlock.initIndizes(info.getBucket().getBucketSize());\n-\t\t\t\tif (treeConcept) {\n-\t\t\t\t\tcalculateCBlock(cBlock, (ConceptTreeConnector) connector, info);\n+\t\t\t\tif (connector.getConcept() instanceof TreeConcept) {\n+\t\t\t\t\tfinal ConceptTreeConnector treeConnector = (ConceptTreeConnector) connector;\n+\t\t\t\t\tcalculateCBlock(cBlock, treeConnector, info);\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tcalculateCBlock(cBlock, (VirtualConceptConnector) connector, info);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4MTkwNQ=="}, "originalCommit": {"oid": "2778e9899a5268ccf5b8993273e1f9da0001cedf"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjUxMTU0OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/jobs/CalculateCBlocksJob.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDo1NDoxOVrOHJ8MHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoyMzowMlrOHLxmMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4NTM3NQ==", "bodyText": "Die Funktion berechnet einfach nur die min und max aller Dates einer Entity die in dem Bucket sind, oder?\nDer Funktionsname ist f\u00fcr mich irgendwie nichts sagend.", "url": "https://github.com/bakdata/conquery/pull/1324#discussion_r480185375", "createdAt": "2020-08-31T14:54:19Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/jobs/CalculateCBlocksJob.java", "diffHunk": "@@ -95,16 +104,20 @@ private void setDateRangeIndex(CBlock cBlock, CalculationInformation info) {\n \t\tBucket bucket = info.getBucket();\n \t\tTable table = storage.getDataset().getTables().get(bucket.getImp().getTable());\n \t\tfor (Column column : table.getColumns()) {\n-\t\t\tif (column.getType().isDateCompatible()) {\n-\t\t\t\tfor (BucketEntry entry : bucket.entries()) {\n-\t\t\t\t\tif (bucket.has(entry.getEvent(), column)) {\n-\t\t\t\t\t\tCDateRange range = bucket.getAsDateRange(entry.getEvent(), column);\n-\t\t\t\t\t\tcBlock.getMinDate()[entry.getLocalEntity()] = Math\n-\t\t\t\t\t\t\t.min(cBlock.getMinDate()[entry.getLocalEntity()], range.getMinValue());\n-\t\t\t\t\t\tcBlock.getMaxDate()[entry.getLocalEntity()] = Math\n-\t\t\t\t\t\t\t.max(cBlock.getMaxDate()[entry.getLocalEntity()], range.getMaxValue());\n-\t\t\t\t\t}\n+\t\t\tif (!column.getType().isDateCompatible()) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tfor (BucketEntry entry : bucket.entries()) {\n+\t\t\t\tif (!bucket.has(entry.getEvent(), column)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\tCDateRange range = bucket.getAsDateRange(entry.getEvent(), column);\n+\n+\t\t\t\tcBlock.getMinDate()[entry.getLocalEntity()] = Math.min(cBlock.getMinDate()[entry.getLocalEntity()], range.getMinValue());\n+\n+\t\t\t\tcBlock.getMaxDate()[entry.getLocalEntity()] = Math.max(cBlock.getMaxDate()[entry.getLocalEntity()], range.getMaxValue());\n \t\t\t}\n \t\t}\n \t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2778e9899a5268ccf5b8993273e1f9da0001cedf"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwODk3Ng==", "bodyText": "ja, die werden im CBlock gespeichert, dass man die dann bei IsOfInterest zB rausschmei\u00dfen kann.", "url": "https://github.com/bakdata/conquery/pull/1324#discussion_r482108976", "createdAt": "2020-09-02T14:23:02Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/jobs/CalculateCBlocksJob.java", "diffHunk": "@@ -95,16 +104,20 @@ private void setDateRangeIndex(CBlock cBlock, CalculationInformation info) {\n \t\tBucket bucket = info.getBucket();\n \t\tTable table = storage.getDataset().getTables().get(bucket.getImp().getTable());\n \t\tfor (Column column : table.getColumns()) {\n-\t\t\tif (column.getType().isDateCompatible()) {\n-\t\t\t\tfor (BucketEntry entry : bucket.entries()) {\n-\t\t\t\t\tif (bucket.has(entry.getEvent(), column)) {\n-\t\t\t\t\t\tCDateRange range = bucket.getAsDateRange(entry.getEvent(), column);\n-\t\t\t\t\t\tcBlock.getMinDate()[entry.getLocalEntity()] = Math\n-\t\t\t\t\t\t\t.min(cBlock.getMinDate()[entry.getLocalEntity()], range.getMinValue());\n-\t\t\t\t\t\tcBlock.getMaxDate()[entry.getLocalEntity()] = Math\n-\t\t\t\t\t\t\t.max(cBlock.getMaxDate()[entry.getLocalEntity()], range.getMaxValue());\n-\t\t\t\t\t}\n+\t\t\tif (!column.getType().isDateCompatible()) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tfor (BucketEntry entry : bucket.entries()) {\n+\t\t\t\tif (!bucket.has(entry.getEvent(), column)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\tCDateRange range = bucket.getAsDateRange(entry.getEvent(), column);\n+\n+\t\t\t\tcBlock.getMinDate()[entry.getLocalEntity()] = Math.min(cBlock.getMinDate()[entry.getLocalEntity()], range.getMinValue());\n+\n+\t\t\t\tcBlock.getMaxDate()[entry.getLocalEntity()] = Math.max(cBlock.getMaxDate()[entry.getLocalEntity()], range.getMaxValue());\n \t\t\t}\n \t\t}\n \t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4NTM3NQ=="}, "originalCommit": {"oid": "2778e9899a5268ccf5b8993273e1f9da0001cedf"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjU4NzIwOnYy", "diffSide": "LEFT", "path": "frontend/src/index.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNToxMzowMFrOHJ86aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoyMzoxNVrOHLxmvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE5NzIyNA==", "bodyText": "Da gabs doch schon eine andere L\u00f6sung f\u00fcr oder?", "url": "https://github.com/bakdata/conquery/pull/1324#discussion_r480197224", "createdAt": "2020-08-31T15:13:00Z", "author": {"login": "thoniTUB"}, "path": "frontend/src/index.ts", "diffHunk": "@@ -16,7 +16,7 @@ import { theme } from \"./app-theme\";\n import \"./app-styles.sass\";\n \n const isProduction = process.env.NODE_ENV === \"production\";\n-const disableLogin = !!process.env.REACT_APP_DISABLE_LOGIN;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2778e9899a5268ccf5b8993273e1f9da0001cedf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwOTExOA==", "bodyText": "ups, das geh\u00f6rt hier nicht rein", "url": "https://github.com/bakdata/conquery/pull/1324#discussion_r482109118", "createdAt": "2020-09-02T14:23:15Z", "author": {"login": "awildturtok"}, "path": "frontend/src/index.ts", "diffHunk": "@@ -16,7 +16,7 @@ import { theme } from \"./app-theme\";\n import \"./app-styles.sass\";\n \n const isProduction = process.env.NODE_ENV === \"production\";\n-const disableLogin = !!process.env.REACT_APP_DISABLE_LOGIN;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE5NzIyNA=="}, "originalCommit": {"oid": "2778e9899a5268ccf5b8993273e1f9da0001cedf"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjU5NzE0OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/tree/ConceptTreeConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNToxNToyM1rOHJ9Agg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNToxNToyM1rOHJ9Agg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE5ODc4Ng==", "bodyText": "Ich verstehe nicht, wie das ohne die Column Information klappt. \ud83e\udd14", "url": "https://github.com/bakdata/conquery/pull/1324#discussion_r480198786", "createdAt": "2020-08-31T15:15:23Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/tree/ConceptTreeConnector.java", "diffHunk": "@@ -14,25 +14,39 @@\n import com.bakdata.conquery.models.datasets.Table;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonManagedReference;\n+import io.dropwizard.validation.ValidationMethod;\n import lombok.Getter;\n import lombok.Setter;\n \n @Getter @Setter\n public class ConceptTreeConnector extends Connector {\n \n \tprivate static final long serialVersionUID = 1L;\n-\t\n-\t@NotNull @NsIdRef\n-\tprivate Column column;\n \n-\tprivate CTCondition condition;\n+\t@NsIdRef @CheckForNull\n+\tprivate Table table;\n+\n+\t@NsIdRef @CheckForNull\n+\tprivate Column column = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2778e9899a5268ccf5b8993273e1f9da0001cedf"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDc2NDUwOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/events/CBlock.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNzozMToxMlrOHUBZKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNzozMToxMlrOHUBZKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc1NjM5NA==", "bodyText": "Bitte noch kurz dazuschreiben was die Vor-/Nachteile das bringen k\u00f6nnte.", "url": "https://github.com/bakdata/conquery/pull/1324#discussion_r490756394", "createdAt": "2020-09-18T07:31:12Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/CBlock.java", "diffHunk": "@@ -38,7 +39,8 @@\n \t * Bloom filter per entity for the first 64 {@link ConceptTreeChild}.\n \t */\n \tprivate long[] includedConcepts;\n-\t\n+\n+\t// TODO: 02.09.2020 FK: Make chop this onto a per-column basis", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a33c05b62ccf592a0a9b040f39c57aef3a52130"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTUwMjAzOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/jobs/CalculateCBlocksJob.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTowMjoxOVrOHUIWVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjozNDozMVrOHULO2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3MDM1Ng==", "bodyText": "Some doku sugar\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * If a Bucket x Connector has a CBlock, the ConceptNode will rely on that to iterate events. If not, it will fall back onto equality checks.\n          \n          \n            \n             * If a {@link Bucket} x {@link Connector} has a {@link CBlock}, the {@link ConceptNode} will rely on that to iterate events. If not, it will fall back onto equality checks.", "url": "https://github.com/bakdata/conquery/pull/1324#discussion_r490870356", "createdAt": "2020-09-18T11:02:19Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/jobs/CalculateCBlocksJob.java", "diffHunk": "@@ -32,9 +32,17 @@\n import lombok.Setter;\n import lombok.extern.slf4j.Slf4j;\n \n-@RequiredArgsConstructor @Slf4j\n+/**\n+ * Calculate CBlocks, ie the Connection between a Concept and a Bucket.\n+ * <p>\n+ * If a Bucket x Connector has a CBlock, the ConceptNode will rely on that to iterate events. If not, it will fall back onto equality checks.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a33c05b62ccf592a0a9b040f39c57aef3a52130"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3Mjc0Ng==", "bodyText": "Kann man dann gegebenenfalls resourcen freigeben, wenn f\u00fcr ein konzept ein CBlock generiert werden konnte. Also resourcen die sonst f\u00fcr ein fall back onto equality checks gebracuht w\u00fcrden?\nVielleicht wird das auch schon gemacht, aber ich hab es nicht gesehen.", "url": "https://github.com/bakdata/conquery/pull/1324#discussion_r490872746", "createdAt": "2020-09-18T11:07:03Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/jobs/CalculateCBlocksJob.java", "diffHunk": "@@ -32,9 +32,17 @@\n import lombok.Setter;\n import lombok.extern.slf4j.Slf4j;\n \n-@RequiredArgsConstructor @Slf4j\n+/**\n+ * Calculate CBlocks, ie the Connection between a Concept and a Bucket.\n+ * <p>\n+ * If a Bucket x Connector has a CBlock, the ConceptNode will rely on that to iterate events. If not, it will fall back onto equality checks.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3MDM1Ng=="}, "originalCommit": {"oid": "4a33c05b62ccf592a0a9b040f39c57aef3a52130"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxNzU5NQ==", "bodyText": "Also resourcen die sonst f\u00fcr ein fall back onto equality checks gebracuht w\u00fcrden?\n\nBei den equality checks werden eben keine ressourcen verwendet, das ist dann der case in ConceptNode#98", "url": "https://github.com/bakdata/conquery/pull/1324#discussion_r490917595", "createdAt": "2020-09-18T12:34:31Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/jobs/CalculateCBlocksJob.java", "diffHunk": "@@ -32,9 +32,17 @@\n import lombok.Setter;\n import lombok.extern.slf4j.Slf4j;\n \n-@RequiredArgsConstructor @Slf4j\n+/**\n+ * Calculate CBlocks, ie the Connection between a Concept and a Bucket.\n+ * <p>\n+ * If a Bucket x Connector has a CBlock, the ConceptNode will rely on that to iterate events. If not, it will fall back onto equality checks.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3MDM1Ng=="}, "originalCommit": {"oid": "4a33c05b62ccf592a0a9b040f39c57aef3a52130"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTUzMDY2OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/jobs/CalculateCBlocksJob.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToxMDo1OFrOHUIm_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToxMDo1OFrOHUIm_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3NDYyMg==", "bodyText": "Vielleicht ist hier doch ein refactor angebracht in dem man die calculateCBlock funktionalit\u00e4t in den Connector packt. Das entspr\u00e4che mehr dem OO schema und man w\u00fcrde offen f\u00fcr andere Connectoren-Typen sein", "url": "https://github.com/bakdata/conquery/pull/1324#discussion_r490874622", "createdAt": "2020-09-18T11:10:58Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/jobs/CalculateCBlocksJob.java", "diffHunk": "@@ -63,13 +70,18 @@ public void execute() throws Exception {\n \n \t\t\t\tCBlock cBlock = createCBlock(connector, info);\n \t\t\t\tcBlock.initIndizes(info.getBucket().getBucketSize());\n-\t\t\t\tif (treeConcept) {\n-\t\t\t\t\tcalculateCBlock(cBlock, (ConceptTreeConnector) connector, info);\n+\t\t\t\tif (connector instanceof ConceptTreeConnector) {\n+\t\t\t\t\tfinal ConceptTreeConnector treeConnector = (ConceptTreeConnector) connector;\n+\t\t\t\t\tcalculateCBlock(cBlock, treeConnector, info);\n \t\t\t\t}\n-\t\t\t\telse {\n+\t\t\t\telse if (connector instanceof VirtualConceptConnector) {\n \t\t\t\t\tcalculateCBlock(cBlock, (VirtualConceptConnector) connector, info);\n \t\t\t\t}\n-\t\t\t\tsetDateRangeIndex(cBlock, info);\n+\t\t\t\telse {\n+\t\t\t\t\tthrow new IllegalArgumentException(String.format(\"Don't know how to handle connectors of type %s\", connector.getClass()));\n+\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a33c05b62ccf592a0a9b040f39c57aef3a52130"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTU3MjQ5OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/jobs/CalculateCBlocksJob.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToyMzo0NlrOHUI_QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToyNDozMFrOHUJAtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4MDgzMw==", "bodyText": "Das ist hier etwas verworren finde ich. Ich verstehe nicht ganz was dieser Fall hier bedeutet, aber sorgt stringType = null;  nicht daf\u00fcr zwangsl\u00e4ufig daf\u00fcr, dass stringValue = \"\";\nUnd dass ist dann ein problematischer Wert?", "url": "https://github.com/bakdata/conquery/pull/1324#discussion_r490880833", "createdAt": "2020-09-18T11:23:46Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/jobs/CalculateCBlocksJob.java", "diffHunk": "@@ -91,111 +103,150 @@ public void execute() throws Exception {\n \t\tprogressReporter.done();\n \t}\n \n-\tprivate void setDateRangeIndex(CBlock cBlock, CalculationInformation info) {\n-\t\tBucket bucket = info.getBucket();\n+\t/**\n+\t * For every included entity, calculate min and max and store them as statistics in the CBlock.\n+\t */\n+\tprivate void calculateEntityDateIndices(CBlock cBlock, Bucket bucket) {\n \t\tTable table = storage.getDataset().getTables().get(bucket.getImp().getTable());\n \t\tfor (Column column : table.getColumns()) {\n-\t\t\tif (column.getType().isDateCompatible()) {\n-\t\t\t\tfor (BucketEntry entry : bucket.entries()) {\n-\t\t\t\t\tif (bucket.has(entry.getEvent(), column)) {\n-\t\t\t\t\t\tCDateRange range = bucket.getAsDateRange(entry.getEvent(), column);\n-\t\t\t\t\t\tcBlock.getMinDate()[entry.getLocalEntity()] = Math\n-\t\t\t\t\t\t\t.min(cBlock.getMinDate()[entry.getLocalEntity()], range.getMinValue());\n-\t\t\t\t\t\tcBlock.getMaxDate()[entry.getLocalEntity()] = Math\n-\t\t\t\t\t\t\t.max(cBlock.getMaxDate()[entry.getLocalEntity()], range.getMaxValue());\n-\t\t\t\t\t}\n+\t\t\tif (!column.getType().isDateCompatible()) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tfor (BucketEntry entry : bucket.entries()) {\n+\t\t\t\tif (!bucket.has(entry.getEvent(), column)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\tCDateRange range = bucket.getAsDateRange(entry.getEvent(), column);\n+\n+\t\t\t\tcBlock.getMinDate()[entry.getLocalEntity()] = Math.min(cBlock.getMinDate()[entry.getLocalEntity()], range.getMinValue());\n+\n+\t\t\t\tcBlock.getMaxDate()[entry.getLocalEntity()] = Math.max(cBlock.getMaxDate()[entry.getLocalEntity()], range.getMaxValue());\n \t\t\t}\n \t\t}\n \t}\n \n-\tprivate CBlock createCBlock(Connector connector, CalculationInformation info) {\n+\tprivate static CBlock createCBlock(Connector connector, CalculationInformation info) {\n \t\treturn new CBlock(info.getBucket().getId(), connector.getId());\n \t}\n \n \t/**\n \t * No CBlocks for VirtualConcepts\n \t */\n-\tprivate void calculateCBlock(CBlock cBlock, VirtualConceptConnector connector, CalculationInformation info) {}\n+\tprivate void calculateCBlock(CBlock cBlock, VirtualConceptConnector connector, CalculationInformation info) {\n+\t}\n+\n \n \tprivate void calculateCBlock(CBlock cBlock, ConceptTreeConnector connector, CalculationInformation info) {\n \n \t\tBucket bucket = info.getBucket();\n \n-\t\tCType<?, ?> cType = info.getImp().getColumns()[connector.getColumn().getPosition()].getType();\n+\t\tfinal Column column = connector.getColumn();\n \n-\t\tif (!(cType instanceof AStringType)) {\n-\t\t\treturn;\n-\t\t}\n-\t\tAStringType<?> stringType = (AStringType<?>) cType;\n \n \t\tfinal TreeConcept treeConcept = connector.getConcept();\n \n \t\tfinal ImportId importId = info.getImp().getId();\n \n-\t\t// Create index and insert into Tree.\n-\t\tTreeChildPrefixIndex.putIndexInto(treeConcept);\n+\t\tfinal AStringType<?> stringType;\n+\n \n-\t\ttreeConcept.initializeIdCache(stringType, importId);\n+\t\tif (column != null) {\n \n-\t\tcBlock.setMostSpecificChildren(new ArrayList<>(bucket.getNumberOfEvents()));\n+\t\t\tCType<?, ?> cType = info.getImp().getColumns()[column.getPosition()].getType();\n+\n+\t\t\tif (!(cType instanceof AStringType)) {\n+\t\t\t\tlog.warn(\"Column[{}] is not of String type, but `{}`\", column.getId(), cType);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tstringType = (AStringType<?>) cType;\n+\n+\t\t\t// Create index and insert into Tree.\n+\t\t\tTreeChildPrefixIndex.putIndexInto(treeConcept);\n+\n+\t\t\ttreeConcept.initializeIdCache(stringType, importId);\n+\t\t}\n+\t\telse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a33c05b62ccf592a0a9b040f39c57aef3a52130"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4MTIwNw==", "bodyText": "Also gibt es hier eine Abk\u00fcrzung oder muss dieser Fall weiter verfolgt werden?", "url": "https://github.com/bakdata/conquery/pull/1324#discussion_r490881207", "createdAt": "2020-09-18T11:24:30Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/jobs/CalculateCBlocksJob.java", "diffHunk": "@@ -91,111 +103,150 @@ public void execute() throws Exception {\n \t\tprogressReporter.done();\n \t}\n \n-\tprivate void setDateRangeIndex(CBlock cBlock, CalculationInformation info) {\n-\t\tBucket bucket = info.getBucket();\n+\t/**\n+\t * For every included entity, calculate min and max and store them as statistics in the CBlock.\n+\t */\n+\tprivate void calculateEntityDateIndices(CBlock cBlock, Bucket bucket) {\n \t\tTable table = storage.getDataset().getTables().get(bucket.getImp().getTable());\n \t\tfor (Column column : table.getColumns()) {\n-\t\t\tif (column.getType().isDateCompatible()) {\n-\t\t\t\tfor (BucketEntry entry : bucket.entries()) {\n-\t\t\t\t\tif (bucket.has(entry.getEvent(), column)) {\n-\t\t\t\t\t\tCDateRange range = bucket.getAsDateRange(entry.getEvent(), column);\n-\t\t\t\t\t\tcBlock.getMinDate()[entry.getLocalEntity()] = Math\n-\t\t\t\t\t\t\t.min(cBlock.getMinDate()[entry.getLocalEntity()], range.getMinValue());\n-\t\t\t\t\t\tcBlock.getMaxDate()[entry.getLocalEntity()] = Math\n-\t\t\t\t\t\t\t.max(cBlock.getMaxDate()[entry.getLocalEntity()], range.getMaxValue());\n-\t\t\t\t\t}\n+\t\t\tif (!column.getType().isDateCompatible()) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tfor (BucketEntry entry : bucket.entries()) {\n+\t\t\t\tif (!bucket.has(entry.getEvent(), column)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\tCDateRange range = bucket.getAsDateRange(entry.getEvent(), column);\n+\n+\t\t\t\tcBlock.getMinDate()[entry.getLocalEntity()] = Math.min(cBlock.getMinDate()[entry.getLocalEntity()], range.getMinValue());\n+\n+\t\t\t\tcBlock.getMaxDate()[entry.getLocalEntity()] = Math.max(cBlock.getMaxDate()[entry.getLocalEntity()], range.getMaxValue());\n \t\t\t}\n \t\t}\n \t}\n \n-\tprivate CBlock createCBlock(Connector connector, CalculationInformation info) {\n+\tprivate static CBlock createCBlock(Connector connector, CalculationInformation info) {\n \t\treturn new CBlock(info.getBucket().getId(), connector.getId());\n \t}\n \n \t/**\n \t * No CBlocks for VirtualConcepts\n \t */\n-\tprivate void calculateCBlock(CBlock cBlock, VirtualConceptConnector connector, CalculationInformation info) {}\n+\tprivate void calculateCBlock(CBlock cBlock, VirtualConceptConnector connector, CalculationInformation info) {\n+\t}\n+\n \n \tprivate void calculateCBlock(CBlock cBlock, ConceptTreeConnector connector, CalculationInformation info) {\n \n \t\tBucket bucket = info.getBucket();\n \n-\t\tCType<?, ?> cType = info.getImp().getColumns()[connector.getColumn().getPosition()].getType();\n+\t\tfinal Column column = connector.getColumn();\n \n-\t\tif (!(cType instanceof AStringType)) {\n-\t\t\treturn;\n-\t\t}\n-\t\tAStringType<?> stringType = (AStringType<?>) cType;\n \n \t\tfinal TreeConcept treeConcept = connector.getConcept();\n \n \t\tfinal ImportId importId = info.getImp().getId();\n \n-\t\t// Create index and insert into Tree.\n-\t\tTreeChildPrefixIndex.putIndexInto(treeConcept);\n+\t\tfinal AStringType<?> stringType;\n+\n \n-\t\ttreeConcept.initializeIdCache(stringType, importId);\n+\t\tif (column != null) {\n \n-\t\tcBlock.setMostSpecificChildren(new ArrayList<>(bucket.getNumberOfEvents()));\n+\t\t\tCType<?, ?> cType = info.getImp().getColumns()[column.getPosition()].getType();\n+\n+\t\t\tif (!(cType instanceof AStringType)) {\n+\t\t\t\tlog.warn(\"Column[{}] is not of String type, but `{}`\", column.getId(), cType);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tstringType = (AStringType<?>) cType;\n+\n+\t\t\t// Create index and insert into Tree.\n+\t\t\tTreeChildPrefixIndex.putIndexInto(treeConcept);\n+\n+\t\t\ttreeConcept.initializeIdCache(stringType, importId);\n+\t\t}\n+\t\telse {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4MDgzMw=="}, "originalCommit": {"oid": "4a33c05b62ccf592a0a9b040f39c57aef3a52130"}, "originalPosition": 146}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1357, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}