{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNTc0OTgy", "number": 1253, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzoxODowNlrOEwGwuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzoyMTo0MFrOEwG11g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODc3ODgwOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQAnd.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzoxODowNlrOHldhYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzoxODowNlrOHldhYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA0MzA0MQ==", "bodyText": "Oben f\u00fcgst du den Aggregator als letztes zum QueryPlan, dann m\u00fcsstest du die Resultinfo auch hier als letztes anf\u00fcgen.", "url": "https://github.com/bakdata/conquery/pull/1253#discussion_r509043041", "createdAt": "2020-10-21T07:18:06Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQAnd.java", "diffHunk": "@@ -2,63 +2,87 @@\n \n import java.util.Arrays;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.function.Consumer;\n \n import javax.validation.Valid;\n import javax.validation.constraints.NotEmpty;\n \n import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.externalservice.ResultType;\n import com.bakdata.conquery.models.identifiable.ids.specific.ManagedExecutionId;\n import com.bakdata.conquery.models.query.QueryPlanContext;\n import com.bakdata.conquery.models.query.QueryResolveContext;\n import com.bakdata.conquery.models.query.Visitable;\n import com.bakdata.conquery.models.query.concept.CQElement;\n import com.bakdata.conquery.models.query.queryplan.ConceptQueryPlan;\n import com.bakdata.conquery.models.query.queryplan.QPNode;\n+import com.bakdata.conquery.models.query.queryplan.aggregators.specific.ExistsAggregator;\n import com.bakdata.conquery.models.query.queryplan.specific.AndNode;\n import com.bakdata.conquery.models.query.resultinfo.ResultInfoCollector;\n+import com.bakdata.conquery.models.query.resultinfo.SimpleResultInfo;\n import lombok.Getter;\n import lombok.Setter;\n \n-@CPSType(id=\"AND\", base=CQElement.class)\n-public class CQAnd implements CQElement {\n-\t@Getter @Setter @NotEmpty @Valid\n+@CPSType(id = \"AND\", base = CQElement.class)\n+public class CQAnd extends CQElement {\n+\t@Getter\n+\t@Setter\n+\t@NotEmpty\n+\t@Valid\n \tprivate List<CQElement> children;\n \n+\t@Getter @Setter\n+\tboolean createExists = false;\n+\n \t@Override\n \tpublic QPNode createQueryPlan(QueryPlanContext context, ConceptQueryPlan plan) {\n-\t\tQPNode[] aggs = new QPNode[children.size()];\n-\t\tfor(int i=0;i<aggs.length;i++) {\n-\t\t\taggs[i] = children.get(i).createQueryPlan(context, plan);\n+\t\tQPNode[] nodes = new QPNode[children.size()];\n+\t\tfor (int i = 0; i < nodes.length; i++) {\n+\t\t\tnodes[i] = children.get(i).createQueryPlan(context, plan);\n+\t\t}\n+\n+\t\tfinal QPNode node = AndNode.of(Arrays.asList(nodes));\n+\n+\t\tif (createExists) {\n+\t\t\tfinal ExistsAggregator existsAggregator = new ExistsAggregator(node.collectRequiredTables());\n+\t\t\texistsAggregator.setReference(node);\n+\t\t\tplan.addAggregator(existsAggregator);\n \t\t}\n-\t\treturn new AndNode(Arrays.asList(aggs));\n+\n+\n+\t\treturn node;\n \t}\n-\t\n+\n \t@Override\n \tpublic void collectRequiredQueries(Set<ManagedExecutionId> requiredQueries) {\n-\t\tfor(CQElement c:children) {\n+\t\tfor (CQElement c : children) {\n \t\t\tc.collectRequiredQueries(requiredQueries);\n \t\t}\n \t}\n \n \t@Override\n \tpublic CQElement resolve(QueryResolveContext context) {\n-\t\tchildren.replaceAll(c->c.resolve(context));\n+\t\tchildren.replaceAll(c -> c.resolve(context));\n \t\treturn this;\n \t}\n-\t\n+\n \t@Override\n \tpublic void collectResultInfos(ResultInfoCollector collector) {\n-\t\tfor(CQElement c:children) {\n+\t\tif(createExists){\n+\t\t\tcollector.add(new SimpleResultInfo(Objects.requireNonNullElse(getLabel(), \"AND\"), ResultType.BOOLEAN));\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70388208402b5330b4d8f46f06c9d7ddc520e833"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODc4MjcyOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQOr.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzoxOToxOFrOHldkAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzoxOToxOFrOHldkAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA0MzcxMg==", "bodyText": "Hier das gleiche", "url": "https://github.com/bakdata/conquery/pull/1253#discussion_r509043712", "createdAt": "2020-10-21T07:19:18Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQOr.java", "diffHunk": "@@ -3,67 +3,93 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.function.Consumer;\n \n import javax.validation.Valid;\n import javax.validation.constraints.NotEmpty;\n \n import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.externalservice.ResultType;\n import com.bakdata.conquery.models.identifiable.ids.specific.ManagedExecutionId;\n import com.bakdata.conquery.models.query.QueryPlanContext;\n import com.bakdata.conquery.models.query.QueryResolveContext;\n import com.bakdata.conquery.models.query.Visitable;\n import com.bakdata.conquery.models.query.concept.CQElement;\n import com.bakdata.conquery.models.query.queryplan.ConceptQueryPlan;\n import com.bakdata.conquery.models.query.queryplan.QPNode;\n+import com.bakdata.conquery.models.query.queryplan.aggregators.specific.ExistsAggregator;\n import com.bakdata.conquery.models.query.queryplan.specific.OrNode;\n import com.bakdata.conquery.models.query.resultinfo.ResultInfoCollector;\n+import com.bakdata.conquery.models.query.resultinfo.SimpleResultInfo;\n import lombok.AllArgsConstructor;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n import lombok.Setter;\n \n-@NoArgsConstructor @AllArgsConstructor\n-@CPSType(id=\"OR\", base=CQElement.class)\n-public class CQOr implements CQElement {\n-\t@Getter @Setter @NotEmpty @Valid\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@CPSType(id = \"OR\", base = CQElement.class)\n+public class CQOr extends CQElement {\n+\t@Getter\n+\t@Setter\n+\t@NotEmpty\n+\t@Valid\n \tprivate List<CQElement> children;\n-\t\n+\n+\t@Getter\n+\t@Setter\n+\tprivate boolean createExists = false;\n+\n \t@Override\n \tpublic QPNode createQueryPlan(QueryPlanContext context, ConceptQueryPlan plan) {\n-\t\tQPNode[] aggs = new QPNode[children.size()];\n-\t\tfor(int i=0;i<aggs.length;i++) {\n-\t\t\taggs[i] = children.get(i).createQueryPlan(context, plan);\n+\t\tQPNode[] nodes = new QPNode[children.size()];\n+\n+\t\tfor (int i = 0; i < nodes.length; i++) {\n+\t\t\tnodes[i] = children.get(i).createQueryPlan(context, plan);\n+\t\t}\n+\n+\t\tfinal QPNode or = OrNode.of(Arrays.asList(nodes));\n+\n+\t\tif (createExists) {\n+\t\t\tfinal ExistsAggregator existsAggregator = new ExistsAggregator(or.collectRequiredTables());\n+\t\t\texistsAggregator.setReference(or);\n+\t\t\tplan.addAggregator(existsAggregator);\n \t\t}\n-\t\treturn OrNode.of(Arrays.asList(aggs));\n+\n+\t\treturn or;\n \t}\n-\t\n+\n \t@Override\n \tpublic void collectRequiredQueries(Set<ManagedExecutionId> requiredQueries) {\n-\t\tfor(CQElement c:children) {\n+\t\tfor (CQElement c : children) {\n \t\t\tc.collectRequiredQueries(requiredQueries);\n \t\t}\n \t}\n \n \t@Override\n \tpublic CQElement resolve(QueryResolveContext context) {\n \t\tvar copy = new ArrayList<>(children);\n-\t\tcopy.replaceAll(c->c.resolve(context));\n-\t\treturn new CQOr(copy);\n+\t\tcopy.replaceAll(c -> c.resolve(context));\n+\t\treturn new CQOr(copy, isCreateExists());\n \t}\n-\t\n+\n \t@Override\n \tpublic void collectResultInfos(ResultInfoCollector collector) {\n-\t\tfor(CQElement c:children) {\n+\t\tif (createExists) {\n+\t\t\tcollector.add(new SimpleResultInfo(Objects.requireNonNullElse(getLabel(), \"OR\"), ResultType.BOOLEAN));\n+\t\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70388208402b5330b4d8f46f06c9d7ddc520e833"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODc5MTkwOnYy", "diffSide": "RIGHT", "path": "backend/src/test/resources/tests/query/AND_TREECONCEPT_QUERY/content.csv", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzoyMTo0MFrOHldpQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzoyMTo0MFrOHldpQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA0NTA1Nw==", "bodyText": "Kannst du hier noch den Datensatz erg\u00e4nzen um eine Entity die nicht im Ergebnis auftaucht?", "url": "https://github.com/bakdata/conquery/pull/1253#discussion_r509045057", "createdAt": "2020-10-21T07:21:40Z", "author": {"login": "thoniTUB"}, "path": "backend/src/test/resources/tests/query/AND_TREECONCEPT_QUERY/content.csv", "diffHunk": "@@ -0,0 +1,3 @@\n+pid,datum,test_column\n+1,2012-01-01,\"A1\"\n+1,2012-01-01,\"B2\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70388208402b5330b4d8f46f06c9d7ddc520e833"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1287, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}