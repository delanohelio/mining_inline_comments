{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MTY0MzQy", "number": 1409, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDoyMDo1N1rOE8pB0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDoyMjoyMFrOE8pFwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDIyMjI1OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/exceptions/ValidatorHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDoyMDo1N1rOH44nNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjozODo1M1rOH57nMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQwOTg0Nw==", "bodyText": "Kannst du hier nicht einfach ne MultiException draus machen?", "url": "https://github.com/bakdata/conquery/pull/1409#discussion_r529409847", "createdAt": "2020-11-24T10:20:57Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/exceptions/ValidatorHelper.java", "diffHunk": "@@ -1,46 +1,63 @@\n package com.bakdata.conquery.models.exceptions;\n \n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n import javax.validation.ConstraintViolation;\n-import javax.ws.rs.core.Request;\n+import javax.validation.ValidationException;\n \n-import io.dropwizard.jersey.validation.ConstraintMessage;\n+import io.dropwizard.logback.shaded.guava.base.Optional;\n import lombok.experimental.UtilityClass;\n-import org.glassfish.jersey.process.Inflector;\n-import org.glassfish.jersey.server.model.Invocable;\n import org.slf4j.Logger;\n \n @UtilityClass\n public final class ValidatorHelper {\n+\t\n+\tprivate static final String VERTICAL_DIVIDER = \"------------------------------------\\n\";\n \n-\tpublic static void failOnError(Logger log, Set<? extends ConstraintViolation<?>> violations) throws JSONException {\n+\tpublic static void failOnError(Logger log, Set<? extends ConstraintViolation<?>> violations) {\n \t\tfailOnError(log, violations, null);\n \t}\n \t\n-\tpublic static void failOnError(Logger log, Set<? extends ConstraintViolation<?>> violations, String context) throws JSONException {\n-\t\tList<String> violationMessages = violations\n-\t\t\t\t.stream()\n-\t\t\t\t.map( v->\n-\t\t\t\t\tConstraintMessage.getMessage(v,Invocable.create((Inflector<Request, Void>) data -> null)))\n-\t\t\t\t.collect(Collectors.toList());\n+\tpublic static <V extends ConstraintViolation<?>> void failOnError(Logger log, Set<V> violations, String context) {\n+\t\t\n+\t\t// Wrap grouper in Optional to also catch null values.\n+\t\tMap<Optional<Object>, List<V>> mapByLeaf = violations.stream().collect(Collectors.groupingBy(v -> Optional.of(v.getLeafBean())));\n \t\t\n-\t\tfailOnError(log, violationMessages, context);\n+\t\t// Combine all leaf fail reports into a single exception.\n+\t\tif(!mapByLeaf.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db28e093eb8af9fffad87d92fb695fd63c52d5a0"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwNzU3MA==", "bodyText": "Ich w\u00fcrde hier keine MultiException werfen, weil alle Exeptions vom selben Typ sind", "url": "https://github.com/bakdata/conquery/pull/1409#discussion_r530507570", "createdAt": "2020-11-25T16:38:53Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/exceptions/ValidatorHelper.java", "diffHunk": "@@ -1,46 +1,63 @@\n package com.bakdata.conquery.models.exceptions;\n \n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n import javax.validation.ConstraintViolation;\n-import javax.ws.rs.core.Request;\n+import javax.validation.ValidationException;\n \n-import io.dropwizard.jersey.validation.ConstraintMessage;\n+import io.dropwizard.logback.shaded.guava.base.Optional;\n import lombok.experimental.UtilityClass;\n-import org.glassfish.jersey.process.Inflector;\n-import org.glassfish.jersey.server.model.Invocable;\n import org.slf4j.Logger;\n \n @UtilityClass\n public final class ValidatorHelper {\n+\t\n+\tprivate static final String VERTICAL_DIVIDER = \"------------------------------------\\n\";\n \n-\tpublic static void failOnError(Logger log, Set<? extends ConstraintViolation<?>> violations) throws JSONException {\n+\tpublic static void failOnError(Logger log, Set<? extends ConstraintViolation<?>> violations) {\n \t\tfailOnError(log, violations, null);\n \t}\n \t\n-\tpublic static void failOnError(Logger log, Set<? extends ConstraintViolation<?>> violations, String context) throws JSONException {\n-\t\tList<String> violationMessages = violations\n-\t\t\t\t.stream()\n-\t\t\t\t.map( v->\n-\t\t\t\t\tConstraintMessage.getMessage(v,Invocable.create((Inflector<Request, Void>) data -> null)))\n-\t\t\t\t.collect(Collectors.toList());\n+\tpublic static <V extends ConstraintViolation<?>> void failOnError(Logger log, Set<V> violations, String context) {\n+\t\t\n+\t\t// Wrap grouper in Optional to also catch null values.\n+\t\tMap<Optional<Object>, List<V>> mapByLeaf = violations.stream().collect(Collectors.groupingBy(v -> Optional.of(v.getLeafBean())));\n \t\t\n-\t\tfailOnError(log, violationMessages, context);\n+\t\t// Combine all leaf fail reports into a single exception.\n+\t\tif(!mapByLeaf.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQwOTg0Nw=="}, "originalCommit": {"oid": "db28e093eb8af9fffad87d92fb695fd63c52d5a0"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDIzMjMzOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/exceptions/ValidatorHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDoyMjoyMFrOH44tjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODo0NzoxOVrOH5oseg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQxMTQ3MQ==", "bodyText": "Das ist ganz sch\u00f6n ausf\u00fchrlich, hast du daf\u00fcr eine Beispiel Message rumliegen?", "url": "https://github.com/bakdata/conquery/pull/1409#discussion_r529411471", "createdAt": "2020-11-24T10:22:20Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/exceptions/ValidatorHelper.java", "diffHunk": "@@ -1,46 +1,63 @@\n package com.bakdata.conquery.models.exceptions;\n \n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n import javax.validation.ConstraintViolation;\n-import javax.ws.rs.core.Request;\n+import javax.validation.ValidationException;\n \n-import io.dropwizard.jersey.validation.ConstraintMessage;\n+import io.dropwizard.logback.shaded.guava.base.Optional;\n import lombok.experimental.UtilityClass;\n-import org.glassfish.jersey.process.Inflector;\n-import org.glassfish.jersey.server.model.Invocable;\n import org.slf4j.Logger;\n \n @UtilityClass\n public final class ValidatorHelper {\n+\t\n+\tprivate static final String VERTICAL_DIVIDER = \"------------------------------------\\n\";\n \n-\tpublic static void failOnError(Logger log, Set<? extends ConstraintViolation<?>> violations) throws JSONException {\n+\tpublic static void failOnError(Logger log, Set<? extends ConstraintViolation<?>> violations) {\n \t\tfailOnError(log, violations, null);\n \t}\n \t\n-\tpublic static void failOnError(Logger log, Set<? extends ConstraintViolation<?>> violations, String context) throws JSONException {\n-\t\tList<String> violationMessages = violations\n-\t\t\t\t.stream()\n-\t\t\t\t.map( v->\n-\t\t\t\t\tConstraintMessage.getMessage(v,Invocable.create((Inflector<Request, Void>) data -> null)))\n-\t\t\t\t.collect(Collectors.toList());\n+\tpublic static <V extends ConstraintViolation<?>> void failOnError(Logger log, Set<V> violations, String context) {\n+\t\t\n+\t\t// Wrap grouper in Optional to also catch null values.\n+\t\tMap<Optional<Object>, List<V>> mapByLeaf = violations.stream().collect(Collectors.groupingBy(v -> Optional.of(v.getLeafBean())));\n \t\t\n-\t\tfailOnError(log, violationMessages, context);\n+\t\t// Combine all leaf fail reports into a single exception.\n+\t\tif(!mapByLeaf.isEmpty()) {\n+\t\t\tthrow new ValidationException(mapByLeaf.entrySet().stream().map(ValidatorHelper::createViolationString).collect(Collectors.joining(VERTICAL_DIVIDER)));\t\t\t\n+\t\t}\n \t}\n \t\n-\tpublic static void failOnError(Logger log, List<String> violations, String context) throws JSONException {\n-\t\tif(violations.size()>0) {\n-\t\t\tfor(String v:violations) {\n-\t\t\t\tlog.error(v);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(context!=null) {\n-\t\t\t\tthrow new JSONException(\"Failed with \"+violations.size()+\" errors in \"+context+\".\");\n-\t\t\t}\n-\t\t\tthrow new JSONException(\"Failed with \"+violations.size()+\" errors.\");\n+\t/**\n+\t * Combines all violations for a given leaf object and gives the path to the root object if possible.\n+\t */\n+\tprivate static <V extends ConstraintViolation<?>> String createViolationString(Map.Entry<Optional<Object>, List<V>> objectToViolation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db28e093eb8af9fffad87d92fb695fd63c52d5a0"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE5NzYyNg==", "bodyText": "Das sieht dann z.B. so aus:\njavax.validation.ValidationException: \nValidation failed on: class com.bakdata.conquery.models.config.ConqueryConfig\n\t\t- cluster.port: muss zwischen 1 und 65535 sein\n\t\t- csv.encoding: darf nicht null sein\n\t\t- preprocessor.nThreads: muss gr\u00f6\u00dfer-gleich 1 sein\n\t\t- preprocessor.faultyLineThreshold: muss kleiner-gleich 1 sein\n\tat com.bakdata.conquery.models.exceptions.ValidatorHelper.failOnError(ValidatorHelper.java:49)\n\tat com.bakdata.conquery.models.exceptions.ValidatorHelper.failOnError(ValidatorHelper.java:24)\n\tat com.bakdata.conquery.io.ValidationTest.test(ValidationTest.java:22)\n\nHabs nochmal \u00fcberarbeitet und eine ausf\u00fchrlichere Nachricht geschrieben, wenn trace aktiviert ist.", "url": "https://github.com/bakdata/conquery/pull/1409#discussion_r530197626", "createdAt": "2020-11-25T08:47:19Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/exceptions/ValidatorHelper.java", "diffHunk": "@@ -1,46 +1,63 @@\n package com.bakdata.conquery.models.exceptions;\n \n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n import javax.validation.ConstraintViolation;\n-import javax.ws.rs.core.Request;\n+import javax.validation.ValidationException;\n \n-import io.dropwizard.jersey.validation.ConstraintMessage;\n+import io.dropwizard.logback.shaded.guava.base.Optional;\n import lombok.experimental.UtilityClass;\n-import org.glassfish.jersey.process.Inflector;\n-import org.glassfish.jersey.server.model.Invocable;\n import org.slf4j.Logger;\n \n @UtilityClass\n public final class ValidatorHelper {\n+\t\n+\tprivate static final String VERTICAL_DIVIDER = \"------------------------------------\\n\";\n \n-\tpublic static void failOnError(Logger log, Set<? extends ConstraintViolation<?>> violations) throws JSONException {\n+\tpublic static void failOnError(Logger log, Set<? extends ConstraintViolation<?>> violations) {\n \t\tfailOnError(log, violations, null);\n \t}\n \t\n-\tpublic static void failOnError(Logger log, Set<? extends ConstraintViolation<?>> violations, String context) throws JSONException {\n-\t\tList<String> violationMessages = violations\n-\t\t\t\t.stream()\n-\t\t\t\t.map( v->\n-\t\t\t\t\tConstraintMessage.getMessage(v,Invocable.create((Inflector<Request, Void>) data -> null)))\n-\t\t\t\t.collect(Collectors.toList());\n+\tpublic static <V extends ConstraintViolation<?>> void failOnError(Logger log, Set<V> violations, String context) {\n+\t\t\n+\t\t// Wrap grouper in Optional to also catch null values.\n+\t\tMap<Optional<Object>, List<V>> mapByLeaf = violations.stream().collect(Collectors.groupingBy(v -> Optional.of(v.getLeafBean())));\n \t\t\n-\t\tfailOnError(log, violationMessages, context);\n+\t\t// Combine all leaf fail reports into a single exception.\n+\t\tif(!mapByLeaf.isEmpty()) {\n+\t\t\tthrow new ValidationException(mapByLeaf.entrySet().stream().map(ValidatorHelper::createViolationString).collect(Collectors.joining(VERTICAL_DIVIDER)));\t\t\t\n+\t\t}\n \t}\n \t\n-\tpublic static void failOnError(Logger log, List<String> violations, String context) throws JSONException {\n-\t\tif(violations.size()>0) {\n-\t\t\tfor(String v:violations) {\n-\t\t\t\tlog.error(v);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(context!=null) {\n-\t\t\t\tthrow new JSONException(\"Failed with \"+violations.size()+\" errors in \"+context+\".\");\n-\t\t\t}\n-\t\t\tthrow new JSONException(\"Failed with \"+violations.size()+\" errors.\");\n+\t/**\n+\t * Combines all violations for a given leaf object and gives the path to the root object if possible.\n+\t */\n+\tprivate static <V extends ConstraintViolation<?>> String createViolationString(Map.Entry<Optional<Object>, List<V>> objectToViolation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQxMTQ3MQ=="}, "originalCommit": {"oid": "db28e093eb8af9fffad87d92fb695fd63c52d5a0"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1614, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}