{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NjM4MDY1", "number": 1139, "reviewThreads": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo0NzoxOVrOD4-MtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo1Nzo0NFrOD8FBlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDY1OTA5OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/Conquery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo0NzoxOVrOGP-s5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzozMTo1OVrOGQpiIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwOTEyNQ==", "bodyText": "den JSON Validator in die Json Deserialisierung injizieren? Das Xzibit Meme ist hier sehr passend :D", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r419409125", "createdAt": "2020-05-04T12:47:19Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/Conquery.java", "diffHunk": "@@ -54,6 +56,8 @@ public void initialize(Bootstrap<ConqueryConfig> bootstrap) {\n \t\tbootstrap.addCommand(new PreprocessorCommand());\n \t\tbootstrap.addCommand(new CollectEntitiesCommand());\n \t\tbootstrap.addCommand(new StandaloneCommand(this));\n+\t\t\n+\t\t((MutableInjectableValues)bootstrap.getObjectMapper().getInjectableValues()).add(Validator.class, bootstrap.getValidatorFactory().getValidator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "900bc771286a76c52b5e6d4468fa32d6405e9378"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExMDg4MQ==", "bodyText": "Ich fand das ganz praktisch f\u00fcr auch f\u00fcr die Zukuft, wenn man andere Factories konfiguriert die Objekte erzeugen die mit input Daten umgehen m\u00fcssen. Dann m\u00fcssen diese Objekte nicht extra ein Initialisierungsmethode bekommen um den Validator zu kriegen.", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r420110881", "createdAt": "2020-05-05T13:31:59Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/Conquery.java", "diffHunk": "@@ -54,6 +56,8 @@ public void initialize(Bootstrap<ConqueryConfig> bootstrap) {\n \t\tbootstrap.addCommand(new PreprocessorCommand());\n \t\tbootstrap.addCommand(new CollectEntitiesCommand());\n \t\tbootstrap.addCommand(new StandaloneCommand(this));\n+\t\t\n+\t\t((MutableInjectableValues)bootstrap.getObjectMapper().getInjectableValues()).add(Validator.class, bootstrap.getValidatorFactory().getValidator());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwOTEyNQ=="}, "originalCommit": {"oid": "900bc771286a76c52b5e6d4468fa32d6405e9378"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDY3OTQwOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo1MjoyNFrOGP-5IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzozMzo0N1rOGQpm_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQxMjI1Ng==", "bodyText": "warum kann der name nicht per default gesetzt sein?", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r419412256", "createdAt": "2020-05-04T12:52:24Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "diffHunk": "@@ -109,6 +114,9 @@ public ManagedExecution(UserId owner, DatasetId submittedDataset) {\n \n \t@Override\n \tpublic ManagedExecutionId createId() {\n+\t\tif(queryId == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "900bc771286a76c52b5e6d4468fa32d6405e9378"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExMjEyNw==", "bodyText": "Ich habe das so gemacht, damit wir nicht eine CI-Endlosschleife bekommen, sollte diese Klasse mal zum Autodoc hinzugef\u00fcgt werden.", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r420112127", "createdAt": "2020-05-05T13:33:47Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "diffHunk": "@@ -109,6 +114,9 @@ public ManagedExecution(UserId owner, DatasetId submittedDataset) {\n \n \t@Override\n \tpublic ManagedExecutionId createId() {\n+\t\tif(queryId == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQxMjI1Ng=="}, "originalCommit": {"oid": "900bc771286a76c52b5e6d4468fa32d6405e9378"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDY5NjY5OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ResultProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo1Njo1MVrOGP_Dqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo1Njo1MVrOGP_Dqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQxNDk1NQ==", "bodyText": "mdc clear am ende noch?", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r419414955", "createdAt": "2020-05-04T12:56:51Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ResultProcessor.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.bakdata.conquery.models.execution;\n+\n+import static com.bakdata.conquery.models.auth.AuthorizationHelper.authorize;\n+import static com.bakdata.conquery.models.auth.AuthorizationHelper.authorizeDownloadDatasets;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.NoSuchElementException;\n+\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.Response.ResponseBuilder;\n+import javax.ws.rs.core.Response.Status;\n+import javax.ws.rs.core.StreamingOutput;\n+\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.permissions.Ability;\n+import com.bakdata.conquery.models.config.ConqueryConfig;\n+import com.bakdata.conquery.models.i18n.I18n;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ManagedExecutionId;\n+import com.bakdata.conquery.models.identifiable.mapping.IdMappingState;\n+import com.bakdata.conquery.models.query.PrintSettings;\n+import com.bakdata.conquery.models.worker.Namespaces;\n+import com.bakdata.conquery.util.io.ConqueryMDC;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Holder for utility methods to obtain an result from an execution.\n+ * Acts as a bridge between HTTP-requests and {@link ManagedExecution}s.\n+ */\n+@Slf4j\n+public class ResultProcessor {\n+\t\n+\tpublic static ResponseBuilder getResult(User user, DatasetId datasetId, ManagedExecutionId queryId, String userAgent, Namespaces namespaces, ConqueryConfig config) {\n+\t\tConqueryMDC.setLocation(user.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "900bc771286a76c52b5e6d4468fa32d6405e9378"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTAzMDc0OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/FormProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoxMTozM1rOGQCMtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzo0NTo1NFrOGQqKDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NjQyMg==", "bodyText": "brauchst du hier beide jacksons?", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r419466422", "createdAt": "2020-05-04T14:11:33Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/FormProcessor.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package com.bakdata.conquery.models.forms.frontendconfiguration;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Consumer;\n+\n+import com.bakdata.conquery.apiv1.forms.Form;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.io.cps.CPSTypeIdResolver;\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.permissions.Ability;\n+import com.bakdata.conquery.models.auth.permissions.FormPermission;\n+import com.bakdata.conquery.models.forms.frontendconfiguration.FormFrontendConfigProvider.FormFrontendConfigInformation;\n+import com.bakdata.conquery.util.QueryUtils;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@RequiredArgsConstructor\n+@Getter\n+@Slf4j\n+public class FormProcessor {\n+\n+\tprivate final static String INFO_FORMAT = \"\\t%-20s %-60s %-20s\\n\";\n+\tprivate final static ObjectReader READER = io.dropwizard.jackson.Jackson.newObjectMapper().reader();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "900bc771286a76c52b5e6d4468fa32d6405e9378"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEyMTEwMw==", "bodyText": "Wie meinst du das mit beide Jacksons? Ich hab es jetzt dahin ge\u00e4ndert, dass ich eine Kopie von dem ConqueryJackson mache", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r420121103", "createdAt": "2020-05-05T13:45:54Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/FormProcessor.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package com.bakdata.conquery.models.forms.frontendconfiguration;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Consumer;\n+\n+import com.bakdata.conquery.apiv1.forms.Form;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.io.cps.CPSTypeIdResolver;\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.permissions.Ability;\n+import com.bakdata.conquery.models.auth.permissions.FormPermission;\n+import com.bakdata.conquery.models.forms.frontendconfiguration.FormFrontendConfigProvider.FormFrontendConfigInformation;\n+import com.bakdata.conquery.util.QueryUtils;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@RequiredArgsConstructor\n+@Getter\n+@Slf4j\n+public class FormProcessor {\n+\n+\tprivate final static String INFO_FORMAT = \"\\t%-20s %-60s %-20s\\n\";\n+\tprivate final static ObjectReader READER = io.dropwizard.jackson.Jackson.newObjectMapper().reader();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NjQyMg=="}, "originalCommit": {"oid": "900bc771286a76c52b5e6d4468fa32d6405e9378"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTAzODYwOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/FormProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoxMzoyNFrOGQCRlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoxMzoyNFrOGQCRlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NzY2OQ==", "bodyText": "kannst du das trennen in den scanner und die Processor Methoden f\u00fcr die Ressource?", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r419467669", "createdAt": "2020-05-04T14:13:24Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/FormProcessor.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package com.bakdata.conquery.models.forms.frontendconfiguration;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Consumer;\n+\n+import com.bakdata.conquery.apiv1.forms.Form;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.io.cps.CPSTypeIdResolver;\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.permissions.Ability;\n+import com.bakdata.conquery.models.auth.permissions.FormPermission;\n+import com.bakdata.conquery.models.forms.frontendconfiguration.FormFrontendConfigProvider.FormFrontendConfigInformation;\n+import com.bakdata.conquery.util.QueryUtils;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@RequiredArgsConstructor\n+@Getter\n+@Slf4j\n+public class FormProcessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "900bc771286a76c52b5e6d4468fa32d6405e9378"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTA3OTQ5OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/FormProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoyMjozNVrOGQCrMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoyMjozNVrOGQCrMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ3NDIyNQ==", "bodyText": "kannst auch nen StringJoiner draus machen aber kein Makel", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r419474225", "createdAt": "2020-05-04T14:22:35Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/FormProcessor.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package com.bakdata.conquery.models.forms.frontendconfiguration;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Consumer;\n+\n+import com.bakdata.conquery.apiv1.forms.Form;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.io.cps.CPSTypeIdResolver;\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.permissions.Ability;\n+import com.bakdata.conquery.models.auth.permissions.FormPermission;\n+import com.bakdata.conquery.models.forms.frontendconfiguration.FormFrontendConfigProvider.FormFrontendConfigInformation;\n+import com.bakdata.conquery.util.QueryUtils;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@RequiredArgsConstructor\n+@Getter\n+@Slf4j\n+public class FormProcessor {\n+\n+\tprivate final static String INFO_FORMAT = \"\\t%-20s %-60s %-20s\\n\";\n+\tprivate final static ObjectReader READER = io.dropwizard.jackson.Jackson.newObjectMapper().reader();\n+\tprivate static final Map<String, JsonNode> FRONTEND_FORM_CONFIGS = generateFEFormConfigMap();\n+\n+\tprivate final MasterMetaStorage storage;\n+\n+\tprivate static Map<String, Class<? extends Form>> findBackendMappingClasses() {\n+\t\t// Gather form implementations first\n+\t\tMap<String, Class<? extends Form>> forms = new HashMap<>();\n+\t\tfor (Class<?> subclass : CPSTypeIdResolver.SCAN_RESULT.getClassesImplementing(Form.class.getName()).loadClasses()) {\n+\t\t\tif (Modifier.isAbstract(subclass.getModifiers())) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tCPSType anno = subclass.getAnnotation(CPSType.class);\n+\t\t\tif (anno == null) {\n+\t\t\t\tlog.warn(\"Implemented Form {} has no CPSType annotation\", subclass);\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tforms.put(anno.id(), (Class<? extends Form>) subclass);\n+\t\t}\n+\t\treturn forms;\n+\t}\n+\n+\t/**\n+\t * Frontend form configurations can be provided from different sources. For\n+\t * these sources a stub of type {@link FormFrontendConfigProviderBase} must be\n+\t * implemented in order to be discovered by this function.\n+\t */\n+\t@SneakyThrows\n+\tprivate static List<FormFrontendConfigInformation> findFrontendFormConfigs() {\n+\t\tList<Class<?>> configProviders = CPSTypeIdResolver.SCAN_RESULT.getClassesImplementing(FormFrontendConfigProvider.class.getName())\n+\t\t\t.loadClasses();\n+\t\t\n+\t\tConsumer<Collection<FormFrontendConfigInformation>> providerChain = QueryUtils.getNoOpEntryPoint();\n+\t\t\n+\t\tfor (Class<?> configProvider : configProviders) {\n+\t\t\tint modifiers = configProvider.getModifiers();\n+\t\t\tif (Modifier.isAbstract(modifiers) || Modifier.isInterface(modifiers)) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\t@SuppressWarnings(\"unchecked\")\n+\t\t\tClass<? extends FormFrontendConfigProvider> formConfigProvider = (Class<? extends FormFrontendConfigProviderBase>) configProvider;\n+\t\t\tConsumer<Collection<FormFrontendConfigInformation>> provider;\n+\t\t\t// Distinguish between interface implementations and implementations of the abstract class \n+\t\t\tif (FormFrontendConfigProviderBase.class.isAssignableFrom(formConfigProvider)) {\n+\t\t\t\tprovider = formConfigProvider.getConstructor(ObjectReader.class).newInstance(READER);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tprovider = formConfigProvider.getConstructor().newInstance();\n+\t\t\t}\n+\t\t\tproviderChain = providerChain.andThen(provider);\n+\t\t}\n+\t\tList<FormFrontendConfigInformation> frontendConfigs = new ArrayList<>();\n+\t\tproviderChain.accept(frontendConfigs);\n+\t\treturn frontendConfigs;\n+\t}\n+\n+\tprivate static Map<String, JsonNode> generateFEFormConfigMap() {\n+\t\tStringBuilder info = new StringBuilder(String.format(\"\\n\" + INFO_FORMAT, \"Form Type\", \"Frontend Config\", \"Backend Class\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "900bc771286a76c52b5e6d4468fa32d6405e9378"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTA5NTIzOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/ResourceFormConfigProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoyNTo1M1rOGQC1EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoyNTo1M1rOGQC1EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ3Njc1Mg==", "bodyText": "t ist nicht ein besonders sprechender Name?", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r419476752", "createdAt": "2020-05-04T14:25:53Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/ResourceFormConfigProvider.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.bakdata.conquery.models.forms.frontendconfiguration;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.regex.Pattern;\n+\n+import com.bakdata.conquery.io.cps.CPSTypeIdResolver;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import io.github.classgraph.Resource;\n+import io.github.classgraph.ResourceList;\n+\n+/**\n+ * Loads form frontend configuration from the bundled resources that are in the class path.\n+ * In order to be found, the configuration file name must end with {@code *.frontend_conf.json}.\n+ */\n+public class ResourceFormConfigProvider extends FormFrontendConfigProviderBase{\n+\t\n+\n+\tpublic ResourceFormConfigProvider(ObjectReader reader) {\n+\t\tsuper(reader);\n+\t}\n+\n+\t@Override\n+\tpublic void accept(Collection<FormFrontendConfigInformation> t) {\n+\t\tResourceList frontendConfigs = CPSTypeIdResolver.SCAN_RESULT\n+\t\t\t.getResourcesMatchingPattern(Pattern.compile(\".*\\\\.frontend_conf\\\\.json\"));\n+\t\t\n+\t\tfor (Resource config : frontendConfigs) {\n+\t\t\ttry {\n+\t\t\t\tJsonNode configTree = reader.readTree(config.open());\n+\t\t\t\tt.add(new FormFrontendConfigInformation(\"Resource \" + config.getPath(), configTree));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "900bc771286a76c52b5e6d4468fa32d6405e9378"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTEwMDMwOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/ResourceFormConfigProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoyNjo1NVrOGQC4Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzozODo0MVrOGQp0oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ3NzU0Nw==", "bodyText": "sollte es nicht eher form.json oder so sein? Beschreibt das nicht die Formulare vollst\u00e4ndig?", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r419477547", "createdAt": "2020-05-04T14:26:55Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/ResourceFormConfigProvider.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.bakdata.conquery.models.forms.frontendconfiguration;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.regex.Pattern;\n+\n+import com.bakdata.conquery.io.cps.CPSTypeIdResolver;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import io.github.classgraph.Resource;\n+import io.github.classgraph.ResourceList;\n+\n+/**\n+ * Loads form frontend configuration from the bundled resources that are in the class path.\n+ * In order to be found, the configuration file name must end with {@code *.frontend_conf.json}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "900bc771286a76c52b5e6d4468fa32d6405e9378"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExNTYxNw==", "bodyText": "Die Dateien werden an sich nur vom Frontend verarbeitet.", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r420115617", "createdAt": "2020-05-05T13:38:41Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/ResourceFormConfigProvider.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.bakdata.conquery.models.forms.frontendconfiguration;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.regex.Pattern;\n+\n+import com.bakdata.conquery.io.cps.CPSTypeIdResolver;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import io.github.classgraph.Resource;\n+import io.github.classgraph.ResourceList;\n+\n+/**\n+ * Loads form frontend configuration from the bundled resources that are in the class path.\n+ * In order to be found, the configuration file name must end with {@code *.frontend_conf.json}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ3NzU0Nw=="}, "originalCommit": {"oid": "900bc771286a76c52b5e6d4468fa32d6405e9378"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzgzMjU2OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/ManagedForm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNjo1MDo0MFrOGQcgig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNjo1MDo0MFrOGQcgig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5NzQ4Mg==", "bodyText": "Das If w\u00fcrde ich umdrehen", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r419897482", "createdAt": "2020-05-05T06:50:40Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/ManagedForm.java", "diffHunk": "@@ -194,4 +198,48 @@ public FormSharedResult getInitializedShardResult(Entry<ManagedExecutionId, Quer\n \tpublic QueryDescription getSubmitted() {\n \t\treturn submittedForm;\n \t}\n+\n+\n+\n+\t@Override\n+\tpublic StreamingOutput getResult(IdMappingState mappingState, PrintSettings settings, Charset charset, String lineSeparator) {\n+\t\tif(subQueries.size() == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c551fa7865cc999ac9570f77ec12880b1de3eb0"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzgzNjk0OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/ManagedForm.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNjo1MjoxOVrOGQcjPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDowMjowMFrOGQq6Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5ODE3NA==", "bodyText": "sehe ich das richtig, dass die columnDescription nur einmal erzeugt wird? Ist das eine aufw\u00e4ndige Berechnung? Ich w\u00fcrde das glaube ich einfach immer on-demand berechnen.", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r419898174", "createdAt": "2020-05-05T06:52:19Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/ManagedForm.java", "diffHunk": "@@ -194,4 +198,48 @@ public FormSharedResult getInitializedShardResult(Entry<ManagedExecutionId, Quer\n \tpublic QueryDescription getSubmitted() {\n \t\treturn submittedForm;\n \t}\n+\n+\n+\n+\t@Override\n+\tpublic StreamingOutput getResult(IdMappingState mappingState, PrintSettings settings, Charset charset, String lineSeparator) {\n+\t\tif(subQueries.size() == 1) {\n+\t\t\t// Get the query, only if there is only one query set in the whole execution\n+\t\t\treturn ResultCSVResource.resultAsStreamingOutput(this.getId(), settings, subQueries.values().iterator().next(), mappingState, charset, lineSeparator);\n+\t\t}\n+\t\tthrow new UnsupportedOperationException(\"Can't return the result query of a multi query form\");\n+\t}\n+\t\n+\t@Override\n+\tprotected void setAdditionalFieldsForStatusWithSource(@NonNull MasterMetaStorage storage, URLBuilder url, User user, WithSingleQuery status) {\n+\t\tsuper.setAdditionalFieldsForStatusWithSource(storage, url, user, status);\n+\t\t// Set the ColumnDescription if the Form only consits of a single subquery\n+\t\tif(subQueries == null) {\n+\t\t\t// If subqueries was not set the Execution was not initialized\n+\t\t\tthis.initExecutable(storage.getNamespaces());\n+\t\t}\n+\t\tif(subQueries.size() != 1) {\n+\t\t\t// The sub-query size might also be zero if the backend just delegates the form further to another backend. Forms with more subqueries are not yet supported\n+\t\t\tlog.trace(\"Column description is not generated for {} ({} from Form {}), because the form does not consits of a single subquery. Subquery size was {}.\", subQueries.size(),\n+\t\t\t\tthis.getClass().getSimpleName(), getId(), getSubmitted().getClass().getSimpleName());\n+\t\t\treturn;\n+\t\t}\n+\t\tList<ManagedQuery> subQuery = subQueries.entrySet().iterator().next().getValue();\n+\t\tif(subQuery.isEmpty()) {\n+\t\t\tlog.warn(\"The {} ({} from Form {}) does not have any subqueries after initialization. Not creating a column description.\",\n+\t\t\t\tthis.getClass().getSimpleName(),\n+\t\t\t\tgetId(),\n+\t\t\t\tgetSubmitted().getClass().getSimpleName());\n+\t\t\treturn;\n+\t\t}\n+\t\tstatus.setColumnDescriptions(subQuery.get(0).generateColumnDescriptions());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c551fa7865cc999ac9570f77ec12880b1de3eb0"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEzMzM3OQ==", "bodyText": "Kommt immer fresh ;)", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r420133379", "createdAt": "2020-05-05T14:02:00Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/ManagedForm.java", "diffHunk": "@@ -194,4 +198,48 @@ public FormSharedResult getInitializedShardResult(Entry<ManagedExecutionId, Quer\n \tpublic QueryDescription getSubmitted() {\n \t\treturn submittedForm;\n \t}\n+\n+\n+\n+\t@Override\n+\tpublic StreamingOutput getResult(IdMappingState mappingState, PrintSettings settings, Charset charset, String lineSeparator) {\n+\t\tif(subQueries.size() == 1) {\n+\t\t\t// Get the query, only if there is only one query set in the whole execution\n+\t\t\treturn ResultCSVResource.resultAsStreamingOutput(this.getId(), settings, subQueries.values().iterator().next(), mappingState, charset, lineSeparator);\n+\t\t}\n+\t\tthrow new UnsupportedOperationException(\"Can't return the result query of a multi query form\");\n+\t}\n+\t\n+\t@Override\n+\tprotected void setAdditionalFieldsForStatusWithSource(@NonNull MasterMetaStorage storage, URLBuilder url, User user, WithSingleQuery status) {\n+\t\tsuper.setAdditionalFieldsForStatusWithSource(storage, url, user, status);\n+\t\t// Set the ColumnDescription if the Form only consits of a single subquery\n+\t\tif(subQueries == null) {\n+\t\t\t// If subqueries was not set the Execution was not initialized\n+\t\t\tthis.initExecutable(storage.getNamespaces());\n+\t\t}\n+\t\tif(subQueries.size() != 1) {\n+\t\t\t// The sub-query size might also be zero if the backend just delegates the form further to another backend. Forms with more subqueries are not yet supported\n+\t\t\tlog.trace(\"Column description is not generated for {} ({} from Form {}), because the form does not consits of a single subquery. Subquery size was {}.\", subQueries.size(),\n+\t\t\t\tthis.getClass().getSimpleName(), getId(), getSubmitted().getClass().getSimpleName());\n+\t\t\treturn;\n+\t\t}\n+\t\tList<ManagedQuery> subQuery = subQueries.entrySet().iterator().next().getValue();\n+\t\tif(subQuery.isEmpty()) {\n+\t\t\tlog.warn(\"The {} ({} from Form {}) does not have any subqueries after initialization. Not creating a column description.\",\n+\t\t\t\tthis.getClass().getSimpleName(),\n+\t\t\t\tgetId(),\n+\t\t\t\tgetSubmitted().getClass().getSimpleName());\n+\t\t\treturn;\n+\t\t}\n+\t\tstatus.setColumnDescriptions(subQuery.get(0).generateColumnDescriptions());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5ODE3NA=="}, "originalCommit": {"oid": "2c551fa7865cc999ac9570f77ec12880b1de3eb0"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzg0MDIxOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/ManagedForm.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNjo1Mzo0NFrOGQclWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxNDozOVrOGR963w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5ODcxMw==", "bodyText": "Wo benutzt du openSubSubQueries? Und warum kannst du das nicht live tracken?", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r419898713", "createdAt": "2020-05-05T06:53:44Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/ManagedForm.java", "diffHunk": "@@ -84,23 +97,14 @@ public void initExecutable(@NonNull Namespaces namespaces) {\n \t\tsubQueries = submittedForm.createSubQueries(namespaces, super.getOwner(), super.getDataset());\n \t\tsubQueries.values().stream().flatMap(List::stream).forEach(flatSubQueries::add);\n \t\tflatSubQueries.values().forEach(mq -> mq.initExecutable(namespaces));\n-\t\topenSubQueries = new AtomicInteger(flatSubQueries.values().size());\n \t}\n \t\n \t@Override\n \tpublic void start() {\n+\t\topenSubQueries = new AtomicInteger(flatSubQueries.values().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c551fa7865cc999ac9570f77ec12880b1de3eb0"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEzMTUxNw==", "bodyText": "In ManagedForm#addResult wird der Counter runtergez\u00e4hlt, \u00e4hnlich wie in ManagedQuery.executingThreads.\nWenn ich dort \u00fcber alle Subqueries iterieren w\u00fcrde um zu schauen ob alle beendet sind dann w\u00e4re die Synchronization aufwendiger, damit nicht mehrere Male finish aufgerufen wird.", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r420131517", "createdAt": "2020-05-05T13:59:45Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/ManagedForm.java", "diffHunk": "@@ -84,23 +97,14 @@ public void initExecutable(@NonNull Namespaces namespaces) {\n \t\tsubQueries = submittedForm.createSubQueries(namespaces, super.getOwner(), super.getDataset());\n \t\tsubQueries.values().stream().flatMap(List::stream).forEach(flatSubQueries::add);\n \t\tflatSubQueries.values().forEach(mq -> mq.initExecutable(namespaces));\n-\t\topenSubQueries = new AtomicInteger(flatSubQueries.values().size());\n \t}\n \t\n \t@Override\n \tpublic void start() {\n+\t\topenSubQueries = new AtomicInteger(flatSubQueries.values().size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5ODcxMw=="}, "originalCommit": {"oid": "2c551fa7865cc999ac9570f77ec12880b1de3eb0"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM4MzY5Mw==", "bodyText": "Finde die l\u00f6sung in MQuery auch nicht besonders sch\u00f6n. F\u00e4nde es hier echt sch\u00f6ner die direkt zu z\u00e4hlen, du musst ja eigentlich nur auf openSubQueries synchronisieren und schaub ob es eine unfertige gibt.", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r421383693", "createdAt": "2020-05-07T09:55:06Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/ManagedForm.java", "diffHunk": "@@ -84,23 +97,14 @@ public void initExecutable(@NonNull Namespaces namespaces) {\n \t\tsubQueries = submittedForm.createSubQueries(namespaces, super.getOwner(), super.getDataset());\n \t\tsubQueries.values().stream().flatMap(List::stream).forEach(flatSubQueries::add);\n \t\tflatSubQueries.values().forEach(mq -> mq.initExecutable(namespaces));\n-\t\topenSubQueries = new AtomicInteger(flatSubQueries.values().size());\n \t}\n \t\n \t@Override\n \tpublic void start() {\n+\t\topenSubQueries = new AtomicInteger(flatSubQueries.values().size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5ODcxMw=="}, "originalCommit": {"oid": "2c551fa7865cc999ac9570f77ec12880b1de3eb0"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MzQ3MQ==", "bodyText": "Okay, ich teste es mal", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r421493471", "createdAt": "2020-05-07T13:14:39Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/ManagedForm.java", "diffHunk": "@@ -84,23 +97,14 @@ public void initExecutable(@NonNull Namespaces namespaces) {\n \t\tsubQueries = submittedForm.createSubQueries(namespaces, super.getOwner(), super.getDataset());\n \t\tsubQueries.values().stream().flatMap(List::stream).forEach(flatSubQueries::add);\n \t\tflatSubQueries.values().forEach(mq -> mq.initExecutable(namespaces));\n-\t\topenSubQueries = new AtomicInteger(flatSubQueries.values().size());\n \t}\n \t\n \t@Override\n \tpublic void start() {\n+\t\topenSubQueries = new AtomicInteger(flatSubQueries.values().size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5ODcxMw=="}, "originalCommit": {"oid": "2c551fa7865cc999ac9570f77ec12880b1de3eb0"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzg0MjMzOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/ColumnDescriptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNjo1NDoyNFrOGQcmkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDowNzo0MVrOGQrJnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5OTAyNg==", "bodyText": "W\u00fcrde hier schon ein Enum verwenden und den Json-Parser das machen lassen, das ist sicherer", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r419899026", "createdAt": "2020-05-05T06:54:24Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/ColumnDescriptor.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.bakdata.conquery.models.query;\n+\n+import com.bakdata.conquery.models.identifiable.ids.specific.SelectId;\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+/**\n+ * Container class for the query API provide meta data for reach column in the\n+ * csv result. This can be used for the result preview in the frontend.\n+ */\n+@Getter\n+@Builder\n+public class ColumnDescriptor {\n+\n+\tprivate String label;\n+\tprivate String type;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c551fa7865cc999ac9570f77ec12880b1de3eb0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEzNzM3NQ==", "bodyText": "Hatte ich erst so, aber du hast mir empfohlen den Typ flach zumachen, damit ich keinen extra member/flag f\u00fcr die ID-Spalten machen muss", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r420137375", "createdAt": "2020-05-05T14:07:41Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/ColumnDescriptor.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.bakdata.conquery.models.query;\n+\n+import com.bakdata.conquery.models.identifiable.ids.specific.SelectId;\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+/**\n+ * Container class for the query API provide meta data for reach column in the\n+ * csv result. This can be used for the result preview in the frontend.\n+ */\n+@Getter\n+@Builder\n+public class ColumnDescriptor {\n+\n+\tprivate String label;\n+\tprivate String type;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5OTAyNg=="}, "originalCommit": {"oid": "2c551fa7865cc999ac9570f77ec12880b1de3eb0"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzg0NDY2OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNjo1NToyMFrOGQcn9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOTo1NjowOFrOGT_K_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5OTM4MQ==", "bodyText": "das ist doch das gleiche wie executingThreads?", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r419899381", "createdAt": "2020-05-05T06:55:20Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java", "diffHunk": "@@ -60,8 +72,12 @@\n \t\n \t//we don't want to store or send query results or other result metadata\n \t@JsonIgnore\n+\tprivate transient int involvedWorkers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c551fa7865cc999ac9570f77ec12880b1de3eb0"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1MjM5Nw==", "bodyText": "Ich benutze das als Buffer, der beider Initialisierung der Execution gesetzt wird, und bei der Ausf\u00fchrung in executingThreads \u00fcberf\u00fchrt wird. Ich wollte die Initialisierung idempotent machen. Damit sollte es keine RaceCondition geben, zwischen Initialisierung und Ausf\u00fchrung. In ManagedForm muss ich unter Umst\u00e4nden die Executions/SubExecutions initialisieren bevor ich ColumnDescriptions sammeln kann.", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r420152397", "createdAt": "2020-05-05T14:27:18Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java", "diffHunk": "@@ -60,8 +72,12 @@\n \t\n \t//we don't want to store or send query results or other result metadata\n \t@JsonIgnore\n+\tprivate transient int involvedWorkers;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5OTM4MQ=="}, "originalCommit": {"oid": "2c551fa7865cc999ac9570f77ec12880b1de3eb0"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM4Njc0Nw==", "bodyText": "Theoretisch kann sich das aber \u00e4ndern, zwischen init und ausf\u00fchrung, zB wenn du einen neue slave hochf\u00e4hrst.", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r421386747", "createdAt": "2020-05-07T10:00:06Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java", "diffHunk": "@@ -60,8 +72,12 @@\n \t\n \t//we don't want to store or send query results or other result metadata\n \t@JsonIgnore\n+\tprivate transient int involvedWorkers;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5OTM4MQ=="}, "originalCommit": {"oid": "2c551fa7865cc999ac9570f77ec12880b1de3eb0"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMTEzMw==", "bodyText": "Ich glaube die L\u00f6sung f\u00fcr das Problem ist aber ein gr\u00f6\u00dferes.", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r423611133", "createdAt": "2020-05-12T09:56:08Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java", "diffHunk": "@@ -60,8 +72,12 @@\n \t\n \t//we don't want to store or send query results or other result metadata\n \t@JsonIgnore\n+\tprivate transient int involvedWorkers;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5OTM4MQ=="}, "originalCommit": {"oid": "2c551fa7865cc999ac9570f77ec12880b1de3eb0"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzg0NjI1OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNjo1NjowMFrOGQco3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDoyOToyMVrOGQsKsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5OTYxNA==", "bodyText": "was genau machst du hier?", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r419899614", "createdAt": "2020-05-05T06:56:00Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java", "diffHunk": "@@ -96,6 +112,10 @@ public void addResult(@NonNull MasterMetaStorage storage, ShardResult result) {\n \t@Override\n \tpublic void start() {\n \t\tsuper.start();\n+\t\tsynchronized (getExecution()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c551fa7865cc999ac9570f77ec12880b1de3eb0"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1NDAzNA==", "bodyText": "Hier wird der initialisierung state in den execution state \u00fcbertragen", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r420154034", "createdAt": "2020-05-05T14:29:21Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java", "diffHunk": "@@ -96,6 +112,10 @@ public void addResult(@NonNull MasterMetaStorage storage, ShardResult result) {\n \t@Override\n \tpublic void start() {\n \t\tsuper.start();\n+\t\tsynchronized (getExecution()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5OTYxNA=="}, "originalCommit": {"oid": "2c551fa7865cc999ac9570f77ec12880b1de3eb0"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzg1NTE5OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNjo1OTo0MVrOGQcuNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDozMDoxOFrOGQsNiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkwMDk4MA==", "bodyText": "Ich wei\u00df, dass wir h\u00e4ufig List<{key = X, values ...}> verwenden aber macht es hier nicht sinn eine Map zu benutzen?", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r419900980", "createdAt": "2020-05-05T06:59:41Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java", "diffHunk": "@@ -121,13 +141,46 @@ public ResultInfoCollector collectResultInfos(PrintSettings config) {\n \t\n \t@Override\n \tprotected void setStatusBase(@NonNull MasterMetaStorage storage, URLBuilder url, @NonNull  User user, @NonNull ExecutionStatus status) {\n+\n \t\tsuper.setStatusBase(storage, url, user, status);\n \t\tstatus.setNumberOfResults(lastResultCount);\n \t}\n \t\n \t@Override\n-\tpublic Collection<ManagedQuery> toResultQuery() {\n-\t\treturn List.of(this);\n+\tprotected void setAdditionalFieldsForStatusWithSource(@NonNull MasterMetaStorage storage, URLBuilder url, User user, WithSingleQuery status) {\n+\t\tif(columnDescriptions == null) {\n+\t\t\tcolumnDescriptions = generateColumnDescriptions();\n+\t\t}\n+\t\t// Set flag if user can expand the query and in that case also the query\n+\t\tsuper.setAdditionalFieldsForStatusWithSource(storage, url, user, status);\n+\t\tif(status.isCanExpand()) {\n+\t\t\t// If the user can expand the query (can use all included concepts), also set the column description\n+\t\t\tstatus.setColumnDescriptions(columnDescriptions);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Generates a description of each column that will appear in the resulting csv.\n+\t */\n+\tpublic List<ColumnDescriptor> generateColumnDescriptions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c551fa7865cc999ac9570f77ec12880b1de3eb0"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkwMTg1Nw==", "bodyText": "hm, weil sie sortiert sein m\u00fcssen ist das nat\u00fcrlich schwierig. https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html kann das wohl aber nur medium gute l\u00f6sung :/", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r419901857", "createdAt": "2020-05-05T07:01:55Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java", "diffHunk": "@@ -121,13 +141,46 @@ public ResultInfoCollector collectResultInfos(PrintSettings config) {\n \t\n \t@Override\n \tprotected void setStatusBase(@NonNull MasterMetaStorage storage, URLBuilder url, @NonNull  User user, @NonNull ExecutionStatus status) {\n+\n \t\tsuper.setStatusBase(storage, url, user, status);\n \t\tstatus.setNumberOfResults(lastResultCount);\n \t}\n \t\n \t@Override\n-\tpublic Collection<ManagedQuery> toResultQuery() {\n-\t\treturn List.of(this);\n+\tprotected void setAdditionalFieldsForStatusWithSource(@NonNull MasterMetaStorage storage, URLBuilder url, User user, WithSingleQuery status) {\n+\t\tif(columnDescriptions == null) {\n+\t\t\tcolumnDescriptions = generateColumnDescriptions();\n+\t\t}\n+\t\t// Set flag if user can expand the query and in that case also the query\n+\t\tsuper.setAdditionalFieldsForStatusWithSource(storage, url, user, status);\n+\t\tif(status.isCanExpand()) {\n+\t\t\t// If the user can expand the query (can use all included concepts), also set the column description\n+\t\t\tstatus.setColumnDescriptions(columnDescriptions);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Generates a description of each column that will appear in the resulting csv.\n+\t */\n+\tpublic List<ColumnDescriptor> generateColumnDescriptions() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkwMDk4MA=="}, "originalCommit": {"oid": "2c551fa7865cc999ac9570f77ec12880b1de3eb0"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1NDc2Mw==", "bodyText": "Ja das w\u00fcrde im besten Fall auf unserer Serializierungsseite die gew\u00fcnschte Reihenfolge haben, was JS \u00fcber das Objekt iteriert ist explizit nicht gesichert.", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r420154763", "createdAt": "2020-05-05T14:30:18Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java", "diffHunk": "@@ -121,13 +141,46 @@ public ResultInfoCollector collectResultInfos(PrintSettings config) {\n \t\n \t@Override\n \tprotected void setStatusBase(@NonNull MasterMetaStorage storage, URLBuilder url, @NonNull  User user, @NonNull ExecutionStatus status) {\n+\n \t\tsuper.setStatusBase(storage, url, user, status);\n \t\tstatus.setNumberOfResults(lastResultCount);\n \t}\n \t\n \t@Override\n-\tpublic Collection<ManagedQuery> toResultQuery() {\n-\t\treturn List.of(this);\n+\tprotected void setAdditionalFieldsForStatusWithSource(@NonNull MasterMetaStorage storage, URLBuilder url, User user, WithSingleQuery status) {\n+\t\tif(columnDescriptions == null) {\n+\t\t\tcolumnDescriptions = generateColumnDescriptions();\n+\t\t}\n+\t\t// Set flag if user can expand the query and in that case also the query\n+\t\tsuper.setAdditionalFieldsForStatusWithSource(storage, url, user, status);\n+\t\tif(status.isCanExpand()) {\n+\t\t\t// If the user can expand the query (can use all included concepts), also set the column description\n+\t\t\tstatus.setColumnDescriptions(columnDescriptions);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Generates a description of each column that will appear in the resulting csv.\n+\t */\n+\tpublic List<ColumnDescriptor> generateColumnDescriptions() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkwMDk4MA=="}, "originalCommit": {"oid": "2c551fa7865cc999ac9570f77ec12880b1de3eb0"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzg4NDA4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/resultinfo/ResultInfoCollector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzoxMDo0NFrOGQc_VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODoxMToyNlrOGRITyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkwNTM2NQ==", "bodyText": "Wof\u00fcr braucht der Collector nch die Settings?\nUnd warum ist das ein atomic Integer? W\u00fcrde es nicht mehr sinn machen auf der map zu snychronizen?", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r419905365", "createdAt": "2020-05-05T07:10:44Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/resultinfo/ResultInfoCollector.java", "diffHunk": "@@ -23,7 +22,7 @@ public void add(SimpleResultInfo info) {\n \t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c551fa7865cc999ac9570f77ec12880b1de3eb0"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxNTExMw==", "bodyText": "Hab ich wegrefactored", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r420615113", "createdAt": "2020-05-06T08:11:26Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/resultinfo/ResultInfoCollector.java", "diffHunk": "@@ -23,7 +22,7 @@ public void add(SimpleResultInfo info) {\n \t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkwNTM2NQ=="}, "originalCommit": {"oid": "2c551fa7865cc999ac9570f77ec12880b1de3eb0"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzg5MDk2OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/util/io/Cloner.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzoxMzozN1rOGQdDkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODoxMjowNlrOGRIVEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkwNjQ1MA==", "bodyText": "mMn w\u00e4re es hier sinnvoller einen Mapper Optional reinzugeben?", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r419906450", "createdAt": "2020-05-05T07:13:37Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/util/io/Cloner.java", "diffHunk": "@@ -1,18 +1,29 @@\n package com.bakdata.conquery.util.io;\n \n import java.io.IOException;\n+import java.util.Map;\n+import java.util.Map.Entry;\n \n import com.bakdata.conquery.io.jackson.Injectable;\n import com.bakdata.conquery.io.jackson.Jackson;\n+import com.bakdata.conquery.io.jackson.MutableInjectableValues;\n import com.bakdata.conquery.models.config.ConqueryConfig;\n import com.bakdata.conquery.models.query.IQuery;\n import com.bakdata.conquery.models.query.concept.CQElement;\n import com.bakdata.conquery.models.types.specific.AStringType;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n \n public class Cloner {\n-\tpublic static ConqueryConfig clone(ConqueryConfig config) {\n+\t\n+\tpublic static <T> ConqueryConfig clone(ConqueryConfig config, Map<Class<T> , T > injectables) {\n \t\ttry {\n-\t\t\tConqueryConfig clone = Jackson.BINARY_MAPPER.readValue(\n+\t\t\tObjectMapper mapper = Jackson.BINARY_MAPPER.copy();\n+\t\t\tMutableInjectableValues injectableHolder = ((MutableInjectableValues)Jackson.BINARY_MAPPER.getInjectableValues());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c551fa7865cc999ac9570f77ec12880b1de3eb0"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkwNjc5OQ==", "bodyText": "Dann kann auch der default via overloading reingegeben werden.", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r419906799", "createdAt": "2020-05-05T07:14:28Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/util/io/Cloner.java", "diffHunk": "@@ -1,18 +1,29 @@\n package com.bakdata.conquery.util.io;\n \n import java.io.IOException;\n+import java.util.Map;\n+import java.util.Map.Entry;\n \n import com.bakdata.conquery.io.jackson.Injectable;\n import com.bakdata.conquery.io.jackson.Jackson;\n+import com.bakdata.conquery.io.jackson.MutableInjectableValues;\n import com.bakdata.conquery.models.config.ConqueryConfig;\n import com.bakdata.conquery.models.query.IQuery;\n import com.bakdata.conquery.models.query.concept.CQElement;\n import com.bakdata.conquery.models.types.specific.AStringType;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n \n public class Cloner {\n-\tpublic static ConqueryConfig clone(ConqueryConfig config) {\n+\t\n+\tpublic static <T> ConqueryConfig clone(ConqueryConfig config, Map<Class<T> , T > injectables) {\n \t\ttry {\n-\t\t\tConqueryConfig clone = Jackson.BINARY_MAPPER.readValue(\n+\t\t\tObjectMapper mapper = Jackson.BINARY_MAPPER.copy();\n+\t\t\tMutableInjectableValues injectableHolder = ((MutableInjectableValues)Jackson.BINARY_MAPPER.getInjectableValues());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkwNjQ1MA=="}, "originalCommit": {"oid": "2c551fa7865cc999ac9570f77ec12880b1de3eb0"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxNTQ0Mg==", "bodyText": "Das schaue ich mir nochmal an", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r420615442", "createdAt": "2020-05-06T08:12:06Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/util/io/Cloner.java", "diffHunk": "@@ -1,18 +1,29 @@\n package com.bakdata.conquery.util.io;\n \n import java.io.IOException;\n+import java.util.Map;\n+import java.util.Map.Entry;\n \n import com.bakdata.conquery.io.jackson.Injectable;\n import com.bakdata.conquery.io.jackson.Jackson;\n+import com.bakdata.conquery.io.jackson.MutableInjectableValues;\n import com.bakdata.conquery.models.config.ConqueryConfig;\n import com.bakdata.conquery.models.query.IQuery;\n import com.bakdata.conquery.models.query.concept.CQElement;\n import com.bakdata.conquery.models.types.specific.AStringType;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n \n public class Cloner {\n-\tpublic static ConqueryConfig clone(ConqueryConfig config) {\n+\t\n+\tpublic static <T> ConqueryConfig clone(ConqueryConfig config, Map<Class<T> , T > injectables) {\n \t\ttry {\n-\t\t\tConqueryConfig clone = Jackson.BINARY_MAPPER.readValue(\n+\t\t\tObjectMapper mapper = Jackson.BINARY_MAPPER.copy();\n+\t\t\tMutableInjectableValues injectableHolder = ((MutableInjectableValues)Jackson.BINARY_MAPPER.getInjectableValues());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkwNjQ1MA=="}, "originalCommit": {"oid": "2c551fa7865cc999ac9570f77ec12880b1de3eb0"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTI5MjI3OnYy", "diffSide": "RIGHT", "path": "frontend/src/js/external-forms/transformQueryToApi.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDozNjoxNlrOGRkboA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjoyMzoxMVrOGUu9EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA3NTg3Mg==", "bodyText": "I think it might be better to use a single type field.\nThe design of our API contract shouldn't be a result of workarounds for technical limitations in any one of the frameworks or libraries we use (backend OR frontend side).\nThis to me looks like a workaround. If I'm wrong, I'd be happy if you could explain this further!", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r421075872", "createdAt": "2020-05-06T20:36:16Z", "author": {"login": "Kadrian"}, "path": "frontend/src/js/external-forms/transformQueryToApi.ts", "diffHunk": "@@ -46,9 +46,16 @@ function transformFieldsToApi(fields, form) {\n   }, {});\n }\n \n+function setFormSubtype(formConfig: FormType) {\n+  // Sets the subType member of the form request only if it was set in the form config.\n+  // It might be better to introduce a metadata field in the config-type.ts that is hidden in the representation but is send to the backend.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca1c3fdca64dfda5b74d918e13884bd2a0e5c593"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM5NDAwMQ==", "bodyText": "Removed the frontend code changes", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r424394001", "createdAt": "2020-05-13T12:23:11Z", "author": {"login": "thoniTUB"}, "path": "frontend/src/js/external-forms/transformQueryToApi.ts", "diffHunk": "@@ -46,9 +46,16 @@ function transformFieldsToApi(fields, form) {\n   }, {});\n }\n \n+function setFormSubtype(formConfig: FormType) {\n+  // Sets the subType member of the form request only if it was set in the form config.\n+  // It might be better to introduce a metadata field in the config-type.ts that is hidden in the representation but is send to the backend.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA3NTg3Mg=="}, "originalCommit": {"oid": "ca1c3fdca64dfda5b74d918e13884bd2a0e5c593"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzE0Mjk3OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOToxNToxN1rOGR1uRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxMTowN1rOGR9xnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1OTE3Mw==", "bodyText": "Wie kann es sein, dass der Storage null ist?", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r421359173", "createdAt": "2020-05-07T09:15:17Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "diffHunk": "@@ -136,11 +144,15 @@ protected void finish(@NonNull MasterMetaStorage storage, ExecutionState executi\n \n \t\t\t// No need to persist failed queries. (As they are most likely invalid)\n \t\t\tif(getState() == ExecutionState.DONE) {\n+\t\t\t\tif(storage == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca1c3fdca64dfda5b74d918e13884bd2a0e5c593"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MTEwMQ==", "bodyText": "Ich hab ihn bei einem Fail auf null gesetzt, da es ja dann so oder so nicht abgespeichert werden w\u00fcrde.", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r421491101", "createdAt": "2020-05-07T13:11:07Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "diffHunk": "@@ -136,11 +144,15 @@ protected void finish(@NonNull MasterMetaStorage storage, ExecutionState executi\n \n \t\t\t// No need to persist failed queries. (As they are most likely invalid)\n \t\t\tif(getState() == ExecutionState.DONE) {\n+\t\t\t\tif(storage == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1OTE3Mw=="}, "originalCommit": {"oid": "ca1c3fdca64dfda5b74d918e13884bd2a0e5c593"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzMyMjEwOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/resultinfo/ResultInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDowMjo0N1rOGR3gHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDowMjo0N1rOGR3gHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM4ODMxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tpostfix = occurence.getAndIncrement();\n          \n          \n            \n            \t\t\t\tpostfix = ocurrenceCounter.computeIfAbsent(name, str -> new AtomicInteger(0)).getAndIncrement();", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r421388319", "createdAt": "2020-05-07T10:02:47Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/resultinfo/ResultInfo.java", "diffHunk": "@@ -2,27 +2,52 @@\n \n package com.bakdata.conquery.models.query.resultinfo;\n \n+import java.util.HashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n import com.bakdata.conquery.models.externalservice.ResultType;\n import com.bakdata.conquery.models.query.PrintSettings;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.google.common.collect.ClassToInstanceMap;\n import com.google.common.collect.MutableClassToInstanceMap;\n-\n+import lombok.EqualsAndHashCode;\n import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n import lombok.Setter;\n import lombok.ToString;\n \n-@Getter @Setter @ToString\n+@Getter @Setter @ToString @EqualsAndHashCode\n+@RequiredArgsConstructor\n public abstract class ResultInfo {\n+\tprivate final static int UNSET_PREFIX = -1;\n \t/**\n \t * Calculated same name index for this column. If 0, the postfix can be omitted.\n \t */\n-\tprivate int postfix;\n+\t@EqualsAndHashCode.Exclude\n+\tprivate int postfix = UNSET_PREFIX;\n+\t\n+\t/**\n+\t * Is injected by the {@link ResultInfoCollector} for {@link SelectResultInfo}s.\n+\t */\n+\t@EqualsAndHashCode.Exclude\n+\tprivate HashMap<String, AtomicInteger> ocurrenceCounter;\n \tprivate ClassToInstanceMap<Object> appendices = MutableClassToInstanceMap.create();\n \t\n+\t@NonNull\n \t@JsonIgnore\n \tpublic final String getUniqueName(PrintSettings settings) {\n-\t\treturn (postfix > 0) ? getName(settings) + \"_\" + postfix : getName(settings);\n+\t\tString name = getName(settings);\n+\t\tif(ocurrenceCounter == null) {\n+\t\t\treturn name;\n+\t\t}\n+\t\tsynchronized (ocurrenceCounter) {\n+\t\t\tif(postfix == UNSET_PREFIX) {\n+\t\t\t\tAtomicInteger occurence = ocurrenceCounter.computeIfAbsent(name, str -> new AtomicInteger(0));\n+\t\t\t\tpostfix = occurence.getAndIncrement();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca1c3fdca64dfda5b74d918e13884bd2a0e5c593"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzMyMzE2OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/resultinfo/ResultInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDowMzowNlrOGR3gvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDowMzowNlrOGR3gvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM4ODQ3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tAtomicInteger occurence = ocurrenceCounter.computeIfAbsent(name, str -> new AtomicInteger(0));", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r421388479", "createdAt": "2020-05-07T10:03:06Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/resultinfo/ResultInfo.java", "diffHunk": "@@ -2,27 +2,52 @@\n \n package com.bakdata.conquery.models.query.resultinfo;\n \n+import java.util.HashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n import com.bakdata.conquery.models.externalservice.ResultType;\n import com.bakdata.conquery.models.query.PrintSettings;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.google.common.collect.ClassToInstanceMap;\n import com.google.common.collect.MutableClassToInstanceMap;\n-\n+import lombok.EqualsAndHashCode;\n import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n import lombok.Setter;\n import lombok.ToString;\n \n-@Getter @Setter @ToString\n+@Getter @Setter @ToString @EqualsAndHashCode\n+@RequiredArgsConstructor\n public abstract class ResultInfo {\n+\tprivate final static int UNSET_PREFIX = -1;\n \t/**\n \t * Calculated same name index for this column. If 0, the postfix can be omitted.\n \t */\n-\tprivate int postfix;\n+\t@EqualsAndHashCode.Exclude\n+\tprivate int postfix = UNSET_PREFIX;\n+\t\n+\t/**\n+\t * Is injected by the {@link ResultInfoCollector} for {@link SelectResultInfo}s.\n+\t */\n+\t@EqualsAndHashCode.Exclude\n+\tprivate HashMap<String, AtomicInteger> ocurrenceCounter;\n \tprivate ClassToInstanceMap<Object> appendices = MutableClassToInstanceMap.create();\n \t\n+\t@NonNull\n \t@JsonIgnore\n \tpublic final String getUniqueName(PrintSettings settings) {\n-\t\treturn (postfix > 0) ? getName(settings) + \"_\" + postfix : getName(settings);\n+\t\tString name = getName(settings);\n+\t\tif(ocurrenceCounter == null) {\n+\t\t\treturn name;\n+\t\t}\n+\t\tsynchronized (ocurrenceCounter) {\n+\t\t\tif(postfix == UNSET_PREFIX) {\n+\t\t\t\tAtomicInteger occurence = ocurrenceCounter.computeIfAbsent(name, str -> new AtomicInteger(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca1c3fdca64dfda5b74d918e13884bd2a0e5c593"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDAxMjMzOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/cps/CPSTypeIdResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoyMToyNFrOGR-NVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNTo0MzoxM1rOGTiFTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5ODE5Ng==", "bodyText": "W\u00fcrde ich \u00fcber ein regex l\u00f6sen ^([\\w_]+)(-([\\w_]+))?$", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r421498196", "createdAt": "2020-05-07T13:21:24Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/cps/CPSTypeIdResolver.java", "diffHunk": "@@ -119,13 +127,40 @@ public void init(JavaType baseType) {\n \n \t@Override\n \tpublic JavaType typeFromId(DatabindContext context, String id) {\n-\t\tClass<?> result = cpsMap.getClassFromId(id);\n+\t\tClass<?> result = cpsMap.getClassFromId(truncateSubTypeInformation(id));\n \t\tif(result == null) {\n \t\t\tthrow new IllegalStateException(\"There is no type \"+id+\" for \"+baseType.getTypeName()+\". Try: \"+getDescForKnownTypeIds());\n \t\t}\n-\t\telse {\n-\t\t\treturn TypeFactory.defaultInstance().constructSpecializedType(baseType, result);\n+\t\tString subTypeInfo = extractSubTypeInformation(id);\n+\t\tif(!Strings.isNullOrEmpty(subTypeInfo)) {\n+\t\t\t\n+\t\t\tcontext.setAttribute(ATTRIBUTE_SUB_TYPE, subTypeInfo);\n \t\t}\n+\t\treturn TypeFactory.defaultInstance().constructSpecializedType(baseType, result);\n+\t}\n+\t\n+\tpublic static String truncateSubTypeInformation(@NonNull String fullType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2e90855161a95f603f3acd4ebe364026d290c04"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEzNDU0MQ==", "bodyText": "Haben uns geeinigt das nicht zu machen", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r423134541", "createdAt": "2020-05-11T15:43:13Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/io/cps/CPSTypeIdResolver.java", "diffHunk": "@@ -119,13 +127,40 @@ public void init(JavaType baseType) {\n \n \t@Override\n \tpublic JavaType typeFromId(DatabindContext context, String id) {\n-\t\tClass<?> result = cpsMap.getClassFromId(id);\n+\t\tClass<?> result = cpsMap.getClassFromId(truncateSubTypeInformation(id));\n \t\tif(result == null) {\n \t\t\tthrow new IllegalStateException(\"There is no type \"+id+\" for \"+baseType.getTypeName()+\". Try: \"+getDescForKnownTypeIds());\n \t\t}\n-\t\telse {\n-\t\t\treturn TypeFactory.defaultInstance().constructSpecializedType(baseType, result);\n+\t\tString subTypeInfo = extractSubTypeInformation(id);\n+\t\tif(!Strings.isNullOrEmpty(subTypeInfo)) {\n+\t\t\t\n+\t\t\tcontext.setAttribute(ATTRIBUTE_SUB_TYPE, subTypeInfo);\n \t\t}\n+\t\treturn TypeFactory.defaultInstance().constructSpecializedType(baseType, result);\n+\t}\n+\t\n+\tpublic static String truncateSubTypeInformation(@NonNull String fullType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5ODE5Ng=="}, "originalCommit": {"oid": "e2e90855161a95f603f3acd4ebe364026d290c04"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDAxNjA1OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/cps/CPSTypeIdResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoyMjoxNFrOGR-Ppw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNTo0ODozNVrOGTiTbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5ODc5MQ==", "bodyText": "der doppelte cast ist notwendig?", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r421498791", "createdAt": "2020-05-07T13:22:14Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/cps/CPSTypeIdResolver.java", "diffHunk": "@@ -134,9 +169,7 @@ public JavaType typeFromId(DatabindContext context, String id) {\n \t\t\tlog.warn(\"No implementations for {}\", base);\n \t\t\treturn Collections.emptySet();\n \t\t}\n-\t\telse {\n-\t\t\treturn (Set<Class<? extends T>>)(Set)map.getClasses();\n-\t\t}\n+\t\treturn (Set<Class<? extends T>>)(Set)map.getClasses();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2e90855161a95f603f3acd4ebe364026d290c04"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEzODE1OA==", "bodyText": "Weirder Weise ja weil getClasses nicht parametrisiert ist", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r423138158", "createdAt": "2020-05-11T15:48:35Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/io/cps/CPSTypeIdResolver.java", "diffHunk": "@@ -134,9 +169,7 @@ public JavaType typeFromId(DatabindContext context, String id) {\n \t\t\tlog.warn(\"No implementations for {}\", base);\n \t\t\treturn Collections.emptySet();\n \t\t}\n-\t\telse {\n-\t\t\treturn (Set<Class<? extends T>>)(Set)map.getClasses();\n-\t\t}\n+\t\treturn (Set<Class<? extends T>>)(Set)map.getClasses();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5ODc5MQ=="}, "originalCommit": {"oid": "e2e90855161a95f603f3acd4ebe364026d290c04"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzIyMTgwOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/FormScanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo1NDo1N1rOGUyy6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo1NDo1N1rOGUyy6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1NjkzOQ==", "bodyText": "l\u00f6schen", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r424456939", "createdAt": "2020-05-13T13:54:57Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/FormScanner.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package com.bakdata.conquery.models.forms.frontendconfiguration;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+import java.util.function.Consumer;\n+\n+import com.bakdata.conquery.apiv1.forms.Form;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.io.cps.CPSTypeIdResolver;\n+import com.bakdata.conquery.io.jackson.Jackson;\n+import com.bakdata.conquery.models.forms.frontendconfiguration.FormFrontendConfigProvider.FormFrontendConfigInformation;\n+import com.bakdata.conquery.util.QueryUtils;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class FormScanner {\n+\n+\tprivate final static String INFO_FORMAT = \"\\t%-30s %-60s %-20s\";\n+\tprivate final static ObjectReader READER = Jackson.MAPPER.copy().reader();\n+\t\n+\tpublic static final Map<String, JsonNode> FRONTEND_FORM_CONFIGS = generateFEFormConfigMap();\n+\n+\tprivate static Map<String, Class<? extends Form>> findBackendMappingClasses() {\n+\t\t// Gather form implementations first\n+\t\tMap<String, Class<? extends Form>> forms = new HashMap<>();\n+\t\tfor (Class<?> subclass : CPSTypeIdResolver.SCAN_RESULT.getClassesImplementing(Form.class.getName()).loadClasses()) {\n+\t\t\tif (Modifier.isAbstract(subclass.getModifiers())) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tCPSType anno = subclass.getAnnotation(CPSType.class);\n+\t\t\tif (anno == null) {\n+\t\t\t\tlog.warn(\"Implemented Form {} has no CPSType annotation\", subclass);\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tforms.put(anno.id(), (Class<? extends Form>) subclass);\n+\t\t}\n+\t\treturn forms;\n+\t}\n+\n+\t/**\n+\t * Frontend form configurations can be provided from different sources. For\n+\t * these sources a stub of type {@link FormFrontendConfigProviderBase} must be\n+\t * implemented in order to be discovered by this function.\n+\t */\n+\t@SneakyThrows\n+\tprivate static List<FormFrontendConfigInformation> findFrontendFormConfigs() {\n+\t\tList<Class<?>> configProviders = CPSTypeIdResolver.SCAN_RESULT.getClassesImplementing(FormFrontendConfigProvider.class.getName())\n+\t\t\t.loadClasses();\n+\t\t\n+\t\tConsumer<Collection<FormFrontendConfigInformation>> providerChain = QueryUtils.getNoOpEntryPoint();\n+\t\t\n+\t\tfor (Class<?> configProvider : configProviders) {\n+\t\t\tint modifiers = configProvider.getModifiers();\n+\t\t\tif (Modifier.isAbstract(modifiers) || Modifier.isInterface(modifiers)) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\t@SuppressWarnings(\"unchecked\")\n+\t\t\tClass<? extends FormFrontendConfigProvider> formConfigProvider = (Class<? extends FormFrontendConfigProviderBase>) configProvider;\n+\t\t\tConsumer<Collection<FormFrontendConfigInformation>> provider;\n+\t\t\t// Distinguish between interface implementations and implementations of the abstract class \n+\t\t\tif (FormFrontendConfigProviderBase.class.isAssignableFrom(formConfigProvider)) {\n+\t\t\t\tprovider = formConfigProvider.getConstructor(ObjectReader.class).newInstance(READER);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tprovider = formConfigProvider.getConstructor().newInstance();\n+\t\t\t}\n+\t\t\tproviderChain = providerChain.andThen(provider);\n+\t\t}\n+\t\tList<FormFrontendConfigInformation> frontendConfigs = new ArrayList<>();\n+\t\tproviderChain.accept(frontendConfigs);\n+\t\treturn frontendConfigs;\n+\t}\n+\n+\tprivate static Map<String, JsonNode> generateFEFormConfigMap() {\n+\t\tStringJoiner info = new StringJoiner(\"\\n\", \"\\n\", \"\\n\");\n+\t\tinfo.add(String.format(INFO_FORMAT, \"Form Type\", \"Frontend Config\", \"Backend Class\"));\n+\t\t\n+\n+\t\t// Collect backend implementations for specific forms\n+\t\tMap<String, Class<? extends Form>> forms = findBackendMappingClasses();\n+\n+\t\t// Collect frontend form configurations for the specific forms\n+\t\tList<FormFrontendConfigInformation> frontendConfigs = findFrontendFormConfigs();\n+\n+\t\t// Match frontend form configurations to backend implementations\n+\t\tMap<String, JsonNode> result = new HashMap<>();\n+\t\tfor (FormFrontendConfigInformation configInfo : frontendConfigs) {\n+\t\t\tJsonNode configTree = configInfo.getConfigTree();\n+\t\t\tString fullTypeIdentifier = null;\n+\t\t\tJsonNode type = configTree.get(\"type\");\n+\t\t\tif (!validTypeId(type)) {\n+\t\t\t\tlog.warn(\"Found invalid type id in {}. Was: {}\", configInfo.getOrigin(), type);\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tfullTypeIdentifier = type.asText();\n+\t\t\tString typeIdentifier = CPSTypeIdResolver.truncateSubTypeInformation(fullTypeIdentifier);\n+\t\t\tif (!forms.containsKey(typeIdentifier)) {\n+\t\t\t\tlog.warn(\"Frontend form config {} (type = {}) does not map to a backend class.\", configInfo, type);\n+\t\t\t\tcontinue;\n+\t\t\t}\n+//\t\t\tJsonNode subtype = configTree.get(\"subType\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1fcfa907173c332e8d19897da610d53f9d6c269"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzIyMzE3OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/FormScanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo1NToxNVrOGUyzww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo1NToxNVrOGUyzww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1NzE1NQ==", "bodyText": "deklaration einziehen", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r424457155", "createdAt": "2020-05-13T13:55:15Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/FormScanner.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package com.bakdata.conquery.models.forms.frontendconfiguration;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+import java.util.function.Consumer;\n+\n+import com.bakdata.conquery.apiv1.forms.Form;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.io.cps.CPSTypeIdResolver;\n+import com.bakdata.conquery.io.jackson.Jackson;\n+import com.bakdata.conquery.models.forms.frontendconfiguration.FormFrontendConfigProvider.FormFrontendConfigInformation;\n+import com.bakdata.conquery.util.QueryUtils;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class FormScanner {\n+\n+\tprivate final static String INFO_FORMAT = \"\\t%-30s %-60s %-20s\";\n+\tprivate final static ObjectReader READER = Jackson.MAPPER.copy().reader();\n+\t\n+\tpublic static final Map<String, JsonNode> FRONTEND_FORM_CONFIGS = generateFEFormConfigMap();\n+\n+\tprivate static Map<String, Class<? extends Form>> findBackendMappingClasses() {\n+\t\t// Gather form implementations first\n+\t\tMap<String, Class<? extends Form>> forms = new HashMap<>();\n+\t\tfor (Class<?> subclass : CPSTypeIdResolver.SCAN_RESULT.getClassesImplementing(Form.class.getName()).loadClasses()) {\n+\t\t\tif (Modifier.isAbstract(subclass.getModifiers())) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tCPSType anno = subclass.getAnnotation(CPSType.class);\n+\t\t\tif (anno == null) {\n+\t\t\t\tlog.warn(\"Implemented Form {} has no CPSType annotation\", subclass);\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tforms.put(anno.id(), (Class<? extends Form>) subclass);\n+\t\t}\n+\t\treturn forms;\n+\t}\n+\n+\t/**\n+\t * Frontend form configurations can be provided from different sources. For\n+\t * these sources a stub of type {@link FormFrontendConfigProviderBase} must be\n+\t * implemented in order to be discovered by this function.\n+\t */\n+\t@SneakyThrows\n+\tprivate static List<FormFrontendConfigInformation> findFrontendFormConfigs() {\n+\t\tList<Class<?>> configProviders = CPSTypeIdResolver.SCAN_RESULT.getClassesImplementing(FormFrontendConfigProvider.class.getName())\n+\t\t\t.loadClasses();\n+\t\t\n+\t\tConsumer<Collection<FormFrontendConfigInformation>> providerChain = QueryUtils.getNoOpEntryPoint();\n+\t\t\n+\t\tfor (Class<?> configProvider : configProviders) {\n+\t\t\tint modifiers = configProvider.getModifiers();\n+\t\t\tif (Modifier.isAbstract(modifiers) || Modifier.isInterface(modifiers)) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\t@SuppressWarnings(\"unchecked\")\n+\t\t\tClass<? extends FormFrontendConfigProvider> formConfigProvider = (Class<? extends FormFrontendConfigProviderBase>) configProvider;\n+\t\t\tConsumer<Collection<FormFrontendConfigInformation>> provider;\n+\t\t\t// Distinguish between interface implementations and implementations of the abstract class \n+\t\t\tif (FormFrontendConfigProviderBase.class.isAssignableFrom(formConfigProvider)) {\n+\t\t\t\tprovider = formConfigProvider.getConstructor(ObjectReader.class).newInstance(READER);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tprovider = formConfigProvider.getConstructor().newInstance();\n+\t\t\t}\n+\t\t\tproviderChain = providerChain.andThen(provider);\n+\t\t}\n+\t\tList<FormFrontendConfigInformation> frontendConfigs = new ArrayList<>();\n+\t\tproviderChain.accept(frontendConfigs);\n+\t\treturn frontendConfigs;\n+\t}\n+\n+\tprivate static Map<String, JsonNode> generateFEFormConfigMap() {\n+\t\tStringJoiner info = new StringJoiner(\"\\n\", \"\\n\", \"\\n\");\n+\t\tinfo.add(String.format(INFO_FORMAT, \"Form Type\", \"Frontend Config\", \"Backend Class\"));\n+\t\t\n+\n+\t\t// Collect backend implementations for specific forms\n+\t\tMap<String, Class<? extends Form>> forms = findBackendMappingClasses();\n+\n+\t\t// Collect frontend form configurations for the specific forms\n+\t\tList<FormFrontendConfigInformation> frontendConfigs = findFrontendFormConfigs();\n+\n+\t\t// Match frontend form configurations to backend implementations\n+\t\tMap<String, JsonNode> result = new HashMap<>();\n+\t\tfor (FormFrontendConfigInformation configInfo : frontendConfigs) {\n+\t\t\tJsonNode configTree = configInfo.getConfigTree();\n+\t\t\tString fullTypeIdentifier = null;\n+\t\t\tJsonNode type = configTree.get(\"type\");\n+\t\t\tif (!validTypeId(type)) {\n+\t\t\t\tlog.warn(\"Found invalid type id in {}. Was: {}\", configInfo.getOrigin(), type);\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tfullTypeIdentifier = type.asText();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1fcfa907173c332e8d19897da610d53f9d6c269"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzIyODk2OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/ManagedForm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo1NjozMVrOGUy3eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo1NjozMVrOGUy3eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1ODEwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\twholeDone = false;\n          \n          \n            \n            \t\t\t\t\treturn false;", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r424458104", "createdAt": "2020-05-13T13:56:31Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/ManagedForm.java", "diffHunk": "@@ -165,6 +170,19 @@ public void addResult(@NonNull MasterMetaStorage storage, FormSharedResult resul\n \t\t\n \t}\n \n+\n+\tprivate boolean allSubQueriesDone() {\n+\t\tboolean wholeDone = true;\n+\t\tsynchronized (getExecution()) {\t\t\t\n+\t\t\tfor (ManagedQuery q : flatSubQueries.values()) {\n+\t\t\t\tif (!q.getState().equals(ExecutionState.DONE)) {\n+\t\t\t\t\twholeDone = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1fcfa907173c332e8d19897da610d53f9d6c269"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzIyOTg4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/ManagedForm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo1Njo0M1rOGUy4EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo1Njo0M1rOGUy4EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1ODI1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn wholeDone;\n          \n          \n            \n            \t\treturn true;", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r424458257", "createdAt": "2020-05-13T13:56:43Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/ManagedForm.java", "diffHunk": "@@ -165,6 +170,19 @@ public void addResult(@NonNull MasterMetaStorage storage, FormSharedResult resul\n \t\t\n \t}\n \n+\n+\tprivate boolean allSubQueriesDone() {\n+\t\tboolean wholeDone = true;\n+\t\tsynchronized (getExecution()) {\t\t\t\n+\t\t\tfor (ManagedQuery q : flatSubQueries.values()) {\n+\t\t\t\tif (!q.getState().equals(ExecutionState.DONE)) {\n+\t\t\t\t\twholeDone = false;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn wholeDone;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1fcfa907173c332e8d19897da610d53f9d6c269"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzIzMDkxOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/ManagedForm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo1Njo1NFrOGUy4og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo1Njo1NFrOGUy4og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1ODQwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tboolean wholeDone = true;", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r424458402", "createdAt": "2020-05-13T13:56:54Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/ManagedForm.java", "diffHunk": "@@ -165,6 +170,19 @@ public void addResult(@NonNull MasterMetaStorage storage, FormSharedResult resul\n \t\t\n \t}\n \n+\n+\tprivate boolean allSubQueriesDone() {\n+\t\tboolean wholeDone = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1fcfa907173c332e8d19897da610d53f9d6c269"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzIzNDc4OnYy", "diffSide": "RIGHT", "path": "backend/src/test/java/com/bakdata/conquery/io/cps/CPSBaseTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo1Nzo0NFrOGUy7Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo1Nzo0NFrOGUy7Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1OTAzOA==", "bodyText": "ncie!", "url": "https://github.com/bakdata/conquery/pull/1139#discussion_r424459038", "createdAt": "2020-05-13T13:57:44Z", "author": {"login": "awildturtok"}, "path": "backend/src/test/java/com/bakdata/conquery/io/cps/CPSBaseTest.java", "diffHunk": "@@ -42,6 +42,9 @@ public void test(Class<?> base, Class<?> type) {\n \t\t\tassertThat(anno.base()).isEqualTo(base);\n \t\t\tassertThat(base).hasAnnotation(CPSBase.class);\n \t\t\tassertThat(base).isAssignableFrom(base);\n+\t\t\tif(anno.subTyped()) {\t\t\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1fcfa907173c332e8d19897da610d53f9d6c269"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1457, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}