{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNjQwNzgw", "number": 1172, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo0OTo0MlrOD3843Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowNzowN1rOD6Iz_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTk1ODY5OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/Concept.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo0OTo0MlrOGOf2LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDowNzoyMlrOGRUzkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1NTAyMQ==", "bodyText": "Ich wei\u00df nicht ob ich das mag, ich hab schon verstanden warum du das machst aber es w\u00e4re mir lieber wenn das \u00fcber die json l\u00e4uft weil es dann wirklich nur eine wahrheit gibt", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r417855021", "createdAt": "2020-04-30T08:49:42Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/Concept.java", "diffHunk": "@@ -46,6 +47,7 @@ public CONNECTOR getConnectorByName(String connector) {\n \t}\n \n \tpublic abstract List<? extends Select> getSelects();\n+\tpublic abstract void addSelect(Select select);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5b27a669e4b74f957669c7de85b0eb549c39938"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgxOTg1Nw==", "bodyText": "Okay, dann war das zu test Zwecken ;)", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r420819857", "createdAt": "2020-05-06T14:07:22Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/Concept.java", "diffHunk": "@@ -46,6 +47,7 @@ public CONNECTOR getConnectorByName(String connector) {\n \t}\n \n \tpublic abstract List<? extends Select> getSelects();\n+\tpublic abstract void addSelect(Select select);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1NTAyMQ=="}, "originalCommit": {"oid": "f5b27a669e4b74f957669c7de85b0eb549c39938"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTk2MzQzOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/tree/TreeConcept.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo1MToxM1rOGOf5nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDowODowMFrOGRU1iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1NTkwMw==", "bodyText": "der ist jetzt nur auf dem Master Node registriert, wie \u00fcbertr\u00e4gstt du das an die slaves?", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r417855903", "createdAt": "2020-04-30T08:51:13Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/tree/TreeConcept.java", "diffHunk": "@@ -219,4 +221,14 @@ public int countElements() {\n \t\tint mostSpecific = ids[ids.length-1];\n \t\treturn localIdMap.get(mostSpecific);\n \t}\n+\n+\t@Override\n+\tpublic void addSelect(Select select) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5b27a669e4b74f957669c7de85b0eb549c39938"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyMDM2MA==", "bodyText": "Ich nehme die Funktionalit\u00e4t wieder raus", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r420820360", "createdAt": "2020-05-06T14:08:00Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/tree/TreeConcept.java", "diffHunk": "@@ -219,4 +221,14 @@ public int countElements() {\n \t\tint mostSpecific = ids[ids.length-1];\n \t\treturn localIdMap.get(mostSpecific);\n \t}\n+\n+\t@Override\n+\tpublic void addSelect(Select select) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1NTkwMw=="}, "originalCommit": {"oid": "f5b27a669e4b74f957669c7de85b0eb549c39938"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTk3MDc4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/EventDateUnionAggregator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo1MzowOVrOGOf-Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo1MzowOVrOGOf-Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1NzEwMw==", "bodyText": "ich glaube du musst hier trotzdem schauen, ob du ne validitydatecol hast", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r417857103", "createdAt": "2020-04-30T08:53:09Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/EventDateUnionAggregator.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.bakdata.conquery.models.query.queryplan.aggregators.specific;\n+\n+import java.util.Set;\n+\n+import com.bakdata.conquery.models.common.CDateSet;\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.externalservice.ResultType;\n+import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.queryplan.aggregators.Aggregator;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * Collects the event dates of all events that are applicable to the specific part of a query.\n+ * Eventually the set of collected dates is tailored to the provided date restriction.\n+ *\n+ */\n+@RequiredArgsConstructor\n+public class EventDateUnionAggregator implements Aggregator<String>{\n+\n+\tprivate final Set<TableId> requiredTables;\n+\tprivate Column validityDateColumn;\n+\tprivate CDateSet set = CDateSet.create();\n+\tprivate CDateSet dateRestriction;\n+\t\n+\n+\t@Override\n+\tpublic void collectRequiredTables(Set<TableId> requiredTables) {\n+\t\trequiredTables.addAll(this.requiredTables);\n+\t}\n+\t\n+\t@Override\n+\tpublic void nextTable(QueryExecutionContext ctx, Table currentTable) {\n+\t\tvalidityDateColumn = ctx.getValidityDateColumn();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5b27a669e4b74f957669c7de85b0eb549c39938"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDI1ODc4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/EventDateUnionAggregator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTowNDoyOVrOGQglWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNTowNDowN1rOGRXiMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2NDI1MQ==", "bodyText": "das geht nicht, die dateRestriction ist variabel.", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r419964251", "createdAt": "2020-05-05T09:04:29Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/EventDateUnionAggregator.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.bakdata.conquery.models.query.queryplan.aggregators.specific;\n+\n+import java.util.Set;\n+\n+import com.bakdata.conquery.models.common.CDateSet;\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.externalservice.ResultType;\n+import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.queryplan.aggregators.Aggregator;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * Collects the event dates of all events that are applicable to the specific part of a query.\n+ * Eventually the set of collected dates is tailored to the provided date restriction.\n+ *\n+ */\n+@RequiredArgsConstructor\n+public class EventDateUnionAggregator implements Aggregator<String>{\n+\n+\tprivate final Set<TableId> requiredTables;\n+\tprivate Column validityDateColumn;\n+\tprivate CDateSet set = CDateSet.create();\n+\tprivate CDateSet dateRestriction;\n+\t\n+\n+\t@Override\n+\tpublic void collectRequiredTables(Set<TableId> requiredTables) {\n+\t\trequiredTables.addAll(this.requiredTables);\n+\t}\n+\t\n+\t@Override\n+\tpublic void nextTable(QueryExecutionContext ctx, Table currentTable) {\n+\t\tvalidityDateColumn = ctx.getValidityDateColumn();\n+\t\tdateRestriction = ctx.getDateRestriction();\n+\t\tAggregator.super.nextTable(ctx, currentTable);\n+\t}\n+\n+\t@Override\n+\tpublic Aggregator<String> doClone(CloneContext ctx) {\n+\t\treturn new EventDateUnionAggregator(requiredTables);\n+\t}\n+\n+\t@Override\n+\tpublic String getAggregationResult() {\n+\t\tset.retainAll(dateRestriction);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f611b61720bb7a412065bb4c192e28083bf7033f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2NDM2OA==", "bodyText": "musst du in aggregateEvent machen", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r419964368", "createdAt": "2020-05-05T09:04:43Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/EventDateUnionAggregator.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.bakdata.conquery.models.query.queryplan.aggregators.specific;\n+\n+import java.util.Set;\n+\n+import com.bakdata.conquery.models.common.CDateSet;\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.externalservice.ResultType;\n+import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.queryplan.aggregators.Aggregator;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * Collects the event dates of all events that are applicable to the specific part of a query.\n+ * Eventually the set of collected dates is tailored to the provided date restriction.\n+ *\n+ */\n+@RequiredArgsConstructor\n+public class EventDateUnionAggregator implements Aggregator<String>{\n+\n+\tprivate final Set<TableId> requiredTables;\n+\tprivate Column validityDateColumn;\n+\tprivate CDateSet set = CDateSet.create();\n+\tprivate CDateSet dateRestriction;\n+\t\n+\n+\t@Override\n+\tpublic void collectRequiredTables(Set<TableId> requiredTables) {\n+\t\trequiredTables.addAll(this.requiredTables);\n+\t}\n+\t\n+\t@Override\n+\tpublic void nextTable(QueryExecutionContext ctx, Table currentTable) {\n+\t\tvalidityDateColumn = ctx.getValidityDateColumn();\n+\t\tdateRestriction = ctx.getDateRestriction();\n+\t\tAggregator.super.nextTable(ctx, currentTable);\n+\t}\n+\n+\t@Override\n+\tpublic Aggregator<String> doClone(CloneContext ctx) {\n+\t\treturn new EventDateUnionAggregator(requiredTables);\n+\t}\n+\n+\t@Override\n+\tpublic String getAggregationResult() {\n+\t\tset.retainAll(dateRestriction);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2NDI1MQ=="}, "originalCommit": {"oid": "f611b61720bb7a412065bb4c192e28083bf7033f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg2NDU2Mg==", "bodyText": "Okay, habe es angepasst", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r420864562", "createdAt": "2020-05-06T15:04:07Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/EventDateUnionAggregator.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.bakdata.conquery.models.query.queryplan.aggregators.specific;\n+\n+import java.util.Set;\n+\n+import com.bakdata.conquery.models.common.CDateSet;\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.externalservice.ResultType;\n+import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.queryplan.aggregators.Aggregator;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * Collects the event dates of all events that are applicable to the specific part of a query.\n+ * Eventually the set of collected dates is tailored to the provided date restriction.\n+ *\n+ */\n+@RequiredArgsConstructor\n+public class EventDateUnionAggregator implements Aggregator<String>{\n+\n+\tprivate final Set<TableId> requiredTables;\n+\tprivate Column validityDateColumn;\n+\tprivate CDateSet set = CDateSet.create();\n+\tprivate CDateSet dateRestriction;\n+\t\n+\n+\t@Override\n+\tpublic void collectRequiredTables(Set<TableId> requiredTables) {\n+\t\trequiredTables.addAll(this.requiredTables);\n+\t}\n+\t\n+\t@Override\n+\tpublic void nextTable(QueryExecutionContext ctx, Table currentTable) {\n+\t\tvalidityDateColumn = ctx.getValidityDateColumn();\n+\t\tdateRestriction = ctx.getDateRestriction();\n+\t\tAggregator.super.nextTable(ctx, currentTable);\n+\t}\n+\n+\t@Override\n+\tpublic Aggregator<String> doClone(CloneContext ctx) {\n+\t\treturn new EventDateUnionAggregator(requiredTables);\n+\t}\n+\n+\t@Override\n+\tpublic String getAggregationResult() {\n+\t\tset.retainAll(dateRestriction);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2NDI1MQ=="}, "originalCommit": {"oid": "f611b61720bb7a412065bb4c192e28083bf7033f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDI2MjIxOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/resources/admin/rest/AdminProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTowNTozMVrOGQgndA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNzowNjo1NFrOGRxJSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2NDc4OA==", "bodyText": "hast du eigentlich \u00fcberpr\u00fcft ob das auch so bei den slaves ankommt, oder ob die das dann sogar doppelt haben?", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r419964788", "createdAt": "2020-05-05T09:05:31Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/resources/admin/rest/AdminProcessor.java", "diffHunk": "@@ -128,7 +130,18 @@ else if (!table.getDataset().equals(dataset)) {\n \t}\n \n \tpublic void addConcept(Dataset dataset, Concept<?> c) {\n+\t\t// Add the standard EventDateUnionSelect to every added Concept", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f611b61720bb7a412065bb4c192e28083bf7033f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2NTA1Ng==", "bodyText": "Bin ehrlich gesagt kein Fan von, mir w\u00e4re es lieber wir w\u00fcrden die Konzepte anpassen. Aber Ist halt auch arbeit :/", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r419965056", "createdAt": "2020-05-05T09:06:00Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/resources/admin/rest/AdminProcessor.java", "diffHunk": "@@ -128,7 +130,18 @@ else if (!table.getDataset().equals(dataset)) {\n \t}\n \n \tpublic void addConcept(Dataset dataset, Concept<?> c) {\n+\t\t// Add the standard EventDateUnionSelect to every added Concept", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2NDc4OA=="}, "originalCommit": {"oid": "f611b61720bb7a412065bb4c192e28083bf7033f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgxODEwOA==", "bodyText": "Ich w\u00fcsste nicht wie es nicht bei den Slaves ankommen k\u00f6nnte, da die selects hinzugef\u00fcgt werden bevor sie in Master und Slaves registriert werden.", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r420818108", "createdAt": "2020-05-06T14:04:52Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/resources/admin/rest/AdminProcessor.java", "diffHunk": "@@ -128,7 +130,18 @@ else if (!table.getDataset().equals(dataset)) {\n \t}\n \n \tpublic void addConcept(Dataset dataset, Concept<?> c) {\n+\t\t// Add the standard EventDateUnionSelect to every added Concept", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2NDc4OA=="}, "originalCommit": {"oid": "f611b61720bb7a412065bb4c192e28083bf7033f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI4NDE3MQ==", "bodyText": "Aber gut, habe ich entfernt", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r421284171", "createdAt": "2020-05-07T07:06:54Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/resources/admin/rest/AdminProcessor.java", "diffHunk": "@@ -128,7 +130,18 @@ else if (!table.getDataset().equals(dataset)) {\n \t}\n \n \tpublic void addConcept(Dataset dataset, Concept<?> c) {\n+\t\t// Add the standard EventDateUnionSelect to every added Concept", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2NDc4OA=="}, "originalCommit": {"oid": "f611b61720bb7a412065bb4c192e28083bf7033f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDI2NDkyOnYy", "diffSide": "RIGHT", "path": "backend/src/test/resources/tests/aggregator/EVENT_DATE_AGGREGATOR/EVENT_DATE_AGGREGATOR_NO_RESTRICTION.test.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTowNjoyMFrOGQgpOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTowNjoyMFrOGQgpOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2NTI0Mg==", "bodyText": "den tabellen namen anpaasen", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r419965242", "createdAt": "2020-05-05T09:06:20Z", "author": {"login": "awildturtok"}, "path": "backend/src/test/resources/tests/aggregator/EVENT_DATE_AGGREGATOR/EVENT_DATE_AGGREGATOR_NO_RESTRICTION.test.json", "diffHunk": "@@ -0,0 +1,67 @@\n+{\n+    \"type\": \"QUERY_TEST\",\n+    \"label\": \"EVENT_DATE_AGGREGATOR_NO_RESTRICTION Test\",\n+    \"expectedCsv\": \"tests/aggregator/EVENT_DATE_AGGREGATOR/expected_no_restriction.csv\",\n+    \"query\": {\n+        \"type\": \"CONCEPT_QUERY\",\n+        \"root\": {\n+            \"ids\": [\n+                \"${dataset}.con\"\n+            ],\n+            \"type\": \"CONCEPT\",\n+            \"label\": \"Geschlecht SELECT\",\n+            \"tables\": [\n+                {\n+                    \"id\": \"${dataset}.con.geschlecht_connector\",\n+                    \"selects\": \"${dataset}.con.geschlecht_connector.event-date\"\n+                }\n+            ],\n+            \"selects\": \"${dataset}.con.geschlecht_connector.event-date\"\n+        }\n+    },\n+    \"concepts\": [\n+        {\n+            \"label\": \"Geschlecht SELECT\",\n+            \"name\": \"con\",\n+            \"type\": \"VIRTUAL\",\n+            \"connectors\": [\n+                {\n+                    \"label\": \"geschlecht_connector\",\n+                    \"table\": \"vers_stamm\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f611b61720bb7a412065bb4c192e28083bf7033f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDI2NjkzOnYy", "diffSide": "RIGHT", "path": "backend/src/test/resources/tests/aggregator/EVENT_DATE_AGGREGATOR/EVENT_DATE_AGGREGATOR_NO_RESTRICTION.test.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTowNjo1NVrOGQgqig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTowNjo1NVrOGQgqig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2NTU3OA==", "bodyText": "hier f\u00fcgst du den ja auch schon hinzu, dann ist der ja mindestens doppelt drin und ohne id", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r419965578", "createdAt": "2020-05-05T09:06:55Z", "author": {"login": "awildturtok"}, "path": "backend/src/test/resources/tests/aggregator/EVENT_DATE_AGGREGATOR/EVENT_DATE_AGGREGATOR_NO_RESTRICTION.test.json", "diffHunk": "@@ -0,0 +1,67 @@\n+{\n+    \"type\": \"QUERY_TEST\",\n+    \"label\": \"EVENT_DATE_AGGREGATOR_NO_RESTRICTION Test\",\n+    \"expectedCsv\": \"tests/aggregator/EVENT_DATE_AGGREGATOR/expected_no_restriction.csv\",\n+    \"query\": {\n+        \"type\": \"CONCEPT_QUERY\",\n+        \"root\": {\n+            \"ids\": [\n+                \"${dataset}.con\"\n+            ],\n+            \"type\": \"CONCEPT\",\n+            \"label\": \"Geschlecht SELECT\",\n+            \"tables\": [\n+                {\n+                    \"id\": \"${dataset}.con.geschlecht_connector\",\n+                    \"selects\": \"${dataset}.con.geschlecht_connector.event-date\"\n+                }\n+            ],\n+            \"selects\": \"${dataset}.con.geschlecht_connector.event-date\"\n+        }\n+    },\n+    \"concepts\": [\n+        {\n+            \"label\": \"Geschlecht SELECT\",\n+            \"name\": \"con\",\n+            \"type\": \"VIRTUAL\",\n+            \"connectors\": [\n+                {\n+                    \"label\": \"geschlecht_connector\",\n+                    \"table\": \"vers_stamm\",\n+                    \"validityDates\": {\n+                        \"label\": \"indexdatum\",\n+                        \"column\": \"vers_stamm.indexdatum\"\n+                    },\n+                    \"selects\": {\n+                        \"type\": \"EVENT_DATE_UNION\"\n+                    }\n+                }\n+            ],\n+            \"selects\": {\n+                \"type\": \"EVENT_DATE_UNION\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f611b61720bb7a412065bb4c192e28083bf7033f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjg4MTc2OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/EventDateUnionAggregator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowNjoyOFrOGRzIUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwODoxMjoyNFrOGTRaBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNjY4OQ==", "bodyText": "da w\u00fcrde ich mich ehrlich gesagt eher drauf verlassen als das jedes mal zu pr\u00fcfen.", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r421316689", "createdAt": "2020-05-07T08:06:28Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/EventDateUnionAggregator.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.bakdata.conquery.models.query.queryplan.aggregators.specific;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import com.bakdata.conquery.models.common.CDateSet;\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.externalservice.ResultType;\n+import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.queryplan.aggregators.Aggregator;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * Collects the event dates of all events that are applicable to the specific\n+ * part of a query. Eventually the set of collected dates is tailored to the\n+ * provided date restriction.\n+ *\n+ */\n+@RequiredArgsConstructor\n+public class EventDateUnionAggregator implements Aggregator<String> {\n+\n+\tprivate final Set<TableId> requiredTables;\n+\tprivate Column validityDateColumn;\n+\tprivate CDateSet set = CDateSet.create();\n+\tprivate CDateSet dateRestriction;\n+\n+\t@Override\n+\tpublic void collectRequiredTables(Set<TableId> requiredTables) {\n+\t\trequiredTables.addAll(this.requiredTables);\n+\t}\n+\n+\t@Override\n+\tpublic void nextTable(QueryExecutionContext ctx, Table currentTable) {\n+\t\tvalidityDateColumn = Objects.requireNonNull(ctx.getValidityDateColumn());\n+\t\tif (!validityDateColumn.getType().isDateCompatible()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3933e6a1df361b7da2496aba49be37eb55527a05"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg2MTMxOQ==", "bodyText": "Ich hatte das in einem anderen Aggregator gesehen.", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r422861319", "createdAt": "2020-05-11T08:12:24Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/EventDateUnionAggregator.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.bakdata.conquery.models.query.queryplan.aggregators.specific;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import com.bakdata.conquery.models.common.CDateSet;\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.externalservice.ResultType;\n+import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.queryplan.aggregators.Aggregator;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * Collects the event dates of all events that are applicable to the specific\n+ * part of a query. Eventually the set of collected dates is tailored to the\n+ * provided date restriction.\n+ *\n+ */\n+@RequiredArgsConstructor\n+public class EventDateUnionAggregator implements Aggregator<String> {\n+\n+\tprivate final Set<TableId> requiredTables;\n+\tprivate Column validityDateColumn;\n+\tprivate CDateSet set = CDateSet.create();\n+\tprivate CDateSet dateRestriction;\n+\n+\t@Override\n+\tpublic void collectRequiredTables(Set<TableId> requiredTables) {\n+\t\trequiredTables.addAll(this.requiredTables);\n+\t}\n+\n+\t@Override\n+\tpublic void nextTable(QueryExecutionContext ctx, Table currentTable) {\n+\t\tvalidityDateColumn = Objects.requireNonNull(ctx.getValidityDateColumn());\n+\t\tif (!validityDateColumn.getType().isDateCompatible()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNjY4OQ=="}, "originalCommit": {"oid": "3933e6a1df361b7da2496aba49be37eb55527a05"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjg4MzgyOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/EventDateUnionAggregator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowNzowN1rOGRzJog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwODoxMzo1MFrOGTRdPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNzAyNg==", "bodyText": "Wir geben in der Regel das Objekt selber raus und nicht den toString. Damit kann man aggregatoren wieder verwenden", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r421317026", "createdAt": "2020-05-07T08:07:07Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/EventDateUnionAggregator.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.bakdata.conquery.models.query.queryplan.aggregators.specific;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import com.bakdata.conquery.models.common.CDateSet;\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.externalservice.ResultType;\n+import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.queryplan.aggregators.Aggregator;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * Collects the event dates of all events that are applicable to the specific\n+ * part of a query. Eventually the set of collected dates is tailored to the\n+ * provided date restriction.\n+ *\n+ */\n+@RequiredArgsConstructor\n+public class EventDateUnionAggregator implements Aggregator<String> {\n+\n+\tprivate final Set<TableId> requiredTables;\n+\tprivate Column validityDateColumn;\n+\tprivate CDateSet set = CDateSet.create();\n+\tprivate CDateSet dateRestriction;\n+\n+\t@Override\n+\tpublic void collectRequiredTables(Set<TableId> requiredTables) {\n+\t\trequiredTables.addAll(this.requiredTables);\n+\t}\n+\n+\t@Override\n+\tpublic void nextTable(QueryExecutionContext ctx, Table currentTable) {\n+\t\tvalidityDateColumn = Objects.requireNonNull(ctx.getValidityDateColumn());\n+\t\tif (!validityDateColumn.getType().isDateCompatible()) {\n+\t\t\tthrow new IllegalStateException(\"The validityDateColumn \" + validityDateColumn + \" is not a DATE TYPE\");\n+\t\t}\n+\t\t\n+\t\tdateRestriction = ctx.getDateRestriction();\n+\t\tAggregator.super.nextTable(ctx, currentTable);\n+\t}\n+\n+\t@Override\n+\tpublic Aggregator<String> doClone(CloneContext ctx) {\n+\t\treturn new EventDateUnionAggregator(requiredTables);\n+\t}\n+\n+\t@Override\n+\tpublic String getAggregationResult() {\n+\t\treturn set.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3933e6a1df361b7da2496aba49be37eb55527a05"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg2MjE0MQ==", "bodyText": "Der DateUnionAggregator macht das so, ich dachte, das hat einen Grund.", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r422862141", "createdAt": "2020-05-11T08:13:50Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/EventDateUnionAggregator.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.bakdata.conquery.models.query.queryplan.aggregators.specific;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import com.bakdata.conquery.models.common.CDateSet;\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.externalservice.ResultType;\n+import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.queryplan.aggregators.Aggregator;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * Collects the event dates of all events that are applicable to the specific\n+ * part of a query. Eventually the set of collected dates is tailored to the\n+ * provided date restriction.\n+ *\n+ */\n+@RequiredArgsConstructor\n+public class EventDateUnionAggregator implements Aggregator<String> {\n+\n+\tprivate final Set<TableId> requiredTables;\n+\tprivate Column validityDateColumn;\n+\tprivate CDateSet set = CDateSet.create();\n+\tprivate CDateSet dateRestriction;\n+\n+\t@Override\n+\tpublic void collectRequiredTables(Set<TableId> requiredTables) {\n+\t\trequiredTables.addAll(this.requiredTables);\n+\t}\n+\n+\t@Override\n+\tpublic void nextTable(QueryExecutionContext ctx, Table currentTable) {\n+\t\tvalidityDateColumn = Objects.requireNonNull(ctx.getValidityDateColumn());\n+\t\tif (!validityDateColumn.getType().isDateCompatible()) {\n+\t\t\tthrow new IllegalStateException(\"The validityDateColumn \" + validityDateColumn + \" is not a DATE TYPE\");\n+\t\t}\n+\t\t\n+\t\tdateRestriction = ctx.getDateRestriction();\n+\t\tAggregator.super.nextTable(ctx, currentTable);\n+\t}\n+\n+\t@Override\n+\tpublic Aggregator<String> doClone(CloneContext ctx) {\n+\t\treturn new EventDateUnionAggregator(requiredTables);\n+\t}\n+\n+\t@Override\n+\tpublic String getAggregationResult() {\n+\t\treturn set.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNzAyNg=="}, "originalCommit": {"oid": "3933e6a1df361b7da2496aba49be37eb55527a05"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1388, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}