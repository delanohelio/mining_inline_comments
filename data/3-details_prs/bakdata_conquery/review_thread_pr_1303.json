{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3ODczNDY0", "number": 1303, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDozNDozMFrOETSKJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMjo1MzoyMlrOErKhVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjU1OTA4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/RealParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDozNDozMFrOG47eJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDozNDozMFrOG47eJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0NzgxNA==", "bodyText": "Die Pr\u00e4zision sollte ein default haben, aber einstellbar sein in der import.json", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r462347814", "createdAt": "2020-07-29T14:34:30Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/RealParser.java", "diffHunk": "@@ -6,19 +6,47 @@\n import com.bakdata.conquery.models.types.parser.NoopTransformer;\n import com.bakdata.conquery.models.types.parser.Parser;\n import com.bakdata.conquery.models.types.specific.RealTypeDouble;\n+import com.bakdata.conquery.models.types.specific.RealTypeFloat;\n import com.bakdata.conquery.util.NumberParsing;\n import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n \n+@Slf4j\n @ToString(callSuper = true)\n public class RealParser extends Parser<Double> {\n \n+\tprivate float floatULP = Float.NEGATIVE_INFINITY;\n+\tprivate double min = Double.POSITIVE_INFINITY, max = Double.NEGATIVE_INFINITY;\n+\n+\n \t@Override\n \tprotected Double parseValue(String value) throws ParsingException {\n \t\treturn NumberParsing.parseDouble(value);\n \t}\n \n+\t@Override\n+\tprotected void registerValue(Double v) {\n+\t\tif(v.isInfinite() || v.isNaN()) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfloatULP = Math.max(floatULP, Math.ulp(v.floatValue()));\n+\t\tmin = Math.min(v, min);\n+\t\tmax = Math.max(v, max);\n+\t}\n+\n \t@Override\n \tprotected Decision<Double, ?, ? extends CType<Double, ?>> decideType() {\n+\t\t// TODO: 27.07.2020 FK: Make this configurable\n+\t\tlog.debug(\"{}\", this);\n+\n+\t\tif(floatULP < 1e-2){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6f46ffd90573137b9eda88bcfb492637ec6a703"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjU3MTA3OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/RealParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDozNjo1MVrOG47llw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDozNjo1MVrOG47llw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0OTcxOQ==", "bodyText": "Etwas doku zur strategie bitte", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r462349719", "createdAt": "2020-07-29T14:36:51Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/RealParser.java", "diffHunk": "@@ -6,19 +6,47 @@\n import com.bakdata.conquery.models.types.parser.NoopTransformer;\n import com.bakdata.conquery.models.types.parser.Parser;\n import com.bakdata.conquery.models.types.specific.RealTypeDouble;\n+import com.bakdata.conquery.models.types.specific.RealTypeFloat;\n import com.bakdata.conquery.util.NumberParsing;\n import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n \n+@Slf4j\n @ToString(callSuper = true)\n public class RealParser extends Parser<Double> {\n \n+\tprivate float floatULP = Float.NEGATIVE_INFINITY;\n+\tprivate double min = Double.POSITIVE_INFINITY, max = Double.NEGATIVE_INFINITY;\n+\n+\n \t@Override\n \tprotected Double parseValue(String value) throws ParsingException {\n \t\treturn NumberParsing.parseDouble(value);\n \t}\n \n+\t@Override\n+\tprotected void registerValue(Double v) {\n+\t\tif(v.isInfinite() || v.isNaN()) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfloatULP = Math.max(floatULP, Math.ulp(v.floatValue()));\n+\t\tmin = Math.min(v, min);\n+\t\tmax = Math.max(v, max);\n+\t}\n+\n \t@Override\n \tprotected Decision<Double, ?, ? extends CType<Double, ?>> decideType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6f46ffd90573137b9eda88bcfb492637ec6a703"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjU3MTk4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/VarIntParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDozNzowM1rOG47mKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDozNzowM1rOG47mKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0OTg2Ng==", "bodyText": "doku", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r462349866", "createdAt": "2020-07-29T14:37:03Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/VarIntParser.java", "diffHunk": "@@ -40,38 +34,23 @@ protected Integer parseValue(String value) throws ParsingException {\n \t\n \t@Override\n \tpublic Decision<Integer, Number, VarIntType> decideType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6f46ffd90573137b9eda88bcfb492637ec6a703"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjU5MjA0OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/VarIntParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo0MTowOFrOG47yoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo1OTo0MVrOG48pnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1MzA1Ng==", "bodyText": "Sollte nicht als letztes VatIntTypeLong kommen?", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r462353056", "createdAt": "2020-07-29T14:41:08Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/VarIntParser.java", "diffHunk": "@@ -40,38 +34,23 @@ protected Integer parseValue(String value) throws ParsingException {\n \t\n \t@Override\n \tpublic Decision<Integer, Number, VarIntType> decideType() {\n-\t\tif(maxValue+1 <= Byte.MAX_VALUE && minValue >= Byte.MIN_VALUE) {\n-\t\t\treturn new Decision<Integer, Number, VarIntType>(\n-\t\t\t\tnew Transformer<Integer, Number>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic Number transform(@NonNull Integer value) {\n-\t\t\t\t\t\treturn value.byteValue();\n-\t\t\t\t\t}\n-\t\t\t\t},\n-\t\t\t\tnew VarIntTypeByte((byte)minValue, (byte)maxValue)\n-\t\t\t);\n-\t\t}\n-\t\tif(maxValue+1 <= Short.MAX_VALUE && minValue >= Short.MIN_VALUE) {\n-\t\t\treturn new Decision<Integer, Number, VarIntType>(\n-\t\t\t\tnew Transformer<Integer, Number>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic Number transform(@NonNull Integer value) {\n-\t\t\t\t\t\treturn value.shortValue();\n-\t\t\t\t\t}\n-\t\t\t\t},\n-\t\t\t\tnew VarIntTypeShort((short)minValue, (short)maxValue)\n+\t\t// TODO: 28.07.2020 FK: VarIntBoolean for two fields\n+\t\t// TODO: 28.07.2020 FK: Restructure this, so that this can be folded into IntParser where all unwrap to longs instead\n+\n+\t\tif (maxValue - minValue < ((int) Byte.MAX_VALUE - (int) Byte.MIN_VALUE)) {\n+\t\t\treturn new Decision<>(\n+\t\t\t\t\tvalue -> (byte) (value - minValue),\n+\t\t\t\t\tnew VarIntTypeByte(minValue, maxValue)\n \t\t\t);\n \t\t}\n-\t\telse {\n-\t\t\treturn new Decision<Integer, Number, VarIntType>(\n-\t\t\t\tnew Transformer<Integer, Number>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic Number transform(@NonNull Integer value) {\n-\t\t\t\t\t\treturn value;\n-\t\t\t\t\t}\n-\t\t\t\t},\n-\t\t\t\tnew VarIntTypeInt(minValue, maxValue)\n+\n+\t\tif (maxValue - minValue < ((long) Short.MAX_VALUE - (long) Short.MIN_VALUE)) {\n+\t\t\treturn new Decision<>(\n+\t\t\t\t\tvalue -> (short) (value - minValue),\n+\t\t\t\t\tnew VarIntTypeShort(minValue, maxValue)\n \t\t\t);\n \t\t}\n+\n+\t\treturn new Decision<>(value -> value - minValue, new VarIntTypeInt(minValue, maxValue));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6f46ffd90573137b9eda88bcfb492637ec6a703"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2MTM2Nw==", "bodyText": "Oder sollte nicht einer Wahnung abgegeben werden, dass Long nicht abgebildet werden kann", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r462361367", "createdAt": "2020-07-29T14:52:08Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/VarIntParser.java", "diffHunk": "@@ -40,38 +34,23 @@ protected Integer parseValue(String value) throws ParsingException {\n \t\n \t@Override\n \tpublic Decision<Integer, Number, VarIntType> decideType() {\n-\t\tif(maxValue+1 <= Byte.MAX_VALUE && minValue >= Byte.MIN_VALUE) {\n-\t\t\treturn new Decision<Integer, Number, VarIntType>(\n-\t\t\t\tnew Transformer<Integer, Number>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic Number transform(@NonNull Integer value) {\n-\t\t\t\t\t\treturn value.byteValue();\n-\t\t\t\t\t}\n-\t\t\t\t},\n-\t\t\t\tnew VarIntTypeByte((byte)minValue, (byte)maxValue)\n-\t\t\t);\n-\t\t}\n-\t\tif(maxValue+1 <= Short.MAX_VALUE && minValue >= Short.MIN_VALUE) {\n-\t\t\treturn new Decision<Integer, Number, VarIntType>(\n-\t\t\t\tnew Transformer<Integer, Number>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic Number transform(@NonNull Integer value) {\n-\t\t\t\t\t\treturn value.shortValue();\n-\t\t\t\t\t}\n-\t\t\t\t},\n-\t\t\t\tnew VarIntTypeShort((short)minValue, (short)maxValue)\n+\t\t// TODO: 28.07.2020 FK: VarIntBoolean for two fields\n+\t\t// TODO: 28.07.2020 FK: Restructure this, so that this can be folded into IntParser where all unwrap to longs instead\n+\n+\t\tif (maxValue - minValue < ((int) Byte.MAX_VALUE - (int) Byte.MIN_VALUE)) {\n+\t\t\treturn new Decision<>(\n+\t\t\t\t\tvalue -> (byte) (value - minValue),\n+\t\t\t\t\tnew VarIntTypeByte(minValue, maxValue)\n \t\t\t);\n \t\t}\n-\t\telse {\n-\t\t\treturn new Decision<Integer, Number, VarIntType>(\n-\t\t\t\tnew Transformer<Integer, Number>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic Number transform(@NonNull Integer value) {\n-\t\t\t\t\t\treturn value;\n-\t\t\t\t\t}\n-\t\t\t\t},\n-\t\t\t\tnew VarIntTypeInt(minValue, maxValue)\n+\n+\t\tif (maxValue - minValue < ((long) Short.MAX_VALUE - (long) Short.MIN_VALUE)) {\n+\t\t\treturn new Decision<>(\n+\t\t\t\t\tvalue -> (short) (value - minValue),\n+\t\t\t\t\tnew VarIntTypeShort(minValue, maxValue)\n \t\t\t);\n \t\t}\n+\n+\t\treturn new Decision<>(value -> value - minValue, new VarIntTypeInt(minValue, maxValue));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1MzA1Ng=="}, "originalCommit": {"oid": "a6f46ffd90573137b9eda88bcfb492637ec6a703"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzEzMw==", "bodyText": "die zwei muss ich noch verheiraten, aus irgendeinem grund ist VarIntLong ein sonderfall", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r462367133", "createdAt": "2020-07-29T14:59:41Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/VarIntParser.java", "diffHunk": "@@ -40,38 +34,23 @@ protected Integer parseValue(String value) throws ParsingException {\n \t\n \t@Override\n \tpublic Decision<Integer, Number, VarIntType> decideType() {\n-\t\tif(maxValue+1 <= Byte.MAX_VALUE && minValue >= Byte.MIN_VALUE) {\n-\t\t\treturn new Decision<Integer, Number, VarIntType>(\n-\t\t\t\tnew Transformer<Integer, Number>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic Number transform(@NonNull Integer value) {\n-\t\t\t\t\t\treturn value.byteValue();\n-\t\t\t\t\t}\n-\t\t\t\t},\n-\t\t\t\tnew VarIntTypeByte((byte)minValue, (byte)maxValue)\n-\t\t\t);\n-\t\t}\n-\t\tif(maxValue+1 <= Short.MAX_VALUE && minValue >= Short.MIN_VALUE) {\n-\t\t\treturn new Decision<Integer, Number, VarIntType>(\n-\t\t\t\tnew Transformer<Integer, Number>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic Number transform(@NonNull Integer value) {\n-\t\t\t\t\t\treturn value.shortValue();\n-\t\t\t\t\t}\n-\t\t\t\t},\n-\t\t\t\tnew VarIntTypeShort((short)minValue, (short)maxValue)\n+\t\t// TODO: 28.07.2020 FK: VarIntBoolean for two fields\n+\t\t// TODO: 28.07.2020 FK: Restructure this, so that this can be folded into IntParser where all unwrap to longs instead\n+\n+\t\tif (maxValue - minValue < ((int) Byte.MAX_VALUE - (int) Byte.MIN_VALUE)) {\n+\t\t\treturn new Decision<>(\n+\t\t\t\t\tvalue -> (byte) (value - minValue),\n+\t\t\t\t\tnew VarIntTypeByte(minValue, maxValue)\n \t\t\t);\n \t\t}\n-\t\telse {\n-\t\t\treturn new Decision<Integer, Number, VarIntType>(\n-\t\t\t\tnew Transformer<Integer, Number>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic Number transform(@NonNull Integer value) {\n-\t\t\t\t\t\treturn value;\n-\t\t\t\t\t}\n-\t\t\t\t},\n-\t\t\t\tnew VarIntTypeInt(minValue, maxValue)\n+\n+\t\tif (maxValue - minValue < ((long) Short.MAX_VALUE - (long) Short.MIN_VALUE)) {\n+\t\t\treturn new Decision<>(\n+\t\t\t\t\tvalue -> (short) (value - minValue),\n+\t\t\t\t\tnew VarIntTypeShort(minValue, maxValue)\n \t\t\t);\n \t\t}\n+\n+\t\treturn new Decision<>(value -> value - minValue, new VarIntTypeInt(minValue, maxValue));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1MzA1Ng=="}, "originalCommit": {"oid": "a6f46ffd90573137b9eda88bcfb492637ec6a703"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjYxNTM1OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/types/specific/VarIntType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo0NjowMlrOG48BZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo0NjowMlrOG48BZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1NjgzNg==", "bodyText": "Warum gibt das ein int zuruck und kein long? Das verwirrt mich gerade etwas", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r462356836", "createdAt": "2020-07-29T14:46:02Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/types/specific/VarIntType.java", "diffHunk": "@@ -17,6 +17,6 @@ public boolean canStoreNull() {\n \t\n \t@Override\n \tpublic Integer createScriptValue(Number value) {\n-\t\treturn value.intValue();\n+\t\treturn toInt(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6f46ffd90573137b9eda88bcfb492637ec6a703"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjYyODA1OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/types/specific/VarIntTypeByte.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo0ODo1MVrOG48Jaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo0ODo1MVrOG48Jaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1ODg5MQ==", "bodyText": "hier kann doch ein integer overflow passieren", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r462358891", "createdAt": "2020-07-29T14:48:51Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/types/specific/VarIntTypeByte.java", "diffHunk": "@@ -2,25 +2,24 @@\n \n import com.bakdata.conquery.io.cps.CPSType;\n import com.bakdata.conquery.models.types.CType;\n-\n import lombok.Getter;\n \n @CPSType(base=CType.class, id=\"VAR_INT_BYTE\")\n @Getter\n public class VarIntTypeByte extends VarIntType {\n \n-\tprivate final byte maxValue;\n-\tprivate final byte minValue;\n+\tprivate final long maxValue;\n+\tprivate final long minValue;\n \t\n-\tpublic VarIntTypeByte(byte minValue, byte maxValue) {\n+\tpublic VarIntTypeByte(long minValue, long maxValue) {\n \t\tsuper(byte.class);\n \t\tthis.minValue = minValue;\n \t\tthis.maxValue = maxValue;\n \t}\n \n \t@Override\n \tpublic int toInt(Number value) {\n-\t\treturn value.byteValue();\n+\t\treturn (int) (value.intValue() + minValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6f46ffd90573137b9eda88bcfb492637ec6a703"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjY1MzQ3OnYy", "diffSide": "RIGHT", "path": "backend/src/main/resources/com/bakdata/conquery/models/events/generation/types/VarIntTypeByte.ftl", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo1NDoxNlrOG48ZZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTowMDozNVrOG48sYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2Mjk4MQ==", "bodyText": "Muss die Transformation zweimal gemacht werden? Hier und in VarIntTypeByte.java", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r462362981", "createdAt": "2020-07-29T14:54:16Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/resources/com/bakdata/conquery/models/events/generation/types/VarIntTypeByte.ftl", "diffHunk": "@@ -2,6 +2,6 @@\n <#macro kryoSerialization type>output.writeByte(<#nested/>)</#macro>\n <#macro kryoDeserialization type>input.readByte()</#macro>\n <#macro nullCheck type><#nested/> == <@nullValue type=type/></#macro>\n-<#macro majorTypeTransformation type>(int)<#nested></#macro>\n+<#macro majorTypeTransformation type> ${type.minValue} + (int) <#nested></#macro>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6f46ffd90573137b9eda88bcfb492637ec6a703"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2Nzg0Mg==", "bodyText": "Sind unterschiedliche Stufen aber guter Hinweis", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r462367842", "createdAt": "2020-07-29T15:00:35Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/resources/com/bakdata/conquery/models/events/generation/types/VarIntTypeByte.ftl", "diffHunk": "@@ -2,6 +2,6 @@\n <#macro kryoSerialization type>output.writeByte(<#nested/>)</#macro>\n <#macro kryoDeserialization type>input.readByte()</#macro>\n <#macro nullCheck type><#nested/> == <@nullValue type=type/></#macro>\n-<#macro majorTypeTransformation type>(int)<#nested></#macro>\n+<#macro majorTypeTransformation type> ${type.minValue} + (int) <#nested></#macro>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2Mjk4MQ=="}, "originalCommit": {"oid": "a6f46ffd90573137b9eda88bcfb492637ec6a703"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjY2MzI2OnYy", "diffSide": "RIGHT", "path": "backend/src/main/resources/com/bakdata/conquery/models/events/generation/types/RealTypeFloat.ftl", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo1NjoyMVrOG48fpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTowMjowNFrOG48wuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NDU4Mw==", "bodyText": "Warum kann VarIntTypeByte null storen, aber Float nicht?", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r462364583", "createdAt": "2020-07-29T14:56:21Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/resources/com/bakdata/conquery/models/events/generation/types/RealTypeFloat.ftl", "diffHunk": "@@ -0,0 +1,5 @@\n+<#macro nullValue type><#stop \"can't store null\"/></#macro>\n+<#macro kryoSerialization type>output.writeFloat(<#nested/>)</#macro>\n+<#macro kryoDeserialization type>input.readFloat()</#macro>\n+<#macro nullCheck type><#stop \"Tried to generate a null check that is not generateable\"/></#macro>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6f46ffd90573137b9eda88bcfb492637ec6a703"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2ODk1Mw==", "bodyText": "Weil bei byte, einfach ein Wert au\u00dferhalb des Bereichs genommen wird (was hei\u00dft, dass es nur geht, wenn wir weniger werte haben als byte kann) und float k\u00f6nnte das auch, bzw sogar besser mit NaN, guter Hinweis!", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r462368953", "createdAt": "2020-07-29T15:02:04Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/resources/com/bakdata/conquery/models/events/generation/types/RealTypeFloat.ftl", "diffHunk": "@@ -0,0 +1,5 @@\n+<#macro nullValue type><#stop \"can't store null\"/></#macro>\n+<#macro kryoSerialization type>output.writeFloat(<#nested/>)</#macro>\n+<#macro kryoDeserialization type>input.readFloat()</#macro>\n+<#macro nullCheck type><#stop \"Tried to generate a null check that is not generateable\"/></#macro>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NDU4Mw=="}, "originalCommit": {"oid": "a6f46ffd90573137b9eda88bcfb492637ec6a703"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjUyNTY5OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/config/ParserConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMTo1NTo0OVrOHbq3qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMTo1NTo0OVrOHbq3qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3NTk3Nw==", "bodyText": "Doku pls", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r498775977", "createdAt": "2020-10-02T11:55:49Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/config/ParserConfig.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.bakdata.conquery.models.config;\n+\n+import javax.validation.constraints.Min;\n+\n+import lombok.Data;\n+\n+@Data\n+public class ParserConfig {\n+\t@Min(0)\n+\tprivate final double minPrecision = 1e-4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "816c71a0b72a111b5a714668bacf09a41dee817f"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjU3Nzk3OnYy", "diffSide": "RIGHT", "path": "backend/src/test/java/com/bakdata/conquery/models/events/generation/GenerationTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjoxNjoxM1rOHbrY3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDowNzo1MlrOHcr-Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NDQ3Ng==", "bodyText": "Der REAL-Parser fehlt hier", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r498784476", "createdAt": "2020-10-02T12:16:13Z", "author": {"login": "thoniTUB"}, "path": "backend/src/test/java/com/bakdata/conquery/models/events/generation/GenerationTests.java", "diffHunk": "@@ -109,25 +110,27 @@\n \t}\n \n \tpublic Bucket generateBucket(List<Object[]> arrays) throws IOException {\n+\t\tfinal ParserConfig parserConfig = new ParserConfig();\n+\n \t\tParser[] parser = new Parser[] {\n-\t\t\tMajorTypeId.DATE.createParser(),\n-\t\t\tMajorTypeId.STRING.createParser(),\n-\t\t\tMajorTypeId.STRING.createParser(),\n-\t\t\tMajorTypeId.STRING.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.STRING.createParser(),\n-\t\t\tMajorTypeId.STRING.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.STRING.createParser(),\n-\t\t\tMajorTypeId.DECIMAL.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.DECIMAL.createParser(),\n-\t\t\tMajorTypeId.STRING.createParser()\n+\t\t\tMajorTypeId.DATE.createParser(parserConfig),\n+\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\tMajorTypeId.DECIMAL.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.DECIMAL.createParser(parserConfig),\n+\t\t\tMajorTypeId.STRING.createParser(parserConfig)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "816c71a0b72a111b5a714668bacf09a41dee817f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0MjYyMw==", "bodyText": "@awildturtok warum f\u00fcgst du den Realparser hier nicht ein? ist das problematisch mit double oder float und der Randomness?", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r499842623", "createdAt": "2020-10-05T20:07:52Z", "author": {"login": "thoniTUB"}, "path": "backend/src/test/java/com/bakdata/conquery/models/events/generation/GenerationTests.java", "diffHunk": "@@ -109,25 +110,27 @@\n \t}\n \n \tpublic Bucket generateBucket(List<Object[]> arrays) throws IOException {\n+\t\tfinal ParserConfig parserConfig = new ParserConfig();\n+\n \t\tParser[] parser = new Parser[] {\n-\t\t\tMajorTypeId.DATE.createParser(),\n-\t\t\tMajorTypeId.STRING.createParser(),\n-\t\t\tMajorTypeId.STRING.createParser(),\n-\t\t\tMajorTypeId.STRING.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.STRING.createParser(),\n-\t\t\tMajorTypeId.STRING.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.STRING.createParser(),\n-\t\t\tMajorTypeId.DECIMAL.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.DECIMAL.createParser(),\n-\t\t\tMajorTypeId.STRING.createParser()\n+\t\t\tMajorTypeId.DATE.createParser(parserConfig),\n+\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\tMajorTypeId.DECIMAL.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.DECIMAL.createParser(parserConfig),\n+\t\t\tMajorTypeId.STRING.createParser(parserConfig)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NDQ3Ng=="}, "originalCommit": {"oid": "816c71a0b72a111b5a714668bacf09a41dee817f"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjU5NzExOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/config/PreprocessingConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjoyMzoxNFrOHbrk7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzo0Njo1OFrOHcRBGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NzU2Nw==", "bodyText": "Ich w\u00fcrde die Config als Factory f\u00fcr alle Parserarten nehmen. So macht dw das auch (io.dropwizard.Configuration). Und du sparst dir die vielen leeren Constructor f\u00fcr die parser.", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r498787567", "createdAt": "2020-10-02T12:23:14Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/config/PreprocessingConfig.java", "diffHunk": "@@ -19,4 +19,6 @@\n \n \t@Min(0) @Max(1)\n \tprivate double faultyLineThreshold = 0.01d;\n+\n+\tprivate ParserConfig parsers = new ParserConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "816c71a0b72a111b5a714668bacf09a41dee817f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQwMDk4Ng==", "bodyText": "Ich bef\u00fcrchte, dass das schwer zu integrieren ist mit den Konstruktoren von MajorTypeId", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r499400986", "createdAt": "2020-10-05T07:46:58Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/config/PreprocessingConfig.java", "diffHunk": "@@ -19,4 +19,6 @@\n \n \t@Min(0) @Max(1)\n \tprivate double faultyLineThreshold = 0.01d;\n+\n+\tprivate ParserConfig parsers = new ParserConfig();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NzU2Nw=="}, "originalCommit": {"oid": "816c71a0b72a111b5a714668bacf09a41dee817f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTYxMzEzOnYy", "diffSide": "RIGHT", "path": "backend/src/test/java/com/bakdata/conquery/models/types/parser/specific/RealParserTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDowNDozNFrOHcr3gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDowNDozNFrOHcr3gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0MDg5OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r499840898", "createdAt": "2020-10-05T20:04:34Z", "author": {"login": "thoniTUB"}, "path": "backend/src/test/java/com/bakdata/conquery/models/types/parser/specific/RealParserTest.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.bakdata.conquery.models.types.parser.specific;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.bakdata.conquery.models.config.ParserConfig;\n+import com.bakdata.conquery.models.types.specific.RealTypeDouble;\n+import com.bakdata.conquery.models.types.specific.RealTypeFloat;\n+import org.junit.jupiter.api.Test;\n+\n+class RealParserTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bffcd88d77e87957a2ce4224cef48a578031b03"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNjk2NTk4OnYy", "diffSide": "RIGHT", "path": "backend/src/test/java/com/bakdata/conquery/models/events/generation/GenerationTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMjo1MzoyMlrOHdx04g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMjo1NjowN1rOHdx8Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk4NzEwNg==", "bodyText": "Warum ist der 100 gro\u00df aber es werden nur 30 Jobs erzeugt?", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r500987106", "createdAt": "2020-10-07T12:53:22Z", "author": {"login": "thoniTUB"}, "path": "backend/src/test/java/com/bakdata/conquery/models/events/generation/GenerationTests.java", "diffHunk": "@@ -38,112 +38,149 @@\n import com.bakdata.conquery.models.types.specific.AStringType;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.io.output.NullOutputStream;\n+import org.assertj.core.data.Offset;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.Arguments;\n import org.junit.jupiter.params.provider.MethodSource;\n \n \n @Slf4j\n public class GenerationTests {\n+\n+\tprivate static final double requiredPrecision = Math.ulp(100f);\n+\n \tpublic static Stream<Arguments> createRandomContent() {\n \t\treturn IntStream\n-\t\t\t.of(100)\n-\t\t\t.mapToObj( numberOfValues -> {\n-\t\t\t\tRandom r = new Random(7);\n-\t\t\t\tArrayList<Object[]> arrays = new ArrayList<>();\n-\t\t\t\tfor(int i = 0;i<numberOfValues;i++) {\n-\t\t\t\t\tObject[] event = new Object[18];\n-\t\t\t\t\tarrays.add(event);\n+\t\t\t\t\t   .of(100)\n+\t\t\t\t\t   .mapToObj(numberOfValues -> {\n+\t\t\t\t\t\t\t\t\t Random r = new Random(7);\n+\t\t\t\t\t\t\t\t\t ArrayList<Object[]> arrays = new ArrayList<>();\n+\t\t\t\t\t\t\t\t\t for (int i = 0; i < numberOfValues; i++) {\n+\t\t\t\t\t\t\t\t\t\t Object[] event = new Object[20];\n+\t\t\t\t\t\t\t\t\t\t arrays.add(event);\n \n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[0] = (CDate.ofLocalDate(LocalDate.now()));\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[1] = Long.toHexString(r.nextLong());\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[2] = Integer.valueOf(r.nextInt()).toString();\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[3] = Integer.valueOf(r.nextInt()).toString();\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[4] = Long.valueOf(r.nextInt());\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[5] = Integer.valueOf((byte)r.nextInt()).toString();\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[6] = Integer.valueOf(r.nextInt()).toString();\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[7] = Long.valueOf((byte)r.nextInt());\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[8] = Long.valueOf((byte)r.nextInt());\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[9] = Integer.valueOf(r.nextInt()).toString();\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[10] = BigDecimal.valueOf(r.nextInt(4), r.nextInt(10)-5);\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[11] = Long.valueOf((byte)r.nextInt());\n-\t\t\t\t\t}\n-\t\t\t\t\tevent[12] = Long.valueOf(r.nextInt());\n-\t\t\t\t\tevent[13] = Long.valueOf(r.nextInt());\n-\t\t\t\t\t//event[14] = null;\n-\t\t\t\t\tevent[15] = Long.valueOf(r.nextInt());\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[16] = BigDecimal.valueOf(r.nextInt(4), r.nextInt(120)-60);\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[17] = Integer.toString(r.nextInt(800));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tarrays.trimToSize();\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[0] = (CDate.ofLocalDate(LocalDate.now()));\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[1] = Long.toHexString(r.nextLong());\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[2] = Integer.valueOf(r.nextInt()).toString();\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[3] = Integer.valueOf(r.nextInt()).toString();\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[4] = Long.valueOf(r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[5] = Integer.valueOf((byte) r.nextInt()).toString();\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[6] = Integer.valueOf(r.nextInt()).toString();\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[7] = Long.valueOf((byte) r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[8] = Long.valueOf((byte) r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[9] = Integer.valueOf(r.nextInt()).toString();\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[10] = BigDecimal.valueOf(r.nextInt(4), r.nextInt(10) - 5);\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[11] = Long.valueOf((byte) r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t event[12] = Long.valueOf(r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t event[13] = Long.valueOf(r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t //event[14] = null;\n+\t\t\t\t\t\t\t\t\t\t event[15] = Long.valueOf(r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[16] = BigDecimal.valueOf(r.nextInt(4), r.nextInt(120) - 60);\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[17] = Integer.toString(r.nextInt(800));\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t // Inside ULP\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[18] = r.nextDouble() * 99d;\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t // Outside ULP\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[19] = r.nextDouble() * 1000d;\n+\t\t\t\t\t\t\t\t\t\t }\n \n-\t\t\t\treturn Arguments.of(numberOfValues, arrays);\n-\t\t\t}\n-\t\t\t);\n+\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t arrays.trimToSize();\n+\n+\t\t\t\t\t\t\t\t\t return Arguments.of(numberOfValues, arrays);\n+\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t   );\n+\t}\n+\n+\t@ParameterizedTest(name = \"{0}\")\n+\t@MethodSource(\"createRandomContent\")\n+\tpublic void testParallelSerialization(int numberOfValues, List<Object[]> arrays)\n+\t\t\tthrows ClassNotFoundException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, IOException, NoSuchMethodException, SecurityException, JSONException, InterruptedException {\n+\t\tExecutorService pool = Executors.newFixedThreadPool(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "818ea6968607a951783b24309870d057baeb67e7"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk4OTAwMw==", "bodyText": "Uff, ich denke hier ist das Ziel gewesen oder immernoch das Ziel zu beweisen, dass die ganze kompilierung sich nicht auf die f\u00fc\u00dfe stapft", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r500989003", "createdAt": "2020-10-07T12:56:07Z", "author": {"login": "awildturtok"}, "path": "backend/src/test/java/com/bakdata/conquery/models/events/generation/GenerationTests.java", "diffHunk": "@@ -38,112 +38,149 @@\n import com.bakdata.conquery.models.types.specific.AStringType;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.io.output.NullOutputStream;\n+import org.assertj.core.data.Offset;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.Arguments;\n import org.junit.jupiter.params.provider.MethodSource;\n \n \n @Slf4j\n public class GenerationTests {\n+\n+\tprivate static final double requiredPrecision = Math.ulp(100f);\n+\n \tpublic static Stream<Arguments> createRandomContent() {\n \t\treturn IntStream\n-\t\t\t.of(100)\n-\t\t\t.mapToObj( numberOfValues -> {\n-\t\t\t\tRandom r = new Random(7);\n-\t\t\t\tArrayList<Object[]> arrays = new ArrayList<>();\n-\t\t\t\tfor(int i = 0;i<numberOfValues;i++) {\n-\t\t\t\t\tObject[] event = new Object[18];\n-\t\t\t\t\tarrays.add(event);\n+\t\t\t\t\t   .of(100)\n+\t\t\t\t\t   .mapToObj(numberOfValues -> {\n+\t\t\t\t\t\t\t\t\t Random r = new Random(7);\n+\t\t\t\t\t\t\t\t\t ArrayList<Object[]> arrays = new ArrayList<>();\n+\t\t\t\t\t\t\t\t\t for (int i = 0; i < numberOfValues; i++) {\n+\t\t\t\t\t\t\t\t\t\t Object[] event = new Object[20];\n+\t\t\t\t\t\t\t\t\t\t arrays.add(event);\n \n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[0] = (CDate.ofLocalDate(LocalDate.now()));\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[1] = Long.toHexString(r.nextLong());\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[2] = Integer.valueOf(r.nextInt()).toString();\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[3] = Integer.valueOf(r.nextInt()).toString();\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[4] = Long.valueOf(r.nextInt());\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[5] = Integer.valueOf((byte)r.nextInt()).toString();\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[6] = Integer.valueOf(r.nextInt()).toString();\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[7] = Long.valueOf((byte)r.nextInt());\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[8] = Long.valueOf((byte)r.nextInt());\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[9] = Integer.valueOf(r.nextInt()).toString();\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[10] = BigDecimal.valueOf(r.nextInt(4), r.nextInt(10)-5);\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[11] = Long.valueOf((byte)r.nextInt());\n-\t\t\t\t\t}\n-\t\t\t\t\tevent[12] = Long.valueOf(r.nextInt());\n-\t\t\t\t\tevent[13] = Long.valueOf(r.nextInt());\n-\t\t\t\t\t//event[14] = null;\n-\t\t\t\t\tevent[15] = Long.valueOf(r.nextInt());\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[16] = BigDecimal.valueOf(r.nextInt(4), r.nextInt(120)-60);\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[17] = Integer.toString(r.nextInt(800));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tarrays.trimToSize();\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[0] = (CDate.ofLocalDate(LocalDate.now()));\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[1] = Long.toHexString(r.nextLong());\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[2] = Integer.valueOf(r.nextInt()).toString();\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[3] = Integer.valueOf(r.nextInt()).toString();\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[4] = Long.valueOf(r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[5] = Integer.valueOf((byte) r.nextInt()).toString();\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[6] = Integer.valueOf(r.nextInt()).toString();\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[7] = Long.valueOf((byte) r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[8] = Long.valueOf((byte) r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[9] = Integer.valueOf(r.nextInt()).toString();\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[10] = BigDecimal.valueOf(r.nextInt(4), r.nextInt(10) - 5);\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[11] = Long.valueOf((byte) r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t event[12] = Long.valueOf(r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t event[13] = Long.valueOf(r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t //event[14] = null;\n+\t\t\t\t\t\t\t\t\t\t event[15] = Long.valueOf(r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[16] = BigDecimal.valueOf(r.nextInt(4), r.nextInt(120) - 60);\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[17] = Integer.toString(r.nextInt(800));\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t // Inside ULP\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[18] = r.nextDouble() * 99d;\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t // Outside ULP\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[19] = r.nextDouble() * 1000d;\n+\t\t\t\t\t\t\t\t\t\t }\n \n-\t\t\t\treturn Arguments.of(numberOfValues, arrays);\n-\t\t\t}\n-\t\t\t);\n+\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t arrays.trimToSize();\n+\n+\t\t\t\t\t\t\t\t\t return Arguments.of(numberOfValues, arrays);\n+\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t   );\n+\t}\n+\n+\t@ParameterizedTest(name = \"{0}\")\n+\t@MethodSource(\"createRandomContent\")\n+\tpublic void testParallelSerialization(int numberOfValues, List<Object[]> arrays)\n+\t\t\tthrows ClassNotFoundException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, IOException, NoSuchMethodException, SecurityException, JSONException, InterruptedException {\n+\t\tExecutorService pool = Executors.newFixedThreadPool(100);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk4NzEwNg=="}, "originalCommit": {"oid": "818ea6968607a951783b24309870d057baeb67e7"}, "originalPosition": 150}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1334, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}