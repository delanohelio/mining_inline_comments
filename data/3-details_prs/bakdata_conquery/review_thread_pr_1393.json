{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNDk1NTMw", "number": 1393, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzowMToxMlrOEvoHDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzowNzo0N1rOEvoPGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Mzc1NjkzOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/common/CDateSetCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzowMToxM1rOHktY-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzowMToxM1rOHktY-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI1NDQ1OA==", "bodyText": "container kann in die While-Schleife um den Scope zu verkleinern.", "url": "https://github.com/bakdata/conquery/pull/1393#discussion_r508254458", "createdAt": "2020-10-20T07:01:13Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/common/CDateSetCache.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.bakdata.conquery.models.common;\n+\n+import java.lang.ref.Cleaner;\n+import java.lang.ref.Reference;\n+import java.lang.ref.SoftReference;\n+import java.util.BitSet;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Cache to avoid constant reallocation of huge CDateSets, instead cache/reuse their BitSets by way of a {@link Cleaner} that hooks into the GC and will give us those objects back.\n+ * <p>\n+ * The underlying data-structures are also maintained as {@link SoftReference} such that they are also subject to GC when memory is demanded.\n+ */\n+@Slf4j\n+public class CDateSetCache {\n+\n+\tprivate static final CDateSetCache dateSetCache = new CDateSetCache();\n+\tprotected final Queue<Reference<Container>> pool;\n+\tprivate final Cleaner cleaner = Cleaner.create();\n+\n+\tprivate CDateSetCache() {\n+\t\tpool = new ConcurrentLinkedQueue<>();\n+\t}\n+\n+\t/**\n+\t * Preallocate the DateSet, such that typical queries don't have to grow them while executing.\n+\t * The numbers are just best guesses and can be fine tuned if desired but configuration is probably not important.\n+\t */\n+\tpublic static BitMapCDateSet createPreAllocatedDateSet() {\n+\t\treturn dateSetCache.acquire();\n+\t}\n+\n+\tpublic BitMapCDateSet acquire() {\n+\t\tfinal BitMapCDateSet out = doAcquire();\n+\n+\t\t// create and maintain hardref on the bitsets\n+\t\tfinal Container container = new Container(out.getNegativeBits(), out.getPositiveBits());\n+\n+\t\tcleaner.register(out, () -> {\n+\t\t\t// Reset the bitsets\n+\t\t\tcontainer.getLeft().clear();\n+\t\t\tcontainer.getRight().clear();\n+\n+\t\t\t// Add reference of container to the bitset, so that they can be freed if memory is demanded.\n+\t\t\tpool.add(new SoftReference<>(container));\n+\t\t});\n+\n+\t\treturn out;\n+\t}\n+\n+\t/**\n+\t * Try to reuse old BitSets if available. Else create a new one.\n+\t */\n+\tprivate BitMapCDateSet doAcquire() {\n+\t\tReference<Container> reference;\n+\t\tContainer container;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ea56feb18f1d86db1049d9f13dd928b0e3496a4"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Mzc3NzUyOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQExternal.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzowNzo0N1rOHktleg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzowNzo0N1rOHktleg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI1NzY1OA==", "bodyText": "Du kannst hier return BitMapCDateSet.create(CDateRange.of(start, end)); machen. Das of kann mit null umgehen, so wie ich das sehe.", "url": "https://github.com/bakdata/conquery/pull/1393#discussion_r508257658", "createdAt": "2020-10-20T07:07:47Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQExternal.java", "diffHunk": "@@ -133,38 +132,32 @@ public void collectResultInfos(ResultInfoCollector collector) {\n \t\tEVENT_DATE {\n \t\t\t@Override\n \t\t\tpublic BitMapCDateSet readDates(int[] dateIndices, String[] row) throws ParsingException {\n-\t\t\t\treturn BitMapCDateSet.create(Collections.singleton(CDateRange.exactly(DateFormats.parseToLocalDate(row[dateIndices[0]]))));\n+\t\t\t\treturn BitMapCDateSet.create(CDateRange.exactly(DateFormats.parseToLocalDate(row[dateIndices[0]])));\n \t\t\t}\n \t\t},\n \t\tSTART_END_DATE {\n \t\t\t@Override\n \t\t\tpublic BitMapCDateSet readDates(int[] dateIndices, String[] row) throws ParsingException {\n \t\t\t\tLocalDate start = row[dateIndices[0]] == null ? null : DateFormats.parseToLocalDate(row[dateIndices[0]]);\n \t\t\t\tLocalDate end = (dateIndices.length < 2 || row[dateIndices[1]] == null) ?\n-\t\t\t\t\tnull :\n-\t\t\t\t\t\t\t\t DateFormats.parseToLocalDate(row[dateIndices[1]]);\n+\t\t\t\t\t\t\t\tnull :\n+\t\t\t\t\t\t\t\tDateFormats.parseToLocalDate(row[dateIndices[1]]);\n \n \t\t\t\tCDateRange range;\n-\t\t\t\tif (start != null && end != null) {\n-\t\t\t\t\trange = CDateRange.of(start, end);\n-\t\t\t\t}\n-\t\t\t\telse if (start != null) {\n-\t\t\t\t\trange = CDateRange.atLeast(start);\n-\t\t\t\t}\n-\t\t\t\telse if (end != null) {\n-\t\t\t\t\trange = CDateRange.atMost(end);\n+\t\t\t\tif (start == null && end == null) {\n+\t\t\t\t\treturn null;\n \t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\treturn null;\n+\t\t\t\t\trange = CDateRange.of(start, end);\n \t\t\t\t}\n \n-\t\t\t\treturn BitMapCDateSet.create(Collections.singleton(range));\n+\t\t\t\treturn BitMapCDateSet.create(range);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ea56feb18f1d86db1049d9f13dd928b0e3496a4"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1606, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}