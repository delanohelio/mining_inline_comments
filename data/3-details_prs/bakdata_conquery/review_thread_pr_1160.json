{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNjIzNTc5", "number": 1160, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTowMDozMFrODx-tCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTowMDozMFrODx-tCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzM0MTU1OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/tasks/QueryCleanupTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTowMDozMFrOGFwZDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTowMDozMFrOGFwZDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4ODkxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tif (validRef.size() > 0) {\n          \n          \n            \n            \t\t\t\tif (!validRef.isEmpty()) {", "url": "https://github.com/bakdata/conquery/pull/1160#discussion_r408688910", "createdAt": "2020-04-15T09:00:30Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/tasks/QueryCleanupTask.java", "diffHunk": "@@ -142,52 +142,46 @@ public static int deleteQueryPermissionsWithMissingRef(MasterMetaStorage storage\n \t\t// Do the loop-di-loop\n \t\tfor (PermissionOwner<?> owner : owners) {\n \t\t\tSet<Permission> permissions = owner.getPermissions();\n-\t\t\tsynchronized (permissions) {\n-\t\t\t\t/*\n-\t\t\t\t * Directly use an Iterator here because the iterator of an for(elem:collection)\n-\t\t\t\t * loop does not consider that the collections grows or in our case shrinks.\n-\t\t\t\t */\n-\t\t\t\tIterator<Permission> it = permissions.iterator();\n-\t\t\t\twhile (it.hasNext()) {\n-\t\t\t\t\tPermission permission = it.next();\n-\t\t\t\t\tif (!(permission instanceof WildcardPermission)) {\n-\t\t\t\t\t\tlog.warn(\n-\t\t\t\t\t\t\t\"Encountered the permission type {} that is not handled by this routine. Permission was: {}\",\n-\t\t\t\t\t\t\tpermission.getClass(),\n-\t\t\t\t\t\t\tpermission);\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\t\t\t\t\tWildcardPermission wpermission = (WildcardPermission) permission;\n-\t\t\t\t\tif (!wpermission.getDomains().contains(QueryPermission.DOMAIN)) {\n-\t\t\t\t\t\t// Skip Permissions that do not reference an Execution/Query\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n+\t\t\tIterator<Permission> it = permissions.iterator();\n+\t\t\twhile (it.hasNext()) {\n+\t\t\t\tPermission permission = it.next();\n+\t\t\t\tif (!(permission instanceof WildcardPermission)) {\n+\t\t\t\t\tlog.warn(\n+\t\t\t\t\t\t\"Encountered the permission type {} that is not handled by this routine. Permission was: {}\",\n+\t\t\t\t\t\tpermission.getClass(),\n+\t\t\t\t\t\tpermission);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tWildcardPermission wpermission = (WildcardPermission) permission;\n+\t\t\t\tif (!wpermission.getDomains().contains(QueryPermission.DOMAIN)) {\n+\t\t\t\t\t// Skip Permissions that do not reference an Execution/Query\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n \n-\t\t\t\t\t// Handle multiple references to instances\n-\t\t\t\t\tSet<String> validRef = new HashSet<>();\n-\t\t\t\t\tfor (String sId : wpermission.getInstances()) {\n-\t\t\t\t\t\tManagedExecutionId mId = ManagedExecutionId.Parser.INSTANCE.parse(sId);\n-\t\t\t\t\t\tif (storage.getExecution(mId) != null) {\n-\t\t\t\t\t\t\t// Execution exists -- it is a valid reference\n-\t\t\t\t\t\t\tvalidRef.add(mId.toString());\n-\t\t\t\t\t\t}\n+\t\t\t\t// Handle multiple references to instances\n+\t\t\t\tSet<String> validRef = new HashSet<>();\n+\t\t\t\tfor (String sId : wpermission.getInstances()) {\n+\t\t\t\t\tManagedExecutionId mId = ManagedExecutionId.Parser.INSTANCE.parse(sId);\n+\t\t\t\t\tif (storage.getExecution(mId) != null) {\n+\t\t\t\t\t\t// Execution exists -- it is a valid reference\n+\t\t\t\t\t\tvalidRef.add(mId.toString());\n \t\t\t\t\t}\n-\t\t\t\t\tif (validRef.size() > 0) {\n-\t\t\t\t\t\tif (wpermission.getInstances().size() == validRef.size()) {\n-\t\t\t\t\t\t\t// All are valid, nothing changed proceed with the next permission\n-\t\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t// Create a new Permission that only contains valid references\n-\t\t\t\t\t\tWildcardPermission reducedPermission = new WildcardPermission(\n-\t\t\t\t\t\t\tList.of(wpermission.getDomains(), wpermission.getAbilities(), validRef), wpermission.getCreationTime());\n-\t\t\t\t\t\towner.addPermission(storage, reducedPermission);\n+\t\t\t\t}\n+\t\t\t\tif (validRef.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c91fbd39979314ac896ac6db76bbb6d2e34d25"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1382, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}