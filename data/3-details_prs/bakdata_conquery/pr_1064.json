{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNjU1ODU0", "number": 1064, "title": "Feature/export form optional quarters", "bodyText": "Enables the user of an Absolute export form to define in which temporal granularity the output should be rendered", "createdAt": "2020-03-04T15:46:51Z", "url": "https://github.com/bakdata/conquery/pull/1064", "merged": true, "mergeCommit": {"oid": "56dca915135340479ad0f51f86a85c6f16fb4578"}, "closed": true, "closedAt": "2020-03-23T12:36:12Z", "author": {"login": "thoniTUB"}, "timelineItems": {"totalCount": 48, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKYse5AH2gAyMzgzNjU1ODU0OjNmMmMyZWIzNjQzOGYxMTRlMmUzNzM3NGQ2MTBmNTY0Y2Q1YTM0NDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQdb2MAH2gAyMzgzNjU1ODU0OjNiOGM5OGNkMWIzZTM1OTY2NzE2NGFiZGQ4YzJhODgyMTJjODZlMjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3f2c2eb36438f114e2e37374d610f564cd5a3449", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/3f2c2eb36438f114e2e37374d610f564cd5a3449", "committedDate": "2020-03-04T15:31:38Z", "message": "creates specified date subdivision and also larger if flag is set"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22eb60f22b5d06f9644035078c1dd810530594da", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/22eb60f22b5d06f9644035078c1dd810530594da", "committedDate": "2020-03-04T15:46:53Z", "message": "Merge 3f2c2eb36438f114e2e37374d610f564cd5a3449 into f1ef55ff96707ab1adf1264890ad2fec37c4dfeb"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc5029a58357eecf6e65be7be908bbd73c605b2e", "author": {"user": {"login": "bakdata-bot", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/dc5029a58357eecf6e65be7be908bbd73c605b2e", "committedDate": "2020-03-04T15:49:02Z", "message": "automatic update to docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e63a5a29720dc13aa51fdfa31ca5cc2bfc0e6acc", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/e63a5a29720dc13aa51fdfa31ca5cc2bfc0e6acc", "committedDate": "2020-03-09T15:23:23Z", "message": "Merge branch 'develop' into feature/export-form-optional-quarters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e651a7349e5a481e4803f2177fe0f99ab22c11a4", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/e651a7349e5a481e4803f2177fe0f99ab22c11a4", "committedDate": "2020-03-10T12:48:45Z", "message": "adds extra column to form results"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01df1e578980a124c880f7f91eff7757a037e4ae", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/01df1e578980a124c880f7f91eff7757a037e4ae", "committedDate": "2020-03-10T12:48:55Z", "message": "Merge e651a7349e5a481e4803f2177fe0f99ab22c11a4 into 51bec8832ce1119f4a2926367d5cbc642cfb16cd"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12df4c40e9c9e600bd7d3d2cbaa1eba9b2a576c1", "author": {"user": {"login": "bakdata-bot", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/12df4c40e9c9e600bd7d3d2cbaa1eba9b2a576c1", "committedDate": "2020-03-10T12:51:09Z", "message": "automatic update to docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0782ad12d93539f7ddf54724cc219e452158249", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/f0782ad12d93539f7ddf54724cc219e452158249", "committedDate": "2020-03-10T14:05:02Z", "message": "adds locale to printsettings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "385fb42995bbaf20f07ec17ba410d8acbac43206", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/385fb42995bbaf20f07ec17ba410d8acbac43206", "committedDate": "2020-03-10T14:05:15Z", "message": "Merge branch 'feature/export-form-optional-quarters' of https://github.com/bakdata/conquery into feature/export-form-optional-quarters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9594323b503186a8215068fcc7373592d6a820c", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/c9594323b503186a8215068fcc7373592d6a820c", "committedDate": "2020-03-11T08:04:37Z", "message": "adds localization for resolution column in output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9155aeef2fcd152854aeebd6ce9f8aced5a2fd8", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/f9155aeef2fcd152854aeebd6ce9f8aced5a2fd8", "committedDate": "2020-03-11T13:32:06Z", "message": "fixes result column in relative export form"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28bed02e0718d66268e44f00c729d676cd46ee6f", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/28bed02e0718d66268e44f00c729d676cd46ee6f", "committedDate": "2020-03-11T16:55:52Z", "message": "adds temporal subdivision feature to relative form"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8821ccd302996d73efc3af1015834b356b03ab4", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/a8821ccd302996d73efc3af1015834b356b03ab4", "committedDate": "2020-03-11T16:56:02Z", "message": "Merge 28bed02e0718d66268e44f00c729d676cd46ee6f into c8b332ea8eeaa5e10e0cb6013b4fc72bb94bea56"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e31e87e286bce8dec326a5807d1ebb9d228d4f14", "author": {"user": {"login": "bakdata-bot", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/e31e87e286bce8dec326a5807d1ebb9d228d4f14", "committedDate": "2020-03-11T16:58:04Z", "message": "automatic update to docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e378828dc2312c919a7597ccb8550d133c7c757", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/2e378828dc2312c919a7597ccb8550d133c7c757", "committedDate": "2020-03-12T14:44:51Z", "message": "fixes frontend resolution members"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f392ea129be42ac14cadbeb9bb256722b0d5b61", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/1f392ea129be42ac14cadbeb9bb256722b0d5b61", "committedDate": "2020-03-12T14:53:54Z", "message": "Merge branch 'develop' into feature/export-form-optional-quarters\n\n# Conflicts:\n#\tautodoc/src/main/java/com/bakdata/conquery/Constants.java\n#\tautodoc/src/main/java/com/bakdata/conquery/handler/GroupHandler.java\n#\tdocs/REST API JSONs.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e962043648a6237490a9bb9885c23d05517f0d4", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/6e962043648a6237490a9bb9885c23d05517f0d4", "committedDate": "2020-03-16T11:52:56Z", "message": "Merge branch 'develop' into feature/export-form-optional-quarters\n\n# Conflicts:\n#\tautodoc/src/main/java/com/bakdata/conquery/Constants.java\n#\tautodoc/src/main/java/com/bakdata/conquery/handler/GroupHandler.java\n#\tbackend/src/main/java/com/bakdata/conquery/apiv1/forms/export_form/ExportForm.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQuery.java\n#\tdocs/REST API JSONs.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e47fcdb48c5008a18ebbd418a951a3192591a74a", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/e47fcdb48c5008a18ebbd418a951a3192591a74a", "committedDate": "2020-03-16T11:57:26Z", "message": "removes redundant null check, that caused compiler error in eclipse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37401ead19f707fae5f4582022fb331eeb190ded", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/37401ead19f707fae5f4582022fb331eeb190ded", "committedDate": "2020-03-16T12:52:40Z", "message": "Merge branch 'develop' into feature/export-form-optional-quarters\n\n# Conflicts:\n#\tbackend/src/test/resources/tests/form/EXPORT_FORM/ABSOLUT/SIMPLE/expected.csv\n#\tbackend/src/test/resources/tests/form/EXPORT_FORM/RELATIVE/expected.csv"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b80d8b5502a30ca654aec11fe0eba6e6405b5e8", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/6b80d8b5502a30ca654aec11fe0eba6e6405b5e8", "committedDate": "2020-03-17T16:22:02Z", "message": "Merge branch 'develop' into feature/export-form-optional-quarters\n\n# Conflicts:\n#\tautodoc/src/main/java/com/bakdata/conquery/handler/GroupHandler.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bbbbe167f30ec4c2b9b801a6fad2c4a0ca0b6a8", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/6bbbbe167f30ec4c2b9b801a6fad2c4a0ca0b6a8", "committedDate": "2020-03-18T15:30:17Z", "message": "organize imports autodoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75c8a8f7730b59bced257156b96bc7a76a635da7", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/75c8a8f7730b59bced257156b96bc7a76a635da7", "committedDate": "2020-03-18T15:32:43Z", "message": "Merge branch 'develop' into feature/export-form-optional-quarters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7ca9b1e476410a06021ee1d03625a8a2fd3b4ad", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/e7ca9b1e476410a06021ee1d03625a8a2fd3b4ad", "committedDate": "2020-03-18T16:39:18Z", "message": "adds ClassToIntanceMap to GroupHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d469a163c4d9941cafd68e0b314d4f3ee1c4621", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/2d469a163c4d9941cafd68e0b314d4f3ee1c4621", "committedDate": "2020-03-18T16:39:30Z", "message": "Merge e7ca9b1e476410a06021ee1d03625a8a2fd3b4ad into 5ebe12e9ff340aeaffc1908ad01449b8d5de4b19"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbfabb56fca327c69902aeb4c9af2e5651ecb1e4", "author": {"user": {"login": "bakdata-bot", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/bbfabb56fca327c69902aeb4c9af2e5651ecb1e4", "committedDate": "2020-03-18T16:41:05Z", "message": "automatic update to docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7ec72d6b45eb1b93366882414739a18be1494fa", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/a7ec72d6b45eb1b93366882414739a18be1494fa", "committedDate": "2020-03-18T17:30:47Z", "message": "fixes handling of complete range in reletive form query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/e2dbb04c70834b598d6a14cab9c137d6be21c768", "committedDate": "2020-03-18T17:30:59Z", "message": "Merge branch 'feature/export-form-optional-quarters' of https://github.com/bakdata/conquery into feature/export-form-optional-quarters"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NTA1NTUy", "url": "https://github.com/bakdata/conquery/pull/1064#pullrequestreview-377505552", "createdAt": "2020-03-19T08:24:27Z", "commit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODoyNDoyN1rOF4kLdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOTo1MjoyMVrOF4nH-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg1NzMzMg==", "bodyText": "da hast du was vergessen", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394857332", "createdAt": "2020-03-19T08:24:27Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,117 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+import com.bakdata.conquery.io.HasResourceBundle;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.collections4.list.UnmodifiableList;\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n-public enum DateContextMode {\n+public enum DateContextMode implements HasResourceBundle {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\tArrayUtils.indexOf(DateContextMode.values(), this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg1ODczNg==", "bodyText": "l\u00f6schen", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394858736", "createdAt": "2020-03-19T08:27:20Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,117 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+import com.bakdata.conquery.io.HasResourceBundle;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.collections4.list.UnmodifiableList;\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n-public enum DateContextMode {\n+public enum DateContextMode implements HasResourceBundle {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\tArrayUtils.indexOf(DateContextMode.values(), this);\n+\t\t\treturn List.of(range);\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * years.\n \t */\n-\tYEAR_WISE,\n+\tYEARS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredYears();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * quarters.\n \t */\n-\tQUARTER_WISE;\n+\tQUARTERS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredQuarters();\n+\t\t}\n+\t},\n+\t\n+\t/**\n+\t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n+\t * days.\n+\t */\n+\tDAYS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredDays();\n+\t\t}\n+\t};\n+\t\n+//\tThis causes a runtime error at the moment. See workaround below.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg1OTYyNw==", "bodyText": "ouch", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394859627", "createdAt": "2020-03-19T08:29:02Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,117 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+import com.bakdata.conquery.io.HasResourceBundle;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.collections4.list.UnmodifiableList;\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n-public enum DateContextMode {\n+public enum DateContextMode implements HasResourceBundle {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\tArrayUtils.indexOf(DateContextMode.values(), this);\n+\t\t\treturn List.of(range);\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * years.\n \t */\n-\tYEAR_WISE,\n+\tYEARS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredYears();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * quarters.\n \t */\n-\tQUARTER_WISE;\n+\tQUARTERS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredQuarters();\n+\t\t}\n+\t},\n+\t\n+\t/**\n+\t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n+\t * days.\n+\t */\n+\tDAYS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredDays();\n+\t\t}\n+\t};\n+\t\n+//\tThis causes a runtime error at the moment. See workaround below.\n+//\tprivate DateContextMode() {\n+//\t\tList<DateContextMode> list = new ArrayList<>();\n+//\t\tDateContextMode current = this;\n+//\t\tdo {\n+//\t\t\tlist.add(current);\n+//\t\t\tcurrent = getNextCoarserSubdivision(current);\n+//\t\t}while(current != null);\n+//\t\t\n+//\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+//\t}\n+\t\n+\tprivate List<DateContextMode> thisAndCoarserSubdivisions;\n+\t\n+\t/**\n+\t * WORKAROUND because the eclipse compiler has bug similar to this one:\n+\t * https://bugs.eclipse.org/bugs/show_bug.cgi?id=81454", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDQwMA==", "bodyText": "Find ich cute, aber k\u00f6nntest du auch fast \u00fcber ein privates Feld l\u00f6sen, dass du in der declaration setzt.", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394860400", "createdAt": "2020-03-19T08:30:38Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,117 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+import com.bakdata.conquery.io.HasResourceBundle;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.collections4.list.UnmodifiableList;\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n-public enum DateContextMode {\n+public enum DateContextMode implements HasResourceBundle {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\tArrayUtils.indexOf(DateContextMode.values(), this);\n+\t\t\treturn List.of(range);\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * years.\n \t */\n-\tYEAR_WISE,\n+\tYEARS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredYears();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * quarters.\n \t */\n-\tQUARTER_WISE;\n+\tQUARTERS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredQuarters();\n+\t\t}\n+\t},\n+\t\n+\t/**\n+\t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n+\t * days.\n+\t */\n+\tDAYS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredDays();\n+\t\t}\n+\t};\n+\t\n+//\tThis causes a runtime error at the moment. See workaround below.\n+//\tprivate DateContextMode() {\n+//\t\tList<DateContextMode> list = new ArrayList<>();\n+//\t\tDateContextMode current = this;\n+//\t\tdo {\n+//\t\t\tlist.add(current);\n+//\t\t\tcurrent = getNextCoarserSubdivision(current);\n+//\t\t}while(current != null);\n+//\t\t\n+//\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+//\t}\n+\t\n+\tprivate List<DateContextMode> thisAndCoarserSubdivisions;\n+\t\n+\t/**\n+\t * WORKAROUND because the eclipse compiler has bug similar to this one:\n+\t * https://bugs.eclipse.org/bugs/show_bug.cgi?id=81454\n+\t */\n+\t@JsonIgnore\n+\tpublic List<DateContextMode> getThisAndCoarserSubdivisions(){\n+\t\tif (thisAndCoarserSubdivisions != null) {\n+\t\t\treturn thisAndCoarserSubdivisions;\n+\t\t}\n+\t\tList<DateContextMode> list = new ArrayList<>();\n+\t\tDateContextMode current = this;\n+\t\tdo {\n+\t\t\t// Sort from coarse to finer\n+\t\t\tlist.add(0,current);\n+\t\t\tcurrent = getNextCoarserSubdivision(current);\n+\t\t}while(current != null);\n+\t\t\n+\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+\t\treturn thisAndCoarserSubdivisions;\n+\t}\n+\t\n+\n+\tpublic List<CDateRange> subdivideRange(CDateRange range){\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\t\n+\tprivate static DateContextMode getNextCoarserSubdivision(DateContextMode mode) {\n+\t\tDateContextMode[] modes = DateContextMode.values();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDU4OQ==", "bodyText": "mode.ordinal() -1", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394860589", "createdAt": "2020-03-19T08:31:01Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,117 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+import com.bakdata.conquery.io.HasResourceBundle;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.collections4.list.UnmodifiableList;\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n-public enum DateContextMode {\n+public enum DateContextMode implements HasResourceBundle {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\tArrayUtils.indexOf(DateContextMode.values(), this);\n+\t\t\treturn List.of(range);\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * years.\n \t */\n-\tYEAR_WISE,\n+\tYEARS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredYears();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * quarters.\n \t */\n-\tQUARTER_WISE;\n+\tQUARTERS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredQuarters();\n+\t\t}\n+\t},\n+\t\n+\t/**\n+\t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n+\t * days.\n+\t */\n+\tDAYS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredDays();\n+\t\t}\n+\t};\n+\t\n+//\tThis causes a runtime error at the moment. See workaround below.\n+//\tprivate DateContextMode() {\n+//\t\tList<DateContextMode> list = new ArrayList<>();\n+//\t\tDateContextMode current = this;\n+//\t\tdo {\n+//\t\t\tlist.add(current);\n+//\t\t\tcurrent = getNextCoarserSubdivision(current);\n+//\t\t}while(current != null);\n+//\t\t\n+//\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+//\t}\n+\t\n+\tprivate List<DateContextMode> thisAndCoarserSubdivisions;\n+\t\n+\t/**\n+\t * WORKAROUND because the eclipse compiler has bug similar to this one:\n+\t * https://bugs.eclipse.org/bugs/show_bug.cgi?id=81454\n+\t */\n+\t@JsonIgnore\n+\tpublic List<DateContextMode> getThisAndCoarserSubdivisions(){\n+\t\tif (thisAndCoarserSubdivisions != null) {\n+\t\t\treturn thisAndCoarserSubdivisions;\n+\t\t}\n+\t\tList<DateContextMode> list = new ArrayList<>();\n+\t\tDateContextMode current = this;\n+\t\tdo {\n+\t\t\t// Sort from coarse to finer\n+\t\t\tlist.add(0,current);\n+\t\t\tcurrent = getNextCoarserSubdivision(current);\n+\t\t}while(current != null);\n+\t\t\n+\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+\t\treturn thisAndCoarserSubdivisions;\n+\t}\n+\t\n+\n+\tpublic List<CDateRange> subdivideRange(CDateRange range){\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\t\n+\tprivate static DateContextMode getNextCoarserSubdivision(DateContextMode mode) {\n+\t\tDateContextMode[] modes = DateContextMode.values();\n+\t\tint index = ArrayUtils.indexOf(modes, mode) - 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDk3OA==", "bodyText": "Bitte anreissen was das macht oder wo du das benutzt", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394860978", "createdAt": "2020-03-19T08:31:52Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextModeResource.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.bakdata.conquery.apiv1.forms;\n+\n+import java.util.ListResourceBundle;\n+\n+import lombok.Getter;\n+\n+\n+public class DateContextModeResource extends ListResourceBundle {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MTIzOQ==", "bodyText": "\u00f6h", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394861239", "createdAt": "2020-03-19T08:32:23Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextModeResource_en.java", "diffHunk": "@@ -0,0 +1,4 @@\n+package com.bakdata.conquery.apiv1.forms;\n+\n+public class DateContextModeResource_en extends DateContextModeResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2Mjk3OA==", "bodyText": "doku", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394862978", "createdAt": "2020-03-19T08:36:01Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/HasResourceBundle.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.bakdata.conquery.io;\n+\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+public interface HasResourceBundle {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MzcyMw==", "bodyText": "Was k\u00f6nnte hier sonst noch sein? Das sieht gef\u00e4hrtlich aus", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394863723", "createdAt": "2020-03-19T08:37:32Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/externalservice/ResultType.java", "diffHunk": "@@ -37,12 +38,28 @@ public String print(PrintSettings cfg, Object f) {\n \t\t\tif(cfg.isPrettyPrint()) {\n \t\t\t\treturn DECIMAL_FORMAT.format(f);\n \t\t\t}\n+\t\t\treturn f.toString();\n+\t\t}\n+\t},\n+\tCATEGORICAL,\n+\tRESOLUTION {\n+\t\t@Override\n+\t\tpublic String print(PrintSettings cfg, Object f) {\n+\t\t\tDateContextMode mode = null;\n+\t\t\tif(!( f instanceof DateContextMode)) {\n+\t\t\t\tmode = DateContextMode.valueOf(f.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2NTk5OQ==", "bodyText": "Kannst du das nicht schon in der Validierung machen?", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394865999", "createdAt": "2020-03-19T08:42:08Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/export/RelExportGenerator.java", "diffHunk": "@@ -22,6 +25,17 @@ public static RelativeFormQuery generate(Namespaces namespaces, RelativeMode mod\n \t\tConceptManipulator.DEFAULT_SELECTS_WHEN_EMPTY.consume(mode.getFeatures(), namespaces);\n \t\tConceptManipulator.DEFAULT_SELECTS_WHEN_EMPTY.consume(mode.getOutcomes(), namespaces);\n \t\t\n+\t\tList<DateContextMode> resolutions = null;\n+\t\tif(mode.getForm().isAlsoCreateCoarserSubdivisions()) {\n+\t\t\tif(mode.getForm().getResolution().size() != 1) {\n+\t\t\t\tthrow new IllegalStateException(\"Abort Form creation, because coarser subdivision are requested and multiple resolutions are given. With 'alsoCreateCoarserSubdivisions' set to true, provide only one resolution.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2Njc3Mw==", "bodyText": "Ich wei\u00df was die Funktion macht, aber das ist doch schon echt viel Magic. Kannst du die Zahlen in einem Enum halten und Doku dr\u00fcber schreiben?", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394866773", "createdAt": "2020-03-19T08:43:28Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/FormQueryPlan.java", "diffHunk": "@@ -49,18 +49,20 @@ public EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n \t}\n \t\n \tprivate Object[] addConstants(Object[] values, DateContext dateContext) {\n-\t\tint constants = dateContext.getEventDate() == null ? 2 : 3;\n+\t\tint constants = dateContext.getEventDate() == null ? 3 : 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg3MTU2MQ==", "bodyText": "Das Semikolon ist hier interessant gesetzt", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394871561", "createdAt": "2020-03-19T08:52:34Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java", "diffHunk": "@@ -66,22 +67,37 @@ public EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n \t\t// We look at the first result line to determine the length of the subresult\n \t\tint featureLength = featureResult.getValues().get(0).length;\n \t\tint outcomeLength = outcomeResult.getValues().get(0).length;\n-\t\t// Whole result is the concatenation of the subresults. However the sub result includes the date restriction which we drop.\n-\t\tint size = featureLength + outcomeLength - 2;\n-\n-\t\t// merge the full (index == null) lines\n-\t\tObject[] mergedFull = new Object[size];\n-\t\tsetFeatureValues(mergedFull, featureResult.getValues().get(0));\n-\t\tsetOutcomeValues(mergedFull, outcomeResult.getValues().get(0), featureLength);\n-\t\tvalues.add(mergedFull);\n+\t\t\n+\t\t/*\n+\t\t *  Whole result is the concatenation of the subresults. The final output format combines resolution info, index and eventdate of both sub queries.\n+\t\t *  The feature/outcome sub queries are of in form of: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE/OUTCOME_DR], [FEATURE/OUTCOME_SELECTS]... \n+\t\t *  The wanted format is: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE_DR], [OUTCOME_DR], [FEATURE_SELECTS]... , [OUTCOME_SELECTS]\n+\t\t */\n+\t\tint size = featureLength + outcomeLength - 3/*= [RESOLUTION], [INDEX], [EVENTDATE]*/;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwMzQzMg==", "bodyText": "wie h\u00e4ufig brauchst du den? Finde dass man das List.of auch in den Callern machen kann, wenn es nur 1-2 sind", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394903432", "createdAt": "2020-03-19T09:48:38Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java", "diffHunk": "@@ -57,54 +58,48 @@\n \t */\n \t@Getter @Setter\n \tprivate LocalDate eventDate = null;\n+\t\n+\t/**\n+\t * Indicates under which temporal subdivision mode this instance was created.\n+\t */\n+\t@Getter\n+\t@Nullable\n+\tprivate DateContextMode subdivisionMode;\n \n+\tpublic static List<DateContext> generateAbsoluteContexts(CDateRange dateRangeMask, DateContextMode subdivisionMode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwMzUxNA==", "bodyText": "oder du machst ein ... draus", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394903514", "createdAt": "2020-03-19T09:48:45Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java", "diffHunk": "@@ -57,54 +58,48 @@\n \t */\n \t@Getter @Setter\n \tprivate LocalDate eventDate = null;\n+\t\n+\t/**\n+\t * Indicates under which temporal subdivision mode this instance was created.\n+\t */\n+\t@Getter\n+\t@Nullable\n+\tprivate DateContextMode subdivisionMode;\n \n+\tpublic static List<DateContext> generateAbsoluteContexts(CDateRange dateRangeMask, DateContextMode subdivisionMode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwMzQzMg=="}, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwNTU5NQ==", "bodyText": "die index++/index-- geschichte sollte etwas dokumentiert sein, dass ist mir nr halb schl\u00fcssig", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394905595", "createdAt": "2020-03-19T09:52:21Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java", "diffHunk": "@@ -121,53 +116,50 @@\n \t * @param timeUnit\n \t * @return\n \t */\n-\tpublic static List<DateContext> generateRelativeContexts(int event, IndexPlacement indexPlacement, int featureTime,\n-\t\t\tint outcomeTime, boolean sliced, TimeUnit timeUnit) {\n+\tpublic static List<DateContext> generateRelativeContexts(int event, IndexPlacement indexPlacement, int featureTime,\tint outcomeTime, DateContextMode timeUnit, List<DateContextMode> subdivisionModes) {\n \t\tif (featureTime < 1 || outcomeTime < 1) {\n \t\t\tthrow new IllegalArgumentException(\"Relative times were smaller than 1 (featureTime: \" + featureTime\n \t\t\t\t\t+ \"; outcomeTime: \" + outcomeTime + \")\");\n \t\t}\n-\t\tList<DateContext> dcl = new ArrayList<>();\n+\t\tList<DateContext> dcList = new ArrayList<>();\n+\t\t\n+\t\tLocalDate eventdate = CDate.toLocalDate(event);\n \n \t\tCDateRange featureRange = generateFeatureRange(event, indexPlacement, featureTime, timeUnit);\n \t\tCDateRange outcomeRange = generateOutcomeRange(event, indexPlacement, outcomeTime, timeUnit);\n \n-\t\tdcl.add(new DateContext(featureRange, FeatureGroup.FEATURE, null, CDate.toLocalDate(event)));\n-\t\tdcl.add(new DateContext(outcomeRange, FeatureGroup.OUTCOME, null, CDate.toLocalDate(event)));\n-\n-\t\tif (sliced) {\n-\t\t\tList<CDateRange> featureRanges = null;\n-\t\t\tList<CDateRange> outcomeRanges = null;\n \n-\t\t\tswitch(timeUnit) {\n-\t\t\t\tcase DAYS:\n-\t\t\t\t\tfeatureRanges = featureRange.getCoveredDays();\n-\t\t\t\t\toutcomeRanges = outcomeRange.getCoveredDays();\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase QUARTERS:\n-\t\t\t\t\tfeatureRanges = featureRange.getCoveredQuarters();\n-\t\t\t\t\toutcomeRanges = outcomeRange.getCoveredQuarters();\n-\t\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t\tthrow new IllegalArgumentException(\"Resolution \" + timeUnit + \" not supported.\");\t\t\t\t\n-\t\t\t}\n-\n-\t\t\tint numRanges = featureRanges.size();\n-\t\t\tint idx = indexPlacement.equals(IndexPlacement.BEFORE) ? numRanges - 1 : numRanges;\n-\t\t\tfor (CDateRange range : featureRanges) {\n-\t\t\t\tdcl.add(new DateContext(range, FeatureGroup.FEATURE, -idx, CDate.toLocalDate(event)));\n-\t\t\t\tidx--;\n+\t\tfor(DateContextMode mode : subdivisionModes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768"}, "originalPosition": 138}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b543236737aeaca660d5cb61e553d26a2c4d8fb1", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/b543236737aeaca660d5cb61e553d26a2c4d8fb1", "committedDate": "2020-03-19T15:30:21Z", "message": "rework localization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19550e28ab3fd96fc330a83a80fcb8fe93152683", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/19550e28ab3fd96fc330a83a80fcb8fe93152683", "committedDate": "2020-03-19T15:30:30Z", "message": "Merge b543236737aeaca660d5cb61e553d26a2c4d8fb1 into 9e15df05b6450e90fd106c59a69affe4ba1dd620"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e", "author": {"user": {"login": "bakdata-bot", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/ff9334f8d4c06558c536b691f03fa7a3b4da7d3e", "committedDate": "2020-03-19T15:32:33Z", "message": "automatic update to docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3ODc1NTk0", "url": "https://github.com/bakdata/conquery/pull/1064#pullrequestreview-377875594", "createdAt": "2020-03-19T16:14:17Z", "commit": {"oid": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjoxNDoxN1rOF414iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjoyMDozNVrOF42J-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0NzQwMA==", "bodyText": "With a complex if condition like this, it's always useful to extract the entire condition into a variable (or function) to give it a name that explains it", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395147400", "createdAt": "2020-03-19T16:14:17Z", "author": {"login": "Kadrian"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java", "diffHunk": "@@ -66,22 +67,37 @@ public EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n \t\t// We look at the first result line to determine the length of the subresult\n \t\tint featureLength = featureResult.getValues().get(0).length;\n \t\tint outcomeLength = outcomeResult.getValues().get(0).length;\n-\t\t// Whole result is the concatenation of the subresults. However the sub result includes the date restriction which we drop.\n-\t\tint size = featureLength + outcomeLength - 2;\n-\n-\t\t// merge the full (index == null) lines\n-\t\tObject[] mergedFull = new Object[size];\n-\t\tsetFeatureValues(mergedFull, featureResult.getValues().get(0));\n-\t\tsetOutcomeValues(mergedFull, outcomeResult.getValues().get(0), featureLength);\n-\t\tvalues.add(mergedFull);\n+\t\t\n+\t\t/*\n+\t\t *  Whole result is the concatenation of the subresults. The final output format combines resolution info, index and eventdate of both sub queries.\n+\t\t *  The feature/outcome sub queries are of in form of: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE/OUTCOME_DR], [FEATURE/OUTCOME_SELECTS]... \n+\t\t *  The wanted format is: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE_DR], [OUTCOME_DR], [FEATURE_SELECTS]... , [OUTCOME_SELECTS]\n+\t\t */\n+\t\tint size = featureLength + outcomeLength - 3/*= [RESOLUTION], [INDEX], [EVENTDATE]*/;\n+\n+\t\tint resultStartIndex = 0;\n+\t\tif(contexts.size()>=2\n+\t\t\t&& contexts.get(0).getSubdivisionMode().equals(DateContextMode.COMPLETE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0ODUwMg==", "bodyText": "It's good to explain this. Would even be better if things like these would be documented in the code itself. So could this e.g. a special type / class / enum?", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395148502", "createdAt": "2020-03-19T16:15:49Z", "author": {"login": "Kadrian"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java", "diffHunk": "@@ -66,22 +67,37 @@ public EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n \t\t// We look at the first result line to determine the length of the subresult\n \t\tint featureLength = featureResult.getValues().get(0).length;\n \t\tint outcomeLength = outcomeResult.getValues().get(0).length;\n-\t\t// Whole result is the concatenation of the subresults. However the sub result includes the date restriction which we drop.\n-\t\tint size = featureLength + outcomeLength - 2;\n-\n-\t\t// merge the full (index == null) lines\n-\t\tObject[] mergedFull = new Object[size];\n-\t\tsetFeatureValues(mergedFull, featureResult.getValues().get(0));\n-\t\tsetOutcomeValues(mergedFull, outcomeResult.getValues().get(0), featureLength);\n-\t\tvalues.add(mergedFull);\n+\t\t\n+\t\t/*\n+\t\t *  Whole result is the concatenation of the subresults. The final output format combines resolution info, index and eventdate of both sub queries.\n+\t\t *  The feature/outcome sub queries are of in form of: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE/OUTCOME_DR], [FEATURE/OUTCOME_SELECTS]... ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0OTgzNw==", "bodyText": "Agree with @awildturtok here, these numbers are quite magic, an enum would make this a lot easier to understand", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395149837", "createdAt": "2020-03-19T16:17:40Z", "author": {"login": "Kadrian"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java", "diffHunk": "@@ -99,24 +115,24 @@ private SubResult executeSubQuery(QueryExecutionContext ctx, FeatureGroup featur\n \t\treturn new SubResult((MultilineContainedEntityResult) sub.execute(ctx, entity));\n \t}\n \n-\tprivate void setOutcomeValues(Object[] result, Object[] value, int featureLength) {\n+\tprivate void setFeatureValues(Object[] result, Object[] value) {\n \t\t// copy everything up to including index\n-\t\tfor (int i = 0; i < 2; i++) {\n+\t\tfor (int i = 0; i < 3; i++) {\n \t\t\tresult[i] = value[i];\n \t\t}\n \t\t// copy daterange\n-\t\tresult[3] = value[2];\n-\t\tSystem.arraycopy(value, 3, result, 1 + featureLength, value.length - 3);\n+\t\tresult[3] = value[3];\n+\t\tSystem.arraycopy(value, 4, result, 5, value.length - 4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1MDkwMA==", "bodyText": "Uh, ternary works even without a space in front of the question mark?", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395150900", "createdAt": "2020-03-19T16:19:11Z", "author": {"login": "Kadrian"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java", "diffHunk": "@@ -121,53 +116,50 @@\n \t * @param timeUnit\n \t * @return\n \t */\n-\tpublic static List<DateContext> generateRelativeContexts(int event, IndexPlacement indexPlacement, int featureTime,\n-\t\t\tint outcomeTime, boolean sliced, TimeUnit timeUnit) {\n+\tpublic static List<DateContext> generateRelativeContexts(int event, IndexPlacement indexPlacement, int featureTime,\tint outcomeTime, DateContextMode timeUnit, List<DateContextMode> subdivisionModes) {\n \t\tif (featureTime < 1 || outcomeTime < 1) {\n \t\t\tthrow new IllegalArgumentException(\"Relative times were smaller than 1 (featureTime: \" + featureTime\n \t\t\t\t\t+ \"; outcomeTime: \" + outcomeTime + \")\");\n \t\t}\n-\t\tList<DateContext> dcl = new ArrayList<>();\n+\t\tList<DateContext> dcList = new ArrayList<>();\n+\t\t\n+\t\tLocalDate eventdate = CDate.toLocalDate(event);\n \n \t\tCDateRange featureRange = generateFeatureRange(event, indexPlacement, featureTime, timeUnit);\n \t\tCDateRange outcomeRange = generateOutcomeRange(event, indexPlacement, outcomeTime, timeUnit);\n \n-\t\tdcl.add(new DateContext(featureRange, FeatureGroup.FEATURE, null, CDate.toLocalDate(event)));\n-\t\tdcl.add(new DateContext(outcomeRange, FeatureGroup.OUTCOME, null, CDate.toLocalDate(event)));\n-\n-\t\tif (sliced) {\n-\t\t\tList<CDateRange> featureRanges = null;\n-\t\t\tList<CDateRange> outcomeRanges = null;\n \n-\t\t\tswitch(timeUnit) {\n-\t\t\t\tcase DAYS:\n-\t\t\t\t\tfeatureRanges = featureRange.getCoveredDays();\n-\t\t\t\t\toutcomeRanges = outcomeRange.getCoveredDays();\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase QUARTERS:\n-\t\t\t\t\tfeatureRanges = featureRange.getCoveredQuarters();\n-\t\t\t\t\toutcomeRanges = outcomeRange.getCoveredQuarters();\n-\t\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t\tthrow new IllegalArgumentException(\"Resolution \" + timeUnit + \" not supported.\");\t\t\t\t\n-\t\t\t}\n-\n-\t\t\tint numRanges = featureRanges.size();\n-\t\t\tint idx = indexPlacement.equals(IndexPlacement.BEFORE) ? numRanges - 1 : numRanges;\n-\t\t\tfor (CDateRange range : featureRanges) {\n-\t\t\t\tdcl.add(new DateContext(range, FeatureGroup.FEATURE, -idx, CDate.toLocalDate(event)));\n-\t\t\t\tidx--;\n+\t\tfor(DateContextMode mode : subdivisionModes) {\n+\t\t\tList<CDateRange> featureRanges = mode.subdivideRange(featureRange);\n+\t\t\tint index = indexPlacement.equals(IndexPlacement.BEFORE) ? featureRanges.size() - 1 : featureRanges.size();\n+\t\t\tfor (CDateRange subRange : featureRanges) {\n+\t\t\t\tDateContext dc = new DateContext(\n+\t\t\t\t\tsubRange,\n+\t\t\t\t\tFeatureGroup.FEATURE,\n+\t\t\t\t\t// For now there is no index for complete\n+\t\t\t\t\tmode.equals(DateContextMode.COMPLETE)? null : -index,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1MTg2NA==", "bodyText": "Hmm. This change shouldn't be part of your PR I guess ;-)", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395151864", "createdAt": "2020-03-19T16:20:35Z", "author": {"login": "Kadrian"}, "path": "frontend/yarn.lock", "diffHunk": "@@ -1938,16 +1938,11 @@ acorn-walk@^6.0.1:\n   resolved \"https://registry.yarnpkg.com/acorn-walk/-/acorn-walk-6.2.0.tgz#123cb8f3b84c2171f1f7fb252615b1c78a6b1a8c\"\n   integrity sha512-7evsyfH1cLOCdAzZAd43Cic04yKydNx0cF+7tiA19p1XnLLPU4dpCQOqpjqwokFe//vS0QqfqqjCS2JkiIs0cA==\n \n-acorn@^6.0.1:\n+acorn@^6.0.1, acorn@^6.2.1:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0a444fbd23fc8a7c40683671f790bf4b7f75a6b", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/e0a444fbd23fc8a7c40683671f790bf4b7f75a6b", "committedDate": "2020-03-19T16:43:06Z", "message": "adds validation to form"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9a79e9d9ad5e632e26d1fec841b822ea687da52", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/f9a79e9d9ad5e632e26d1fec841b822ea687da52", "committedDate": "2020-03-19T16:43:34Z", "message": "adds doku and clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aa87d3d62ed152283e94ffb098e794b913bcd53", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/0aa87d3d62ed152283e94ffb098e794b913bcd53", "committedDate": "2020-03-19T16:43:50Z", "message": "Merge branch 'feature/export-form-optional-quarters' of https://github.com/bakdata/conquery into feature/export-form-optional-quarters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc66f89489e10eda7c444b3a20ee1b477ee12319", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/cc66f89489e10eda7c444b3a20ee1b477ee12319", "committedDate": "2020-03-19T16:44:08Z", "message": "Merge 0aa87d3d62ed152283e94ffb098e794b913bcd53 into 9e15df05b6450e90fd106c59a69affe4ba1dd620"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "924bb83ec3b6ef644cbd2835870a1babfd3402bf", "author": {"user": {"login": "bakdata-bot", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/924bb83ec3b6ef644cbd2835870a1babfd3402bf", "committedDate": "2020-03-19T16:45:50Z", "message": "automatic update to docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "354c90a9b6bf89b0ac0490498e34100aaef8f26d", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/354c90a9b6bf89b0ac0490498e34100aaef8f26d", "committedDate": "2020-03-19T17:11:02Z", "message": "fix date context mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55e006de9b8a59cd8a231da9416675ea1b990860", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/55e006de9b8a59cd8a231da9416675ea1b990860", "committedDate": "2020-03-19T17:27:57Z", "message": "init internationalization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88a6b7479a456657c2844e75f9a6142b1d3763c9", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/88a6b7479a456657c2844e75f9a6142b1d3763c9", "committedDate": "2020-03-19T17:30:58Z", "message": "use constants for better documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d4a0de20bbcb10e983096c92b17027319d6936b", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/3d4a0de20bbcb10e983096c92b17027319d6936b", "committedDate": "2020-03-19T17:31:09Z", "message": "Merge branch 'feature/export-form-optional-quarters' of https://github.com/bakdata/conquery into feature/export-form-optional-quarters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2932da6ea68f979d1e396e68ce1598f6afb0d4d8", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/2932da6ea68f979d1e396e68ce1598f6afb0d4d8", "committedDate": "2020-03-20T04:08:50Z", "message": "Fix copy index"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13d1b7d3366695cafa0309b7b0975c620502d8a6", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/13d1b7d3366695cafa0309b7b0975c620502d8a6", "committedDate": "2020-03-20T04:11:52Z", "message": "Revert \"adds validation to form\"\n\nThis reverts commit e0a444fbd23fc8a7c40683671f790bf4b7f75a6b."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72368477c90551f2506bbfff66252802302ee269", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/72368477c90551f2506bbfff66252802302ee269", "committedDate": "2020-03-20T04:12:10Z", "message": "Merge 13d1b7d3366695cafa0309b7b0975c620502d8a6 into 9e15df05b6450e90fd106c59a69affe4ba1dd620"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ca3919f3646e7842350d033afee870caf8e1db1", "author": {"user": {"login": "bakdata-bot", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/5ca3919f3646e7842350d033afee870caf8e1db1", "committedDate": "2020-03-20T04:14:12Z", "message": "automatic update to docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NDYyNDgz", "url": "https://github.com/bakdata/conquery/pull/1064#pullrequestreview-378462483", "createdAt": "2020-03-20T13:03:43Z", "commit": {"oid": "5ca3919f3646e7842350d033afee870caf8e1db1"}, "state": "DISMISSED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzowMzo0M1rOF5SzJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzowNjowOFrOF5S39Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyMTE1OA==", "bodyText": "Du kannst in einem enum auch abstrakte Methoden machen", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395621158", "createdAt": "2020-03-20T13:03:43Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,115 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import c10n.C10N;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import lombok.RequiredArgsConstructor;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n+@RequiredArgsConstructor\n public enum DateContextMode {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE(null){\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn List.of(range);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString(Locale locale) {\n+\t\t\treturn C10N.get(DateContextModeC10n.class, locale).complete();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * years.\n \t */\n-\tYEAR_WISE,\n+\tYEARS(COMPLETE){\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredYears();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString(Locale locale) {\n+\t\t\treturn C10N.get(DateContextModeC10n.class, locale).year();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * quarters.\n \t */\n-\tQUARTER_WISE;\n+\tQUARTERS(YEARS){\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredQuarters();\n+\t\t}\n+\t\t\n+\n+\t\t@Override\n+\t\tpublic String toString(Locale locale) {\n+\t\t\treturn C10N.get(DateContextModeC10n.class, locale).quarter();\n+\t\t}\n+\t},\n+\t\n+\t/**\n+\t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n+\t * days.\n+\t */\n+\tDAYS(QUARTERS){\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredDays();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString(Locale locale) {\n+\t\t\treturn C10N.get(DateContextModeC10n.class, locale).day();\n+\t\t}\n+\t};\n+\t\n+\t@JsonIgnore\n+\tprivate final DateContextMode coarser;\n+\n+\n+\tprivate List<DateContextMode> thisAndCoarserSubdivisions;\n+\n+\t\n+\t@JsonIgnore\n+\tpublic List<DateContextMode> getThisAndCoarserSubdivisions(){\n+\t\tif (thisAndCoarserSubdivisions != null) {\n+\t\t\treturn thisAndCoarserSubdivisions;\n+\t\t}\n+\t\tList<DateContextMode> thisAndCoarser = new ArrayList<>();\n+\t\tif(coarser != null) {\n+\t\t\tthisAndCoarser.addAll(coarser.getThisAndCoarserSubdivisions());\n+\t\t}\n+\t\tthisAndCoarser.add(this);\n+\t\treturn thisAndCoarserSubdivisions = Collections.unmodifiableList(thisAndCoarser);\n+\t\t\n+\t}\n+\t\t\n+\n+\tpublic List<CDateRange> subdivideRange(CDateRange range){\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\tpublic String toString(Locale locale) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca3919f3646e7842350d033afee870caf8e1db1"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyMTg1NA==", "bodyText": "Doku", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395621854", "createdAt": "2020-03-20T13:05:08Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/jersey/LocaleFilter.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.bakdata.conquery.io.jersey;\n+\n+import java.io.IOException;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+\n+import com.bakdata.conquery.models.i18n.I18n;\n+\n+\n+public class LocaleFilter implements ContainerRequestFilter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca3919f3646e7842350d033afee870caf8e1db1"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyMjM4OQ==", "bodyText": "e noch als cause?", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395622389", "createdAt": "2020-03-20T13:06:08Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/externalservice/ResultType.java", "diffHunk": "@@ -37,12 +36,24 @@ public String print(PrintSettings cfg, Object f) {\n \t\t\tif(cfg.isPrettyPrint()) {\n \t\t\t\treturn DECIMAL_FORMAT.format(f);\n \t\t\t}\n-\t\t\telse {\n-\t\t\t\treturn f.toString();\n-\t\t\t}\n+\t\t\treturn f.toString();\n \t\t}\n \t},\n \tCATEGORICAL,\n+\tRESOLUTION {\n+\t\t@Override\n+\t\tpublic String print(PrintSettings cfg, Object f) {\n+\t\t\tif(f instanceof DateContextMode) {\n+\t\t\t\treturn ((DateContextMode)f).toString(cfg.getLocale());\n+\t\t\t}\n+\t\t\ttry {\n+\t\t\t\t// If the object was parsed as a simple string, try to convert it to a DateContextMode to get Internationalization\n+\t\t\t\treturn DateContextMode.valueOf(f.toString()).toString(cfg.getLocale());\t\t\t\t\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tthrow new IllegalArgumentException(f+ \" is not a valid resolution\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca3919f3646e7842350d033afee870caf8e1db1"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63e6c7440c558dd261a88a8c73e4b72e46a4e8e4", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/63e6c7440c558dd261a88a8c73e4b72e46a4e8e4", "committedDate": "2020-03-23T12:19:23Z", "message": "review fixes cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b8c98cd1b3e359667164abdd8c2a88212c86e27", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/3b8c98cd1b3e359667164abdd8c2a88212c86e27", "committedDate": "2020-03-23T12:26:32Z", "message": "Merge branch 'develop' into feature/export-form-optional-quarters\n\n# Conflicts:\n#\tbackend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java\n#\tbackend/src/main/java/com/bakdata/conquery/apiv1/forms/export_form/AbsoluteMode.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java\n#\tbackend/src/test/java/com/bakdata/conquery/models/forms/DateContextTest.java\n#\tdocs/REST API JSONs.md"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4639, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}