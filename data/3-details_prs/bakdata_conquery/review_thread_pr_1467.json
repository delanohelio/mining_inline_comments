{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMTQ1MDI4", "number": 1467, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoyMDo0MVrOFADZsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODozNDo0N1rOFAEQGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NjAwMDQ4OnYy", "diffSide": "RIGHT", "path": ".gitignore", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoyMDo0MVrOH-Hf2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoyMDo0MVrOH-Hf2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg5NjYwMA==", "bodyText": "d\u00e4nks!", "url": "https://github.com/bakdata/conquery/pull/1467#discussion_r534896600", "createdAt": "2020-12-03T08:20:41Z", "author": {"login": "awildturtok"}, "path": ".gitignore", "diffHunk": "@@ -61,4 +61,5 @@ nbactions.xml\n \n **/.iml\n **/.idea\n-/storage/\n\\ No newline at end of file\n+/storage/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4ab28ec806a8e7300f1d5e2dee85552e5b83e3a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NjAxNDA2OnYy", "diffSide": "LEFT", "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/CachedStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoyMjowMlrOH-HpBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwOTo0ODo1NFrOH-PRfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg5ODk0OA==", "bodyText": "Dann wenigstens als implNote", "url": "https://github.com/bakdata/conquery/pull/1467#discussion_r534898948", "createdAt": "2020-12-03T08:22:02Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/CachedStore.java", "diffHunk": "@@ -32,7 +32,6 @@ public void add(KEY key, VALUE value) throws JSONException {\n \n \t@Override\n \tpublic VALUE get(KEY key) {\n-\t\t// TODO: 08.01.2020 fk: This assumes that all values have been read at some point!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4ab28ec806a8e7300f1d5e2dee85552e5b83e3a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAyMzk5Ng==", "bodyText": "Das hatte ich ausversehen gel\u00f6scht, weil ich da rum gespielt hatte. Ich mache es wieder rein", "url": "https://github.com/bakdata/conquery/pull/1467#discussion_r535023996", "createdAt": "2020-12-03T09:48:54Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/io/xodus/stores/CachedStore.java", "diffHunk": "@@ -32,7 +32,6 @@ public void add(KEY key, VALUE value) throws JSONException {\n \n \t@Override\n \tpublic VALUE get(KEY key) {\n-\t\t// TODO: 08.01.2020 fk: This assumes that all values have been read at some point!", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg5ODk0OA=="}, "originalCommit": {"oid": "c4ab28ec806a8e7300f1d5e2dee85552e5b83e3a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NjA0MDc2OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ReportConsistency.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoyNDo0M1rOH-H7Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwOTo1MDoxM1rOH-PXeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkwMzU4Ng==", "bodyText": "der Name ist falsch; du kannst damit ja alles vergleichen?", "url": "https://github.com/bakdata/conquery/pull/1467#discussion_r534903586", "createdAt": "2020-12-03T08:24:43Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ReportConsistency.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.bakdata.conquery.models.messages.namespaces.specific;\n+\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.datasets.Import;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.BucketId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ImportId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.WorkerId;\n+import com.bakdata.conquery.models.messages.namespaces.NamespaceMessage;\n+import com.bakdata.conquery.models.messages.namespaces.NamespacedMessage;\n+import com.bakdata.conquery.models.worker.Namespace;\n+import com.google.common.collect.Sets;\n+import lombok.*;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Compares the the ids of imports and buckets of a {@link com.bakdata.conquery.models.worker.Worker} with the those\n+ * the {@link com.bakdata.conquery.commands.ManagerNode} assumed the Worker to have and reports an error if there are\n+ * inconsistencies.\n+ */\n+@CPSType(id=\"REPORT_CONSISTENCY\", base= NamespacedMessage.class)\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Setter\n+@Getter\n+@Slf4j\n+public class ReportConsistency extends NamespaceMessage {\n+\n+    private WorkerId workerId;\n+    // Set default here because an empty set send by the worker is not set (it is null) after deserialization\n+    private Set<ImportId> workerImports = Set.of();\n+    private Set<BucketId> workerBuckets = Set.of();\n+\n+\n+    @Override\n+    public void react(Namespace context) throws Exception {\n+        Set<ImportId> managerImports = context.getStorage().getAllImports().stream().map(Import::getId).collect(Collectors.toSet());\n+\n+        Set<BucketId> assignedWorkerBuckets = context.getBucketsForWorker(workerId);\n+\n+        boolean importsOkay = isImportsConsistent(\"Imports\", managerImports, workerImports, workerId);\n+        boolean bucketsOkay = isImportsConsistent(\"Buckets\", assignedWorkerBuckets, workerBuckets, workerId);\n+\n+        log.trace(\"Imports on worker[{}}: {}\", workerId, workerImports);\n+        log.trace(\"Buckets on worker[{}}: {}\", workerId, workerBuckets);\n+\n+        if (importsOkay && bucketsOkay) {\n+            log.info(\"Consistency check was successful\");\n+            return;\n+        }\n+        throw new IllegalStateException(\"Detected inconsistency between manager and worker [\" + workerId + \"]\");\n+    }\n+\n+    private static <ID extends IId<?>> boolean isImportsConsistent(String typeName, @NonNull Set<ID> managerIds, @NonNull Set<ID> workerIds, WorkerId workerId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4ab28ec806a8e7300f1d5e2dee85552e5b83e3a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAyNTUyOQ==", "bodyText": "Ah danke, hatte es erst speziell f\u00fcr imports gemacht", "url": "https://github.com/bakdata/conquery/pull/1467#discussion_r535025529", "createdAt": "2020-12-03T09:50:13Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ReportConsistency.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.bakdata.conquery.models.messages.namespaces.specific;\n+\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.datasets.Import;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.BucketId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ImportId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.WorkerId;\n+import com.bakdata.conquery.models.messages.namespaces.NamespaceMessage;\n+import com.bakdata.conquery.models.messages.namespaces.NamespacedMessage;\n+import com.bakdata.conquery.models.worker.Namespace;\n+import com.google.common.collect.Sets;\n+import lombok.*;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Compares the the ids of imports and buckets of a {@link com.bakdata.conquery.models.worker.Worker} with the those\n+ * the {@link com.bakdata.conquery.commands.ManagerNode} assumed the Worker to have and reports an error if there are\n+ * inconsistencies.\n+ */\n+@CPSType(id=\"REPORT_CONSISTENCY\", base= NamespacedMessage.class)\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Setter\n+@Getter\n+@Slf4j\n+public class ReportConsistency extends NamespaceMessage {\n+\n+    private WorkerId workerId;\n+    // Set default here because an empty set send by the worker is not set (it is null) after deserialization\n+    private Set<ImportId> workerImports = Set.of();\n+    private Set<BucketId> workerBuckets = Set.of();\n+\n+\n+    @Override\n+    public void react(Namespace context) throws Exception {\n+        Set<ImportId> managerImports = context.getStorage().getAllImports().stream().map(Import::getId).collect(Collectors.toSet());\n+\n+        Set<BucketId> assignedWorkerBuckets = context.getBucketsForWorker(workerId);\n+\n+        boolean importsOkay = isImportsConsistent(\"Imports\", managerImports, workerImports, workerId);\n+        boolean bucketsOkay = isImportsConsistent(\"Buckets\", assignedWorkerBuckets, workerBuckets, workerId);\n+\n+        log.trace(\"Imports on worker[{}}: {}\", workerId, workerImports);\n+        log.trace(\"Buckets on worker[{}}: {}\", workerId, workerBuckets);\n+\n+        if (importsOkay && bucketsOkay) {\n+            log.info(\"Consistency check was successful\");\n+            return;\n+        }\n+        throw new IllegalStateException(\"Detected inconsistency between manager and worker [\" + workerId + \"]\");\n+    }\n+\n+    private static <ID extends IId<?>> boolean isImportsConsistent(String typeName, @NonNull Set<ID> managerIds, @NonNull Set<ID> workerIds, WorkerId workerId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkwMzU4Ng=="}, "originalCommit": {"oid": "c4ab28ec806a8e7300f1d5e2dee85552e5b83e3a"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NjA1MDYzOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ReportConsistency.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoyNTozOVrOH-IBzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoyNTozOVrOH-IBzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkwNTI5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    sb.append(\"Found inconsistencies for\").append(typeName).append(\":\\n\");\n          \n          \n            \n                    sb.append(\"Found inconsistencies for \").append(typeName).append(\":\\n\");", "url": "https://github.com/bakdata/conquery/pull/1467#discussion_r534905294", "createdAt": "2020-12-03T08:25:39Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ReportConsistency.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.bakdata.conquery.models.messages.namespaces.specific;\n+\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.datasets.Import;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.BucketId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ImportId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.WorkerId;\n+import com.bakdata.conquery.models.messages.namespaces.NamespaceMessage;\n+import com.bakdata.conquery.models.messages.namespaces.NamespacedMessage;\n+import com.bakdata.conquery.models.worker.Namespace;\n+import com.google.common.collect.Sets;\n+import lombok.*;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Compares the the ids of imports and buckets of a {@link com.bakdata.conquery.models.worker.Worker} with the those\n+ * the {@link com.bakdata.conquery.commands.ManagerNode} assumed the Worker to have and reports an error if there are\n+ * inconsistencies.\n+ */\n+@CPSType(id=\"REPORT_CONSISTENCY\", base= NamespacedMessage.class)\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Setter\n+@Getter\n+@Slf4j\n+public class ReportConsistency extends NamespaceMessage {\n+\n+    private WorkerId workerId;\n+    // Set default here because an empty set send by the worker is not set (it is null) after deserialization\n+    private Set<ImportId> workerImports = Set.of();\n+    private Set<BucketId> workerBuckets = Set.of();\n+\n+\n+    @Override\n+    public void react(Namespace context) throws Exception {\n+        Set<ImportId> managerImports = context.getStorage().getAllImports().stream().map(Import::getId).collect(Collectors.toSet());\n+\n+        Set<BucketId> assignedWorkerBuckets = context.getBucketsForWorker(workerId);\n+\n+        boolean importsOkay = isImportsConsistent(\"Imports\", managerImports, workerImports, workerId);\n+        boolean bucketsOkay = isImportsConsistent(\"Buckets\", assignedWorkerBuckets, workerBuckets, workerId);\n+\n+        log.trace(\"Imports on worker[{}}: {}\", workerId, workerImports);\n+        log.trace(\"Buckets on worker[{}}: {}\", workerId, workerBuckets);\n+\n+        if (importsOkay && bucketsOkay) {\n+            log.info(\"Consistency check was successful\");\n+            return;\n+        }\n+        throw new IllegalStateException(\"Detected inconsistency between manager and worker [\" + workerId + \"]\");\n+    }\n+\n+    private static <ID extends IId<?>> boolean isImportsConsistent(String typeName, @NonNull Set<ID> managerIds, @NonNull Set<ID> workerIds, WorkerId workerId) {\n+        Sets.SetView<ID> notInWorker = Sets.difference(managerIds, workerIds);\n+        Sets.SetView<ID> notInManager = Sets.difference(workerIds, managerIds);\n+\n+        if (notInWorker.isEmpty() && notInManager.isEmpty()) {\n+            log.info(\"{} of worker {} are consistent with the imports of the manager.\", typeName, workerId);\n+            return true;\n+        }\n+\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"Found inconsistencies for\").append(typeName).append(\":\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4ab28ec806a8e7300f1d5e2dee85552e5b83e3a"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NjA2NTg3OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ReportConsistency.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoyNzowN1rOH-IMYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwOTo1NDo1NVrOH-Psgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkwODAwMA==", "bodyText": "Ich wei\u00df, dass du das bevorzugst StringBuilder zu benutzen, und dann auf einmal zu loggen, das Problem ist dann aber, dass nicht alle Zeilen prependet sind mit ERROR, was ich sehr praktisch finde in less / grep", "url": "https://github.com/bakdata/conquery/pull/1467#discussion_r534908000", "createdAt": "2020-12-03T08:27:07Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ReportConsistency.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.bakdata.conquery.models.messages.namespaces.specific;\n+\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.datasets.Import;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.BucketId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ImportId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.WorkerId;\n+import com.bakdata.conquery.models.messages.namespaces.NamespaceMessage;\n+import com.bakdata.conquery.models.messages.namespaces.NamespacedMessage;\n+import com.bakdata.conquery.models.worker.Namespace;\n+import com.google.common.collect.Sets;\n+import lombok.*;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Compares the the ids of imports and buckets of a {@link com.bakdata.conquery.models.worker.Worker} with the those\n+ * the {@link com.bakdata.conquery.commands.ManagerNode} assumed the Worker to have and reports an error if there are\n+ * inconsistencies.\n+ */\n+@CPSType(id=\"REPORT_CONSISTENCY\", base= NamespacedMessage.class)\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Setter\n+@Getter\n+@Slf4j\n+public class ReportConsistency extends NamespaceMessage {\n+\n+    private WorkerId workerId;\n+    // Set default here because an empty set send by the worker is not set (it is null) after deserialization\n+    private Set<ImportId> workerImports = Set.of();\n+    private Set<BucketId> workerBuckets = Set.of();\n+\n+\n+    @Override\n+    public void react(Namespace context) throws Exception {\n+        Set<ImportId> managerImports = context.getStorage().getAllImports().stream().map(Import::getId).collect(Collectors.toSet());\n+\n+        Set<BucketId> assignedWorkerBuckets = context.getBucketsForWorker(workerId);\n+\n+        boolean importsOkay = isImportsConsistent(\"Imports\", managerImports, workerImports, workerId);\n+        boolean bucketsOkay = isImportsConsistent(\"Buckets\", assignedWorkerBuckets, workerBuckets, workerId);\n+\n+        log.trace(\"Imports on worker[{}}: {}\", workerId, workerImports);\n+        log.trace(\"Buckets on worker[{}}: {}\", workerId, workerBuckets);\n+\n+        if (importsOkay && bucketsOkay) {\n+            log.info(\"Consistency check was successful\");\n+            return;\n+        }\n+        throw new IllegalStateException(\"Detected inconsistency between manager and worker [\" + workerId + \"]\");\n+    }\n+\n+    private static <ID extends IId<?>> boolean isImportsConsistent(String typeName, @NonNull Set<ID> managerIds, @NonNull Set<ID> workerIds, WorkerId workerId) {\n+        Sets.SetView<ID> notInWorker = Sets.difference(managerIds, workerIds);\n+        Sets.SetView<ID> notInManager = Sets.difference(workerIds, managerIds);\n+\n+        if (notInWorker.isEmpty() && notInManager.isEmpty()) {\n+            log.info(\"{} of worker {} are consistent with the imports of the manager.\", typeName, workerId);\n+            return true;\n+        }\n+\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"Found inconsistencies for\").append(typeName).append(\":\\n\");\n+        for( ID difference : notInWorker) {\n+            sb.append(\"\\t[\").append(difference).append(\"] is not present on the worker but on the manager [\").append(workerId).append(\"].\\n\");\n+        }\n+        for( ID difference : notInManager) {\n+            sb.append(\"\\t[\").append(difference).append(\"] is not present on the manager but on the worker [\").append(workerId).append(\"].\\n\");\n+        }\n+\n+        log.error(sb.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4ab28ec806a8e7300f1d5e2dee85552e5b83e3a"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAzMDkxNQ==", "bodyText": "Kann ich verstehen. Da das aber als report gedacht ist m\u00f6chte ich alles an einem Platz haben um nicht zu \u00fcbersehen", "url": "https://github.com/bakdata/conquery/pull/1467#discussion_r535030915", "createdAt": "2020-12-03T09:54:55Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ReportConsistency.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.bakdata.conquery.models.messages.namespaces.specific;\n+\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.datasets.Import;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.BucketId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ImportId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.WorkerId;\n+import com.bakdata.conquery.models.messages.namespaces.NamespaceMessage;\n+import com.bakdata.conquery.models.messages.namespaces.NamespacedMessage;\n+import com.bakdata.conquery.models.worker.Namespace;\n+import com.google.common.collect.Sets;\n+import lombok.*;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Compares the the ids of imports and buckets of a {@link com.bakdata.conquery.models.worker.Worker} with the those\n+ * the {@link com.bakdata.conquery.commands.ManagerNode} assumed the Worker to have and reports an error if there are\n+ * inconsistencies.\n+ */\n+@CPSType(id=\"REPORT_CONSISTENCY\", base= NamespacedMessage.class)\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Setter\n+@Getter\n+@Slf4j\n+public class ReportConsistency extends NamespaceMessage {\n+\n+    private WorkerId workerId;\n+    // Set default here because an empty set send by the worker is not set (it is null) after deserialization\n+    private Set<ImportId> workerImports = Set.of();\n+    private Set<BucketId> workerBuckets = Set.of();\n+\n+\n+    @Override\n+    public void react(Namespace context) throws Exception {\n+        Set<ImportId> managerImports = context.getStorage().getAllImports().stream().map(Import::getId).collect(Collectors.toSet());\n+\n+        Set<BucketId> assignedWorkerBuckets = context.getBucketsForWorker(workerId);\n+\n+        boolean importsOkay = isImportsConsistent(\"Imports\", managerImports, workerImports, workerId);\n+        boolean bucketsOkay = isImportsConsistent(\"Buckets\", assignedWorkerBuckets, workerBuckets, workerId);\n+\n+        log.trace(\"Imports on worker[{}}: {}\", workerId, workerImports);\n+        log.trace(\"Buckets on worker[{}}: {}\", workerId, workerBuckets);\n+\n+        if (importsOkay && bucketsOkay) {\n+            log.info(\"Consistency check was successful\");\n+            return;\n+        }\n+        throw new IllegalStateException(\"Detected inconsistency between manager and worker [\" + workerId + \"]\");\n+    }\n+\n+    private static <ID extends IId<?>> boolean isImportsConsistent(String typeName, @NonNull Set<ID> managerIds, @NonNull Set<ID> workerIds, WorkerId workerId) {\n+        Sets.SetView<ID> notInWorker = Sets.difference(managerIds, workerIds);\n+        Sets.SetView<ID> notInManager = Sets.difference(workerIds, managerIds);\n+\n+        if (notInWorker.isEmpty() && notInManager.isEmpty()) {\n+            log.info(\"{} of worker {} are consistent with the imports of the manager.\", typeName, workerId);\n+            return true;\n+        }\n+\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"Found inconsistencies for\").append(typeName).append(\":\\n\");\n+        for( ID difference : notInWorker) {\n+            sb.append(\"\\t[\").append(difference).append(\"] is not present on the worker but on the manager [\").append(workerId).append(\"].\\n\");\n+        }\n+        for( ID difference : notInManager) {\n+            sb.append(\"\\t[\").append(difference).append(\"] is not present on the manager but on the worker [\").append(workerId).append(\"].\\n\");\n+        }\n+\n+        log.error(sb.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkwODAwMA=="}, "originalCommit": {"oid": "c4ab28ec806a8e7300f1d5e2dee85552e5b83e3a"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NjA5MzU4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/messages/network/specific/RegisterWorker.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoyOTo1M1rOH-If_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwOTo1OTo0OVrOH-QDvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkxMzAyMw==", "bodyText": "Kannst du einen Task machen, der das hier abschickt? Dann kann man das von au\u00dfen steuern", "url": "https://github.com/bakdata/conquery/pull/1467#discussion_r534913023", "createdAt": "2020-12-03T08:29:53Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/messages/network/specific/RegisterWorker.java", "diffHunk": "@@ -37,6 +38,9 @@ public void react(ManagerNodeNetworkContext context) throws Exception {\n \n \t\tinfo.setConnectedShardNode(node);\n \t\tcontext.getNamespaces().register(node, info);\n+\n+\t\t// Request consistency report\n+\t\tcontext.getNamespaces().getWorkers().get(info.getId()).send(new RequestConsistency());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4ab28ec806a8e7300f1d5e2dee85552e5b83e3a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkyMjI4Mw==", "bodyText": "ahja", "url": "https://github.com/bakdata/conquery/pull/1467#discussion_r534922283", "createdAt": "2020-12-03T08:35:20Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/messages/network/specific/RegisterWorker.java", "diffHunk": "@@ -37,6 +38,9 @@ public void react(ManagerNodeNetworkContext context) throws Exception {\n \n \t\tinfo.setConnectedShardNode(node);\n \t\tcontext.getNamespaces().register(node, info);\n+\n+\t\t// Request consistency report\n+\t\tcontext.getNamespaces().getWorkers().get(info.getId()).send(new RequestConsistency());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkxMzAyMw=="}, "originalCommit": {"oid": "c4ab28ec806a8e7300f1d5e2dee85552e5b83e3a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkyMjQyNA==", "bodyText": "see below", "url": "https://github.com/bakdata/conquery/pull/1467#discussion_r534922424", "createdAt": "2020-12-03T08:35:27Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/messages/network/specific/RegisterWorker.java", "diffHunk": "@@ -37,6 +38,9 @@ public void react(ManagerNodeNetworkContext context) throws Exception {\n \n \t\tinfo.setConnectedShardNode(node);\n \t\tcontext.getNamespaces().register(node, info);\n+\n+\t\t// Request consistency report\n+\t\tcontext.getNamespaces().getWorkers().get(info.getId()).send(new RequestConsistency());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkxMzAyMw=="}, "originalCommit": {"oid": "c4ab28ec806a8e7300f1d5e2dee85552e5b83e3a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAyOTAwMQ==", "bodyText": "Den Task gibt es schon", "url": "https://github.com/bakdata/conquery/pull/1467#discussion_r535029001", "createdAt": "2020-12-03T09:53:18Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/messages/network/specific/RegisterWorker.java", "diffHunk": "@@ -37,6 +38,9 @@ public void react(ManagerNodeNetworkContext context) throws Exception {\n \n \t\tinfo.setConnectedShardNode(node);\n \t\tcontext.getNamespaces().register(node, info);\n+\n+\t\t// Request consistency report\n+\t\tcontext.getNamespaces().getWorkers().get(info.getId()).send(new RequestConsistency());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkxMzAyMw=="}, "originalCommit": {"oid": "c4ab28ec806a8e7300f1d5e2dee85552e5b83e3a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAzNjg2MQ==", "bodyText": "backend/src/main/java/com/bakdata/conquery/tasks/ReportConsistencyTask.java", "url": "https://github.com/bakdata/conquery/pull/1467#discussion_r535036861", "createdAt": "2020-12-03T09:59:49Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/messages/network/specific/RegisterWorker.java", "diffHunk": "@@ -37,6 +38,9 @@ public void react(ManagerNodeNetworkContext context) throws Exception {\n \n \t\tinfo.setConnectedShardNode(node);\n \t\tcontext.getNamespaces().register(node, info);\n+\n+\t\t// Request consistency report\n+\t\tcontext.getNamespaces().getWorkers().get(info.getId()).send(new RequestConsistency());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkxMzAyMw=="}, "originalCommit": {"oid": "c4ab28ec806a8e7300f1d5e2dee85552e5b83e3a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NjEzOTc2OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/worker/WorkerToBucketsMap.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODozNDo0N1rOH-JAjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwOTo1ODoxOVrOH-P89g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkyMTM1Nw==", "bodyText": "wenn du einen AllArgsConstructor machst, brauchst du den Setter nicht", "url": "https://github.com/bakdata/conquery/pull/1467#discussion_r534921357", "createdAt": "2020-12-03T08:34:47Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/worker/WorkerToBucketsMap.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.bakdata.conquery.models.worker;\n+\n+import com.bakdata.conquery.models.identifiable.ids.specific.BucketId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.WorkerId;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Setter;\n+\n+import java.util.*;\n+\n+@Getter\n+@Setter\n+public class WorkerToBucketsMap {\n+    private Map<WorkerId, Set<BucketId>> map = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4ab28ec806a8e7300f1d5e2dee85552e5b83e3a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkyMTgwNg==", "bodyText": "Und der Getter k\u00f6nnte auch komisch sein?", "url": "https://github.com/bakdata/conquery/pull/1467#discussion_r534921806", "createdAt": "2020-12-03T08:35:02Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/worker/WorkerToBucketsMap.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.bakdata.conquery.models.worker;\n+\n+import com.bakdata.conquery.models.identifiable.ids.specific.BucketId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.WorkerId;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Setter;\n+\n+import java.util.*;\n+\n+@Getter\n+@Setter\n+public class WorkerToBucketsMap {\n+    private Map<WorkerId, Set<BucketId>> map = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkyMTM1Nw=="}, "originalCommit": {"oid": "c4ab28ec806a8e7300f1d5e2dee85552e5b83e3a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAzNTEyNg==", "bodyText": "Okay ich habe es annotiert:\n@AllArgsConstructor(onConstructor = @__({@JsonCreator}))\n@NoArgsConstructor\n@Getter", "url": "https://github.com/bakdata/conquery/pull/1467#discussion_r535035126", "createdAt": "2020-12-03T09:58:19Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/worker/WorkerToBucketsMap.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.bakdata.conquery.models.worker;\n+\n+import com.bakdata.conquery.models.identifiable.ids.specific.BucketId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.WorkerId;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Setter;\n+\n+import java.util.*;\n+\n+@Getter\n+@Setter\n+public class WorkerToBucketsMap {\n+    private Map<WorkerId, Set<BucketId>> map = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkyMTM1Nw=="}, "originalCommit": {"oid": "c4ab28ec806a8e7300f1d5e2dee85552e5b83e3a"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1553, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}