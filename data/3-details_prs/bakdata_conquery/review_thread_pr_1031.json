{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0OTExMDYz", "number": 1031, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMTo1NDoxOFrODf3cSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMTo1NDo0M1rODf3crg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzQwODEwOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/PrintSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMTo1NDoxOFrOFp0SlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMTo1NDoxOFrOFp0SlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM5MjY2MA==", "bodyText": "Kannst du das nicht als default column name l\u00f6sen? dadurch hast du nen eindeutigen datenfluss", "url": "https://github.com/bakdata/conquery/pull/1031#discussion_r379392660", "createdAt": "2020-02-14T11:54:18Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/PrintSettings.java", "diffHunk": "@@ -1,54 +1,49 @@\n package com.bakdata.conquery.models.query;\n \n-import java.util.Objects;\n-\n-import org.codehaus.groovy.control.CompilerConfiguration;\n+import java.util.function.Function;\n \n+import com.bakdata.conquery.models.concepts.Connector;\n import com.bakdata.conquery.models.query.resultinfo.SelectNameExtractor;\n import com.bakdata.conquery.models.query.resultinfo.SelectResultInfo;\n-import com.google.common.base.Strings;\n-\n-import groovy.lang.GroovyShell;\n import lombok.AllArgsConstructor;\n import lombok.Getter;\n import lombok.RequiredArgsConstructor;\n import lombok.ToString;\n-import lombok.extern.slf4j.Slf4j;\n \n-@Slf4j\n @Getter @RequiredArgsConstructor @AllArgsConstructor @ToString\n public class PrintSettings implements SelectNameExtractor {\n-\tpublic static final String GROOVY_VARIABLE = \"columnInfo\";\n-\t/**\n-\t * Non static shell because thread safety is not given.\n-\t */\n-\tprivate final GroovyShell groovyShell = new GroovyShell(new CompilerConfiguration());\n \n \tprivate final boolean prettyPrint;\n-\t/**\n-\t * Assuming the Script has already been validated (from loading the config).\n-\t */\n-\tprivate String columnNamerScript = null;\n+\t\n+\tprivate Function<SelectResultInfo, String> columnNamer = null;\n \t\n \n \t/**\n \t * Generates the name for a query result column.\n-\t * The name is either determined by a configured script or by a standard procedure\n \t */\n \t@Override\n \tpublic String columnName(SelectResultInfo columnInfo) {\n-\t\tif(!Strings.isNullOrEmpty(columnNamerScript)) {\n-\t\t\t// Use the provided script\n-\t\t\tgroovyShell.setProperty(GROOVY_VARIABLE, columnInfo);\n-\t\t\tObject result = groovyShell.evaluate(columnNamerScript);\n-\t\t\tif(result != null) {\n-\t\t\t\treturn Objects.toString(result);\n-\t\t\t}\n-\t\t\tlog.info(\"The column namer script returned null: {}\\nFalling back to standard format\",columnNamerScript);\n+\t\tif (columnNamer != null) {\n+\t\t\t// If a columnNamer is supplied it is used\n+\t\t\treturn columnNamer.apply(columnInfo);\n \t\t}\n+\t\tStringBuilder sb = new StringBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f0db3763973e387ea0b99fe69562472c9409af"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzQwOTEwOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/PrintSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMTo1NDo0M1rOFp0TPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMTo1NDo0M1rOFp0TPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM5MjgyOA==", "bodyText": "equalsIgnoreCase?", "url": "https://github.com/bakdata/conquery/pull/1031#discussion_r379392828", "createdAt": "2020-02-14T11:54:43Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/PrintSettings.java", "diffHunk": "@@ -1,54 +1,49 @@\n package com.bakdata.conquery.models.query;\n \n-import java.util.Objects;\n-\n-import org.codehaus.groovy.control.CompilerConfiguration;\n+import java.util.function.Function;\n \n+import com.bakdata.conquery.models.concepts.Connector;\n import com.bakdata.conquery.models.query.resultinfo.SelectNameExtractor;\n import com.bakdata.conquery.models.query.resultinfo.SelectResultInfo;\n-import com.google.common.base.Strings;\n-\n-import groovy.lang.GroovyShell;\n import lombok.AllArgsConstructor;\n import lombok.Getter;\n import lombok.RequiredArgsConstructor;\n import lombok.ToString;\n-import lombok.extern.slf4j.Slf4j;\n \n-@Slf4j\n @Getter @RequiredArgsConstructor @AllArgsConstructor @ToString\n public class PrintSettings implements SelectNameExtractor {\n-\tpublic static final String GROOVY_VARIABLE = \"columnInfo\";\n-\t/**\n-\t * Non static shell because thread safety is not given.\n-\t */\n-\tprivate final GroovyShell groovyShell = new GroovyShell(new CompilerConfiguration());\n \n \tprivate final boolean prettyPrint;\n-\t/**\n-\t * Assuming the Script has already been validated (from loading the config).\n-\t */\n-\tprivate String columnNamerScript = null;\n+\t\n+\tprivate Function<SelectResultInfo, String> columnNamer = null;\n \t\n \n \t/**\n \t * Generates the name for a query result column.\n-\t * The name is either determined by a configured script or by a standard procedure\n \t */\n \t@Override\n \tpublic String columnName(SelectResultInfo columnInfo) {\n-\t\tif(!Strings.isNullOrEmpty(columnNamerScript)) {\n-\t\t\t// Use the provided script\n-\t\t\tgroovyShell.setProperty(GROOVY_VARIABLE, columnInfo);\n-\t\t\tObject result = groovyShell.evaluate(columnNamerScript);\n-\t\t\tif(result != null) {\n-\t\t\t\treturn Objects.toString(result);\n-\t\t\t}\n-\t\t\tlog.info(\"The column namer script returned null: {}\\nFalling back to standard format\",columnNamerScript);\n+\t\tif (columnNamer != null) {\n+\t\t\t// If a columnNamer is supplied it is used\n+\t\t\treturn columnNamer.apply(columnInfo);\n \t\t}\n+\t\tStringBuilder sb = new StringBuilder();\n+\t\tString cqLabel = columnInfo.getCqConcept().getLabel();\n+\t\tString conceptLabel = columnInfo.getSelect().getHolder().findConcept().getLabel();\n \t\t\n-\t\t// Use the standard procedure\n-\t\treturn String.format(\"%s %s\",columnInfo.getCqConcept().getLabel(),columnInfo.getSelect().getLabel());\n-\t\t\n+\t\tsb.append(conceptLabel);\n+\t\tsb.append(' ');\n+\t\tif (!cqLabel.equals(conceptLabel)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f0db3763973e387ea0b99fe69562472c9409af"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1501, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}