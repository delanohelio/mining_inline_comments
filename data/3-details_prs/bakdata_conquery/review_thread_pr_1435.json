{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMzEwNDQ5", "number": 1435, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTozMzoxNVrOE7lyYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTowNDoyN1rOFAv1QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwOTIwNTQ1OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/TableExportQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTozMzoxNVrOH3UmJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTozMzoxNVrOH3UmJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3MTE3Mg==", "bodyText": "Achtung ValidityDates kann leer sein!\nEs gibt Konzepte ohne ValidityDate", "url": "https://github.com/bakdata/conquery/pull/1435#discussion_r527771172", "createdAt": "2020-11-20T15:33:15Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/TableExportQuery.java", "diffHunk": "@@ -69,13 +69,24 @@ public TableExportQueryPlan createQueryPlan(QueryPlanContext context) {\n \t\t\ttry {\n \t\t\t\tConcept<?> concept = context.getCentralRegistry().resolve(table.getId().getConcept());\n \t\t\t\tConnector connector = concept.getConnectorByName(table.getId().getConnector());\n-\t\t\t\tresolvedConnectors.add(\n-\t\t\t\t\t\tnew TableExportDescription(\n-\t\t\t\t\t\t\t\tconnector.getTable(),\n-\t\t\t\t\t\t\t\tconnector.getValidityDateColumn(table.getDateColumn().getValue()),\n-\t\t\t\t\t\t\t\ttotalColumns\n-\t\t\t\t\t\t)\n+\t\t\t\tfinal Column validityDateColumn;\n+\n+\t\t\t\t// if no dateColumn is provided, we use the default instead which is always the first one.\n+\t\t\t\tif (table.getDateColumn() != null) {\n+\t\t\t\t\tvalidityDateColumn = connector.getValidityDateColumn(table.getDateColumn().getValue());\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tvalidityDateColumn = connector.getValidityDates().get(0).getColumn();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a95ff58176263cead0815bcbb97794c8732357a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NTUyNDQwOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/TableExportQueryPlan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOTo1MDowNlrOH8iubw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOTo1MDowNlrOH8iubw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI0NTU1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\tif (exportDescription.getValidityDateColumn() == null && !bucket.eventIsContainedIn(event, exportDescription.getValidityDateColumn(), dateRange)) {\n          \n          \n            \n            \t\t\t\t\tif (exportDescription.getValidityDateColumn() != null && !bucket.eventIsContainedIn(event, exportDescription.getValidityDateColumn(), dateRange)) {", "url": "https://github.com/bakdata/conquery/pull/1435#discussion_r533245551", "createdAt": "2020-12-01T09:50:06Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/TableExportQueryPlan.java", "diffHunk": "@@ -67,7 +69,8 @@ public EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n \n \t\t\t\tfor(int event = start; event < end ; event++) {\n \n-\t\t\t\t\tif (!bucket.eventIsContainedIn(event, exportDescription.getValidityDateColumn(), dateRange)) {\n+\t\t\t\t\t// Export Full-table if it has no validity date.\n+\t\t\t\t\tif (exportDescription.getValidityDateColumn() == null && !bucket.eventIsContainedIn(event, exportDescription.getValidityDateColumn(), dateRange)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfc83e20b63d098c4d343ef9c27df8461f96de70"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzI4MDAxOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/events/Bucket.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTowNDoyN1rOH_L_OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTowNzowMVrOH_ME7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxODc0NA==", "bodyText": "Zieht das @NotNull bei abstrakten Methoden? Ich glaube nicht das Lombok klassen\u00fcbergreifend Code erzeugen kann", "url": "https://github.com/bakdata/conquery/pull/1435#discussion_r536018744", "createdAt": "2020-12-04T11:04:27Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/Bucket.java", "diffHunk": "@@ -146,47 +146,47 @@ public void serialize(JsonGenerator gen, SerializerProvider serializers) throws\n \t}\n \n \n-\tpublic boolean has(int event, Column column) {\n+\tpublic boolean has(int event, @NotNull Column column) {\n \t\treturn has(event, column.getPosition());\n \t}\n \n \tpublic abstract boolean has(int event, int columnPosition);\n \n-\tpublic abstract int getString(int event, Column column);\n+\tpublic abstract int getString(int event, @NotNull Column column);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b79f2ef608df14b64b49a1236500a7fa0aca0edb"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAyMDIwNg==", "bodyText": "Leider nein :(", "url": "https://github.com/bakdata/conquery/pull/1435#discussion_r536020206", "createdAt": "2020-12-04T11:07:01Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/events/Bucket.java", "diffHunk": "@@ -146,47 +146,47 @@ public void serialize(JsonGenerator gen, SerializerProvider serializers) throws\n \t}\n \n \n-\tpublic boolean has(int event, Column column) {\n+\tpublic boolean has(int event, @NotNull Column column) {\n \t\treturn has(event, column.getPosition());\n \t}\n \n \tpublic abstract boolean has(int event, int columnPosition);\n \n-\tpublic abstract int getString(int event, Column column);\n+\tpublic abstract int getString(int event, @NotNull Column column);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxODc0NA=="}, "originalCommit": {"oid": "b79f2ef608df14b64b49a1236500a7fa0aca0edb"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1537, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}