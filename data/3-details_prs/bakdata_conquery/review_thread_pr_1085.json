{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5OTE2NzE1", "number": 1085, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDozMDo1NVrODsAdkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODo1ODo1NVrODsk3Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDcxNTA0OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/QueryDescription.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDozMDo1NVrOF8rZPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDozMDo1NVrOF8rZPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2OTg1NQ==", "bodyText": "was macht das?", "url": "https://github.com/bakdata/conquery/pull/1085#discussion_r399169855", "createdAt": "2020-03-27T10:30:55Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/QueryDescription.java", "diffHunk": "@@ -40,16 +46,42 @@\n \n \t\n \tSet<ManagedExecutionId> collectRequiredQueries();\n+\t\n+\t/**\n+\t * Initializes a submitted description using the provided context.\n+\t * All parameters that are set in this phase should be internal or cleanly serializable/deserializable.\n+\t * @param context Holds information which can be used for the initialize the description of the query to be executed.\n+\t */\n+\tQueryDescription resolve(QueryResolveContext context);\n+\t\n+\tdefault void addVisitors(@NonNull ClassToInstanceMap<QueryVisitor> visitors) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17f6b720820a08ac123eb5b0cc9485bc77c51e4"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDcyMjc2OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/QueryDescription.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDozMzoxOVrOF8reCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDozMzoxOVrOF8reCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE3MTA4Mg==", "bodyText": "Oben asserten, dass du auch einen NSIdCollector hast", "url": "https://github.com/bakdata/conquery/pull/1085#discussion_r399171082", "createdAt": "2020-03-27T10:33:19Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/QueryDescription.java", "diffHunk": "@@ -40,16 +46,42 @@\n \n \t\n \tSet<ManagedExecutionId> collectRequiredQueries();\n+\t\n+\t/**\n+\t * Initializes a submitted description using the provided context.\n+\t * All parameters that are set in this phase should be internal or cleanly serializable/deserializable.\n+\t * @param context Holds information which can be used for the initialize the description of the query to be executed.\n+\t */\n+\tQueryDescription resolve(QueryResolveContext context);\n+\t\n+\tdefault void addVisitors(@NonNull ClassToInstanceMap<QueryVisitor> visitors) {\n+\t\t// Register visitors for permission checks\n+\t\tvisitors.putInstance(QueryUtils.NamespacedIdCollector.class, new QueryUtils.NamespacedIdCollector());\n+\t\tvisitors.putInstance(QueryUtils.ExternalIdChecker.class, new QueryUtils.ExternalIdChecker());\n+\t}\n \n \t/**\n-\t * Check implementation specific permissions.\n+\t * Check implementation specific permissions. Is called after all visitors have been registered and executed.\n \t */\n-\tdefault void checkPermissions(@NonNull User user) {\n-\t\t// Also look into the query and check the datasets\n-\t\tauthorizeReadDatasets(user, this);\n-\t\t// Check reused query\n+\tdefault void collectPermissions(@NonNull ClassToInstanceMap<QueryVisitor> visitors, Collection<Permission> requiredPermissions, DatasetId submittedDataset) {\n+\t\t// Generate DatasetPermissions\n+\t\tvisitors.getInstance(QueryUtils.NamespacedIdCollector.class).getIds().stream()\n+\t\t\t.map(NamespacedId::getDataset)\n+\t\t\t.distinct()\n+\t\t\t.map(dId -> DatasetPermission.onInstance(Ability.READ, dId))\n+\t\t\t.collect(Collectors.toCollection(() -> requiredPermissions));\n+\t\t\n+\t\t// Generate ConceptPermissions\n+\t\tQueryUtils.generateConceptReadPermissions(visitors.getInstance(QueryUtils.NamespacedIdCollector.class), requiredPermissions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17f6b720820a08ac123eb5b0cc9485bc77c51e4"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDczMzM5OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/Form.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDozNjozN1rOF8rklw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDoxOTozNFrOF-6K0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE3Mjc1OQ==", "bodyText": "Warum der Wechsel zu interface?", "url": "https://github.com/bakdata/conquery/pull/1085#discussion_r399172759", "createdAt": "2020-03-27T10:36:37Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/Form.java", "diffHunk": "@@ -1,47 +1,54 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n \n import com.bakdata.conquery.apiv1.QueryDescription;\n-import com.bakdata.conquery.models.auth.entities.User;\n import com.bakdata.conquery.models.auth.permissions.Ability;\n import com.bakdata.conquery.models.auth.permissions.FormPermission;\n+import com.bakdata.conquery.models.execution.ManagedExecution;\n import com.bakdata.conquery.models.forms.managed.ManagedForm;\n import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ManagedExecutionId;\n import com.bakdata.conquery.models.identifiable.ids.specific.UserId;\n+import com.bakdata.conquery.models.query.IQuery;\n import com.bakdata.conquery.models.query.ManagedQuery;\n+import com.bakdata.conquery.models.query.QueryResolveContext;\n+import com.bakdata.conquery.models.query.visitor.QueryVisitor;\n import com.bakdata.conquery.models.worker.Namespaces;\n-import lombok.Getter;\n+import com.google.common.collect.ClassToInstanceMap;\n import lombok.NonNull;\n-import lombok.Setter;\n+import org.apache.shiro.authz.Permission;\n \n /**\n  * API representation of a form query.\n  */\n-@Getter\n-@Setter\n-public abstract class Form implements QueryDescription {\n+public interface Form extends QueryDescription {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17f6b720820a08ac123eb5b0cc9485bc77c51e4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUwOTA3Mw==", "bodyText": "Nich umbedingt notwendig, aber Composition over Inheritance", "url": "https://github.com/bakdata/conquery/pull/1085#discussion_r401509073", "createdAt": "2020-04-01T10:19:34Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/Form.java", "diffHunk": "@@ -1,47 +1,54 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n \n import com.bakdata.conquery.apiv1.QueryDescription;\n-import com.bakdata.conquery.models.auth.entities.User;\n import com.bakdata.conquery.models.auth.permissions.Ability;\n import com.bakdata.conquery.models.auth.permissions.FormPermission;\n+import com.bakdata.conquery.models.execution.ManagedExecution;\n import com.bakdata.conquery.models.forms.managed.ManagedForm;\n import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ManagedExecutionId;\n import com.bakdata.conquery.models.identifiable.ids.specific.UserId;\n+import com.bakdata.conquery.models.query.IQuery;\n import com.bakdata.conquery.models.query.ManagedQuery;\n+import com.bakdata.conquery.models.query.QueryResolveContext;\n+import com.bakdata.conquery.models.query.visitor.QueryVisitor;\n import com.bakdata.conquery.models.worker.Namespaces;\n-import lombok.Getter;\n+import com.google.common.collect.ClassToInstanceMap;\n import lombok.NonNull;\n-import lombok.Setter;\n+import org.apache.shiro.authz.Permission;\n \n /**\n  * API representation of a form query.\n  */\n-@Getter\n-@Setter\n-public abstract class Form implements QueryDescription {\n+public interface Form extends QueryDescription {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE3Mjc1OQ=="}, "originalCommit": {"oid": "c17f6b720820a08ac123eb5b0cc9485bc77c51e4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDc0MTI3OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/ConqueryAuthorizationRealm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDozODo1NlrOF8rpZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDozODo1NlrOF8rpZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE3Mzk5MA==", "bodyText": "overrides", "url": "https://github.com/bakdata/conquery/pull/1085#discussion_r399173990", "createdAt": "2020-03-27T10:38:56Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/auth/ConqueryAuthorizationRealm.java", "diffHunk": "@@ -67,5 +72,51 @@ public Object getCredentials() {\n \t\t}\n \t\t\n \t}\n+\t\n+\t/**\n+\t * This AuthorizationInfo handles the collection of large amounts of {@link Permission}s by wrapping collections into a view\n+\t * instead of running an iterator over them. This also prevents a {@link ConcurrentModificationException} which occurred when \n+\t * Permission were collected\n+\t *\n+\t */\n+\t@SuppressWarnings(\"serial\")\n+\tpublic static class ConqueryAuthorizationInfo extends SimpleAuthorizationInfo {\n+\t\t@Override\n+\t\tpublic void addRole(String role) {\n+\t\t\tthrow new UnsupportedOperationException();\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic void addRoles(Collection<String> roles) {\n+\t\t\tthrow new UnsupportedOperationException();\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic void addStringPermission(String permission) {\n+\t\t\tthrow new UnsupportedOperationException();\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic void addStringPermissions(Collection<String> permissions) {\n+\t\t\tthrow new UnsupportedOperationException();\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic void addObjectPermission(Permission permission) {\n+\t\t\tthrow new UnsupportedOperationException();\n+\t\t}\n+\t\t\n+\t\tpublic void addObjectPermissions(Collection<Permission> permissions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17f6b720820a08ac123eb5b0cc9485bc77c51e4"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDY1MTMyOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/FrontEndConceptBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODo1MjoxMFrOF9ftOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDoxNToyMlrOF-6BZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNjkzNw==", "bodyText": "ist das Schneller wenn du es batched? Und geht das irgendwie, dass du die Permission an einer Stelle sinnvoll cached?", "url": "https://github.com/bakdata/conquery/pull/1085#discussion_r400026937", "createdAt": "2020-03-30T08:52:10Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/FrontEndConceptBuilder.java", "diffHunk": "@@ -36,14 +40,27 @@\n @Slf4j\n public class FrontEndConceptBuilder {\n \n-\tpublic static FERoot createRoot(NamespaceStorage storage) {\n+\tpublic static FERoot createRoot(NamespaceStorage storage, User user) {\n \n \t\tFERoot root = new FERoot();\n \t\tMap<IId<?>, FENode> roots = root.getConcepts();\n-\t\t//add all real roots\n-\t\tfor (Concept<?> c : storage.getAllConcepts()) {\n-\t\t\tif(!c.isHidden()) {\n-\t\t\t\troots.put(c.getId(), createCTRoot(c, storage.getStructure()));\n+\t\t\n+\t\tList<? extends Concept<?>> allConcepts = new ArrayList<>(storage.getAllConcepts());\n+\t\t// Remove any hidden concepts\n+\t\tallConcepts.removeIf(Concept::isHidden);\n+\t\t\n+\t\tList<Permission> permissions = new ArrayList<>(allConcepts.size());\n+\t\tfor (Concept<?> concept : allConcepts) {\n+\t\t\t// Collect all permission first, instead of submitting one by one to Shiro.\n+\t\t\tpermissions.add(ConceptPermission.onInstance(Ability.READ, concept.getId()));\n+\t\t}\n+\t\t\n+\t\t// Submit all permissions to Shiro\n+\t\tboolean[] isPermitted = user.isPermitted(permissions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17f6b720820a08ac123eb5b0cc9485bc77c51e4"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUwNjY2MQ==", "bodyText": "Es wird gerade Shiro intern besprochen die Funktion performanter zu machen. Wir k\u00f6nnen es cachen aber da das dann pro User geschehen muss und die Funktion im Idealfall nur einmal pro Benutzung von Conquery aufgerufen wird, w\u00fcrde ich es nicht cachen", "url": "https://github.com/bakdata/conquery/pull/1085#discussion_r401506661", "createdAt": "2020-04-01T10:15:22Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/FrontEndConceptBuilder.java", "diffHunk": "@@ -36,14 +40,27 @@\n @Slf4j\n public class FrontEndConceptBuilder {\n \n-\tpublic static FERoot createRoot(NamespaceStorage storage) {\n+\tpublic static FERoot createRoot(NamespaceStorage storage, User user) {\n \n \t\tFERoot root = new FERoot();\n \t\tMap<IId<?>, FENode> roots = root.getConcepts();\n-\t\t//add all real roots\n-\t\tfor (Concept<?> c : storage.getAllConcepts()) {\n-\t\t\tif(!c.isHidden()) {\n-\t\t\t\troots.put(c.getId(), createCTRoot(c, storage.getStructure()));\n+\t\t\n+\t\tList<? extends Concept<?>> allConcepts = new ArrayList<>(storage.getAllConcepts());\n+\t\t// Remove any hidden concepts\n+\t\tallConcepts.removeIf(Concept::isHidden);\n+\t\t\n+\t\tList<Permission> permissions = new ArrayList<>(allConcepts.size());\n+\t\tfor (Concept<?> concept : allConcepts) {\n+\t\t\t// Collect all permission first, instead of submitting one by one to Shiro.\n+\t\t\tpermissions.add(ConceptPermission.onInstance(Ability.READ, concept.getId()));\n+\t\t}\n+\t\t\n+\t\t// Submit all permissions to Shiro\n+\t\tboolean[] isPermitted = user.isPermitted(permissions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNjkzNw=="}, "originalCommit": {"oid": "c17f6b720820a08ac123eb5b0cc9485bc77c51e4"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDY2MDI0OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODo1NDoyMVrOF9fyrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDoxNzoxNFrOF-6FSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyODMzNQ==", "bodyText": "protected f\u00fcr Formulare?", "url": "https://github.com/bakdata/conquery/pull/1085#discussion_r400028335", "createdAt": "2020-03-30T08:54:21Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "diffHunk": "@@ -165,26 +170,46 @@ public void awaitDone(int time, TimeUnit unit) {\n \t\t}\n \t}\n \n+\tprotected void setStatusBase(@NonNull MasterMetaStorage storage, URLBuilder url, @NonNull  User user, @NonNull ExecutionStatus status) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17f6b720820a08ac123eb5b0cc9485bc77c51e4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUwNzY1Ng==", "bodyText": "Ja f\u00fcr die Momentanen und auch die JupyEnd formulare", "url": "https://github.com/bakdata/conquery/pull/1085#discussion_r401507656", "createdAt": "2020-04-01T10:17:14Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "diffHunk": "@@ -165,26 +170,46 @@ public void awaitDone(int time, TimeUnit unit) {\n \t\t}\n \t}\n \n+\tprotected void setStatusBase(@NonNull MasterMetaStorage storage, URLBuilder url, @NonNull  User user, @NonNull ExecutionStatus status) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyODMzNQ=="}, "originalCommit": {"oid": "c17f6b720820a08ac123eb5b0cc9485bc77c51e4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDY3ODc1OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQuery.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODo1ODo1NVrOF9f-Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDoxNjoyOVrOF-6DqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAzMTI2Nw==", "bodyText": "Yo dawg I heard you like Formulare.", "url": "https://github.com/bakdata/conquery/pull/1085#discussion_r400031267", "createdAt": "2020-03-30T08:58:55Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQuery.java", "diffHunk": "@@ -31,7 +30,7 @@\n @RequiredArgsConstructor(onConstructor_=@JsonCreator)\n public class RelativeFormQuery extends IQuery {\n \t@NotNull @Valid\n-\tprivate final ConceptQuery query;\n+\tprivate final IQuery query;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17f6b720820a08ac123eb5b0cc9485bc77c51e4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAzMTYyMw==", "bodyText": "macht das nich evtl was f\u00fcr Kai kaputt?", "url": "https://github.com/bakdata/conquery/pull/1085#discussion_r400031623", "createdAt": "2020-03-30T08:59:31Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQuery.java", "diffHunk": "@@ -31,7 +30,7 @@\n @RequiredArgsConstructor(onConstructor_=@JsonCreator)\n public class RelativeFormQuery extends IQuery {\n \t@NotNull @Valid\n-\tprivate final ConceptQuery query;\n+\tprivate final IQuery query;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAzMTI2Nw=="}, "originalCommit": {"oid": "c17f6b720820a08ac123eb5b0cc9485bc77c51e4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUwNzI0MA==", "bodyText": "Sollte es nicht. Kai sendet keine Json die direkt auf diese Klasse mappt", "url": "https://github.com/bakdata/conquery/pull/1085#discussion_r401507240", "createdAt": "2020-04-01T10:16:29Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQuery.java", "diffHunk": "@@ -31,7 +30,7 @@\n @RequiredArgsConstructor(onConstructor_=@JsonCreator)\n public class RelativeFormQuery extends IQuery {\n \t@NotNull @Valid\n-\tprivate final ConceptQuery query;\n+\tprivate final IQuery query;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAzMTI2Nw=="}, "originalCommit": {"oid": "c17f6b720820a08ac123eb5b0cc9485bc77c51e4"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1442, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}