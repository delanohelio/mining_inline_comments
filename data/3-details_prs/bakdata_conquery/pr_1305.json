{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MzI5MzMy", "number": 1305, "title": "error info in status", "bodyText": "", "createdAt": "2020-07-29T09:59:58Z", "url": "https://github.com/bakdata/conquery/pull/1305", "merged": true, "mergeCommit": {"oid": "ed744a0ed847df517d0ca3cd17230328140b700e"}, "closed": true, "closedAt": "2020-09-04T07:35:15Z", "author": {"login": "thoniTUB"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5rwggAFqTQ1NzM4NDYyMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFPu4DAH2gAyNDU4MzI5MzMyOmQ3OWMwMWZkMmUxZGZkNmM5YzZlNWFkZGRjZWUwM2Y0NmZkN2FjZWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3Mzg0NjIw", "url": "https://github.com/bakdata/conquery/pull/1305#pullrequestreview-457384620", "createdAt": "2020-07-29T10:15:16Z", "commit": {"oid": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDoxNToxNlrOG4x-Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDoxNzoyNlrOG46pKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE5MjE1NA==", "bodyText": "Warum pflegen wir unsere templates selber? macht das nicht sinn sich die yaml mit dem frontend zu teilen?", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462192154", "createdAt": "2020-07-29T10:15:16Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package com.bakdata.conquery.models.error;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n+import com.bakdata.conquery.util.VariableDefaultValue;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.map.Flat3Map;\n+import org.apache.commons.text.StringSubstitutor;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+/**\n+ * Base class for errors that are thrown within Conquery and can be serialized\n+ * and deserialized to allow transportation between nodes.\n+ */\n+@Getter\n+@Setter\n+@RequiredArgsConstructor\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n+@CPSBase\n+@ToString(onlyExplicitlyIncluded = true)\n+public abstract class ConqueryError implements ConqueryErrorInfo {\n+\n+\t@VariableDefaultValue\n+\t@NotNull\n+\t@ToString.Include\n+\tprivate UUID id = UUID.randomUUID();\n+\t@NotEmpty\n+\tprivate final String messageTemplate;\n+\tprivate final Map<String, String> context;\n+\n+\t@Override\n+\t@JsonIgnore\n+\t@ToString.Include\n+\tpublic String getMessage() {\n+\t\treturn new StringSubstitutor(context).replace(messageTemplate);\n+\t}\n+\n+\t@Override\n+\tpublic PlainError asPlain() {\n+\t\treturn new PlainError(getId(), getCode(), getMessage(), getContext());\n+\t}\n+\n+\tpublic ConqueryException asException() {\n+\t\treturn new ConqueryException(this);\n+\t}\n+\n+\t@Override\n+\t@JsonIgnore // The code is the type information, so we do not need to serialize it\n+\tpublic String getCode() {\n+\t\treturn this.getClass().getAnnotation(CPSType.class).id();\n+\t}\n+\n+\tpublic static abstract class NoContextError extends ConqueryError {\n+\n+\t\tpublic NoContextError(String message) {\n+\t\t\tsuper(message, Collections.emptyMap());\n+\t\t}\n+\t}\n+\n+\tpublic static abstract class ContextError extends ConqueryError {\n+\n+\t\tpublic ContextError(String code, String messageTemplate) {\n+\t\t\tsuper(messageTemplate, new Flat3Map<>());\n+\t\t}\n+\t}\n+\n+\t@Slf4j\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_UNKNOWN_ERROR\")\n+\tpublic static class UnknownError extends NoContextError {\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate UnknownError() {\n+\t\t\tsuper(\"An unknown error occured\");\n+\t\t}\n+\n+\t\tpublic UnknownError(Throwable e) {\n+\t\t\tthis();\n+\t\t\tlog.error(\"Encountered unknown error [{}]\", this.getId(), e);\n+\t\t}\n+\t}\n+\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION\")\n+\tpublic static class ExecutionCreationErrorUnspecified extends NoContextError {\n+\n+\t\tpublic ExecutionCreationErrorUnspecified() {\n+\t\t\tsuper(\"Failure during execution creation.\");\n+\t\t}\n+\t}\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE\")\n+\tpublic static class ExecutionCreationResolveError extends ContextError {\n+\n+\t\tprivate final static String FAILED_ELEMENT = \"ELEMENT\";\n+\t\tprivate final static String FAILED_ELEMENT_CLASS = \"ELEMENT_CLASS\";\n+\t\tprivate final static String TEMPLATE = \"Could not find an ${\" + FAILED_ELEMENT_CLASS + \"} element called '${\" + FAILED_ELEMENT + \"}'\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE5MjYwMA==", "bodyText": "Ah ok, ihr habt euch drauf geeinigt, dass das BackEnd die Nachrichten bastelt?", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462192600", "createdAt": "2020-07-29T10:16:07Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package com.bakdata.conquery.models.error;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n+import com.bakdata.conquery.util.VariableDefaultValue;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.map.Flat3Map;\n+import org.apache.commons.text.StringSubstitutor;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+/**\n+ * Base class for errors that are thrown within Conquery and can be serialized\n+ * and deserialized to allow transportation between nodes.\n+ */\n+@Getter\n+@Setter\n+@RequiredArgsConstructor\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n+@CPSBase\n+@ToString(onlyExplicitlyIncluded = true)\n+public abstract class ConqueryError implements ConqueryErrorInfo {\n+\n+\t@VariableDefaultValue\n+\t@NotNull\n+\t@ToString.Include\n+\tprivate UUID id = UUID.randomUUID();\n+\t@NotEmpty\n+\tprivate final String messageTemplate;\n+\tprivate final Map<String, String> context;\n+\n+\t@Override\n+\t@JsonIgnore\n+\t@ToString.Include\n+\tpublic String getMessage() {\n+\t\treturn new StringSubstitutor(context).replace(messageTemplate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIwMzM2OQ==", "bodyText": "Ich wei\u00df, dass die Idee hier ist memory-overhead zu sparen aber lohnt es sich hier zu sparen, wo eigentlich selten passiert? Aber lustige Map", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462203369", "createdAt": "2020-07-29T10:36:01Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package com.bakdata.conquery.models.error;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n+import com.bakdata.conquery.util.VariableDefaultValue;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.map.Flat3Map;\n+import org.apache.commons.text.StringSubstitutor;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+/**\n+ * Base class for errors that are thrown within Conquery and can be serialized\n+ * and deserialized to allow transportation between nodes.\n+ */\n+@Getter\n+@Setter\n+@RequiredArgsConstructor\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n+@CPSBase\n+@ToString(onlyExplicitlyIncluded = true)\n+public abstract class ConqueryError implements ConqueryErrorInfo {\n+\n+\t@VariableDefaultValue\n+\t@NotNull\n+\t@ToString.Include\n+\tprivate UUID id = UUID.randomUUID();\n+\t@NotEmpty\n+\tprivate final String messageTemplate;\n+\tprivate final Map<String, String> context;\n+\n+\t@Override\n+\t@JsonIgnore\n+\t@ToString.Include\n+\tpublic String getMessage() {\n+\t\treturn new StringSubstitutor(context).replace(messageTemplate);\n+\t}\n+\n+\t@Override\n+\tpublic PlainError asPlain() {\n+\t\treturn new PlainError(getId(), getCode(), getMessage(), getContext());\n+\t}\n+\n+\tpublic ConqueryException asException() {\n+\t\treturn new ConqueryException(this);\n+\t}\n+\n+\t@Override\n+\t@JsonIgnore // The code is the type information, so we do not need to serialize it\n+\tpublic String getCode() {\n+\t\treturn this.getClass().getAnnotation(CPSType.class).id();\n+\t}\n+\n+\tpublic static abstract class NoContextError extends ConqueryError {\n+\n+\t\tpublic NoContextError(String message) {\n+\t\t\tsuper(message, Collections.emptyMap());\n+\t\t}\n+\t}\n+\n+\tpublic static abstract class ContextError extends ConqueryError {\n+\n+\t\tpublic ContextError(String code, String messageTemplate) {\n+\t\t\tsuper(messageTemplate, new Flat3Map<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIwMzc3Mg==", "bodyText": "W\u00e4re es hier nicht nice zu wissen welche Elemente es sind?", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462203772", "createdAt": "2020-07-29T10:36:44Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package com.bakdata.conquery.models.error;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n+import com.bakdata.conquery.util.VariableDefaultValue;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.map.Flat3Map;\n+import org.apache.commons.text.StringSubstitutor;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+/**\n+ * Base class for errors that are thrown within Conquery and can be serialized\n+ * and deserialized to allow transportation between nodes.\n+ */\n+@Getter\n+@Setter\n+@RequiredArgsConstructor\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n+@CPSBase\n+@ToString(onlyExplicitlyIncluded = true)\n+public abstract class ConqueryError implements ConqueryErrorInfo {\n+\n+\t@VariableDefaultValue\n+\t@NotNull\n+\t@ToString.Include\n+\tprivate UUID id = UUID.randomUUID();\n+\t@NotEmpty\n+\tprivate final String messageTemplate;\n+\tprivate final Map<String, String> context;\n+\n+\t@Override\n+\t@JsonIgnore\n+\t@ToString.Include\n+\tpublic String getMessage() {\n+\t\treturn new StringSubstitutor(context).replace(messageTemplate);\n+\t}\n+\n+\t@Override\n+\tpublic PlainError asPlain() {\n+\t\treturn new PlainError(getId(), getCode(), getMessage(), getContext());\n+\t}\n+\n+\tpublic ConqueryException asException() {\n+\t\treturn new ConqueryException(this);\n+\t}\n+\n+\t@Override\n+\t@JsonIgnore // The code is the type information, so we do not need to serialize it\n+\tpublic String getCode() {\n+\t\treturn this.getClass().getAnnotation(CPSType.class).id();\n+\t}\n+\n+\tpublic static abstract class NoContextError extends ConqueryError {\n+\n+\t\tpublic NoContextError(String message) {\n+\t\t\tsuper(message, Collections.emptyMap());\n+\t\t}\n+\t}\n+\n+\tpublic static abstract class ContextError extends ConqueryError {\n+\n+\t\tpublic ContextError(String code, String messageTemplate) {\n+\t\t\tsuper(messageTemplate, new Flat3Map<>());\n+\t\t}\n+\t}\n+\n+\t@Slf4j\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_UNKNOWN_ERROR\")\n+\tpublic static class UnknownError extends NoContextError {\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate UnknownError() {\n+\t\t\tsuper(\"An unknown error occured\");\n+\t\t}\n+\n+\t\tpublic UnknownError(Throwable e) {\n+\t\t\tthis();\n+\t\t\tlog.error(\"Encountered unknown error [{}]\", this.getId(), e);\n+\t\t}\n+\t}\n+\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION\")\n+\tpublic static class ExecutionCreationErrorUnspecified extends NoContextError {\n+\n+\t\tpublic ExecutionCreationErrorUnspecified() {\n+\t\t\tsuper(\"Failure during execution creation.\");\n+\t\t}\n+\t}\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE\")\n+\tpublic static class ExecutionCreationResolveError extends ContextError {\n+\n+\t\tprivate final static String FAILED_ELEMENT = \"ELEMENT\";\n+\t\tprivate final static String FAILED_ELEMENT_CLASS = \"ELEMENT_CLASS\";\n+\t\tprivate final static String TEMPLATE = \"Could not find an ${\" + FAILED_ELEMENT_CLASS + \"} element called '${\" + FAILED_ELEMENT + \"}'\";\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate ExecutionCreationResolveError() {\n+\t\t\tsuper(ExecutionCreationResolveError.class.getAnnotation(CPSType.class).id(), TEMPLATE);\n+\t\t}\n+\n+\t\tpublic ExecutionCreationResolveError(IId<?> unresolvableElementId) {\n+\t\t\tthis();\n+\t\t\tgetContext().put(FAILED_ELEMENT, unresolvableElementId.toString());\n+\t\t\tgetContext().put(FAILED_ELEMENT_CLASS, unresolvableElementId.getClass().getSimpleName());\n+\t\t}\n+\t}\n+\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE_EXTERNAL\")\n+\tpublic static class ExternalResolveError extends ContextError {\n+\n+\t\tprivate final static String FORMAT_ROW_LENGTH = \"formatRowLength\";\n+\t\tprivate final static String DATA_ROW_LENGTH = \"dataRowLength\";\n+\t\tprivate final static String TEMPLATE = \"There are ${\" + FORMAT_ROW_LENGTH + \"} columns in the format but ${\" + DATA_ROW_LENGTH + \"} in at least one row\";\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate ExternalResolveError() {\n+\t\t\tsuper(ExternalResolveError.class.getAnnotation(CPSType.class).id(), TEMPLATE);\n+\t\t}\n+\n+\t\tpublic ExternalResolveError(int formatRowLength, int dataRowLength) {\n+\t\t\tthis();\n+\t\t\tgetContext().put(FORMAT_ROW_LENGTH, Integer.toString(formatRowLength));\n+\t\t\tgetContext().put(DATA_ROW_LENGTH, Integer.toString(dataRowLength));\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Unspecified error during {@link QueryPlan}-creation.\n+\t */\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_PLAN\")\n+\tpublic static class ExecutionCreationPlanError extends NoContextError {\n+\n+\t\tpublic ExecutionCreationPlanError() {\n+\t\t\tsuper(\"Unable to resolve query elements.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIwMzg2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tsuper(\"The an unexpected error occured during the execution.\");\n          \n          \n            \n            \t\t\tsuper(\"An unexpected error occured during the execution.\");", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462203861", "createdAt": "2020-07-29T10:36:55Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package com.bakdata.conquery.models.error;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n+import com.bakdata.conquery.util.VariableDefaultValue;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.map.Flat3Map;\n+import org.apache.commons.text.StringSubstitutor;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+/**\n+ * Base class for errors that are thrown within Conquery and can be serialized\n+ * and deserialized to allow transportation between nodes.\n+ */\n+@Getter\n+@Setter\n+@RequiredArgsConstructor\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n+@CPSBase\n+@ToString(onlyExplicitlyIncluded = true)\n+public abstract class ConqueryError implements ConqueryErrorInfo {\n+\n+\t@VariableDefaultValue\n+\t@NotNull\n+\t@ToString.Include\n+\tprivate UUID id = UUID.randomUUID();\n+\t@NotEmpty\n+\tprivate final String messageTemplate;\n+\tprivate final Map<String, String> context;\n+\n+\t@Override\n+\t@JsonIgnore\n+\t@ToString.Include\n+\tpublic String getMessage() {\n+\t\treturn new StringSubstitutor(context).replace(messageTemplate);\n+\t}\n+\n+\t@Override\n+\tpublic PlainError asPlain() {\n+\t\treturn new PlainError(getId(), getCode(), getMessage(), getContext());\n+\t}\n+\n+\tpublic ConqueryException asException() {\n+\t\treturn new ConqueryException(this);\n+\t}\n+\n+\t@Override\n+\t@JsonIgnore // The code is the type information, so we do not need to serialize it\n+\tpublic String getCode() {\n+\t\treturn this.getClass().getAnnotation(CPSType.class).id();\n+\t}\n+\n+\tpublic static abstract class NoContextError extends ConqueryError {\n+\n+\t\tpublic NoContextError(String message) {\n+\t\t\tsuper(message, Collections.emptyMap());\n+\t\t}\n+\t}\n+\n+\tpublic static abstract class ContextError extends ConqueryError {\n+\n+\t\tpublic ContextError(String code, String messageTemplate) {\n+\t\t\tsuper(messageTemplate, new Flat3Map<>());\n+\t\t}\n+\t}\n+\n+\t@Slf4j\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_UNKNOWN_ERROR\")\n+\tpublic static class UnknownError extends NoContextError {\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate UnknownError() {\n+\t\t\tsuper(\"An unknown error occured\");\n+\t\t}\n+\n+\t\tpublic UnknownError(Throwable e) {\n+\t\t\tthis();\n+\t\t\tlog.error(\"Encountered unknown error [{}]\", this.getId(), e);\n+\t\t}\n+\t}\n+\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION\")\n+\tpublic static class ExecutionCreationErrorUnspecified extends NoContextError {\n+\n+\t\tpublic ExecutionCreationErrorUnspecified() {\n+\t\t\tsuper(\"Failure during execution creation.\");\n+\t\t}\n+\t}\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE\")\n+\tpublic static class ExecutionCreationResolveError extends ContextError {\n+\n+\t\tprivate final static String FAILED_ELEMENT = \"ELEMENT\";\n+\t\tprivate final static String FAILED_ELEMENT_CLASS = \"ELEMENT_CLASS\";\n+\t\tprivate final static String TEMPLATE = \"Could not find an ${\" + FAILED_ELEMENT_CLASS + \"} element called '${\" + FAILED_ELEMENT + \"}'\";\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate ExecutionCreationResolveError() {\n+\t\t\tsuper(ExecutionCreationResolveError.class.getAnnotation(CPSType.class).id(), TEMPLATE);\n+\t\t}\n+\n+\t\tpublic ExecutionCreationResolveError(IId<?> unresolvableElementId) {\n+\t\t\tthis();\n+\t\t\tgetContext().put(FAILED_ELEMENT, unresolvableElementId.toString());\n+\t\t\tgetContext().put(FAILED_ELEMENT_CLASS, unresolvableElementId.getClass().getSimpleName());\n+\t\t}\n+\t}\n+\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE_EXTERNAL\")\n+\tpublic static class ExternalResolveError extends ContextError {\n+\n+\t\tprivate final static String FORMAT_ROW_LENGTH = \"formatRowLength\";\n+\t\tprivate final static String DATA_ROW_LENGTH = \"dataRowLength\";\n+\t\tprivate final static String TEMPLATE = \"There are ${\" + FORMAT_ROW_LENGTH + \"} columns in the format but ${\" + DATA_ROW_LENGTH + \"} in at least one row\";\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate ExternalResolveError() {\n+\t\t\tsuper(ExternalResolveError.class.getAnnotation(CPSType.class).id(), TEMPLATE);\n+\t\t}\n+\n+\t\tpublic ExternalResolveError(int formatRowLength, int dataRowLength) {\n+\t\t\tthis();\n+\t\t\tgetContext().put(FORMAT_ROW_LENGTH, Integer.toString(formatRowLength));\n+\t\t\tgetContext().put(DATA_ROW_LENGTH, Integer.toString(dataRowLength));\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Unspecified error during {@link QueryPlan}-creation.\n+\t */\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_PLAN\")\n+\tpublic static class ExecutionCreationPlanError extends NoContextError {\n+\n+\t\tpublic ExecutionCreationPlanError() {\n+\t\t\tsuper(\"Unable to resolve query elements.\");\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Unspecified execution processing error.\n+\t */\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_PROCESSING\")\n+\tpublic static class ExecutionProcessingError extends NoContextError {\n+\n+\t\tpublic ExecutionProcessingError() {\n+\t\t\tsuper(\"The an unexpected error occured during the execution.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIwNTE5MA==", "bodyText": "Das geht auch schon mit java Comparator, sogar sauberer:\nComparator.comparing(Double::intValue).thenComparing(Double::doubleValue).compare()", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462205190", "createdAt": "2020-07-29T10:39:34Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/error/ConqueryErrorInfo.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.bakdata.conquery.models.error;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import com.google.common.collect.ComparisonChain;\n+\n+/**\n+ * Base interface for errors that should be displayed as an info in the Frontend\n+ */\n+public interface ConqueryErrorInfo {\n+\n+\t/**\n+\t * A unique id for this error to retrieve it in the logs.\n+\t */\n+\tUUID getId();\n+\t\n+\tString getCode();\n+\t\n+\tString getMessage();\n+\t\n+\tMap<String,String> getContext();\n+\n+\t/**\n+\t * Returns a {@link ConqueryErrorInfo} POJO without the internal type information.\n+\t * @return\n+\t */\n+\tPlainError asPlain();\n+\t\n+\t/**\n+\t * Method to check if two errors are basically the same, by not checking the id and the context (which possibly checks on hashcode basis).\n+\t */\n+\tdefault boolean equalsRegardingCodeAndMessage(ConqueryErrorInfo other) {\n+\t\treturn ComparisonChain.start()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMxODY2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tlog.warn(\"The execution [{}] failed again with:\\n\\t{}\\n\\tThe previously error was: {}\", getId(), this.error, error);\n          \n          \n            \n            \t\t\tlog.warn(\"The execution [{}] failed again with:\\n\\t{}\\n\\tThe previous error was: {}\", getId(), this.error, error);", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462318667", "createdAt": "2020-07-29T13:57:02Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "diffHunk": "@@ -120,7 +123,19 @@ public ManagedExecutionId createId() {\n \t\treturn new ManagedExecutionId(dataset, queryId);\n \t}\n \n-\tprotected void fail(MasterMetaStorage storage) {\n+\t/**\n+\t * Fails the execution and log the occurred error.\n+\t */\n+\tprotected void fail(MasterMetaStorage storage, ConqueryErrorInfo error) {\n+\t\tif(this.error != null && !this.error.equalsRegardingCodeAndMessage(error)) {\n+\t\t\t// Warn only again if the error is different (failed might by called per collected result)\n+\t\t\tlog.warn(\"The execution [{}] failed again with:\\n\\t{}\\n\\tThe previously error was: {}\", getId(), this.error, error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyMTExOQ==", "bodyText": "Was soll das assert hier?", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462321119", "createdAt": "2020-07-29T14:00:19Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "diffHunk": "@@ -192,6 +208,11 @@ protected void setStatusBase(@NonNull MasterMetaStorage storage, URLBuilder url,\n \t\t\tisReadyToDownload(url, user)\n \t\t\t\t? getDownloadURL(url)\n \t\t\t\t: null);\n+\t\tif (state.equals(ExecutionState.FAILED)) {\n+\t\t\tassert(error != null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyMjI4NA==", "bodyText": "Stimmt die log message?", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462322284", "createdAt": "2020-07-29T14:01:56Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/ManagedForm.java", "diffHunk": "@@ -136,16 +134,10 @@ public void start() {\n \t@Override\n \tpublic void addResult(@NonNull MasterMetaStorage storage, FormSharedResult result) {\n \t\tManagedExecutionId subquery = result.getSubqueryId();\n-\t\tif (subquery == null) {\n-\t\t\tfail(storage);\n-\t\t\tlog.warn(\n-\t\t\t\t\"Form failed in query plan creation. \",\n-\t\t\t\tnew MultiException(result.getResults().stream()\n-\t\t\t\t\t.filter(r -> (r instanceof FailedEntityResult))\n-\t\t\t\t\t.map(FailedEntityResult.class::cast)\n-\t\t\t\t\t.map(FailedEntityResult::getThrowable)\n-\t\t\t\t\t.collect(Collectors.toList())));\n-\t\t\treturn;\n+\t\tif(result.getError().isPresent()) {\n+\t\t\tfail(storage, result.getError().get());\n+\t\t\tlog.warn(\"Form failed in query plan creation. {}\", result.getError().get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyMjQ0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tlog.warn(\"Form failed in query plan creation. {}\", result.getError().get());\n          \n          \n            \n            \t\t\tlog.warn(\"Form failed in query plan creation.\", result.getError().get());", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462322448", "createdAt": "2020-07-29T14:02:09Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/ManagedForm.java", "diffHunk": "@@ -136,16 +134,10 @@ public void start() {\n \t@Override\n \tpublic void addResult(@NonNull MasterMetaStorage storage, FormSharedResult result) {\n \t\tManagedExecutionId subquery = result.getSubqueryId();\n-\t\tif (subquery == null) {\n-\t\t\tfail(storage);\n-\t\t\tlog.warn(\n-\t\t\t\t\"Form failed in query plan creation. \",\n-\t\t\t\tnew MultiException(result.getResults().stream()\n-\t\t\t\t\t.filter(r -> (r instanceof FailedEntityResult))\n-\t\t\t\t\t.map(FailedEntityResult.class::cast)\n-\t\t\t\t\t.map(FailedEntityResult::getThrowable)\n-\t\t\t\t\t.collect(Collectors.toList())));\n-\t\t\treturn;\n+\t\tif(result.getError().isPresent()) {\n+\t\t\tfail(storage, result.getError().get());\n+\t\t\tlog.warn(\"Form failed in query plan creation. {}\", result.getError().get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyMjI4NA=="}, "originalCommit": {"oid": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzMTEzOA==", "bodyText": "mit if instanceof  k\u00f6nntestb du dir ein paar duplikate sparen aber wird denke ich trotzdem komisch sein", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462331138", "createdAt": "2020-07-29T14:13:26Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java", "diffHunk": "@@ -43,10 +43,16 @@ public void react(Worker context) throws Exception {\n \t\t// The results are send directly to these ManagesQueries\n \t\ttry {\n \t\t\tplans = execution.createQueryPlans(new QueryPlanContext(context)).entrySet();\t\t\n+\t\t} catch (ConqueryException e) {\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzMTU0OA==", "bodyText": "Utility Methode die dieses Wrapping macht w\u00e4re eigentlich sinnvoll denke ich", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462331548", "createdAt": "2020-07-29T14:14:01Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java", "diffHunk": "@@ -55,16 +61,19 @@ public void react(Worker context) throws Exception {\n \t\t\ttry {\n \t\t\t\tcontext.getQueryExecutor().execute(result, new QueryExecutionContext(context.getStorage()), entry);\n \t\t\t\tresult.getFuture().addListener(()->result.send(context), MoreExecutors.directExecutor());\n-\t\t\t} catch(Exception e) {\n+\t\t\t} catch(ConqueryException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzMjExNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tlog.error(\"Failed Query[{}]\", queryId);\n          \n          \n            \n            \t\t\tlog.error(\"Failed Query[{}]\", queryId, result.getError().get());", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462332117", "createdAt": "2020-07-29T14:14:44Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java", "diffHunk": "@@ -95,13 +94,11 @@ public void initExecutable(@NonNull Namespaces namespaces) {\n \tpublic void addResult(@NonNull MasterMetaStorage storage, ShardResult result) {\n \t\tlog.debug(\"Received Result[size={}] for Query[{}]\", result.getResults().size(), result.getQueryId());\n \n-\t\tfor (EntityResult er : result.getResults()) {\n-\t\t\tif (er.isFailed() && state == ExecutionState.RUNNING) {\n-\t\t\t\tfail(storage);\n-\t\t\t\tFailedEntityResult failed = er.asFailed();\n-\t\t\t\tlog.error(\"Failed Query[{}] at least for the Entity[{}]\", queryId, failed.getEntityId(), failed.getThrowable());\n-\t\t\t}\n+\t\tif(result.getError().isPresent()) {\n+\t\t\tfail(storage, result.getError().get());\n+\t\t\tlog.error(\"Failed Query[{}]\", queryId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzMjkzMQ==", "bodyText": "Exceptions iA ans Frontend zu verschicken ist glaube ich problematisch wenn da irgendwelche sensiblen bytes oder so drin gelogged sind", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462332931", "createdAt": "2020-07-29T14:15:41Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/QueryJob.java", "diffHunk": "@@ -24,8 +25,13 @@ public EntityResult call() throws Exception {\n \t\t\t\n \t\t\treturn queryPlan.execute(ctx, entity);\n \t\t}\n-\t\tcatch(Exception e) {\n-\t\t\treturn EntityResult.failed(entity.getId(), e);\n+\t\tcatch (ConqueryException e) {\n+\t\t\t// Catch known errors (where the user can possibly fix something)\n+\t\t\treturn EntityResult.failed(entity.getId(), e.getCtx());\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\t// Catch unspecified errors, log them with their id and forward them as unknown errors.\n+\t\t\treturn EntityResult.failed(entity.getId(), new ConqueryError.UnknownError(e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzNDI1MQ==", "bodyText": "was ist  This?", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462334251", "createdAt": "2020-07-29T14:17:26Z", "author": {"login": "awildturtok"}, "path": "backend/src/test/java/com/bakdata/conquery/integration/IntegrationTests.java", "diffHunk": "@@ -64,7 +64,7 @@\n \tpublic Stream<DynamicNode> programmaticTests() {\n \t\tList<Class<?>> programmatic = CPSTypeIdResolver\n \t\t\t.SCAN_RESULT\n-\t\t\t.getClassesImplementing(ProgrammaticIntegrationTest.class.getName())\n+\t\t\t.getClassesImplementing(ProgrammaticIntegrationTest.This.class.getName())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90632457386e771b2fbad0b74b8ffd3ea4ca8a16", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/90632457386e771b2fbad0b74b8ffd3ea4ca8a16", "committedDate": "2020-07-29T15:03:31Z", "message": "Update backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\n\nCo-authored-by: awildturtok <1553491+awildturtok@users.noreply.github.com>"}, "afterCommit": {"oid": "892305cbb8b185a49773a1da29b17affc742c64f", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/892305cbb8b185a49773a1da29b17affc742c64f", "committedDate": "2020-07-29T15:15:30Z", "message": "reenabled all programmatic integration tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "892305cbb8b185a49773a1da29b17affc742c64f", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/892305cbb8b185a49773a1da29b17affc742c64f", "committedDate": "2020-07-29T15:15:30Z", "message": "reenabled all programmatic integration tests"}, "afterCommit": {"oid": "5401d2c6ff8bfd451b76a1ea373e9af11b58fd54", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/5401d2c6ff8bfd451b76a1ea373e9af11b58fd54", "committedDate": "2020-07-30T06:47:15Z", "message": "reenabled all programmatic integration tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MjkyODI0", "url": "https://github.com/bakdata/conquery/pull/1305#pullrequestreview-458292824", "createdAt": "2020-07-30T10:52:45Z", "commit": {"oid": "cb90f2cca95874adaabe272e7df62b949ef33dd3"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDo1Mjo0NlrOG5eDaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDo1Njo0NVrOG5eLQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxNDQwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tsuper(\"The execution tooked too long to finish.\");\n          \n          \n            \n            \t\t\tsuper(\"The execution took too long to finish.\");", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462914408", "createdAt": "2020-07-30T10:52:46Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package com.bakdata.conquery.models.error;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n+import com.bakdata.conquery.util.VariableDefaultValue;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.map.Flat3Map;\n+import org.apache.commons.text.StringSubstitutor;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+/**\n+ * Base class for errors that are thrown within Conquery and can be serialized\n+ * and deserialized to allow transportation between nodes.\n+ */\n+@SuppressWarnings(\"serial\")\n+@Getter\n+@Setter\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n+@CPSBase\n+@ToString(onlyExplicitlyIncluded = true)\n+public abstract class ConqueryError extends RuntimeException implements ConqueryErrorInfo {\n+\t\n+\t@VariableDefaultValue\n+\t@NotNull\n+\t@ToString.Include\n+\tprivate UUID id = UUID.randomUUID();\n+\t@NotEmpty\n+\tprivate String messageTemplate;\n+\tprivate Map<String, String> context;\n+\t\n+\t\n+\tpublic ConqueryError(String messageTemplate, Map<String, String> context) {\n+\t\tthis.messageTemplate = messageTemplate;\n+\t\tthis.context = context;\n+\t}\n+\t\n+\t@Override\n+\t@JsonIgnore\n+\t@ToString.Include\n+\tpublic String getMessage() {\n+\t\tString message = new StringSubstitutor(context).replace(messageTemplate);\n+\t\treturn message != null ? message : \"Unable to provide error message. No message template was provided by error.\";\n+\t}\n+\n+\t@Override\n+\tpublic PlainError asPlain() {\n+\t\treturn new PlainError(getId(), getCode(), getMessage(), getContext());\n+\t}\n+\n+\t@Override\n+\t@JsonIgnore // The code is the type information, so we do not need to serialize it\n+\tpublic String getCode() {\n+\t\treturn this.getClass().getAnnotation(CPSType.class).id();\n+\t}\n+\n+\tpublic static abstract class NoContextError extends ConqueryError {\n+\n+\t\tpublic NoContextError(String message) {\n+\t\t\tsuper(message, Collections.emptyMap());\n+\t\t}\n+\t}\n+\n+\tpublic static abstract class ContextError extends ConqueryError {\n+\n+\t\tpublic ContextError(String messageTemplate) {\n+\t\t\tsuper(messageTemplate, new Flat3Map<>());\n+\t\t}\n+\t}\n+\n+\t@Slf4j\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_UNKNOWN_ERROR\")\n+\tpublic static class UnknownError extends NoContextError {\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate UnknownError() {\n+\t\t\tsuper(\"An unknown error occured\");\n+\t\t}\n+\n+\t\tpublic UnknownError(Throwable e) {\n+\t\t\tthis();\n+\t\t\tlog.error(\"Encountered unknown error [{}]\", this.getId(), e);\n+\t\t}\n+\t}\n+\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION\")\n+\tpublic static class ExecutionCreationErrorUnspecified extends NoContextError {\n+\n+\t\tpublic ExecutionCreationErrorUnspecified() {\n+\t\t\tsuper(\"Failure during execution creation.\");\n+\t\t}\n+\t}\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE\")\n+\tpublic static class ExecutionCreationResolveError extends ContextError {\n+\n+\t\tprivate final static String FAILED_ELEMENT = \"ELEMENT\";\n+\t\tprivate final static String FAILED_ELEMENT_CLASS = \"ELEMENT_CLASS\";\n+\t\tprivate final static String TEMPLATE = \"Could not find an ${\" + FAILED_ELEMENT_CLASS + \"} element called '${\" + FAILED_ELEMENT + \"}'\";\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate ExecutionCreationResolveError() {\n+\t\t\tsuper(TEMPLATE);\n+\t\t}\n+\n+\t\tpublic ExecutionCreationResolveError(IId<?> unresolvableElementId) {\n+\t\t\tthis();\n+\t\t\tgetContext().put(FAILED_ELEMENT, unresolvableElementId.toString());\n+\t\t\tgetContext().put(FAILED_ELEMENT_CLASS, unresolvableElementId.getClass().getSimpleName());\n+\t\t}\n+\t}\n+\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE_EXTERNAL\")\n+\tpublic static class ExternalResolveError extends ContextError {\n+\n+\t\tprivate final static String FORMAT_ROW_LENGTH = \"formatRowLength\";\n+\t\tprivate final static String DATA_ROW_LENGTH = \"dataRowLength\";\n+\t\tprivate final static String TEMPLATE = \"There are ${\" + FORMAT_ROW_LENGTH + \"} columns in the format but ${\" + DATA_ROW_LENGTH + \"} in at least one row\";\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate ExternalResolveError() {\n+\t\t\tsuper(TEMPLATE);\n+\t\t}\n+\n+\t\tpublic ExternalResolveError(int formatRowLength, int dataRowLength) {\n+\t\t\tthis();\n+\t\t\tgetContext().put(FORMAT_ROW_LENGTH, Integer.toString(formatRowLength));\n+\t\t\tgetContext().put(DATA_ROW_LENGTH, Integer.toString(dataRowLength));\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Unspecified error during {@link QueryPlan}-creation.\n+\t */\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_PLAN\")\n+\tpublic static class ExecutionCreationPlanError extends NoContextError {\n+\n+\t\tpublic ExecutionCreationPlanError() {\n+\t\t\tsuper(\"Unable to generate query plan.\");\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Unspecified execution processing error.\n+\t */\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_PROCESSING\")\n+\tpublic static class ExecutionProcessingError extends NoContextError {\n+\n+\t\tpublic ExecutionProcessingError() {\n+\t\t\tsuper(\"An unexpected error occured during the execution.\");\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Timeout during processing.\n+\t */\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_PROCESSING_TIMEOUT\")\n+\tpublic static class ExecutionProcessingTimeoutError extends NoContextError {\n+\n+\t\tpublic ExecutionProcessingTimeoutError() {\n+\t\t\tsuper(\"The execution tooked too long to finish.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb90f2cca95874adaabe272e7df62b949ef33dd3"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxNjQxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tlog.warn(\"Failed to create query plans for \" + execution.getId(), e );\n          \n          \n            \n            \t\t\tlog.warn(\"Failed to create query plans for Execution[{}]\", execution.getId(), e );", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462916416", "createdAt": "2020-07-30T10:56:45Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java", "diffHunk": "@@ -43,28 +42,37 @@ public void react(Worker context) throws Exception {\n \t\t// The results are send directly to these ManagesQueries\n \t\ttry {\n \t\t\tplans = execution.createQueryPlans(new QueryPlanContext(context)).entrySet();\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tlog.error(\"Failed to create query plans for \" + execution.getId(), e );\n-\t\t\t// If one of the plans can not be created (maybe due to a Id that references a non existing concept) fail the whole job.\n-\t\t\tsendFailureToMaster(execution.getInitializedShardResult(null), execution, context, e);\n+\t\t} catch (Exception e) {\t\n+\t\t\tlog.warn(\"Failed to create query plans for \" + execution.getId(), e );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb90f2cca95874adaabe272e7df62b949ef33dd3"}, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "34420202bbd6ff756eaffe0650df2bb8b0c15f32", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/34420202bbd6ff756eaffe0650df2bb8b0c15f32", "committedDate": "2020-08-03T09:48:13Z", "message": "adds comment regarding dependency warning"}, "afterCommit": {"oid": "c5e629eaf67e3c15e13239610a45b484ad823b87", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/c5e629eaf67e3c15e13239610a45b484ad823b87", "committedDate": "2020-08-03T15:12:57Z", "message": "adds comment regarding dependency warning"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNTExNDkw", "url": "https://github.com/bakdata/conquery/pull/1305#pullrequestreview-461511490", "createdAt": "2020-08-05T09:53:05Z", "commit": {"oid": "c5e629eaf67e3c15e13239610a45b484ad823b87"}, "state": "DISMISSED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOTo1MzowNVrOG8CjrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDowMzowNlrOG8C5mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwOTY0NA==", "bodyText": "private static final String NO_MESSAGE = \"Unable to provide error message. No message template was provided by error.\"\n\n...\n\nif (template == null) return NO_MESSAGE;\n\n...", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r465609644", "createdAt": "2020-08-05T09:53:05Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package com.bakdata.conquery.models.error;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n+import com.bakdata.conquery.util.VariableDefaultValue;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.map.Flat3Map;\n+import org.apache.commons.text.StringSubstitutor;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+/**\n+ * Base class for errors that are thrown within Conquery and can be serialized\n+ * and deserialized to allow transportation between nodes.\n+ */\n+@SuppressWarnings(\"serial\")\n+@Getter\n+@Setter\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n+@CPSBase\n+@ToString(onlyExplicitlyIncluded = true)\n+public abstract class ConqueryError extends RuntimeException implements ConqueryErrorInfo {\n+\t\n+\t@VariableDefaultValue\n+\t@NotNull\n+\t@ToString.Include\n+\tprivate UUID id = UUID.randomUUID();\n+\t@NotEmpty\n+\tprivate String messageTemplate;\n+\tprivate Map<String, String> context;\n+\t\n+\t\n+\tpublic ConqueryError(String messageTemplate, Map<String, String> context) {\n+\t\tthis.messageTemplate = messageTemplate;\n+\t\tthis.context = context;\n+\t}\n+\t\n+\t@Override\n+\t@JsonIgnore\n+\t@ToString.Include\n+\tpublic String getMessage() {\n+\t\tString message = new StringSubstitutor(context).replace(messageTemplate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e629eaf67e3c15e13239610a45b484ad823b87"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYxMDEyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic String getCode() {\n          \n          \n            \n            \tpublic final String getCode() {", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r465610125", "createdAt": "2020-08-05T09:54:00Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package com.bakdata.conquery.models.error;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n+import com.bakdata.conquery.util.VariableDefaultValue;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.map.Flat3Map;\n+import org.apache.commons.text.StringSubstitutor;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+/**\n+ * Base class for errors that are thrown within Conquery and can be serialized\n+ * and deserialized to allow transportation between nodes.\n+ */\n+@SuppressWarnings(\"serial\")\n+@Getter\n+@Setter\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n+@CPSBase\n+@ToString(onlyExplicitlyIncluded = true)\n+public abstract class ConqueryError extends RuntimeException implements ConqueryErrorInfo {\n+\t\n+\t@VariableDefaultValue\n+\t@NotNull\n+\t@ToString.Include\n+\tprivate UUID id = UUID.randomUUID();\n+\t@NotEmpty\n+\tprivate String messageTemplate;\n+\tprivate Map<String, String> context;\n+\t\n+\t\n+\tpublic ConqueryError(String messageTemplate, Map<String, String> context) {\n+\t\tthis.messageTemplate = messageTemplate;\n+\t\tthis.context = context;\n+\t}\n+\t\n+\t@Override\n+\t@JsonIgnore\n+\t@ToString.Include\n+\tpublic String getMessage() {\n+\t\tString message = new StringSubstitutor(context).replace(messageTemplate);\n+\t\treturn message != null ? message : \"Unable to provide error message. No message template was provided by error.\";\n+\t}\n+\n+\t@Override\n+\tpublic PlainError asPlain() {\n+\t\treturn new PlainError(getId(), getCode(), getMessage(), getContext());\n+\t}\n+\n+\t@Override\n+\t@JsonIgnore // The code is the type information, so we do not need to serialize it\n+\tpublic String getCode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e629eaf67e3c15e13239610a45b484ad823b87"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYxMDU1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tlog.error(\"Encountered unknown error [{}]\", this.getId(), e);\n          \n          \n            \n            \t\t\tlog.error(\"Encountered unknown Error[{}]\", this.getId(), e);", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r465610554", "createdAt": "2020-08-05T09:54:44Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package com.bakdata.conquery.models.error;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n+import com.bakdata.conquery.util.VariableDefaultValue;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.map.Flat3Map;\n+import org.apache.commons.text.StringSubstitutor;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+/**\n+ * Base class for errors that are thrown within Conquery and can be serialized\n+ * and deserialized to allow transportation between nodes.\n+ */\n+@SuppressWarnings(\"serial\")\n+@Getter\n+@Setter\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n+@CPSBase\n+@ToString(onlyExplicitlyIncluded = true)\n+public abstract class ConqueryError extends RuntimeException implements ConqueryErrorInfo {\n+\t\n+\t@VariableDefaultValue\n+\t@NotNull\n+\t@ToString.Include\n+\tprivate UUID id = UUID.randomUUID();\n+\t@NotEmpty\n+\tprivate String messageTemplate;\n+\tprivate Map<String, String> context;\n+\t\n+\t\n+\tpublic ConqueryError(String messageTemplate, Map<String, String> context) {\n+\t\tthis.messageTemplate = messageTemplate;\n+\t\tthis.context = context;\n+\t}\n+\t\n+\t@Override\n+\t@JsonIgnore\n+\t@ToString.Include\n+\tpublic String getMessage() {\n+\t\tString message = new StringSubstitutor(context).replace(messageTemplate);\n+\t\treturn message != null ? message : \"Unable to provide error message. No message template was provided by error.\";\n+\t}\n+\n+\t@Override\n+\tpublic PlainError asPlain() {\n+\t\treturn new PlainError(getId(), getCode(), getMessage(), getContext());\n+\t}\n+\n+\t@Override\n+\t@JsonIgnore // The code is the type information, so we do not need to serialize it\n+\tpublic String getCode() {\n+\t\treturn this.getClass().getAnnotation(CPSType.class).id();\n+\t}\n+\n+\tpublic static abstract class NoContextError extends ConqueryError {\n+\n+\t\tpublic NoContextError(String message) {\n+\t\t\tsuper(message, Collections.emptyMap());\n+\t\t}\n+\t}\n+\n+\tpublic static abstract class ContextError extends ConqueryError {\n+\n+\t\tpublic ContextError(String messageTemplate) {\n+\t\t\tsuper(messageTemplate, new Flat3Map<>());\n+\t\t}\n+\t}\n+\n+\t@Slf4j\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_UNKNOWN_ERROR\")\n+\tpublic static class UnknownError extends NoContextError {\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate UnknownError() {\n+\t\t\tsuper(\"An unknown error occured\");\n+\t\t}\n+\n+\t\tpublic UnknownError(Throwable e) {\n+\t\t\tthis();\n+\t\t\tlog.error(\"Encountered unknown error [{}]\", this.getId(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e629eaf67e3c15e13239610a45b484ad823b87"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYxMjA2Nw==", "bodyText": "Warum machen wir das toString und nicht der Substitutor?", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r465612067", "createdAt": "2020-08-05T09:57:30Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package com.bakdata.conquery.models.error;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n+import com.bakdata.conquery.util.VariableDefaultValue;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.map.Flat3Map;\n+import org.apache.commons.text.StringSubstitutor;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+/**\n+ * Base class for errors that are thrown within Conquery and can be serialized\n+ * and deserialized to allow transportation between nodes.\n+ */\n+@SuppressWarnings(\"serial\")\n+@Getter\n+@Setter\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n+@CPSBase\n+@ToString(onlyExplicitlyIncluded = true)\n+public abstract class ConqueryError extends RuntimeException implements ConqueryErrorInfo {\n+\t\n+\t@VariableDefaultValue\n+\t@NotNull\n+\t@ToString.Include\n+\tprivate UUID id = UUID.randomUUID();\n+\t@NotEmpty\n+\tprivate String messageTemplate;\n+\tprivate Map<String, String> context;\n+\t\n+\t\n+\tpublic ConqueryError(String messageTemplate, Map<String, String> context) {\n+\t\tthis.messageTemplate = messageTemplate;\n+\t\tthis.context = context;\n+\t}\n+\t\n+\t@Override\n+\t@JsonIgnore\n+\t@ToString.Include\n+\tpublic String getMessage() {\n+\t\tString message = new StringSubstitutor(context).replace(messageTemplate);\n+\t\treturn message != null ? message : \"Unable to provide error message. No message template was provided by error.\";\n+\t}\n+\n+\t@Override\n+\tpublic PlainError asPlain() {\n+\t\treturn new PlainError(getId(), getCode(), getMessage(), getContext());\n+\t}\n+\n+\t@Override\n+\t@JsonIgnore // The code is the type information, so we do not need to serialize it\n+\tpublic String getCode() {\n+\t\treturn this.getClass().getAnnotation(CPSType.class).id();\n+\t}\n+\n+\tpublic static abstract class NoContextError extends ConqueryError {\n+\n+\t\tpublic NoContextError(String message) {\n+\t\t\tsuper(message, Collections.emptyMap());\n+\t\t}\n+\t}\n+\n+\tpublic static abstract class ContextError extends ConqueryError {\n+\n+\t\tpublic ContextError(String messageTemplate) {\n+\t\t\tsuper(messageTemplate, new Flat3Map<>());\n+\t\t}\n+\t}\n+\n+\t@Slf4j\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_UNKNOWN_ERROR\")\n+\tpublic static class UnknownError extends NoContextError {\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate UnknownError() {\n+\t\t\tsuper(\"An unknown error occured\");\n+\t\t}\n+\n+\t\tpublic UnknownError(Throwable e) {\n+\t\t\tthis();\n+\t\t\tlog.error(\"Encountered unknown error [{}]\", this.getId(), e);\n+\t\t}\n+\t}\n+\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION\")\n+\tpublic static class ExecutionCreationErrorUnspecified extends NoContextError {\n+\n+\t\tpublic ExecutionCreationErrorUnspecified() {\n+\t\t\tsuper(\"Failure during execution creation.\");\n+\t\t}\n+\t}\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE\")\n+\tpublic static class ExecutionCreationResolveError extends ContextError {\n+\n+\t\tprivate final static String FAILED_ELEMENT = \"ELEMENT\";\n+\t\tprivate final static String FAILED_ELEMENT_CLASS = \"ELEMENT_CLASS\";\n+\t\tprivate final static String TEMPLATE = \"Could not find an ${\" + FAILED_ELEMENT_CLASS + \"} element called '${\" + FAILED_ELEMENT + \"}'\";\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate ExecutionCreationResolveError() {\n+\t\t\tsuper(TEMPLATE);\n+\t\t}\n+\n+\t\tpublic ExecutionCreationResolveError(IId<?> unresolvableElementId) {\n+\t\t\tthis();\n+\t\t\tgetContext().put(FAILED_ELEMENT, unresolvableElementId.toString());\n+\t\t\tgetContext().put(FAILED_ELEMENT_CLASS, unresolvableElementId.getClass().getSimpleName());\n+\t\t}\n+\t}\n+\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE_EXTERNAL\")\n+\tpublic static class ExternalResolveError extends ContextError {\n+\n+\t\tprivate final static String FORMAT_ROW_LENGTH = \"formatRowLength\";\n+\t\tprivate final static String DATA_ROW_LENGTH = \"dataRowLength\";\n+\t\tprivate final static String TEMPLATE = \"There are ${\" + FORMAT_ROW_LENGTH + \"} columns in the format but ${\" + DATA_ROW_LENGTH + \"} in at least one row\";\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate ExternalResolveError() {\n+\t\t\tsuper(TEMPLATE);\n+\t\t}\n+\n+\t\tpublic ExternalResolveError(int formatRowLength, int dataRowLength) {\n+\t\t\tthis();\n+\t\t\tgetContext().put(FORMAT_ROW_LENGTH, Integer.toString(formatRowLength));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e629eaf67e3c15e13239610a45b484ad823b87"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYxNTI1OQ==", "bodyText": "Move to ConqueryError?", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r465615259", "createdAt": "2020-08-05T10:03:06Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java", "diffHunk": "@@ -44,27 +43,38 @@ public void react(Worker context) throws Exception {\n \t\ttry {\n \t\t\tplans = execution.createQueryPlans(new QueryPlanContext(context)).entrySet();\t\t\n \t\t} catch (Exception e) {\n-\t\t\tlog.error(\"Failed to create query plans for \" + execution.getId(), e );\n-\t\t\t// If one of the plans can not be created (maybe due to a Id that references a non existing concept) fail the whole job.\n-\t\t\tsendFailureToMaster(execution.getInitializedShardResult(null), execution, context, e);\n+\t\t\tConqueryError err = asConqueryError(e);\n+\t\t\tlog.warn(\"Failed to create query plans for {}.\", execution.getId(), err );\n+\t\t\tShardResult result = execution.getInitializedShardResult(null);\n+\t\t\tsendFailureToMaster(result, execution, context, err);\n \t\t\treturn;\n \t\t}\n+\t\t\n \t\t// Execute all plans.\n \t\tfor(Entry<ManagedExecutionId, QueryPlan> entry : plans) {\n \t\t\tShardResult result = execution.getInitializedShardResult(entry);\n \t\t\ttry {\n \t\t\t\tcontext.getQueryExecutor().execute(result, new QueryExecutionContext(context.getStorage()), entry);\n \t\t\t\tresult.getFuture().addListener(()->result.send(context), MoreExecutors.directExecutor());\n \t\t\t} catch(Exception e) {\n-\t\t\t\tlog.error(\"Error while executing {} (with subquery: {})\", execution.getId(), entry.getKey(), e );\n-\t\t\t\tsendFailureToMaster(result, execution, context, e);\n+\t\t\t\tConqueryError err = asConqueryError(e);\n+\t\t\t\tlog.warn(\"Error while executing {} (with subquery: {})\", execution.getId(), entry.getKey(), err );\n+\t\t\t\tsendFailureToMaster(result, execution, context,  asConqueryError(err));\n+\t\t\t\treturn;\n \t\t\t}\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * Wraps the {@link Throwable} into an {@link ConqueryError}.\n+\t */\n+\tprivate static ConqueryError asConqueryError(Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e629eaf67e3c15e13239610a45b484ad823b87"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "953166cc7ade6dd47b8f37b33aaca7019a2480c4", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/953166cc7ade6dd47b8f37b33aaca7019a2480c4", "committedDate": "2020-08-11T10:47:01Z", "message": "introduces new error type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b66034883d7e68d44c80efa2b7b18b43f3554d7c", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/b66034883d7e68d44c80efa2b7b18b43f3554d7c", "committedDate": "2020-08-11T10:47:02Z", "message": "adds propagation of known error and wrapping of unknown errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a37ad902ec690fbad85bcd75f5e9fd3122a8afc9", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/a37ad902ec690fbad85bcd75f5e9fd3122a8afc9", "committedDate": "2020-08-11T10:47:02Z", "message": "rename and repackage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0647bcbff70a816a9d54975a32796b7998d8dad", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/c0647bcbff70a816a9d54975a32796b7998d8dad", "committedDate": "2020-08-11T10:47:03Z", "message": "adds tests for serialization and conversion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5951f96d3b7c7b0e19e10e45f7757fd63a56f551", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/5951f96d3b7c7b0e19e10e45f7757fd63a56f551", "committedDate": "2020-08-11T10:47:03Z", "message": "adds doku"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad16b291530e0466c087708b7fd231f0aac91ddb", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/ad16b291530e0466c087708b7fd231f0aac91ddb", "committedDate": "2020-08-11T10:47:04Z", "message": "reorders errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04c01560d2a4a59680a3080656d999f42c809db1", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/04c01560d2a4a59680a3080656d999f42c809db1", "committedDate": "2020-08-11T10:47:05Z", "message": "adds general execution processing error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23ebf856481e1f0cf607c95a1c62186d1b79d49b", "author": {"user": {"login": "bakdata-bot", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/23ebf856481e1f0cf607c95a1c62186d1b79d49b", "committedDate": "2020-08-11T10:47:05Z", "message": "automatic update to docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2c98ced5b4af37849af652d283268218800500b", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/a2c98ced5b4af37849af652d283268218800500b", "committedDate": "2020-08-11T10:47:05Z", "message": "Update backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\n\nCo-authored-by: awildturtok <1553491+awildturtok@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b8bc4e3b22072ddd38c2777e6a3cbf124b918fd", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/3b8bc4e3b22072ddd38c2777e6a3cbf124b918fd", "committedDate": "2020-08-11T10:47:07Z", "message": "Update backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\n\nCo-authored-by: awildturtok <1553491+awildturtok@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "769abef8519bbe2a05ea6df170289e10f7db10d5", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/769abef8519bbe2a05ea6df170289e10f7db10d5", "committedDate": "2020-08-11T10:47:07Z", "message": "reenabled all programmatic integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e169ced82ceec177feec33d29f9c3007e2b79622", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/e169ced82ceec177feec33d29f9c3007e2b79622", "committedDate": "2020-08-11T10:47:08Z", "message": "throw ConqueryError directly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c27d6eb9dbcb1d407e0276b8f00fa440f160e1c", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/5c27d6eb9dbcb1d407e0276b8f00fa440f160e1c", "committedDate": "2020-08-11T10:47:08Z", "message": "corrects error message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f4ef7f2435d5a1e26c822725ace840e27e8b6f1", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/3f4ef7f2435d5a1e26c822725ace840e27e8b6f1", "committedDate": "2020-08-11T10:47:08Z", "message": "simplify error comparsion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cf21dc563e16b218d1b38988688ea21601f153d", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/4cf21dc563e16b218d1b38988688ea21601f153d", "committedDate": "2020-08-11T10:47:09Z", "message": "remove assert"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46dfe4c746e51ba7646164261ddad1e831f61f1b", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/46dfe4c746e51ba7646164261ddad1e831f61f1b", "committedDate": "2020-08-11T10:47:09Z", "message": "remove redundant logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a521d46fd969f67fd262c0bc014a20c6e5119756", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/a521d46fd969f67fd262c0bc014a20c6e5119756", "committedDate": "2020-08-11T10:47:10Z", "message": "return default error message, when no message template was found"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04222b2977b5f9c453f653cb159cdba11fa51c7c", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/04222b2977b5f9c453f653cb159cdba11fa51c7c", "committedDate": "2020-08-11T10:47:10Z", "message": "slim ConqueryError catching"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "072a7e54a846af499a1bab714c973f229a95c9f6", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/072a7e54a846af499a1bab714c973f229a95c9f6", "committedDate": "2020-08-11T10:47:10Z", "message": "remove unnecessary log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "218ca9a0378fa48062db8d1cc07be2cc07d3f7ed", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/218ca9a0378fa48062db8d1cc07be2cc07d3f7ed", "committedDate": "2020-08-11T10:47:11Z", "message": "Update backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\n\nCo-authored-by: awildturtok <1553491+awildturtok@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7c1401ad1977f9dcf73e650de4b4c67586bc910", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/f7c1401ad1977f9dcf73e650de4b4c67586bc910", "committedDate": "2020-08-11T10:47:11Z", "message": "reorder error handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "863ac695a9ca8277d621f806abd95c9c69701171", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/863ac695a9ca8277d621f806abd95c9c69701171", "committedDate": "2020-08-11T10:47:11Z", "message": "adds comment regarding dependency warning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "151b6d452af207968151be32d70177509a10a56d", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/151b6d452af207968151be32d70177509a10a56d", "committedDate": "2020-08-11T10:47:12Z", "message": "Update backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\n\nCo-authored-by: awildturtok <1553491+awildturtok@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "261d04ad9fbafbbf5ec37e0cd0865e4ee2241e08", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/261d04ad9fbafbbf5ec37e0cd0865e4ee2241e08", "committedDate": "2020-08-11T10:47:12Z", "message": "Static Message when no error message template was provided"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edf68e7189dca5a5d307897c20ba741bb1a12cac", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/edf68e7189dca5a5d307897c20ba741bb1a12cac", "committedDate": "2020-08-11T10:47:12Z", "message": "makes error code getter final"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1f697f7bdf34341a0ee2040d643f8630db3eeb8", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/b1f697f7bdf34341a0ee2040d643f8630db3eeb8", "committedDate": "2020-08-11T10:47:13Z", "message": "move method to  convert Throwable to ConqueryError"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e60e746913f3309392fd7dec3a1510659ea2140a", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/e60e746913f3309392fd7dec3a1510659ea2140a", "committedDate": "2020-08-11T09:59:38Z", "message": "move method to  convert Throwable to ConqueryError"}, "afterCommit": {"oid": "b1f697f7bdf34341a0ee2040d643f8630db3eeb8", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/b1f697f7bdf34341a0ee2040d643f8630db3eeb8", "committedDate": "2020-08-11T10:47:13Z", "message": "move method to  convert Throwable to ConqueryError"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNzYyODcx", "url": "https://github.com/bakdata/conquery/pull/1305#pullrequestreview-480762871", "createdAt": "2020-09-02T12:22:14Z", "commit": {"oid": "b1f697f7bdf34341a0ee2040d643f8630db3eeb8"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMjoyMjoxNFrOHLsfiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMjoyMjozM1rOHLsgLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAyNTM1Mw==", "bodyText": "w\u00fcrde die Finish hier nicht das result schicken?", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r482025353", "createdAt": "2020-09-02T12:22:14Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java", "diffHunk": "@@ -44,27 +45,31 @@ public void react(Worker context) throws Exception {\n \t\ttry {\n \t\t\tplans = execution.createQueryPlans(new QueryPlanContext(context)).entrySet();\t\t\n \t\t} catch (Exception e) {\n-\t\t\tlog.error(\"Failed to create query plans for \" + execution.getId(), e );\n-\t\t\t// If one of the plans can not be created (maybe due to a Id that references a non existing concept) fail the whole job.\n-\t\t\tsendFailureToMaster(execution.getInitializedShardResult(null), execution, context, e);\n+\t\t\tConqueryError err = asConqueryError(e);\n+\t\t\tlog.warn(\"Failed to create query plans for {}.\", execution.getId(), err );\n+\t\t\tShardResult result = execution.getInitializedShardResult(null);\n+\t\t\tsendFailureToMaster(result, execution, context, err);\n \t\t\treturn;\n \t\t}\n+\t\t\n \t\t// Execute all plans.\n \t\tfor(Entry<ManagedExecutionId, QueryPlan> entry : plans) {\n \t\t\tShardResult result = execution.getInitializedShardResult(entry);\n \t\t\ttry {\n \t\t\t\tcontext.getQueryExecutor().execute(result, new QueryExecutionContext(context.getStorage()), entry);\n \t\t\t\tresult.getFuture().addListener(()->result.send(context), MoreExecutors.directExecutor());\n \t\t\t} catch(Exception e) {\n-\t\t\t\tlog.error(\"Error while executing {} (with subquery: {})\", execution.getId(), entry.getKey(), e );\n-\t\t\t\tsendFailureToMaster(result, execution, context, e);\n+\t\t\t\tConqueryError err = asConqueryError(e);\n+\t\t\t\tlog.warn(\"Error while executing {} (with subquery: {})\", execution.getId(), entry.getKey(), err );\n+\t\t\t\tsendFailureToMaster(result, execution, context,  asConqueryError(err));\n+\t\t\t\treturn;\n \t\t\t}\n \t\t}\n \t}\n \n-\tprivate static void sendFailureToMaster(ShardResult result, ManagedExecution<?> execution, Worker context, Exception e) {\n-\t\tresult.setFinishTime(LocalDateTime.now());\n-\t\tresult.setResults(Collections.singletonList(EntityResult.failed(-1, e)));\n+\tprivate static void sendFailureToMaster(ShardResult result, ManagedExecution<?> execution, Worker context, ConqueryError error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1f697f7bdf34341a0ee2040d643f8630db3eeb8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAyNTUxOQ==", "bodyText": "bzw, warum failst du die execution nicht stattdessen?", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r482025519", "createdAt": "2020-09-02T12:22:33Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java", "diffHunk": "@@ -44,27 +45,31 @@ public void react(Worker context) throws Exception {\n \t\ttry {\n \t\t\tplans = execution.createQueryPlans(new QueryPlanContext(context)).entrySet();\t\t\n \t\t} catch (Exception e) {\n-\t\t\tlog.error(\"Failed to create query plans for \" + execution.getId(), e );\n-\t\t\t// If one of the plans can not be created (maybe due to a Id that references a non existing concept) fail the whole job.\n-\t\t\tsendFailureToMaster(execution.getInitializedShardResult(null), execution, context, e);\n+\t\t\tConqueryError err = asConqueryError(e);\n+\t\t\tlog.warn(\"Failed to create query plans for {}.\", execution.getId(), err );\n+\t\t\tShardResult result = execution.getInitializedShardResult(null);\n+\t\t\tsendFailureToMaster(result, execution, context, err);\n \t\t\treturn;\n \t\t}\n+\t\t\n \t\t// Execute all plans.\n \t\tfor(Entry<ManagedExecutionId, QueryPlan> entry : plans) {\n \t\t\tShardResult result = execution.getInitializedShardResult(entry);\n \t\t\ttry {\n \t\t\t\tcontext.getQueryExecutor().execute(result, new QueryExecutionContext(context.getStorage()), entry);\n \t\t\t\tresult.getFuture().addListener(()->result.send(context), MoreExecutors.directExecutor());\n \t\t\t} catch(Exception e) {\n-\t\t\t\tlog.error(\"Error while executing {} (with subquery: {})\", execution.getId(), entry.getKey(), e );\n-\t\t\t\tsendFailureToMaster(result, execution, context, e);\n+\t\t\t\tConqueryError err = asConqueryError(e);\n+\t\t\t\tlog.warn(\"Error while executing {} (with subquery: {})\", execution.getId(), entry.getKey(), err );\n+\t\t\t\tsendFailureToMaster(result, execution, context,  asConqueryError(err));\n+\t\t\t\treturn;\n \t\t\t}\n \t\t}\n \t}\n \n-\tprivate static void sendFailureToMaster(ShardResult result, ManagedExecution<?> execution, Worker context, Exception e) {\n-\t\tresult.setFinishTime(LocalDateTime.now());\n-\t\tresult.setResults(Collections.singletonList(EntityResult.failed(-1, e)));\n+\tprivate static void sendFailureToMaster(ShardResult result, ManagedExecution<?> execution, Worker context, ConqueryError error) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAyNTM1Mw=="}, "originalCommit": {"oid": "b1f697f7bdf34341a0ee2040d643f8630db3eeb8"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dea66e66f480806d84549f920b6cdc994778ba7", "author": {"user": {"login": "awildturtok", "name": null}}, "url": "https://github.com/bakdata/conquery/commit/8dea66e66f480806d84549f920b6cdc994778ba7", "committedDate": "2020-09-02T12:31:11Z", "message": "Merge branch 'develop' into feature/error-info-in-status"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a926de210e9fb6d2f0dab1cf5cda7896b068006", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/4a926de210e9fb6d2f0dab1cf5cda7896b068006", "committedDate": "2020-09-03T12:24:29Z", "message": "remove used parameter from function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d79c01fd2e1dfd6c9c6e5adddcee03f46fd7acec", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/d79c01fd2e1dfd6c9c6e5adddcee03f46fd7acec", "committedDate": "2020-09-03T12:26:38Z", "message": "Merge branch 'develop' into feature/error-info-in-status"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4545, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}