{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MTc5NjU0", "number": 1292, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNToxMToyNFrOERF1LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNToxNDo0NVrOERF7CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzU2NzgxOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/oidc/passwordflow/OIDCResourceOwnerPasswordCredeantialRealm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNToxMToyNFrOG1nCtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNToxMToyNFrOG1nCtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2NzM4Mg==", "bodyText": "Konstante", "url": "https://github.com/bakdata/conquery/pull/1292#discussion_r458867382", "createdAt": "2020-07-22T15:11:24Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/auth/oidc/passwordflow/OIDCResourceOwnerPasswordCredeantialRealm.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package com.bakdata.conquery.models.auth.oidc.passwordflow;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.ConqueryAuthenticationInfo;\n+import com.bakdata.conquery.models.auth.ConqueryAuthenticationRealm;\n+import com.bakdata.conquery.models.auth.basic.TokenHandler;\n+import com.bakdata.conquery.models.auth.basic.TokenHandler.JwtToken;\n+import com.bakdata.conquery.models.auth.basic.UsernamePasswordChecker;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.util.SkippingCredentialsMatcher;\n+import com.bakdata.conquery.models.identifiable.ids.specific.UserId;\n+import com.bakdata.conquery.resources.unprotected.AuthServlet.AuthAdminUnprotectedResourceProvider;\n+import com.bakdata.conquery.resources.unprotected.AuthServlet.AuthApiUnprotectedResourceProvider;\n+import com.bakdata.conquery.resources.unprotected.LoginResource;\n+import com.bakdata.conquery.resources.unprotected.TokenResource;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.nimbusds.oauth2.sdk.AccessTokenResponse;\n+import com.nimbusds.oauth2.sdk.AuthorizationGrant;\n+import com.nimbusds.oauth2.sdk.ParseException;\n+import com.nimbusds.oauth2.sdk.ResourceOwnerPasswordCredentialsGrant;\n+import com.nimbusds.oauth2.sdk.Scope;\n+import com.nimbusds.oauth2.sdk.TokenErrorResponse;\n+import com.nimbusds.oauth2.sdk.TokenIntrospectionErrorResponse;\n+import com.nimbusds.oauth2.sdk.TokenIntrospectionRequest;\n+import com.nimbusds.oauth2.sdk.TokenIntrospectionResponse;\n+import com.nimbusds.oauth2.sdk.TokenIntrospectionSuccessResponse;\n+import com.nimbusds.oauth2.sdk.TokenRequest;\n+import com.nimbusds.oauth2.sdk.TokenResponse;\n+import com.nimbusds.oauth2.sdk.auth.ClientAuthentication;\n+import com.nimbusds.oauth2.sdk.auth.ClientSecretBasic;\n+import com.nimbusds.oauth2.sdk.auth.Secret;\n+import com.nimbusds.oauth2.sdk.id.ClientID;\n+import com.nimbusds.oauth2.sdk.token.AccessToken;\n+import com.nimbusds.oauth2.sdk.token.TypelessAccessToken;\n+import io.dropwizard.jersey.DropwizardResourceConfig;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.shiro.authc.AuthenticationException;\n+import org.apache.shiro.authc.AuthenticationToken;\n+import org.keycloak.authorization.client.AuthzClient;\n+\n+@Slf4j\n+@Getter\n+@Setter\n+@RequiredArgsConstructor\n+public class OIDCResourceOwnerPasswordCredeantialRealm extends ConqueryAuthenticationRealm implements AuthApiUnprotectedResourceProvider, AuthAdminUnprotectedResourceProvider, UsernamePasswordChecker {\n+\n+\tprivate static final Class<? extends AuthenticationToken> TOKEN_CLASS = JwtToken.class;\n+\t\n+\tprivate final MasterMetaStorage storage;\n+\tprivate final OIDCResourceOwnerPasswordCredeantialRealmFactory config;\n+\t\n+\tprivate ClientAuthentication clientAuthentication;\n+\tprivate AuthzClient authzClient;\n+\t\n+\tprivate LoadingCache<JwtToken, TokenIntrospectionSuccessResponse> tokenCache = CacheBuilder.newBuilder()\n+\t\t.expireAfterWrite(10, TimeUnit.MINUTES)\n+\t\t.build(new TokenValidator());\n+\t\n+\t@Override\n+\tprotected void onInit() {\n+\t\tsuper.onInit();\n+\t\tthis.setCredentialsMatcher(new SkippingCredentialsMatcher());\n+\t\tthis.setAuthenticationTokenClass(TOKEN_CLASS);\n+\t\tthis.clientAuthentication = new ClientSecretBasic(new ClientID(config.getResource()), new Secret((String)config.getCredentials().get(\"secret\")));\n+\t\t\n+\t\tauthzClient = AuthzClient.create(config);\n+\t}\n+\t\n+\t@Override\n+\t@SneakyThrows\n+\tprotected ConqueryAuthenticationInfo doGetConqueryAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {\n+\t\t\n+\t\tTokenIntrospectionSuccessResponse successResponse = tokenCache.get((JwtToken) token);\n+\n+\t\tString username = successResponse.getUsername();\n+\t\tif(StringUtils.isBlank(username)) {\n+\t\t\tusername = successResponse.getStringParameter(\"preferred_username\");\n+\t\t}\n+\t\tif(StringUtils.isBlank(username)) {\n+\t\t\tthrow new IllegalStateException(\"Unable to retrieve a user identifier from validated token. Dismissing the token.\");\n+\t\t}\n+\t\t\n+\t\tUserId userId = new UserId(username);\n+\t\tUser user = storage.getUser(userId);\n+\t\t// try to construct a new User if none could be found in the storage\n+\t\tif (user == null) {\n+\t\t\tString userLabel = successResponse.getStringParameter(\"name\");\n+\t\t\tuser = new User(username, userLabel != null ?  userLabel : username);\n+\t\t\tstorage.addUser(user);\n+\t\t\tlog.info(\n+\t\t\t\t\"Created new user: {}\",\n+\t\t\t\tuser);\n+\t\t}\n+\n+\t\treturn new ConqueryAuthenticationInfo(user.getId(), token, this, false);\n+\t}\n+\n+\tprivate TokenIntrospectionSuccessResponse validateToken(AuthenticationToken token) throws URISyntaxException, MalformedURLException, ParseException, IOException {\n+\t\tURI tokenIntrospectEndpoint =  new URL(new URL(config.getAuthServerUrl()),\"realms/EVA/protocol/openid-connect/token/introspect\").toURI();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "795c115f6a10d54c80d32adeecd55794f517167c"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzU3MTIxOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/oidc/passwordflow/OIDCResourceOwnerPasswordCredeantialRealm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNToxMjoxNFrOG1nE7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNToxMjoxNFrOG1nE7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2Nzk0OQ==", "bodyText": "Format", "url": "https://github.com/bakdata/conquery/pull/1292#discussion_r458867949", "createdAt": "2020-07-22T15:12:14Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/auth/oidc/passwordflow/OIDCResourceOwnerPasswordCredeantialRealm.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package com.bakdata.conquery.models.auth.oidc.passwordflow;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.ConqueryAuthenticationInfo;\n+import com.bakdata.conquery.models.auth.ConqueryAuthenticationRealm;\n+import com.bakdata.conquery.models.auth.basic.TokenHandler;\n+import com.bakdata.conquery.models.auth.basic.TokenHandler.JwtToken;\n+import com.bakdata.conquery.models.auth.basic.UsernamePasswordChecker;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.util.SkippingCredentialsMatcher;\n+import com.bakdata.conquery.models.identifiable.ids.specific.UserId;\n+import com.bakdata.conquery.resources.unprotected.AuthServlet.AuthAdminUnprotectedResourceProvider;\n+import com.bakdata.conquery.resources.unprotected.AuthServlet.AuthApiUnprotectedResourceProvider;\n+import com.bakdata.conquery.resources.unprotected.LoginResource;\n+import com.bakdata.conquery.resources.unprotected.TokenResource;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.nimbusds.oauth2.sdk.AccessTokenResponse;\n+import com.nimbusds.oauth2.sdk.AuthorizationGrant;\n+import com.nimbusds.oauth2.sdk.ParseException;\n+import com.nimbusds.oauth2.sdk.ResourceOwnerPasswordCredentialsGrant;\n+import com.nimbusds.oauth2.sdk.Scope;\n+import com.nimbusds.oauth2.sdk.TokenErrorResponse;\n+import com.nimbusds.oauth2.sdk.TokenIntrospectionErrorResponse;\n+import com.nimbusds.oauth2.sdk.TokenIntrospectionRequest;\n+import com.nimbusds.oauth2.sdk.TokenIntrospectionResponse;\n+import com.nimbusds.oauth2.sdk.TokenIntrospectionSuccessResponse;\n+import com.nimbusds.oauth2.sdk.TokenRequest;\n+import com.nimbusds.oauth2.sdk.TokenResponse;\n+import com.nimbusds.oauth2.sdk.auth.ClientAuthentication;\n+import com.nimbusds.oauth2.sdk.auth.ClientSecretBasic;\n+import com.nimbusds.oauth2.sdk.auth.Secret;\n+import com.nimbusds.oauth2.sdk.id.ClientID;\n+import com.nimbusds.oauth2.sdk.token.AccessToken;\n+import com.nimbusds.oauth2.sdk.token.TypelessAccessToken;\n+import io.dropwizard.jersey.DropwizardResourceConfig;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.shiro.authc.AuthenticationException;\n+import org.apache.shiro.authc.AuthenticationToken;\n+import org.keycloak.authorization.client.AuthzClient;\n+\n+@Slf4j\n+@Getter\n+@Setter\n+@RequiredArgsConstructor\n+public class OIDCResourceOwnerPasswordCredeantialRealm extends ConqueryAuthenticationRealm implements AuthApiUnprotectedResourceProvider, AuthAdminUnprotectedResourceProvider, UsernamePasswordChecker {\n+\n+\tprivate static final Class<? extends AuthenticationToken> TOKEN_CLASS = JwtToken.class;\n+\t\n+\tprivate final MasterMetaStorage storage;\n+\tprivate final OIDCResourceOwnerPasswordCredeantialRealmFactory config;\n+\t\n+\tprivate ClientAuthentication clientAuthentication;\n+\tprivate AuthzClient authzClient;\n+\t\n+\tprivate LoadingCache<JwtToken, TokenIntrospectionSuccessResponse> tokenCache = CacheBuilder.newBuilder()\n+\t\t.expireAfterWrite(10, TimeUnit.MINUTES)\n+\t\t.build(new TokenValidator());\n+\t\n+\t@Override\n+\tprotected void onInit() {\n+\t\tsuper.onInit();\n+\t\tthis.setCredentialsMatcher(new SkippingCredentialsMatcher());\n+\t\tthis.setAuthenticationTokenClass(TOKEN_CLASS);\n+\t\tthis.clientAuthentication = new ClientSecretBasic(new ClientID(config.getResource()), new Secret((String)config.getCredentials().get(\"secret\")));\n+\t\t\n+\t\tauthzClient = AuthzClient.create(config);\n+\t}\n+\t\n+\t@Override\n+\t@SneakyThrows\n+\tprotected ConqueryAuthenticationInfo doGetConqueryAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {\n+\t\t\n+\t\tTokenIntrospectionSuccessResponse successResponse = tokenCache.get((JwtToken) token);\n+\n+\t\tString username = successResponse.getUsername();\n+\t\tif(StringUtils.isBlank(username)) {\n+\t\t\tusername = successResponse.getStringParameter(\"preferred_username\");\n+\t\t}\n+\t\tif(StringUtils.isBlank(username)) {\n+\t\t\tthrow new IllegalStateException(\"Unable to retrieve a user identifier from validated token. Dismissing the token.\");\n+\t\t}\n+\t\t\n+\t\tUserId userId = new UserId(username);\n+\t\tUser user = storage.getUser(userId);\n+\t\t// try to construct a new User if none could be found in the storage\n+\t\tif (user == null) {\n+\t\t\tString userLabel = successResponse.getStringParameter(\"name\");\n+\t\t\tuser = new User(username, userLabel != null ?  userLabel : username);\n+\t\t\tstorage.addUser(user);\n+\t\t\tlog.info(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "795c115f6a10d54c80d32adeecd55794f517167c"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzU4MDYyOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/oidc/passwordflow/OIDCResourceOwnerPasswordCredeantialRealm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNToxNDoxNlrOG1nK9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNToxNDoxNlrOG1nK9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2OTQ5Mg==", "bodyText": "hat der response typ keine bessere info f\u00fcr success/fail?", "url": "https://github.com/bakdata/conquery/pull/1292#discussion_r458869492", "createdAt": "2020-07-22T15:14:16Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/auth/oidc/passwordflow/OIDCResourceOwnerPasswordCredeantialRealm.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package com.bakdata.conquery.models.auth.oidc.passwordflow;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.ConqueryAuthenticationInfo;\n+import com.bakdata.conquery.models.auth.ConqueryAuthenticationRealm;\n+import com.bakdata.conquery.models.auth.basic.TokenHandler;\n+import com.bakdata.conquery.models.auth.basic.TokenHandler.JwtToken;\n+import com.bakdata.conquery.models.auth.basic.UsernamePasswordChecker;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.util.SkippingCredentialsMatcher;\n+import com.bakdata.conquery.models.identifiable.ids.specific.UserId;\n+import com.bakdata.conquery.resources.unprotected.AuthServlet.AuthAdminUnprotectedResourceProvider;\n+import com.bakdata.conquery.resources.unprotected.AuthServlet.AuthApiUnprotectedResourceProvider;\n+import com.bakdata.conquery.resources.unprotected.LoginResource;\n+import com.bakdata.conquery.resources.unprotected.TokenResource;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.nimbusds.oauth2.sdk.AccessTokenResponse;\n+import com.nimbusds.oauth2.sdk.AuthorizationGrant;\n+import com.nimbusds.oauth2.sdk.ParseException;\n+import com.nimbusds.oauth2.sdk.ResourceOwnerPasswordCredentialsGrant;\n+import com.nimbusds.oauth2.sdk.Scope;\n+import com.nimbusds.oauth2.sdk.TokenErrorResponse;\n+import com.nimbusds.oauth2.sdk.TokenIntrospectionErrorResponse;\n+import com.nimbusds.oauth2.sdk.TokenIntrospectionRequest;\n+import com.nimbusds.oauth2.sdk.TokenIntrospectionResponse;\n+import com.nimbusds.oauth2.sdk.TokenIntrospectionSuccessResponse;\n+import com.nimbusds.oauth2.sdk.TokenRequest;\n+import com.nimbusds.oauth2.sdk.TokenResponse;\n+import com.nimbusds.oauth2.sdk.auth.ClientAuthentication;\n+import com.nimbusds.oauth2.sdk.auth.ClientSecretBasic;\n+import com.nimbusds.oauth2.sdk.auth.Secret;\n+import com.nimbusds.oauth2.sdk.id.ClientID;\n+import com.nimbusds.oauth2.sdk.token.AccessToken;\n+import com.nimbusds.oauth2.sdk.token.TypelessAccessToken;\n+import io.dropwizard.jersey.DropwizardResourceConfig;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.shiro.authc.AuthenticationException;\n+import org.apache.shiro.authc.AuthenticationToken;\n+import org.keycloak.authorization.client.AuthzClient;\n+\n+@Slf4j\n+@Getter\n+@Setter\n+@RequiredArgsConstructor\n+public class OIDCResourceOwnerPasswordCredeantialRealm extends ConqueryAuthenticationRealm implements AuthApiUnprotectedResourceProvider, AuthAdminUnprotectedResourceProvider, UsernamePasswordChecker {\n+\n+\tprivate static final Class<? extends AuthenticationToken> TOKEN_CLASS = JwtToken.class;\n+\t\n+\tprivate final MasterMetaStorage storage;\n+\tprivate final OIDCResourceOwnerPasswordCredeantialRealmFactory config;\n+\t\n+\tprivate ClientAuthentication clientAuthentication;\n+\tprivate AuthzClient authzClient;\n+\t\n+\tprivate LoadingCache<JwtToken, TokenIntrospectionSuccessResponse> tokenCache = CacheBuilder.newBuilder()\n+\t\t.expireAfterWrite(10, TimeUnit.MINUTES)\n+\t\t.build(new TokenValidator());\n+\t\n+\t@Override\n+\tprotected void onInit() {\n+\t\tsuper.onInit();\n+\t\tthis.setCredentialsMatcher(new SkippingCredentialsMatcher());\n+\t\tthis.setAuthenticationTokenClass(TOKEN_CLASS);\n+\t\tthis.clientAuthentication = new ClientSecretBasic(new ClientID(config.getResource()), new Secret((String)config.getCredentials().get(\"secret\")));\n+\t\t\n+\t\tauthzClient = AuthzClient.create(config);\n+\t}\n+\t\n+\t@Override\n+\t@SneakyThrows\n+\tprotected ConqueryAuthenticationInfo doGetConqueryAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {\n+\t\t\n+\t\tTokenIntrospectionSuccessResponse successResponse = tokenCache.get((JwtToken) token);\n+\n+\t\tString username = successResponse.getUsername();\n+\t\tif(StringUtils.isBlank(username)) {\n+\t\t\tusername = successResponse.getStringParameter(\"preferred_username\");\n+\t\t}\n+\t\tif(StringUtils.isBlank(username)) {\n+\t\t\tthrow new IllegalStateException(\"Unable to retrieve a user identifier from validated token. Dismissing the token.\");\n+\t\t}\n+\t\t\n+\t\tUserId userId = new UserId(username);\n+\t\tUser user = storage.getUser(userId);\n+\t\t// try to construct a new User if none could be found in the storage\n+\t\tif (user == null) {\n+\t\t\tString userLabel = successResponse.getStringParameter(\"name\");\n+\t\t\tuser = new User(username, userLabel != null ?  userLabel : username);\n+\t\t\tstorage.addUser(user);\n+\t\t\tlog.info(\n+\t\t\t\t\"Created new user: {}\",\n+\t\t\t\tuser);\n+\t\t}\n+\n+\t\treturn new ConqueryAuthenticationInfo(user.getId(), token, this, false);\n+\t}\n+\n+\tprivate TokenIntrospectionSuccessResponse validateToken(AuthenticationToken token) throws URISyntaxException, MalformedURLException, ParseException, IOException {\n+\t\tURI tokenIntrospectEndpoint =  new URL(new URL(config.getAuthServerUrl()),\"realms/EVA/protocol/openid-connect/token/introspect\").toURI();\n+\t\tTokenIntrospectionRequest request = new TokenIntrospectionRequest(tokenIntrospectEndpoint , clientAuthentication, new TypelessAccessToken((String) token.getCredentials()));\n+\t\t\n+\t\tTokenIntrospectionResponse response = TokenIntrospectionResponse.parse(request.toHTTPRequest().send());\n+\t\t\n+\t\tif (response instanceof TokenIntrospectionErrorResponse) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "795c115f6a10d54c80d32adeecd55794f517167c"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzU4MTI4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/oidc/passwordflow/OIDCResourceOwnerPasswordCredeantialRealm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNToxNDoyNVrOG1nLYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNToxNDoyNVrOG1nLYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2OTYwMQ==", "bodyText": "inline", "url": "https://github.com/bakdata/conquery/pull/1292#discussion_r458869601", "createdAt": "2020-07-22T15:14:25Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/auth/oidc/passwordflow/OIDCResourceOwnerPasswordCredeantialRealm.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package com.bakdata.conquery.models.auth.oidc.passwordflow;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.ConqueryAuthenticationInfo;\n+import com.bakdata.conquery.models.auth.ConqueryAuthenticationRealm;\n+import com.bakdata.conquery.models.auth.basic.TokenHandler;\n+import com.bakdata.conquery.models.auth.basic.TokenHandler.JwtToken;\n+import com.bakdata.conquery.models.auth.basic.UsernamePasswordChecker;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.util.SkippingCredentialsMatcher;\n+import com.bakdata.conquery.models.identifiable.ids.specific.UserId;\n+import com.bakdata.conquery.resources.unprotected.AuthServlet.AuthAdminUnprotectedResourceProvider;\n+import com.bakdata.conquery.resources.unprotected.AuthServlet.AuthApiUnprotectedResourceProvider;\n+import com.bakdata.conquery.resources.unprotected.LoginResource;\n+import com.bakdata.conquery.resources.unprotected.TokenResource;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.nimbusds.oauth2.sdk.AccessTokenResponse;\n+import com.nimbusds.oauth2.sdk.AuthorizationGrant;\n+import com.nimbusds.oauth2.sdk.ParseException;\n+import com.nimbusds.oauth2.sdk.ResourceOwnerPasswordCredentialsGrant;\n+import com.nimbusds.oauth2.sdk.Scope;\n+import com.nimbusds.oauth2.sdk.TokenErrorResponse;\n+import com.nimbusds.oauth2.sdk.TokenIntrospectionErrorResponse;\n+import com.nimbusds.oauth2.sdk.TokenIntrospectionRequest;\n+import com.nimbusds.oauth2.sdk.TokenIntrospectionResponse;\n+import com.nimbusds.oauth2.sdk.TokenIntrospectionSuccessResponse;\n+import com.nimbusds.oauth2.sdk.TokenRequest;\n+import com.nimbusds.oauth2.sdk.TokenResponse;\n+import com.nimbusds.oauth2.sdk.auth.ClientAuthentication;\n+import com.nimbusds.oauth2.sdk.auth.ClientSecretBasic;\n+import com.nimbusds.oauth2.sdk.auth.Secret;\n+import com.nimbusds.oauth2.sdk.id.ClientID;\n+import com.nimbusds.oauth2.sdk.token.AccessToken;\n+import com.nimbusds.oauth2.sdk.token.TypelessAccessToken;\n+import io.dropwizard.jersey.DropwizardResourceConfig;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.shiro.authc.AuthenticationException;\n+import org.apache.shiro.authc.AuthenticationToken;\n+import org.keycloak.authorization.client.AuthzClient;\n+\n+@Slf4j\n+@Getter\n+@Setter\n+@RequiredArgsConstructor\n+public class OIDCResourceOwnerPasswordCredeantialRealm extends ConqueryAuthenticationRealm implements AuthApiUnprotectedResourceProvider, AuthAdminUnprotectedResourceProvider, UsernamePasswordChecker {\n+\n+\tprivate static final Class<? extends AuthenticationToken> TOKEN_CLASS = JwtToken.class;\n+\t\n+\tprivate final MasterMetaStorage storage;\n+\tprivate final OIDCResourceOwnerPasswordCredeantialRealmFactory config;\n+\t\n+\tprivate ClientAuthentication clientAuthentication;\n+\tprivate AuthzClient authzClient;\n+\t\n+\tprivate LoadingCache<JwtToken, TokenIntrospectionSuccessResponse> tokenCache = CacheBuilder.newBuilder()\n+\t\t.expireAfterWrite(10, TimeUnit.MINUTES)\n+\t\t.build(new TokenValidator());\n+\t\n+\t@Override\n+\tprotected void onInit() {\n+\t\tsuper.onInit();\n+\t\tthis.setCredentialsMatcher(new SkippingCredentialsMatcher());\n+\t\tthis.setAuthenticationTokenClass(TOKEN_CLASS);\n+\t\tthis.clientAuthentication = new ClientSecretBasic(new ClientID(config.getResource()), new Secret((String)config.getCredentials().get(\"secret\")));\n+\t\t\n+\t\tauthzClient = AuthzClient.create(config);\n+\t}\n+\t\n+\t@Override\n+\t@SneakyThrows\n+\tprotected ConqueryAuthenticationInfo doGetConqueryAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {\n+\t\t\n+\t\tTokenIntrospectionSuccessResponse successResponse = tokenCache.get((JwtToken) token);\n+\n+\t\tString username = successResponse.getUsername();\n+\t\tif(StringUtils.isBlank(username)) {\n+\t\t\tusername = successResponse.getStringParameter(\"preferred_username\");\n+\t\t}\n+\t\tif(StringUtils.isBlank(username)) {\n+\t\t\tthrow new IllegalStateException(\"Unable to retrieve a user identifier from validated token. Dismissing the token.\");\n+\t\t}\n+\t\t\n+\t\tUserId userId = new UserId(username);\n+\t\tUser user = storage.getUser(userId);\n+\t\t// try to construct a new User if none could be found in the storage\n+\t\tif (user == null) {\n+\t\t\tString userLabel = successResponse.getStringParameter(\"name\");\n+\t\t\tuser = new User(username, userLabel != null ?  userLabel : username);\n+\t\t\tstorage.addUser(user);\n+\t\t\tlog.info(\n+\t\t\t\t\"Created new user: {}\",\n+\t\t\t\tuser);\n+\t\t}\n+\n+\t\treturn new ConqueryAuthenticationInfo(user.getId(), token, this, false);\n+\t}\n+\n+\tprivate TokenIntrospectionSuccessResponse validateToken(AuthenticationToken token) throws URISyntaxException, MalformedURLException, ParseException, IOException {\n+\t\tURI tokenIntrospectEndpoint =  new URL(new URL(config.getAuthServerUrl()),\"realms/EVA/protocol/openid-connect/token/introspect\").toURI();\n+\t\tTokenIntrospectionRequest request = new TokenIntrospectionRequest(tokenIntrospectEndpoint , clientAuthentication, new TypelessAccessToken((String) token.getCredentials()));\n+\t\t\n+\t\tTokenIntrospectionResponse response = TokenIntrospectionResponse.parse(request.toHTTPRequest().send());\n+\t\t\n+\t\tif (response instanceof TokenIntrospectionErrorResponse) {\n+\t\t\tlog.error(((TokenIntrospectionErrorResponse) response).getErrorObject().toString());\n+\t\t\tthrow new IllegalStateException(\"Unable to retrieve access token from auth server.\");\n+\t\t}\n+\t\telse if (!(response instanceof TokenIntrospectionSuccessResponse)) {\n+\t\t\tlog.error(\"Unknown token response {}.\", response.getClass().getName());\n+\t\t\tthrow new IllegalStateException(\"Unknown token response. See log.\");\n+\t\t}\n+\n+\t\tTokenIntrospectionSuccessResponse successResponse = (TokenIntrospectionSuccessResponse) response;\n+\t\treturn successResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "795c115f6a10d54c80d32adeecd55794f517167c"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzU4MjgxOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/oidc/passwordflow/OIDCResourceOwnerPasswordCredeantialRealm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNToxNDo0NVrOG1nMXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNToxNDo0NVrOG1nMXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2OTg1Mw==", "bodyText": "Konstante", "url": "https://github.com/bakdata/conquery/pull/1292#discussion_r458869853", "createdAt": "2020-07-22T15:14:45Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/auth/oidc/passwordflow/OIDCResourceOwnerPasswordCredeantialRealm.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package com.bakdata.conquery.models.auth.oidc.passwordflow;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.ConqueryAuthenticationInfo;\n+import com.bakdata.conquery.models.auth.ConqueryAuthenticationRealm;\n+import com.bakdata.conquery.models.auth.basic.TokenHandler;\n+import com.bakdata.conquery.models.auth.basic.TokenHandler.JwtToken;\n+import com.bakdata.conquery.models.auth.basic.UsernamePasswordChecker;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.util.SkippingCredentialsMatcher;\n+import com.bakdata.conquery.models.identifiable.ids.specific.UserId;\n+import com.bakdata.conquery.resources.unprotected.AuthServlet.AuthAdminUnprotectedResourceProvider;\n+import com.bakdata.conquery.resources.unprotected.AuthServlet.AuthApiUnprotectedResourceProvider;\n+import com.bakdata.conquery.resources.unprotected.LoginResource;\n+import com.bakdata.conquery.resources.unprotected.TokenResource;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import com.nimbusds.oauth2.sdk.AccessTokenResponse;\n+import com.nimbusds.oauth2.sdk.AuthorizationGrant;\n+import com.nimbusds.oauth2.sdk.ParseException;\n+import com.nimbusds.oauth2.sdk.ResourceOwnerPasswordCredentialsGrant;\n+import com.nimbusds.oauth2.sdk.Scope;\n+import com.nimbusds.oauth2.sdk.TokenErrorResponse;\n+import com.nimbusds.oauth2.sdk.TokenIntrospectionErrorResponse;\n+import com.nimbusds.oauth2.sdk.TokenIntrospectionRequest;\n+import com.nimbusds.oauth2.sdk.TokenIntrospectionResponse;\n+import com.nimbusds.oauth2.sdk.TokenIntrospectionSuccessResponse;\n+import com.nimbusds.oauth2.sdk.TokenRequest;\n+import com.nimbusds.oauth2.sdk.TokenResponse;\n+import com.nimbusds.oauth2.sdk.auth.ClientAuthentication;\n+import com.nimbusds.oauth2.sdk.auth.ClientSecretBasic;\n+import com.nimbusds.oauth2.sdk.auth.Secret;\n+import com.nimbusds.oauth2.sdk.id.ClientID;\n+import com.nimbusds.oauth2.sdk.token.AccessToken;\n+import com.nimbusds.oauth2.sdk.token.TypelessAccessToken;\n+import io.dropwizard.jersey.DropwizardResourceConfig;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.shiro.authc.AuthenticationException;\n+import org.apache.shiro.authc.AuthenticationToken;\n+import org.keycloak.authorization.client.AuthzClient;\n+\n+@Slf4j\n+@Getter\n+@Setter\n+@RequiredArgsConstructor\n+public class OIDCResourceOwnerPasswordCredeantialRealm extends ConqueryAuthenticationRealm implements AuthApiUnprotectedResourceProvider, AuthAdminUnprotectedResourceProvider, UsernamePasswordChecker {\n+\n+\tprivate static final Class<? extends AuthenticationToken> TOKEN_CLASS = JwtToken.class;\n+\t\n+\tprivate final MasterMetaStorage storage;\n+\tprivate final OIDCResourceOwnerPasswordCredeantialRealmFactory config;\n+\t\n+\tprivate ClientAuthentication clientAuthentication;\n+\tprivate AuthzClient authzClient;\n+\t\n+\tprivate LoadingCache<JwtToken, TokenIntrospectionSuccessResponse> tokenCache = CacheBuilder.newBuilder()\n+\t\t.expireAfterWrite(10, TimeUnit.MINUTES)\n+\t\t.build(new TokenValidator());\n+\t\n+\t@Override\n+\tprotected void onInit() {\n+\t\tsuper.onInit();\n+\t\tthis.setCredentialsMatcher(new SkippingCredentialsMatcher());\n+\t\tthis.setAuthenticationTokenClass(TOKEN_CLASS);\n+\t\tthis.clientAuthentication = new ClientSecretBasic(new ClientID(config.getResource()), new Secret((String)config.getCredentials().get(\"secret\")));\n+\t\t\n+\t\tauthzClient = AuthzClient.create(config);\n+\t}\n+\t\n+\t@Override\n+\t@SneakyThrows\n+\tprotected ConqueryAuthenticationInfo doGetConqueryAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {\n+\t\t\n+\t\tTokenIntrospectionSuccessResponse successResponse = tokenCache.get((JwtToken) token);\n+\n+\t\tString username = successResponse.getUsername();\n+\t\tif(StringUtils.isBlank(username)) {\n+\t\t\tusername = successResponse.getStringParameter(\"preferred_username\");\n+\t\t}\n+\t\tif(StringUtils.isBlank(username)) {\n+\t\t\tthrow new IllegalStateException(\"Unable to retrieve a user identifier from validated token. Dismissing the token.\");\n+\t\t}\n+\t\t\n+\t\tUserId userId = new UserId(username);\n+\t\tUser user = storage.getUser(userId);\n+\t\t// try to construct a new User if none could be found in the storage\n+\t\tif (user == null) {\n+\t\t\tString userLabel = successResponse.getStringParameter(\"name\");\n+\t\t\tuser = new User(username, userLabel != null ?  userLabel : username);\n+\t\t\tstorage.addUser(user);\n+\t\t\tlog.info(\n+\t\t\t\t\"Created new user: {}\",\n+\t\t\t\tuser);\n+\t\t}\n+\n+\t\treturn new ConqueryAuthenticationInfo(user.getId(), token, this, false);\n+\t}\n+\n+\tprivate TokenIntrospectionSuccessResponse validateToken(AuthenticationToken token) throws URISyntaxException, MalformedURLException, ParseException, IOException {\n+\t\tURI tokenIntrospectEndpoint =  new URL(new URL(config.getAuthServerUrl()),\"realms/EVA/protocol/openid-connect/token/introspect\").toURI();\n+\t\tTokenIntrospectionRequest request = new TokenIntrospectionRequest(tokenIntrospectEndpoint , clientAuthentication, new TypelessAccessToken((String) token.getCredentials()));\n+\t\t\n+\t\tTokenIntrospectionResponse response = TokenIntrospectionResponse.parse(request.toHTTPRequest().send());\n+\t\t\n+\t\tif (response instanceof TokenIntrospectionErrorResponse) {\n+\t\t\tlog.error(((TokenIntrospectionErrorResponse) response).getErrorObject().toString());\n+\t\t\tthrow new IllegalStateException(\"Unable to retrieve access token from auth server.\");\n+\t\t}\n+\t\telse if (!(response instanceof TokenIntrospectionSuccessResponse)) {\n+\t\t\tlog.error(\"Unknown token response {}.\", response.getClass().getName());\n+\t\t\tthrow new IllegalStateException(\"Unknown token response. See log.\");\n+\t\t}\n+\n+\t\tTokenIntrospectionSuccessResponse successResponse = (TokenIntrospectionSuccessResponse) response;\n+\t\treturn successResponse;\n+\t}\n+\n+\t@Override\n+\tpublic AuthenticationToken extractToken(ContainerRequestContext request) {\n+\t\treturn TokenHandler.extractToken(request);\n+\t}\n+\t\n+\t@Override\n+\tpublic void registerAdminUnprotectedAuthenticationResources(DropwizardResourceConfig jerseyConfig) {\n+\t\tjerseyConfig.register(new TokenResource(this));\n+\t\tjerseyConfig.register(LoginResource.class);\n+\t}\n+\n+\t@Override\n+\tpublic void registerApiUnprotectedAuthenticationResources(DropwizardResourceConfig jerseyConfig) {\n+\t\tjerseyConfig.register(new TokenResource(this));\n+\t}\n+\n+\t@Override\n+\t@SneakyThrows\n+\tpublic String checkCredentialsAndCreateJWT(String username, char[] password) {\n+\t\tSecret passwordSecret = new Secret(new String(password));\n+\n+\t\tAuthorizationGrant  grant = new ResourceOwnerPasswordCredentialsGrant(username, passwordSecret);\n+\t\t\t\t\n+\t\tURI tokenEndpoint =  new URL(new URL(config.getAuthServerUrl()),\"realms/EVA/protocol/openid-connect/token\").toURI();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "795c115f6a10d54c80d32adeecd55794f517167c"}, "originalPosition": 156}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1314, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}