{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2Njk2NjE4", "number": 1074, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTo1OToxMlrODpklUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwODo0MzozNlrODriuQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTE3NTg2OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/datasets/Column.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTo1OToxMlrOF41OaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTo1OToxMlrOF41OaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEzNjYxNg==", "bodyText": "W\u00e4re es nicht Sinnvoll das sogar \u00fcber's id system laufen zu lassen?", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r395136616", "createdAt": "2020-03-19T15:59:12Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/datasets/Column.java", "diffHunk": "@@ -36,6 +36,11 @@\n \t * if it is of type string, instead of its own dictionary\n \t */\n \tprivate String sharedDictionary;\n+\t/**\n+\t * if this is set this column counts as the secondary id of the given name for this\n+\t * table\n+\t */\n+\tprivate String secondaryId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96035e9dc64d0b23bbfe8be3109fc8c2556b53f0"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTE4OTcwOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/SecondaryIdQueryPlan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjowMjoyNlrOF41Xhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjowMjoyNlrOF41Xhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEzODk1MA==", "bodyText": "bitte kein var", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r395138950", "createdAt": "2020-03-19T16:02:26Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/SecondaryIdQueryPlan.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.bakdata.conquery.models.query.queryplan;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.QueryPlanContext;\n+import com.bakdata.conquery.models.query.entity.Entity;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import com.bakdata.conquery.models.query.results.EntityResult;\n+import com.bakdata.conquery.models.query.results.SinglelineEntityResult;\n+import com.bakdata.conquery.models.types.specific.AStringType;\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+\n+@RequiredArgsConstructor\n+@Getter @Setter\n+public class SecondaryIdQueryPlan implements QueryPlan {\n+\n+\tprivate final ConceptQueryPlan query;\n+\tprivate final String secondaryId;\n+\tprivate Column currentSecondaryIdColumn;\n+\tprivate Map<String, ConceptQueryPlan> childPerKey = new HashMap<>();\n+\t\n+\tprivate Column findSecondaryIdColumn(Table table) {\n+\t\tfor(var col:table.getColumns()) {\n+\t\t\tif(secondaryId.equals(col.getSecondaryId())) {\n+\t\t\t\treturn col;\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\tthrow new IllegalStateException(\"Table \"+table+\" should not appear in a query about secondary id \"+secondaryId);\n+\t}\n+\n+\tprivate ConceptQueryPlan createChild(Object key, QueryExecutionContext currentContext, Bucket currentBucket) {\n+\t\tConceptQueryPlan plan = query.clone(new CloneContext(currentContext.getStorage()));\n+\t\tplan.init(query.getEntity());\n+\t\tplan.nextTable(currentContext, currentSecondaryIdColumn.getTable());\n+\t\tplan.isOfInterest(currentBucket);\n+\t\tplan.nextBlock(currentBucket);\n+\t\treturn plan;\n+\t}\n+\t\n+\t@Override\n+\tpublic EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n+\t\tquery.checkRequiredTables(ctx.getStorage());\n+\t\tquery.init(entity);\n+\t\tif (query.getRequiredTables().isEmpty()) {\n+\t\t\treturn EntityResult.notContained();\n+\t\t}\n+\n+\t\tfor(Table currentTable : query.getRequiredTables()) {\n+\t\t\tcurrentSecondaryIdColumn = findSecondaryIdColumn(currentTable);\n+\t\t\tquery.nextTable(ctx, currentTable);\n+\t\t\tfor(Bucket bucket : entity.getBucket(currentTable.getId())) {\n+\t\t\t\tint localEntity = bucket.toLocal(entity.getId());\n+\t\t\t\tvar secondaryIdType = (AStringType<?>)currentSecondaryIdColumn.getTypeFor(bucket);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96035e9dc64d0b23bbfe8be3109fc8c2556b53f0"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTE5MjMwOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/QPSwitchNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjowMjo1N1rOF41ZIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTo1Mjo1NFrOF7h6lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEzOTM2MA==", "bodyText": "Kann es sein dass du vergessen hast die zu l\u00f6schen?", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r395139360", "createdAt": "2020-03-19T16:02:57Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/QPSwitchNode.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.bakdata.conquery.models.query.queryplan;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.NonNull;\n+import lombok.Setter;\n+\n+@NoArgsConstructor\n+@Getter @Setter\n+public abstract class QPSwitchNode<KEY> extends QPChainNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96035e9dc64d0b23bbfe8be3109fc8c2556b53f0"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2NTk3NQ==", "bodyText": "jupp", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r397965975", "createdAt": "2020-03-25T15:52:54Z", "author": {"login": "manuel-hegner"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/QPSwitchNode.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.bakdata.conquery.models.query.queryplan;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.NonNull;\n+import lombok.Setter;\n+\n+@NoArgsConstructor\n+@Getter @Setter\n+public abstract class QPSwitchNode<KEY> extends QPChainNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEzOTM2MA=="}, "originalCommit": {"oid": "96035e9dc64d0b23bbfe8be3109fc8c2556b53f0"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTIwMjgxOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/SecondaryIdQueryPlan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjowNTozMFrOF41gDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjowNTozMFrOF41gDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MTEzNQ==", "bodyText": "Kannst du die Klasse bitte etwas dokumentieren? Der Code ist relativ offensichtlich aber wenn gar nicht klar ist was du machst bzw wof\u00fcr das ist, ist das sehr komischer code.", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r395141135", "createdAt": "2020-03-19T16:05:30Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/SecondaryIdQueryPlan.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.bakdata.conquery.models.query.queryplan;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.QueryPlanContext;\n+import com.bakdata.conquery.models.query.entity.Entity;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import com.bakdata.conquery.models.query.results.EntityResult;\n+import com.bakdata.conquery.models.query.results.SinglelineEntityResult;\n+import com.bakdata.conquery.models.types.specific.AStringType;\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+\n+@RequiredArgsConstructor\n+@Getter @Setter\n+public class SecondaryIdQueryPlan implements QueryPlan {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96035e9dc64d0b23bbfe8be3109fc8c2556b53f0"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTIwOTQxOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/SecondaryIdQueryPlan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjowNzowNFrOF41kbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjowNzowNFrOF41kbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MjI1Mg==", "bodyText": "vorher checken ob das hier \u00fcberhaupt ein element hat.", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r395142252", "createdAt": "2020-03-19T16:07:04Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/SecondaryIdQueryPlan.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.bakdata.conquery.models.query.queryplan;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.QueryPlanContext;\n+import com.bakdata.conquery.models.query.entity.Entity;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import com.bakdata.conquery.models.query.results.EntityResult;\n+import com.bakdata.conquery.models.query.results.SinglelineEntityResult;\n+import com.bakdata.conquery.models.types.specific.AStringType;\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+\n+@RequiredArgsConstructor\n+@Getter @Setter\n+public class SecondaryIdQueryPlan implements QueryPlan {\n+\n+\tprivate final ConceptQueryPlan query;\n+\tprivate final String secondaryId;\n+\tprivate Column currentSecondaryIdColumn;\n+\tprivate Map<String, ConceptQueryPlan> childPerKey = new HashMap<>();\n+\t\n+\tprivate Column findSecondaryIdColumn(Table table) {\n+\t\tfor(var col:table.getColumns()) {\n+\t\t\tif(secondaryId.equals(col.getSecondaryId())) {\n+\t\t\t\treturn col;\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\tthrow new IllegalStateException(\"Table \"+table+\" should not appear in a query about secondary id \"+secondaryId);\n+\t}\n+\n+\tprivate ConceptQueryPlan createChild(Object key, QueryExecutionContext currentContext, Bucket currentBucket) {\n+\t\tConceptQueryPlan plan = query.clone(new CloneContext(currentContext.getStorage()));\n+\t\tplan.init(query.getEntity());\n+\t\tplan.nextTable(currentContext, currentSecondaryIdColumn.getTable());\n+\t\tplan.isOfInterest(currentBucket);\n+\t\tplan.nextBlock(currentBucket);\n+\t\treturn plan;\n+\t}\n+\t\n+\t@Override\n+\tpublic EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n+\t\tquery.checkRequiredTables(ctx.getStorage());\n+\t\tquery.init(entity);\n+\t\tif (query.getRequiredTables().isEmpty()) {\n+\t\t\treturn EntityResult.notContained();\n+\t\t}\n+\n+\t\tfor(Table currentTable : query.getRequiredTables()) {\n+\t\t\tcurrentSecondaryIdColumn = findSecondaryIdColumn(currentTable);\n+\t\t\tquery.nextTable(ctx, currentTable);\n+\t\t\tfor(Bucket bucket : entity.getBucket(currentTable.getId())) {\n+\t\t\t\tint localEntity = bucket.toLocal(entity.getId());\n+\t\t\t\tvar secondaryIdType = (AStringType<?>)currentSecondaryIdColumn.getTypeFor(bucket);\n+\t\t\t\tquery.nextBlock(bucket);\n+\t\t\t\tif(bucket.containsLocalEntity(localEntity)) {\n+\t\t\t\t\tif(query.isOfInterest(bucket)) {\n+\t\t\t\t\t\tint start = bucket.getFirstEventOfLocal(localEntity);\n+\t\t\t\t\t\tint end = bucket.getLastEventOfLocal(localEntity);\n+\t\t\t\t\t\tfor(int event = start; event < end ; event++) {\n+\t\t\t\t\t\t\tString key = secondaryIdType.getElement(bucket.getString(event, currentSecondaryIdColumn));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96035e9dc64d0b23bbfe8be3109fc8c2556b53f0"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTIxMTgyOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/results/FailedEntityResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjowNzozM1rOF41l5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjowNzozM1rOF41l5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MjYyOQ==", "bodyText": "Fehlermeldung", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r395142629", "createdAt": "2020-03-19T16:07:33Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/results/FailedEntityResult.java", "diffHunk": "@@ -33,4 +33,9 @@ public boolean isFailed() {\n \tpublic FailedEntityResult asFailed() {\n \t\treturn this;\n \t}\n+\t\n+\t@Override @JsonIgnore\n+\tpublic Object[] getValues() {\n+\t\tthrow new IllegalStateException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96035e9dc64d0b23bbfe8be3109fc8c2556b53f0"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTIxMzAzOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/results/NotContainedEntityResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjowNzo1MFrOF41mrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjowNzo1MFrOF41mrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MjgzMQ==", "bodyText": "Fehlermeldung", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r395142831", "createdAt": "2020-03-19T16:07:50Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/results/NotContainedEntityResult.java", "diffHunk": "@@ -15,4 +16,9 @@ public String toString() {\n \tpublic boolean isContained() {\n \t\treturn false;\n \t}\n+\n+\t@Override @JsonIgnore\n+\tpublic Object[] getValues() {\n+\t\tthrow new IllegalStateException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96035e9dc64d0b23bbfe8be3109fc8c2556b53f0"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTIzMDU5OnYy", "diffSide": "RIGHT", "path": "backend/src/test/resources/tests/query/SECONDARY_ID/content.csv", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjoxMjowMlrOF41yDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjoxMjowMlrOF41yDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0NTc0MQ==", "bodyText": "Bitte einen Fall,d er keine Secondary ID hat", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r395145741", "createdAt": "2020-03-19T16:12:02Z", "author": {"login": "awildturtok"}, "path": "backend/src/test/resources/tests/query/SECONDARY_ID/content.csv", "diffHunk": "@@ -0,0 +1,6 @@\n+pid,sid,value,datum", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96035e9dc64d0b23bbfe8be3109fc8c2556b53f0"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjE4NTM2OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/ConceptQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoxODo1OVrOF6yaOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoxODo1OVrOF6yaOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE4NzY0MQ==", "bodyText": "Sieht aus als kann der Import raus", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r397187641", "createdAt": "2020-03-24T14:18:59Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/ConceptQuery.java", "diffHunk": "@@ -14,20 +14,23 @@\n import com.bakdata.conquery.models.query.QueryResolveContext;\n import com.bakdata.conquery.models.query.Visitable;\n import com.bakdata.conquery.models.query.queryplan.ConceptQueryPlan;\n+import com.bakdata.conquery.models.query.queryplan.SecondaryIdQueryPlan;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96035e9dc64d0b23bbfe8be3109fc8c2556b53f0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjM1ODU4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/SecondaryIdQueryPlan.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1NDo0MlrOF60Jhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjowNjowNFrOF7ijBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNjEzNQ==", "bodyText": "Muss f\u00fcr die schon kreierten ChildPerKeyPlans nicht auch immer wieder ConceptQueryPlan::nextBlock(), ConceptQueryPlan::nextTable() aufgerufen werden?", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r397216135", "createdAt": "2020-03-24T14:54:42Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/SecondaryIdQueryPlan.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.bakdata.conquery.models.query.queryplan;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.QueryPlanContext;\n+import com.bakdata.conquery.models.query.entity.Entity;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import com.bakdata.conquery.models.query.results.EntityResult;\n+import com.bakdata.conquery.models.query.results.SinglelineEntityResult;\n+import com.bakdata.conquery.models.types.specific.AStringType;\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+\n+@RequiredArgsConstructor\n+@Getter @Setter\n+public class SecondaryIdQueryPlan implements QueryPlan {\n+\n+\tprivate final ConceptQueryPlan query;\n+\tprivate final String secondaryId;\n+\tprivate Column currentSecondaryIdColumn;\n+\tprivate Map<String, ConceptQueryPlan> childPerKey = new HashMap<>();\n+\t\n+\tprivate Column findSecondaryIdColumn(Table table) {\n+\t\tfor(var col:table.getColumns()) {\n+\t\t\tif(secondaryId.equals(col.getSecondaryId())) {\n+\t\t\t\treturn col;\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\tthrow new IllegalStateException(\"Table \"+table+\" should not appear in a query about secondary id \"+secondaryId);\n+\t}\n+\n+\tprivate ConceptQueryPlan createChild(Object key, QueryExecutionContext currentContext, Bucket currentBucket) {\n+\t\tConceptQueryPlan plan = query.clone(new CloneContext(currentContext.getStorage()));\n+\t\tplan.init(query.getEntity());\n+\t\tplan.nextTable(currentContext, currentSecondaryIdColumn.getTable());\n+\t\tplan.isOfInterest(currentBucket);\n+\t\tplan.nextBlock(currentBucket);\n+\t\treturn plan;\n+\t}\n+\t\n+\t@Override\n+\tpublic EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n+\t\tquery.checkRequiredTables(ctx.getStorage());\n+\t\tquery.init(entity);\n+\t\tif (query.getRequiredTables().isEmpty()) {\n+\t\t\treturn EntityResult.notContained();\n+\t\t}\n+\n+\t\tfor(Table currentTable : query.getRequiredTables()) {\n+\t\t\tcurrentSecondaryIdColumn = findSecondaryIdColumn(currentTable);\n+\t\t\tquery.nextTable(ctx, currentTable);\n+\t\t\tfor(Bucket bucket : entity.getBucket(currentTable.getId())) {\n+\t\t\t\tint localEntity = bucket.toLocal(entity.getId());\n+\t\t\t\tvar secondaryIdType = (AStringType<?>)currentSecondaryIdColumn.getTypeFor(bucket);\n+\t\t\t\tquery.nextBlock(bucket);\n+\t\t\t\tif(bucket.containsLocalEntity(localEntity)) {\n+\t\t\t\t\tif(query.isOfInterest(bucket)) {\n+\t\t\t\t\t\tint start = bucket.getFirstEventOfLocal(localEntity);\n+\t\t\t\t\t\tint end = bucket.getLastEventOfLocal(localEntity);\n+\t\t\t\t\t\tfor(int event = start; event < end ; event++) {\n+\t\t\t\t\t\t\tString key = secondaryIdType.getElement(bucket.getString(event, currentSecondaryIdColumn));\n+\t\t\t\t\t\t\tchildPerKey\n+\t\t\t\t\t\t\t\t.computeIfAbsent(key, k->this.createChild(k, ctx, bucket))\n+\t\t\t\t\t\t\t\t.nextEvent(bucket, event);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96035e9dc64d0b23bbfe8be3109fc8c2556b53f0"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3NjMyNA==", "bodyText": "du hast v\u00f6llig recht", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r397976324", "createdAt": "2020-03-25T16:06:04Z", "author": {"login": "manuel-hegner"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/SecondaryIdQueryPlan.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.bakdata.conquery.models.query.queryplan;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.QueryPlanContext;\n+import com.bakdata.conquery.models.query.entity.Entity;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import com.bakdata.conquery.models.query.results.EntityResult;\n+import com.bakdata.conquery.models.query.results.SinglelineEntityResult;\n+import com.bakdata.conquery.models.types.specific.AStringType;\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+\n+@RequiredArgsConstructor\n+@Getter @Setter\n+public class SecondaryIdQueryPlan implements QueryPlan {\n+\n+\tprivate final ConceptQueryPlan query;\n+\tprivate final String secondaryId;\n+\tprivate Column currentSecondaryIdColumn;\n+\tprivate Map<String, ConceptQueryPlan> childPerKey = new HashMap<>();\n+\t\n+\tprivate Column findSecondaryIdColumn(Table table) {\n+\t\tfor(var col:table.getColumns()) {\n+\t\t\tif(secondaryId.equals(col.getSecondaryId())) {\n+\t\t\t\treturn col;\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\tthrow new IllegalStateException(\"Table \"+table+\" should not appear in a query about secondary id \"+secondaryId);\n+\t}\n+\n+\tprivate ConceptQueryPlan createChild(Object key, QueryExecutionContext currentContext, Bucket currentBucket) {\n+\t\tConceptQueryPlan plan = query.clone(new CloneContext(currentContext.getStorage()));\n+\t\tplan.init(query.getEntity());\n+\t\tplan.nextTable(currentContext, currentSecondaryIdColumn.getTable());\n+\t\tplan.isOfInterest(currentBucket);\n+\t\tplan.nextBlock(currentBucket);\n+\t\treturn plan;\n+\t}\n+\t\n+\t@Override\n+\tpublic EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n+\t\tquery.checkRequiredTables(ctx.getStorage());\n+\t\tquery.init(entity);\n+\t\tif (query.getRequiredTables().isEmpty()) {\n+\t\t\treturn EntityResult.notContained();\n+\t\t}\n+\n+\t\tfor(Table currentTable : query.getRequiredTables()) {\n+\t\t\tcurrentSecondaryIdColumn = findSecondaryIdColumn(currentTable);\n+\t\t\tquery.nextTable(ctx, currentTable);\n+\t\t\tfor(Bucket bucket : entity.getBucket(currentTable.getId())) {\n+\t\t\t\tint localEntity = bucket.toLocal(entity.getId());\n+\t\t\t\tvar secondaryIdType = (AStringType<?>)currentSecondaryIdColumn.getTypeFor(bucket);\n+\t\t\t\tquery.nextBlock(bucket);\n+\t\t\t\tif(bucket.containsLocalEntity(localEntity)) {\n+\t\t\t\t\tif(query.isOfInterest(bucket)) {\n+\t\t\t\t\t\tint start = bucket.getFirstEventOfLocal(localEntity);\n+\t\t\t\t\t\tint end = bucket.getLastEventOfLocal(localEntity);\n+\t\t\t\t\t\tfor(int event = start; event < end ; event++) {\n+\t\t\t\t\t\t\tString key = secondaryIdType.getElement(bucket.getString(event, currentSecondaryIdColumn));\n+\t\t\t\t\t\t\tchildPerKey\n+\t\t\t\t\t\t\t\t.computeIfAbsent(key, k->this.createChild(k, ctx, bucket))\n+\t\t\t\t\t\t\t\t.nextEvent(bucket, event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNjEzNQ=="}, "originalCommit": {"oid": "96035e9dc64d0b23bbfe8be3109fc8c2556b53f0"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjM3Njk2OnYy", "diffSide": "RIGHT", "path": "backend/src/test/resources/tests/query/SECONDARY_ID/SECONDARY_IDS.test.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1ODoyOFrOF60VkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1ODoyOFrOF60VkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxOTIxNg==", "bodyText": "Bitte auch mit meheren Tables (und auch Buckets testen)", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r397219216", "createdAt": "2020-03-24T14:58:28Z", "author": {"login": "thoniTUB"}, "path": "backend/src/test/resources/tests/query/SECONDARY_ID/SECONDARY_IDS.test.json", "diffHunk": "@@ -0,0 +1,89 @@\n+{\n+\t\"type\": \"QUERY_TEST\",\n+\t\"label\": \"SECONDARY_ID Test\",\n+\t\"expectedCsv\": \"tests/query/SECONDARY_ID/expected.csv\",\n+\t\"query\": {\n+\t\t\"type\": \"SECONDARY_ID_QUERY\",\n+\t\t\"secondaryId\": \"secondary\",\n+\t\t\"query\": {\n+\t\t\t\"type\": \"CONCEPT_QUERY\",\n+\t\t\t\n+\t\t\t\"root\": {\n+\t\t\t\t\"type\": \"AND\",\n+\t\t\t\t\"children\": [\n+\t\t\t\t\t{\n+\t\t\t\t\t\t\"ids\": [\n+\t\t\t\t\t\t\t\"${dataset}.number\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"CONCEPT\",\n+\t\t\t\t\t\t\"label\": \"vs\",\n+\t\t\t\t\t\t\"tables\": [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96035e9dc64d0b23bbfe8be3109fc8c2556b53f0"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTg0MjU4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/io/jackson/serializer/IdDeserializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwODo0MzozNlrOF78ZlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMDowMTo1OFrOF9Up-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM5OTg5Mg==", "bodyText": "K\u00f6nntest du den Check den du unten machst nicht einfach hier reinziehen oder ist dir das zu langsam?", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r398399892", "createdAt": "2020-03-26T08:43:36Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/io/jackson/serializer/IdDeserializer.java", "diffHunk": "@@ -25,21 +26,22 @@\n \n \tprivate Class<ID> idClass;\n \tprivate Parser<ID> idParser;\n+\tprivate boolean checkForInjectedPrefix;\n \t\n \t@SuppressWarnings(\"unchecked\")\n \t@Override\n \tpublic ID deserialize(JsonParser parser, DeserializationContext ctxt) throws IOException {\n \t\tif(parser.getCurrentToken()==JsonToken.VALUE_STRING) {\n \t\t\tString text = parser.getText();\n \t\t\ttry {\n-\t\t\t\t//check if there was a dataset injected and if it is already a prefix\n-\t\t\t\tDataset dataset = (Dataset) ctxt.findInjectableValue(Dataset.class.getName(), null, null);\n-\t\t\t\tif(dataset != null) {\n-\t\t\t\t\treturn idParser.parsePrefixed(dataset.getName(), text);\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\treturn idParser.parse(text);\n+\t\t\t\tif(checkForInjectedPrefix) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa146011dd936894fd32fde2f901eb7f1777bbb0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg0NTg4Mw==", "bodyText": "Ich finde es unsauber wenn f\u00fcr IDs die gar nichts mit Datasets zu tun haben trotzdem nach einem injizierten Dataset geguckt wird.", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r399845883", "createdAt": "2020-03-29T20:01:58Z", "author": {"login": "manuel-hegner"}, "path": "backend/src/main/java/com/bakdata/conquery/io/jackson/serializer/IdDeserializer.java", "diffHunk": "@@ -25,21 +26,22 @@\n \n \tprivate Class<ID> idClass;\n \tprivate Parser<ID> idParser;\n+\tprivate boolean checkForInjectedPrefix;\n \t\n \t@SuppressWarnings(\"unchecked\")\n \t@Override\n \tpublic ID deserialize(JsonParser parser, DeserializationContext ctxt) throws IOException {\n \t\tif(parser.getCurrentToken()==JsonToken.VALUE_STRING) {\n \t\t\tString text = parser.getText();\n \t\t\ttry {\n-\t\t\t\t//check if there was a dataset injected and if it is already a prefix\n-\t\t\t\tDataset dataset = (Dataset) ctxt.findInjectableValue(Dataset.class.getName(), null, null);\n-\t\t\t\tif(dataset != null) {\n-\t\t\t\t\treturn idParser.parsePrefixed(dataset.getName(), text);\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\treturn idParser.parse(text);\n+\t\t\t\tif(checkForInjectedPrefix) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM5OTg5Mg=="}, "originalCommit": {"oid": "fa146011dd936894fd32fde2f901eb7f1777bbb0"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1439, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}