{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNDY1Nzk5", "number": 1150, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjozNjowMlrODx7s3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoyMjo1MFrODx8iRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjg0OTU4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjozNjowMlrOGFrpcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzozMzowNFrOGFtSLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMTE4Nw==", "bodyText": "Wof\u00fcr brauchst du den?", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408611187", "createdAt": "2020-04-15T06:36:02Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.bakdata.conquery.apiv1;\n+\n+import java.time.Instant;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import com.bakdata.conquery.apiv1.forms.FormConfig;\n+import com.bakdata.conquery.apiv1.forms.FormConfig.FormConfigFullRepresentation;\n+import com.bakdata.conquery.apiv1.forms.FormConfig.FormConfigOverviewRepresentation;\n+import com.bakdata.conquery.io.jackson.Jackson;\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.permissions.Ability;\n+import com.bakdata.conquery.models.auth.permissions.AbilitySets;\n+import com.bakdata.conquery.models.auth.permissions.FormConfigPermission;\n+import com.bakdata.conquery.models.auth.permissions.WildcardPermission;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.FormConfigId;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+import org.apache.shiro.authz.Permission;\n+import org.jetbrains.annotations.TestOnly;\n+\n+@RequiredArgsConstructor\n+public class FormConfigProcessor {\n+\t\n+\tprivate final MasterMetaStorage storage;\n+\t@Getter(onMethod = @__({@TestOnly}))\n+\tprivate final static ObjectMapper MAPPER = Jackson.MAPPER.copy().disable(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, SerializationFeature.WRITE_NULL_MAP_VALUES);;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b70991f52c85caaf40043419e4c633fcc70cd7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzNzk5Nw==", "bodyText": "Den brauche ich um die Formularkonfiguration in andere Datens\u00e4tze zu convertieren.", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408637997", "createdAt": "2020-04-15T07:33:04Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.bakdata.conquery.apiv1;\n+\n+import java.time.Instant;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import com.bakdata.conquery.apiv1.forms.FormConfig;\n+import com.bakdata.conquery.apiv1.forms.FormConfig.FormConfigFullRepresentation;\n+import com.bakdata.conquery.apiv1.forms.FormConfig.FormConfigOverviewRepresentation;\n+import com.bakdata.conquery.io.jackson.Jackson;\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.permissions.Ability;\n+import com.bakdata.conquery.models.auth.permissions.AbilitySets;\n+import com.bakdata.conquery.models.auth.permissions.FormConfigPermission;\n+import com.bakdata.conquery.models.auth.permissions.WildcardPermission;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.FormConfigId;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+import org.apache.shiro.authz.Permission;\n+import org.jetbrains.annotations.TestOnly;\n+\n+@RequiredArgsConstructor\n+public class FormConfigProcessor {\n+\t\n+\tprivate final MasterMetaStorage storage;\n+\t@Getter(onMethod = @__({@TestOnly}))\n+\tprivate final static ObjectMapper MAPPER = Jackson.MAPPER.copy().disable(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, SerializationFeature.WRITE_NULL_MAP_VALUES);;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMTE4Nw=="}, "originalCommit": {"oid": "41b70991f52c85caaf40043419e4c633fcc70cd7"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjg1OTY2OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjozOTo0OFrOGFrvYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzozNToxOVrOGFtW6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMjcwNQ==", "bodyText": "Bin kein Fan von Streams rausgeben, brauchst du das als Stream hier/weiter unten?", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408612705", "createdAt": "2020-04-15T06:39:48Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.bakdata.conquery.apiv1;\n+\n+import java.time.Instant;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import com.bakdata.conquery.apiv1.forms.FormConfig;\n+import com.bakdata.conquery.apiv1.forms.FormConfig.FormConfigFullRepresentation;\n+import com.bakdata.conquery.apiv1.forms.FormConfig.FormConfigOverviewRepresentation;\n+import com.bakdata.conquery.io.jackson.Jackson;\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.permissions.Ability;\n+import com.bakdata.conquery.models.auth.permissions.AbilitySets;\n+import com.bakdata.conquery.models.auth.permissions.FormConfigPermission;\n+import com.bakdata.conquery.models.auth.permissions.WildcardPermission;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.FormConfigId;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+import org.apache.shiro.authz.Permission;\n+import org.jetbrains.annotations.TestOnly;\n+\n+@RequiredArgsConstructor\n+public class FormConfigProcessor {\n+\t\n+\tprivate final MasterMetaStorage storage;\n+\t@Getter(onMethod = @__({@TestOnly}))\n+\tprivate final static ObjectMapper MAPPER = Jackson.MAPPER.copy().disable(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, SerializationFeature.WRITE_NULL_MAP_VALUES);;\n+\t\n+\tpublic Stream<FormConfigOverviewRepresentation> getConfigsByFormType(@NonNull User user, @NonNull Optional<String> formType){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b70991f52c85caaf40043419e4c633fcc70cd7"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzODUxMA==", "bodyText": "Den Stream gebe ich als HTTP response zur\u00fcck. So spart man sich das repackaging in eine andere Collection.", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408638510", "createdAt": "2020-04-15T07:34:00Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.bakdata.conquery.apiv1;\n+\n+import java.time.Instant;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import com.bakdata.conquery.apiv1.forms.FormConfig;\n+import com.bakdata.conquery.apiv1.forms.FormConfig.FormConfigFullRepresentation;\n+import com.bakdata.conquery.apiv1.forms.FormConfig.FormConfigOverviewRepresentation;\n+import com.bakdata.conquery.io.jackson.Jackson;\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.permissions.Ability;\n+import com.bakdata.conquery.models.auth.permissions.AbilitySets;\n+import com.bakdata.conquery.models.auth.permissions.FormConfigPermission;\n+import com.bakdata.conquery.models.auth.permissions.WildcardPermission;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.FormConfigId;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+import org.apache.shiro.authz.Permission;\n+import org.jetbrains.annotations.TestOnly;\n+\n+@RequiredArgsConstructor\n+public class FormConfigProcessor {\n+\t\n+\tprivate final MasterMetaStorage storage;\n+\t@Getter(onMethod = @__({@TestOnly}))\n+\tprivate final static ObjectMapper MAPPER = Jackson.MAPPER.copy().disable(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, SerializationFeature.WRITE_NULL_MAP_VALUES);;\n+\t\n+\tpublic Stream<FormConfigOverviewRepresentation> getConfigsByFormType(@NonNull User user, @NonNull Optional<String> formType){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMjcwNQ=="}, "originalCommit": {"oid": "41b70991f52c85caaf40043419e4c633fcc70cd7"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzOTIwOA==", "bodyText": "ach, ja stimmt du bist hier im processor", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408639208", "createdAt": "2020-04-15T07:35:19Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.bakdata.conquery.apiv1;\n+\n+import java.time.Instant;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import com.bakdata.conquery.apiv1.forms.FormConfig;\n+import com.bakdata.conquery.apiv1.forms.FormConfig.FormConfigFullRepresentation;\n+import com.bakdata.conquery.apiv1.forms.FormConfig.FormConfigOverviewRepresentation;\n+import com.bakdata.conquery.io.jackson.Jackson;\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.permissions.Ability;\n+import com.bakdata.conquery.models.auth.permissions.AbilitySets;\n+import com.bakdata.conquery.models.auth.permissions.FormConfigPermission;\n+import com.bakdata.conquery.models.auth.permissions.WildcardPermission;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.FormConfigId;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+import org.apache.shiro.authz.Permission;\n+import org.jetbrains.annotations.TestOnly;\n+\n+@RequiredArgsConstructor\n+public class FormConfigProcessor {\n+\t\n+\tprivate final MasterMetaStorage storage;\n+\t@Getter(onMethod = @__({@TestOnly}))\n+\tprivate final static ObjectMapper MAPPER = Jackson.MAPPER.copy().disable(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, SerializationFeature.WRITE_NULL_MAP_VALUES);;\n+\t\n+\tpublic Stream<FormConfigOverviewRepresentation> getConfigsByFormType(@NonNull User user, @NonNull Optional<String> formType){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMjcwNQ=="}, "originalCommit": {"oid": "41b70991f52c85caaf40043419e4c633fcc70cd7"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjg2MjU3OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjo0MDo0OFrOGFrxAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjo0MDo0OFrOGFrxAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMzEyMQ==", "bodyText": "Kannst du die Klasse bitte etwas dokumentieren, mir ist nicht ganz klar was die ist oder macht", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408613121", "createdAt": "2020-04-15T06:40:48Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.bakdata.conquery.apiv1;\n+\n+import java.time.Instant;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import com.bakdata.conquery.apiv1.forms.FormConfig;\n+import com.bakdata.conquery.apiv1.forms.FormConfig.FormConfigFullRepresentation;\n+import com.bakdata.conquery.apiv1.forms.FormConfig.FormConfigOverviewRepresentation;\n+import com.bakdata.conquery.io.jackson.Jackson;\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.permissions.Ability;\n+import com.bakdata.conquery.models.auth.permissions.AbilitySets;\n+import com.bakdata.conquery.models.auth.permissions.FormConfigPermission;\n+import com.bakdata.conquery.models.auth.permissions.WildcardPermission;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.FormConfigId;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+import org.apache.shiro.authz.Permission;\n+import org.jetbrains.annotations.TestOnly;\n+\n+@RequiredArgsConstructor\n+public class FormConfigProcessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b70991f52c85caaf40043419e4c633fcc70cd7"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjg2NTAzOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjo0MTo0NFrOGFryjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjo0MTo0NFrOGFryjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMzUxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tif(wpermission.getInstances().size()>1) {\n          \n          \n            \n            \t\t\tif(!wpermission.getInstances().isEmpty()) {", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408613517", "createdAt": "2020-04-15T06:41:44Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.bakdata.conquery.apiv1;\n+\n+import java.time.Instant;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import com.bakdata.conquery.apiv1.forms.FormConfig;\n+import com.bakdata.conquery.apiv1.forms.FormConfig.FormConfigFullRepresentation;\n+import com.bakdata.conquery.apiv1.forms.FormConfig.FormConfigOverviewRepresentation;\n+import com.bakdata.conquery.io.jackson.Jackson;\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.permissions.Ability;\n+import com.bakdata.conquery.models.auth.permissions.AbilitySets;\n+import com.bakdata.conquery.models.auth.permissions.FormConfigPermission;\n+import com.bakdata.conquery.models.auth.permissions.WildcardPermission;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.FormConfigId;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+import org.apache.shiro.authz.Permission;\n+import org.jetbrains.annotations.TestOnly;\n+\n+@RequiredArgsConstructor\n+public class FormConfigProcessor {\n+\t\n+\tprivate final MasterMetaStorage storage;\n+\t@Getter(onMethod = @__({@TestOnly}))\n+\tprivate final static ObjectMapper MAPPER = Jackson.MAPPER.copy().disable(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, SerializationFeature.WRITE_NULL_MAP_VALUES);;\n+\t\n+\tpublic Stream<FormConfigOverviewRepresentation> getConfigsByFormType(@NonNull User user, @NonNull Optional<String> formType){\n+\t\tStream<FormConfig> stream = storage.getAllFormConfigs().stream()\n+\t\t\t.filter(c -> user.isPermitted(FormConfigPermission.onInstance(Ability.READ, c.getId())));\n+\t\tif(formType.isPresent()) {\n+\t\t\tstream = stream.filter(c -> c.getFormType().equals(formType.get()));\n+\t\t}\n+\t\t\n+\t\treturn stream.map(c -> c.overview(storage, user));\t\n+\t}\n+\n+\tpublic  FormConfigFullRepresentation getConfig(DatasetId datasetId, User user, FormConfigId formId) {\n+\t\tuser.checkPermission(FormConfigPermission.onInstance(Ability.READ, formId));\n+\t\tFormConfigFullRepresentation config = Objects.requireNonNull(storage.getFormConfig(formId), String.format(\"Could not find form config %s\", formId))\n+\t\t\t.tryTranslateToDataset(storage, datasetId, MAPPER, user);\n+\t\treturn config;\n+\t}\n+\n+\tpublic FormConfigId addConfig(User user, FormConfig config) {\n+\t\tconfig.setOwner(user.getId());\n+\t\tstorage.updateFormConfig(config);\n+\t\t\n+\t\tuser.addPermission(storage, FormConfigPermission.onInstance(AbilitySets.FORM_CONFIG_CREATOR, config.getId()));\n+\t\t\n+\t\treturn config.getId();\n+\t}\n+\n+\tpublic FormConfigFullRepresentation patchConfig(User user, DatasetId target, FormConfigId formId, MetaDataPatch patch) {\n+\t\tFormConfig config = Objects.requireNonNull(storage.getFormConfig(formId), String.format(\"Could not find form config %s\", formId));\n+\t\t\n+\t\tMetaDataPatch.patchIdentifialble(storage, user, config, patch, FormConfigPermission::onInstance);\n+\t\t\n+\t\tstorage.updateFormConfig(config);\n+\t\t\n+\t\treturn config.tryTranslateToDataset(storage, target, MAPPER, user);\n+\t}\n+\n+\tpublic void deleteConfig(User user, FormConfigId formId) {\n+\t\tuser.checkPermission(FormConfigPermission.onInstance(Ability.DELETE, formId));\n+\t\tstorage.removeFormConfig(formId);\n+\t\t// Delete corresponding permissions (Maybe better to put it into a slow job)\n+\t\tfor(Permission permission : user.getPermissions()) {\n+\t\t\tWildcardPermission wpermission = (WildcardPermission) permission;\n+\t\t\tif(!wpermission.getDomains().contains(FormConfigPermission.DOMAIN.toLowerCase())) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tif(!wpermission.getInstances().contains(formId.toString().toLowerCase())) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\t\n+\t\t\tif(wpermission.getInstances().size()>1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b70991f52c85caaf40043419e4c633fcc70cd7"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjg3OTkxOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/FormConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjo0NzoxM1rOGFr7Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzozNzo0MFrOGFtbyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxNTc2Nw==", "bodyText": "unten kann null rauskommen?", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408615767", "createdAt": "2020-04-15T06:47:13Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/FormConfig.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package com.bakdata.conquery.apiv1.forms;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.execution.Labelable;\n+import com.bakdata.conquery.models.execution.Shareable;\n+import com.bakdata.conquery.models.execution.Taggable;\n+import com.bakdata.conquery.models.identifiable.IdentifiableImpl;\n+import com.bakdata.conquery.models.identifiable.ids.NamespacedId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.FormConfigId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.UserId;\n+import com.bakdata.conquery.models.query.QueryTranslator;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.NonNull;\n+import lombok.ToString;\n+import lombok.experimental.SuperBuilder;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@ToString\n+@EqualsAndHashCode(callSuper = false)\n+public class FormConfig extends IdentifiableImpl<FormConfigId> implements Shareable, Labelable, Taggable{\n+\n+\t@NotEmpty\n+\tprivate String formType;\n+\tprivate UUID formId;\n+\tprivate String label;\n+\t@NotNull\n+\tprivate String[] tags = ArrayUtils.EMPTY_STRING_ARRAY;\n+\tprivate boolean shared = false;\n+\t@NotNull\n+\tprivate JsonNode values;\n+\tprivate UserId owner;\n+\t\n+\t\n+\tpublic FormConfig(String formType, JsonNode values) {\n+\t\tthis.formType = formType;\n+\t\tthis.values = values;\n+\t}\n+\n+\t@Override\n+\tpublic FormConfigId createId() {\n+\t\tif(formId == null) {\t\t\t\n+\t\t\tformId = UUID.randomUUID();\n+\t\t\tlabel = formId.toString();\n+\t\t}\n+\t\treturn new FormConfigId(formType, formId);\n+\t}\n+\n+\t/**\n+\t * Provides an overview (meta data) of this form configuration without the\n+\t * actual form field values.\n+\t */\n+\tpublic FormConfigOverviewRepresentation overview(MasterMetaStorage storage, User user) {\n+\t\t@NonNull\n+\t\tString ownerName = Optional.ofNullable(storage.getUser(owner)).map(User::getLabel).orElse(null);\n+\n+\t\treturn FormConfigOverviewRepresentation.builder()\n+\t\t\t.id(getId())\n+\t\t\t.formType(formType)\n+\t\t\t.label(label)\n+\t\t\t.tags(tags)\n+\t\t\t.ownerName(ownerName)\n+\t\t\t.own(owner.equals(user.getId()))\n+\t\t\t.shared(shared)\n+\t\t\t// system?\n+\t\t\t.build();\n+\t}\n+\n+\t/**\n+\t * Tries to convert the given raw form to the provided dataset. It does not\n+\t * check whether the {@link NamespacedId} that are converted in this processes\n+\t * are actually resolvable. Also, it tries to map the values to a subclass of\n+\t * {@link Form}, for conversion. If that is not possible the untranslated values\n+\t * are output.\n+\t */\n+\tpublic FormConfigFullRepresentation tryTranslateToDataset(MasterMetaStorage storage, DatasetId target, ObjectMapper mapper, User user) {\n+\t\tJsonNode finalRep = values;\n+\t\ttry {\n+\t\t\tForm intemediateRep = mapper.readerFor(Form.class).readValue(values.traverse());\n+\t\t\tForm translatedRep = QueryTranslator.replaceDataset(storage.getNamespaces(), intemediateRep, target);\n+\t\t\tfinalRep = mapper.valueToTree(translatedRep);\n+\t\t}\n+\t\tcatch (IOException e) {\n+\t\t\tlog.warn(\"Unable to translate form configuration {} to dataset {}. Sending untranslated version.\", getId(), target);\n+\t\t}\n+\n+\t\t@NonNull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b70991f52c85caaf40043419e4c633fcc70cd7"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxNjA1Nw==", "bodyText": "Eine Exception w\u00e4re da vermutlich angemessener unten zu werfen wenn du davon ausgehst, dass es nicht passieren kann", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408616057", "createdAt": "2020-04-15T06:47:50Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/FormConfig.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package com.bakdata.conquery.apiv1.forms;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.execution.Labelable;\n+import com.bakdata.conquery.models.execution.Shareable;\n+import com.bakdata.conquery.models.execution.Taggable;\n+import com.bakdata.conquery.models.identifiable.IdentifiableImpl;\n+import com.bakdata.conquery.models.identifiable.ids.NamespacedId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.FormConfigId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.UserId;\n+import com.bakdata.conquery.models.query.QueryTranslator;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.NonNull;\n+import lombok.ToString;\n+import lombok.experimental.SuperBuilder;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@ToString\n+@EqualsAndHashCode(callSuper = false)\n+public class FormConfig extends IdentifiableImpl<FormConfigId> implements Shareable, Labelable, Taggable{\n+\n+\t@NotEmpty\n+\tprivate String formType;\n+\tprivate UUID formId;\n+\tprivate String label;\n+\t@NotNull\n+\tprivate String[] tags = ArrayUtils.EMPTY_STRING_ARRAY;\n+\tprivate boolean shared = false;\n+\t@NotNull\n+\tprivate JsonNode values;\n+\tprivate UserId owner;\n+\t\n+\t\n+\tpublic FormConfig(String formType, JsonNode values) {\n+\t\tthis.formType = formType;\n+\t\tthis.values = values;\n+\t}\n+\n+\t@Override\n+\tpublic FormConfigId createId() {\n+\t\tif(formId == null) {\t\t\t\n+\t\t\tformId = UUID.randomUUID();\n+\t\t\tlabel = formId.toString();\n+\t\t}\n+\t\treturn new FormConfigId(formType, formId);\n+\t}\n+\n+\t/**\n+\t * Provides an overview (meta data) of this form configuration without the\n+\t * actual form field values.\n+\t */\n+\tpublic FormConfigOverviewRepresentation overview(MasterMetaStorage storage, User user) {\n+\t\t@NonNull\n+\t\tString ownerName = Optional.ofNullable(storage.getUser(owner)).map(User::getLabel).orElse(null);\n+\n+\t\treturn FormConfigOverviewRepresentation.builder()\n+\t\t\t.id(getId())\n+\t\t\t.formType(formType)\n+\t\t\t.label(label)\n+\t\t\t.tags(tags)\n+\t\t\t.ownerName(ownerName)\n+\t\t\t.own(owner.equals(user.getId()))\n+\t\t\t.shared(shared)\n+\t\t\t// system?\n+\t\t\t.build();\n+\t}\n+\n+\t/**\n+\t * Tries to convert the given raw form to the provided dataset. It does not\n+\t * check whether the {@link NamespacedId} that are converted in this processes\n+\t * are actually resolvable. Also, it tries to map the values to a subclass of\n+\t * {@link Form}, for conversion. If that is not possible the untranslated values\n+\t * are output.\n+\t */\n+\tpublic FormConfigFullRepresentation tryTranslateToDataset(MasterMetaStorage storage, DatasetId target, ObjectMapper mapper, User user) {\n+\t\tJsonNode finalRep = values;\n+\t\ttry {\n+\t\t\tForm intemediateRep = mapper.readerFor(Form.class).readValue(values.traverse());\n+\t\t\tForm translatedRep = QueryTranslator.replaceDataset(storage.getNamespaces(), intemediateRep, target);\n+\t\t\tfinalRep = mapper.valueToTree(translatedRep);\n+\t\t}\n+\t\tcatch (IOException e) {\n+\t\t\tlog.warn(\"Unable to translate form configuration {} to dataset {}. Sending untranslated version.\", getId(), target);\n+\t\t}\n+\n+\t\t@NonNull", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxNTc2Nw=="}, "originalCommit": {"oid": "41b70991f52c85caaf40043419e4c633fcc70cd7"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MDQ1OA==", "bodyText": "Die Annotation sollte ich hier wegmachen. Bei dem Owner hab ich mich an der bisherigen Implementation orientiert.\nDort kann der Ower auch null sein (wenn es system sein soll vielleicht).", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408640458", "createdAt": "2020-04-15T07:37:40Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/FormConfig.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package com.bakdata.conquery.apiv1.forms;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.execution.Labelable;\n+import com.bakdata.conquery.models.execution.Shareable;\n+import com.bakdata.conquery.models.execution.Taggable;\n+import com.bakdata.conquery.models.identifiable.IdentifiableImpl;\n+import com.bakdata.conquery.models.identifiable.ids.NamespacedId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.FormConfigId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.UserId;\n+import com.bakdata.conquery.models.query.QueryTranslator;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.NonNull;\n+import lombok.ToString;\n+import lombok.experimental.SuperBuilder;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@ToString\n+@EqualsAndHashCode(callSuper = false)\n+public class FormConfig extends IdentifiableImpl<FormConfigId> implements Shareable, Labelable, Taggable{\n+\n+\t@NotEmpty\n+\tprivate String formType;\n+\tprivate UUID formId;\n+\tprivate String label;\n+\t@NotNull\n+\tprivate String[] tags = ArrayUtils.EMPTY_STRING_ARRAY;\n+\tprivate boolean shared = false;\n+\t@NotNull\n+\tprivate JsonNode values;\n+\tprivate UserId owner;\n+\t\n+\t\n+\tpublic FormConfig(String formType, JsonNode values) {\n+\t\tthis.formType = formType;\n+\t\tthis.values = values;\n+\t}\n+\n+\t@Override\n+\tpublic FormConfigId createId() {\n+\t\tif(formId == null) {\t\t\t\n+\t\t\tformId = UUID.randomUUID();\n+\t\t\tlabel = formId.toString();\n+\t\t}\n+\t\treturn new FormConfigId(formType, formId);\n+\t}\n+\n+\t/**\n+\t * Provides an overview (meta data) of this form configuration without the\n+\t * actual form field values.\n+\t */\n+\tpublic FormConfigOverviewRepresentation overview(MasterMetaStorage storage, User user) {\n+\t\t@NonNull\n+\t\tString ownerName = Optional.ofNullable(storage.getUser(owner)).map(User::getLabel).orElse(null);\n+\n+\t\treturn FormConfigOverviewRepresentation.builder()\n+\t\t\t.id(getId())\n+\t\t\t.formType(formType)\n+\t\t\t.label(label)\n+\t\t\t.tags(tags)\n+\t\t\t.ownerName(ownerName)\n+\t\t\t.own(owner.equals(user.getId()))\n+\t\t\t.shared(shared)\n+\t\t\t// system?\n+\t\t\t.build();\n+\t}\n+\n+\t/**\n+\t * Tries to convert the given raw form to the provided dataset. It does not\n+\t * check whether the {@link NamespacedId} that are converted in this processes\n+\t * are actually resolvable. Also, it tries to map the values to a subclass of\n+\t * {@link Form}, for conversion. If that is not possible the untranslated values\n+\t * are output.\n+\t */\n+\tpublic FormConfigFullRepresentation tryTranslateToDataset(MasterMetaStorage storage, DatasetId target, ObjectMapper mapper, User user) {\n+\t\tJsonNode finalRep = values;\n+\t\ttry {\n+\t\t\tForm intemediateRep = mapper.readerFor(Form.class).readValue(values.traverse());\n+\t\t\tForm translatedRep = QueryTranslator.replaceDataset(storage.getNamespaces(), intemediateRep, target);\n+\t\t\tfinalRep = mapper.valueToTree(translatedRep);\n+\t\t}\n+\t\tcatch (IOException e) {\n+\t\t\tlog.warn(\"Unable to translate form configuration {} to dataset {}. Sending untranslated version.\", getId(), target);\n+\t\t}\n+\n+\t\t@NonNull", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxNTc2Nw=="}, "originalCommit": {"oid": "41b70991f52c85caaf40043419e4c633fcc70cd7"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjk4NDMyOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/execution/Labelable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoyMjowN1rOGFs7Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1MToyOFrOGFt5rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMjEzNQ==", "bodyText": "Sollte Labelable nicht auch ein getLabel haben, dann w\u00fcrden die Klassen nicht einen Consumer MetaDataPatch erwarten sondern sich selbst und MetaDataPatch w\u00e4re ein TypeUnion all dieser Klassen?", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408632135", "createdAt": "2020-04-15T07:22:07Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/execution/Labelable.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.bakdata.conquery.models.execution;\n+\n+import java.util.function.Consumer;\n+\n+import com.bakdata.conquery.apiv1.MetaDataPatch;\n+\n+/**\n+ * Interface for classes that are able to be patched with an {@link MetaDataPatch}.\n+ * Lets the implementing class set the label if the label in the patch is not {@code null}.\n+ */\n+public interface Labelable {\n+\tvoid setLabel(String label);\n+\t\n+\tdefault Consumer<MetaDataPatch> labeler() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b70991f52c85caaf40043419e4c633fcc70cd7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0ODExMA==", "bodyText": "Ja, get Label werde ich noch erg\u00e4nzen. Den zweiten Teil verstehe ich nicht so ganz. Kannst du das bitte etwas ausf\u00fchren?", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408648110", "createdAt": "2020-04-15T07:51:28Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/execution/Labelable.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.bakdata.conquery.models.execution;\n+\n+import java.util.function.Consumer;\n+\n+import com.bakdata.conquery.apiv1.MetaDataPatch;\n+\n+/**\n+ * Interface for classes that are able to be patched with an {@link MetaDataPatch}.\n+ * Lets the implementing class set the label if the label in the patch is not {@code null}.\n+ */\n+public interface Labelable {\n+\tvoid setLabel(String label);\n+\t\n+\tdefault Consumer<MetaDataPatch> labeler() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMjEzNQ=="}, "originalCommit": {"oid": "41b70991f52c85caaf40043419e4c633fcc70cd7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjk4NjMwOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/execution/Shareable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoyMjo1MFrOGFs8nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1MjozM1rOGFt8Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMjQ3Ng==", "bodyText": "das sieht merkw\u00fcrdig aus", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408632476", "createdAt": "2020-04-15T07:22:50Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/execution/Shareable.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.bakdata.conquery.models.execution;\n+\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+import com.bakdata.conquery.apiv1.MetaDataPatch;\n+import com.bakdata.conquery.apiv1.MetaDataPatch.PermissionCreator;\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.AuthorizationHelper;\n+import com.bakdata.conquery.models.auth.entities.Group;\n+import com.bakdata.conquery.models.auth.entities.PermissionOwner;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.permissions.AbilitySets;\n+import com.bakdata.conquery.models.auth.permissions.ConqueryPermission;\n+import com.bakdata.conquery.models.identifiable.Identifiable;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.util.QueryUtils;\n+import lombok.NonNull;\n+\n+/**\n+ * Interface for classes that are able to be patched with an {@link MetaDataPatch}.\n+ * Allows sharing of implementations among groups of a given user.\n+ */\n+public interface Shareable {\n+\tstatic final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(Shareable.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b70991f52c85caaf40043419e4c633fcc70cd7"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0ODcxNQ==", "bodyText": "Kann ich noch kurzen. Leider Funktioniert die Lombok-Logger Annotation nicht auf Interfaces.\nHast du eine Idee warum?", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408648715", "createdAt": "2020-04-15T07:52:33Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/execution/Shareable.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.bakdata.conquery.models.execution;\n+\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+import com.bakdata.conquery.apiv1.MetaDataPatch;\n+import com.bakdata.conquery.apiv1.MetaDataPatch.PermissionCreator;\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.AuthorizationHelper;\n+import com.bakdata.conquery.models.auth.entities.Group;\n+import com.bakdata.conquery.models.auth.entities.PermissionOwner;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.permissions.AbilitySets;\n+import com.bakdata.conquery.models.auth.permissions.ConqueryPermission;\n+import com.bakdata.conquery.models.identifiable.Identifiable;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.util.QueryUtils;\n+import lombok.NonNull;\n+\n+/**\n+ * Interface for classes that are able to be patched with an {@link MetaDataPatch}.\n+ * Allows sharing of implementations among groups of a given user.\n+ */\n+public interface Shareable {\n+\tstatic final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(Shareable.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMjQ3Ng=="}, "originalCommit": {"oid": "41b70991f52c85caaf40043419e4c633fcc70cd7"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1377, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}