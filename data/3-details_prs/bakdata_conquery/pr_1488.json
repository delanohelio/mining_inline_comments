{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NzYxMDM1", "number": 1488, "title": "Fix/kw43/retrival of concept tree child label", "bodyText": "Before the ConceptTreeChild was tried to retrieved through the central registry, where it was not registered", "createdAt": "2020-12-10T08:40:18Z", "url": "https://github.com/bakdata/conquery/pull/1488", "merged": true, "mergeCommit": {"oid": "c68ab55b148f61f1e4d5ab1cb444871f834984f3"}, "closed": true, "closedAt": "2020-12-10T12:53:30Z", "author": {"login": "thoniTUB"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkefWNAH2gAyNTM1NzYxMDM1OjA5NWRiMDY5NjY3ZGJhODViZWY2ZjczNWJmMTJmNWMzYzVhMmQ4ZWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkyN2AgFqTU0OTEzMTk3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "095db069667dba85bef6f735bf12f5c3c5a2d8ea", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/095db069667dba85bef6f735bf12f5c3c5a2d8ea", "committedDate": "2020-12-09T13:09:54Z", "message": "searches the concept for the child label instead of falsely resolving it through the central-registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7c7951b015c23891e98027d92ad14a2e6cf2b4a", "author": {"user": {"login": "thoniTUB", "name": "MT"}}, "url": "https://github.com/bakdata/conquery/commit/d7c7951b015c23891e98027d92ad14a2e6cf2b4a", "committedDate": "2020-12-10T10:17:37Z", "message": "fixes column namer test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MTMxOTc1", "url": "https://github.com/bakdata/conquery/pull/1488#pullrequestreview-549131975", "createdAt": "2020-12-10T12:08:13Z", "commit": {"oid": "d7c7951b015c23891e98027d92ad14a2e6cf2b4a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjowODoxM1rOIDGG3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjowODoxM1rOIDGG3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDExNjcwMg==", "bodyText": "Ich glaube du testest hier nirgends deinen neuen case mit einem Child? bzw hier hat sich nirgends ein label ge\u00e4dnert", "url": "https://github.com/bakdata/conquery/pull/1488#discussion_r540116702", "createdAt": "2020-12-10T12:08:13Z", "author": {"login": "awildturtok"}, "path": "backend/src/test/java/com/bakdata/conquery/models/query/DefaultColumnNameTest.java", "diffHunk": "@@ -8,159 +8,193 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Locale;\n+import java.util.Set;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n import java.util.stream.Stream;\n \n import com.bakdata.conquery.models.concepts.SelectHolder;\n+import com.bakdata.conquery.models.concepts.conditions.EqualCondition;\n import com.bakdata.conquery.models.concepts.select.Select;\n import com.bakdata.conquery.models.concepts.select.concept.UniversalSelect;\n import com.bakdata.conquery.models.concepts.tree.ConceptTreeChild;\n import com.bakdata.conquery.models.concepts.tree.ConceptTreeConnector;\n import com.bakdata.conquery.models.concepts.tree.TreeConcept;\n+import com.bakdata.conquery.models.exceptions.ConfigurationException;\n+import com.bakdata.conquery.models.exceptions.JSONException;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ConceptId;\n import com.bakdata.conquery.models.identifiable.ids.specific.ConceptTreeChildId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n import com.bakdata.conquery.models.query.concept.specific.CQConcept;\n import com.bakdata.conquery.models.query.queryplan.aggregators.Aggregator;\n import com.bakdata.conquery.models.query.resultinfo.SelectResultInfo;\n import com.bakdata.conquery.models.worker.DatasetRegistry;\n+import io.dropwizard.jersey.validation.Validators;\n+import lombok.SneakyThrows;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.Arguments;\n import org.junit.jupiter.params.provider.MethodSource;\n \n+import javax.validation.Validator;\n+\n public class DefaultColumnNameTest {\n \tprivate final static DatasetRegistry DATASET_REGISTRY = mock(DatasetRegistry.class);\n \tprivate final static PrintSettings SETTINGS = new PrintSettings(false, Locale.ENGLISH, DATASET_REGISTRY);\n+\tprivate final static Validator VALIDATOR = Validators.newValidator();\n \t\n \tprivate final static Function<TestConcept,Select> FIRST_CONCEPT_SELECT_EXTRACTOR = (concept) -> concept.getSelects().get(0);\n \tprivate final static Function<TestConcept,Select> FIRST_CONNCETOR_FIRST_SELECT_EXTRACTOR = (concept) -> concept.getConnectors().get(0).getSelects().get(0);\n \t\n-\t@BeforeAll\n-\tstatic void before() {\n-\t\tdoAnswer(invocation -> {\n-\t\t\tfinal ConceptTreeChildId id = invocation.getArgument(0);\n-\t\t\tConceptTreeChild child = new ConceptTreeChild();\n-\t\t\tchild.setLabel(id.getName());\n-\t\t\treturn child;\n-\t\t}).when(DATASET_REGISTRY).resolve(any());\n-\t}\n-\t\n \tprivate static Stream<Arguments> provideCombinations() {\n \t\treturn Stream.of(\n \t\t\t// ConceptSelect, without CQLabel, one Id\n \t\t\tArguments.of(\n-\t\t\t\tTestConcept.create(1, FIRST_CONCEPT_SELECT_EXTRACTOR),\n-\t\t\t\tTestCQConcept.create(false, 1),\n+\t\t\t\tTestConcept.create(1, FIRST_CONCEPT_SELECT_EXTRACTOR, 1),\n+\t\t\t\tfalse,\n \t\t\t\t\"TestConceptLabel - ID_0 - TestSelectLabel\"),\n \t\t\t// ConceptSelect without CQLabel, multiple Ids\n \t\t\tArguments.of(\n-\t\t\t\tTestConcept.create(1, FIRST_CONCEPT_SELECT_EXTRACTOR),\n-\t\t\t\tTestCQConcept.create(false, 3),\n+\t\t\t\tTestConcept.create(1, FIRST_CONCEPT_SELECT_EXTRACTOR, 3),\n+\t\t\t\tfalse,\n \t\t\t\t\"TestConceptLabel - ID_0+ID_1+ID_2 - TestSelectLabel\"),\n \t\t\t// ConceptSelect with CQLabel, one Id\n \t\t\tArguments.of(\n-\t\t\t\tTestConcept.create(1, FIRST_CONCEPT_SELECT_EXTRACTOR),\n-\t\t\t\tTestCQConcept.create(true, 1),\n+\t\t\t\tTestConcept.create(1, FIRST_CONCEPT_SELECT_EXTRACTOR, 1),\n+\t\t\t\ttrue,\n \t\t\t\t\"TestConceptLabel - TestCQLabel - TestSelectLabel\"),\n \t\t\t// ConceptSelect with CQLabel, multiple Ids\n \t\t\tArguments.of(\n-\t\t\t\tTestConcept.create(1, FIRST_CONCEPT_SELECT_EXTRACTOR),\n-\t\t\t\tTestCQConcept.create(true, 3),\n+\t\t\t\tTestConcept.create(1, FIRST_CONCEPT_SELECT_EXTRACTOR, 3),\n+\t\t\t\ttrue,\n \t\t\t\t\"TestConceptLabel - TestCQLabel - TestSelectLabel\"),\n \t\t\t\n \t\t\t// ConnectorSelect, without CQLabel, one Id, one Connector\n \t\t\tArguments.of(\n-\t\t\t\tTestConcept.create(1, FIRST_CONNCETOR_FIRST_SELECT_EXTRACTOR),\n-\t\t\t\tTestCQConcept.create(false, 1),\n+\t\t\t\tTestConcept.create(1, FIRST_CONNCETOR_FIRST_SELECT_EXTRACTOR, 1),\n+\t\t\t\tfalse,\n \t\t\t\t\"TestConceptLabel - ID_0 - TestSelectLabel\"),\n \t\t\t// ConnectorSelect without CQLabel, multiple Ids, one Connector\n \t\t\tArguments.of(\n-\t\t\t\tTestConcept.create(1, FIRST_CONNCETOR_FIRST_SELECT_EXTRACTOR),\n-\t\t\t\tTestCQConcept.create(false, 3),\n+\t\t\t\tTestConcept.create(1, FIRST_CONNCETOR_FIRST_SELECT_EXTRACTOR, 3),\n+\t\t\t\tfalse,\n \t\t\t\t\"TestConceptLabel - ID_0+ID_1+ID_2 - TestSelectLabel\"),\n \t\t\t// ConnectorSelect with CQLabel, one Id, one Connector\n \t\t\tArguments.of(\n-\t\t\t\tTestConcept.create(1, FIRST_CONNCETOR_FIRST_SELECT_EXTRACTOR),\n-\t\t\t\tTestCQConcept.create(true, 1),\n+\t\t\t\tTestConcept.create(1, FIRST_CONNCETOR_FIRST_SELECT_EXTRACTOR, 1),\n+\t\t\t\ttrue,\n \t\t\t\t\"TestConceptLabel - TestCQLabel - TestSelectLabel\"),\n \t\t\t// ConnectorSelect with CQLabel, multiple Ids, one Connector\n \t\t\tArguments.of(\n-\t\t\t\tTestConcept.create(1, FIRST_CONNCETOR_FIRST_SELECT_EXTRACTOR),\n-\t\t\t\tTestCQConcept.create(true, 3),\n+\t\t\t\tTestConcept.create(1, FIRST_CONNCETOR_FIRST_SELECT_EXTRACTOR, 3),\n+\t\t\t\ttrue,\n \t\t\t\t\"TestConceptLabel - TestCQLabel - TestSelectLabel\"),\n \t\t\t\n \t\t\t// ConnectorSelect, without CQLabel, one Id, multiple Connectors\n \t\t\tArguments.of(\n-\t\t\t\tTestConcept.create(3, FIRST_CONNCETOR_FIRST_SELECT_EXTRACTOR),\n-\t\t\t\tTestCQConcept.create(false, 1),\n+\t\t\t\tTestConcept.create(3, FIRST_CONNCETOR_FIRST_SELECT_EXTRACTOR, 1),\n+\t\t\t\tfalse,\n \t\t\t\t\"TestConceptLabel - ID_0 - TestConnectorLabel_0 TestSelectLabel\"),\n \t\t\t// ConnectorSelect without CQLabel, multiple Ids, multiple Connectors\n \t\t\tArguments.of(\n-\t\t\t\tTestConcept.create(3, FIRST_CONNCETOR_FIRST_SELECT_EXTRACTOR),\n-\t\t\t\tTestCQConcept.create(false, 3),\n+\t\t\t\tTestConcept.create(3, FIRST_CONNCETOR_FIRST_SELECT_EXTRACTOR, 3),\n+\t\t\t\tfalse,\n \t\t\t\t\"TestConceptLabel - ID_0+ID_1+ID_2 - TestConnectorLabel_0 TestSelectLabel\"),\n \t\t\t// ConnectorSelect with CQLabel, one Id, multiple Connectors\n \t\t\tArguments.of(\n-\t\t\t\tTestConcept.create(3, FIRST_CONNCETOR_FIRST_SELECT_EXTRACTOR),\n-\t\t\t\tTestCQConcept.create(true, 1),\n+\t\t\t\tTestConcept.create(3, FIRST_CONNCETOR_FIRST_SELECT_EXTRACTOR, 1),\n+\t\t\t\ttrue,\n \t\t\t\t\"TestConceptLabel - TestCQLabel - TestConnectorLabel_0 TestSelectLabel\"),\n \t\t\t// ConnectorSelect with CQLabel, multiple Ids, multiple Connectors\n \t\t\tArguments.of(\n-\t\t\t\tTestConcept.create(3, FIRST_CONNCETOR_FIRST_SELECT_EXTRACTOR),\n-\t\t\t\tTestCQConcept.create(true, 3),\n+\t\t\t\tTestConcept.create(3, FIRST_CONNCETOR_FIRST_SELECT_EXTRACTOR, 3),\n+\t\t\t\ttrue,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7c7951b015c23891e98027d92ad14a2e6cf2b4a"}, "originalPosition": 139}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4785, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}