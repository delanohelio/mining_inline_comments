{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NzE3MDAz", "number": 1043, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzoxNTo1NlrODkQx5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjowNjoyOFrODoZlXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzUwMjQ1OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/web/ActiveUsersFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzoxNTo1NlrOFwfEig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzoxNTo1NlrOFwfEig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM4NTAzNA==", "bodyText": "Ich glaube hier ist ein unn\u00f6tiges Klammerpaar", "url": "https://github.com/bakdata/conquery/pull/1043#discussion_r386385034", "createdAt": "2020-03-02T13:15:56Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/auth/web/ActiveUsersFilter.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.bakdata.conquery.models.auth.web;\n+\n+import java.io.IOException;\n+import java.security.Principal;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Priority;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.PreMatching;\n+\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.AuthorizationHelper;\n+import com.bakdata.conquery.models.auth.entities.Group;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.config.ConqueryConfig;\n+import com.codahale.metrics.SharedMetricRegistries;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import lombok.RequiredArgsConstructor;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+@PreMatching\n+// Chain this filter after the Authentication filter\n+@Priority(2000)\n+@RequiredArgsConstructor\n+public class ActiveUsersFilter implements ContainerRequestFilter {\n+\n+\tprivate final MasterMetaStorage storage;\n+\n+\t/**\n+\t * Google cache managing evicition etc for us.\n+\t */\n+\tprivate final Cache<User, Boolean> activeUsers = CacheBuilder.newBuilder()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t   .expireAfterAccess(ConqueryConfig.getInstance().getMetricsConfig().getUserActiveHours(), TimeUnit.HOURS)\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.removalListener(notification -> decrementPrimaryGroupCount((User) notification.getKey()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build();\n+\n+\n+\n+\n+\tpublic void incrementPrimaryGroupCount(User user) {\n+\t\tfinal Group primaryGroup = AuthorizationHelper.getPrimaryGroup(user, storage);\n+\n+\t\t// Groups with less than three users are not tracked, for privacy reasons.\n+\t\tif(primaryGroup.getMembers().size() <= ConqueryConfig.getInstance().getMetricsConfig().getGroupTrackingMinSize())\n+\t\t\treturn;\n+\n+\t\tSharedMetricRegistries.getDefault().counter(primaryGroup.getName() + \".active\").inc();\n+\t}\n+\n+\tpublic void decrementPrimaryGroupCount(User user) {\n+\t\tfinal Group primaryGroup = AuthorizationHelper.getPrimaryGroup(user, storage);\n+\n+\t\t// Groups with less than three users are not tracked.\n+\t\tif(primaryGroup.getMembers().size() <= ConqueryConfig.getInstance().getMetricsConfig().getGroupTrackingMinSize())\n+\t\t\treturn;\n+\n+\t\tSharedMetricRegistries.getDefault().counter(primaryGroup.getName() + \".active\").dec();\n+\t}\n+\n+\n+\t@SneakyThrows\n+\t@Override\n+\tpublic void filter(ContainerRequestContext requestContext) throws IOException {\n+\t\tfinal Principal userPrincipal = requestContext.getSecurityContext().getUserPrincipal();\n+\n+\t\tif(userPrincipal == null){\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tactiveUsers.get(((User) userPrincipal), () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f35e30a64bb2e754c1970ca697a94c8e15f1fb67"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjgyMDM5OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/web/ActiveUsersFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTo1MDo1OFrOF26fyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTo1MDo1OFrOF26fyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEyNTgzMw==", "bodyText": "Cool gel\u00f6st!", "url": "https://github.com/bakdata/conquery/pull/1043#discussion_r393125833", "createdAt": "2020-03-16T15:50:58Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/auth/web/ActiveUsersFilter.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.bakdata.conquery.models.auth.web;\n+\n+import java.io.IOException;\n+import java.security.Principal;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Priority;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.PreMatching;\n+\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.AuthorizationHelper;\n+import com.bakdata.conquery.models.auth.entities.Group;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.config.ConqueryConfig;\n+import com.codahale.metrics.SharedMetricRegistries;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import lombok.RequiredArgsConstructor;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+@PreMatching\n+// Chain this filter after the Authentication filter\n+@Priority(2000)\n+@RequiredArgsConstructor\n+public class ActiveUsersFilter implements ContainerRequestFilter {\n+\n+\tprivate final MasterMetaStorage storage;\n+\n+\t/**\n+\t * Google cache managing evicition etc for us.\n+\t */\n+\tprivate final Cache<User, Boolean> activeUsers = CacheBuilder.newBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9771ad8b2301f5f0a0d1e194b72838103c2bc31b"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjgyNDEwOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/web/ActiveUsersFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTo1MTo0NlrOF26iBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTo1MTo0NlrOF26iBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEyNjQwNw==", "bodyText": "zweimal \".active\" -> Konstante", "url": "https://github.com/bakdata/conquery/pull/1043#discussion_r393126407", "createdAt": "2020-03-16T15:51:46Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/auth/web/ActiveUsersFilter.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.bakdata.conquery.models.auth.web;\n+\n+import java.io.IOException;\n+import java.security.Principal;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Priority;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.PreMatching;\n+\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.AuthorizationHelper;\n+import com.bakdata.conquery.models.auth.entities.Group;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.config.ConqueryConfig;\n+import com.codahale.metrics.SharedMetricRegistries;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import lombok.RequiredArgsConstructor;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+@PreMatching\n+// Chain this filter after the Authentication filter\n+@Priority(2000)\n+@RequiredArgsConstructor\n+public class ActiveUsersFilter implements ContainerRequestFilter {\n+\n+\tprivate final MasterMetaStorage storage;\n+\n+\t/**\n+\t * Google cache managing evicition etc for us.\n+\t */\n+\tprivate final Cache<User, Boolean> activeUsers = CacheBuilder.newBuilder()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t   .expireAfterAccess(ConqueryConfig.getInstance().getMetricsConfig().getUserActiveHours(), TimeUnit.HOURS)\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.removalListener(notification -> decrementPrimaryGroupCount((User) notification.getKey()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build();\n+\n+\n+\n+\n+\tpublic void incrementPrimaryGroupCount(User user) {\n+\t\tfinal Group primaryGroup = AuthorizationHelper.getPrimaryGroup(user, storage);\n+\n+\t\t// Groups with less than three users are not tracked, for privacy reasons.\n+\t\tif(primaryGroup.getMembers().size() <= ConqueryConfig.getInstance().getMetricsConfig().getGroupTrackingMinSize())\n+\t\t\treturn;\n+\n+\t\tSharedMetricRegistries.getDefault().counter(primaryGroup.getName() + \".active\").inc();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9771ad8b2301f5f0a0d1e194b72838103c2bc31b"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjgyNTk2OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/develop/DefaultInitialUserRealm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTo1MjoxMVrOF26jNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTo1MjoxMVrOF26jNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEyNjcwOA==", "bodyText": "Danke :)", "url": "https://github.com/bakdata/conquery/pull/1043#discussion_r393126708", "createdAt": "2020-03-16T15:52:11Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/auth/develop/DefaultInitialUserRealm.java", "diffHunk": "@@ -88,9 +88,12 @@ public AuthenticationToken extractToken(ContainerRequestContext requestContext)\n \t\t\tuid = requestContext.getUriInfo().getQueryParameters().getFirst(UID_QUERY_STRING_PARAMETER);\n \t\t}\n \n+\n \t\tUserId userId = null;\n \n \t\tif (StringUtils.isNotEmpty(uid)) {\n+\t\t\tuid = uid.replaceFirst(\"^Bearer \", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9771ad8b2301f5f0a0d1e194b72838103c2bc31b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjgzMTg4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/web/DefaultAuthFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTo1MzozN1rOF26nDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTo1MzozN1rOF26nDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEyNzY5NQ==", "bodyText": "Danke nochmals!", "url": "https://github.com/bakdata/conquery/pull/1043#discussion_r393127695", "createdAt": "2020-03-16T15:53:37Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/auth/web/DefaultAuthFilter.java", "diffHunk": "@@ -35,6 +37,7 @@\n @Slf4j\n @PreMatching\n @RequiredArgsConstructor(access = AccessLevel.PRIVATE)\n+@Priority(Priorities.AUTHENTICATION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9771ad8b2301f5f0a0d1e194b72838103c2bc31b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjg1MzgzOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTo1ODoyOVrOF2606w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjowMDoxNFrOF265zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzMTI0Mw==", "bodyText": "Da fehlt noch ein decrement f\u00fcr diese Metric oder?", "url": "https://github.com/bakdata/conquery/pull/1043#discussion_r393131243", "createdAt": "2020-03-16T15:58:29Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "diffHunk": "@@ -107,27 +108,26 @@ public ManagedExecutionId createId() {\n \t\treturn new ManagedExecutionId(dataset, queryId);\n \t}\n \n-\tprotected void fail() {\n-\t\tsynchronized (execution) {\n-\t\t\tstate = ExecutionState.FAILED;\n-\t\t\tfinishTime = LocalDateTime.now();\n-\t\t\texecution.countDown();\n-\t\t}\n+\tprotected void fail(MasterMetaStorage storage) {\n+\t\tfinish(storage, ExecutionState.FAILED);\n \t}\n \n \tpublic void start() {\n+\t\tSharedMetricRegistries.getDefault().counter(\"queries.running\").inc();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9771ad8b2301f5f0a0d1e194b72838103c2bc31b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzMjQ5Mw==", "bodyText": "Wenn ja, dann ist es vielleicht besser eine Konstante f\u00fcr die metric zu haben", "url": "https://github.com/bakdata/conquery/pull/1043#discussion_r393132493", "createdAt": "2020-03-16T16:00:14Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "diffHunk": "@@ -107,27 +108,26 @@ public ManagedExecutionId createId() {\n \t\treturn new ManagedExecutionId(dataset, queryId);\n \t}\n \n-\tprotected void fail() {\n-\t\tsynchronized (execution) {\n-\t\t\tstate = ExecutionState.FAILED;\n-\t\t\tfinishTime = LocalDateTime.now();\n-\t\t\texecution.countDown();\n-\t\t}\n+\tprotected void fail(MasterMetaStorage storage) {\n+\t\tfinish(storage, ExecutionState.FAILED);\n \t}\n \n \tpublic void start() {\n+\t\tSharedMetricRegistries.getDefault().counter(\"queries.running\").inc();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzMTI0Mw=="}, "originalCommit": {"oid": "9771ad8b2301f5f0a0d1e194b72838103c2bc31b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjg3MjM4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjowMjo0NlrOF27Apg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjowNzoyNlrOF27NKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzNDI0Ng==", "bodyText": "Werden failed executions auch dem Nutzer im Frontend angezeigt?", "url": "https://github.com/bakdata/conquery/pull/1043#discussion_r393134246", "createdAt": "2020-03-16T16:02:46Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "diffHunk": "@@ -107,27 +108,26 @@ public ManagedExecutionId createId() {\n \t\treturn new ManagedExecutionId(dataset, queryId);\n \t}\n \n-\tprotected void fail() {\n-\t\tsynchronized (execution) {\n-\t\t\tstate = ExecutionState.FAILED;\n-\t\t\tfinishTime = LocalDateTime.now();\n-\t\t\texecution.countDown();\n-\t\t}\n+\tprotected void fail(MasterMetaStorage storage) {\n+\t\tfinish(storage, ExecutionState.FAILED);\n \t}\n \n \tpublic void start() {\n+\t\tSharedMetricRegistries.getDefault().counter(\"queries.running\").inc();\n+\n \t\tstartTime = LocalDateTime.now();\n \t\tstate = ExecutionState.RUNNING;\n \t}\n \n-\tprotected void finish(@NonNull MasterMetaStorage storage) {\n+\tprotected void finish(@NonNull MasterMetaStorage storage, ExecutionState executionState) {\n \t\tif (getState() == ExecutionState.NEW)\n \t\t\tlog.error(\"Query {} was never run.\", getId());\n \n \t\tsynchronized (execution) {\n \t\t\tfinishTime = LocalDateTime.now();\n-\t\t\tstate = ExecutionState.DONE;\n \t\t\texecution.countDown();\n+\t\t\tsetState(executionState);\n+\n \t\t\ttry {\n \t\t\t\tstorage.updateExecution(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9771ad8b2301f5f0a0d1e194b72838103c2bc31b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzNzQ1MQ==", "bodyText": "Ansonsten speicher die Query nur ab wenn auch ein Storage reingereicht wird", "url": "https://github.com/bakdata/conquery/pull/1043#discussion_r393137451", "createdAt": "2020-03-16T16:07:26Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "diffHunk": "@@ -107,27 +108,26 @@ public ManagedExecutionId createId() {\n \t\treturn new ManagedExecutionId(dataset, queryId);\n \t}\n \n-\tprotected void fail() {\n-\t\tsynchronized (execution) {\n-\t\t\tstate = ExecutionState.FAILED;\n-\t\t\tfinishTime = LocalDateTime.now();\n-\t\t\texecution.countDown();\n-\t\t}\n+\tprotected void fail(MasterMetaStorage storage) {\n+\t\tfinish(storage, ExecutionState.FAILED);\n \t}\n \n \tpublic void start() {\n+\t\tSharedMetricRegistries.getDefault().counter(\"queries.running\").inc();\n+\n \t\tstartTime = LocalDateTime.now();\n \t\tstate = ExecutionState.RUNNING;\n \t}\n \n-\tprotected void finish(@NonNull MasterMetaStorage storage) {\n+\tprotected void finish(@NonNull MasterMetaStorage storage, ExecutionState executionState) {\n \t\tif (getState() == ExecutionState.NEW)\n \t\t\tlog.error(\"Query {} was never run.\", getId());\n \n \t\tsynchronized (execution) {\n \t\t\tfinishTime = LocalDateTime.now();\n-\t\t\tstate = ExecutionState.DONE;\n \t\t\texecution.countDown();\n+\t\t\tsetState(executionState);\n+\n \t\t\ttry {\n \t\t\t\tstorage.updateExecution(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzNDI0Ng=="}, "originalCommit": {"oid": "9771ad8b2301f5f0a0d1e194b72838103c2bc31b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjg4MTQxOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/jobs/JobManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjowNDo1M1rOF27GgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjowNDo1M1rOF27GgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzNTc0NA==", "bodyText": "typo lfast", "url": "https://github.com/bakdata/conquery/pull/1043#discussion_r393135744", "createdAt": "2020-03-16T16:04:53Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/jobs/JobManager.java", "diffHunk": "@@ -12,11 +12,11 @@\n public class JobManager implements Managed {\n \tprivate final JobExecutor slowExecutor;\n \tprivate final JobExecutor fastExecutor;\n-\t\n-\t\n+\n+\n \tpublic JobManager(String labelSuffix) {\n-\t\tslowExecutor = new JobExecutor(\"slow \"+labelSuffix);\n-\t\tfastExecutor = new JobExecutor(\"fast \"+labelSuffix);\n+\t\tslowExecutor = new JobExecutor(\"Job Manager slow \" + labelSuffix);\n+\t\tfastExecutor = new JobExecutor(\"Job Manager lfast \" + labelSuffix);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc4611388c9c3a30289b44cba9d8627328e04e6f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjg4Nzk4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjowNjoyOFrOF27KmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjowNjoyOFrOF27KmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzNjc5Mw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/bakdata/conquery/pull/1043#discussion_r393136793", "createdAt": "2020-03-16T16:06:28Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java", "diffHunk": "@@ -43,6 +43,7 @@ public void react(Worker context) throws Exception {\n \t\t} catch (Exception e) {\n \t\t\t// If one of the plans can not be created (maybe due to a Id that references a non existing concept) fail the whole job.\n \t\t\tsendFailureToMaster(execution.getInitializedShardResult(null), execution, context, e);\n+\t\t\treturn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc4611388c9c3a30289b44cba9d8627328e04e6f"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1510, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}