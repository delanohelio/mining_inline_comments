{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNTg5MzEy", "number": 1479, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjozNzoyN1rOFBwhGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTo1NToxNFrOFFDd0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Mzg3ODAwOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/filters/specific/DateDistanceFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjozNzoyN1rOIAkxRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjozNzoyN1rOIAkxRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3MzM1MA==", "bodyText": "Das sieht etwas nach einer magic number aus. Kannst du hier nitte eine sprechende Konstante draus machen?", "url": "https://github.com/bakdata/conquery/pull/1479#discussion_r537473350", "createdAt": "2020-12-07T12:37:27Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/filters/specific/DateDistanceFilter.java", "diffHunk": "@@ -25,30 +22,24 @@\n  */\n @Getter @Setter @Slf4j\n @CPSType(id=\"DATE_DISTANCE\", base=Filter.class)\n-public class DateDistanceFilter extends SingleColumnFilter<Range.LongRange> {\n+public class DateDistanceFilter extends Filter<Range.LongRange> {\n \n \t@NotNull\n \tprivate ChronoUnit timeUnit = ChronoUnit.YEARS;\n+\n \t\n \t@Override\n-\tpublic EnumSet<MajorTypeId> getAcceptedColumnTypes() {\n-\t\treturn EnumSet.of(MajorTypeId.DATE);\n+\tpublic void configureFrontend(FEFilter f) throws ConceptConfigurationException {\n+\t\tf.setType(FEFilterType.INTEGER_RANGE);\n \t}\n-\t\n+\n \t@Override\n-\tpublic void configureFrontend(FEFilter f) throws ConceptConfigurationException {\n-\t\tswitch (getColumn().getType()) {\n-\t\t\tcase DATE: {\n-\t\t\t\tf.setType(FEFilterType.INTEGER_RANGE);\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\tdefault:\n-\t\t\t\tthrow new ConceptConfigurationException(getConnector(), \"DATE_DISTANCE filter is incompatible with columns of type \" + getColumn().getType());\n-\t\t}\n+\tpublic Column[] getRequiredColumns() {\n+\t\treturn new Column[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33bbda35d573b43fee2fa1f00cd644a3679fd27e"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Mzg4MTgzOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/filters/specific/DurationSumFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjozODoyOVrOIAkziA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjozODoyOVrOIAkziA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3MzkyOA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/bakdata/conquery/pull/1479#discussion_r537473928", "createdAt": "2020-12-07T12:38:29Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/filters/specific/DurationSumFilter.java", "diffHunk": "@@ -31,20 +30,12 @@\n \n \t@Override\n \tpublic void configureFrontend(FEFilter f) throws ConceptConfigurationException {\n-\t\tswitch (getColumn().getType()) {\n-\t\t\tcase DATE:\n-\t\t\tcase DATE_RANGE: {\n-\t\t\t\tf.setType(FEFilterType.INTEGER_RANGE);\n-\t\t\t\tf.setMin(0);\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\tdefault:\n-\t\t\t\tthrow new ConceptConfigurationException(getConnector(), \"DURATION_SUM filter is incompatible with columns of type \" + getColumn().getType());\n-\t\t}\n+\t\tf.setType(FEFilterType.INTEGER_RANGE);\n+\t\tf.setMin(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33bbda35d573b43fee2fa1f00cd644a3679fd27e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Mzg5ODcxOnYy", "diffSide": "LEFT", "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/select/connector/specific/DurationSumSelect.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjo0MjoyNFrOIAk81g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjo0MjoyNFrOIAk81g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3NjMxMA==", "bodyText": "Die Jsons in den Test enthalten noch diesen Member, weshalb die CI fehlschl\u00e4gt", "url": "https://github.com/bakdata/conquery/pull/1479#discussion_r537476310", "createdAt": "2020-12-07T12:42:24Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/select/connector/specific/DurationSumSelect.java", "diffHunk": "@@ -1,30 +1,15 @@\n package com.bakdata.conquery.models.concepts.select.connector.specific;\n \n import com.bakdata.conquery.io.cps.CPSType;\n-import com.bakdata.conquery.io.jackson.serializer.NsIdRef;\n import com.bakdata.conquery.models.concepts.select.Select;\n-import com.bakdata.conquery.models.concepts.select.connector.SingleColumnSelect;\n-import com.bakdata.conquery.models.datasets.Column;\n import com.bakdata.conquery.models.query.queryplan.aggregators.Aggregator;\n import com.bakdata.conquery.models.query.queryplan.aggregators.specific.DurationSumAggregator;\n-import com.fasterxml.jackson.annotation.JsonCreator;\n \n @CPSType(id = \"DURATION_SUM\", base = Select.class)\n-public class DurationSumSelect extends SingleColumnSelect {\n-\n-\t@JsonCreator\n-\tpublic DurationSumSelect(@NsIdRef Column column) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33bbda35d573b43fee2fa1f00cd644a3679fd27e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MzkxNDk3OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQConcept.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjo0NjowOFrOIAlGPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjo0NjowOFrOIAlGPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3ODcxOQ==", "bodyText": "Just to be sure\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif (table.getDateColumn() != null) {\n          \n          \n            \n            \t\tif (table.getDateColumn() != null && table.getDateColumn().getValue() != null ) {", "url": "https://github.com/bakdata/conquery/pull/1479#discussion_r537478719", "createdAt": "2020-12-07T12:46:08Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQConcept.java", "diffHunk": "@@ -193,17 +193,23 @@ protected QPNode conceptChild(Concept<?> concept, QueryPlanContext context, List\n \t}\n \n \tprivate Column selectValidityDateColumn(CQTable table) {\n+\t\tColumn validityDate = null;\n+\n \t\tif (table.getDateColumn() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33bbda35d573b43fee2fa1f00cd644a3679fd27e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MzkyNjIyOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/filter/event/DateDistanceFilterNode.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjo0ODoyMlrOIAlMXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTo1MDo0OVrOIAtWkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ4MDI4Nw==", "bodyText": "Sieht mir aus wie this.column = this.column;", "url": "https://github.com/bakdata/conquery/pull/1479#discussion_r537480287", "createdAt": "2020-12-07T12:48:22Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/filter/event/DateDistanceFilterNode.java", "diffHunk": "@@ -30,7 +30,7 @@\n \t@Setter\n \tprivate Column column;\n \n-\tpublic DateDistanceFilterNode(Column column, ChronoUnit unit, Range.LongRange filterValue) {\n+\tpublic DateDistanceFilterNode(ChronoUnit unit, Range.LongRange filterValue) {\n \t\tsuper(filterValue);\n \t\tthis.column = column;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33bbda35d573b43fee2fa1f00cd644a3679fd27e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5NDI3MA==", "bodyText": "Warum richtet sich das jetzt nicht mehr nach der ValidityDateColumn?", "url": "https://github.com/bakdata/conquery/pull/1479#discussion_r537594270", "createdAt": "2020-12-07T15:25:48Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/filter/event/DateDistanceFilterNode.java", "diffHunk": "@@ -30,7 +30,7 @@\n \t@Setter\n \tprivate Column column;\n \n-\tpublic DateDistanceFilterNode(Column column, ChronoUnit unit, Range.LongRange filterValue) {\n+\tpublic DateDistanceFilterNode(ChronoUnit unit, Range.LongRange filterValue) {\n \t\tsuper(filterValue);\n \t\tthis.column = column;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ4MDI4Nw=="}, "originalCommit": {"oid": "33bbda35d573b43fee2fa1f00cd644a3679fd27e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5NjAwNA==", "bodyText": "weil wir das f\u00fcr alter benutzen und das dann vermutlich zu verwirrung f\u00fchren w\u00fcrde", "url": "https://github.com/bakdata/conquery/pull/1479#discussion_r537596004", "createdAt": "2020-12-07T15:27:49Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/filter/event/DateDistanceFilterNode.java", "diffHunk": "@@ -30,7 +30,7 @@\n \t@Setter\n \tprivate Column column;\n \n-\tpublic DateDistanceFilterNode(Column column, ChronoUnit unit, Range.LongRange filterValue) {\n+\tpublic DateDistanceFilterNode(ChronoUnit unit, Range.LongRange filterValue) {\n \t\tsuper(filterValue);\n \t\tthis.column = column;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ4MDI4Nw=="}, "originalCommit": {"oid": "33bbda35d573b43fee2fa1f00cd644a3679fd27e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYxMzk2OA==", "bodyText": "Oki, stimmt", "url": "https://github.com/bakdata/conquery/pull/1479#discussion_r537613968", "createdAt": "2020-12-07T15:50:49Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/filter/event/DateDistanceFilterNode.java", "diffHunk": "@@ -30,7 +30,7 @@\n \t@Setter\n \tprivate Column column;\n \n-\tpublic DateDistanceFilterNode(Column column, ChronoUnit unit, Range.LongRange filterValue) {\n+\tpublic DateDistanceFilterNode(ChronoUnit unit, Range.LongRange filterValue) {\n \t\tsuper(filterValue);\n \t\tthis.column = column;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ4MDI4Nw=="}, "originalCommit": {"oid": "33bbda35d573b43fee2fa1f00cd644a3679fd27e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MzkzMDYyOnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/filter/event/DateDistanceFilterNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjo0OToyN1rOIAlPAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjo0OToyN1rOIAlPAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ4MDk2MQ==", "bodyText": "mmhmm", "url": "https://github.com/bakdata/conquery/pull/1479#discussion_r537480961", "createdAt": "2020-12-07T12:49:27Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/filter/event/DateDistanceFilterNode.java", "diffHunk": "@@ -44,15 +44,22 @@ public void nextTable(QueryExecutionContext ctx, TableId currentTable) {\n \t\telse {\n \t\t\treference = CDate.toLocalDate(ctx.getDateRestriction().getMaxValue());\n \t\t}\n+\n+\t\tcolumn = ctx.getValidityDateColumn();\n \t}\n \n \t@Override\n \tpublic DateDistanceFilterNode doClone(CloneContext ctx) {\n-\t\treturn new DateDistanceFilterNode(getColumn(), unit, filterValue);\n+\t\treturn new DateDistanceFilterNode(unit, filterValue);\n \t}\n \n \t@Override\n \tpublic boolean checkEvent(Bucket bucket, int event) {\n+\t\tif(getColumn() == null){\n+\t\t\t// todo wat do?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33bbda35d573b43fee2fa1f00cd644a3679fd27e"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTM1MDE4OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/commands/ManagerNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMToxNzo1OFrOIDEPZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo0Mjo0MFrOIDJ1fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA4NjExOA==", "bodyText": "Das sollte eigentlich schon in develop drinne sein? Wei\u00dft du warum das hier auftaucht?", "url": "https://github.com/bakdata/conquery/pull/1479#discussion_r540086118", "createdAt": "2020-12-10T11:17:58Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/commands/ManagerNode.java", "diffHunk": "@@ -183,6 +184,7 @@ public void run(ConqueryConfig config, Environment environment) throws Interrupt\n \t\t\t\t\t\tConqueryConfig.getInstance().getQueries().getOldQueriesTime().getUnit().toChronoUnit()\n \t\t\t\t)));\n \t\tenvironment.admin().addTask(new ClearFilterSourceSearch());\n+\t\tenvironment.admin().addTask(new ReportConsistencyTask(datasetRegistry));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5103f8eec082c6eac42b2dc63a2b663a77dbcfb"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE3Nzc5MQ==", "bodyText": "ich hab mal einen rebase gemacht", "url": "https://github.com/bakdata/conquery/pull/1479#discussion_r540177791", "createdAt": "2020-12-10T13:42:40Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/commands/ManagerNode.java", "diffHunk": "@@ -183,6 +184,7 @@ public void run(ConqueryConfig config, Environment environment) throws Interrupt\n \t\t\t\t\t\tConqueryConfig.getInstance().getQueries().getOldQueriesTime().getUnit().toChronoUnit()\n \t\t\t\t)));\n \t\tenvironment.admin().addTask(new ClearFilterSourceSearch());\n+\t\tenvironment.admin().addTask(new ReportConsistencyTask(datasetRegistry));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA4NjExOA=="}, "originalCommit": {"oid": "e5103f8eec082c6eac42b2dc63a2b663a77dbcfb"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODQyNjU3OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQConcept.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTo1Mjo0MVrOIFXMDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTo1Mjo0MVrOIFXMDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5MzcwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate Column selectValidityDateColumn(CQTable table) {\n          \n          \n            \n            \tprivate static Column selectValidityDateColumn(CQTable table) {", "url": "https://github.com/bakdata/conquery/pull/1479#discussion_r542493709", "createdAt": "2020-12-14T15:52:41Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQConcept.java", "diffHunk": "@@ -191,17 +191,22 @@ protected QPNode conceptChild(Concept<?> concept, QueryPlanContext context, List\n \t}\n \n \tprivate Column selectValidityDateColumn(CQTable table) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "178c3a6bfd263b07022d752f9d3efbe21afa9318"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODQzOTg1OnYy", "diffSide": "RIGHT", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/CountQuartersAggregator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTo1NToxNFrOIFXUHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjo1MDo0MlrOIFZ_eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NTc3Mw==", "bodyText": "K\u00f6nnte man noch einen ValidityDateAggregator als Abstraction einf\u00fchren, oder sind die Implementierung in den einzelnen Aggregatoren zu unterschiedlich?", "url": "https://github.com/bakdata/conquery/pull/1479#discussion_r542495773", "createdAt": "2020-12-14T15:55:14Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/CountQuartersAggregator.java", "diffHunk": "@@ -13,43 +13,48 @@\n import com.bakdata.conquery.models.externalservice.ResultType;\n import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n import com.bakdata.conquery.models.query.QueryExecutionContext;\n-import com.bakdata.conquery.models.query.queryplan.aggregators.SingleColumnAggregator;\n+import com.bakdata.conquery.models.query.queryplan.aggregators.Aggregator;\n import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n import it.unimi.dsi.fastutil.ints.IntOpenHashSet;\n import it.unimi.dsi.fastutil.ints.IntSet;\n+import lombok.Getter;\n \n /**\n  * Count the number of distinct quarters for all events. Implementation is specific for DateRanges\n  */\n-public class CountQuartersOfDateRangeAggregator extends SingleColumnAggregator<Long> {\n+public class CountQuartersAggregator implements Aggregator<Long> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "178c3a6bfd263b07022d752f9d3efbe21afa9318"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5Nzk3Mg==", "bodyText": "Es sieht so aus als h\u00e4tten alle einen Member f\u00fcr die DateRestriction und der Validity date Column", "url": "https://github.com/bakdata/conquery/pull/1479#discussion_r542497972", "createdAt": "2020-12-14T15:57:57Z", "author": {"login": "thoniTUB"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/CountQuartersAggregator.java", "diffHunk": "@@ -13,43 +13,48 @@\n import com.bakdata.conquery.models.externalservice.ResultType;\n import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n import com.bakdata.conquery.models.query.QueryExecutionContext;\n-import com.bakdata.conquery.models.query.queryplan.aggregators.SingleColumnAggregator;\n+import com.bakdata.conquery.models.query.queryplan.aggregators.Aggregator;\n import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n import it.unimi.dsi.fastutil.ints.IntOpenHashSet;\n import it.unimi.dsi.fastutil.ints.IntSet;\n+import lombok.Getter;\n \n /**\n  * Count the number of distinct quarters for all events. Implementation is specific for DateRanges\n  */\n-public class CountQuartersOfDateRangeAggregator extends SingleColumnAggregator<Long> {\n+public class CountQuartersAggregator implements Aggregator<Long> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NTc3Mw=="}, "originalCommit": {"oid": "178c3a6bfd263b07022d752f9d3efbe21afa9318"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwMDk4OA==", "bodyText": "Sie sollten identisch sein hier bietet es sich an", "url": "https://github.com/bakdata/conquery/pull/1479#discussion_r542500988", "createdAt": "2020-12-14T16:01:41Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/CountQuartersAggregator.java", "diffHunk": "@@ -13,43 +13,48 @@\n import com.bakdata.conquery.models.externalservice.ResultType;\n import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n import com.bakdata.conquery.models.query.QueryExecutionContext;\n-import com.bakdata.conquery.models.query.queryplan.aggregators.SingleColumnAggregator;\n+import com.bakdata.conquery.models.query.queryplan.aggregators.Aggregator;\n import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n import it.unimi.dsi.fastutil.ints.IntOpenHashSet;\n import it.unimi.dsi.fastutil.ints.IntSet;\n+import lombok.Getter;\n \n /**\n  * Count the number of distinct quarters for all events. Implementation is specific for DateRanges\n  */\n-public class CountQuartersOfDateRangeAggregator extends SingleColumnAggregator<Long> {\n+public class CountQuartersAggregator implements Aggregator<Long> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NTc3Mw=="}, "originalCommit": {"oid": "178c3a6bfd263b07022d752f9d3efbe21afa9318"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzOTY0Mg==", "bodyText": "aber ist mir gerade zu doof :/", "url": "https://github.com/bakdata/conquery/pull/1479#discussion_r542539642", "createdAt": "2020-12-14T16:50:42Z", "author": {"login": "awildturtok"}, "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/CountQuartersAggregator.java", "diffHunk": "@@ -13,43 +13,48 @@\n import com.bakdata.conquery.models.externalservice.ResultType;\n import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n import com.bakdata.conquery.models.query.QueryExecutionContext;\n-import com.bakdata.conquery.models.query.queryplan.aggregators.SingleColumnAggregator;\n+import com.bakdata.conquery.models.query.queryplan.aggregators.Aggregator;\n import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n import it.unimi.dsi.fastutil.ints.IntOpenHashSet;\n import it.unimi.dsi.fastutil.ints.IntSet;\n+import lombok.Getter;\n \n /**\n  * Count the number of distinct quarters for all events. Implementation is specific for DateRanges\n  */\n-public class CountQuartersOfDateRangeAggregator extends SingleColumnAggregator<Long> {\n+public class CountQuartersAggregator implements Aggregator<Long> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NTc3Mw=="}, "originalCommit": {"oid": "178c3a6bfd263b07022d752f9d3efbe21afa9318"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1557, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}