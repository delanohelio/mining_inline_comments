{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMzY4Nzk4", "number": 1657, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoyNToyMVrODvukBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoyNToyMVrODvukBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzcyNTUxOnYy", "diffSide": "RIGHT", "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/OCFLPersistentSessionManager.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoyNToyMVrOGCUuvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzoyMzoxMlrOGCvBQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4OTk4MQ==", "bodyText": "Is this line needed as it is repeated inside the synchronized (this) { block? I feel like it was just an oversight?", "url": "https://github.com/fcrepo/fcrepo/pull/1657#discussion_r405089981", "createdAt": "2020-04-07T20:25:21Z", "author": {"login": "whikloj"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/OCFLPersistentSessionManager.java", "diffHunk": "@@ -61,23 +61,20 @@ public PersistentStorageSession getSession(final String sessionId) {\n             throw new IllegalArgumentException(\"session id must be non-null\");\n         }\n \n-        final PersistentStorageSession session = sessionMap.get(sessionId);\n-\n-        if (session != null) {\n-            return session;\n-        }\n-\n-        final PersistentStorageSession newSession = new OCFLPersistentStorageSession(sessionId,\n+        return sessionMap.computeIfAbsent(sessionId, key -> new OCFLPersistentStorageSession(\n+                key,\n                 fedoraOcflIndex,\n-                objectSessionFactory);\n-        sessionMap.put(sessionId, newSession);\n-        return newSession;\n+                objectSessionFactory));\n     }\n \n     @Override\n     public PersistentStorageSession getReadOnlySession() {\n         if (this.readOnlySession == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "009b45b14569f36fdab05c8cdc2f4b401fc8ada7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3NTIzNw==", "bodyText": "No synchronization is required.\nhttps://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#computeIfAbsent(K,java.util.function.Function)\n\nThe entire method invocation is performed atomically, so the function is applied at most once per key. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this map.", "url": "https://github.com/fcrepo/fcrepo/pull/1657#discussion_r405475237", "createdAt": "2020-04-08T12:09:48Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/OCFLPersistentSessionManager.java", "diffHunk": "@@ -61,23 +61,20 @@ public PersistentStorageSession getSession(final String sessionId) {\n             throw new IllegalArgumentException(\"session id must be non-null\");\n         }\n \n-        final PersistentStorageSession session = sessionMap.get(sessionId);\n-\n-        if (session != null) {\n-            return session;\n-        }\n-\n-        final PersistentStorageSession newSession = new OCFLPersistentStorageSession(sessionId,\n+        return sessionMap.computeIfAbsent(sessionId, key -> new OCFLPersistentStorageSession(\n+                key,\n                 fedoraOcflIndex,\n-                objectSessionFactory);\n-        sessionMap.put(sessionId, newSession);\n-        return newSession;\n+                objectSessionFactory));\n     }\n \n     @Override\n     public PersistentStorageSession getReadOnlySession() {\n         if (this.readOnlySession == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4OTk4MQ=="}, "originalCommit": {"oid": "009b45b14569f36fdab05c8cdc2f4b401fc8ada7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3NzAzMw==", "bodyText": "Whoops, I got confused about which line you were referring to and thought you meant L64.", "url": "https://github.com/fcrepo/fcrepo/pull/1657#discussion_r405477033", "createdAt": "2020-04-08T12:13:02Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/OCFLPersistentSessionManager.java", "diffHunk": "@@ -61,23 +61,20 @@ public PersistentStorageSession getSession(final String sessionId) {\n             throw new IllegalArgumentException(\"session id must be non-null\");\n         }\n \n-        final PersistentStorageSession session = sessionMap.get(sessionId);\n-\n-        if (session != null) {\n-            return session;\n-        }\n-\n-        final PersistentStorageSession newSession = new OCFLPersistentStorageSession(sessionId,\n+        return sessionMap.computeIfAbsent(sessionId, key -> new OCFLPersistentStorageSession(\n+                key,\n                 fedoraOcflIndex,\n-                objectSessionFactory);\n-        sessionMap.put(sessionId, newSession);\n-        return newSession;\n+                objectSessionFactory));\n     }\n \n     @Override\n     public PersistentStorageSession getReadOnlySession() {\n         if (this.readOnlySession == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4OTk4MQ=="}, "originalCommit": {"oid": "009b45b14569f36fdab05c8cdc2f4b401fc8ada7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3ODQ0Nw==", "bodyText": "Do you mean L72?\nIf so, then yes, both conditionals are needed. https://en.wikipedia.org/wiki/Double-checked_locking", "url": "https://github.com/fcrepo/fcrepo/pull/1657#discussion_r405478447", "createdAt": "2020-04-08T12:15:30Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/OCFLPersistentSessionManager.java", "diffHunk": "@@ -61,23 +61,20 @@ public PersistentStorageSession getSession(final String sessionId) {\n             throw new IllegalArgumentException(\"session id must be non-null\");\n         }\n \n-        final PersistentStorageSession session = sessionMap.get(sessionId);\n-\n-        if (session != null) {\n-            return session;\n-        }\n-\n-        final PersistentStorageSession newSession = new OCFLPersistentStorageSession(sessionId,\n+        return sessionMap.computeIfAbsent(sessionId, key -> new OCFLPersistentStorageSession(\n+                key,\n                 fedoraOcflIndex,\n-                objectSessionFactory);\n-        sessionMap.put(sessionId, newSession);\n-        return newSession;\n+                objectSessionFactory));\n     }\n \n     @Override\n     public PersistentStorageSession getReadOnlySession() {\n         if (this.readOnlySession == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4OTk4MQ=="}, "originalCommit": {"oid": "009b45b14569f36fdab05c8cdc2f4b401fc8ada7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyMDcwNA==", "bodyText": "Ah okay, thanks for the explanation.", "url": "https://github.com/fcrepo/fcrepo/pull/1657#discussion_r405520704", "createdAt": "2020-04-08T13:23:12Z", "author": {"login": "whikloj"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/OCFLPersistentSessionManager.java", "diffHunk": "@@ -61,23 +61,20 @@ public PersistentStorageSession getSession(final String sessionId) {\n             throw new IllegalArgumentException(\"session id must be non-null\");\n         }\n \n-        final PersistentStorageSession session = sessionMap.get(sessionId);\n-\n-        if (session != null) {\n-            return session;\n-        }\n-\n-        final PersistentStorageSession newSession = new OCFLPersistentStorageSession(sessionId,\n+        return sessionMap.computeIfAbsent(sessionId, key -> new OCFLPersistentStorageSession(\n+                key,\n                 fedoraOcflIndex,\n-                objectSessionFactory);\n-        sessionMap.put(sessionId, newSession);\n-        return newSession;\n+                objectSessionFactory));\n     }\n \n     @Override\n     public PersistentStorageSession getReadOnlySession() {\n         if (this.readOnlySession == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4OTk4MQ=="}, "originalCommit": {"oid": "009b45b14569f36fdab05c8cdc2f4b401fc8ada7"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1783, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}