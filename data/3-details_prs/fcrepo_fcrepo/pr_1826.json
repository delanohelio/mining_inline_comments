{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMzAzOTg3", "number": 1826, "title": "Adds support for side-loading of new resources.", "bodyText": "Adds support for side-loading of new resources\n\nJIRA Ticket: Resolves: https://jira.lyrasis.org/browse/FCREPO-3332\n\nOther Relevant Links (Mailing list discussion, related pull requests, etc.)\nTwo follow on tickets for reindexing existing resources and ensuring that newly created, updated, or deleted resources emit events when they are reindexed.\nhttps://jira.lyrasis.org/browse/FCREPO-3553\nhttps://jira.lyrasis.org/browse/FCREPO-3554\n\nWhat does this Pull Request do?\nThis PR adds the /fcr:reindex endpoint on all resources. So for  example http://localhost:8080/my-resource/fcr:reindex is now exposed.\nEventually this endpoint will service on demand reindexing. With this PR,  this endpoint is used to accomplish \"side-loading\" which is the addition of new resources to your Fedora repository by adding OCFL objects directly to the OCFL layout.\nHow should this be tested?\nThere is an integration test covering this feature.  However if you want try it manually, you can start up a fresh fedora and then copy the entire contents of fcrepo-http-api/src/test/resources/reindex-test into your ocfl-root directory (fcrepo-home/data/ocfl-root).\nThe id of the new ocfl resource is \"info:fedora/container1\" (as you'll notice in the inventory.json file).\nTo side load the resource, simply do the following:\ncurl -v -u fedoraAdmin:fedoraAdmin -X POST http://localhost:8080/rest/container1/fcr:reindex\n\nIt should return a 204.\nThen do\ncurl -v -u fedoraAdmin:fedoraAdmin http://localhost:8080/rest/container1\n\nto verify that it was successfully side loaded.\nInterested parties\nTag (@ mention) interested parties or, if unsure, @fcrepo/committers", "createdAt": "2020-12-02T21:35:33Z", "url": "https://github.com/fcrepo/fcrepo/pull/1826", "merged": true, "mergeCommit": {"oid": "e046d00ebbb54094590252988997193c950284f1"}, "closed": true, "closedAt": "2020-12-16T22:04:39Z", "author": {"login": "dbernstein"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiXf2eAFqTU0MzMyMjY5Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdm15lAgFqTU1NDEwMjQ4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMzIyNjk3", "url": "https://github.com/fcrepo/fcrepo/pull/1826#pullrequestreview-543322697", "createdAt": "2020-12-02T23:26:27Z", "commit": {"oid": "fdda2ec2604b9504da1b33f0cf4da0fb06fae2ef"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMzoyODoxM1rOH9yfGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMzo0NzozNlrOH9y8pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU1MjM0NQ==", "bodyText": "Typo 4040", "url": "https://github.com/fcrepo/fcrepo/pull/1826#discussion_r534552345", "createdAt": "2020-12-02T23:28:13Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/AbstractResourceIT.java", "diffHunk": "@@ -634,6 +635,12 @@ protected static void assertDeleted(final String id) {\n         assertThat(\"Expected object to be deleted\", getStatus(new HttpGet(location)), is(GONE.getStatusCode()));\n     }\n \n+    protected static void assertNotFound(final String id) {\n+        final String location = serverAddress + id;\n+        assertThat(\"Expected object to return 404\", getStatus(new HttpHead(location)), is(NOT_FOUND.getStatusCode()));\n+        assertThat(\"Expected object to return 4040\", getStatus(new HttpGet(location)), is(NOT_FOUND.getStatusCode()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdda2ec2604b9504da1b33f0cf4da0fb06fae2ef"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU1NTkzNA==", "bodyText": "This operation will need to acquire a lock on the resource. Locking coming in: #1823", "url": "https://github.com/fcrepo/fcrepo/pull/1826#discussion_r534555934", "createdAt": "2020-12-02T23:37:06Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/ReindexServiceImpl.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.impl.services;\n+\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.operations.ReindexResourceOperationFactory;\n+import org.fcrepo.kernel.api.services.ReindexService;\n+import org.fcrepo.persistence.api.PersistentStorageSessionManager;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+/**\n+ * Implementation of {@link org.fcrepo.kernel.api.services.ReindexService}\n+ *\n+ * @author dbernstein\n+ */\n+@Component\n+public class ReindexServiceImpl extends AbstractService implements ReindexService {\n+\n+    @Inject\n+    private PersistentStorageSessionManager persistentStorageSessionManager;\n+\n+    @Inject\n+    private ReindexResourceOperationFactory resourceOperationFactory;\n+\n+    @Override\n+    public void reindexByFedoraId(final String txId, final String principal, final FedoraId fedoraId) {\n+        final var operation = resourceOperationFactory.create(fedoraId).userPrincipal(principal).build();\n+        final var psession = persistentStorageSessionManager.getSession(txId);\n+        psession.persist(operation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdda2ec2604b9504da1b33f0cf4da0fb06fae2ef"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU1NjkyOQ==", "bodyText": "It seems like there might not be a great solution for this currently, but I believe reindexing is applying live changes to the search index that will not be rollback if the commit ultimately fails.", "url": "https://github.com/fcrepo/fcrepo/pull/1826#discussion_r534556929", "createdAt": "2020-12-02T23:39:49Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraReindex.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.http.api;\n+\n+import io.micrometer.core.annotation.Timed;\n+import org.apache.http.HttpStatus;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.services.ReindexService;\n+import org.slf4j.Logger;\n+import org.springframework.context.annotation.Scope;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Response;\n+\n+import static java.lang.String.format;\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static javax.ws.rs.core.Response.status;\n+import static org.fcrepo.http.commons.domain.RDFMediaType.TEXT_PLAIN_WITH_CHARSET;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+/**\n+ * @author dbernstein\n+ * @since 12/01/20\n+ */\n+@Timed\n+@Scope(\"request\")\n+@Path(\"/{path: (.+/)?}fcr:reindex\")\n+public class FedoraReindex extends FedoraBaseResource {\n+\n+    private static final Logger LOGGER = getLogger(FedoraReindex.class);\n+\n+    @Inject\n+    private ReindexService reindexService;\n+\n+    @PathParam(\"path\")\n+    protected String externalPath;\n+\n+    /**\n+     * Default JAX-RS entry point\n+     */\n+    public FedoraReindex() {\n+        super();\n+    }\n+\n+    /**\n+     * Reindex a fedora resource.\n+     *\n+     * @return A response\n+     */\n+    @POST\n+    @Produces({APPLICATION_JSON + \";qs=1.0\",\n+            TEXT_PLAIN_WITH_CHARSET})\n+    public Response reindexObject() {\n+        LOGGER.info(\"receiving reindex request for fedora_id = {}\", externalPath);\n+        try {\n+            final var transaction = transaction();\n+            final var id = FedoraId.create(externalPath);\n+            if (doesResourceExist(transaction, id, false)) {\n+                //TODO : remove this block once reindexing of existing resources is supported.\n+                return status(HttpStatus.SC_CONFLICT, \"Reindexing of existing resources is not currently supported. \" +\n+                        \"Only resources that have not yet been indexed are allowed.\").build();\n+            } else {\n+                this.reindexService.reindexByFedoraId(transaction().getId(), getUserPrincipal(), id.asBaseId());\n+                transaction.commitIfShortLived();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdda2ec2604b9504da1b33f0cf4da0fb06fae2ef"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU1ODA5Nw==", "bodyText": "This is a happy path test. Other test ideas:\n\nWhat happens if you attempt to reindex an object that does not exist?\nWhat happens if you attempt to reindex an archival group part rather than the ag? For example, info:fedora/ag/child rather than info:fedora/ag\nWhat happens if the object exists but is invalid?", "url": "https://github.com/fcrepo/fcrepo/pull/1826#discussion_r534558097", "createdAt": "2020-12-02T23:42:49Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraReindexIT.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.integration.http.api;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.http.HttpStatus;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.test.context.TestExecutionListeners;\n+\n+import java.nio.file.Path;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * @author dbernstein\n+ * @since 12/01/20\n+ */\n+@TestExecutionListeners(\n+        listeners = {LinuxTestIsolationExecutionListener.class},\n+        mergeMode = TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS)\n+public class FedoraReindexIT extends AbstractResourceIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FedoraReindexIT.class);\n+\n+    @Test\n+    public void testSideLoading() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdda2ec2604b9504da1b33f0cf4da0fb06fae2ef"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU1ODk2OA==", "bodyText": "I think this should be doesResourceExist(transaction, id, true). Otherwise I think it will return false for resources that are deleted by not purged.", "url": "https://github.com/fcrepo/fcrepo/pull/1826#discussion_r534558968", "createdAt": "2020-12-02T23:45:06Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraReindex.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.http.api;\n+\n+import io.micrometer.core.annotation.Timed;\n+import org.apache.http.HttpStatus;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.services.ReindexService;\n+import org.slf4j.Logger;\n+import org.springframework.context.annotation.Scope;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Response;\n+\n+import static java.lang.String.format;\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static javax.ws.rs.core.Response.status;\n+import static org.fcrepo.http.commons.domain.RDFMediaType.TEXT_PLAIN_WITH_CHARSET;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+/**\n+ * @author dbernstein\n+ * @since 12/01/20\n+ */\n+@Timed\n+@Scope(\"request\")\n+@Path(\"/{path: (.+/)?}fcr:reindex\")\n+public class FedoraReindex extends FedoraBaseResource {\n+\n+    private static final Logger LOGGER = getLogger(FedoraReindex.class);\n+\n+    @Inject\n+    private ReindexService reindexService;\n+\n+    @PathParam(\"path\")\n+    protected String externalPath;\n+\n+    /**\n+     * Default JAX-RS entry point\n+     */\n+    public FedoraReindex() {\n+        super();\n+    }\n+\n+    /**\n+     * Reindex a fedora resource.\n+     *\n+     * @return A response\n+     */\n+    @POST\n+    @Produces({APPLICATION_JSON + \";qs=1.0\",\n+            TEXT_PLAIN_WITH_CHARSET})\n+    public Response reindexObject() {\n+        LOGGER.info(\"receiving reindex request for fedora_id = {}\", externalPath);\n+        try {\n+            final var transaction = transaction();\n+            final var id = FedoraId.create(externalPath);\n+            if (doesResourceExist(transaction, id, false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdda2ec2604b9504da1b33f0cf4da0fb06fae2ef"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU1OTkwOA==", "bodyText": "This indexing does not do any sort of validation. I am okay giving that a pass for this PR, but, if we don't do validation here, then we need a follow up ticket to validate side-loaded objects. I don't know if it's a beta blocker (seems very important to me because it's likely people will create invalid objects by hand) or not, but definitely a release blocker.", "url": "https://github.com/fcrepo/fcrepo/pull/1826#discussion_r534559908", "createdAt": "2020-12-02T23:47:36Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/ReindexResourcePersister.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.persistence.ocfl.impl;\n+\n+import org.fcrepo.kernel.api.operations.ResourceOperation;\n+import org.fcrepo.persistence.api.exceptions.PersistentStorageException;\n+import org.fcrepo.persistence.ocfl.api.Persister;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.fcrepo.kernel.api.operations.ResourceOperationType.REINDEX;\n+\n+/**\n+ * Reindex resource rersister\n+ *\n+ * @author dbernstein\n+ */\n+class ReindexResourcePersister implements Persister {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ReindexResourcePersister.class);\n+\n+    private ReindexService reindexService;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param reindexService the reindex service\n+     */\n+    protected ReindexResourcePersister(final ReindexService reindexService) {\n+        this.reindexService = reindexService;\n+    }\n+\n+    @Override\n+    public boolean handle(final ResourceOperation operation) {\n+        return operation != null && REINDEX.equals(operation.getType());\n+    }\n+\n+    @Override\n+    public void persist(final OcflPersistentStorageSession session, final ResourceOperation operation)\n+            throws PersistentStorageException {\n+        final var ocflId = operation.getResourceId().getBaseId();\n+        try {\n+            this.reindexService.indexOcflObject(session.getId(), ocflId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdda2ec2604b9504da1b33f0cf4da0fb06fae2ef"}, "originalPosition": 58}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fdda2ec2604b9504da1b33f0cf4da0fb06fae2ef", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/fdda2ec2604b9504da1b33f0cf4da0fb06fae2ef", "committedDate": "2020-12-02T21:10:05Z", "message": "Adds support for side-loading of new resources.\nResolves: https://jira.lyrasis.org/browse/FCREPO-3332"}, "afterCommit": {"oid": "f241b2e9261e0715928426411fdca02f1b1474e5", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/f241b2e9261e0715928426411fdca02f1b1474e5", "committedDate": "2020-12-04T20:38:30Z", "message": "Adds additional integration tests, ensures 405s returned on non-POST operations, and\nimproves error message returned on bad requests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1Mjg0OTk5", "url": "https://github.com/fcrepo/fcrepo/pull/1826#pullrequestreview-545284999", "createdAt": "2020-12-04T20:46:41Z", "commit": {"oid": "f241b2e9261e0715928426411fdca02f1b1474e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDo0Njo0MVrOH_hbsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDo0Njo0MVrOH_hbsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM3MDA5OA==", "bodyText": "Where do you acquire the lock?", "url": "https://github.com/fcrepo/fcrepo/pull/1826#discussion_r536370098", "createdAt": "2020-12-04T20:46:41Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraReindex.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.http.api;\n+\n+import io.micrometer.core.annotation.Timed;\n+import org.apache.http.HttpStatus;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.services.ReindexService;\n+import org.slf4j.Logger;\n+import org.springframework.context.annotation.Scope;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Response;\n+\n+import static java.lang.String.format;\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static javax.ws.rs.core.Response.status;\n+import static org.fcrepo.http.commons.domain.RDFMediaType.TEXT_PLAIN_WITH_CHARSET;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+/**\n+ * @author dbernstein\n+ * @since 12/01/20\n+ */\n+@Timed\n+@Scope(\"request\")\n+@Path(\"/{path: (.+/)?}fcr:reindex\")\n+public class FedoraReindex extends FedoraBaseResource {\n+\n+    private static final Logger LOGGER = getLogger(FedoraReindex.class);\n+\n+    @Inject\n+    private ReindexService reindexService;\n+\n+    @PathParam(\"path\")\n+    protected String externalPath;\n+\n+    /**\n+     * Default JAX-RS entry point\n+     */\n+    public FedoraReindex() {\n+        super();\n+    }\n+\n+    /**\n+     * Reindex a fedora resource.\n+     *\n+     * @return A response\n+     */\n+    @POST\n+    @Produces({APPLICATION_JSON + \";qs=1.0\",\n+            TEXT_PLAIN_WITH_CHARSET})\n+    public Response reindexObject() {\n+        LOGGER.info(\"receiving reindex request for fedora_id = {}\", externalPath);\n+        try {\n+            final var transaction = transaction();\n+            final var id = FedoraId.create(externalPath);\n+            if (doesResourceExist(transaction, id, true)) {\n+                //TODO : remove this block once reindexing of existing resources is supported.\n+                return status(HttpStatus.SC_CONFLICT, \"Reindexing of existing resources is not currently supported. \" +\n+                        \"Only resources that have not yet been indexed are allowed.\").build();\n+            } else {\n+                try {\n+                    this.reindexService.reindexByFedoraId(transaction().getId(), getUserPrincipal(), id.asBaseId());\n+                    transaction.commitIfShortLived();\n+                    final var message = format(\"successfully reindexed %s\", id.getBaseId());\n+                    LOGGER.info(message);\n+                    return status(HttpStatus.SC_NO_CONTENT, message).build();\n+                } finally {\n+                    transaction().releaseResourceLocksIfShortLived();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f241b2e9261e0715928426411fdca02f1b1474e5"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NTM3OTQy", "url": "https://github.com/fcrepo/fcrepo/pull/1826#pullrequestreview-547537942", "createdAt": "2020-12-08T18:58:08Z", "commit": {"oid": "2fc5bb59a75d6e599e3e0ec38e4746317b0aefeb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODo1ODowOFrOIBxIag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODo1ODowOFrOIBxIag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcyNDQ1OA==", "bodyText": "This is inconsistent with how locking is done in the other services. It will work, but, to me, having the kernel acquire a lock rather than the http layer seems more appropriate.", "url": "https://github.com/fcrepo/fcrepo/pull/1826#discussion_r538724458", "createdAt": "2020-12-08T18:58:08Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraReindex.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.http.api;\n+\n+import io.micrometer.core.annotation.Timed;\n+import org.apache.http.HttpStatus;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.services.ReindexService;\n+import org.slf4j.Logger;\n+import org.springframework.context.annotation.Scope;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Response;\n+\n+import static java.lang.String.format;\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static javax.ws.rs.core.Response.status;\n+import static org.fcrepo.http.commons.domain.RDFMediaType.TEXT_PLAIN_WITH_CHARSET;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+/**\n+ * @author dbernstein\n+ * @since 12/01/20\n+ */\n+@Timed\n+@Scope(\"request\")\n+@Path(\"/{path: (.+/)?}fcr:reindex\")\n+public class FedoraReindex extends FedoraBaseResource {\n+\n+    private static final Logger LOGGER = getLogger(FedoraReindex.class);\n+\n+    @Inject\n+    private ReindexService reindexService;\n+\n+    @PathParam(\"path\")\n+    protected String externalPath;\n+\n+    /**\n+     * Default JAX-RS entry point\n+     */\n+    public FedoraReindex() {\n+        super();\n+    }\n+\n+    /**\n+     * Reindex a fedora resource.\n+     *\n+     * @return A response\n+     */\n+    @POST\n+    @Produces({APPLICATION_JSON + \";qs=1.0\",\n+            TEXT_PLAIN_WITH_CHARSET})\n+    public Response reindexObject() {\n+        LOGGER.info(\"receiving reindex request for fedora_id = {}\", externalPath);\n+        try {\n+            final var transaction = transaction();\n+            final var id = FedoraId.create(externalPath);\n+            if (doesResourceExist(transaction, id, true)) {\n+                //TODO : remove this block once reindexing of existing resources is supported.\n+                return status(HttpStatus.SC_CONFLICT, \"Reindexing of existing resources is not currently supported. \" +\n+                        \"Only resources that have not yet been indexed are allowed.\").build();\n+            } else {\n+                try {\n+                    final var baseId = id.asBaseId();\n+                    transaction.lockResource(baseId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fc5bb59a75d6e599e3e0ec38e4746317b0aefeb"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzMTI1MDQ0", "url": "https://github.com/fcrepo/fcrepo/pull/1826#pullrequestreview-553125044", "createdAt": "2020-12-15T23:54:34Z", "commit": {"oid": "2fc5bb59a75d6e599e3e0ec38e4746317b0aefeb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzo1NDozNFrOIGlTFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMDowNjozM1rOIGllyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3MzQ2MQ==", "bodyText": "Please update this TODO comment to reference: https://jira.lyrasis.org/browse/FCREPO-3553", "url": "https://github.com/fcrepo/fcrepo/pull/1826#discussion_r543773461", "createdAt": "2020-12-15T23:54:34Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraReindex.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.http.api;\n+\n+import io.micrometer.core.annotation.Timed;\n+import org.apache.http.HttpStatus;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.services.ReindexService;\n+import org.slf4j.Logger;\n+import org.springframework.context.annotation.Scope;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Response;\n+\n+import static java.lang.String.format;\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static javax.ws.rs.core.Response.status;\n+import static org.fcrepo.http.commons.domain.RDFMediaType.TEXT_PLAIN_WITH_CHARSET;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+/**\n+ * @author dbernstein\n+ * @since 12/01/20\n+ */\n+@Timed\n+@Scope(\"request\")\n+@Path(\"/{path: (.+/)?}fcr:reindex\")\n+public class FedoraReindex extends FedoraBaseResource {\n+\n+    private static final Logger LOGGER = getLogger(FedoraReindex.class);\n+\n+    @Inject\n+    private ReindexService reindexService;\n+\n+    @PathParam(\"path\")\n+    protected String externalPath;\n+\n+    /**\n+     * Default JAX-RS entry point\n+     */\n+    public FedoraReindex() {\n+        super();\n+    }\n+\n+    /**\n+     * Reindex a fedora resource.\n+     *\n+     * @return A response\n+     */\n+    @POST\n+    @Produces({APPLICATION_JSON + \";qs=1.0\",\n+            TEXT_PLAIN_WITH_CHARSET})\n+    public Response reindexObject() {\n+        LOGGER.info(\"receiving reindex request for fedora_id = {}\", externalPath);\n+        try {\n+            final var transaction = transaction();\n+            final var id = FedoraId.create(externalPath);\n+            if (doesResourceExist(transaction, id, true)) {\n+                //TODO : remove this block once reindexing of existing resources is supported.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fc5bb59a75d6e599e3e0ec38e4746317b0aefeb"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3ODI1MQ==", "bodyText": "Jumbled grammar: \"Failed find to the root resource\"", "url": "https://github.com/fcrepo/fcrepo/pull/1826#discussion_r543778251", "createdAt": "2020-12-16T00:06:33Z", "author": {"login": "awoods"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/ReindexService.java", "diffHunk": "@@ -146,7 +145,11 @@ public void indexOcflObject(final String txId, final String ocflId) {\n             });\n \n             if (rootId.get() == null) {\n-                throw new IllegalStateException(String.format(\"Failed to find root resource in object %s\", ocflId));\n+                throw new IllegalStateException(String.format(\"Failed find to the root resource in object identified\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fc5bb59a75d6e599e3e0ec38e4746317b0aefeb"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzOTMxNDUy", "url": "https://github.com/fcrepo/fcrepo/pull/1826#pullrequestreview-553931452", "createdAt": "2020-12-16T17:42:00Z", "commit": {"oid": "e22bffa12f68c6ab7485bda2e672f376371fbec7"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzo0MjowMFrOIHRXjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzo1Mzo0NVrOIHR28A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5NTUwMQ==", "bodyText": "Did I write this?", "url": "https://github.com/fcrepo/fcrepo/pull/1826#discussion_r544495501", "createdAt": "2020-12-16T17:42:00Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/BaseTestExecutionListener.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.integration.http.api;\n+\n+import org.fcrepo.http.commons.test.util.ContainerWrapper;\n+import org.fcrepo.kernel.api.ContainmentIndex;\n+import org.fcrepo.persistence.ocfl.api.FedoraToOcflObjectIndex;\n+import org.fcrepo.search.api.SearchIndex;\n+import org.springframework.test.context.TestContext;\n+import org.springframework.test.context.support.AbstractTestExecutionListener;\n+\n+/**\n+ * A base class test execution listener class.\n+ *\n+ * @author pwinkles", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22bffa12f68c6ab7485bda2e672f376371fbec7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5Njg2Nw==", "bodyText": "I see that you moved this method up from another class, but while you're touching the code it is perhaps worth noting that there are now other tables that need to be cleared. Full list can be found here:\n\n  \n    \n      fcrepo/fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/ReindexService.java\n    \n    \n         Line 184\n      in\n      cf90469\n    \n    \n    \n    \n\n        \n          \n           public void reset() {", "url": "https://github.com/fcrepo/fcrepo/pull/1826#discussion_r544496867", "createdAt": "2020-12-16T17:44:10Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/BaseTestExecutionListener.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.integration.http.api;\n+\n+import org.fcrepo.http.commons.test.util.ContainerWrapper;\n+import org.fcrepo.kernel.api.ContainmentIndex;\n+import org.fcrepo.persistence.ocfl.api.FedoraToOcflObjectIndex;\n+import org.fcrepo.search.api.SearchIndex;\n+import org.springframework.test.context.TestContext;\n+import org.springframework.test.context.support.AbstractTestExecutionListener;\n+\n+/**\n+ * A base class test execution listener class.\n+ *\n+ * @author pwinkles\n+ */\n+public class BaseTestExecutionListener extends AbstractTestExecutionListener {\n+\n+    protected void cleanDb(final TestContext testContext) {\n+        final ContainmentIndex containmentIndex = getBean(testContext, \"containmentIndex\");\n+        final FedoraToOcflObjectIndex ocflIndex = getBean(testContext, \"ocflIndex\");\n+        final SearchIndex searchIndex = getBean(testContext, \"searchIndex\");\n+\n+        containmentIndex.reset();\n+        ocflIndex.reset();\n+        searchIndex.reset();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22bffa12f68c6ab7485bda2e672f376371fbec7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUwMzUzNg==", "bodyText": "Does this work? I don't remember the specifics anymore, but previously I had a terrible time getting windows to delete files deterministically. Assuming it does, how about we do the following?\n\nRename LinuxTestIsolationExecutionListener to TestIsolationExcecutionListener\nRemove the windows check\nGet the path to the ocfl root from the ocfl config, rather than hard coding (for example).\nDelete the ocfl root\nCall RepositoryInitializer.initialize() rather than the cleanup db code. Assuming there isn't a reason not to do this, this should be safer.\n\nThen, we should need this class and could just use modified class everywhere. I'm not sure if the dirties context bit is necessary. Did you try it without it? I believe the Rebuild listener uses it because it tampers with system properties that affect how the beans are loaded, but you aren't doing that here.", "url": "https://github.com/fcrepo/fcrepo/pull/1826#discussion_r544503536", "createdAt": "2020-12-16T17:53:45Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/ReindexExecutionListener.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.integration.http.api;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.springframework.test.annotation.DirtiesContext.HierarchyMode;\n+import org.springframework.test.context.TestContext;\n+\n+import java.nio.file.Path;\n+\n+/**\n+ * Isolate ReindexITs from the rest of the IT contexts as well as tests within ReindexIT.\n+ *\n+ * @author dbernstein\n+ */\n+public class ReindexExecutionListener extends BaseTestExecutionListener {\n+\n+    @Override\n+    public void afterTestMethod(final TestContext testContext) throws Exception {\n+        FileUtils.deleteDirectory(Path.of(\"target/fcrepo-home/data/ocfl-root\").toFile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22bffa12f68c6ab7485bda2e672f376371fbec7"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d53fcb989167e1b8db6b88d9a42fcd6bb3d1dc1", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/5d53fcb989167e1b8db6b88d9a42fcd6bb3d1dc1", "committedDate": "2020-12-16T20:51:43Z", "message": "Adds support for side-loading of new resources.\nResolves: https://jira.lyrasis.org/browse/FCREPO-3332"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ab582e78abca1629575a8b4185d003008e78d09", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/3ab582e78abca1629575a8b4185d003008e78d09", "committedDate": "2020-12-16T20:51:43Z", "message": "Adds locking support as well as minor updates in response to feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6643181e9868abfa9cea80c5945eb37568a941df", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/6643181e9868abfa9cea80c5945eb37568a941df", "committedDate": "2020-12-16T20:51:43Z", "message": "Adds additional integration tests, ensures 405s returned on non-POST operations, and\nimproves error message returned on bad requests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46c54f22d85051ffa5e41e92e03929d3413ae610", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/46c54f22d85051ffa5e41e92e03929d3413ae610", "committedDate": "2020-12-16T20:51:43Z", "message": "Ensures the resource to be indexed is locked first."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2cf32c23843dbf77283bb179edaa2217cd4721e", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/e2cf32c23843dbf77283bb179edaa2217cd4721e", "committedDate": "2020-12-16T20:51:43Z", "message": "Fixes broken integration test on windows."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3309e5084c383f90e421b0d0d9fb8174797df042", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/3309e5084c383f90e421b0d0d9fb8174797df042", "committedDate": "2020-12-16T20:51:43Z", "message": "Fixes suboptimal grammar in error message."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c859a3d1c7a23fc1ab79aa9adf1c8d7e0c15ae3", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/3c859a3d1c7a23fc1ab79aa9adf1c8d7e0c15ae3", "committedDate": "2020-12-16T20:51:43Z", "message": "Adds jira reference to todo."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe890b21a685ccf9dd464d48b17cd8d87aaf39b7", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/fe890b21a685ccf9dd464d48b17cd8d87aaf39b7", "committedDate": "2020-12-16T20:59:35Z", "message": "Second attempt to fix integration test failure on windows."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "abd2fc028180045b169795be4e284acda4f3ceee", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/abd2fc028180045b169795be4e284acda4f3ceee", "committedDate": "2020-12-16T20:39:33Z", "message": "Second attempt to fix integration test failure on windows."}, "afterCommit": {"oid": "fe890b21a685ccf9dd464d48b17cd8d87aaf39b7", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/fe890b21a685ccf9dd464d48b17cd8d87aaf39b7", "committedDate": "2020-12-16T20:59:35Z", "message": "Second attempt to fix integration test failure on windows."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MTAwMzMx", "url": "https://github.com/fcrepo/fcrepo/pull/1826#pullrequestreview-554100331", "createdAt": "2020-12-16T21:30:48Z", "commit": {"oid": "fe890b21a685ccf9dd464d48b17cd8d87aaf39b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MTAyNDg3", "url": "https://github.com/fcrepo/fcrepo/pull/1826#pullrequestreview-554102487", "createdAt": "2020-12-16T21:34:13Z", "commit": {"oid": "fe890b21a685ccf9dd464d48b17cd8d87aaf39b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3048, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}