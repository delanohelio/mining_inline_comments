{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNTkyMTY2", "number": 1821, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzo0MDozNlrOE_Ynuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzo0MDo0OVrOE_Yn5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODk5MTMxOnYy", "diffSide": "RIGHT", "path": "fcrepo-http-commons/src/main/java/org/fcrepo/http/commons/responses/ViewHelpers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzo0MDozNlrOH9EU-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzo0MDozNlrOH9EU-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NjA5MA==", "bodyText": "Can be private.", "url": "https://github.com/fcrepo/fcrepo/pull/1821#discussion_r533796090", "createdAt": "2020-12-01T23:40:36Z", "author": {"login": "awoods"}, "path": "fcrepo-http-commons/src/main/java/org/fcrepo/http/commons/responses/ViewHelpers.java", "diffHunk": "@@ -468,4 +468,51 @@ public static String parameterize(final String source) {\n     public static boolean isManagedProperty(final Node property) {\n         return property.isURI() && isManagedPredicate.test(createProperty(property.getURI()));\n     }\n+\n+    /**\n+     * Find a key in a map and format it as a string\n+     * @param input map of objects.\n+     * @param key the key to locate in the map.\n+     * @return the result string.\n+     */\n+    public static String getString(final Map<String, Object> input, final String key) {\n+        if (input.get(key) == null) {\n+            return \"\";\n+        }\n+        final var value = input.get(key);\n+        final var clazz = value.getClass();\n+        final String output;\n+        if (clazz == String.class) {\n+            output = formatAsString((String) value);\n+        } else if (clazz == String[].class) {\n+            output = formatAsString((String[]) value);\n+        } else if (clazz == Long.class) {\n+            output = formatAsString((Long) value);\n+        } else {\n+            output = \"\";\n+        }\n+        return output;\n+    }\n+\n+    /**\n+     * Format to a string and check for null values\n+     * @param input a string array or null\n+     * @return a string.\n+     */\n+    public static String formatAsString(final String[] input) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9af95ddf689e1adf30f52fb2a9bbf68e07f02e95"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODk5MTU0OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-commons/src/main/java/org/fcrepo/http/commons/responses/ViewHelpers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzo0MDo0MlrOH9EVJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzo0MDo0MlrOH9EVJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NjEzMg==", "bodyText": "Can be private.", "url": "https://github.com/fcrepo/fcrepo/pull/1821#discussion_r533796132", "createdAt": "2020-12-01T23:40:42Z", "author": {"login": "awoods"}, "path": "fcrepo-http-commons/src/main/java/org/fcrepo/http/commons/responses/ViewHelpers.java", "diffHunk": "@@ -468,4 +468,51 @@ public static String parameterize(final String source) {\n     public static boolean isManagedProperty(final Node property) {\n         return property.isURI() && isManagedPredicate.test(createProperty(property.getURI()));\n     }\n+\n+    /**\n+     * Find a key in a map and format it as a string\n+     * @param input map of objects.\n+     * @param key the key to locate in the map.\n+     * @return the result string.\n+     */\n+    public static String getString(final Map<String, Object> input, final String key) {\n+        if (input.get(key) == null) {\n+            return \"\";\n+        }\n+        final var value = input.get(key);\n+        final var clazz = value.getClass();\n+        final String output;\n+        if (clazz == String.class) {\n+            output = formatAsString((String) value);\n+        } else if (clazz == String[].class) {\n+            output = formatAsString((String[]) value);\n+        } else if (clazz == Long.class) {\n+            output = formatAsString((Long) value);\n+        } else {\n+            output = \"\";\n+        }\n+        return output;\n+    }\n+\n+    /**\n+     * Format to a string and check for null values\n+     * @param input a string array or null\n+     * @return a string.\n+     */\n+    public static String formatAsString(final String[] input) {\n+        return (input == null || input.length == 0 ? \"\" :  String.join(\", \", input));\n+    }\n+\n+    /**\n+     * Format a string to check for null values\n+     * @param input a string or null\n+     * @return a string.\n+     */\n+    public static String formatAsString(final String input) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9af95ddf689e1adf30f52fb2a9bbf68e07f02e95"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODk5MTczOnYy", "diffSide": "RIGHT", "path": "fcrepo-http-commons/src/main/java/org/fcrepo/http/commons/responses/ViewHelpers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzo0MDo0OVrOH9EVQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzo0MDo0OVrOH9EVQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NjE2Mg==", "bodyText": "Can be private.", "url": "https://github.com/fcrepo/fcrepo/pull/1821#discussion_r533796162", "createdAt": "2020-12-01T23:40:49Z", "author": {"login": "awoods"}, "path": "fcrepo-http-commons/src/main/java/org/fcrepo/http/commons/responses/ViewHelpers.java", "diffHunk": "@@ -468,4 +468,51 @@ public static String parameterize(final String source) {\n     public static boolean isManagedProperty(final Node property) {\n         return property.isURI() && isManagedPredicate.test(createProperty(property.getURI()));\n     }\n+\n+    /**\n+     * Find a key in a map and format it as a string\n+     * @param input map of objects.\n+     * @param key the key to locate in the map.\n+     * @return the result string.\n+     */\n+    public static String getString(final Map<String, Object> input, final String key) {\n+        if (input.get(key) == null) {\n+            return \"\";\n+        }\n+        final var value = input.get(key);\n+        final var clazz = value.getClass();\n+        final String output;\n+        if (clazz == String.class) {\n+            output = formatAsString((String) value);\n+        } else if (clazz == String[].class) {\n+            output = formatAsString((String[]) value);\n+        } else if (clazz == Long.class) {\n+            output = formatAsString((Long) value);\n+        } else {\n+            output = \"\";\n+        }\n+        return output;\n+    }\n+\n+    /**\n+     * Format to a string and check for null values\n+     * @param input a string array or null\n+     * @return a string.\n+     */\n+    public static String formatAsString(final String[] input) {\n+        return (input == null || input.length == 0 ? \"\" :  String.join(\", \", input));\n+    }\n+\n+    /**\n+     * Format a string to check for null values\n+     * @param input a string or null\n+     * @return a string.\n+     */\n+    public static String formatAsString(final String input) {\n+        return (input == null ? \"\" : input);\n+    }\n+\n+    public static String formatAsString(final Long input) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9af95ddf689e1adf30f52fb2a9bbf68e07f02e95"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1746, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}