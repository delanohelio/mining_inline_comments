{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0MDU4NjIy", "number": 1749, "title": "Inbound references service", "bodyText": "JIRA Ticket: https://jira.lyrasis.org/browse/FCREPO-3166\nWhat does this Pull Request do?\nAdds an API and implementation of a new service to parse incoming RDF for internal references and stores them in a new index, then allows this index to be queried.\nHow should this be tested?\n\nCreate a resource.\nCreate another resource with any reference to the first ie. <> <http://awoods.com/pointsTo> <http://localhost:8080/rest/firstResource>\nGet the first resource, see no inbound reference triples\nGet the first resource with the header Prefer: return=representation; include=\"http://fedora.info/definitions/fcrepo#PreferInboundReferences\", see the inbound reference.\n\nFor binaries when requesting the inbound references on the fcr:metadata endpoint you will get both references to the actual binary URI and the fcr:metadata URI.\nNote: I messed up and forgot to remove the references from the index on deletion, I am implementing this now and will make this PR live once it is added.\nInterested parties\n@bbpennel  @fcrepo4/committers", "createdAt": "2020-09-10T16:14:14Z", "url": "https://github.com/fcrepo/fcrepo/pull/1749", "merged": true, "mergeCommit": {"oid": "adb0490e4c8e82ff2069718a600bcef11d69797d"}, "closed": true, "closedAt": "2020-09-22T19:37:27Z", "author": {"login": "whikloj"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHkqTxAFqTQ4NjE3ODIyMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLdGo3AFqTQ5Mzc3NzUwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MTc4MjIz", "url": "https://github.com/fcrepo/fcrepo/pull/1749#pullrequestreview-486178223", "createdAt": "2020-09-10T17:57:30Z", "commit": {"oid": "1a83e1e3badbcc4a57dc90ab856b747009193ee2"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2ODE4MDYz", "url": "https://github.com/fcrepo/fcrepo/pull/1749#pullrequestreview-486818063", "createdAt": "2020-09-11T13:43:35Z", "commit": {"oid": "1a83e1e3badbcc4a57dc90ab856b747009193ee2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0MzozNlrOHQfasw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjoyOTo1NFrOHQls1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1NDAwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Return a RDFstream of statements referring the provided resource.\n          \n          \n            \n                 * Return a RDFstream of statements referring to the provided resource.", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487054003", "createdAt": "2020-09-11T13:43:36Z", "author": {"login": "bbpennel"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/services/ReferenceService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.services;\n+\n+import org.fcrepo.kernel.api.RdfStream;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+\n+/**\n+ * Service to retrieve references to repository resources.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public interface ReferenceService {\n+\n+    /**\n+     * Return a RDFstream of statements referring the provided resource.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a83e1e3badbcc4a57dc90ab856b747009193ee2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1NjM5OQ==", "bodyText": "Might be worth noting why this method is where, since its protected and not used within this class or any children class.", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487056399", "createdAt": "2020-09-11T13:47:13Z", "author": {"login": "bbpennel"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/TransactionManagerImpl.java", "diffHunk": "@@ -137,4 +141,7 @@ protected EventAccumulator getEventAccumulator() {\n         return eventAccumulator;\n     }\n \n+    protected ReferenceService getReferenceService() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a83e1e3badbcc4a57dc90ab856b747009193ee2"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExOTgxMQ==", "bodyText": "Is there value to keeping these peeks at this point?", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487119811", "createdAt": "2020-09-11T15:25:07Z", "author": {"login": "bbpennel"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/ReferenceServiceImpl.java", "diffHunk": "@@ -0,0 +1,379 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.impl.services;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+import javax.sql.DataSource;\n+import javax.transaction.Transactional;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.jena.graph.Node;\n+import org.apache.jena.graph.NodeFactory;\n+import org.apache.jena.graph.Triple;\n+import org.fcrepo.common.db.DbPlatform;\n+import org.fcrepo.kernel.api.RdfStream;\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.models.NonRdfSourceDescription;\n+import org.fcrepo.kernel.api.rdf.DefaultRdfStream;\n+import org.fcrepo.kernel.api.services.ReferenceService;\n+import org.slf4j.Logger;\n+import org.springframework.core.io.DefaultResourceLoader;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\n+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n+import org.springframework.jdbc.datasource.init.DatabasePopulatorUtils;\n+import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Implementation of reference service.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+@Component\n+public class ReferenceServiceImpl implements ReferenceService {\n+\n+    private static final Logger LOGGER = getLogger(ReferenceServiceImpl.class);\n+\n+    @Inject\n+    private DataSource dataSource;\n+\n+    private NamedParameterJdbcTemplate jdbcTemplate;\n+\n+    private static final String TABLE_NAME = \"reference\";\n+\n+    private static final String TRANSACTION_TABLE = \"reference_transaction_operations\";\n+\n+    private static final String SUBJECT_COLUMN = \"fedora_id\";\n+\n+    private static final String PROPERTY_COLUMN = \"property\";\n+\n+    private static final String TARGET_COLUMN = \"target_id\";\n+\n+    private static final String OPERATION_COLUMN = \"operation\";\n+\n+    private static final String TRANSACTION_COLUMN = \"transaction_id\";\n+\n+    private static final String SELECT_INBOUND = \"SELECT \" + SUBJECT_COLUMN + \", \" + PROPERTY_COLUMN + \" FROM \" +\n+            TABLE_NAME + \" WHERE \" + TARGET_COLUMN + \" = :targetId\";\n+\n+    private static final String SELECT_INBOUND_IN_TRANSACTION = \"SELECT x.\" + SUBJECT_COLUMN + \", x.\" +\n+            PROPERTY_COLUMN + \" FROM \" + \"(SELECT \" + SUBJECT_COLUMN + \", \" + PROPERTY_COLUMN + \" FROM \" + TABLE_NAME +\n+            \" WHERE \" + TARGET_COLUMN + \" = :targetId UNION \" + \"SELECT \" + SUBJECT_COLUMN + \", \" + PROPERTY_COLUMN +\n+            \" FROM \" + TRANSACTION_TABLE + \" WHERE \" + TARGET_COLUMN + \" = :targetId AND \"\n+            + TRANSACTION_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'add') x WHERE NOT EXISTS \" +\n+            \"(SELECT 1 FROM \" + TRANSACTION_TABLE + \" WHERE \" + TARGET_COLUMN + \" = :targetId AND \" +\n+            OPERATION_COLUMN + \" = 'delete')\";\n+\n+    private static final String SELECT_OUTBOUND = \"SELECT \" + TARGET_COLUMN + \", \" + PROPERTY_COLUMN + \" FROM \" +\n+            TABLE_NAME + \" WHERE \" + SUBJECT_COLUMN + \" = :resourceId\";\n+\n+    private static final String SELECT_OUTBOUND_IN_TRANSACTION = \"SELECT x.\" + TARGET_COLUMN + \", x.\" +\n+            PROPERTY_COLUMN + \" FROM \" + \"(SELECT \" + TARGET_COLUMN + \", \" + PROPERTY_COLUMN + \" FROM \" + TABLE_NAME +\n+            \" WHERE \" + SUBJECT_COLUMN + \" = :resourceId UNION \" + \"SELECT \" + TARGET_COLUMN + \", \" + PROPERTY_COLUMN +\n+            \" FROM \" + TRANSACTION_TABLE + \" WHERE \" + SUBJECT_COLUMN + \" = :resourceId \" +\n+            \"AND \" + TRANSACTION_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'add') x WHERE NOT \" +\n+            \"EXISTS (SELECT 1 FROM \" + TRANSACTION_TABLE + \" WHERE \" + SUBJECT_COLUMN + \" = :resourceId AND \" +\n+            OPERATION_COLUMN + \" = 'delete')\";\n+\n+    private static final String INSERT_REFERENCE_IN_TRANSACTION = \"INSERT INTO \" + TRANSACTION_TABLE + \"(\" +\n+            SUBJECT_COLUMN + \", \" + PROPERTY_COLUMN + \", \" + TARGET_COLUMN + \", \" + TRANSACTION_COLUMN + \", \" +\n+            OPERATION_COLUMN + \") VALUES (:resourceId, :property, :targetId, :transactionId, 'add')\";\n+\n+    private static final String UNDO_INSERT_REFERENCE_IN_TRANSACTION = \"DELETE FROM \" + TRANSACTION_TABLE + \" WHERE \" +\n+            SUBJECT_COLUMN + \" = :resourceId AND \" + PROPERTY_COLUMN + \" = :property AND \" + TARGET_COLUMN +\n+            \" = :targetId AND \" + TRANSACTION_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'add'\";\n+\n+    private static final String DELETE_REFERENCE_IN_TRANSACTION = \"INSERT INTO \" + TRANSACTION_TABLE + \"(\" +\n+            SUBJECT_COLUMN + \", \" + PROPERTY_COLUMN + \", \" + TARGET_COLUMN + \", \" + TRANSACTION_COLUMN + \", \" +\n+            OPERATION_COLUMN + \") VALUES (:resourceId, :property, :targetId, :transactionId, 'delete')\";\n+\n+    private static final String UNDO_DELETE_REFERENCE_IN_TRANSACTION = \"DELETE FROM \" + TRANSACTION_TABLE + \" WHERE \" +\n+            SUBJECT_COLUMN + \" = :resourceId AND \" + PROPERTY_COLUMN + \" = :property AND \" + TARGET_COLUMN +\n+            \" = :targetId AND \" + TRANSACTION_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'delete'\";\n+\n+    private static final String IS_REFERENCE_ADDED_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_TABLE + \" WHERE \"\n+            + SUBJECT_COLUMN + \" = :resourceId AND \" + PROPERTY_COLUMN + \" = :property AND \" + TARGET_COLUMN +\n+            \" = :targetId AND \" + TRANSACTION_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'add'\";\n+\n+    private static final String IS_REFERENCE_DELETED_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_TABLE +\n+            \" WHERE \" + SUBJECT_COLUMN + \" = :resourceId AND \" + PROPERTY_COLUMN + \" = :property AND \" + TARGET_COLUMN +\n+            \" = :targetId AND \" + TRANSACTION_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'delete'\";\n+\n+    private static final String COMMIT_ADD_RECORDS = \"INSERT INTO \" + TABLE_NAME + \" ( \" + SUBJECT_COLUMN + \", \"\n+            + PROPERTY_COLUMN + \", \" + TARGET_COLUMN + \" ) SELECT \" + SUBJECT_COLUMN + \", \" + PROPERTY_COLUMN + \", \" +\n+            TARGET_COLUMN + \" FROM \" + TRANSACTION_TABLE + \" WHERE \" + TRANSACTION_COLUMN + \" = :transactionId AND \" +\n+            OPERATION_COLUMN + \" = 'add'\";\n+\n+    private static final String COMMIT_DELETE_RECORDS = \"DELETE FROM \" + TABLE_NAME + \" WHERE \" +\n+            \"EXISTS (SELECT * FROM \" + TRANSACTION_TABLE + \" t WHERE t.\" +\n+            TRANSACTION_COLUMN + \" = :transactionId AND t.\" +  OPERATION_COLUMN + \" = 'delete' AND\" +\n+            \" t.\" + SUBJECT_COLUMN + \" = \" + TABLE_NAME + \".\" + SUBJECT_COLUMN +\n+            \" AND t.\" + PROPERTY_COLUMN + \" = \" + TABLE_NAME + \".\" + PROPERTY_COLUMN +\n+            \" AND t.\" + TARGET_COLUMN + \" = \" + TABLE_NAME + \".\" + TARGET_COLUMN + \")\";\n+\n+    private static final String DELETE_TRANSACTION = \"DELETE FROM \" + TRANSACTION_TABLE + \" WHERE \" +\n+            TRANSACTION_COLUMN + \" = :transactionId\";\n+\n+    private static final String TRUNCATE_TABLE = \"TRUNCATE TABLE \" + TABLE_NAME;\n+\n+    private static final Map<DbPlatform, String> DDL_MAP = Map.of(\n+            DbPlatform.MYSQL, \"sql/mysql-references.sql\",\n+            DbPlatform.H2, \"sql/default-references.sql\",\n+            DbPlatform.POSTGRESQL, \"sql/default-references.sql\",\n+            DbPlatform.MARIADB, \"sql/default-references.sql\"\n+    );\n+\n+    @PostConstruct\n+    public void setUp() {\n+        jdbcTemplate = new NamedParameterJdbcTemplate(getDataSource());\n+\n+        final var dbPlatform = DbPlatform.fromDataSource(dataSource);\n+\n+        Preconditions.checkArgument(DDL_MAP.containsKey(dbPlatform),\n+                \"Missing DDL mapping for %s\", dbPlatform);\n+\n+        final var ddl = DDL_MAP.get(dbPlatform);\n+        LOGGER.info(\"Applying ddl: {}\", ddl);\n+        DatabasePopulatorUtils.execute(\n+                new ResourceDatabasePopulator(new DefaultResourceLoader().getResource(\"classpath:\" + ddl)),\n+                dataSource);\n+    }\n+\n+    @Override\n+    public RdfStream getInboundReferences(final String txId, final FedoraResource resource) {\n+        final String resourceId = resource.getFedoraId().getFullId();\n+        final Node subject = NodeFactory.createURI(resourceId);\n+        final Stream<Triple> stream = getReferencesInternal(txId, resourceId);\n+        if (resource instanceof NonRdfSourceDescription) {\n+            final Stream<Triple> stream2 = getReferencesInternal(txId, resource.getFedoraId().getBaseId());\n+            return new DefaultRdfStream(subject, Stream.concat(stream, stream2));\n+        }\n+        return new DefaultRdfStream(subject, stream);\n+    }\n+\n+    /**\n+     * Get the inbound references for the resource Id and the transaction id.\n+     * @param txId transaction id or null for none.\n+     * @param resourceId the resource id.\n+     * @return RDF stream of inbound references\n+     */\n+    private Stream<Triple> getReferencesInternal(final String txId, final String resourceId) {\n+        final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n+        parameterSource.addValue(\"targetId\", resourceId);\n+        final Node targetNode = NodeFactory.createURI(resourceId);\n+\n+        final RowMapper<Triple> inboundMapper = (rs, rowNum) ->\n+                Triple.create(NodeFactory.createURI(rs.getString(SUBJECT_COLUMN)),\n+                        NodeFactory.createURI(rs.getString(PROPERTY_COLUMN)),\n+                        targetNode);\n+\n+        final List<Triple> references;\n+        if (txId != null) {\n+            // we are in a transaction\n+            parameterSource.addValue(\"transactionId\", txId);\n+            references = jdbcTemplate.query(SELECT_INBOUND_IN_TRANSACTION, parameterSource, inboundMapper);\n+        } else {\n+            // not in a transaction\n+            references = jdbcTemplate.query(SELECT_INBOUND, parameterSource, inboundMapper);\n+        }\n+        LOGGER.debug(\"getInboundReferences for {} in transaction {} found {} references\",\n+                resourceId, txId, references.size());\n+        return references.stream();\n+    }\n+\n+    @Override\n+    public void deleteAllReferences(@Nonnull final String txId, final FedoraId resourceId) {\n+        final Stream<Triple> deleteReferences = getOutboundReferences(txId, resourceId);\n+        // Remove all the existing references.\n+        deleteReferences.forEach(t ->\n+                removeReference(txId, resourceId.getFullId(), t.getPredicate().getURI(), t.getObject().getURI())\n+        );\n+    }\n+\n+    /**\n+     * Get a stream of triples of resources being referenced from the provided resource.\n+     * @param txId transaction Id or null if none.\n+     * @param resourceId the resource Id.\n+     * @return stream of Triples\n+     */\n+    private Stream<Triple> getOutboundReferences(final String txId, final FedoraId resourceId) {\n+        final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n+        parameterSource.addValue(\"resourceId\", resourceId.getFullId());\n+        final Node subjectNode = NodeFactory.createURI(resourceId.getFullId());\n+\n+        final RowMapper<Triple> outboundMapper = (rs, rowNum) ->\n+                Triple.create(subjectNode,\n+                        NodeFactory.createURI(rs.getString(PROPERTY_COLUMN)),\n+                        NodeFactory.createURI(rs.getString(TARGET_COLUMN)));\n+\n+        final List<Triple> references;\n+        if (txId != null) {\n+            // we are in a transaction\n+            parameterSource.addValue(\"transactionId\", txId);\n+            references = jdbcTemplate.query(SELECT_OUTBOUND_IN_TRANSACTION, parameterSource, outboundMapper);\n+        } else {\n+            // not in a transaction\n+            references = jdbcTemplate.query(SELECT_OUTBOUND, parameterSource, outboundMapper);\n+        }\n+        LOGGER.debug(\"getOutboundReferences for {} in transaction {} found {} references\",\n+                resourceId, txId, references.size());\n+        return references.stream();\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void updateReferences(@Nonnull final String txId, final FedoraId resourceId, final RdfStream rdfStream) {\n+        try {\n+            final Stream<Triple> deleteReferences = getOutboundReferences(txId, resourceId);\n+            // Remove all the existing references.\n+            deleteReferences.forEach(t ->\n+                removeReference(txId, resourceId.getFullId(), t.getPredicate().getURI(), t.getObject().getURI())\n+            );\n+            final Stream<Triple> addReferences = getReferencesFromRdf(rdfStream);\n+            addReferences.forEach(r -> addReference(txId, resourceId.getFullId(),\n+                    r.getPredicate().getURI(), r.getObject().getURI()));\n+        } catch (final Exception e) {\n+            LOGGER.warn(\"Unable to update reference index for resource {} in transaction {}: {}\",\n+                    resourceId.getFullId(), txId, e.getMessage());\n+            throw new RepositoryRuntimeException(\"Unable to update reference index\", e);\n+        }\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void commitTransaction(final String txId) {\n+        try {\n+            final Map<String, String> parameterSource = Map.of(\"transactionId\", txId);\n+            jdbcTemplate.update(COMMIT_DELETE_RECORDS, parameterSource);\n+            jdbcTemplate.update(COMMIT_ADD_RECORDS, parameterSource);\n+            jdbcTemplate.update(DELETE_TRANSACTION, parameterSource);\n+        } catch (final Exception e) {\n+            LOGGER.warn(\"Unable to commit reference index transaction {}: {}\", txId, e.getMessage());\n+            throw new RepositoryRuntimeException(\"Unable to commit reference index transaction\", e);\n+        }\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void rollbackTransaction(final String txId) {\n+        try {\n+            final Map<String, String> parameterSource = Map.of(\"transactionId\", txId);\n+            jdbcTemplate.update(DELETE_TRANSACTION, parameterSource);\n+        } catch (final Exception e) {\n+            LOGGER.warn(\"Unable to rollback reference index transaction {}: {}\", txId, e.getMessage());\n+            throw new RepositoryRuntimeException(\"Unable to rollback reference index transaction\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void reset() {\n+        try {\n+            jdbcTemplate.update(TRUNCATE_TABLE, Map.of());\n+        } catch (final Exception e) {\n+            LOGGER.warn(\"Unable to reset reference index: {}\", e.getMessage());\n+            throw new RepositoryRuntimeException(\"Unable to reset reference index\", e);\n+        }\n+    }\n+\n+    /**\n+     * Remove a reference.\n+     * @param txId transaction Id.\n+     * @param resourceId the subject resource Id.\n+     * @param targetId the target resource Id.\n+     */\n+    private void removeReference(@Nonnull final String txId, final String resourceId, final String property,\n+                                 final String targetId) {\n+        final Map<String, String> parameterSource = Map.of(\"transactionId\", txId,\n+                \"resourceId\", resourceId,\n+                \"property\", property,\n+                \"targetId\", targetId);\n+        final boolean addedInTx = !jdbcTemplate.queryForList(IS_REFERENCE_ADDED_IN_TRANSACTION, parameterSource)\n+                .isEmpty();\n+        if (addedInTx) {\n+            jdbcTemplate.update(UNDO_INSERT_REFERENCE_IN_TRANSACTION, parameterSource);\n+        } else {\n+            jdbcTemplate.update(DELETE_REFERENCE_IN_TRANSACTION, parameterSource);\n+        }\n+    }\n+\n+    /**\n+     * Add a reference\n+     * @param txId the transaction Id.\n+     * @param resourceId the subject resource Id.\n+     * @param targetId the target resource Id.\n+     */\n+    private void addReference(@Nonnull final String txId, final String resourceId, final String property,\n+                              final String targetId) {\n+        final Map<String, String> parameterSource = Map.of(\"transactionId\", txId,\n+                \"resourceId\", resourceId,\n+                \"property\", property,\n+                \"targetId\", targetId);\n+        final boolean addedInTx = !jdbcTemplate.queryForList(IS_REFERENCE_DELETED_IN_TRANSACTION, parameterSource)\n+                .isEmpty();\n+        if (addedInTx) {\n+            jdbcTemplate.update(UNDO_DELETE_REFERENCE_IN_TRANSACTION, parameterSource);\n+        } else {\n+            jdbcTemplate.update(INSERT_REFERENCE_IN_TRANSACTION, parameterSource);\n+        }\n+    }\n+\n+    /**\n+     * Utility to filter a RDFStream to just the URIs from subjects and objects within the repository.\n+     * @param stream the provided stream\n+     * @return stream of triples with internal references.\n+     */\n+    private Stream<Triple> getReferencesFromRdf(final RdfStream stream) {\n+        final Predicate<Triple> isInternalReference = t -> {\n+            final Node s = t.getSubject();\n+            final Node o = t.getObject();\n+            return (s.isURI() && s.getURI().startsWith(FEDORA_ID_PREFIX) && o.isURI() &&\n+                    o.getURI().startsWith(FEDORA_ID_PREFIX));\n+        };\n+        return stream.peek(t -> LOGGER.trace(\"Before reference filtering: {}\", t)).filter(isInternalReference)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a83e1e3badbcc4a57dc90ab856b747009193ee2"}, "originalPosition": 360}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE1NDQ1Nw==", "bodyText": "This looks good, there are a few extra cases that we should probably check:\n\nVerify that if you request references from a committed transaction (or transaction that doesn't exist), you get nothing\nCheck that references deleted in a transaction are not visible within the transaction, but still are outside of it (can probably add this to testAddAndRemove)\nCommitting without having called updateReferences", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487154457", "createdAt": "2020-09-11T16:25:21Z", "author": {"login": "bbpennel"}, "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/ReferenceServiceImplTest.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.impl.services;\n+\n+import static org.apache.jena.rdf.model.ModelFactory.createDefaultModel;\n+import static org.fcrepo.kernel.api.rdf.DefaultRdfStream.fromModel;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.when;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.apache.jena.graph.Triple;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Property;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.ResourceFactory;\n+import org.fcrepo.kernel.api.RdfStream;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.services.ReferenceService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+/**\n+ * Reference Service Tests\n+ * @author whikloj\n+ */\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(\"/containmentIndexTest.xml\")\n+public class ReferenceServiceImplTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a83e1e3badbcc4a57dc90ab856b747009193ee2"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE1Njk1MQ==", "bodyText": "Doesn't seem like we need a case insensitive comparison here, the interaction model uris can be case sensitive.", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487156951", "createdAt": "2020-09-11T16:29:54Z", "author": {"login": "bbpennel"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/IndexBuilderImpl.java", "diffHunk": "@@ -148,6 +166,13 @@ private void indexOcflObject(final String ocflId, final String txId, final OcflO\n                                 fedoraId.getFullId()));\n                     }\n                 }\n+                if (!headers.getInteractionModel().equalsIgnoreCase(NON_RDF_SOURCE.toString())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a83e1e3badbcc4a57dc90ab856b747009193ee2"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2OTUwNjA0", "url": "https://github.com/fcrepo/fcrepo/pull/1749#pullrequestreview-486950604", "createdAt": "2020-09-11T16:26:10Z", "commit": {"oid": "1a83e1e3badbcc4a57dc90ab856b747009193ee2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjoyNjoxMFrOHQlk2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNzo0NTowMVrOHQoEwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE1NDkwNQ==", "bodyText": "Did you look into removing the @Ignore from:\nhttps://github.com/fcrepo4/fcrepo4/blob/main/fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java#L3971", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487154905", "createdAt": "2020-09-11T16:26:10Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "diffHunk": "@@ -2850,6 +2849,58 @@ public void testGetObjectReferences() throws IOException {\n         }\n     }\n \n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a83e1e3badbcc4a57dc90ab856b747009193ee2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE2Mzc1NA==", "bodyText": "Following the same pattern as \"recordEvent()\", would it make sense to refactor the method \"updateReferences()\" up to the AbstractService class?", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487163754", "createdAt": "2020-09-11T16:42:54Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImpl.java", "diffHunk": "@@ -180,6 +180,8 @@ public void perform(final String txId, final String userPrincipal, final FedoraI\n \n         try {\n             pSession.persist(createOp);\n+            referenceService.updateReferences(txId, fedoraId,\n+                    fromModel(model.getResource(fedoraId.getFullId()).asNode(), model));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a83e1e3badbcc4a57dc90ab856b747009193ee2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4MjI3MQ==", "bodyText": "Make final?", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487182271", "createdAt": "2020-09-11T17:18:21Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/ReferenceServiceImplTest.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.impl.services;\n+\n+import static org.apache.jena.rdf.model.ModelFactory.createDefaultModel;\n+import static org.fcrepo.kernel.api.rdf.DefaultRdfStream.fromModel;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.when;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.apache.jena.graph.Triple;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Property;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.ResourceFactory;\n+import org.fcrepo.kernel.api.RdfStream;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.services.ReferenceService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+/**\n+ * Reference Service Tests\n+ * @author whikloj\n+ */\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(\"/containmentIndexTest.xml\")\n+public class ReferenceServiceImplTest {\n+\n+    @Inject\n+    private ReferenceService referenceService;\n+\n+    @Mock\n+    private FedoraResource targetResource;\n+\n+    private FedoraId subject1Id;\n+\n+    private FedoraId subject2Id;\n+\n+    private Resource subject1;\n+\n+    private Resource subject2;\n+\n+    private Resource target;\n+\n+    private static Property referenceProp = ResourceFactory.createProperty(\"http://example.org/pointer\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a83e1e3badbcc4a57dc90ab856b747009193ee2"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4ODUyMg==", "bodyText": "You are using the containmenIndexDataSource??", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487188522", "createdAt": "2020-09-11T17:30:39Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/test/resources/containmentIndexTest.xml", "diffHunk": "@@ -21,4 +21,9 @@\n     <bean id=\"containmentIndex\" class=\"org.fcrepo.kernel.impl.ContainmentIndexImpl\">\n         <property name=\"dataSource\" ref=\"containmentIndexDataSource\"/>\n     </bean>\n+\n+    <!-- ReferenceService index to test -->\n+    <bean id=\"referenceIndex\" class=\"org.fcrepo.kernel.impl.services.ReferenceServiceImpl\">\n+        <property name=\"dataSource\" ref=\"containmentIndexDataSource\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a83e1e3badbcc4a57dc90ab856b747009193ee2"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5NTg0MQ==", "bodyText": "It appears that setting the fields here is unnecessary. I believe the setUp method can be removed.", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487195841", "createdAt": "2020-09-11T17:45:01Z", "author": {"login": "awoods"}, "path": "fcrepo-jms/src/test/java/org/fcrepo/integration/jms/observer/AbstractJmsIT.java", "diffHunk": "@@ -135,6 +140,12 @@\n \n     protected abstract Destination createDestination() throws JMSException;\n \n+    @Before\n+    public void setUp() {\n+        setField(createResourceService, \"referenceService\", referenceService);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a83e1e3badbcc4a57dc90ab856b747009193ee2"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MDc3OTcw", "url": "https://github.com/fcrepo/fcrepo/pull/1749#pullrequestreview-487077970", "createdAt": "2020-09-11T19:43:26Z", "commit": {"oid": "f282d4a5975cf1224c9310762a81c333e63c54b9"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cede1869d66f847cb7a2715295e362cb83b1547e", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/cede1869d66f847cb7a2715295e362cb83b1547e", "committedDate": "2020-09-14T14:34:42Z", "message": "Inbound references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eb90ca3c026a4a712769eeea48e1d922549f215", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/7eb90ca3c026a4a712769eeea48e1d922549f215", "committedDate": "2020-09-14T14:34:42Z", "message": "Add delete references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6b227e281128c3e6c5ea7010c754e874fb48220", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/c6b227e281128c3e6c5ea7010c754e874fb48220", "committedDate": "2020-09-14T14:34:42Z", "message": "code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b400bc68c59e889a0b4c4c2dd7b384900fb7eece", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/b400bc68c59e889a0b4c4c2dd7b384900fb7eece", "committedDate": "2020-09-14T14:35:39Z", "message": "Remove Override"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "653cc66412d5d9c9382af5ac928376cad4dc9a22", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/653cc66412d5d9c9382af5ac928376cad4dc9a22", "committedDate": "2020-09-14T14:38:38Z", "message": "Remove whitespace"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc27de0cdf0044b387191e4e25b2dd04fcf18c1d", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/fc27de0cdf0044b387191e4e25b2dd04fcf18c1d", "committedDate": "2020-09-11T20:14:17Z", "message": "Remove Override"}, "afterCommit": {"oid": "653cc66412d5d9c9382af5ac928376cad4dc9a22", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/653cc66412d5d9c9382af5ac928376cad4dc9a22", "committedDate": "2020-09-14T14:38:38Z", "message": "Remove whitespace"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4OTYwNzY0", "url": "https://github.com/fcrepo/fcrepo/pull/1749#pullrequestreview-488960764", "createdAt": "2020-09-15T18:39:41Z", "commit": {"oid": "653cc66412d5d9c9382af5ac928376cad4dc9a22"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODozOTo0MVrOHSPC8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODozOTo0MVrOHSPC8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg4MjkzMA==", "bodyText": "One more test I'd suggest adding: that a reference to a binary is returned in a request to its description", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r488882930", "createdAt": "2020-09-15T18:39:41Z", "author": {"login": "bbpennel"}, "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/ReferenceServiceImplTest.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.impl.services;\n+\n+import static org.apache.jena.rdf.model.ModelFactory.createDefaultModel;\n+import static org.fcrepo.kernel.api.rdf.DefaultRdfStream.fromModel;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.when;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.apache.jena.graph.Triple;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Property;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.ResourceFactory;\n+import org.fcrepo.kernel.api.RdfStream;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.services.ReferenceService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+/**\n+ * Reference Service Tests\n+ * @author whikloj\n+ */\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(\"/containmentIndexTest.xml\")\n+public class ReferenceServiceImplTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653cc66412d5d9c9382af5ac928376cad4dc9a22"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca329d3f4cf0da230da86340e31a385c315ba099", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/ca329d3f4cf0da230da86340e31a385c315ba099", "committedDate": "2020-09-15T19:28:10Z", "message": "Additional reference test for binaries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9294886b06a8406d39f2b71e36020be78b810e27", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/9294886b06a8406d39f2b71e36020be78b810e27", "committedDate": "2020-09-17T02:30:18Z", "message": "Use subject from RDF not resource being acted on"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1df17ea2f612b762fa329aa28ebb0328ea7fb1cb", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/1df17ea2f612b762fa329aa28ebb0328ea7fb1cb", "committedDate": "2020-09-17T22:08:21Z", "message": "Track resource URI with references"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyODc0MjAw", "url": "https://github.com/fcrepo/fcrepo/pull/1749#pullrequestreview-492874200", "createdAt": "2020-09-21T18:27:25Z", "commit": {"oid": "9294886b06a8406d39f2b71e36020be78b810e27"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODoyNzoyNlrOHVdTqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODoyNzoyNlrOHVdTqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2MjMxNA==", "bodyText": "Minor, but there is a helper method on the parent class of this test used for adding properties to resources which you could use here. setProperty(binaryUri + \"/\" + FCR_METADATA, \"http://awoods.com/pointsAt\", \"<\" + containerUri + \">\")", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r492262314", "createdAt": "2020-09-21T18:27:26Z", "author": {"login": "bbpennel"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "diffHunk": "@@ -2856,6 +2856,41 @@ public void testGetObjectReferences() throws IOException {\n         }\n     }\n \n+    @Test\n+    public void testInboundReferencesFromBinary() throws Exception {\n+        final Node referenceProp = NodeFactory.createURI(\"http://awoods.com/pointsAt\");\n+        final HttpPost postContainer = postObjMethod();\n+        final String containerUri;\n+        try (final CloseableHttpResponse response = execute(postContainer)) {\n+            assertEquals(CREATED.getStatusCode(), getStatus(response));\n+            containerUri = getLocation(response);\n+        }\n+\n+        final HttpPost postBinary = postObjMethod();\n+        postBinary.setHeader(CONTENT_TYPE, TEXT_PLAIN);\n+        postBinary.setEntity(new StringEntity(\"Test text\"));\n+        final String binaryUri;\n+        try (final CloseableHttpResponse response = execute(postBinary)) {\n+            assertEquals(CREATED.getStatusCode(), getStatus(response));\n+            binaryUri = getLocation(response);\n+        }\n+\n+        final String linkRdf = \"INSERT { <\" + binaryUri + \"> <http://awoods.com/pointsAt> <\" + containerUri + \"> . } \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9294886b06a8406d39f2b71e36020be78b810e27"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d33b6152c339fe96d55fe4b65757b55ef4bb3ebd", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/d33b6152c339fe96d55fe4b65757b55ef4bb3ebd", "committedDate": "2020-09-21T19:22:27Z", "message": "Use existing setProperty function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNzc3NTA2", "url": "https://github.com/fcrepo/fcrepo/pull/1749#pullrequestreview-493777506", "createdAt": "2020-09-22T19:24:54Z", "commit": {"oid": "d33b6152c339fe96d55fe4b65757b55ef4bb3ebd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2945, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}