{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NzQ5Mzg5", "number": 1766, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo1MzoyMlrOEq4Pig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTowMzowNVrOEq4dTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzk3MTMwOnYy", "diffSide": "RIGHT", "path": "fcrepo-auth-webac/src/main/java/org/fcrepo/auth/webac/WebACAuthorizingRealm.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo1MzoyMlrOHdVnBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo1NTowMFrOHdVquw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyNDgwNQ==", "bodyText": "Why did this (and other examples) need to change from @Inject to @Autowired?", "url": "https://github.com/fcrepo/fcrepo/pull/1766#discussion_r500524805", "createdAt": "2020-10-06T18:53:22Z", "author": {"login": "awoods"}, "path": "fcrepo-auth-webac/src/main/java/org/fcrepo/auth/webac/WebACAuthorizingRealm.java", "diffHunk": "@@ -87,7 +89,8 @@\n     @Inject\n     private ResourceFactory resourceFactory;\n \n-    @Inject\n+    @Autowired", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e76801f05dc4cdd2854b6933b3d065a192f2399"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyNTc1NQ==", "bodyText": "It seems like Spring does not like resolving the @Qualifier for @Inject, at least in some circumstances.", "url": "https://github.com/fcrepo/fcrepo/pull/1766#discussion_r500525755", "createdAt": "2020-10-06T18:55:00Z", "author": {"login": "pwinckles"}, "path": "fcrepo-auth-webac/src/main/java/org/fcrepo/auth/webac/WebACAuthorizingRealm.java", "diffHunk": "@@ -87,7 +89,8 @@\n     @Inject\n     private ResourceFactory resourceFactory;\n \n-    @Inject\n+    @Autowired", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyNDgwNQ=="}, "originalCommit": {"oid": "8e76801f05dc4cdd2854b6933b3d065a192f2399"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzk5MjY0OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexMetrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo1ODo1OFrOHdVz8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo1ODo1OFrOHdVz8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyODExNQ==", "bodyText": "typo: This timer should likely be: getContainerIdByPathTimer", "url": "https://github.com/fcrepo/fcrepo/pull/1766#discussion_r500528115", "createdAt": "2020-10-06T18:58:58Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexMetrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.fcrepo.kernel.impl;\n+\n+import io.micrometer.core.instrument.Metrics;\n+import io.micrometer.core.instrument.Timer;\n+import org.fcrepo.common.metrics.MetricsHelper;\n+import org.fcrepo.kernel.api.ContainmentIndex;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * ContainmentIndex wrapper for adding metrics\n+ *\n+ * @author pwinckles\n+ */\n+@Component(\"containmentIndex\")\n+public class ContainmentIndexMetrics implements ContainmentIndex {\n+\n+    private static final String METRIC_NAME = \"fcrepo.db\";\n+    private static final String DB = \"db\";\n+    private static final String CONTAINMENT = \"containment\";\n+    private static final String OPERATION = \"operation\";\n+\n+    private static final Timer getContainsTimer = Metrics.timer(METRIC_NAME,\n+            DB, CONTAINMENT, OPERATION, \"getContains\");\n+    private static final Timer getContainsDeletedTimer = Metrics.timer(METRIC_NAME,\n+            DB, CONTAINMENT, OPERATION, \"getContainsDeleted\");\n+    private static final Timer getContainsByTimer = Metrics.timer(METRIC_NAME,\n+            DB, CONTAINMENT, OPERATION, \"getContainsBy\");\n+    private static final Timer removeContainedByTimer = Metrics.timer(METRIC_NAME,\n+            DB, CONTAINMENT, OPERATION, \"removeContainedBy\");\n+    private static final Timer removeResourceTimer = Metrics.timer(METRIC_NAME,\n+            DB, CONTAINMENT, OPERATION, \"removeResource\");\n+    private static final Timer purgeResourceTimer = Metrics.timer(METRIC_NAME,\n+            DB, CONTAINMENT, OPERATION, \"purgeResource\");\n+    private static final Timer addContainedByTimer = Metrics.timer(METRIC_NAME,\n+            DB, CONTAINMENT, OPERATION, \"addContainedBy\");\n+    private static final Timer commitTransactionTimer = Metrics.timer(METRIC_NAME,\n+            DB, CONTAINMENT, OPERATION, \"commitTransaction\");\n+    private static final Timer rollbackTransactionTimer = Metrics.timer(METRIC_NAME,\n+            DB, CONTAINMENT, OPERATION, \"rollbackTransaction\");\n+    private static final Timer resourceExistsTimer = Metrics.timer(METRIC_NAME,\n+            DB, CONTAINMENT, OPERATION, \"resourceExists\");\n+    private static final Timer getContainerIdByPathTimer = Metrics.timer(METRIC_NAME,\n+            DB, CONTAINMENT, OPERATION, \"getContainerIdByPath\");\n+    private static final Timer resetTimer = Metrics.timer(METRIC_NAME,\n+            DB, CONTAINMENT, OPERATION, \"reset\");\n+\n+    @Autowired\n+    @Qualifier(\"containmentIndexImpl\")\n+    private ContainmentIndex containmentIndexImpl;\n+\n+    @Override\n+    public Stream<String> getContains(final String txId, final FedoraId fedoraId) {\n+        return MetricsHelper.time(getContainsTimer, () -> {\n+            return containmentIndexImpl.getContains(txId, fedoraId);\n+        });\n+    }\n+\n+    @Override\n+    public Stream<String> getContainsDeleted(final String txId, final FedoraId fedoraId) {\n+        return MetricsHelper.time(getContainsDeletedTimer, () -> {\n+            return containmentIndexImpl.getContainsDeleted(txId, fedoraId);\n+        });\n+    }\n+\n+    @Override\n+    public String getContainedBy(final String txID, final FedoraId resource) {\n+        return MetricsHelper.time(getContainsByTimer, () -> {\n+            return containmentIndexImpl.getContainedBy(txID, resource);\n+        });\n+    }\n+\n+    @Override\n+    public void removeContainedBy(final String txID, final FedoraId parent, final FedoraId child) {\n+        removeContainedByTimer.record(() -> {\n+            containmentIndexImpl.removeContainedBy(txID, parent, child);\n+        });\n+    }\n+\n+    @Override\n+    public void removeResource(final String txID, final FedoraId resource) {\n+        removeResourceTimer.record(() -> {\n+            containmentIndexImpl.removeResource(txID, resource);\n+        });\n+    }\n+\n+    @Override\n+    public void purgeResource(final String txID, final FedoraId resource) {\n+        purgeResourceTimer.record(() -> {\n+            containmentIndexImpl.purgeResource(txID, resource);\n+        });\n+    }\n+\n+    @Override\n+    public void addContainedBy(final String txID, final FedoraId parent, final FedoraId child) {\n+        addContainedByTimer.record(() -> {\n+            containmentIndexImpl.addContainedBy(txID, parent, child);\n+        });\n+    }\n+\n+    @Override\n+    public void commitTransaction(final String txId) {\n+        commitTransactionTimer.record(() -> {\n+            containmentIndexImpl.commitTransaction(txId);\n+        });\n+    }\n+\n+    @Override\n+    public void rollbackTransaction(final String txId) {\n+        rollbackTransactionTimer.record(() -> {\n+            containmentIndexImpl.rollbackTransaction(txId);\n+        });\n+    }\n+\n+    @Override\n+    public boolean resourceExists(final String txID, final FedoraId fedoraID) {\n+        return MetricsHelper.time(resourceExistsTimer, () -> {\n+            return containmentIndexImpl.resourceExists(txID, fedoraID);\n+        });\n+    }\n+\n+    @Override\n+    public FedoraId getContainerIdByPath(final String txID, final FedoraId fedoraId) {\n+        return MetricsHelper.time(getContainsByTimer, () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e76801f05dc4cdd2854b6933b3d065a192f2399"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDAwMjU4OnYy", "diffSide": "RIGHT", "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/AbstractPersister.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTowMTo0OFrOHdV6Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTowMTo0OFrOHdV6Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyOTczMQ==", "bodyText": "typo: \"oclf\"", "url": "https://github.com/fcrepo/fcrepo/pull/1766#discussion_r500529731", "createdAt": "2020-10-06T19:01:48Z", "author": {"login": "awoods"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/AbstractPersister.java", "diffHunk": "@@ -56,14 +56,14 @@\n      * to determine which operations the persister knows how to handle.\n      */\n     private final ResourceOperationType resourceOperationType;\n-    protected final FedoraToOcflObjectIndex index;\n+    protected final FedoraToOcflObjectIndex oclfIndex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e76801f05dc4cdd2854b6933b3d065a192f2399"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDAwNTI3OnYy", "diffSide": "RIGHT", "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/CreateNonRdfSourcePersister.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTowMjo0MlrOHdV8AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTowMjo0MlrOHdV8AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUzMDE3Nw==", "bodyText": "typo", "url": "https://github.com/fcrepo/fcrepo/pull/1766#discussion_r500530177", "createdAt": "2020-10-06T19:02:42Z", "author": {"login": "awoods"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/CreateNonRdfSourcePersister.java", "diffHunk": "@@ -53,6 +53,6 @@ public void persist(final OcflPersistentStorageSession session, final ResourceOp\n         final String ocflId = mapToOcflId(session.getId(), rootObjectId);\n         final OcflObjectSession ocflObjectSession = session.findOrCreateSession(ocflId);\n         persistNonRDFSource(operation, ocflObjectSession, rootObjectId.asBaseId());\n-        index.addMapping(session.getId(), resourceId.asResourceId(), rootObjectId.asBaseId(), ocflId);\n+        oclfIndex.addMapping(session.getId(), resourceId.asResourceId(), rootObjectId.asBaseId(), ocflId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e76801f05dc4cdd2854b6933b3d065a192f2399"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDAwNTg0OnYy", "diffSide": "RIGHT", "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/CreateRdfSourcePersister.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTowMjo1M1rOHdV8Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTowMjo1M1rOHdV8Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUzMDI3MQ==", "bodyText": "typo", "url": "https://github.com/fcrepo/fcrepo/pull/1766#discussion_r500530271", "createdAt": "2020-10-06T19:02:53Z", "author": {"login": "awoods"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/CreateRdfSourcePersister.java", "diffHunk": "@@ -73,6 +73,6 @@ public void persist(final OcflPersistentStorageSession session, final ResourceOp\n         final String ocflObjectId = mapToOcflId(session.getId(), rootObjectId);\n         final OcflObjectSession ocflObjectSession = session.findOrCreateSession(ocflObjectId);\n         persistRDF(ocflObjectSession, operation, rootObjectId.asBaseId());\n-        index.addMapping(session.getId(), resourceId.asResourceId(), rootObjectId.asBaseId(), ocflObjectId);\n+        oclfIndex.addMapping(session.getId(), resourceId.asResourceId(), rootObjectId.asBaseId(), ocflObjectId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e76801f05dc4cdd2854b6933b3d065a192f2399"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDAwNjUyOnYy", "diffSide": "RIGHT", "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/DeleteResourcePersister.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTowMzowNVrOHdV8xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTowMzowNVrOHdV8xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUzMDM3Mg==", "bodyText": "typo", "url": "https://github.com/fcrepo/fcrepo/pull/1766#discussion_r500530372", "createdAt": "2020-10-06T19:03:05Z", "author": {"login": "awoods"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/DeleteResourcePersister.java", "diffHunk": "@@ -62,7 +62,7 @@ public void persist(final OcflPersistentStorageSession session, final ResourceOp\n         }\n \n         if (!objectSession.containsResource(resourceId.getResourceId())) {\n-            index.removeMapping(session.getId(), resourceId);\n+            oclfIndex.removeMapping(session.getId(), resourceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e76801f05dc4cdd2854b6933b3d065a192f2399"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1681, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}