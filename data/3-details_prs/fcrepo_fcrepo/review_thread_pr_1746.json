{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwNzczNzM4", "number": 1746, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTo1MDowNFrOEhNQrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzozNDowMVrOEhWSXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjU1NzI2OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraLdp.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTo1MDowNFrOHOZQDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTo1MDowNFrOHOZQDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1NTgyMg==", "bodyText": "Perhaps it would be worthwhile to log the transformed query?", "url": "https://github.com/fcrepo/fcrepo/pull/1746#discussion_r484855822", "createdAt": "2020-09-08T11:50:04Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraLdp.java", "diffHunk": "@@ -513,7 +513,9 @@ public Response updateSparql(final InputStream requestBodyStream)\n             evaluateRequestPreconditions(request, servletResponse, resource(), transaction);\n \n             LOGGER.info(\"PATCH for '{}'\", externalPath);\n-            patchResourcewithSparql(resource(), requestBody);\n+            final String newRequest = httpRdfService.patchRequestToInternalString(resource().getFedoraId().getFullId(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b66bfb7568456fab369838a5ca4cb6eb0e88681e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjU4Mjk1OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraLdp.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTo1NzoyNFrOHOZfag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzoyNTozOFrOHOc5pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1OTc1NA==", "bodyText": "Understanding that this is was not added in this PR, but I think line 633 should be throw new PathNotFoundRuntimeException(e.getMessage(), e);. The problem is that when you construct a new exception by wrapping another exception, the new exception prepends the inner exception's class to the existing message. This creates problems when the message is returned in PathNotFoundExceptionMapper.\nActually, having said that that, the problem is bigger than that because there is no ExceptionMapper for PathNotFoundRuntimeException.\nThis does need to be fixed, but we could create a jira if you don't want to address it here.", "url": "https://github.com/fcrepo/fcrepo/pull/1746#discussion_r484859754", "createdAt": "2020-09-08T11:57:24Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraLdp.java", "diffHunk": "@@ -627,7 +629,7 @@ public Response createObject(@HeaderParam(CONTENT_DISPOSITION) final ContentDisp\n         try {\n             final var resource = getFedoraResource(transaction, newFedoraId);\n             return createUpdateResponse(resource, true);\n-        } catch (PathNotFoundException e) {\n+        } catch (final PathNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b66bfb7568456fab369838a5ca4cb6eb0e88681e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkxNTYyMA==", "bodyText": "Ok so I am adding a PathNotFoundRuntimeExceptionMapper and updating PathNotFoundRuntimeException to add the method\n    /**\n     * Wrap a PathNotFoundException in a runtime exception\n     * @param message the original message.\n     * @param rootCause the root cause.\n     */\n    public PathNotFoundRuntimeException(final String message, final Throwable rootCause) {\n        super(message, rootCause);\n    }\n\nWe should think about the use of the ItemNotFoundException and whether we need mappers for it and for PathNotFoundException. But I'm not doing that now.", "url": "https://github.com/fcrepo/fcrepo/pull/1746#discussion_r484915620", "createdAt": "2020-09-08T13:25:38Z", "author": {"login": "whikloj"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraLdp.java", "diffHunk": "@@ -627,7 +629,7 @@ public Response createObject(@HeaderParam(CONTENT_DISPOSITION) final ContentDisp\n         try {\n             final var resource = getFedoraResource(transaction, newFedoraId);\n             return createUpdateResponse(resource, true);\n-        } catch (PathNotFoundException e) {\n+        } catch (final PathNotFoundException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1OTc1NA=="}, "originalCommit": {"oid": "b66bfb7568456fab369838a5ca4cb6eb0e88681e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjU4OTM2OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/SparqlTranslateVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTo1OToxN1rOHOZjNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzoyNTo1MlrOHOc6rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg2MDcyNg==", "bodyText": "Is it possible that a WHERE clause could have ids that need to be translated too?", "url": "https://github.com/fcrepo/fcrepo/pull/1746#discussion_r484860726", "createdAt": "2020-09-08T11:59:17Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/SparqlTranslateVisitor.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.http.api.services;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.jena.graph.Node;\n+import org.apache.jena.graph.NodeFactory;\n+import org.apache.jena.sparql.core.Quad;\n+import org.apache.jena.sparql.modify.request.QuadAcc;\n+import org.apache.jena.sparql.modify.request.QuadDataAcc;\n+import org.apache.jena.sparql.modify.request.UpdateData;\n+import org.apache.jena.sparql.modify.request.UpdateDataDelete;\n+import org.apache.jena.sparql.modify.request.UpdateDataInsert;\n+import org.apache.jena.sparql.modify.request.UpdateDeleteWhere;\n+import org.apache.jena.sparql.modify.request.UpdateModify;\n+import org.apache.jena.sparql.modify.request.UpdateVisitorBase;\n+import org.apache.jena.sparql.syntax.Element;\n+import org.apache.jena.update.Update;\n+import org.apache.jena.update.UpdateFactory;\n+import org.apache.jena.update.UpdateRequest;\n+import org.fcrepo.http.commons.api.rdf.HttpIdentifierConverter;\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.slf4j.Logger;\n+\n+/**\n+ * A special UpdateVisitor to translate Fedora URIs to internal FedoraIDs.\n+ * @author whikloj\n+ */\n+public class SparqlTranslateVisitor extends UpdateVisitorBase {\n+\n+    private static final Logger LOGGER = getLogger(SparqlTranslateVisitor.class);\n+\n+    private List<Update> newUpdates = new ArrayList<>();\n+\n+    private HttpIdentifierConverter idTranslator;\n+\n+    public SparqlTranslateVisitor(final HttpIdentifierConverter identifierConverter) {\n+        idTranslator = identifierConverter;\n+    }\n+\n+    @Override\n+    public void visit(final UpdateDataInsert update) {\n+        translateUpdate(update);\n+    }\n+\n+    @Override\n+    public void visit(final UpdateDataDelete update) {\n+        translateUpdate(update);\n+    }\n+\n+    @Override\n+    public void visit(final UpdateDeleteWhere update) {\n+        translateUpdate(update);\n+    }\n+\n+    @Override\n+    public void visit(final UpdateModify update) {\n+        translateUpdate(update);\n+    }\n+\n+    /**\n+     * Get the new UpdateRequest based on the parsed Updates.\n+     * @return the new updaterequest object.\n+     */\n+    public UpdateRequest getTranslatedRequest() {\n+        final UpdateRequest newRequest = UpdateFactory.create();\n+        newUpdates.forEach(newRequest::add);\n+        return newRequest;\n+    }\n+\n+    /**\n+     * Perform a translation of all the triples in an Update adding them to the internal list.\n+     * @param update the update request to translate.\n+     */\n+    private void translateUpdate(final Update update) {\n+        final List<Quad> sourceQuads;\n+        if (update instanceof UpdateDeleteWhere) {\n+            sourceQuads = ((UpdateDeleteWhere)update).getQuads();\n+        } else {\n+            sourceQuads = ((UpdateData) update).getQuads();\n+        }\n+        final List<Quad> newQuads = translateQuads(sourceQuads);\n+        final Update newUpdate = makeUpdate(update.getClass(), newQuads);\n+        newUpdates.add(newUpdate);\n+    }\n+\n+    /**\n+     * Perform a translation of all the triples in an UpdateModify request.\n+     * @param update the update request to translate\n+     */\n+    private void translateUpdate(final UpdateModify update) {\n+        final UpdateModify newUpdate = new UpdateModify();\n+        final List<Quad> insertQuads = (update.hasInsertClause() ? translateQuads(update.getInsertQuads()) :\n+                Collections.emptyList());\n+        insertQuads.forEach(q -> newUpdate.getInsertAcc().addQuad(q));\n+\n+        final List<Quad> deleteQuads = (update.hasDeleteClause() ? translateQuads(update.getDeleteQuads()) :\n+                Collections.emptyList());\n+        deleteQuads.forEach(q -> newUpdate.getDeleteAcc().addQuad(q));\n+\n+        final Element where = update.getWherePattern();\n+        newUpdate.setElement(where);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b66bfb7568456fab369838a5ca4cb6eb0e88681e"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkxNTg4Nw==", "bodyText": "Checking in to this.", "url": "https://github.com/fcrepo/fcrepo/pull/1746#discussion_r484915887", "createdAt": "2020-09-08T13:25:52Z", "author": {"login": "whikloj"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/SparqlTranslateVisitor.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.http.api.services;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.jena.graph.Node;\n+import org.apache.jena.graph.NodeFactory;\n+import org.apache.jena.sparql.core.Quad;\n+import org.apache.jena.sparql.modify.request.QuadAcc;\n+import org.apache.jena.sparql.modify.request.QuadDataAcc;\n+import org.apache.jena.sparql.modify.request.UpdateData;\n+import org.apache.jena.sparql.modify.request.UpdateDataDelete;\n+import org.apache.jena.sparql.modify.request.UpdateDataInsert;\n+import org.apache.jena.sparql.modify.request.UpdateDeleteWhere;\n+import org.apache.jena.sparql.modify.request.UpdateModify;\n+import org.apache.jena.sparql.modify.request.UpdateVisitorBase;\n+import org.apache.jena.sparql.syntax.Element;\n+import org.apache.jena.update.Update;\n+import org.apache.jena.update.UpdateFactory;\n+import org.apache.jena.update.UpdateRequest;\n+import org.fcrepo.http.commons.api.rdf.HttpIdentifierConverter;\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.slf4j.Logger;\n+\n+/**\n+ * A special UpdateVisitor to translate Fedora URIs to internal FedoraIDs.\n+ * @author whikloj\n+ */\n+public class SparqlTranslateVisitor extends UpdateVisitorBase {\n+\n+    private static final Logger LOGGER = getLogger(SparqlTranslateVisitor.class);\n+\n+    private List<Update> newUpdates = new ArrayList<>();\n+\n+    private HttpIdentifierConverter idTranslator;\n+\n+    public SparqlTranslateVisitor(final HttpIdentifierConverter identifierConverter) {\n+        idTranslator = identifierConverter;\n+    }\n+\n+    @Override\n+    public void visit(final UpdateDataInsert update) {\n+        translateUpdate(update);\n+    }\n+\n+    @Override\n+    public void visit(final UpdateDataDelete update) {\n+        translateUpdate(update);\n+    }\n+\n+    @Override\n+    public void visit(final UpdateDeleteWhere update) {\n+        translateUpdate(update);\n+    }\n+\n+    @Override\n+    public void visit(final UpdateModify update) {\n+        translateUpdate(update);\n+    }\n+\n+    /**\n+     * Get the new UpdateRequest based on the parsed Updates.\n+     * @return the new updaterequest object.\n+     */\n+    public UpdateRequest getTranslatedRequest() {\n+        final UpdateRequest newRequest = UpdateFactory.create();\n+        newUpdates.forEach(newRequest::add);\n+        return newRequest;\n+    }\n+\n+    /**\n+     * Perform a translation of all the triples in an Update adding them to the internal list.\n+     * @param update the update request to translate.\n+     */\n+    private void translateUpdate(final Update update) {\n+        final List<Quad> sourceQuads;\n+        if (update instanceof UpdateDeleteWhere) {\n+            sourceQuads = ((UpdateDeleteWhere)update).getQuads();\n+        } else {\n+            sourceQuads = ((UpdateData) update).getQuads();\n+        }\n+        final List<Quad> newQuads = translateQuads(sourceQuads);\n+        final Update newUpdate = makeUpdate(update.getClass(), newQuads);\n+        newUpdates.add(newUpdate);\n+    }\n+\n+    /**\n+     * Perform a translation of all the triples in an UpdateModify request.\n+     * @param update the update request to translate\n+     */\n+    private void translateUpdate(final UpdateModify update) {\n+        final UpdateModify newUpdate = new UpdateModify();\n+        final List<Quad> insertQuads = (update.hasInsertClause() ? translateQuads(update.getInsertQuads()) :\n+                Collections.emptyList());\n+        insertQuads.forEach(q -> newUpdate.getInsertAcc().addQuad(q));\n+\n+        final List<Quad> deleteQuads = (update.hasDeleteClause() ? translateQuads(update.getDeleteQuads()) :\n+                Collections.emptyList());\n+        deleteQuads.forEach(q -> newUpdate.getDeleteAcc().addQuad(q));\n+\n+        final Element where = update.getWherePattern();\n+        newUpdate.setElement(where);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg2MDcyNg=="}, "originalCommit": {"oid": "b66bfb7568456fab369838a5ca4cb6eb0e88681e"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjU5NzUwOnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/SparqlTranslateVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjowMTozMVrOHOZn_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzoyNzoxOFrOHOdBEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg2MTk0OA==", "bodyText": "In the code that you were working on last week, there was a case for if (updateClass.equals(UpdateModify.class)) here as well. Is that not needed?", "url": "https://github.com/fcrepo/fcrepo/pull/1746#discussion_r484861948", "createdAt": "2020-09-08T12:01:31Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/SparqlTranslateVisitor.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.http.api.services;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.jena.graph.Node;\n+import org.apache.jena.graph.NodeFactory;\n+import org.apache.jena.sparql.core.Quad;\n+import org.apache.jena.sparql.modify.request.QuadAcc;\n+import org.apache.jena.sparql.modify.request.QuadDataAcc;\n+import org.apache.jena.sparql.modify.request.UpdateData;\n+import org.apache.jena.sparql.modify.request.UpdateDataDelete;\n+import org.apache.jena.sparql.modify.request.UpdateDataInsert;\n+import org.apache.jena.sparql.modify.request.UpdateDeleteWhere;\n+import org.apache.jena.sparql.modify.request.UpdateModify;\n+import org.apache.jena.sparql.modify.request.UpdateVisitorBase;\n+import org.apache.jena.sparql.syntax.Element;\n+import org.apache.jena.update.Update;\n+import org.apache.jena.update.UpdateFactory;\n+import org.apache.jena.update.UpdateRequest;\n+import org.fcrepo.http.commons.api.rdf.HttpIdentifierConverter;\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.slf4j.Logger;\n+\n+/**\n+ * A special UpdateVisitor to translate Fedora URIs to internal FedoraIDs.\n+ * @author whikloj\n+ */\n+public class SparqlTranslateVisitor extends UpdateVisitorBase {\n+\n+    private static final Logger LOGGER = getLogger(SparqlTranslateVisitor.class);\n+\n+    private List<Update> newUpdates = new ArrayList<>();\n+\n+    private HttpIdentifierConverter idTranslator;\n+\n+    public SparqlTranslateVisitor(final HttpIdentifierConverter identifierConverter) {\n+        idTranslator = identifierConverter;\n+    }\n+\n+    @Override\n+    public void visit(final UpdateDataInsert update) {\n+        translateUpdate(update);\n+    }\n+\n+    @Override\n+    public void visit(final UpdateDataDelete update) {\n+        translateUpdate(update);\n+    }\n+\n+    @Override\n+    public void visit(final UpdateDeleteWhere update) {\n+        translateUpdate(update);\n+    }\n+\n+    @Override\n+    public void visit(final UpdateModify update) {\n+        translateUpdate(update);\n+    }\n+\n+    /**\n+     * Get the new UpdateRequest based on the parsed Updates.\n+     * @return the new updaterequest object.\n+     */\n+    public UpdateRequest getTranslatedRequest() {\n+        final UpdateRequest newRequest = UpdateFactory.create();\n+        newUpdates.forEach(newRequest::add);\n+        return newRequest;\n+    }\n+\n+    /**\n+     * Perform a translation of all the triples in an Update adding them to the internal list.\n+     * @param update the update request to translate.\n+     */\n+    private void translateUpdate(final Update update) {\n+        final List<Quad> sourceQuads;\n+        if (update instanceof UpdateDeleteWhere) {\n+            sourceQuads = ((UpdateDeleteWhere)update).getQuads();\n+        } else {\n+            sourceQuads = ((UpdateData) update).getQuads();\n+        }\n+        final List<Quad> newQuads = translateQuads(sourceQuads);\n+        final Update newUpdate = makeUpdate(update.getClass(), newQuads);\n+        newUpdates.add(newUpdate);\n+    }\n+\n+    /**\n+     * Perform a translation of all the triples in an UpdateModify request.\n+     * @param update the update request to translate\n+     */\n+    private void translateUpdate(final UpdateModify update) {\n+        final UpdateModify newUpdate = new UpdateModify();\n+        final List<Quad> insertQuads = (update.hasInsertClause() ? translateQuads(update.getInsertQuads()) :\n+                Collections.emptyList());\n+        insertQuads.forEach(q -> newUpdate.getInsertAcc().addQuad(q));\n+\n+        final List<Quad> deleteQuads = (update.hasDeleteClause() ? translateQuads(update.getDeleteQuads()) :\n+                Collections.emptyList());\n+        deleteQuads.forEach(q -> newUpdate.getDeleteAcc().addQuad(q));\n+\n+        final Element where = update.getWherePattern();\n+        newUpdate.setElement(where);\n+        newUpdates.add(newUpdate);\n+    }\n+\n+    /**\n+     * Perform the translation to a list of quads.\n+     * @param quadsList the quads\n+     * @return the translated list of quads.\n+     */\n+    private List<Quad> translateQuads(final List<Quad> quadsList) {\n+        final List<Quad> newQuads = new ArrayList<>();\n+        for (final Quad q : quadsList) {\n+            final Node subject = translateId(q.getSubject());\n+            final Node object = translateId(q.getObject());\n+            final Quad quad = new Quad(q.getGraph(), subject, q.getPredicate(), object);\n+            LOGGER.trace(\"Translated quad is: {}\", quad);\n+            newQuads.add(quad);\n+        }\n+        return newQuads;\n+    }\n+\n+    /**\n+     * Quads insert/delete data statements don't contain variables and use QuadDataAcc to accumulate,\n+     * insert {} delete {} where {} statements can't contain variables and use QuadAcc to accumulate. This function\n+     * simplifies the creation of the eventual Update.\n+     * @param updateClass the class of Update we are starting with.\n+     * @param quadList the list of Quads to generate the above class with.\n+     * @return a subclass of Update with the provided Quads.\n+     */\n+    private Update makeUpdate(final Class<? extends Update> updateClass, final List<Quad> quadList) {\n+        try {\n+            if (updateClass.equals(UpdateDeleteWhere.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b66bfb7568456fab369838a5ca4cb6eb0e88681e"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkxNzUyMA==", "bodyText": "I don't think so because the above private void translateUpdate(final UpdateModify update) returns the correct UpdateModify object. This is used by the private void translateUpdate(final Update update) { one that returns one of 3 classes.", "url": "https://github.com/fcrepo/fcrepo/pull/1746#discussion_r484917520", "createdAt": "2020-09-08T13:27:18Z", "author": {"login": "whikloj"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/SparqlTranslateVisitor.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.http.api.services;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.jena.graph.Node;\n+import org.apache.jena.graph.NodeFactory;\n+import org.apache.jena.sparql.core.Quad;\n+import org.apache.jena.sparql.modify.request.QuadAcc;\n+import org.apache.jena.sparql.modify.request.QuadDataAcc;\n+import org.apache.jena.sparql.modify.request.UpdateData;\n+import org.apache.jena.sparql.modify.request.UpdateDataDelete;\n+import org.apache.jena.sparql.modify.request.UpdateDataInsert;\n+import org.apache.jena.sparql.modify.request.UpdateDeleteWhere;\n+import org.apache.jena.sparql.modify.request.UpdateModify;\n+import org.apache.jena.sparql.modify.request.UpdateVisitorBase;\n+import org.apache.jena.sparql.syntax.Element;\n+import org.apache.jena.update.Update;\n+import org.apache.jena.update.UpdateFactory;\n+import org.apache.jena.update.UpdateRequest;\n+import org.fcrepo.http.commons.api.rdf.HttpIdentifierConverter;\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.slf4j.Logger;\n+\n+/**\n+ * A special UpdateVisitor to translate Fedora URIs to internal FedoraIDs.\n+ * @author whikloj\n+ */\n+public class SparqlTranslateVisitor extends UpdateVisitorBase {\n+\n+    private static final Logger LOGGER = getLogger(SparqlTranslateVisitor.class);\n+\n+    private List<Update> newUpdates = new ArrayList<>();\n+\n+    private HttpIdentifierConverter idTranslator;\n+\n+    public SparqlTranslateVisitor(final HttpIdentifierConverter identifierConverter) {\n+        idTranslator = identifierConverter;\n+    }\n+\n+    @Override\n+    public void visit(final UpdateDataInsert update) {\n+        translateUpdate(update);\n+    }\n+\n+    @Override\n+    public void visit(final UpdateDataDelete update) {\n+        translateUpdate(update);\n+    }\n+\n+    @Override\n+    public void visit(final UpdateDeleteWhere update) {\n+        translateUpdate(update);\n+    }\n+\n+    @Override\n+    public void visit(final UpdateModify update) {\n+        translateUpdate(update);\n+    }\n+\n+    /**\n+     * Get the new UpdateRequest based on the parsed Updates.\n+     * @return the new updaterequest object.\n+     */\n+    public UpdateRequest getTranslatedRequest() {\n+        final UpdateRequest newRequest = UpdateFactory.create();\n+        newUpdates.forEach(newRequest::add);\n+        return newRequest;\n+    }\n+\n+    /**\n+     * Perform a translation of all the triples in an Update adding them to the internal list.\n+     * @param update the update request to translate.\n+     */\n+    private void translateUpdate(final Update update) {\n+        final List<Quad> sourceQuads;\n+        if (update instanceof UpdateDeleteWhere) {\n+            sourceQuads = ((UpdateDeleteWhere)update).getQuads();\n+        } else {\n+            sourceQuads = ((UpdateData) update).getQuads();\n+        }\n+        final List<Quad> newQuads = translateQuads(sourceQuads);\n+        final Update newUpdate = makeUpdate(update.getClass(), newQuads);\n+        newUpdates.add(newUpdate);\n+    }\n+\n+    /**\n+     * Perform a translation of all the triples in an UpdateModify request.\n+     * @param update the update request to translate\n+     */\n+    private void translateUpdate(final UpdateModify update) {\n+        final UpdateModify newUpdate = new UpdateModify();\n+        final List<Quad> insertQuads = (update.hasInsertClause() ? translateQuads(update.getInsertQuads()) :\n+                Collections.emptyList());\n+        insertQuads.forEach(q -> newUpdate.getInsertAcc().addQuad(q));\n+\n+        final List<Quad> deleteQuads = (update.hasDeleteClause() ? translateQuads(update.getDeleteQuads()) :\n+                Collections.emptyList());\n+        deleteQuads.forEach(q -> newUpdate.getDeleteAcc().addQuad(q));\n+\n+        final Element where = update.getWherePattern();\n+        newUpdate.setElement(where);\n+        newUpdates.add(newUpdate);\n+    }\n+\n+    /**\n+     * Perform the translation to a list of quads.\n+     * @param quadsList the quads\n+     * @return the translated list of quads.\n+     */\n+    private List<Quad> translateQuads(final List<Quad> quadsList) {\n+        final List<Quad> newQuads = new ArrayList<>();\n+        for (final Quad q : quadsList) {\n+            final Node subject = translateId(q.getSubject());\n+            final Node object = translateId(q.getObject());\n+            final Quad quad = new Quad(q.getGraph(), subject, q.getPredicate(), object);\n+            LOGGER.trace(\"Translated quad is: {}\", quad);\n+            newQuads.add(quad);\n+        }\n+        return newQuads;\n+    }\n+\n+    /**\n+     * Quads insert/delete data statements don't contain variables and use QuadDataAcc to accumulate,\n+     * insert {} delete {} where {} statements can't contain variables and use QuadAcc to accumulate. This function\n+     * simplifies the creation of the eventual Update.\n+     * @param updateClass the class of Update we are starting with.\n+     * @param quadList the list of Quads to generate the above class with.\n+     * @return a subclass of Update with the provided Quads.\n+     */\n+    private Update makeUpdate(final Class<? extends Update> updateClass, final List<Quad> quadList) {\n+        try {\n+            if (updateClass.equals(UpdateDeleteWhere.class)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg2MTk0OA=="}, "originalCommit": {"oid": "b66bfb7568456fab369838a5ca4cb6eb0e88681e"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzk2NzE2OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoxNDoyNFrOHOmq3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyNjoyNVrOHOpDLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NTY3Nw==", "bodyText": "The javadoc says \"extResourceId\" is the internal ID... what does the \"ext\" stand for?", "url": "https://github.com/fcrepo/fcrepo/pull/1746#discussion_r485075677", "createdAt": "2020-09-08T17:14:24Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "diffHunk": "@@ -161,6 +164,25 @@ public RdfStream bodyToInternalStream(final String extResourceId, final InputStr\n         return fromModel(model.getResource(idTranslator.toInternalId(extResourceId)).asNode(), model);\n     }\n \n+    /**\n+     * Takes a PATCH request body and translates any subjects and objects that are in the domain of the repository\n+     * to use internal IDs.\n+     * @param extResourceId the internal ID of the current resource.\n+     * @param requestBody the request body.\n+     * @param idTranslator an ID converter for the current context.\n+     * @return the converted string.\n+     */\n+    public String patchRequestToInternalString(final String extResourceId, final String requestBody,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a09d128452c09da204b5640466290c9f39d07f4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNDY3MA==", "bodyText": "I was stealing from the other functions here, but it appears that they might be mis-named as well.", "url": "https://github.com/fcrepo/fcrepo/pull/1746#discussion_r485114670", "createdAt": "2020-09-08T18:26:25Z", "author": {"login": "whikloj"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "diffHunk": "@@ -161,6 +164,25 @@ public RdfStream bodyToInternalStream(final String extResourceId, final InputStr\n         return fromModel(model.getResource(idTranslator.toInternalId(extResourceId)).asNode(), model);\n     }\n \n+    /**\n+     * Takes a PATCH request body and translates any subjects and objects that are in the domain of the repository\n+     * to use internal IDs.\n+     * @param extResourceId the internal ID of the current resource.\n+     * @param requestBody the request body.\n+     * @param idTranslator an ID converter for the current context.\n+     * @return the converted string.\n+     */\n+    public String patchRequestToInternalString(final String extResourceId, final String requestBody,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NTY3Nw=="}, "originalCommit": {"oid": "6a09d128452c09da204b5640466290c9f39d07f4"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzk3MzExOnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoxNjowN1rOHOmudg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoxNjowN1rOHOmudg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NjU5OA==", "bodyText": "It may be more clear to change to: \"the converted PATCH request\"", "url": "https://github.com/fcrepo/fcrepo/pull/1746#discussion_r485076598", "createdAt": "2020-09-08T17:16:07Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "diffHunk": "@@ -161,6 +164,25 @@ public RdfStream bodyToInternalStream(final String extResourceId, final InputStr\n         return fromModel(model.getResource(idTranslator.toInternalId(extResourceId)).asNode(), model);\n     }\n \n+    /**\n+     * Takes a PATCH request body and translates any subjects and objects that are in the domain of the repository\n+     * to use internal IDs.\n+     * @param extResourceId the internal ID of the current resource.\n+     * @param requestBody the request body.\n+     * @param idTranslator an ID converter for the current context.\n+     * @return the converted string.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a09d128452c09da204b5640466290c9f39d07f4"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzk4MjI4OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/SparqlTranslateVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoxODo0NlrOHOmz_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoxODo0NlrOHOmz_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3ODAxNA==", "bodyText": "minor typo: \"updaterequest\"", "url": "https://github.com/fcrepo/fcrepo/pull/1746#discussion_r485078014", "createdAt": "2020-09-08T17:18:46Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/SparqlTranslateVisitor.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.http.api.services;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.jena.graph.Node;\n+import org.apache.jena.graph.NodeFactory;\n+import org.apache.jena.graph.Triple;\n+import org.apache.jena.sparql.core.BasicPattern;\n+import org.apache.jena.sparql.core.Quad;\n+import org.apache.jena.sparql.modify.request.QuadAcc;\n+import org.apache.jena.sparql.modify.request.QuadDataAcc;\n+import org.apache.jena.sparql.modify.request.UpdateData;\n+import org.apache.jena.sparql.modify.request.UpdateDataDelete;\n+import org.apache.jena.sparql.modify.request.UpdateDataInsert;\n+import org.apache.jena.sparql.modify.request.UpdateDeleteWhere;\n+import org.apache.jena.sparql.modify.request.UpdateModify;\n+import org.apache.jena.sparql.modify.request.UpdateVisitorBase;\n+import org.apache.jena.sparql.syntax.Element;\n+import org.apache.jena.sparql.syntax.ElementGroup;\n+import org.apache.jena.sparql.syntax.ElementPathBlock;\n+import org.apache.jena.update.Update;\n+import org.apache.jena.update.UpdateFactory;\n+import org.apache.jena.update.UpdateRequest;\n+import org.fcrepo.http.commons.api.rdf.HttpIdentifierConverter;\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.slf4j.Logger;\n+\n+/**\n+ * A special UpdateVisitor to translate Fedora URIs to internal FedoraIDs.\n+ * @author whikloj\n+ */\n+public class SparqlTranslateVisitor extends UpdateVisitorBase {\n+\n+    private static final Logger LOGGER = getLogger(SparqlTranslateVisitor.class);\n+\n+    private List<Update> newUpdates = new ArrayList<>();\n+\n+    private HttpIdentifierConverter idTranslator;\n+\n+    public SparqlTranslateVisitor(final HttpIdentifierConverter identifierConverter) {\n+        idTranslator = identifierConverter;\n+    }\n+\n+    @Override\n+    public void visit(final UpdateDataInsert update) {\n+        translateUpdate(update);\n+    }\n+\n+    @Override\n+    public void visit(final UpdateDataDelete update) {\n+        translateUpdate(update);\n+    }\n+\n+    @Override\n+    public void visit(final UpdateDeleteWhere update) {\n+        translateUpdate(update);\n+    }\n+\n+    @Override\n+    public void visit(final UpdateModify update) {\n+        translateUpdate(update);\n+    }\n+\n+    /**\n+     * Get the new UpdateRequest based on the parsed Updates.\n+     * @return the new updaterequest object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a09d128452c09da204b5640466290c9f39d07f4"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDAzNjE1OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzozNDowMVrOHOnVmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzozNDowMVrOHOnVmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4NjYxOQ==", "bodyText": "This seems to be weakening the test. Can we check for some part of the string that should be expected?", "url": "https://github.com/fcrepo/fcrepo/pull/1746#discussion_r485086619", "createdAt": "2020-09-08T17:34:01Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java", "diffHunk": "@@ -1037,12 +1037,12 @@ public void testPatchBinaryDescription() throws Exception {\n \n         when(resourceFactory.getResource(mockTransaction, binaryDescId))\n                 .thenReturn(mockNonRdfSourceDescription);\n-        testObj.updateSparql(toInputStream(\"xyz\", UTF_8));\n+        testObj.updateSparql(toInputStream(\"INSERT DATA { <> <http://some/predicate> \\\"xyz\\\" }\", UTF_8));\n         verify(updatePropertiesService).updateProperties(\n                 eq(mockTransaction.getId()),\n                 anyString(),\n                 eq(binaryDescId),\n-                eq(\"xyz\")\n+                anyString()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a09d128452c09da204b5640466290c9f39d07f4"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1901, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}