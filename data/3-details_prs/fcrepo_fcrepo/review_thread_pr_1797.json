{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4ODg1MjQ3", "number": 1797, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDo1MjoyMFrOE3vOeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDo1NDowNFrOE3vROg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODgwODg5OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDo1MjoyMFrOHxQfIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDo1MjoyMFrOHxQfIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQxMjM4NA==", "bodyText": "Is there a reason that getLinkHeaders needs to be called a second time?", "url": "https://github.com/fcrepo/fcrepo/pull/1797#discussion_r521412384", "createdAt": "2020-11-11T14:52:20Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImpl.java", "diffHunk": "@@ -236,9 +237,14 @@ private void checkParent(final String txId, final PersistentStorageSession pSess\n      * @return a list of LINK headers with rel=\"type\"\n      */\n     private List<String> getTypes(final List<String> headers) {\n-        return getLinkHeaders(headers) == null ? emptyList() : getLinkHeaders(headers).stream()\n-                .filter(p -> p.getRel().equalsIgnoreCase(\"type\")).map(Link::getUri)\n-                .map(URI::toString).collect(Collectors.toList());\n+        final List hdrobjs = getLinkHeaders(headers);\n+        try {\n+            return hdrobjs == null ? emptyList() : getLinkHeaders(headers).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb0298d89b1643b685de12c76c44e32037f3287"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODgxNTk0OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDo1NDowNVrOHxQjvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNTo0NToyN1rOHxSx9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQxMzU2Nw==", "bodyText": "Can you change this to new BadRequestException(\"Invalid type found\", e) so that the stack trace is not lost.", "url": "https://github.com/fcrepo/fcrepo/pull/1797#discussion_r521413567", "createdAt": "2020-11-11T14:54:05Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImpl.java", "diffHunk": "@@ -236,9 +237,14 @@ private void checkParent(final String txId, final PersistentStorageSession pSess\n      * @return a list of LINK headers with rel=\"type\"\n      */\n     private List<String> getTypes(final List<String> headers) {\n-        return getLinkHeaders(headers) == null ? emptyList() : getLinkHeaders(headers).stream()\n-                .filter(p -> p.getRel().equalsIgnoreCase(\"type\")).map(Link::getUri)\n-                .map(URI::toString).collect(Collectors.toList());\n+        final List hdrobjs = getLinkHeaders(headers);\n+        try {\n+            return hdrobjs == null ? emptyList() : getLinkHeaders(headers).stream()\n+                    .filter(p -> p.getRel().equalsIgnoreCase(\"type\")).map(Link::getUri)\n+                    .map(URI::toString).collect(Collectors.toList());\n+        } catch ( Exception e ) {\n+            throw new BadRequestException(\"Invalid type found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb0298d89b1643b685de12c76c44e32037f3287"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ0OTk3NQ==", "bodyText": "..or maybe to be even more clear:\nnew BadRequestException(\"Invalid Link header type found\", e)", "url": "https://github.com/fcrepo/fcrepo/pull/1797#discussion_r521449975", "createdAt": "2020-11-11T15:45:27Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImpl.java", "diffHunk": "@@ -236,9 +237,14 @@ private void checkParent(final String txId, final PersistentStorageSession pSess\n      * @return a list of LINK headers with rel=\"type\"\n      */\n     private List<String> getTypes(final List<String> headers) {\n-        return getLinkHeaders(headers) == null ? emptyList() : getLinkHeaders(headers).stream()\n-                .filter(p -> p.getRel().equalsIgnoreCase(\"type\")).map(Link::getUri)\n-                .map(URI::toString).collect(Collectors.toList());\n+        final List hdrobjs = getLinkHeaders(headers);\n+        try {\n+            return hdrobjs == null ? emptyList() : getLinkHeaders(headers).stream()\n+                    .filter(p -> p.getRel().equalsIgnoreCase(\"type\")).map(Link::getUri)\n+                    .map(URI::toString).collect(Collectors.toList());\n+        } catch ( Exception e ) {\n+            throw new BadRequestException(\"Invalid type found\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQxMzU2Nw=="}, "originalCommit": {"oid": "6eb0298d89b1643b685de12c76c44e32037f3287"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1706, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}