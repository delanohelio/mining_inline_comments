{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MDE3OTQ4", "number": 1643, "title": "resource version creation", "bodyText": "JIRA Ticket: FCREPO-3232\nWhat does this Pull Request do?\nAllows resources to be versioned on demand, and removes support for creating versions at specific timestamps.\nHow should this be tested?\nmvn jetty:run\n# Create resource\ncurl -u fedoraAdmin:fedoraAdmin http://localhost:8080/rest/version-test -H'Link: <http://www.w3.org/ns/ldp#BasicContainer>;rel=\"type\"' -H'Link: <http://fedora.info/definitions/v4/repository#ArchivalGroup>;rel=\"type\"' -v -H \"Content-Type: text/turtle\" -X PUT --data \"<> <http://purl.org/dc/elements/1.1/title> 'AG Parent'\"\n\n# Show empty timemap\ncurl -u fedoraAdmin:fedoraAdmin -v -H \"Accept: text/turtle\" http://localhost:8080/rest/version-test/fcr:versions\n\n# Create version\ncurl -u fedoraAdmin:fedoraAdmin -X POST -v http://localhost:8080/rest/version-test/fcr:versions\n\n# Show timemap with memento\ncurl -u fedoraAdmin:fedoraAdmin -v -H \"Accept: text/turtle\" http://localhost:8080/rest/version-test/fcr:versions\n\nRunning the above produces the following output in F6:\n<info:fedora/version-test/fcr:versions>\n        memento:original     <info:fedora/version-test> ;\n        fedora:created       \"2020-03-06T20:23:45.409097Z\" ;\n        fedora:lastModified  \"2020-03-06T20:23:45.409097Z\" ;\n        rdf:type             fedora:TimeMap ;\n        rdf:type             memento:TimeMap .\n\n##########\n\nhttp://localhost:8080/rest/version-test/fcr:versions/20200306203708\n\n##########\n\n<info:fedora/version-test/fcr:versions>\n        ldp:contains         <info:fedora/version-test/fcr:versions/20200306203708> ;\n        memento:original     <info:fedora/version-test> ;\n        fedora:created       \"2020-03-06T20:36:58.579161Z\" ;\n        fedora:lastModified  \"2020-03-06T20:36:58.579161Z\" ;\n        rdf:type             fedora:TimeMap ;\n        rdf:type             memento:TimeMap .\n\nAnd the following output in F5:\n<http://localhost:8080/rest/version-test/fcr:versions>\n        rdf:type               fedora:TimeMap ;\n        rdf:type               fedora:Resource ;\n        rdf:type               memento:TimeMap ;\n        fedora:lastModifiedBy  \"bypassAdmin\" ;\n        fedora:createdBy       \"bypassAdmin\" ;\n        fedora:created         \"2020-03-06T20:41:16.101Z\"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;\n        fedora:lastModified    \"2020-03-06T20:41:16.101Z\"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;\n        memento:original       <http://localhost:8080/rest/version-test> ;\n        rdf:type               ldp:RDFSource .\n\n##########\n\nhttp://localhost:8080/rest/version-test/fcr:versions/20200306204157\n\n##########\n\n<http://localhost:8080/rest/version-test/fcr:versions>\n        rdf:type               fedora:TimeMap ;\n        rdf:type               fedora:Resource ;\n        rdf:type               memento:TimeMap ;\n        fedora:lastModifiedBy  \"bypassAdmin\" ;\n        fedora:createdBy       \"bypassAdmin\" ;\n        fedora:created         \"2020-03-06T20:41:16.101Z\"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;\n        fedora:lastModified    \"2020-03-06T20:41:57.176Z\"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;\n        memento:original       <http://localhost:8080/rest/version-test> ;\n        rdf:type               ldp:RDFSource ;\n        ldp:contains           <http://localhost:8080/rest/version-test/fcr:versions/20200306204157> .\n\nAdditional Notes:\n\nYou can no longer create mementos at a timestamp\nYou cannot create a version of a resource nested in an AG\nYou cannot create a version within a long-running transaction\nA version is not created if there are no changes to the resource since the most recent version\n\nInterested parties\n@awoods", "createdAt": "2020-03-06T20:57:16Z", "url": "https://github.com/fcrepo/fcrepo/pull/1643", "merged": true, "mergeCommit": {"oid": "f02d2e637e6364db133bddbe759470e7a7c7d4d1"}, "closed": true, "closedAt": "2020-03-09T17:19:00Z", "author": {"login": "pwinckles"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcLGZJmgH2gAyMzg1MDE3OTQ4OjM4YzY1ZTYzNDE4MWYwYzZkZGU4OTIzOTkwY2U3ODk4Y2JiODMyODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcL-13eAH2gAyMzg1MDE3OTQ4Ojc1ZDQ3NmNiY2ZmOGEyNzVjZWFmOWU1ZDRmMDkzNjU4MzdiMjY4OTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281", "author": {"user": {"login": "pwinckles", "name": "Peter Winckles"}}, "url": "https://github.com/fcrepo/fcrepo/commit/38c65e634181f0c6dde8923990ce7898cbb83281", "committedDate": "2020-03-06T20:46:09Z", "message": "added functionality for creating resource versions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODM4NzMz", "url": "https://github.com/fcrepo/fcrepo/pull/1643#pullrequestreview-370838733", "createdAt": "2020-03-08T15:33:03Z", "commit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxNTozMzowNFrOFzV3_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMTowMDo1MVrOFzYssg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM4MDA5NA==", "bodyText": "It is probably ok to remove this commented-out line... since creating a version at a given time is no longer supported.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389380094", "createdAt": "2020-03-08T15:33:04Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -177,97 +177,99 @@ public void testDeleteTimeMapNotAllowed() throws Exception {\n                      getStatus(new HttpDelete(serverAddress + id + \"/\" + FCR_VERSIONS)));\n     }\n \n-    @Ignore //TODO Fix this test\n     @Test\n     public void testGetTimeMapResponse() throws Exception {\n         createVersionedContainer(id);\n \n-        createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);\n-        verifyTimemapResponse(subjectUri, id, MEMENTO_DATETIME);\n+        createContainerMementoWithBody(subjectUri);\n+//        createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDAwMA==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420000", "createdAt": "2020-03-08T23:52:01Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -402,130 +404,37 @@ public void testCreateVersionWithSlugHeader() throws Exception {\n         createVersionedContainer(id);\n \n         // Bad request with Slug header to create memento\n-        final String mementoDateTime = \"Tue, 3 Jun 2008 11:05:30 GMT\";\n-        final String body = createContainerMementoBodyContent(subjectUri, N3);\n         final HttpPost post = postObjMethod(id + \"/\" + FCR_VERSIONS);\n-\n         post.addHeader(\"Slug\", \"version_label\");\n-        post.addHeader(MEMENTO_DATETIME_HEADER, mementoDateTime);\n-        post.addHeader(CONTENT_TYPE, N3);\n-        post.setEntity(new StringEntity(body));\n \n         assertEquals(\"Created memento with Slug!\",\n                 BAD_REQUEST.getStatusCode(), getStatus(post));\n     }\n \n-    @Ignore //TODO Fix this test\n     @Test\n-    public void testCreateVersionWithMementoDatetimeFormat() throws Exception {\n+    public void testCreateVersionWithMementoDateTimeHeader() throws Exception {\n         createVersionedContainer(id);\n \n-        // Create memento with RFC-1123 date-time format\n+        // Bad request with Memento-Datetime header to create memento\n         final String mementoDateTime = \"Tue, 3 Jun 2008 11:05:30 GMT\";\n         final String body = createContainerMementoBodyContent(subjectUri, N3);\n-\n         final HttpPost post = postObjMethod(id + \"/\" + FCR_VERSIONS);\n \n         post.addHeader(MEMENTO_DATETIME_HEADER, mementoDateTime);\n         post.addHeader(CONTENT_TYPE, N3);\n         post.setEntity(new StringEntity(body));\n \n-        assertEquals(\"Unable to create memento with RFC-1123 date-time format!\",\n-                CREATED.getStatusCode(), getStatus(post));\n-\n-        // Create memento with RFC-1123 date-time format in wrong value\n-        final String dateTime1 = \"Tue, 13 Jun 2008 11:05:35 ANYTIMEZONE\";\n-        final HttpPost post1 = postObjMethod(id + \"/\" + FCR_VERSIONS);\n-\n-        post1.addHeader(CONTENT_TYPE, N3);\n-        post1.setEntity(new StringEntity(body));\n-        post1.addHeader(MEMENTO_DATETIME_HEADER, dateTime1);\n-\n-        assertEquals(BAD_REQUEST.getStatusCode(), getStatus(post1));\n-\n-        // Create memento in date-time format other than RFC-1123\n-        final String dateTime2 = \"2000-01-01T01:01:01.11Z\";\n-        final HttpPost post2 = postObjMethod(id + \"/\" + FCR_VERSIONS);\n-\n-        post2.addHeader(CONTENT_TYPE, N3);\n-        post2.setEntity(new StringEntity(body));\n-        post2.addHeader(MEMENTO_DATETIME_HEADER, dateTime2);\n-\n-        assertEquals(BAD_REQUEST.getStatusCode(), getStatus(post2));\n-    }\n-\n-    @Ignore //TODO Fix this test\n-    @Test\n-    public void testCreateVersionWithDatetime() throws Exception {\n-        createVersionedContainer(id);\n-\n-        final HttpPost createVersionMethod = postObjMethod(id + \"/\" + FCR_VERSIONS);\n-        createVersionMethod.addHeader(CONTENT_TYPE, N3);\n-        createVersionMethod.addHeader(MEMENTO_DATETIME_HEADER, MEMENTO_DATETIME);\n-\n-        // Attempt to create memento with no body\n-        try (final CloseableHttpResponse response = execute(createVersionMethod)) {\n-            assertEquals(\"Didn't get a BAD_REQUEST response!\", BAD_REQUEST.getStatusCode(), getStatus(response));\n-\n-            // Request must fail with constrained exception due to empty body\n-            assertConstrainedByPresent(response);\n-        }\n-    }\n-\n-    @Ignore //TODO Fix this test\n-    @Test\n-    public void testCreateContainerWithoutServerManagedTriples() throws Exception {\n-        createVersionedContainer(id);\n-\n-        final HttpPost createMethod = postObjMethod(id + \"/\" + FCR_VERSIONS);\n-        createMethod.addHeader(CONTENT_TYPE, N3);\n-        createMethod.setEntity(new StringEntity(\"<\" + subjectUri + \"> <info:test#label> \\\"part\\\"\"));\n-        createMethod.addHeader(MEMENTO_DATETIME_HEADER, MEMENTO_DATETIME);\n-\n-        // Attempt to create memento with partial record\n-        try (final CloseableHttpResponse response = execute(createMethod)) {\n-            assertEquals(\"Didn't get a BAD_REQUEST response!\", BAD_REQUEST.getStatusCode(), getStatus(response));\n-\n-            // Request must fail with constrained exception due to empty body\n-            assertConstrainedByPresent(response);\n-        }\n-    }\n-\n-    /**\n-     * POST to create LDPCv without memento-datetime must ignore body\n-     *\n-     * @throws Exception in case of error with test\n-     */\n-    @Ignore //TODO Fix this test\n-    @Test\n-    public void testCreateVersionWithBody() throws Exception {\n-        createVersionedContainer(id);\n-\n-        final String mementoUri = createContainerMementoWithBody(subjectUri, null);\n-        assertMementoUri(mementoUri, subjectUri);\n-\n-        final HttpGet httpGet = new HttpGet(mementoUri);\n-        try (final CloseableDataset dataset = getDataset(httpGet)) {\n-            final DatasetGraph results = dataset.asDatasetGraph();\n-\n-            final Node mementoSubject = createURI(subjectUri);\n-\n-            assertTrue(\"Memento created without datetime must retain original state\",\n-                    results.contains(ANY, mementoSubject, TEST_PROPERTY_NODE, createLiteral(\"foo\")));\n-            assertFalse(\"Memento created without datetime must ignore updates\",\n-                    results.contains(ANY, mementoSubject, TEST_PROPERTY_NODE, createLiteral(\"bar\")));\n-\n-            // memento should be the same as original, in this case\n-            assertMementoEqualsOriginal(mementoUri);\n-        }\n+        assertEquals(\"Created memento with Memento-Datetime!\",\n+                BAD_REQUEST.getStatusCode(), getStatus(post));\n     }\n \n-    @Ignore //TODO Fix this test\n+    @Ignore(\"get memento not implemented\")\n     @Test\n     public void testCreateVersionWithDatetimeAndBody() throws Exception {\n         createVersionedContainer(id);\n \n-        final String mementoUri = createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);\n+        final String mementoUri = createContainerMementoWithBody(subjectUri);\n+//        final String mementoUri = createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 374}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDA0Ng==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420046", "createdAt": "2020-03-08T23:52:46Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -555,70 +464,22 @@ public void testCreateVersionWithDatetimeAndBody() throws Exception {\n         }\n     }\n \n-    @Ignore //TODO Fix this test\n-    @Test\n-    public void testCreateVersionDuplicateMementoDatetime() throws Exception {\n-        createVersionedContainer(id);\n-\n-        // Create first memento\n-        final String mementoUri = createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);\n-\n-        // Attempt to create second memento with same datetime, which should fail\n-        final HttpPost createVersionMethod = postObjMethod(id + \"/\" + FCR_VERSIONS);\n-        createVersionMethod.addHeader(CONTENT_TYPE, N3);\n-        final String body = \"<\" + subjectUri + \"> <info:test#label> \\\"far\\\"\";\n-        createVersionMethod.setEntity(new StringEntity(body));\n-        createVersionMethod.addHeader(MEMENTO_DATETIME_HEADER, MEMENTO_DATETIME);\n-\n-        try (final CloseableHttpResponse response = execute(createVersionMethod)) {\n-            assertEquals(\"Duplicate memento datetime should return 409 status\",\n-                    CONFLICT.getStatusCode(), getStatus(response));\n-        }\n-\n-        final Node mementoSubject = createURI(subjectUri);\n-        // Verify first memento content persists\n-        try (final CloseableDataset dataset = getDataset(new HttpGet(mementoUri))) {\n-            final DatasetGraph results = dataset.asDatasetGraph();\n-\n-            assertTrue(\"Memento must have first updated property\",\n-                    results.contains(ANY, mementoSubject, TEST_PROPERTY_NODE, createLiteral(\"bar\")));\n-            assertFalse(\"Memento must not have second updated property\",\n-                    results.contains(ANY, mementoSubject, TEST_PROPERTY_NODE, createLiteral(\"far\")));\n-        }\n-    }\n-\n-    @Ignore //TODO Fix this test\n-    @Test\n-    public void testCreateVersionWithDatetimeAndEmptyBody() throws Exception {\n-        createVersionedContainer(id);\n-\n-        final HttpPost createVersionMethod = new HttpPost(subjectUri + \"/\" + FCR_VERSIONS);\n-        createVersionMethod.setEntity(new StringEntity(\"\"));\n-        createVersionMethod.addHeader(MEMENTO_DATETIME_HEADER, MEMENTO_DATETIME);\n-\n-        // Create new memento of resource with updated body\n-        try (final CloseableHttpResponse response = execute(createVersionMethod)) {\n-            assertEquals(\"Didn't get a BAD_REQUEST response!\", BAD_REQUEST.getStatusCode(), getStatus(response));\n-            final String responseMsg = IOUtils.toString(response.getEntity().getContent(), \"UTF-8\");\n-            assertTrue(\"Expected error message indicating empty body provided, received: \" + responseMsg,\n-                    responseMsg.contains(\"Cannot create historic memento from an empty body\"));\n-        }\n-    }\n-\n     @Ignore //TODO Fix this test\n     @Test\n     public void testDeleteAndPostContainerMemento() throws Exception {\n         createVersionedContainer(id);\n \n-        final String mementoUri = createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);\n+        final String mementoUri = createContainerMementoWithBody(subjectUri);\n+//        final String mementoUri = createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 439}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDA2Mw==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420063", "createdAt": "2020-03-08T23:52:53Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -555,70 +464,22 @@ public void testCreateVersionWithDatetimeAndBody() throws Exception {\n         }\n     }\n \n-    @Ignore //TODO Fix this test\n-    @Test\n-    public void testCreateVersionDuplicateMementoDatetime() throws Exception {\n-        createVersionedContainer(id);\n-\n-        // Create first memento\n-        final String mementoUri = createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);\n-\n-        // Attempt to create second memento with same datetime, which should fail\n-        final HttpPost createVersionMethod = postObjMethod(id + \"/\" + FCR_VERSIONS);\n-        createVersionMethod.addHeader(CONTENT_TYPE, N3);\n-        final String body = \"<\" + subjectUri + \"> <info:test#label> \\\"far\\\"\";\n-        createVersionMethod.setEntity(new StringEntity(body));\n-        createVersionMethod.addHeader(MEMENTO_DATETIME_HEADER, MEMENTO_DATETIME);\n-\n-        try (final CloseableHttpResponse response = execute(createVersionMethod)) {\n-            assertEquals(\"Duplicate memento datetime should return 409 status\",\n-                    CONFLICT.getStatusCode(), getStatus(response));\n-        }\n-\n-        final Node mementoSubject = createURI(subjectUri);\n-        // Verify first memento content persists\n-        try (final CloseableDataset dataset = getDataset(new HttpGet(mementoUri))) {\n-            final DatasetGraph results = dataset.asDatasetGraph();\n-\n-            assertTrue(\"Memento must have first updated property\",\n-                    results.contains(ANY, mementoSubject, TEST_PROPERTY_NODE, createLiteral(\"bar\")));\n-            assertFalse(\"Memento must not have second updated property\",\n-                    results.contains(ANY, mementoSubject, TEST_PROPERTY_NODE, createLiteral(\"far\")));\n-        }\n-    }\n-\n-    @Ignore //TODO Fix this test\n-    @Test\n-    public void testCreateVersionWithDatetimeAndEmptyBody() throws Exception {\n-        createVersionedContainer(id);\n-\n-        final HttpPost createVersionMethod = new HttpPost(subjectUri + \"/\" + FCR_VERSIONS);\n-        createVersionMethod.setEntity(new StringEntity(\"\"));\n-        createVersionMethod.addHeader(MEMENTO_DATETIME_HEADER, MEMENTO_DATETIME);\n-\n-        // Create new memento of resource with updated body\n-        try (final CloseableHttpResponse response = execute(createVersionMethod)) {\n-            assertEquals(\"Didn't get a BAD_REQUEST response!\", BAD_REQUEST.getStatusCode(), getStatus(response));\n-            final String responseMsg = IOUtils.toString(response.getEntity().getContent(), \"UTF-8\");\n-            assertTrue(\"Expected error message indicating empty body provided, received: \" + responseMsg,\n-                    responseMsg.contains(\"Cannot create historic memento from an empty body\"));\n-        }\n-    }\n-\n     @Ignore //TODO Fix this test\n     @Test\n     public void testDeleteAndPostContainerMemento() throws Exception {\n         createVersionedContainer(id);\n \n-        final String mementoUri = createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);\n+        final String mementoUri = createContainerMementoWithBody(subjectUri);\n+//        final String mementoUri = createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);\n \n         assertEquals(\"Expected delete to succeed\",\n                 NO_CONTENT.getStatusCode(), getStatus(new HttpDelete(mementoUri)));\n \n         assertEquals(\"Deleted memento must be removed\",\n                 NOT_FOUND.getStatusCode(), getStatus(new HttpGet(mementoUri)));\n \n-        final String recreatedUri = createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);\n+        final String recreatedUri = createContainerMementoWithBody(subjectUri);\n+//        final String recreatedUri = createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 449}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDA3MA==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420070", "createdAt": "2020-03-08T23:52:59Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -628,15 +489,17 @@ public void testDeleteAndPostContainerMemento() throws Exception {\n     public void testDeleteAndPostBinaryMemento() throws Exception {\n         createVersionedBinary(id);\n \n-        final String mementoUri = createLDPNRMementoWithExistingBody(MEMENTO_DATETIME);\n+        final String mementoUri = createLDPNRMementoWithExistingBody();\n+//        final String mementoUri = createLDPNRMementoWithExistingBody(MEMENTO_DATETIME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 459}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDA3NA==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420074", "createdAt": "2020-03-08T23:53:06Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -628,15 +489,17 @@ public void testDeleteAndPostContainerMemento() throws Exception {\n     public void testDeleteAndPostBinaryMemento() throws Exception {\n         createVersionedBinary(id);\n \n-        final String mementoUri = createLDPNRMementoWithExistingBody(MEMENTO_DATETIME);\n+        final String mementoUri = createLDPNRMementoWithExistingBody();\n+//        final String mementoUri = createLDPNRMementoWithExistingBody(MEMENTO_DATETIME);\n \n         assertEquals(\"Expected delete to succeed\",\n                 NO_CONTENT.getStatusCode(), getStatus(new HttpDelete(mementoUri)));\n \n         assertEquals(\"Deleted memento must be removed\",\n                 NOT_FOUND.getStatusCode(), getStatus(new HttpGet(mementoUri)));\n \n-        final String recreatedUri = createLDPNRMementoWithExistingBody(MEMENTO_DATETIME);\n+        final String recreatedUri = createLDPNRMementoWithExistingBody();\n+//        final String recreatedUri = createLDPNRMementoWithExistingBody(MEMENTO_DATETIME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 469}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDEwMg==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420102", "createdAt": "2020-03-08T23:53:13Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -648,15 +511,17 @@ public void testDeleteAndPostDescriptionMemento() throws Exception {\n \n         final String descId = id + \"/\" + FCR_METADATA;\n         final String descUri = serverAddress + descId;\n-        final String mementoUri = createMementoWithExistingBody(descId, MEMENTO_DATETIME, false);\n+        final String mementoUri = createMementoWithExistingBody(descId, false);\n+//        final String mementoUri = createMementoWithExistingBody(descId, MEMENTO_DATETIME, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 479}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDEwNg==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420106", "createdAt": "2020-03-08T23:53:18Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -648,15 +511,17 @@ public void testDeleteAndPostDescriptionMemento() throws Exception {\n \n         final String descId = id + \"/\" + FCR_METADATA;\n         final String descUri = serverAddress + descId;\n-        final String mementoUri = createMementoWithExistingBody(descId, MEMENTO_DATETIME, false);\n+        final String mementoUri = createMementoWithExistingBody(descId, false);\n+//        final String mementoUri = createMementoWithExistingBody(descId, MEMENTO_DATETIME, false);\n \n         assertEquals(\"Expected delete to succeed\",\n                 NO_CONTENT.getStatusCode(), getStatus(new HttpDelete(mementoUri)));\n \n         assertEquals(\"Deleted memento must be removed\",\n                 NOT_FOUND.getStatusCode(), getStatus(new HttpGet(mementoUri)));\n \n-        final String recreatedUri = createContainerMementoWithBody(descUri, MEMENTO_DATETIME);\n+        final String recreatedUri = createContainerMementoWithBody(descUri);\n+//        final String recreatedUri = createContainerMementoWithBody(descUri, MEMENTO_DATETIME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 489}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDEyNA==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420124", "createdAt": "2020-03-08T23:53:26Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -670,7 +535,8 @@ public void testMementoContainmentReferences() throws Exception {\n         createObjectAndClose(id + \"/x\");\n \n         // create memento\n-        final String mementoUri = createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);\n+        final String mementoUri = createContainerMementoWithBody(subjectUri);\n+//        final String mementoUri = createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 499}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDE0Mg==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420142", "createdAt": "2020-03-08T23:53:33Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -700,7 +566,8 @@ public void testHeadOnMemento() throws Exception {\n         createVersionedContainer(id);\n         final String mementoDateTime =\n             MEMENTO_RFC_1123_FORMATTER.format(ISO_INSTANT.parse(\"2017-06-10T11:41:00Z\", Instant::from));\n-        final String mementoUri = createLDPRSMementoWithExistingBody(mementoDateTime);\n+        final String mementoUri = createLDPRSMementoWithExistingBody();\n+//        final String mementoUri = createLDPRSMementoWithExistingBody(mementoDateTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 509}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDE0OA==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420148", "createdAt": "2020-03-08T23:53:40Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -723,7 +590,8 @@ public void testGetOnMemento() throws Exception {\n         createVersionedContainer(id);\n         final String mementoDateTime =\n             MEMENTO_RFC_1123_FORMATTER.format(ISO_INSTANT.parse(\"2017-06-10T11:41:00Z\", Instant::from));\n-        final String mementoUri = createLDPRSMementoWithExistingBody(mementoDateTime);\n+        final String mementoUri = createLDPRSMementoWithExistingBody();\n+//        final String mementoUri = createLDPRSMementoWithExistingBody(mementoDateTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 519}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDE1Ng==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420156", "createdAt": "2020-03-08T23:53:47Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -745,7 +613,8 @@ public void testGetOnMementoWithAcceptDatetimePresent() throws Exception {\n         createVersionedContainer(id);\n         final String mementoDateTime =\n             MEMENTO_RFC_1123_FORMATTER.format(ISO_INSTANT.parse(\"2017-06-10T11:41:00Z\", Instant::from));\n-        final String mementoUri = createLDPRSMementoWithExistingBody(mementoDateTime);\n+        final String mementoUri = createLDPRSMementoWithExistingBody();\n+//        final String mementoUri = createLDPRSMementoWithExistingBody(mementoDateTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 529}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDE2OA==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420168", "createdAt": "2020-03-08T23:53:54Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -760,7 +629,8 @@ public void testHeadOnMementoWithAcceptDatetimePresent() throws Exception {\n         createVersionedContainer(id);\n         final String mementoDateTime =\n                 MEMENTO_RFC_1123_FORMATTER.format(ISO_INSTANT.parse(\"2017-06-10T11:41:00Z\", Instant::from));\n-        final String mementoUri = createLDPRSMementoWithExistingBody(mementoDateTime);\n+        final String mementoUri = createLDPRSMementoWithExistingBody();\n+//        final String mementoUri = createLDPRSMementoWithExistingBody(mementoDateTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 539}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDE3Ng==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420176", "createdAt": "2020-03-08T23:54:00Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -776,7 +646,8 @@ public void testOptionsOnMemento() throws Exception {\n         createVersionedContainer(id);\n         final String mementoDateTime =\n             MEMENTO_RFC_1123_FORMATTER.format(ISO_INSTANT.parse(\"2017-06-10T11:41:00Z\", Instant::from));\n-        final String mementoUri = createLDPRSMementoWithExistingBody(mementoDateTime);\n+        final String mementoUri = createLDPRSMementoWithExistingBody();\n+//        final String mementoUri = createLDPRSMementoWithExistingBody(mementoDateTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 549}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDE4Mw==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420183", "createdAt": "2020-03-08T23:54:08Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -809,7 +680,8 @@ public void testMementoExternalReference() throws Exception {\n         executeAndClose(updateObjectGraphMethod);\n \n         // create memento\n-        final String mementoUri = createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);\n+        final String mementoUri = createContainerMementoWithBody(subjectUri);\n+//        final String mementoUri = createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 559}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDIwMQ==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420201", "createdAt": "2020-03-08T23:54:36Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1134,13 +1004,14 @@ public void testCreateVersionOfBinary() throws Exception {\n         }\n     }\n \n-    @Ignore //TODO Fix this test\n+    @Ignore(\"get memento not implemented\")\n     @Test\n     public void testCreateVersionOfBinaryWithDatetimeAndContentType() throws Exception {\n         createVersionedBinary(id);\n \n-        final String mementoUri = createMemento(subjectUri, MEMENTO_DATETIME,\n-                OCTET_STREAM_TYPE, null);\n+        final String mementoUri = createMemento(subjectUri);\n+//        final String mementoUri = createMemento(subjectUri, MEMENTO_DATETIME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 616}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDIwNw==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420207", "createdAt": "2020-03-08T23:54:44Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1153,13 +1024,14 @@ public void testCreateVersionOfBinaryWithDatetimeAndContentType() throws Excepti\n         }\n     }\n \n-    @Ignore //TODO Fix this test\n+    @Ignore(\"get memento not implemented\")\n     @Test\n     public void testCreateVersionOfBinaryWithBody() throws Exception {\n         createVersionedBinary(id);\n \n-        final String mementoUri = createMemento(subjectUri, null,\n-                OCTET_STREAM_TYPE, BINARY_UPDATED);\n+        final String mementoUri = createMemento(subjectUri);\n+//        final String mementoUri = createMemento(subjectUri, null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 634}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDIxNQ==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420215", "createdAt": "2020-03-08T23:54:51Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1171,13 +1043,14 @@ public void testCreateVersionOfBinaryWithBody() throws Exception {\n         }\n     }\n \n-    @Ignore //TODO Fix this test\n+    @Ignore(\"get memento not implemented\")\n     @Test\n     public void testCreateVersionOfBinaryWithDatetimeAndBody() throws Exception {\n         createVersionedBinary(id);\n \n-        final String mementoUri = createMemento(subjectUri, MEMENTO_DATETIME,\n-                \"text/plain\", BINARY_UPDATED);\n+        final String mementoUri = createMemento(subjectUri);\n+//        final String mementoUri = createMemento(subjectUri, MEMENTO_DATETIME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 652}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDIyMA==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420220", "createdAt": "2020-03-08T23:55:01Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1236,39 +1109,15 @@ public void testCreateVersionOfBinaryDescription() throws Exception {\n         assertEquals(NOT_FOUND.getStatusCode(), getStatus(new HttpGet(hypotheticalBinaryUri)));\n     }\n \n-    /*\n-     * Attempt to create binary description with container triples\n-     */\n-    @Ignore //TODO Fix this test\n-    @Test\n-    public void testCreateVersionOfBinaryDescriptionInvalidTriples() throws Exception {\n-        final String containerId = getRandomUniqueId();\n-        final String containerSubjectUri = serverAddress + containerId;\n-        createObjectAndClose(containerId);\n-\n-        createVersionedBinary(id);\n-\n-        final String descriptionUri = subjectUri + \"/fcr:metadata\";\n-\n-        final String containerBody = createContainerMementoBodyContent(containerSubjectUri, \"text/n3\");\n-        final HttpPost createMethod = postObjMethod(descriptionUri);\n-        createMethod.addHeader(CONTENT_TYPE, \"text/n3\");\n-        createMethod.setEntity(new StringEntity(containerBody));\n-\n-        // Attempt to create memento with partial record\n-        try (final CloseableHttpResponse response = execute(createMethod)) {\n-            assertEquals(\"Didn't get a BAD_REQUEST response!\", BAD_REQUEST.getStatusCode(), getStatus(response));\n-        }\n-    }\n-\n     @Ignore //TODO Fix this test\n     @Test\n     public void testCreateVersionBinaryDescriptionWithBodyAndDatetime() throws Exception {\n         createVersionedBinary(id);\n \n         final String descriptionUri = subjectUri + \"/fcr:metadata\";\n \n-        final String mementoUri = createContainerMementoWithBody(descriptionUri, MEMENTO_DATETIME);\n+        final String mementoUri = createContainerMementoWithBody(descriptionUri);\n+//        final String mementoUri = createContainerMementoWithBody(descriptionUri, MEMENTO_DATETIME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 713}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDIyOQ==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420229", "createdAt": "2020-03-08T23:55:07Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1292,11 +1141,13 @@ public void testCreateVersionHistoricBinaryAndDescription() throws Exception {\n \n         final String descriptionUri = subjectUri + \"/fcr:metadata\";\n \n-        final String binaryMementoUri = createMemento(subjectUri, MEMENTO_DATETIME,\n-                null, \"content\");\n+        final String binaryMementoUri = createMemento(subjectUri);\n+//        final String binaryMementoUri = createMemento(subjectUri, MEMENTO_DATETIME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 724}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDIzNg==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420236", "createdAt": "2020-03-08T23:55:13Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1292,11 +1141,13 @@ public void testCreateVersionHistoricBinaryAndDescription() throws Exception {\n \n         final String descriptionUri = subjectUri + \"/fcr:metadata\";\n \n-        final String binaryMementoUri = createMemento(subjectUri, MEMENTO_DATETIME,\n-                null, \"content\");\n+        final String binaryMementoUri = createMemento(subjectUri);\n+//        final String binaryMementoUri = createMemento(subjectUri, MEMENTO_DATETIME,\n+//                null, \"content\");\n         assertMementoUri(binaryMementoUri, subjectUri);\n \n-        final String mementoUri = createContainerMementoWithBody(descriptionUri, MEMENTO_DATETIME);\n+        final String mementoUri = createContainerMementoWithBody(descriptionUri);\n+//        final String mementoUri = createContainerMementoWithBody(descriptionUri, MEMENTO_DATETIME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 730}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDI1MA==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420250", "createdAt": "2020-03-08T23:55:21Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1388,7 +1221,8 @@ public void testTimeMapResponseContentTypes() throws Exception {\n     @Test\n     public void testGetVersionResponseContentTypes() throws Exception {\n         createVersionedContainer(id);\n-        final String versionUri = createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);\n+        final String versionUri = createContainerMementoWithBody(subjectUri);\n+//        final String versionUri = createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 774}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDI1NA==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420254", "createdAt": "2020-03-08T23:55:28Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1406,10 +1240,12 @@ public void testDatetimeNegotiationLDPRv() throws Exception {\n         createVersionedContainer(id);\n         final String memento1 =\n             MEMENTO_RFC_1123_FORMATTER.format(ISO_INSTANT.parse(\"2017-06-10T11:41:00Z\", Instant::from));\n-        final String version1Uri = createLDPRSMementoWithExistingBody(memento1);\n+        final String version1Uri = createLDPRSMementoWithExistingBody();\n+//        final String version1Uri = createLDPRSMementoWithExistingBody(memento1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 784}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDI2MA==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420260", "createdAt": "2020-03-08T23:55:34Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1406,10 +1240,12 @@ public void testDatetimeNegotiationLDPRv() throws Exception {\n         createVersionedContainer(id);\n         final String memento1 =\n             MEMENTO_RFC_1123_FORMATTER.format(ISO_INSTANT.parse(\"2017-06-10T11:41:00Z\", Instant::from));\n-        final String version1Uri = createLDPRSMementoWithExistingBody(memento1);\n+        final String version1Uri = createLDPRSMementoWithExistingBody();\n+//        final String version1Uri = createLDPRSMementoWithExistingBody(memento1);\n         final String memento2 =\n             MEMENTO_RFC_1123_FORMATTER.format(ISO_INSTANT.parse(\"2016-06-17T11:41:00Z\", Instant::from));\n-        final String version2Uri = createLDPRSMementoWithExistingBody(memento2);\n+        final String version2Uri = createLDPRSMementoWithExistingBody();\n+//        final String version2Uri = createLDPRSMementoWithExistingBody(memento2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 789}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDI2Nw==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420267", "createdAt": "2020-03-08T23:55:40Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1459,7 +1295,8 @@ public void testDatetimeNegotiationExactMatch() throws Exception {\n         final String originalUri = createVersionedContainer(id);\n \n         // Create a current memento\n-        final String version1Uri = createMemento(originalUri, null, \"text/turtle\", null);\n+        final String version1Uri = createMemento(originalUri);\n+//        final String version1Uri = createMemento(originalUri, null, \"text/turtle\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 799}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDI3Ng==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420276", "createdAt": "2020-03-08T23:55:45Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1470,7 +1307,8 @@ public void testDatetimeNegotiationExactMatch() throws Exception {\n         final Instant version2Instant =\n             Instant.from(MEMENTO_RFC_1123_FORMATTER.parse(version1Datetime)).minus(5, ChronoUnit.SECONDS);\n         final String version2Datetime = MEMENTO_RFC_1123_FORMATTER.format(version2Instant);\n-        final String version2Uri = createLDPRSMementoWithExistingBody(version2Datetime);\n+        final String version2Uri = createLDPRSMementoWithExistingBody();\n+//        final String version2Uri = createLDPRSMementoWithExistingBody(version2Datetime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 809}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDMxOA==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420318", "createdAt": "2020-03-08T23:55:52Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1530,7 +1368,8 @@ public void testGetWithDateTimeNegotiation() throws Exception {\n             NOT_ACCEPTABLE.getStatusCode(), getStatus(customClient.execute(getMethod1)));\n \n         // Create memento\n-        final String mementoUri = createLDPRSMementoWithExistingBody(mementoDateTime);\n+        final String mementoUri = createLDPRSMementoWithExistingBody();\n+//        final String mementoUri = createLDPRSMementoWithExistingBody(mementoDateTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 819}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDMzMA==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420330", "createdAt": "2020-03-08T23:56:00Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1577,7 +1416,8 @@ public void testOptionsMemento() throws Exception {\n     public void testPatchOnMemento() throws Exception {\n         createVersionedContainer(id);\n \n-        final String mementoUri = createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);\n+        final String mementoUri = createContainerMementoWithBody(subjectUri);\n+//        final String mementoUri = createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 847}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDMzNw==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420337", "createdAt": "2020-03-08T23:56:06Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1606,7 +1446,8 @@ public void testPatchOnInvalidMementoPath() throws Exception {\n     public void testPostOnMemento() throws Exception {\n         createVersionedContainer(id);\n \n-        final String mementoUri = createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);\n+        final String mementoUri = createContainerMementoWithBody(subjectUri);\n+//        final String mementoUri = createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 857}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDM0NA==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420344", "createdAt": "2020-03-08T23:56:11Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1635,7 +1476,8 @@ public void testPostOnInvalidMementoPath() throws Exception {\n     public void testPutOnMemento() throws Exception {\n         createVersionedContainer(id);\n \n-        final String mementoUri = createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);\n+        final String mementoUri = createContainerMementoWithBody(subjectUri);\n+//        final String mementoUri = createContainerMementoWithBody(subjectUri, MEMENTO_DATETIME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 867}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDM0OQ==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420349", "createdAt": "2020-03-08T23:56:18Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1666,7 +1508,8 @@ public void testGetLDPRSMementoHeaders() throws Exception {\n \n         final String memento1 =\n             MEMENTO_RFC_1123_FORMATTER.format(ISO_INSTANT.parse(\"2001-06-10T16:41:00Z\", Instant::from));\n-        final String version1Uri = createLDPRSMementoWithExistingBody(memento1);\n+        final String version1Uri = createLDPRSMementoWithExistingBody();\n+//        final String version1Uri = createLDPRSMementoWithExistingBody(memento1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 877}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDM1NA==", "bodyText": "Remove commented-out code.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420354", "createdAt": "2020-03-08T23:56:24Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1690,7 +1533,8 @@ public void testGetLDPNRMementoHeaders() throws Exception {\n \n         final String memento1 =\n             MEMENTO_RFC_1123_FORMATTER.format(ISO_INSTANT.parse(\"2001-06-10T16:41:00Z\", Instant::from));\n-        final String version1Uri = createLDPNRMementoWithExistingBody(memento1);\n+        final String version1Uri = createLDPNRMementoWithExistingBody();\n+//        final String version1Uri = createLDPNRMementoWithExistingBody(memento1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 887}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDYyNw==", "bodyText": "This still seems like a valid test, no?", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389420627", "createdAt": "2020-03-08T23:59:29Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1236,39 +1109,15 @@ public void testCreateVersionOfBinaryDescription() throws Exception {\n         assertEquals(NOT_FOUND.getStatusCode(), getStatus(new HttpGet(hypotheticalBinaryUri)));\n     }\n \n-    /*\n-     * Attempt to create binary description with container triples\n-     */\n-    @Ignore //TODO Fix this test\n-    @Test\n-    public void testCreateVersionOfBinaryDescriptionInvalidTriples() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 684}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyNDg4Ng==", "bodyText": "session.toString() only provides the session Object reference ID... is this the desired behavior? It may be valuable to add an OCFLPersistentStorageSession.toString() method.\n    public String toString() {\n        return ToStringBuilder.reflectionToString(this);\n    }\n\n..or something with a little more more terse/targeted output.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389424886", "createdAt": "2020-03-09T00:48:09Z", "author": {"login": "awoods"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/CreateVersionPersister.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.fcrepo.persistence.ocfl.impl;\n+\n+import org.fcrepo.kernel.api.operations.CreateVersionResourceOperation;\n+import org.fcrepo.kernel.api.operations.ResourceOperation;\n+import org.fcrepo.kernel.api.operations.ResourceOperationType;\n+import org.fcrepo.persistence.api.CommitOption;\n+import org.fcrepo.persistence.api.exceptions.PersistentItemConflictException;\n+import org.fcrepo.persistence.api.exceptions.PersistentStorageException;\n+import org.fcrepo.persistence.ocfl.api.FedoraToOCFLObjectIndex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Persister for creating a new OCFL version of a resource. The new version is not created until the session\n+ * is committed.\n+ */\n+public class CreateVersionPersister extends AbstractPersister {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreateVersionPersister.class);\n+\n+    protected CreateVersionPersister(final FedoraToOCFLObjectIndex index) {\n+        super(CreateVersionResourceOperation.class, ResourceOperationType.UPDATE, index);\n+    }\n+\n+    @Override\n+    public void persist(final OCFLPersistentStorageSession session, final ResourceOperation operation)\n+            throws PersistentStorageException {\n+\n+        final var resourceId = operation.getResourceId();\n+        LOG.debug(\"creating new version of <{}> in session <{}>\", resourceId, session);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyNTY3Mg==", "bodyText": "This behavior (as well as other versioning updates from this pull-request) should be reflected in the wiki documentation:\nhttps://jira.lyrasis.org/browse/FCREPO-3242", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389425672", "createdAt": "2020-03-09T00:55:22Z", "author": {"login": "awoods"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/CreateVersionPersister.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.fcrepo.persistence.ocfl.impl;\n+\n+import org.fcrepo.kernel.api.operations.CreateVersionResourceOperation;\n+import org.fcrepo.kernel.api.operations.ResourceOperation;\n+import org.fcrepo.kernel.api.operations.ResourceOperationType;\n+import org.fcrepo.persistence.api.CommitOption;\n+import org.fcrepo.persistence.api.exceptions.PersistentItemConflictException;\n+import org.fcrepo.persistence.api.exceptions.PersistentStorageException;\n+import org.fcrepo.persistence.ocfl.api.FedoraToOCFLObjectIndex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Persister for creating a new OCFL version of a resource. The new version is not created until the session\n+ * is committed.\n+ */\n+public class CreateVersionPersister extends AbstractPersister {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreateVersionPersister.class);\n+\n+    protected CreateVersionPersister(final FedoraToOCFLObjectIndex index) {\n+        super(CreateVersionResourceOperation.class, ResourceOperationType.UPDATE, index);\n+    }\n+\n+    @Override\n+    public void persist(final OCFLPersistentStorageSession session, final ResourceOperation operation)\n+            throws PersistentStorageException {\n+\n+        final var resourceId = operation.getResourceId();\n+        LOG.debug(\"creating new version of <{}> in session <{}>\", resourceId, session);\n+\n+        final var archivalGroupId = findArchivalGroupInAncestry(resourceId, session);\n+\n+        if (archivalGroupId != null && !archivalGroupId.equals(resourceId)) {\n+            throw new PersistentItemConflictException(\n+                    String.format(\"Resource <%s> is contained in Archival Group <%s> and cannot be versioned directly.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyNjM1NA==", "bodyText": "Very minor... but it seems that this import statement should be together with the above edu.wisc imports.", "url": "https://github.com/fcrepo/fcrepo/pull/1643#discussion_r389426354", "createdAt": "2020-03-09T01:00:51Z", "author": {"login": "awoods"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/DefaultOCFLObjectSession.java", "diffHunk": "@@ -47,11 +46,12 @@\n import java.util.function.Consumer;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n+\n+import edu.wisc.library.ocfl.api.model.VersionId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c65e634181f0c6dde8923990ce7898cbb83281"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a640b5d9e2dc55caffe3497c14df97b1dd37fb72", "author": {"user": {"login": "pwinckles", "name": "Peter Winckles"}}, "url": "https://github.com/fcrepo/fcrepo/commit/a640b5d9e2dc55caffe3497c14df97b1dd37fb72", "committedDate": "2020-03-09T12:40:53Z", "message": "update based on pr comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75d476cbcff8a275ceaf9e5d4f09365837b26890", "author": {"user": {"login": "pwinckles", "name": "Peter Winckles"}}, "url": "https://github.com/fcrepo/fcrepo/commit/75d476cbcff8a275ceaf9e5d4f09365837b26890", "committedDate": "2020-03-09T14:32:12Z", "message": "slight improvement to the logic that determines whether or not an object session needs to be committed"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3242, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}