{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDIyMjY0", "number": 1662, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjozNjoxNlrODx2O-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjozODo0M1rODx2RJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTk1Mzg3OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/TransactionManagerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjozNjoxNlrOGFjZcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjozNjoxNlrOGFjZcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3NjAxNw==", "bodyText": "Don't we remove the transaction as soon as it is committed or rolled back?", "url": "https://github.com/fcrepo/fcrepo/pull/1662#discussion_r408476017", "createdAt": "2020-04-14T22:36:16Z", "author": {"login": "whikloj"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/TransactionManagerImpl.java", "diffHunk": "@@ -52,10 +54,32 @@\n     private EventAccumulator eventAccumulator;\n \n     TransactionManagerImpl() {\n-        transactions = new HashMap<>();\n+        transactions = new ConcurrentHashMap<>();\n     }\n \n-    // TODO Add a timer to periodically rollback and cleanup expired transaction?\n+    /**\n+     * Periodically scan for closed transactions for cleanup\n+     */\n+    @Scheduled(fixedDelayString = \"#{systemProperties['fcrepo.session.timeout'] ?: 180000}\")\n+    public void cleanupClosedTransactions() {\n+        final var txIt = transactions.entrySet().iterator();\n+        while (txIt.hasNext()) {\n+            final var txEntry = txIt.next();\n+            final var tx = txEntry.getValue();\n+\n+            // Cleanup if transaction is closed and past its expiration time\n+            if (tx.isCommitted() || tx.isRolledBack()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2de2fff676dc09baa81941a3ef0e133fad21f79"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTk1OTQzOnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/TransactionManagerImplTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjozODo0M1rOGFjc9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo1MDo0NFrOGGwn7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3NjkxOA==", "bodyText": "I see now that we are hanging on to transaction regardless of state until the clean up period. Just wondering if there is any value to having those transactions that have been actively committed or rolled back?", "url": "https://github.com/fcrepo/fcrepo/pull/1662#discussion_r408476918", "createdAt": "2020-04-14T22:38:43Z", "author": {"login": "whikloj"}, "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/TransactionManagerImplTest.java", "diffHunk": "@@ -88,8 +97,108 @@ public void testGetTransactionWithInvalidID() {\n     }\n \n     @Test(expected = TransactionRuntimeException.class)\n-    public void testGetExpiredTransaction() {\n+    public void testGetExpiredTransaction() throws Exception {\n         testTx.expire();\n-        testTxManager.get(testTx.getId());\n+        try {\n+            testTxManager.get(testTx.getId());\n+        } finally {\n+            // Make sure rollback is triggered\n+            verify(psSession).rollback();\n+        }\n+    }\n+\n+    @Test\n+    public void testCleanupClosedTransactions() {\n+        System.setProperty(TransactionImpl.TIMEOUT_SYSTEM_PROPERTY, \"10000\");\n+\n+        final var commitTx = testTxManager.create();\n+        commitTx.commit();\n+        final var continuingTx = testTxManager.create();\n+        final var rollbackTx = testTxManager.create();\n+        rollbackTx.rollback();\n+\n+        // verify that transactions retrievable before cleanup\n+        try {\n+            testTxManager.get(commitTx.getId());\n+            fail(\"Transaction must be committed\");\n+        } catch(final TransactionClosedException e) {\n+            //expected\n+        }\n+        try {\n+            testTxManager.get(rollbackTx.getId());\n+            fail(\"Transaction must be rolled back\");\n+        } catch(final TransactionClosedException e) {\n+            //expected\n+        }\n+\n+        assertNotNull(\"Continuing transaction must be present\",\n+                testTxManager.get(continuingTx.getId()));\n+\n+        testTxManager.cleanupClosedTransactions();\n+\n+        // Verify that the closed transactions are stick around since they haven't expired yet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2de2fff676dc09baa81941a3ef0e133fad21f79"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0MTI5Mg==", "bodyText": "If there are multiple clients using the same transaction it might be helpful to be able to check the status, which we aren't disallowing at the moment. Figured it'd be good to have a consistent window for being able to look up what happened to a transaction", "url": "https://github.com/fcrepo/fcrepo/pull/1662#discussion_r409741292", "createdAt": "2020-04-16T17:50:44Z", "author": {"login": "bbpennel"}, "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/TransactionManagerImplTest.java", "diffHunk": "@@ -88,8 +97,108 @@ public void testGetTransactionWithInvalidID() {\n     }\n \n     @Test(expected = TransactionRuntimeException.class)\n-    public void testGetExpiredTransaction() {\n+    public void testGetExpiredTransaction() throws Exception {\n         testTx.expire();\n-        testTxManager.get(testTx.getId());\n+        try {\n+            testTxManager.get(testTx.getId());\n+        } finally {\n+            // Make sure rollback is triggered\n+            verify(psSession).rollback();\n+        }\n+    }\n+\n+    @Test\n+    public void testCleanupClosedTransactions() {\n+        System.setProperty(TransactionImpl.TIMEOUT_SYSTEM_PROPERTY, \"10000\");\n+\n+        final var commitTx = testTxManager.create();\n+        commitTx.commit();\n+        final var continuingTx = testTxManager.create();\n+        final var rollbackTx = testTxManager.create();\n+        rollbackTx.rollback();\n+\n+        // verify that transactions retrievable before cleanup\n+        try {\n+            testTxManager.get(commitTx.getId());\n+            fail(\"Transaction must be committed\");\n+        } catch(final TransactionClosedException e) {\n+            //expected\n+        }\n+        try {\n+            testTxManager.get(rollbackTx.getId());\n+            fail(\"Transaction must be rolled back\");\n+        } catch(final TransactionClosedException e) {\n+            //expected\n+        }\n+\n+        assertNotNull(\"Continuing transaction must be present\",\n+                testTxManager.get(continuingTx.getId()));\n+\n+        testTxManager.cleanupClosedTransactions();\n+\n+        // Verify that the closed transactions are stick around since they haven't expired yet", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3NjkxOA=="}, "originalCommit": {"oid": "e2de2fff676dc09baa81941a3ef0e133fad21f79"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1795, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}