{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwNTI5MjM0", "number": 1726, "title": "Implements rdf_type parameter and output field in simple search.", "bodyText": "Implements rdf_type parameter and output field in simple search.\n\nJIRA Ticket:  https://jira.lyrasis.org/browse/FCREPO-3378\n\nOther Relevant Links (Mailing list discussion, related pull requests, etc.)\n\nWhat does this Pull Request do?\nWith this PR, users can see the rdf_types of their resources in the search results.  Additionally they can perform wildcard (*) searches using the rdf_type field in conditional clauses.\nHow should this be tested?\n# create a resource\ncurl -u fedoraAdmin:fedoraAdmin http://localhost:8080/rest/test -X PUT\n\n#  see the rdf_type in the search results\ncurl -u fedoraAdmin:fedoraAdmin http://localhost:8080/rest/fcr:search\n\n# use rdf_type as a criterion for your search\ncurl -u fedoraAdmin:fedoraAdmin \"http://localhost:8080/rest/fcr:search?condition=rdf_type%3D*Con*\"\n\nInterested parties\nTag (@ mention) interested parties or, if unsure, @fcrepo4/committers", "createdAt": "2020-07-16T21:25:52Z", "url": "https://github.com/fcrepo/fcrepo/pull/1726", "merged": true, "mergeCommit": {"oid": "210738b8aa5ea2c13bb67e5861b672cc17ecc654"}, "closed": true, "closedAt": "2020-08-24T19:16:46Z", "author": {"login": "dbernstein"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3JVjKAFqTQ1MjY0NTY5Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCHijxAFqTQ3Mzc4MzUyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNjQ1Njk2", "url": "https://github.com/fcrepo/fcrepo/pull/1726#pullrequestreview-452645696", "createdAt": "2020-07-21T16:47:40Z", "commit": {"oid": "16d29d6d5de56e8eaa8799faf0af391b5045d89f"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjo0Nzo0MFrOG1A5XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzowMzoyNlrOG1BgAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0MjM5Ng==", "bodyText": "This method is huge, is it possible to split any of this functionality out into submethods?", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r458242396", "createdAt": "2020-07-21T16:47:40Z", "author": {"login": "pwinckles"}, "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java", "diffHunk": "@@ -209,20 +261,73 @@ public void addUpdateIndex(final ResourceHeaders resourceHeaders) {\n         final var txId = UUID.randomUUID().toString();\n         executeInDbTransaction(txId, status -> {\n             try {\n+                final var rdfTypes = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16d29d6d5de56e8eaa8799faf0af391b5045d89f"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0OTEwNg==", "bodyText": "Table and column names can be constants", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r458249106", "createdAt": "2020-07-21T16:58:10Z", "author": {"login": "pwinckles"}, "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java", "diffHunk": "@@ -209,20 +261,73 @@ public void addUpdateIndex(final ResourceHeaders resourceHeaders) {\n         final var txId = UUID.randomUUID().toString();\n         executeInDbTransaction(txId, status -> {\n             try {\n+                final var rdfTypes = new ArrayList<String>();\n+                rdfTypes.add(resourceHeaders.getInteractionModel());\n+                final var fedoraResource = resourceFactory.getResource(FedoraId.create(fullId)).getDescription();\n+                fedoraResource.getTriples().forEach(triple -> {\n+                    if (triple.getPredicate().getURI().equals(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\")) {\n+                        final var rdfTypeUri = triple.getObject().getURI();\n+                        rdfTypes.add(rdfTypeUri);\n+                    }\n+                });\n+\n+                final var jdbcInsertRdfTypes = new SimpleJdbcInsert(this.jdbcTemplate.getJdbcTemplate());\n+                jdbcInsertRdfTypes.withTableName(\"search_rdf_type\").usingGeneratedKeyColumns(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16d29d6d5de56e8eaa8799faf0af391b5045d89f"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0OTQwMw==", "bodyText": "Is there a reason you're using getTriples() instead of getTypes()?", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r458249403", "createdAt": "2020-07-21T16:58:38Z", "author": {"login": "pwinckles"}, "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java", "diffHunk": "@@ -209,20 +261,73 @@ public void addUpdateIndex(final ResourceHeaders resourceHeaders) {\n         final var txId = UUID.randomUUID().toString();\n         executeInDbTransaction(txId, status -> {\n             try {\n+                final var rdfTypes = new ArrayList<String>();\n+                rdfTypes.add(resourceHeaders.getInteractionModel());\n+                final var fedoraResource = resourceFactory.getResource(FedoraId.create(fullId)).getDescription();\n+                fedoraResource.getTriples().forEach(triple -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16d29d6d5de56e8eaa8799faf0af391b5045d89f"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0OTYzNA==", "bodyText": "Is this string already defined as a constant anywhere else?", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r458249634", "createdAt": "2020-07-21T16:59:03Z", "author": {"login": "pwinckles"}, "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java", "diffHunk": "@@ -209,20 +261,73 @@ public void addUpdateIndex(final ResourceHeaders resourceHeaders) {\n         final var txId = UUID.randomUUID().toString();\n         executeInDbTransaction(txId, status -> {\n             try {\n+                final var rdfTypes = new ArrayList<String>();\n+                rdfTypes.add(resourceHeaders.getInteractionModel());\n+                final var fedoraResource = resourceFactory.getResource(FedoraId.create(fullId)).getDescription();\n+                fedoraResource.getTriples().forEach(triple -> {\n+                    if (triple.getPredicate().getURI().equals(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16d29d6d5de56e8eaa8799faf0af391b5045d89f"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0OTk4OA==", "bodyText": "Could use constants here too.", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r458249988", "createdAt": "2020-07-21T16:59:35Z", "author": {"login": "pwinckles"}, "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java", "diffHunk": "@@ -209,20 +261,73 @@ public void addUpdateIndex(final ResourceHeaders resourceHeaders) {\n         final var txId = UUID.randomUUID().toString();\n         executeInDbTransaction(txId, status -> {\n             try {\n+                final var rdfTypes = new ArrayList<String>();\n+                rdfTypes.add(resourceHeaders.getInteractionModel());\n+                final var fedoraResource = resourceFactory.getResource(FedoraId.create(fullId)).getDescription();\n+                fedoraResource.getTriples().forEach(triple -> {\n+                    if (triple.getPredicate().getURI().equals(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\")) {\n+                        final var rdfTypeUri = triple.getObject().getURI();\n+                        rdfTypes.add(rdfTypeUri);\n+                    }\n+                });\n+\n+                final var jdbcInsertRdfTypes = new SimpleJdbcInsert(this.jdbcTemplate.getJdbcTemplate());\n+                jdbcInsertRdfTypes.withTableName(\"search_rdf_type\").usingGeneratedKeyColumns(\n+                        \"id\");\n+\n+                final var rdfTypeIds = new ArrayList<Long>();\n+                for (var rdfTypeUri : rdfTypes) {\n+                    final var typeParams = new MapSqlParameterSource();\n+                    typeParams.addValue(\"rdf_type_uri\", rdfTypeUri);\n+                    final var results = jdbcTemplate.queryForList(\"select id from search_rdf_type where \" +\n+                                    \"rdf_type_uri = :rdf_type_uri\",\n+                            typeParams);\n+\n+\n+                    if (CollectionUtils.isEmpty(results)) {\n+                        final Number key = jdbcInsertRdfTypes.executeAndReturnKey(typeParams);\n+                        rdfTypeIds.add(key.longValue());\n+                    } else {\n+                        rdfTypeIds.add((long) results.get(0).get(\"id\"));\n+                    }\n+                }\n \n                 final var params = new MapSqlParameterSource();\n                 params.addValue(FEDORA_ID_PARAM, fullId);\n                 params.addValue(MODIFIED_PARAM, new Timestamp(resourceHeaders.getLastModifiedDate().toEpochMilli()));\n                 params.addValue(MIME_TYPE_PARAM, resourceHeaders.getMimeType());\n                 params.addValue(CONTENT_SIZE_PARAM, resourceHeaders.getContentSize());\n-                final String sql;\n-                if (result.size() > 0) {\n-                    //update\n+                final var exists = result.size() > 0;\n+                final Long resourcePrimaryKey;\n+                if (exists) {\n+                    resourcePrimaryKey = (Long) result.get(0).get(\"id\");\n                     jdbcTemplate.update(UPDATE_INDEX_SQL, params);\n+                    //delete rdf_type associations\n+                    final var deleteParams = new MapSqlParameterSource();\n+                    deleteParams.addValue(\"resource_id\", resourcePrimaryKey);\n+                    jdbcTemplate.update(DELETE_RDF_TYPE_ASSOCIATIONS,\n+                            deleteParams);\n                 } else {\n                     params.addValue(CREATED_PARAM, new Timestamp(resourceHeaders.getCreatedDate().toEpochMilli()));\n-                    jdbcTemplate.update(INSERT_INTO_INDEX_SQL, params);\n+                    final var jdbcInsertResource =\n+                            new SimpleJdbcInsert(this.jdbcTemplate.getJdbcTemplate()).usingGeneratedKeyColumns(\n+                                    \"id\");\n+                    resourcePrimaryKey =\n+                            jdbcInsertResource.withTableName(SIMPLE_SEARCH_TABLE).executeAndReturnKey(params)\n+                                    .longValue();\n                 }\n+\n+                //add rdf type associations\n+                final var jdbcInsertRdfTypeAssociations = new SimpleJdbcInsert(this.jdbcTemplate.getJdbcTemplate());\n+                jdbcInsertRdfTypeAssociations.withTableName(\"search_resource_rdf_type\").usingGeneratedKeyColumns(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16d29d6d5de56e8eaa8799faf0af391b5045d89f"}, "originalPosition": 319}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1MjI5MQ==", "bodyText": "Why do these DDLs not have any foreign key relationships?", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r458252291", "createdAt": "2020-07-21T17:03:26Z", "author": {"login": "pwinckles"}, "path": "fcrepo-search-impl/src/main/resources/sql/default-search-index.sql", "diffHunk": "@@ -1,8 +1,23 @@\n -- simple search\n CREATE TABLE IF NOT EXISTS simple_search (\n-    fedora_id  varchar(503) NOT NULL PRIMARY KEY,\n+    id bigint PRIMARY KEY AUTO_INCREMENT,\n+    fedora_id  varchar(503) NOT NULL,\n     created timestamp NOT NULL,\n     modified timestamp NOT NULL,\n     content_size bigint DEFAULT NULL,\n-    mime_type varchar(255) DEFAULT NULL\n-);\n\\ No newline at end of file\n+    mime_type varchar(255) DEFAULT NULL,\n+    UNIQUE KEY fedora_id (fedora_id)\n+);\n+\n+CREATE TABLE IF NOT EXISTS search_resource_rdf_type (\n+    resource_id bigint NOT NULL,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16d29d6d5de56e8eaa8799faf0af391b5045d89f"}, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8aed03f5a1fef0eea23ae602ff21ba1f75b8cc7", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/c8aed03f5a1fef0eea23ae602ff21ba1f75b8cc7", "committedDate": "2020-07-29T19:41:53Z", "message": "Addresses changes requested in PR review."}, "afterCommit": {"oid": "17bed0ccf1a544e67a7de0be031e7993507f5d5b", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/17bed0ccf1a544e67a7de0be031e7993507f5d5b", "committedDate": "2020-07-29T19:51:05Z", "message": "Addresses changes requested in PR review."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17bed0ccf1a544e67a7de0be031e7993507f5d5b", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/17bed0ccf1a544e67a7de0be031e7993507f5d5b", "committedDate": "2020-07-29T19:51:05Z", "message": "Addresses changes requested in PR review."}, "afterCommit": {"oid": "e0201d7c2c930c2c5327fd62b1277158aab87e2e", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/e0201d7c2c930c2c5327fd62b1277158aab87e2e", "committedDate": "2020-07-29T21:18:49Z", "message": "Addresses changes requested in PR review."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNjI0MDIw", "url": "https://github.com/fcrepo/fcrepo/pull/1726#pullrequestreview-461624020", "createdAt": "2020-08-05T12:41:15Z", "commit": {"oid": "dbab1196f7dc2f8978e4fb0aa57cf3aca0f4e1a4"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo0MToxNlrOG8H4LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzoyMzoxNFrOG8JdJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY5NjgxMg==", "bodyText": "I see now what you were talking about a couple days ago. All of these branching getResource calls are quite ugly. Because the underlying code already handles null transaction ids, it might just be better to allow getResource(null, fedoraId) for the sake not having to write these statements everywhere.", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r465696812", "createdAt": "2020-08-05T12:41:16Z", "author": {"login": "pwinckles"}, "path": "fcrepo-auth-webac/src/main/java/org/fcrepo/auth/webac/WebACAuthorizingRealm.java", "diffHunk": "@@ -234,17 +233,22 @@ public boolean supports(final AuthenticationToken token) {\n     }\n \n     private FedoraResource getResourceOrParentFromPath(final FedoraId fedoraId) {\n+        final var tx = transaction();\n+        final var txId = tx == null || tx.isCommitted() ? null : tx.getId();\n+\n         try {\n             log.debug(\"Testing FedoraResource for {}\", fedoraId.getFullIdPath());\n-            return this.resourceFactory.getResource(transaction(), fedoraId);\n+\n+            return txId != null ? this.resourceFactory.getResource(txId, fedoraId) :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbab1196f7dc2f8978e4fb0aa57cf3aca0f4e1a4"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY5ODczMA==", "bodyText": "I believe you could add this method to a TransactionUtils class in fcrepo-kernel-api. Then, if you allowed null tx ids, ResourceFactory calls could be simplified to something like resourceFactory.getResource(TransactionUtils.openTxId(transaction), fedoraId).", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r465698730", "createdAt": "2020-08-05T12:44:32Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraBaseResource.java", "diffHunk": "@@ -116,4 +118,8 @@ protected Transaction transaction() {\n         }\n         return transaction;\n     }\n+\n+    protected String txtIdIfUncommittedOrNull(final Transaction tx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbab1196f7dc2f8978e4fb0aa57cf3aca0f4e1a4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcwNTQzMg==", "bodyText": "This code can be replaced using this enum: https://github.com/fcrepo4/fcrepo4/blob/main/fcrepo-common/src/main/java/org/fcrepo/common/db/DbPlatform.java", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r465705432", "createdAt": "2020-08-05T12:55:24Z", "author": {"login": "pwinckles"}, "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java", "diffHunk": "@@ -95,72 +119,62 @@\n     @Inject\n     private PlatformTransactionManager platformTransactionManager;\n \n+    @Inject\n+    private ResourceFactory resourceFactory;\n+\n     /**\n      * Setup database table and connection\n      */\n     @PostConstruct\n     public void setup() {\n-        LOGGER.debug(\"Applying ddl: {}\", DDL);\n+        final var ddl = lookupDdl();\n+        LOGGER.debug(\"Applying ddl: {}\", ddl);\n         DatabasePopulatorUtils.execute(\n-                new ResourceDatabasePopulator(new DefaultResourceLoader().getResource(\"classpath:\" + DDL)),\n+                new ResourceDatabasePopulator(new DefaultResourceLoader().getResource(\"classpath:\" + ddl)),\n                 this.dataSource);\n         this.jdbcTemplate = getNamedParameterJdbcTemplate();\n     }\n \n+    private String getDdlKey() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbab1196f7dc2f8978e4fb0aa57cf3aca0f4e1a4"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcwNzQzOA==", "bodyText": "whereClauses should be defined as List", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r465707438", "createdAt": "2020-08-05T12:58:35Z", "author": {"login": "pwinckles"}, "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java", "diffHunk": "@@ -197,32 +217,98 @@ public SearchResult doSearch(final SearchParameters parameters) throws InvalidQu\n         return new SearchResult(items, pagination);\n     }\n \n+    private void addWhereClause(final int paramCount, final MapSqlParameterSource parameterSource,\n+                                final ArrayList<String> whereClauses,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbab1196f7dc2f8978e4fb0aa57cf3aca0f4e1a4"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxMjUyOA==", "bodyText": "The String id is used in a number of places and could be a constant for consistency", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r465712528", "createdAt": "2020-08-05T13:07:06Z", "author": {"login": "pwinckles"}, "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java", "diffHunk": "@@ -231,6 +317,46 @@ public void addUpdateIndex(final ResourceHeaders resourceHeaders) {\n         });\n     }\n \n+    private void insertRdfTypeAssociations(final List<Long> rdfTypeIds, final Long resourceId) {\n+        //add rdf type associations\n+        final var jdbcInsertRdfTypeAssociations = new SimpleJdbcInsert(this.jdbcTemplate.getJdbcTemplate());\n+        jdbcInsertRdfTypeAssociations.withTableName(SEARCH_RESOURCE_RDF_TYPE_TABLE).usingGeneratedKeyColumns(\n+                \"id\");\n+        for (var rdfTypeId : rdfTypeIds) {\n+            final var assocParams = new MapSqlParameterSource();\n+            assocParams.addValue(RESOURCE_ID_PARAM, resourceId);\n+            assocParams.addValue(RDF_TYPE_ID_PARAM, rdfTypeId);\n+            jdbcInsertRdfTypeAssociations.execute(assocParams);\n+        }\n+    }\n+\n+    private void deleteRdfTypeAssociations(final Long resourceId) {\n+        final var deleteParams = new MapSqlParameterSource();\n+        deleteParams.addValue(RESOURCE_ID_PARAM, resourceId);\n+        jdbcTemplate.update(DELETE_RDF_TYPE_ASSOCIATIONS,\n+                deleteParams);\n+    }\n+\n+    private ArrayList<Long> findOrCreateRdfTypesInDb(final List<URI> rdfTypes) {\n+        final var jdbcInsertRdfTypes = new SimpleJdbcInsert(this.jdbcTemplate.getJdbcTemplate());\n+        jdbcInsertRdfTypes.withTableName(SEARCH_RDF_TYPE_TABLE).usingGeneratedKeyColumns(\n+                \"id\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbab1196f7dc2f8978e4fb0aa57cf3aca0f4e1a4"}, "originalPosition": 361}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxNDk5NQ==", "bodyText": "Minor note, only change if you're inclined, but this could be rewritten as:\nreturn List.of(\n    togglePostgresTriggers(SEARCH_RESOURCE_RDF_TYPE_TABLE, enable),\n    togglePostgresTriggers(SEARCH_RDF_TYPE_TABLE, enable),\n    togglePostgresTriggers(SIMPLE_SEARCH_TABLE, enable),\n);", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r465714995", "createdAt": "2020-08-05T13:11:02Z", "author": {"login": "pwinckles"}, "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java", "diffHunk": "@@ -252,7 +378,51 @@ public void removeFromIndex(final FedoraId fedoraId) {\n \n     @Override\n     public void reset() {\n-        jdbcTemplate.update(\"TRUNCATE TABLE \" + SIMPLE_SEARCH_TABLE, Collections.EMPTY_MAP);\n+        final var builder = new StringBuilder();\n+\n+        try {\n+            final var conn = this.dataSource.getConnection();\n+            final var statement = conn.createStatement();\n+            for (var sql : toggleForeignKeyChecks(false)) {\n+                statement.addBatch(sql);\n+            }\n+            statement.addBatch(truncateTable(SEARCH_RESOURCE_RDF_TYPE_TABLE));\n+            statement.addBatch(truncateTable(SIMPLE_SEARCH_TABLE));\n+            statement.addBatch(truncateTable(SEARCH_RDF_TYPE_TABLE));\n+            for (var sql : toggleForeignKeyChecks(true)) {\n+                statement.addBatch(sql);\n+            }\n+            statement.executeBatch();\n+        } catch (SQLException throwables) {\n+            throwables.printStackTrace();\n+        }\n+    }\n+\n+    private List<String> toggleForeignKeyChecks(final boolean enable) {\n+\n+        if (isPostgres()) {\n+            final var statements = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbab1196f7dc2f8978e4fb0aa57cf3aca0f4e1a4"}, "originalPosition": 409}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxNjMwNg==", "bodyText": "Similarly, using Arrays.asList() is worse than List.of() in just about every case, except if you're converting an array into a list, and even then Arrays.asList() can have unexpected behavior if you don't treat the resulting list as immutable.", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r465716306", "createdAt": "2020-08-05T13:13:12Z", "author": {"login": "pwinckles"}, "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java", "diffHunk": "@@ -252,7 +378,51 @@ public void removeFromIndex(final FedoraId fedoraId) {\n \n     @Override\n     public void reset() {\n-        jdbcTemplate.update(\"TRUNCATE TABLE \" + SIMPLE_SEARCH_TABLE, Collections.EMPTY_MAP);\n+        final var builder = new StringBuilder();\n+\n+        try {\n+            final var conn = this.dataSource.getConnection();\n+            final var statement = conn.createStatement();\n+            for (var sql : toggleForeignKeyChecks(false)) {\n+                statement.addBatch(sql);\n+            }\n+            statement.addBatch(truncateTable(SEARCH_RESOURCE_RDF_TYPE_TABLE));\n+            statement.addBatch(truncateTable(SIMPLE_SEARCH_TABLE));\n+            statement.addBatch(truncateTable(SEARCH_RDF_TYPE_TABLE));\n+            for (var sql : toggleForeignKeyChecks(true)) {\n+                statement.addBatch(sql);\n+            }\n+            statement.executeBatch();\n+        } catch (SQLException throwables) {\n+            throwables.printStackTrace();\n+        }\n+    }\n+\n+    private List<String> toggleForeignKeyChecks(final boolean enable) {\n+\n+        if (isPostgres()) {\n+            final var statements = new ArrayList<String>();\n+            statements.add(togglePostgresTriggers(SEARCH_RESOURCE_RDF_TYPE_TABLE, enable));\n+            statements.add(togglePostgresTriggers(SEARCH_RDF_TYPE_TABLE, enable));\n+            statements.add(togglePostgresTriggers(SIMPLE_SEARCH_TABLE, enable));\n+            return statements;\n+        } else {\n+            return Arrays.asList(\"SET FOREIGN_KEY_CHECKS = \" + (enable ? 1 : 0) + \";\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbab1196f7dc2f8978e4fb0aa57cf3aca0f4e1a4"}, "originalPosition": 415}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxNzM3OA==", "bodyText": "You should store this value as a field in the setup() method rather than looking it up every time.", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r465717378", "createdAt": "2020-08-05T13:14:56Z", "author": {"login": "pwinckles"}, "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java", "diffHunk": "@@ -252,7 +378,51 @@ public void removeFromIndex(final FedoraId fedoraId) {\n \n     @Override\n     public void reset() {\n-        jdbcTemplate.update(\"TRUNCATE TABLE \" + SIMPLE_SEARCH_TABLE, Collections.EMPTY_MAP);\n+        final var builder = new StringBuilder();\n+\n+        try {\n+            final var conn = this.dataSource.getConnection();\n+            final var statement = conn.createStatement();\n+            for (var sql : toggleForeignKeyChecks(false)) {\n+                statement.addBatch(sql);\n+            }\n+            statement.addBatch(truncateTable(SEARCH_RESOURCE_RDF_TYPE_TABLE));\n+            statement.addBatch(truncateTable(SIMPLE_SEARCH_TABLE));\n+            statement.addBatch(truncateTable(SEARCH_RDF_TYPE_TABLE));\n+            for (var sql : toggleForeignKeyChecks(true)) {\n+                statement.addBatch(sql);\n+            }\n+            statement.executeBatch();\n+        } catch (SQLException throwables) {\n+            throwables.printStackTrace();\n+        }\n+    }\n+\n+    private List<String> toggleForeignKeyChecks(final boolean enable) {\n+\n+        if (isPostgres()) {\n+            final var statements = new ArrayList<String>();\n+            statements.add(togglePostgresTriggers(SEARCH_RESOURCE_RDF_TYPE_TABLE, enable));\n+            statements.add(togglePostgresTriggers(SEARCH_RDF_TYPE_TABLE, enable));\n+            statements.add(togglePostgresTriggers(SIMPLE_SEARCH_TABLE, enable));\n+            return statements;\n+        } else {\n+            return Arrays.asList(\"SET FOREIGN_KEY_CHECKS = \" + (enable ? 1 : 0) + \";\");\n+        }\n+    }\n+\n+    private boolean isPostgres() {\n+        return getDdlKey().equals(POSTGRESQL_KEY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbab1196f7dc2f8978e4fb0aa57cf3aca0f4e1a4"}, "originalPosition": 420}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyMjY2MA==", "bodyText": "In the other ddl, this line cascades too. Is there a reason it doesn't here?", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r465722660", "createdAt": "2020-08-05T13:23:14Z", "author": {"login": "pwinckles"}, "path": "fcrepo-search-impl/src/main/resources/sql/postgresql-search-index.sql", "diffHunk": "@@ -0,0 +1,24 @@\n+-- simple search\n+CREATE TABLE IF NOT EXISTS simple_search (\n+    id bigserial PRIMARY KEY,\n+    fedora_id  varchar(503) NOT NULL UNIQUE,\n+    created timestamp NOT NULL,\n+    modified timestamp NOT NULL,\n+    content_size bigint DEFAULT NULL,\n+    mime_type varchar(255) DEFAULT NULL\n+);\n+\n+CREATE TABLE IF NOT EXISTS search_rdf_type (\n+    id bigserial PRIMARY KEY,\n+    rdf_type_uri varchar(255) NOT NULL UNIQUE\n+);\n+\n+CREATE TABLE IF NOT EXISTS search_resource_rdf_type (\n+    resource_id bigint NOT NULL,\n+    rdf_type_id bigint NOT NULL,\n+    PRIMARY KEY(resource_id, rdf_type_id),\n+    FOREIGN KEY (resource_id) REFERENCES simple_search(id) ON DELETE CASCADE,\n+    FOREIGN KEY (rdf_type_id) REFERENCES search_rdf_type(id)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbab1196f7dc2f8978e4fb0aa57cf3aca0f4e1a4"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dbab1196f7dc2f8978e4fb0aa57cf3aca0f4e1a4", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/dbab1196f7dc2f8978e4fb0aa57cf3aca0f4e1a4", "committedDate": "2020-08-04T18:07:33Z", "message": "Fixes rdf_type indexing by removing Transaction from the ResourceFactory interface\nand replacing it with transactionId. This update also changed the semantics of ResourceFactory insofar as\nyou must call the transaction-aware methods only if you have a transaction id that represents an uncommitted\ntransaction. For read only calls, you must must the read only methods."}, "afterCommit": {"oid": "1e078f675d597f522943933061373acb7c7b483e", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/1e078f675d597f522943933061373acb7c7b483e", "committedDate": "2020-08-06T23:31:55Z", "message": "Addresses second round of PR feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDc5NTUz", "url": "https://github.com/fcrepo/fcrepo/pull/1726#pullrequestreview-463479553", "createdAt": "2020-08-07T17:23:19Z", "commit": {"oid": "1e078f675d597f522943933061373acb7c7b483e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoyMzoyMFrOG9h4Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzozMDoxM1rOG9iF6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE3MTM5MA==", "bodyText": "It seems like every call to ResourceFactory.getResource() outside of org.fcrepo.kernel.impl.models goes through TransactionUtils.openTxId(transaction) or an equivalent implementation.\nWould it make sense to add back in a ResourceFactory.getResource(Transaction tx, FedoraId resourceId) signature which does TransactionUtils.openTxId internally and calls the getResource(String txId, FedoraId resourceId) rather than calling TransactionUtils.openTxId everywhere?", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r467171390", "createdAt": "2020-08-07T17:23:20Z", "author": {"login": "bbpennel"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraBaseResource.java", "diffHunk": "@@ -71,28 +71,17 @@ protected HttpIdentifierConverter identifierConverter() {\n         return identifierConverter;\n     }\n \n-    protected FedoraResource getFedoraResource(final FedoraId fedoraId) throws PathNotFoundException {\n-        return this.resourceFactory.getResource(fedoraId);\n-    }\n-\n     /**\n      * Gets a fedora resource by id. Uses the provided transaction if it is uncommitted,\n      * or uses a new transaction.\n      *\n      * @param transaction the fedora transaction\n-     * @param fedoraId identifier of the resource\n+     * @param fedoraId    identifier of the resource\n      * @return the requested FedoraResource\n      */\n-    protected FedoraResource getFedoraResource(final Transaction transaction, final FedoraId fedoraId) {\n-        try {\n-            if (transaction.isCommitted()) {\n-                return getFedoraResource(fedoraId);\n-            } else {\n-                return resourceFactory.getResource(transaction, fedoraId);\n-            }\n-        } catch (final PathNotFoundException e) {\n-            throw new PathNotFoundRuntimeException(e);\n-        }\n+    protected FedoraResource getFedoraResource(final Transaction transaction, final FedoraId fedoraId)\n+            throws PathNotFoundException {\n+            return resourceFactory.getResource(TransactionUtils.openTxId(transaction), fedoraId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e078f675d597f522943933061373acb7c7b483e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE3NDg5MA==", "bodyText": "should this be txIdIfUncommittedOrNull rather than txtId?", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r467174890", "createdAt": "2020-08-07T17:30:13Z", "author": {"login": "bbpennel"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/AbstractService.java", "diffHunk": "@@ -238,8 +238,6 @@ private Statement createDefaultAccessToStatement(final String authSubject) {\n                         createResource(currentResourcePath));\n     }\n \n-    protected String txId(final Transaction tx) {\n-        return tx == null ? null : tx.getId();\n-    }\n-\n-}\n+    protected String txtIdIfUncommittedOrNull(final Transaction tx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e078f675d597f522943933061373acb7c7b483e"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MTk2Mjkz", "url": "https://github.com/fcrepo/fcrepo/pull/1726#pullrequestreview-464196293", "createdAt": "2020-08-10T12:47:57Z", "commit": {"oid": "0f882551e6dc43f140e2447131a4906657931c0a"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f188773216855478f1aa51f752a028292c056c3", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/8f188773216855478f1aa51f752a028292c056c3", "committedDate": "2020-08-10T15:50:39Z", "message": "Implements rdf_type parameter and output field in simple search.\n\nResolves: https://jira.lyrasis.org/browse/FCREPO-3378"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bdc79bf1d85c5af07e4adf52a0b283d3965e801", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/0bdc79bf1d85c5af07e4adf52a0b283d3965e801", "committedDate": "2020-08-10T15:50:39Z", "message": "Addresses changes requested in PR review."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ceae2c5ad38049295a87d6fcfe26470ce1afb312", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/ceae2c5ad38049295a87d6fcfe26470ce1afb312", "committedDate": "2020-08-10T15:50:39Z", "message": "Fixes broken tests introduced after rebase."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0f92e9a7e978046e484d042181a55778d6617e0", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/d0f92e9a7e978046e484d042181a55778d6617e0", "committedDate": "2020-08-10T15:51:25Z", "message": "Fixes rdf_type indexing by removing Transaction from the ResourceFactory interface\nand replacing it with transactionId. This update also changed the semantics of ResourceFactory insofar as\nyou must call the transaction-aware methods only if you have a transaction id that represents an uncommitted\ntransaction. For read only calls, you must must the read only methods."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ac2e7df587f0bf68b3c15cbaf535f23e3bf372c", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/6ac2e7df587f0bf68b3c15cbaf535f23e3bf372c", "committedDate": "2020-08-10T15:51:25Z", "message": "Addresses second round of PR feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "887a2ce3fe95ca455ee067ceffaf7a74e2baebf1", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/887a2ce3fe95ca455ee067ceffaf7a74e2baebf1", "committedDate": "2020-08-10T15:51:26Z", "message": "Round 3:  adds back in the ResourceFactory.getResource(Transaction, FedoraId) signature while\npreserving the  new  ResourceFactory.getResource(String, FedoraId) signature per Ben\nPennell's feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0abf922a4e36c43732337fe8246904c81347c52c", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/0abf922a4e36c43732337fe8246904c81347c52c", "committedDate": "2020-08-10T15:58:42Z", "message": "Removes unused imports."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f882551e6dc43f140e2447131a4906657931c0a", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/0f882551e6dc43f140e2447131a4906657931c0a", "committedDate": "2020-08-07T21:34:09Z", "message": "Round 3:  adds back in the ResourceFactory.getResource(Transaction, FedoraId) signature while\npreserving the  new  ResourceFactory.getResource(String, FedoraId) signature per Ben\nPennell's feedback."}, "afterCommit": {"oid": "0abf922a4e36c43732337fe8246904c81347c52c", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/0abf922a4e36c43732337fe8246904c81347c52c", "committedDate": "2020-08-10T15:58:42Z", "message": "Removes unused imports."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NTE2MTYx", "url": "https://github.com/fcrepo/fcrepo/pull/1726#pullrequestreview-464516161", "createdAt": "2020-08-10T19:27:14Z", "commit": {"oid": "0abf922a4e36c43732337fe8246904c81347c52c"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOToyNzoxNFrOG-cblw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoyMzoxMlrOG_hE2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzMDcxMQ==", "bodyText": "this line is indented too much", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r468130711", "createdAt": "2020-08-10T19:27:14Z", "author": {"login": "bbpennel"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraBaseResource.java", "diffHunk": "@@ -71,28 +71,17 @@ protected HttpIdentifierConverter identifierConverter() {\n         return identifierConverter;\n     }\n \n-    protected FedoraResource getFedoraResource(final FedoraId fedoraId) throws PathNotFoundException {\n-        return this.resourceFactory.getResource(fedoraId);\n-    }\n-\n     /**\n      * Gets a fedora resource by id. Uses the provided transaction if it is uncommitted,\n      * or uses a new transaction.\n      *\n      * @param transaction the fedora transaction\n-     * @param fedoraId identifier of the resource\n+     * @param fedoraId    identifier of the resource\n      * @return the requested FedoraResource\n      */\n-    protected FedoraResource getFedoraResource(final Transaction transaction, final FedoraId fedoraId) {\n-        try {\n-            if (transaction.isCommitted()) {\n-                return getFedoraResource(fedoraId);\n-            } else {\n-                return resourceFactory.getResource(transaction, fedoraId);\n-            }\n-        } catch (final PathNotFoundException e) {\n-            throw new PathNotFoundRuntimeException(e);\n-        }\n+    protected FedoraResource getFedoraResource(final Transaction transaction, final FedoraId fedoraId)\n+            throws PathNotFoundException {\n+            return resourceFactory.getResource(transaction, fedoraId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0abf922a4e36c43732337fe8246904c81347c52c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MDU4Nw==", "bodyText": "Seems like this and all the other instances modified in this class could be reverted back to just passing in the mockTransaction", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r469250587", "createdAt": "2020-08-12T13:16:01Z", "author": {"login": "bbpennel"}, "path": "fcrepo-auth-webac/src/test/java/org/fcrepo/auth/webac/WebACFilterTest.java", "diffHunk": "@@ -174,10 +174,11 @@ public void setupRequest() throws Exception {\n \n         when(mockTransactionManager.get(transactionId)).thenReturn(mockTransaction);\n \n-        when(mockResourceFactory.getResource(mockTransaction, testChildId))\n+        when(mockResourceFactory.getResource(mockTransaction.getId(), testChildId))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ad120aa37180d1efc76213065119187fcc890ff"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MTY3NQ==", "bodyText": "Would it make sense to also add back in the doesResourceExist(Transaction tx, ...) signature, which internally calls doesResourceExist(String txId, ...)?", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r469251675", "createdAt": "2020-08-12T13:17:47Z", "author": {"login": "bbpennel"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraBaseResource.java", "diffHunk": "@@ -101,7 +90,7 @@ protected FedoraResource getFedoraResource(final Transaction transaction, final\n      * @return Returns true if an object with the provided id exists\n      */\n     protected boolean doesResourceExist(final Transaction transaction, final FedoraId fedoraId) {\n-        return resourceFactory.doesResourceExist(transaction, fedoraId);\n+        return resourceFactory.doesResourceExist(TransactionUtils.openTxId(transaction), fedoraId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ad120aa37180d1efc76213065119187fcc890ff"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MzIyMw==", "bodyText": "Seems like this and the other getResource(mockTransaction.getId() calls can be reverted to just getResource(mockTransaction if that is more accurate to the real usage", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r469253223", "createdAt": "2020-08-12T13:20:03Z", "author": {"login": "bbpennel"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java", "diffHunk": "@@ -1310,15 +1312,15 @@ public void testCreateNewBinaryWithChecksumSHAandMD5() throws MalformedRdfExcept\n     @Test(expected = CannotCreateResourceException.class)\n     public void testLDPRNotImplemented() throws Exception {\n         final var resource = setResource(Container.class);\n-        when(resourceFactory.getResource(mockTransaction, pathId.resolve(\"x\"))).thenReturn(resource);\n+        when(resourceFactory.getResource(mockTransaction.getId(), pathId.resolve(\"x\"))).thenReturn(resource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ad120aa37180d1efc76213065119187fcc890ff"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1NTM4Nw==", "bodyText": "Seems like all the factory.getResource(mockTx.getId(), ... in this test could be reverted back to factory.getResource(mockTx, ...", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r469255387", "createdAt": "2020-08-12T13:23:12Z", "author": {"login": "bbpennel"}, "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/ResourceFactoryImplTest.java", "diffHunk": "@@ -208,7 +208,7 @@ public void getResource_BasicContainer_WithParent() throws Exception {\n \n         when(psSession.getHeaders(parentId, null)).thenReturn(parentHeaders);\n \n-        final var resc = factory.getResource(mockTx, fedoraId);\n+        final var resc = factory.getResource(mockTx.getId(), fedoraId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ad120aa37180d1efc76213065119187fcc890ff"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bfe486c7a8c3b2927a5b2f48c503e4ba897f8d1", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/2bfe486c7a8c3b2927a5b2f48c503e4ba897f8d1", "committedDate": "2020-08-17T17:35:32Z", "message": "Fixes problem with rdf_type conditions in search.\nNow rdf_type=*<term>*,  rdf_type=*<term>, and rdf_type=<term> (no wildcards)\nshould work as advertised."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ad120aa37180d1efc76213065119187fcc890ff", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/1ad120aa37180d1efc76213065119187fcc890ff", "committedDate": "2020-08-11T21:01:39Z", "message": "Fixes problem with rdf_type conditions in search.\nNow rdf_type=*<term>*,  rdf_type=*<term>, and rdf_type=<term> (no wildcards)\nshould work as advertised."}, "afterCommit": {"oid": "2bfe486c7a8c3b2927a5b2f48c503e4ba897f8d1", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/2bfe486c7a8c3b2927a5b2f48c503e4ba897f8d1", "committedDate": "2020-08-17T17:35:32Z", "message": "Fixes problem with rdf_type conditions in search.\nNow rdf_type=*<term>*,  rdf_type=*<term>, and rdf_type=<term> (no wildcards)\nshould work as advertised."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fc866142677b14ea10a9892522662dd609cfb81", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/9fc866142677b14ea10a9892522662dd609cfb81", "committedDate": "2020-08-17T20:38:52Z", "message": "Addresses postgres query issue."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "35a0f6954397f24e40176031a467d7a1d3abef32", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/35a0f6954397f24e40176031a467d7a1d3abef32", "committedDate": "2020-08-19T19:38:39Z", "message": "Addresses Ben Pennel's PR feedback."}, "afterCommit": {"oid": "cc68512d436892d8624aab2785b97e733cd4f35d", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/cc68512d436892d8624aab2785b97e733cd4f35d", "committedDate": "2020-08-19T19:45:39Z", "message": "Addresses Ben Pennel's PR feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "305c01b277c431885804ed9b27dad7d09f420c62", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/305c01b277c431885804ed9b27dad7d09f420c62", "committedDate": "2020-08-19T19:50:07Z", "message": "Addresses Ben Pennel's PR feedback."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc68512d436892d8624aab2785b97e733cd4f35d", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/cc68512d436892d8624aab2785b97e733cd4f35d", "committedDate": "2020-08-19T19:45:39Z", "message": "Addresses Ben Pennel's PR feedback."}, "afterCommit": {"oid": "305c01b277c431885804ed9b27dad7d09f420c62", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/305c01b277c431885804ed9b27dad7d09f420c62", "committedDate": "2020-08-19T19:50:07Z", "message": "Addresses Ben Pennel's PR feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwOTQ5NjE0", "url": "https://github.com/fcrepo/fcrepo/pull/1726#pullrequestreview-470949614", "createdAt": "2020-08-19T20:57:36Z", "commit": {"oid": "305c01b277c431885804ed9b27dad7d09f420c62"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNjE2OTQz", "url": "https://github.com/fcrepo/fcrepo/pull/1726#pullrequestreview-471616943", "createdAt": "2020-08-20T13:31:46Z", "commit": {"oid": "305c01b277c431885804ed9b27dad7d09f420c62"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzozMTo0NlrOHEBMaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNDowNjowM1rOHEDRjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk3NTkxMg==", "bodyText": "This value will never change at runtime. It would be better to just construct the query once on setup.", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r473975912", "createdAt": "2020-08-20T13:31:46Z", "author": {"login": "pwinckles"}, "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/DbSearchIndexImpl.java", "diffHunk": "@@ -95,72 +126,66 @@\n     @Inject\n     private PlatformTransactionManager platformTransactionManager;\n \n+    @Inject\n+    private ResourceFactory resourceFactory;\n+\n+    private DbPlatform dbPlatForm;\n+\n     /**\n      * Setup database table and connection\n      */\n     @PostConstruct\n     public void setup() {\n-        LOGGER.debug(\"Applying ddl: {}\", DDL);\n+        this.dbPlatForm = DbPlatform.fromDataSource(this.dataSource);\n+        final var ddl = lookupDdl();\n+        LOGGER.debug(\"Applying ddl: {}\", ddl);\n         DatabasePopulatorUtils.execute(\n-                new ResourceDatabasePopulator(new DefaultResourceLoader().getResource(\"classpath:\" + DDL)),\n+                new ResourceDatabasePopulator(new DefaultResourceLoader().getResource(\"classpath:\" + ddl)),\n                 this.dataSource);\n         this.jdbcTemplate = getNamedParameterJdbcTemplate();\n     }\n \n+    private String lookupDdl() {\n+        return DDL_MAP.get(dbPlatForm);\n+    }\n+\n     private NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n         return new NamedParameterJdbcTemplate(this.dataSource);\n     }\n \n     @Override\n     public SearchResult doSearch(final SearchParameters parameters) throws InvalidQueryException {\n         //translate parameters into a SQL query\n-        var paramCount = 1;\n-\n         final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n         final var whereClauses = new ArrayList<String>();\n-        for (Condition condition : parameters.getConditions()) {\n-            final var field = condition.getField();\n-            final var operation = condition.getOperator();\n-            var object = condition.getObject();\n-            if ((field.equals(FEDORA_ID) || field.equals(MIME_TYPE)) &&\n-                    condition.getOperator().equals(Condition.Operator.EQ)) {\n-                if (!object.equals(\"*\")) {\n-                    final var paramName = \"param\" + paramCount++;\n-                    if (object.contains(\"*\")) {\n-                        object = object.replace(\"*\", \"%\");\n-                        whereClauses.add(field + \" like :\" + paramName);\n-                    } else {\n-                        whereClauses.add(field + \" = :\" + paramName);\n-                    }\n-                    parameterSource.addValue(paramName, object);\n-                }\n-            } else if (field.equals(Condition.Field.CREATED) || field.equals(Condition.Field.MODIFIED)) {\n-                //parse date\n-                try {\n-                    final var instant = InstantParser.parse(object);\n-                    final var paramName = \"param\" + paramCount++;\n-                    whereClauses.add(field + \" \" + operation.getStringValue() + \" :\" + paramName);\n-                    parameterSource.addValue(paramName, new Timestamp(instant.toEpochMilli()), Types.TIMESTAMP);\n-                } catch (Exception ex) {\n-                    throw new InvalidQueryException(ex.getMessage());\n-                }\n-            } else if (field.equals(CONTENT_SIZE)) {\n-                try {\n-                    final var paramName = \"param\" + paramCount++;\n-                    whereClauses.add(field + \" \" + operation.getStringValue() +\n-                            \" :\" + paramName);\n-                    parameterSource.addValue(paramName, Long.parseLong(object), Types.INTEGER);\n-                } catch (Exception ex) {\n-                    throw new InvalidQueryException(ex.getMessage());\n-                }\n-            } else {\n-                throw new InvalidQueryException(\"Condition not supported: \\\"\" + condition + \"\\\"\");\n-            }\n+        final var conditions = parameters.getConditions();\n+        for (int i = 0; i < conditions.size(); i++) {\n+            addWhereClause(i, parameterSource, whereClauses, conditions.get(i));\n         }\n \n         final var fields = parameters.getFields().stream().map(x -> x.toString()).collect(Collectors.toList());\n+        final boolean containsRDFTypeField = fields.contains(RDF_TYPE.toString());\n+        if (containsRDFTypeField) {\n+            whereClauses.add(\"s.id = r.resource_id\");\n+            whereClauses.add(\"r.resource_id = r_filter.resource_id\");\n+        }\n+\n         final var sql =\n-                new StringBuilder(\"SELECT \" + String.join(\",\", fields) + \" FROM \" + SIMPLE_SEARCH_TABLE);\n+                new StringBuilder(\"SELECT \" + String.join(\",\", fields) + \" FROM \" + SIMPLE_SEARCH_TABLE + \" s\");\n+\n+        if (containsRDFTypeField) {\n+            final var rdf_type_tables = RDF_TYPE_TABLE.replace(GROUP_CONCAT_FUNCTION,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "305c01b277c431885804ed9b27dad7d09f420c62"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAwOTk5OA==", "bodyText": "Up around L117 you need to clear the search index if there's an exception during the rebuild.", "url": "https://github.com/fcrepo/fcrepo/pull/1726#discussion_r474009998", "createdAt": "2020-08-20T14:06:03Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/IndexBuilderImpl.java", "diffHunk": "@@ -181,6 +182,14 @@ private void indexOcflObject(final String ocflId, final String txId, final OcflO\n                 fedoraToOcflObjectIndex.addMapping(txId, fedoraIdentifier, rootFedoraIdentifier, ocflId);\n                 LOGGER.debug(\"Rebuilt fedora-to-ocfl object index entry for {}\", fedoraIdentifier);\n             });\n+\n+            headersList.forEach(headers -> {\n+                if (!headers.isDeleted()) {\n+                    searchIndex.addUpdateIndex(txId, headers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "305c01b277c431885804ed9b27dad7d09f420c62"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6202ec9c645bb4670ac323e2413190348175c7ef", "author": {"user": {"login": "dbernstein", "name": "dbernstein"}}, "url": "https://github.com/fcrepo/fcrepo/commit/6202ec9c645bb4670ac323e2413190348175c7ef", "committedDate": "2020-08-21T21:14:10Z", "message": "ensures search index is reset on index rebuild error\nand ensures the rdf type tables sql string is built on initialization."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66203b93128dc4940a34c9602cd2200bfc917459", "author": {"user": {"login": "pwinckles", "name": "Peter Winckles"}}, "url": "https://github.com/fcrepo/fcrepo/commit/66203b93128dc4940a34c9602cd2200bfc917459", "committedDate": "2020-08-22T01:58:16Z", "message": "Merge branch 'main' into fcrepo-3378"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ff254a353c252f06b697671456128b8cf9a149c", "author": {"user": {"login": "pwinckles", "name": "Peter Winckles"}}, "url": "https://github.com/fcrepo/fcrepo/commit/8ff254a353c252f06b697671456128b8cf9a149c", "committedDate": "2020-08-24T15:16:18Z", "message": "fix connection leak"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNjk3MDQx", "url": "https://github.com/fcrepo/fcrepo/pull/1726#pullrequestreview-473697041", "createdAt": "2020-08-24T17:14:03Z", "commit": {"oid": "8ff254a353c252f06b697671456128b8cf9a149c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNzczOTQ3", "url": "https://github.com/fcrepo/fcrepo/pull/1726#pullrequestreview-473773947", "createdAt": "2020-08-24T18:57:29Z", "commit": {"oid": "8ff254a353c252f06b697671456128b8cf9a149c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNzgzNTI0", "url": "https://github.com/fcrepo/fcrepo/pull/1726#pullrequestreview-473783524", "createdAt": "2020-08-24T19:12:10Z", "commit": {"oid": "8ff254a353c252f06b697671456128b8cf9a149c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3172, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}