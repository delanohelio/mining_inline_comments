{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NzM3Nzgy", "number": 1761, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzo0Nzo1OVrOEpe6Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowNjoyMVrOEqwC1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTMzNDU1OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraLdp.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzo0Nzo1OVrOHbLPKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDowNDowMVrOHbZFQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI1NzcwNw==", "bodyText": "Not a big deal, but this should probably be either:\nStringUtils.isNotBlank(interactionModel) && StringUtils.isNotBlank(resInteractionModel)\nor\nStringUtils.isNoneBlank(interactionModel, resInteractionModel)", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r498257707", "createdAt": "2020-10-01T13:47:59Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraLdp.java", "diffHunk": "@@ -395,13 +397,12 @@ public Response createOrReplaceObjectRdf(\n                 throw new ClientErrorException(\"An If-Match header is required\", 428);\n             }\n \n-            // TODO: Check existing resources interaction model and make sure we aren't trying to change it.\n-            //final String resInteractionModel = getInteractionModel(resource);\n-            //if (StringUtils.isNoneBlank(interactionModel) && StringUtils.isNoneBlank(resInteractionModel)\n-            //        && !resInteractionModel.equals(interactionModel)) {\n-            //    throw new InteractionModelViolationException(\"Changing the interaction model \" + resInteractionModel\n-            //            + \" to \" + interactionModel + \" is not allowed!\");\n-            //}\n+            final String resInteractionModel = getInteractionModel(transaction, fedoraId);\n+            if (StringUtils.isNoneBlank(interactionModel) && StringUtils.isNoneBlank(resInteractionModel)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9be6f0947486a3156d66fb8ee71f0c080488bd2e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI2MDI5Nw==", "bodyText": "Actually, I think the entire condition could be written as:\nif (!Objects.equals(resInteractionModel, interactionModel)) {..}", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r498260297", "createdAt": "2020-10-01T13:51:24Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraLdp.java", "diffHunk": "@@ -395,13 +397,12 @@ public Response createOrReplaceObjectRdf(\n                 throw new ClientErrorException(\"An If-Match header is required\", 428);\n             }\n \n-            // TODO: Check existing resources interaction model and make sure we aren't trying to change it.\n-            //final String resInteractionModel = getInteractionModel(resource);\n-            //if (StringUtils.isNoneBlank(interactionModel) && StringUtils.isNoneBlank(resInteractionModel)\n-            //        && !resInteractionModel.equals(interactionModel)) {\n-            //    throw new InteractionModelViolationException(\"Changing the interaction model \" + resInteractionModel\n-            //            + \" to \" + interactionModel + \" is not allowed!\");\n-            //}\n+            final String resInteractionModel = getInteractionModel(transaction, fedoraId);\n+            if (StringUtils.isNoneBlank(interactionModel) && StringUtils.isNoneBlank(resInteractionModel)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI1NzcwNw=="}, "originalCommit": {"oid": "9be6f0947486a3156d66fb8ee71f0c080488bd2e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ4NDU0NA==", "bodyText": "I had to keep the StringUtils.isNoneBlank but I did add the Objects.equals too. Because I can only compare if they both are not blank.", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r498484544", "createdAt": "2020-10-01T20:04:01Z", "author": {"login": "whikloj"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraLdp.java", "diffHunk": "@@ -395,13 +397,12 @@ public Response createOrReplaceObjectRdf(\n                 throw new ClientErrorException(\"An If-Match header is required\", 428);\n             }\n \n-            // TODO: Check existing resources interaction model and make sure we aren't trying to change it.\n-            //final String resInteractionModel = getInteractionModel(resource);\n-            //if (StringUtils.isNoneBlank(interactionModel) && StringUtils.isNoneBlank(resInteractionModel)\n-            //        && !resInteractionModel.equals(interactionModel)) {\n-            //    throw new InteractionModelViolationException(\"Changing the interaction model \" + resInteractionModel\n-            //            + \" to \" + interactionModel + \" is not allowed!\");\n-            //}\n+            final String resInteractionModel = getInteractionModel(transaction, fedoraId);\n+            if (StringUtils.isNoneBlank(interactionModel) && StringUtils.isNoneBlank(resInteractionModel)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI1NzcwNw=="}, "originalCommit": {"oid": "9be6f0947486a3156d66fb8ee71f0c080488bd2e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTM4MDUzOnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraBaseResource.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzo1NzozN1rOHbLryA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNToyMTo1MlrOHbPkMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI2NTAzMg==", "bodyText": "Why is this special cased?", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r498265032", "createdAt": "2020-10-01T13:57:37Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraBaseResource.java", "diffHunk": "@@ -92,6 +94,13 @@ protected boolean doesResourceExist(final Transaction transaction, final FedoraI\n         return resourceFactory.doesResourceExist(transaction, fedoraId);\n     }\n \n+    protected String getInteractionModel(final Transaction transaction, final FedoraId fedoraId) {\n+        if (fedoraId.isDescription()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9be6f0947486a3156d66fb8ee71f0c080488bd2e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNzA2OA==", "bodyText": "My understanding, but I could be wrong that binaries exist in the containment index but not binary descriptions.", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r498317068", "createdAt": "2020-10-01T15:05:52Z", "author": {"login": "whikloj"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraBaseResource.java", "diffHunk": "@@ -92,6 +94,13 @@ protected boolean doesResourceExist(final Transaction transaction, final FedoraI\n         return resourceFactory.doesResourceExist(transaction, fedoraId);\n     }\n \n+    protected String getInteractionModel(final Transaction transaction, final FedoraId fedoraId) {\n+        if (fedoraId.isDescription()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI2NTAzMg=="}, "originalCommit": {"oid": "9be6f0947486a3156d66fb8ee71f0c080488bd2e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxOTI1MQ==", "bodyText": "But, aren't you asking the ResourceFactory and not the ContainmentIndex?", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r498319251", "createdAt": "2020-10-01T15:08:54Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraBaseResource.java", "diffHunk": "@@ -92,6 +94,13 @@ protected boolean doesResourceExist(final Transaction transaction, final FedoraI\n         return resourceFactory.doesResourceExist(transaction, fedoraId);\n     }\n \n+    protected String getInteractionModel(final Transaction transaction, final FedoraId fedoraId) {\n+        if (fedoraId.isDescription()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI2NTAzMg=="}, "originalCommit": {"oid": "9be6f0947486a3156d66fb8ee71f0c080488bd2e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMyODYyNQ==", "bodyText": "Fair point, I was having a problem which I may have mis-diagnosed. I'll dig in after the call today.", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r498328625", "createdAt": "2020-10-01T15:21:52Z", "author": {"login": "whikloj"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraBaseResource.java", "diffHunk": "@@ -92,6 +94,13 @@ protected boolean doesResourceExist(final Transaction transaction, final FedoraI\n         return resourceFactory.doesResourceExist(transaction, fedoraId);\n     }\n \n+    protected String getInteractionModel(final Transaction transaction, final FedoraId fedoraId) {\n+        if (fedoraId.isDescription()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI2NTAzMg=="}, "originalCommit": {"oid": "9be6f0947486a3156d66fb8ee71f0c080488bd2e"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTQ2MTQ0OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/ResourceFactoryImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDoxNDo1N1rOHbMeXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTo1MDoyNVrOHbYssg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI3Nzk4Mw==", "bodyText": "I'm not sure if I follow why the interaction model is being added to the containment index. Is it just a place to stick it so that the resource headers don't need to be read?", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r498277983", "createdAt": "2020-10-01T14:14:57Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/ResourceFactoryImpl.java", "diffHunk": "@@ -150,6 +150,42 @@ public FedoraResource getContainer(final String transactionId, final FedoraId re\n         }\n     }\n \n+    @Override\n+    public String getInteractionModel(final String transactionId, final FedoraId fedoraId) {\n+        if (fedoraId.isRepositoryRoot()) {\n+            return BASIC_CONTAINER.getURI();\n+        }\n+        if (!(fedoraId.isMemento() || fedoraId.isAcl())) {\n+            // containment index doesn't handle versions and only tells us if the resource (not acl) is there,\n+            // so don't bother checking for them.\n+            return containmentIndex.getInteractionModel(transactionId, fedoraId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9be6f0947486a3156d66fb8ee71f0c080488bd2e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNzMxNg==", "bodyText": "Yes speed was the contributing factor.", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r498317316", "createdAt": "2020-10-01T15:06:11Z", "author": {"login": "whikloj"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/ResourceFactoryImpl.java", "diffHunk": "@@ -150,6 +150,42 @@ public FedoraResource getContainer(final String transactionId, final FedoraId re\n         }\n     }\n \n+    @Override\n+    public String getInteractionModel(final String transactionId, final FedoraId fedoraId) {\n+        if (fedoraId.isRepositoryRoot()) {\n+            return BASIC_CONTAINER.getURI();\n+        }\n+        if (!(fedoraId.isMemento() || fedoraId.isAcl())) {\n+            // containment index doesn't handle versions and only tells us if the resource (not acl) is there,\n+            // so don't bother checking for them.\n+            return containmentIndex.getInteractionModel(transactionId, fedoraId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI3Nzk4Mw=="}, "originalCommit": {"oid": "9be6f0947486a3156d66fb8ee71f0c080488bd2e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMyNjUzMQ==", "bodyText": "Hm... I think we should think about this more. It feels like data is being tacked on here just because it's a place to put it.\nIn the cases where getInteractionModel() is used, how often are the ResourceHeaders still loaded as part of processing the request? If the headers are still being loaded most of the time, then it would seem to me that a better optimization would be to cache the resource headers rather than sticking the interaction model in the database.\nIf we do want this information in the database, then I think we should consider instead putting all of the resource headers into the database as a new table.", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r498326531", "createdAt": "2020-10-01T15:18:56Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/ResourceFactoryImpl.java", "diffHunk": "@@ -150,6 +150,42 @@ public FedoraResource getContainer(final String transactionId, final FedoraId re\n         }\n     }\n \n+    @Override\n+    public String getInteractionModel(final String transactionId, final FedoraId fedoraId) {\n+        if (fedoraId.isRepositoryRoot()) {\n+            return BASIC_CONTAINER.getURI();\n+        }\n+        if (!(fedoraId.isMemento() || fedoraId.isAcl())) {\n+            // containment index doesn't handle versions and only tells us if the resource (not acl) is there,\n+            // so don't bother checking for them.\n+            return containmentIndex.getInteractionModel(transactionId, fedoraId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI3Nzk4Mw=="}, "originalCommit": {"oid": "9be6f0947486a3156d66fb8ee71f0c080488bd2e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ3ODI1OA==", "bodyText": "Ok containment index is left alone.", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r498478258", "createdAt": "2020-10-01T19:50:25Z", "author": {"login": "whikloj"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/ResourceFactoryImpl.java", "diffHunk": "@@ -150,6 +150,42 @@ public FedoraResource getContainer(final String transactionId, final FedoraId re\n         }\n     }\n \n+    @Override\n+    public String getInteractionModel(final String transactionId, final FedoraId fedoraId) {\n+        if (fedoraId.isRepositoryRoot()) {\n+            return BASIC_CONTAINER.getURI();\n+        }\n+        if (!(fedoraId.isMemento() || fedoraId.isAcl())) {\n+            // containment index doesn't handle versions and only tells us if the resource (not acl) is there,\n+            // so don't bother checking for them.\n+            return containmentIndex.getInteractionModel(transactionId, fedoraId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI3Nzk4Mw=="}, "originalCommit": {"oid": "9be6f0947486a3156d66fb8ee71f0c080488bd2e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTk0NDg3OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTo1NDowM1rOHcvFrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTo1NDowM1rOHcvFrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg5MzY3Nw==", "bodyText": "You can probably remove the newType variable... since the value is only used once. Additionally, the toString() method will be called by default within \"String.format(...)\", and does not need to be invoked explicitly.", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r499893677", "createdAt": "2020-10-05T21:54:03Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "diffHunk": "@@ -230,4 +236,34 @@ protected static Model parseBodyAsModel(final InputStream requestBodyStream,\n         }\n     }\n \n+    /**\n+     * Checks if the RDF contains any disallowed statements.\n+     * @param statement a statement from the incoming RDF.\n+     */\n+    private static void checkForDisallowedRdf(final Statement statement) {\n+        checkTripleForDisallowed(statement.asTriple());\n+    }\n+\n+    /**\n+     * Several tests for invalid or disallowed RDF statements.\n+     * @param triple the triple to check.\n+     */\n+    public static void checkTripleForDisallowed(final Triple triple) {\n+        if (triple.getPredicate().equals(type().asNode()) && !triple.getObject().isURI()) {\n+            // The object of a rdf:type triple is not a URI.\n+            final var newType = triple.getObject().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTk0NTIzOnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTo1NDoxNFrOHcvF6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTo1NDoxNFrOHcvF6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg5MzczNw==", "bodyText": "You can probably remove the newType variable... since the value is only used once. Additionally, the toString() method will be called by default within \"String.format(...)\", and does not need to be invoked explicitly.", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r499893737", "createdAt": "2020-10-05T21:54:14Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "diffHunk": "@@ -230,4 +236,34 @@ protected static Model parseBodyAsModel(final InputStream requestBodyStream,\n         }\n     }\n \n+    /**\n+     * Checks if the RDF contains any disallowed statements.\n+     * @param statement a statement from the incoming RDF.\n+     */\n+    private static void checkForDisallowedRdf(final Statement statement) {\n+        checkTripleForDisallowed(statement.asTriple());\n+    }\n+\n+    /**\n+     * Several tests for invalid or disallowed RDF statements.\n+     * @param triple the triple to check.\n+     */\n+    public static void checkTripleForDisallowed(final Triple triple) {\n+        if (triple.getPredicate().equals(type().asNode()) && !triple.getObject().isURI()) {\n+            // The object of a rdf:type triple is not a URI.\n+            final var newType = triple.getObject().toString();\n+            throw new MalformedRdfException(\n+                    String.format(\"Invalid rdf:type: %s\", newType));\n+        } else if (restrictedType.test(triple)) {\n+            // The object of a rdf:type triple has a restricted namespace.\n+            final var newType = triple.getObject().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTk0NjAyOnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTo1NDoyN1rOHcvGUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTo1NDoyN1rOHcvGUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg5Mzg0Mw==", "bodyText": "The toString() method will be called by default within \"String.format(...)\", and does not need to be invoked explicitly.", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r499893843", "createdAt": "2020-10-05T21:54:27Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "diffHunk": "@@ -230,4 +236,34 @@ protected static Model parseBodyAsModel(final InputStream requestBodyStream,\n         }\n     }\n \n+    /**\n+     * Checks if the RDF contains any disallowed statements.\n+     * @param statement a statement from the incoming RDF.\n+     */\n+    private static void checkForDisallowedRdf(final Statement statement) {\n+        checkTripleForDisallowed(statement.asTriple());\n+    }\n+\n+    /**\n+     * Several tests for invalid or disallowed RDF statements.\n+     * @param triple the triple to check.\n+     */\n+    public static void checkTripleForDisallowed(final Triple triple) {\n+        if (triple.getPredicate().equals(type().asNode()) && !triple.getObject().isURI()) {\n+            // The object of a rdf:type triple is not a URI.\n+            final var newType = triple.getObject().toString();\n+            throw new MalformedRdfException(\n+                    String.format(\"Invalid rdf:type: %s\", newType));\n+        } else if (restrictedType.test(triple)) {\n+            // The object of a rdf:type triple has a restricted namespace.\n+            final var newType = triple.getObject().toString();\n+            throw new InteractionModelViolationException(\n+                    String.format(\"Changing this resource's interaction model to %s is not allowed\", newType));\n+        } else if (isManagedPredicate.test(createProperty(triple.getPredicate().getURI()))) {\n+            // The predicate is server managed.\n+            throw new ServerManagedPropertyException(\n+                    String.format(\"The server managed predicate (%s) cannot be modified by the client.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTk4MDczOnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjowNzo1NlrOHcvbZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDozNjoyN1rOHdKYNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg5OTIzOQ==", "bodyText": "Is there actually anything \"todo\"?", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r499899239", "createdAt": "2020-10-05T22:07:56Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "diffHunk": "@@ -3203,13 +3195,16 @@ public void testCreateResourceWithoutContentType() {\n         assertEquals(CREATED.getStatusCode(), getStatus(new HttpPut(serverAddress + getRandomUniqueId())));\n     }\n \n+    /*\n+     * TODO: This was originally expecting a 415 Unsupported Media Type, but because we assume text/turtle now it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxMzc0MA==", "bodyText": "Sorry I just wanted to keep track of these little changes to the interactions. If going from 415 to 400 is fine, then I can remove the TODO.", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r500313740", "createdAt": "2020-10-06T14:08:41Z", "author": {"login": "whikloj"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "diffHunk": "@@ -3203,13 +3195,16 @@ public void testCreateResourceWithoutContentType() {\n         assertEquals(CREATED.getStatusCode(), getStatus(new HttpPut(serverAddress + getRandomUniqueId())));\n     }\n \n+    /*\n+     * TODO: This was originally expecting a 415 Unsupported Media Type, but because we assume text/turtle now it", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg5OTIzOQ=="}, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0MDc4OQ==", "bodyText": "The change in response code here is probably ok.", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r500340789", "createdAt": "2020-10-06T14:36:27Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "diffHunk": "@@ -3203,13 +3195,16 @@ public void testCreateResourceWithoutContentType() {\n         assertEquals(CREATED.getStatusCode(), getStatus(new HttpPut(serverAddress + getRandomUniqueId())));\n     }\n \n+    /*\n+     * TODO: This was originally expecting a 415 Unsupported Media Type, but because we assume text/turtle now it", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg5OTIzOQ=="}, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTk4OTgzOnYy", "diffSide": "LEFT", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjoxMTo0NVrOHcvg3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDoxNTowOFrOHdJG_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwMDYzNw==", "bodyText": "Are you saying that a malformed SPARQL-Update request should silently fail? It seems like BAD_REQUEST is a more correct response. Am I missing something?", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r499900637", "createdAt": "2020-10-05T22:11:45Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "diffHunk": "@@ -3262,7 +3253,7 @@ public void testBinarySetBadMimeType() throws IOException {\n                 \"INSERT { <\" + subjectURI + \"> ebucore:hasMimeType \\\"-- invalid syntax! --\\\" } WHERE {}\")\n         );\n \n-        assertEquals(BAD_REQUEST.getStatusCode(), getStatus(patch));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxOTk5OQ==", "bodyText": "Its actually not invalid syntax unless we want to parse all ontologies for their targets and domains.\nThis was a problem because we relied on this particular triple to send the binary response. Now we store the mime-type in the headers file and this is user rdf. If they want the triple <> ebucore:hasMimeType \"I want my baby back baby back baby back\" that is up to them.\nI could modify this test to check that the binary is still retrievable and the user rdf says whatever or I can remove the entire test.", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r500319999", "createdAt": "2020-10-06T14:15:08Z", "author": {"login": "whikloj"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "diffHunk": "@@ -3262,7 +3253,7 @@ public void testBinarySetBadMimeType() throws IOException {\n                 \"INSERT { <\" + subjectURI + \"> ebucore:hasMimeType \\\"-- invalid syntax! --\\\" } WHERE {}\")\n         );\n \n-        assertEquals(BAD_REQUEST.getStatusCode(), getStatus(patch));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwMDYzNw=="}, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDAzNTk2OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/models/ResourceFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjozMTowOVrOHcv78w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDoxNTozNFrOHdJInw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwNzU3MQ==", "bodyText": "It certainly can work here; however, it seems like \"getInteractionModel\" would more appropriately be a \"FedoraResource\" method, rather than a \"ResourceFactory\" method.\nThe following is available on \"FedoraResourceImpl\"\npsSession.getHeaders(fedoraId, fedoraId.getMementoInstant());\n\nWould it make sense for \"FedoraLdp\" to create the known-to-exist resource, then request its interaction-model?", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r499907571", "createdAt": "2020-10-05T22:31:09Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/models/ResourceFactory.java", "diffHunk": "@@ -112,4 +112,12 @@ public FedoraResource getResource(final String transactionId, final FedoraId fed\n      * @return Stream of child resources\n      */\n     public Stream<FedoraResource> getChildren(final String transactionId, final FedoraId resourceId);\n+\n+    /**\n+     * Get the interaction model of the resource, assumes you've checked it exists already.\n+     * @param transactionId The transaction id\n+     * @param fedoraId Identifier of the resource.\n+     * @return The interaction model.\n+     */\n+    public String getInteractionModel(final String transactionId, final FedoraId fedoraId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMwMTY3NQ==", "bodyText": "+1 to a FedoraResource method for getInteractionModel, i've found myself looking for it multiple times.", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r500301675", "createdAt": "2020-10-06T13:56:12Z", "author": {"login": "bbpennel"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/models/ResourceFactory.java", "diffHunk": "@@ -112,4 +112,12 @@ public FedoraResource getResource(final String transactionId, final FedoraId fed\n      * @return Stream of child resources\n      */\n     public Stream<FedoraResource> getChildren(final String transactionId, final FedoraId resourceId);\n+\n+    /**\n+     * Get the interaction model of the resource, assumes you've checked it exists already.\n+     * @param transactionId The transaction id\n+     * @param fedoraId Identifier of the resource.\n+     * @return The interaction model.\n+     */\n+    public String getInteractionModel(final String transactionId, final FedoraId fedoraId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwNzU3MQ=="}, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMyMDQxNQ==", "bodyText": "I'm fine with that.", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r500320415", "createdAt": "2020-10-06T14:15:34Z", "author": {"login": "whikloj"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/models/ResourceFactory.java", "diffHunk": "@@ -112,4 +112,12 @@ public FedoraResource getResource(final String transactionId, final FedoraId fed\n      * @return Stream of child resources\n      */\n     public Stream<FedoraResource> getChildren(final String transactionId, final FedoraId resourceId);\n+\n+    /**\n+     * Get the interaction model of the resource, assumes you've checked it exists already.\n+     * @param transactionId The transaction id\n+     * @param fedoraId Identifier of the resource.\n+     * @return The interaction model.\n+     */\n+    public String getInteractionModel(final String transactionId, final FedoraId fedoraId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwNzU3MQ=="}, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDA0MTU5OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/RdfLexicon.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjozMzo0M1rOHcv_Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjozMzo0M1rOHcv_Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwODQyMw==", "bodyText": "Maybe update this comment to describe what qualifies as a \"restricted namespace\", vs talking about \"setting\" rdf:types... which this predicate is not doing.", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r499908423", "createdAt": "2020-10-05T22:33:43Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/RdfLexicon.java", "diffHunk": "@@ -86,6 +88,12 @@\n     public static final Predicate<String> isManagedNamespace = p -> p.equals(REPOSITORY_NAMESPACE) ||\n             p.equals(LDP_NAMESPACE) || p.equals(MEMENTO_NAMESPACE);\n \n+    /**\n+     * Tests if we are trying to set the rdf:type to an object with a restricted namespace.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDA0MzgyOnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/RdfLexicon.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjozNDo1MFrOHcwApg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjozNDo1MFrOHcwApg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwODc3NA==", "bodyText": "Nice finds. Can you create a ticket to purge these relics?", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r499908774", "createdAt": "2020-10-05T22:34:50Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/RdfLexicon.java", "diffHunk": "@@ -259,21 +267,25 @@\n     /**\n      * Fedora defined JCR node type with supertype of nt:file with two nt:folder named fedora:timemap and\n      * fedora:binaryTimemap inside.\n+     * TODO: Remove modeshape-ism?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDA0ODUwOnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/ResourceFactoryImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjozNjo1NVrOHcwDaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjozNjo1NVrOHcwDaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwOTQ4MA==", "bodyText": "The headers for the RepositoryRoot also indicate its interaction model. Is the potential performance optimization here worth the redundant logic?", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r499909480", "createdAt": "2020-10-05T22:36:55Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/ResourceFactoryImpl.java", "diffHunk": "@@ -150,6 +150,35 @@ public FedoraResource getContainer(final String transactionId, final FedoraId re\n         }\n     }\n \n+    @Override\n+    public String getInteractionModel(final String transactionId, final FedoraId fedoraId) {\n+        if (fedoraId.isRepositoryRoot()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDA1MTUxOnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjozODoxOFrOHcwFQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjozODoxOFrOHcwFQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwOTk1Mw==", "bodyText": "It does not look like this is a function update. Can you revert the reformatting?", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r499909953", "createdAt": "2020-10-05T22:38:18Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -116,8 +116,8 @@\n      * Insert a parent child relationship to the transaction operation table.\n      */\n     private static final String INSERT_CHILD_IN_TRANSACTION = \"INSERT INTO \" + TRANSACTION_OPERATIONS_TABLE +\n-            \" ( \" + PARENT_COLUMN + \", \" + FEDORA_ID_COLUMN + \", \" + TRANSACTION_ID_COLUMN + \", \" + OPERATION_COLUMN +\n-            \" ) VALUES (:parent, :child, :transactionId, 'add')\";\n+            \" ( \" + PARENT_COLUMN + \", \" + FEDORA_ID_COLUMN + \", \" + TRANSACTION_ID_COLUMN + \", \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDA1NDY2OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/ContainmentIndexImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjozOTo0NVrOHcwHGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjozOTo0NVrOHcwHGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxMDQyNQ==", "bodyText": "I believe all updates to this file can be reverted.", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r499910425", "createdAt": "2020-10-05T22:39:45Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/ContainmentIndexImplTest.java", "diffHunk": "@@ -78,6 +79,8 @@\n     private final Map<String, FedoraResource> id_to_resource = new HashMap<>();\n     private final Map<String, Transaction> id_to_transaction = new HashMap<>();\n \n+    private final String ixnModel = BASIC_CONTAINER.getURI();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjUwMTExOnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzo0NToyOFrOHdHXAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTo1Mjo1NlrOHdXkew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI5MTMyOQ==", "bodyText": "I'm not really sure of the state of lenient at the moment, but shouldn't it be okay to specify a restricted type if it's already the interaction model of this resource?", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r500291329", "createdAt": "2020-10-06T13:45:28Z", "author": {"login": "bbpennel"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "diffHunk": "@@ -230,4 +236,34 @@ protected static Model parseBodyAsModel(final InputStream requestBodyStream,\n         }\n     }\n \n+    /**\n+     * Checks if the RDF contains any disallowed statements.\n+     * @param statement a statement from the incoming RDF.\n+     */\n+    private static void checkForDisallowedRdf(final Statement statement) {\n+        checkTripleForDisallowed(statement.asTriple());\n+    }\n+\n+    /**\n+     * Several tests for invalid or disallowed RDF statements.\n+     * @param triple the triple to check.\n+     */\n+    public static void checkTripleForDisallowed(final Triple triple) {\n+        if (triple.getPredicate().equals(type().asNode()) && !triple.getObject().isURI()) {\n+            // The object of a rdf:type triple is not a URI.\n+            final var newType = triple.getObject().toString();\n+            throw new MalformedRdfException(\n+                    String.format(\"Invalid rdf:type: %s\", newType));\n+        } else if (restrictedType.test(triple)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNzk4Nw==", "bodyText": "\ud83e\udd26 I forgot to add the lenient handling. Mea culpa.", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r500337987", "createdAt": "2020-10-06T14:33:33Z", "author": {"login": "whikloj"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "diffHunk": "@@ -230,4 +236,34 @@ protected static Model parseBodyAsModel(final InputStream requestBodyStream,\n         }\n     }\n \n+    /**\n+     * Checks if the RDF contains any disallowed statements.\n+     * @param statement a statement from the incoming RDF.\n+     */\n+    private static void checkForDisallowedRdf(final Statement statement) {\n+        checkTripleForDisallowed(statement.asTriple());\n+    }\n+\n+    /**\n+     * Several tests for invalid or disallowed RDF statements.\n+     * @param triple the triple to check.\n+     */\n+    public static void checkTripleForDisallowed(final Triple triple) {\n+        if (triple.getPredicate().equals(type().asNode()) && !triple.getObject().isURI()) {\n+            // The object of a rdf:type triple is not a URI.\n+            final var newType = triple.getObject().toString();\n+            throw new MalformedRdfException(\n+                    String.format(\"Invalid rdf:type: %s\", newType));\n+        } else if (restrictedType.test(triple)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI5MTMyOQ=="}, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1NjkyMw==", "bodyText": "This is now allowed if you provide handling=lenient because we just remove those triples from the provided RDF.", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r500556923", "createdAt": "2020-10-06T19:52:56Z", "author": {"login": "whikloj"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "diffHunk": "@@ -230,4 +236,34 @@ protected static Model parseBodyAsModel(final InputStream requestBodyStream,\n         }\n     }\n \n+    /**\n+     * Checks if the RDF contains any disallowed statements.\n+     * @param statement a statement from the incoming RDF.\n+     */\n+    private static void checkForDisallowedRdf(final Statement statement) {\n+        checkTripleForDisallowed(statement.asTriple());\n+    }\n+\n+    /**\n+     * Several tests for invalid or disallowed RDF statements.\n+     * @param triple the triple to check.\n+     */\n+    public static void checkTripleForDisallowed(final Triple triple) {\n+        if (triple.getPredicate().equals(type().asNode()) && !triple.getObject().isURI()) {\n+            // The object of a rdf:type triple is not a URI.\n+            final var newType = triple.getObject().toString();\n+            throw new MalformedRdfException(\n+                    String.format(\"Invalid rdf:type: %s\", newType));\n+        } else if (restrictedType.test(triple)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI5MTMyOQ=="}, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjU1OTIyOnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/RdfLexicon.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzo1NTowNVrOHdH6_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNToxMzo1MVrOHdMkrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMwMDU0Mw==", "bodyText": "I'm just curious, does RDF.type cause issues? It appears to be a constant declaration of the result from RDF.Init.type(), not sure if we need to initialize it new each time?", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r500300543", "createdAt": "2020-10-06T13:55:05Z", "author": {"login": "bbpennel"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/RdfLexicon.java", "diffHunk": "@@ -86,6 +88,12 @@\n     public static final Predicate<String> isManagedNamespace = p -> p.equals(REPOSITORY_NAMESPACE) ||\n             p.equals(LDP_NAMESPACE) || p.equals(MEMENTO_NAMESPACE);\n \n+    /**\n+     * Tests if we are trying to set the rdf:type to an object with a restricted namespace.\n+     */\n+    public static final Predicate<Triple> restrictedType = s -> s.getPredicate().equals(type().asNode()) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzODkzOA==", "bodyText": "public static final Property type = Init.type();\nSo I'm not sure it matters, but I can change it.", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r500338938", "createdAt": "2020-10-06T14:34:30Z", "author": {"login": "whikloj"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/RdfLexicon.java", "diffHunk": "@@ -86,6 +88,12 @@\n     public static final Predicate<String> isManagedNamespace = p -> p.equals(REPOSITORY_NAMESPACE) ||\n             p.equals(LDP_NAMESPACE) || p.equals(MEMENTO_NAMESPACE);\n \n+    /**\n+     * Tests if we are trying to set the rdf:type to an object with a restricted namespace.\n+     */\n+    public static final Predicate<Triple> restrictedType = s -> s.getPredicate().equals(type().asNode()) &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMwMDU0Mw=="}, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM3Njc0OA==", "bodyText": "I doubt it has much impact, but RDF.Init.type() is a call to ResourceFactory.createProperty while it seems like RDF.type is a constant of that result.", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r500376748", "createdAt": "2020-10-06T15:13:51Z", "author": {"login": "bbpennel"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/RdfLexicon.java", "diffHunk": "@@ -86,6 +88,12 @@\n     public static final Predicate<String> isManagedNamespace = p -> p.equals(REPOSITORY_NAMESPACE) ||\n             p.equals(LDP_NAMESPACE) || p.equals(MEMENTO_NAMESPACE);\n \n+    /**\n+     * Tests if we are trying to set the rdf:type to an object with a restricted namespace.\n+     */\n+    public static final Predicate<Triple> restrictedType = s -> s.getPredicate().equals(type().asNode()) &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMwMDU0Mw=="}, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjYyODA3OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowNjoyMVrOHdIlxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNToyMDo1NlrOHdM92Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxMTQ5NQ==", "bodyText": "It seems like some of the functionality here is duplicating some checks in AbstractService:\nhttps://github.com/fcrepo/fcrepo/blob/main/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/AbstractService.java#L154\nWere you thinking we would remove the check in AbstractService?\nOne advantage to where it is in AbstractService is that it is validating the model after a sparql update query has been applied to the model, in the case of PATCH. I don't think this method is called for PATCH currently?", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r500311495", "createdAt": "2020-10-06T14:06:21Z", "author": {"login": "bbpennel"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "diffHunk": "@@ -117,6 +122,7 @@ public Model bodyToInternalModel(final String extResourceId, final InputStream s\n \n         while (stmtIterator.hasNext()) {\n             final Statement stmt = stmtIterator.nextStatement();\n+            checkForDisallowedRdf(stmt);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMyMjAzMw==", "bodyText": "I don't know if this is a concern or not, but it might be unpredictable which error response you get from a request if the input contains both an interaction model change and a server managed triple. By checking for all the errors in the same loop (or not deferring the error thrown), whichever error is encountered first will be the result. Maybe that's fine, I was just concerned about that when looking at some tests, since the order of RDF is not generally guaranteed.\nFor what its worth, I stupidly hadn't noticed this PR yesterday and had started implementing checks for interaction model changes in my work on membership triples since so many of the Direct/Indirect container tests are about interaction model changes. I had added this method to ReplacePropertiesServiceImpl:\nprivate void ensureInteractionModelUnchanged(final FedoraId fedoraId, final Model model,\n            final String existingInteractionModel) {\n        final var rdfResc = model.getResource(fedoraId.getFullId());\n        final StmtIterator it = rdfResc.listProperties(RDF.type);\n        while (it.hasNext()) {\n            final Statement st = it.next();\n            if (!st.getObject().isURIResource()) {\n                continue;\n            }\n            final var objUri = st.getResource().getURI();\n\n            if (INTERACTION_MODELS_FULL.contains(objUri) && !objUri.equals(existingInteractionModel)) {\n                throw new InteractionModelViolationException(\"Changing the interaction model \"\n                        + existingInteractionModel + \" to \" + objUri + \" is not allowed!\");\n            }\n        }\n    }\n\nI was running this before checkForSmtsLdpTypes. On the other hand adding more iterations through the model will add up.\nbut wanted to make sure that if the request was changing the interaction model, that we would get the error for that over an error for", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r500322033", "createdAt": "2020-10-06T14:17:18Z", "author": {"login": "bbpennel"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "diffHunk": "@@ -117,6 +122,7 @@ public Model bodyToInternalModel(final String extResourceId, final InputStream s\n \n         while (stmtIterator.hasNext()) {\n             final Statement stmt = stmtIterator.nextStatement();\n+            checkForDisallowedRdf(stmt);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxMTQ5NQ=="}, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM1MDM5Ng==", "bodyText": "You are right about some duplication at the AbstractService layer. I had forgotten about that. As we are already looping through the entire incoming RDF/Sparql-update at the Http layer perhaps removing those checks from the lower level would be better?\nThis does check PATCH requests as we also loop through them to translate any external URIs to internal IDs.\nAs for storing up exceptions...I'm a believer in here is your first problem, come back later. But also I am wondering is if you try to change a server managed triple and change the interaction model in a single request. Do you expect a 409 or 400?", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r500350396", "createdAt": "2020-10-06T14:46:18Z", "author": {"login": "whikloj"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "diffHunk": "@@ -117,6 +122,7 @@ public Model bodyToInternalModel(final String extResourceId, final InputStream s\n \n         while (stmtIterator.hasNext()) {\n             final Statement stmt = stmtIterator.nextStatement();\n+            checkForDisallowedRdf(stmt);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxMTQ5NQ=="}, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM4MzE5Mw==", "bodyText": "Seems like we either need to define precedence for exception types (maybe prioritize specificity?), or leave it as a free for all. Flapping tests seem possible without any sort of precedence, but that doesn't seem to have been a problem so far. Not sure if that's a function of jena not changing significantly, the order in which checks happen in Fedora 4/5, or how the tests are written.", "url": "https://github.com/fcrepo/fcrepo/pull/1761#discussion_r500383193", "createdAt": "2020-10-06T15:20:56Z", "author": {"login": "bbpennel"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "diffHunk": "@@ -117,6 +122,7 @@ public Model bodyToInternalModel(final String extResourceId, final InputStream s\n \n         while (stmtIterator.hasNext()) {\n             final Statement stmt = stmtIterator.nextStatement();\n+            checkForDisallowedRdf(stmt);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxMTQ5NQ=="}, "originalCommit": {"oid": "c103fb37731750d91c77ade68a594bda6f897b94"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1673, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}