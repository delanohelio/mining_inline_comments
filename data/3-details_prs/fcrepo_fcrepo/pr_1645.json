{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NzgwNDU0", "number": 1645, "title": "First pass at containment index", "bodyText": "JIRA Ticket: https://jira.lyrasis.org/browse/FCREPO-3164\nWhat does this Pull Request do?\nAdds some more methods to the API.\nImplements a commit and rollback method.\nAdds some more tests.\nAlters the database setup structure.\nHow should this be tested?\nRight now this is just via the tests, so it should build and the tests should handle expectations.\nNext phase is wiring it into the kernel.\nInterested parties\n@fcrepo4/committers @pwinckles", "createdAt": "2020-03-11T16:03:34Z", "url": "https://github.com/fcrepo/fcrepo/pull/1645", "merged": true, "mergeCommit": {"oid": "e0188dd799b1d6155fca07e395b74da6ab586b15"}, "closed": true, "closedAt": "2020-03-18T18:34:04Z", "author": {"login": "whikloj"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMpSa2AH2gAyMzg2NzgwNDU0OjJhZjQwZjU0YzE4NWUxM2MyM2U0YjI3ZjkwOWU3ZmJhNDA1NmEzNjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOrkoWgFqTM3NjQ3ODc1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2af40f54c185e13c23e4b27f909e7fba4056a362", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/2af40f54c185e13c23e4b27f909e7fba4056a362", "committedDate": "2020-03-11T15:59:24Z", "message": "First pass at containment index"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyOTE1ODc0", "url": "https://github.com/fcrepo/fcrepo/pull/1645#pullrequestreview-372915874", "createdAt": "2020-03-11T16:18:29Z", "commit": {"oid": "2af40f54c185e13c23e4b27f909e7fba4056a362"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjoxODoyOVrOF0-dFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjoyNjo0MlrOF0-zaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5MzUyNg==", "bodyText": "These updates should probably be made within a transaction.", "url": "https://github.com/fcrepo/fcrepo/pull/1645#discussion_r391093526", "createdAt": "2020-03-11T16:18:29Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -239,6 +274,30 @@ public void removeContainedBy(final Transaction tx, final FedoraResource parent,\n         }\n     }\n \n+    @Override\n+    public void commitTransaction(final Transaction tx) {\n+        if (tx != null) {\n+            final String txId = tx.getId();\n+            final NamedParameterJdbcTemplate jdbcTemplate = getNamedParameterJdbcTemplate();\n+            final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n+            parameterSource.addValue(\"transactionId\", txId);\n+            jdbcTemplate.update(COMMIT_ADD_RECORDS, parameterSource);\n+            jdbcTemplate.update(COMMIT_DELETE_RECORDS, parameterSource);\n+            jdbcTemplate.update(COMMIT_CLEANUP, parameterSource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2af40f54c185e13c23e4b27f909e7fba4056a362"}, "originalPosition": 313}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5Nzg4Nw==", "bodyText": "JdbcTemplates are thread safe. This class really should only ever have a single instance: https://docs.spring.io/spring/docs/current/spring-framework-reference/data-access.html#jdbc-JdbcTemplate-idioms", "url": "https://github.com/fcrepo/fcrepo/pull/1645#discussion_r391097887", "createdAt": "2020-03-11T16:24:45Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -87,48 +118,80 @@\n     private static final String DELETE_CHILD = \"DELETE FROM \" + RESOURCES_TABLE +\n             \" WHERE \" + FEDORA_ID_COLUMN + \" = :child AND \" + PARENT_COLUMN + \" = :parent\";\n \n-    private static final String INSERT_CHILD_IN_TRANSACTION = \"INSERT INTO \" +\n-            TRANSACTION_OPERATIONS_TABLE +\n-            \" (parent, fedoraId, transactionId, operation) VALUES (:parent, :child, :transactionId, 'add')\";\n+    private static final String INSERT_CHILD_IN_TRANSACTION = \"INSERT INTO \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" ( \" + PARENT_COLUMN + \", \" + FEDORA_ID_COLUMN + \", \" + TRANSACTION_ID_COLUMN + \", \" + OPERATION_COLUMN +\n+            \" ) VALUES (:parent, :child, :transactionId, 'add')\";\n+\n+    private static final String UNDO_INSERT_CHILD_IN_TRANSACTION = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" WHERE \" + PARENT_COLUMN + \" = :parent AND \" + FEDORA_ID_COLUMN + \" = :child AND \" + TRANSACTION_ID_COLUMN\n+            + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'add'\";\n \n-    private static final String UNDO_INSERT_CHILD_IN_TRANSACTION = \"DELETE FROM \" +\n-            TRANSACTION_OPERATIONS_TABLE +\n-            \" WHERE parent = :parent AND fedoraId = :child AND transactionId = :transactionId AND operation = 'add'\";\n+    private static final String DELETE_CHILD_IN_TRANSACTION = \"INSERT INTO \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" ( \" + PARENT_COLUMN + \", \" + FEDORA_ID_COLUMN + \", \" + TRANSACTION_ID_COLUMN + \", \" + OPERATION_COLUMN +\n+            \" ) VALUES (:parent, :child, :transactionId, 'delete')\";\n \n-    private static final String DELETE_CHILD_IN_TRANSACTION = \"INSERT INTO \" +\n-            TRANSACTION_OPERATIONS_TABLE +\n-            \" (parent, fedoraId, transactionId, operation) VALUES (:parent, :child, :transactionId, 'delete')\";\n+    private static final String UNDO_DELETE_CHILD_IN_TRANSACTION = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" WHERE \" + PARENT_COLUMN + \" = :parent AND \" + FEDORA_ID_COLUMN + \" = :child AND \" + TRANSACTION_ID_COLUMN\n+            + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'delete'\";\n \n-    private final String IS_CHILD_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+    private static final String IS_CHILD_ADDED_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n             \" WHERE \" + FEDORA_ID_COLUMN + \" = :child AND \" + PARENT_COLUMN + \" = :parent\" +\n             \" AND \" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'add'\";\n \n-    /**\n-     * check if a table with the given name exists\n-     */\n-    private boolean tableIsMissing(final String tableName) throws SQLException {\n-        final DatabaseMetaData dbMeta = conn.getMetaData();\n-        final ResultSet tables = dbMeta.getTables(null, null, tableName, new String[]{\"TABLE\"});\n-        while (tables.next()) {\n-            if (tables.getString(\"TABLE_NAME\").equals(tableName)) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n+    private static final String IS_CHILD_DELETED_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" WHERE \" + FEDORA_ID_COLUMN + \" = :child AND \" + PARENT_COLUMN + \" = :parent\" +\n+            \" AND \" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'delete'\";\n+\n+    private static final String ROLLBACK_TRANSACTION = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE + \" WHERE \" +\n+            \" transactionId = :transactionId\";\n+\n+    private static final String COMMIT_ADD_RECORDS = \"INSERT INTO \" + RESOURCES_TABLE + \" ( \" + FEDORA_ID_COLUMN + \", \"\n+            + PARENT_COLUMN + \" ) SELECT \" + FEDORA_ID_COLUMN + \", \" + PARENT_COLUMN + \" FROM \" +\n+            TRANSACTION_OPERATIONS_TABLE + \" WHERE \" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" +\n+            OPERATION_COLUMN + \" = 'add'\";\n+\n+    private static final String COMMIT_DELETE_RECORDS = \"DELETE FROM \" + RESOURCES_TABLE + \" WHERE EXISTS(\" +\n+            \" SELECT 1 FROM \" + TRANSACTION_OPERATIONS_TABLE + \" WHERE \" + RESOURCES_TABLE + \".\" + FEDORA_ID_COLUMN +\n+            \" = \" + TRANSACTION_OPERATIONS_TABLE + \".\" + FEDORA_ID_COLUMN + \" AND \" + RESOURCES_TABLE + \".\" +\n+            PARENT_COLUMN + \" = \" + TRANSACTION_OPERATIONS_TABLE + \".\" + PARENT_COLUMN + \" AND \" +\n+            TRANSACTION_OPERATIONS_TABLE + \".\" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" +\n+            TRANSACTION_OPERATIONS_TABLE + \".\" + OPERATION_COLUMN + \" = 'delete')\";\n+\n+    private static final String COMMIT_CLEANUP = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE + \" WHERE \" +\n+            TRANSACTION_ID_COLUMN + \" = :transactionId\";\n \n     /**\n      * Connect to the database\n      */\n     @PostConstruct\n-    private void setup() throws SQLException {\n-        conn = dataSource.getConnection();\n+    private void setup() {\n+        final NamedParameterJdbcTemplate jdbcTemplate = getNamedParameterJdbcTemplate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2af40f54c185e13c23e4b27f909e7fba4056a362"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5OTI0MA==", "bodyText": "Couldn't there be other reasons a BadSqlGrammerException is thrown that don't indicate the table already exists? Does the table already exists exception have an error code? This may also vary between db implementations. Can you use a CREATE ... IF NOT EXISTS construct?", "url": "https://github.com/fcrepo/fcrepo/pull/1645#discussion_r391099240", "createdAt": "2020-03-11T16:26:42Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -87,48 +118,80 @@\n     private static final String DELETE_CHILD = \"DELETE FROM \" + RESOURCES_TABLE +\n             \" WHERE \" + FEDORA_ID_COLUMN + \" = :child AND \" + PARENT_COLUMN + \" = :parent\";\n \n-    private static final String INSERT_CHILD_IN_TRANSACTION = \"INSERT INTO \" +\n-            TRANSACTION_OPERATIONS_TABLE +\n-            \" (parent, fedoraId, transactionId, operation) VALUES (:parent, :child, :transactionId, 'add')\";\n+    private static final String INSERT_CHILD_IN_TRANSACTION = \"INSERT INTO \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" ( \" + PARENT_COLUMN + \", \" + FEDORA_ID_COLUMN + \", \" + TRANSACTION_ID_COLUMN + \", \" + OPERATION_COLUMN +\n+            \" ) VALUES (:parent, :child, :transactionId, 'add')\";\n+\n+    private static final String UNDO_INSERT_CHILD_IN_TRANSACTION = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" WHERE \" + PARENT_COLUMN + \" = :parent AND \" + FEDORA_ID_COLUMN + \" = :child AND \" + TRANSACTION_ID_COLUMN\n+            + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'add'\";\n \n-    private static final String UNDO_INSERT_CHILD_IN_TRANSACTION = \"DELETE FROM \" +\n-            TRANSACTION_OPERATIONS_TABLE +\n-            \" WHERE parent = :parent AND fedoraId = :child AND transactionId = :transactionId AND operation = 'add'\";\n+    private static final String DELETE_CHILD_IN_TRANSACTION = \"INSERT INTO \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" ( \" + PARENT_COLUMN + \", \" + FEDORA_ID_COLUMN + \", \" + TRANSACTION_ID_COLUMN + \", \" + OPERATION_COLUMN +\n+            \" ) VALUES (:parent, :child, :transactionId, 'delete')\";\n \n-    private static final String DELETE_CHILD_IN_TRANSACTION = \"INSERT INTO \" +\n-            TRANSACTION_OPERATIONS_TABLE +\n-            \" (parent, fedoraId, transactionId, operation) VALUES (:parent, :child, :transactionId, 'delete')\";\n+    private static final String UNDO_DELETE_CHILD_IN_TRANSACTION = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" WHERE \" + PARENT_COLUMN + \" = :parent AND \" + FEDORA_ID_COLUMN + \" = :child AND \" + TRANSACTION_ID_COLUMN\n+            + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'delete'\";\n \n-    private final String IS_CHILD_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+    private static final String IS_CHILD_ADDED_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n             \" WHERE \" + FEDORA_ID_COLUMN + \" = :child AND \" + PARENT_COLUMN + \" = :parent\" +\n             \" AND \" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'add'\";\n \n-    /**\n-     * check if a table with the given name exists\n-     */\n-    private boolean tableIsMissing(final String tableName) throws SQLException {\n-        final DatabaseMetaData dbMeta = conn.getMetaData();\n-        final ResultSet tables = dbMeta.getTables(null, null, tableName, new String[]{\"TABLE\"});\n-        while (tables.next()) {\n-            if (tables.getString(\"TABLE_NAME\").equals(tableName)) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n+    private static final String IS_CHILD_DELETED_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" WHERE \" + FEDORA_ID_COLUMN + \" = :child AND \" + PARENT_COLUMN + \" = :parent\" +\n+            \" AND \" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'delete'\";\n+\n+    private static final String ROLLBACK_TRANSACTION = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE + \" WHERE \" +\n+            \" transactionId = :transactionId\";\n+\n+    private static final String COMMIT_ADD_RECORDS = \"INSERT INTO \" + RESOURCES_TABLE + \" ( \" + FEDORA_ID_COLUMN + \", \"\n+            + PARENT_COLUMN + \" ) SELECT \" + FEDORA_ID_COLUMN + \", \" + PARENT_COLUMN + \" FROM \" +\n+            TRANSACTION_OPERATIONS_TABLE + \" WHERE \" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" +\n+            OPERATION_COLUMN + \" = 'add'\";\n+\n+    private static final String COMMIT_DELETE_RECORDS = \"DELETE FROM \" + RESOURCES_TABLE + \" WHERE EXISTS(\" +\n+            \" SELECT 1 FROM \" + TRANSACTION_OPERATIONS_TABLE + \" WHERE \" + RESOURCES_TABLE + \".\" + FEDORA_ID_COLUMN +\n+            \" = \" + TRANSACTION_OPERATIONS_TABLE + \".\" + FEDORA_ID_COLUMN + \" AND \" + RESOURCES_TABLE + \".\" +\n+            PARENT_COLUMN + \" = \" + TRANSACTION_OPERATIONS_TABLE + \".\" + PARENT_COLUMN + \" AND \" +\n+            TRANSACTION_OPERATIONS_TABLE + \".\" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" +\n+            TRANSACTION_OPERATIONS_TABLE + \".\" + OPERATION_COLUMN + \" = 'delete')\";\n+\n+    private static final String COMMIT_CLEANUP = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE + \" WHERE \" +\n+            TRANSACTION_ID_COLUMN + \" = :transactionId\";\n \n     /**\n      * Connect to the database\n      */\n     @PostConstruct\n-    private void setup() throws SQLException {\n-        conn = dataSource.getConnection();\n+    private void setup() {\n+        final NamedParameterJdbcTemplate jdbcTemplate = getNamedParameterJdbcTemplate();\n+        final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n         // create the tables that don't already exist\n-        if (tableIsMissing(RESOURCES_TABLE)) {\n-            conn.createStatement().execute(RESOURCES_TABLE_DDL);\n+        try {\n+            jdbcTemplate.update(RESOURCES_TABLE_DDL, parameterSource);\n+        } catch (BadSqlGrammarException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2af40f54c185e13c23e4b27f909e7fba4056a362"}, "originalPosition": 172}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8644a84b48fa4c5b3e75c484f651c36f0da2e3ea", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/8644a84b48fa4c5b3e75c484f651c36f0da2e3ea", "committedDate": "2020-03-12T15:49:23Z", "message": "More changes and some code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNzA5NDY5", "url": "https://github.com/fcrepo/fcrepo/pull/1645#pullrequestreview-373709469", "createdAt": "2020-03-12T16:25:37Z", "commit": {"oid": "8644a84b48fa4c5b3e75c484f651c36f0da2e3ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoyNTozN1rOF1l21g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoyNTozN1rOF1l21g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczOTA5NA==", "bodyText": "Is Spring's TransactionManager already enabled?\nhttps://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/EnableTransactionManagement.html", "url": "https://github.com/fcrepo/fcrepo/pull/1645#discussion_r391739094", "createdAt": "2020-03-12T16:25:37Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -275,12 +288,13 @@ public void removeContainedBy(final Transaction tx, final FedoraResource parent,\n     }\n \n     @Override\n+    @Transactional", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8644a84b48fa4c5b3e75c484f651c36f0da2e3ea"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bea5d24cabb148e963e3d29f0084735a78fb5d9", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/3bea5d24cabb148e963e3d29f0084735a78fb5d9", "committedDate": "2020-03-12T19:28:38Z", "message": "Use transactionManager and adjust tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczOTgzMzAw", "url": "https://github.com/fcrepo/fcrepo/pull/1645#pullrequestreview-373983300", "createdAt": "2020-03-13T00:39:31Z", "commit": {"oid": "3bea5d24cabb148e963e3d29f0084735a78fb5d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMDozOTozMVrOF10OyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMDozOTozMVrOF10OyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk3NDYwMA==", "bodyText": "There are multiple places throughout this class where literals are used (\"child\", \"parent\", transactionId). Should probably use the static constants defined at the top of the class.", "url": "https://github.com/fcrepo/fcrepo/pull/1645#discussion_r391974600", "createdAt": "2020-03-13T00:39:31Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -144,91 +209,65 @@ private NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n      * @return A stream of contained identifiers\n      */\n     private Stream<String> getChildren(final String fedoraId, final String transactionId) {\n-        final NamedParameterJdbcTemplate jdbcTemplate = getNamedParameterJdbcTemplate();\n         final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n         parameterSource.addValue(\"parent\", fedoraId);\n \n-        final Stream.Builder<String> children = Stream.builder();\n+        final List<String> children;\n         if (transactionId != null) {\n             // we are in a transaction\n             parameterSource.addValue(\"transactionId\", transactionId);\n             final String currentChildrenQuery = SELECT_CHILDREN +\n                     \" UNION \" + SELECT_ADDED_CHILDREN +\n                     \" EXCEPT \" + SELECT_DELETED_CHILDREN;\n-            for (final String child : jdbcTemplate.queryForList(currentChildrenQuery, parameterSource, String.class)) {\n-                children.add(child);\n-            }\n+            children = jdbcTemplate.queryForList(currentChildrenQuery, parameterSource, String.class);\n         } else {\n             // not in a transaction\n-            for (final String child : jdbcTemplate.queryForList(SELECT_CHILDREN, parameterSource, String.class)) {\n-                children.add(child);\n-            }\n+            children = jdbcTemplate.queryForList(SELECT_CHILDREN, parameterSource, String.class);\n         }\n-        return children.build();\n+        return children.stream();\n     }\n \n-    /**\n-     * Close the database connection\n-     */\n-    @PreDestroy\n-    private void cleanup() {\n-        try {\n-            conn.close();\n-        } catch (SQLException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    /**\n-     * Return a stream of fedora identifiers contained by the specified fedora resource.\n-     *\n-     * @param tx The transaction.  If no transaction, null is okay.\n-     * @param fedoraResource The containing fedora resource\n-     * @return A stream of contained identifiers\n-     */\n     @Override\n     public Stream<String> getContainedBy(final Transaction tx, final FedoraResource fedoraResource) {\n         final String txId = (tx != null) ? tx.getId() : null;\n         return getChildren(fedoraResource.getId(), txId);\n     }\n \n-    /**\n-     * Add a contained by relation between the child resource and its parent.\n-     *\n-     * @param tx The transaction.  If no transaction, null is okay.\n-     * @param parent The containing fedora resource\n-     * @param child The contained fedora resource\n-     */\n+    @Override\n     public void addContainedBy(final Transaction tx, final FedoraResource parent, final FedoraResource child) {\n-        final String txId = (tx != null) ? tx.getId() : null;\n-        final NamedParameterJdbcTemplate jdbcTemplate = getNamedParameterJdbcTemplate();\n+        final String txID = tx != null ? tx.getId() : null;\n+        addContainedBy(txID, parent.getId(), child.getId());\n+    }\n+\n+    @Override\n+    public void addContainedBy(final String txID, final String parentID, final String childID) {\n         final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n-        parameterSource.addValue(\"parent\", parent.getId());\n-        parameterSource.addValue(\"child\", child.getId());\n-        if (txId != null) {\n-            parameterSource.addValue(\"transactionId\", txId);\n-            jdbcTemplate.update(INSERT_CHILD_IN_TRANSACTION, parameterSource);\n+        parameterSource.addValue(\"parent\", parentID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bea5d24cabb148e963e3d29f0084735a78fb5d9"}, "originalPosition": 290}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NDc4NzU1", "url": "https://github.com/fcrepo/fcrepo/pull/1645#pullrequestreview-376478755", "createdAt": "2020-03-17T23:46:57Z", "commit": {"oid": "3bea5d24cabb148e963e3d29f0084735a78fb5d9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3057, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}