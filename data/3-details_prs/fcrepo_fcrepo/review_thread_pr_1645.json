{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NzgwNDU0", "number": 1645, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjoxODoyOVrODnJb1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMDozOTozMVrODnrdeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzc1NjM2OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjoxODoyOVrOF0-dFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjoxODoyOVrOF0-dFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5MzUyNg==", "bodyText": "These updates should probably be made within a transaction.", "url": "https://github.com/fcrepo/fcrepo/pull/1645#discussion_r391093526", "createdAt": "2020-03-11T16:18:29Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -239,6 +274,30 @@ public void removeContainedBy(final Transaction tx, final FedoraResource parent,\n         }\n     }\n \n+    @Override\n+    public void commitTransaction(final Transaction tx) {\n+        if (tx != null) {\n+            final String txId = tx.getId();\n+            final NamedParameterJdbcTemplate jdbcTemplate = getNamedParameterJdbcTemplate();\n+            final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n+            parameterSource.addValue(\"transactionId\", txId);\n+            jdbcTemplate.update(COMMIT_ADD_RECORDS, parameterSource);\n+            jdbcTemplate.update(COMMIT_DELETE_RECORDS, parameterSource);\n+            jdbcTemplate.update(COMMIT_CLEANUP, parameterSource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2af40f54c185e13c23e4b27f909e7fba4056a362"}, "originalPosition": 313}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzc4MzA0OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjoyNDo0NVrOF0-uHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjoyNDo0NVrOF0-uHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5Nzg4Nw==", "bodyText": "JdbcTemplates are thread safe. This class really should only ever have a single instance: https://docs.spring.io/spring/docs/current/spring-framework-reference/data-access.html#jdbc-JdbcTemplate-idioms", "url": "https://github.com/fcrepo/fcrepo/pull/1645#discussion_r391097887", "createdAt": "2020-03-11T16:24:45Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -87,48 +118,80 @@\n     private static final String DELETE_CHILD = \"DELETE FROM \" + RESOURCES_TABLE +\n             \" WHERE \" + FEDORA_ID_COLUMN + \" = :child AND \" + PARENT_COLUMN + \" = :parent\";\n \n-    private static final String INSERT_CHILD_IN_TRANSACTION = \"INSERT INTO \" +\n-            TRANSACTION_OPERATIONS_TABLE +\n-            \" (parent, fedoraId, transactionId, operation) VALUES (:parent, :child, :transactionId, 'add')\";\n+    private static final String INSERT_CHILD_IN_TRANSACTION = \"INSERT INTO \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" ( \" + PARENT_COLUMN + \", \" + FEDORA_ID_COLUMN + \", \" + TRANSACTION_ID_COLUMN + \", \" + OPERATION_COLUMN +\n+            \" ) VALUES (:parent, :child, :transactionId, 'add')\";\n+\n+    private static final String UNDO_INSERT_CHILD_IN_TRANSACTION = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" WHERE \" + PARENT_COLUMN + \" = :parent AND \" + FEDORA_ID_COLUMN + \" = :child AND \" + TRANSACTION_ID_COLUMN\n+            + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'add'\";\n \n-    private static final String UNDO_INSERT_CHILD_IN_TRANSACTION = \"DELETE FROM \" +\n-            TRANSACTION_OPERATIONS_TABLE +\n-            \" WHERE parent = :parent AND fedoraId = :child AND transactionId = :transactionId AND operation = 'add'\";\n+    private static final String DELETE_CHILD_IN_TRANSACTION = \"INSERT INTO \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" ( \" + PARENT_COLUMN + \", \" + FEDORA_ID_COLUMN + \", \" + TRANSACTION_ID_COLUMN + \", \" + OPERATION_COLUMN +\n+            \" ) VALUES (:parent, :child, :transactionId, 'delete')\";\n \n-    private static final String DELETE_CHILD_IN_TRANSACTION = \"INSERT INTO \" +\n-            TRANSACTION_OPERATIONS_TABLE +\n-            \" (parent, fedoraId, transactionId, operation) VALUES (:parent, :child, :transactionId, 'delete')\";\n+    private static final String UNDO_DELETE_CHILD_IN_TRANSACTION = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" WHERE \" + PARENT_COLUMN + \" = :parent AND \" + FEDORA_ID_COLUMN + \" = :child AND \" + TRANSACTION_ID_COLUMN\n+            + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'delete'\";\n \n-    private final String IS_CHILD_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+    private static final String IS_CHILD_ADDED_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n             \" WHERE \" + FEDORA_ID_COLUMN + \" = :child AND \" + PARENT_COLUMN + \" = :parent\" +\n             \" AND \" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'add'\";\n \n-    /**\n-     * check if a table with the given name exists\n-     */\n-    private boolean tableIsMissing(final String tableName) throws SQLException {\n-        final DatabaseMetaData dbMeta = conn.getMetaData();\n-        final ResultSet tables = dbMeta.getTables(null, null, tableName, new String[]{\"TABLE\"});\n-        while (tables.next()) {\n-            if (tables.getString(\"TABLE_NAME\").equals(tableName)) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n+    private static final String IS_CHILD_DELETED_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" WHERE \" + FEDORA_ID_COLUMN + \" = :child AND \" + PARENT_COLUMN + \" = :parent\" +\n+            \" AND \" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'delete'\";\n+\n+    private static final String ROLLBACK_TRANSACTION = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE + \" WHERE \" +\n+            \" transactionId = :transactionId\";\n+\n+    private static final String COMMIT_ADD_RECORDS = \"INSERT INTO \" + RESOURCES_TABLE + \" ( \" + FEDORA_ID_COLUMN + \", \"\n+            + PARENT_COLUMN + \" ) SELECT \" + FEDORA_ID_COLUMN + \", \" + PARENT_COLUMN + \" FROM \" +\n+            TRANSACTION_OPERATIONS_TABLE + \" WHERE \" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" +\n+            OPERATION_COLUMN + \" = 'add'\";\n+\n+    private static final String COMMIT_DELETE_RECORDS = \"DELETE FROM \" + RESOURCES_TABLE + \" WHERE EXISTS(\" +\n+            \" SELECT 1 FROM \" + TRANSACTION_OPERATIONS_TABLE + \" WHERE \" + RESOURCES_TABLE + \".\" + FEDORA_ID_COLUMN +\n+            \" = \" + TRANSACTION_OPERATIONS_TABLE + \".\" + FEDORA_ID_COLUMN + \" AND \" + RESOURCES_TABLE + \".\" +\n+            PARENT_COLUMN + \" = \" + TRANSACTION_OPERATIONS_TABLE + \".\" + PARENT_COLUMN + \" AND \" +\n+            TRANSACTION_OPERATIONS_TABLE + \".\" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" +\n+            TRANSACTION_OPERATIONS_TABLE + \".\" + OPERATION_COLUMN + \" = 'delete')\";\n+\n+    private static final String COMMIT_CLEANUP = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE + \" WHERE \" +\n+            TRANSACTION_ID_COLUMN + \" = :transactionId\";\n \n     /**\n      * Connect to the database\n      */\n     @PostConstruct\n-    private void setup() throws SQLException {\n-        conn = dataSource.getConnection();\n+    private void setup() {\n+        final NamedParameterJdbcTemplate jdbcTemplate = getNamedParameterJdbcTemplate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2af40f54c185e13c23e4b27f909e7fba4056a362"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzc5MTY1OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjoyNjo0MlrOF0-zaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoyNTowOVrOF1l1ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5OTI0MA==", "bodyText": "Couldn't there be other reasons a BadSqlGrammerException is thrown that don't indicate the table already exists? Does the table already exists exception have an error code? This may also vary between db implementations. Can you use a CREATE ... IF NOT EXISTS construct?", "url": "https://github.com/fcrepo/fcrepo/pull/1645#discussion_r391099240", "createdAt": "2020-03-11T16:26:42Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -87,48 +118,80 @@\n     private static final String DELETE_CHILD = \"DELETE FROM \" + RESOURCES_TABLE +\n             \" WHERE \" + FEDORA_ID_COLUMN + \" = :child AND \" + PARENT_COLUMN + \" = :parent\";\n \n-    private static final String INSERT_CHILD_IN_TRANSACTION = \"INSERT INTO \" +\n-            TRANSACTION_OPERATIONS_TABLE +\n-            \" (parent, fedoraId, transactionId, operation) VALUES (:parent, :child, :transactionId, 'add')\";\n+    private static final String INSERT_CHILD_IN_TRANSACTION = \"INSERT INTO \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" ( \" + PARENT_COLUMN + \", \" + FEDORA_ID_COLUMN + \", \" + TRANSACTION_ID_COLUMN + \", \" + OPERATION_COLUMN +\n+            \" ) VALUES (:parent, :child, :transactionId, 'add')\";\n+\n+    private static final String UNDO_INSERT_CHILD_IN_TRANSACTION = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" WHERE \" + PARENT_COLUMN + \" = :parent AND \" + FEDORA_ID_COLUMN + \" = :child AND \" + TRANSACTION_ID_COLUMN\n+            + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'add'\";\n \n-    private static final String UNDO_INSERT_CHILD_IN_TRANSACTION = \"DELETE FROM \" +\n-            TRANSACTION_OPERATIONS_TABLE +\n-            \" WHERE parent = :parent AND fedoraId = :child AND transactionId = :transactionId AND operation = 'add'\";\n+    private static final String DELETE_CHILD_IN_TRANSACTION = \"INSERT INTO \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" ( \" + PARENT_COLUMN + \", \" + FEDORA_ID_COLUMN + \", \" + TRANSACTION_ID_COLUMN + \", \" + OPERATION_COLUMN +\n+            \" ) VALUES (:parent, :child, :transactionId, 'delete')\";\n \n-    private static final String DELETE_CHILD_IN_TRANSACTION = \"INSERT INTO \" +\n-            TRANSACTION_OPERATIONS_TABLE +\n-            \" (parent, fedoraId, transactionId, operation) VALUES (:parent, :child, :transactionId, 'delete')\";\n+    private static final String UNDO_DELETE_CHILD_IN_TRANSACTION = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" WHERE \" + PARENT_COLUMN + \" = :parent AND \" + FEDORA_ID_COLUMN + \" = :child AND \" + TRANSACTION_ID_COLUMN\n+            + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'delete'\";\n \n-    private final String IS_CHILD_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+    private static final String IS_CHILD_ADDED_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n             \" WHERE \" + FEDORA_ID_COLUMN + \" = :child AND \" + PARENT_COLUMN + \" = :parent\" +\n             \" AND \" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'add'\";\n \n-    /**\n-     * check if a table with the given name exists\n-     */\n-    private boolean tableIsMissing(final String tableName) throws SQLException {\n-        final DatabaseMetaData dbMeta = conn.getMetaData();\n-        final ResultSet tables = dbMeta.getTables(null, null, tableName, new String[]{\"TABLE\"});\n-        while (tables.next()) {\n-            if (tables.getString(\"TABLE_NAME\").equals(tableName)) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n+    private static final String IS_CHILD_DELETED_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" WHERE \" + FEDORA_ID_COLUMN + \" = :child AND \" + PARENT_COLUMN + \" = :parent\" +\n+            \" AND \" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'delete'\";\n+\n+    private static final String ROLLBACK_TRANSACTION = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE + \" WHERE \" +\n+            \" transactionId = :transactionId\";\n+\n+    private static final String COMMIT_ADD_RECORDS = \"INSERT INTO \" + RESOURCES_TABLE + \" ( \" + FEDORA_ID_COLUMN + \", \"\n+            + PARENT_COLUMN + \" ) SELECT \" + FEDORA_ID_COLUMN + \", \" + PARENT_COLUMN + \" FROM \" +\n+            TRANSACTION_OPERATIONS_TABLE + \" WHERE \" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" +\n+            OPERATION_COLUMN + \" = 'add'\";\n+\n+    private static final String COMMIT_DELETE_RECORDS = \"DELETE FROM \" + RESOURCES_TABLE + \" WHERE EXISTS(\" +\n+            \" SELECT 1 FROM \" + TRANSACTION_OPERATIONS_TABLE + \" WHERE \" + RESOURCES_TABLE + \".\" + FEDORA_ID_COLUMN +\n+            \" = \" + TRANSACTION_OPERATIONS_TABLE + \".\" + FEDORA_ID_COLUMN + \" AND \" + RESOURCES_TABLE + \".\" +\n+            PARENT_COLUMN + \" = \" + TRANSACTION_OPERATIONS_TABLE + \".\" + PARENT_COLUMN + \" AND \" +\n+            TRANSACTION_OPERATIONS_TABLE + \".\" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" +\n+            TRANSACTION_OPERATIONS_TABLE + \".\" + OPERATION_COLUMN + \" = 'delete')\";\n+\n+    private static final String COMMIT_CLEANUP = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE + \" WHERE \" +\n+            TRANSACTION_ID_COLUMN + \" = :transactionId\";\n \n     /**\n      * Connect to the database\n      */\n     @PostConstruct\n-    private void setup() throws SQLException {\n-        conn = dataSource.getConnection();\n+    private void setup() {\n+        final NamedParameterJdbcTemplate jdbcTemplate = getNamedParameterJdbcTemplate();\n+        final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n         // create the tables that don't already exist\n-        if (tableIsMissing(RESOURCES_TABLE)) {\n-            conn.createStatement().execute(RESOURCES_TABLE_DDL);\n+        try {\n+            jdbcTemplate.update(RESOURCES_TABLE_DDL, parameterSource);\n+        } catch (BadSqlGrammarException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2af40f54c185e13c23e4b27f909e7fba4056a362"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY3OTkwMQ==", "bodyText": "So there is a wrapped exception, but it is from the database layer which in the test case is h2. If you wire a postgresql or mysql I imagine it will be different.\nI can certainly add the h2 exceptions here and once we start wiring in more robust database engines we can extend the catch?", "url": "https://github.com/fcrepo/fcrepo/pull/1645#discussion_r391679901", "createdAt": "2020-03-12T14:57:48Z", "author": {"login": "whikloj"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -87,48 +118,80 @@\n     private static final String DELETE_CHILD = \"DELETE FROM \" + RESOURCES_TABLE +\n             \" WHERE \" + FEDORA_ID_COLUMN + \" = :child AND \" + PARENT_COLUMN + \" = :parent\";\n \n-    private static final String INSERT_CHILD_IN_TRANSACTION = \"INSERT INTO \" +\n-            TRANSACTION_OPERATIONS_TABLE +\n-            \" (parent, fedoraId, transactionId, operation) VALUES (:parent, :child, :transactionId, 'add')\";\n+    private static final String INSERT_CHILD_IN_TRANSACTION = \"INSERT INTO \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" ( \" + PARENT_COLUMN + \", \" + FEDORA_ID_COLUMN + \", \" + TRANSACTION_ID_COLUMN + \", \" + OPERATION_COLUMN +\n+            \" ) VALUES (:parent, :child, :transactionId, 'add')\";\n+\n+    private static final String UNDO_INSERT_CHILD_IN_TRANSACTION = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" WHERE \" + PARENT_COLUMN + \" = :parent AND \" + FEDORA_ID_COLUMN + \" = :child AND \" + TRANSACTION_ID_COLUMN\n+            + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'add'\";\n \n-    private static final String UNDO_INSERT_CHILD_IN_TRANSACTION = \"DELETE FROM \" +\n-            TRANSACTION_OPERATIONS_TABLE +\n-            \" WHERE parent = :parent AND fedoraId = :child AND transactionId = :transactionId AND operation = 'add'\";\n+    private static final String DELETE_CHILD_IN_TRANSACTION = \"INSERT INTO \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" ( \" + PARENT_COLUMN + \", \" + FEDORA_ID_COLUMN + \", \" + TRANSACTION_ID_COLUMN + \", \" + OPERATION_COLUMN +\n+            \" ) VALUES (:parent, :child, :transactionId, 'delete')\";\n \n-    private static final String DELETE_CHILD_IN_TRANSACTION = \"INSERT INTO \" +\n-            TRANSACTION_OPERATIONS_TABLE +\n-            \" (parent, fedoraId, transactionId, operation) VALUES (:parent, :child, :transactionId, 'delete')\";\n+    private static final String UNDO_DELETE_CHILD_IN_TRANSACTION = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" WHERE \" + PARENT_COLUMN + \" = :parent AND \" + FEDORA_ID_COLUMN + \" = :child AND \" + TRANSACTION_ID_COLUMN\n+            + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'delete'\";\n \n-    private final String IS_CHILD_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+    private static final String IS_CHILD_ADDED_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n             \" WHERE \" + FEDORA_ID_COLUMN + \" = :child AND \" + PARENT_COLUMN + \" = :parent\" +\n             \" AND \" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'add'\";\n \n-    /**\n-     * check if a table with the given name exists\n-     */\n-    private boolean tableIsMissing(final String tableName) throws SQLException {\n-        final DatabaseMetaData dbMeta = conn.getMetaData();\n-        final ResultSet tables = dbMeta.getTables(null, null, tableName, new String[]{\"TABLE\"});\n-        while (tables.next()) {\n-            if (tables.getString(\"TABLE_NAME\").equals(tableName)) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n+    private static final String IS_CHILD_DELETED_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" WHERE \" + FEDORA_ID_COLUMN + \" = :child AND \" + PARENT_COLUMN + \" = :parent\" +\n+            \" AND \" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'delete'\";\n+\n+    private static final String ROLLBACK_TRANSACTION = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE + \" WHERE \" +\n+            \" transactionId = :transactionId\";\n+\n+    private static final String COMMIT_ADD_RECORDS = \"INSERT INTO \" + RESOURCES_TABLE + \" ( \" + FEDORA_ID_COLUMN + \", \"\n+            + PARENT_COLUMN + \" ) SELECT \" + FEDORA_ID_COLUMN + \", \" + PARENT_COLUMN + \" FROM \" +\n+            TRANSACTION_OPERATIONS_TABLE + \" WHERE \" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" +\n+            OPERATION_COLUMN + \" = 'add'\";\n+\n+    private static final String COMMIT_DELETE_RECORDS = \"DELETE FROM \" + RESOURCES_TABLE + \" WHERE EXISTS(\" +\n+            \" SELECT 1 FROM \" + TRANSACTION_OPERATIONS_TABLE + \" WHERE \" + RESOURCES_TABLE + \".\" + FEDORA_ID_COLUMN +\n+            \" = \" + TRANSACTION_OPERATIONS_TABLE + \".\" + FEDORA_ID_COLUMN + \" AND \" + RESOURCES_TABLE + \".\" +\n+            PARENT_COLUMN + \" = \" + TRANSACTION_OPERATIONS_TABLE + \".\" + PARENT_COLUMN + \" AND \" +\n+            TRANSACTION_OPERATIONS_TABLE + \".\" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" +\n+            TRANSACTION_OPERATIONS_TABLE + \".\" + OPERATION_COLUMN + \" = 'delete')\";\n+\n+    private static final String COMMIT_CLEANUP = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE + \" WHERE \" +\n+            TRANSACTION_ID_COLUMN + \" = :transactionId\";\n \n     /**\n      * Connect to the database\n      */\n     @PostConstruct\n-    private void setup() throws SQLException {\n-        conn = dataSource.getConnection();\n+    private void setup() {\n+        final NamedParameterJdbcTemplate jdbcTemplate = getNamedParameterJdbcTemplate();\n+        final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n         // create the tables that don't already exist\n-        if (tableIsMissing(RESOURCES_TABLE)) {\n-            conn.createStatement().execute(RESOURCES_TABLE_DDL);\n+        try {\n+            jdbcTemplate.update(RESOURCES_TABLE_DDL, parameterSource);\n+        } catch (BadSqlGrammarException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5OTI0MA=="}, "originalCommit": {"oid": "2af40f54c185e13c23e4b27f909e7fba4056a362"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY4NzY3Nw==", "bodyText": "Alternatively I can re-add the isTableMissing function?", "url": "https://github.com/fcrepo/fcrepo/pull/1645#discussion_r391687677", "createdAt": "2020-03-12T15:08:38Z", "author": {"login": "whikloj"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -87,48 +118,80 @@\n     private static final String DELETE_CHILD = \"DELETE FROM \" + RESOURCES_TABLE +\n             \" WHERE \" + FEDORA_ID_COLUMN + \" = :child AND \" + PARENT_COLUMN + \" = :parent\";\n \n-    private static final String INSERT_CHILD_IN_TRANSACTION = \"INSERT INTO \" +\n-            TRANSACTION_OPERATIONS_TABLE +\n-            \" (parent, fedoraId, transactionId, operation) VALUES (:parent, :child, :transactionId, 'add')\";\n+    private static final String INSERT_CHILD_IN_TRANSACTION = \"INSERT INTO \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" ( \" + PARENT_COLUMN + \", \" + FEDORA_ID_COLUMN + \", \" + TRANSACTION_ID_COLUMN + \", \" + OPERATION_COLUMN +\n+            \" ) VALUES (:parent, :child, :transactionId, 'add')\";\n+\n+    private static final String UNDO_INSERT_CHILD_IN_TRANSACTION = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" WHERE \" + PARENT_COLUMN + \" = :parent AND \" + FEDORA_ID_COLUMN + \" = :child AND \" + TRANSACTION_ID_COLUMN\n+            + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'add'\";\n \n-    private static final String UNDO_INSERT_CHILD_IN_TRANSACTION = \"DELETE FROM \" +\n-            TRANSACTION_OPERATIONS_TABLE +\n-            \" WHERE parent = :parent AND fedoraId = :child AND transactionId = :transactionId AND operation = 'add'\";\n+    private static final String DELETE_CHILD_IN_TRANSACTION = \"INSERT INTO \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" ( \" + PARENT_COLUMN + \", \" + FEDORA_ID_COLUMN + \", \" + TRANSACTION_ID_COLUMN + \", \" + OPERATION_COLUMN +\n+            \" ) VALUES (:parent, :child, :transactionId, 'delete')\";\n \n-    private static final String DELETE_CHILD_IN_TRANSACTION = \"INSERT INTO \" +\n-            TRANSACTION_OPERATIONS_TABLE +\n-            \" (parent, fedoraId, transactionId, operation) VALUES (:parent, :child, :transactionId, 'delete')\";\n+    private static final String UNDO_DELETE_CHILD_IN_TRANSACTION = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" WHERE \" + PARENT_COLUMN + \" = :parent AND \" + FEDORA_ID_COLUMN + \" = :child AND \" + TRANSACTION_ID_COLUMN\n+            + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'delete'\";\n \n-    private final String IS_CHILD_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+    private static final String IS_CHILD_ADDED_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n             \" WHERE \" + FEDORA_ID_COLUMN + \" = :child AND \" + PARENT_COLUMN + \" = :parent\" +\n             \" AND \" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'add'\";\n \n-    /**\n-     * check if a table with the given name exists\n-     */\n-    private boolean tableIsMissing(final String tableName) throws SQLException {\n-        final DatabaseMetaData dbMeta = conn.getMetaData();\n-        final ResultSet tables = dbMeta.getTables(null, null, tableName, new String[]{\"TABLE\"});\n-        while (tables.next()) {\n-            if (tables.getString(\"TABLE_NAME\").equals(tableName)) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n+    private static final String IS_CHILD_DELETED_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" WHERE \" + FEDORA_ID_COLUMN + \" = :child AND \" + PARENT_COLUMN + \" = :parent\" +\n+            \" AND \" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'delete'\";\n+\n+    private static final String ROLLBACK_TRANSACTION = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE + \" WHERE \" +\n+            \" transactionId = :transactionId\";\n+\n+    private static final String COMMIT_ADD_RECORDS = \"INSERT INTO \" + RESOURCES_TABLE + \" ( \" + FEDORA_ID_COLUMN + \", \"\n+            + PARENT_COLUMN + \" ) SELECT \" + FEDORA_ID_COLUMN + \", \" + PARENT_COLUMN + \" FROM \" +\n+            TRANSACTION_OPERATIONS_TABLE + \" WHERE \" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" +\n+            OPERATION_COLUMN + \" = 'add'\";\n+\n+    private static final String COMMIT_DELETE_RECORDS = \"DELETE FROM \" + RESOURCES_TABLE + \" WHERE EXISTS(\" +\n+            \" SELECT 1 FROM \" + TRANSACTION_OPERATIONS_TABLE + \" WHERE \" + RESOURCES_TABLE + \".\" + FEDORA_ID_COLUMN +\n+            \" = \" + TRANSACTION_OPERATIONS_TABLE + \".\" + FEDORA_ID_COLUMN + \" AND \" + RESOURCES_TABLE + \".\" +\n+            PARENT_COLUMN + \" = \" + TRANSACTION_OPERATIONS_TABLE + \".\" + PARENT_COLUMN + \" AND \" +\n+            TRANSACTION_OPERATIONS_TABLE + \".\" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" +\n+            TRANSACTION_OPERATIONS_TABLE + \".\" + OPERATION_COLUMN + \" = 'delete')\";\n+\n+    private static final String COMMIT_CLEANUP = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE + \" WHERE \" +\n+            TRANSACTION_ID_COLUMN + \" = :transactionId\";\n \n     /**\n      * Connect to the database\n      */\n     @PostConstruct\n-    private void setup() throws SQLException {\n-        conn = dataSource.getConnection();\n+    private void setup() {\n+        final NamedParameterJdbcTemplate jdbcTemplate = getNamedParameterJdbcTemplate();\n+        final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n         // create the tables that don't already exist\n-        if (tableIsMissing(RESOURCES_TABLE)) {\n-            conn.createStatement().execute(RESOURCES_TABLE_DDL);\n+        try {\n+            jdbcTemplate.update(RESOURCES_TABLE_DDL, parameterSource);\n+        } catch (BadSqlGrammarException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5OTI0MA=="}, "originalCommit": {"oid": "2af40f54c185e13c23e4b27f909e7fba4056a362"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczODc2Mg==", "bodyText": "CREATE TABLE IF NOT EXISTS seems most straightforward from my perspective.  Then there won't be any \"happy\" exceptions to explicitly ignore.", "url": "https://github.com/fcrepo/fcrepo/pull/1645#discussion_r391738762", "createdAt": "2020-03-12T16:25:09Z", "author": {"login": "birkland"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -87,48 +118,80 @@\n     private static final String DELETE_CHILD = \"DELETE FROM \" + RESOURCES_TABLE +\n             \" WHERE \" + FEDORA_ID_COLUMN + \" = :child AND \" + PARENT_COLUMN + \" = :parent\";\n \n-    private static final String INSERT_CHILD_IN_TRANSACTION = \"INSERT INTO \" +\n-            TRANSACTION_OPERATIONS_TABLE +\n-            \" (parent, fedoraId, transactionId, operation) VALUES (:parent, :child, :transactionId, 'add')\";\n+    private static final String INSERT_CHILD_IN_TRANSACTION = \"INSERT INTO \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" ( \" + PARENT_COLUMN + \", \" + FEDORA_ID_COLUMN + \", \" + TRANSACTION_ID_COLUMN + \", \" + OPERATION_COLUMN +\n+            \" ) VALUES (:parent, :child, :transactionId, 'add')\";\n+\n+    private static final String UNDO_INSERT_CHILD_IN_TRANSACTION = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" WHERE \" + PARENT_COLUMN + \" = :parent AND \" + FEDORA_ID_COLUMN + \" = :child AND \" + TRANSACTION_ID_COLUMN\n+            + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'add'\";\n \n-    private static final String UNDO_INSERT_CHILD_IN_TRANSACTION = \"DELETE FROM \" +\n-            TRANSACTION_OPERATIONS_TABLE +\n-            \" WHERE parent = :parent AND fedoraId = :child AND transactionId = :transactionId AND operation = 'add'\";\n+    private static final String DELETE_CHILD_IN_TRANSACTION = \"INSERT INTO \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" ( \" + PARENT_COLUMN + \", \" + FEDORA_ID_COLUMN + \", \" + TRANSACTION_ID_COLUMN + \", \" + OPERATION_COLUMN +\n+            \" ) VALUES (:parent, :child, :transactionId, 'delete')\";\n \n-    private static final String DELETE_CHILD_IN_TRANSACTION = \"INSERT INTO \" +\n-            TRANSACTION_OPERATIONS_TABLE +\n-            \" (parent, fedoraId, transactionId, operation) VALUES (:parent, :child, :transactionId, 'delete')\";\n+    private static final String UNDO_DELETE_CHILD_IN_TRANSACTION = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" WHERE \" + PARENT_COLUMN + \" = :parent AND \" + FEDORA_ID_COLUMN + \" = :child AND \" + TRANSACTION_ID_COLUMN\n+            + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'delete'\";\n \n-    private final String IS_CHILD_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+    private static final String IS_CHILD_ADDED_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n             \" WHERE \" + FEDORA_ID_COLUMN + \" = :child AND \" + PARENT_COLUMN + \" = :parent\" +\n             \" AND \" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'add'\";\n \n-    /**\n-     * check if a table with the given name exists\n-     */\n-    private boolean tableIsMissing(final String tableName) throws SQLException {\n-        final DatabaseMetaData dbMeta = conn.getMetaData();\n-        final ResultSet tables = dbMeta.getTables(null, null, tableName, new String[]{\"TABLE\"});\n-        while (tables.next()) {\n-            if (tables.getString(\"TABLE_NAME\").equals(tableName)) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n+    private static final String IS_CHILD_DELETED_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_OPERATIONS_TABLE +\n+            \" WHERE \" + FEDORA_ID_COLUMN + \" = :child AND \" + PARENT_COLUMN + \" = :parent\" +\n+            \" AND \" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'delete'\";\n+\n+    private static final String ROLLBACK_TRANSACTION = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE + \" WHERE \" +\n+            \" transactionId = :transactionId\";\n+\n+    private static final String COMMIT_ADD_RECORDS = \"INSERT INTO \" + RESOURCES_TABLE + \" ( \" + FEDORA_ID_COLUMN + \", \"\n+            + PARENT_COLUMN + \" ) SELECT \" + FEDORA_ID_COLUMN + \", \" + PARENT_COLUMN + \" FROM \" +\n+            TRANSACTION_OPERATIONS_TABLE + \" WHERE \" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" +\n+            OPERATION_COLUMN + \" = 'add'\";\n+\n+    private static final String COMMIT_DELETE_RECORDS = \"DELETE FROM \" + RESOURCES_TABLE + \" WHERE EXISTS(\" +\n+            \" SELECT 1 FROM \" + TRANSACTION_OPERATIONS_TABLE + \" WHERE \" + RESOURCES_TABLE + \".\" + FEDORA_ID_COLUMN +\n+            \" = \" + TRANSACTION_OPERATIONS_TABLE + \".\" + FEDORA_ID_COLUMN + \" AND \" + RESOURCES_TABLE + \".\" +\n+            PARENT_COLUMN + \" = \" + TRANSACTION_OPERATIONS_TABLE + \".\" + PARENT_COLUMN + \" AND \" +\n+            TRANSACTION_OPERATIONS_TABLE + \".\" + TRANSACTION_ID_COLUMN + \" = :transactionId AND \" +\n+            TRANSACTION_OPERATIONS_TABLE + \".\" + OPERATION_COLUMN + \" = 'delete')\";\n+\n+    private static final String COMMIT_CLEANUP = \"DELETE FROM \" + TRANSACTION_OPERATIONS_TABLE + \" WHERE \" +\n+            TRANSACTION_ID_COLUMN + \" = :transactionId\";\n \n     /**\n      * Connect to the database\n      */\n     @PostConstruct\n-    private void setup() throws SQLException {\n-        conn = dataSource.getConnection();\n+    private void setup() {\n+        final NamedParameterJdbcTemplate jdbcTemplate = getNamedParameterJdbcTemplate();\n+        final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n         // create the tables that don't already exist\n-        if (tableIsMissing(RESOURCES_TABLE)) {\n-            conn.createStatement().execute(RESOURCES_TABLE_DDL);\n+        try {\n+            jdbcTemplate.update(RESOURCES_TABLE_DDL, parameterSource);\n+        } catch (BadSqlGrammarException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5OTI0MA=="}, "originalCommit": {"oid": "2af40f54c185e13c23e4b27f909e7fba4056a362"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzgyMjU5OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoyNTozN1rOF1l21g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoyNTozN1rOF1l21g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczOTA5NA==", "bodyText": "Is Spring's TransactionManager already enabled?\nhttps://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/EnableTransactionManagement.html", "url": "https://github.com/fcrepo/fcrepo/pull/1645#discussion_r391739094", "createdAt": "2020-03-12T16:25:37Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -275,12 +288,13 @@ public void removeContainedBy(final Transaction tx, final FedoraResource parent,\n     }\n \n     @Override\n+    @Transactional", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8644a84b48fa4c5b3e75c484f651c36f0da2e3ea"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTMzMTEyOnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMDozOTozMVrOF10OyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzo0NjozM1rOF3x6pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk3NDYwMA==", "bodyText": "There are multiple places throughout this class where literals are used (\"child\", \"parent\", transactionId). Should probably use the static constants defined at the top of the class.", "url": "https://github.com/fcrepo/fcrepo/pull/1645#discussion_r391974600", "createdAt": "2020-03-13T00:39:31Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -144,91 +209,65 @@ private NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n      * @return A stream of contained identifiers\n      */\n     private Stream<String> getChildren(final String fedoraId, final String transactionId) {\n-        final NamedParameterJdbcTemplate jdbcTemplate = getNamedParameterJdbcTemplate();\n         final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n         parameterSource.addValue(\"parent\", fedoraId);\n \n-        final Stream.Builder<String> children = Stream.builder();\n+        final List<String> children;\n         if (transactionId != null) {\n             // we are in a transaction\n             parameterSource.addValue(\"transactionId\", transactionId);\n             final String currentChildrenQuery = SELECT_CHILDREN +\n                     \" UNION \" + SELECT_ADDED_CHILDREN +\n                     \" EXCEPT \" + SELECT_DELETED_CHILDREN;\n-            for (final String child : jdbcTemplate.queryForList(currentChildrenQuery, parameterSource, String.class)) {\n-                children.add(child);\n-            }\n+            children = jdbcTemplate.queryForList(currentChildrenQuery, parameterSource, String.class);\n         } else {\n             // not in a transaction\n-            for (final String child : jdbcTemplate.queryForList(SELECT_CHILDREN, parameterSource, String.class)) {\n-                children.add(child);\n-            }\n+            children = jdbcTemplate.queryForList(SELECT_CHILDREN, parameterSource, String.class);\n         }\n-        return children.build();\n+        return children.stream();\n     }\n \n-    /**\n-     * Close the database connection\n-     */\n-    @PreDestroy\n-    private void cleanup() {\n-        try {\n-            conn.close();\n-        } catch (SQLException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    /**\n-     * Return a stream of fedora identifiers contained by the specified fedora resource.\n-     *\n-     * @param tx The transaction.  If no transaction, null is okay.\n-     * @param fedoraResource The containing fedora resource\n-     * @return A stream of contained identifiers\n-     */\n     @Override\n     public Stream<String> getContainedBy(final Transaction tx, final FedoraResource fedoraResource) {\n         final String txId = (tx != null) ? tx.getId() : null;\n         return getChildren(fedoraResource.getId(), txId);\n     }\n \n-    /**\n-     * Add a contained by relation between the child resource and its parent.\n-     *\n-     * @param tx The transaction.  If no transaction, null is okay.\n-     * @param parent The containing fedora resource\n-     * @param child The contained fedora resource\n-     */\n+    @Override\n     public void addContainedBy(final Transaction tx, final FedoraResource parent, final FedoraResource child) {\n-        final String txId = (tx != null) ? tx.getId() : null;\n-        final NamedParameterJdbcTemplate jdbcTemplate = getNamedParameterJdbcTemplate();\n+        final String txID = tx != null ? tx.getId() : null;\n+        addContainedBy(txID, parent.getId(), child.getId());\n+    }\n+\n+    @Override\n+    public void addContainedBy(final String txID, final String parentID, final String childID) {\n         final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n-        parameterSource.addValue(\"parent\", parent.getId());\n-        parameterSource.addValue(\"child\", child.getId());\n-        if (txId != null) {\n-            parameterSource.addValue(\"transactionId\", txId);\n-            jdbcTemplate.update(INSERT_CHILD_IN_TRANSACTION, parameterSource);\n+        parameterSource.addValue(\"parent\", parentID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bea5d24cabb148e963e3d29f0084735a78fb5d9"}, "originalPosition": 290}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIyNjEwNA==", "bodyText": "So technically the child here matches to the :child part of the SQL statement in.\n\"SELECT * FROM \" + RESOURCES_TABLE + \" WHERE \" + FEDORA_ID_COLUMN + \" = :child\"\n\nSo we don't want to use the constants, but perhaps using a more descriptive name to differentiate between columns and arguments?", "url": "https://github.com/fcrepo/fcrepo/pull/1645#discussion_r392226104", "createdAt": "2020-03-13T13:27:17Z", "author": {"login": "whikloj"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -144,91 +209,65 @@ private NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n      * @return A stream of contained identifiers\n      */\n     private Stream<String> getChildren(final String fedoraId, final String transactionId) {\n-        final NamedParameterJdbcTemplate jdbcTemplate = getNamedParameterJdbcTemplate();\n         final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n         parameterSource.addValue(\"parent\", fedoraId);\n \n-        final Stream.Builder<String> children = Stream.builder();\n+        final List<String> children;\n         if (transactionId != null) {\n             // we are in a transaction\n             parameterSource.addValue(\"transactionId\", transactionId);\n             final String currentChildrenQuery = SELECT_CHILDREN +\n                     \" UNION \" + SELECT_ADDED_CHILDREN +\n                     \" EXCEPT \" + SELECT_DELETED_CHILDREN;\n-            for (final String child : jdbcTemplate.queryForList(currentChildrenQuery, parameterSource, String.class)) {\n-                children.add(child);\n-            }\n+            children = jdbcTemplate.queryForList(currentChildrenQuery, parameterSource, String.class);\n         } else {\n             // not in a transaction\n-            for (final String child : jdbcTemplate.queryForList(SELECT_CHILDREN, parameterSource, String.class)) {\n-                children.add(child);\n-            }\n+            children = jdbcTemplate.queryForList(SELECT_CHILDREN, parameterSource, String.class);\n         }\n-        return children.build();\n+        return children.stream();\n     }\n \n-    /**\n-     * Close the database connection\n-     */\n-    @PreDestroy\n-    private void cleanup() {\n-        try {\n-            conn.close();\n-        } catch (SQLException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    /**\n-     * Return a stream of fedora identifiers contained by the specified fedora resource.\n-     *\n-     * @param tx The transaction.  If no transaction, null is okay.\n-     * @param fedoraResource The containing fedora resource\n-     * @return A stream of contained identifiers\n-     */\n     @Override\n     public Stream<String> getContainedBy(final Transaction tx, final FedoraResource fedoraResource) {\n         final String txId = (tx != null) ? tx.getId() : null;\n         return getChildren(fedoraResource.getId(), txId);\n     }\n \n-    /**\n-     * Add a contained by relation between the child resource and its parent.\n-     *\n-     * @param tx The transaction.  If no transaction, null is okay.\n-     * @param parent The containing fedora resource\n-     * @param child The contained fedora resource\n-     */\n+    @Override\n     public void addContainedBy(final Transaction tx, final FedoraResource parent, final FedoraResource child) {\n-        final String txId = (tx != null) ? tx.getId() : null;\n-        final NamedParameterJdbcTemplate jdbcTemplate = getNamedParameterJdbcTemplate();\n+        final String txID = tx != null ? tx.getId() : null;\n+        addContainedBy(txID, parent.getId(), child.getId());\n+    }\n+\n+    @Override\n+    public void addContainedBy(final String txID, final String parentID, final String childID) {\n         final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n-        parameterSource.addValue(\"parent\", parent.getId());\n-        parameterSource.addValue(\"child\", child.getId());\n-        if (txId != null) {\n-            parameterSource.addValue(\"transactionId\", txId);\n-            jdbcTemplate.update(INSERT_CHILD_IN_TRANSACTION, parameterSource);\n+        parameterSource.addValue(\"parent\", parentID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk3NDYwMA=="}, "originalCommit": {"oid": "3bea5d24cabb148e963e3d29f0084735a78fb5d9"}, "originalPosition": 290}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA3NDgwNg==", "bodyText": "To clarify, the above was a question. I'm not going to mess around with all the various SQL statements unless its required.", "url": "https://github.com/fcrepo/fcrepo/pull/1645#discussion_r393074806", "createdAt": "2020-03-16T14:39:45Z", "author": {"login": "whikloj"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -144,91 +209,65 @@ private NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n      * @return A stream of contained identifiers\n      */\n     private Stream<String> getChildren(final String fedoraId, final String transactionId) {\n-        final NamedParameterJdbcTemplate jdbcTemplate = getNamedParameterJdbcTemplate();\n         final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n         parameterSource.addValue(\"parent\", fedoraId);\n \n-        final Stream.Builder<String> children = Stream.builder();\n+        final List<String> children;\n         if (transactionId != null) {\n             // we are in a transaction\n             parameterSource.addValue(\"transactionId\", transactionId);\n             final String currentChildrenQuery = SELECT_CHILDREN +\n                     \" UNION \" + SELECT_ADDED_CHILDREN +\n                     \" EXCEPT \" + SELECT_DELETED_CHILDREN;\n-            for (final String child : jdbcTemplate.queryForList(currentChildrenQuery, parameterSource, String.class)) {\n-                children.add(child);\n-            }\n+            children = jdbcTemplate.queryForList(currentChildrenQuery, parameterSource, String.class);\n         } else {\n             // not in a transaction\n-            for (final String child : jdbcTemplate.queryForList(SELECT_CHILDREN, parameterSource, String.class)) {\n-                children.add(child);\n-            }\n+            children = jdbcTemplate.queryForList(SELECT_CHILDREN, parameterSource, String.class);\n         }\n-        return children.build();\n+        return children.stream();\n     }\n \n-    /**\n-     * Close the database connection\n-     */\n-    @PreDestroy\n-    private void cleanup() {\n-        try {\n-            conn.close();\n-        } catch (SQLException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    /**\n-     * Return a stream of fedora identifiers contained by the specified fedora resource.\n-     *\n-     * @param tx The transaction.  If no transaction, null is okay.\n-     * @param fedoraResource The containing fedora resource\n-     * @return A stream of contained identifiers\n-     */\n     @Override\n     public Stream<String> getContainedBy(final Transaction tx, final FedoraResource fedoraResource) {\n         final String txId = (tx != null) ? tx.getId() : null;\n         return getChildren(fedoraResource.getId(), txId);\n     }\n \n-    /**\n-     * Add a contained by relation between the child resource and its parent.\n-     *\n-     * @param tx The transaction.  If no transaction, null is okay.\n-     * @param parent The containing fedora resource\n-     * @param child The contained fedora resource\n-     */\n+    @Override\n     public void addContainedBy(final Transaction tx, final FedoraResource parent, final FedoraResource child) {\n-        final String txId = (tx != null) ? tx.getId() : null;\n-        final NamedParameterJdbcTemplate jdbcTemplate = getNamedParameterJdbcTemplate();\n+        final String txID = tx != null ? tx.getId() : null;\n+        addContainedBy(txID, parent.getId(), child.getId());\n+    }\n+\n+    @Override\n+    public void addContainedBy(final String txID, final String parentID, final String childID) {\n         final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n-        parameterSource.addValue(\"parent\", parent.getId());\n-        parameterSource.addValue(\"child\", child.getId());\n-        if (txId != null) {\n-            parameterSource.addValue(\"transactionId\", txId);\n-            jdbcTemplate.update(INSERT_CHILD_IN_TRANSACTION, parameterSource);\n+        parameterSource.addValue(\"parent\", parentID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk3NDYwMA=="}, "originalCommit": {"oid": "3bea5d24cabb148e963e3d29f0084735a78fb5d9"}, "originalPosition": 290}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5MDIwNg==", "bodyText": "I was not thinking of the SQL statements, but rather the String literals used in calls to parameterSource.addValue(). It seems more maintainable if \"parent\", \"child\" and \"transactionId\" were replaced by constants.\nSearching for \"parameterSource.addValue(\" shows 12 instances.", "url": "https://github.com/fcrepo/fcrepo/pull/1645#discussion_r393290206", "createdAt": "2020-03-16T20:25:39Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -144,91 +209,65 @@ private NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n      * @return A stream of contained identifiers\n      */\n     private Stream<String> getChildren(final String fedoraId, final String transactionId) {\n-        final NamedParameterJdbcTemplate jdbcTemplate = getNamedParameterJdbcTemplate();\n         final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n         parameterSource.addValue(\"parent\", fedoraId);\n \n-        final Stream.Builder<String> children = Stream.builder();\n+        final List<String> children;\n         if (transactionId != null) {\n             // we are in a transaction\n             parameterSource.addValue(\"transactionId\", transactionId);\n             final String currentChildrenQuery = SELECT_CHILDREN +\n                     \" UNION \" + SELECT_ADDED_CHILDREN +\n                     \" EXCEPT \" + SELECT_DELETED_CHILDREN;\n-            for (final String child : jdbcTemplate.queryForList(currentChildrenQuery, parameterSource, String.class)) {\n-                children.add(child);\n-            }\n+            children = jdbcTemplate.queryForList(currentChildrenQuery, parameterSource, String.class);\n         } else {\n             // not in a transaction\n-            for (final String child : jdbcTemplate.queryForList(SELECT_CHILDREN, parameterSource, String.class)) {\n-                children.add(child);\n-            }\n+            children = jdbcTemplate.queryForList(SELECT_CHILDREN, parameterSource, String.class);\n         }\n-        return children.build();\n+        return children.stream();\n     }\n \n-    /**\n-     * Close the database connection\n-     */\n-    @PreDestroy\n-    private void cleanup() {\n-        try {\n-            conn.close();\n-        } catch (SQLException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    /**\n-     * Return a stream of fedora identifiers contained by the specified fedora resource.\n-     *\n-     * @param tx The transaction.  If no transaction, null is okay.\n-     * @param fedoraResource The containing fedora resource\n-     * @return A stream of contained identifiers\n-     */\n     @Override\n     public Stream<String> getContainedBy(final Transaction tx, final FedoraResource fedoraResource) {\n         final String txId = (tx != null) ? tx.getId() : null;\n         return getChildren(fedoraResource.getId(), txId);\n     }\n \n-    /**\n-     * Add a contained by relation between the child resource and its parent.\n-     *\n-     * @param tx The transaction.  If no transaction, null is okay.\n-     * @param parent The containing fedora resource\n-     * @param child The contained fedora resource\n-     */\n+    @Override\n     public void addContainedBy(final Transaction tx, final FedoraResource parent, final FedoraResource child) {\n-        final String txId = (tx != null) ? tx.getId() : null;\n-        final NamedParameterJdbcTemplate jdbcTemplate = getNamedParameterJdbcTemplate();\n+        final String txID = tx != null ? tx.getId() : null;\n+        addContainedBy(txID, parent.getId(), child.getId());\n+    }\n+\n+    @Override\n+    public void addContainedBy(final String txID, final String parentID, final String childID) {\n         final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n-        parameterSource.addValue(\"parent\", parent.getId());\n-        parameterSource.addValue(\"child\", child.getId());\n-        if (txId != null) {\n-            parameterSource.addValue(\"transactionId\", txId);\n-            jdbcTemplate.update(INSERT_CHILD_IN_TRANSACTION, parameterSource);\n+        parameterSource.addValue(\"parent\", parentID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk3NDYwMA=="}, "originalCommit": {"oid": "3bea5d24cabb148e963e3d29f0084735a78fb5d9"}, "originalPosition": 290}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3NTA0NA==", "bodyText": "To recap the Slack discussion, the replacing of literals with constants would work for the literals parent and transactionId due to them (fortuitously) being the same as the constants, however child would have to remain as a literal or be modified or have a new constant defined.\nI'm not against this work, but I also don't see it as valuable and would prefer to push it off for now.", "url": "https://github.com/fcrepo/fcrepo/pull/1645#discussion_r393975044", "createdAt": "2020-03-17T21:15:18Z", "author": {"login": "whikloj"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -144,91 +209,65 @@ private NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n      * @return A stream of contained identifiers\n      */\n     private Stream<String> getChildren(final String fedoraId, final String transactionId) {\n-        final NamedParameterJdbcTemplate jdbcTemplate = getNamedParameterJdbcTemplate();\n         final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n         parameterSource.addValue(\"parent\", fedoraId);\n \n-        final Stream.Builder<String> children = Stream.builder();\n+        final List<String> children;\n         if (transactionId != null) {\n             // we are in a transaction\n             parameterSource.addValue(\"transactionId\", transactionId);\n             final String currentChildrenQuery = SELECT_CHILDREN +\n                     \" UNION \" + SELECT_ADDED_CHILDREN +\n                     \" EXCEPT \" + SELECT_DELETED_CHILDREN;\n-            for (final String child : jdbcTemplate.queryForList(currentChildrenQuery, parameterSource, String.class)) {\n-                children.add(child);\n-            }\n+            children = jdbcTemplate.queryForList(currentChildrenQuery, parameterSource, String.class);\n         } else {\n             // not in a transaction\n-            for (final String child : jdbcTemplate.queryForList(SELECT_CHILDREN, parameterSource, String.class)) {\n-                children.add(child);\n-            }\n+            children = jdbcTemplate.queryForList(SELECT_CHILDREN, parameterSource, String.class);\n         }\n-        return children.build();\n+        return children.stream();\n     }\n \n-    /**\n-     * Close the database connection\n-     */\n-    @PreDestroy\n-    private void cleanup() {\n-        try {\n-            conn.close();\n-        } catch (SQLException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    /**\n-     * Return a stream of fedora identifiers contained by the specified fedora resource.\n-     *\n-     * @param tx The transaction.  If no transaction, null is okay.\n-     * @param fedoraResource The containing fedora resource\n-     * @return A stream of contained identifiers\n-     */\n     @Override\n     public Stream<String> getContainedBy(final Transaction tx, final FedoraResource fedoraResource) {\n         final String txId = (tx != null) ? tx.getId() : null;\n         return getChildren(fedoraResource.getId(), txId);\n     }\n \n-    /**\n-     * Add a contained by relation between the child resource and its parent.\n-     *\n-     * @param tx The transaction.  If no transaction, null is okay.\n-     * @param parent The containing fedora resource\n-     * @param child The contained fedora resource\n-     */\n+    @Override\n     public void addContainedBy(final Transaction tx, final FedoraResource parent, final FedoraResource child) {\n-        final String txId = (tx != null) ? tx.getId() : null;\n-        final NamedParameterJdbcTemplate jdbcTemplate = getNamedParameterJdbcTemplate();\n+        final String txID = tx != null ? tx.getId() : null;\n+        addContainedBy(txID, parent.getId(), child.getId());\n+    }\n+\n+    @Override\n+    public void addContainedBy(final String txID, final String parentID, final String childID) {\n         final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n-        parameterSource.addValue(\"parent\", parent.getId());\n-        parameterSource.addValue(\"child\", child.getId());\n-        if (txId != null) {\n-            parameterSource.addValue(\"transactionId\", txId);\n-            jdbcTemplate.update(INSERT_CHILD_IN_TRANSACTION, parameterSource);\n+        parameterSource.addValue(\"parent\", parentID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk3NDYwMA=="}, "originalCommit": {"oid": "3bea5d24cabb148e963e3d29f0084735a78fb5d9"}, "originalPosition": 290}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMzgyOQ==", "bodyText": "Punting here is fine.", "url": "https://github.com/fcrepo/fcrepo/pull/1645#discussion_r394033829", "createdAt": "2020-03-17T23:46:33Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -144,91 +209,65 @@ private NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n      * @return A stream of contained identifiers\n      */\n     private Stream<String> getChildren(final String fedoraId, final String transactionId) {\n-        final NamedParameterJdbcTemplate jdbcTemplate = getNamedParameterJdbcTemplate();\n         final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n         parameterSource.addValue(\"parent\", fedoraId);\n \n-        final Stream.Builder<String> children = Stream.builder();\n+        final List<String> children;\n         if (transactionId != null) {\n             // we are in a transaction\n             parameterSource.addValue(\"transactionId\", transactionId);\n             final String currentChildrenQuery = SELECT_CHILDREN +\n                     \" UNION \" + SELECT_ADDED_CHILDREN +\n                     \" EXCEPT \" + SELECT_DELETED_CHILDREN;\n-            for (final String child : jdbcTemplate.queryForList(currentChildrenQuery, parameterSource, String.class)) {\n-                children.add(child);\n-            }\n+            children = jdbcTemplate.queryForList(currentChildrenQuery, parameterSource, String.class);\n         } else {\n             // not in a transaction\n-            for (final String child : jdbcTemplate.queryForList(SELECT_CHILDREN, parameterSource, String.class)) {\n-                children.add(child);\n-            }\n+            children = jdbcTemplate.queryForList(SELECT_CHILDREN, parameterSource, String.class);\n         }\n-        return children.build();\n+        return children.stream();\n     }\n \n-    /**\n-     * Close the database connection\n-     */\n-    @PreDestroy\n-    private void cleanup() {\n-        try {\n-            conn.close();\n-        } catch (SQLException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    /**\n-     * Return a stream of fedora identifiers contained by the specified fedora resource.\n-     *\n-     * @param tx The transaction.  If no transaction, null is okay.\n-     * @param fedoraResource The containing fedora resource\n-     * @return A stream of contained identifiers\n-     */\n     @Override\n     public Stream<String> getContainedBy(final Transaction tx, final FedoraResource fedoraResource) {\n         final String txId = (tx != null) ? tx.getId() : null;\n         return getChildren(fedoraResource.getId(), txId);\n     }\n \n-    /**\n-     * Add a contained by relation between the child resource and its parent.\n-     *\n-     * @param tx The transaction.  If no transaction, null is okay.\n-     * @param parent The containing fedora resource\n-     * @param child The contained fedora resource\n-     */\n+    @Override\n     public void addContainedBy(final Transaction tx, final FedoraResource parent, final FedoraResource child) {\n-        final String txId = (tx != null) ? tx.getId() : null;\n-        final NamedParameterJdbcTemplate jdbcTemplate = getNamedParameterJdbcTemplate();\n+        final String txID = tx != null ? tx.getId() : null;\n+        addContainedBy(txID, parent.getId(), child.getId());\n+    }\n+\n+    @Override\n+    public void addContainedBy(final String txID, final String parentID, final String childID) {\n         final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n-        parameterSource.addValue(\"parent\", parent.getId());\n-        parameterSource.addValue(\"child\", child.getId());\n-        if (txId != null) {\n-            parameterSource.addValue(\"transactionId\", txId);\n-            jdbcTemplate.update(INSERT_CHILD_IN_TRANSACTION, parameterSource);\n+        parameterSource.addValue(\"parent\", parentID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk3NDYwMA=="}, "originalCommit": {"oid": "3bea5d24cabb148e963e3d29f0084735a78fb5d9"}, "originalPosition": 290}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1762, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}