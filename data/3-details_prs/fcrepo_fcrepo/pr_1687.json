{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NzQ3MTgz", "number": 1687, "title": "Purge resources and fix FedoraLdpTests", "bodyText": "JIRA Ticket: https://jira.lyrasis.org/browse/FCREPO-3034\nWhat does this Pull Request do?\nAllows you to DELETE a fcr:tombstone to remove the sidecar files (if part of an Archival Group) or delete the entire object.\nAlso re-enables the FedoraLdpTests unit test class and fixes all the tests.\nHow should this be tested?\nBuild the PR.\nCreate an object.\nFind the object in your storage root.\nDelete the object, see that the object still exists but the sidecar file has the deleted: true property.\nDelete the tombstone, see the entire OCFL object is removed.\nInterested parties\n@fcrepo4/committers", "createdAt": "2020-06-02T18:06:15Z", "url": "https://github.com/fcrepo/fcrepo/pull/1687", "merged": true, "mergeCommit": {"oid": "e5c994e6f0dade6118748a9a62ec406b0f97a8fc"}, "closed": true, "closedAt": "2020-06-08T17:16:30Z", "author": {"login": "whikloj"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnbkJjgFqTQyMjk4MTAxMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpTZbigFqTQyNjQzMDIzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyOTgxMDEz", "url": "https://github.com/fcrepo/fcrepo/pull/1687#pullrequestreview-422981013", "createdAt": "2020-06-02T19:11:50Z", "commit": {"oid": "6457a1c76c54720c5417f7d623b311f37c716212"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToxMTo1MFrOGeAXRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTowNjo0MVrOGeD-pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExNjQyMg==", "bodyText": "Would you mind adding an else block that contains a \"debug()\" log message indicating that the statement was skipped?", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434116422", "createdAt": "2020-06-02T19:11:50Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "diffHunk": "@@ -113,23 +113,24 @@ public Model bodyToInternalModel(final String extResourceId, final InputStream s\n \n         while (stmtIterator.hasNext()) {\n             final Statement stmt = stmtIterator.nextStatement();\n-            final String originalSubj = stmt.getSubject().getURI();\n-            final String subj = idTranslator.inExternalDomain(originalSubj) ?\n-                idTranslator.toInternalId(originalSubj) : originalSubj;\n-\n-            RDFNode obj = stmt.getObject();\n-            if (stmt.getObject().isResource()) {\n-                final String objString = stmt.getObject().asResource().getURI();\n-                if (idTranslator.inExternalDomain(objString)) {\n-                    obj = model.getResource(idTranslator.toInternalId(objString));\n+            if (stmt.getSubject().isURIResource()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6457a1c76c54720c5417f7d623b311f37c716212"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNTk2Nw==", "bodyText": "May as well just return the result of `resourceFactory.getResource(..), no?", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434125967", "createdAt": "2020-06-02T19:28:22Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraTombstones.java", "diffHunk": "@@ -70,19 +73,27 @@ public FedoraTombstones(final String externalPath) {\n      */\n     @DELETE\n     public Response delete() {\n-        LOGGER.info(\"Delete tombstone: {}\", resource());\n-        deleteResourceService.perform(transaction(), resource(), getUserPrincipal());\n+        final Tombstone resource = resource();\n+        LOGGER.info(\"Delete tombstone: {}\", resource);\n+        purgeResourceService.perform(transaction(), resource.getDeletedObject(), getUserPrincipal());\n         transaction().commitIfShortLived();\n         return noContent().build();\n     }\n \n     @Override\n-    protected FedoraResource resource() {\n-        return translator().convert(translator().toDomain(externalPath));\n+    protected Tombstone resource() {\n+        final FedoraId resourceId = identifierConverter().pathToInternalId(externalPath);\n+        try {\n+            final Tombstone resource = resourceFactory.getResource(transaction(), resourceId, Tombstone.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6457a1c76c54720c5417f7d623b311f37c716212"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNzQ0Mg==", "bodyText": "I believe we can remove fedoraID.", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434127442", "createdAt": "2020-06-02T19:31:14Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java", "diffHunk": "@@ -221,6 +231,20 @@\n     @Mock\n     private DeleteResourceService deleteResourceService;\n \n+    @Mock\n+    private ManagedPropertiesService managedPropertiesService;\n+\n+    @Mock\n+    private ContainmentTriplesService containmentTriplesService;\n+\n+    @Mock\n+    private CreateResourceService createResourceService;\n+\n+    @Mock\n+    private Principal principal;\n+\n+    private HttpRdfService httpRdfService;\n+\n     private FedoraId fedoraID;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6457a1c76c54720c5417f7d623b311f37c716212"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMjk5Mw==", "bodyText": "Is there a JIRA for this?", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434132993", "createdAt": "2020-06-02T19:42:09Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java", "diffHunk": "@@ -1007,68 +1059,93 @@ public void testPatchBinary() throws MalformedRdfException, IOException {\n     }\n \n     @Test\n-    public void testCreateNewObject() throws MalformedRdfException, InvalidChecksumException,\n-            UnsupportedAlgorithmException {\n-        setResource(Container.class);\n-        // when(mockContainerService.findOrCreate(mockTransaction, \"/b\", null))\n-        // .thenReturn(mockContainer);\n-        final Response actual = testObj.createObject(null, null, \"b\", null, null, null);\n+    public void testCreateNewObject() throws Exception {\n+        final var resource = setResource(Container.class);\n+        final var finalId = pathId.resolve(\"b\");\n+        when(resourceFactory.getResource(any(), eq(finalId))).thenReturn(resource);\n+        final Response actual = testObj.createObject(null, null, \"b\",\n+                emptyStream, null, null);\n         assertEquals(CREATED.getStatusCode(), actual.getStatus());\n     }\n \n     @Test\n-    public void testCreateNewObjectWithVersionedResource() throws MalformedRdfException, InvalidChecksumException,\n-            UnsupportedAlgorithmException {\n-        setResource(Container.class);\n-        // when(mockContainerService.findOrCreate(mockTransaction, \"/b\", null)).thenReturn(mockContainer);\n+    public void testCreateNewObjectWithVersionedResource() throws Exception {\n+        final var resource = setResource(Container.class);\n+        final var finalId = pathId.resolve(\"b\");\n+        when(resourceFactory.getResource(any(), eq(finalId))).thenReturn(resource);\n         final String versionedResourceLink = \"<\" + VERSIONED_RESOURCE.getURI() + \">;rel=\\\"type\\\"\";\n-        final Response actual = testObj.createObject(null, null, \"b\", null, singletonList(versionedResourceLink), null);\n+        final Response actual = testObj.createObject(null, null, \"b\",\n+                toInputStream(\"\", UTF_8), singletonList(versionedResourceLink), null);\n         assertEquals(CREATED.getStatusCode(), actual.getStatus());\n     }\n \n+    @Ignore(\"HttpRdfService cannot parse sparql-update\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6457a1c76c54720c5417f7d623b311f37c716212"}, "originalPosition": 567}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNDYwMA==", "bodyText": "Remove dead code.", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434134600", "createdAt": "2020-06-02T19:45:18Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java", "diffHunk": "@@ -1086,25 +1163,37 @@ public void testCreateNewBinaryWithInsufficientResources() throws MalformedRdfEx\n \n     @Test\n     public void testCreateNewBinaryWithContentTypeWithParams() throws MalformedRdfException,\n-           InvalidChecksumException, IOException, UnsupportedAlgorithmException {\n+           InvalidChecksumException, IOException, UnsupportedAlgorithmException, PathNotFoundException {\n \n         setResource(Container.class);\n-        // when(mockBinaryService.findOrCreate(mockTransaction, \"/b\")).thenReturn(mockBinary);\n+        final var finalId = pathId.resolve(\"b\");\n+        when(resourceFactory.getResource(any(), eq(finalId))).thenReturn(mockBinary);\n         try (final InputStream content = toInputStream(\"x\", UTF_8)) {\n             final MediaType requestContentType = MediaType.valueOf(\"some/mime-type; with=some; param=s\");\n             final Response actual = testObj.createObject(null, requestContentType, \"b\", content, nonRDFSourceLink,\n                 null);\n             assertEquals(CREATED.getStatusCode(), actual.getStatus());\n-            verify(mockBinary).setContent(content, requestContentType.toString(), Collections.emptySet(), \"\", null);\n+            verify(createResourceService).perform(\n+                    any(),\n+                    any(),\n+                    eq(finalId),\n+                    eq(requestContentType.toString()),\n+                    eq(\"\"),\n+                    any(),\n+                    eq(nonRDFSourceLink),\n+                    any(),\n+                    eq(content),\n+                    eq(null));\n         }\n     }\n \n     @Test\n     public void testCreateNewBinaryWithChecksumSHA() throws MalformedRdfException,\n-           InvalidChecksumException, IOException, UnsupportedAlgorithmException {\n+           InvalidChecksumException, IOException, UnsupportedAlgorithmException, PathNotFoundException {\n \n-        setResource(Container.class);\n-        // when(mockBinaryService.findOrCreate(mockTransaction, \"/b\")).thenReturn(mockBinary);\n+        //setResource(Container.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6457a1c76c54720c5417f7d623b311f37c716212"}, "originalPosition": 694}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNDY5Mw==", "bodyText": "Remove dead code.", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434134693", "createdAt": "2020-06-02T19:45:27Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java", "diffHunk": "@@ -1113,16 +1202,27 @@ public void testCreateNewBinaryWithChecksumSHA() throws MalformedRdfException,\n             final Response actual = testObj.createObject(null, requestContentType, \"b\", content, nonRDFSourceLink,\n                 requestSHA);\n             assertEquals(CREATED.getStatusCode(), actual.getStatus());\n-            verify(mockBinary).setContent(content, requestContentType.toString(), shaURI, \"\", null);\n+            verify(createResourceService).perform(\n+                    any(),\n+                    any(),\n+                    eq(finalId),\n+                    eq(requestContentType.toString()),\n+                    eq(\"\"),\n+                    any(),\n+                    eq(nonRDFSourceLink),\n+                    eq(shaURI),\n+                    eq(content),\n+                    eq(null));\n         }\n     }\n \n     @Test\n     public void testCreateNewBinaryWithChecksumSHA256() throws MalformedRdfException,\n-        InvalidChecksumException, IOException, UnsupportedAlgorithmException {\n+        InvalidChecksumException, IOException, UnsupportedAlgorithmException, PathNotFoundException {\n \n-        setResource(Container.class);\n-        // when(mockBinaryService.findOrCreate(mockTransaction, \"/b\")).thenReturn(mockBinary);\n+        //setResource(Container.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6457a1c76c54720c5417f7d623b311f37c716212"}, "originalPosition": 726}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNDgwMw==", "bodyText": "Remove dead code.", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434134803", "createdAt": "2020-06-02T19:45:36Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java", "diffHunk": "@@ -1131,16 +1231,27 @@ public void testCreateNewBinaryWithChecksumSHA256() throws MalformedRdfException\n             final Response actual = testObj.createObject(null, requestContentType, \"b\", content, nonRDFSourceLink,\n                 requestSHA);\n             assertEquals(CREATED.getStatusCode(), actual.getStatus());\n-            verify(mockBinary).setContent(content, requestContentType.toString(), shaURI, \"\", null);\n+            verify(createResourceService).perform(\n+                    any(),\n+                    any(),\n+                    eq(finalId),\n+                    eq(requestContentType.toString()),\n+                    eq(\"\"),\n+                    any(),\n+                    eq(nonRDFSourceLink),\n+                    eq(shaURI),\n+                    eq(content),\n+                    eq(null));\n         }\n     }\n \n     @Test\n     public void testCreateNewBinaryWithChecksumMD5() throws MalformedRdfException,\n-            InvalidChecksumException, IOException, UnsupportedAlgorithmException {\n+            InvalidChecksumException, IOException, UnsupportedAlgorithmException, PathNotFoundException {\n \n-        setResource(Container.class);\n-        // when(mockBinaryService.findOrCreate(mockTransaction, \"/b\")).thenReturn(mockBinary);\n+        //setResource(Container.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6457a1c76c54720c5417f7d623b311f37c716212"}, "originalPosition": 758}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNDg4MA==", "bodyText": "Remove dead code.", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434134880", "createdAt": "2020-06-02T19:45:45Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/FedoraLdpTest.java", "diffHunk": "@@ -1149,16 +1260,27 @@ public void testCreateNewBinaryWithChecksumMD5() throws MalformedRdfException,\n             final Response actual = testObj.createObject(null, requestContentType, \"b\", content, nonRDFSourceLink,\n                 requestMD5);\n             assertEquals(CREATED.getStatusCode(), actual.getStatus());\n-            verify(mockBinary).setContent(content, requestContentType.toString(), md5URI, \"\", null);\n+            verify(createResourceService).perform(\n+                    any(),\n+                    any(),\n+                    eq(finalId),\n+                    eq(requestContentType.toString()),\n+                    eq(\"\"),\n+                    any(),\n+                    eq(nonRDFSourceLink),\n+                    eq(md5URI),\n+                    eq(content),\n+                    eq(null));\n         }\n     }\n \n     @Test\n     public void testCreateNewBinaryWithChecksumSHAandMD5() throws MalformedRdfException,\n-           InvalidChecksumException, IOException, UnsupportedAlgorithmException {\n+           InvalidChecksumException, IOException, UnsupportedAlgorithmException, PathNotFoundException {\n \n-        setResource(Container.class);\n-        // when(mockBinaryService.findOrCreate(mockTransaction, \"/b\")).thenReturn(mockBinary);\n+        //setResource(Container.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6457a1c76c54720c5417f7d623b311f37c716212"}, "originalPosition": 790}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNzU4OQ==", "bodyText": "Maybe change to \"The Fedora resource to purge\"", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434137589", "createdAt": "2020-06-02T19:51:01Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/services/PurgeResourceService.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.services;\n+\n+import org.fcrepo.kernel.api.Transaction;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+\n+/**\n+ * Service to permanently remove a resource from the repository.\n+ *\n+ * @author whikloj\n+ */\n+public interface PurgeResourceService {\n+    /**\n+     * Purges the specified resource\n+     *\n+     * @param tx the transaction associated with the operation\n+     * @param fedoraResource The Fedora resource to delete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6457a1c76c54720c5417f7d623b311f37c716212"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0MDI5NA==", "bodyText": "Can we remove this method? It does not appear to be invoked.", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434140294", "createdAt": "2020-06-02T19:56:12Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/ContainmentIndex.java", "diffHunk": "@@ -47,30 +59,48 @@\n      */\n     String getContainedBy(String txID, final FedoraId resource);\n \n+    /**\n+     * Mark a contained by relation between the child resource and its parent as deleted.\n+     *\n+     * @param txID The transaction ID.\n+     * @param parent The containing resource fedoraID.\n+     * @param child The contained resource fedoraID.\n+     */\n+    void removeContainedBy(@Nonnull final String txID, final FedoraId parent, final FedoraId child);\n+\n+    /**\n+     * Mark all relationships to the specified resource as deleted.\n+     *\n+     * @param txID The transaction ID.\n+     * @param resource The FedoraId of resource to remove.\n+     */\n+    void removeResource(@Nonnull final String txID, final FedoraId resource);\n+\n     /**\n      * Remove a contained by relation between the child resource and its parent.\n      *\n-     * @param txID The transaction ID.  If no transaction, null is okay.\n+     * @param txID The transaction ID.\n      * @param parent The containing resource fedoraID.\n      * @param child The contained resource fedoraID.\n      */\n-    void removeContainedBy(final String txID, final FedoraId parent, final FedoraId child);\n+    void purgeContainedBy(@Nonnull final String txID, final FedoraId parent, final FedoraId child);\n \n     /**\n-     * Remove all relationships to the specified resource.\n-     * @param txID The transaction ID. If no transaction, null is okay.\n+     * Remove all relationships to the specified resource as deleted.\n+     *\n+     * @param txID The transaction ID.\n      * @param resource The FedoraId of resource to remove.\n      */\n-    void removeResource(final String txID, final FedoraId resource);\n+    void purgeResource(@Nonnull final String txID, final FedoraId resource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6457a1c76c54720c5417f7d623b311f37c716212"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MDQ1NA==", "bodyText": "Can be changed to private.", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434160454", "createdAt": "2020-06-02T20:36:28Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/AbstractDeleteResourceService.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.impl.services;\n+\n+import static java.lang.String.format;\n+\n+import javax.inject.Inject;\n+\n+import java.util.stream.Stream;\n+\n+import org.fcrepo.kernel.api.Transaction;\n+import org.fcrepo.kernel.api.exception.PathNotFoundException;\n+import org.fcrepo.kernel.api.exception.PathNotFoundRuntimeException;\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.models.Binary;\n+import org.fcrepo.kernel.api.models.Container;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.models.NonRdfSourceDescription;\n+import org.fcrepo.kernel.api.models.ResourceFactory;\n+import org.fcrepo.persistence.api.PersistentStorageSession;\n+import org.fcrepo.persistence.api.PersistentStorageSessionManager;\n+import org.fcrepo.persistence.api.exceptions.PersistentStorageException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Shared delete/purge code.\n+ * @author whikloj\n+ */\n+abstract public class AbstractDeleteResourceService extends AbstractService {\n+\n+    private final static Logger log = LoggerFactory.getLogger(AbstractDeleteResourceService.class);\n+\n+    @Inject\n+    protected ResourceFactory resourceFactory;\n+\n+    @Inject\n+    protected PersistentStorageSessionManager psManager;\n+\n+    /**\n+     * The starts the service, does initial checks and setups for processing.\n+     * @param tx the transaction.\n+     * @param fedoraResource the resource to start delete/purging.\n+     * @param userPrincipal the user performing the action.\n+     */\n+    public void perform(final Transaction tx, final FedoraResource fedoraResource, final String userPrincipal) {\n+        final String fedoraResourceId = fedoraResource.getId();\n+\n+        if (fedoraResource instanceof NonRdfSourceDescription) {\n+            throw new RepositoryRuntimeException(\n+            format(\"A NonRdfSourceDescription cannot be deleted independently of the NonRDFSource:  %s\",\n+            fedoraResourceId));\n+        }\n+\n+        try {\n+            log.debug(\"operating on {}\", fedoraResourceId);\n+            final PersistentStorageSession pSession = this.psManager.getSession(tx.getId());\n+            deleteDepthFirst(tx, pSession, fedoraResource, userPrincipal);\n+        } catch (final PersistentStorageException ex) {\n+            throw new RepositoryRuntimeException(format(\"failed to delete/purge resource %s\", fedoraResourceId), ex);\n+        }\n+    }\n+\n+    /**\n+     * Code to perform the recursion of containers.\n+     * @param tx the transaction\n+     * @param pSession the persistent storage session\n+     * @param fedoraResource the current resource to check for any children.\n+     * @param userPrincipal the user performing the action.\n+     * @throws PersistentStorageException any problems accessing the underlying storage.\n+     */\n+    protected void deleteDepthFirst(final Transaction tx, final PersistentStorageSession pSession,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6457a1c76c54720c5417f7d623b311f37c716212"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3NTY1Mg==", "bodyText": "Comment for this statement should be updated to include 'deleted' info.", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434175652", "createdAt": "2020-06-02T21:06:41Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -79,13 +82,14 @@\n      */\n     private static final String RESOURCES_TABLE_DDL = \"CREATE TABLE IF NOT EXISTS \" + RESOURCES_TABLE + \" (\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6457a1c76c54720c5417f7d623b311f37c716212"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MDA5OTQz", "url": "https://github.com/fcrepo/fcrepo/pull/1687#pullrequestreview-424009943", "createdAt": "2020-06-03T23:45:59Z", "commit": {"oid": "e6f8f09296b1f7696bcdfedb22a639f738c0727e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo0NTo1OVrOGexLZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMDowMzoyMFrOGexeCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNjE5OA==", "bodyText": "Thanks for this... printing the value of the stmt or stmt.getSubject() would be a little bit more useful.", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434916198", "createdAt": "2020-06-03T23:45:59Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/services/HttpRdfService.java", "diffHunk": "@@ -131,6 +131,8 @@ public Model bodyToInternalModel(final String extResourceId, final InputStream s\n \n                     stmtIterator.remove();\n                 }\n+            } else {\n+                log.debug(\"Subject is not a URI resource, skipping\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6f8f09296b1f7696bcdfedb22a639f738c0727e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNzI0NA==", "bodyText": "Minor (borderline ignorable)... but originalResource = fedoraResource.getOriginalResource(); is indented one space too far.", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434917244", "createdAt": "2020-06-03T23:49:53Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/ContentExposingResource.java", "diffHunk": "@@ -1086,7 +1086,14 @@ public FedoraResource getResourceFromPath(final String externalPath) {\n         try {\n             final FedoraResource fedoraResource = resourceFactory.getResource(transaction(), fedoraId);\n \n-            if (fedoraResource instanceof Tombstone) {\n+            final FedoraResource originalResource;\n+            if (fedoraId.isMemento()) {\n+                 originalResource = fedoraResource.getOriginalResource();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6f8f09296b1f7696bcdfedb22a639f738c0727e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkyMDk2OQ==", "bodyText": "I was hoping that the test entitled: \"Memento of deleted resource still available\" would work given this change. However, following those test steps results in:\nHTTP/1.1 400 Bad Request\nPath is invalid: /binary/fcr:versions/20200603235900/fcr:tombstone", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r434920969", "createdAt": "2020-06-04T00:03:20Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/ContentExposingResource.java", "diffHunk": "@@ -1087,7 +1086,14 @@ public FedoraResource getResourceFromPath(final String externalPath) {\n         try {\n             final FedoraResource fedoraResource = resourceFactory.getResource(transaction(), fedoraId);\n \n-            if (fedoraResource instanceof Tombstone) {\n+            final FedoraResource originalResource;\n+            if (fedoraId.isMemento()) {\n+                 originalResource = fedoraResource.getOriginalResource();\n+            } else {\n+                originalResource = fedoraResource;\n+            }\n+\n+            if (originalResource instanceof Tombstone) {\n                 final String tombstoneUri = identifierConverter().toExternalId(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6f8f09296b1f7696bcdfedb22a639f738c0727e"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDgyNzQw", "url": "https://github.com/fcrepo/fcrepo/pull/1687#pullrequestreview-424482740", "createdAt": "2020-06-04T14:03:31Z", "commit": {"oid": "e6f8f09296b1f7696bcdfedb22a639f738c0727e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowMzozMVrOGfHkaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDowMzozMVrOGfHkaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4MzA0OQ==", "bodyText": "It would be safer if this was executed within a DB transaction because there are cases where you're updating multiple records.", "url": "https://github.com/fcrepo/fcrepo/pull/1687#discussion_r435283049", "createdAt": "2020-06-04T14:03:31Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -280,69 +391,75 @@ public String getContainedBy(final String txID, final FedoraId resource) {\n     }\n \n     @Override\n-    public void addContainedBy(final String txID, final FedoraId parent, final FedoraId child) {\n+    public void addContainedBy(@Nonnull final String txID, final FedoraId parent, final FedoraId child) {\n         final String parentID = parent.getFullId();\n         final String childID = child.getFullId();\n         final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n         parameterSource.addValue(\"parent\", parentID);\n         parameterSource.addValue(\"child\", childID);\n-        if (txID != null) {\n-            parameterSource.addValue(\"transactionId\", txID);\n-            final boolean removedInTxn = !jdbcTemplate.queryForList(IS_CHILD_DELETED_IN_TRANSACTION, parameterSource)\n-                    .isEmpty();\n-            if (removedInTxn) {\n-                jdbcTemplate.update(UNDO_DELETE_CHILD_IN_TRANSACTION, parameterSource);\n-            } else {\n-                jdbcTemplate.update(INSERT_CHILD_IN_TRANSACTION, parameterSource);\n-            }\n+        parameterSource.addValue(\"transactionId\", txID);\n+        final boolean purgedInTxn = !jdbcTemplate.queryForList(IS_CHILD_PURGED_IN_TRANSACTION, parameterSource)\n+                .isEmpty();\n+        if (purgedInTxn) {\n+            // We purged it, but are re-adding it so remove the purge operation.\n+            jdbcTemplate.update(UNDO_PURGE_CHILD_IN_TRANSACTION, parameterSource);\n         } else {\n-            jdbcTemplate.update(INSERT_CHILD, parameterSource);\n+            jdbcTemplate.update(INSERT_CHILD_IN_TRANSACTION, parameterSource);\n         }\n     }\n \n     @Override\n-    public void removeContainedBy(final String txID, final FedoraId parent, final FedoraId child) {\n+    public void removeContainedBy(@Nonnull final String txID, final FedoraId parent, final FedoraId child) {\n         final String parentID = parent.getFullId();\n         final String childID = child.getFullId();\n         final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n         parameterSource.addValue(\"parent\", parentID);\n         parameterSource.addValue(\"child\", childID);\n-        if (txID != null) {\n-            parameterSource.addValue(\"transactionId\", txID);\n-            final boolean addedInTxn = !jdbcTemplate.queryForList(IS_CHILD_ADDED_IN_TRANSACTION, parameterSource)\n-                    .isEmpty();\n-            if (addedInTxn) {\n-                jdbcTemplate.update(UNDO_INSERT_CHILD_IN_TRANSACTION, parameterSource);\n-            } else {\n-                jdbcTemplate.update(DELETE_CHILD_IN_TRANSACTION, parameterSource);\n-            }\n+        parameterSource.addValue(\"transactionId\", txID);\n+        final boolean addedInTxn = !jdbcTemplate.queryForList(IS_CHILD_ADDED_IN_TRANSACTION, parameterSource)\n+                .isEmpty();\n+        if (addedInTxn) {\n+            jdbcTemplate.update(UNDO_INSERT_CHILD_IN_TRANSACTION, parameterSource);\n         } else {\n-            jdbcTemplate.update(DELETE_CHILD, parameterSource);\n+            jdbcTemplate.update(DELETE_CHILD_IN_TRANSACTION, parameterSource);\n         }\n     }\n \n     @Override\n-    public void removeResource(final String txID, final FedoraId resource) {\n+    public void purgeContainedBy(@Nonnull final String txID, final FedoraId parent, final FedoraId child) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6f8f09296b1f7696bcdfedb22a639f738c0727e"}, "originalPosition": 367}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afabc52cd0d01c3d7ea5c4ade5a77df40c14374c", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/afabc52cd0d01c3d7ea5c4ade5a77df40c14374c", "committedDate": "2020-06-05T14:06:23Z", "message": "Purge resources and fix FedoraLdpTests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ab743d90636faa2409e374b34becddf8a761a30", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/9ab743d90636faa2409e374b34becddf8a761a30", "committedDate": "2020-06-05T14:07:56Z", "message": "Code review and add some ITs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a35add6c9421f2949b7a79e399ecea1f3a881c7", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/3a35add6c9421f2949b7a79e399ecea1f3a881c7", "committedDate": "2020-06-05T14:07:56Z", "message": "more code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a50f8d90f06bc3fbd5c8433f0d7b4bcb9dfe6beb", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/a50f8d90f06bc3fbd5c8433f0d7b4bcb9dfe6beb", "committedDate": "2020-06-05T14:19:57Z", "message": "Fix the purging and tombstone access"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c641dc7af08255d46c98e67a2a943ed358e29d04", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/c641dc7af08255d46c98e67a2a943ed358e29d04", "committedDate": "2020-06-05T17:29:52Z", "message": "Changes from rebase"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba016f9396a09e403bb5fb36ec07d5d34e2a2c72", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/ba016f9396a09e403bb5fb36ec07d5d34e2a2c72", "committedDate": "2020-06-04T19:58:46Z", "message": "Fix the purging and tombstone access"}, "afterCommit": {"oid": "c641dc7af08255d46c98e67a2a943ed358e29d04", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/c641dc7af08255d46c98e67a2a943ed358e29d04", "committedDate": "2020-06-05T17:29:52Z", "message": "Changes from rebase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzU0MzM4", "url": "https://github.com/fcrepo/fcrepo/pull/1687#pullrequestreview-425754338", "createdAt": "2020-06-06T17:04:05Z", "commit": {"oid": "c641dc7af08255d46c98e67a2a943ed358e29d04"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NDMwMjM3", "url": "https://github.com/fcrepo/fcrepo/pull/1687#pullrequestreview-426430237", "createdAt": "2020-06-08T16:52:57Z", "commit": {"oid": "c641dc7af08255d46c98e67a2a943ed358e29d04"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3124, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}