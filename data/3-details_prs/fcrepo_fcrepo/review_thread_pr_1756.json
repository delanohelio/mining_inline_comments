{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzMzM4NTQw", "number": 1756, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMToxNDoxNVrOEnmxfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjo1MzoyM1rOEqggkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTY1MTgyOnYy", "diffSide": "RIGHT", "path": "fcrepo-http-commons/src/main/java/org/fcrepo/http/commons/PrometheusMetricsServlet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMToxNDoxNVrOHYSxew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMDozNDo1N1rOHYZYuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIzNTQ1MQ==", "bodyText": "Ouch. No injection possibilities?! :(", "url": "https://github.com/fcrepo/fcrepo/pull/1756#discussion_r495235451", "createdAt": "2020-09-25T21:14:15Z", "author": {"login": "awoods"}, "path": "fcrepo-http-commons/src/main/java/org/fcrepo/http/commons/PrometheusMetricsServlet.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.http.commons;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import io.prometheus.client.exporter.MetricsServlet;\n+import org.springframework.web.context.support.WebApplicationContextUtils;\n+\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletException;\n+\n+/**\n+ * This class is an extension of Prometheus's MetricsServlet. It only exists because there isn't an easy way to\n+ * set the CollectorRegistry on with a Spring bean.\n+ *\n+ * @author pwinckles\n+ */\n+public class PrometheusMetricsServlet extends MetricsServlet {\n+\n+    @Override\n+    public void init(final ServletConfig config) throws ServletException {\n+        final var context = WebApplicationContextUtils\n+                .getRequiredWebApplicationContext(config.getServletContext());\n+        final var collector = context.getBean(CollectorRegistry.class);\n+\n+        try {\n+            final var field = MetricsServlet.class.getDeclaredField(\"registry\");\n+            field.setAccessible(true);\n+            field.set(this, collector);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "381af15e8b0f893dd4b77f05357a36ba1332c51e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM0MzgwMA==", "bodyText": "I'm open to ideas. I don't know of a way of wiring a servlet's constructor because it needs to be instantiated by the container.", "url": "https://github.com/fcrepo/fcrepo/pull/1756#discussion_r495343800", "createdAt": "2020-09-26T00:34:57Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-commons/src/main/java/org/fcrepo/http/commons/PrometheusMetricsServlet.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.http.commons;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import io.prometheus.client.exporter.MetricsServlet;\n+import org.springframework.web.context.support.WebApplicationContextUtils;\n+\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletException;\n+\n+/**\n+ * This class is an extension of Prometheus's MetricsServlet. It only exists because there isn't an easy way to\n+ * set the CollectorRegistry on with a Spring bean.\n+ *\n+ * @author pwinckles\n+ */\n+public class PrometheusMetricsServlet extends MetricsServlet {\n+\n+    @Override\n+    public void init(final ServletConfig config) throws ServletException {\n+        final var context = WebApplicationContextUtils\n+                .getRequiredWebApplicationContext(config.getServletContext());\n+        final var collector = context.getBean(CollectorRegistry.class);\n+\n+        try {\n+            final var field = MetricsServlet.class.getDeclaredField(\"registry\");\n+            field.setAccessible(true);\n+            field.set(this, collector);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIzNTQ1MQ=="}, "originalCommit": {"oid": "381af15e8b0f893dd4b77f05357a36ba1332c51e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTU3NTA5OnYy", "diffSide": "RIGHT", "path": "fcrepo-configs/src/main/java/org/fcrepo/config/MetricsConfig.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjozOToxMVrOHZGyDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjo1NDo1NlrOHZHVqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NzU2Nw==", "bodyText": "Wondering if the default should be false, will most users care about this?", "url": "https://github.com/fcrepo/fcrepo/pull/1756#discussion_r496087567", "createdAt": "2020-09-28T16:39:11Z", "author": {"login": "whikloj"}, "path": "fcrepo-configs/src/main/java/org/fcrepo/config/MetricsConfig.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.fcrepo.config;\n+\n+import io.micrometer.core.instrument.Meter;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Metrics;\n+import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;\n+import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\n+import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;\n+import io.micrometer.core.instrument.binder.system.ProcessorMetrics;\n+import io.micrometer.core.instrument.binder.system.UptimeMetrics;\n+import io.micrometer.core.instrument.config.MeterFilter;\n+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;\n+import io.micrometer.core.instrument.simple.SimpleMeterRegistry;\n+import io.micrometer.prometheus.PrometheusConfig;\n+import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import io.prometheus.client.CollectorRegistry;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import java.time.Duration;\n+\n+/**\n+ * @author pwinckles\n+ */\n+@Configuration\n+public class MetricsConfig {\n+\n+    @Value(\"${fcrepo.metrics.enable:true}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35648865c78761c7e9b8073008eff3e9b70a0582"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5MjMxOQ==", "bodyText": "Yes, I think that is reasonable", "url": "https://github.com/fcrepo/fcrepo/pull/1756#discussion_r496092319", "createdAt": "2020-09-28T16:47:25Z", "author": {"login": "pwinckles"}, "path": "fcrepo-configs/src/main/java/org/fcrepo/config/MetricsConfig.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.fcrepo.config;\n+\n+import io.micrometer.core.instrument.Meter;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Metrics;\n+import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;\n+import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\n+import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;\n+import io.micrometer.core.instrument.binder.system.ProcessorMetrics;\n+import io.micrometer.core.instrument.binder.system.UptimeMetrics;\n+import io.micrometer.core.instrument.config.MeterFilter;\n+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;\n+import io.micrometer.core.instrument.simple.SimpleMeterRegistry;\n+import io.micrometer.prometheus.PrometheusConfig;\n+import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import io.prometheus.client.CollectorRegistry;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import java.time.Duration;\n+\n+/**\n+ * @author pwinckles\n+ */\n+@Configuration\n+public class MetricsConfig {\n+\n+    @Value(\"${fcrepo.metrics.enable:true}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NzU2Nw=="}, "originalCommit": {"oid": "35648865c78761c7e9b8073008eff3e9b70a0582"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5MzQzMw==", "bodyText": "Also, what is the impact (if any) by having this running but not actually using the metrics?", "url": "https://github.com/fcrepo/fcrepo/pull/1756#discussion_r496093433", "createdAt": "2020-09-28T16:49:20Z", "author": {"login": "whikloj"}, "path": "fcrepo-configs/src/main/java/org/fcrepo/config/MetricsConfig.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.fcrepo.config;\n+\n+import io.micrometer.core.instrument.Meter;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Metrics;\n+import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;\n+import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\n+import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;\n+import io.micrometer.core.instrument.binder.system.ProcessorMetrics;\n+import io.micrometer.core.instrument.binder.system.UptimeMetrics;\n+import io.micrometer.core.instrument.config.MeterFilter;\n+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;\n+import io.micrometer.core.instrument.simple.SimpleMeterRegistry;\n+import io.micrometer.prometheus.PrometheusConfig;\n+import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import io.prometheus.client.CollectorRegistry;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import java.time.Duration;\n+\n+/**\n+ * @author pwinckles\n+ */\n+@Configuration\n+public class MetricsConfig {\n+\n+    @Value(\"${fcrepo.metrics.enable:true}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NzU2Nw=="}, "originalCommit": {"oid": "35648865c78761c7e9b8073008eff3e9b70a0582"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NjY4Mg==", "bodyText": "There should not be a difference between collecting the metrics and not using them and collecting the metrics and using them.\nThere is a difference between collecting the metrics and not collecting the metrics, but I cannot approximate the memory and cpu cost.", "url": "https://github.com/fcrepo/fcrepo/pull/1756#discussion_r496096682", "createdAt": "2020-09-28T16:54:56Z", "author": {"login": "pwinckles"}, "path": "fcrepo-configs/src/main/java/org/fcrepo/config/MetricsConfig.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.fcrepo.config;\n+\n+import io.micrometer.core.instrument.Meter;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Metrics;\n+import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;\n+import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\n+import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;\n+import io.micrometer.core.instrument.binder.system.ProcessorMetrics;\n+import io.micrometer.core.instrument.binder.system.UptimeMetrics;\n+import io.micrometer.core.instrument.config.MeterFilter;\n+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;\n+import io.micrometer.core.instrument.simple.SimpleMeterRegistry;\n+import io.micrometer.prometheus.PrometheusConfig;\n+import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import io.prometheus.client.CollectorRegistry;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import java.time.Duration;\n+\n+/**\n+ * @author pwinckles\n+ */\n+@Configuration\n+public class MetricsConfig {\n+\n+    @Value(\"${fcrepo.metrics.enable:true}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NzU2Nw=="}, "originalCommit": {"oid": "35648865c78761c7e9b8073008eff3e9b70a0582"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDA4MjcyOnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraLdp.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjo1MzoyM1rOHcwYBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjo1MzoyM1rOHcwYBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNDc1OQ==", "bodyText": "There are a lot of changes to this file just to add a single annotation: @Timed.\nI would suggest only reformatting code that is being directly changed.", "url": "https://github.com/fcrepo/fcrepo/pull/1756#discussion_r499914759", "createdAt": "2020-10-05T22:53:23Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraLdp.java", "diffHunk": "@@ -17,113 +17,112 @@\n  */\n package org.fcrepo.http.api;\n \n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.micrometer.core.annotation.Timed;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Resource;\n+import org.fcrepo.http.commons.domain.PATCH;\n+import org.fcrepo.kernel.api.FedoraTypes;\n+import org.fcrepo.kernel.api.exception.AccessDeniedException;\n+import org.fcrepo.kernel.api.exception.CannotCreateResourceException;\n+import org.fcrepo.kernel.api.exception.InvalidChecksumException;\n+import org.fcrepo.kernel.api.exception.MalformedRdfException;\n+import org.fcrepo.kernel.api.exception.MementoDatetimeFormatException;\n+import org.fcrepo.kernel.api.exception.PathNotFoundException;\n+import org.fcrepo.kernel.api.exception.PathNotFoundRuntimeException;\n+import org.fcrepo.kernel.api.exception.UnsupportedAlgorithmException;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.models.Binary;\n+import org.fcrepo.kernel.api.models.Container;\n+import org.fcrepo.kernel.api.models.ExternalContent;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.models.NonRdfSourceDescription;\n+import org.fcrepo.kernel.api.services.FixityService;\n+import org.fcrepo.kernel.api.services.ReplaceBinariesService;\n+import org.fcrepo.kernel.api.utils.ContentDigest;\n+import org.glassfish.jersey.media.multipart.ContentDisposition;\n+import org.slf4j.Logger;\n+import org.springframework.context.annotation.Scope;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.ClientErrorException;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.HEAD;\n+import javax.ws.rs.HeaderParam;\n+import javax.ws.rs.OPTIONS;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.Link;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.UriBuilderException;\n+import javax.ws.rs.core.Variant.VariantListBuilder;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n import static com.google.common.base.Strings.isNullOrEmpty;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static javax.ws.rs.core.HttpHeaders.CONTENT_DISPOSITION;\n import static javax.ws.rs.core.HttpHeaders.CONTENT_TYPE;\n import static javax.ws.rs.core.HttpHeaders.LINK;\n import static javax.ws.rs.core.HttpHeaders.LOCATION;\n import static javax.ws.rs.core.MediaType.WILDCARD;\n+import static javax.ws.rs.core.Response.Status.BAD_REQUEST;\n+import static javax.ws.rs.core.Response.Status.FOUND;\n+import static javax.ws.rs.core.Response.Status.METHOD_NOT_ALLOWED;\n+import static javax.ws.rs.core.Response.Status.NOT_ACCEPTABLE;\n import static javax.ws.rs.core.Response.noContent;\n import static javax.ws.rs.core.Response.notAcceptable;\n import static javax.ws.rs.core.Response.ok;\n import static javax.ws.rs.core.Response.status;\n import static javax.ws.rs.core.Response.temporaryRedirect;\n-import static javax.ws.rs.core.Response.Status.BAD_REQUEST;\n-import static javax.ws.rs.core.Response.Status.FOUND;\n-import static javax.ws.rs.core.Response.Status.METHOD_NOT_ALLOWED;\n-import static javax.ws.rs.core.Response.Status.NOT_ACCEPTABLE;\n import static org.apache.commons.lang3.StringUtils.isBlank;\n import static org.apache.http.HttpStatus.SC_BAD_REQUEST;\n import static org.apache.jena.rdf.model.ResourceFactory.createResource;\n import static org.apache.jena.riot.WebContent.contentTypeSPARQLUpdate;\n+import static org.fcrepo.http.commons.domain.RDFMediaType.APPLICATION_OCTET_STREAM_TYPE;\n import static org.fcrepo.http.commons.domain.RDFMediaType.JSON_LD;\n import static org.fcrepo.http.commons.domain.RDFMediaType.N3_ALT2_WITH_CHARSET;\n import static org.fcrepo.http.commons.domain.RDFMediaType.N3_WITH_CHARSET;\n import static org.fcrepo.http.commons.domain.RDFMediaType.NTRIPLES;\n import static org.fcrepo.http.commons.domain.RDFMediaType.RDF_XML;\n import static org.fcrepo.http.commons.domain.RDFMediaType.TEXT_HTML_WITH_CHARSET;\n import static org.fcrepo.http.commons.domain.RDFMediaType.TEXT_PLAIN_WITH_CHARSET;\n+import static org.fcrepo.http.commons.domain.RDFMediaType.TURTLE_TYPE;\n import static org.fcrepo.http.commons.domain.RDFMediaType.TURTLE_WITH_CHARSET;\n import static org.fcrepo.http.commons.domain.RDFMediaType.TURTLE_X;\n-import static org.fcrepo.http.commons.domain.RDFMediaType.TURTLE_TYPE;\n-import static org.fcrepo.http.commons.domain.RDFMediaType.APPLICATION_OCTET_STREAM_TYPE;\n-\n import static org.fcrepo.kernel.api.RdfLexicon.ARCHIVAL_GROUP;\n import static org.fcrepo.kernel.api.RdfLexicon.INTERACTION_MODEL_RESOURCES;\n import static org.fcrepo.kernel.api.RdfLexicon.VERSIONED_RESOURCE;\n import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_RFC_1123_FORMATTER;\n import static org.slf4j.LoggerFactory.getLogger;\n \n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.net.URI;\n-import java.time.Instant;\n-import java.time.format.DateTimeParseException;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import javax.inject.Inject;\n-import javax.ws.rs.BadRequestException;\n-import javax.ws.rs.ClientErrorException;\n-import javax.ws.rs.Consumes;\n-import javax.ws.rs.DELETE;\n-import javax.ws.rs.GET;\n-import javax.ws.rs.HEAD;\n-import javax.ws.rs.HeaderParam;\n-import javax.ws.rs.OPTIONS;\n-import javax.ws.rs.POST;\n-import javax.ws.rs.PUT;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.core.HttpHeaders;\n-import javax.ws.rs.core.Link;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import javax.ws.rs.core.UriBuilderException;\n-import javax.ws.rs.core.Variant.VariantListBuilder;\n-\n-import org.apache.commons.io.IOUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.jena.rdf.model.Model;\n-import org.apache.jena.rdf.model.Resource;\n-import org.fcrepo.http.commons.domain.PATCH;\n-import org.fcrepo.kernel.api.FedoraTypes;\n-import org.fcrepo.kernel.api.exception.AccessDeniedException;\n-import org.fcrepo.kernel.api.exception.CannotCreateResourceException;\n-import org.fcrepo.kernel.api.exception.InvalidChecksumException;\n-import org.fcrepo.kernel.api.exception.MalformedRdfException;\n-import org.fcrepo.kernel.api.exception.MementoDatetimeFormatException;\n-import org.fcrepo.kernel.api.exception.PathNotFoundException;\n-import org.fcrepo.kernel.api.exception.PathNotFoundRuntimeException;\n-import org.fcrepo.kernel.api.exception.UnsupportedAlgorithmException;\n-import org.fcrepo.kernel.api.identifiers.FedoraId;\n-import org.fcrepo.kernel.api.models.Binary;\n-import org.fcrepo.kernel.api.models.Container;\n-import org.fcrepo.kernel.api.models.ExternalContent;\n-import org.fcrepo.kernel.api.models.FedoraResource;\n-import org.fcrepo.kernel.api.models.NonRdfSourceDescription;\n-import org.fcrepo.kernel.api.services.FixityService;\n-import org.fcrepo.kernel.api.services.ReplaceBinariesService;\n-import org.fcrepo.kernel.api.utils.ContentDigest;\n-import org.glassfish.jersey.media.multipart.ContentDisposition;\n-import org.slf4j.Logger;\n-import org.springframework.context.annotation.Scope;\n-\n-import com.google.common.annotations.VisibleForTesting;\n-import com.google.common.base.Splitter;\n-import com.google.common.collect.ImmutableList;\n-\n /**\n  * @author cabeer\n  * @author ajs6f\n  * @since 9/25/14\n  */\n \n+@Timed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18d08363be17e1628fd9f31b40d9bb419e20efb6"}, "originalPosition": 179}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1667, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}