{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyMDM5MDYy", "number": 1804, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDowMDoyN1rOE6B4gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDoxMzoxM1rOE6CPVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjgzNzEzOnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDowMDoyN1rOH02L3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDowMDoyN1rOH02L3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3NTc3Mw==", "bodyText": "I think you might want a ConcurrentLinkedQueue here instead: https://www.baeldung.com/java-queue-linkedblocking-concurrentlinked\nIncidentally, I think your original implementation of the parallelized reindex code would have worked if you'd backed the executor service with a LinkedBlockingQueue. I'm sorry I didn't think of it at the time. :(", "url": "https://github.com/fcrepo/fcrepo/pull/1804#discussion_r525175773", "createdAt": "2020-11-17T14:00:27Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -696,4 +712,38 @@ private Timestamp formatInstant(final Instant instant) {\n         timestamp.setNanos(0);\n         return timestamp;\n     }\n+\n+    /**\n+     * Private class to back a stream with a paged DB query.\n+     *\n+     * If this needs to be run in parallel we will have to override trySplit() and determine a good method to split on.\n+     */\n+    private class ContainmentIterator extends Spliterators.AbstractSpliterator<String> {\n+        final Queue<String> children = new LinkedBlockingQueue<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70d6044537f433e507ba524546a6a49596350e99"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Mjg0NDY1OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDowMjowNlrOH02Qfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDo1MzoxM1rOH04oZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3Njk1OQ==", "bodyText": "Is there a reason to not set the containsLimit parameter here too?\nI see, because there's no reason to set it every time. Perhaps set it in the constructor then?", "url": "https://github.com/fcrepo/fcrepo/pull/1804#discussion_r525176959", "createdAt": "2020-11-17T14:02:06Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -696,4 +712,38 @@ private Timestamp formatInstant(final Instant instant) {\n         timestamp.setNanos(0);\n         return timestamp;\n     }\n+\n+    /**\n+     * Private class to back a stream with a paged DB query.\n+     *\n+     * If this needs to be run in parallel we will have to override trySplit() and determine a good method to split on.\n+     */\n+    private class ContainmentIterator extends Spliterators.AbstractSpliterator<String> {\n+        final Queue<String> children = new LinkedBlockingQueue<>();\n+        final AtomicInteger numOffsets = new AtomicInteger(0);\n+        final String queryToUse;\n+        final MapSqlParameterSource parameterSource;\n+\n+        public ContainmentIterator(final String query, final MapSqlParameterSource parameters) {\n+            super(Long.MAX_VALUE, Spliterator.ORDERED);\n+            queryToUse = query;\n+            parameterSource = parameters;\n+        }\n+\n+        @Override\n+        public boolean tryAdvance(final Consumer<? super String> action) {\n+            try {\n+                action.accept(children.remove());\n+            } catch (final NoSuchElementException e) {\n+                parameterSource.addValue(\"offSet\", numOffsets.getAndIncrement() * containsLimit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70d6044537f433e507ba524546a6a49596350e99"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIxNTg0NQ==", "bodyText": "I was setting it in the calling method where I set all of the other parameters (ie. parent, startTime, child). I can move it into this method if that makes it clearer. But yes, LIMIT is a constant and we just advance the OFFSET parameter.", "url": "https://github.com/fcrepo/fcrepo/pull/1804#discussion_r525215845", "createdAt": "2020-11-17T14:53:13Z", "author": {"login": "whikloj"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -696,4 +712,38 @@ private Timestamp formatInstant(final Instant instant) {\n         timestamp.setNanos(0);\n         return timestamp;\n     }\n+\n+    /**\n+     * Private class to back a stream with a paged DB query.\n+     *\n+     * If this needs to be run in parallel we will have to override trySplit() and determine a good method to split on.\n+     */\n+    private class ContainmentIterator extends Spliterators.AbstractSpliterator<String> {\n+        final Queue<String> children = new LinkedBlockingQueue<>();\n+        final AtomicInteger numOffsets = new AtomicInteger(0);\n+        final String queryToUse;\n+        final MapSqlParameterSource parameterSource;\n+\n+        public ContainmentIterator(final String query, final MapSqlParameterSource parameters) {\n+            super(Long.MAX_VALUE, Spliterator.ORDERED);\n+            queryToUse = query;\n+            parameterSource = parameters;\n+        }\n+\n+        @Override\n+        public boolean tryAdvance(final Consumer<? super String> action) {\n+            try {\n+                action.accept(children.remove());\n+            } catch (final NoSuchElementException e) {\n+                parameterSource.addValue(\"offSet\", numOffsets.getAndIncrement() * containsLimit);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3Njk1OQ=="}, "originalCommit": {"oid": "70d6044537f433e507ba524546a6a49596350e99"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Mjg4OTUwOnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDoxMTo1MVrOH02r-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNTozNTo1M1rOH07NUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE4Mzk5NQ==", "bodyText": "Out of curiosity, does the ordering ever matter? I ask because this implementation is trying to be thread-safe, but I'm not sure if it is entirely. Is it possible that tryAdvance could be called concurrently? If so, then this code will have a race to load the next page. Assuming there are sufficient items remaining, the competing threads will correctly load different pages, but the order they are added to the queue will be non-deterministic.\nAll that to say, I'm not sure if this implementation needs to be thread-safe. I do not believe that we have any code that uses parallel streaming features.", "url": "https://github.com/fcrepo/fcrepo/pull/1804#discussion_r525183995", "createdAt": "2020-11-17T14:11:51Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -696,4 +712,38 @@ private Timestamp formatInstant(final Instant instant) {\n         timestamp.setNanos(0);\n         return timestamp;\n     }\n+\n+    /**\n+     * Private class to back a stream with a paged DB query.\n+     *\n+     * If this needs to be run in parallel we will have to override trySplit() and determine a good method to split on.\n+     */\n+    private class ContainmentIterator extends Spliterators.AbstractSpliterator<String> {\n+        final Queue<String> children = new LinkedBlockingQueue<>();\n+        final AtomicInteger numOffsets = new AtomicInteger(0);\n+        final String queryToUse;\n+        final MapSqlParameterSource parameterSource;\n+\n+        public ContainmentIterator(final String query, final MapSqlParameterSource parameters) {\n+            super(Long.MAX_VALUE, Spliterator.ORDERED);\n+            queryToUse = query;\n+            parameterSource = parameters;\n+        }\n+\n+        @Override\n+        public boolean tryAdvance(final Consumer<? super String> action) {\n+            try {\n+                action.accept(children.remove());\n+            } catch (final NoSuchElementException e) {\n+                parameterSource.addValue(\"offSet\", numOffsets.getAndIncrement() * containsLimit);\n+                children.addAll(jdbcTemplate.queryForList(queryToUse, parameterSource, String.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70d6044537f433e507ba524546a6a49596350e99"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIxNDg0NQ==", "bodyText": "My understanding, which is new, is that to allow your stream to be operated on in parallel you override the trySplit method which handles splitting the stream up into chunks for individual threads.\nIn this case, no we don't operate on it in parallel ever. At least not right now so order is not really important except in that we need the query to generate the same order so our OFFSET and LIMIT work properly.", "url": "https://github.com/fcrepo/fcrepo/pull/1804#discussion_r525214845", "createdAt": "2020-11-17T14:51:59Z", "author": {"login": "whikloj"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -696,4 +712,38 @@ private Timestamp formatInstant(final Instant instant) {\n         timestamp.setNanos(0);\n         return timestamp;\n     }\n+\n+    /**\n+     * Private class to back a stream with a paged DB query.\n+     *\n+     * If this needs to be run in parallel we will have to override trySplit() and determine a good method to split on.\n+     */\n+    private class ContainmentIterator extends Spliterators.AbstractSpliterator<String> {\n+        final Queue<String> children = new LinkedBlockingQueue<>();\n+        final AtomicInteger numOffsets = new AtomicInteger(0);\n+        final String queryToUse;\n+        final MapSqlParameterSource parameterSource;\n+\n+        public ContainmentIterator(final String query, final MapSqlParameterSource parameters) {\n+            super(Long.MAX_VALUE, Spliterator.ORDERED);\n+            queryToUse = query;\n+            parameterSource = parameters;\n+        }\n+\n+        @Override\n+        public boolean tryAdvance(final Consumer<? super String> action) {\n+            try {\n+                action.accept(children.remove());\n+            } catch (final NoSuchElementException e) {\n+                parameterSource.addValue(\"offSet\", numOffsets.getAndIncrement() * containsLimit);\n+                children.addAll(jdbcTemplate.queryForList(queryToUse, parameterSource, String.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE4Mzk5NQ=="}, "originalCommit": {"oid": "70d6044537f433e507ba524546a6a49596350e99"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIyODg1Ng==", "bodyText": "In that case, do we need to use AtomicInteger?", "url": "https://github.com/fcrepo/fcrepo/pull/1804#discussion_r525228856", "createdAt": "2020-11-17T15:08:33Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -696,4 +712,38 @@ private Timestamp formatInstant(final Instant instant) {\n         timestamp.setNanos(0);\n         return timestamp;\n     }\n+\n+    /**\n+     * Private class to back a stream with a paged DB query.\n+     *\n+     * If this needs to be run in parallel we will have to override trySplit() and determine a good method to split on.\n+     */\n+    private class ContainmentIterator extends Spliterators.AbstractSpliterator<String> {\n+        final Queue<String> children = new LinkedBlockingQueue<>();\n+        final AtomicInteger numOffsets = new AtomicInteger(0);\n+        final String queryToUse;\n+        final MapSqlParameterSource parameterSource;\n+\n+        public ContainmentIterator(final String query, final MapSqlParameterSource parameters) {\n+            super(Long.MAX_VALUE, Spliterator.ORDERED);\n+            queryToUse = query;\n+            parameterSource = parameters;\n+        }\n+\n+        @Override\n+        public boolean tryAdvance(final Consumer<? super String> action) {\n+            try {\n+                action.accept(children.remove());\n+            } catch (final NoSuchElementException e) {\n+                parameterSource.addValue(\"offSet\", numOffsets.getAndIncrement() * containsLimit);\n+                children.addAll(jdbcTemplate.queryForList(queryToUse, parameterSource, String.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE4Mzk5NQ=="}, "originalCommit": {"oid": "70d6044537f433e507ba524546a6a49596350e99"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI1ODA2Nw==", "bodyText": "Ohhhhhhhhhh. No, I needed that when I had this class just embedded in the StreamSupport.generate. I can change that to an int", "url": "https://github.com/fcrepo/fcrepo/pull/1804#discussion_r525258067", "createdAt": "2020-11-17T15:35:53Z", "author": {"login": "whikloj"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -696,4 +712,38 @@ private Timestamp formatInstant(final Instant instant) {\n         timestamp.setNanos(0);\n         return timestamp;\n     }\n+\n+    /**\n+     * Private class to back a stream with a paged DB query.\n+     *\n+     * If this needs to be run in parallel we will have to override trySplit() and determine a good method to split on.\n+     */\n+    private class ContainmentIterator extends Spliterators.AbstractSpliterator<String> {\n+        final Queue<String> children = new LinkedBlockingQueue<>();\n+        final AtomicInteger numOffsets = new AtomicInteger(0);\n+        final String queryToUse;\n+        final MapSqlParameterSource parameterSource;\n+\n+        public ContainmentIterator(final String query, final MapSqlParameterSource parameters) {\n+            super(Long.MAX_VALUE, Spliterator.ORDERED);\n+            queryToUse = query;\n+            parameterSource = parameters;\n+        }\n+\n+        @Override\n+        public boolean tryAdvance(final Consumer<? super String> action) {\n+            try {\n+                action.accept(children.remove());\n+            } catch (final NoSuchElementException e) {\n+                parameterSource.addValue(\"offSet\", numOffsets.getAndIncrement() * containsLimit);\n+                children.addAll(jdbcTemplate.queryForList(queryToUse, parameterSource, String.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE4Mzk5NQ=="}, "originalCommit": {"oid": "70d6044537f433e507ba524546a6a49596350e99"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Mjg5NTU5OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDoxMzoxM1rOH02vvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDoxMzoxM1rOH02vvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE4NDk1OQ==", "bodyText": "Is this just for testing purposes? If so, it could probably be package-private and optionally annotated with @VisibleForTesting", "url": "https://github.com/fcrepo/fcrepo/pull/1804#discussion_r525184959", "createdAt": "2020-11-17T14:13:13Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -393,50 +406,56 @@ private NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n         return new NamedParameterJdbcTemplate(getDataSource());\n     }\n \n+    public void setContainsLimit(final int limit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70d6044537f433e507ba524546a6a49596350e99"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1719, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}