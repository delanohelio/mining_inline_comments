{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4ODI3NDIy", "number": 1615, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNDoyNjozNlrODb7vBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzo0Mjo0MFrODcPSCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjE2ODM4OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/ContentExposingResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNDoyNjozNlrOFjsz5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNDoyNjozNlrOFjsz5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk3ODY2Mg==", "bodyText": "space", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r372978662", "createdAt": "2020-01-30T14:26:36Z", "author": {"login": "bbpennel"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/ContentExposingResource.java", "diffHunk": "@@ -660,6 +662,10 @@ protected void addResourceHttpHeaders(final FedoraResource resource) {\n         if (resource instanceof Binary) {\n             servletResponse.addHeader(LINK, \"<\" + LDP_NAMESPACE + \"NonRDFSource>;rel=\\\"type\\\"\");\n         } else if (resource instanceof Container || resource instanceof TimeMap) {\n+            if(resource.hasType(ARCHIVAL_GROUP.getURI())){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjQ3NjAzOnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraLdp.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTo0NTowMVrOFjvzTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTo0NTowMVrOFjvzTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAyNzY2Mg==", "bodyText": "space", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373027662", "createdAt": "2020-01-30T15:45:01Z", "author": {"login": "bbpennel"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraLdp.java", "diffHunk": "@@ -695,6 +701,20 @@ private String handleWantDigestHeader(final Binary binary, final String wantDige\n                 .replaceFirst(\":\", \"=\").replaceFirst(\"sha1=\", \"sha=\")).collect(Collectors.joining(\",\"));\n     }\n \n+    private static void checkArchivalGroupLinkPresent(final List<String> links){\n+        if (links == null) {\n+            return;\n+        }\n+\n+        if(links.stream().map(l -> Link.valueOf(l))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjQ4MDcxOnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraLdp.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTo0NjowOFrOFjv2VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTo0NjowOFrOFjv2VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAyODQzNg==", "bodyText": "space", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373028436", "createdAt": "2020-01-30T15:46:08Z", "author": {"login": "bbpennel"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraLdp.java", "diffHunk": "@@ -704,6 +724,10 @@ private static String checkInteractionModel(final List<String> links) {\n             for (final String link : links) {\n                 final Link linq = Link.valueOf(link);\n                 if (\"type\".equals(linq.getRel())) {\n+                    //skip ArchivalGroup types\n+                    if(linq.getUri().toString().equals(ARCHIVAL_GROUP.getURI())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjQ5MzE4OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraLdp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTo0OToyMFrOFjv-Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzo0MToxNlrOFkLoEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAzMDQ4Mw==", "bodyText": "Could you rename this to represent that it is ensuring that the AG link is NOT present? Might even want to scope it to binaries. Just suggesting this since I was reading it as the opposite of what it does.", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373030483", "createdAt": "2020-01-30T15:49:20Z", "author": {"login": "bbpennel"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraLdp.java", "diffHunk": "@@ -695,6 +701,20 @@ private String handleWantDigestHeader(final Binary binary, final String wantDige\n                 .replaceFirst(\":\", \"=\").replaceFirst(\"sha1=\", \"sha=\")).collect(Collectors.joining(\",\"));\n     }\n \n+    private static void checkArchivalGroupLinkPresent(final List<String> links){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ4MzUzOQ==", "bodyText": "I see you went all in with the new method name :)", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373483539", "createdAt": "2020-01-31T13:41:16Z", "author": {"login": "bbpennel"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraLdp.java", "diffHunk": "@@ -695,6 +701,20 @@ private String handleWantDigestHeader(final Binary binary, final String wantDige\n                 .replaceFirst(\":\", \"=\").replaceFirst(\"sha1=\", \"sha=\")).collect(Collectors.joining(\",\"));\n     }\n \n+    private static void checkArchivalGroupLinkPresent(final List<String> links){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAzMDQ4Mw=="}, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjUwMDUxOnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/AbstractResourceIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTo1MToxOVrOFjwDIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTo1MToxOVrOFjwDIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAzMTcxMg==", "bodyText": "space after for", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373031712", "createdAt": "2020-01-30T15:51:19Z", "author": {"login": "bbpennel"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/AbstractResourceIT.java", "diffHunk": "@@ -419,13 +419,16 @@ protected CloseableHttpResponse createObject(final String pid) {\n         return createObjectWithLinkHeader(pid, null);\n     }\n \n-    private CloseableHttpResponse createObjectWithLinkHeader(final String pid, final String linkHeader) {\n+    private CloseableHttpResponse createObjectWithLinkHeader(final String pid, final String... linkHeaders) {\n         final HttpPost httpPost = postObjMethod(\"/\");\n         if (isNotEmpty(pid)) {\n             httpPost.addHeader(\"Slug\", pid);\n         }\n-        if (isNotEmpty(linkHeader)) {\n-            httpPost.addHeader(LINK, linkHeader);\n+\n+        if (linkHeaders != null && linkHeaders.length > 0) {\n+            for(String linkHeader : linkHeaders){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjUxMDU1OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTo1Mzo1MlrOFjwJXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTo1Mzo1MlrOFjwJXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAzMzMwOQ==", "bodyText": "remove \"LDP\" here and in the other tests, its in the fcrepo namespace", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373033309", "createdAt": "2020-01-30T15:53:52Z", "author": {"login": "bbpennel"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "diffHunk": "@@ -284,6 +287,99 @@ public void testHeadBasicContainer() throws IOException {\n         }\n     }\n \n+    @Test\n+    public void testCreateArchivalGroup() throws Exception {\n+        final var id = getRandomUniqueId();\n+        final var childId = id + \"/child\";\n+        final var grandChildId = childId + \"/grandchild\";\n+\n+        createObjectAndClose(id, BASIC_CONTAINER_LINK_HEADER, ARCHIVAL_GROUP_LINK_HEADER);\n+\n+        final var headObjMethod = headObjMethod(id);\n+        try (final CloseableHttpResponse response = execute(headObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP ArchivalGroup link header!\", links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+        }\n+\n+\n+        executeAndClose(putObjMethod(childId, \"text/turtle\", \"<> a <http://example.com/Foo> .\"));\n+\n+        final var childHeadObjMethod = headObjMethod(childId);\n+        try (final CloseableHttpResponse response = execute(childHeadObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+            assertFalse(\"Unexpectedly found LDP ArchivalGroup link header!\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjUxOTYzOnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTo1NjoxMFrOFjwPHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjoxMzo0NFrOFj7ryA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAzNDc4Mg==", "bodyText": "I feel like this might be too low level of a check for FedoraLdpIT, it should be interacting against the fedora API.", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373034782", "createdAt": "2020-01-30T15:56:10Z", "author": {"login": "bbpennel"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "diffHunk": "@@ -284,6 +287,99 @@ public void testHeadBasicContainer() throws IOException {\n         }\n     }\n \n+    @Test\n+    public void testCreateArchivalGroup() throws Exception {\n+        final var id = getRandomUniqueId();\n+        final var childId = id + \"/child\";\n+        final var grandChildId = childId + \"/grandchild\";\n+\n+        createObjectAndClose(id, BASIC_CONTAINER_LINK_HEADER, ARCHIVAL_GROUP_LINK_HEADER);\n+\n+        final var headObjMethod = headObjMethod(id);\n+        try (final CloseableHttpResponse response = execute(headObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP ArchivalGroup link header!\", links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+        }\n+\n+\n+        executeAndClose(putObjMethod(childId, \"text/turtle\", \"<> a <http://example.com/Foo> .\"));\n+\n+        final var childHeadObjMethod = headObjMethod(childId);\n+        try (final CloseableHttpResponse response = execute(childHeadObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+            assertFalse(\"Unexpectedly found LDP ArchivalGroup link header!\",\n+                    links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+        }\n+\n+        executeAndClose(putObjMethod(grandChildId, \"text/turtle\", \"<> a <http://example.com/Foo> .\"));\n+\n+        final var grandChildHeadObjMethod = headObjMethod(grandChildId);\n+        try (final CloseableHttpResponse response = execute(grandChildHeadObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+            assertFalse(\"Unexpectedly found LDP ArchivalGroup link header!\",\n+                    links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+        }\n+\n+        final var ocflObjectSessionFactory = new DefaultOCFLObjectSessionFactory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyMjM0NA==", "bodyText": "I'm open to that.", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373222344", "createdAt": "2020-01-30T22:13:44Z", "author": {"login": "dbernstein"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "diffHunk": "@@ -284,6 +287,99 @@ public void testHeadBasicContainer() throws IOException {\n         }\n     }\n \n+    @Test\n+    public void testCreateArchivalGroup() throws Exception {\n+        final var id = getRandomUniqueId();\n+        final var childId = id + \"/child\";\n+        final var grandChildId = childId + \"/grandchild\";\n+\n+        createObjectAndClose(id, BASIC_CONTAINER_LINK_HEADER, ARCHIVAL_GROUP_LINK_HEADER);\n+\n+        final var headObjMethod = headObjMethod(id);\n+        try (final CloseableHttpResponse response = execute(headObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP ArchivalGroup link header!\", links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+        }\n+\n+\n+        executeAndClose(putObjMethod(childId, \"text/turtle\", \"<> a <http://example.com/Foo> .\"));\n+\n+        final var childHeadObjMethod = headObjMethod(childId);\n+        try (final CloseableHttpResponse response = execute(childHeadObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+            assertFalse(\"Unexpectedly found LDP ArchivalGroup link header!\",\n+                    links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+        }\n+\n+        executeAndClose(putObjMethod(grandChildId, \"text/turtle\", \"<> a <http://example.com/Foo> .\"));\n+\n+        final var grandChildHeadObjMethod = headObjMethod(grandChildId);\n+        try (final CloseableHttpResponse response = execute(grandChildHeadObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+            assertFalse(\"Unexpectedly found LDP ArchivalGroup link header!\",\n+                    links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+        }\n+\n+        final var ocflObjectSessionFactory = new DefaultOCFLObjectSessionFactory();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAzNDc4Mg=="}, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzAwNjM2OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoyMDo0OFrOFj1Dow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoyMDo0OFrOFj1Dow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExMzc2Mw==", "bodyText": "My understanding is that text/plain is considered a RDF type in fedora, for instance if I do:\ncurl -ufedoraAdmin:fedoraAdmin -XPUT -H\"Content-type: text/plain\" --data-binary \"@text.txt\" http://localhost:8080/rest/somebinary\nI get\nRDF was not parsable: [line: 1, col: 7 ] Bad character in IRI (space): <?xml[space]...>\nIf you step through @post, you can see that it is picking this up as a container creation request. It is returning 400 because the body of the request is not valid RDF, rather than because of the AG type.\nThe easiest way to fix this would be to provide the NonRdfSource link header, or use a different content type.", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373113763", "createdAt": "2020-01-30T18:20:48Z", "author": {"login": "bbpennel"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "diffHunk": "@@ -284,6 +287,99 @@ public void testHeadBasicContainer() throws IOException {\n         }\n     }\n \n+    @Test\n+    public void testCreateArchivalGroup() throws Exception {\n+        final var id = getRandomUniqueId();\n+        final var childId = id + \"/child\";\n+        final var grandChildId = childId + \"/grandchild\";\n+\n+        createObjectAndClose(id, BASIC_CONTAINER_LINK_HEADER, ARCHIVAL_GROUP_LINK_HEADER);\n+\n+        final var headObjMethod = headObjMethod(id);\n+        try (final CloseableHttpResponse response = execute(headObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP ArchivalGroup link header!\", links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+        }\n+\n+\n+        executeAndClose(putObjMethod(childId, \"text/turtle\", \"<> a <http://example.com/Foo> .\"));\n+\n+        final var childHeadObjMethod = headObjMethod(childId);\n+        try (final CloseableHttpResponse response = execute(childHeadObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+            assertFalse(\"Unexpectedly found LDP ArchivalGroup link header!\",\n+                    links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+        }\n+\n+        executeAndClose(putObjMethod(grandChildId, \"text/turtle\", \"<> a <http://example.com/Foo> .\"));\n+\n+        final var grandChildHeadObjMethod = headObjMethod(grandChildId);\n+        try (final CloseableHttpResponse response = execute(grandChildHeadObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+            assertFalse(\"Unexpectedly found LDP ArchivalGroup link header!\",\n+                    links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+        }\n+\n+        final var ocflObjectSessionFactory = new DefaultOCFLObjectSessionFactory();\n+        final var session = ocflObjectSessionFactory.create(id, null);\n+        session.read(id + \".nt\");\n+        session.read(\"child.nt\");\n+        session.read(\"child/grandchild.nt\");\n+    }\n+\n+    @Test\n+    public void testCreateArchivalGroupWithinAnArchivalGroupFails() throws Exception {\n+        final var id = getRandomUniqueId();\n+        final var childId = id + \"/child\";\n+\n+        createObjectAndClose(id, BASIC_CONTAINER_LINK_HEADER, ARCHIVAL_GROUP_LINK_HEADER);\n+\n+        final var headObjMethod = headObjMethod(id);\n+        try (final CloseableHttpResponse response = execute(headObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP ArchivalGroup link header!\", links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+        }\n+\n+        final var putObjMethod = putObjMethod(childId, \"text/turtle\", \"<> a <http://example.com/Foo> .\");\n+        putObjMethod.setHeader(\"Link\", ARCHIVAL_GROUP_LINK_HEADER);\n+        try (final CloseableHttpResponse response = execute(putObjMethod)) {\n+            assertEquals(\"Expected Conflict response\", CONFLICT.getStatusCode(),\n+                    response.getStatusLine().getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateBinaryAsArchivalGroupWithPostFails() throws Exception {\n+        final var id = getRandomUniqueId();\n+        final var postMethod = postObjMethod(id);\n+        postMethod.setEntity(new StringEntity(\"test\"));\n+        postMethod.addHeader(\"Link\", ARCHIVAL_GROUP_LINK_HEADER);\n+        postMethod.addHeader(\"Content-Type\", \"text/plain\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzAwNzU1OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoyMTowOFrOFj1EUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoyMTowOFrOFj1EUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExMzkzNw==", "bodyText": "This probably has the same issue as the previous test", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373113937", "createdAt": "2020-01-30T18:21:08Z", "author": {"login": "bbpennel"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "diffHunk": "@@ -284,6 +287,99 @@ public void testHeadBasicContainer() throws IOException {\n         }\n     }\n \n+    @Test\n+    public void testCreateArchivalGroup() throws Exception {\n+        final var id = getRandomUniqueId();\n+        final var childId = id + \"/child\";\n+        final var grandChildId = childId + \"/grandchild\";\n+\n+        createObjectAndClose(id, BASIC_CONTAINER_LINK_HEADER, ARCHIVAL_GROUP_LINK_HEADER);\n+\n+        final var headObjMethod = headObjMethod(id);\n+        try (final CloseableHttpResponse response = execute(headObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP ArchivalGroup link header!\", links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+        }\n+\n+\n+        executeAndClose(putObjMethod(childId, \"text/turtle\", \"<> a <http://example.com/Foo> .\"));\n+\n+        final var childHeadObjMethod = headObjMethod(childId);\n+        try (final CloseableHttpResponse response = execute(childHeadObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+            assertFalse(\"Unexpectedly found LDP ArchivalGroup link header!\",\n+                    links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+        }\n+\n+        executeAndClose(putObjMethod(grandChildId, \"text/turtle\", \"<> a <http://example.com/Foo> .\"));\n+\n+        final var grandChildHeadObjMethod = headObjMethod(grandChildId);\n+        try (final CloseableHttpResponse response = execute(grandChildHeadObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+            assertFalse(\"Unexpectedly found LDP ArchivalGroup link header!\",\n+                    links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+        }\n+\n+        final var ocflObjectSessionFactory = new DefaultOCFLObjectSessionFactory();\n+        final var session = ocflObjectSessionFactory.create(id, null);\n+        session.read(id + \".nt\");\n+        session.read(\"child.nt\");\n+        session.read(\"child/grandchild.nt\");\n+    }\n+\n+    @Test\n+    public void testCreateArchivalGroupWithinAnArchivalGroupFails() throws Exception {\n+        final var id = getRandomUniqueId();\n+        final var childId = id + \"/child\";\n+\n+        createObjectAndClose(id, BASIC_CONTAINER_LINK_HEADER, ARCHIVAL_GROUP_LINK_HEADER);\n+\n+        final var headObjMethod = headObjMethod(id);\n+        try (final CloseableHttpResponse response = execute(headObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP ArchivalGroup link header!\", links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+        }\n+\n+        final var putObjMethod = putObjMethod(childId, \"text/turtle\", \"<> a <http://example.com/Foo> .\");\n+        putObjMethod.setHeader(\"Link\", ARCHIVAL_GROUP_LINK_HEADER);\n+        try (final CloseableHttpResponse response = execute(putObjMethod)) {\n+            assertEquals(\"Expected Conflict response\", CONFLICT.getStatusCode(),\n+                    response.getStatusLine().getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateBinaryAsArchivalGroupWithPostFails() throws Exception {\n+        final var id = getRandomUniqueId();\n+        final var postMethod = postObjMethod(id);\n+        postMethod.setEntity(new StringEntity(\"test\"));\n+        postMethod.addHeader(\"Link\", ARCHIVAL_GROUP_LINK_HEADER);\n+        postMethod.addHeader(\"Content-Type\", \"text/plain\");\n+\n+        try (final CloseableHttpResponse response = execute(postMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertEquals(\"Expected Bad Request response\", BAD_REQUEST.getStatusCode(),\n+                    response.getStatusLine().getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateBinaryAsArchivalGroupWithPutFails() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzAwODA1OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoyMToxN1rOFj1Epg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoyMToxN1rOFj1Epg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExNDAyMg==", "bodyText": "this variable isn't used", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373114022", "createdAt": "2020-01-30T18:21:17Z", "author": {"login": "bbpennel"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "diffHunk": "@@ -284,6 +287,99 @@ public void testHeadBasicContainer() throws IOException {\n         }\n     }\n \n+    @Test\n+    public void testCreateArchivalGroup() throws Exception {\n+        final var id = getRandomUniqueId();\n+        final var childId = id + \"/child\";\n+        final var grandChildId = childId + \"/grandchild\";\n+\n+        createObjectAndClose(id, BASIC_CONTAINER_LINK_HEADER, ARCHIVAL_GROUP_LINK_HEADER);\n+\n+        final var headObjMethod = headObjMethod(id);\n+        try (final CloseableHttpResponse response = execute(headObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP ArchivalGroup link header!\", links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+        }\n+\n+\n+        executeAndClose(putObjMethod(childId, \"text/turtle\", \"<> a <http://example.com/Foo> .\"));\n+\n+        final var childHeadObjMethod = headObjMethod(childId);\n+        try (final CloseableHttpResponse response = execute(childHeadObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+            assertFalse(\"Unexpectedly found LDP ArchivalGroup link header!\",\n+                    links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+        }\n+\n+        executeAndClose(putObjMethod(grandChildId, \"text/turtle\", \"<> a <http://example.com/Foo> .\"));\n+\n+        final var grandChildHeadObjMethod = headObjMethod(grandChildId);\n+        try (final CloseableHttpResponse response = execute(grandChildHeadObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+            assertFalse(\"Unexpectedly found LDP ArchivalGroup link header!\",\n+                    links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+        }\n+\n+        final var ocflObjectSessionFactory = new DefaultOCFLObjectSessionFactory();\n+        final var session = ocflObjectSessionFactory.create(id, null);\n+        session.read(id + \".nt\");\n+        session.read(\"child.nt\");\n+        session.read(\"child/grandchild.nt\");\n+    }\n+\n+    @Test\n+    public void testCreateArchivalGroupWithinAnArchivalGroupFails() throws Exception {\n+        final var id = getRandomUniqueId();\n+        final var childId = id + \"/child\";\n+\n+        createObjectAndClose(id, BASIC_CONTAINER_LINK_HEADER, ARCHIVAL_GROUP_LINK_HEADER);\n+\n+        final var headObjMethod = headObjMethod(id);\n+        try (final CloseableHttpResponse response = execute(headObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP ArchivalGroup link header!\", links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+        }\n+\n+        final var putObjMethod = putObjMethod(childId, \"text/turtle\", \"<> a <http://example.com/Foo> .\");\n+        putObjMethod.setHeader(\"Link\", ARCHIVAL_GROUP_LINK_HEADER);\n+        try (final CloseableHttpResponse response = execute(putObjMethod)) {\n+            assertEquals(\"Expected Conflict response\", CONFLICT.getStatusCode(),\n+                    response.getStatusLine().getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateBinaryAsArchivalGroupWithPostFails() throws Exception {\n+        final var id = getRandomUniqueId();\n+        final var postMethod = postObjMethod(id);\n+        postMethod.setEntity(new StringEntity(\"test\"));\n+        postMethod.addHeader(\"Link\", ARCHIVAL_GROUP_LINK_HEADER);\n+        postMethod.addHeader(\"Content-Type\", \"text/plain\");\n+\n+        try (final CloseableHttpResponse response = execute(postMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzAxMjY0OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoyMjozNlrOFj1HeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoyMjozNlrOFj1HeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExNDc0NQ==", "bodyText": "variable is not used", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373114745", "createdAt": "2020-01-30T18:22:36Z", "author": {"login": "bbpennel"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "diffHunk": "@@ -284,6 +287,99 @@ public void testHeadBasicContainer() throws IOException {\n         }\n     }\n \n+    @Test\n+    public void testCreateArchivalGroup() throws Exception {\n+        final var id = getRandomUniqueId();\n+        final var childId = id + \"/child\";\n+        final var grandChildId = childId + \"/grandchild\";\n+\n+        createObjectAndClose(id, BASIC_CONTAINER_LINK_HEADER, ARCHIVAL_GROUP_LINK_HEADER);\n+\n+        final var headObjMethod = headObjMethod(id);\n+        try (final CloseableHttpResponse response = execute(headObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP ArchivalGroup link header!\", links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+        }\n+\n+\n+        executeAndClose(putObjMethod(childId, \"text/turtle\", \"<> a <http://example.com/Foo> .\"));\n+\n+        final var childHeadObjMethod = headObjMethod(childId);\n+        try (final CloseableHttpResponse response = execute(childHeadObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+            assertFalse(\"Unexpectedly found LDP ArchivalGroup link header!\",\n+                    links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+        }\n+\n+        executeAndClose(putObjMethod(grandChildId, \"text/turtle\", \"<> a <http://example.com/Foo> .\"));\n+\n+        final var grandChildHeadObjMethod = headObjMethod(grandChildId);\n+        try (final CloseableHttpResponse response = execute(grandChildHeadObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+            assertFalse(\"Unexpectedly found LDP ArchivalGroup link header!\",\n+                    links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+        }\n+\n+        final var ocflObjectSessionFactory = new DefaultOCFLObjectSessionFactory();\n+        final var session = ocflObjectSessionFactory.create(id, null);\n+        session.read(id + \".nt\");\n+        session.read(\"child.nt\");\n+        session.read(\"child/grandchild.nt\");\n+    }\n+\n+    @Test\n+    public void testCreateArchivalGroupWithinAnArchivalGroupFails() throws Exception {\n+        final var id = getRandomUniqueId();\n+        final var childId = id + \"/child\";\n+\n+        createObjectAndClose(id, BASIC_CONTAINER_LINK_HEADER, ARCHIVAL_GROUP_LINK_HEADER);\n+\n+        final var headObjMethod = headObjMethod(id);\n+        try (final CloseableHttpResponse response = execute(headObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP ArchivalGroup link header!\", links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+        }\n+\n+        final var putObjMethod = putObjMethod(childId, \"text/turtle\", \"<> a <http://example.com/Foo> .\");\n+        putObjMethod.setHeader(\"Link\", ARCHIVAL_GROUP_LINK_HEADER);\n+        try (final CloseableHttpResponse response = execute(putObjMethod)) {\n+            assertEquals(\"Expected Conflict response\", CONFLICT.getStatusCode(),\n+                    response.getStatusLine().getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateBinaryAsArchivalGroupWithPostFails() throws Exception {\n+        final var id = getRandomUniqueId();\n+        final var postMethod = postObjMethod(id);\n+        postMethod.setEntity(new StringEntity(\"test\"));\n+        postMethod.addHeader(\"Link\", ARCHIVAL_GROUP_LINK_HEADER);\n+        postMethod.addHeader(\"Content-Type\", \"text/plain\");\n+\n+        try (final CloseableHttpResponse response = execute(postMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertEquals(\"Expected Bad Request response\", BAD_REQUEST.getStatusCode(),\n+                    response.getStatusLine().getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateBinaryAsArchivalGroupWithPutFails() throws Exception {\n+        final var id = getRandomUniqueId();\n+        final var putMethod = putObjMethod(id, \"text/plain\", \"testcontent\");\n+        putMethod.addHeader(\"Link\", ARCHIVAL_GROUP_LINK_HEADER);\n+\n+        try (final CloseableHttpResponse response = execute(putMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzAxOTE0OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/operations/CreateRdfSourceOperationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoyNDo1MFrOFj1LvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoyNDo1MFrOFj1LvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExNTgzNw==", "bodyText": "\"this resource as an Archival Group\"", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373115837", "createdAt": "2020-01-30T18:24:50Z", "author": {"login": "bbpennel"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/operations/CreateRdfSourceOperationBuilder.java", "diffHunk": "@@ -38,4 +38,11 @@\n      * @return the builder\n      */\n     CreateRdfSourceOperationBuilder parentId(String parentId);\n+\n+    /**\n+     * Indicates that this resource should be created as an Archival Group\n+     * @param flag if true, this operation should create this resource Archival Group", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzAyMDk2OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/FedoraResourceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoyNToyOFrOFj1M6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoyNToyOFrOFj1M6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExNjEzNg==", "bodyText": "space", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373116136", "createdAt": "2020-01-30T18:25:28Z", "author": {"login": "bbpennel"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/FedoraResourceImpl.java", "diffHunk": "@@ -169,16 +171,19 @@ public Instant getLastModifiedDate() {\n \n     @Override\n     public boolean hasType(final String type) {\n-        // TODO Auto-generated method stub\n-        return false;\n+        return getTypes().contains(create(type));\n     }\n \n     @Override\n     public List<URI> getTypes() {\n         if (types == null) {\n             types = new ArrayList<URI>();\n             try {\n-                types.add(URI.create(getSession().getHeaders(getId(), getMementoDatetime()).getInteractionModel()));\n+                final var headers = getSession().getHeaders(getId(), getMementoDatetime());\n+                types.add(create(headers.getInteractionModel()));\n+                if(headers.isArchivalGroup()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzA3MzU5OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODo0MzoxNVrOFj1vfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODo0MzoxNVrOFj1vfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEyNDk4OA==", "bodyText": "I'd suggest switching this line to\nfinal List<String> rdfTypes = isEmpty(linkHeaders) ? Collections.emptyList() : getTypes(linkHeaders);\nthis will resolve the parameterization warnings", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373124988", "createdAt": "2020-01-30T18:43:15Z", "author": {"login": "bbpennel"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImpl.java", "diffHunk": "@@ -145,16 +150,20 @@ public String perform(final String txId, final String userPrincipal, final Strin\n         checkParent(pSession, parentId);\n         final String fullPath = isContained ? getResourcePath(pSession, fedoraId, slug) : fedoraId;\n \n-        final String interactionModel = determineInteractionModel(getTypes(linkHeaders), true,\n+        final var rdfTypes = isEmpty(linkHeaders) ?  Collections.EMPTY_LIST: getTypes(linkHeaders);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzA3ODYyOnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODo0NDo1N1rOFj1y9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODo0NDo1N1rOFj1y9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEyNTg3OA==", "bodyText": "If you update CreateRdfSourceOperationBuilder to override relaxedProperties like it does the other properties in there (it should be there for consistency anyways), then you could get back a CreateRdfSourceOperationBuilder directly and not need to cast down below. You could probably also use var here, but that doesn't matter too much.", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373125878", "createdAt": "2020-01-30T18:44:57Z", "author": {"login": "bbpennel"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImpl.java", "diffHunk": "@@ -145,16 +150,20 @@ public String perform(final String txId, final String userPrincipal, final Strin\n         checkParent(pSession, parentId);\n         final String fullPath = isContained ? getResourcePath(pSession, fedoraId, slug) : fedoraId;\n \n-        final String interactionModel = determineInteractionModel(getTypes(linkHeaders), true,\n+        final var rdfTypes = isEmpty(linkHeaders) ?  Collections.EMPTY_LIST: getTypes(linkHeaders);\n+        final String interactionModel = determineInteractionModel(rdfTypes, true,\n                 model != null, false);\n \n         final RdfStream stream = fromModel(model.getResource(fedoraId).asNode(), model);\n \n-        final ResourceOperation createOp = rdfSourceOperationFactory.createBuilder(fullPath, interactionModel)\n+        final RdfSourceOperationBuilder builder = rdfSourceOperationFactory.createBuilder(fullPath, interactionModel)\n                 .parentId(parentId)\n                 .triples(stream)\n-                .relaxedProperties(model)\n-                .build();\n+                .relaxedProperties(model);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzA4MzM5OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODo0NjoyOFrOFj12DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODo0NjoyOFrOFj12DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEyNjY2OA==", "bodyText": "This could produce an NPE since the getTypes at line 153 can return null if no link headers are present", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373126668", "createdAt": "2020-01-30T18:46:28Z", "author": {"login": "bbpennel"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImpl.java", "diffHunk": "@@ -145,16 +150,20 @@ public String perform(final String txId, final String userPrincipal, final Strin\n         checkParent(pSession, parentId);\n         final String fullPath = isContained ? getResourcePath(pSession, fedoraId, slug) : fedoraId;\n \n-        final String interactionModel = determineInteractionModel(getTypes(linkHeaders), true,\n+        final var rdfTypes = isEmpty(linkHeaders) ?  Collections.EMPTY_LIST: getTypes(linkHeaders);\n+        final String interactionModel = determineInteractionModel(rdfTypes, true,\n                 model != null, false);\n \n         final RdfStream stream = fromModel(model.getResource(fedoraId).asNode(), model);\n \n-        final ResourceOperation createOp = rdfSourceOperationFactory.createBuilder(fullPath, interactionModel)\n+        final RdfSourceOperationBuilder builder = rdfSourceOperationFactory.createBuilder(fullPath, interactionModel)\n                 .parentId(parentId)\n                 .triples(stream)\n-                .relaxedProperties(model)\n-                .build();\n+                .relaxedProperties(model);\n+\n+        final RdfSourceOperation createOp = ((CreateRdfSourceOperationBuilder)builder)\n+                                                .archivalGroup(rdfTypes.contains(ARCHIVAL_GROUP.getURI()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzA5NzIxOnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/operations/CreateRdfSourceOperationBuilderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODo1MTowMlrOFj1_Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODo1MTowMlrOFj1_Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEyOTAyMg==", "bodyText": "I'd suggest updating CreateRdfSourceOperationBuilder to override build() to have a return type of CreateRdfSourceOperation instead. You can see any example of this in NonRdfSourceOperationBuilder\nAlso, there's an extra space after the ='s here and in the next test.", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373129022", "createdAt": "2020-01-30T18:51:02Z", "author": {"login": "bbpennel"}, "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/operations/CreateRdfSourceOperationBuilderTest.java", "diffHunk": "@@ -155,6 +156,19 @@ public void testRelaxedPropertiesNoProperties() {\n         assertNull(op.getLastModifiedDate());\n     }\n \n+    @Test\n+    public void testArchivalGroupFalseByDefault() {\n+        final CreateRdfSourceOperation op =  (CreateRdfSourceOperation)builder.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzExNTIzOnYy", "diffSide": "RIGHT", "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/AbstractPersister.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODo1NjozM1rOFj2KTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjo1ODowNFrOFj8tkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzMTg1NA==", "bodyText": "is there a valid case when operation.getResourceId() would be null?", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373131854", "createdAt": "2020-01-30T18:56:33Z", "author": {"login": "bbpennel"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/AbstractPersister.java", "diffHunk": "@@ -116,18 +120,45 @@ protected FedoraOCFLMapping getMapping(final String resourceId) throws Persisten\n     protected String resolveRootObjectId(final CreateResourceOperation operation,\n                                        final OCFLPersistentStorageSession session) {\n \n-        final var parentId = operation.getParentId();\n         final var resourceId = operation.getResourceId();\n-        //final ResourceHeaders headers = session.getHeaders(parentId, null);\n-        final boolean parentIsAg  = false; // TODO uncomment when headers.isAchivalGroup() is available\n-        if (parentIsAg) {\n-            return parentId;\n+        //is resource or any parent an archival group?\n+        final var startingResourceId = operation.getType().equals(CREATE) ? operation.getParentId() : resourceId;\n+        final var archivalGroupId = findArchivalGroupInAncestry(startingResourceId, session);\n+\n+        if (archivalGroupId != null) {\n+            return archivalGroupId;\n         } else if (resourceId.endsWith(\"/\" + FCR_METADATA) || resourceId.endsWith(\"/\" + FCR_ACL)) {\n             return resourceId.substring(0, resourceId.lastIndexOf(\"/\"));\n         } else {\n             return resourceId;\n         }\n+}\n+\n+    protected String findArchivalGroupInAncestry(final String resourceId, final OCFLPersistentStorageSession session) {\n+            if (resourceId == null || resourceId.endsWith(FEDORA_ID_PREFIX)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzOTE4Ng==", "bodyText": "I suppose not.", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373239186", "createdAt": "2020-01-30T22:58:04Z", "author": {"login": "dbernstein"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/AbstractPersister.java", "diffHunk": "@@ -116,18 +120,45 @@ protected FedoraOCFLMapping getMapping(final String resourceId) throws Persisten\n     protected String resolveRootObjectId(final CreateResourceOperation operation,\n                                        final OCFLPersistentStorageSession session) {\n \n-        final var parentId = operation.getParentId();\n         final var resourceId = operation.getResourceId();\n-        //final ResourceHeaders headers = session.getHeaders(parentId, null);\n-        final boolean parentIsAg  = false; // TODO uncomment when headers.isAchivalGroup() is available\n-        if (parentIsAg) {\n-            return parentId;\n+        //is resource or any parent an archival group?\n+        final var startingResourceId = operation.getType().equals(CREATE) ? operation.getParentId() : resourceId;\n+        final var archivalGroupId = findArchivalGroupInAncestry(startingResourceId, session);\n+\n+        if (archivalGroupId != null) {\n+            return archivalGroupId;\n         } else if (resourceId.endsWith(\"/\" + FCR_METADATA) || resourceId.endsWith(\"/\" + FCR_ACL)) {\n             return resourceId.substring(0, resourceId.lastIndexOf(\"/\"));\n         } else {\n             return resourceId;\n         }\n+}\n+\n+    protected String findArchivalGroupInAncestry(final String resourceId, final OCFLPersistentStorageSession session) {\n+            if (resourceId == null || resourceId.endsWith(FEDORA_ID_PREFIX)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzMTg1NA=="}, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzE0ODU0OnYy", "diffSide": "RIGHT", "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/AbstractPersister.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTowNjoyMFrOFj2e4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTowNjoyMFrOFj2e4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzNzEyMQ==", "bodyText": "What is the scenario in which this would be thrown? It might be good to document why its okay for the resource to now be found.", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373137121", "createdAt": "2020-01-30T19:06:20Z", "author": {"login": "bbpennel"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/AbstractPersister.java", "diffHunk": "@@ -116,18 +120,45 @@ protected FedoraOCFLMapping getMapping(final String resourceId) throws Persisten\n     protected String resolveRootObjectId(final CreateResourceOperation operation,\n                                        final OCFLPersistentStorageSession session) {\n \n-        final var parentId = operation.getParentId();\n         final var resourceId = operation.getResourceId();\n-        //final ResourceHeaders headers = session.getHeaders(parentId, null);\n-        final boolean parentIsAg  = false; // TODO uncomment when headers.isAchivalGroup() is available\n-        if (parentIsAg) {\n-            return parentId;\n+        //is resource or any parent an archival group?\n+        final var startingResourceId = operation.getType().equals(CREATE) ? operation.getParentId() : resourceId;\n+        final var archivalGroupId = findArchivalGroupInAncestry(startingResourceId, session);\n+\n+        if (archivalGroupId != null) {\n+            return archivalGroupId;\n         } else if (resourceId.endsWith(\"/\" + FCR_METADATA) || resourceId.endsWith(\"/\" + FCR_ACL)) {\n             return resourceId.substring(0, resourceId.lastIndexOf(\"/\"));\n         } else {\n             return resourceId;\n         }\n+}\n+\n+    protected String findArchivalGroupInAncestry(final String resourceId, final OCFLPersistentStorageSession session) {\n+            if (resourceId == null || resourceId.endsWith(FEDORA_ID_PREFIX)) {\n+                return null;\n+            }\n+\n+            //strip off trailing slash if exists\n+            String cleanedResourceId = resourceId;\n+            if (resourceId.endsWith(\"/\")) {\n+                cleanedResourceId = resourceId.substring(0, resourceId.length() - 1);\n+            }\n+\n+            try {\n+                final var headers = session.getHeaders(cleanedResourceId, null);\n+                if (headers.isArchivalGroup()) {\n+                    return cleanedResourceId;\n+                }\n+            } catch (final PersistentItemNotFoundException ex) {\n+                //do nothing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzE3OTIxOnYy", "diffSide": "RIGHT", "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/CreateRDFSourcePersister.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOToxNjo0MVrOFj2yuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMzoxNDo1MVrOFj9DYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE0MjIwMw==", "bodyText": "Data model validation feels like it might make sense to take place at the kernel level rather than persistence impl. It would span multiple persistence impls and would potentially be much cheaper to validate since we could check against indexes more easily, and likely already need other \"is this parent okay?\" checks, like preventing using a binary as a parent. In that case we would presumably also not have to catch persistence errors in fcrepo-http-commons.\nNot sure if it makes sense to move it at this point or not, wanted to bring up the point though to see what you think", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373142203", "createdAt": "2020-01-30T19:16:41Z", "author": {"login": "bbpennel"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/CreateRDFSourcePersister.java", "diffHunk": "@@ -56,8 +57,19 @@ public void persist(final OCFLPersistentStorageSession session, final ResourceOp\n \n         final CreateResourceOperation createResourceOp = ((CreateResourceOperation)operation);\n         final boolean archivalGroup = createResourceOp.isArchivalGroup();\n-        final String rootObjectId = archivalGroup ? createResourceOp.getResourceId() :\n-                                                    resolveRootObjectId(createResourceOp, session);\n+\n+        final String rootObjectId;\n+        if (archivalGroup) {\n+            //if archival group, ensure that there are no archival group ancestors\n+            if (findArchivalGroupInAncestry(resourceId, session) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0NDc3MA==", "bodyText": "I think it that makes sense:  ie that the check  take place in the kernel layer.  I would prefer that we address this issue in a separate JIRA as I think this will require some more thinking.   For the time being this works.", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373244770", "createdAt": "2020-01-30T23:14:51Z", "author": {"login": "dbernstein"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/CreateRDFSourcePersister.java", "diffHunk": "@@ -56,8 +57,19 @@ public void persist(final OCFLPersistentStorageSession session, final ResourceOp\n \n         final CreateResourceOperation createResourceOp = ((CreateResourceOperation)operation);\n         final boolean archivalGroup = createResourceOp.isArchivalGroup();\n-        final String rootObjectId = archivalGroup ? createResourceOp.getResourceId() :\n-                                                    resolveRootObjectId(createResourceOp, session);\n+\n+        final String rootObjectId;\n+        if (archivalGroup) {\n+            //if archival group, ensure that there are no archival group ancestors\n+            if (findArchivalGroupInAncestry(resourceId, session) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE0MjIwMw=="}, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzE4NzY4OnYy", "diffSide": "RIGHT", "path": "fcrepo-persistence-api/src/main/java/org/fcrepo/persistence/api/exceptions/PersistentItemConflictException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOToxOToyNlrOFj24Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTozNTo1OFrOFj3ZOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE0MzU2Mg==", "bodyText": "huh, did this exist before?", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373143562", "createdAt": "2020-01-30T19:19:26Z", "author": {"login": "bbpennel"}, "path": "fcrepo-persistence-api/src/main/java/org/fcrepo/persistence/api/exceptions/PersistentItemConflictException.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.persistence.api.exceptions;\n+\n+/**\n+ * If an item is not found in the storage.\n+ *\n+ * @author whikloj", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE1MjA1Nw==", "bodyText": "oops - copy and paste .", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373152057", "createdAt": "2020-01-30T19:35:58Z", "author": {"login": "dbernstein"}, "path": "fcrepo-persistence-api/src/main/java/org/fcrepo/persistence/api/exceptions/PersistentItemConflictException.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.persistence.api.exceptions;\n+\n+/**\n+ * If an item is not found in the storage.\n+ *\n+ * @author whikloj", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE0MzU2Mg=="}, "originalCommit": {"oid": "dc2d399dc8cd43cd7506a6c7b5838ddb00926b59"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTM3MDk4OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzo0Mjo0MFrOFkLqvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzo0Mjo0MFrOFkLqvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ4NDIyMg==", "bodyText": "remove ldp here too", "url": "https://github.com/fcrepo/fcrepo/pull/1615#discussion_r373484222", "createdAt": "2020-01-31T13:42:40Z", "author": {"login": "bbpennel"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "diffHunk": "@@ -284,6 +286,93 @@ public void testHeadBasicContainer() throws IOException {\n         }\n     }\n \n+    @Test\n+    public void testCreateArchivalGroup() throws Exception {\n+        final var id = getRandomUniqueId();\n+        final var childId = id + \"/child\";\n+        final var grandChildId = childId + \"/grandchild\";\n+\n+        createObjectAndClose(id, BASIC_CONTAINER_LINK_HEADER, ARCHIVAL_GROUP_LINK_HEADER);\n+\n+        final var headObjMethod = headObjMethod(id);\n+        try (final CloseableHttpResponse response = execute(headObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find ArchivalGroup link header!\", links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+        }\n+\n+\n+        executeAndClose(putObjMethod(childId, \"text/turtle\", \"<> a <http://example.com/Foo> .\"));\n+\n+        final var childHeadObjMethod = headObjMethod(childId);\n+        try (final CloseableHttpResponse response = execute(childHeadObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+            assertFalse(\"Unexpectedly found ArchivalGroup link header!\",\n+                    links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+        }\n+\n+        executeAndClose(putObjMethod(grandChildId, \"text/turtle\", \"<> a <http://example.com/Foo> .\"));\n+\n+        final var grandChildHeadObjMethod = headObjMethod(grandChildId);\n+        try (final CloseableHttpResponse response = execute(grandChildHeadObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP container link header!\", links.contains(BASIC_CONTAINER_LINK_HEADER));\n+            assertFalse(\"Unexpectedly found ArchivalGroup link header!\",\n+                    links.contains(ARCHIVAL_GROUP_LINK_HEADER));\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateArchivalGroupWithinAnArchivalGroupFails() throws Exception {\n+        final var id = getRandomUniqueId();\n+        final var childId = id + \"/child\";\n+\n+        createObjectAndClose(id, BASIC_CONTAINER_LINK_HEADER, ARCHIVAL_GROUP_LINK_HEADER);\n+\n+        final var headObjMethod = headObjMethod(id);\n+        try (final CloseableHttpResponse response = execute(headObjMethod)) {\n+            final Collection<String> links = getLinkHeaders(response);\n+            assertTrue(\"Didn't find LDP ArchivalGroup link header!\", links.contains(ARCHIVAL_GROUP_LINK_HEADER));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f96d9aee50684cff6d04f7514354a0de039221b"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1929, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}