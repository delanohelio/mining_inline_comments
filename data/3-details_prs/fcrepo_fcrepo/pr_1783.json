{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MjE3OTgw", "number": 1783, "title": "Parallelize index rebuilding", "bodyText": "JIRA Ticket: https://jira.lyrasis.org/browse/FCREPO-3503\nWhat does this Pull Request do?\nSplits the reindexing of OCFL objects into individual tasks which can be shared amongst threads to speed up reindexing.\nThis is all still done in a single \"transaction\" for each service which is then committed at the end.\nThe unit tests for the manager and service might be too weak so I am open to adding more.\nHow should this be tested?\nCreate a repo with a bunch of objects, remove the ocflIndex database. Restart Fedora and see how long it takes to finish reindexing with and before this PR.\nInterested parties\n@fcrepo/committers", "createdAt": "2020-10-23T21:08:42Z", "url": "https://github.com/fcrepo/fcrepo/pull/1783", "merged": true, "mergeCommit": {"oid": "00b19f7fea976034a6e3638cbb23674bf3c1cfd3"}, "closed": true, "closedAt": "2020-11-02T19:11:35Z", "author": {"login": "whikloj"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWn-KhAFqTUxNzYxMDM0MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYpOoBAFqTUyMTkwODc4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NjEwMzQx", "url": "https://github.com/fcrepo/fcrepo/pull/1783#pullrequestreview-517610341", "createdAt": "2020-10-27T11:43:07Z", "commit": {"oid": "b52064cde1fa5e5684ae194b61ea9c25c2512c72"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMTo0MzowN1rOHo36zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjoxNjozMlrOHo5Tcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYyMTI2Mg==", "bodyText": "Is there a reason this can't be wired and injected by spring?", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r512621262", "createdAt": "2020-10-27T11:43:07Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/IndexBuilderImpl.java", "diffHunk": "@@ -120,148 +117,40 @@ private void rebuild() {\n         referenceService.reset();\n         membershipService.reset();\n \n-        final var txId = UUID.randomUUID().toString();\n+        final var reindexService = new ReindexService(persistentStorageSessionManager, objectSessionFactory, ocflIndex,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b52064cde1fa5e5684ae194b61ea9c25c2512c72"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYyMTcwMg==", "bodyText": "Milliseconds might be an optimistic unit...", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r512621702", "createdAt": "2020-10-27T11:44:00Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/IndexBuilderImpl.java", "diffHunk": "@@ -120,148 +117,40 @@ private void rebuild() {\n         referenceService.reset();\n         membershipService.reset();\n \n-        final var txId = UUID.randomUUID().toString();\n+        final var reindexService = new ReindexService(persistentStorageSessionManager, objectSessionFactory, ocflIndex,\n+                containmentIndex, searchIndex, referenceService, membershipService, membershipPageSize);\n+        final ReindexManager reindexManager = new ReindexManager(ocflRepository.listObjectIds(), reindexService,\n+                true, reindexBatchSize);\n \n+        LOGGER.debug(\"Reading object ids...\");\n+        final var startTime = Instant.now();\n         try {\n-            LOGGER.debug(\"Reading object ids...\");\n-\n-            try (final var ocflIds = ocflRepository.listObjectIds()) {\n-                ocflIds.forEach(ocflId -> {\n-                    LOGGER.debug(\"Reading {}\", ocflId);\n-                    try (final var session = objectSessionFactory.newSession(ocflId)) {\n-                        indexOcflObject(ocflId, txId, session);\n-                    } catch (final Exception e) {\n-                        // The session's close method signature throws Exception\n-                        if (e instanceof RuntimeException) {\n-                            throw (RuntimeException) e;\n-                        }\n-                        throw new RuntimeException(e);\n-                    }\n-                });\n-            }\n-\n-            containmentIndex.commitTransaction(txId);\n-            ocflIndex.commit(txId);\n-            referenceService.commitTransaction(txId);\n-            indexMembership(txId);\n-            LOGGER.info(\"Index rebuild complete\");\n-        } catch (final RuntimeException e) {\n-            execQuietly(\"Failed to reset searchIndex\", () -> {\n-                searchIndex.reset();\n-                return null;\n-            });\n-\n-            execQuietly(\"Failed to rollback containment index transaction \" + txId, () -> {\n-                containmentIndex.rollbackTransaction(txId);\n-                return null;\n-            });\n-            execQuietly(\"Failed to rollback OCFL index transaction \" + txId, () -> {\n-                ocflIndex.rollback(txId);\n-                return null;\n-            });\n-\n-            execQuietly(\"Failed to rollback membership index transaction \" + txId, () -> {\n-                membershipService.rollbackTransaction(txId);\n-                return null;\n-            });\n-            throw e;\n+            reindexManager.start();\n+            reindexManager.commit();\n+            LOGGER.info(\"Reindexing complete.\");\n+        } catch (final InterruptedException e) {\n+            throw new RuntimeException(e);\n         }\n+        final var endTime = Instant.now();\n+        final var count = reindexManager.getResultStates().keySet().size();\n+        LOGGER.info(\"Index rebuild complete {} objects in {} milliseconds\", count,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b52064cde1fa5e5684ae194b61ea9c25c2512c72"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYyMzk2Nw==", "bodyText": "You should keep a handle to the id stream. The stream should be closed when you're done with it.", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r512623967", "createdAt": "2020-10-27T11:46:44Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/ReindexManager.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.persistence.ocfl.impl;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+\n+/**\n+ * Class to coordinate the index rebuilding tasks.\n+ * @author whikloj\n+ */\n+public class ReindexManager {\n+\n+    private static final Logger LOGGER = getLogger(ReindexManager.class);\n+\n+    private final String transactionId;\n+\n+    private final List<ReindexWorker> workers;\n+\n+    private final Iterator<String> ocflIter;\n+\n+    private final Map<String, String> resultStates = new HashMap<>();\n+\n+    private final ReindexService reindexService;\n+\n+    private final int batchSize;\n+\n+    /**\n+     * Basic constructor\n+     * @param ids stream of ocfl ids.\n+     * @param reindexService the reindexing service.\n+     * @param failOnError whether to have threads fail on an error or log and continue.\n+     * @param batchSize number of ids to distribute per request.\n+     */\n+    public ReindexManager(final Stream<String> ids, final ReindexService reindexService, final boolean failOnError,\n+                          final int batchSize) {\n+        this.ocflIter = ids.iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b52064cde1fa5e5684ae194b61ea9c25c2512c72"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYyNDgzNw==", "bodyText": "This should be configurable. Are you planning on saving that for a different PR?", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r512624837", "createdAt": "2020-10-27T11:47:32Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/ReindexManager.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.persistence.ocfl.impl;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+\n+/**\n+ * Class to coordinate the index rebuilding tasks.\n+ * @author whikloj\n+ */\n+public class ReindexManager {\n+\n+    private static final Logger LOGGER = getLogger(ReindexManager.class);\n+\n+    private final String transactionId;\n+\n+    private final List<ReindexWorker> workers;\n+\n+    private final Iterator<String> ocflIter;\n+\n+    private final Map<String, String> resultStates = new HashMap<>();\n+\n+    private final ReindexService reindexService;\n+\n+    private final int batchSize;\n+\n+    /**\n+     * Basic constructor\n+     * @param ids stream of ocfl ids.\n+     * @param reindexService the reindexing service.\n+     * @param failOnError whether to have threads fail on an error or log and continue.\n+     * @param batchSize number of ids to distribute per request.\n+     */\n+    public ReindexManager(final Stream<String> ids, final ReindexService reindexService, final boolean failOnError,\n+                          final int batchSize) {\n+        this.ocflIter = ids.iterator();\n+        this.reindexService = reindexService;\n+        this.batchSize = batchSize;\n+        transactionId = UUID.randomUUID().toString();\n+        workers = new ArrayList<>();\n+        final int availableProcessors = Runtime.getRuntime().availableProcessors();\n+        final int threads = availableProcessors > 1 ? availableProcessors - 1 : 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b52064cde1fa5e5684ae194b61ea9c25c2512c72"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYyNjU2Mw==", "bodyText": "Any reason to not just pass this into the worker in the constructor?", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r512626563", "createdAt": "2020-10-27T11:49:06Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/ReindexManager.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.persistence.ocfl.impl;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+\n+/**\n+ * Class to coordinate the index rebuilding tasks.\n+ * @author whikloj\n+ */\n+public class ReindexManager {\n+\n+    private static final Logger LOGGER = getLogger(ReindexManager.class);\n+\n+    private final String transactionId;\n+\n+    private final List<ReindexWorker> workers;\n+\n+    private final Iterator<String> ocflIter;\n+\n+    private final Map<String, String> resultStates = new HashMap<>();\n+\n+    private final ReindexService reindexService;\n+\n+    private final int batchSize;\n+\n+    /**\n+     * Basic constructor\n+     * @param ids stream of ocfl ids.\n+     * @param reindexService the reindexing service.\n+     * @param failOnError whether to have threads fail on an error or log and continue.\n+     * @param batchSize number of ids to distribute per request.\n+     */\n+    public ReindexManager(final Stream<String> ids, final ReindexService reindexService, final boolean failOnError,\n+                          final int batchSize) {\n+        this.ocflIter = ids.iterator();\n+        this.reindexService = reindexService;\n+        this.batchSize = batchSize;\n+        transactionId = UUID.randomUUID().toString();\n+        workers = new ArrayList<>();\n+        final int availableProcessors = Runtime.getRuntime().availableProcessors();\n+        final int threads = availableProcessors > 1 ? availableProcessors - 1 : 1;\n+        for (var foo = 0; foo < threads; foo += 1) {\n+            workers.add(new ReindexWorker(this, this.reindexService, failOnError));\n+        }\n+    }\n+\n+    /**\n+     * Get the transaction id for the reindexing run.\n+     * @return the transaction id.\n+     */\n+    public String getTransactionId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b52064cde1fa5e5684ae194b61ea9c25c2512c72"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYzNDc4NQ==", "bodyText": "This seems to be less of a state map and more of a map of errors, the successes have an empty value. It also has the potential to grow very large. How are we planning on using these results? For me, what makes sense is to have a count of the objects that were successfully processed, and either a collection or a map of exceptions that occurred during processing. Or, we could just keep a count of both and immediately log errors so that we do not need to collect them. I think keeping the counts is worth while because it will allow us to do periodic reporting during the processing.", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r512634785", "createdAt": "2020-10-27T12:00:48Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/ReindexManager.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.persistence.ocfl.impl;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+\n+/**\n+ * Class to coordinate the index rebuilding tasks.\n+ * @author whikloj\n+ */\n+public class ReindexManager {\n+\n+    private static final Logger LOGGER = getLogger(ReindexManager.class);\n+\n+    private final String transactionId;\n+\n+    private final List<ReindexWorker> workers;\n+\n+    private final Iterator<String> ocflIter;\n+\n+    private final Map<String, String> resultStates = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b52064cde1fa5e5684ae194b61ea9c25c2512c72"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYzNzgwNw==", "bodyText": "What happens on failure? Isn't this going to leave the db transaction in place?", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r512637807", "createdAt": "2020-10-27T12:06:03Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/IndexBuilderImpl.java", "diffHunk": "@@ -120,148 +117,40 @@ private void rebuild() {\n         referenceService.reset();\n         membershipService.reset();\n \n-        final var txId = UUID.randomUUID().toString();\n+        final var reindexService = new ReindexService(persistentStorageSessionManager, objectSessionFactory, ocflIndex,\n+                containmentIndex, searchIndex, referenceService, membershipService, membershipPageSize);\n+        final ReindexManager reindexManager = new ReindexManager(ocflRepository.listObjectIds(), reindexService,\n+                true, reindexBatchSize);\n \n+        LOGGER.debug(\"Reading object ids...\");\n+        final var startTime = Instant.now();\n         try {\n-            LOGGER.debug(\"Reading object ids...\");\n-\n-            try (final var ocflIds = ocflRepository.listObjectIds()) {\n-                ocflIds.forEach(ocflId -> {\n-                    LOGGER.debug(\"Reading {}\", ocflId);\n-                    try (final var session = objectSessionFactory.newSession(ocflId)) {\n-                        indexOcflObject(ocflId, txId, session);\n-                    } catch (final Exception e) {\n-                        // The session's close method signature throws Exception\n-                        if (e instanceof RuntimeException) {\n-                            throw (RuntimeException) e;\n-                        }\n-                        throw new RuntimeException(e);\n-                    }\n-                });\n-            }\n-\n-            containmentIndex.commitTransaction(txId);\n-            ocflIndex.commit(txId);\n-            referenceService.commitTransaction(txId);\n-            indexMembership(txId);\n-            LOGGER.info(\"Index rebuild complete\");\n-        } catch (final RuntimeException e) {\n-            execQuietly(\"Failed to reset searchIndex\", () -> {\n-                searchIndex.reset();\n-                return null;\n-            });\n-\n-            execQuietly(\"Failed to rollback containment index transaction \" + txId, () -> {\n-                containmentIndex.rollbackTransaction(txId);\n-                return null;\n-            });\n-            execQuietly(\"Failed to rollback OCFL index transaction \" + txId, () -> {\n-                ocflIndex.rollback(txId);\n-                return null;\n-            });\n-\n-            execQuietly(\"Failed to rollback membership index transaction \" + txId, () -> {\n-                membershipService.rollbackTransaction(txId);\n-                return null;\n-            });\n-            throw e;\n+            reindexManager.start();\n+            reindexManager.commit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b52064cde1fa5e5684ae194b61ea9c25c2512c72"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYzOTA0OQ==", "bodyText": "Indexing the membership does seem like a distinct operation from committing the db transactions. Perhaps there could be a method for committing the db transactions, one for rolling back the db transactions, and another that kicks of the membership indexing? I haven't looked at it in detail, but does the membership indexing use much of else that's in this class? It the surface it seems like it could easily go into its own class.", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r512639049", "createdAt": "2020-10-27T12:08:05Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/ReindexService.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.persistence.ocfl.impl;\n+\n+import static org.apache.jena.graph.NodeFactory.createURI;\n+import static org.apache.jena.rdf.model.ModelFactory.createDefaultModel;\n+import static org.fcrepo.kernel.api.RdfLexicon.NON_RDF_SOURCE;\n+import static org.fcrepo.persistence.ocfl.impl.OcflPersistentStorageUtils.getRdfFormat;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.riot.RDFDataMgr;\n+import org.fcrepo.kernel.api.ContainmentIndex;\n+import org.fcrepo.kernel.api.RdfLexicon;\n+import org.fcrepo.kernel.api.RdfStream;\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.models.ResourceHeaders;\n+import org.fcrepo.kernel.api.rdf.DefaultRdfStream;\n+import org.fcrepo.kernel.api.services.MembershipService;\n+import org.fcrepo.kernel.api.services.ReferenceService;\n+import org.fcrepo.persistence.api.PersistentStorageSessionManager;\n+import org.fcrepo.persistence.ocfl.api.FedoraToOcflObjectIndex;\n+import org.fcrepo.search.api.Condition;\n+import org.fcrepo.search.api.InvalidQueryException;\n+import org.fcrepo.search.api.SearchIndex;\n+import org.fcrepo.search.api.SearchParameters;\n+import org.fcrepo.storage.ocfl.OcflObjectSessionFactory;\n+import org.slf4j.Logger;\n+\n+/**\n+ * Service that does the reindexing for one OCFL object.\n+ * @author whikloj\n+ */\n+public class ReindexService {\n+\n+    private final PersistentStorageSessionManager persistentStorageSessionManager;\n+\n+    private final OcflObjectSessionFactory ocflObjectSessionFactory;\n+\n+    private final FedoraToOcflObjectIndex ocflIndex;\n+\n+    private final ContainmentIndex containmentIndex;\n+\n+    private final SearchIndex searchIndex;\n+\n+    private final ReferenceService referenceService;\n+\n+    private final MembershipService membershipService;\n+\n+    private static final Logger LOGGER = getLogger(ReindexService.class);\n+\n+    private final int membershipPageSize;\n+\n+    public ReindexService(final PersistentStorageSessionManager sessionManager,\n+                          final OcflObjectSessionFactory sessionFactory,\n+                          final FedoraToOcflObjectIndex fedoraToOcflObjectIndex,\n+                          final ContainmentIndex containmentIdx,\n+                          final SearchIndex searchIdx,\n+                          final ReferenceService referenceSrvc,\n+                          final MembershipService memberService,\n+                          final int membershipPageSize) {\n+        this.persistentStorageSessionManager = sessionManager;\n+        this.ocflObjectSessionFactory = sessionFactory;\n+        this.ocflIndex = fedoraToOcflObjectIndex;\n+        this.containmentIndex = containmentIdx;\n+        this.searchIndex = searchIdx;\n+        this.referenceService = referenceSrvc;\n+        this.membershipService = memberService;\n+        this.membershipPageSize = membershipPageSize;\n+    }\n+\n+    public void indexOcflObject(final String txId, final String ocflId) {\n+        LOGGER.debug(\"Indexing ocflId {} in transaction {}\", ocflId, txId);\n+        try (final var session = ocflObjectSessionFactory.newSession(ocflId)) {\n+            final var rootId = new AtomicReference<FedoraId>();\n+            final var fedoraIds = new ArrayList<FedoraId>();\n+            final var headersList = new ArrayList<ResourceHeaders>();\n+\n+            session.streamResourceHeaders().forEach(storageHeaders -> {\n+                final var headers = new ResourceHeadersAdapter(storageHeaders);\n+\n+                final var fedoraId = headers.getId();\n+                fedoraIds.add(fedoraId);\n+                if (headers.isArchivalGroup() || headers.isObjectRoot()) {\n+                    rootId.set(fedoraId);\n+                }\n+\n+                if (!headers.isDeleted() && !fedoraId.isRepositoryRoot()) {\n+                    var parentId = headers.getParent();\n+\n+                    if (headers.getParent() == null) {\n+                        if (headers.isObjectRoot()) {\n+                            parentId = FedoraId.getRepositoryRootId();\n+                        } else {\n+                            throw new IllegalStateException(\n+                                    String.format(\"Resource %s must have a parent defined\", fedoraId.getFullId()));\n+                        }\n+                    }\n+                    if (!headers.getInteractionModel().equals(NON_RDF_SOURCE.toString())) {\n+                        final Optional<InputStream> content = session.readContent(fedoraId.getFullId())\n+                                .getContentStream();\n+                        if (content.isPresent()) {\n+                            final RdfStream rdf = parseRdf(fedoraId, content.get());\n+                            this.referenceService.updateReferences(txId, fedoraId, null, rdf);\n+                        }\n+                    }\n+\n+                    this.containmentIndex.addContainedBy(txId, parentId, fedoraId);\n+                    headersList.add(headers.asKernelHeaders());\n+                }\n+            });\n+\n+            if (rootId.get() == null) {\n+                throw new IllegalStateException(String.format(\"Failed to find root resource in object %s\", ocflId));\n+            }\n+\n+            fedoraIds.forEach(fedoraIdentifier -> {\n+                final var rootFedoraIdentifier = rootId.get();\n+                ocflIndex.addMapping(txId, fedoraIdentifier, rootFedoraIdentifier, ocflId);\n+                LOGGER.debug(\"Rebuilt fedora-to-ocfl object index entry for {}\", fedoraIdentifier);\n+            });\n+\n+            headersList.forEach(headers -> {\n+                searchIndex.addUpdateIndex(txId, headers);\n+                LOGGER.debug(\"Rebuilt searchIndex for {}\", headers.getId());\n+            });\n+        }\n+    }\n+\n+    /**\n+     * Remove persistent sessions for a transaction to avoid memory leaks.\n+     * @param transactionId the transaction id.\n+     */\n+    public void cleanupSession(final String transactionId) {\n+        persistentStorageSessionManager.removeSession(transactionId);\n+    }\n+\n+    /**\n+     * Commit the records added from transaction.\n+     * @param transactionId the id of the transaction.\n+     */\n+    public void commit(final String transactionId) {\n+        try {\n+            LOGGER.debug(\"Performing commit\");\n+            containmentIndex.commitTransaction(transactionId);\n+            ocflIndex.commit(transactionId);\n+            referenceService.commitTransaction(transactionId);\n+            indexMembership(transactionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b52064cde1fa5e5684ae194b61ea9c25c2512c72"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY0MTQ0NA==", "bodyText": "You should have a check in this loop to see if the thread should stop.", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r512641444", "createdAt": "2020-10-27T12:12:11Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/ReindexWorker.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.persistence.ocfl.impl;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A reindexing worker thread.\n+ * @author whikloj\n+ */\n+public class ReindexWorker implements Runnable {\n+\n+    private Thread t;\n+    private ReindexManager manager;\n+    private ReindexService service;\n+    private boolean running = true;\n+    private boolean failOnError;\n+\n+    /**\n+     * Basic Constuctor\n+     * @param reindexManager the manager service.\n+     * @param reindexService the reindexing service.\n+     * @param failOnError whether the thread should fail on an error or log and continue.\n+     */\n+    public ReindexWorker(final ReindexManager reindexManager, final ReindexService reindexService,\n+                         final boolean failOnError) {\n+        manager = reindexManager;\n+        service = reindexService;\n+        this.failOnError = failOnError;\n+        t = new Thread(this, \"ReindexWorker\");\n+    }\n+\n+    /**\n+     * Join the thread.\n+     * @throws InterruptedException if the current thread is interrupted.\n+     */\n+    public void join() throws InterruptedException {\n+        t.join();\n+    }\n+\n+    /**\n+     * Start the thread with this Runnable\n+     */\n+    public void start() {\n+        t.start();\n+    }\n+\n+    @Override\n+    public void run() {\n+        while (running) {\n+            final List<String> ids = manager.getIds();\n+            if (ids.isEmpty()) {\n+                stopThread();\n+                break;\n+            }\n+            final Map<String, String> states = new HashMap<>();\n+            for (final var id : ids) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b52064cde1fa5e5684ae194b61ea9c25c2512c72"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY0Mzk1NA==", "bodyText": "The problem with this behavior is that it will only ever stop this thread on error. The rest of the threads will proceed. One solution to this problem is to change the status reporting, as previously discussed, and have the updateComplete method trigger stopping all of the threads when an error is reported and failOnError is true.", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r512643954", "createdAt": "2020-10-27T12:16:32Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/ReindexWorker.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.persistence.ocfl.impl;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A reindexing worker thread.\n+ * @author whikloj\n+ */\n+public class ReindexWorker implements Runnable {\n+\n+    private Thread t;\n+    private ReindexManager manager;\n+    private ReindexService service;\n+    private boolean running = true;\n+    private boolean failOnError;\n+\n+    /**\n+     * Basic Constuctor\n+     * @param reindexManager the manager service.\n+     * @param reindexService the reindexing service.\n+     * @param failOnError whether the thread should fail on an error or log and continue.\n+     */\n+    public ReindexWorker(final ReindexManager reindexManager, final ReindexService reindexService,\n+                         final boolean failOnError) {\n+        manager = reindexManager;\n+        service = reindexService;\n+        this.failOnError = failOnError;\n+        t = new Thread(this, \"ReindexWorker\");\n+    }\n+\n+    /**\n+     * Join the thread.\n+     * @throws InterruptedException if the current thread is interrupted.\n+     */\n+    public void join() throws InterruptedException {\n+        t.join();\n+    }\n+\n+    /**\n+     * Start the thread with this Runnable\n+     */\n+    public void start() {\n+        t.start();\n+    }\n+\n+    @Override\n+    public void run() {\n+        while (running) {\n+            final List<String> ids = manager.getIds();\n+            if (ids.isEmpty()) {\n+                stopThread();\n+                break;\n+            }\n+            final Map<String, String> states = new HashMap<>();\n+            for (final var id : ids) {\n+                try {\n+                    service.indexOcflObject(manager.getTransactionId(), id);\n+                    states.put(id, \"\");\n+                } catch (final Exception e) {\n+                    states.put(id, e.getMessage());\n+                    if (failOnError) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b52064cde1fa5e5684ae194b61ea9c25c2512c72"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNTkyMTQ4", "url": "https://github.com/fcrepo/fcrepo/pull/1783#pullrequestreview-521592148", "createdAt": "2020-11-02T12:41:33Z", "commit": {"oid": "ab6f2a8ad0fb4f1672c93729071b61689fa72625"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMjo0MTozNFrOHsCvug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMjo1NDoxNFrOHsDJ6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk0NDM3OA==", "bodyText": "Does it make sense to report the failure count here too?", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r515944378", "createdAt": "2020-11-02T12:41:34Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/IndexBuilderImpl.java", "diffHunk": "@@ -114,154 +84,44 @@ public void rebuildIfNecessary() {\n     private void rebuild() {\n         LOGGER.info(\"Initiating index rebuild.\");\n \n-        ocflIndex.reset();\n-        containmentIndex.reset();\n-        searchIndex.reset();\n-        referenceService.reset();\n-        membershipService.reset();\n+        reindexService.reset();\n \n-        final var txId = UUID.randomUUID().toString();\n+        final ReindexManager reindexManager = new ReindexManager(ocflRepository.listObjectIds(), reindexService,\n+                ocflPropsConfig);\n \n+        LOGGER.debug(\"Reading object ids...\");\n+        final var startTime = Instant.now();\n         try {\n-            LOGGER.debug(\"Reading object ids...\");\n-\n-            try (final var ocflIds = ocflRepository.listObjectIds()) {\n-                ocflIds.forEach(ocflId -> {\n-                    LOGGER.debug(\"Reading {}\", ocflId);\n-                    try (final var session = objectSessionFactory.newSession(ocflId)) {\n-                        indexOcflObject(ocflId, txId, session);\n-                    } catch (final Exception e) {\n-                        // The session's close method signature throws Exception\n-                        if (e instanceof RuntimeException) {\n-                            throw (RuntimeException) e;\n-                        }\n-                        throw new RuntimeException(e);\n-                    }\n-                });\n-            }\n-\n-            containmentIndex.commitTransaction(txId);\n-            ocflIndex.commit(txId);\n-            referenceService.commitTransaction(txId);\n-            indexMembership(txId);\n-            LOGGER.info(\"Index rebuild complete\");\n-        } catch (final RuntimeException e) {\n-            execQuietly(\"Failed to reset searchIndex\", () -> {\n-                searchIndex.reset();\n-                return null;\n-            });\n-\n-            execQuietly(\"Failed to rollback containment index transaction \" + txId, () -> {\n-                containmentIndex.rollbackTransaction(txId);\n-                return null;\n-            });\n-            execQuietly(\"Failed to rollback OCFL index transaction \" + txId, () -> {\n-                ocflIndex.rollback(txId);\n-                return null;\n-            });\n-\n-            execQuietly(\"Failed to rollback membership index transaction \" + txId, () -> {\n-                membershipService.rollbackTransaction(txId);\n-                return null;\n-            });\n-            throw e;\n+            reindexManager.start();\n+            reindexManager.commit();\n+            LOGGER.info(\"Reindexing complete.\");\n+        } catch (final InterruptedException e) {\n+            reindexManager.rollback();\n+            throw new RuntimeException(e);\n+        } finally {\n+            reindexManager.shutdown();\n         }\n+        final var endTime = Instant.now();\n+        final var count = reindexManager.getCompletedCount();\n+        LOGGER.info(\"Index rebuild complete {} objects in {} \", count,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab6f2a8ad0fb4f1672c93729071b61689fa72625"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk0NDY0OQ==", "bodyText": "Nice!", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r515944649", "createdAt": "2020-11-02T12:42:05Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/IndexBuilderImpl.java", "diffHunk": "@@ -289,25 +149,14 @@ private boolean repoContainsObjects() {\n         return ocflRepository.listObjectIds().findFirst().isPresent();\n     }\n \n-    private static RdfStream parseRdf(final FedoraId fedoraIdentifier, final InputStream inputStream) {\n-        final Model model = createDefaultModel();\n-        RDFDataMgr.read(model, inputStream, getRdfFormat().getLang());\n-        final FedoraId topic = (fedoraIdentifier.isDescription() ? fedoraIdentifier.asBaseId() : fedoraIdentifier);\n-        return DefaultRdfStream.fromModel(createURI(topic.getFullId()), model);\n-    }\n-\n-    /**\n-     * Executes the closure, capturing all exceptions, and logging them as errors.\n-     *\n-     * @param failureMessage what to print if the closure fails\n-     * @param callable closure to execute\n-     */\n-    private void execQuietly(final String failureMessage, final Callable<Void> callable) {\n-        try {\n-            callable.call();\n-        } catch (final Exception e) {\n-            LOGGER.error(failureMessage, e);\n+    private String getDurationMessage(final Duration duration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab6f2a8ad0fb4f1672c93729071b61689fa72625"}, "originalPosition": 302}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk0NjYzOA==", "bodyText": "Minor optimization, this list could be initialized to batchSize", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r515946638", "createdAt": "2020-11-02T12:46:00Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/ReindexManager.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.persistence.ocfl.impl;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Stream;\n+\n+import org.fcrepo.config.OcflPropsConfig;\n+import org.slf4j.Logger;\n+\n+/**\n+ * Class to coordinate the index rebuilding tasks.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class ReindexManager {\n+\n+    private static final Logger LOGGER = getLogger(ReindexManager.class);\n+\n+    private final String transactionId;\n+\n+    private final List<ReindexWorker> workers;\n+\n+    private final Iterator<String> ocflIter;\n+\n+    private final Stream<String> ocflStream;\n+\n+    private int completedCount;\n+\n+    private int errorCount;\n+\n+    private final ReindexService reindexService;\n+\n+    private final long batchSize;\n+\n+    private final boolean failOnError;\n+\n+    /**\n+     * Basic constructor\n+     * @param ids stream of ocfl ids.\n+     * @param reindexService the reindexing service.\n+     * @param config OCFL property config object.\n+     */\n+    public ReindexManager(final Stream<String> ids, final ReindexService reindexService, final OcflPropsConfig config) {\n+        this.ocflStream = ids;\n+        this.ocflIter = ocflStream.iterator();\n+        this.reindexService = reindexService;\n+        this.batchSize = config.getReindexBatchSize();\n+        this.failOnError = config.isReindexFailOnError();\n+        transactionId = UUID.randomUUID().toString();\n+        workers = new ArrayList<>();\n+        for (var foo = 0; foo < config.getReindexingThreads(); foo += 1) {\n+            workers.add(new ReindexWorker(this, this.reindexService, transactionId, this.failOnError));\n+        }\n+    }\n+\n+    /**\n+     * Start reindexing.\n+     * @throws InterruptedException on an indexing error in a thread.\n+     */\n+    public void start() throws InterruptedException {\n+        try {\n+            workers.forEach(ReindexWorker::start);\n+            for (final var worker : workers) {\n+                worker.join();\n+            }\n+        } catch (final Exception e) {\n+            LOGGER.error(\"Error while rebuilding index\", e);\n+            stop();\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Stop all threads.\n+     */\n+    public void stop() {\n+        workers.forEach(ReindexWorker::stopThread);\n+    }\n+\n+    /**\n+     * Return a batch of OCFL ids to reindex.\n+     * @return list of OCFL ids.\n+     */\n+    public synchronized List<String> getIds() {\n+        int counter = 0;\n+        final List<String> ids = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab6f2a8ad0fb4f1672c93729071b61689fa72625"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk0NzQyMA==", "bodyText": "Either this method needs to be synchronized or the counts need to be Atomic", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r515947420", "createdAt": "2020-11-02T12:47:32Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/ReindexManager.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.persistence.ocfl.impl;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Stream;\n+\n+import org.fcrepo.config.OcflPropsConfig;\n+import org.slf4j.Logger;\n+\n+/**\n+ * Class to coordinate the index rebuilding tasks.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class ReindexManager {\n+\n+    private static final Logger LOGGER = getLogger(ReindexManager.class);\n+\n+    private final String transactionId;\n+\n+    private final List<ReindexWorker> workers;\n+\n+    private final Iterator<String> ocflIter;\n+\n+    private final Stream<String> ocflStream;\n+\n+    private int completedCount;\n+\n+    private int errorCount;\n+\n+    private final ReindexService reindexService;\n+\n+    private final long batchSize;\n+\n+    private final boolean failOnError;\n+\n+    /**\n+     * Basic constructor\n+     * @param ids stream of ocfl ids.\n+     * @param reindexService the reindexing service.\n+     * @param config OCFL property config object.\n+     */\n+    public ReindexManager(final Stream<String> ids, final ReindexService reindexService, final OcflPropsConfig config) {\n+        this.ocflStream = ids;\n+        this.ocflIter = ocflStream.iterator();\n+        this.reindexService = reindexService;\n+        this.batchSize = config.getReindexBatchSize();\n+        this.failOnError = config.isReindexFailOnError();\n+        transactionId = UUID.randomUUID().toString();\n+        workers = new ArrayList<>();\n+        for (var foo = 0; foo < config.getReindexingThreads(); foo += 1) {\n+            workers.add(new ReindexWorker(this, this.reindexService, transactionId, this.failOnError));\n+        }\n+    }\n+\n+    /**\n+     * Start reindexing.\n+     * @throws InterruptedException on an indexing error in a thread.\n+     */\n+    public void start() throws InterruptedException {\n+        try {\n+            workers.forEach(ReindexWorker::start);\n+            for (final var worker : workers) {\n+                worker.join();\n+            }\n+        } catch (final Exception e) {\n+            LOGGER.error(\"Error while rebuilding index\", e);\n+            stop();\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Stop all threads.\n+     */\n+    public void stop() {\n+        workers.forEach(ReindexWorker::stopThread);\n+    }\n+\n+    /**\n+     * Return a batch of OCFL ids to reindex.\n+     * @return list of OCFL ids.\n+     */\n+    public synchronized List<String> getIds() {\n+        int counter = 0;\n+        final List<String> ids = new ArrayList<>();\n+        while (ocflIter.hasNext() && counter < batchSize) {\n+            ids.add(ocflIter.next());\n+            counter += 1;\n+        }\n+        return ids;\n+    }\n+\n+    /**\n+     * Update the master list of reindexing states.\n+     * @param batchSuccessful how many items were completed successfully in the last batch.\n+     * @param batchErrors how many items had an error in the last batch.\n+     */\n+    public void updateComplete(final int batchSuccessful, final int batchErrors) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab6f2a8ad0fb4f1672c93729071b61689fa72625"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk1MDQxMg==", "bodyText": "I think the body of this method needs to be same as the catch block in the commit method. That is to say, each rollback needs to be called so that if it fails it doesn't prevent the subsequent rollbacks from executing.", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r515950412", "createdAt": "2020-11-02T12:53:01Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/ReindexService.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.persistence.ocfl.impl;\n+\n+import static org.apache.jena.graph.NodeFactory.createURI;\n+import static org.apache.jena.rdf.model.ModelFactory.createDefaultModel;\n+import static org.fcrepo.kernel.api.RdfLexicon.NON_RDF_SOURCE;\n+import static org.fcrepo.persistence.ocfl.impl.OcflPersistentStorageUtils.getRdfFormat;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import javax.inject.Inject;\n+\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.riot.RDFDataMgr;\n+import org.fcrepo.kernel.api.ContainmentIndex;\n+import org.fcrepo.kernel.api.RdfLexicon;\n+import org.fcrepo.kernel.api.RdfStream;\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.models.ResourceHeaders;\n+import org.fcrepo.kernel.api.rdf.DefaultRdfStream;\n+import org.fcrepo.kernel.api.services.MembershipService;\n+import org.fcrepo.kernel.api.services.ReferenceService;\n+import org.fcrepo.persistence.api.PersistentStorageSessionManager;\n+import org.fcrepo.persistence.ocfl.api.FedoraToOcflObjectIndex;\n+import org.fcrepo.search.api.Condition;\n+import org.fcrepo.search.api.InvalidQueryException;\n+import org.fcrepo.search.api.SearchIndex;\n+import org.fcrepo.search.api.SearchParameters;\n+import org.fcrepo.storage.ocfl.OcflObjectSessionFactory;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Service that does the reindexing for one OCFL object.\n+ * @author whikloj\n+ */\n+@Component\n+public class ReindexService {\n+\n+    @Inject\n+    private PersistentStorageSessionManager persistentStorageSessionManager;\n+\n+    @Inject\n+    private OcflObjectSessionFactory ocflObjectSessionFactory;\n+\n+    @Autowired\n+    @Qualifier(\"ocflIndex\")\n+    private FedoraToOcflObjectIndex ocflIndex;\n+\n+    @Autowired\n+    @Qualifier(\"containmentIndex\")\n+    private ContainmentIndex containmentIndex;\n+\n+    @Autowired\n+    @Qualifier(\"searchIndex\")\n+    private SearchIndex searchIndex;\n+\n+    @Autowired\n+    @Qualifier(\"referenceService\")\n+    private ReferenceService referenceService;\n+\n+    @Inject\n+    private MembershipService membershipService;\n+\n+    private static final Logger LOGGER = getLogger(ReindexService.class);\n+\n+    private int membershipPageSize = 500;\n+\n+    public void indexOcflObject(final String txId, final String ocflId) {\n+        LOGGER.debug(\"Indexing ocflId {} in transaction {}\", ocflId, txId);\n+        try (final var session = ocflObjectSessionFactory.newSession(ocflId)) {\n+            final var rootId = new AtomicReference<FedoraId>();\n+            final var fedoraIds = new ArrayList<FedoraId>();\n+            final var headersList = new ArrayList<ResourceHeaders>();\n+\n+            session.streamResourceHeaders().forEach(storageHeaders -> {\n+                final var headers = new ResourceHeadersAdapter(storageHeaders);\n+\n+                final var fedoraId = headers.getId();\n+                fedoraIds.add(fedoraId);\n+                if (headers.isArchivalGroup() || headers.isObjectRoot()) {\n+                    rootId.set(fedoraId);\n+                }\n+\n+                if (!headers.isDeleted() && !fedoraId.isRepositoryRoot()) {\n+                    var parentId = headers.getParent();\n+\n+                    if (headers.getParent() == null) {\n+                        if (headers.isObjectRoot()) {\n+                            parentId = FedoraId.getRepositoryRootId();\n+                        } else {\n+                            throw new IllegalStateException(\n+                                    String.format(\"Resource %s must have a parent defined\", fedoraId.getFullId()));\n+                        }\n+                    }\n+                    if (!headers.getInteractionModel().equals(NON_RDF_SOURCE.toString())) {\n+                        final Optional<InputStream> content = session.readContent(fedoraId.getFullId())\n+                                .getContentStream();\n+                        if (content.isPresent()) {\n+                            final RdfStream rdf = parseRdf(fedoraId, content.get());\n+                            this.referenceService.updateReferences(txId, fedoraId, null, rdf);\n+                        }\n+                    }\n+\n+                    this.containmentIndex.addContainedBy(txId, parentId, fedoraId);\n+                    headersList.add(headers.asKernelHeaders());\n+                }\n+            });\n+\n+            if (rootId.get() == null) {\n+                throw new IllegalStateException(String.format(\"Failed to find root resource in object %s\", ocflId));\n+            }\n+\n+            fedoraIds.forEach(fedoraIdentifier -> {\n+                final var rootFedoraIdentifier = rootId.get();\n+                ocflIndex.addMapping(txId, fedoraIdentifier, rootFedoraIdentifier, ocflId);\n+                LOGGER.debug(\"Rebuilt fedora-to-ocfl object index entry for {}\", fedoraIdentifier);\n+            });\n+\n+            headersList.forEach(headers -> {\n+                searchIndex.addUpdateIndex(txId, headers);\n+                LOGGER.debug(\"Rebuilt searchIndex for {}\", headers.getId());\n+            });\n+        }\n+    }\n+\n+    /**\n+     * Remove persistent sessions for a transaction to avoid memory leaks.\n+     * @param transactionId the transaction id.\n+     */\n+    public void cleanupSession(final String transactionId) {\n+        persistentStorageSessionManager.removeSession(transactionId);\n+    }\n+\n+    /**\n+     * Set the membership page size.\n+     * @param pageSize the new page size.\n+     */\n+    public void setMembershipPageSize(final int pageSize) {\n+        membershipPageSize = pageSize;\n+    }\n+\n+    /**\n+     * Reset all the indexes.\n+     */\n+    public void reset() {\n+        ocflIndex.reset();\n+        containmentIndex.reset();\n+        searchIndex.reset();\n+        referenceService.reset();\n+        membershipService.reset();\n+    }\n+\n+    /**\n+     * Commit the records added from transaction.\n+     * @param transactionId the id of the transaction.\n+     */\n+    public void commit(final String transactionId) {\n+        try {\n+            LOGGER.debug(\"Performing commit\");\n+            containmentIndex.commitTransaction(transactionId);\n+            ocflIndex.commit(transactionId);\n+            referenceService.commitTransaction(transactionId);\n+            LOGGER.debug(\"Finished commit\");\n+        } catch (final RuntimeException e) {\n+            execQuietly(\"Failed to reset searchIndex\", () -> {\n+                searchIndex.reset();\n+                return null;\n+            });\n+\n+            execQuietly(\"Failed to rollback containment index transaction \" + transactionId, () -> {\n+                containmentIndex.rollbackTransaction(transactionId);\n+                return null;\n+            });\n+            execQuietly(\"Failed to rollback OCFL index transaction \" + transactionId, () -> {\n+                ocflIndex.rollback(transactionId);\n+                return null;\n+            });\n+\n+            execQuietly(\"Failed to rollback the reference index transaction \" + transactionId, () -> {\n+                referenceService.rollbackTransaction(transactionId);\n+                return null;\n+            });\n+\n+            execQuietly(\"Failed to rollback membership index transaction \" + transactionId, () -> {\n+                membershipService.rollbackTransaction(transactionId);\n+                return null;\n+            });\n+            throw e;\n+        }\n+    }\n+\n+    public void rollback(final String transactionId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab6f2a8ad0fb4f1672c93729071b61689fa72625"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk1MTA4Mg==", "bodyText": "Maybe have a DEBUG log when the membership indexing starts?", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r515951082", "createdAt": "2020-11-02T12:54:14Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/ReindexService.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.persistence.ocfl.impl;\n+\n+import static org.apache.jena.graph.NodeFactory.createURI;\n+import static org.apache.jena.rdf.model.ModelFactory.createDefaultModel;\n+import static org.fcrepo.kernel.api.RdfLexicon.NON_RDF_SOURCE;\n+import static org.fcrepo.persistence.ocfl.impl.OcflPersistentStorageUtils.getRdfFormat;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import javax.inject.Inject;\n+\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.riot.RDFDataMgr;\n+import org.fcrepo.kernel.api.ContainmentIndex;\n+import org.fcrepo.kernel.api.RdfLexicon;\n+import org.fcrepo.kernel.api.RdfStream;\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.models.ResourceHeaders;\n+import org.fcrepo.kernel.api.rdf.DefaultRdfStream;\n+import org.fcrepo.kernel.api.services.MembershipService;\n+import org.fcrepo.kernel.api.services.ReferenceService;\n+import org.fcrepo.persistence.api.PersistentStorageSessionManager;\n+import org.fcrepo.persistence.ocfl.api.FedoraToOcflObjectIndex;\n+import org.fcrepo.search.api.Condition;\n+import org.fcrepo.search.api.InvalidQueryException;\n+import org.fcrepo.search.api.SearchIndex;\n+import org.fcrepo.search.api.SearchParameters;\n+import org.fcrepo.storage.ocfl.OcflObjectSessionFactory;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Service that does the reindexing for one OCFL object.\n+ * @author whikloj\n+ */\n+@Component\n+public class ReindexService {\n+\n+    @Inject\n+    private PersistentStorageSessionManager persistentStorageSessionManager;\n+\n+    @Inject\n+    private OcflObjectSessionFactory ocflObjectSessionFactory;\n+\n+    @Autowired\n+    @Qualifier(\"ocflIndex\")\n+    private FedoraToOcflObjectIndex ocflIndex;\n+\n+    @Autowired\n+    @Qualifier(\"containmentIndex\")\n+    private ContainmentIndex containmentIndex;\n+\n+    @Autowired\n+    @Qualifier(\"searchIndex\")\n+    private SearchIndex searchIndex;\n+\n+    @Autowired\n+    @Qualifier(\"referenceService\")\n+    private ReferenceService referenceService;\n+\n+    @Inject\n+    private MembershipService membershipService;\n+\n+    private static final Logger LOGGER = getLogger(ReindexService.class);\n+\n+    private int membershipPageSize = 500;\n+\n+    public void indexOcflObject(final String txId, final String ocflId) {\n+        LOGGER.debug(\"Indexing ocflId {} in transaction {}\", ocflId, txId);\n+        try (final var session = ocflObjectSessionFactory.newSession(ocflId)) {\n+            final var rootId = new AtomicReference<FedoraId>();\n+            final var fedoraIds = new ArrayList<FedoraId>();\n+            final var headersList = new ArrayList<ResourceHeaders>();\n+\n+            session.streamResourceHeaders().forEach(storageHeaders -> {\n+                final var headers = new ResourceHeadersAdapter(storageHeaders);\n+\n+                final var fedoraId = headers.getId();\n+                fedoraIds.add(fedoraId);\n+                if (headers.isArchivalGroup() || headers.isObjectRoot()) {\n+                    rootId.set(fedoraId);\n+                }\n+\n+                if (!headers.isDeleted() && !fedoraId.isRepositoryRoot()) {\n+                    var parentId = headers.getParent();\n+\n+                    if (headers.getParent() == null) {\n+                        if (headers.isObjectRoot()) {\n+                            parentId = FedoraId.getRepositoryRootId();\n+                        } else {\n+                            throw new IllegalStateException(\n+                                    String.format(\"Resource %s must have a parent defined\", fedoraId.getFullId()));\n+                        }\n+                    }\n+                    if (!headers.getInteractionModel().equals(NON_RDF_SOURCE.toString())) {\n+                        final Optional<InputStream> content = session.readContent(fedoraId.getFullId())\n+                                .getContentStream();\n+                        if (content.isPresent()) {\n+                            final RdfStream rdf = parseRdf(fedoraId, content.get());\n+                            this.referenceService.updateReferences(txId, fedoraId, null, rdf);\n+                        }\n+                    }\n+\n+                    this.containmentIndex.addContainedBy(txId, parentId, fedoraId);\n+                    headersList.add(headers.asKernelHeaders());\n+                }\n+            });\n+\n+            if (rootId.get() == null) {\n+                throw new IllegalStateException(String.format(\"Failed to find root resource in object %s\", ocflId));\n+            }\n+\n+            fedoraIds.forEach(fedoraIdentifier -> {\n+                final var rootFedoraIdentifier = rootId.get();\n+                ocflIndex.addMapping(txId, fedoraIdentifier, rootFedoraIdentifier, ocflId);\n+                LOGGER.debug(\"Rebuilt fedora-to-ocfl object index entry for {}\", fedoraIdentifier);\n+            });\n+\n+            headersList.forEach(headers -> {\n+                searchIndex.addUpdateIndex(txId, headers);\n+                LOGGER.debug(\"Rebuilt searchIndex for {}\", headers.getId());\n+            });\n+        }\n+    }\n+\n+    /**\n+     * Remove persistent sessions for a transaction to avoid memory leaks.\n+     * @param transactionId the transaction id.\n+     */\n+    public void cleanupSession(final String transactionId) {\n+        persistentStorageSessionManager.removeSession(transactionId);\n+    }\n+\n+    /**\n+     * Set the membership page size.\n+     * @param pageSize the new page size.\n+     */\n+    public void setMembershipPageSize(final int pageSize) {\n+        membershipPageSize = pageSize;\n+    }\n+\n+    /**\n+     * Reset all the indexes.\n+     */\n+    public void reset() {\n+        ocflIndex.reset();\n+        containmentIndex.reset();\n+        searchIndex.reset();\n+        referenceService.reset();\n+        membershipService.reset();\n+    }\n+\n+    /**\n+     * Commit the records added from transaction.\n+     * @param transactionId the id of the transaction.\n+     */\n+    public void commit(final String transactionId) {\n+        try {\n+            LOGGER.debug(\"Performing commit\");\n+            containmentIndex.commitTransaction(transactionId);\n+            ocflIndex.commit(transactionId);\n+            referenceService.commitTransaction(transactionId);\n+            LOGGER.debug(\"Finished commit\");\n+        } catch (final RuntimeException e) {\n+            execQuietly(\"Failed to reset searchIndex\", () -> {\n+                searchIndex.reset();\n+                return null;\n+            });\n+\n+            execQuietly(\"Failed to rollback containment index transaction \" + transactionId, () -> {\n+                containmentIndex.rollbackTransaction(transactionId);\n+                return null;\n+            });\n+            execQuietly(\"Failed to rollback OCFL index transaction \" + transactionId, () -> {\n+                ocflIndex.rollback(transactionId);\n+                return null;\n+            });\n+\n+            execQuietly(\"Failed to rollback the reference index transaction \" + transactionId, () -> {\n+                referenceService.rollbackTransaction(transactionId);\n+                return null;\n+            });\n+\n+            execQuietly(\"Failed to rollback membership index transaction \" + transactionId, () -> {\n+                membershipService.rollbackTransaction(transactionId);\n+                return null;\n+            });\n+            throw e;\n+        }\n+    }\n+\n+    public void rollback(final String transactionId) {\n+        searchIndex.reset();\n+        containmentIndex.rollbackTransaction(transactionId);\n+        referenceService.rollbackTransaction(transactionId);\n+        ocflIndex.rollback(transactionId);\n+        membershipService.rollbackTransaction(transactionId);\n+    }\n+\n+    /**\n+     * Index all membership properties by querying for Direct containers, and then\n+     * trying population of the membership index for each one\n+     * @param txId the transaction id.\n+     */\n+    public void indexMembership(final String txId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab6f2a8ad0fb4f1672c93729071b61689fa72625"}, "originalPosition": 231}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNjA2NDE5", "url": "https://github.com/fcrepo/fcrepo/pull/1783#pullrequestreview-521606419", "createdAt": "2020-11-02T13:01:56Z", "commit": {"oid": "ab6f2a8ad0fb4f1672c93729071b61689fa72625"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMzowMTo1NlrOHsDa_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMzowMTo1NlrOHsDa_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk1NTQ1NA==", "bodyText": "If failOnError is not set, I think it might make sense to WARN/ERROR the exception here", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r515955454", "createdAt": "2020-11-02T13:01:56Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/ReindexWorker.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.persistence.ocfl.impl;\n+\n+import java.util.List;\n+\n+/**\n+ * A reindexing worker thread.\n+ * @author whikloj\n+ */\n+public class ReindexWorker implements Runnable {\n+\n+    private Thread t;\n+    private ReindexManager manager;\n+    private ReindexService service;\n+    private String transactionId;\n+    private boolean running = true;\n+    private boolean failOnError;\n+\n+    /**\n+     * Basic Constuctor\n+     * @param reindexManager the manager service.\n+     * @param reindexService the reindexing service.\n+     * @param txId the transaction id.\n+     * @param failOnError whether the thread should fail on an error or log and continue.\n+     */\n+    public ReindexWorker(final ReindexManager reindexManager, final ReindexService reindexService,\n+                         final String txId, final boolean failOnError) {\n+        manager = reindexManager;\n+        service = reindexService;\n+        transactionId = txId;\n+        this.failOnError = failOnError;\n+        t = new Thread(this, \"ReindexWorker\");\n+    }\n+\n+    /**\n+     * Join the thread.\n+     * @throws InterruptedException if the current thread is interrupted.\n+     */\n+    public void join() throws InterruptedException {\n+        t.join();\n+    }\n+\n+    /**\n+     * Start the thread with this Runnable\n+     */\n+    public void start() {\n+        t.start();\n+    }\n+\n+    @Override\n+    public void run() {\n+        while (running) {\n+            final List<String> ids = manager.getIds();\n+            if (ids.isEmpty()) {\n+                stopThread();\n+                break;\n+            }\n+            int completed = 0;\n+            int errors = 0;\n+            for (final var id : ids) {\n+                if (!running) {\n+                    break;\n+                }\n+                try {\n+                    service.indexOcflObject(transactionId, id);\n+                    completed += 1;\n+                } catch (final Exception e) {\n+                    errors += 1;\n+                    if (failOnError) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab6f2a8ad0fb4f1672c93729071b61689fa72625"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "feaa3f4726ddfb66d2e88c222aa2045a59f78c17", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/feaa3f4726ddfb66d2e88c222aa2045a59f78c17", "committedDate": "2020-11-02T15:39:06Z", "message": "Parallelize index rebuilding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b01c34d51c9300baaef7c023b4c6348da5dcaed0", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/b01c34d51c9300baaef7c023b4c6348da5dcaed0", "committedDate": "2020-11-02T15:39:06Z", "message": "Make workers request ids from manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddf0941f13992ad7205421dfdf74ad9dfd00113a", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/ddf0941f13992ad7205421dfdf74ad9dfd00113a", "committedDate": "2020-11-02T15:39:06Z", "message": "Remove unneeded class and return state for each batch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce4779b94792265e6ae29db1f4d1d1d55e307890", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/ce4779b94792265e6ae29db1f4d1d1d55e307890", "committedDate": "2020-11-02T15:39:06Z", "message": "Make reindex configurable, only track counts, rollback on error if failOnError=true"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25cc72fe7158bcc8e9e70839072cc9ce92782f43", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/25cc72fe7158bcc8e9e70839072cc9ce92782f43", "committedDate": "2020-11-02T15:39:07Z", "message": "Code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNzQ3NjM4", "url": "https://github.com/fcrepo/fcrepo/pull/1783#pullrequestreview-521747638", "createdAt": "2020-11-02T15:43:19Z", "commit": {"oid": "1fe0c30fa7831993e150de5a3a0882e77f1a1f1c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTo0MzoyMFrOHsJ7Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTo0MzoyMFrOHsJ7Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA2MTk1OQ==", "bodyText": "Can you change this to:\nLOGGER.error(\"Reindexing of OCFL id {} failed\", id, e);\nIt'll make it a lot easier to figure out what went wrong", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r516061959", "createdAt": "2020-11-02T15:43:20Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/ReindexWorker.java", "diffHunk": "@@ -89,6 +94,7 @@ public void run() {\n                         service.cleanupSession(transactionId);\n                         throw e;\n                     }\n+                    LOGGER.error(\"Reindexing of OCFL id {} failed: {}\", id, e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fe0c30fa7831993e150de5a3a0882e77f1a1f1c"}, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1fe0c30fa7831993e150de5a3a0882e77f1a1f1c", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/1fe0c30fa7831993e150de5a3a0882e77f1a1f1c", "committedDate": "2020-11-02T15:15:34Z", "message": "Code review"}, "afterCommit": {"oid": "25cc72fe7158bcc8e9e70839072cc9ce92782f43", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/25cc72fe7158bcc8e9e70839072cc9ce92782f43", "committedDate": "2020-11-02T15:39:07Z", "message": "Code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3629680e291ce63441702130eb925b9f4448576f", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/3629680e291ce63441702130eb925b9f4448576f", "committedDate": "2020-11-02T16:17:21Z", "message": "Log full stacktrace"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNzgyNDIw", "url": "https://github.com/fcrepo/fcrepo/pull/1783#pullrequestreview-521782420", "createdAt": "2020-11-02T16:19:30Z", "commit": {"oid": "3629680e291ce63441702130eb925b9f4448576f"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxODEzNDYz", "url": "https://github.com/fcrepo/fcrepo/pull/1783#pullrequestreview-521813463", "createdAt": "2020-11-02T16:51:41Z", "commit": {"oid": "3629680e291ce63441702130eb925b9f4448576f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNjo1MTo0MVrOHsM8sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNjo1MTo0MVrOHsM8sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjExMTUzOQ==", "bodyText": "We will need to either document these configuration elements in the wiki now, or as a follow-on ticket.", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r516111539", "createdAt": "2020-11-02T16:51:41Z", "author": {"login": "awoods"}, "path": "fcrepo-configs/src/main/java/org/fcrepo/config/OcflPropsConfig.java", "diffHunk": "@@ -92,12 +92,31 @@\n     @Value(\"${fcrepo.resource-header-cache.expire-after-seconds:600}\")\n     private long resourceHeadersCacheExpireAfterSeconds;\n \n+    @Value(\"${fcrepo.ocfl.reindex.threads:-1}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3629680e291ce63441702130eb925b9f4448576f"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxODc5ODUx", "url": "https://github.com/fcrepo/fcrepo/pull/1783#pullrequestreview-521879851", "createdAt": "2020-11-02T18:11:37Z", "commit": {"oid": "3629680e291ce63441702130eb925b9f4448576f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODoxMTozN1rOHsQNZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODoxMTo0OVrOHsQN0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE2NDk2Ng==", "bodyText": "Is this method ever used?", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r516164966", "createdAt": "2020-11-02T18:11:37Z", "author": {"login": "awoods"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/IndexBuilderImpl.java", "diffHunk": "@@ -114,154 +84,45 @@ public void rebuildIfNecessary() {\n     private void rebuild() {\n         LOGGER.info(\"Initiating index rebuild.\");\n \n-        ocflIndex.reset();\n-        containmentIndex.reset();\n-        searchIndex.reset();\n-        referenceService.reset();\n-        membershipService.reset();\n+        reindexService.reset();\n \n-        final var txId = UUID.randomUUID().toString();\n+        final ReindexManager reindexManager = new ReindexManager(ocflRepository.listObjectIds(), reindexService,\n+                ocflPropsConfig);\n \n+        LOGGER.debug(\"Reading object ids...\");\n+        final var startTime = Instant.now();\n         try {\n-            LOGGER.debug(\"Reading object ids...\");\n-\n-            try (final var ocflIds = ocflRepository.listObjectIds()) {\n-                ocflIds.forEach(ocflId -> {\n-                    LOGGER.debug(\"Reading {}\", ocflId);\n-                    try (final var session = objectSessionFactory.newSession(ocflId)) {\n-                        indexOcflObject(ocflId, txId, session);\n-                    } catch (final Exception e) {\n-                        // The session's close method signature throws Exception\n-                        if (e instanceof RuntimeException) {\n-                            throw (RuntimeException) e;\n-                        }\n-                        throw new RuntimeException(e);\n-                    }\n-                });\n-            }\n-\n-            containmentIndex.commitTransaction(txId);\n-            ocflIndex.commit(txId);\n-            referenceService.commitTransaction(txId);\n-            indexMembership(txId);\n-            LOGGER.info(\"Index rebuild complete\");\n-        } catch (final RuntimeException e) {\n-            execQuietly(\"Failed to reset searchIndex\", () -> {\n-                searchIndex.reset();\n-                return null;\n-            });\n-\n-            execQuietly(\"Failed to rollback containment index transaction \" + txId, () -> {\n-                containmentIndex.rollbackTransaction(txId);\n-                return null;\n-            });\n-            execQuietly(\"Failed to rollback OCFL index transaction \" + txId, () -> {\n-                ocflIndex.rollback(txId);\n-                return null;\n-            });\n-\n-            execQuietly(\"Failed to rollback membership index transaction \" + txId, () -> {\n-                membershipService.rollbackTransaction(txId);\n-                return null;\n-            });\n-            throw e;\n+            reindexManager.start();\n+            reindexManager.commit();\n+            LOGGER.info(\"Reindexing complete.\");\n+        } catch (final InterruptedException e) {\n+            reindexManager.rollback();\n+            throw new RuntimeException(e);\n+        } finally {\n+            reindexManager.shutdown();\n         }\n+        final var endTime = Instant.now();\n+        final var count = reindexManager.getCompletedCount();\n+        final var errors = reindexManager.getErrorCount();\n+        LOGGER.info(\"Index rebuild completed {} objects successfully and {} objects had errors in {} \", count, errors,\n+                getDurationMessage(Duration.between(startTime, endTime)));\n     }\n \n-    private void indexOcflObject(final String ocflId, final String txId, final OcflObjectSession session) {\n-        final var rootId = new AtomicReference<FedoraId>();\n-        final var fedoraIds = new ArrayList<FedoraId>();\n-        final var headersList = new ArrayList<ResourceHeaders>();\n-\n-        session.streamResourceHeaders().forEach(storageHeaders -> {\n-            final var headers = new ResourceHeadersAdapter(storageHeaders);\n-\n-            final var fedoraId = headers.getId();\n-            fedoraIds.add(fedoraId);\n-            if (headers.isArchivalGroup() || headers.isObjectRoot()) {\n-                rootId.set(fedoraId);\n-            }\n-\n-            if (!headers.isDeleted() && !fedoraId.isRepositoryRoot()) {\n-                var parentId = headers.getParent();\n-\n-                if (headers.getParent() == null) {\n-                    if (headers.isObjectRoot()) {\n-                        parentId = FedoraId.getRepositoryRootId();\n-                    } else {\n-                        throw new IllegalStateException(String.format(\"Resource %s must have a parent defined\",\n-                                fedoraId.getFullId()));\n-                    }\n-                }\n-                if (!headers.getInteractionModel().equals(NON_RDF_SOURCE.toString())) {\n-                    final Optional<InputStream> content = session.readContent(fedoraId.getFullId()).getContentStream();\n-                    if (content.isPresent()) {\n-                        final RdfStream rdf = parseRdf(fedoraId, content.get());\n-                        this.referenceService.updateReferences(txId, fedoraId, null, rdf);\n-                    }\n-                }\n-\n-                this.containmentIndex.addContainedBy(txId, parentId, fedoraId);\n-                headersList.add(headers.asKernelHeaders());\n-            }\n-        });\n-\n-        if (rootId.get() == null) {\n-            throw new IllegalStateException(String.format(\"Failed to find root resource in object %s\", ocflId));\n-        }\n-\n-        fedoraIds.forEach(fedoraIdentifier -> {\n-            final var rootFedoraIdentifier = rootId.get();\n-            ocflIndex.addMapping(txId, fedoraIdentifier, rootFedoraIdentifier, ocflId);\n-            LOGGER.debug(\"Rebuilt fedora-to-ocfl object index entry for {}\", fedoraIdentifier);\n-        });\n-\n-        headersList.forEach(headers -> {\n-            searchIndex.addUpdateIndex(txId, headers);\n-            LOGGER.debug(\"Rebuilt searchIndex for {}\", headers.getId());\n-        });\n-    }\n \n     /**\n-     * Index all membership properties by querying for Direct containers, and then\n-     * trying population of the membership index for each one\n-     * @param txId\n+     * Pass this along to the ReindexService\n+     * @param pageSize number of results to use when querying for membership producing resources\n      */\n-    private void indexMembership(final String txId) {\n-        final var fields = List.of(Condition.Field.FEDORA_ID);\n-        final var conditions = List.of(Condition.fromEnums(Field.RDF_TYPE, Operator.EQ,\n-                RdfLexicon.DIRECT_CONTAINER.getURI()));\n-        int offset = 0;\n-\n-        try {\n-            int numResults = membershipPageSize;\n-            do {\n-                final var params = new SearchParameters(fields, conditions, membershipPageSize,\n-                        offset, Field.FEDORA_ID, \"asc\");\n-\n-                final var searchResult = searchIndex.doSearch(params);\n-                final var resultList = searchResult.getItems();\n-                numResults = resultList.size();\n-\n-                resultList.stream()\n-                    .map(entry -> FedoraId.create((String) entry.get(Condition.Field.FEDORA_ID.toString())))\n-                    .forEach(containerId -> membershipService.populateMembershipHistory(txId, containerId));\n-\n-                // Results are paged, so step through pages until we reach the last one\n-                offset += membershipPageSize;\n-            } while (numResults == membershipPageSize);\n-\n-        } catch (final InvalidQueryException e) {\n-            throw new RepositoryRuntimeException(\"Failed to repopulate membership history\", e);\n-        }\n-        membershipService.commitTransaction(txId);\n+    public void setMembershipQueryPageSize(final int pageSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3629680e291ce63441702130eb925b9f4448576f"}, "originalPosition": 265}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE2NTA3Mw==", "bodyText": "Is this method ever used?", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r516165073", "createdAt": "2020-11-02T18:11:49Z", "author": {"login": "awoods"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/IndexBuilderImpl.java", "diffHunk": "@@ -114,154 +84,45 @@ public void rebuildIfNecessary() {\n     private void rebuild() {\n         LOGGER.info(\"Initiating index rebuild.\");\n \n-        ocflIndex.reset();\n-        containmentIndex.reset();\n-        searchIndex.reset();\n-        referenceService.reset();\n-        membershipService.reset();\n+        reindexService.reset();\n \n-        final var txId = UUID.randomUUID().toString();\n+        final ReindexManager reindexManager = new ReindexManager(ocflRepository.listObjectIds(), reindexService,\n+                ocflPropsConfig);\n \n+        LOGGER.debug(\"Reading object ids...\");\n+        final var startTime = Instant.now();\n         try {\n-            LOGGER.debug(\"Reading object ids...\");\n-\n-            try (final var ocflIds = ocflRepository.listObjectIds()) {\n-                ocflIds.forEach(ocflId -> {\n-                    LOGGER.debug(\"Reading {}\", ocflId);\n-                    try (final var session = objectSessionFactory.newSession(ocflId)) {\n-                        indexOcflObject(ocflId, txId, session);\n-                    } catch (final Exception e) {\n-                        // The session's close method signature throws Exception\n-                        if (e instanceof RuntimeException) {\n-                            throw (RuntimeException) e;\n-                        }\n-                        throw new RuntimeException(e);\n-                    }\n-                });\n-            }\n-\n-            containmentIndex.commitTransaction(txId);\n-            ocflIndex.commit(txId);\n-            referenceService.commitTransaction(txId);\n-            indexMembership(txId);\n-            LOGGER.info(\"Index rebuild complete\");\n-        } catch (final RuntimeException e) {\n-            execQuietly(\"Failed to reset searchIndex\", () -> {\n-                searchIndex.reset();\n-                return null;\n-            });\n-\n-            execQuietly(\"Failed to rollback containment index transaction \" + txId, () -> {\n-                containmentIndex.rollbackTransaction(txId);\n-                return null;\n-            });\n-            execQuietly(\"Failed to rollback OCFL index transaction \" + txId, () -> {\n-                ocflIndex.rollback(txId);\n-                return null;\n-            });\n-\n-            execQuietly(\"Failed to rollback membership index transaction \" + txId, () -> {\n-                membershipService.rollbackTransaction(txId);\n-                return null;\n-            });\n-            throw e;\n+            reindexManager.start();\n+            reindexManager.commit();\n+            LOGGER.info(\"Reindexing complete.\");\n+        } catch (final InterruptedException e) {\n+            reindexManager.rollback();\n+            throw new RuntimeException(e);\n+        } finally {\n+            reindexManager.shutdown();\n         }\n+        final var endTime = Instant.now();\n+        final var count = reindexManager.getCompletedCount();\n+        final var errors = reindexManager.getErrorCount();\n+        LOGGER.info(\"Index rebuild completed {} objects successfully and {} objects had errors in {} \", count, errors,\n+                getDurationMessage(Duration.between(startTime, endTime)));\n     }\n \n-    private void indexOcflObject(final String ocflId, final String txId, final OcflObjectSession session) {\n-        final var rootId = new AtomicReference<FedoraId>();\n-        final var fedoraIds = new ArrayList<FedoraId>();\n-        final var headersList = new ArrayList<ResourceHeaders>();\n-\n-        session.streamResourceHeaders().forEach(storageHeaders -> {\n-            final var headers = new ResourceHeadersAdapter(storageHeaders);\n-\n-            final var fedoraId = headers.getId();\n-            fedoraIds.add(fedoraId);\n-            if (headers.isArchivalGroup() || headers.isObjectRoot()) {\n-                rootId.set(fedoraId);\n-            }\n-\n-            if (!headers.isDeleted() && !fedoraId.isRepositoryRoot()) {\n-                var parentId = headers.getParent();\n-\n-                if (headers.getParent() == null) {\n-                    if (headers.isObjectRoot()) {\n-                        parentId = FedoraId.getRepositoryRootId();\n-                    } else {\n-                        throw new IllegalStateException(String.format(\"Resource %s must have a parent defined\",\n-                                fedoraId.getFullId()));\n-                    }\n-                }\n-                if (!headers.getInteractionModel().equals(NON_RDF_SOURCE.toString())) {\n-                    final Optional<InputStream> content = session.readContent(fedoraId.getFullId()).getContentStream();\n-                    if (content.isPresent()) {\n-                        final RdfStream rdf = parseRdf(fedoraId, content.get());\n-                        this.referenceService.updateReferences(txId, fedoraId, null, rdf);\n-                    }\n-                }\n-\n-                this.containmentIndex.addContainedBy(txId, parentId, fedoraId);\n-                headersList.add(headers.asKernelHeaders());\n-            }\n-        });\n-\n-        if (rootId.get() == null) {\n-            throw new IllegalStateException(String.format(\"Failed to find root resource in object %s\", ocflId));\n-        }\n-\n-        fedoraIds.forEach(fedoraIdentifier -> {\n-            final var rootFedoraIdentifier = rootId.get();\n-            ocflIndex.addMapping(txId, fedoraIdentifier, rootFedoraIdentifier, ocflId);\n-            LOGGER.debug(\"Rebuilt fedora-to-ocfl object index entry for {}\", fedoraIdentifier);\n-        });\n-\n-        headersList.forEach(headers -> {\n-            searchIndex.addUpdateIndex(txId, headers);\n-            LOGGER.debug(\"Rebuilt searchIndex for {}\", headers.getId());\n-        });\n-    }\n \n     /**\n-     * Index all membership properties by querying for Direct containers, and then\n-     * trying population of the membership index for each one\n-     * @param txId\n+     * Pass this along to the ReindexService\n+     * @param pageSize number of results to use when querying for membership producing resources\n      */\n-    private void indexMembership(final String txId) {\n-        final var fields = List.of(Condition.Field.FEDORA_ID);\n-        final var conditions = List.of(Condition.fromEnums(Field.RDF_TYPE, Operator.EQ,\n-                RdfLexicon.DIRECT_CONTAINER.getURI()));\n-        int offset = 0;\n-\n-        try {\n-            int numResults = membershipPageSize;\n-            do {\n-                final var params = new SearchParameters(fields, conditions, membershipPageSize,\n-                        offset, Field.FEDORA_ID, \"asc\");\n-\n-                final var searchResult = searchIndex.doSearch(params);\n-                final var resultList = searchResult.getItems();\n-                numResults = resultList.size();\n-\n-                resultList.stream()\n-                    .map(entry -> FedoraId.create((String) entry.get(Condition.Field.FEDORA_ID.toString())))\n-                    .forEach(containerId -> membershipService.populateMembershipHistory(txId, containerId));\n-\n-                // Results are paged, so step through pages until we reach the last one\n-                offset += membershipPageSize;\n-            } while (numResults == membershipPageSize);\n-\n-        } catch (final InvalidQueryException e) {\n-            throw new RepositoryRuntimeException(\"Failed to repopulate membership history\", e);\n-        }\n-        membershipService.commitTransaction(txId);\n+    public void setMembershipQueryPageSize(final int pageSize) {\n+        reindexService.setMembershipPageSize(pageSize);\n     }\n \n     /**\n-     * @param pageSize number of results to use when querying for membership producing resources\n+     * Change the number of OCFL ids given out to workers at a time.\n+     * @param batchSize number of OCFL ids per batch.\n      */\n-    public void setMembershipQueryPageSize(final int pageSize) {\n-        this.membershipPageSize = pageSize;\n+    public void setReindexBatchSize(final int batchSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3629680e291ce63441702130eb925b9f4448576f"}, "originalPosition": 276}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "023f69b2c776c563c07bfc24e039917ccac6618d", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/023f69b2c776c563c07bfc24e039917ccac6618d", "committedDate": "2020-11-02T18:23:27Z", "message": "Remove ununsed functions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxODkwNjM4", "url": "https://github.com/fcrepo/fcrepo/pull/1783#pullrequestreview-521890638", "createdAt": "2020-11-02T18:27:07Z", "commit": {"oid": "3629680e291ce63441702130eb925b9f4448576f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODoyNzowOFrOHsQutw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODoyODo1MVrOHsQyfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE3MzQ5NQ==", "bodyText": "typo: 'Constuctor'", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r516173495", "createdAt": "2020-11-02T18:27:08Z", "author": {"login": "awoods"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/ReindexWorker.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.persistence.ocfl.impl;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.util.List;\n+\n+import org.slf4j.Logger;\n+\n+/**\n+ * A reindexing worker thread.\n+ * @author whikloj\n+ */\n+public class ReindexWorker implements Runnable {\n+\n+    private static final Logger LOGGER = getLogger(ReindexWorker.class);\n+    private Thread t;\n+    private ReindexManager manager;\n+    private ReindexService service;\n+    private String transactionId;\n+    private boolean running = true;\n+    private boolean failOnError;\n+\n+    /**\n+     * Basic Constuctor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3629680e291ce63441702130eb925b9f4448576f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE3NDM5Ng==", "bodyText": "Maybe include the txnId in the log message?", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r516174396", "createdAt": "2020-11-02T18:28:44Z", "author": {"login": "awoods"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/ReindexService.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.persistence.ocfl.impl;\n+\n+import static org.apache.jena.graph.NodeFactory.createURI;\n+import static org.apache.jena.rdf.model.ModelFactory.createDefaultModel;\n+import static org.fcrepo.kernel.api.RdfLexicon.NON_RDF_SOURCE;\n+import static org.fcrepo.persistence.ocfl.impl.OcflPersistentStorageUtils.getRdfFormat;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import javax.inject.Inject;\n+\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.riot.RDFDataMgr;\n+import org.fcrepo.kernel.api.ContainmentIndex;\n+import org.fcrepo.kernel.api.RdfLexicon;\n+import org.fcrepo.kernel.api.RdfStream;\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.models.ResourceHeaders;\n+import org.fcrepo.kernel.api.rdf.DefaultRdfStream;\n+import org.fcrepo.kernel.api.services.MembershipService;\n+import org.fcrepo.kernel.api.services.ReferenceService;\n+import org.fcrepo.persistence.api.PersistentStorageSessionManager;\n+import org.fcrepo.persistence.ocfl.api.FedoraToOcflObjectIndex;\n+import org.fcrepo.search.api.Condition;\n+import org.fcrepo.search.api.InvalidQueryException;\n+import org.fcrepo.search.api.SearchIndex;\n+import org.fcrepo.search.api.SearchParameters;\n+import org.fcrepo.storage.ocfl.OcflObjectSessionFactory;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Service that does the reindexing for one OCFL object.\n+ * @author whikloj\n+ */\n+@Component\n+public class ReindexService {\n+\n+    @Inject\n+    private PersistentStorageSessionManager persistentStorageSessionManager;\n+\n+    @Inject\n+    private OcflObjectSessionFactory ocflObjectSessionFactory;\n+\n+    @Autowired\n+    @Qualifier(\"ocflIndex\")\n+    private FedoraToOcflObjectIndex ocflIndex;\n+\n+    @Autowired\n+    @Qualifier(\"containmentIndex\")\n+    private ContainmentIndex containmentIndex;\n+\n+    @Autowired\n+    @Qualifier(\"searchIndex\")\n+    private SearchIndex searchIndex;\n+\n+    @Autowired\n+    @Qualifier(\"referenceService\")\n+    private ReferenceService referenceService;\n+\n+    @Inject\n+    private MembershipService membershipService;\n+\n+    private static final Logger LOGGER = getLogger(ReindexService.class);\n+\n+    private int membershipPageSize = 500;\n+\n+    public void indexOcflObject(final String txId, final String ocflId) {\n+        LOGGER.debug(\"Indexing ocflId {} in transaction {}\", ocflId, txId);\n+        try (final var session = ocflObjectSessionFactory.newSession(ocflId)) {\n+            final var rootId = new AtomicReference<FedoraId>();\n+            final var fedoraIds = new ArrayList<FedoraId>();\n+            final var headersList = new ArrayList<ResourceHeaders>();\n+\n+            session.streamResourceHeaders().forEach(storageHeaders -> {\n+                final var headers = new ResourceHeadersAdapter(storageHeaders);\n+\n+                final var fedoraId = headers.getId();\n+                fedoraIds.add(fedoraId);\n+                if (headers.isArchivalGroup() || headers.isObjectRoot()) {\n+                    rootId.set(fedoraId);\n+                }\n+\n+                if (!headers.isDeleted() && !fedoraId.isRepositoryRoot()) {\n+                    var parentId = headers.getParent();\n+\n+                    if (headers.getParent() == null) {\n+                        if (headers.isObjectRoot()) {\n+                            parentId = FedoraId.getRepositoryRootId();\n+                        } else {\n+                            throw new IllegalStateException(\n+                                    String.format(\"Resource %s must have a parent defined\", fedoraId.getFullId()));\n+                        }\n+                    }\n+                    if (!headers.getInteractionModel().equals(NON_RDF_SOURCE.toString())) {\n+                        final Optional<InputStream> content = session.readContent(fedoraId.getFullId())\n+                                .getContentStream();\n+                        if (content.isPresent()) {\n+                            final RdfStream rdf = parseRdf(fedoraId, content.get());\n+                            this.referenceService.updateReferences(txId, fedoraId, null, rdf);\n+                        }\n+                    }\n+\n+                    this.containmentIndex.addContainedBy(txId, parentId, fedoraId);\n+                    headersList.add(headers.asKernelHeaders());\n+                }\n+            });\n+\n+            if (rootId.get() == null) {\n+                throw new IllegalStateException(String.format(\"Failed to find root resource in object %s\", ocflId));\n+            }\n+\n+            fedoraIds.forEach(fedoraIdentifier -> {\n+                final var rootFedoraIdentifier = rootId.get();\n+                ocflIndex.addMapping(txId, fedoraIdentifier, rootFedoraIdentifier, ocflId);\n+                LOGGER.debug(\"Rebuilt fedora-to-ocfl object index entry for {}\", fedoraIdentifier);\n+            });\n+\n+            headersList.forEach(headers -> {\n+                searchIndex.addUpdateIndex(txId, headers);\n+                LOGGER.debug(\"Rebuilt searchIndex for {}\", headers.getId());\n+            });\n+        }\n+    }\n+\n+    /**\n+     * Remove persistent sessions for a transaction to avoid memory leaks.\n+     * @param transactionId the transaction id.\n+     */\n+    public void cleanupSession(final String transactionId) {\n+        persistentStorageSessionManager.removeSession(transactionId);\n+    }\n+\n+    /**\n+     * Set the membership page size.\n+     * @param pageSize the new page size.\n+     */\n+    public void setMembershipPageSize(final int pageSize) {\n+        membershipPageSize = pageSize;\n+    }\n+\n+    /**\n+     * Reset all the indexes.\n+     */\n+    public void reset() {\n+        ocflIndex.reset();\n+        containmentIndex.reset();\n+        searchIndex.reset();\n+        referenceService.reset();\n+        membershipService.reset();\n+    }\n+\n+    /**\n+     * Commit the records added from transaction.\n+     * @param transactionId the id of the transaction.\n+     */\n+    public void commit(final String transactionId) {\n+        try {\n+            LOGGER.debug(\"Performing commit\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3629680e291ce63441702130eb925b9f4448576f"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE3NDQ2MA==", "bodyText": "Maybe include the txnId in the log message?", "url": "https://github.com/fcrepo/fcrepo/pull/1783#discussion_r516174460", "createdAt": "2020-11-02T18:28:51Z", "author": {"login": "awoods"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/ReindexService.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.persistence.ocfl.impl;\n+\n+import static org.apache.jena.graph.NodeFactory.createURI;\n+import static org.apache.jena.rdf.model.ModelFactory.createDefaultModel;\n+import static org.fcrepo.kernel.api.RdfLexicon.NON_RDF_SOURCE;\n+import static org.fcrepo.persistence.ocfl.impl.OcflPersistentStorageUtils.getRdfFormat;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import javax.inject.Inject;\n+\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.riot.RDFDataMgr;\n+import org.fcrepo.kernel.api.ContainmentIndex;\n+import org.fcrepo.kernel.api.RdfLexicon;\n+import org.fcrepo.kernel.api.RdfStream;\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.models.ResourceHeaders;\n+import org.fcrepo.kernel.api.rdf.DefaultRdfStream;\n+import org.fcrepo.kernel.api.services.MembershipService;\n+import org.fcrepo.kernel.api.services.ReferenceService;\n+import org.fcrepo.persistence.api.PersistentStorageSessionManager;\n+import org.fcrepo.persistence.ocfl.api.FedoraToOcflObjectIndex;\n+import org.fcrepo.search.api.Condition;\n+import org.fcrepo.search.api.InvalidQueryException;\n+import org.fcrepo.search.api.SearchIndex;\n+import org.fcrepo.search.api.SearchParameters;\n+import org.fcrepo.storage.ocfl.OcflObjectSessionFactory;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Service that does the reindexing for one OCFL object.\n+ * @author whikloj\n+ */\n+@Component\n+public class ReindexService {\n+\n+    @Inject\n+    private PersistentStorageSessionManager persistentStorageSessionManager;\n+\n+    @Inject\n+    private OcflObjectSessionFactory ocflObjectSessionFactory;\n+\n+    @Autowired\n+    @Qualifier(\"ocflIndex\")\n+    private FedoraToOcflObjectIndex ocflIndex;\n+\n+    @Autowired\n+    @Qualifier(\"containmentIndex\")\n+    private ContainmentIndex containmentIndex;\n+\n+    @Autowired\n+    @Qualifier(\"searchIndex\")\n+    private SearchIndex searchIndex;\n+\n+    @Autowired\n+    @Qualifier(\"referenceService\")\n+    private ReferenceService referenceService;\n+\n+    @Inject\n+    private MembershipService membershipService;\n+\n+    private static final Logger LOGGER = getLogger(ReindexService.class);\n+\n+    private int membershipPageSize = 500;\n+\n+    public void indexOcflObject(final String txId, final String ocflId) {\n+        LOGGER.debug(\"Indexing ocflId {} in transaction {}\", ocflId, txId);\n+        try (final var session = ocflObjectSessionFactory.newSession(ocflId)) {\n+            final var rootId = new AtomicReference<FedoraId>();\n+            final var fedoraIds = new ArrayList<FedoraId>();\n+            final var headersList = new ArrayList<ResourceHeaders>();\n+\n+            session.streamResourceHeaders().forEach(storageHeaders -> {\n+                final var headers = new ResourceHeadersAdapter(storageHeaders);\n+\n+                final var fedoraId = headers.getId();\n+                fedoraIds.add(fedoraId);\n+                if (headers.isArchivalGroup() || headers.isObjectRoot()) {\n+                    rootId.set(fedoraId);\n+                }\n+\n+                if (!headers.isDeleted() && !fedoraId.isRepositoryRoot()) {\n+                    var parentId = headers.getParent();\n+\n+                    if (headers.getParent() == null) {\n+                        if (headers.isObjectRoot()) {\n+                            parentId = FedoraId.getRepositoryRootId();\n+                        } else {\n+                            throw new IllegalStateException(\n+                                    String.format(\"Resource %s must have a parent defined\", fedoraId.getFullId()));\n+                        }\n+                    }\n+                    if (!headers.getInteractionModel().equals(NON_RDF_SOURCE.toString())) {\n+                        final Optional<InputStream> content = session.readContent(fedoraId.getFullId())\n+                                .getContentStream();\n+                        if (content.isPresent()) {\n+                            final RdfStream rdf = parseRdf(fedoraId, content.get());\n+                            this.referenceService.updateReferences(txId, fedoraId, null, rdf);\n+                        }\n+                    }\n+\n+                    this.containmentIndex.addContainedBy(txId, parentId, fedoraId);\n+                    headersList.add(headers.asKernelHeaders());\n+                }\n+            });\n+\n+            if (rootId.get() == null) {\n+                throw new IllegalStateException(String.format(\"Failed to find root resource in object %s\", ocflId));\n+            }\n+\n+            fedoraIds.forEach(fedoraIdentifier -> {\n+                final var rootFedoraIdentifier = rootId.get();\n+                ocflIndex.addMapping(txId, fedoraIdentifier, rootFedoraIdentifier, ocflId);\n+                LOGGER.debug(\"Rebuilt fedora-to-ocfl object index entry for {}\", fedoraIdentifier);\n+            });\n+\n+            headersList.forEach(headers -> {\n+                searchIndex.addUpdateIndex(txId, headers);\n+                LOGGER.debug(\"Rebuilt searchIndex for {}\", headers.getId());\n+            });\n+        }\n+    }\n+\n+    /**\n+     * Remove persistent sessions for a transaction to avoid memory leaks.\n+     * @param transactionId the transaction id.\n+     */\n+    public void cleanupSession(final String transactionId) {\n+        persistentStorageSessionManager.removeSession(transactionId);\n+    }\n+\n+    /**\n+     * Set the membership page size.\n+     * @param pageSize the new page size.\n+     */\n+    public void setMembershipPageSize(final int pageSize) {\n+        membershipPageSize = pageSize;\n+    }\n+\n+    /**\n+     * Reset all the indexes.\n+     */\n+    public void reset() {\n+        ocflIndex.reset();\n+        containmentIndex.reset();\n+        searchIndex.reset();\n+        referenceService.reset();\n+        membershipService.reset();\n+    }\n+\n+    /**\n+     * Commit the records added from transaction.\n+     * @param transactionId the id of the transaction.\n+     */\n+    public void commit(final String transactionId) {\n+        try {\n+            LOGGER.debug(\"Performing commit\");\n+            containmentIndex.commitTransaction(transactionId);\n+            ocflIndex.commit(transactionId);\n+            referenceService.commitTransaction(transactionId);\n+            LOGGER.debug(\"Finished commit\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3629680e291ce63441702130eb925b9f4448576f"}, "originalPosition": 189}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee644d819c37026c2c6f45881bf22700285807c3", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/ee644d819c37026c2c6f45881bf22700285807c3", "committedDate": "2020-11-02T18:46:05Z", "message": "Code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTA4Nzg0", "url": "https://github.com/fcrepo/fcrepo/pull/1783#pullrequestreview-521908784", "createdAt": "2020-11-02T18:53:30Z", "commit": {"oid": "ee644d819c37026c2c6f45881bf22700285807c3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2988, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}