{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMzI3NDI3", "number": 1801, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNDozMzo0NlrOE4eLPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNTowNTozNlrOE4s35g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjUwMTEwOnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNDozMzo0NlrOHyaIkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNDozMzo0NlrOHyaIkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYxOTAyNw==", "bodyText": "I had to switch this back as getResourceId only deals with things that have an actual file backing them.\nA get to a timemap returned both the mementos but also the containment from the Original Resource. So I switched back to this method", "url": "https://github.com/fcrepo/fcrepo/pull/1801#discussion_r522619027", "createdAt": "2020-11-13T04:33:46Z", "author": {"login": "whikloj"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -395,7 +395,7 @@ private NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n \n     @Override\n     public Stream<String> getContains(final String txId, final FedoraId fedoraId) {\n-        final String resourceId = fedoraId.getResourceId();\n+        final String resourceId = fedoraId.isMemento() ? fedoraId.getBaseId() : fedoraId.getFullId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61cf4732d9ae30ec0a08827db88bdfdbaf06ebe6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODYwODA1OnYy", "diffSide": "RIGHT", "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/ReindexService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMzo1MDoxNlrOHyvBsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMzo1MDoxNlrOHyvBsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk2MTMyOA==", "bodyText": "Recognizing that this is not new code, I believe this input stream is not being closed.", "url": "https://github.com/fcrepo/fcrepo/pull/1801#discussion_r522961328", "createdAt": "2020-11-13T13:50:16Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/ReindexService.java", "diffHunk": "@@ -118,17 +118,23 @@ public void indexOcflObject(final String txId, final String ocflId) {\n                                     String.format(\"Resource %s must have a parent defined\", fedoraId.getFullId()));\n                         }\n                     }\n-                    if (!headers.getInteractionModel().equals(NON_RDF_SOURCE.toString())) {\n-                        final Optional<InputStream> content = session.readContent(fedoraId.getFullId())\n-                                .getContentStream();\n-                        if (content.isPresent()) {\n-                            final RdfStream rdf = parseRdf(fedoraId, content.get());\n-                            this.referenceService.updateReferences(txId, fedoraId, null, rdf);\n+                    final var created = headers.getCreatedDate();\n+                    if (!headers.isDeleted()) {\n+                        if (!headers.getInteractionModel().equals(NON_RDF_SOURCE.toString())) {\n+                            final Optional<InputStream> content = session.readContent(fedoraId.getFullId())\n+                                    .getContentStream();\n+                            if (content.isPresent()) {\n+                                final RdfStream rdf = parseRdf(fedoraId, content.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61cf4732d9ae30ec0a08827db88bdfdbaf06ebe6"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODkwOTE4OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/ReferenceServiceImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNTowNTozNlrOHyx5cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDoyOTowNlrOHy995Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAwODM3MA==", "bodyText": "This will work, but it's slightly unexpected behavior. Generally speaking, streams are closed on the same level that they're opened on. For example,\ntry (final var stream = content.get()) {\n    final RdfStream rdf = parseRdf(fedoraId, stream);\n    this.referenceService.updateReferences(txId, fedoraId, null, rdf);\n}\nThere are a variety of advantages to this approach, not the least of which is that it's clear when a stream is closed and you don't need to inspect every method that the stream is passed to to see if it closes it.", "url": "https://github.com/fcrepo/fcrepo/pull/1801#discussion_r523008370", "createdAt": "2020-11-13T15:05:36Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/ReferenceServiceImpl.java", "diffHunk": "@@ -302,6 +302,8 @@ public void updateReferences(@Nonnull final String txId, final FedoraId resource\n             LOGGER.warn(\"Unable to update reference index for resource {} in transaction {}: {}\",\n                     resourceId.getFullId(), txId, e.getMessage());\n             throw new RepositoryRuntimeException(\"Unable to update reference index\", e);\n+        } finally {\n+            rdfStream.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0692fb8a4169e57f291a854a2c532bdeae20c795"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE5NDEwNg==", "bodyText": "So its going to end up looking like this\ntry (final var stream = content.get()) {\n    final RdfStream rdf = parseRdf(fedoraId, stream);\n    this.referenceService.updateReferences(txId, fedoraId, null, rdf);\n} catch (final IOException e) {\n    LOGGER.warn(\"Content stream for {} closed prematurely, inbound references skipped.\",\n        fedoraId.getFullId());\n    throw new RepositoryRuntimeException(e.getMessage(), e);\n}\n(I think) because its already in a try {} enclosure. Do I also need to close the RdfStream?", "url": "https://github.com/fcrepo/fcrepo/pull/1801#discussion_r523194106", "createdAt": "2020-11-13T20:03:21Z", "author": {"login": "whikloj"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/ReferenceServiceImpl.java", "diffHunk": "@@ -302,6 +302,8 @@ public void updateReferences(@Nonnull final String txId, final FedoraId resource\n             LOGGER.warn(\"Unable to update reference index for resource {} in transaction {}: {}\",\n                     resourceId.getFullId(), txId, e.getMessage());\n             throw new RepositoryRuntimeException(\"Unable to update reference index\", e);\n+        } finally {\n+            rdfStream.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAwODM3MA=="}, "originalCommit": {"oid": "0692fb8a4169e57f291a854a2c532bdeae20c795"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIwNjExNw==", "bodyText": "Yes, that looks correct.\nI poked around in the code, and it looks like what's going on is the InputStream is read into an RDF model object and then that model object is turned into an RdfStream. The RdfStream has no relation to the InputStream. It is a stream in the Java 8 Streaming sense, and very likely does not need to be closed. Streams can be closed, but, unless the Stream is IO related, it is usually not necessary.", "url": "https://github.com/fcrepo/fcrepo/pull/1801#discussion_r523206117", "createdAt": "2020-11-13T20:29:06Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/ReferenceServiceImpl.java", "diffHunk": "@@ -302,6 +302,8 @@ public void updateReferences(@Nonnull final String txId, final FedoraId resource\n             LOGGER.warn(\"Unable to update reference index for resource {} in transaction {}: {}\",\n                     resourceId.getFullId(), txId, e.getMessage());\n             throw new RepositoryRuntimeException(\"Unable to update reference index\", e);\n+        } finally {\n+            rdfStream.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAwODM3MA=="}, "originalCommit": {"oid": "0692fb8a4169e57f291a854a2c532bdeae20c795"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1715, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}