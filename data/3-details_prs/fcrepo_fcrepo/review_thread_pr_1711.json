{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0OTA1NDAx", "number": 1711, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoyOTowN1rOEMDeVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1OToxMFrOEMEK8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDc1Mjg2OnYy", "diffSide": "RIGHT", "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/api/OCFLObjectSession.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoyOTowN1rOGt8Qig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNTozNjoyOVrOGuEUbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyNjM3OA==", "bodyText": "It's more conventional for this type of method to be named isX() as in isNewInSession().", "url": "https://github.com/fcrepo/fcrepo/pull/1711#discussion_r450826378", "createdAt": "2020-07-07T12:29:07Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/api/OCFLObjectSession.java", "diffHunk": "@@ -165,4 +165,12 @@\n      * @return the digest algorithm used by the OCFL object\n      */\n     DIGEST_ALGORITHM getObjectDigestAlgorithm();\n+\n+    /**\n+     * Determine if the subpath is new to this session (has no versions committed).\n+     *\n+     * @param subpath the subpath to the resource.\n+     * @return true if this subpath has never been committed.\n+     */\n+    boolean newInSession(final String subpath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b92da1feada6b17a36158eca584f5b484e81a57d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzMTE1NA==", "bodyText": "Thinking about this some more, this method as currently defined is a little ambiguous. I can think of the following possibilities:\n\nsubpath exists in an OCFL version\nsubpath does not exist in an OCFL version but it does in staging\nsubpath does not exist in an OCFL version and does not exist in staging\n\nWhat is returned in the third case? false would seem to indicate that it exists in staging, but it doesn't.\nPerhaps an easy solution to this is to call the method something like isPersisted() to indicate whether or not a subpath has been persisted with no indication if the subpath is staged?", "url": "https://github.com/fcrepo/fcrepo/pull/1711#discussion_r450831154", "createdAt": "2020-07-07T12:37:47Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/api/OCFLObjectSession.java", "diffHunk": "@@ -165,4 +165,12 @@\n      * @return the digest algorithm used by the OCFL object\n      */\n     DIGEST_ALGORITHM getObjectDigestAlgorithm();\n+\n+    /**\n+     * Determine if the subpath is new to this session (has no versions committed).\n+     *\n+     * @param subpath the subpath to the resource.\n+     * @return true if this subpath has never been committed.\n+     */\n+    boolean newInSession(final String subpath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyNjM3OA=="}, "originalCommit": {"oid": "b92da1feada6b17a36158eca584f5b484e81a57d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk1ODQ0Ng==", "bodyText": "So my assumption (and that is probably the issue) is new in session meant it had not been persisted to an OCFL version (or mutable head). That is what I was worried about, is this thing in OCFL or just in staging.\nSo based on that, do you want me to change the method name to isPersisted(final String subpath)?", "url": "https://github.com/fcrepo/fcrepo/pull/1711#discussion_r450958446", "createdAt": "2020-07-07T15:36:29Z", "author": {"login": "whikloj"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/api/OCFLObjectSession.java", "diffHunk": "@@ -165,4 +165,12 @@\n      * @return the digest algorithm used by the OCFL object\n      */\n     DIGEST_ALGORITHM getObjectDigestAlgorithm();\n+\n+    /**\n+     * Determine if the subpath is new to this session (has no versions committed).\n+     *\n+     * @param subpath the subpath to the resource.\n+     * @return true if this subpath has never been committed.\n+     */\n+    boolean newInSession(final String subpath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyNjM3OA=="}, "originalCommit": {"oid": "b92da1feada6b17a36158eca584f5b484e81a57d"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDc2ODI2OnYy", "diffSide": "RIGHT", "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/DeleteResourcePersister.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjozMzoyNlrOGt8ZxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjozMzoyNlrOGt8ZxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyODc0MA==", "bodyText": "Perhaps there could be a version of isNewInSession() that returns true if the OCFL object itself is new in the session? It seems a little wrong to me to base this logic on an exception being thrown from listHeadSubpaths(). In fact, it seems like a bug to me that listHeadSubpaths() is throwing an exception rather than returning an empty stream.", "url": "https://github.com/fcrepo/fcrepo/pull/1711#discussion_r450828740", "createdAt": "2020-07-07T12:33:26Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/DeleteResourcePersister.java", "diffHunk": "@@ -62,8 +63,12 @@ public void persist(final OCFLPersistentStorageSession session, final ResourceOp\n         if (fedoraResourceRoot.equals(resourceId)) {\n             // We are at the root of the object, so delete all the data files.\n             try {\n-                objectSession.listHeadSubpaths().filter(p -> !isSidecarSubpath(p)).forEach(\n+                final Stream<String> files = objectSession.listHeadSubpaths();\n+                files.filter(p -> !isSidecarSubpath(p)).forEach(\n                         p -> deletePathWrapped(p, objectSession, user, deleteTime));\n+            } catch (final PersistentStorageException exc) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b92da1feada6b17a36158eca584f5b484e81a57d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDg2NzA2OnYy", "diffSide": "RIGHT", "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/DefaultOCFLObjectSession.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1OToxMFrOGt9WYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1OToxMFrOGt9WYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0NDI1OQ==", "bodyText": "As mentioned earlier, this seems like a bug. I think it makes more sense if an empty stream is returned if the object does not exist in OCFL.", "url": "https://github.com/fcrepo/fcrepo/pull/1711#discussion_r450844259", "createdAt": "2020-07-07T12:59:10Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/DefaultOCFLObjectSession.java", "diffHunk": "@@ -564,11 +568,15 @@ public synchronized void close() throws PersistentStorageException {\n     @Override\n     public Stream<String> listHeadSubpaths() throws PersistentStorageException {\n         assertSessionOpen();\n-\n-        return this.ocflRepository.describeVersion(ObjectVersionId.head(this.objectIdentifier))\n-                .getFiles().stream()\n-                .map(FileDetails::getPath)\n-                .map(this::decode);\n+        try {\n+            return this.ocflRepository.describeVersion(ObjectVersionId.head(this.objectIdentifier))\n+                    .getFiles()\n+                    .stream()\n+                    .map(FileDetails::getPath)\n+                    .map(this::decode);\n+        } catch (final NotFoundException exc) {\n+            throw new PersistentStorageException(exc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b92da1feada6b17a36158eca584f5b484e81a57d"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1860, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}