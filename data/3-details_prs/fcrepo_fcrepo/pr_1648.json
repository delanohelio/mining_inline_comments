{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNjk4MzEx", "number": 1648, "title": "Add a FedoraID class", "bodyText": "JIRA Ticket: https://jira.lyrasis.org/browse/FCREPO-3254\nWhat does this Pull Request do?\nCreates a new immutable class to hold the fedora ID but allow more context. ie. For a Memento we need the original resource to find the memento but need the memento information for context. This stores and makes available both.\nHow should this be tested?\nThis is just to ensure it is what everyone expects, follow on work can wire this into the kernel layer.\nInterested parties\n@fcrepo4/committers @pwinckles", "createdAt": "2020-03-20T19:10:14Z", "url": "https://github.com/fcrepo/fcrepo/pull/1648", "merged": true, "mergeCommit": {"oid": "22c4dd597da358b8cb6a6318bb3a044df2d8fae1"}, "closed": true, "closedAt": "2020-03-26T14:07:18Z", "author": {"login": "whikloj"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPlXMXAH2gAyMzkxNjk4MzExOjE2NzkzNWEyY2QwM2Q0MmI0NTk0OTkwNTY2YmY4NWVmOTdiOWE3NDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRcqnWgFqTM4MjA0MjIzOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "167935a2cd03d42b4594990566bf85ef97b9a742", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/167935a2cd03d42b4594990566bf85ef97b9a742", "committedDate": "2020-03-20T19:06:46Z", "message": "Add a FedoraID class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4ODMzMjg0", "url": "https://github.com/fcrepo/fcrepo/pull/1648#pullrequestreview-378833284", "createdAt": "2020-03-20T21:55:07Z", "commit": {"oid": "167935a2cd03d42b4594990566bf85ef97b9a742"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo1NTowN1rOF5kPTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMjowMTo1N1rOF5kXvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNjg5NA==", "bodyText": "Maybe change to Java syntax? ..something like mementoDatetimeStr", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r395906894", "createdAt": "2020-03-20T21:55:07Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.identifiers;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_ACL;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_METADATA;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_VERSIONS;\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Class to store contextual information about a Fedora ID.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class FedoraID {\n+\n+    private String id;\n+    private String fullId;\n+    private String hashUri;\n+    private boolean isRepositoryRoot = false;\n+    private boolean isNonRdfSourceDescription = false;\n+    private boolean isAcl = false;\n+    private boolean isMemento = false;\n+    private boolean isTimemap = false;\n+    private Instant mementoDatetime;\n+    private String mementoDatetime_str;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167935a2cd03d42b4594990566bf85ef97b9a742"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNzUyMQ==", "bodyText": "The idea is that this class only handles internal IDs? I assume the expectation is that translation to an external representation will be handled at the http-api level?", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r395907521", "createdAt": "2020-03-20T21:57:01Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.identifiers;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_ACL;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_METADATA;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_VERSIONS;\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Class to store contextual information about a Fedora ID.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class FedoraID {\n+\n+    private String id;\n+    private String fullId;\n+    private String hashUri;\n+    private boolean isRepositoryRoot = false;\n+    private boolean isNonRdfSourceDescription = false;\n+    private boolean isAcl = false;\n+    private boolean isMemento = false;\n+    private boolean isTimemap = false;\n+    private Instant mementoDatetime;\n+    private String mementoDatetime_str;\n+\n+    /**\n+     * Basic constructor.\n+     * @param fullId The full identifier.\n+     * @throws IllegalArgumentException If ID does not start with expected prefix.\n+     */\n+    public FedoraID(final String fullId) {\n+        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167935a2cd03d42b4594990566bf85ef97b9a742"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwOTA1NA==", "bodyText": "What is this scenario? ..when there is something that follows fcr:versions... but not a memento identifier??", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r395909054", "createdAt": "2020-03-20T22:01:57Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.identifiers;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_ACL;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_METADATA;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_VERSIONS;\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Class to store contextual information about a Fedora ID.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class FedoraID {\n+\n+    private String id;\n+    private String fullId;\n+    private String hashUri;\n+    private boolean isRepositoryRoot = false;\n+    private boolean isNonRdfSourceDescription = false;\n+    private boolean isAcl = false;\n+    private boolean isMemento = false;\n+    private boolean isTimemap = false;\n+    private Instant mementoDatetime;\n+    private String mementoDatetime_str;\n+\n+    /**\n+     * Basic constructor.\n+     * @param fullId The full identifier.\n+     * @throws IllegalArgumentException If ID does not start with expected prefix.\n+     */\n+    public FedoraID(final String fullId) {\n+        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n+            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n+        }\n+        this.fullId = fullId;\n+        processIdentifier();\n+    }\n+\n+    /**\n+     * Is the identifier for the repository root.\n+     * @return true of id is equal to info:fedora/\n+     */\n+    public boolean isRepositoryRoot() {\n+        return isRepositoryRoot;\n+    }\n+\n+    /**\n+     * Is the identifier for a Memento?\n+     * @return true if the id is for the fcr:versions endpoint and has a memento datetime string after it.\n+     */\n+    public boolean isMemento() {\n+        return isMemento;\n+    }\n+\n+    /**\n+     * Is the identifier for an ACL?\n+     * @return true if the id is for the fcr:acl endpoint.\n+     */\n+    public boolean isAcl() {\n+        return isAcl;\n+    }\n+\n+    /**\n+     * Is the identifier for a timemap?\n+     * @return true if id for the fcr:versions endpoint and NOT a memento.\n+     */\n+    public boolean isTimemap() {\n+        return isTimemap;\n+    }\n+\n+    /**\n+     * Is the identifier for a nonRdfSourceDescription?\n+     * @return true if id for the fcr:metadata endpoint\n+     */\n+    public boolean isDescription() {\n+        return isNonRdfSourceDescription;\n+    }\n+\n+    /**\n+     * Is the identifier for a hash uri?\n+     * @return true if full id referenced a hash uri.\n+     */\n+    public boolean isHashUri() {\n+        return hashUri != null;\n+    }\n+\n+    /**\n+     * Get the hash uri.\n+     * @return the hash uri from the id or null if none.\n+     */\n+    public String getHashUri() {\n+        return hashUri;\n+    }\n+\n+    /**\n+     * Return the ID of the base resource for this request.\n+     * @return the shorten id.\n+     */\n+    public String getResourceId() {\n+        return id;\n+    }\n+\n+    /**\n+     * Return the original full ID.\n+     * @return the id.\n+     */\n+    public String getFullId() {\n+        return fullId;\n+    }\n+\n+    /**\n+     * Return the Memento datetime as Instant.\n+     * @return The datetime or null if not a memento.\n+     */\n+    public Instant getMementoInstant() {\n+        return mementoDatetime;\n+    }\n+\n+    /**\n+     * Return the Memento datetime string.\n+     * @return The yyyymmddhhiiss memento datetime or null if not a Memento.\n+     */\n+    public String getMementoString() {\n+        return mementoDatetime_str;\n+    }\n+\n+    /**\n+     * Process the original ID into its parts without using a regular expression.\n+     */\n+    private void processIdentifier() {\n+        // Regex pattern which decomposes a http resource uri into components\n+        // The first group determines if it is an fcr:metadata non-rdf source.\n+        // The second group determines if the path is for a memento or timemap.\n+        // The third group allows for a memento identifier.\n+        // The fourth group for allows ACL.\n+        // The fifth group allows for any hashed suffixes.\n+        // \".*?(/\" + FCR_METADATA + \")?(/\" + FCR_VERSIONS + \"(/\\\\d{14})?)?(/\" + FCR_ACL + \")?(\\\\#\\\\S+)?$\");\n+        String processID = this.fullId;\n+        if (processID.equals(FEDORA_ID_PREFIX)) {\n+            this.isRepositoryRoot = true;\n+            this.id = this.fullId;\n+            // Root has no other possible endpoints, so short circuit out.\n+            return;\n+        }\n+        if (processID.contains(\"#\")) {\n+            this.hashUri = processID.split(\"#\")[1];\n+            processID = processID.split(\"#\")[0];\n+        }\n+        if (processID.contains(FCR_ACL)) {\n+            this.isAcl = true;\n+            processID = processID.split(FCR_ACL)[0];\n+        }\n+        if (processID.contains(FCR_VERSIONS)) {\n+            if (processID.split(FCR_VERSIONS).length == 2) {\n+                final String afterVersion = processID.split(FCR_VERSIONS)[1];\n+                if (afterVersion.matches(\"/\\\\d{14}\")) {\n+                    this.isMemento = true;\n+                    this.mementoDatetime_str = afterVersion.substring(1);\n+                    this.mementoDatetime = Instant.from(MEMENTO_LABEL_FORMATTER.parse(this.mementoDatetime_str));\n+                } else {\n+                    this.isTimemap = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167935a2cd03d42b4594990566bf85ef97b9a742"}, "originalPosition": 181}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NDIxNzMx", "url": "https://github.com/fcrepo/fcrepo/pull/1648#pullrequestreview-379421731", "createdAt": "2020-03-23T13:22:34Z", "commit": {"oid": "167935a2cd03d42b4594990566bf85ef97b9a742"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzoyMjozNFrOF6FHYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzozODozMlrOF6Fw-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ0NTUzOA==", "bodyText": "Shouldn't do the same split twice.", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396445538", "createdAt": "2020-03-23T13:22:34Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.identifiers;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_ACL;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_METADATA;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_VERSIONS;\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Class to store contextual information about a Fedora ID.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class FedoraID {\n+\n+    private String id;\n+    private String fullId;\n+    private String hashUri;\n+    private boolean isRepositoryRoot = false;\n+    private boolean isNonRdfSourceDescription = false;\n+    private boolean isAcl = false;\n+    private boolean isMemento = false;\n+    private boolean isTimemap = false;\n+    private Instant mementoDatetime;\n+    private String mementoDatetime_str;\n+\n+    /**\n+     * Basic constructor.\n+     * @param fullId The full identifier.\n+     * @throws IllegalArgumentException If ID does not start with expected prefix.\n+     */\n+    public FedoraID(final String fullId) {\n+        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n+            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n+        }\n+        this.fullId = fullId;\n+        processIdentifier();\n+    }\n+\n+    /**\n+     * Is the identifier for the repository root.\n+     * @return true of id is equal to info:fedora/\n+     */\n+    public boolean isRepositoryRoot() {\n+        return isRepositoryRoot;\n+    }\n+\n+    /**\n+     * Is the identifier for a Memento?\n+     * @return true if the id is for the fcr:versions endpoint and has a memento datetime string after it.\n+     */\n+    public boolean isMemento() {\n+        return isMemento;\n+    }\n+\n+    /**\n+     * Is the identifier for an ACL?\n+     * @return true if the id is for the fcr:acl endpoint.\n+     */\n+    public boolean isAcl() {\n+        return isAcl;\n+    }\n+\n+    /**\n+     * Is the identifier for a timemap?\n+     * @return true if id for the fcr:versions endpoint and NOT a memento.\n+     */\n+    public boolean isTimemap() {\n+        return isTimemap;\n+    }\n+\n+    /**\n+     * Is the identifier for a nonRdfSourceDescription?\n+     * @return true if id for the fcr:metadata endpoint\n+     */\n+    public boolean isDescription() {\n+        return isNonRdfSourceDescription;\n+    }\n+\n+    /**\n+     * Is the identifier for a hash uri?\n+     * @return true if full id referenced a hash uri.\n+     */\n+    public boolean isHashUri() {\n+        return hashUri != null;\n+    }\n+\n+    /**\n+     * Get the hash uri.\n+     * @return the hash uri from the id or null if none.\n+     */\n+    public String getHashUri() {\n+        return hashUri;\n+    }\n+\n+    /**\n+     * Return the ID of the base resource for this request.\n+     * @return the shorten id.\n+     */\n+    public String getResourceId() {\n+        return id;\n+    }\n+\n+    /**\n+     * Return the original full ID.\n+     * @return the id.\n+     */\n+    public String getFullId() {\n+        return fullId;\n+    }\n+\n+    /**\n+     * Return the Memento datetime as Instant.\n+     * @return The datetime or null if not a memento.\n+     */\n+    public Instant getMementoInstant() {\n+        return mementoDatetime;\n+    }\n+\n+    /**\n+     * Return the Memento datetime string.\n+     * @return The yyyymmddhhiiss memento datetime or null if not a Memento.\n+     */\n+    public String getMementoString() {\n+        return mementoDatetime_str;\n+    }\n+\n+    /**\n+     * Process the original ID into its parts without using a regular expression.\n+     */\n+    private void processIdentifier() {\n+        // Regex pattern which decomposes a http resource uri into components\n+        // The first group determines if it is an fcr:metadata non-rdf source.\n+        // The second group determines if the path is for a memento or timemap.\n+        // The third group allows for a memento identifier.\n+        // The fourth group for allows ACL.\n+        // The fifth group allows for any hashed suffixes.\n+        // \".*?(/\" + FCR_METADATA + \")?(/\" + FCR_VERSIONS + \"(/\\\\d{14})?)?(/\" + FCR_ACL + \")?(\\\\#\\\\S+)?$\");\n+        String processID = this.fullId;\n+        if (processID.equals(FEDORA_ID_PREFIX)) {\n+            this.isRepositoryRoot = true;\n+            this.id = this.fullId;\n+            // Root has no other possible endpoints, so short circuit out.\n+            return;\n+        }\n+        if (processID.contains(\"#\")) {\n+            this.hashUri = processID.split(\"#\")[1];\n+            processID = processID.split(\"#\")[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167935a2cd03d42b4594990566bf85ef97b9a742"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ0ODY5NA==", "bodyText": "Is the assumption that any trailing slashes were removed outside of this class? It might be worth doing a final trim here to be safe.", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396448694", "createdAt": "2020-03-23T13:27:29Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.identifiers;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_ACL;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_METADATA;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_VERSIONS;\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Class to store contextual information about a Fedora ID.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class FedoraID {\n+\n+    private String id;\n+    private String fullId;\n+    private String hashUri;\n+    private boolean isRepositoryRoot = false;\n+    private boolean isNonRdfSourceDescription = false;\n+    private boolean isAcl = false;\n+    private boolean isMemento = false;\n+    private boolean isTimemap = false;\n+    private Instant mementoDatetime;\n+    private String mementoDatetime_str;\n+\n+    /**\n+     * Basic constructor.\n+     * @param fullId The full identifier.\n+     * @throws IllegalArgumentException If ID does not start with expected prefix.\n+     */\n+    public FedoraID(final String fullId) {\n+        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n+            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n+        }\n+        this.fullId = fullId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167935a2cd03d42b4594990566bf85ef97b9a742"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ1MjQ1NQ==", "bodyText": "See what I did here when parsing mementos. I think you want to throw an exception here if there's a part after fcr:versions that isn't a parsable memento.", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396452455", "createdAt": "2020-03-23T13:33:00Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.identifiers;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_ACL;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_METADATA;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_VERSIONS;\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Class to store contextual information about a Fedora ID.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class FedoraID {\n+\n+    private String id;\n+    private String fullId;\n+    private String hashUri;\n+    private boolean isRepositoryRoot = false;\n+    private boolean isNonRdfSourceDescription = false;\n+    private boolean isAcl = false;\n+    private boolean isMemento = false;\n+    private boolean isTimemap = false;\n+    private Instant mementoDatetime;\n+    private String mementoDatetime_str;\n+\n+    /**\n+     * Basic constructor.\n+     * @param fullId The full identifier.\n+     * @throws IllegalArgumentException If ID does not start with expected prefix.\n+     */\n+    public FedoraID(final String fullId) {\n+        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n+            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n+        }\n+        this.fullId = fullId;\n+        processIdentifier();\n+    }\n+\n+    /**\n+     * Is the identifier for the repository root.\n+     * @return true of id is equal to info:fedora/\n+     */\n+    public boolean isRepositoryRoot() {\n+        return isRepositoryRoot;\n+    }\n+\n+    /**\n+     * Is the identifier for a Memento?\n+     * @return true if the id is for the fcr:versions endpoint and has a memento datetime string after it.\n+     */\n+    public boolean isMemento() {\n+        return isMemento;\n+    }\n+\n+    /**\n+     * Is the identifier for an ACL?\n+     * @return true if the id is for the fcr:acl endpoint.\n+     */\n+    public boolean isAcl() {\n+        return isAcl;\n+    }\n+\n+    /**\n+     * Is the identifier for a timemap?\n+     * @return true if id for the fcr:versions endpoint and NOT a memento.\n+     */\n+    public boolean isTimemap() {\n+        return isTimemap;\n+    }\n+\n+    /**\n+     * Is the identifier for a nonRdfSourceDescription?\n+     * @return true if id for the fcr:metadata endpoint\n+     */\n+    public boolean isDescription() {\n+        return isNonRdfSourceDescription;\n+    }\n+\n+    /**\n+     * Is the identifier for a hash uri?\n+     * @return true if full id referenced a hash uri.\n+     */\n+    public boolean isHashUri() {\n+        return hashUri != null;\n+    }\n+\n+    /**\n+     * Get the hash uri.\n+     * @return the hash uri from the id or null if none.\n+     */\n+    public String getHashUri() {\n+        return hashUri;\n+    }\n+\n+    /**\n+     * Return the ID of the base resource for this request.\n+     * @return the shorten id.\n+     */\n+    public String getResourceId() {\n+        return id;\n+    }\n+\n+    /**\n+     * Return the original full ID.\n+     * @return the id.\n+     */\n+    public String getFullId() {\n+        return fullId;\n+    }\n+\n+    /**\n+     * Return the Memento datetime as Instant.\n+     * @return The datetime or null if not a memento.\n+     */\n+    public Instant getMementoInstant() {\n+        return mementoDatetime;\n+    }\n+\n+    /**\n+     * Return the Memento datetime string.\n+     * @return The yyyymmddhhiiss memento datetime or null if not a Memento.\n+     */\n+    public String getMementoString() {\n+        return mementoDatetime_str;\n+    }\n+\n+    /**\n+     * Process the original ID into its parts without using a regular expression.\n+     */\n+    private void processIdentifier() {\n+        // Regex pattern which decomposes a http resource uri into components\n+        // The first group determines if it is an fcr:metadata non-rdf source.\n+        // The second group determines if the path is for a memento or timemap.\n+        // The third group allows for a memento identifier.\n+        // The fourth group for allows ACL.\n+        // The fifth group allows for any hashed suffixes.\n+        // \".*?(/\" + FCR_METADATA + \")?(/\" + FCR_VERSIONS + \"(/\\\\d{14})?)?(/\" + FCR_ACL + \")?(\\\\#\\\\S+)?$\");\n+        String processID = this.fullId;\n+        if (processID.equals(FEDORA_ID_PREFIX)) {\n+            this.isRepositoryRoot = true;\n+            this.id = this.fullId;\n+            // Root has no other possible endpoints, so short circuit out.\n+            return;\n+        }\n+        if (processID.contains(\"#\")) {\n+            this.hashUri = processID.split(\"#\")[1];\n+            processID = processID.split(\"#\")[0];\n+        }\n+        if (processID.contains(FCR_ACL)) {\n+            this.isAcl = true;\n+            processID = processID.split(FCR_ACL)[0];\n+        }\n+        if (processID.contains(FCR_VERSIONS)) {\n+            if (processID.split(FCR_VERSIONS).length == 2) {\n+                final String afterVersion = processID.split(FCR_VERSIONS)[1];\n+                if (afterVersion.matches(\"/\\\\d{14}\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167935a2cd03d42b4594990566bf85ef97b9a742"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ1Mjc2Nw==", "bodyText": "If this fails, I think it should throw a InvalidMementoPathException.", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396452767", "createdAt": "2020-03-23T13:33:27Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.identifiers;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_ACL;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_METADATA;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_VERSIONS;\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Class to store contextual information about a Fedora ID.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class FedoraID {\n+\n+    private String id;\n+    private String fullId;\n+    private String hashUri;\n+    private boolean isRepositoryRoot = false;\n+    private boolean isNonRdfSourceDescription = false;\n+    private boolean isAcl = false;\n+    private boolean isMemento = false;\n+    private boolean isTimemap = false;\n+    private Instant mementoDatetime;\n+    private String mementoDatetime_str;\n+\n+    /**\n+     * Basic constructor.\n+     * @param fullId The full identifier.\n+     * @throws IllegalArgumentException If ID does not start with expected prefix.\n+     */\n+    public FedoraID(final String fullId) {\n+        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n+            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n+        }\n+        this.fullId = fullId;\n+        processIdentifier();\n+    }\n+\n+    /**\n+     * Is the identifier for the repository root.\n+     * @return true of id is equal to info:fedora/\n+     */\n+    public boolean isRepositoryRoot() {\n+        return isRepositoryRoot;\n+    }\n+\n+    /**\n+     * Is the identifier for a Memento?\n+     * @return true if the id is for the fcr:versions endpoint and has a memento datetime string after it.\n+     */\n+    public boolean isMemento() {\n+        return isMemento;\n+    }\n+\n+    /**\n+     * Is the identifier for an ACL?\n+     * @return true if the id is for the fcr:acl endpoint.\n+     */\n+    public boolean isAcl() {\n+        return isAcl;\n+    }\n+\n+    /**\n+     * Is the identifier for a timemap?\n+     * @return true if id for the fcr:versions endpoint and NOT a memento.\n+     */\n+    public boolean isTimemap() {\n+        return isTimemap;\n+    }\n+\n+    /**\n+     * Is the identifier for a nonRdfSourceDescription?\n+     * @return true if id for the fcr:metadata endpoint\n+     */\n+    public boolean isDescription() {\n+        return isNonRdfSourceDescription;\n+    }\n+\n+    /**\n+     * Is the identifier for a hash uri?\n+     * @return true if full id referenced a hash uri.\n+     */\n+    public boolean isHashUri() {\n+        return hashUri != null;\n+    }\n+\n+    /**\n+     * Get the hash uri.\n+     * @return the hash uri from the id or null if none.\n+     */\n+    public String getHashUri() {\n+        return hashUri;\n+    }\n+\n+    /**\n+     * Return the ID of the base resource for this request.\n+     * @return the shorten id.\n+     */\n+    public String getResourceId() {\n+        return id;\n+    }\n+\n+    /**\n+     * Return the original full ID.\n+     * @return the id.\n+     */\n+    public String getFullId() {\n+        return fullId;\n+    }\n+\n+    /**\n+     * Return the Memento datetime as Instant.\n+     * @return The datetime or null if not a memento.\n+     */\n+    public Instant getMementoInstant() {\n+        return mementoDatetime;\n+    }\n+\n+    /**\n+     * Return the Memento datetime string.\n+     * @return The yyyymmddhhiiss memento datetime or null if not a Memento.\n+     */\n+    public String getMementoString() {\n+        return mementoDatetime_str;\n+    }\n+\n+    /**\n+     * Process the original ID into its parts without using a regular expression.\n+     */\n+    private void processIdentifier() {\n+        // Regex pattern which decomposes a http resource uri into components\n+        // The first group determines if it is an fcr:metadata non-rdf source.\n+        // The second group determines if the path is for a memento or timemap.\n+        // The third group allows for a memento identifier.\n+        // The fourth group for allows ACL.\n+        // The fifth group allows for any hashed suffixes.\n+        // \".*?(/\" + FCR_METADATA + \")?(/\" + FCR_VERSIONS + \"(/\\\\d{14})?)?(/\" + FCR_ACL + \")?(\\\\#\\\\S+)?$\");\n+        String processID = this.fullId;\n+        if (processID.equals(FEDORA_ID_PREFIX)) {\n+            this.isRepositoryRoot = true;\n+            this.id = this.fullId;\n+            // Root has no other possible endpoints, so short circuit out.\n+            return;\n+        }\n+        if (processID.contains(\"#\")) {\n+            this.hashUri = processID.split(\"#\")[1];\n+            processID = processID.split(\"#\")[0];\n+        }\n+        if (processID.contains(FCR_ACL)) {\n+            this.isAcl = true;\n+            processID = processID.split(FCR_ACL)[0];\n+        }\n+        if (processID.contains(FCR_VERSIONS)) {\n+            if (processID.split(FCR_VERSIONS).length == 2) {\n+                final String afterVersion = processID.split(FCR_VERSIONS)[1];\n+                if (afterVersion.matches(\"/\\\\d{14}\")) {\n+                    this.isMemento = true;\n+                    this.mementoDatetime_str = afterVersion.substring(1);\n+                    this.mementoDatetime = Instant.from(MEMENTO_LABEL_FORMATTER.parse(this.mementoDatetime_str));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167935a2cd03d42b4594990566bf85ef97b9a742"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ1MzQ2NA==", "bodyText": "Again, I would avoid doing the same split multiple times.", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396453464", "createdAt": "2020-03-23T13:34:27Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.identifiers;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_ACL;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_METADATA;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_VERSIONS;\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Class to store contextual information about a Fedora ID.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class FedoraID {\n+\n+    private String id;\n+    private String fullId;\n+    private String hashUri;\n+    private boolean isRepositoryRoot = false;\n+    private boolean isNonRdfSourceDescription = false;\n+    private boolean isAcl = false;\n+    private boolean isMemento = false;\n+    private boolean isTimemap = false;\n+    private Instant mementoDatetime;\n+    private String mementoDatetime_str;\n+\n+    /**\n+     * Basic constructor.\n+     * @param fullId The full identifier.\n+     * @throws IllegalArgumentException If ID does not start with expected prefix.\n+     */\n+    public FedoraID(final String fullId) {\n+        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n+            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n+        }\n+        this.fullId = fullId;\n+        processIdentifier();\n+    }\n+\n+    /**\n+     * Is the identifier for the repository root.\n+     * @return true of id is equal to info:fedora/\n+     */\n+    public boolean isRepositoryRoot() {\n+        return isRepositoryRoot;\n+    }\n+\n+    /**\n+     * Is the identifier for a Memento?\n+     * @return true if the id is for the fcr:versions endpoint and has a memento datetime string after it.\n+     */\n+    public boolean isMemento() {\n+        return isMemento;\n+    }\n+\n+    /**\n+     * Is the identifier for an ACL?\n+     * @return true if the id is for the fcr:acl endpoint.\n+     */\n+    public boolean isAcl() {\n+        return isAcl;\n+    }\n+\n+    /**\n+     * Is the identifier for a timemap?\n+     * @return true if id for the fcr:versions endpoint and NOT a memento.\n+     */\n+    public boolean isTimemap() {\n+        return isTimemap;\n+    }\n+\n+    /**\n+     * Is the identifier for a nonRdfSourceDescription?\n+     * @return true if id for the fcr:metadata endpoint\n+     */\n+    public boolean isDescription() {\n+        return isNonRdfSourceDescription;\n+    }\n+\n+    /**\n+     * Is the identifier for a hash uri?\n+     * @return true if full id referenced a hash uri.\n+     */\n+    public boolean isHashUri() {\n+        return hashUri != null;\n+    }\n+\n+    /**\n+     * Get the hash uri.\n+     * @return the hash uri from the id or null if none.\n+     */\n+    public String getHashUri() {\n+        return hashUri;\n+    }\n+\n+    /**\n+     * Return the ID of the base resource for this request.\n+     * @return the shorten id.\n+     */\n+    public String getResourceId() {\n+        return id;\n+    }\n+\n+    /**\n+     * Return the original full ID.\n+     * @return the id.\n+     */\n+    public String getFullId() {\n+        return fullId;\n+    }\n+\n+    /**\n+     * Return the Memento datetime as Instant.\n+     * @return The datetime or null if not a memento.\n+     */\n+    public Instant getMementoInstant() {\n+        return mementoDatetime;\n+    }\n+\n+    /**\n+     * Return the Memento datetime string.\n+     * @return The yyyymmddhhiiss memento datetime or null if not a Memento.\n+     */\n+    public String getMementoString() {\n+        return mementoDatetime_str;\n+    }\n+\n+    /**\n+     * Process the original ID into its parts without using a regular expression.\n+     */\n+    private void processIdentifier() {\n+        // Regex pattern which decomposes a http resource uri into components\n+        // The first group determines if it is an fcr:metadata non-rdf source.\n+        // The second group determines if the path is for a memento or timemap.\n+        // The third group allows for a memento identifier.\n+        // The fourth group for allows ACL.\n+        // The fifth group allows for any hashed suffixes.\n+        // \".*?(/\" + FCR_METADATA + \")?(/\" + FCR_VERSIONS + \"(/\\\\d{14})?)?(/\" + FCR_ACL + \")?(\\\\#\\\\S+)?$\");\n+        String processID = this.fullId;\n+        if (processID.equals(FEDORA_ID_PREFIX)) {\n+            this.isRepositoryRoot = true;\n+            this.id = this.fullId;\n+            // Root has no other possible endpoints, so short circuit out.\n+            return;\n+        }\n+        if (processID.contains(\"#\")) {\n+            this.hashUri = processID.split(\"#\")[1];\n+            processID = processID.split(\"#\")[0];\n+        }\n+        if (processID.contains(FCR_ACL)) {\n+            this.isAcl = true;\n+            processID = processID.split(FCR_ACL)[0];\n+        }\n+        if (processID.contains(FCR_VERSIONS)) {\n+            if (processID.split(FCR_VERSIONS).length == 2) {\n+                final String afterVersion = processID.split(FCR_VERSIONS)[1];\n+                if (afterVersion.matches(\"/\\\\d{14}\")) {\n+                    this.isMemento = true;\n+                    this.mementoDatetime_str = afterVersion.substring(1);\n+                    this.mementoDatetime = Instant.from(MEMENTO_LABEL_FORMATTER.parse(this.mementoDatetime_str));\n+                } else {\n+                    this.isTimemap = true;\n+                }\n+            } else {\n+                this.isTimemap = true;\n+            }\n+            processID = processID.split(FCR_VERSIONS)[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167935a2cd03d42b4594990566bf85ef97b9a742"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ1NjE4Ng==", "bodyText": "Should there be any other constraints that are enforced in this class? Like maybe rejecting paths that include an empty element (eg a//b)?", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396456186", "createdAt": "2020-03-23T13:38:32Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.identifiers;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_ACL;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_METADATA;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_VERSIONS;\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Class to store contextual information about a Fedora ID.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class FedoraID {\n+\n+    private String id;\n+    private String fullId;\n+    private String hashUri;\n+    private boolean isRepositoryRoot = false;\n+    private boolean isNonRdfSourceDescription = false;\n+    private boolean isAcl = false;\n+    private boolean isMemento = false;\n+    private boolean isTimemap = false;\n+    private Instant mementoDatetime;\n+    private String mementoDatetime_str;\n+\n+    /**\n+     * Basic constructor.\n+     * @param fullId The full identifier.\n+     * @throws IllegalArgumentException If ID does not start with expected prefix.\n+     */\n+    public FedoraID(final String fullId) {\n+        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n+            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n+        }\n+        this.fullId = fullId;\n+        processIdentifier();\n+    }\n+\n+    /**\n+     * Is the identifier for the repository root.\n+     * @return true of id is equal to info:fedora/\n+     */\n+    public boolean isRepositoryRoot() {\n+        return isRepositoryRoot;\n+    }\n+\n+    /**\n+     * Is the identifier for a Memento?\n+     * @return true if the id is for the fcr:versions endpoint and has a memento datetime string after it.\n+     */\n+    public boolean isMemento() {\n+        return isMemento;\n+    }\n+\n+    /**\n+     * Is the identifier for an ACL?\n+     * @return true if the id is for the fcr:acl endpoint.\n+     */\n+    public boolean isAcl() {\n+        return isAcl;\n+    }\n+\n+    /**\n+     * Is the identifier for a timemap?\n+     * @return true if id for the fcr:versions endpoint and NOT a memento.\n+     */\n+    public boolean isTimemap() {\n+        return isTimemap;\n+    }\n+\n+    /**\n+     * Is the identifier for a nonRdfSourceDescription?\n+     * @return true if id for the fcr:metadata endpoint\n+     */\n+    public boolean isDescription() {\n+        return isNonRdfSourceDescription;\n+    }\n+\n+    /**\n+     * Is the identifier for a hash uri?\n+     * @return true if full id referenced a hash uri.\n+     */\n+    public boolean isHashUri() {\n+        return hashUri != null;\n+    }\n+\n+    /**\n+     * Get the hash uri.\n+     * @return the hash uri from the id or null if none.\n+     */\n+    public String getHashUri() {\n+        return hashUri;\n+    }\n+\n+    /**\n+     * Return the ID of the base resource for this request.\n+     * @return the shorten id.\n+     */\n+    public String getResourceId() {\n+        return id;\n+    }\n+\n+    /**\n+     * Return the original full ID.\n+     * @return the id.\n+     */\n+    public String getFullId() {\n+        return fullId;\n+    }\n+\n+    /**\n+     * Return the Memento datetime as Instant.\n+     * @return The datetime or null if not a memento.\n+     */\n+    public Instant getMementoInstant() {\n+        return mementoDatetime;\n+    }\n+\n+    /**\n+     * Return the Memento datetime string.\n+     * @return The yyyymmddhhiiss memento datetime or null if not a Memento.\n+     */\n+    public String getMementoString() {\n+        return mementoDatetime_str;\n+    }\n+\n+    /**\n+     * Process the original ID into its parts without using a regular expression.\n+     */\n+    private void processIdentifier() {\n+        // Regex pattern which decomposes a http resource uri into components\n+        // The first group determines if it is an fcr:metadata non-rdf source.\n+        // The second group determines if the path is for a memento or timemap.\n+        // The third group allows for a memento identifier.\n+        // The fourth group for allows ACL.\n+        // The fifth group allows for any hashed suffixes.\n+        // \".*?(/\" + FCR_METADATA + \")?(/\" + FCR_VERSIONS + \"(/\\\\d{14})?)?(/\" + FCR_ACL + \")?(\\\\#\\\\S+)?$\");\n+        String processID = this.fullId;\n+        if (processID.equals(FEDORA_ID_PREFIX)) {\n+            this.isRepositoryRoot = true;\n+            this.id = this.fullId;\n+            // Root has no other possible endpoints, so short circuit out.\n+            return;\n+        }\n+        if (processID.contains(\"#\")) {\n+            this.hashUri = processID.split(\"#\")[1];\n+            processID = processID.split(\"#\")[0];\n+        }\n+        if (processID.contains(FCR_ACL)) {\n+            this.isAcl = true;\n+            processID = processID.split(FCR_ACL)[0];\n+        }\n+        if (processID.contains(FCR_VERSIONS)) {\n+            if (processID.split(FCR_VERSIONS).length == 2) {\n+                final String afterVersion = processID.split(FCR_VERSIONS)[1];\n+                if (afterVersion.matches(\"/\\\\d{14}\")) {\n+                    this.isMemento = true;\n+                    this.mementoDatetime_str = afterVersion.substring(1);\n+                    this.mementoDatetime = Instant.from(MEMENTO_LABEL_FORMATTER.parse(this.mementoDatetime_str));\n+                } else {\n+                    this.isTimemap = true;\n+                }\n+            } else {\n+                this.isTimemap = true;\n+            }\n+            processID = processID.split(FCR_VERSIONS)[0];\n+        }\n+        if (processID.contains(FCR_METADATA)) {\n+            this.isNonRdfSourceDescription = true;\n+            processID = processID.split(FCR_METADATA)[0];\n+        }\n+        if (processID.endsWith(\"/\")) {\n+            processID = processID.replaceAll(\"/+$\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167935a2cd03d42b4594990566bf85ef97b9a742"}, "originalPosition": 193}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NDQzNzM4", "url": "https://github.com/fcrepo/fcrepo/pull/1648#pullrequestreview-379443738", "createdAt": "2020-03-23T13:47:50Z", "commit": {"oid": "167935a2cd03d42b4594990566bf85ef97b9a742"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzo0Nzo1MFrOF6GKIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzo0OTowNlrOF6GN8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ2MjYyNg==", "bodyText": "What if the id looks like a/b/fcr:acl/garbage? Should that be an error rather than simply throwing out the invalid content?", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396462626", "createdAt": "2020-03-23T13:47:50Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.identifiers;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_ACL;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_METADATA;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_VERSIONS;\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Class to store contextual information about a Fedora ID.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class FedoraID {\n+\n+    private String id;\n+    private String fullId;\n+    private String hashUri;\n+    private boolean isRepositoryRoot = false;\n+    private boolean isNonRdfSourceDescription = false;\n+    private boolean isAcl = false;\n+    private boolean isMemento = false;\n+    private boolean isTimemap = false;\n+    private Instant mementoDatetime;\n+    private String mementoDatetime_str;\n+\n+    /**\n+     * Basic constructor.\n+     * @param fullId The full identifier.\n+     * @throws IllegalArgumentException If ID does not start with expected prefix.\n+     */\n+    public FedoraID(final String fullId) {\n+        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n+            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n+        }\n+        this.fullId = fullId;\n+        processIdentifier();\n+    }\n+\n+    /**\n+     * Is the identifier for the repository root.\n+     * @return true of id is equal to info:fedora/\n+     */\n+    public boolean isRepositoryRoot() {\n+        return isRepositoryRoot;\n+    }\n+\n+    /**\n+     * Is the identifier for a Memento?\n+     * @return true if the id is for the fcr:versions endpoint and has a memento datetime string after it.\n+     */\n+    public boolean isMemento() {\n+        return isMemento;\n+    }\n+\n+    /**\n+     * Is the identifier for an ACL?\n+     * @return true if the id is for the fcr:acl endpoint.\n+     */\n+    public boolean isAcl() {\n+        return isAcl;\n+    }\n+\n+    /**\n+     * Is the identifier for a timemap?\n+     * @return true if id for the fcr:versions endpoint and NOT a memento.\n+     */\n+    public boolean isTimemap() {\n+        return isTimemap;\n+    }\n+\n+    /**\n+     * Is the identifier for a nonRdfSourceDescription?\n+     * @return true if id for the fcr:metadata endpoint\n+     */\n+    public boolean isDescription() {\n+        return isNonRdfSourceDescription;\n+    }\n+\n+    /**\n+     * Is the identifier for a hash uri?\n+     * @return true if full id referenced a hash uri.\n+     */\n+    public boolean isHashUri() {\n+        return hashUri != null;\n+    }\n+\n+    /**\n+     * Get the hash uri.\n+     * @return the hash uri from the id or null if none.\n+     */\n+    public String getHashUri() {\n+        return hashUri;\n+    }\n+\n+    /**\n+     * Return the ID of the base resource for this request.\n+     * @return the shorten id.\n+     */\n+    public String getResourceId() {\n+        return id;\n+    }\n+\n+    /**\n+     * Return the original full ID.\n+     * @return the id.\n+     */\n+    public String getFullId() {\n+        return fullId;\n+    }\n+\n+    /**\n+     * Return the Memento datetime as Instant.\n+     * @return The datetime or null if not a memento.\n+     */\n+    public Instant getMementoInstant() {\n+        return mementoDatetime;\n+    }\n+\n+    /**\n+     * Return the Memento datetime string.\n+     * @return The yyyymmddhhiiss memento datetime or null if not a Memento.\n+     */\n+    public String getMementoString() {\n+        return mementoDatetime_str;\n+    }\n+\n+    /**\n+     * Process the original ID into its parts without using a regular expression.\n+     */\n+    private void processIdentifier() {\n+        // Regex pattern which decomposes a http resource uri into components\n+        // The first group determines if it is an fcr:metadata non-rdf source.\n+        // The second group determines if the path is for a memento or timemap.\n+        // The third group allows for a memento identifier.\n+        // The fourth group for allows ACL.\n+        // The fifth group allows for any hashed suffixes.\n+        // \".*?(/\" + FCR_METADATA + \")?(/\" + FCR_VERSIONS + \"(/\\\\d{14})?)?(/\" + FCR_ACL + \")?(\\\\#\\\\S+)?$\");\n+        String processID = this.fullId;\n+        if (processID.equals(FEDORA_ID_PREFIX)) {\n+            this.isRepositoryRoot = true;\n+            this.id = this.fullId;\n+            // Root has no other possible endpoints, so short circuit out.\n+            return;\n+        }\n+        if (processID.contains(\"#\")) {\n+            this.hashUri = processID.split(\"#\")[1];\n+            processID = processID.split(\"#\")[0];\n+        }\n+        if (processID.contains(FCR_ACL)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167935a2cd03d42b4594990566bf85ef97b9a742"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ2MzYwMA==", "bodyText": "Similar question here as the acl question above. At this point, there shouldn't be anything after fcr:metadata, right? If there is, should it be ignored or rejected?", "url": "https://github.com/fcrepo/fcrepo/pull/1648#discussion_r396463600", "createdAt": "2020-03-23T13:49:06Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/identifiers/FedoraID.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.identifiers;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_ACL;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_METADATA;\n+import static org.fcrepo.kernel.api.FedoraTypes.FCR_VERSIONS;\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.fcrepo.kernel.api.services.VersionService.MEMENTO_LABEL_FORMATTER;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Class to store contextual information about a Fedora ID.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public class FedoraID {\n+\n+    private String id;\n+    private String fullId;\n+    private String hashUri;\n+    private boolean isRepositoryRoot = false;\n+    private boolean isNonRdfSourceDescription = false;\n+    private boolean isAcl = false;\n+    private boolean isMemento = false;\n+    private boolean isTimemap = false;\n+    private Instant mementoDatetime;\n+    private String mementoDatetime_str;\n+\n+    /**\n+     * Basic constructor.\n+     * @param fullId The full identifier.\n+     * @throws IllegalArgumentException If ID does not start with expected prefix.\n+     */\n+    public FedoraID(final String fullId) {\n+        if (!fullId.startsWith(FEDORA_ID_PREFIX)) {\n+            throw new IllegalArgumentException(String.format(\"ID must begin with %s\", FEDORA_ID_PREFIX));\n+        }\n+        this.fullId = fullId;\n+        processIdentifier();\n+    }\n+\n+    /**\n+     * Is the identifier for the repository root.\n+     * @return true of id is equal to info:fedora/\n+     */\n+    public boolean isRepositoryRoot() {\n+        return isRepositoryRoot;\n+    }\n+\n+    /**\n+     * Is the identifier for a Memento?\n+     * @return true if the id is for the fcr:versions endpoint and has a memento datetime string after it.\n+     */\n+    public boolean isMemento() {\n+        return isMemento;\n+    }\n+\n+    /**\n+     * Is the identifier for an ACL?\n+     * @return true if the id is for the fcr:acl endpoint.\n+     */\n+    public boolean isAcl() {\n+        return isAcl;\n+    }\n+\n+    /**\n+     * Is the identifier for a timemap?\n+     * @return true if id for the fcr:versions endpoint and NOT a memento.\n+     */\n+    public boolean isTimemap() {\n+        return isTimemap;\n+    }\n+\n+    /**\n+     * Is the identifier for a nonRdfSourceDescription?\n+     * @return true if id for the fcr:metadata endpoint\n+     */\n+    public boolean isDescription() {\n+        return isNonRdfSourceDescription;\n+    }\n+\n+    /**\n+     * Is the identifier for a hash uri?\n+     * @return true if full id referenced a hash uri.\n+     */\n+    public boolean isHashUri() {\n+        return hashUri != null;\n+    }\n+\n+    /**\n+     * Get the hash uri.\n+     * @return the hash uri from the id or null if none.\n+     */\n+    public String getHashUri() {\n+        return hashUri;\n+    }\n+\n+    /**\n+     * Return the ID of the base resource for this request.\n+     * @return the shorten id.\n+     */\n+    public String getResourceId() {\n+        return id;\n+    }\n+\n+    /**\n+     * Return the original full ID.\n+     * @return the id.\n+     */\n+    public String getFullId() {\n+        return fullId;\n+    }\n+\n+    /**\n+     * Return the Memento datetime as Instant.\n+     * @return The datetime or null if not a memento.\n+     */\n+    public Instant getMementoInstant() {\n+        return mementoDatetime;\n+    }\n+\n+    /**\n+     * Return the Memento datetime string.\n+     * @return The yyyymmddhhiiss memento datetime or null if not a Memento.\n+     */\n+    public String getMementoString() {\n+        return mementoDatetime_str;\n+    }\n+\n+    /**\n+     * Process the original ID into its parts without using a regular expression.\n+     */\n+    private void processIdentifier() {\n+        // Regex pattern which decomposes a http resource uri into components\n+        // The first group determines if it is an fcr:metadata non-rdf source.\n+        // The second group determines if the path is for a memento or timemap.\n+        // The third group allows for a memento identifier.\n+        // The fourth group for allows ACL.\n+        // The fifth group allows for any hashed suffixes.\n+        // \".*?(/\" + FCR_METADATA + \")?(/\" + FCR_VERSIONS + \"(/\\\\d{14})?)?(/\" + FCR_ACL + \")?(\\\\#\\\\S+)?$\");\n+        String processID = this.fullId;\n+        if (processID.equals(FEDORA_ID_PREFIX)) {\n+            this.isRepositoryRoot = true;\n+            this.id = this.fullId;\n+            // Root has no other possible endpoints, so short circuit out.\n+            return;\n+        }\n+        if (processID.contains(\"#\")) {\n+            this.hashUri = processID.split(\"#\")[1];\n+            processID = processID.split(\"#\")[0];\n+        }\n+        if (processID.contains(FCR_ACL)) {\n+            this.isAcl = true;\n+            processID = processID.split(FCR_ACL)[0];\n+        }\n+        if (processID.contains(FCR_VERSIONS)) {\n+            if (processID.split(FCR_VERSIONS).length == 2) {\n+                final String afterVersion = processID.split(FCR_VERSIONS)[1];\n+                if (afterVersion.matches(\"/\\\\d{14}\")) {\n+                    this.isMemento = true;\n+                    this.mementoDatetime_str = afterVersion.substring(1);\n+                    this.mementoDatetime = Instant.from(MEMENTO_LABEL_FORMATTER.parse(this.mementoDatetime_str));\n+                } else {\n+                    this.isTimemap = true;\n+                }\n+            } else {\n+                this.isTimemap = true;\n+            }\n+            processID = processID.split(FCR_VERSIONS)[0];\n+        }\n+        if (processID.contains(FCR_METADATA)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167935a2cd03d42b4594990566bf85ef97b9a742"}, "originalPosition": 188}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "608e69dd845edb56d36941606048ebcfa493634f", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/608e69dd845edb56d36941606048ebcfa493634f", "committedDate": "2020-03-23T17:46:13Z", "message": "Add more exceptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c2a4652a764273ad83ab1b59cfb41cdef4a79c0", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/2c2a4652a764273ad83ab1b59cfb41cdef4a79c0", "committedDate": "2020-03-23T17:50:31Z", "message": "Missed a split"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba4a886ca19cd93d00948276471ab553cf1dc355", "author": {"user": {"login": "whikloj", "name": "Jared Whiklo"}}, "url": "https://github.com/fcrepo/fcrepo/commit/ba4a886ca19cd93d00948276471ab553cf1dc355", "committedDate": "2020-03-23T18:02:13Z", "message": "Missed the actual message"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMjYzMzgy", "url": "https://github.com/fcrepo/fcrepo/pull/1648#pullrequestreview-380263382", "createdAt": "2020-03-24T12:33:09Z", "commit": {"oid": "ba4a886ca19cd93d00948276471ab553cf1dc355"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMDQyMjM5", "url": "https://github.com/fcrepo/fcrepo/pull/1648#pullrequestreview-382042239", "createdAt": "2020-03-26T14:06:41Z", "commit": {"oid": "ba4a886ca19cd93d00948276471ab553cf1dc355"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3064, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}