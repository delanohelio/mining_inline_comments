{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwODY4NTAy", "number": 1636, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTozMzo0MVrODj2qPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxOTo1NzoxNFrODj73Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTIyMzAzOnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/utils/FedoraResourceIdConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTozMzo0MVrOFv5CmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTozMzo0MVrOFv5CmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2MTk0NA==", "bodyText": "Minor: It is helpful to have a comment along the lines of:\n// Intentionally blank", "url": "https://github.com/fcrepo/fcrepo/pull/1636#discussion_r385761944", "createdAt": "2020-02-28T15:33:41Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/utils/FedoraResourceIdConverter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.utils;\n+\n+import org.fcrepo.kernel.api.FedoraTypes;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.models.TimeMap;\n+import org.fcrepo.kernel.api.services.VersionService;\n+\n+/**\n+ * Converts an internal Fedora Resource ID into and internal ID that includes suffixes, such as \"fcr:versions\".\n+ */\n+public final class FedoraResourceIdConverter {\n+\n+    private FedoraResourceIdConverter() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74ed6587f485e342e2b55cb5e3b242c54dca532d"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTI3MDM2OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/utils/FedoraResourceIdConverterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTo0NToyN1rOFv5fDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTo0NToyN1rOFv5fDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2OTIzMA==", "bodyText": "It would be good if we were more consistent about using constants... but we can at least start with the present.\nCould you use: https://github.com/fcrepo4/fcrepo4/blob/master/fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/FedoraTypes.java#L96", "url": "https://github.com/fcrepo/fcrepo/pull/1636#discussion_r385769230", "createdAt": "2020-02-28T15:45:27Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-api/src/test/java/org/fcrepo/kernel/api/utils/FedoraResourceIdConverterTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.utils;\n+\n+import java.time.Instant;\n+import org.fcrepo.kernel.api.models.Binary;\n+import org.fcrepo.kernel.api.models.Container;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.models.TimeMap;\n+import org.fcrepo.kernel.api.services.VersionService;\n+import static org.junit.Assert.assertEquals;\n+import org.junit.Test;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class FedoraResourceIdConverterTest {\n+\n+    private final String id = \"fedora:info/test-id\";\n+    private final String fcrVersions = \"/fcr:versions\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74ed6587f485e342e2b55cb5e3b242c54dca532d"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTM1MTY1OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/ResourceFactoryImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjowODoxOFrOFv6R5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjowODoxOFrOFv6R5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4MjI0Nw==", "bodyText": "A comment here would be helpful. Something like:\nA `version` passed into this method indicates that the resource is actually a Memento", "url": "https://github.com/fcrepo/fcrepo/pull/1636#discussion_r385782247", "createdAt": "2020-02-28T16:08:18Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/ResourceFactoryImpl.java", "diffHunk": "@@ -182,6 +196,11 @@ private void populateResourceHeaders(final FedoraResourceImpl resc, final Resour\n         resc.setEtag(headers.getStateToken());\n         resc.setStateToken(headers.getStateToken());\n \n+        if (version != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74ed6587f485e342e2b55cb5e3b242c54dca532d"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTM3Mzg1OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/TimeMapImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjoxNDozN1rOFv6fVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjoxNDozN1rOFv6fVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4NTY4NQ==", "bodyText": "For clarity, should this be named originalResource?", "url": "https://github.com/fcrepo/fcrepo/pull/1636#discussion_r385785685", "createdAt": "2020-02-28T16:14:37Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/TimeMapImpl.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.impl.models;\n+\n+import java.net.URI;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.impl.StatementImpl;\n+import org.fcrepo.kernel.api.RdfLexicon;\n+import org.fcrepo.kernel.api.RdfStream;\n+import org.fcrepo.kernel.api.Transaction;\n+import org.fcrepo.kernel.api.exception.ItemNotFoundException;\n+import org.fcrepo.kernel.api.exception.PathNotFoundException;\n+import org.fcrepo.kernel.api.exception.PathNotFoundRuntimeException;\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.models.ResourceFactory;\n+import org.fcrepo.kernel.api.models.TimeMap;\n+import org.fcrepo.kernel.api.rdf.DefaultRdfStream;\n+import org.fcrepo.kernel.api.utils.FedoraResourceIdConverter;\n+import org.fcrepo.persistence.api.PersistentStorageSessionManager;\n+import org.fcrepo.persistence.api.exceptions.PersistentItemNotFoundException;\n+import org.fcrepo.persistence.api.exceptions.PersistentStorageException;\n+\n+/**\n+ * FedoraResource implementation that represents a Memento TimeMap of the base resource.\n+ */\n+public class TimeMapImpl extends FedoraResourceImpl implements TimeMap {\n+\n+    private static final List<URI> TYPES = List.of(\n+            URI.create(RdfLexicon.TIME_MAP.getURI()),\n+            URI.create(RdfLexicon.VERSIONING_TIMEMAP.getURI())\n+    );\n+\n+    private final FedoraResource parent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74ed6587f485e342e2b55cb5e3b242c54dca532d"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTM4Njc4OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/TimeMapImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjoxODoyMFrOFv6nag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMDo1ODozOVrOFwCoiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4Nzc1NA==", "bodyText": "For my own understanding, what is the value in using var here and below instead of the actual return type?", "url": "https://github.com/fcrepo/fcrepo/pull/1636#discussion_r385787754", "createdAt": "2020-02-28T16:18:20Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/TimeMapImpl.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.impl.models;\n+\n+import java.net.URI;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.impl.StatementImpl;\n+import org.fcrepo.kernel.api.RdfLexicon;\n+import org.fcrepo.kernel.api.RdfStream;\n+import org.fcrepo.kernel.api.Transaction;\n+import org.fcrepo.kernel.api.exception.ItemNotFoundException;\n+import org.fcrepo.kernel.api.exception.PathNotFoundException;\n+import org.fcrepo.kernel.api.exception.PathNotFoundRuntimeException;\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.models.ResourceFactory;\n+import org.fcrepo.kernel.api.models.TimeMap;\n+import org.fcrepo.kernel.api.rdf.DefaultRdfStream;\n+import org.fcrepo.kernel.api.utils.FedoraResourceIdConverter;\n+import org.fcrepo.persistence.api.PersistentStorageSessionManager;\n+import org.fcrepo.persistence.api.exceptions.PersistentItemNotFoundException;\n+import org.fcrepo.persistence.api.exceptions.PersistentStorageException;\n+\n+/**\n+ * FedoraResource implementation that represents a Memento TimeMap of the base resource.\n+ */\n+public class TimeMapImpl extends FedoraResourceImpl implements TimeMap {\n+\n+    private static final List<URI> TYPES = List.of(\n+            URI.create(RdfLexicon.TIME_MAP.getURI()),\n+            URI.create(RdfLexicon.VERSIONING_TIMEMAP.getURI())\n+    );\n+\n+    private final FedoraResource parent;\n+    private List<Instant> versions;\n+\n+    protected TimeMapImpl(\n+            final FedoraResource parent,\n+            final Transaction tx,\n+            final PersistentStorageSessionManager pSessionManager,\n+            final ResourceFactory resourceFactory) {\n+        super(parent.getId(), tx, pSessionManager, resourceFactory);\n+\n+        this.parent = parent;\n+        setCreatedBy(parent.getCreatedBy());\n+        setCreatedDate(parent.getCreatedDate());\n+        setLastModifiedBy(parent.getLastModifiedBy());\n+        setLastModifiedDate(parent.getLastModifiedDate());\n+        setParentId(parent.getId());\n+        setEtag(parent.getEtagValue());\n+        setStateToken(parent.getStateToken());\n+        setTypes(TYPES);\n+    }\n+\n+    @Override\n+    public RdfStream getTriples() {\n+        final var timeMapResource = asResource(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74ed6587f485e342e2b55cb5e3b242c54dca532d"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkwNDU3MQ==", "bodyText": "var provides no value other than brevity.", "url": "https://github.com/fcrepo/fcrepo/pull/1636#discussion_r385904571", "createdAt": "2020-02-28T20:21:04Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/TimeMapImpl.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.impl.models;\n+\n+import java.net.URI;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.impl.StatementImpl;\n+import org.fcrepo.kernel.api.RdfLexicon;\n+import org.fcrepo.kernel.api.RdfStream;\n+import org.fcrepo.kernel.api.Transaction;\n+import org.fcrepo.kernel.api.exception.ItemNotFoundException;\n+import org.fcrepo.kernel.api.exception.PathNotFoundException;\n+import org.fcrepo.kernel.api.exception.PathNotFoundRuntimeException;\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.models.ResourceFactory;\n+import org.fcrepo.kernel.api.models.TimeMap;\n+import org.fcrepo.kernel.api.rdf.DefaultRdfStream;\n+import org.fcrepo.kernel.api.utils.FedoraResourceIdConverter;\n+import org.fcrepo.persistence.api.PersistentStorageSessionManager;\n+import org.fcrepo.persistence.api.exceptions.PersistentItemNotFoundException;\n+import org.fcrepo.persistence.api.exceptions.PersistentStorageException;\n+\n+/**\n+ * FedoraResource implementation that represents a Memento TimeMap of the base resource.\n+ */\n+public class TimeMapImpl extends FedoraResourceImpl implements TimeMap {\n+\n+    private static final List<URI> TYPES = List.of(\n+            URI.create(RdfLexicon.TIME_MAP.getURI()),\n+            URI.create(RdfLexicon.VERSIONING_TIMEMAP.getURI())\n+    );\n+\n+    private final FedoraResource parent;\n+    private List<Instant> versions;\n+\n+    protected TimeMapImpl(\n+            final FedoraResource parent,\n+            final Transaction tx,\n+            final PersistentStorageSessionManager pSessionManager,\n+            final ResourceFactory resourceFactory) {\n+        super(parent.getId(), tx, pSessionManager, resourceFactory);\n+\n+        this.parent = parent;\n+        setCreatedBy(parent.getCreatedBy());\n+        setCreatedDate(parent.getCreatedDate());\n+        setLastModifiedBy(parent.getLastModifiedBy());\n+        setLastModifiedDate(parent.getLastModifiedDate());\n+        setParentId(parent.getId());\n+        setEtag(parent.getEtagValue());\n+        setStateToken(parent.getStateToken());\n+        setTypes(TYPES);\n+    }\n+\n+    @Override\n+    public RdfStream getTriples() {\n+        final var timeMapResource = asResource(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4Nzc1NA=="}, "originalCommit": {"oid": "74ed6587f485e342e2b55cb5e3b242c54dca532d"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkxOTExMg==", "bodyText": "For me, the brevity of var is counter-balanced by the ambiguity/mental-reconstructing... but I can see the use of var (or not) as falling in the category of \"personal preference\".", "url": "https://github.com/fcrepo/fcrepo/pull/1636#discussion_r385919112", "createdAt": "2020-02-28T20:58:39Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/TimeMapImpl.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.impl.models;\n+\n+import java.net.URI;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.impl.StatementImpl;\n+import org.fcrepo.kernel.api.RdfLexicon;\n+import org.fcrepo.kernel.api.RdfStream;\n+import org.fcrepo.kernel.api.Transaction;\n+import org.fcrepo.kernel.api.exception.ItemNotFoundException;\n+import org.fcrepo.kernel.api.exception.PathNotFoundException;\n+import org.fcrepo.kernel.api.exception.PathNotFoundRuntimeException;\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.models.ResourceFactory;\n+import org.fcrepo.kernel.api.models.TimeMap;\n+import org.fcrepo.kernel.api.rdf.DefaultRdfStream;\n+import org.fcrepo.kernel.api.utils.FedoraResourceIdConverter;\n+import org.fcrepo.persistence.api.PersistentStorageSessionManager;\n+import org.fcrepo.persistence.api.exceptions.PersistentItemNotFoundException;\n+import org.fcrepo.persistence.api.exceptions.PersistentStorageException;\n+\n+/**\n+ * FedoraResource implementation that represents a Memento TimeMap of the base resource.\n+ */\n+public class TimeMapImpl extends FedoraResourceImpl implements TimeMap {\n+\n+    private static final List<URI> TYPES = List.of(\n+            URI.create(RdfLexicon.TIME_MAP.getURI()),\n+            URI.create(RdfLexicon.VERSIONING_TIMEMAP.getURI())\n+    );\n+\n+    private final FedoraResource parent;\n+    private List<Instant> versions;\n+\n+    protected TimeMapImpl(\n+            final FedoraResource parent,\n+            final Transaction tx,\n+            final PersistentStorageSessionManager pSessionManager,\n+            final ResourceFactory resourceFactory) {\n+        super(parent.getId(), tx, pSessionManager, resourceFactory);\n+\n+        this.parent = parent;\n+        setCreatedBy(parent.getCreatedBy());\n+        setCreatedDate(parent.getCreatedDate());\n+        setLastModifiedBy(parent.getLastModifiedBy());\n+        setLastModifiedDate(parent.getLastModifiedDate());\n+        setParentId(parent.getId());\n+        setEtag(parent.getEtagValue());\n+        setStateToken(parent.getStateToken());\n+        setTypes(TYPES);\n+    }\n+\n+    @Override\n+    public RdfStream getTriples() {\n+        final var timeMapResource = asResource(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4Nzc1NA=="}, "originalCommit": {"oid": "74ed6587f485e342e2b55cb5e3b242c54dca532d"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTUzNDg4OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/ManagedPropertiesServiceImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowMDozMVrOFv8CFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjowNzowOFrOFwlVwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMDk2NQ==", "bodyText": "Should we also consider updating other instances of resource.get(), such as:\n\nhttps://github.com/fcrepo4/fcrepo4/blob/master/fcrepo-http-commons/src/main/java/org/fcrepo/http/commons/api/rdf/HttpResourceConverter.java#L101\nhttps://github.com/fcrepo4/fcrepo4/blob/master/fcrepo-http-api/src/main/java/org/fcrepo/http/api/ContentExposingResource.java#L915-L918", "url": "https://github.com/fcrepo/fcrepo/pull/1636#discussion_r385810965", "createdAt": "2020-02-28T17:00:31Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/ManagedPropertiesServiceImpl.java", "diffHunk": "@@ -45,7 +46,7 @@\n     @Override\n     public Stream<Triple> get(final FedoraResource resource) {\n         final List<Triple> triples = new ArrayList<>();\n-        final var subject = createURI(resource.getId());\n+        final var subject = createURI(FedoraResourceIdConverter.resolveFedoraId(resource));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74ed6587f485e342e2b55cb5e3b242c54dca532d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkwNTMzMg==", "bodyText": "That's an excellent question... I don't know. I just changed it there because it seemed to have an affect on one of the requests I testing. Perhaps @dbernstein or @whikloj can say?", "url": "https://github.com/fcrepo/fcrepo/pull/1636#discussion_r385905332", "createdAt": "2020-02-28T20:23:07Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/ManagedPropertiesServiceImpl.java", "diffHunk": "@@ -45,7 +46,7 @@\n     @Override\n     public Stream<Triple> get(final FedoraResource resource) {\n         final List<Triple> triples = new ArrayList<>();\n-        final var subject = createURI(resource.getId());\n+        final var subject = createURI(FedoraResourceIdConverter.resolveFedoraId(resource));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMDk2NQ=="}, "originalCommit": {"oid": "74ed6587f485e342e2b55cb5e3b242c54dca532d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4Nzc0NQ==", "bodyText": "HttpResourceConverter is deprecated and I really wondered whether we needed a new class or the whole resolveFedoraId logic could not be incorporated into the FedoraResource class itself?", "url": "https://github.com/fcrepo/fcrepo/pull/1636#discussion_r386487745", "createdAt": "2020-03-02T16:07:08Z", "author": {"login": "whikloj"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/ManagedPropertiesServiceImpl.java", "diffHunk": "@@ -45,7 +46,7 @@\n     @Override\n     public Stream<Triple> get(final FedoraResource resource) {\n         final List<Triple> triples = new ArrayList<>();\n-        final var subject = createURI(resource.getId());\n+        final var subject = createURI(FedoraResourceIdConverter.resolveFedoraId(resource));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMDk2NQ=="}, "originalCommit": {"oid": "74ed6587f485e342e2b55cb5e3b242c54dca532d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTU1MTQxOnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/ResourceFactoryImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowNjoyOVrOFv8MxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMDozNTo0M1rOFwCFrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzcwMA==", "bodyText": "Is this method getting called anywhere?", "url": "https://github.com/fcrepo/fcrepo/pull/1636#discussion_r385813700", "createdAt": "2020-02-28T17:06:29Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/ResourceFactoryImpl.java", "diffHunk": "@@ -82,6 +87,12 @@ public FedoraResource getResource(final Transaction transaction, final String id\n         return clazz.cast(getResource(transaction, identifier));\n     }\n \n+    @Override\n+    public <T extends FedoraResource> T getResource(final Transaction transaction, final String identifier,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74ed6587f485e342e2b55cb5e3b242c54dca532d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkxMDE4OA==", "bodyText": "No, I added it for consistency with the other APIs on this interface.", "url": "https://github.com/fcrepo/fcrepo/pull/1636#discussion_r385910188", "createdAt": "2020-02-28T20:35:43Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/ResourceFactoryImpl.java", "diffHunk": "@@ -82,6 +87,12 @@ public FedoraResource getResource(final Transaction transaction, final String id\n         return clazz.cast(getResource(transaction, identifier));\n     }\n \n+    @Override\n+    public <T extends FedoraResource> T getResource(final Transaction transaction, final String identifier,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzcwMA=="}, "originalCommit": {"oid": "74ed6587f485e342e2b55cb5e3b242c54dca532d"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTU2NDE5OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/ResourceFactoryImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzoxMDo1NlrOFv8Uvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMDozODoxNVrOFwCJwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxNTc0Mw==", "bodyText": "If we think there may be more conditional logic on a Resource being a Memento or not, we could potentially consider have a Memento sub-interface of Resource... like TimeMap.", "url": "https://github.com/fcrepo/fcrepo/pull/1636#discussion_r385815743", "createdAt": "2020-02-28T17:10:56Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/ResourceFactoryImpl.java", "diffHunk": "@@ -182,6 +196,11 @@ private void populateResourceHeaders(final FedoraResourceImpl resc, final Resour\n         resc.setEtag(headers.getStateToken());\n         resc.setStateToken(headers.getStateToken());\n \n+        if (version != null) {\n+            resc.setIsMemento(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74ed6587f485e342e2b55cb5e3b242c54dca532d"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkxMTIzMw==", "bodyText": "Based on the discussion I had with @bbpennel in slack, my understanding is that a Memento is intended to be the actual resource in question, just at a specific point in time, and does not need a subclass.", "url": "https://github.com/fcrepo/fcrepo/pull/1636#discussion_r385911233", "createdAt": "2020-02-28T20:38:15Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/ResourceFactoryImpl.java", "diffHunk": "@@ -182,6 +196,11 @@ private void populateResourceHeaders(final FedoraResourceImpl resc, final Resour\n         resc.setEtag(headers.getStateToken());\n         resc.setStateToken(headers.getStateToken());\n \n+        if (version != null) {\n+            resc.setIsMemento(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxNTc0Mw=="}, "originalCommit": {"oid": "74ed6587f485e342e2b55cb5e3b242c54dca532d"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTYzMjgyOnYy", "diffSide": "RIGHT", "path": "fcrepo-persistence-api/src/main/java/org/fcrepo/persistence/api/PersistentStorageSession.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzoyNTo1MlrOFv84_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMDo1MjoxM1rOFwCehw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNTAyMg==", "bodyText": "The @throws comment does not match the exceptions that are actually thrown.", "url": "https://github.com/fcrepo/fcrepo/pull/1636#discussion_r385825022", "createdAt": "2020-02-28T17:25:52Z", "author": {"login": "awoods"}, "path": "fcrepo-persistence-api/src/main/java/org/fcrepo/persistence/api/PersistentStorageSession.java", "diffHunk": "@@ -85,6 +86,16 @@ public RdfStream getTriples(final String identifier, final Instant version)\n     public InputStream getBinaryContent(final String identifier, final Instant version)\n             throws PersistentStorageException;\n \n+    /**\n+     * Returns a list of immutable versions associated with the specified fedora identifier\n+     *\n+     * @param identifier identifier for the resource.\n+     * @return The list of instants that map to the underlying versions\n+     * @throws PersistentStorageException  Either a PersistentItemNotFoundException or PersistentSessionClosedException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74ed6587f485e342e2b55cb5e3b242c54dca532d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkxNjU1MQ==", "bodyText": "That is how all of the methods on that interface are defined. PersistentItemNotFoundException and PersistentSessionClosedException are subclasses of PersistentSessionException.", "url": "https://github.com/fcrepo/fcrepo/pull/1636#discussion_r385916551", "createdAt": "2020-02-28T20:52:13Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-api/src/main/java/org/fcrepo/persistence/api/PersistentStorageSession.java", "diffHunk": "@@ -85,6 +86,16 @@ public RdfStream getTriples(final String identifier, final Instant version)\n     public InputStream getBinaryContent(final String identifier, final Instant version)\n             throws PersistentStorageException;\n \n+    /**\n+     * Returns a list of immutable versions associated with the specified fedora identifier\n+     *\n+     * @param identifier identifier for the resource.\n+     * @return The list of instants that map to the underlying versions\n+     * @throws PersistentStorageException  Either a PersistentItemNotFoundException or PersistentSessionClosedException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNTAyMg=="}, "originalCommit": {"oid": "74ed6587f485e342e2b55cb5e3b242c54dca532d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTk4ODczOnYy", "diffSide": "RIGHT", "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/api/OCFLVersion.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxOTozMDozN1rOFwAVag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxOTozMDozN1rOFwAVag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg4MTQ1MA==", "bodyText": "i -> id", "url": "https://github.com/fcrepo/fcrepo/pull/1636#discussion_r385881450", "createdAt": "2020-02-28T19:30:37Z", "author": {"login": "awoods"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/api/OCFLVersion.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.persistence.ocfl.api;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Contains details about an OCFL version\n+ */\n+public interface OCFLVersion {\n+\n+    /**\n+     * @return the OFCL object i", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74ed6587f485e342e2b55cb5e3b242c54dca532d"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTk5OTcxOnYy", "diffSide": "RIGHT", "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/DefaultOCFLObjectSession.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxOTozNDoyOVrOFwAcBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMDoyOToxOVrOFwB74A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg4MzE0Mw==", "bodyText": "Would it make sense to have an OCFLVersionImpl constructor that takes the values being set below? Or is the idea that these values are expected to change through the course of the OCFLVersion's lifecycle?", "url": "https://github.com/fcrepo/fcrepo/pull/1636#discussion_r385883143", "createdAt": "2020-02-28T19:34:29Z", "author": {"login": "awoods"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/DefaultOCFLObjectSession.java", "diffHunk": "@@ -412,14 +415,51 @@ public synchronized void close() throws PersistentStorageException {\n     }\n \n     @Override\n-    public List<VersionDetails> listVersions() throws PersistentStorageException {\n+    public List<OCFLVersion> listVersions() throws PersistentStorageException {\n         assertSessionOpen();\n         //get a list of all versions in the object.\n-        return this.ocflRepository.describeObject(this.objectIdentifier)\n-                                                                    .getVersionMap().values().stream()\n-                                                                    .filter(v -> !v.isMutable())\n-                                                                    .sorted(VERSION_COMPARATOR)\n-                                                                    .collect(Collectors.toList());\n+        try {\n+            return this.ocflRepository.describeObject(this.objectIdentifier)\n+                    .getVersionMap().values().stream()\n+                    .filter(version -> !version.isMutable())\n+                    .sorted(VERSION_COMPARATOR)\n+                    .map(version -> {\n+                        return new OCFLVersionImpl()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74ed6587f485e342e2b55cb5e3b242c54dca532d"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkwNzY4MA==", "bodyText": "I tend to avoid POJO constructors when possible because they lack clarity and are error prone. Unfortunately, Java doesn't provide any good alternatives that aren't horribly verbose. Recently, I've been favoring setter chaining as a kind of poor man's Builder.", "url": "https://github.com/fcrepo/fcrepo/pull/1636#discussion_r385907680", "createdAt": "2020-02-28T20:29:19Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/DefaultOCFLObjectSession.java", "diffHunk": "@@ -412,14 +415,51 @@ public synchronized void close() throws PersistentStorageException {\n     }\n \n     @Override\n-    public List<VersionDetails> listVersions() throws PersistentStorageException {\n+    public List<OCFLVersion> listVersions() throws PersistentStorageException {\n         assertSessionOpen();\n         //get a list of all versions in the object.\n-        return this.ocflRepository.describeObject(this.objectIdentifier)\n-                                                                    .getVersionMap().values().stream()\n-                                                                    .filter(v -> !v.isMutable())\n-                                                                    .sorted(VERSION_COMPARATOR)\n-                                                                    .collect(Collectors.toList());\n+        try {\n+            return this.ocflRepository.describeObject(this.objectIdentifier)\n+                    .getVersionMap().values().stream()\n+                    .filter(version -> !version.isMutable())\n+                    .sorted(VERSION_COMPARATOR)\n+                    .map(version -> {\n+                        return new OCFLVersionImpl()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg4MzE0Mw=="}, "originalCommit": {"oid": "74ed6587f485e342e2b55cb5e3b242c54dca532d"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDA0MjU4OnYy", "diffSide": "RIGHT", "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/OCFLPersistentStorageUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxOTo0OTo0NlrOFwA2XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxOTo0OTo0NlrOFwA2XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg4OTg4NQ==", "bodyText": "Please add a comment indicating that there is an expectation at this point that the rootObjectId does not include a trailing slash.", "url": "https://github.com/fcrepo/fcrepo/pull/1636#discussion_r385889885", "createdAt": "2020-02-28T19:49:46Z", "author": {"login": "awoods"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/OCFLPersistentStorageUtils.java", "diffHunk": "@@ -106,26 +117,19 @@ public static String relativizeSubpath(final String rootFedoraObjectId, final St\n                 rootObjectId));\n     }\n \n-    private static String trimTrailingSlashes(final String string) {\n-        return string.replaceAll(\"/+$\", \"\");\n-    }\n-\n     /**\n      * Returns the OCFL subpath for a given fedora subpath. This returned subpath\n      * does not include any added extensions.\n      *\n-     * @param rootFedoraObjectId  The fedora object root identifier\n+     * @param rootObjectId  The fedora object root identifier\n      * @param fedoraSubpath subpath of file within ocfl object\n      * @return The resolved OCFL subpath\n      */\n-    public static  String resolveOCFLSubpath(final String rootFedoraObjectId, final String fedoraSubpath) {\n-\n-        final var rootObjectId = trimTrailingSlashes(rootFedoraObjectId);\n-\n+    public static  String resolveOCFLSubpath(final String rootObjectId, final String fedoraSubpath) {\n         final var lastPathSegment = rootObjectId.substring(rootObjectId.lastIndexOf(\"/\") + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74ed6587f485e342e2b55cb5e3b242c54dca532d"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDA3NTE4OnYy", "diffSide": "RIGHT", "path": "fcrepo-persistence-ocfl/src/test/java/org/fcrepo/persistence/ocfl/impl/DefaultOCFLObjectSessionTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxOTo1NzoxNFrOFwBIew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMDozMTo1NFrOFwB_5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg5NDUyMw==", "bodyText": "Is hamcrest.contains sufficient here? Does it imply \"contains and only contains\"?", "url": "https://github.com/fcrepo/fcrepo/pull/1636#discussion_r385894523", "createdAt": "2020-02-28T19:57:14Z", "author": {"login": "awoods"}, "path": "fcrepo-persistence-ocfl/src/test/java/org/fcrepo/persistence/ocfl/impl/DefaultOCFLObjectSessionTest.java", "diffHunk": "@@ -625,14 +625,72 @@ public void listVersions() throws Exception {\n \n         final var session3 = makeNewSession();\n \n-        final List<VersionDetails> versions = session3.listVersions();\n+        final List<OCFLVersion> versions = session3.listVersions();\n         session3.close();\n \n-        assertEquals(\"First version in list is not \\\"v1\\\"\", \"v1\", versions.get(0).getVersionId().toString());\n-        assertEquals(\"Second version in list is not \\\"v2\\\"\", \"v2\", versions.get(1).getVersionId().toString());\n+        assertEquals(\"First version in list is not \\\"v1\\\"\", \"v1\", versions.get(0).getOcflVersionId());\n+        assertEquals(\"Second version in list is not \\\"v2\\\"\", \"v2\", versions.get(1).getOcflVersionId());\n         assertEquals(\"There should be exactly two versions\",2, versions.size());\n     }\n \n+    @Test\n+    public void listVersionsForSubpath() throws Exception {\n+        session.write(FILE1_SUBPATH, fileStream(FILE_CONTENT1));\n+        session.write(FILE2_SUBPATH, fileStream(FILE_CONTENT2));\n+        session.commit(NEW_VERSION);\n+        session.close();\n+\n+        final var session1 = makeNewSession();\n+\n+        session1.write(FILE2_SUBPATH, fileStream(\"updated\"));\n+        session1.commit(NEW_VERSION);\n+        session1.close();\n+\n+        final var session2 = makeNewSession();\n+        session2.write(\"test_file3.txt\", fileStream(\"another file\"));\n+        session2.commit(NEW_VERSION);\n+        session2.close();\n+\n+        final var session3 = makeNewSession();\n+\n+        final List<OCFLVersion> file1Versions = session3.listVersions(FILE1_SUBPATH);\n+        final List<OCFLVersion> file2Versions = session3.listVersions(FILE2_SUBPATH);\n+        final List<OCFLVersion> allVersions = session3.listVersions(null);\n+\n+        session3.close();\n+\n+        assertThat(file1Versions.stream()\n+                .map(OCFLVersion::getOcflVersionId)\n+                .collect(Collectors.toList()), contains(\"v1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74ed6587f485e342e2b55cb5e3b242c54dca532d"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkwODcxMA==", "bodyText": "Yes, contains both implies \"contains and only contains\" as well as strict ordering.", "url": "https://github.com/fcrepo/fcrepo/pull/1636#discussion_r385908710", "createdAt": "2020-02-28T20:31:54Z", "author": {"login": "pwinckles"}, "path": "fcrepo-persistence-ocfl/src/test/java/org/fcrepo/persistence/ocfl/impl/DefaultOCFLObjectSessionTest.java", "diffHunk": "@@ -625,14 +625,72 @@ public void listVersions() throws Exception {\n \n         final var session3 = makeNewSession();\n \n-        final List<VersionDetails> versions = session3.listVersions();\n+        final List<OCFLVersion> versions = session3.listVersions();\n         session3.close();\n \n-        assertEquals(\"First version in list is not \\\"v1\\\"\", \"v1\", versions.get(0).getVersionId().toString());\n-        assertEquals(\"Second version in list is not \\\"v2\\\"\", \"v2\", versions.get(1).getVersionId().toString());\n+        assertEquals(\"First version in list is not \\\"v1\\\"\", \"v1\", versions.get(0).getOcflVersionId());\n+        assertEquals(\"Second version in list is not \\\"v2\\\"\", \"v2\", versions.get(1).getOcflVersionId());\n         assertEquals(\"There should be exactly two versions\",2, versions.size());\n     }\n \n+    @Test\n+    public void listVersionsForSubpath() throws Exception {\n+        session.write(FILE1_SUBPATH, fileStream(FILE_CONTENT1));\n+        session.write(FILE2_SUBPATH, fileStream(FILE_CONTENT2));\n+        session.commit(NEW_VERSION);\n+        session.close();\n+\n+        final var session1 = makeNewSession();\n+\n+        session1.write(FILE2_SUBPATH, fileStream(\"updated\"));\n+        session1.commit(NEW_VERSION);\n+        session1.close();\n+\n+        final var session2 = makeNewSession();\n+        session2.write(\"test_file3.txt\", fileStream(\"another file\"));\n+        session2.commit(NEW_VERSION);\n+        session2.close();\n+\n+        final var session3 = makeNewSession();\n+\n+        final List<OCFLVersion> file1Versions = session3.listVersions(FILE1_SUBPATH);\n+        final List<OCFLVersion> file2Versions = session3.listVersions(FILE2_SUBPATH);\n+        final List<OCFLVersion> allVersions = session3.listVersions(null);\n+\n+        session3.close();\n+\n+        assertThat(file1Versions.stream()\n+                .map(OCFLVersion::getOcflVersionId)\n+                .collect(Collectors.toList()), contains(\"v1\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg5NDUyMw=="}, "originalCommit": {"oid": "74ed6587f485e342e2b55cb5e3b242c54dca532d"}, "originalPosition": 107}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1943, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}