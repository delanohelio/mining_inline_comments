{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MDc3MTI0", "number": 1735, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDozMDoyNVrOEV-2sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMDo1NTo1N1rOEWClXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDg1MzYyOnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/ExternalContentHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDozMDoyNVrOG9DMfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMDo1MToxN1rOG9I1vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2ODY2OQ==", "bodyText": "It seems like this can potentially return null.\n..although, unlikely. I am not sure there is an actual pathway for the uri to be null. We are just doing lots of extra null checking elsewhere.", "url": "https://github.com/fcrepo/fcrepo/pull/1735#discussion_r466668669", "createdAt": "2020-08-06T20:30:25Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/ExternalContentHandler.java", "diffHunk": "@@ -163,36 +181,39 @@ private Link parseLinkHeader(final String link) throws ExternalMessageBodyExcept\n         return realLink;\n     }\n \n-    /**\n-     * Find the content type for a remote resource\n-     * @param url of remote resource\n-     * @return the mime-type reported by remote system or \"application/octet-stream\" if not supplied\n-     */\n-    private String findContentType(final String url) {\n-        if (url == null) {\n-            return null;\n-        }\n+    private void retrieveContentDetails() {\n+        final URI uri = getURI();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ec28eb345e154f7aac8187d3ea567bc91f39ba7"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyMzkwMA==", "bodyText": "yeah, I can add in a null check for safety reasons, but i'm pretty sure the validator that gets run before this catches the case of the link not being set.", "url": "https://github.com/fcrepo/fcrepo/pull/1735#discussion_r466723900", "createdAt": "2020-08-06T22:41:55Z", "author": {"login": "bbpennel"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/ExternalContentHandler.java", "diffHunk": "@@ -163,36 +181,39 @@ private Link parseLinkHeader(final String link) throws ExternalMessageBodyExcept\n         return realLink;\n     }\n \n-    /**\n-     * Find the content type for a remote resource\n-     * @param url of remote resource\n-     * @return the mime-type reported by remote system or \"application/octet-stream\" if not supplied\n-     */\n-    private String findContentType(final String url) {\n-        if (url == null) {\n-            return null;\n-        }\n+    private void retrieveContentDetails() {\n+        final URI uri = getURI();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2ODY2OQ=="}, "originalCommit": {"oid": "9ec28eb345e154f7aac8187d3ea567bc91f39ba7"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2MTE0OQ==", "bodyText": "Probably not necessary to add a null check. Not that we need to do it here, but it would almost be cleaner to remove some of the superfluous existing null checks, like:\n\nhttps://github.com/fcrepo4/fcrepo4/blob/9ec28eb345e154f7aac8187d3ea567bc91f39ba7/fcrepo-http-api/src/main/java/org/fcrepo/http/api/ExternalContentHandler.java#L118\nhttps://github.com/fcrepo4/fcrepo4/blob/9ec28eb345e154f7aac8187d3ea567bc91f39ba7/fcrepo-http-api/src/main/java/org/fcrepo/http/api/ExternalContentHandler.java#L123\nhttps://github.com/fcrepo4/fcrepo4/blob/9ec28eb345e154f7aac8187d3ea567bc91f39ba7/fcrepo-http-api/src/main/java/org/fcrepo/http/api/ExternalContentHandler.java#L128\netc", "url": "https://github.com/fcrepo/fcrepo/pull/1735#discussion_r466761149", "createdAt": "2020-08-07T00:51:17Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/ExternalContentHandler.java", "diffHunk": "@@ -163,36 +181,39 @@ private Link parseLinkHeader(final String link) throws ExternalMessageBodyExcept\n         return realLink;\n     }\n \n-    /**\n-     * Find the content type for a remote resource\n-     * @param url of remote resource\n-     * @return the mime-type reported by remote system or \"application/octet-stream\" if not supplied\n-     */\n-    private String findContentType(final String url) {\n-        if (url == null) {\n-            return null;\n-        }\n+    private void retrieveContentDetails() {\n+        final URI uri = getURI();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2ODY2OQ=="}, "originalCommit": {"oid": "9ec28eb345e154f7aac8187d3ea567bc91f39ba7"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDkwMjg1OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/ExternalContentPathValidator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDo0NTo1MlrOG9Dqgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDo0NTo1MlrOG9Dqgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NjM1NA==", "bodyText": "It seems that you are only handling the case of parts.length == 2. Should the check be looking for a length of 2?", "url": "https://github.com/fcrepo/fcrepo/pull/1735#discussion_r466676354", "createdAt": "2020-08-06T20:45:52Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/ExternalContentPathValidator.java", "diffHunk": "@@ -117,12 +117,20 @@ public void validate(final String extPath) throws ExternalMessageBodyException {\n         throw new ExternalMessageBodyException(\"Path did not match any allowed external content paths: \" + extPath);\n     }\n \n-    private String normalizePath(final String path) {\n+    private String normalizeUri(final String path) {\n+        // lowercase the scheme since it is case insensitive\n+        final String[] parts = path.split(\":\", 2);\n+        final String normalized;\n+        if (parts.length > 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ec28eb345e154f7aac8187d3ea567bc91f39ba7"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTQ2NDYxOnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/ExternalContentHandlerIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMDo1NTo1N1rOG9I6VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMDo1NTo1N1rOG9I6VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2MjMyNQ==", "bodyText": "fileUri is already a String... can remove the toString() call.", "url": "https://github.com/fcrepo/fcrepo/pull/1735#discussion_r466762325", "createdAt": "2020-08-07T00:55:57Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/ExternalContentHandlerIT.java", "diffHunk": "@@ -398,33 +443,50 @@ public void testRedirectWithWantDigest() throws IOException {\n                 TEST_SHA_DIGEST_HEADER_VALUE, TEST_MD5_DIGEST_HEADER_VALUE);\n     }\n \n-    @Ignore //TODO Fix this test\n     @Test\n-    public void testExternalMessageBodyRedirect() throws IOException {\n+    public void testRedirectForHttpUri() throws Exception {\n \n-        // we need a client that won't automatically follow redirects\n-        try (final CloseableHttpClient noFollowClient = HttpClientBuilder.create().disableRedirectHandling()\n-                .build()) {\n+        final String externalLocation = createHttpResource(TEST_BINARY_CONTENT);\n \n-            final String id = getRandomUniqueId();\n-            final HttpPut httpPut = putObjMethod(id);\n-            httpPut.addHeader(LINK, NON_RDF_SOURCE_LINK_HEADER);\n-            httpPut.addHeader(LINK, getExternalContentLinkHeader(\"http://www.example.com/file\", \"redirect\", null));\n+        final String id = getRandomUniqueId();\n+        final HttpPut httpPut = putObjMethod(id);\n+        httpPut.addHeader(LINK, NON_RDF_SOURCE_LINK_HEADER);\n+        httpPut.addHeader(LINK, getExternalContentLinkHeader(externalLocation, \"redirect\", null));\n \n-            try (final CloseableHttpResponse response = execute(httpPut)) {\n-                assertEquals(\"Didn't get a CREATED response!\", CREATED.getStatusCode(), getStatus(response));\n-                final HttpGet get = new HttpGet(getLocation(response));\n-                try (final CloseableHttpResponse getResponse = noFollowClient.execute(get)) {\n-                    assertEquals(TEMPORARY_REDIRECT.getStatusCode(), getStatus(getResponse));\n-                    assertEquals(\"http://www.example.com/file\", getLocation(getResponse));\n-                }\n+        try (final CloseableHttpResponse response = execute(httpPut)) {\n+            assertEquals(\"Didn't get a CREATED response!\", CREATED.getStatusCode(), getStatus(response));\n+            final HttpGet get = new HttpGet(getLocation(response));\n+            try (final CloseableHttpResponse getResponse = noFollowClient.execute(get)) {\n+                assertEquals(TEMPORARY_REDIRECT.getStatusCode(), getStatus(getResponse));\n+                assertLocation(getResponse, externalLocation);\n             }\n         }\n     }\n \n-    @Ignore //TODO Fix this test\n     @Test\n-    public void testExternalMessageBodyCopyLocalFile() throws Exception {\n+    public void testProxyLocalFile() throws Exception {\n+        final File localFile = createExternalLocalFile(TEST_BINARY_CONTENT);\n+\n+        final String id = getRandomUniqueId();\n+        final HttpPut httpPut = putObjMethod(id);\n+        httpPut.addHeader(LINK, NON_RDF_SOURCE_LINK_HEADER);\n+        final String fileUri = localFile.toURI().toString();\n+        httpPut.addHeader(LINK, getExternalContentLinkHeader(fileUri.toString(), \"proxy\", \"text/plain\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ec28eb345e154f7aac8187d3ea567bc91f39ba7"}, "originalPosition": 406}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1887, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}