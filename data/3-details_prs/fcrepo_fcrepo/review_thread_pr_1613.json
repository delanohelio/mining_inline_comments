{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MTk3NTAw", "number": 1613, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMzo1ODo1N1rODblIkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDowMDoxMVrODblKIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjQ2NTQ3OnYy", "diffSide": "RIGHT", "path": "fcrepo-persistence-ocfl/src/test/java/org/fcrepo/persistence/ocfl/impl/OCFLPersistentStorageSessionTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMzo1ODo1N1rOFjJSNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDozMDoxMVrOFjKXXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM5NjU5Ng==", "bodyText": "Nit-pick, maybe the name should specify that you are mocking a Create NonRdfSource Operation. Eventually we might need one for Update as well.", "url": "https://github.com/fcrepo/fcrepo/pull/1613#discussion_r372396596", "createdAt": "2020-01-29T13:58:57Z", "author": {"login": "whikloj"}, "path": "fcrepo-persistence-ocfl/src/test/java/org/fcrepo/persistence/ocfl/impl/OCFLPersistentStorageSessionTest.java", "diffHunk": "@@ -591,4 +597,97 @@ public void getTriplesFromPreviousVersion() throws Exception {\n         assertEquals(node, retrievedUserStream.topic());\n         assertEquals(dcTitleTriple, retrievedUserStream.findFirst().get());\n     }\n+\n+    @Test\n+    public void getBinaryContent() throws Exception {\n+        mockMappingAndIndex(mintOCFLObjectId(RESOURCE_ID), RESOURCE_ID, ROOT_OBJECT_ID, mapping);\n+\n+        // create the binary\n+        final var binOperation = mockNonRdfSourceOperation(BINARY_CONTENT, USER_PRINCIPAL, RESOURCE_ID);\n+\n+        // perform the create non-rdf source operation\n+        session.persist(binOperation);\n+\n+        // commit to OCFL\n+        session.commit();\n+\n+        // create a new session and verify the returned rdf stream.\n+        final var newSession = createSession(index, objectSessionFactory);\n+        final var result = IOUtils.toString(newSession.getBinaryContent(RESOURCE_ID, null), UTF_8);\n+\n+        assertEquals(BINARY_CONTENT, result);\n+    }\n+\n+    @Test\n+    public void getBinaryContentFailsIfAlreadyCommitted() throws Exception {\n+        mockMappingAndIndex(mintOCFLObjectId(RESOURCE_ID), RESOURCE_ID, ROOT_OBJECT_ID, mapping);\n+\n+        // create the binary\n+        final var binOperation = mockNonRdfSourceOperation(BINARY_CONTENT, USER_PRINCIPAL, RESOURCE_ID);\n+\n+        // perform the create non-rdf source operation\n+        session.persist(binOperation);\n+\n+        // commit to OCFL\n+        session.commit();\n+\n+        try {\n+            session.getBinaryContent(RESOURCE_ID, null);\n+            fail(\"Get must fail due to session having been committed\");\n+        } catch (final PersistentStorageException ex) {\n+            // expected failure, handled with catch since the persist can throw same error\n+        }\n+    }\n+\n+    @Test\n+    public void getBinaryContentVersion() throws Exception {\n+        DefaultOCFLObjectSession.setGlobaDefaultCommitOption(NEW_VERSION);\n+        // SEE getTriplesFromPreviousVersion\n+        mockMappingAndIndex(mintOCFLObjectId(RESOURCE_ID), RESOURCE_ID, ROOT_OBJECT_ID, mapping);\n+\n+        // create the binary\n+        final var binOperation = mockNonRdfSourceOperation(BINARY_CONTENT, USER_PRINCIPAL, RESOURCE_ID);\n+        // perform the create non-rdf source operation\n+        session.persist(binOperation);\n+        // commit to OCFL\n+        session.commit();\n+\n+        // create a new session and verify that the state is the same\n+        final var newSession = createSession(index, objectSessionFactory);\n+\n+        final var versions = newSession.listVersions(RESOURCE_ID);\n+        final var version1 = versions.get(versions.size() - 1);\n+        assertEquals(BINARY_CONTENT,\n+                IOUtils.toString(newSession.getBinaryContent(RESOURCE_ID, version1), UTF_8));\n+    }\n+\n+    @Test\n+    public void getBinaryContentUncommitted() throws Exception {\n+        mockMappingAndIndex(mintOCFLObjectId(RESOURCE_ID), RESOURCE_ID, ROOT_OBJECT_ID, mapping);\n+\n+        // create the binary\n+        final var binOperation = mockNonRdfSourceOperation(BINARY_CONTENT, USER_PRINCIPAL, RESOURCE_ID);\n+\n+        // perform the create non-rdf source operation\n+        session.persist(binOperation);\n+\n+        // create a new session and verify the returned rdf stream.\n+        final var result = IOUtils.toString(session.getBinaryContent(RESOURCE_ID, null), UTF_8);\n+\n+        assertEquals(BINARY_CONTENT, result);\n+    }\n+\n+    private NonRdfSourceOperation mockNonRdfSourceOperation(final String content,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c478a99b3c7dec2ccb5ffb75aae053d41ae14e"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxNDMwMQ==", "bodyText": "updated", "url": "https://github.com/fcrepo/fcrepo/pull/1613#discussion_r372414301", "createdAt": "2020-01-29T14:30:11Z", "author": {"login": "bbpennel"}, "path": "fcrepo-persistence-ocfl/src/test/java/org/fcrepo/persistence/ocfl/impl/OCFLPersistentStorageSessionTest.java", "diffHunk": "@@ -591,4 +597,97 @@ public void getTriplesFromPreviousVersion() throws Exception {\n         assertEquals(node, retrievedUserStream.topic());\n         assertEquals(dcTitleTriple, retrievedUserStream.findFirst().get());\n     }\n+\n+    @Test\n+    public void getBinaryContent() throws Exception {\n+        mockMappingAndIndex(mintOCFLObjectId(RESOURCE_ID), RESOURCE_ID, ROOT_OBJECT_ID, mapping);\n+\n+        // create the binary\n+        final var binOperation = mockNonRdfSourceOperation(BINARY_CONTENT, USER_PRINCIPAL, RESOURCE_ID);\n+\n+        // perform the create non-rdf source operation\n+        session.persist(binOperation);\n+\n+        // commit to OCFL\n+        session.commit();\n+\n+        // create a new session and verify the returned rdf stream.\n+        final var newSession = createSession(index, objectSessionFactory);\n+        final var result = IOUtils.toString(newSession.getBinaryContent(RESOURCE_ID, null), UTF_8);\n+\n+        assertEquals(BINARY_CONTENT, result);\n+    }\n+\n+    @Test\n+    public void getBinaryContentFailsIfAlreadyCommitted() throws Exception {\n+        mockMappingAndIndex(mintOCFLObjectId(RESOURCE_ID), RESOURCE_ID, ROOT_OBJECT_ID, mapping);\n+\n+        // create the binary\n+        final var binOperation = mockNonRdfSourceOperation(BINARY_CONTENT, USER_PRINCIPAL, RESOURCE_ID);\n+\n+        // perform the create non-rdf source operation\n+        session.persist(binOperation);\n+\n+        // commit to OCFL\n+        session.commit();\n+\n+        try {\n+            session.getBinaryContent(RESOURCE_ID, null);\n+            fail(\"Get must fail due to session having been committed\");\n+        } catch (final PersistentStorageException ex) {\n+            // expected failure, handled with catch since the persist can throw same error\n+        }\n+    }\n+\n+    @Test\n+    public void getBinaryContentVersion() throws Exception {\n+        DefaultOCFLObjectSession.setGlobaDefaultCommitOption(NEW_VERSION);\n+        // SEE getTriplesFromPreviousVersion\n+        mockMappingAndIndex(mintOCFLObjectId(RESOURCE_ID), RESOURCE_ID, ROOT_OBJECT_ID, mapping);\n+\n+        // create the binary\n+        final var binOperation = mockNonRdfSourceOperation(BINARY_CONTENT, USER_PRINCIPAL, RESOURCE_ID);\n+        // perform the create non-rdf source operation\n+        session.persist(binOperation);\n+        // commit to OCFL\n+        session.commit();\n+\n+        // create a new session and verify that the state is the same\n+        final var newSession = createSession(index, objectSessionFactory);\n+\n+        final var versions = newSession.listVersions(RESOURCE_ID);\n+        final var version1 = versions.get(versions.size() - 1);\n+        assertEquals(BINARY_CONTENT,\n+                IOUtils.toString(newSession.getBinaryContent(RESOURCE_ID, version1), UTF_8));\n+    }\n+\n+    @Test\n+    public void getBinaryContentUncommitted() throws Exception {\n+        mockMappingAndIndex(mintOCFLObjectId(RESOURCE_ID), RESOURCE_ID, ROOT_OBJECT_ID, mapping);\n+\n+        // create the binary\n+        final var binOperation = mockNonRdfSourceOperation(BINARY_CONTENT, USER_PRINCIPAL, RESOURCE_ID);\n+\n+        // perform the create non-rdf source operation\n+        session.persist(binOperation);\n+\n+        // create a new session and verify the returned rdf stream.\n+        final var result = IOUtils.toString(session.getBinaryContent(RESOURCE_ID, null), UTF_8);\n+\n+        assertEquals(BINARY_CONTENT, result);\n+    }\n+\n+    private NonRdfSourceOperation mockNonRdfSourceOperation(final String content,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM5NjU5Ng=="}, "originalCommit": {"oid": "80c478a99b3c7dec2ccb5ffb75aae053d41ae14e"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjQ2OTQ1OnYy", "diffSide": "RIGHT", "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/OCFLPersistentStorageSession.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDowMDoxMVrOFjJU5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTo1ODoxMFrOFjwUIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM5NzI4NQ==", "bodyText": "Should this not take a transaction? What if the binary is created and then GETted inside a single long-running transaction?", "url": "https://github.com/fcrepo/fcrepo/pull/1613#discussion_r372397285", "createdAt": "2020-01-29T14:00:11Z", "author": {"login": "whikloj"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/OCFLPersistentStorageSession.java", "diffHunk": "@@ -253,9 +254,16 @@ public RdfStream getTriples(final String identifier, final Instant version)\n \n     @Override\n     public InputStream getBinaryContent(final String identifier, final Instant version)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c478a99b3c7dec2ccb5ffb75aae053d41ae14e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxNDIzNQ==", "bodyText": "The class this method is in is effectively the transaction at the persistence layer, so it should be resolving to the state of the long running transaction that the GET is taking place in", "url": "https://github.com/fcrepo/fcrepo/pull/1613#discussion_r372414235", "createdAt": "2020-01-29T14:30:05Z", "author": {"login": "bbpennel"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/OCFLPersistentStorageSession.java", "diffHunk": "@@ -253,9 +254,16 @@ public RdfStream getTriples(final String identifier, final Instant version)\n \n     @Override\n     public InputStream getBinaryContent(final String identifier, final Instant version)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM5NzI4NQ=="}, "originalCommit": {"oid": "80c478a99b3c7dec2ccb5ffb75aae053d41ae14e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAzNjA2Ng==", "bodyText": "This went 90% over my head, but I think I got enough to be okay.", "url": "https://github.com/fcrepo/fcrepo/pull/1613#discussion_r373036066", "createdAt": "2020-01-30T15:58:10Z", "author": {"login": "whikloj"}, "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/OCFLPersistentStorageSession.java", "diffHunk": "@@ -253,9 +254,16 @@ public RdfStream getTriples(final String identifier, final Instant version)\n \n     @Override\n     public InputStream getBinaryContent(final String identifier, final Instant version)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM5NzI4NQ=="}, "originalCommit": {"oid": "80c478a99b3c7dec2ccb5ffb75aae053d41ae14e"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1926, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}