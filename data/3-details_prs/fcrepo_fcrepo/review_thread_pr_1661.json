{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxOTcwNjkx", "number": 1661, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjozODozNFrODwzAbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowMDoyNFrODw2Hzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDkzOTM1OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/TransactionsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjozODozNFrOGD_dsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjozODozNFrOGD_dsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzODcwNw==", "bodyText": "You could use URI.create() - then you don't need the throws clause. above.  Just a suggestion.", "url": "https://github.com/fcrepo/fcrepo/pull/1661#discussion_r406838707", "createdAt": "2020-04-10T16:38:34Z", "author": {"login": "dbernstein"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/http/api/TransactionsTest.java", "diffHunk": "@@ -91,7 +96,11 @@ public void setUp() {\n             .thenThrow(new TransactionNotFoundException(\"No Transaction found with transactionId\"));\n         when(mockTransaction.getId()).thenReturn(\"123\");\n         when(mockTransaction.getExpires()).thenReturn(now().plusSeconds(100));\n+\n+        when(mockUriInfo.getBaseUri()).thenReturn(new URI(\"http://localhost/rest\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383f0d28a1e81d4c0fa3947faaccbbefc72cef4e"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDk1NDYwOnYy", "diffSide": "RIGHT", "path": "fcrepo-jms/src/test/java/org/fcrepo/integration/jms/observer/AbstractJmsIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjo0NDowMlrOGD_m2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzo1NzoyMFrOGEBfcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MTA0OA==", "bodyText": "Do we need to keep these around?", "url": "https://github.com/fcrepo/fcrepo/pull/1661#discussion_r406841048", "createdAt": "2020-04-10T16:44:02Z", "author": {"login": "dbernstein"}, "path": "fcrepo-jms/src/test/java/org/fcrepo/integration/jms/observer/AbstractJmsIT.java", "diffHunk": "@@ -27,44 +65,16 @@\n import static org.fcrepo.jms.DefaultMessageFactory.IDENTIFIER_HEADER_NAME;\n import static org.fcrepo.jms.DefaultMessageFactory.RESOURCE_TYPE_HEADER_NAME;\n import static org.fcrepo.jms.DefaultMessageFactory.TIMESTAMP_HEADER_NAME;\n+import static org.fcrepo.kernel.api.RdfLexicon.NON_RDF_SOURCE;\n import static org.fcrepo.kernel.api.RdfLexicon.REPOSITORY_NAMESPACE;\n import static org.fcrepo.kernel.api.observer.EventType.INBOUND_REFERENCE;\n import static org.fcrepo.kernel.api.observer.EventType.RESOURCE_CREATION;\n import static org.fcrepo.kernel.api.observer.EventType.RESOURCE_DELETION;\n import static org.fcrepo.kernel.api.observer.EventType.RESOURCE_MODIFICATION;\n-// import static org.fcrepo.kernel.api.observer.OptionalValues.BASE_URL;\n-// import static org.fcrepo.kernel.api.observer.OptionalValues.USER_AGENT;\n import static org.slf4j.LoggerFactory.getLogger;\n \n-import java.util.Set;\n-import java.util.concurrent.CopyOnWriteArraySet;\n-import javax.inject.Inject;\n-import javax.jms.Connection;\n-import javax.jms.Destination;\n-import javax.jms.JMSException;\n-import javax.jms.Message;\n-import javax.jms.MessageConsumer;\n-import javax.jms.MessageListener;\n-import javax.jms.Session;\n-\n-import org.apache.activemq.ActiveMQConnectionFactory;\n-import org.apache.jena.rdf.model.Resource;\n-\n-import org.fcrepo.kernel.api.Transaction;\n-import org.fcrepo.kernel.api.TransactionManager;\n-import org.fcrepo.kernel.api.exception.InvalidChecksumException;\n-import org.fcrepo.kernel.api.identifiers.IdentifierConverter;\n-import org.fcrepo.kernel.api.models.Container;\n-import org.fcrepo.kernel.api.models.FedoraResource;\n-import org.fcrepo.kernel.api.services.DeleteResourceService;\n-import org.fcrepo.kernel.api.services.ReplacePropertiesService;\n-import org.fcrepo.kernel.api.services.UpdatePropertiesService;\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import org.slf4j.Logger;\n+// import static org.fcrepo.kernel.api.observer.OptionalValues.BASE_URL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383f0d28a1e81d4c0fa3947faaccbbefc72cef4e"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3MTkyMg==", "bodyText": "Nope", "url": "https://github.com/fcrepo/fcrepo/pull/1661#discussion_r406871922", "createdAt": "2020-04-10T17:57:20Z", "author": {"login": "pwinckles"}, "path": "fcrepo-jms/src/test/java/org/fcrepo/integration/jms/observer/AbstractJmsIT.java", "diffHunk": "@@ -27,44 +65,16 @@\n import static org.fcrepo.jms.DefaultMessageFactory.IDENTIFIER_HEADER_NAME;\n import static org.fcrepo.jms.DefaultMessageFactory.RESOURCE_TYPE_HEADER_NAME;\n import static org.fcrepo.jms.DefaultMessageFactory.TIMESTAMP_HEADER_NAME;\n+import static org.fcrepo.kernel.api.RdfLexicon.NON_RDF_SOURCE;\n import static org.fcrepo.kernel.api.RdfLexicon.REPOSITORY_NAMESPACE;\n import static org.fcrepo.kernel.api.observer.EventType.INBOUND_REFERENCE;\n import static org.fcrepo.kernel.api.observer.EventType.RESOURCE_CREATION;\n import static org.fcrepo.kernel.api.observer.EventType.RESOURCE_DELETION;\n import static org.fcrepo.kernel.api.observer.EventType.RESOURCE_MODIFICATION;\n-// import static org.fcrepo.kernel.api.observer.OptionalValues.BASE_URL;\n-// import static org.fcrepo.kernel.api.observer.OptionalValues.USER_AGENT;\n import static org.slf4j.LoggerFactory.getLogger;\n \n-import java.util.Set;\n-import java.util.concurrent.CopyOnWriteArraySet;\n-import javax.inject.Inject;\n-import javax.jms.Connection;\n-import javax.jms.Destination;\n-import javax.jms.JMSException;\n-import javax.jms.Message;\n-import javax.jms.MessageConsumer;\n-import javax.jms.MessageListener;\n-import javax.jms.Session;\n-\n-import org.apache.activemq.ActiveMQConnectionFactory;\n-import org.apache.jena.rdf.model.Resource;\n-\n-import org.fcrepo.kernel.api.Transaction;\n-import org.fcrepo.kernel.api.TransactionManager;\n-import org.fcrepo.kernel.api.exception.InvalidChecksumException;\n-import org.fcrepo.kernel.api.identifiers.IdentifierConverter;\n-import org.fcrepo.kernel.api.models.Container;\n-import org.fcrepo.kernel.api.models.FedoraResource;\n-import org.fcrepo.kernel.api.services.DeleteResourceService;\n-import org.fcrepo.kernel.api.services.ReplacePropertiesService;\n-import org.fcrepo.kernel.api.services.UpdatePropertiesService;\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import org.slf4j.Logger;\n+// import static org.fcrepo.kernel.api.observer.OptionalValues.BASE_URL;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MTA0OA=="}, "originalCommit": {"oid": "383f0d28a1e81d4c0fa3947faaccbbefc72cef4e"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDk2NjkyOnYy", "diffSide": "RIGHT", "path": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/TransactionProviderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjo0ODozOFrOGD_uaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzo0NjozMFrOGEBOUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0Mjk4Nw==", "bodyText": "I appreciate your thorough documentation here.", "url": "https://github.com/fcrepo/fcrepo/pull/1661#discussion_r406842987", "createdAt": "2020-04-10T16:48:38Z", "author": {"login": "dbernstein"}, "path": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/TransactionProviderTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.fcrepo.http.commons.session;\n+\n+import org.fcrepo.kernel.api.Transaction;\n+import org.fcrepo.kernel.api.TransactionManager;\n+import org.glassfish.jersey.internal.PropertiesDelegate;\n+import org.glassfish.jersey.server.ContainerRequest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.ws.rs.core.SecurityContext;\n+import javax.ws.rs.core.UriInfo;\n+import java.net.URI;\n+\n+import static java.net.URI.create;\n+import static org.fcrepo.http.commons.session.TransactionProvider.JMS_BASEURL_PROP;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.Silent.class)\n+public class TransactionProviderTest {\n+\n+    @Mock\n+    private TransactionManager transactionManager;\n+\n+    @Mock\n+    private HttpServletRequest request;\n+\n+    @Mock\n+    private Transaction transaction;\n+\n+    @Before\n+    public void setup() {\n+        when(transactionManager.create()).thenReturn(transaction);\n+    }\n+\n+    private TransactionProvider createProvider(final UriInfo uriInfo) {\n+        return new TransactionProvider(transactionManager, request, uriInfo.getBaseUri());\n+    }\n+\n+    @Test\n+    public void testSetUserAgent() {\n+        // Obtain a concrete instance of UriInfo\n+        final URI baseUri = create(\"http://localhost/fcrepo\");\n+        final URI requestUri = create(\"http://localhost/fcrepo/foo\");\n+        final ContainerRequest req = new ContainerRequest(baseUri, requestUri, \"GET\", mock(SecurityContext.class),\n+                mock(PropertiesDelegate.class));\n+        final UriInfo info = spy(req.getUriInfo());\n+\n+        final String expectedBaseUrl = baseUri.toString();\n+        final String expectedUserAgent = \"fedoraAdmin\";\n+\n+        when(request.getHeader(\"user-agent\")).thenReturn(expectedUserAgent);\n+\n+        createProvider(info).provide();\n+\n+        verify(transaction).setBaseUri(expectedBaseUrl);\n+        verify(transaction).setUserAgent(expectedUserAgent);\n+        verify(info).getBaseUri();\n+    }\n+\n+    /**\n+     * Demonstrates that when the {@link TransactionProvider#JMS_BASEURL_PROP fcrepo.jms.baseUrl} system property is not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383f0d28a1e81d4c0fa3947faaccbbefc72cef4e"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2NzUzNg==", "bodyText": "I didn't write those tests. Just moved them to a new home. :P", "url": "https://github.com/fcrepo/fcrepo/pull/1661#discussion_r406867536", "createdAt": "2020-04-10T17:46:30Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/session/TransactionProviderTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.fcrepo.http.commons.session;\n+\n+import org.fcrepo.kernel.api.Transaction;\n+import org.fcrepo.kernel.api.TransactionManager;\n+import org.glassfish.jersey.internal.PropertiesDelegate;\n+import org.glassfish.jersey.server.ContainerRequest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.ws.rs.core.SecurityContext;\n+import javax.ws.rs.core.UriInfo;\n+import java.net.URI;\n+\n+import static java.net.URI.create;\n+import static org.fcrepo.http.commons.session.TransactionProvider.JMS_BASEURL_PROP;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.Silent.class)\n+public class TransactionProviderTest {\n+\n+    @Mock\n+    private TransactionManager transactionManager;\n+\n+    @Mock\n+    private HttpServletRequest request;\n+\n+    @Mock\n+    private Transaction transaction;\n+\n+    @Before\n+    public void setup() {\n+        when(transactionManager.create()).thenReturn(transaction);\n+    }\n+\n+    private TransactionProvider createProvider(final UriInfo uriInfo) {\n+        return new TransactionProvider(transactionManager, request, uriInfo.getBaseUri());\n+    }\n+\n+    @Test\n+    public void testSetUserAgent() {\n+        // Obtain a concrete instance of UriInfo\n+        final URI baseUri = create(\"http://localhost/fcrepo\");\n+        final URI requestUri = create(\"http://localhost/fcrepo/foo\");\n+        final ContainerRequest req = new ContainerRequest(baseUri, requestUri, \"GET\", mock(SecurityContext.class),\n+                mock(PropertiesDelegate.class));\n+        final UriInfo info = spy(req.getUriInfo());\n+\n+        final String expectedBaseUrl = baseUri.toString();\n+        final String expectedUserAgent = \"fedoraAdmin\";\n+\n+        when(request.getHeader(\"user-agent\")).thenReturn(expectedUserAgent);\n+\n+        createProvider(info).provide();\n+\n+        verify(transaction).setBaseUri(expectedBaseUrl);\n+        verify(transaction).setUserAgent(expectedUserAgent);\n+        verify(info).getBaseUri();\n+    }\n+\n+    /**\n+     * Demonstrates that when the {@link TransactionProvider#JMS_BASEURL_PROP fcrepo.jms.baseUrl} system property is not", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0Mjk4Nw=="}, "originalCommit": {"oid": "383f0d28a1e81d4c0fa3947faaccbbefc72cef4e"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTAxMjI3OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzowNToyMVrOGEAKcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzo1NzozN1rOGEBf2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1MDE2MQ==", "bodyText": "Just curious why you departed from using setField(... ?", "url": "https://github.com/fcrepo/fcrepo/pull/1661#discussion_r406850161", "createdAt": "2020-04-10T17:05:21Z", "author": {"login": "dbernstein"}, "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java", "diffHunk": "@@ -166,6 +170,7 @@ public void setUp() {\n         nonRdfSourceOperationFactory = new NonRdfSourceOperationFactoryImpl();\n         setField(createResourceService, \"nonRdfSourceOperationFactory\", nonRdfSourceOperationFactory);\n         setField(createResourceService, \"containmentIndex\", containmentIndex);\n+        createResourceService.eventAccumulator = eventAccumulator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383f0d28a1e81d4c0fa3947faaccbbefc72cef4e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1MTk3Mw==", "bodyText": "For the sake of consistency, I would suggest we do all the assignments of protected members in the same way - at least within a test class.", "url": "https://github.com/fcrepo/fcrepo/pull/1661#discussion_r406851973", "createdAt": "2020-04-10T17:09:47Z", "author": {"login": "dbernstein"}, "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java", "diffHunk": "@@ -166,6 +170,7 @@ public void setUp() {\n         nonRdfSourceOperationFactory = new NonRdfSourceOperationFactoryImpl();\n         setField(createResourceService, \"nonRdfSourceOperationFactory\", nonRdfSourceOperationFactory);\n         setField(createResourceService, \"containmentIndex\", containmentIndex);\n+        createResourceService.eventAccumulator = eventAccumulator;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1MDE2MQ=="}, "originalCommit": {"oid": "383f0d28a1e81d4c0fa3947faaccbbefc72cef4e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3MjAyNw==", "bodyText": "Changed", "url": "https://github.com/fcrepo/fcrepo/pull/1661#discussion_r406872027", "createdAt": "2020-04-10T17:57:37Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImplTest.java", "diffHunk": "@@ -166,6 +170,7 @@ public void setUp() {\n         nonRdfSourceOperationFactory = new NonRdfSourceOperationFactoryImpl();\n         setField(createResourceService, \"nonRdfSourceOperationFactory\", nonRdfSourceOperationFactory);\n         setField(createResourceService, \"containmentIndex\", containmentIndex);\n+        createResourceService.eventAccumulator = eventAccumulator;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1MDE2MQ=="}, "originalCommit": {"oid": "383f0d28a1e81d4c0fa3947faaccbbefc72cef4e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTAyNzE4OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/DeleteResourceServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzoxMTowNVrOGEATiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzo1Nzo0NVrOGEBgHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1MjQ4OQ==", "bodyText": "Same as above.", "url": "https://github.com/fcrepo/fcrepo/pull/1661#discussion_r406852489", "createdAt": "2020-04-10T17:11:05Z", "author": {"login": "dbernstein"}, "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/DeleteResourceServiceImplTest.java", "diffHunk": "@@ -117,6 +122,7 @@ public void setup() {\n         final DeleteResourceOperationFactoryImpl factoryImpl = new DeleteResourceOperationFactoryImpl();\n         setField(service, \"deleteResourceFactory\", factoryImpl);\n         setField(service, \"containmentIndex\", containmentIndex);\n+        service.eventAccumulator = eventAccumulator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383f0d28a1e81d4c0fa3947faaccbbefc72cef4e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3MjA5NQ==", "bodyText": "Changed", "url": "https://github.com/fcrepo/fcrepo/pull/1661#discussion_r406872095", "createdAt": "2020-04-10T17:57:45Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/DeleteResourceServiceImplTest.java", "diffHunk": "@@ -117,6 +122,7 @@ public void setup() {\n         final DeleteResourceOperationFactoryImpl factoryImpl = new DeleteResourceOperationFactoryImpl();\n         setField(service, \"deleteResourceFactory\", factoryImpl);\n         setField(service, \"containmentIndex\", containmentIndex);\n+        service.eventAccumulator = eventAccumulator;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1MjQ4OQ=="}, "originalCommit": {"oid": "383f0d28a1e81d4c0fa3947faaccbbefc72cef4e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTQxNzQ4OnYy", "diffSide": "RIGHT", "path": "fcrepo-jms/src/test/java/org/fcrepo/integration/jms/observer/AbstractJmsIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0NjoxM1rOGEEC4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo1NDoyOFrOGEEORA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzc2MA==", "bodyText": "Is there a reason these are no longer static final?", "url": "https://github.com/fcrepo/fcrepo/pull/1661#discussion_r406913760", "createdAt": "2020-04-10T19:46:13Z", "author": {"login": "whikloj"}, "path": "fcrepo-jms/src/test/java/org/fcrepo/integration/jms/observer/AbstractJmsIT.java", "diffHunk": "@@ -80,23 +87,29 @@\n      */\n     private static final long TIMEOUT = 20000;\n \n-    private static final String testIngested = \"/testMessageFromIngestion-\" + randomUUID();\n+    private String testIngested = \"/testMessageFromIngestion-\" + randomUUID();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e756b0cff7e746cb97d2fc962a88d1bea965ad4f"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNjY3Ng==", "bodyText": "Yes, when they're static JUnit will not regenerate the values between test runs. The in memory containment index is not cleared between tests, as such the ids must be unique.", "url": "https://github.com/fcrepo/fcrepo/pull/1661#discussion_r406916676", "createdAt": "2020-04-10T19:54:28Z", "author": {"login": "pwinckles"}, "path": "fcrepo-jms/src/test/java/org/fcrepo/integration/jms/observer/AbstractJmsIT.java", "diffHunk": "@@ -80,23 +87,29 @@\n      */\n     private static final long TIMEOUT = 20000;\n \n-    private static final String testIngested = \"/testMessageFromIngestion-\" + randomUUID();\n+    private String testIngested = \"/testMessageFromIngestion-\" + randomUUID();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzc2MA=="}, "originalCommit": {"oid": "e756b0cff7e746cb97d2fc962a88d1bea965ad4f"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTQzMjQzOnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/observer/EventBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo1Mjo1OVrOGEEMEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo1NzozNlrOGEESlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNjExMw==", "bodyText": "How would this handle the case of two clients sharing a transaction? I know that isn't common, just wondering would it use the first userid or the last userid or some other version?", "url": "https://github.com/fcrepo/fcrepo/pull/1661#discussion_r406916113", "createdAt": "2020-04-10T19:52:59Z", "author": {"login": "whikloj"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/observer/EventBuilder.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.fcrepo.kernel.impl.observer;\n+\n+import org.fcrepo.kernel.api.observer.Event;\n+\n+import java.util.Set;\n+\n+/**\n+ * Stores details about an Event.\n+ */\n+public interface EventBuilder {\n+\n+    /**\n+     * Merges another EventBuilder into this EventBuilder. This should be used to combine multiple events on the same\n+     * resource.\n+     *\n+     * @param other another EventBuilder\n+     * @return this builder\n+     */\n+    EventBuilder merge(EventBuilder other);\n+\n+    /**\n+     * Sets the resource's RDF Types on the event\n+     *\n+     * @param resourceTypes RDF Types\n+     * @return this builder\n+     */\n+    EventBuilder withResourceTypes(Set<String> resourceTypes);\n+\n+    /**\n+     * Sets the baseUrl of the requests\n+     *\n+     * @param baseUrl the base url\n+     * @return this builder\n+     */\n+    EventBuilder withBaseUrl(String baseUrl);\n+\n+    /**\n+     * Sets the user's user-agent\n+     *\n+     * @param userAgent the user's user-agent\n+     * @return this builder\n+     */\n+    EventBuilder withUserAgent(String userAgent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e756b0cff7e746cb97d2fc962a88d1bea965ad4f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNzc4MA==", "bodyText": "It uses the user-agent that was originally used to initiate the transaction.", "url": "https://github.com/fcrepo/fcrepo/pull/1661#discussion_r406917780", "createdAt": "2020-04-10T19:57:36Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/observer/EventBuilder.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.fcrepo.kernel.impl.observer;\n+\n+import org.fcrepo.kernel.api.observer.Event;\n+\n+import java.util.Set;\n+\n+/**\n+ * Stores details about an Event.\n+ */\n+public interface EventBuilder {\n+\n+    /**\n+     * Merges another EventBuilder into this EventBuilder. This should be used to combine multiple events on the same\n+     * resource.\n+     *\n+     * @param other another EventBuilder\n+     * @return this builder\n+     */\n+    EventBuilder merge(EventBuilder other);\n+\n+    /**\n+     * Sets the resource's RDF Types on the event\n+     *\n+     * @param resourceTypes RDF Types\n+     * @return this builder\n+     */\n+    EventBuilder withResourceTypes(Set<String> resourceTypes);\n+\n+    /**\n+     * Sets the baseUrl of the requests\n+     *\n+     * @param baseUrl the base url\n+     * @return this builder\n+     */\n+    EventBuilder withBaseUrl(String baseUrl);\n+\n+    /**\n+     * Sets the user's user-agent\n+     *\n+     * @param userAgent the user's user-agent\n+     * @return this builder\n+     */\n+    EventBuilder withUserAgent(String userAgent);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNjExMw=="}, "originalCommit": {"oid": "e756b0cff7e746cb97d2fc962a88d1bea965ad4f"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTQzNDY4OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/observer/EventImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo1NDowMFrOGEENhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo1NTo1NVrOGEEQWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNjQ4Nw==", "bodyText": "Just wondering why you didn't create proper fields give the above TODO?", "url": "https://github.com/fcrepo/fcrepo/pull/1661#discussion_r406916487", "createdAt": "2020-04-10T19:54:00Z", "author": {"login": "whikloj"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/observer/EventImpl.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.fcrepo.kernel.impl.observer;\n+\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.observer.Event;\n+import org.fcrepo.kernel.api.observer.EventType;\n+\n+import java.net.URI;\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.util.UUID.randomUUID;\n+\n+/**\n+ * An event that describes one or more actions that a user preformed on a resource.\n+ */\n+public class EventImpl implements Event {\n+\n+    private final String eventId;\n+    private final FedoraId fedoraId;\n+    private final Set<EventType> types;\n+    private final Set<String> resourceTypes;\n+    private final String userID;\n+    private final URI userURI;\n+    private final Instant date;\n+    // TODO I think this should go away and baseUrl and userAgent should be proper fields\n+    private final Map<String, String> info;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e756b0cff7e746cb97d2fc962a88d1bea965ad4f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNzIwOQ==", "bodyText": "Because I didn't want to change the JMS code in this PR. The JMS code appears to more or less require baseURl (I think it will NPE without it). I'll do a second pass with changes to the Event interface and JMS code.", "url": "https://github.com/fcrepo/fcrepo/pull/1661#discussion_r406917209", "createdAt": "2020-04-10T19:55:55Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/observer/EventImpl.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.fcrepo.kernel.impl.observer;\n+\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.observer.Event;\n+import org.fcrepo.kernel.api.observer.EventType;\n+\n+import java.net.URI;\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.util.UUID.randomUUID;\n+\n+/**\n+ * An event that describes one or more actions that a user preformed on a resource.\n+ */\n+public class EventImpl implements Event {\n+\n+    private final String eventId;\n+    private final FedoraId fedoraId;\n+    private final Set<EventType> types;\n+    private final Set<String> resourceTypes;\n+    private final String userID;\n+    private final URI userURI;\n+    private final Instant date;\n+    // TODO I think this should go away and baseUrl and userAgent should be proper fields\n+    private final Map<String, String> info;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNjQ4Nw=="}, "originalCommit": {"oid": "e756b0cff7e746cb97d2fc962a88d1bea965ad4f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTQ0OTc0OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/VersionServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowMDoyNFrOGEEWuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowMDoyNFrOGEEWuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxODg0MA==", "bodyText": "I think this might cause a problem for versioning of binary descriptions separately from the binary itself. getResourceId for a description returns the ID of the binary. It might be fine, but might need to be reviewed when we start passing FedoraId's into these builders.", "url": "https://github.com/fcrepo/fcrepo/pull/1661#discussion_r406918840", "createdAt": "2020-04-10T20:00:24Z", "author": {"login": "whikloj"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/VersionServiceImpl.java", "diffHunk": "@@ -43,17 +44,18 @@\n     private VersionResourceOperationFactory versionOperationFactory;\n \n     @Override\n-    public void createVersion(final Transaction transaction, final String resourceId, final String userPrincipal) {\n+    public void createVersion(final Transaction transaction, final FedoraId fedoraId, final String userPrincipal) {\n         final var session = psManager.getSession(transaction.getId());\n-        final var operation = versionOperationFactory.createBuilder(resourceId)\n+        final var operation = versionOperationFactory.createBuilder(fedoraId.getResourceId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e756b0cff7e746cb97d2fc962a88d1bea965ad4f"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1792, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}