{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MjI2OTA2", "number": 1644, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDowNjoxOVrODnnCaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxMzo1N1rODpgFCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODYwNjQ5OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDowNjoxOVrOF1ti9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzozODowN1rOF1zU4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg2NTA3Ng==", "bodyText": "The MEMENTO_DATETIME_HEADER value should be the time that the memento was created, no?\nIn which case, it may not align on the same second boundary as now(). Or am I misunderstanding the logic?", "url": "https://github.com/fcrepo/fcrepo/pull/1644#discussion_r391865076", "createdAt": "2020-03-12T20:06:19Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -249,6 +247,26 @@ public void getTimeMapFromAgWithChildrenWithDifferentVersions() throws Exception\n         }\n     }\n \n+    @Test\n+    public void getMementoFromAgChild() throws Exception {\n+        final var childId1 = id + \"/child1\";\n+\n+        createVersionedArchivalGroup(id);\n+        createMemento(subjectUri);\n+        TimeUnit.SECONDS.sleep(1);\n+\n+        putVersionedBinary(childId1, OCTET_STREAM_TYPE, \"v2\", false);\n+        final var mementoUri = createMemento(subjectUri);\n+        final var mementoTime = mementoUri.substring(mementoUri.lastIndexOf(\"/\"));\n+\n+        final HttpGet httpGet = new HttpGet(subjectUri + \"/child1/fcr:versions\" + mementoTime);\n+        try (final CloseableHttpResponse response = execute(httpGet)) {\n+            assertMementoDatetimeHeaderMatches(response, now());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7dbc66080d7abec1a5e46f2245cb01f25859bd"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk1OTc3OQ==", "bodyText": "The assertion logic just makes sure that the memento timestamp is within a few seconds of the specified time because it's not possible to specify a timestamp anymore.", "url": "https://github.com/fcrepo/fcrepo/pull/1644#discussion_r391959779", "createdAt": "2020-03-12T23:38:07Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -249,6 +247,26 @@ public void getTimeMapFromAgWithChildrenWithDifferentVersions() throws Exception\n         }\n     }\n \n+    @Test\n+    public void getMementoFromAgChild() throws Exception {\n+        final var childId1 = id + \"/child1\";\n+\n+        createVersionedArchivalGroup(id);\n+        createMemento(subjectUri);\n+        TimeUnit.SECONDS.sleep(1);\n+\n+        putVersionedBinary(childId1, OCTET_STREAM_TYPE, \"v2\", false);\n+        final var mementoUri = createMemento(subjectUri);\n+        final var mementoTime = mementoUri.substring(mementoUri.lastIndexOf(\"/\"));\n+\n+        final HttpGet httpGet = new HttpGet(subjectUri + \"/child1/fcr:versions\" + mementoTime);\n+        try (final CloseableHttpResponse response = execute(httpGet)) {\n+            assertMementoDatetimeHeaderMatches(response, now());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg2NTA3Ng=="}, "originalCommit": {"oid": "4a7dbc66080d7abec1a5e46f2245cb01f25859bd"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODY0NjI0OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDoxNjoxNVrOF1t6Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMDoxNDo0MFrOF1z4vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg3MTAxOA==", "bodyText": "The content-type provided during creation (above) is OCTET_STREAM_TYPE... which is the content-type that is being verified in this assertion. What is the comment (\"Content-type is not retained for a binary memento created without description\") intending to mean, exactly?... because it appears that the content-type is retained.", "url": "https://github.com/fcrepo/fcrepo/pull/1644#discussion_r391871018", "createdAt": "2020-03-12T20:16:15Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -989,52 +926,35 @@ public void testCreateVersionOfBinary() throws Exception {\n         }\n     }\n \n-    @Ignore(\"get memento not implemented\")\n     @Test\n-    public void testCreateVersionOfBinaryWithDatetimeAndContentType() throws Exception {\n+    public void testCreateVersionOfBinaryWithDatetimeAndBody() throws Exception {\n         createVersionedBinary(id);\n \n         final String mementoUri = createMemento(subjectUri);\n+        final String v1Time = now();\n         assertMementoUri(mementoUri, subjectUri);\n \n-        // Verify that the memento has the updated binary\n-        try (final CloseableHttpResponse response = execute(new HttpGet(mementoUri))) {\n-            assertMementoDatetimeHeaderMatches(response, MEMENTO_DATETIME);\n+        TimeUnit.SECONDS.sleep(1);\n \n-            assertEquals(\"Binary content of memento must be empty\",\n-                    \"\", EntityUtils.toString(response.getEntity()));\n-            assertEquals(OCTET_STREAM_TYPE, response.getFirstHeader(CONTENT_TYPE).getValue());\n-        }\n-    }\n+        putVersionedBinary(id, OCTET_STREAM_TYPE, BINARY_UPDATED, true);\n \n-    @Ignore(\"get memento not implemented\")\n-    @Test\n-    public void testCreateVersionOfBinaryWithBody() throws Exception {\n-        createVersionedBinary(id);\n+        final String mementoUri2 = createMemento(subjectUri);\n+        final String v2Time = now();\n+        assertMementoUri(mementoUri2, subjectUri);\n \n-        final String mementoUri = createMemento(subjectUri);\n-        assertMementoUri(mementoUri, subjectUri);\n+        // Verify that the memento has the updated binary\n+        try (final CloseableHttpResponse response = execute(new HttpGet(mementoUri))) {\n+            assertMementoDatetimeHeaderMatches(response, v1Time);\n \n-        final HttpGet httpGet = new HttpGet(mementoUri);\n-        try (final CloseableHttpResponse response = execute(httpGet)) {\n-            assertMementoDatetimeHeaderPresent(response);\n+            // Content-type is not retained for a binary memento created without description", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7dbc66080d7abec1a5e46f2245cb01f25859bd"}, "originalPosition": 306}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MTcyNQ==", "bodyText": "I'm not sure what that means... It only looks like I added it because of other editing I did in the area.\nhttps://github.com/fcrepo4/fcrepo4/blob/f02d2e637e6364db133bddbe759470e7a7c7d4d1/fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java#L1039\n??", "url": "https://github.com/fcrepo/fcrepo/pull/1644#discussion_r391961725", "createdAt": "2020-03-12T23:45:31Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -989,52 +926,35 @@ public void testCreateVersionOfBinary() throws Exception {\n         }\n     }\n \n-    @Ignore(\"get memento not implemented\")\n     @Test\n-    public void testCreateVersionOfBinaryWithDatetimeAndContentType() throws Exception {\n+    public void testCreateVersionOfBinaryWithDatetimeAndBody() throws Exception {\n         createVersionedBinary(id);\n \n         final String mementoUri = createMemento(subjectUri);\n+        final String v1Time = now();\n         assertMementoUri(mementoUri, subjectUri);\n \n-        // Verify that the memento has the updated binary\n-        try (final CloseableHttpResponse response = execute(new HttpGet(mementoUri))) {\n-            assertMementoDatetimeHeaderMatches(response, MEMENTO_DATETIME);\n+        TimeUnit.SECONDS.sleep(1);\n \n-            assertEquals(\"Binary content of memento must be empty\",\n-                    \"\", EntityUtils.toString(response.getEntity()));\n-            assertEquals(OCTET_STREAM_TYPE, response.getFirstHeader(CONTENT_TYPE).getValue());\n-        }\n-    }\n+        putVersionedBinary(id, OCTET_STREAM_TYPE, BINARY_UPDATED, true);\n \n-    @Ignore(\"get memento not implemented\")\n-    @Test\n-    public void testCreateVersionOfBinaryWithBody() throws Exception {\n-        createVersionedBinary(id);\n+        final String mementoUri2 = createMemento(subjectUri);\n+        final String v2Time = now();\n+        assertMementoUri(mementoUri2, subjectUri);\n \n-        final String mementoUri = createMemento(subjectUri);\n-        assertMementoUri(mementoUri, subjectUri);\n+        // Verify that the memento has the updated binary\n+        try (final CloseableHttpResponse response = execute(new HttpGet(mementoUri))) {\n+            assertMementoDatetimeHeaderMatches(response, v1Time);\n \n-        final HttpGet httpGet = new HttpGet(mementoUri);\n-        try (final CloseableHttpResponse response = execute(httpGet)) {\n-            assertMementoDatetimeHeaderPresent(response);\n+            // Content-type is not retained for a binary memento created without description", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg3MTAxOA=="}, "originalCommit": {"oid": "4a7dbc66080d7abec1a5e46f2245cb01f25859bd"}, "originalPosition": 306}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2ODk1Ng==", "bodyText": "I suppose we should ensure that the content-type for binary mementos is retained... then the comment can go away :)", "url": "https://github.com/fcrepo/fcrepo/pull/1644#discussion_r391968956", "createdAt": "2020-03-13T00:14:40Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -989,52 +926,35 @@ public void testCreateVersionOfBinary() throws Exception {\n         }\n     }\n \n-    @Ignore(\"get memento not implemented\")\n     @Test\n-    public void testCreateVersionOfBinaryWithDatetimeAndContentType() throws Exception {\n+    public void testCreateVersionOfBinaryWithDatetimeAndBody() throws Exception {\n         createVersionedBinary(id);\n \n         final String mementoUri = createMemento(subjectUri);\n+        final String v1Time = now();\n         assertMementoUri(mementoUri, subjectUri);\n \n-        // Verify that the memento has the updated binary\n-        try (final CloseableHttpResponse response = execute(new HttpGet(mementoUri))) {\n-            assertMementoDatetimeHeaderMatches(response, MEMENTO_DATETIME);\n+        TimeUnit.SECONDS.sleep(1);\n \n-            assertEquals(\"Binary content of memento must be empty\",\n-                    \"\", EntityUtils.toString(response.getEntity()));\n-            assertEquals(OCTET_STREAM_TYPE, response.getFirstHeader(CONTENT_TYPE).getValue());\n-        }\n-    }\n+        putVersionedBinary(id, OCTET_STREAM_TYPE, BINARY_UPDATED, true);\n \n-    @Ignore(\"get memento not implemented\")\n-    @Test\n-    public void testCreateVersionOfBinaryWithBody() throws Exception {\n-        createVersionedBinary(id);\n+        final String mementoUri2 = createMemento(subjectUri);\n+        final String v2Time = now();\n+        assertMementoUri(mementoUri2, subjectUri);\n \n-        final String mementoUri = createMemento(subjectUri);\n-        assertMementoUri(mementoUri, subjectUri);\n+        // Verify that the memento has the updated binary\n+        try (final CloseableHttpResponse response = execute(new HttpGet(mementoUri))) {\n+            assertMementoDatetimeHeaderMatches(response, v1Time);\n \n-        final HttpGet httpGet = new HttpGet(mementoUri);\n-        try (final CloseableHttpResponse response = execute(httpGet)) {\n-            assertMementoDatetimeHeaderPresent(response);\n+            // Content-type is not retained for a binary memento created without description", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg3MTAxOA=="}, "originalCommit": {"oid": "4a7dbc66080d7abec1a5e46f2245cb01f25859bd"}, "originalPosition": 306}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODY2MTI4OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDoyMToyM1rOF1uDUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDoyMToyM1rOF1uDUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg3MzM2MQ==", "bodyText": "Recognizing that this is not a change that you introduced, but I wonder if for clarity it would be more readable/consistent to pass the id into the createLDPRSMementoWithExistingBody() method.", "url": "https://github.com/fcrepo/fcrepo/pull/1644#discussion_r391873361", "createdAt": "2020-03-12T20:21:23Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -573,13 +517,10 @@ public void testHeadOnMemento() throws Exception {\n         checkResponseWithInvalidMementoID(headMethodInvalid);\n     }\n \n-    @Ignore //TODO Fix this test\n     @Test\n     public void testGetOnMemento() throws Exception {\n \n         createVersionedContainer(id);\n-        final String mementoDateTime =\n-            MEMENTO_RFC_1123_FORMATTER.format(ISO_INSTANT.parse(\"2017-06-10T11:41:00Z\", Instant::from));\n         final String mementoUri = createLDPRSMementoWithExistingBody();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7dbc66080d7abec1a5e46f2245cb01f25859bd"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODcwODA1OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDozODoxNlrOF1uhdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjo1OToxOFrOF2CsVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4MTA3Ng==", "bodyText": "The test here creates two versions (version1Uri and version2Uri) with request1Datetime in between. Then the assertion on line 1155 ensures that the second memento is located. I would have thought that version1Uri would have been located since it precedes the request1Datetime.\n\nhttps://mementoweb.org/guide/rfc/#overview-datetime-conneg\nhttps://wiki.lyrasis.org/display/FEDORA6x/Versioning#Versioning-memento-datetime-negoMementoDatetimeNegotiationAlgorithm\n\nI may well be misreading the test, because the functionality when testing manually seems correct.", "url": "https://github.com/fcrepo/fcrepo/pull/1644#discussion_r391881076", "createdAt": "2020-03-12T20:38:16Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1206,21 +1127,25 @@ public void testGetVersionResponseContentTypes() throws Exception {\n         }\n     }\n \n-    @Ignore //TODO Fix this test\n     @Test\n     public void testDatetimeNegotiationLDPRv() throws Exception {\n+        final String startDatetime = MEMENTO_RFC_1123_FORMATTER.format(Instant.now().atZone(ZoneOffset.UTC));\n+\n         final CloseableHttpClient customClient = createClient(true);\n \n         createVersionedContainer(id);\n-        final String memento1 =\n-            MEMENTO_RFC_1123_FORMATTER.format(ISO_INSTANT.parse(\"2017-06-10T11:41:00Z\", Instant::from));\n         final String version1Uri = createLDPRSMementoWithExistingBody();\n-            MEMENTO_RFC_1123_FORMATTER.format(ISO_INSTANT.parse(\"2016-06-17T11:41:00Z\", Instant::from));\n-        final String version2Uri = createLDPRSMementoWithExistingBody();\n+\n+        TimeUnit.SECONDS.sleep(1);\n \n         // Request datetime between memento1 and memento2\n-        final String request1Datetime =\n-            MEMENTO_RFC_1123_FORMATTER.format(ISO_INSTANT.parse(\"2017-01-12T00:00:00Z\", Instant::from));\n+        final String request1Datetime = MEMENTO_RFC_1123_FORMATTER.format(Instant.now().atZone(ZoneOffset.UTC));\n+\n+        TimeUnit.SECONDS.sleep(1);\n+\n+        final String version2Uri = createLDPRSMementoWithExistingBody();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7dbc66080d7abec1a5e46f2245cb01f25859bd"}, "originalPosition": 411}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2NDM3MA==", "bodyText": "Hmm... Yes, I'm confused now too. I'll see what's going on here tomorrow.", "url": "https://github.com/fcrepo/fcrepo/pull/1644#discussion_r391964370", "createdAt": "2020-03-12T23:55:46Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1206,21 +1127,25 @@ public void testGetVersionResponseContentTypes() throws Exception {\n         }\n     }\n \n-    @Ignore //TODO Fix this test\n     @Test\n     public void testDatetimeNegotiationLDPRv() throws Exception {\n+        final String startDatetime = MEMENTO_RFC_1123_FORMATTER.format(Instant.now().atZone(ZoneOffset.UTC));\n+\n         final CloseableHttpClient customClient = createClient(true);\n \n         createVersionedContainer(id);\n-        final String memento1 =\n-            MEMENTO_RFC_1123_FORMATTER.format(ISO_INSTANT.parse(\"2017-06-10T11:41:00Z\", Instant::from));\n         final String version1Uri = createLDPRSMementoWithExistingBody();\n-            MEMENTO_RFC_1123_FORMATTER.format(ISO_INSTANT.parse(\"2016-06-17T11:41:00Z\", Instant::from));\n-        final String version2Uri = createLDPRSMementoWithExistingBody();\n+\n+        TimeUnit.SECONDS.sleep(1);\n \n         // Request datetime between memento1 and memento2\n-        final String request1Datetime =\n-            MEMENTO_RFC_1123_FORMATTER.format(ISO_INSTANT.parse(\"2017-01-12T00:00:00Z\", Instant::from));\n+        final String request1Datetime = MEMENTO_RFC_1123_FORMATTER.format(Instant.now().atZone(ZoneOffset.UTC));\n+\n+        TimeUnit.SECONDS.sleep(1);\n+\n+        final String version2Uri = createLDPRSMementoWithExistingBody();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4MTA3Ng=="}, "originalCommit": {"oid": "4a7dbc66080d7abec1a5e46f2245cb01f25859bd"}, "originalPosition": 411}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIxMTE1NA==", "bodyText": "Ah. So, what's going on here is that the most recent version of the resource is already tagged with a memento (ie there is no mutable head); so a new memento is not created. Instead, the service returns the location of the most recent memento.", "url": "https://github.com/fcrepo/fcrepo/pull/1644#discussion_r392211154", "createdAt": "2020-03-13T12:58:33Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1206,21 +1127,25 @@ public void testGetVersionResponseContentTypes() throws Exception {\n         }\n     }\n \n-    @Ignore //TODO Fix this test\n     @Test\n     public void testDatetimeNegotiationLDPRv() throws Exception {\n+        final String startDatetime = MEMENTO_RFC_1123_FORMATTER.format(Instant.now().atZone(ZoneOffset.UTC));\n+\n         final CloseableHttpClient customClient = createClient(true);\n \n         createVersionedContainer(id);\n-        final String memento1 =\n-            MEMENTO_RFC_1123_FORMATTER.format(ISO_INSTANT.parse(\"2017-06-10T11:41:00Z\", Instant::from));\n         final String version1Uri = createLDPRSMementoWithExistingBody();\n-            MEMENTO_RFC_1123_FORMATTER.format(ISO_INSTANT.parse(\"2016-06-17T11:41:00Z\", Instant::from));\n-        final String version2Uri = createLDPRSMementoWithExistingBody();\n+\n+        TimeUnit.SECONDS.sleep(1);\n \n         // Request datetime between memento1 and memento2\n-        final String request1Datetime =\n-            MEMENTO_RFC_1123_FORMATTER.format(ISO_INSTANT.parse(\"2017-01-12T00:00:00Z\", Instant::from));\n+        final String request1Datetime = MEMENTO_RFC_1123_FORMATTER.format(Instant.now().atZone(ZoneOffset.UTC));\n+\n+        TimeUnit.SECONDS.sleep(1);\n+\n+        final String version2Uri = createLDPRSMementoWithExistingBody();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4MTA3Ng=="}, "originalCommit": {"oid": "4a7dbc66080d7abec1a5e46f2245cb01f25859bd"}, "originalPosition": 411}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIxMTU0MA==", "bodyText": "I'll fix the test so that it's testing what it's supposed to be testing, but it's an open question if you're alright with the behavior I just described.", "url": "https://github.com/fcrepo/fcrepo/pull/1644#discussion_r392211540", "createdAt": "2020-03-13T12:59:18Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1206,21 +1127,25 @@ public void testGetVersionResponseContentTypes() throws Exception {\n         }\n     }\n \n-    @Ignore //TODO Fix this test\n     @Test\n     public void testDatetimeNegotiationLDPRv() throws Exception {\n+        final String startDatetime = MEMENTO_RFC_1123_FORMATTER.format(Instant.now().atZone(ZoneOffset.UTC));\n+\n         final CloseableHttpClient customClient = createClient(true);\n \n         createVersionedContainer(id);\n-        final String memento1 =\n-            MEMENTO_RFC_1123_FORMATTER.format(ISO_INSTANT.parse(\"2017-06-10T11:41:00Z\", Instant::from));\n         final String version1Uri = createLDPRSMementoWithExistingBody();\n-            MEMENTO_RFC_1123_FORMATTER.format(ISO_INSTANT.parse(\"2016-06-17T11:41:00Z\", Instant::from));\n-        final String version2Uri = createLDPRSMementoWithExistingBody();\n+\n+        TimeUnit.SECONDS.sleep(1);\n \n         // Request datetime between memento1 and memento2\n-        final String request1Datetime =\n-            MEMENTO_RFC_1123_FORMATTER.format(ISO_INSTANT.parse(\"2017-01-12T00:00:00Z\", Instant::from));\n+        final String request1Datetime = MEMENTO_RFC_1123_FORMATTER.format(Instant.now().atZone(ZoneOffset.UTC));\n+\n+        TimeUnit.SECONDS.sleep(1);\n+\n+        final String version2Uri = createLDPRSMementoWithExistingBody();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4MTA3Ng=="}, "originalCommit": {"oid": "4a7dbc66080d7abec1a5e46f2245cb01f25859bd"}, "originalPosition": 411}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODczOTI5OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDo0OToxOFrOF1u1RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDo0OToxOFrOF1u1RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4NjE0OA==", "bodyText": "Maybe include link to relevant JIRA? https://jira.lyrasis.org/browse/FCREPO-3246", "url": "https://github.com/fcrepo/fcrepo/pull/1644#discussion_r391886148", "createdAt": "2020-03-12T20:49:18Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1112,7 +1032,7 @@ public void testCreateVersionBinaryDescriptionWithBodyAndDatetime() throws Excep\n         }\n     }\n \n-    @Ignore //TODO Fix this test\n+    @Ignore(\"metadata problems and issues creating binary resources as text/plain\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7dbc66080d7abec1a5e46f2245cb01f25859bd"}, "originalPosition": 354}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODczOTcyOnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDo0OToyOFrOF1u1iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDo0OToyOFrOF1u1iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4NjIxOQ==", "bodyText": "Maybe include link to relevant JIRA? https://jira.lyrasis.org/browse/FCREPO-3246", "url": "https://github.com/fcrepo/fcrepo/pull/1644#discussion_r391886219", "createdAt": "2020-03-12T20:49:28Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1490,18 +1403,16 @@ public void testGetLDPRSMementoHeaders() throws Exception {\n         }\n     }\n \n-    @Ignore //TODO Fix this test\n+    @Ignore(\"bug creating resources with text/plain\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7dbc66080d7abec1a5e46f2245cb01f25859bd"}, "originalPosition": 541}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODc0MDAxOnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDo0OTozNVrOF1u1vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDo0OTozNVrOF1u1vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4NjI2OQ==", "bodyText": "Maybe include link to relevant JIRA? https://jira.lyrasis.org/browse/FCREPO-3246", "url": "https://github.com/fcrepo/fcrepo/pull/1644#discussion_r391886269", "createdAt": "2020-03-12T20:49:35Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraVersioningIT.java", "diffHunk": "@@ -1674,7 +1585,7 @@ public void testCreateHistoricExternalBinaryRedirectVersion() throws Exception {\n         }\n     }\n \n-    @Ignore //TODO Fix this test\n+    @Ignore(\"bug creating text/plain resources\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7dbc66080d7abec1a5e46f2245cb01f25859bd"}, "originalPosition": 571}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTA5Njk0OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraBaseResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjoyMzo1OVrOF1x_eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0MTo0NVrOF1zYyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkzNzkxMw==", "bodyText": "We could probably be slightly more precise and maintainable with:\nPattern.compile(\".*/\" + FedoraTypes.FCR_VERSIONS + \"/(\\\\d+)$\");", "url": "https://github.com/fcrepo/fcrepo/pull/1644#discussion_r391937913", "createdAt": "2020-03-12T22:23:59Z", "author": {"login": "awoods"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraBaseResource.java", "diffHunk": "@@ -59,6 +63,8 @@\n \n     private static final Pattern TRAILING_SLASH_REGEX = Pattern.compile(\"/+$\");\n \n+    private static final Pattern MEMENTO_PATH_PATTERN = Pattern.compile(\".*/fcr:versions/(.*)$\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7dbc66080d7abec1a5e46f2245cb01f25859bd"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MDc3OA==", "bodyText": "Yes, to using the constant, but no to \\\\d. We actually don't want the more specific version here, because we have logic for returning helpful error messages for malformed mementos. I want it to match anything with fcr:versions regardless of if it's correct, so that I can throw an error if I can't interpret it as a memento. I'll leave a comment so that it's clear this is intended, though integration tests would break if it was changed.", "url": "https://github.com/fcrepo/fcrepo/pull/1644#discussion_r391960778", "createdAt": "2020-03-12T23:41:45Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraBaseResource.java", "diffHunk": "@@ -59,6 +63,8 @@\n \n     private static final Pattern TRAILING_SLASH_REGEX = Pattern.compile(\"/+$\");\n \n+    private static final Pattern MEMENTO_PATH_PATTERN = Pattern.compile(\".*/fcr:versions/(.*)$\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkzNzkxMw=="}, "originalCommit": {"oid": "4a7dbc66080d7abec1a5e46f2245cb01f25859bd"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTEyMTg5OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/FedoraResourceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjozNjowNVrOF1yOkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjozNjowNVrOF1yOkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk0MTc3OA==", "bodyText": "Some inline comments would be helpful here.", "url": "https://github.com/fcrepo/fcrepo/pull/1644#discussion_r391941778", "createdAt": "2020-03-12T22:36:05Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/FedoraResourceImpl.java", "diffHunk": "@@ -138,11 +146,22 @@ public boolean isAcl() {\n \n     @Override\n     public FedoraResource findMementoByDatetime(final Instant mementoDatetime) {\n-        try {\n-            return resourceFactory.getResource(tx, getId(), mementoDatetime);\n-        } catch (PathNotFoundException e) {\n-            throw new PathNotFoundRuntimeException(e);\n+        FedoraResource match = null;\n+        long matchDiff = 0;\n+\n+        for (var it = getTimeMap().getChildren().iterator(); it.hasNext();) {\n+            final var current = it.next();\n+            final var diff = Duration.between(current.getMementoDatetime(), mementoDatetime).toSeconds();\n+\n+            if (match == null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7dbc66080d7abec1a5e46f2245cb01f25859bd"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTEzOTk3OnYy", "diffSide": "RIGHT", "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/FedoraResourceImplTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjo0NDo0NlrOF1yZUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMDoxNjoxNlrOF1z6Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk0NDUyOA==", "bodyText": "Actually, we may need to discuss how we want to handle the possibility of multiple mementos with the same timestamp.\nWould there be a means of GETting one of the earlier mementos?", "url": "https://github.com/fcrepo/fcrepo/pull/1644#discussion_r391944528", "createdAt": "2020-03-12T22:44:46Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/FedoraResourceImplTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.fcrepo.kernel.impl.models;\n+\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.models.ResourceFactory;\n+import org.fcrepo.kernel.api.models.TimeMap;\n+import org.fcrepo.kernel.api.services.VersionService;\n+import org.fcrepo.persistence.api.PersistentStorageSessionManager;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.time.Instant;\n+import java.util.ArrayList;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.Silent.class)\n+public class FedoraResourceImplTest {\n+\n+    @Mock\n+    private TimeMap timeMap;\n+\n+    @Mock\n+    private PersistentStorageSessionManager sessionManager;\n+\n+    @Mock\n+    private ResourceFactory resourceFactory;\n+\n+    private static final String ID = \"info:fedora/test\";\n+\n+    @Test\n+    public void findMementoWhenOnlyOneAndBeforeSearch() {\n+        final var resource = resourceWithMockedTimeMap(ID);\n+        expectMementos(\"20200309172117\");\n+        final var match = resource.findMementoByDatetime(instant(\"20200309172118\"));\n+        assertEquals(\"0\", match.getId());\n+    }\n+\n+    @Test\n+    public void findClosestMementoWhenMultiple() {\n+        final var resource = resourceWithMockedTimeMap(ID);\n+        expectMementos(\"20200309172117\", \"20200309172118\", \"20200309172119\");\n+        final var match = resource.findMementoByDatetime(instant(\"20200309172118\"));\n+        assertEquals(\"1\", match.getId());\n+    }\n+\n+    @Test\n+    public void findClosestMementoWhenMultipleNoneExact() {\n+        final var resource = resourceWithMockedTimeMap(ID);\n+        expectMementos(\"20200309172116\", \"20200309172117\", \"20200309172119\");\n+        final var match = resource.findMementoByDatetime(instant(\"20200309172118\"));\n+        assertEquals(\"1\", match.getId());\n+    }\n+\n+    @Test\n+    public void findClosestMementoMultipleSameSecond() {\n+        final var resource = resourceWithMockedTimeMap(ID);\n+        expectMementos(\"20200309172117\", \"20200309172117\", \"20200309172117\");\n+        final var match = resource.findMementoByDatetime(instant(\"20200309172118\"));\n+        assertEquals(\"2\", match.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7dbc66080d7abec1a5e46f2245cb01f25859bd"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2Mzk0Ng==", "bodyText": "There isn't currently a way to do so.", "url": "https://github.com/fcrepo/fcrepo/pull/1644#discussion_r391963946", "createdAt": "2020-03-12T23:54:04Z", "author": {"login": "pwinckles"}, "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/FedoraResourceImplTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.fcrepo.kernel.impl.models;\n+\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.models.ResourceFactory;\n+import org.fcrepo.kernel.api.models.TimeMap;\n+import org.fcrepo.kernel.api.services.VersionService;\n+import org.fcrepo.persistence.api.PersistentStorageSessionManager;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.time.Instant;\n+import java.util.ArrayList;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.Silent.class)\n+public class FedoraResourceImplTest {\n+\n+    @Mock\n+    private TimeMap timeMap;\n+\n+    @Mock\n+    private PersistentStorageSessionManager sessionManager;\n+\n+    @Mock\n+    private ResourceFactory resourceFactory;\n+\n+    private static final String ID = \"info:fedora/test\";\n+\n+    @Test\n+    public void findMementoWhenOnlyOneAndBeforeSearch() {\n+        final var resource = resourceWithMockedTimeMap(ID);\n+        expectMementos(\"20200309172117\");\n+        final var match = resource.findMementoByDatetime(instant(\"20200309172118\"));\n+        assertEquals(\"0\", match.getId());\n+    }\n+\n+    @Test\n+    public void findClosestMementoWhenMultiple() {\n+        final var resource = resourceWithMockedTimeMap(ID);\n+        expectMementos(\"20200309172117\", \"20200309172118\", \"20200309172119\");\n+        final var match = resource.findMementoByDatetime(instant(\"20200309172118\"));\n+        assertEquals(\"1\", match.getId());\n+    }\n+\n+    @Test\n+    public void findClosestMementoWhenMultipleNoneExact() {\n+        final var resource = resourceWithMockedTimeMap(ID);\n+        expectMementos(\"20200309172116\", \"20200309172117\", \"20200309172119\");\n+        final var match = resource.findMementoByDatetime(instant(\"20200309172118\"));\n+        assertEquals(\"1\", match.getId());\n+    }\n+\n+    @Test\n+    public void findClosestMementoMultipleSameSecond() {\n+        final var resource = resourceWithMockedTimeMap(ID);\n+        expectMementos(\"20200309172117\", \"20200309172117\", \"20200309172117\");\n+        final var match = resource.findMementoByDatetime(instant(\"20200309172118\"));\n+        assertEquals(\"2\", match.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk0NDUyOA=="}, "originalCommit": {"oid": "4a7dbc66080d7abec1a5e46f2245cb01f25859bd"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2OTM0Ng==", "bodyText": "If we can not subsequently retrieve a memento, maybe we should throw an exception during its creation.", "url": "https://github.com/fcrepo/fcrepo/pull/1644#discussion_r391969346", "createdAt": "2020-03-13T00:16:16Z", "author": {"login": "awoods"}, "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/models/FedoraResourceImplTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.fcrepo.kernel.impl.models;\n+\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.models.ResourceFactory;\n+import org.fcrepo.kernel.api.models.TimeMap;\n+import org.fcrepo.kernel.api.services.VersionService;\n+import org.fcrepo.persistence.api.PersistentStorageSessionManager;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.time.Instant;\n+import java.util.ArrayList;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.Silent.class)\n+public class FedoraResourceImplTest {\n+\n+    @Mock\n+    private TimeMap timeMap;\n+\n+    @Mock\n+    private PersistentStorageSessionManager sessionManager;\n+\n+    @Mock\n+    private ResourceFactory resourceFactory;\n+\n+    private static final String ID = \"info:fedora/test\";\n+\n+    @Test\n+    public void findMementoWhenOnlyOneAndBeforeSearch() {\n+        final var resource = resourceWithMockedTimeMap(ID);\n+        expectMementos(\"20200309172117\");\n+        final var match = resource.findMementoByDatetime(instant(\"20200309172118\"));\n+        assertEquals(\"0\", match.getId());\n+    }\n+\n+    @Test\n+    public void findClosestMementoWhenMultiple() {\n+        final var resource = resourceWithMockedTimeMap(ID);\n+        expectMementos(\"20200309172117\", \"20200309172118\", \"20200309172119\");\n+        final var match = resource.findMementoByDatetime(instant(\"20200309172118\"));\n+        assertEquals(\"1\", match.getId());\n+    }\n+\n+    @Test\n+    public void findClosestMementoWhenMultipleNoneExact() {\n+        final var resource = resourceWithMockedTimeMap(ID);\n+        expectMementos(\"20200309172116\", \"20200309172117\", \"20200309172119\");\n+        final var match = resource.findMementoByDatetime(instant(\"20200309172118\"));\n+        assertEquals(\"1\", match.getId());\n+    }\n+\n+    @Test\n+    public void findClosestMementoMultipleSameSecond() {\n+        final var resource = resourceWithMockedTimeMap(ID);\n+        expectMementos(\"20200309172117\", \"20200309172117\", \"20200309172117\");\n+        final var match = resource.findMementoByDatetime(instant(\"20200309172118\"));\n+        assertEquals(\"2\", match.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk0NDUyOA=="}, "originalCommit": {"oid": "4a7dbc66080d7abec1a5e46f2245cb01f25859bd"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQzNzEyOnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/ContentExposingResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxMzo0M1rOF4txYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDowMDoyOFrOF4vuRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNDQ5OQ==", "bodyText": "Note can probably go if the check for Mementos is.", "url": "https://github.com/fcrepo/fcrepo/pull/1644#discussion_r395014499", "createdAt": "2020-03-19T13:13:43Z", "author": {"login": "whikloj"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/ContentExposingResource.java", "diffHunk": "@@ -291,7 +291,7 @@ private RdfStream getResourceTriples(final int limit, final FedoraResource resou\n             //streams.add(getTriples(resource, MINIMAL));\n             // Mementos already have the server managed properties in the PROPERTIES category\n             // since mementos are immutable and these triples are no longer managed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3add4633976e0a7c6a81d6580012b5b674d2133"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0NjQ2OQ==", "bodyText": "Done", "url": "https://github.com/fcrepo/fcrepo/pull/1644#discussion_r395046469", "createdAt": "2020-03-19T14:00:28Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/ContentExposingResource.java", "diffHunk": "@@ -291,7 +291,7 @@ private RdfStream getResourceTriples(final int limit, final FedoraResource resou\n             //streams.add(getTriples(resource, MINIMAL));\n             // Mementos already have the server managed properties in the PROPERTIES category\n             // since mementos are immutable and these triples are no longer managed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNDQ5OQ=="}, "originalCommit": {"oid": "f3add4633976e0a7c6a81d6580012b5b674d2133"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQzNzg1OnYy", "diffSide": "RIGHT", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/ContentExposingResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxMzo1N1rOF4tx6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDowMDozNlrOF4vuoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNDYzMg==", "bodyText": "Note can go.", "url": "https://github.com/fcrepo/fcrepo/pull/1644#discussion_r395014632", "createdAt": "2020-03-19T13:13:57Z", "author": {"login": "whikloj"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/ContentExposingResource.java", "diffHunk": "@@ -302,7 +302,7 @@ private RdfStream getResourceTriples(final int limit, final FedoraResource resou\n             // Additional server-managed triples about this resource\n             // Mementos already have the server managed properties in the PROPERTIES category\n             // since mementos are immutable and these triples are no longer managed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3add4633976e0a7c6a81d6580012b5b674d2133"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0NjU2MQ==", "bodyText": "Done", "url": "https://github.com/fcrepo/fcrepo/pull/1644#discussion_r395046561", "createdAt": "2020-03-19T14:00:36Z", "author": {"login": "pwinckles"}, "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/ContentExposingResource.java", "diffHunk": "@@ -302,7 +302,7 @@ private RdfStream getResourceTriples(final int limit, final FedoraResource resou\n             // Additional server-managed triples about this resource\n             // Mementos already have the server managed properties in the PROPERTIES category\n             // since mementos are immutable and these triples are no longer managed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNDYzMg=="}, "originalCommit": {"oid": "f3add4633976e0a7c6a81d6580012b5b674d2133"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1961, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}