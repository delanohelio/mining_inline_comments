{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMDgwMTEz", "number": 4043, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzoyNTo0MlrOEmMKmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMToyMTowOFrOEmROWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NDgwNjY1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzoyNTo0MlrOHWE0mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzowNDo0MlrOHWsw4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkwOTcyMw==", "bodyText": "Should include at least the e2 message here, for additional context", "url": "https://github.com/all-of-us/workbench/pull/4043#discussion_r492909723", "createdAt": "2020-09-22T17:25:42Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -243,43 +243,58 @@ private DbUser initializeUserIfNeeded() {\n     profileService.cleanProfile(profile);\n     profileService.validateNewProfile(profile);\n \n+    String gSuiteUsername =\n+        profile.getUsername()\n+            + \"@\"\n+            + workbenchConfigProvider.get().googleDirectoryService.gSuiteDomain;\n+\n     com.google.api.services.directory.model.User googleUser =\n         directoryService.createUser(\n             profile.getGivenName(),\n             profile.getFamilyName(),\n-            profile.getUsername()\n-                + \"@\"\n-                + workbenchConfigProvider.get().googleDirectoryService.gSuiteDomain,\n+            gSuiteUsername,\n             profile.getContactEmail());\n \n-    // Create a user that has no data access or FC user associated.\n-    // We create this account before they sign in so we can keep track of which users we have\n-    // created Google accounts for. This can be used subsequently to delete orphaned accounts.\n-\n-    // We store this information in our own database so that:\n-    // 1) we can support bring-your-own account in future (when we won't be using directory service)\n-    // 2) we can easily generate lists of researchers for the storefront, without joining to Google\n-\n-    // It's possible for the profile information to become out of sync with the user's Google\n-    // profile, since it can be edited in our UI as well as the Google UI,  and we're fine with\n-    // that; the expectation is their profile in AofU will be managed in AofU, not in Google.\n-\n-    DbUser user =\n-        userService.createUser(\n-            profile.getGivenName(),\n-            profile.getFamilyName(),\n-            googleUser.getPrimaryEmail(),\n-            profile.getContactEmail(),\n-            profile.getCurrentPosition(),\n-            profile.getOrganization(),\n-            profile.getAreaOfResearch(),\n-            profile.getProfessionalUrl(),\n-            profile.getDegrees(),\n-            FROM_CLIENT_ADDRESS.apply(profile.getAddress()),\n-            demographicSurveyMapper.demographicSurveyToDbDemographicSurvey(\n-                profile.getDemographicSurvey()),\n-            verifiedInstitutionalAffiliationMapper.modelToDbWithoutUser(\n-                profile.getVerifiedInstitutionalAffiliation(), institutionService));\n+    DbUser user;\n+    try {\n+      user =\n+          userService.createUser(\n+              profile.getGivenName(),\n+              profile.getFamilyName(),\n+              googleUser.getPrimaryEmail(),\n+              profile.getContactEmail(),\n+              profile.getCurrentPosition(),\n+              profile.getOrganization(),\n+              profile.getAreaOfResearch(),\n+              profile.getProfessionalUrl(),\n+              profile.getDegrees(),\n+              FROM_CLIENT_ADDRESS.apply(profile.getAddress()),\n+              demographicSurveyMapper.demographicSurveyToDbDemographicSurvey(\n+                  profile.getDemographicSurvey()),\n+              verifiedInstitutionalAffiliationMapper.modelToDbWithoutUser(\n+                  profile.getVerifiedInstitutionalAffiliation(), institutionService));\n+    } catch (Exception e) {\n+      // If the creation of a User row in the RW database fails, we want to attempt to remove the\n+      // G Suite account to avoid having an orphaned account with no record in our database.\n+      log.severe(\n+          String.format(\n+              \"An error occurred when creating DbUser for %s. Attempting to delete \"\n+                  + \"orphaned G Suite account\",\n+              gSuiteUsername));\n+      try {\n+        directoryService.deleteUser(gSuiteUsername);\n+        log.severe(\"Orphaned G Suite account has been deleted.\");\n+      } catch (Exception e2) {\n+        log.severe(\n+            String.format(\n+                \"Orphaned G Suite account %s could not be deleted. \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86ec38d07860fe48f920f8291283c3df0fd6fb3d"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5NDQ3NA==", "bodyText": "Good idea \u2013 done.", "url": "https://github.com/all-of-us/workbench/pull/4043#discussion_r492994474", "createdAt": "2020-09-22T19:52:23Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -243,43 +243,58 @@ private DbUser initializeUserIfNeeded() {\n     profileService.cleanProfile(profile);\n     profileService.validateNewProfile(profile);\n \n+    String gSuiteUsername =\n+        profile.getUsername()\n+            + \"@\"\n+            + workbenchConfigProvider.get().googleDirectoryService.gSuiteDomain;\n+\n     com.google.api.services.directory.model.User googleUser =\n         directoryService.createUser(\n             profile.getGivenName(),\n             profile.getFamilyName(),\n-            profile.getUsername()\n-                + \"@\"\n-                + workbenchConfigProvider.get().googleDirectoryService.gSuiteDomain,\n+            gSuiteUsername,\n             profile.getContactEmail());\n \n-    // Create a user that has no data access or FC user associated.\n-    // We create this account before they sign in so we can keep track of which users we have\n-    // created Google accounts for. This can be used subsequently to delete orphaned accounts.\n-\n-    // We store this information in our own database so that:\n-    // 1) we can support bring-your-own account in future (when we won't be using directory service)\n-    // 2) we can easily generate lists of researchers for the storefront, without joining to Google\n-\n-    // It's possible for the profile information to become out of sync with the user's Google\n-    // profile, since it can be edited in our UI as well as the Google UI,  and we're fine with\n-    // that; the expectation is their profile in AofU will be managed in AofU, not in Google.\n-\n-    DbUser user =\n-        userService.createUser(\n-            profile.getGivenName(),\n-            profile.getFamilyName(),\n-            googleUser.getPrimaryEmail(),\n-            profile.getContactEmail(),\n-            profile.getCurrentPosition(),\n-            profile.getOrganization(),\n-            profile.getAreaOfResearch(),\n-            profile.getProfessionalUrl(),\n-            profile.getDegrees(),\n-            FROM_CLIENT_ADDRESS.apply(profile.getAddress()),\n-            demographicSurveyMapper.demographicSurveyToDbDemographicSurvey(\n-                profile.getDemographicSurvey()),\n-            verifiedInstitutionalAffiliationMapper.modelToDbWithoutUser(\n-                profile.getVerifiedInstitutionalAffiliation(), institutionService));\n+    DbUser user;\n+    try {\n+      user =\n+          userService.createUser(\n+              profile.getGivenName(),\n+              profile.getFamilyName(),\n+              googleUser.getPrimaryEmail(),\n+              profile.getContactEmail(),\n+              profile.getCurrentPosition(),\n+              profile.getOrganization(),\n+              profile.getAreaOfResearch(),\n+              profile.getProfessionalUrl(),\n+              profile.getDegrees(),\n+              FROM_CLIENT_ADDRESS.apply(profile.getAddress()),\n+              demographicSurveyMapper.demographicSurveyToDbDemographicSurvey(\n+                  profile.getDemographicSurvey()),\n+              verifiedInstitutionalAffiliationMapper.modelToDbWithoutUser(\n+                  profile.getVerifiedInstitutionalAffiliation(), institutionService));\n+    } catch (Exception e) {\n+      // If the creation of a User row in the RW database fails, we want to attempt to remove the\n+      // G Suite account to avoid having an orphaned account with no record in our database.\n+      log.severe(\n+          String.format(\n+              \"An error occurred when creating DbUser for %s. Attempting to delete \"\n+                  + \"orphaned G Suite account\",\n+              gSuiteUsername));\n+      try {\n+        directoryService.deleteUser(gSuiteUsername);\n+        log.severe(\"Orphaned G Suite account has been deleted.\");\n+      } catch (Exception e2) {\n+        log.severe(\n+            String.format(\n+                \"Orphaned G Suite account %s could not be deleted. \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkwOTcyMw=="}, "originalCommit": {"oid": "86ec38d07860fe48f920f8291283c3df0fd6fb3d"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzODU3MA==", "bodyText": "This is the first time I've seen a nested try/catch. I'd probably factor out a deleteOrphanedUser() method. This could be handy for your unit tests as well (using @VisibleForTesting, so you could verify its contract.\nOne thing you could do is have an initialization_status column that's set to one state after creating the row and another when creating the GSuite user. Then just have a cron harvest the ones that are over 24 hours old with no gsuite account.\nAlso, is there a general pattern for chaining methods like this into a transaction? I was interested in that for BigQuery error handling logic.", "url": "https://github.com/all-of-us/workbench/pull/4043#discussion_r493038570", "createdAt": "2020-09-22T21:16:16Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -243,43 +243,58 @@ private DbUser initializeUserIfNeeded() {\n     profileService.cleanProfile(profile);\n     profileService.validateNewProfile(profile);\n \n+    String gSuiteUsername =\n+        profile.getUsername()\n+            + \"@\"\n+            + workbenchConfigProvider.get().googleDirectoryService.gSuiteDomain;\n+\n     com.google.api.services.directory.model.User googleUser =\n         directoryService.createUser(\n             profile.getGivenName(),\n             profile.getFamilyName(),\n-            profile.getUsername()\n-                + \"@\"\n-                + workbenchConfigProvider.get().googleDirectoryService.gSuiteDomain,\n+            gSuiteUsername,\n             profile.getContactEmail());\n \n-    // Create a user that has no data access or FC user associated.\n-    // We create this account before they sign in so we can keep track of which users we have\n-    // created Google accounts for. This can be used subsequently to delete orphaned accounts.\n-\n-    // We store this information in our own database so that:\n-    // 1) we can support bring-your-own account in future (when we won't be using directory service)\n-    // 2) we can easily generate lists of researchers for the storefront, without joining to Google\n-\n-    // It's possible for the profile information to become out of sync with the user's Google\n-    // profile, since it can be edited in our UI as well as the Google UI,  and we're fine with\n-    // that; the expectation is their profile in AofU will be managed in AofU, not in Google.\n-\n-    DbUser user =\n-        userService.createUser(\n-            profile.getGivenName(),\n-            profile.getFamilyName(),\n-            googleUser.getPrimaryEmail(),\n-            profile.getContactEmail(),\n-            profile.getCurrentPosition(),\n-            profile.getOrganization(),\n-            profile.getAreaOfResearch(),\n-            profile.getProfessionalUrl(),\n-            profile.getDegrees(),\n-            FROM_CLIENT_ADDRESS.apply(profile.getAddress()),\n-            demographicSurveyMapper.demographicSurveyToDbDemographicSurvey(\n-                profile.getDemographicSurvey()),\n-            verifiedInstitutionalAffiliationMapper.modelToDbWithoutUser(\n-                profile.getVerifiedInstitutionalAffiliation(), institutionService));\n+    DbUser user;\n+    try {\n+      user =\n+          userService.createUser(\n+              profile.getGivenName(),\n+              profile.getFamilyName(),\n+              googleUser.getPrimaryEmail(),\n+              profile.getContactEmail(),\n+              profile.getCurrentPosition(),\n+              profile.getOrganization(),\n+              profile.getAreaOfResearch(),\n+              profile.getProfessionalUrl(),\n+              profile.getDegrees(),\n+              FROM_CLIENT_ADDRESS.apply(profile.getAddress()),\n+              demographicSurveyMapper.demographicSurveyToDbDemographicSurvey(\n+                  profile.getDemographicSurvey()),\n+              verifiedInstitutionalAffiliationMapper.modelToDbWithoutUser(\n+                  profile.getVerifiedInstitutionalAffiliation(), institutionService));\n+    } catch (Exception e) {\n+      // If the creation of a User row in the RW database fails, we want to attempt to remove the\n+      // G Suite account to avoid having an orphaned account with no record in our database.\n+      log.severe(\n+          String.format(\n+              \"An error occurred when creating DbUser for %s. Attempting to delete \"\n+                  + \"orphaned G Suite account\",\n+              gSuiteUsername));\n+      try {\n+        directoryService.deleteUser(gSuiteUsername);\n+        log.severe(\"Orphaned G Suite account has been deleted.\");\n+      } catch (Exception e2) {\n+        log.severe(\n+            String.format(\n+                \"Orphaned G Suite account %s could not be deleted. \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkwOTcyMw=="}, "originalCommit": {"oid": "86ec38d07860fe48f920f8291283c3df0fd6fb3d"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU2NDEzMQ==", "bodyText": "Factoring out wouldn't hurt, but for one line of code I don't think it helps too much either. That would also make it more awkward to return the original exception (which I believe is the behavior we want, so that the client is guaranteed to receive the originating error message rather than a misleading error message about a potentially failed G Suite cleanup attempt).\nFrankly I'm okay with this section being a little bit awkward, since we're entering into the realm of extra-paranoid programming to catch uncommon-but-important errors that we've seen in production. My hope is that liberal logging provides some production visibility if & when this happens again, and liberal commenting will provide hints to future devs.\nMore generally, TDR and the rest of Terra have aligned on Dan Dietterich's home-built Stairway library which implements the Saga pattern for distributed transactions. It definitely adds some overhead to implementing simple flows, but it provides the necessary state management and hooks to reliably roll back at any point in a long-running operation. Another equivalent library out there is Cadence, open-sourced by Uber.", "url": "https://github.com/all-of-us/workbench/pull/4043#discussion_r493564131", "createdAt": "2020-09-23T13:04:42Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -243,43 +243,58 @@ private DbUser initializeUserIfNeeded() {\n     profileService.cleanProfile(profile);\n     profileService.validateNewProfile(profile);\n \n+    String gSuiteUsername =\n+        profile.getUsername()\n+            + \"@\"\n+            + workbenchConfigProvider.get().googleDirectoryService.gSuiteDomain;\n+\n     com.google.api.services.directory.model.User googleUser =\n         directoryService.createUser(\n             profile.getGivenName(),\n             profile.getFamilyName(),\n-            profile.getUsername()\n-                + \"@\"\n-                + workbenchConfigProvider.get().googleDirectoryService.gSuiteDomain,\n+            gSuiteUsername,\n             profile.getContactEmail());\n \n-    // Create a user that has no data access or FC user associated.\n-    // We create this account before they sign in so we can keep track of which users we have\n-    // created Google accounts for. This can be used subsequently to delete orphaned accounts.\n-\n-    // We store this information in our own database so that:\n-    // 1) we can support bring-your-own account in future (when we won't be using directory service)\n-    // 2) we can easily generate lists of researchers for the storefront, without joining to Google\n-\n-    // It's possible for the profile information to become out of sync with the user's Google\n-    // profile, since it can be edited in our UI as well as the Google UI,  and we're fine with\n-    // that; the expectation is their profile in AofU will be managed in AofU, not in Google.\n-\n-    DbUser user =\n-        userService.createUser(\n-            profile.getGivenName(),\n-            profile.getFamilyName(),\n-            googleUser.getPrimaryEmail(),\n-            profile.getContactEmail(),\n-            profile.getCurrentPosition(),\n-            profile.getOrganization(),\n-            profile.getAreaOfResearch(),\n-            profile.getProfessionalUrl(),\n-            profile.getDegrees(),\n-            FROM_CLIENT_ADDRESS.apply(profile.getAddress()),\n-            demographicSurveyMapper.demographicSurveyToDbDemographicSurvey(\n-                profile.getDemographicSurvey()),\n-            verifiedInstitutionalAffiliationMapper.modelToDbWithoutUser(\n-                profile.getVerifiedInstitutionalAffiliation(), institutionService));\n+    DbUser user;\n+    try {\n+      user =\n+          userService.createUser(\n+              profile.getGivenName(),\n+              profile.getFamilyName(),\n+              googleUser.getPrimaryEmail(),\n+              profile.getContactEmail(),\n+              profile.getCurrentPosition(),\n+              profile.getOrganization(),\n+              profile.getAreaOfResearch(),\n+              profile.getProfessionalUrl(),\n+              profile.getDegrees(),\n+              FROM_CLIENT_ADDRESS.apply(profile.getAddress()),\n+              demographicSurveyMapper.demographicSurveyToDbDemographicSurvey(\n+                  profile.getDemographicSurvey()),\n+              verifiedInstitutionalAffiliationMapper.modelToDbWithoutUser(\n+                  profile.getVerifiedInstitutionalAffiliation(), institutionService));\n+    } catch (Exception e) {\n+      // If the creation of a User row in the RW database fails, we want to attempt to remove the\n+      // G Suite account to avoid having an orphaned account with no record in our database.\n+      log.severe(\n+          String.format(\n+              \"An error occurred when creating DbUser for %s. Attempting to delete \"\n+                  + \"orphaned G Suite account\",\n+              gSuiteUsername));\n+      try {\n+        directoryService.deleteUser(gSuiteUsername);\n+        log.severe(\"Orphaned G Suite account has been deleted.\");\n+      } catch (Exception e2) {\n+        log.severe(\n+            String.format(\n+                \"Orphaned G Suite account %s could not be deleted. \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkwOTcyMw=="}, "originalCommit": {"oid": "86ec38d07860fe48f920f8291283c3df0fd6fb3d"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTYyOTgxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbAddress.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMToxOToyNVrOHWMxdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzowOToxMVrOHW4W4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzOTk5MQ==", "bodyText": "I'd really only want to see column lengths based on actual requirements (though 10 sounds like a good number). Could you use or create a test class that mocks UserService and use doThrow()? I'd want to do that with DirectoryService as well.\nAlso, we can define fake static entity classes in test classes or configs if this is really for test cases.\nAlso EXPLAIN user will give a good SQL definition in a table.", "url": "https://github.com/all-of-us/workbench/pull/4043#discussion_r493039991", "createdAt": "2020-09-22T21:19:25Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbAddress.java", "diffHunk": "@@ -52,7 +52,12 @@ public void setStreetAddress2(String streetAddress2) {\n     this.streetAddress2 = streetAddress2;\n   }\n \n-  @Column(name = \"zip_code\")\n+  // Most @Column annotations in our codebase don't have a length specification. This is included\n+  // on the zip_code field to allow test cases (where an in-memory H2 database is used instead of\n+  // MySQL) to trigger an exception when a user attempts to save a DbUser row with too-large field\n+  // payloads. See ProfileControllerTest for the test case, and the Liquibase changelogs for the\n+  // SQL definition of this field.\n+  @Column(name = \"zip_code\", length = 10)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6cc2e3f4ac13a5d41c74a2a2bcf50368685adb2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU1NjU2MA==", "bodyText": "10 is the actual SQL column length for zip_code \u2013\u00a0see comments in https://precisionmedicineinitiative.atlassian.net/browse/RW-5624 for my notes. This annotation won't change any production behavior, it just makes the in-memory database used for tests as stringent as SQL for this single field.\nThis was my compromise to get some sort of unit-level test replicating the behavior that we've seen in production. I don't love it, and spent quite some time trying to get a partial mock working, but eventually backed out and went with this approach.", "url": "https://github.com/all-of-us/workbench/pull/4043#discussion_r493556560", "createdAt": "2020-09-23T12:56:49Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbAddress.java", "diffHunk": "@@ -52,7 +52,12 @@ public void setStreetAddress2(String streetAddress2) {\n     this.streetAddress2 = streetAddress2;\n   }\n \n-  @Column(name = \"zip_code\")\n+  // Most @Column annotations in our codebase don't have a length specification. This is included\n+  // on the zip_code field to allow test cases (where an in-memory H2 database is used instead of\n+  // MySQL) to trigger an exception when a user attempts to save a DbUser row with too-large field\n+  // payloads. See ProfileControllerTest for the test case, and the Liquibase changelogs for the\n+  // SQL definition of this field.\n+  @Column(name = \"zip_code\", length = 10)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzOTk5MQ=="}, "originalCommit": {"oid": "a6cc2e3f4ac13a5d41c74a2a2bcf50368685adb2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU3NzUxOA==", "bodyText": "re: using or creating a test class that mocks UserService and uses doThrow... that's what I attempted to do by using a partial mock / spy within ProfileControllerTest, but (1) almost all existing controller tests rely on actual UserService behavior and (2) I couldn't get @SpyBean to work with our current version of Spring Boot (c.f. my notes in #workbrench-techdesign).\nThe right long-term solution here would be to test only controller-level logic in the controller test. That would probably require thinking hard about each test case, and bumping lots of tested logic down into UserServiceTest rather than ProfileControllerTest.\nOne short-term approach could have been to create a separate file for additional controller-level tests, but that complicates things by removing the strong pattern we have for one test file per class. Instead, I found a slightly hackier but simpler way of reproducing the errors related to the bug I picked up while oncall. \ud83e\udd37", "url": "https://github.com/all-of-us/workbench/pull/4043#discussion_r493577518", "createdAt": "2020-09-23T13:18:35Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbAddress.java", "diffHunk": "@@ -52,7 +52,12 @@ public void setStreetAddress2(String streetAddress2) {\n     this.streetAddress2 = streetAddress2;\n   }\n \n-  @Column(name = \"zip_code\")\n+  // Most @Column annotations in our codebase don't have a length specification. This is included\n+  // on the zip_code field to allow test cases (where an in-memory H2 database is used instead of\n+  // MySQL) to trigger an exception when a user attempts to save a DbUser row with too-large field\n+  // payloads. See ProfileControllerTest for the test case, and the Liquibase changelogs for the\n+  // SQL definition of this field.\n+  @Column(name = \"zip_code\", length = 10)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzOTk5MQ=="}, "originalCommit": {"oid": "a6cc2e3f4ac13a5d41c74a2a2bcf50368685adb2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1NDA4MQ==", "bodyText": "I believe @jmthibault79 and I have already started moving some things downward into the service tests.\nI'm generally less concerned by having additional test classes (especially if each one is simpler) than having to work with spies, but that's mainly because it's hard to reason about the internal state of a partially mocked object, especially if it's a complex class that gets a lot of edits. Having separate \"themed\" profile controller tests could help find the right places to break the controller down.", "url": "https://github.com/all-of-us/workbench/pull/4043#discussion_r493754081", "createdAt": "2020-09-23T17:09:11Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbAddress.java", "diffHunk": "@@ -52,7 +52,12 @@ public void setStreetAddress2(String streetAddress2) {\n     this.streetAddress2 = streetAddress2;\n   }\n \n-  @Column(name = \"zip_code\")\n+  // Most @Column annotations in our codebase don't have a length specification. This is included\n+  // on the zip_code field to allow test cases (where an in-memory H2 database is used instead of\n+  // MySQL) to trigger an exception when a user attempts to save a DbUser row with too-large field\n+  // payloads. See ProfileControllerTest for the test case, and the Liquibase changelogs for the\n+  // SQL definition of this field.\n+  @Column(name = \"zip_code\", length = 10)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzOTk5MQ=="}, "originalCommit": {"oid": "a6cc2e3f4ac13a5d41c74a2a2bcf50368685adb2"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTYzNTQ3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMToyMTowOFrOHWM1Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMToyMTowOFrOHWM1Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0MDkwMw==", "bodyText": "Maybe name the exception directoryServiceException and rename e to userServiceException for clarity.", "url": "https://github.com/all-of-us/workbench/pull/4043#discussion_r493040903", "createdAt": "2020-09-22T21:21:08Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -243,43 +243,59 @@ private DbUser initializeUserIfNeeded() {\n     profileService.cleanProfile(profile);\n     profileService.validateNewProfile(profile);\n \n+    String gSuiteUsername =\n+        profile.getUsername()\n+            + \"@\"\n+            + workbenchConfigProvider.get().googleDirectoryService.gSuiteDomain;\n+\n     com.google.api.services.directory.model.User googleUser =\n         directoryService.createUser(\n             profile.getGivenName(),\n             profile.getFamilyName(),\n-            profile.getUsername()\n-                + \"@\"\n-                + workbenchConfigProvider.get().googleDirectoryService.gSuiteDomain,\n+            gSuiteUsername,\n             profile.getContactEmail());\n \n-    // Create a user that has no data access or FC user associated.\n-    // We create this account before they sign in so we can keep track of which users we have\n-    // created Google accounts for. This can be used subsequently to delete orphaned accounts.\n-\n-    // We store this information in our own database so that:\n-    // 1) we can support bring-your-own account in future (when we won't be using directory service)\n-    // 2) we can easily generate lists of researchers for the storefront, without joining to Google\n-\n-    // It's possible for the profile information to become out of sync with the user's Google\n-    // profile, since it can be edited in our UI as well as the Google UI,  and we're fine with\n-    // that; the expectation is their profile in AofU will be managed in AofU, not in Google.\n-\n-    DbUser user =\n-        userService.createUser(\n-            profile.getGivenName(),\n-            profile.getFamilyName(),\n-            googleUser.getPrimaryEmail(),\n-            profile.getContactEmail(),\n-            profile.getCurrentPosition(),\n-            profile.getOrganization(),\n-            profile.getAreaOfResearch(),\n-            profile.getProfessionalUrl(),\n-            profile.getDegrees(),\n-            FROM_CLIENT_ADDRESS.apply(profile.getAddress()),\n-            demographicSurveyMapper.demographicSurveyToDbDemographicSurvey(\n-                profile.getDemographicSurvey()),\n-            verifiedInstitutionalAffiliationMapper.modelToDbWithoutUser(\n-                profile.getVerifiedInstitutionalAffiliation(), institutionService));\n+    DbUser user;\n+    try {\n+      user =\n+          userService.createUser(\n+              profile.getGivenName(),\n+              profile.getFamilyName(),\n+              googleUser.getPrimaryEmail(),\n+              profile.getContactEmail(),\n+              profile.getCurrentPosition(),\n+              profile.getOrganization(),\n+              profile.getAreaOfResearch(),\n+              profile.getProfessionalUrl(),\n+              profile.getDegrees(),\n+              FROM_CLIENT_ADDRESS.apply(profile.getAddress()),\n+              demographicSurveyMapper.demographicSurveyToDbDemographicSurvey(\n+                  profile.getDemographicSurvey()),\n+              verifiedInstitutionalAffiliationMapper.modelToDbWithoutUser(\n+                  profile.getVerifiedInstitutionalAffiliation(), institutionService));\n+    } catch (Exception e) {\n+      // If the creation of a User row in the RW database fails, we want to attempt to remove the\n+      // G Suite account to avoid having an orphaned account with no record in our database.\n+      log.severe(\n+          String.format(\n+              \"An error occurred when creating DbUser for %s. Attempting to delete \"\n+                  + \"orphaned G Suite account\",\n+              gSuiteUsername));\n+      try {\n+        directoryService.deleteUser(gSuiteUsername);\n+        log.severe(\"Orphaned G Suite account has been deleted.\");\n+      } catch (Exception e2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6cc2e3f4ac13a5d41c74a2a2bcf50368685adb2"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3939, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}