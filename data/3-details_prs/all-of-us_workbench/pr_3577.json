{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MDEzNTk1", "number": 3577, "title": "[noTicket][risk=low]Send Workspace Creator information to RDR", "bodyText": "Send workspace creator information: id and name to rdr as Researcher hub need to display workspace owner information along with workspace details.\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n I have run the E2E tests on ths change against my local UI + API server with yarn test-local\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-05-12T22:46:47Z", "url": "https://github.com/all-of-us/workbench/pull/3577", "merged": true, "mergeCommit": {"oid": "487623084cfd85bc81cefb5cee68d05907a58654"}, "closed": true, "closedAt": "2020-05-15T13:08:10Z", "author": {"login": "NehaBroad"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgsAVlgH2gAyNDE3MDEzNTk1OjJjOTg5M2I0MDE1YTE2YzQwNmY0NTgzOWM2NjdjMTg2NjI0NzMwMjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchTJbwgH2gAyNDE3MDEzNTk1OjFiM2NmMmFjYjc2MjlhNTExNmQ0MDE4NTE0N2JiYjY2NDliMTkxYmY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2c9893b4015a16c406f45839c667c18662473026", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/2c9893b4015a16c406f45839c667c18662473026", "committedDate": "2020-05-12T22:27:51Z", "message": "Send Workspace Creator information to RDR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDc2MzQ0", "url": "https://github.com/all-of-us/workbench/pull/3577#pullrequestreview-410476344", "createdAt": "2020-05-12T22:49:07Z", "commit": {"oid": "2c9893b4015a16c406f45839c667c18662473026"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjo0OTowN1rOGUboiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjo1NDoxM1rOGUbvpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3NzQ1MQ==", "bodyText": "Please make a new MapStruct mapper for this. There's a guide and tutorial in the top level README.", "url": "https://github.com/all-of-us/workbench/pull/3577#discussion_r424077451", "createdAt": "2020-05-12T22:49:07Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/rdr/RdrExportServiceImpl.java", "diffHunk": "@@ -447,6 +448,22 @@ public void updateDbRdrExport(RdrEntity entity, List<Long> idList) {\n     rdrExportDao.save(exportList);\n   }\n \n+  /**\n+   * Creates RdrWorkspaceCreator object that contains workspace creator information like id, given\n+   * name and lastName\n+   *\n+   * @param creatorUser\n+   * @return RdrWorkspaceCreator object\n+   */\n+  RdrWorkspaceCreator toRdrWorkspaceCreator(DbUser creatorUser) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c9893b4015a16c406f45839c667c18662473026"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3ODE5OQ==", "bodyText": "nit: Usually I'd use @Mock for mocking value objects (and @MockBean for beans). There may be a reason not to do so here.", "url": "https://github.com/all-of-us/workbench/pull/3577#discussion_r424078199", "createdAt": "2020-05-12T22:51:09Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/rdr/RdrExportServiceImplTest.java", "diffHunk": "@@ -71,7 +72,7 @@\n \n   private DbUser dbUserWithEmail;\n   private DbUser dbUserWithoutEmail;\n-  private DbWorkspace mockWorkspace, mockDeletedWorkspace;\n+  private DbWorkspace mockWorkspace, mockDeletedWorkspace, mockCreatorWorkspace;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c9893b4015a16c406f45839c667c18662473026"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3ODQ0MA==", "bodyText": "I would have expected the creator to be a field passed in to buildDbWorkspace.", "url": "https://github.com/all-of-us/workbench/pull/3577#discussion_r424078440", "createdAt": "2020-05-12T22:51:51Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/rdr/RdrExportServiceImplTest.java", "diffHunk": "@@ -117,9 +118,14 @@ public void setUp() {\n \n     mockDeletedWorkspace =\n         buildDbWorkspace(2, \"workspace_del\", \"workspaceNs\", WorkspaceActiveStatus.DELETED);\n-\n+    mockDeletedWorkspace.setCreator(dbUserWithEmail);\n     when(mockWorkspaceDao.findDbWorkspaceByWorkspaceId(2)).thenReturn(mockDeletedWorkspace);\n \n+    mockCreatorWorkspace =\n+        buildDbWorkspace(3, \"mock_workspace_name\", \"workspaceNS\", WorkspaceActiveStatus.ACTIVE);\n+    mockCreatorWorkspace.setCreator(dbUserWithoutEmail);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c9893b4015a16c406f45839c667c18662473026"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3ODY0MA==", "bodyText": "workspaceIds plural.", "url": "https://github.com/all-of-us/workbench/pull/3577#discussion_r424078640", "createdAt": "2020-05-12T22:52:27Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/rdr/RdrExportServiceImplTest.java", "diffHunk": "@@ -215,6 +221,25 @@ public void exportWorkspace_FocusOnUnderservedPopulation() throws ApiException {\n     verify(mockRdrApi).exportWorkspaces(Arrays.asList(rdrWorkspace));\n   }\n \n+  @Test\n+  public void exportWorkspace_CreatorInformation() throws ApiException {\n+    List<Long> workspaceID = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c9893b4015a16c406f45839c667c18662473026"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3ODgzMQ==", "bodyText": "Is there anything else you can verify?", "url": "https://github.com/all-of-us/workbench/pull/3577#discussion_r424078831", "createdAt": "2020-05-12T22:52:55Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/rdr/RdrExportServiceImplTest.java", "diffHunk": "@@ -215,6 +221,25 @@ public void exportWorkspace_FocusOnUnderservedPopulation() throws ApiException {\n     verify(mockRdrApi).exportWorkspaces(Arrays.asList(rdrWorkspace));\n   }\n \n+  @Test\n+  public void exportWorkspace_CreatorInformation() throws ApiException {\n+    List<Long> workspaceID = new ArrayList<>();\n+    workspaceID.add(1l);\n+    rdrExportService.exportWorkspaces(workspaceID);\n+    verify(rdrExportDao, times(1)).save(anyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c9893b4015a16c406f45839c667c18662473026"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3ODk1OQ==", "bodyText": "If you're using a real DAO, then you should be able to fetch the saved object and compare fields.", "url": "https://github.com/all-of-us/workbench/pull/3577#discussion_r424078959", "createdAt": "2020-05-12T22:53:17Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/rdr/RdrExportServiceImplTest.java", "diffHunk": "@@ -215,6 +221,25 @@ public void exportWorkspace_FocusOnUnderservedPopulation() throws ApiException {\n     verify(mockRdrApi).exportWorkspaces(Arrays.asList(rdrWorkspace));\n   }\n \n+  @Test\n+  public void exportWorkspace_CreatorInformation() throws ApiException {\n+    List<Long> workspaceID = new ArrayList<>();\n+    workspaceID.add(1l);\n+    rdrExportService.exportWorkspaces(workspaceID);\n+    verify(rdrExportDao, times(1)).save(anyList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3ODgzMQ=="}, "originalCommit": {"oid": "2c9893b4015a16c406f45839c667c18662473026"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3OTI2OA==", "bodyText": "With fluent constructsors or builders, please break before every new parameter.", "url": "https://github.com/all-of-us/workbench/pull/3577#discussion_r424079268", "createdAt": "2020-05-12T22:54:13Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/rdr/RdrExportServiceImplTest.java", "diffHunk": "@@ -215,6 +221,25 @@ public void exportWorkspace_FocusOnUnderservedPopulation() throws ApiException {\n     verify(mockRdrApi).exportWorkspaces(Arrays.asList(rdrWorkspace));\n   }\n \n+  @Test\n+  public void exportWorkspace_CreatorInformation() throws ApiException {\n+    List<Long> workspaceID = new ArrayList<>();\n+    workspaceID.add(1l);\n+    rdrExportService.exportWorkspaces(workspaceID);\n+    verify(rdrExportDao, times(1)).save(anyList());\n+\n+    RdrWorkspace rdrWorkspace = toDefaultRdrWorkspace(mockWorkspace);\n+    verify(mockRdrApi).exportWorkspaces(Arrays.asList(rdrWorkspace));\n+\n+    workspaceID = new ArrayList<>();\n+    workspaceID.add(3l);\n+    rdrExportService.exportWorkspaces(workspaceID);\n+    rdrWorkspace = toDefaultRdrWorkspace(mockCreatorWorkspace);\n+    rdrWorkspace.setCreator(\n+        new RdrWorkspaceCreator().userId(2l).familyName(\"email\").givenName(\"icannothas\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c9893b4015a16c406f45839c667c18662473026"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7261cc47aa50eef6aa836d11e5103e4f801afd7d", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/7261cc47aa50eef6aa836d11e5103e4f801afd7d", "committedDate": "2020-05-13T20:14:53Z", "message": "Pr comments create mapper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42d3fdef53fbabb41d43c6bdbdf7f13391d79b1f", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/42d3fdef53fbabb41d43c6bdbdf7f13391d79b1f", "committedDate": "2020-05-13T20:31:45Z", "message": "Fix Test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExOTc1MTY1", "url": "https://github.com/all-of-us/workbench/pull/3577#pullrequestreview-411975165", "createdAt": "2020-05-14T16:23:04Z", "commit": {"oid": "42d3fdef53fbabb41d43c6bdbdf7f13391d79b1f"}, "state": "APPROVED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoyMzowNVrOGVkNxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjozNDo1N1rOGVkyJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2NjYyOQ==", "bodyText": "Yay! look how small it is!", "url": "https://github.com/all-of-us/workbench/pull/3577#discussion_r425266629", "createdAt": "2020-05-14T16:23:05Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/rdr/RdrExportServiceImpl.java", "diffHunk": "@@ -274,45 +272,9 @@ private RdrResearcher toRdrResearcher(DbUser dbUser) {\n   }\n \n   private RdrWorkspace toRdrWorkspace(DbWorkspace dbWorkspace) {\n-    RdrWorkspace rdrWorkspace = new RdrWorkspace();\n-    rdrWorkspace.setWorkspaceId((int) dbWorkspace.getWorkspaceId());\n-    rdrWorkspace.setName(dbWorkspace.getName());\n-\n-    rdrWorkspace.setCreationTime(dbWorkspace.getCreationTime().toLocalDateTime().atOffset(offset));\n-    rdrWorkspace.setModifiedTime(\n-        dbWorkspace.getLastModifiedTime().toLocalDateTime().atOffset(offset));\n-\n-    RdrWorkspace.StatusEnum workspaceRDRStatus =\n-        dbWorkspace.getWorkspaceActiveStatusEnum() == WorkspaceActiveStatus.ACTIVE\n-            ? RdrWorkspace.StatusEnum.ACTIVE\n-            : RdrWorkspace.StatusEnum.INACTIVE;\n-\n-    rdrWorkspace.setStatus(workspaceRDRStatus);\n+    RdrWorkspace rdrWorkspace = rdrMapper.toRdrModel(dbWorkspace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42d3fdef53fbabb41d43c6bdbdf7f13391d79b1f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2NzUxNg==", "bodyText": "This is great, but even better would be to have the fields named the same way.", "url": "https://github.com/all-of-us/workbench/pull/3577#discussion_r425267516", "createdAt": "2020-05-14T16:23:54Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/rdr/RdrMapper.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package org.pmiops.workbench.rdr;\n+\n+import java.sql.Timestamp;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.SpecificPopulationEnum;\n+import org.pmiops.workbench.model.WorkspaceActiveStatus;\n+import org.pmiops.workbench.rdr.model.RdrWorkspace;\n+import org.pmiops.workbench.rdr.model.RdrWorkspaceDemographic;\n+import org.pmiops.workbench.utils.mappers.MapStructConfig;\n+\n+@Mapper(config = MapStructConfig.class)\n+public interface RdrMapper {\n+  @Mapping(target = \"modifiedTime\", source = \"lastModifiedTime\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42d3fdef53fbabb41d43c6bdbdf7f13391d79b1f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2ODA4MQ==", "bodyText": "It's better if we can order them by source, target, and then use a string utility to alphabetize them.", "url": "https://github.com/all-of-us/workbench/pull/3577#discussion_r425268081", "createdAt": "2020-05-14T16:24:26Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/rdr/RdrMapper.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package org.pmiops.workbench.rdr;\n+\n+import java.sql.Timestamp;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.SpecificPopulationEnum;\n+import org.pmiops.workbench.model.WorkspaceActiveStatus;\n+import org.pmiops.workbench.rdr.model.RdrWorkspace;\n+import org.pmiops.workbench.rdr.model.RdrWorkspaceDemographic;\n+import org.pmiops.workbench.utils.mappers.MapStructConfig;\n+\n+@Mapper(config = MapStructConfig.class)\n+public interface RdrMapper {\n+  @Mapping(target = \"modifiedTime\", source = \"lastModifiedTime\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42d3fdef53fbabb41d43c6bdbdf7f13391d79b1f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2OTIwNg==", "bodyText": "We've already got different names for the db and model classes here, and now the RDR model is yet another mapping. This is just way more complicated than it needs to be. But the mapper sweeps it all under the rug in a really nice way.", "url": "https://github.com/all-of-us/workbench/pull/3577#discussion_r425269206", "createdAt": "2020-05-14T16:25:27Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/rdr/RdrMapper.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package org.pmiops.workbench.rdr;\n+\n+import java.sql.Timestamp;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.SpecificPopulationEnum;\n+import org.pmiops.workbench.model.WorkspaceActiveStatus;\n+import org.pmiops.workbench.rdr.model.RdrWorkspace;\n+import org.pmiops.workbench.rdr.model.RdrWorkspaceDemographic;\n+import org.pmiops.workbench.utils.mappers.MapStructConfig;\n+\n+@Mapper(config = MapStructConfig.class)\n+public interface RdrMapper {\n+  @Mapping(target = \"modifiedTime\", source = \"lastModifiedTime\")\n+  @Mapping(target = \"intendToStudy\", source = \"intendedStudy\")\n+  @Mapping(target = \"diseaseFocusedResearchName\", source = \"diseaseOfFocus\")\n+  @Mapping(target = \"ethicalLegalSocialImplications\", source = \"ethics\")\n+  @Mapping(target = \"scientificApproaches\", source = \"scientificApproach\")\n+  @Mapping(target = \"findingsFromStudy\", source = \"anticipatedFindings\")\n+  @Mapping(target = \"status\", source = \"workspaceActiveStatusEnum\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42d3fdef53fbabb41d43c6bdbdf7f13391d79b1f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2OTY2OQ==", "bodyText": "For anything you need to ignore, please put a comment indicating why it's required/safe/desired.", "url": "https://github.com/all-of-us/workbench/pull/3577#discussion_r425269669", "createdAt": "2020-05-14T16:25:54Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/rdr/RdrMapper.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package org.pmiops.workbench.rdr;\n+\n+import java.sql.Timestamp;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.SpecificPopulationEnum;\n+import org.pmiops.workbench.model.WorkspaceActiveStatus;\n+import org.pmiops.workbench.rdr.model.RdrWorkspace;\n+import org.pmiops.workbench.rdr.model.RdrWorkspaceDemographic;\n+import org.pmiops.workbench.utils.mappers.MapStructConfig;\n+\n+@Mapper(config = MapStructConfig.class)\n+public interface RdrMapper {\n+  @Mapping(target = \"modifiedTime\", source = \"lastModifiedTime\")\n+  @Mapping(target = \"intendToStudy\", source = \"intendedStudy\")\n+  @Mapping(target = \"diseaseFocusedResearchName\", source = \"diseaseOfFocus\")\n+  @Mapping(target = \"ethicalLegalSocialImplications\", source = \"ethics\")\n+  @Mapping(target = \"scientificApproaches\", source = \"scientificApproach\")\n+  @Mapping(target = \"findingsFromStudy\", source = \"anticipatedFindings\")\n+  @Mapping(target = \"status\", source = \"workspaceActiveStatusEnum\")\n+  @Mapping(target = \"workspaceUsers\", ignore = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42d3fdef53fbabb41d43c6bdbdf7f13391d79b1f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI3MjgxOQ==", "bodyText": "nit: you can get around all ternary operators if you just set all the flages to unset first, then iterate over the enums and use a mapping function, sort of like the PropertyMapper class. Probably too fancy to bother with, but it's a neat trick.\nSo it'd be like AccessToCare.setRdrFlag(rdrDemogrphic); You can just zip down the set and call the setRdrFlag() method on each one for the thing and avoid all the branching.", "url": "https://github.com/all-of-us/workbench/pull/3577#discussion_r425272819", "createdAt": "2020-05-14T16:30:07Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/rdr/RdrMapper.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package org.pmiops.workbench.rdr;\n+\n+import java.sql.Timestamp;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.SpecificPopulationEnum;\n+import org.pmiops.workbench.model.WorkspaceActiveStatus;\n+import org.pmiops.workbench.rdr.model.RdrWorkspace;\n+import org.pmiops.workbench.rdr.model.RdrWorkspaceDemographic;\n+import org.pmiops.workbench.utils.mappers.MapStructConfig;\n+\n+@Mapper(config = MapStructConfig.class)\n+public interface RdrMapper {\n+  @Mapping(target = \"modifiedTime\", source = \"lastModifiedTime\")\n+  @Mapping(target = \"intendToStudy\", source = \"intendedStudy\")\n+  @Mapping(target = \"diseaseFocusedResearchName\", source = \"diseaseOfFocus\")\n+  @Mapping(target = \"ethicalLegalSocialImplications\", source = \"ethics\")\n+  @Mapping(target = \"scientificApproaches\", source = \"scientificApproach\")\n+  @Mapping(target = \"findingsFromStudy\", source = \"anticipatedFindings\")\n+  @Mapping(target = \"status\", source = \"workspaceActiveStatusEnum\")\n+  @Mapping(target = \"workspaceUsers\", ignore = true)\n+  @Mapping(target = \"excludeFromPublicDirectory\", ignore = true)\n+  @Mapping(target = \"focusOnUnderrepresentedPopulations\", source = \"specificPopulationsEnum\")\n+  @Mapping(target = \"workspaceDemographic\", source = \"specificPopulationsEnum\")\n+  RdrWorkspace toRdrModel(DbWorkspace employeeDbEntity);\n+\n+  ZoneOffset offset = OffsetDateTime.now().getOffset();\n+\n+  default OffsetDateTime toModelOffsetTime(Timestamp dbTime) {\n+    return dbTime.toLocalDateTime().atOffset(offset);\n+  }\n+\n+  default RdrWorkspace.StatusEnum toModelStatus(WorkspaceActiveStatus workspaceActiveStatus) {\n+    return workspaceActiveStatus == WorkspaceActiveStatus.ACTIVE\n+        ? RdrWorkspace.StatusEnum.ACTIVE\n+        : RdrWorkspace.StatusEnum.INACTIVE;\n+  }\n+\n+  default boolean toModelFocusOnUnderrepresentedPopulation(\n+      Set<SpecificPopulationEnum> dbSpecificPopulationSet) {\n+    return dbSpecificPopulationSet != null && dbSpecificPopulationSet.size() > 0;\n+  }\n+\n+  default RdrWorkspaceDemographic toModelWorkspaceDemographic(\n+      Set<SpecificPopulationEnum> dbPopulationEnumSet) {\n+    RdrWorkspaceDemographic rdrDemographic = new RdrWorkspaceDemographic();\n+\n+    rdrDemographic.setAccessToCare(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42d3fdef53fbabb41d43c6bdbdf7f13391d79b1f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI3NDQ2Mw==", "bodyText": "You may want to find out when this returns null. Maybe a unit test there. In general, if you have to do a filter on non-null, there might be a constraint you could add upstream so this doesn't happen. Not always though.", "url": "https://github.com/all-of-us/workbench/pull/3577#discussion_r425274463", "createdAt": "2020-05-14T16:32:39Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/rdr/RdrMapper.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package org.pmiops.workbench.rdr;\n+\n+import java.sql.Timestamp;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.SpecificPopulationEnum;\n+import org.pmiops.workbench.model.WorkspaceActiveStatus;\n+import org.pmiops.workbench.rdr.model.RdrWorkspace;\n+import org.pmiops.workbench.rdr.model.RdrWorkspaceDemographic;\n+import org.pmiops.workbench.utils.mappers.MapStructConfig;\n+\n+@Mapper(config = MapStructConfig.class)\n+public interface RdrMapper {\n+  @Mapping(target = \"modifiedTime\", source = \"lastModifiedTime\")\n+  @Mapping(target = \"intendToStudy\", source = \"intendedStudy\")\n+  @Mapping(target = \"diseaseFocusedResearchName\", source = \"diseaseOfFocus\")\n+  @Mapping(target = \"ethicalLegalSocialImplications\", source = \"ethics\")\n+  @Mapping(target = \"scientificApproaches\", source = \"scientificApproach\")\n+  @Mapping(target = \"findingsFromStudy\", source = \"anticipatedFindings\")\n+  @Mapping(target = \"status\", source = \"workspaceActiveStatusEnum\")\n+  @Mapping(target = \"workspaceUsers\", ignore = true)\n+  @Mapping(target = \"excludeFromPublicDirectory\", ignore = true)\n+  @Mapping(target = \"focusOnUnderrepresentedPopulations\", source = \"specificPopulationsEnum\")\n+  @Mapping(target = \"workspaceDemographic\", source = \"specificPopulationsEnum\")\n+  RdrWorkspace toRdrModel(DbWorkspace employeeDbEntity);\n+\n+  ZoneOffset offset = OffsetDateTime.now().getOffset();\n+\n+  default OffsetDateTime toModelOffsetTime(Timestamp dbTime) {\n+    return dbTime.toLocalDateTime().atOffset(offset);\n+  }\n+\n+  default RdrWorkspace.StatusEnum toModelStatus(WorkspaceActiveStatus workspaceActiveStatus) {\n+    return workspaceActiveStatus == WorkspaceActiveStatus.ACTIVE\n+        ? RdrWorkspace.StatusEnum.ACTIVE\n+        : RdrWorkspace.StatusEnum.INACTIVE;\n+  }\n+\n+  default boolean toModelFocusOnUnderrepresentedPopulation(\n+      Set<SpecificPopulationEnum> dbSpecificPopulationSet) {\n+    return dbSpecificPopulationSet != null && dbSpecificPopulationSet.size() > 0;\n+  }\n+\n+  default RdrWorkspaceDemographic toModelWorkspaceDemographic(\n+      Set<SpecificPopulationEnum> dbPopulationEnumSet) {\n+    RdrWorkspaceDemographic rdrDemographic = new RdrWorkspaceDemographic();\n+\n+    rdrDemographic.setAccessToCare(\n+        dbPopulationEnumSet.contains(SpecificPopulationEnum.ACCESS_TO_CARE)\n+            ? RdrWorkspaceDemographic.AccessToCareEnum.NOT_EASILY_ACCESS_CARE\n+            : RdrWorkspaceDemographic.AccessToCareEnum.UNSET);\n+\n+    rdrDemographic.setDisabilityStatus(\n+        dbPopulationEnumSet.contains(SpecificPopulationEnum.DISABILITY_STATUS)\n+            ? RdrWorkspaceDemographic.DisabilityStatusEnum.DISABILITY\n+            : RdrWorkspaceDemographic.DisabilityStatusEnum.UNSET);\n+\n+    rdrDemographic.setEducationLevel(\n+        dbPopulationEnumSet.contains(SpecificPopulationEnum.EDUCATION_LEVEL)\n+            ? RdrWorkspaceDemographic.EducationLevelEnum.LESS_THAN_HIGH_SCHOOL\n+            : RdrWorkspaceDemographic.EducationLevelEnum.UNSET);\n+\n+    rdrDemographic.setIncomeLevel(\n+        dbPopulationEnumSet.contains(SpecificPopulationEnum.INCOME_LEVEL)\n+            ? RdrWorkspaceDemographic.IncomeLevelEnum.BELOW_FEDERAL_POVERTY_LEVEL_200_PERCENT\n+            : RdrWorkspaceDemographic.IncomeLevelEnum.UNSET);\n+\n+    rdrDemographic.setGeography(\n+        dbPopulationEnumSet.contains(SpecificPopulationEnum.GEOGRAPHY)\n+            ? RdrWorkspaceDemographic.GeographyEnum.RURAL\n+            : RdrWorkspaceDemographic.GeographyEnum.UNSET);\n+\n+    rdrDemographic.setSexualOrientation(\n+        dbPopulationEnumSet.contains(SpecificPopulationEnum.SEXUAL_ORIENTATION)\n+            ? RdrWorkspaceDemographic.SexualOrientationEnum.OTHER_THAN_STRAIGHT\n+            : RdrWorkspaceDemographic.SexualOrientationEnum.UNSET);\n+\n+    rdrDemographic.setGenderIdentity(\n+        dbPopulationEnumSet.contains(SpecificPopulationEnum.GENDER_IDENTITY)\n+            ? RdrWorkspaceDemographic.GenderIdentityEnum.OTHER_THAN_MAN_WOMAN\n+            : RdrWorkspaceDemographic.GenderIdentityEnum.UNSET);\n+\n+    rdrDemographic.setSexAtBirth(\n+        dbPopulationEnumSet.contains(SpecificPopulationEnum.SEX)\n+            ? RdrWorkspaceDemographic.SexAtBirthEnum.INTERSEX\n+            : RdrWorkspaceDemographic.SexAtBirthEnum.UNSET);\n+\n+    rdrDemographic.setRaceEthnicity(\n+        dbPopulationEnumSet.stream()\n+            .map(RdrExportEnums::specificPopulationToRaceEthnicity)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42d3fdef53fbabb41d43c6bdbdf7f13391d79b1f"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI3NTI5Mg==", "bodyText": "please add a description about this ID. Like is it for our database or some other thing?", "url": "https://github.com/all-of-us/workbench/pull/3577#discussion_r425275292", "createdAt": "2020-05-14T16:33:59Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/rdr.yaml", "diffHunk": "@@ -237,6 +240,22 @@ definitions:\n           - ACTIVE\n           - INACTIVE\n \n+  RdrWorkspaceCreator:\n+    type: object\n+    description: Details for workspace creator\n+    required:\n+      - userId\n+      - givenName\n+      - familyName\n+    properties:\n+      userId:\n+        type: integer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42d3fdef53fbabb41d43c6bdbdf7f13391d79b1f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI3NTk0Mg==", "bodyText": "ok. Spotless isn't the best poet.", "url": "https://github.com/all-of-us/workbench/pull/3577#discussion_r425275942", "createdAt": "2020-05-14T16:34:57Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/rdr/RdrExportServiceImplTest.java", "diffHunk": "@@ -215,6 +221,25 @@ public void exportWorkspace_FocusOnUnderservedPopulation() throws ApiException {\n     verify(mockRdrApi).exportWorkspaces(Arrays.asList(rdrWorkspace));\n   }\n \n+  @Test\n+  public void exportWorkspace_CreatorInformation() throws ApiException {\n+    List<Long> workspaceID = new ArrayList<>();\n+    workspaceID.add(1l);\n+    rdrExportService.exportWorkspaces(workspaceID);\n+    verify(rdrExportDao, times(1)).save(anyList());\n+\n+    RdrWorkspace rdrWorkspace = toDefaultRdrWorkspace(mockWorkspace);\n+    verify(mockRdrApi).exportWorkspaces(Arrays.asList(rdrWorkspace));\n+\n+    workspaceID = new ArrayList<>();\n+    workspaceID.add(3l);\n+    rdrExportService.exportWorkspaces(workspaceID);\n+    rdrWorkspace = toDefaultRdrWorkspace(mockCreatorWorkspace);\n+    rdrWorkspace.setCreator(\n+        new RdrWorkspaceCreator().userId(2l).familyName(\"email\").givenName(\"icannothas\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3OTI2OA=="}, "originalCommit": {"oid": "2c9893b4015a16c406f45839c667c18662473026"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b3cf2acb7629a5116d40185147bbb6649b191bf", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/1b3cf2acb7629a5116d40185147bbb6649b191bf", "committedDate": "2020-05-14T20:04:05Z", "message": "PR comments: Add comment and sort out mapping attribute"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4718, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}