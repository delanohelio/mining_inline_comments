{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwODM3MjYz", "number": 3607, "title": "[risk=no][RW-4911] PopulateUserAffiliation tool", "bodyText": "Description:\nRename and update the PopulateOpsUserAffiliation tool to work with arbitrary Institutions, not just AouOps.  The input source CSVs (we'll need to run this multiple times, as new Institutional DUAs come online) will be derived from this sheet which contains some inexact matches, so we need to account for that.\nThe first batch of users to populate is here: all-of-us/workbench-devops#30\nAlso update the tool for idempotency: it's OK to run with inputs which match already-existing affiliations.  This tool will NOT update affiliations.  That will cause an immediate exit.\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n I have run the E2E tests on ths change against my local UI + API server with yarn test-local\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-05-20T15:45:47Z", "url": "https://github.com/all-of-us/workbench/pull/3607", "merged": true, "mergeCommit": {"oid": "df428ef2b9207dc3a45f40551b7a95a5ccfaa9f2"}, "closed": true, "closedAt": "2020-05-21T14:00:16Z", "author": {"login": "jmthibault79"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjKhX0AH2gAyNDIwODM3MjYzOjQzNWM5OGMyMTRiMmVkYmZiMWUyOGMyOTA3OTNkYTA4ZmMzOWY3NmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjdSh1gH2gAyNDIwODM3MjYzOjcwOWY4Mjg0YTVlNzkxNDk2ZWQ2NWRjOGFhYjcxZmQzNWNiYmY3ODg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "435c98c214b2edbfb1e28c290793da08fc39f76d", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/435c98c214b2edbfb1e28c290793da08fc39f76d", "committedDate": "2020-05-20T15:08:56Z", "message": "Add new institutions package under tools\n- move OpsUser into its own file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a24790779b0c8b419c617e4a40217ab0b8da9def", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/a24790779b0c8b419c617e4a40217ab0b8da9def", "committedDate": "2020-05-20T15:08:56Z", "message": "generify PopulateOpsUserAffiliations and OpsUser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cd79924ebc16b5572ce9cfa0755ad514aeb1cc1", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/1cd79924ebc16b5572ce9cfa0755ad514aeb1cc1", "committedDate": "2020-05-20T15:08:57Z", "message": "add REDCap Complete column for Researcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "102e280e6dab2ddf5a662e94569c4804ce7df67d", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/102e280e6dab2ddf5a662e94569c4804ce7df67d", "committedDate": "2020-05-20T15:08:58Z", "message": "PopulateUserAffiliations: don't error if affiliation exists and is equal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d21b7d338c63b4fd36f8a2e428342217f1a08a8", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/0d21b7d338c63b4fd36f8a2e428342217f1a08a8", "committedDate": "2020-05-20T15:08:58Z", "message": "Be more lenient with Researcher parsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51cd4c372de38685c14f570620fa0b0b5e42c0b1", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/51cd4c372de38685c14f570620fa0b0b5e42c0b1", "committedDate": "2020-05-20T15:08:59Z", "message": "Add a toString for DbVerifiedInstitutionalAffiliation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbd4c1981da8b8786114543280410d0d559a31c7", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/dbd4c1981da8b8786114543280410d0d559a31c7", "committedDate": "2020-05-20T15:35:39Z", "message": "Don't use DbVerifiedInstitutionalAffiliation.equals()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NDc3MTg5", "url": "https://github.com/all-of-us/workbench/pull/3607#pullrequestreview-415477189", "createdAt": "2020-05-20T15:50:30Z", "commit": {"oid": "dbd4c1981da8b8786114543280410d0d559a31c7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTo1MDozMFrOGYSb_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTo1MDozMFrOGYSb_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyMTA4Ng==", "bodyText": "I'm assuming there's a more-idiomatic-Ruby way to do this - happy to replace it with any suggestions.", "url": "https://github.com/all-of-us/workbench/pull/3607#discussion_r428121086", "createdAt": "2020-05-20T15:50:30Z", "author": {"login": "jmthibault79"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1611,6 +1619,9 @@ def populate_ops_user_affiliations(cmd_name, *args)\n   gradle_args = ([\n       [\"--import-filename\", op.opts.importFilename]\n   ]).map { |kv| \"#{kv[0]}=#{kv[1]}\" }\n+  gradle_args += ([", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd4c1981da8b8786114543280410d0d559a31c7"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NDc4MjIw", "url": "https://github.com/all-of-us/workbench/pull/3607#pullrequestreview-415478220", "createdAt": "2020-05-20T15:51:36Z", "commit": {"oid": "dbd4c1981da8b8786114543280410d0d559a31c7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTo1MTozNlrOGYSfGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTo1MTozNlrOGYSfGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyMTg4Mg==", "bodyText": "Split the existing OpsUser into this and User", "url": "https://github.com/all-of-us/workbench/pull/3607#discussion_r428121882", "createdAt": "2020-05-20T15:51:36Z", "author": {"login": "jmthibault79"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/institutions/OpsUser.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.pmiops.workbench.tools.institutions;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.model.InstitutionalRole;\n+\n+/**\n+ * Structure the incoming ops user data according to the format of the source CSV:\n+ *\n+ * <p>First Name,Last Name,Email,\"Workbench Email\",Institution,Role,Action\n+ */\n+class OpsUser extends User {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd4c1981da8b8786114543280410d0d559a31c7"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NDgwMzU4", "url": "https://github.com/all-of-us/workbench/pull/3607#pullrequestreview-415480358", "createdAt": "2020-05-20T15:53:57Z", "commit": {"oid": "dbd4c1981da8b8786114543280410d0d559a31c7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTo1Mzo1N1rOGYSlkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTo1Mzo1N1rOGYSlkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyMzUzNw==", "bodyText": "Originally PopulateOpsUserAffiliations - moved, renamed, and refactored", "url": "https://github.com/all-of-us/workbench/pull/3607#discussion_r428123537", "createdAt": "2020-05-20T15:53:57Z", "author": {"login": "jmthibault79"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/institutions/PopulateUserAffiliations.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package org.pmiops.workbench.tools.institutions;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.tools.CommandLineToolConfig;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Populate the verified_institutional_affiliation table for users listed in a CSV input file.\n+ *\n+ * <p>NOTE: input file must be located in the current directory or a subdirectory.\n+ *\n+ * <p>Example execution:\n+ *\n+ * <pre>\n+ * ./project.rb populate-user-affiliations \\\n+ * --import-filename users.csv \\\n+ * --user-type OPS \\\n+ * --dry-run \\\n+ * --project all-of-us-workbench-test\n+ * </pre>\n+ */\n+public class PopulateUserAffiliations {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd4c1981da8b8786114543280410d0d559a31c7"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "260efd8a9c4137718bb4aad9d9e38c95f21b1331", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/260efd8a9c4137718bb4aad9d9e38c95f21b1331", "committedDate": "2020-05-20T15:56:13Z", "message": "mv parseUsers up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5a560911b33bdc08848d9e1361984609d261790", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/c5a560911b33bdc08848d9e1361984609d261790", "committedDate": "2020-05-20T15:58:23Z", "message": "comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ba823d58ee1fd6bf8a3091f383bb67c416d010f", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/0ba823d58ee1fd6bf8a3091f383bb67c416d010f", "committedDate": "2020-05-20T15:59:59Z", "message": "txt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8187d49ed75854bf218816f6ac8898a46e6349d7", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/8187d49ed75854bf218816f6ac8898a46e6349d7", "committedDate": "2020-05-20T16:07:10Z", "message": "comments and formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NDk2MTk0", "url": "https://github.com/all-of-us/workbench/pull/3607#pullrequestreview-415496194", "createdAt": "2020-05-20T16:11:34Z", "commit": {"oid": "8187d49ed75854bf218816f6ac8898a46e6349d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjoxMTozNFrOGYTVLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjoxMTozNFrOGYTVLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzNTcyNg==", "bodyText": "Tearing my hair out over this one.  If I return to this, it will be here: #3601", "url": "https://github.com/all-of-us/workbench/pull/3607#discussion_r428135726", "createdAt": "2020-05-20T16:11:34Z", "author": {"login": "jmthibault79"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/institutions/User.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.pmiops.workbench.tools.institutions;\n+\n+import com.opencsv.CSVReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+\n+public abstract class User {\n+  private static final Logger log = Logger.getLogger(User.class.getName());\n+\n+  String firstName;\n+  String lastName;\n+  String contactEmail;\n+  String userName;\n+\n+  // check data prerequisites which don't involve DB comparisons\n+  abstract void preCheck();\n+\n+  abstract DbVerifiedInstitutionalAffiliation toAffiliation(\n+      final DbUser dbUser, final InstitutionDao institutionDao);\n+\n+  static List<String[]> readFile(final String filename, final int columnLength) throws IOException {\n+    try (final CSVReader reader = new CSVReader(new FileReader(filename))) {\n+      // consume and sanity-check header line\n+      final String[] headerLine = reader.readNext();\n+      if (headerLine.length != columnLength) {\n+        throw new RuntimeException(\n+            String.format(\n+                \"Expected %d columns in input file. Was: %d\", columnLength, headerLine.length));\n+      }\n+\n+      return StreamSupport.stream(reader.spliterator(), false).collect(Collectors.toList());\n+    }\n+  }\n+\n+  private void checkField(String dbValue, String csvValue, String fieldName) {\n+    if (!dbValue.equals(csvValue)) {\n+      log.warning(\n+          String.format(\n+              \"CSV and DB values do not match for user '%s', field '%s'. CSV = %s, DB = %s\",\n+              userName, fieldName, csvValue, dbValue));\n+    }\n+  }\n+\n+  private DbUser dbCheck(final UserDao userDao) {\n+    final DbUser dbUser = userDao.findUserByUsername(userName);\n+\n+    // fatal errors: something is quite wrong and we need to recheck our assumptions!\n+\n+    if (dbUser == null) {\n+      throw new RuntimeException(String.format(\"User %s was not found in the DB\", userName));\n+    }\n+\n+    // many near-matches in the imput exist: warn only, don't stop\n+    // example: \"Dan\" instead of \"Daniel\"\n+    // example: \"\"Beth,\"\" instead of \"Beth\"\n+\n+    checkField(dbUser.getGivenName(), firstName, \"First Name\");\n+    checkField(dbUser.getFamilyName(), lastName, \"Last Name\");\n+    checkField(dbUser.getContactEmail(), contactEmail, \"Contact Email\");\n+\n+    return dbUser;\n+  }\n+\n+  void populateAffiliation(\n+      final boolean dryRun,\n+      final UserDao userDao,\n+      final InstitutionDao institutionDao,\n+      final VerifiedInstitutionalAffiliationDao affiliationDao) {\n+\n+    preCheck();\n+\n+    final DbUser dbUser = dbCheck(userDao);\n+    final DbVerifiedInstitutionalAffiliation newAffiliation = toAffiliation(dbUser, institutionDao);\n+    final Optional<DbVerifiedInstitutionalAffiliation> existingAffil =\n+        affiliationDao.findFirstByUser(dbUser);\n+\n+    if (!existingAffil.isPresent()) {\n+      if (!dryRun) {\n+        affiliationDao.save(newAffiliation);\n+      }\n+\n+      dryLog(\n+          dryRun,\n+          String.format(\n+              \"Saved Affiliation for '%s' with Institution '%s'\",\n+              newAffiliation.getUser().getUsername(),\n+              newAffiliation.getInstitution().getDisplayName()));\n+    } else {\n+      // will always execute since we checked it above\n+      existingAffil.ifPresent(\n+          existingAffiliation -> {\n+            if (equivalent(existingAffiliation, newAffiliation)) {\n+              log.info(\"No action taken.  Affiliation exists: \" + existingAffiliation);\n+            } else {\n+              throw new RuntimeException(\n+                  String.format(\n+                      \"New affiliation differs from affiliation in DB for user '%s':\\n\"\n+                          + \"New affiliation = %s\\nDB affiliation= %s\",\n+                      userName, newAffiliation, existingAffiliation));\n+            }\n+          });\n+    }\n+  }\n+\n+  // Are these two DbVerifiedInstitutionalAffiliation objects equivalent?\n+  // TODO: investigate why we can't use DbVerifiedInstitutionalAffiliation.equals() here.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8187d49ed75854bf218816f6ac8898a46e6349d7"}, "originalPosition": 117}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64b617f72ac740f45ff6e2e3c664a9923eadd930", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/64b617f72ac740f45ff6e2e3c664a9923eadd930", "committedDate": "2020-05-20T17:26:23Z", "message": "lint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1ODMyODE0", "url": "https://github.com/all-of-us/workbench/pull/3607#pullrequestreview-415832814", "createdAt": "2020-05-21T02:09:45Z", "commit": {"oid": "8187d49ed75854bf218816f6ac8898a46e6349d7"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjowOTo0NlrOGYj3Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjoyNDoyMVrOGYkFjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNjU3NQ==", "bodyText": "Super nitpick, but maybe these final static constants should be uppercased? I'm not sure if we have a clear style rule around this \u2013\u00a0Google's Java style says constants should be uppercase, and I do like the clarity that provides.", "url": "https://github.com/all-of-us/workbench/pull/3607#discussion_r428406575", "createdAt": "2020-05-21T02:09:46Z", "author": {"login": "gjuggler"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/institutions/Researcher.java", "diffHunk": "@@ -0,0 +1,157 @@\n+package org.pmiops.workbench.tools.institutions;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.model.InstitutionalRole;\n+\n+/**\n+ * Structure researcher user data according to the format of the source CSV:\n+ *\n+ * <p>First Name, Last Name, Institutional Email, WB User Name, Role, Institution, \"Institutional\n+ * DUA Signed?\", \"REDCap Complete?\"\n+ */\n+class Researcher extends User {\n+  // common fields from User: firstName, lastName, contactEmail, userName\n+  final InstitutionalRole institutionalRole;\n+  final String institutionDisplayName;\n+  final String duaSigned;\n+  final String redCapComplete;\n+\n+  private static final int columnLength = 8;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8187d49ed75854bf218816f6ac8898a46e6349d7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMDI1NQ==", "bodyText": "Hmm \u2013\u00a0maybe it's possible to include it in the list definition above?\ngradle_args = ([\n      [\"--import-filename\", op.opts.importFilename],\n      [\"--user-type\", op.opts.userType]\n  ]).map { |kv| \"#{kv[0]}=#{kv[1]}\" }", "url": "https://github.com/all-of-us/workbench/pull/3607#discussion_r428410255", "createdAt": "2020-05-21T02:24:21Z", "author": {"login": "gjuggler"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1611,6 +1619,9 @@ def populate_ops_user_affiliations(cmd_name, *args)\n   gradle_args = ([\n       [\"--import-filename\", op.opts.importFilename]\n   ]).map { |kv| \"#{kv[0]}=#{kv[1]}\" }\n+  gradle_args += ([", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyMTA4Ng=="}, "originalCommit": {"oid": "dbd4c1981da8b8786114543280410d0d559a31c7"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fc3d8d057ced865ef0c3f3893ae2b525ab8be82", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/0fc3d8d057ced865ef0c3f3893ae2b525ab8be82", "committedDate": "2020-05-21T12:58:59Z", "message": "ALL_CAPS the private static finals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "709f8284a5e791496ed65dc8aab71fd35cbbf788", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/709f8284a5e791496ed65dc8aab71fd35cbbf788", "committedDate": "2020-05-21T13:00:55Z", "message": "better gradle arg parsing"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4771, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}