{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NDM4OTI3", "number": 3778, "title": "[risk=no] Deprecate userService.logAdminUserAction/logAdminWorkspaceAction", "bodyText": "Description:\nDeprecates use of the write-only old-style DbAdminActionHistory, in favor of the current auditing system\nRemoves 2 of 4 remaining calls because they are duplicated by new-style auditing calls\nTODO, deferred to https://precisionmedicineinitiative.atlassian.net/browse/RW-5269\n\nreplace the call to userService.logAdminUserAction() in ClusterController.updateClusterConfig() with new-style auditing\nreplace the call to userService.logAdminWorkspaceAction() in WorkspaceController.reviewWorkspace() with new-style auditing\nremove the DbAdminActionHistory object, DAO, and DB table\n\n\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n I have run the E2E tests on ths change against my local UI + API server with yarn test-local\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-07-13T19:14:01Z", "url": "https://github.com/all-of-us/workbench/pull/3778", "merged": true, "mergeCommit": {"oid": "c57a79444c0858b1452bca35400128fdd6a1248a"}, "closed": true, "closedAt": "2020-07-14T14:31:29Z", "author": {"login": "jmthibault79"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0mZvRgFqTQ0NzUyODY2NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc02UiZgBqjM1NDQyNDgzODA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NTI4NjY0", "url": "https://github.com/all-of-us/workbench/pull/3778#pullrequestreview-447528664", "createdAt": "2020-07-13T19:14:38Z", "commit": {"oid": "c778ca0bcb99beb88f29ee34c8f4aa990a8a8aee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOToxNDozOFrOGw2Osg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOToxNDozOFrOGw2Osg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3MzMzMA==", "bodyText": "logged immediately above", "url": "https://github.com/all-of-us/workbench/pull/3778#discussion_r453873330", "createdAt": "2020-07-13T19:14:38Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/api/AuthDomainController.java", "diffHunk": "@@ -56,10 +56,5 @@ private void auditAdminActions(\n       UpdateUserDisabledRequest request, Boolean previousDisabled, DbUser updatedTargetUser) {\n     authDomainAuditAdapter.fireSetAccountDisabledStatus(\n         updatedTargetUser.getUserId(), request.getDisabled(), previousDisabled);\n-    userService.logAdminUserAction(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c778ca0bcb99beb88f29ee34c8f4aa990a8a8aee"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NTI5NzM5", "url": "https://github.com/all-of-us/workbench/pull/3778#pullrequestreview-447529739", "createdAt": "2020-07-13T19:16:19Z", "commit": {"oid": "c778ca0bcb99beb88f29ee34c8f4aa990a8a8aee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOToxNjoyMFrOGw2SYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOToxNjoyMFrOGw2SYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3NDI3NQ==", "bodyText": "logged in UserServiceImpl.setBypasstimeWithRetries() which is called by each of the setXYZBypassTime()", "url": "https://github.com/all-of-us/workbench/pull/3778#discussion_r453874275", "createdAt": "2020-07-13T19:16:20Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -961,54 +961,40 @@ public DbUser getByUsernameOrThrow(String username) {\n \n   @Override\n   public void updateBypassTime(long userDatabaseId, AccessBypassRequest accessBypassRequest) {\n-    final DbUser user =\n-        getByDatabaseId(userDatabaseId)\n-            .orElseThrow(\n-                () ->\n-                    new NotFoundException(\n-                        String.format(\"User with database ID %d not found\", userDatabaseId)));\n+    getByDatabaseId(userDatabaseId)\n+        .orElseThrow(\n+            () ->\n+                new NotFoundException(\n+                    String.format(\"User with database ID %d not found\", userDatabaseId)));\n \n     final Timestamp newBypassTime;\n-    final Timestamp previousBypassTime;\n \n     final Boolean isBypassed = accessBypassRequest.getIsBypassed();\n     if (isBypassed) {\n       newBypassTime = new Timestamp(clock.instant().toEpochMilli());\n     } else {\n       newBypassTime = null;\n     }\n+\n     switch (accessBypassRequest.getModuleName()) {\n       case DATA_USE_AGREEMENT:\n-        previousBypassTime = user.getDataUseAgreementBypassTime();\n         setDataUseAgreementBypassTime(userDatabaseId, newBypassTime);\n         break;\n       case COMPLIANCE_TRAINING:\n-        previousBypassTime = user.getComplianceTrainingBypassTime();\n         setComplianceTrainingBypassTime(userDatabaseId, newBypassTime);\n         break;\n       case BETA_ACCESS:\n-        previousBypassTime = user.getBetaAccessBypassTime();\n         setBetaAccessBypassTime(userDatabaseId, newBypassTime);\n         break;\n       case ERA_COMMONS:\n-        previousBypassTime = user.getEraCommonsBypassTime();\n         setEraCommonsBypassTime(userDatabaseId, newBypassTime);\n         break;\n       case TWO_FACTOR_AUTH:\n-        previousBypassTime = user.getTwoFactorAuthBypassTime();\n         setTwoFactorAuthBypassTime(userDatabaseId, newBypassTime);\n         break;\n       default:\n         throw new BadRequestException(\n             \"There is no access module named: \" + accessBypassRequest.getModuleName().toString());\n     }\n-    logAdminUserAction(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c778ca0bcb99beb88f29ee34c8f4aa990a8a8aee"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NTM5MDc0", "url": "https://github.com/all-of-us/workbench/pull/3778#pullrequestreview-447539074", "createdAt": "2020-07-13T19:30:09Z", "commit": {"oid": "c778ca0bcb99beb88f29ee34c8f4aa990a8a8aee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOTozMDowOVrOGw2woA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOTozMDowOVrOGw2woA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MjAxNg==", "bodyText": "Could remove this check entirely?  I decided not to change existing behavior", "url": "https://github.com/all-of-us/workbench/pull/3778#discussion_r453882016", "createdAt": "2020-07-13T19:30:09Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -961,54 +961,40 @@ public DbUser getByUsernameOrThrow(String username) {\n \n   @Override\n   public void updateBypassTime(long userDatabaseId, AccessBypassRequest accessBypassRequest) {\n-    final DbUser user =\n-        getByDatabaseId(userDatabaseId)\n-            .orElseThrow(\n-                () ->\n-                    new NotFoundException(\n-                        String.format(\"User with database ID %d not found\", userDatabaseId)));\n+    getByDatabaseId(userDatabaseId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c778ca0bcb99beb88f29ee34c8f4aa990a8a8aee"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NTYzODcy", "url": "https://github.com/all-of-us/workbench/pull/3778#pullrequestreview-447563872", "createdAt": "2020-07-13T20:08:25Z", "commit": {"oid": "9dc317edb31c0cc427e2677d93a181c5fb279897"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMDowODoyNVrOGw3-KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMDoxMTo1NVrOGw4FHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkwMTg2NQ==", "bodyText": "Yeah, if this user isn't found, we'll probably get an NPE (or worse) in setBypassTimeWithRetries. That would be good to verify in the debugger.", "url": "https://github.com/all-of-us/workbench/pull/3778#discussion_r453901865", "createdAt": "2020-07-13T20:08:25Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -961,54 +961,40 @@ public DbUser getByUsernameOrThrow(String username) {\n \n   @Override\n   public void updateBypassTime(long userDatabaseId, AccessBypassRequest accessBypassRequest) {\n-    final DbUser user =\n-        getByDatabaseId(userDatabaseId)\n-            .orElseThrow(\n-                () ->\n-                    new NotFoundException(\n-                        String.format(\"User with database ID %d not found\", userDatabaseId)));\n+    getByDatabaseId(userDatabaseId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MjAxNg=="}, "originalCommit": {"oid": "c778ca0bcb99beb88f29ee34c8f4aa990a8a8aee"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkwMzY0NA==", "bodyText": "I missed the previous value in my original implementation. Let's keep these and one of us can pass the previous time as an additional Optional arg to fireAdministrativeBypassTime(). You can just do a TODO or go ahead and pipe that in if you don't mind.", "url": "https://github.com/all-of-us/workbench/pull/3778#discussion_r453903644", "createdAt": "2020-07-13T20:11:55Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -961,54 +961,40 @@ public DbUser getByUsernameOrThrow(String username) {\n \n   @Override\n   public void updateBypassTime(long userDatabaseId, AccessBypassRequest accessBypassRequest) {\n-    final DbUser user =\n-        getByDatabaseId(userDatabaseId)\n-            .orElseThrow(\n-                () ->\n-                    new NotFoundException(\n-                        String.format(\"User with database ID %d not found\", userDatabaseId)));\n+    getByDatabaseId(userDatabaseId)\n+        .orElseThrow(\n+            () ->\n+                new NotFoundException(\n+                    String.format(\"User with database ID %d not found\", userDatabaseId)));\n \n     final Timestamp newBypassTime;\n-    final Timestamp previousBypassTime;\n \n     final Boolean isBypassed = accessBypassRequest.getIsBypassed();\n     if (isBypassed) {\n       newBypassTime = new Timestamp(clock.instant().toEpochMilli());\n     } else {\n       newBypassTime = null;\n     }\n+\n     switch (accessBypassRequest.getModuleName()) {\n       case DATA_USE_AGREEMENT:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dc317edb31c0cc427e2677d93a181c5fb279897"}, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9dc317edb31c0cc427e2677d93a181c5fb279897", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/9dc317edb31c0cc427e2677d93a181c5fb279897", "committedDate": "2020-07-13T19:53:32Z", "message": "Spring needs those getters"}, "afterCommit": {"oid": "1ae39d28a62b798e8dcc9d548cdc8492591ebd29", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/1ae39d28a62b798e8dcc9d548cdc8492591ebd29", "committedDate": "2020-07-13T21:34:30Z", "message": "Add previousBypassTime to set bypass calls"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MDg1NjMx", "url": "https://github.com/all-of-us/workbench/pull/3778#pullrequestreview-448085631", "createdAt": "2020-07-14T13:04:40Z", "commit": {"oid": "1ae39d28a62b798e8dcc9d548cdc8492591ebd29"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzowNDo0MFrOGxSvEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzowNDo0MFrOGxSvEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0MDM2OQ==", "bodyText": "Can you please make sure the order matches other auditor functions? I believe it's usually previous then new. IJ has a Change Signature refactoring for that. Also please rename bypassTime to newBypassTime to make it foolproof.", "url": "https://github.com/all-of-us/workbench/pull/3778#discussion_r454340369", "createdAt": "2020-07-14T13:04:40Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/UserServiceAuditor.java", "diffHunk": "@@ -15,7 +15,10 @@ void fireUpdateDataAccessAction(\n       Agent agent);\n \n   void fireAdministrativeBypassTime(\n-      long userId, BypassTimeTargetProperty bypassTimeTargetProperty, Optional<Instant> bypassTime);\n+      long userId,\n+      BypassTimeTargetProperty bypassTimeTargetProperty,\n+      Optional<Instant> bypassTime,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ae39d28a62b798e8dcc9d548cdc8492591ebd29"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54be91d5c59165ed5fd4ca27c873863b03caa8a0", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/54be91d5c59165ed5fd4ca27c873863b03caa8a0", "committedDate": "2020-07-14T13:47:14Z", "message": "Deprecate userService.logAdminUserAction/logAdminWorkspaceAction\n- remove two calls where they have replacements\n\nDeprecate DB and DAO themselves"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "001dd8b67bd960ef1bc0d8fe2cb5681ae04430ed", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/001dd8b67bd960ef1bc0d8fe2cb5681ae04430ed", "committedDate": "2020-07-14T13:47:14Z", "message": "Add previousBypassTime to set bypass calls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19037f012bd4f8b3723b52b1bf814823b0bb4578", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/19037f012bd4f8b3723b52b1bf814823b0bb4578", "committedDate": "2020-07-14T13:47:15Z", "message": "rearrange: previous value first"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "242b235b9aeafbe61b7d717b90e461caada4456a", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/242b235b9aeafbe61b7d717b90e461caada4456a", "committedDate": "2020-07-14T13:47:15Z", "message": "lint"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ae39d28a62b798e8dcc9d548cdc8492591ebd29", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/1ae39d28a62b798e8dcc9d548cdc8492591ebd29", "committedDate": "2020-07-13T21:34:30Z", "message": "Add previousBypassTime to set bypass calls"}, "afterCommit": {"oid": "242b235b9aeafbe61b7d717b90e461caada4456a", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/242b235b9aeafbe61b7d717b90e461caada4456a", "committedDate": "2020-07-14T13:47:15Z", "message": "lint"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4449, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}