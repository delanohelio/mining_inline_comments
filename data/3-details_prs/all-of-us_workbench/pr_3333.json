{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NjQzMjEz", "number": 3333, "title": "[RW-4249][Risk=low] Srubenst/data page objects", "bodyText": "Description:\nThis adds a getDataPageObjects endpoint to reduce the number of access checks necessary. Because of this, it also changes RecentResource to WorkspaceResource to be more correct, and adds two mappers so it only uses mappers.\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-04-02T15:15:07Z", "url": "https://github.com/all-of-us/workbench/pull/3333", "merged": true, "mergeCommit": {"oid": "6aa028a3a53c82cdf34bce6c12a057ba33031673"}, "closed": true, "closedAt": "2020-04-13T15:23:29Z", "author": {"login": "s-rubenstein"}, "timelineItems": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcR2HK5AH2gAyMzk3NjQzMjEzOmU1ZTNiNDU0NmI5YjQ4YmIxOTg0ZTI0NWU2Y2Q1YTNmYzRmNWQ0MGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXQPtlgH2gAyMzk3NjQzMjEzOjFlNmY4ZDljN2JmZWRiYzY0Zjc0YWJiNGI0ODM5YjI3YWE3MTdjMmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e5e3b4546b9b48bb1984e245e6cd5a3fc4f5d40d", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/e5e3b4546b9b48bb1984e245e6cd5a3fc4f5d40d", "committedDate": "2020-03-27T19:45:30Z", "message": "WIP getDataPageObjects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9e1375f51acec0a66c8a2d7a08b8e254b61fb94", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/a9e1375f51acec0a66c8a2d7a08b8e254b61fb94", "committedDate": "2020-03-27T20:14:29Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d623274002393e9835bf6ee7ddcd22b6e5e02a75", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/d623274002393e9835bf6ee7ddcd22b6e5e02a75", "committedDate": "2020-03-31T20:58:19Z", "message": "Working getDataPageObjects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/1015bcab57f80ad44fb2d9c4c26dee47f1c27210", "committedDate": "2020-04-02T15:12:20Z", "message": "Fix warnings for mappers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NTYzMzMz", "url": "https://github.com/all-of-us/workbench/pull/3333#pullrequestreview-386563333", "createdAt": "2020-04-02T15:52:18Z", "commit": {"oid": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210"}, "state": "COMMENTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo1MjoxOVrOF_x3mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjozNzo0OFrOF_zyDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyMTY1Ng==", "bodyText": "So the ignore directives always make me a bit nervous. It silently sets up clients for unpleasant surprises.\nWhat about making this method a dbModelToClientLight and having another one that fetches everything?\nOr, you could have a parameter to describe what to fetch.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402421656", "createdAt": "2020-04-02T15:52:19Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.pmiops.workbench.cohortreview;\n+\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbCohortReview;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.model.CohortReview;\n+import org.pmiops.workbench.model.ReviewStatus;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+\n+@Mapper(\n+    componentModel = \"spring\",\n+    uses = {CommonMappers.class})\n+public interface CohortReviewMapper {\n+  @Mapping(target = \"etag\", source = \"version\")\n+  @Mapping(target = \"queryResultSize\", ignore = true) // used for pagination, we don't want this on all results", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNDgzNA==", "bodyText": "Please change this comment to just \"field not present on source\". In other words, it's not really about what's useful, but what can be provided.\nIf there were another object you could pass in to the converter (like a POJO CohortReviewPaginationOptions) that would provide values for these fields, even better. You could declare a static final instance of that class like DEFAULT_COHORT_REVIEW_PAGINATION and use it in a one-arg conversion function that calls the 2-arg one.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402424834", "createdAt": "2020-04-02T15:56:25Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.pmiops.workbench.cohortreview;\n+\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbCohortReview;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.model.CohortReview;\n+import org.pmiops.workbench.model.ReviewStatus;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+\n+@Mapper(\n+    componentModel = \"spring\",\n+    uses = {CommonMappers.class})\n+public interface CohortReviewMapper {\n+  @Mapping(target = \"etag\", source = \"version\")\n+  @Mapping(target = \"queryResultSize\", ignore = true) // used for pagination, we don't want this on all results\n+  @Mapping(target = \"page\", ignore = true) // used for pagination, we don't want this on all results", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNjAzNg==", "bodyText": "I'm surprised you need to write this method at all. I would've expected MapStruct to look for a toString override on the source object and give you this functionality for free.\nFrom section 5.1 of the reference doc, there are several date & timestamp objects with implicit string conversion to String, but maybe the sql flavors are tripping up the process.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402426036", "createdAt": "2020-04-02T15:58:00Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java", "diffHunk": "@@ -34,6 +34,13 @@ public Long timestamp(Timestamp timestamp) {\n     return null;\n   }\n \n+  public String timestampToString(Timestamp timestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMDY0NQ==", "bodyText": "We don't need get in the resource name, since that's in the verb.\nAlso, can we be more descriptive than \"data page\"? We don't need items either, as it doesn't really clarify what we're fetching.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402430645", "createdAt": "2020-04-02T16:04:39Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -804,6 +804,20 @@ paths:\n           description: Workspace deletion request accepted\n           schema:\n             \"$ref\": \"#/definitions/EmptyResponse\"\n+  \"/v1/workspaces/{workspaceNamespace}/{workspaceId}/get-data-page-items\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMTQ0NQ==", "bodyText": "This definition is from the perspective of an existing UI design or implementation. It should really be written in a stand-alone way, so that a developer of a future workbench client could use it. That is, the API definition shouldn't really be in terms of the UI.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402431445", "createdAt": "2020-04-02T16:05:46Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -804,6 +804,20 @@ paths:\n           description: Workspace deletion request accepted\n           schema:\n             \"$ref\": \"#/definitions/EmptyResponse\"\n+  \"/v1/workspaces/{workspaceNamespace}/{workspaceId}/get-data-page-items\":\n+    parameters:\n+      - \"$ref\": \"#/parameters/workspaceNamespace\"\n+      - \"$ref\": \"#/parameters/workspaceId\"\n+    get:\n+      tags:\n+      - workspaces\n+      description: Gets all items shown on the data page of the workspcae", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMjM1Ng==", "bodyText": "If it's not too late, could you please split out the rename refactorings into a follow-on PR? It's a bit difficult to follow everything that's happening.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402432356", "createdAt": "2020-04-02T16:07:02Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/UserMetricsController.java", "diffHunk": "@@ -167,7 +167,7 @@ public void setDistinctWorkspaceLimit(int limit) {\n \n   /** Gets the list of all resources recently access by user in order of access date time */\n   @Override\n-  public ResponseEntity<RecentResourceResponse> getUserRecentResources() {\n+  public ResponseEntity<WorkspaceResourceResponse> getUserRecentResources() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzNTU2NQ==", "bodyText": "Since the mapper is a Spring bean itself, you can write a little method to do these mappings using the real DAO.\nWhen I use a mapper, I expect everything that can be mapped to be mapped.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402435565", "createdAt": "2020-04-02T16:11:44Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java", "diffHunk": "@@ -3,14 +3,29 @@\n import org.mapstruct.Mapper;\n import org.mapstruct.Mapping;\n import org.pmiops.workbench.db.model.DbDataDictionaryEntry;\n+import org.pmiops.workbench.db.model.DbDataset;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.model.DataDictionaryEntry;\n+import org.pmiops.workbench.model.DataSet;\n+import org.pmiops.workbench.model.PrePackagedConceptSetEnum;\n import org.pmiops.workbench.utils.mappers.CommonMappers;\n \n @Mapper(\n     componentModel = \"spring\",\n     uses = {CommonMappers.class})\n public interface DataSetMapper {\n \n+  @Mapping(target = \"id\", source = \"dataSetId\")\n+  @Mapping(target = \"conceptSets\", ignore = true) // This is stored as a list of ids. Look those up in the controller for entities", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzNjcyMA==", "bodyText": "OK. I think what we want then is another target class, such as DatasetLight. A mapper with a target class of DataSet should be expected to do whatever it takes to build a fully populated DataSet.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402436720", "createdAt": "2020-04-02T16:13:17Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java", "diffHunk": "@@ -3,14 +3,29 @@\n import org.mapstruct.Mapper;\n import org.mapstruct.Mapping;\n import org.pmiops.workbench.db.model.DbDataDictionaryEntry;\n+import org.pmiops.workbench.db.model.DbDataset;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.model.DataDictionaryEntry;\n+import org.pmiops.workbench.model.DataSet;\n+import org.pmiops.workbench.model.PrePackagedConceptSetEnum;\n import org.pmiops.workbench.utils.mappers.CommonMappers;\n \n @Mapper(\n     componentModel = \"spring\",\n     uses = {CommonMappers.class})\n public interface DataSetMapper {\n \n+  @Mapping(target = \"id\", source = \"dataSetId\")\n+  @Mapping(target = \"conceptSets\", ignore = true) // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(target = \"cohorts\", ignore = true) // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(target = \"domainValuePairs\", ignore = true) // This is stored in a subtable, we may not want to fetch all the time", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzNzMzNw==", "bodyText": "You shouldn't need to write this method. You can simply import the appropriate StorageEnums class and MapStruct will scan it to find a method from Short to PrePackagedConceptSetEnum.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402437337", "createdAt": "2020-04-02T16:14:08Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java", "diffHunk": "@@ -3,14 +3,29 @@\n import org.mapstruct.Mapper;\n import org.mapstruct.Mapping;\n import org.pmiops.workbench.db.model.DbDataDictionaryEntry;\n+import org.pmiops.workbench.db.model.DbDataset;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.model.DataDictionaryEntry;\n+import org.pmiops.workbench.model.DataSet;\n+import org.pmiops.workbench.model.PrePackagedConceptSetEnum;\n import org.pmiops.workbench.utils.mappers.CommonMappers;\n \n @Mapper(\n     componentModel = \"spring\",\n     uses = {CommonMappers.class})\n public interface DataSetMapper {\n \n+  @Mapping(target = \"id\", source = \"dataSetId\")\n+  @Mapping(target = \"conceptSets\", ignore = true) // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(target = \"cohorts\", ignore = true) // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(target = \"domainValuePairs\", ignore = true) // This is stored in a subtable, we may not want to fetch all the time\n+  @Mapping(target = \"etag\", source = \"version\")\n+  DataSet dbModelToClient(DbDataset dbDataset);\n+\n+  default PrePackagedConceptSetEnum prePackagedConceptSetFromStorage(Short prePackagedConceptSet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzODcwNQ==", "bodyText": "The introduction of 7 new services at once makes me think perhaps there's an opportunity to define 2-3 high-level intermediate services.\nWe're going to break all of @ericsong's workspace tools again by increasing the argument list, and testing is going to get increasingly hairy.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402438705", "createdAt": "2020-04-02T16:16:17Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -141,6 +161,13 @@ public WorkspacesController(\n       BillingProjectBufferService billingProjectBufferService,\n       WorkspaceService workspaceService,\n       CdrVersionDao cdrVersionDao,\n+      CohortMapper cohortMapper,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MDY4Mw==", "bodyText": "This could be another (tiny) mapper.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402440683", "createdAt": "2020-04-02T16:19:14Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -1010,6 +1044,76 @@ static String notebookLockingEmailHash(String bucket, String email) {\n     return ResponseEntity.ok(recentWorkspaceResponse);\n   }\n \n+  private WorkspaceResource createWorkspaceResourceFromWorkspace(DbWorkspace workspace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MTQ0OQ==", "bodyText": "What about getWorkspaceWithResources? We try not to refer to UI constructs like individual pages/frames/panes from the backend.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402441449", "createdAt": "2020-04-02T16:20:25Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -1010,6 +1044,76 @@ static String notebookLockingEmailHash(String bucket, String email) {\n     return ResponseEntity.ok(recentWorkspaceResponse);\n   }\n \n+  private WorkspaceResource createWorkspaceResourceFromWorkspace(DbWorkspace workspace) {\n+    return new WorkspaceResource()\n+        .workspaceFirecloudName(workspace.getFirecloudName())\n+        .workspaceId(workspace.getWorkspaceId())\n+        .workspaceNamespace(workspace.getWorkspaceNamespace())\n+        .workspaceBillingStatus(workspace.getBillingStatus());\n+  }\n+\n+  @Override\n+  public ResponseEntity<WorkspaceResourceResponse> getDataPageItems(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MjI0Nw==", "bodyText": "Please make this final.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402442247", "createdAt": "2020-04-02T16:21:36Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -1010,6 +1044,76 @@ static String notebookLockingEmailHash(String bucket, String email) {\n     return ResponseEntity.ok(recentWorkspaceResponse);\n   }\n \n+  private WorkspaceResource createWorkspaceResourceFromWorkspace(DbWorkspace workspace) {\n+    return new WorkspaceResource()\n+        .workspaceFirecloudName(workspace.getFirecloudName())\n+        .workspaceId(workspace.getWorkspaceId())\n+        .workspaceNamespace(workspace.getWorkspaceNamespace())\n+        .workspaceBillingStatus(workspace.getBillingStatus());\n+  }\n+\n+  @Override\n+  public ResponseEntity<WorkspaceResourceResponse> getDataPageItems(\n+      String workspaceNamespace, String workspaceId) {\n+    // This also enforces registered auth domain.\n+    workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n+\n+    DbWorkspace workspace =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0NzI4Nw==", "bodyText": "This conversion can live in the ConceptSetMapper as well. We can have a WorkspaceResource conceptSetToWorkspaceResource(DbConceptSet dbConceptSet, Workspace workspace). WorkspaceMapper has some examples of this.\nWe can do the same for the dataset, cohort, etc.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402447287", "createdAt": "2020-04-02T16:29:17Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -1010,6 +1044,76 @@ static String notebookLockingEmailHash(String bucket, String email) {\n     return ResponseEntity.ok(recentWorkspaceResponse);\n   }\n \n+  private WorkspaceResource createWorkspaceResourceFromWorkspace(DbWorkspace workspace) {\n+    return new WorkspaceResource()\n+        .workspaceFirecloudName(workspace.getFirecloudName())\n+        .workspaceId(workspace.getWorkspaceId())\n+        .workspaceNamespace(workspace.getWorkspaceNamespace())\n+        .workspaceBillingStatus(workspace.getBillingStatus());\n+  }\n+\n+  @Override\n+  public ResponseEntity<WorkspaceResourceResponse> getDataPageItems(\n+      String workspaceNamespace, String workspaceId) {\n+    // This also enforces registered auth domain.\n+    workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n+\n+    DbWorkspace workspace =\n+        workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n+    Set<DbCohort> cohorts = workspace.getCohorts();\n+    WorkspaceResourceResponse workspaceResources = new WorkspaceResourceResponse();\n+    workspaceResources.addAll(\n+        cohorts.stream()\n+            .map(cohortMapper::dbModelToClient)\n+            .map(\n+                cohort ->\n+                    createWorkspaceResourceFromWorkspace(workspace)\n+                        .cohort(cohort)\n+                        .modifiedTime(cohort.getLastModifiedTime().toString()))\n+            .collect(Collectors.toList()));\n+    // TODO: Convert cohorts to resources\n+    List<DbCohortReview> reviews =\n+        cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n+    workspaceResources.addAll(\n+        reviews.stream()\n+            .map(cohortReviewMapper::dbModelToClient)\n+            .map(\n+                cohortReview ->\n+                    createWorkspaceResourceFromWorkspace(workspace)\n+                        .modifiedTime(cohortReview.getLastModifiedTime().toString())\n+                        .cohortReview(cohortReview))\n+            .collect(Collectors.toList()));\n+    // TODO convert cohort reviews to resources\n+    List<DbConceptSet> conceptSets =\n+        conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n+    workspaceResources.addAll(\n+        conceptSets.stream()\n+            .map(conceptSetMapper::dbModelToClient)\n+            .map(\n+                conceptSet ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0ODA5NQ==", "bodyText": "Please name this workspaceResourceResponse, as it's not a collection.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402448095", "createdAt": "2020-04-02T16:30:22Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -1010,6 +1044,76 @@ static String notebookLockingEmailHash(String bucket, String email) {\n     return ResponseEntity.ok(recentWorkspaceResponse);\n   }\n \n+  private WorkspaceResource createWorkspaceResourceFromWorkspace(DbWorkspace workspace) {\n+    return new WorkspaceResource()\n+        .workspaceFirecloudName(workspace.getFirecloudName())\n+        .workspaceId(workspace.getWorkspaceId())\n+        .workspaceNamespace(workspace.getWorkspaceNamespace())\n+        .workspaceBillingStatus(workspace.getBillingStatus());\n+  }\n+\n+  @Override\n+  public ResponseEntity<WorkspaceResourceResponse> getDataPageItems(\n+      String workspaceNamespace, String workspaceId) {\n+    // This also enforces registered auth domain.\n+    workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n+\n+    DbWorkspace workspace =\n+        workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n+    Set<DbCohort> cohorts = workspace.getCohorts();\n+    WorkspaceResourceResponse workspaceResources = new WorkspaceResourceResponse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1MjU1NQ==", "bodyText": "We can actually stuff all of the rest of this code into the mappers, since it's just a fetch & hydrate block. There's no real decision-making logic going on here.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402452555", "createdAt": "2020-04-02T16:37:09Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -1010,6 +1044,76 @@ static String notebookLockingEmailHash(String bucket, String email) {\n     return ResponseEntity.ok(recentWorkspaceResponse);\n   }\n \n+  private WorkspaceResource createWorkspaceResourceFromWorkspace(DbWorkspace workspace) {\n+    return new WorkspaceResource()\n+        .workspaceFirecloudName(workspace.getFirecloudName())\n+        .workspaceId(workspace.getWorkspaceId())\n+        .workspaceNamespace(workspace.getWorkspaceNamespace())\n+        .workspaceBillingStatus(workspace.getBillingStatus());\n+  }\n+\n+  @Override\n+  public ResponseEntity<WorkspaceResourceResponse> getDataPageItems(\n+      String workspaceNamespace, String workspaceId) {\n+    // This also enforces registered auth domain.\n+    workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n+\n+    DbWorkspace workspace =\n+        workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n+    Set<DbCohort> cohorts = workspace.getCohorts();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1MzAwNg==", "bodyText": "Can we bite this off all at once? How much does that blow up the ticket?\nI'll be happy to help. I haven't actually written any backend code in like six weeks.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402453006", "createdAt": "2020-04-02T16:37:48Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -1010,6 +1044,76 @@ static String notebookLockingEmailHash(String bucket, String email) {\n     return ResponseEntity.ok(recentWorkspaceResponse);\n   }\n \n+  private WorkspaceResource createWorkspaceResourceFromWorkspace(DbWorkspace workspace) {\n+    return new WorkspaceResource()\n+        .workspaceFirecloudName(workspace.getFirecloudName())\n+        .workspaceId(workspace.getWorkspaceId())\n+        .workspaceNamespace(workspace.getWorkspaceNamespace())\n+        .workspaceBillingStatus(workspace.getBillingStatus());\n+  }\n+\n+  @Override\n+  public ResponseEntity<WorkspaceResourceResponse> getDataPageItems(\n+      String workspaceNamespace, String workspaceId) {\n+    // This also enforces registered auth domain.\n+    workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n+\n+    DbWorkspace workspace =\n+        workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n+    Set<DbCohort> cohorts = workspace.getCohorts();\n+    WorkspaceResourceResponse workspaceResources = new WorkspaceResourceResponse();\n+    workspaceResources.addAll(\n+        cohorts.stream()\n+            .map(cohortMapper::dbModelToClient)\n+            .map(\n+                cohort ->\n+                    createWorkspaceResourceFromWorkspace(workspace)\n+                        .cohort(cohort)\n+                        .modifiedTime(cohort.getLastModifiedTime().toString()))\n+            .collect(Collectors.toList()));\n+    // TODO: Convert cohorts to resources", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210"}, "originalPosition": 107}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbc2e08996166344aca7b418d622e0b8ea3b9543", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/dbc2e08996166344aca7b418d622e0b8ea3b9543", "committedDate": "2020-04-02T18:17:42Z", "message": "Fix UI tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd15a2f41ff14760bab18d69ddd54866b65d9485", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/dd15a2f41ff14760bab18d69ddd54866b65d9485", "committedDate": "2020-04-02T18:33:21Z", "message": "Fix linting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "882fac2621696ec7b0031d8b1f8d57cebdc4bfec", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/882fac2621696ec7b0031d8b1f8d57cebdc4bfec", "committedDate": "2020-04-03T15:49:23Z", "message": "Start addressing PR feedback and try to fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "507031200481ec6c82b5aed503c2d8ad4f21ba87", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/507031200481ec6c82b5aed503c2d8ad4f21ba87", "committedDate": "2020-04-03T17:56:24Z", "message": "Fix tests again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8546ffa02128e89d06e1435c6aac41f7df00d4f", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/c8546ffa02128e89d06e1435c6aac41f7df00d4f", "committedDate": "2020-04-03T18:33:40Z", "message": "Fix spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NDg4Mjgy", "url": "https://github.com/all-of-us/workbench/pull/3333#pullrequestreview-387488282", "createdAt": "2020-04-03T18:29:28Z", "commit": {"oid": "507031200481ec6c82b5aed503c2d8ad4f21ba87"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODoyOToyOFrOGAi7mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMjowMVrOGAkaUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIyNTQ5Nw==", "bodyText": "Discussed offline: if it's not trivial to do this, it's not worth it.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r403225497", "createdAt": "2020-04-03T18:29:28Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/UserMetricsController.java", "diffHunk": "@@ -167,7 +167,7 @@ public void setDistinctWorkspaceLimit(int limit) {\n \n   /** Gets the list of all resources recently access by user in order of access date time */\n   @Override\n-  public ResponseEntity<RecentResourceResponse> getUserRecentResources() {\n+  public ResponseEntity<WorkspaceResourceResponse> getUserRecentResources() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMjM1Ng=="}, "originalCommit": {"oid": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzNDE2OQ==", "bodyText": "Can you please make a gist of what the generated code does if this method is commented out?", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r403234169", "createdAt": "2020-04-03T18:39:53Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java", "diffHunk": "@@ -34,6 +34,13 @@ public Long timestamp(Timestamp timestamp) {\n     return null;\n   }\n \n+  public String timestampToString(Timestamp timestamp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNjAzNg=="}, "originalCommit": {"oid": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzOTA1OA==", "bodyText": "I hear you. I am concerned, though, with the direct dependency creep in this service. One compromise is to check this PR in but keep the ticket open and let it spill over. That keeps you from having to push another developer PR back through the pipeline.\nIt's not scope creep w/r/t the ticket. We just underestimated the implementation time. We target the ticket's functional description and sometimes that involves more work than anticipated if we're to hit our acceptance criteria, which always includes certain principles of good service design. In this case, the main functional goal is speed, and hopefully we can measure that soon after checking this in.\nIf all of these new dependencies are only needed by your new function, then you can make a WorkspaceHydratorService and inject that. It will have only the method you've already got. So it's basically adding one class and pasting the code you have below.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r403239058", "createdAt": "2020-04-03T18:45:47Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -141,6 +161,13 @@ public WorkspacesController(\n       BillingProjectBufferService billingProjectBufferService,\n       WorkspaceService workspaceService,\n       CdrVersionDao cdrVersionDao,\n+      CohortMapper cohortMapper,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzODcwNQ=="}, "originalCommit": {"oid": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0NDk2MA==", "bodyText": "Can you rename the method to indicate this? e.g. enforceAccessLevelAndAuthDomain()", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r403244960", "createdAt": "2020-04-03T18:56:10Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -1010,6 +1043,70 @@ static String notebookLockingEmailHash(String bucket, String email) {\n     return ResponseEntity.ok(recentWorkspaceResponse);\n   }\n \n+  @Override\n+  public ResponseEntity<WorkspaceResourceResponse> getCdrSelectors(\n+      String workspaceNamespace, String workspaceId) {\n+    // This also enforces registered auth domain.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8546ffa02128e89d06e1435c6aac41f7df00d4f"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0NzU5Ng==", "bodyText": "this is a really long argument list. Does Typescript support named args? If not, can you use an input map or whatever it's called?", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r403247596", "createdAt": "2020-04-03T18:59:19Z", "author": {"login": "jaycarlton"}, "path": "ui/src/testing/stubs/workspaces-api-stub.ts", "diffHunk": "@@ -330,4 +339,22 @@ export class WorkspacesApiStub extends WorkspacesApi {\n       resolve({cost: 5.5});\n     });\n   }\n+\n+  getCdrSelectors(workspaceNamespace: string, workspaceId: string): Promise<WorkspaceResourceResponse> {\n+    return new Promise<WorkspaceResourceResponse>(resolve => {\n+      const workspaceResources = convertToResources(\n+        cohortReviewStubs,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8546ffa02128e89d06e1435c6aac41f7df00d4f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0ODAzOQ==", "bodyText": "I'm confused seeing this method called from inside itself. Is this recursion, or is it jus the first level that does it?", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r403248039", "createdAt": "2020-04-03T18:59:49Z", "author": {"login": "jaycarlton"}, "path": "ui/src/testing/stubs/workspaces-api-stub.ts", "diffHunk": "@@ -330,4 +339,22 @@ export class WorkspacesApiStub extends WorkspacesApi {\n       resolve({cost: 5.5});\n     });\n   }\n+\n+  getCdrSelectors(workspaceNamespace: string, workspaceId: string): Promise<WorkspaceResourceResponse> {\n+    return new Promise<WorkspaceResourceResponse>(resolve => {\n+      const workspaceResources = convertToResources(\n+        cohortReviewStubs,\n+        workspaceNamespace,\n+        workspaceId,\n+        WorkspaceAccessLevel.OWNER,\n+        ResourceType.COHORTREVIEW)\n+        .concat(convertToResources(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8546ffa02128e89d06e1435c6aac41f7df00d4f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0OTc0NQ==", "bodyText": "You can just say \"Pagination fields are effectively deprecated; see RW-XXXX\". You can file & assign it if it's not already and let them know you needed a ticket #.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r403249745", "createdAt": "2020-04-03T19:02:01Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java", "diffHunk": "@@ -13,12 +13,35 @@\n     uses = {CommonMappers.class})\n public interface CohortReviewMapper {\n   @Mapping(target = \"etag\", source = \"version\")\n-  @Mapping(target = \"queryResultSize\", ignore = true) // used for pagination, we don't want this on all results\n-  @Mapping(target = \"page\", ignore = true) // used for pagination, we don't want this on all results\n-  @Mapping(target = \"pageSize\", ignore = true) // used for pagination, we don't want this on all results\n-  @Mapping(target = \"sortOrder\", ignore = true) // used for pagination, we don't want this on all results\n-  @Mapping(target = \"sortColumn\", ignore = true) // used for pagination, we don't want this on all results\n-  @Mapping(target = \"participantCohortStatuses\", ignore = true) // this fetches all participants, and can be large, we don't want to fetch by default.\n+  @Mapping(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8546ffa02128e89d06e1435c6aac41f7df00d4f"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ff3f97c40400a9beea5cb484a39fb08aaccb6c1", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/3ff3f97c40400a9beea5cb484a39fb08aaccb6c1", "committedDate": "2020-04-03T19:33:08Z", "message": "PR Feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55ef370767ff4b59936e5f478e303d7efad22044", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/55ef370767ff4b59936e5f478e303d7efad22044", "committedDate": "2020-04-03T20:12:48Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c61e6366c8a3a9d67204ec7915db1dce8968dc0b", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/c61e6366c8a3a9d67204ec7915db1dce8968dc0b", "committedDate": "2020-04-06T18:30:05Z", "message": "More PR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NTEzMDA5", "url": "https://github.com/all-of-us/workbench/pull/3333#pullrequestreview-388513009", "createdAt": "2020-04-06T18:31:56Z", "commit": {"oid": "c61e6366c8a3a9d67204ec7915db1dce8968dc0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODozMTo1NlrOGBkr1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODozMTo1NlrOGBkr1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwMjgwNg==", "bodyText": "@jaycarlton do you know if there's a way to avoid all this repeated boilerplate? It feels like it should be abstractable.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r404302806", "createdAt": "2020-04-06T18:31:56Z", "author": {"login": "s-rubenstein"}, "path": "api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java", "diffHunk": "@@ -100,6 +104,67 @@ void mergeResearchPurposeIntoWorkspace(\n   WorkspaceResource workspaceResourceFromDbWorkspace(\n       DbWorkspace dbWorkspace, WorkspaceAccessLevel accessLevel);\n \n+  @Mapping(target = \"workspaceFirecloudName\", source = \"dbWorkspace.firecloudName\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c61e6366c8a3a9d67204ec7915db1dce8968dc0b"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NTE0MDA3", "url": "https://github.com/all-of-us/workbench/pull/3333#pullrequestreview-388514007", "createdAt": "2020-04-06T18:33:18Z", "commit": {"oid": "c61e6366c8a3a9d67204ec7915db1dce8968dc0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODozMzoxOVrOGBkvFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODozMzoxOVrOGBkvFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwMzYzOQ==", "bodyText": "@jaycarlton is there a way to do this in the mapper? Ideally it gets passed a dbModel object, and knows how to do the mapping?", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r404303639", "createdAt": "2020-04-06T18:33:19Z", "author": {"login": "s-rubenstein"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -1056,52 +1056,43 @@ static String notebookLockingEmailHash(String bucket, String email) {\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n         cohorts.stream()\n-            .map(cohortMapper::dbModelToClient)\n             .map(\n                 cohort ->\n-                    workspaceMapper\n-                        .workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .cohort(cohort)\n-                        .modifiedTime(cohort.getLastModifiedTime().toString()))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohort(\n+                        workspace, workspaceAccessLevel, cohortMapper.dbModelToClient(cohort)))\n             .collect(Collectors.toList()));\n     List<DbCohortReview> reviews =\n         cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n     workspaceResourceResponse.addAll(\n         reviews.stream()\n-            .map(cohortReviewMapper::dbModelToClient)\n             .map(\n                 cohortReview ->\n-                    workspaceMapper\n-                        .workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .modifiedTime(cohortReview.getLastModifiedTime().toString())\n-                        .cohortReview(cohortReview))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohortReview(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        cohortReviewMapper.dbModelToClient(cohortReview)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c61e6366c8a3a9d67204ec7915db1dce8968dc0b"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff2eaddce0c4f1768a996324f4a86a0837868e48", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/ff2eaddce0c4f1768a996324f4a86a0837868e48", "committedDate": "2020-04-07T13:21:53Z", "message": "Wrapper object"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77501af8fc6371ed1b8489e0675545e565a26204", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/77501af8fc6371ed1b8489e0675545e565a26204", "committedDate": "2020-04-07T18:45:50Z", "message": "Separate service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8adab6ce204e9fb06245f7f6ad785b449614bcd", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/e8adab6ce204e9fb06245f7f6ad785b449614bcd", "committedDate": "2020-04-07T20:17:58Z", "message": "test fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDU1OTUz", "url": "https://github.com/all-of-us/workbench/pull/3333#pullrequestreview-389455953", "createdAt": "2020-04-07T20:14:25Z", "commit": {"oid": "77501af8fc6371ed1b8489e0675545e565a26204"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoxNDoyNVrOGCUXPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDozMDo0OFrOGCU61Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4Mzk2NA==", "bodyText": "A little comment about what a CDR selector is would help here.\nIs WorkspaceResource already in use? If not, maybe we could change it (unless a CDR Selector is a subset of workspace resource).", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r405083964", "createdAt": "2020-04-07T20:14:25Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorService.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.pmiops.workbench.cdrselector;\n+\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.WorkspaceAccessLevel;\n+import org.pmiops.workbench.model.WorkspaceResource;\n+\n+import java.util.List;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77501af8fc6371ed1b8489e0675545e565a26204"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NDcwNA==", "bodyText": "Please put a blank line between each category.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r405084704", "createdAt": "2020-04-07T20:15:50Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorServiceImpl.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package org.pmiops.workbench.cdrselector;\n+\n+import org.pmiops.workbench.cohortreview.CohortReviewService;\n+import org.pmiops.workbench.conceptset.ConceptSetService;\n+import org.pmiops.workbench.db.dao.DataSetDao;\n+import org.pmiops.workbench.db.model.DbCohort;\n+import org.pmiops.workbench.db.model.DbCohortReview;\n+import org.pmiops.workbench.db.model.DbConceptSet;\n+import org.pmiops.workbench.db.model.DbDataset;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.WorkspaceAccessLevel;\n+import org.pmiops.workbench.model.WorkspaceResource;\n+import org.pmiops.workbench.model.WorkspaceResourceResponse;\n+import org.pmiops.workbench.utils.WorkspaceMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Service\n+public class CdrSelectorServiceImpl implements CdrSelectorService {\n+  private final CohortReviewService cohortReviewService;\n+  private final ConceptSetService conceptSetService;\n+  private final DataSetDao dataSetDao;\n+  private final WorkspaceMapper workspaceMapper;\n+\n+  @Autowired\n+  public CdrSelectorServiceImpl(\n+      CohortReviewService cohortReviewService,\n+      ConceptSetService conceptSetService,\n+      DataSetDao dataSetDao,\n+      WorkspaceMapper workspaceMapper\n+  ) {\n+    this.cohortReviewService = cohortReviewService;\n+    this.conceptSetService = conceptSetService;\n+    this.dataSetDao = dataSetDao;\n+    this.workspaceMapper = workspaceMapper;\n+  }\n+\n+  @Override\n+  public List<WorkspaceResource> getCdrSelectorsInWorkspace(DbWorkspace dbWorkspace, WorkspaceAccessLevel workspaceAccessLevel) {\n+    List<WorkspaceResource> workspaceResources = new ArrayList<WorkspaceResource>();\n+    final Set<DbCohort> cohorts = dbWorkspace.getCohorts();\n+    workspaceResources.addAll(\n+        cohorts.stream()\n+            .map(\n+                cohort ->\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndDbCohort(\n+                        dbWorkspace, workspaceAccessLevel, cohort))\n+            .collect(Collectors.toList()));\n+    List<DbCohortReview> reviews =\n+        cohortReviewService.getRequiredWithCohortReviews(dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName());\n+    workspaceResources.addAll(\n+        reviews.stream()\n+            .map(\n+                cohortReview ->\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohortReview(\n+                        dbWorkspace,\n+                        workspaceAccessLevel,\n+                        cohortReview))\n+            .collect(Collectors.toList()));\n+    List<DbConceptSet> conceptSets =\n+        conceptSetService.findByWorkspaceId(dbWorkspace.getWorkspaceId());\n+    workspaceResources.addAll(\n+        conceptSets.stream()\n+            .map(\n+                dbConceptSet ->\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndConceptSet(\n+                        dbWorkspace,\n+                        workspaceAccessLevel,\n+                        dbConceptSet))\n+            .collect(Collectors.toList()));\n+    List<DbDataset> datasets =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77501af8fc6371ed1b8489e0675545e565a26204"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NTE2Ng==", "bodyText": "Please list these one per line like we do in import statements in the test classes.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r405085166", "createdAt": "2020-04-07T20:16:41Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java", "diffHunk": "@@ -28,7 +32,7 @@\n @Mapper(\n     componentModel = \"spring\",\n     collectionMappingStrategy = CollectionMappingStrategy.TARGET_IMMUTABLE,\n-    uses = {CommonMappers.class})\n+    uses = {CommonMappers.class, CohortMapper.class, CohortReviewMapper.class, ConceptSetMapper.class, DataSetMapper.class})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77501af8fc6371ed1b8489e0675545e565a26204"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NjQ1Mw==", "bodyText": "Our emerging naming convention for these appears to be xAndYToZ(), not zFromXAndY().", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r405086453", "createdAt": "2020-04-07T20:18:57Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java", "diffHunk": "@@ -104,66 +108,69 @@ void mergeResearchPurposeIntoWorkspace(\n   WorkspaceResource workspaceResourceFromDbWorkspace(\n       DbWorkspace dbWorkspace, WorkspaceAccessLevel accessLevel);\n \n+  @Mapping(target = \"workspaceId\", source = \"dbWorkspace.workspaceId\")\n   @Mapping(target = \"workspaceFirecloudName\", source = \"dbWorkspace.firecloudName\")\n   @Mapping(target = \"workspaceBillingStatus\", source = \"dbWorkspace.billingStatus\")\n   @Mapping(target = \"permission\", source = \"accessLevel\")\n-  @Mapping(target = \"cohort\", source = \"cohort\")\n+  @Mapping(target = \"cohort\", source = \"dbCohort\")\n   // All workspaceResources have one object and all others are null. That should be\n   // defined by a setter where used\n   @Mapping(target = \"cohortReview\", ignore = true)\n   @Mapping(target = \"conceptSet\", ignore = true)\n   @Mapping(target = \"dataSet\", ignore = true)\n   @Mapping(target = \"notebook\", ignore = true)\n   // This should be set when the resource is set\n-  @Mapping(target = \"modifiedTime\", source = \"cohort.lastModifiedTime\")\n-  WorkspaceResource workspaceResourceFromDbWorkspaceAndCohort(\n-      DbWorkspace dbWorkspace, WorkspaceAccessLevel accessLevel, Cohort cohort);\n+  @Mapping(target = \"modifiedTime\", source = \"dbCohort.lastModifiedTime\")\n+  WorkspaceResource workspaceResourceFromDbWorkspaceAndDbCohort(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77501af8fc6371ed1b8489e0675545e565a26204"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NzgxNA==", "bodyText": "This is much cleaner. Thanks.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r405087814", "createdAt": "2020-04-07T20:21:26Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -132,16 +133,10 @@\n           .build();\n \n   private final BillingProjectBufferService billingProjectBufferService;\n+  private final CdrSelectorService cdrSelectorService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77501af8fc6371ed1b8489e0675545e565a26204"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4OTE0OA==", "bodyText": "I didn't look closely at RecentResource before, but I don't think it's a pattern we want to extend without careful consideration.\nInstead of having an array of this type, I would've thought you'd want (instead of an overall array) a single object with an array of Cohort Reviews, Concept Sets, etc. You can certainly array-ify them on the front end if you need to.\nIf I'm reading this right, you've basically got a C language union-style structure, where at most one of each category is populated. That's not a great abstraction in a language where you don't have private fields. But I guess there's no polymorphism in Swagger.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r405089148", "createdAt": "2020-04-07T20:23:50Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -5392,11 +5407,11 @@ definitions:\n \n '\n         type: string\n-  RecentResourceResponse:\n+  WorkspaceResourceResponse:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8adab6ce204e9fb06245f7f6ad785b449614bcd"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA5MzA3Nw==", "bodyText": "Yeah, this would be much easier with a single response object that has a typed list of every selector type.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r405093077", "createdAt": "2020-04-07T20:30:48Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/pages/data/data-page.tsx", "diffHunk": "@@ -107,38 +105,24 @@ export const DataPage = withCurrentWorkspace()(class extends React.Component<\n \n   async loadResources() {\n     try {\n-      const {namespace, id, accessLevel} = this.props.workspace;\n+      const {namespace, id} = this.props.workspace;\n \n       this.setState({\n         isLoading: true\n       });\n-      const [cohorts, cohortReviews, conceptSets, dataSets] = await Promise.all([\n-        fetchWithGlobalErrorHandler(() => cohortsApi().getCohortsInWorkspace(namespace, id)),\n-        cohortReviewApi().getCohortReviewsInWorkspace(namespace, id),\n-        conceptSetsApi().getConceptSetsInWorkspace(namespace, id),\n-        dataSetApi().getDataSetsInWorkspace(namespace, id)\n-      ]);\n-      // Show all concept set except the Dummy demographics Concept set created to be used only\n-      // in dataset\n-      conceptSets.items = conceptSets.items\n-          .filter(conceptSet => conceptSet.domain !== Domain.PERSON);\n-      this.setState({\n-        existingCohortName: cohorts.items.map(cohort => cohort.name),\n-        existingCohortReviewName: cohortReviews.items.map(review => review.cohortName),\n-        existingConceptSetName: conceptSets.items.map(conceptSet => conceptSet.name),\n-        existingDataSetName: dataSets.items.map(dataSet => dataSet.name)\n-      });\n-      let list: RecentResource[] = [];\n-      list = list.concat(convertToResources(cohorts.items, namespace,\n-        id, accessLevel as unknown as WorkspaceAccessLevel, ResourceType.COHORT));\n-      list = list.concat(convertToResources(cohortReviews.items, namespace,\n-        id, accessLevel as unknown as WorkspaceAccessLevel, ResourceType.COHORTREVIEW));\n-      list = list.concat(convertToResources(conceptSets.items, namespace,\n-        id, accessLevel as unknown as WorkspaceAccessLevel, ResourceType.CONCEPTSET));\n-      list = list.concat(convertToResources(dataSets.items, namespace,\n-        id, accessLevel as unknown as WorkspaceAccessLevel, ResourceType.DATASET));\n+      const results = await workspacesApi().getCdrSelectors(namespace, id);\n+\n+      results.map(result => result.modifiedTime ? result.modifiedTime = new Date(Number(result.modifiedTime)).toDateString() : null);\n       this.setState({\n-        resourceList: list\n+        existingCohortName: results.filter(resource => resource.cohort !== null && resource.cohort !== undefined)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8adab6ce204e9fb06245f7f6ad785b449614bcd"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a609b41557f6e82695c3341d3797c0f4fa98f312", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/a609b41557f6e82695c3341d3797c0f4fa98f312", "committedDate": "2020-04-07T20:33:01Z", "message": "Attempt to fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34328bcb555ef940cfc6423ed811e2234df8a306", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/34328bcb555ef940cfc6423ed811e2234df8a306", "committedDate": "2020-04-07T20:45:53Z", "message": "Attempt to fix bq tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52e27d9d2842e004c5e2380b8cda000a20b13e57", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/52e27d9d2842e004c5e2380b8cda000a20b13e57", "committedDate": "2020-04-08T20:37:10Z", "message": "More PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ecdeb48cf95ddc1c9e40bf0f3b1db363bddb9fc", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/5ecdeb48cf95ddc1c9e40bf0f3b1db363bddb9fc", "committedDate": "2020-04-08T20:49:34Z", "message": "Attempt to fix BQ tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fb55fd3444a2d3d334485108ab2042b7bb3b452", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/7fb55fd3444a2d3d334485108ab2042b7bb3b452", "committedDate": "2020-04-09T14:22:25Z", "message": "Attempt to fix all tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b188cffa7355e05a30ff1fb991459bdd11c723b", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/9b188cffa7355e05a30ff1fb991459bdd11c723b", "committedDate": "2020-04-09T15:22:58Z", "message": "Fix linting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODk1MDQ5", "url": "https://github.com/all-of-us/workbench/pull/3333#pullrequestreview-390895049", "createdAt": "2020-04-09T15:24:32Z", "commit": {"oid": "9b188cffa7355e05a30ff1fb991459bdd11c723b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToyNDozMlrOGDdskQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToyNDozMlrOGDdskQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4NTQ1Nw==", "bodyText": "Our linter is opinionated about having these on one line. FYI.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406285457", "createdAt": "2020-04-09T15:24:32Z", "author": {"login": "s-rubenstein"}, "path": "api/src/test/java/org/pmiops/workbench/utils/mappers/WorkspaceMapperTest.java", "diffHunk": "@@ -63,8 +68,15 @@\n   @Autowired private WorkspaceMapper workspaceMapper;\n \n   @TestConfiguration\n-  @Import({WorkspaceMapperImpl.class, CommonMappers.class})\n-  @MockBean({WorkspaceDao.class})\n+  @Import({\n+    CohortMapperImpl.class,\n+    CohortReviewMapperImpl.class,\n+    CommonMappers.class,\n+    ConceptSetMapperImpl.class,\n+    DataSetMapperImpl.class,\n+    WorkspaceMapperImpl.class,\n+  })\n+  @MockBean({UserDao.class, WorkspaceDao.class})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b188cffa7355e05a30ff1fb991459bdd11c723b"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "793c483bdbfc04ffe0de1190650f2527d33d0e70", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/793c483bdbfc04ffe0de1190650f2527d33d0e70", "committedDate": "2020-04-09T21:00:27Z", "message": "Add a unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30393d60dea7a257ca7db7ca6f671179ee10b5c6", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/30393d60dea7a257ca7db7ca6f671179ee10b5c6", "committedDate": "2020-04-10T13:55:52Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/7bc82c33c700e06be9d677f8b2ce0d8de73cdef2", "committedDate": "2020-04-10T14:46:30Z", "message": "Fix linting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjI5NzAz", "url": "https://github.com/all-of-us/workbench/pull/3333#pullrequestreview-391629703", "createdAt": "2020-04-10T19:52:33Z", "commit": {"oid": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo1MjozM1rOGEELfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo1MjozM1rOGEELfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNTk2Nw==", "bodyText": "Would be good to capture the discussion around this name somewhere. In my view I think this it's a coincidence of current product requirements that these all happen to relate to CDR selections - for example, in the future it's conceivable we'd allow users to upload their own data files, and we could expect these to show up on the data tab. It may be cleaner to just have a single API for \"workspace resources\" or \"workspace items\" (which we may already have), then use a filter if you only want certain types.\nConceptually the unifying principle around these resources is that they are logically \"contained by\" the workspace.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406915967", "createdAt": "2020-04-10T19:52:33Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorServiceImpl.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package org.pmiops.workbench.cdrselector;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.pmiops.workbench.cohortreview.CohortReviewService;\n+import org.pmiops.workbench.conceptset.ConceptSetService;\n+import org.pmiops.workbench.db.dao.DataSetDao;\n+import org.pmiops.workbench.db.model.DbCohort;\n+import org.pmiops.workbench.db.model.DbCohortReview;\n+import org.pmiops.workbench.db.model.DbConceptSet;\n+import org.pmiops.workbench.db.model.DbDataset;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.WorkspaceAccessLevel;\n+import org.pmiops.workbench.model.WorkspaceResource;\n+import org.pmiops.workbench.utils.WorkspaceMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class CdrSelectorServiceImpl implements CdrSelectorService {\n+  private final CohortReviewService cohortReviewService;\n+  private final ConceptSetService conceptSetService;\n+  private final DataSetDao dataSetDao;\n+  private final WorkspaceMapper workspaceMapper;\n+\n+  @Autowired\n+  public CdrSelectorServiceImpl(\n+      CohortReviewService cohortReviewService,\n+      ConceptSetService conceptSetService,\n+      DataSetDao dataSetDao,\n+      WorkspaceMapper workspaceMapper) {\n+    this.cohortReviewService = cohortReviewService;\n+    this.conceptSetService = conceptSetService;\n+    this.dataSetDao = dataSetDao;\n+    this.workspaceMapper = workspaceMapper;\n+  }\n+\n+  @Override\n+  public List<WorkspaceResource> getCdrSelectorsInWorkspace(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNTM3NjY2", "url": "https://github.com/all-of-us/workbench/pull/3333#pullrequestreview-391537666", "createdAt": "2020-04-10T16:36:46Z", "commit": {"oid": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2"}, "state": "APPROVED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjozNjo0NlrOGD_asg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMTowMjoyNFrOGEF15Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzNzkzOA==", "bodyText": "you can do a map to the concept set and then filter on Objects.nonNull()", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406837938", "createdAt": "2020-04-10T16:36:46Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java", "diffHunk": "@@ -3229,19 +3231,31 @@ public void getCdrSelectors() {\n                             new DomainValuePair().value(\"VALUE\").domain(Domain.CONDITION))))\n             .getBody();\n \n-\n-    WorkspaceResourceResponse workspaceResourceResponse = workspacesController.getCdrSelectors(workspace.getNamespace(), workspace.getId()).getBody();\n+    WorkspaceResourceResponse workspaceResourceResponse =\n+        workspacesController.getCdrSelectors(workspace.getNamespace(), workspace.getId()).getBody();\n     assertThat(workspaceResourceResponse.size()).isEqualTo(4);\n-    List<WorkspaceResource> cohorts = workspaceResourceResponse.stream().filter(workspaceResource -> workspaceResource.getCohort() != null).collect(Collectors.toList());\n-    List<WorkspaceResource> cohortReviews = workspaceResourceResponse.stream().filter(workspaceResource -> workspaceResource.getCohortReview() != null).collect(Collectors.toList());\n-    List<WorkspaceResource> conceptSets = workspaceResourceResponse.stream().filter(workspaceResource -> workspaceResource.getConceptSet() != null).collect(Collectors.toList());\n-    List<WorkspaceResource> dataSets = workspaceResourceResponse.stream().filter(workspaceResource -> workspaceResource.getDataSet() != null).collect(Collectors.toList());\n+    List<WorkspaceResource> cohorts =\n+        workspaceResourceResponse.stream()\n+            .filter(workspaceResource -> workspaceResource.getCohort() != null)\n+            .collect(Collectors.toList());\n+    List<WorkspaceResource> cohortReviews =\n+        workspaceResourceResponse.stream()\n+            .filter(workspaceResource -> workspaceResource.getCohortReview() != null)\n+            .collect(Collectors.toList());\n+    List<WorkspaceResource> conceptSets =\n+        workspaceResourceResponse.stream()\n+            .filter(workspaceResource -> workspaceResource.getConceptSet() != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyNjg3Mg==", "bodyText": "Yeah, but if we added sharing of datasets or cohorts across workspaces, we'd need another new name. I.e. these items are workspace-scoped today, but that's not really a defining characteristic.\nSome of this discussion will now doubt be in Scout's forthcoming paper.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406926872", "createdAt": "2020-04-10T20:24:26Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorServiceImpl.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package org.pmiops.workbench.cdrselector;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.pmiops.workbench.cohortreview.CohortReviewService;\n+import org.pmiops.workbench.conceptset.ConceptSetService;\n+import org.pmiops.workbench.db.dao.DataSetDao;\n+import org.pmiops.workbench.db.model.DbCohort;\n+import org.pmiops.workbench.db.model.DbCohortReview;\n+import org.pmiops.workbench.db.model.DbConceptSet;\n+import org.pmiops.workbench.db.model.DbDataset;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.WorkspaceAccessLevel;\n+import org.pmiops.workbench.model.WorkspaceResource;\n+import org.pmiops.workbench.utils.WorkspaceMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class CdrSelectorServiceImpl implements CdrSelectorService {\n+  private final CohortReviewService cohortReviewService;\n+  private final ConceptSetService conceptSetService;\n+  private final DataSetDao dataSetDao;\n+  private final WorkspaceMapper workspaceMapper;\n+\n+  @Autowired\n+  public CdrSelectorServiceImpl(\n+      CohortReviewService cohortReviewService,\n+      ConceptSetService conceptSetService,\n+      DataSetDao dataSetDao,\n+      WorkspaceMapper workspaceMapper) {\n+    this.cohortReviewService = cohortReviewService;\n+    this.conceptSetService = conceptSetService;\n+    this.dataSetDao = dataSetDao;\n+    this.workspaceMapper = workspaceMapper;\n+  }\n+\n+  @Override\n+  public List<WorkspaceResource> getCdrSelectorsInWorkspace(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNTk2Nw=="}, "originalCommit": {"oid": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyNzQ4NQ==", "bodyText": "Can you add DbStorageEnums to the uses directive and see if you get this method call for free? I'm pretty sure it'll pick up public static methods that have the desired signature.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406927485", "createdAt": "2020-04-10T20:26:21Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.pmiops.workbench.cohortreview;\n+\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbCohortReview;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.model.CohortReview;\n+import org.pmiops.workbench.model.ReviewStatus;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+\n+@Mapper(\n+    componentModel = \"spring\",\n+    uses = {CommonMappers.class})\n+public interface CohortReviewMapper {\n+  @Mapping(target = \"etag\", source = \"version\", qualifiedByName = \"cdrVersionToEtag\")\n+  // used for pagination. Effectively deprecated, to remove with RW-4706\n+  @Mapping(target = \"queryResultSize\", ignore = true)\n+  @Mapping(target = \"page\", ignore = true)\n+  @Mapping(target = \"pageSize\", ignore = true)\n+  @Mapping(target = \"sortOrder\", ignore = true)\n+  @Mapping(target = \"sortColumn\", ignore = true)\n+  // this fetches all participants, and can be large, we don't want to fetch by\n+  // default. May be removed from object pending design\n+  @Mapping(target = \"participantCohortStatuses\", ignore = true)\n+  CohortReview dbModelToClient(DbCohortReview dbCohortReview);\n+\n+  default ReviewStatus reviewStatusFromStorage(Short reviewStatus) {\n+    return DbStorageEnums.reviewStatusFromStorage(reviewStatus);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyODU0MA==", "bodyText": "If you move the comment above the @Mapping, it shouldn't have this issue.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406928540", "createdAt": "2020-04-10T20:29:04Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java", "diffHunk": "@@ -3,14 +3,39 @@\n import org.mapstruct.Mapper;\n import org.mapstruct.Mapping;\n import org.pmiops.workbench.db.model.DbDataDictionaryEntry;\n+import org.pmiops.workbench.db.model.DbDataset;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.model.DataDictionaryEntry;\n+import org.pmiops.workbench.model.DataSet;\n+import org.pmiops.workbench.model.PrePackagedConceptSetEnum;\n import org.pmiops.workbench.utils.mappers.CommonMappers;\n \n @Mapper(\n     componentModel = \"spring\",\n     uses = {CommonMappers.class})\n public interface DataSetMapper {\n \n+  // This is a lightweight version of a client mapper that doesn't make any extra db calls for extra\n+  // data\n+  @Mapping(target = \"id\", source = \"dataSetId\")\n+  @Mapping(\n+      target = \"conceptSets\",\n+      ignore =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyOTQzNA==", "bodyText": "I'd put a TODO here to define a new DatasetLight type and potentially have the real dataset extend it.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406929434", "createdAt": "2020-04-10T20:30:20Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java", "diffHunk": "@@ -3,14 +3,39 @@\n import org.mapstruct.Mapper;\n import org.mapstruct.Mapping;\n import org.pmiops.workbench.db.model.DbDataDictionaryEntry;\n+import org.pmiops.workbench.db.model.DbDataset;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.model.DataDictionaryEntry;\n+import org.pmiops.workbench.model.DataSet;\n+import org.pmiops.workbench.model.PrePackagedConceptSetEnum;\n import org.pmiops.workbench.utils.mappers.CommonMappers;\n \n @Mapper(\n     componentModel = \"spring\",\n     uses = {CommonMappers.class})\n public interface DataSetMapper {\n \n+  // This is a lightweight version of a client mapper that doesn't make any extra db calls for extra\n+  // data\n+  @Mapping(target = \"id\", source = \"dataSetId\")\n+  @Mapping(\n+      target = \"conceptSets\",\n+      ignore =\n+          true) // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(\n+      target = \"cohorts\",\n+      ignore =\n+          true) // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(\n+      target = \"domainValuePairs\",\n+      ignore = true) // This is stored in a subtable, we may not want to fetch all the time\n+  @Mapping(target = \"etag\", source = \"version\", qualifiedByName = \"cdrVersionToEtag\")\n+  DataSet dbModelToClientLight(DbDataset dbDataset);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzMDYyMA==", "bodyText": "What should be defined by a setter?", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406930620", "createdAt": "2020-04-10T20:32:00Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java", "diffHunk": "@@ -84,6 +99,70 @@ void mergeResearchPurposeIntoWorkspace(\n   @Mapping(target = \"role\", source = \"acl\")\n   UserRole toApiUserRole(DbUser user, FirecloudWorkspaceAccessEntry acl);\n \n+  @Mapping(target = \"workspaceId\", source = \"dbWorkspace.workspaceId\")\n+  @Mapping(target = \"workspaceFirecloudName\", source = \"dbWorkspace.firecloudName\")\n+  @Mapping(target = \"workspaceBillingStatus\", source = \"dbWorkspace.billingStatus\")\n+  @Mapping(target = \"permission\", source = \"accessLevel\")\n+  @Mapping(target = \"cohort\", source = \"dbCohort\")\n+  // All workspaceResources have one object and all others are null. That should be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzMTY1OQ==", "bodyText": "\ud83d\udc4f I love how this dependency bundling worked out.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406931659", "createdAt": "2020-04-10T20:34:02Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -140,6 +143,7 @@\n   public WorkspacesController(\n       BillingProjectBufferService billingProjectBufferService,\n       WorkspaceService workspaceService,\n+      CdrSelectorService cdrSelectorService,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzODkzNA==", "bodyText": "nit: there are a few places where the when().thenReturn() family doesn't work well. I prefer to use doReturn().when(object).action form.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406938934", "createdAt": "2020-04-10T20:51:21Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/CohortAnnotationDefinitionControllerTest.java", "diffHunk": "@@ -476,7 +476,8 @@ private void setupWorkspaceServiceMock() {\n     mockWorkspace.setFirecloudName(NAME);\n     mockWorkspace.setWorkspaceId(workspace.getWorkspaceId());\n \n-    when(workspaceService.enforceWorkspaceAccessLevel(NAMESPACE, NAME, WorkspaceAccessLevel.WRITER))\n+    when(workspaceService.enforceWorkspaceAccessLevelAndRegisteredAuthDomain(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzOTIyOQ==", "bodyText": "nit: I don't know why we're interspersing white lines like a candy cane or something in this file.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406939229", "createdAt": "2020-04-10T20:52:16Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -193,6 +201,8 @@\n \n   @Autowired CdrBigQuerySchemaConfigService cdrBigQuerySchemaConfigService;\n \n+  @Autowired CdrSelectorService cdrSelectorService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzOTUyNw==", "bodyText": "nit: alphabetize concept/common, here and below", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406939527", "createdAt": "2020-04-10T20:53:17Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminControllerTest.java", "diffHunk": "@@ -69,7 +73,15 @@\n   private static final String WORKSPACE_NAME = \"name\";\n \n   @TestConfiguration\n-  @Import({WorkspaceAdminController.class, WorkspaceMapperImpl.class, CommonMappers.class})\n+  @Import({\n+    CohortMapperImpl.class,\n+    CohortReviewMapperImpl.class,\n+    ConceptSetMapperImpl.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MDYyNw==", "bodyText": "If there are fields you explicitly don't want to compare, then please list those.\nIf CohortReview doesn't implement equals(), I'd say look into adding it there. Truth should format the error message usefully depending on which field is different I think.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406940627", "createdAt": "2020-04-10T20:56:32Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java", "diffHunk": "@@ -3145,4 +3162,102 @@ public void copyNotebook_validateActiveBilling() {\n             workspacesController.copyNotebook(\n                 workspace.getNamespace(), workspace.getId(), \"z\", copyNotebookRequest));\n   }\n+\n+  private void compareCohortReviewFields(CohortReview cohortReview, CohortReview cohortReview2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MTc4Mw==", "bodyText": "nit: can you name the arguments observedDataset and expectedDataset? Likewise for your cohort comparison function.\n(There's a story somewhere to change this spelling across the board)", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406941783", "createdAt": "2020-04-10T20:58:52Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java", "diffHunk": "@@ -3145,4 +3162,102 @@ public void copyNotebook_validateActiveBilling() {\n             workspacesController.copyNotebook(\n                 workspace.getNamespace(), workspace.getId(), \"z\", copyNotebookRequest));\n   }\n+\n+  private void compareCohortReviewFields(CohortReview cohortReview, CohortReview cohortReview2) {\n+    assertThat(cohortReview.getCdrVersionId()).isEqualTo(cohortReview2.getCdrVersionId());\n+    assertThat(cohortReview.getCohortDefinition()).isEqualTo(cohortReview2.getCohortDefinition());\n+    assertThat(cohortReview.getCohortId()).isEqualTo(cohortReview2.getCohortId());\n+    assertThat(cohortReview.getCohortName()).isEqualTo(cohortReview2.getCohortName());\n+    assertThat(cohortReview.getCohortReviewId()).isEqualTo(cohortReview2.getCohortReviewId());\n+    assertThat(cohortReview.getCreationTime()).isEqualTo(cohortReview2.getCreationTime());\n+    assertThat(cohortReview.getDescription()).isEqualTo(cohortReview2.getDescription());\n+    assertThat(cohortReview.getMatchedParticipantCount())\n+        .isEqualTo(cohortReview2.getMatchedParticipantCount());\n+  }\n+\n+  private void compareDatasetMetadata(DataSet dataSet, DataSet dataSet2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MjY3NQ==", "bodyText": "can you filter on the type code?", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406942675", "createdAt": "2020-04-10T21:00:42Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java", "diffHunk": "@@ -3145,4 +3162,102 @@ public void copyNotebook_validateActiveBilling() {\n             workspacesController.copyNotebook(\n                 workspace.getNamespace(), workspace.getId(), \"z\", copyNotebookRequest));\n   }\n+\n+  private void compareCohortReviewFields(CohortReview cohortReview, CohortReview cohortReview2) {\n+    assertThat(cohortReview.getCdrVersionId()).isEqualTo(cohortReview2.getCdrVersionId());\n+    assertThat(cohortReview.getCohortDefinition()).isEqualTo(cohortReview2.getCohortDefinition());\n+    assertThat(cohortReview.getCohortId()).isEqualTo(cohortReview2.getCohortId());\n+    assertThat(cohortReview.getCohortName()).isEqualTo(cohortReview2.getCohortName());\n+    assertThat(cohortReview.getCohortReviewId()).isEqualTo(cohortReview2.getCohortReviewId());\n+    assertThat(cohortReview.getCreationTime()).isEqualTo(cohortReview2.getCreationTime());\n+    assertThat(cohortReview.getDescription()).isEqualTo(cohortReview2.getDescription());\n+    assertThat(cohortReview.getMatchedParticipantCount())\n+        .isEqualTo(cohortReview2.getMatchedParticipantCount());\n+  }\n+\n+  private void compareDatasetMetadata(DataSet dataSet, DataSet dataSet2) {\n+    assertThat(dataSet.getDescription()).isEqualTo(dataSet2.getDescription());\n+    assertThat(dataSet.getEtag()).isEqualTo(dataSet2.getEtag());\n+    assertThat(dataSet.getId()).isEqualTo(dataSet2.getId());\n+    assertThat(dataSet.getIncludesAllParticipants())\n+        .isEqualTo(dataSet2.getIncludesAllParticipants());\n+    assertThat(dataSet.getLastModifiedTime()).isEqualTo(dataSet2.getLastModifiedTime());\n+    assertThat(dataSet.getName()).isEqualTo(dataSet2.getName());\n+    assertThat(dataSet.getPrePackagedConceptSet()).isEqualTo(dataSet2.getPrePackagedConceptSet());\n+  }\n+\n+  @Test\n+  public void getCdrSelectors() {\n+    CdrVersionContext.setCdrVersionNoCheckAuthDomain(cdrVersion);\n+    Workspace workspace = workspacesController.createWorkspace(createWorkspace()).getBody();\n+\n+    Cohort cohort =\n+        cohortsController\n+            .createCohort(\n+                workspace.getNamespace(), workspace.getId(), createDefaultCohort(\"cohort\"))\n+            .getBody();\n+    stubBigQueryCohortCalls();\n+    CohortReview cohortReview =\n+        cohortReviewController\n+            .createCohortReview(\n+                workspace.getNamespace(),\n+                workspace.getId(),\n+                cohort.getId(),\n+                cdrVersion.getCdrVersionId(),\n+                new CreateReviewRequest().size(1))\n+            .getBody();\n+    ConceptSet conceptSet =\n+        conceptSetsController\n+            .createConceptSet(\n+                workspace.getNamespace(),\n+                workspace.getId(),\n+                new CreateConceptSetRequest()\n+                    .conceptSet(\n+                        new ConceptSet().name(\"cs1\").description(\"d1\").domain(Domain.CONDITION))\n+                    .addAddedIdsItem(CONCEPT_1.getConceptId()))\n+            .getBody();\n+    DataSet dataSet =\n+        dataSetController\n+            .createDataSet(\n+                workspace.getNamespace(),\n+                workspace.getId(),\n+                new DataSetRequest()\n+                    .prePackagedConceptSet(PrePackagedConceptSetEnum.NONE)\n+                    .addConceptSetIdsItem(conceptSet.getId())\n+                    .addCohortIdsItem(cohort.getId())\n+                    .name(\"dataset\")\n+                    .domainValuePairs(\n+                        ImmutableList.of(\n+                            new DomainValuePair().value(\"VALUE\").domain(Domain.CONDITION))))\n+            .getBody();\n+\n+    WorkspaceResourceResponse workspaceResourceResponse =\n+        workspacesController.getCdrSelectors(workspace.getNamespace(), workspace.getId()).getBody();\n+    assertThat(workspaceResourceResponse.size()).isEqualTo(4);\n+    List<WorkspaceResource> cohorts =\n+        workspaceResourceResponse.stream()\n+            .filter(workspaceResource -> workspaceResource.getCohort() != null)\n+            .collect(Collectors.toList());\n+    List<WorkspaceResource> cohortReviews =\n+        workspaceResourceResponse.stream()\n+            .filter(workspaceResource -> workspaceResource.getCohortReview() != null)\n+            .collect(Collectors.toList());\n+    List<WorkspaceResource> conceptSets =\n+        workspaceResourceResponse.stream()\n+            .filter(workspaceResource -> workspaceResource.getConceptSet() != null)\n+            .collect(Collectors.toList());\n+    List<WorkspaceResource> dataSets =\n+        workspaceResourceResponse.stream()\n+            .filter(workspaceResource -> workspaceResource.getDataSet() != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MjgxOA==", "bodyText": "please use assertThat(conceptSets).hasSize(1); here and wherever you're checking a collection's size", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406942818", "createdAt": "2020-04-10T21:01:12Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java", "diffHunk": "@@ -3145,4 +3162,102 @@ public void copyNotebook_validateActiveBilling() {\n             workspacesController.copyNotebook(\n                 workspace.getNamespace(), workspace.getId(), \"z\", copyNotebookRequest));\n   }\n+\n+  private void compareCohortReviewFields(CohortReview cohortReview, CohortReview cohortReview2) {\n+    assertThat(cohortReview.getCdrVersionId()).isEqualTo(cohortReview2.getCdrVersionId());\n+    assertThat(cohortReview.getCohortDefinition()).isEqualTo(cohortReview2.getCohortDefinition());\n+    assertThat(cohortReview.getCohortId()).isEqualTo(cohortReview2.getCohortId());\n+    assertThat(cohortReview.getCohortName()).isEqualTo(cohortReview2.getCohortName());\n+    assertThat(cohortReview.getCohortReviewId()).isEqualTo(cohortReview2.getCohortReviewId());\n+    assertThat(cohortReview.getCreationTime()).isEqualTo(cohortReview2.getCreationTime());\n+    assertThat(cohortReview.getDescription()).isEqualTo(cohortReview2.getDescription());\n+    assertThat(cohortReview.getMatchedParticipantCount())\n+        .isEqualTo(cohortReview2.getMatchedParticipantCount());\n+  }\n+\n+  private void compareDatasetMetadata(DataSet dataSet, DataSet dataSet2) {\n+    assertThat(dataSet.getDescription()).isEqualTo(dataSet2.getDescription());\n+    assertThat(dataSet.getEtag()).isEqualTo(dataSet2.getEtag());\n+    assertThat(dataSet.getId()).isEqualTo(dataSet2.getId());\n+    assertThat(dataSet.getIncludesAllParticipants())\n+        .isEqualTo(dataSet2.getIncludesAllParticipants());\n+    assertThat(dataSet.getLastModifiedTime()).isEqualTo(dataSet2.getLastModifiedTime());\n+    assertThat(dataSet.getName()).isEqualTo(dataSet2.getName());\n+    assertThat(dataSet.getPrePackagedConceptSet()).isEqualTo(dataSet2.getPrePackagedConceptSet());\n+  }\n+\n+  @Test\n+  public void getCdrSelectors() {\n+    CdrVersionContext.setCdrVersionNoCheckAuthDomain(cdrVersion);\n+    Workspace workspace = workspacesController.createWorkspace(createWorkspace()).getBody();\n+\n+    Cohort cohort =\n+        cohortsController\n+            .createCohort(\n+                workspace.getNamespace(), workspace.getId(), createDefaultCohort(\"cohort\"))\n+            .getBody();\n+    stubBigQueryCohortCalls();\n+    CohortReview cohortReview =\n+        cohortReviewController\n+            .createCohortReview(\n+                workspace.getNamespace(),\n+                workspace.getId(),\n+                cohort.getId(),\n+                cdrVersion.getCdrVersionId(),\n+                new CreateReviewRequest().size(1))\n+            .getBody();\n+    ConceptSet conceptSet =\n+        conceptSetsController\n+            .createConceptSet(\n+                workspace.getNamespace(),\n+                workspace.getId(),\n+                new CreateConceptSetRequest()\n+                    .conceptSet(\n+                        new ConceptSet().name(\"cs1\").description(\"d1\").domain(Domain.CONDITION))\n+                    .addAddedIdsItem(CONCEPT_1.getConceptId()))\n+            .getBody();\n+    DataSet dataSet =\n+        dataSetController\n+            .createDataSet(\n+                workspace.getNamespace(),\n+                workspace.getId(),\n+                new DataSetRequest()\n+                    .prePackagedConceptSet(PrePackagedConceptSetEnum.NONE)\n+                    .addConceptSetIdsItem(conceptSet.getId())\n+                    .addCohortIdsItem(cohort.getId())\n+                    .name(\"dataset\")\n+                    .domainValuePairs(\n+                        ImmutableList.of(\n+                            new DomainValuePair().value(\"VALUE\").domain(Domain.CONDITION))))\n+            .getBody();\n+\n+    WorkspaceResourceResponse workspaceResourceResponse =\n+        workspacesController.getCdrSelectors(workspace.getNamespace(), workspace.getId()).getBody();\n+    assertThat(workspaceResourceResponse.size()).isEqualTo(4);\n+    List<WorkspaceResource> cohorts =\n+        workspaceResourceResponse.stream()\n+            .filter(workspaceResource -> workspaceResource.getCohort() != null)\n+            .collect(Collectors.toList());\n+    List<WorkspaceResource> cohortReviews =\n+        workspaceResourceResponse.stream()\n+            .filter(workspaceResource -> workspaceResource.getCohortReview() != null)\n+            .collect(Collectors.toList());\n+    List<WorkspaceResource> conceptSets =\n+        workspaceResourceResponse.stream()\n+            .filter(workspaceResource -> workspaceResource.getConceptSet() != null)\n+            .collect(Collectors.toList());\n+    List<WorkspaceResource> dataSets =\n+        workspaceResourceResponse.stream()\n+            .filter(workspaceResource -> workspaceResource.getDataSet() != null)\n+            .collect(Collectors.toList());\n+    assertThat(cohorts.size()).isEqualTo(1);\n+    assertThat(cohorts.get(0).getCohort()).isEqualTo(cohort);\n+    assertThat(cohortReviews.size()).isEqualTo(1);\n+    compareCohortReviewFields(cohortReviews.get(0).getCohortReview(), cohortReview);\n+    assertThat(conceptSets.size()).isEqualTo(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MzIwNQ==", "bodyText": "if there's a ticket yet for how this may be changed, please put it in a comment.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406943205", "createdAt": "2020-04-10T21:02:24Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/pages/data/data-page.tsx", "diffHunk": "@@ -107,38 +105,24 @@ export const DataPage = withCurrentWorkspace()(class extends React.Component<\n \n   async loadResources() {\n     try {\n-      const {namespace, id, accessLevel} = this.props.workspace;\n+      const {namespace, id} = this.props.workspace;\n \n       this.setState({\n         isLoading: true\n       });\n-      const [cohorts, cohortReviews, conceptSets, dataSets] = await Promise.all([\n-        fetchWithGlobalErrorHandler(() => cohortsApi().getCohortsInWorkspace(namespace, id)),\n-        cohortReviewApi().getCohortReviewsInWorkspace(namespace, id),\n-        conceptSetsApi().getConceptSetsInWorkspace(namespace, id),\n-        dataSetApi().getDataSetsInWorkspace(namespace, id)\n-      ]);\n-      // Show all concept set except the Dummy demographics Concept set created to be used only\n-      // in dataset\n-      conceptSets.items = conceptSets.items\n-          .filter(conceptSet => conceptSet.domain !== Domain.PERSON);\n-      this.setState({\n-        existingCohortName: cohorts.items.map(cohort => cohort.name),\n-        existingCohortReviewName: cohortReviews.items.map(review => review.cohortName),\n-        existingConceptSetName: conceptSets.items.map(conceptSet => conceptSet.name),\n-        existingDataSetName: dataSets.items.map(dataSet => dataSet.name)\n-      });\n-      let list: RecentResource[] = [];\n-      list = list.concat(convertToResources(cohorts.items, namespace,\n-        id, accessLevel as unknown as WorkspaceAccessLevel, ResourceType.COHORT));\n-      list = list.concat(convertToResources(cohortReviews.items, namespace,\n-        id, accessLevel as unknown as WorkspaceAccessLevel, ResourceType.COHORTREVIEW));\n-      list = list.concat(convertToResources(conceptSets.items, namespace,\n-        id, accessLevel as unknown as WorkspaceAccessLevel, ResourceType.CONCEPTSET));\n-      list = list.concat(convertToResources(dataSets.items, namespace,\n-        id, accessLevel as unknown as WorkspaceAccessLevel, ResourceType.DATASET));\n+      const results = await workspacesApi().getCdrSelectors(namespace, id);\n+\n+      results.map(result => result.modifiedTime ? result.modifiedTime = new Date(Number(result.modifiedTime)).toDateString() : null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1", "committedDate": "2020-04-12T18:35:37Z", "message": "Make take resource types as input"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMTQ4OTA1", "url": "https://github.com/all-of-us/workbench/pull/3333#pullrequestreview-392148905", "createdAt": "2020-04-13T13:38:54Z", "commit": {"oid": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMzozODo1NVrOGEmv9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMzo0MzozNVrOGEm3ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4MjM1Ng==", "bodyText": "This statement is brittle, since we could add other resource types later and they might not get added here. If you really want to validate these things, I'd do a SUPPORTED_RESOURCE_TYPES.containsAll(resourceTypes) at the top.\nBut what might be the bigger flag here is that this endpoint only supports a subset of the enum values in ResourceType. I think it wold be simpler if you had a WorkspaceResourceType and supported all of those. Then you'd never be able to  have this error (by definition). It's not that you can't filter only a hard-coded subset of enum values, but it just leads to edge cases you need to keep up with and test.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r407482356", "createdAt": "2020-04-13T13:38:55Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/cdrselector/WorkspaceResourcesServiceImpl.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.pmiops.workbench.cdrselector;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.pmiops.workbench.cohortreview.CohortReviewService;\n+import org.pmiops.workbench.conceptset.ConceptSetService;\n+import org.pmiops.workbench.db.dao.DataSetDao;\n+import org.pmiops.workbench.db.model.DbCohort;\n+import org.pmiops.workbench.db.model.DbCohortReview;\n+import org.pmiops.workbench.db.model.DbConceptSet;\n+import org.pmiops.workbench.db.model.DbDataset;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.exceptions.ServerErrorException;\n+import org.pmiops.workbench.model.ResourceType;\n+import org.pmiops.workbench.model.WorkspaceAccessLevel;\n+import org.pmiops.workbench.model.WorkspaceResource;\n+import org.pmiops.workbench.utils.WorkspaceMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class WorkspaceResourcesServiceImpl implements WorkspaceResourcesService {\n+  private final CohortReviewService cohortReviewService;\n+  private final ConceptSetService conceptSetService;\n+  private final DataSetDao dataSetDao;\n+  private final WorkspaceMapper workspaceMapper;\n+\n+  @Autowired\n+  public WorkspaceResourcesServiceImpl(\n+      CohortReviewService cohortReviewService,\n+      ConceptSetService conceptSetService,\n+      DataSetDao dataSetDao,\n+      WorkspaceMapper workspaceMapper) {\n+    this.cohortReviewService = cohortReviewService;\n+    this.conceptSetService = conceptSetService;\n+    this.dataSetDao = dataSetDao;\n+    this.workspaceMapper = workspaceMapper;\n+  }\n+\n+  @Override\n+  public List<WorkspaceResource> getWorkspaceResources(\n+      DbWorkspace dbWorkspace, WorkspaceAccessLevel workspaceAccessLevel, List<ResourceType> resourceTypes) {\n+    if (resourceTypes.size() == 0) {\n+      throw new BadRequestException(\"Must provide at least one resource type\");\n+    }\n+\n+    List<WorkspaceResource> workspaceResources = new ArrayList<>();\n+\n+    if (resourceTypes.contains(ResourceType.COHORT)) {\n+      final Set<DbCohort> cohorts = dbWorkspace.getCohorts();\n+      workspaceResources.addAll(\n+          cohorts.stream()\n+              .map(\n+                  cohort ->\n+                      workspaceMapper.dbWorkspaceAndDbCohortToWorkspaceResource(\n+                          dbWorkspace, workspaceAccessLevel, cohort))\n+              .collect(Collectors.toList()));\n+    }\n+    if (resourceTypes.contains(ResourceType.COHORT_REVIEW)) {\n+      List<DbCohortReview> reviews =\n+          cohortReviewService.getRequiredWithCohortReviews(\n+              dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName());\n+      workspaceResources.addAll(\n+          reviews.stream()\n+              .map(\n+                  cohortReview ->\n+                      workspaceMapper.dbWorkspaceAndDbCohortReviewToWorkspaceResource(\n+                          dbWorkspace, workspaceAccessLevel, cohortReview))\n+              .collect(Collectors.toList()));\n+    }\n+    if (resourceTypes.contains(ResourceType.CONCEPT_SET)) {\n+      List<DbConceptSet> conceptSets =\n+          conceptSetService.findByWorkspaceId(dbWorkspace.getWorkspaceId());\n+      workspaceResources.addAll(\n+          conceptSets.stream()\n+              .map(\n+                  dbConceptSet ->\n+                      workspaceMapper.dbWorkspaceAndDbConceptSetToWorkspaceResource(\n+                          dbWorkspace, workspaceAccessLevel, dbConceptSet))\n+              .collect(Collectors.toList()));\n+    }\n+    if (resourceTypes.contains(ResourceType.DATASET)) {\n+      List<DbDataset> datasets =\n+          dataSetDao.findByWorkspaceIdAndInvalid(dbWorkspace.getWorkspaceId(), false);\n+      workspaceResources.addAll(\n+          datasets.stream()\n+              .map(\n+                  dbDataset ->\n+                      workspaceMapper.dbWorkspaceAndDbDatasetToWorkspaceResource(\n+                          dbWorkspace, workspaceAccessLevel, dbDataset))\n+              .collect(Collectors.toList()));\n+    }\n+    if (resourceTypes.contains(ResourceType.COHORT_SEARCH_GROUP) || resourceTypes.contains(ResourceType.COHORT_SEARCH_ITEM) || resourceTypes.contains((ResourceType.NOTEBOOK)) || resourceTypes.contains((ResourceType.WORKSPACE))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4MjczOA==", "bodyText": "nit (if there's time): I'd probably go with just resources as the path segment, since we have it under workspaces anyway.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r407482738", "createdAt": "2020-04-13T13:39:44Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -804,16 +804,22 @@ paths:\n           description: Workspace deletion request accepted\n           schema:\n             \"$ref\": \"#/definitions/EmptyResponse\"\n-  \"/v1/workspaces/{workspaceNamespace}/{workspaceId}/cdr-selectors\":\n+  \"/v1/workspaces/{workspaceNamespace}/{workspaceId}/workspaceResources\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4MzEwMg==", "bodyText": "It's technically resourceTypesToFetch, since you're not naming individual resources.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r407483102", "createdAt": "2020-04-13T13:40:38Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -804,16 +804,22 @@ paths:\n           description: Workspace deletion request accepted\n           schema:\n             \"$ref\": \"#/definitions/EmptyResponse\"\n-  \"/v1/workspaces/{workspaceNamespace}/{workspaceId}/cdr-selectors\":\n+  \"/v1/workspaces/{workspaceNamespace}/{workspaceId}/workspaceResources\":\n     parameters:\n       - \"$ref\": \"#/parameters/workspaceNamespace\"\n       - \"$ref\": \"#/parameters/workspaceId\"\n-    get:\n+    post:\n+      parameters:\n+        - in: body\n+          name: resourcesToFetch", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4Mzc2Ng==", "bodyText": "nit: for future-proofness, I might put your array in a member so you can add other kinds of criteria to this request later if needed.", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r407483766", "createdAt": "2020-04-13T13:42:13Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -5407,6 +5413,10 @@ definitions:\n \n '\n         type: string\n+  WorkspaceResourcesRequest:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4NDM0Ng==", "bodyText": "I'd likely define this array someplace handy and call it DATA_PAGE_WORKSPACE_RESORCE_TYPES or some such, even if there's only one use. (My issue with the 2- or 3-use rule is that the next person may not bother to count the uses, and then it's like a riptide.)", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r407484346", "createdAt": "2020-04-13T13:43:35Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/pages/data/data-page.tsx", "diffHunk": "@@ -110,7 +110,8 @@ export const DataPage = withCurrentWorkspace()(class extends React.Component<\n       this.setState({\n         isLoading: true\n       });\n-      const results = await workspacesApi().getCdrSelectors(namespace, id);\n+      const results = await workspacesApi().getWorkspaceResources(namespace, id,\n+        [ResourceType.COHORT, ResourceType.COHORTREVIEW, ResourceType.CONCEPTSET, ResourceType.DATASET]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "committedDate": "2020-04-13T13:54:30Z", "message": "PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c76bca43b522d26bf622984623fb02149d9e0039", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/c76bca43b522d26bf622984623fb02149d9e0039", "committedDate": "2020-04-13T13:56:01Z", "message": "Add comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "459c082d5e94a12d0eb2654775f792bdff2cf884", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/459c082d5e94a12d0eb2654775f792bdff2cf884", "committedDate": "2020-04-13T14:26:03Z", "message": "More PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d1652584c69ce1cfac671b1d6532ba2b3165dcb", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/2d1652584c69ce1cfac671b1d6532ba2b3165dcb", "committedDate": "2020-04-13T14:40:06Z", "message": "Fix UI test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e6f8d9c7bfedbc64f74abb4b4839b27aa717c2c", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/1e6f8d9c7bfedbc64f74abb4b4839b27aa717c2c", "committedDate": "2020-04-13T15:01:59Z", "message": "Fix linting"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3335, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}