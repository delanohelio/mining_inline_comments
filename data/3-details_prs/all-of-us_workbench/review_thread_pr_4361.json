{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMDc0MDc1", "number": 4361, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjoxODoyNVrOFCA-RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo1OTozM1rOFCDLJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjU3NDEyOnYy", "diffSide": "RIGHT", "path": "api/config/config_local.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjoxODoyNVrOIA9Urg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjoxODoyNVrOIA9Urg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3NTYzMA==", "bodyText": "We can reuse this safely because the code that used it has been removed.", "url": "https://github.com/all-of-us/workbench/pull/4361#discussion_r537875630", "createdAt": "2020-12-07T22:18:25Z", "author": {"login": "jaycarlton"}, "path": "api/config/config_local.json", "diffHunk": "@@ -123,7 +123,7 @@\n   },\n   \"reporting\": {\n     \"dataset\": \"reporting_local\",\n-    \"maxRowsPerInsert\": 200,\n+    \"maxRowsPerInsert\": 800,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f28e657a6e06ed75916c1d39e79829aee8bc383"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjkzNDc3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo1OTozM1rOIBAd9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMjoyNjo1NlrOIBD9Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyNzE1OA==", "bodyText": "nit: addAll can be chained", "url": "https://github.com/all-of-us/workbench/pull/4361#discussion_r537927158", "createdAt": "2020-12-07T23:59:33Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceImpl.java", "diffHunk": "@@ -123,51 +120,70 @@ private TableId getTableId(String tableName) {\n   private List<InsertAllRequest> getInsertAllRequests(ReportingSnapshot reportingSnapshot) {\n     final Map<String, Object> fixedValues =\n         ImmutableMap.of(\"snapshot_timestamp\", reportingSnapshot.getCaptureTimestamp());\n+    // The maxRowsForInsert parameter is in use by the insert query implementation, but that code is\n+    // being removed, freeing it to be used here.\n+    final int batchSize = configProvider.get().reporting.maxRowsPerInsert;\n+    final ImmutableList.Builder<InsertAllRequest> resultBuilder = ImmutableList.builder();\n \n-    return ImmutableList.of(\n-            cohortRequestBuilder.build(\n-                getTableId(CohortColumnValueExtractor.class),\n-                reportingSnapshot.getCohorts(),\n-                fixedValues),\n-            datasetRequestBuilder.build(\n-                getTableId(DatasetColumnValueExtractor.class),\n-                reportingSnapshot.getDatasets(),\n-                fixedValues),\n-            datasetCohortRequestBuilder.build(\n-                getTableId(DatasetCohortColumnValueExtractor.class),\n-                reportingSnapshot.getDatasetCohorts(),\n-                fixedValues),\n-            datasetConceptSetRequestBuilder.build(\n-                getTableId(DatasetConceptSetColumnValueExtractor.class),\n-                reportingSnapshot.getDatasetConceptSets(),\n-                fixedValues),\n-            datasetDomainIIdValueRequestBuilder.build(\n-                getTableId(DatasetDomainColumnValueExtractor.class),\n-                reportingSnapshot.getDatasetDomainIdValues(),\n-                fixedValues),\n-            institutionRequestBuilder.build(\n-                getTableId(InstitutionColumnValueExtractor.class),\n-                reportingSnapshot.getInstitutions(),\n-                fixedValues),\n-            userRequestBuilder.build(\n-                getTableId(UserColumnValueExtractor.class),\n-                reportingSnapshot.getUsers(),\n-                fixedValues),\n-            workspaceRequestBuilder.build(\n-                getTableId(WorkspaceColumnValueExtractor.class),\n-                reportingSnapshot.getWorkspaces(),\n-                fixedValues))\n-        .stream()\n+    resultBuilder.addAll(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa6e1cc1f2502d3bbc0d95398f731d1db73e8f45"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk4NDI3MA==", "bodyText": "oh nice. I'll do that on another submission.", "url": "https://github.com/all-of-us/workbench/pull/4361#discussion_r537984270", "createdAt": "2020-12-08T02:26:56Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceImpl.java", "diffHunk": "@@ -123,51 +120,70 @@ private TableId getTableId(String tableName) {\n   private List<InsertAllRequest> getInsertAllRequests(ReportingSnapshot reportingSnapshot) {\n     final Map<String, Object> fixedValues =\n         ImmutableMap.of(\"snapshot_timestamp\", reportingSnapshot.getCaptureTimestamp());\n+    // The maxRowsForInsert parameter is in use by the insert query implementation, but that code is\n+    // being removed, freeing it to be used here.\n+    final int batchSize = configProvider.get().reporting.maxRowsPerInsert;\n+    final ImmutableList.Builder<InsertAllRequest> resultBuilder = ImmutableList.builder();\n \n-    return ImmutableList.of(\n-            cohortRequestBuilder.build(\n-                getTableId(CohortColumnValueExtractor.class),\n-                reportingSnapshot.getCohorts(),\n-                fixedValues),\n-            datasetRequestBuilder.build(\n-                getTableId(DatasetColumnValueExtractor.class),\n-                reportingSnapshot.getDatasets(),\n-                fixedValues),\n-            datasetCohortRequestBuilder.build(\n-                getTableId(DatasetCohortColumnValueExtractor.class),\n-                reportingSnapshot.getDatasetCohorts(),\n-                fixedValues),\n-            datasetConceptSetRequestBuilder.build(\n-                getTableId(DatasetConceptSetColumnValueExtractor.class),\n-                reportingSnapshot.getDatasetConceptSets(),\n-                fixedValues),\n-            datasetDomainIIdValueRequestBuilder.build(\n-                getTableId(DatasetDomainColumnValueExtractor.class),\n-                reportingSnapshot.getDatasetDomainIdValues(),\n-                fixedValues),\n-            institutionRequestBuilder.build(\n-                getTableId(InstitutionColumnValueExtractor.class),\n-                reportingSnapshot.getInstitutions(),\n-                fixedValues),\n-            userRequestBuilder.build(\n-                getTableId(UserColumnValueExtractor.class),\n-                reportingSnapshot.getUsers(),\n-                fixedValues),\n-            workspaceRequestBuilder.build(\n-                getTableId(WorkspaceColumnValueExtractor.class),\n-                reportingSnapshot.getWorkspaces(),\n-                fixedValues))\n-        .stream()\n+    resultBuilder.addAll(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyNzE1OA=="}, "originalCommit": {"oid": "aa6e1cc1f2502d3bbc0d95398f731d1db73e8f45"}, "originalPosition": 124}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3622, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}