{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2OTg0MDk2", "number": 3040, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDoxNjoxN1rODbAoRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzozMDo1M1rODb_8kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjQ4NDUzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/api/UserController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDoxNjoxN1rOFiQHhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDoxNjoxN1rOFiQHhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ1OTk3Mw==", "bodyText": "Why the PROXY language here? Elsewhere we have END_USER_FOO as a token which seems accurate to me. Is there a semantic difference?", "url": "https://github.com/all-of-us/workbench/pull/3040#discussion_r371459973", "createdAt": "2020-01-27T20:16:17Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/api/UserController.java", "diffHunk": "@@ -57,7 +60,7 @@ public UserController(\n       Provider<WorkbenchConfig> configProvider,\n       FireCloudService fireCloudService,\n       UserService userService,\n-      Provider<Cloudbilling> cloudBillingProvider) {\n+      @Qualifier(USER_PROXY_CLOUD_BILLING) Provider<Cloudbilling> cloudBillingProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd898f0f7e346441d97ce15d27f2b0bda45790b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjQ4OTgzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/billing/GoogleApisConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDoxODowOFrOFiQKyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDoxODowOFrOFiQKyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ2MDgxMQ==", "bodyText": "nit: existing, but why DEFAULT here? Why not just leave blank?", "url": "https://github.com/all-of-us/workbench/pull/3040#discussion_r371460811", "createdAt": "2020-01-27T20:18:08Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/billing/GoogleApisConfig.java", "diffHunk": "@@ -18,22 +19,42 @@\n @Configuration\n public class GoogleApisConfig {\n \n-  @Bean\n+  public static final String USER_PROXY_CLOUD_BILLING = \"USER_PROXY_CLOUD_BILLING\";\n+  public static final String SERVICE_ACCOUNT_CLOUD_BILLING = \"SERVICE_ACCOUNT_CLOUD_BILLING\";\n+\n+  @Bean(USER_PROXY_CLOUD_BILLING)\n   @RequestScope(proxyMode = ScopedProxyMode.DEFAULT)\n-  public Cloudbilling googleCloudBillingApi(\n+  public Cloudbilling userProxyGoogleCloudbillingApi(\n       UserAuthentication userAuthentication,\n       JsonFactory jsonFactory,\n       Provider<WorkbenchConfig> workbenchConfigProvider) {\n-    GoogleCredential credential =\n-        new GoogleCredential()\n-            .setAccessToken(userAuthentication.getCredentials())\n-            .createScoped(\n-                Collections.singletonList(\"https://www.googleapis.com/auth/cloud-platform\"));\n+    return createCloudbillingClient(\n+        userAuthentication.getCredentials(), jsonFactory, workbenchConfigProvider.get());\n+  }\n+\n+  @Bean(SERVICE_ACCOUNT_CLOUD_BILLING)\n+  @RequestScope(proxyMode = ScopedProxyMode.DEFAULT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd898f0f7e346441d97ce15d27f2b0bda45790b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjQ5MDk4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/billing/GoogleApisConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDoxODozMFrOFiQLdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDoxODozMFrOFiQLdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ2MDk4MA==", "bodyText": "nit: Per other  PR comments, would just let the exception propagate", "url": "https://github.com/all-of-us/workbench/pull/3040#discussion_r371460980", "createdAt": "2020-01-27T20:18:30Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/billing/GoogleApisConfig.java", "diffHunk": "@@ -18,22 +19,42 @@\n @Configuration\n public class GoogleApisConfig {\n \n-  @Bean\n+  public static final String USER_PROXY_CLOUD_BILLING = \"USER_PROXY_CLOUD_BILLING\";\n+  public static final String SERVICE_ACCOUNT_CLOUD_BILLING = \"SERVICE_ACCOUNT_CLOUD_BILLING\";\n+\n+  @Bean(USER_PROXY_CLOUD_BILLING)\n   @RequestScope(proxyMode = ScopedProxyMode.DEFAULT)\n-  public Cloudbilling googleCloudBillingApi(\n+  public Cloudbilling userProxyGoogleCloudbillingApi(\n       UserAuthentication userAuthentication,\n       JsonFactory jsonFactory,\n       Provider<WorkbenchConfig> workbenchConfigProvider) {\n-    GoogleCredential credential =\n-        new GoogleCredential()\n-            .setAccessToken(userAuthentication.getCredentials())\n-            .createScoped(\n-                Collections.singletonList(\"https://www.googleapis.com/auth/cloud-platform\"));\n+    return createCloudbillingClient(\n+        userAuthentication.getCredentials(), jsonFactory, workbenchConfigProvider.get());\n+  }\n+\n+  @Bean(SERVICE_ACCOUNT_CLOUD_BILLING)\n+  @RequestScope(proxyMode = ScopedProxyMode.DEFAULT)\n+  public Cloudbilling serviceAccountGoogleCloudbillingApi(\n+      JsonFactory jsonFactory, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    String accessToken;\n+    try {\n+      accessToken =\n+          ServiceAccounts.getScopedServiceAccessToken(\n+              Collections.singletonList(\"https://www.googleapis.com/auth/cloud-platform\"));\n+    } catch (IOException e) {\n+      throw new RuntimeException(\"Could not create service account access token for cloud billing\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd898f0f7e346441d97ce15d27f2b0bda45790b"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDc4NDQ0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMDo0MjoxN1rOFi5biw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo1NToxNlrOFjaYyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzNjg0Mw==", "bodyText": "What's the reason for this change? If it was necessary, it deserves  a comment here.", "url": "https://github.com/all-of-us/workbench/pull/3040#discussion_r372136843", "createdAt": "2020-01-29T00:42:17Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -39,33 +39,36 @@\n    * @return\n    * @throws IOException\n    */\n-  private static GoogleCredentials getScopedServiceCredentials(List<String> scopes)\n+  public static GoogleCredentials getScopedServiceCredentials(List<String> scopes)\n       throws IOException {\n \n+    GoogleCredentials credentials;\n     if (SystemProperty.environment.value().equals(SystemProperty.Environment.Value.Development)) {\n       // When running in a local dev environment, we simply get the application default credentials.\n       //\n       // TODO(gjuggler): it may be possible to remove this branch point altogether, and use the\n       // AppIdentityService approach even when running a local app engine server. I tested this\n       // out locally and it *seemed* to work, but it needs a bit more careful vetting.\n-      return GoogleCredentials.getApplicationDefault().createScoped(scopes);\n+      credentials = GoogleCredentials.getApplicationDefault().createScoped(scopes);\n     } else {\n       AppIdentityService appIdentityService = AppIdentityServiceFactory.getAppIdentityService();\n-      return AppEngineCredentials.newBuilder()\n-          .setScopes(scopes)\n-          .setAppIdentityService(appIdentityService)\n-          .build();\n+      credentials =\n+          AppEngineCredentials.newBuilder()\n+              .setScopes(scopes)\n+              .setAppIdentityService(appIdentityService)\n+              .build();\n     }\n+\n+    credentials.refreshIfExpired();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46a9cf3a34b5db8bb8acec5552d3b2a99528a15e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3NjgxMA==", "bodyText": "It was to preserve existing behavior when I exposed this function publicly.\nBefore this was only called as part of getScopedServiceAccessToken below, which called refreshIfExpired. Now that I exposed a way to call it directly, I decided to add the call into this function to maintain the behavior of always calling refreshIfExpired for credentials returned from this class.\nTBH, I haven't tested its behavior without the call but figured it would be best to keep it the way it is.", "url": "https://github.com/all-of-us/workbench/pull/3040#discussion_r372676810", "createdAt": "2020-01-29T22:55:16Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -39,33 +39,36 @@\n    * @return\n    * @throws IOException\n    */\n-  private static GoogleCredentials getScopedServiceCredentials(List<String> scopes)\n+  public static GoogleCredentials getScopedServiceCredentials(List<String> scopes)\n       throws IOException {\n \n+    GoogleCredentials credentials;\n     if (SystemProperty.environment.value().equals(SystemProperty.Environment.Value.Development)) {\n       // When running in a local dev environment, we simply get the application default credentials.\n       //\n       // TODO(gjuggler): it may be possible to remove this branch point altogether, and use the\n       // AppIdentityService approach even when running a local app engine server. I tested this\n       // out locally and it *seemed* to work, but it needs a bit more careful vetting.\n-      return GoogleCredentials.getApplicationDefault().createScoped(scopes);\n+      credentials = GoogleCredentials.getApplicationDefault().createScoped(scopes);\n     } else {\n       AppIdentityService appIdentityService = AppIdentityServiceFactory.getAppIdentityService();\n-      return AppEngineCredentials.newBuilder()\n-          .setScopes(scopes)\n-          .setAppIdentityService(appIdentityService)\n-          .build();\n+      credentials =\n+          AppEngineCredentials.newBuilder()\n+              .setScopes(scopes)\n+              .setAppIdentityService(appIdentityService)\n+              .build();\n     }\n+\n+    credentials.refreshIfExpired();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzNjg0Mw=="}, "originalCommit": {"oid": "46a9cf3a34b5db8bb8acec5552d3b2a99528a15e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDc4NTI0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/billing/GoogleApisConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMDo0Mjo1MFrOFi5b_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMDo0Mjo1MFrOFi5b_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzNjk1OA==", "bodyText": "nit: cloud-billing is a tighter scope and should probably be preferred here", "url": "https://github.com/all-of-us/workbench/pull/3040#discussion_r372136958", "createdAt": "2020-01-29T00:42:50Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/billing/GoogleApisConfig.java", "diffHunk": "@@ -36,4 +40,21 @@ public Cloudbilling googleCloudBillingApi(\n         .setApplicationName(workbenchConfigProvider.get().server.projectId)\n         .build();\n   }\n+\n+  @Bean(SERVICE_ACCOUNT_CLOUD_BILLING)\n+  @RequestScope\n+  public Cloudbilling serviceAccountGoogleCloudbilling(\n+      JsonFactory jsonFactory, Provider<WorkbenchConfig> workbenchConfigProvider)\n+      throws IOException, GeneralSecurityException {\n+    GoogleCredentials credentials =\n+        ServiceAccounts.getScopedServiceCredentials(\n+            Collections.singletonList(\"https://www.googleapis.com/auth/cloud-platform\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46a9cf3a34b5db8bb8acec5552d3b2a99528a15e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDc5MDU0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMDo0NjowNVrOFi5fJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMDo0NjowNVrOFi5fJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzNzc2NQ==", "bodyText": "Why would we want to retry a 403? I think I see the reason below, but would add a comment here for clarity", "url": "https://github.com/all-of-us/workbench/pull/3040#discussion_r372137765", "createdAt": "2020-01-29T00:46:05Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -645,6 +668,61 @@ public boolean maybeDeleteRecentWorkspace(long workspaceId) {\n     }\n   }\n \n+  private Retryer<ProjectBillingInfo> cloudBillingRetryer =\n+      RetryerBuilder.<ProjectBillingInfo>newBuilder()\n+          .retryIfException(\n+              e ->\n+                  e instanceof GoogleJsonResponseException\n+                      && ((GoogleJsonResponseException) e).getStatusCode() == 403)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46a9cf3a34b5db8bb8acec5552d3b2a99528a15e"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDkzNjc1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMjoyNDoxNFrOFi64ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMzowMzo0NlrOFjakkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2MDYxMw==", "bodyText": "nit: I'd prefer ServerException to a RuntimeException, here and below", "url": "https://github.com/all-of-us/workbench/pull/3040#discussion_r372160613", "createdAt": "2020-01-29T02:24:14Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -645,6 +668,61 @@ public boolean maybeDeleteRecentWorkspace(long workspaceId) {\n     }\n   }\n \n+  private Retryer<ProjectBillingInfo> cloudBillingRetryer =\n+      RetryerBuilder.<ProjectBillingInfo>newBuilder()\n+          .retryIfException(\n+              e ->\n+                  e instanceof GoogleJsonResponseException\n+                      && ((GoogleJsonResponseException) e).getStatusCode() == 403)\n+          .withWaitStrategy(WaitStrategies.exponentialWait())\n+          .withStopStrategy(StopStrategies.stopAfterDelay(60, TimeUnit.SECONDS))\n+          .build();\n+\n+  @Override\n+  public void updateWorkspaceBillingAccount(DbWorkspace workspace, String newBillingAccountName) {\n+    if (!workbenchConfigProvider.get().featureFlags.enableBillingLockout\n+        || newBillingAccountName.equals(workspace.getBillingAccountName())) {\n+      return;\n+    }\n+\n+    Cloudbilling cloudbilling;\n+    if (newBillingAccountName.equals(\n+        workbenchConfigProvider.get().billing.freeTierBillingAccountName())) {\n+      cloudbilling = serviceAccountCloudbillingProvider.get();\n+    } else {\n+      cloudbilling = endUserCloudbillingProvider.get();\n+    }\n+\n+    UpdateBillingInfo request;\n+    try {\n+      request =\n+          cloudbilling\n+              .projects()\n+              .updateBillingInfo(\n+                  \"projects/\" + workspace.getWorkspaceNamespace(),\n+                  new ProjectBillingInfo().setBillingAccountName(newBillingAccountName));\n+    } catch (IOException e) {\n+      throw new RuntimeException(\"Could not create Google Cloud updateBillingInfo request\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46a9cf3a34b5db8bb8acec5552d3b2a99528a15e"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3OTgyNA==", "bodyText": "All the calls are wrapped in a try/catch which rethrows as a ServerException.\nThis was in the interest of layered architecture where API related stuff is kept in the controllers but my stance on that is wavering a bit... Will have to spend some time to try doing a larger refactor and see how it looks.", "url": "https://github.com/all-of-us/workbench/pull/3040#discussion_r372679824", "createdAt": "2020-01-29T23:03:46Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -645,6 +668,61 @@ public boolean maybeDeleteRecentWorkspace(long workspaceId) {\n     }\n   }\n \n+  private Retryer<ProjectBillingInfo> cloudBillingRetryer =\n+      RetryerBuilder.<ProjectBillingInfo>newBuilder()\n+          .retryIfException(\n+              e ->\n+                  e instanceof GoogleJsonResponseException\n+                      && ((GoogleJsonResponseException) e).getStatusCode() == 403)\n+          .withWaitStrategy(WaitStrategies.exponentialWait())\n+          .withStopStrategy(StopStrategies.stopAfterDelay(60, TimeUnit.SECONDS))\n+          .build();\n+\n+  @Override\n+  public void updateWorkspaceBillingAccount(DbWorkspace workspace, String newBillingAccountName) {\n+    if (!workbenchConfigProvider.get().featureFlags.enableBillingLockout\n+        || newBillingAccountName.equals(workspace.getBillingAccountName())) {\n+      return;\n+    }\n+\n+    Cloudbilling cloudbilling;\n+    if (newBillingAccountName.equals(\n+        workbenchConfigProvider.get().billing.freeTierBillingAccountName())) {\n+      cloudbilling = serviceAccountCloudbillingProvider.get();\n+    } else {\n+      cloudbilling = endUserCloudbillingProvider.get();\n+    }\n+\n+    UpdateBillingInfo request;\n+    try {\n+      request =\n+          cloudbilling\n+              .projects()\n+              .updateBillingInfo(\n+                  \"projects/\" + workspace.getWorkspaceNamespace(),\n+                  new ProjectBillingInfo().setBillingAccountName(newBillingAccountName));\n+    } catch (IOException e) {\n+      throw new RuntimeException(\"Could not create Google Cloud updateBillingInfo request\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2MDYxMw=="}, "originalCommit": {"oid": "46a9cf3a34b5db8bb8acec5552d3b2a99528a15e"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDkzODc2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMjoyNTo1MVrOFi65wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMjoyNTo1MVrOFi65wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2MDk2MQ==", "bodyText": "Ah... unfortunate.", "url": "https://github.com/all-of-us/workbench/pull/3040#discussion_r372160961", "createdAt": "2020-01-29T02:25:51Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -645,6 +668,61 @@ public boolean maybeDeleteRecentWorkspace(long workspaceId) {\n     }\n   }\n \n+  private Retryer<ProjectBillingInfo> cloudBillingRetryer =\n+      RetryerBuilder.<ProjectBillingInfo>newBuilder()\n+          .retryIfException(\n+              e ->\n+                  e instanceof GoogleJsonResponseException\n+                      && ((GoogleJsonResponseException) e).getStatusCode() == 403)\n+          .withWaitStrategy(WaitStrategies.exponentialWait())\n+          .withStopStrategy(StopStrategies.stopAfterDelay(60, TimeUnit.SECONDS))\n+          .build();\n+\n+  @Override\n+  public void updateWorkspaceBillingAccount(DbWorkspace workspace, String newBillingAccountName) {\n+    if (!workbenchConfigProvider.get().featureFlags.enableBillingLockout\n+        || newBillingAccountName.equals(workspace.getBillingAccountName())) {\n+      return;\n+    }\n+\n+    Cloudbilling cloudbilling;\n+    if (newBillingAccountName.equals(\n+        workbenchConfigProvider.get().billing.freeTierBillingAccountName())) {\n+      cloudbilling = serviceAccountCloudbillingProvider.get();\n+    } else {\n+      cloudbilling = endUserCloudbillingProvider.get();\n+    }\n+\n+    UpdateBillingInfo request;\n+    try {\n+      request =\n+          cloudbilling\n+              .projects()\n+              .updateBillingInfo(\n+                  \"projects/\" + workspace.getWorkspaceNamespace(),\n+                  new ProjectBillingInfo().setBillingAccountName(newBillingAccountName));\n+    } catch (IOException e) {\n+      throw new RuntimeException(\"Could not create Google Cloud updateBillingInfo request\", e);\n+    }\n+\n+    ProjectBillingInfo response;\n+    try {\n+      // this is necessary because the grant ownership call in create/clone", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46a9cf3a34b5db8bb8acec5552d3b2a99528a15e"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDk0MDYzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMjoyNzowOVrOFi668Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMjoyNzowOVrOFi668Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2MTI2NQ==", "bodyText": "Makes sense to me", "url": "https://github.com/all-of-us/workbench/pull/3040#discussion_r372161265", "createdAt": "2020-01-29T02:27:09Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -233,6 +229,11 @@ private FirecloudWorkspace attemptFirecloudWorkspaceCreation(FirecloudWorkspaceI\n \n     Timestamp now = new Timestamp(clock.instant().toEpochMilli());\n     DbWorkspace dbWorkspace = new DbWorkspace();\n+    // A little unintuitive but setting this here reflects the current state of the workspace", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46a9cf3a34b5db8bb8acec5552d3b2a99528a15e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDk0MjYzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMjoyOTowN1rOFi68TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTo0MDo0OVrOFjvo3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2MTYxMw==", "bodyText": "It would probably be ideal here if the value were carried through on the billing project buffer table, rather than pulled from the config, since the billing account could change while projects are still in the buffer.\nI think that's probably fine to just note this distinction and account for it when we're doing the free tier backfill. I'll make a note there.", "url": "https://github.com/all-of-us/workbench/pull/3040#discussion_r372161613", "createdAt": "2020-01-29T02:29:07Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -233,6 +229,11 @@ private FirecloudWorkspace attemptFirecloudWorkspaceCreation(FirecloudWorkspaceI\n \n     Timestamp now = new Timestamp(clock.instant().toEpochMilli());\n     DbWorkspace dbWorkspace = new DbWorkspace();\n+    // A little unintuitive but setting this here reflects the current state of the workspace", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46a9cf3a34b5db8bb8acec5552d3b2a99528a15e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAyNDk4OA==", "bodyText": "tracking here, https://precisionmedicineinitiative.atlassian.net/browse/RW-4355", "url": "https://github.com/all-of-us/workbench/pull/3040#discussion_r373024988", "createdAt": "2020-01-30T15:40:49Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -233,6 +229,11 @@ private FirecloudWorkspace attemptFirecloudWorkspaceCreation(FirecloudWorkspaceI\n \n     Timestamp now = new Timestamp(clock.instant().toEpochMilli());\n     DbWorkspace dbWorkspace = new DbWorkspace();\n+    // A little unintuitive but setting this here reflects the current state of the workspace", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2MTYxMw=="}, "originalCommit": {"oid": "46a9cf3a34b5db8bb8acec5552d3b2a99528a15e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDk0NjgzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMjozMjo0OFrOFi6-6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTo0OToyNVrOFjv-kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2MjI4Mw==", "bodyText": "Yeah we should definitely have some cron cleanup for orphans here. Do you mind filing a ticket for later?\nFor example, if this request times out (but actually succeeds on the backend), we wind up with a defunct project attached to the user's billing account.", "url": "https://github.com/all-of-us/workbench/pull/3040#discussion_r372162283", "createdAt": "2020-01-29T02:32:48Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -252,7 +253,13 @@ private FirecloudWorkspace attemptFirecloudWorkspaceCreation(FirecloudWorkspaceI\n \n     dbWorkspace.setBillingMigrationStatusEnum(BillingMigrationStatus.NEW);\n \n-    updateWorkspaceBillingAccount(dbWorkspace, workspace.getBillingAccountName());\n+    try {\n+      workspaceService.updateWorkspaceBillingAccount(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46a9cf3a34b5db8bb8acec5552d3b2a99528a15e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAzMDU0NA==", "bodyText": "https://precisionmedicineinitiative.atlassian.net/browse/RW-4356", "url": "https://github.com/all-of-us/workbench/pull/3040#discussion_r373030544", "createdAt": "2020-01-30T15:49:25Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -252,7 +253,13 @@ private FirecloudWorkspace attemptFirecloudWorkspaceCreation(FirecloudWorkspaceI\n \n     dbWorkspace.setBillingMigrationStatusEnum(BillingMigrationStatus.NEW);\n \n-    updateWorkspaceBillingAccount(dbWorkspace, workspace.getBillingAccountName());\n+    try {\n+      workspaceService.updateWorkspaceBillingAccount(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2MjI4Mw=="}, "originalCommit": {"oid": "46a9cf3a34b5db8bb8acec5552d3b2a99528a15e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDk0ODk3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMjozNDoxNFrOFi7AIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMjozNDoxNFrOFi7AIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2MjU5NA==", "bodyText": "The PATCH API is only supposed to include fields that have actually been modified. See all the other conditional checks above. This should mirror that behvaior", "url": "https://github.com/all-of-us/workbench/pull/3040#discussion_r372162594", "createdAt": "2020-01-29T02:34:14Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -425,15 +379,22 @@ private void setDbWorkspaceFields(\n       dbWorkspace.setReviewRequested(researchPurpose.getReviewRequested());\n     }\n \n-    updateWorkspaceBillingAccount(dbWorkspace, request.getWorkspace().getBillingAccountName());\n+    try {\n+      workspaceService.updateWorkspaceBillingAccount(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46a9cf3a34b5db8bb8acec5552d3b2a99528a15e"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDk1MTkxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMjozNjowN1rOFi7BwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNjoxNDo1OVrOFjw8lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2MzAwOA==", "bodyText": "Eventually we'll also want some validation here that the creator still has free tier credit available. Do you know whether this is tracked?", "url": "https://github.com/all-of-us/workbench/pull/3040#discussion_r372163008", "createdAt": "2020-01-29T02:36:07Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -545,14 +510,20 @@ private void setDbWorkspaceFields(\n \n     dbWorkspace.setBillingMigrationStatusEnum(BillingMigrationStatus.NEW);\n \n-    updateWorkspaceBillingAccount(dbWorkspace, body.getWorkspace().getBillingAccountName());\n+    try {\n+      workspaceService.updateWorkspaceBillingAccount(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46a9cf3a34b5db8bb8acec5552d3b2a99528a15e"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA0NjQyMg==", "bodyText": "I thought we were going to allow users to continue creating workspaces in the free tier so I left it as is. I can ask Karthik if we want some UI treatment around how we handle the expired free tier case.", "url": "https://github.com/all-of-us/workbench/pull/3040#discussion_r373046422", "createdAt": "2020-01-30T16:14:59Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -545,14 +510,20 @@ private void setDbWorkspaceFields(\n \n     dbWorkspace.setBillingMigrationStatusEnum(BillingMigrationStatus.NEW);\n \n-    updateWorkspaceBillingAccount(dbWorkspace, body.getWorkspace().getBillingAccountName());\n+    try {\n+      workspaceService.updateWorkspaceBillingAccount(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2MzAwOA=="}, "originalCommit": {"oid": "46a9cf3a34b5db8bb8acec5552d3b2a99528a15e"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzAyNjI4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/api/UserController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNjoyMDoyN1rOFjOrKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNjoyMDoyN1rOFjOrKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ4NDkwNQ==", "bodyText": "nice", "url": "https://github.com/all-of-us/workbench/pull/3040#discussion_r372484905", "createdAt": "2020-01-29T16:20:27Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/api/UserController.java", "diffHunk": "@@ -136,7 +139,7 @@ private BillingAccount freeTierBillingAccount() {\n     return new BillingAccount()\n         .isFreeTier(true)\n         .displayName(\"Use All of Us free credits\")\n-        .name(\"billingAccounts/\" + configProvider.get().billing.accountId)\n+        .name(configProvider.get().billing.freeTierBillingAccountName())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46a9cf3a34b5db8bb8acec5552d3b2a99528a15e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjg1ODQwOnYy", "diffSide": "LEFT", "path": "api/config/config_test.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzozMDo1M1rOFjzlgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzozNDo0MFrOFjzs1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA4OTY2NA==", "bodyText": "is this intentional?", "url": "https://github.com/all-of-us/workbench/pull/3040#discussion_r373089664", "createdAt": "2020-01-30T17:30:53Z", "author": {"login": "jmthibault79"}, "path": "api/config/config_test.json", "diffHunk": "@@ -90,7 +90,7 @@\n     \"enableVpcServicePerimeter\": true,\n     \"enableNewAccountCreation\": true,\n     \"enableRdrExport\": true,\n-    \"enableBillingLockout\": false,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4eb55e7433172fcf93a207e24cd7ecec9c5cc15"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5MTU0MA==", "bodyText": "yeah, I figure we can let it go on test now. It seems to work from my testing.", "url": "https://github.com/all-of-us/workbench/pull/3040#discussion_r373091540", "createdAt": "2020-01-30T17:34:40Z", "author": {"login": "ericsong"}, "path": "api/config/config_test.json", "diffHunk": "@@ -90,7 +90,7 @@\n     \"enableVpcServicePerimeter\": true,\n     \"enableNewAccountCreation\": true,\n     \"enableRdrExport\": true,\n-    \"enableBillingLockout\": false,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA4OTY2NA=="}, "originalCommit": {"oid": "d4eb55e7433172fcf93a207e24cd7ecec9c5cc15"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3500, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}