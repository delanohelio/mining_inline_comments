{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMzU4NDIw", "number": 3285, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNToxMDowOVrODqa4Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNToxMDowOVrODqa4Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODA3MjAzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNToxMDowOVrOF6J4Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjoxMjozM1rOF6M2Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMzYxNQ==", "bodyText": "\ud83e\udd14 The problem we'll run into, though, is that Java uses single inheritance. So I can't use this same trick for the WorkspaceService or NotebookService if any tests for those also need the UserService", "url": "https://github.com/all-of-us/workbench/pull/3285#discussion_r396523615", "createdAt": "2020-03-23T15:10:09Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -307,7 +300,7 @@\n     Zendesk.class,\n     FreeTierBillingService.class\n   })\n-  static class Configuration {\n+  static class Configuration extends UserServiceTestConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "763c36de2338c9a476d6d7c27467f2ae42d4f96e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzNTIwMA==", "bodyText": "Oh, you can have multiple classes annotated with @TestConfiguration! So basically you can just have\n@TestConfiguration\nstatic class UserServiceTestConfig extends UserServiceTestConfiguration {}\n\nand do the same for the others. So this is definitely viable for the test cases.\nI think what I would change would be to leave the main configuration class as Configuration and then add UserServiceConfig, NotebookServiceConfig, etc, as separate classes, so they're on equal footing.", "url": "https://github.com/all-of-us/workbench/pull/3285#discussion_r396535200", "createdAt": "2020-03-23T15:25:04Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -307,7 +300,7 @@\n     Zendesk.class,\n     FreeTierBillingService.class\n   })\n-  static class Configuration {\n+  static class Configuration extends UserServiceTestConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMzYxNQ=="}, "originalCommit": {"oid": "763c36de2338c9a476d6d7c27467f2ae42d4f96e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzNjIwMA==", "bodyText": "very true.  I really want this to be a Scala trait (mixin) but we don't have this.", "url": "https://github.com/all-of-us/workbench/pull/3285#discussion_r396536200", "createdAt": "2020-03-23T15:26:23Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -307,7 +300,7 @@\n     Zendesk.class,\n     FreeTierBillingService.class\n   })\n-  static class Configuration {\n+  static class Configuration extends UserServiceTestConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMzYxNQ=="}, "originalCommit": {"oid": "763c36de2338c9a476d6d7c27467f2ae42d4f96e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzNzk5NQ==", "bodyText": "I vaguely recall it being possible to build a config class that you can @Import into another one, but it's 50/50 whether I made that up.", "url": "https://github.com/all-of-us/workbench/pull/3285#discussion_r396537995", "createdAt": "2020-03-23T15:28:47Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -307,7 +300,7 @@\n     Zendesk.class,\n     FreeTierBillingService.class\n   })\n-  static class Configuration {\n+  static class Configuration extends UserServiceTestConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMzYxNQ=="}, "originalCommit": {"oid": "763c36de2338c9a476d6d7c27467f2ae42d4f96e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0NDQ5MA==", "bodyText": "I vaguely recall it being possible to build a config class that you can @Import into another one, but it's 50/50 whether I made that up.\n\nDefinitely possible \u2013\u00a0see \n  \n    \n      workbench/api/src/integration/java/org/pmiops/workbench/BaseIntegrationTest.java\n    \n    \n         Line 21\n      in\n      c44a41f\n    \n    \n    \n    \n\n        \n          \n           @Import({IntegrationTestConfig.class})", "url": "https://github.com/all-of-us/workbench/pull/3285#discussion_r396544490", "createdAt": "2020-03-23T15:37:09Z", "author": {"login": "gjuggler"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -307,7 +300,7 @@\n     Zendesk.class,\n     FreeTierBillingService.class\n   })\n-  static class Configuration {\n+  static class Configuration extends UserServiceTestConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMzYxNQ=="}, "originalCommit": {"oid": "763c36de2338c9a476d6d7c27467f2ae42d4f96e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU3MjE3MQ==", "bodyText": "This is much better, thank you.  I'll update to this.", "url": "https://github.com/all-of-us/workbench/pull/3285#discussion_r396572171", "createdAt": "2020-03-23T16:12:33Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -307,7 +300,7 @@\n     Zendesk.class,\n     FreeTierBillingService.class\n   })\n-  static class Configuration {\n+  static class Configuration extends UserServiceTestConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMzYxNQ=="}, "originalCommit": {"oid": "763c36de2338c9a476d6d7c27467f2ae42d4f96e"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3045, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}