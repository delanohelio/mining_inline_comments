{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5MTM3Mjg3", "number": 4331, "title": "[RW-5384][risk=no] Check for duplicate rows after streaming upload", "bodyText": "Little service to count rows in all the reporting tables with a given timestamp, to help catch duplicate rows. Logs to warning or info level accordingly.\nThis check shouldn't be necessary for the batch insert query implementation, but it's easy enough to add it there.\nOutput looks something like this (will add new tables as they come online):\napi_1                    | Nov 30, 2020 7:44:18 PM org.pmiops.workbench.reporting.ReportingSnapshotServiceImpl getApplicationDbData\napi_1                    | INFO: Application DB Queries: 68ms\napi_1                    | Nov 30, 2020 7:44:19 PM org.pmiops.workbench.reporting.ReportingSnapshotServiceImpl convertToReportingSnapshot\napi_1                    | INFO: Conversion to ReportingSnapshot: 309ms\napi_1                    | Nov 30, 2020 7:44:19 PM org.pmiops.workbench.reporting.ReportingUploadServiceStreamingImpl uploadSnapshot\napi_1                    | INFO: Streaming upload into cohort table: 2 in 155ms (12.903226 rows/sec)\napi_1                    | Streaming upload into institution table: 20 in 159ms (125.786164 rows/sec)\napi_1                    | Streaming upload into user table: 1 in 160ms (6.250000 rows/sec)\napi_1                    | Streaming upload into workspace table: 15 in 145ms (103.448276 rows/sec)\napi_1                    | \napi_1                    | Nov 30, 2020 7:44:24 PM org.pmiops.workbench.reporting.ReportingVerificationServiceImpl checkUploads\napi_1                    | INFO: Verification queries: 5s 37ms\napi_1                    | Nov 30, 2020 7:44:24 PM org.pmiops.workbench.reporting.ReportingVerificationServiceImpl verifyAndLog\napi_1                    | INFO: Verifying Snapshot 1606765458906:\napi_1                    | Table\tUploaded\tExpected\tDifference(%)\napi_1                    | user\t1\t1\t0 (0.000%)\napi_1                    | workspace\t15\t15\t0 (0.000%)\napi_1                    | cohort\t2\t2\t0 (0.000%)\napi_1                    | institution\t20\t20\t0 (0.000%)\n\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n I have run the E2E tests on ths change against my local UI + API server with yarn test-local\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-11-29T16:46:34Z", "url": "https://github.com/all-of-us/workbench/pull/4331", "merged": true, "mergeCommit": {"oid": "7141bc51b95de4d483f023fffde6620b32a07642"}, "closed": true, "closedAt": "2020-12-01T16:26:35Z", "author": {"login": "jaycarlton"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdhr8AmAFqTU0MTI5Mzc4OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdh7_x8AFqTU0MjAzOTY0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMjkzNzg4", "url": "https://github.com/all-of-us/workbench/pull/4331#pullrequestreview-541293788", "createdAt": "2020-11-30T21:05:29Z", "commit": {"oid": "a04863c6041d428e1f45e9e4c6ed85cde6d924a9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTowNjowMVrOH8N1EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTowNzoxM1rOH8N3Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkwMzE4NQ==", "bodyText": "It doesn't look like this is checking anything, would something like buildReportingUploadResult be a better name?", "url": "https://github.com/all-of-us/workbench/pull/4331#discussion_r532903185", "createdAt": "2020-11-30T21:06:01Z", "author": {"login": "als364"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingVerificationServiceImpl.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.pmiops.workbench.reporting;\n+\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.QueryParameterValue;\n+import com.google.common.base.Stopwatch;\n+import com.google.common.collect.ImmutableList;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.ReportingSnapshot;\n+import org.pmiops.workbench.model.ReportingUploadDetails;\n+import org.pmiops.workbench.model.ReportingUploadResult;\n+import org.pmiops.workbench.reporting.insertion.CohortColumnValueExtractor;\n+import org.pmiops.workbench.reporting.insertion.InstitutionColumnValueExtractor;\n+import org.pmiops.workbench.reporting.insertion.UserColumnValueExtractor;\n+import org.pmiops.workbench.reporting.insertion.WorkspaceColumnValueExtractor;\n+import org.pmiops.workbench.utils.FieldValues;\n+import org.pmiops.workbench.utils.LogFormatters;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ReportingVerificationServiceImpl implements ReportingVerificationService {\n+  private static final Logger logger =\n+      Logger.getLogger(ReportingVerificationServiceImpl.class.getName());\n+\n+  private final BigQueryService bigQueryService;\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+  private Provider<Stopwatch> stopwatchProvider;\n+\n+  public ReportingVerificationServiceImpl(\n+      BigQueryService bigQueryService,\n+      Provider<WorkbenchConfig> workbenchConfigProvider,\n+      Provider<Stopwatch> stopwatchProvider) {\n+    this.bigQueryService = bigQueryService;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+    this.stopwatchProvider = stopwatchProvider;\n+  }\n+\n+  @Override\n+  public ReportingUploadDetails checkUploads(ReportingSnapshot snapshot) {\n+    final Stopwatch verifyStopwatch = stopwatchProvider.get();\n+    verifyStopwatch.start();\n+\n+    final ReportingUploadDetails result =\n+        new ReportingUploadDetails()\n+            .snapshotTimestamp(snapshot.getCaptureTimestamp())\n+            .projectId(getProjectId())\n+            .dataset(getDataset())\n+            .uploads(\n+                ImmutableList.of(\n+                    checkUpload(\n+                        UserColumnValueExtractor.TABLE_NAME,\n+                        snapshot.getCaptureTimestamp(),\n+                        snapshot.getUsers().size()),\n+                    checkUpload(\n+                        WorkspaceColumnValueExtractor.TABLE_NAME,\n+                        snapshot.getCaptureTimestamp(),\n+                        snapshot.getWorkspaces().size()),\n+                    checkUpload(\n+                        CohortColumnValueExtractor.TABLE_NAME,\n+                        snapshot.getCaptureTimestamp(),\n+                        snapshot.getCohorts().size()),\n+                    checkUpload(\n+                        InstitutionColumnValueExtractor.TABLE_NAME,\n+                        snapshot.getCaptureTimestamp(),\n+                        snapshot.getInstitutions().size())));\n+    verifyStopwatch.stop();\n+    logger.info(LogFormatters.duration(\"Verification queries\", verifyStopwatch.elapsed()));\n+    return result;\n+  }\n+\n+  @Override\n+  public ReportingUploadDetails verifyAndLog(ReportingSnapshot reportingSnapshot) {\n+    // check each table. Note that for streaming inputs, not all rows may be immediately available.\n+    final ReportingUploadDetails uploadDetails = checkUploads(reportingSnapshot);\n+    final StringBuilder sb =\n+        new StringBuilder(\n+            String.format(\"Verifying Snapshot %d:\\n\", reportingSnapshot.getCaptureTimestamp()));\n+    sb.append(\"Table\\tUploaded\\tExpected\\tDifference(%)\\n\");\n+    Level detailsLogLevel = Level.INFO;\n+    for (final ReportingUploadResult result : uploadDetails.getUploads()) {\n+      final long delta = result.getDestinationRowCount() - result.getSourceRowCount();\n+      final String relativeDelta;\n+      if (result.getSourceRowCount() == 0) {\n+        relativeDelta = \"\";\n+      } else {\n+        relativeDelta = String.format(\" (%.3f%%)\", 100.0 * delta / result.getSourceRowCount());\n+      }\n+      sb.append(\n+          String.format(\n+              \"%s\\t%d\\t%d\\t%d%s\\n\",\n+              result.getTableName(),\n+              result.getSourceRowCount(),\n+              result.getDestinationRowCount(),\n+              delta,\n+              relativeDelta));\n+      if (!result.getDestinationRowCount().equals(result.getSourceRowCount())) {\n+        detailsLogLevel = Level.WARNING;\n+      }\n+    }\n+    logger.log(detailsLogLevel, sb.toString());\n+    return uploadDetails;\n+  }\n+\n+  public String getDataset() {\n+    return workbenchConfigProvider.get().reporting.dataset;\n+  }\n+\n+  public String getProjectId() {\n+    return workbenchConfigProvider.get().server.projectId;\n+  }\n+\n+  private ReportingUploadResult checkUpload(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a04863c6041d428e1f45e9e4c6ed85cde6d924a9"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkwMzc1NA==", "bodyText": "This isn't checking anything, it's just building a ReportingUploadDetails, perhaps the function name could reflect that", "url": "https://github.com/all-of-us/workbench/pull/4331#discussion_r532903754", "createdAt": "2020-11-30T21:07:13Z", "author": {"login": "als364"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingVerificationServiceImpl.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.pmiops.workbench.reporting;\n+\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.QueryParameterValue;\n+import com.google.common.base.Stopwatch;\n+import com.google.common.collect.ImmutableList;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.ReportingSnapshot;\n+import org.pmiops.workbench.model.ReportingUploadDetails;\n+import org.pmiops.workbench.model.ReportingUploadResult;\n+import org.pmiops.workbench.reporting.insertion.CohortColumnValueExtractor;\n+import org.pmiops.workbench.reporting.insertion.InstitutionColumnValueExtractor;\n+import org.pmiops.workbench.reporting.insertion.UserColumnValueExtractor;\n+import org.pmiops.workbench.reporting.insertion.WorkspaceColumnValueExtractor;\n+import org.pmiops.workbench.utils.FieldValues;\n+import org.pmiops.workbench.utils.LogFormatters;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ReportingVerificationServiceImpl implements ReportingVerificationService {\n+  private static final Logger logger =\n+      Logger.getLogger(ReportingVerificationServiceImpl.class.getName());\n+\n+  private final BigQueryService bigQueryService;\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+  private Provider<Stopwatch> stopwatchProvider;\n+\n+  public ReportingVerificationServiceImpl(\n+      BigQueryService bigQueryService,\n+      Provider<WorkbenchConfig> workbenchConfigProvider,\n+      Provider<Stopwatch> stopwatchProvider) {\n+    this.bigQueryService = bigQueryService;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+    this.stopwatchProvider = stopwatchProvider;\n+  }\n+\n+  @Override\n+  public ReportingUploadDetails checkUploads(ReportingSnapshot snapshot) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a04863c6041d428e1f45e9e4c6ed85cde6d924a9"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25957d87062974a6cbbde5086f7e7758092cf30a", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/25957d87062974a6cbbde5086f7e7758092cf30a", "committedDate": "2020-12-01T15:38:00Z", "message": "rebase"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a04863c6041d428e1f45e9e4c6ed85cde6d924a9", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/a04863c6041d428e1f45e9e4c6ed85cde6d924a9", "committedDate": "2020-11-30T19:46:51Z", "message": "formatting fixes"}, "afterCommit": {"oid": "25957d87062974a6cbbde5086f7e7758092cf30a", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/25957d87062974a6cbbde5086f7e7758092cf30a", "committedDate": "2020-12-01T15:38:00Z", "message": "rebase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMDM5NjQz", "url": "https://github.com/all-of-us/workbench/pull/4331#pullrequestreview-542039643", "createdAt": "2020-12-01T15:50:48Z", "commit": {"oid": "25957d87062974a6cbbde5086f7e7758092cf30a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3691, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}