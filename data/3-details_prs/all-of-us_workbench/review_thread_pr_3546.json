{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MTc2NTI0", "number": 3546, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzowMDowN1rOD56LKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzoxOTowMVrOD56oVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDQ4NTU1OnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/modal/modal.component.html", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzowMDowN1rOGRckSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDo1Mzo0OVrOGSCiPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk0NzAxOQ==", "bodyText": "I'd prefer for this to be named consistently - if the only thing this function does is close the list then name it close throughout.", "url": "https://github.com/all-of-us/workbench/pull/3546#discussion_r420947019", "createdAt": "2020-05-06T17:00:07Z", "author": {"login": "als364"}, "path": "ui/src/app/cohort-search/modal/modal.component.html", "diffHunk": "@@ -129,43 +128,16 @@\n \n         <div *ngIf=\"wizard.type !== criteriaType.AGE\" class=\"col padding-zero\" [ngClass]=\"sidebarClass\">\n           <div class=\"content right\" *ngIf=\"open\">\n-            <div class=\"panel-right-container\">\n-              <h5 class=\"selection-title\">Selected Criteria</h5>\n-              <div class=\"panel-right selected\">\n-                <crit-list-selection-info\n-                  *ngFor=\"let parameter of selections; let p = index\"\n-                  [index]=\"p\"\n-                  [parameter]=\"parameter\"\n-                  [remove]=\"removeSelection\">\n-                </crit-list-selection-info>\n-              </div>\n-              <div class=\"footer\">\n-                <button type=\"button\"\n-                  (click)=\"close()\"\n-                  class=\"btn btn-link\">\n-                  Cancel\n-                </button>\n-                <button  *ngIf=\"showNext\"\n-                  type=\"button\"\n-                  [disabled]=\"selections.length === 0\"\n-                  (click)=\"mode = 'modifiers'\"\n-                  class=\"btn btn-primary\">\n-                  Next\n-                </button>\n-                <button *ngIf=\"showBack\"\n-                  type=\"button\"\n-                  (click)=\"back()\"\n-                  class=\"btn btn-primary\">\n-                  Back\n-                </button>\n-                <button type=\"button\"\n-                  [disabled]=\"disableFlag\"\n-                  (click)=\"finish()\"\n-                  class=\"btn btn-primary\">\n-                  Finish\n-                </button>\n-              </div>\n-            </div>\n+            <crit-selection-list\n+              [back]=\"back\"\n+              [cancel]=\"close\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b91207bb281db2e3fde0aa276728123cdcc8ec11"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2OTA4Nw==", "bodyText": "Makes sense, changed to close", "url": "https://github.com/all-of-us/workbench/pull/3546#discussion_r421569087", "createdAt": "2020-05-07T14:53:49Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/modal/modal.component.html", "diffHunk": "@@ -129,43 +128,16 @@\n \n         <div *ngIf=\"wizard.type !== criteriaType.AGE\" class=\"col padding-zero\" [ngClass]=\"sidebarClass\">\n           <div class=\"content right\" *ngIf=\"open\">\n-            <div class=\"panel-right-container\">\n-              <h5 class=\"selection-title\">Selected Criteria</h5>\n-              <div class=\"panel-right selected\">\n-                <crit-list-selection-info\n-                  *ngFor=\"let parameter of selections; let p = index\"\n-                  [index]=\"p\"\n-                  [parameter]=\"parameter\"\n-                  [remove]=\"removeSelection\">\n-                </crit-list-selection-info>\n-              </div>\n-              <div class=\"footer\">\n-                <button type=\"button\"\n-                  (click)=\"close()\"\n-                  class=\"btn btn-link\">\n-                  Cancel\n-                </button>\n-                <button  *ngIf=\"showNext\"\n-                  type=\"button\"\n-                  [disabled]=\"selections.length === 0\"\n-                  (click)=\"mode = 'modifiers'\"\n-                  class=\"btn btn-primary\">\n-                  Next\n-                </button>\n-                <button *ngIf=\"showBack\"\n-                  type=\"button\"\n-                  (click)=\"back()\"\n-                  class=\"btn btn-primary\">\n-                  Back\n-                </button>\n-                <button type=\"button\"\n-                  [disabled]=\"disableFlag\"\n-                  (click)=\"finish()\"\n-                  class=\"btn btn-primary\">\n-                  Finish\n-                </button>\n-              </div>\n-            </div>\n+            <crit-selection-list\n+              [back]=\"back\"\n+              [cancel]=\"close\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk0NzAxOQ=="}, "originalCommit": {"oid": "b91207bb281db2e3fde0aa276728123cdcc8ec11"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDQ5MDA5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/modal/modal.component.html", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzowMToxNlrOGRcnLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNTowMjoyNVrOGSC7cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk0Nzc1Ng==", "bodyText": "Same with this - why is it named differently in different files?", "url": "https://github.com/all-of-us/workbench/pull/3546#discussion_r420947756", "createdAt": "2020-05-06T17:01:16Z", "author": {"login": "als364"}, "path": "ui/src/app/cohort-search/modal/modal.component.html", "diffHunk": "@@ -129,43 +128,16 @@\n \n         <div *ngIf=\"wizard.type !== criteriaType.AGE\" class=\"col padding-zero\" [ngClass]=\"sidebarClass\">\n           <div class=\"content right\" *ngIf=\"open\">\n-            <div class=\"panel-right-container\">\n-              <h5 class=\"selection-title\">Selected Criteria</h5>\n-              <div class=\"panel-right selected\">\n-                <crit-list-selection-info\n-                  *ngFor=\"let parameter of selections; let p = index\"\n-                  [index]=\"p\"\n-                  [parameter]=\"parameter\"\n-                  [remove]=\"removeSelection\">\n-                </crit-list-selection-info>\n-              </div>\n-              <div class=\"footer\">\n-                <button type=\"button\"\n-                  (click)=\"close()\"\n-                  class=\"btn btn-link\">\n-                  Cancel\n-                </button>\n-                <button  *ngIf=\"showNext\"\n-                  type=\"button\"\n-                  [disabled]=\"selections.length === 0\"\n-                  (click)=\"mode = 'modifiers'\"\n-                  class=\"btn btn-primary\">\n-                  Next\n-                </button>\n-                <button *ngIf=\"showBack\"\n-                  type=\"button\"\n-                  (click)=\"back()\"\n-                  class=\"btn btn-primary\">\n-                  Back\n-                </button>\n-                <button type=\"button\"\n-                  [disabled]=\"disableFlag\"\n-                  (click)=\"finish()\"\n-                  class=\"btn btn-primary\">\n-                  Finish\n-                </button>\n-              </div>\n-            </div>\n+            <crit-selection-list\n+              [back]=\"back\"\n+              [cancel]=\"close\"\n+              [disableFinish]=\"modifiersDisabled\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b91207bb281db2e3fde0aa276728123cdcc8ec11"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU3NTUzOA==", "bodyText": "Changed to modifiersDisabled.  I renamed it when I separated the list into the new component and didn't rename in the parent (parent is next to be converted to React, so would've been cleaned up then).", "url": "https://github.com/all-of-us/workbench/pull/3546#discussion_r421575538", "createdAt": "2020-05-07T15:02:25Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/modal/modal.component.html", "diffHunk": "@@ -129,43 +128,16 @@\n \n         <div *ngIf=\"wizard.type !== criteriaType.AGE\" class=\"col padding-zero\" [ngClass]=\"sidebarClass\">\n           <div class=\"content right\" *ngIf=\"open\">\n-            <div class=\"panel-right-container\">\n-              <h5 class=\"selection-title\">Selected Criteria</h5>\n-              <div class=\"panel-right selected\">\n-                <crit-list-selection-info\n-                  *ngFor=\"let parameter of selections; let p = index\"\n-                  [index]=\"p\"\n-                  [parameter]=\"parameter\"\n-                  [remove]=\"removeSelection\">\n-                </crit-list-selection-info>\n-              </div>\n-              <div class=\"footer\">\n-                <button type=\"button\"\n-                  (click)=\"close()\"\n-                  class=\"btn btn-link\">\n-                  Cancel\n-                </button>\n-                <button  *ngIf=\"showNext\"\n-                  type=\"button\"\n-                  [disabled]=\"selections.length === 0\"\n-                  (click)=\"mode = 'modifiers'\"\n-                  class=\"btn btn-primary\">\n-                  Next\n-                </button>\n-                <button *ngIf=\"showBack\"\n-                  type=\"button\"\n-                  (click)=\"back()\"\n-                  class=\"btn btn-primary\">\n-                  Back\n-                </button>\n-                <button type=\"button\"\n-                  [disabled]=\"disableFlag\"\n-                  (click)=\"finish()\"\n-                  class=\"btn btn-primary\">\n-                  Finish\n-                </button>\n-              </div>\n-            </div>\n+            <crit-selection-list\n+              [back]=\"back\"\n+              [cancel]=\"close\"\n+              [disableFinish]=\"modifiersDisabled\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk0Nzc1Ng=="}, "originalCommit": {"oid": "b91207bb281db2e3fde0aa276728123cdcc8ec11"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDUyNDc3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/selection-list/selection-list.component.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzoxMDoyN1rOGRc9hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNTowNTozMVrOGSDD8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk1MzQ3Ng==", "bodyText": "Consider using the Button component in buttons.tsx", "url": "https://github.com/all-of-us/workbench/pull/3546#discussion_r420953476", "createdAt": "2020-05-06T17:10:27Z", "author": {"login": "als364"}, "path": "ui/src/app/cohort-search/selection-list/selection-list.component.tsx", "diffHunk": "@@ -0,0 +1,232 @@\n+import {Component, Input} from '@angular/core';\n+import * as React from 'react';\n+\n+import {attributeDisplay, nameDisplay, typeDisplay} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {TooltipTrigger} from 'app/components/popups';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {Criteria, DomainType} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  buttonContainer: {\n+    display: 'flex',\n+    justifyContent: 'flex-end',\n+    marginTop: '0.5rem',\n+    padding: '0.45rem 0rem'\n+  },\n+  button: {\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  disabled: {\n+    opacity: 0.4,\n+    pointerEvents: 'none'\n+  },\n+  itemInfo: {\n+    width: '100%',\n+    minWidth: 0,\n+    flex: 1,\n+    display: 'flex',\n+    flexFlow: 'row nowrap',\n+    justifyContent: 'flex-start'\n+  },\n+  itemName: {\n+    flex: 1,\n+    overflow: 'hidden',\n+    textOverflow: 'ellipsis',\n+    whiteSpace: 'nowrap'\n+  },\n+  removeSelection: {\n+    background: 'none',\n+    border: 0,\n+    color: colors.danger,\n+    cursor: 'pointer',\n+    marginRight: '0.25rem',\n+    padding: 0\n+  },\n+  selectionContainer: {\n+    background: colors.white,\n+    border: `2px solid ${colors.primary}`,\n+    borderRadius: '5px',\n+    height: 'calc(100% - 150px)',\n+    overflowX: 'hidden',\n+    overflowY: 'auto',\n+    width: '95%',\n+  },\n+  selectionItem: {\n+    display: 'flex',\n+    fontSize: '14px',\n+    padding: '0.2rem 0.5rem 0',\n+    width: '100%',\n+  },\n+  selectionPanel: {\n+    background: colorWithWhiteness(colors.black, 0.95),\n+    height: '100%',\n+    padding: '0.5rem 0 0 1rem',\n+  },\n+  selectionTitle: {\n+    color: colors.primary,\n+    margin: 0,\n+    padding: '0.5rem 0'\n+  }\n+});\n+\n+interface Selection extends Criteria {\n+  parameterId: string;\n+}\n+\n+interface SelectionInfoProps {\n+  index: number;\n+  selection: Selection;\n+  removeSelection: Function;\n+}\n+\n+interface SelectionInfoState {\n+  truncated: boolean;\n+}\n+\n+export class SelectionInfo extends React.Component<SelectionInfoProps, SelectionInfoState> {\n+  name: HTMLDivElement;\n+  constructor(props: SelectionInfoProps) {\n+    super(props);\n+    this.state = {truncated: false};\n+  }\n+\n+  componentDidMount(): void {\n+    const {offsetWidth, scrollWidth} = this.name;\n+    this.setState({truncated: scrollWidth > offsetWidth});\n+  }\n+\n+  get showType() {\n+    return ![\n+      DomainType.PHYSICALMEASUREMENT.toString(),\n+      DomainType.DRUG.toString(),\n+      DomainType.SURVEY.toString()\n+    ].includes(this.props.selection.domainId);\n+  }\n+\n+  get showOr() {\n+    const {index, selection} = this.props;\n+    return index > 0 && selection.domainId !== DomainType.PERSON.toString();\n+  }\n+\n+  render() {\n+    const {selection, removeSelection} = this.props;\n+    const itemName = <React.Fragment>\n+      {this.showType && <strong>{typeDisplay(selection)}&nbsp;</strong>}\n+      {nameDisplay(selection)} {attributeDisplay(selection)}\n+    </React.Fragment>;\n+    return <div style={styles.selectionItem}>\n+      <button style={styles.removeSelection} onClick={() => removeSelection()}>\n+        <ClrIcon shape='times-circle'/>\n+      </button>\n+      <div style={styles.itemInfo}>\n+        {this.showOr && <strong>OR&nbsp;</strong>}\n+        {!!selection.group && <span>Group&nbsp;</span>}\n+        <TooltipTrigger disabled={!this.state.truncated} content={itemName}>\n+          <div style={styles.itemName} ref={(e) => this.name = e}>\n+            {itemName}\n+          </div>\n+        </TooltipTrigger>\n+      </div>\n+    </div>;\n+  }\n+}\n+\n+interface Props {\n+  back: Function;\n+  cancel: Function;\n+  disableFinish: boolean;\n+  domain: DomainType;\n+  finish: Function;\n+  removeSelection: Function;\n+  selections: Array<Selection>;\n+  setView: Function;\n+  view: string;\n+}\n+\n+export class SelectionList extends React.Component<Props> {\n+  constructor(props: Props) {\n+    super(props);\n+  }\n+\n+  get showModifiers() {\n+    return ![DomainType.PHYSICALMEASUREMENT, DomainType.PERSON, DomainType.SURVEY].includes(this.props.domain);\n+  }\n+\n+  get showNext() {\n+    return this.showModifiers && this.props.view !== 'modifiers';\n+  }\n+\n+  get showBack() {\n+    return this.showModifiers && this.props.view === 'modifiers';\n+  }\n+\n+  render() {\n+    const {back, cancel, disableFinish, finish, removeSelection, selections, setView} = this.props;\n+    return <div style={styles.selectionPanel}>\n+      <h5 style={styles.selectionTitle}>Selected Criteria</h5>\n+      <div style={styles.selectionContainer}>\n+        {selections.map((selection, s) =>\n+          <SelectionInfo key={s}\n+            index={s}\n+            selection={selection}\n+            removeSelection={() => removeSelection(selection)}/>\n+        )}\n+      </div>\n+      <div style={styles.buttonContainer}>\n+        <button style={{...styles.button, background: 'transparent', color: colors.dark, fontSize: '14px'}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b91207bb281db2e3fde0aa276728123cdcc8ec11"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU3NzcxMg==", "bodyText": "Good idea, switch all 4 buttons here to use Button", "url": "https://github.com/all-of-us/workbench/pull/3546#discussion_r421577712", "createdAt": "2020-05-07T15:05:31Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/selection-list/selection-list.component.tsx", "diffHunk": "@@ -0,0 +1,232 @@\n+import {Component, Input} from '@angular/core';\n+import * as React from 'react';\n+\n+import {attributeDisplay, nameDisplay, typeDisplay} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {TooltipTrigger} from 'app/components/popups';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {Criteria, DomainType} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  buttonContainer: {\n+    display: 'flex',\n+    justifyContent: 'flex-end',\n+    marginTop: '0.5rem',\n+    padding: '0.45rem 0rem'\n+  },\n+  button: {\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  disabled: {\n+    opacity: 0.4,\n+    pointerEvents: 'none'\n+  },\n+  itemInfo: {\n+    width: '100%',\n+    minWidth: 0,\n+    flex: 1,\n+    display: 'flex',\n+    flexFlow: 'row nowrap',\n+    justifyContent: 'flex-start'\n+  },\n+  itemName: {\n+    flex: 1,\n+    overflow: 'hidden',\n+    textOverflow: 'ellipsis',\n+    whiteSpace: 'nowrap'\n+  },\n+  removeSelection: {\n+    background: 'none',\n+    border: 0,\n+    color: colors.danger,\n+    cursor: 'pointer',\n+    marginRight: '0.25rem',\n+    padding: 0\n+  },\n+  selectionContainer: {\n+    background: colors.white,\n+    border: `2px solid ${colors.primary}`,\n+    borderRadius: '5px',\n+    height: 'calc(100% - 150px)',\n+    overflowX: 'hidden',\n+    overflowY: 'auto',\n+    width: '95%',\n+  },\n+  selectionItem: {\n+    display: 'flex',\n+    fontSize: '14px',\n+    padding: '0.2rem 0.5rem 0',\n+    width: '100%',\n+  },\n+  selectionPanel: {\n+    background: colorWithWhiteness(colors.black, 0.95),\n+    height: '100%',\n+    padding: '0.5rem 0 0 1rem',\n+  },\n+  selectionTitle: {\n+    color: colors.primary,\n+    margin: 0,\n+    padding: '0.5rem 0'\n+  }\n+});\n+\n+interface Selection extends Criteria {\n+  parameterId: string;\n+}\n+\n+interface SelectionInfoProps {\n+  index: number;\n+  selection: Selection;\n+  removeSelection: Function;\n+}\n+\n+interface SelectionInfoState {\n+  truncated: boolean;\n+}\n+\n+export class SelectionInfo extends React.Component<SelectionInfoProps, SelectionInfoState> {\n+  name: HTMLDivElement;\n+  constructor(props: SelectionInfoProps) {\n+    super(props);\n+    this.state = {truncated: false};\n+  }\n+\n+  componentDidMount(): void {\n+    const {offsetWidth, scrollWidth} = this.name;\n+    this.setState({truncated: scrollWidth > offsetWidth});\n+  }\n+\n+  get showType() {\n+    return ![\n+      DomainType.PHYSICALMEASUREMENT.toString(),\n+      DomainType.DRUG.toString(),\n+      DomainType.SURVEY.toString()\n+    ].includes(this.props.selection.domainId);\n+  }\n+\n+  get showOr() {\n+    const {index, selection} = this.props;\n+    return index > 0 && selection.domainId !== DomainType.PERSON.toString();\n+  }\n+\n+  render() {\n+    const {selection, removeSelection} = this.props;\n+    const itemName = <React.Fragment>\n+      {this.showType && <strong>{typeDisplay(selection)}&nbsp;</strong>}\n+      {nameDisplay(selection)} {attributeDisplay(selection)}\n+    </React.Fragment>;\n+    return <div style={styles.selectionItem}>\n+      <button style={styles.removeSelection} onClick={() => removeSelection()}>\n+        <ClrIcon shape='times-circle'/>\n+      </button>\n+      <div style={styles.itemInfo}>\n+        {this.showOr && <strong>OR&nbsp;</strong>}\n+        {!!selection.group && <span>Group&nbsp;</span>}\n+        <TooltipTrigger disabled={!this.state.truncated} content={itemName}>\n+          <div style={styles.itemName} ref={(e) => this.name = e}>\n+            {itemName}\n+          </div>\n+        </TooltipTrigger>\n+      </div>\n+    </div>;\n+  }\n+}\n+\n+interface Props {\n+  back: Function;\n+  cancel: Function;\n+  disableFinish: boolean;\n+  domain: DomainType;\n+  finish: Function;\n+  removeSelection: Function;\n+  selections: Array<Selection>;\n+  setView: Function;\n+  view: string;\n+}\n+\n+export class SelectionList extends React.Component<Props> {\n+  constructor(props: Props) {\n+    super(props);\n+  }\n+\n+  get showModifiers() {\n+    return ![DomainType.PHYSICALMEASUREMENT, DomainType.PERSON, DomainType.SURVEY].includes(this.props.domain);\n+  }\n+\n+  get showNext() {\n+    return this.showModifiers && this.props.view !== 'modifiers';\n+  }\n+\n+  get showBack() {\n+    return this.showModifiers && this.props.view === 'modifiers';\n+  }\n+\n+  render() {\n+    const {back, cancel, disableFinish, finish, removeSelection, selections, setView} = this.props;\n+    return <div style={styles.selectionPanel}>\n+      <h5 style={styles.selectionTitle}>Selected Criteria</h5>\n+      <div style={styles.selectionContainer}>\n+        {selections.map((selection, s) =>\n+          <SelectionInfo key={s}\n+            index={s}\n+            selection={selection}\n+            removeSelection={() => removeSelection(selection)}/>\n+        )}\n+      </div>\n+      <div style={styles.buttonContainer}>\n+        <button style={{...styles.button, background: 'transparent', color: colors.dark, fontSize: '14px'}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk1MzQ3Ng=="}, "originalCommit": {"oid": "b91207bb281db2e3fde0aa276728123cdcc8ec11"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDU2MDIwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/selection-list/selection-list.component.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzoxOTowMVrOGRdTeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNTowNTo0MlrOGSDEbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk1OTA5Ng==", "bodyText": "You get most of these styles for free with the Button component.", "url": "https://github.com/all-of-us/workbench/pull/3546#discussion_r420959096", "createdAt": "2020-05-06T17:19:01Z", "author": {"login": "als364"}, "path": "ui/src/app/cohort-search/selection-list/selection-list.component.tsx", "diffHunk": "@@ -0,0 +1,232 @@\n+import {Component, Input} from '@angular/core';\n+import * as React from 'react';\n+\n+import {attributeDisplay, nameDisplay, typeDisplay} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {TooltipTrigger} from 'app/components/popups';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {Criteria, DomainType} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  buttonContainer: {\n+    display: 'flex',\n+    justifyContent: 'flex-end',\n+    marginTop: '0.5rem',\n+    padding: '0.45rem 0rem'\n+  },\n+  button: {\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  disabled: {\n+    opacity: 0.4,\n+    pointerEvents: 'none'\n+  },\n+  itemInfo: {\n+    width: '100%',\n+    minWidth: 0,\n+    flex: 1,\n+    display: 'flex',\n+    flexFlow: 'row nowrap',\n+    justifyContent: 'flex-start'\n+  },\n+  itemName: {\n+    flex: 1,\n+    overflow: 'hidden',\n+    textOverflow: 'ellipsis',\n+    whiteSpace: 'nowrap'\n+  },\n+  removeSelection: {\n+    background: 'none',\n+    border: 0,\n+    color: colors.danger,\n+    cursor: 'pointer',\n+    marginRight: '0.25rem',\n+    padding: 0\n+  },\n+  selectionContainer: {\n+    background: colors.white,\n+    border: `2px solid ${colors.primary}`,\n+    borderRadius: '5px',\n+    height: 'calc(100% - 150px)',\n+    overflowX: 'hidden',\n+    overflowY: 'auto',\n+    width: '95%',\n+  },\n+  selectionItem: {\n+    display: 'flex',\n+    fontSize: '14px',\n+    padding: '0.2rem 0.5rem 0',\n+    width: '100%',\n+  },\n+  selectionPanel: {\n+    background: colorWithWhiteness(colors.black, 0.95),\n+    height: '100%',\n+    padding: '0.5rem 0 0 1rem',\n+  },\n+  selectionTitle: {\n+    color: colors.primary,\n+    margin: 0,\n+    padding: '0.5rem 0'\n+  }\n+});\n+\n+interface Selection extends Criteria {\n+  parameterId: string;\n+}\n+\n+interface SelectionInfoProps {\n+  index: number;\n+  selection: Selection;\n+  removeSelection: Function;\n+}\n+\n+interface SelectionInfoState {\n+  truncated: boolean;\n+}\n+\n+export class SelectionInfo extends React.Component<SelectionInfoProps, SelectionInfoState> {\n+  name: HTMLDivElement;\n+  constructor(props: SelectionInfoProps) {\n+    super(props);\n+    this.state = {truncated: false};\n+  }\n+\n+  componentDidMount(): void {\n+    const {offsetWidth, scrollWidth} = this.name;\n+    this.setState({truncated: scrollWidth > offsetWidth});\n+  }\n+\n+  get showType() {\n+    return ![\n+      DomainType.PHYSICALMEASUREMENT.toString(),\n+      DomainType.DRUG.toString(),\n+      DomainType.SURVEY.toString()\n+    ].includes(this.props.selection.domainId);\n+  }\n+\n+  get showOr() {\n+    const {index, selection} = this.props;\n+    return index > 0 && selection.domainId !== DomainType.PERSON.toString();\n+  }\n+\n+  render() {\n+    const {selection, removeSelection} = this.props;\n+    const itemName = <React.Fragment>\n+      {this.showType && <strong>{typeDisplay(selection)}&nbsp;</strong>}\n+      {nameDisplay(selection)} {attributeDisplay(selection)}\n+    </React.Fragment>;\n+    return <div style={styles.selectionItem}>\n+      <button style={styles.removeSelection} onClick={() => removeSelection()}>\n+        <ClrIcon shape='times-circle'/>\n+      </button>\n+      <div style={styles.itemInfo}>\n+        {this.showOr && <strong>OR&nbsp;</strong>}\n+        {!!selection.group && <span>Group&nbsp;</span>}\n+        <TooltipTrigger disabled={!this.state.truncated} content={itemName}>\n+          <div style={styles.itemName} ref={(e) => this.name = e}>\n+            {itemName}\n+          </div>\n+        </TooltipTrigger>\n+      </div>\n+    </div>;\n+  }\n+}\n+\n+interface Props {\n+  back: Function;\n+  cancel: Function;\n+  disableFinish: boolean;\n+  domain: DomainType;\n+  finish: Function;\n+  removeSelection: Function;\n+  selections: Array<Selection>;\n+  setView: Function;\n+  view: string;\n+}\n+\n+export class SelectionList extends React.Component<Props> {\n+  constructor(props: Props) {\n+    super(props);\n+  }\n+\n+  get showModifiers() {\n+    return ![DomainType.PHYSICALMEASUREMENT, DomainType.PERSON, DomainType.SURVEY].includes(this.props.domain);\n+  }\n+\n+  get showNext() {\n+    return this.showModifiers && this.props.view !== 'modifiers';\n+  }\n+\n+  get showBack() {\n+    return this.showModifiers && this.props.view === 'modifiers';\n+  }\n+\n+  render() {\n+    const {back, cancel, disableFinish, finish, removeSelection, selections, setView} = this.props;\n+    return <div style={styles.selectionPanel}>\n+      <h5 style={styles.selectionTitle}>Selected Criteria</h5>\n+      <div style={styles.selectionContainer}>\n+        {selections.map((selection, s) =>\n+          <SelectionInfo key={s}\n+            index={s}\n+            selection={selection}\n+            removeSelection={() => removeSelection(selection)}/>\n+        )}\n+      </div>\n+      <div style={styles.buttonContainer}>\n+        <button style={{...styles.button, background: 'transparent', color: colors.dark, fontSize: '14px'}}\n+          onClick={() => cancel()}>\n+          Cancel\n+        </button>\n+        {this.showNext && <button onClick={() => setView('modifiers')}\n+          style={{\n+            ...styles.button,\n+            ...(selections.length === 0 ? styles.disabled : {}),\n+            background: colors.primary, color: colors.white}}>\n+          Next\n+        </button>}\n+        {this.showBack && <button style={{...styles.button, background: colors.primary, color: colors.white}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b91207bb281db2e3fde0aa276728123cdcc8ec11"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU3NzgzNw==", "bodyText": "Switched.", "url": "https://github.com/all-of-us/workbench/pull/3546#discussion_r421577837", "createdAt": "2020-05-07T15:05:42Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/selection-list/selection-list.component.tsx", "diffHunk": "@@ -0,0 +1,232 @@\n+import {Component, Input} from '@angular/core';\n+import * as React from 'react';\n+\n+import {attributeDisplay, nameDisplay, typeDisplay} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {TooltipTrigger} from 'app/components/popups';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {Criteria, DomainType} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  buttonContainer: {\n+    display: 'flex',\n+    justifyContent: 'flex-end',\n+    marginTop: '0.5rem',\n+    padding: '0.45rem 0rem'\n+  },\n+  button: {\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  disabled: {\n+    opacity: 0.4,\n+    pointerEvents: 'none'\n+  },\n+  itemInfo: {\n+    width: '100%',\n+    minWidth: 0,\n+    flex: 1,\n+    display: 'flex',\n+    flexFlow: 'row nowrap',\n+    justifyContent: 'flex-start'\n+  },\n+  itemName: {\n+    flex: 1,\n+    overflow: 'hidden',\n+    textOverflow: 'ellipsis',\n+    whiteSpace: 'nowrap'\n+  },\n+  removeSelection: {\n+    background: 'none',\n+    border: 0,\n+    color: colors.danger,\n+    cursor: 'pointer',\n+    marginRight: '0.25rem',\n+    padding: 0\n+  },\n+  selectionContainer: {\n+    background: colors.white,\n+    border: `2px solid ${colors.primary}`,\n+    borderRadius: '5px',\n+    height: 'calc(100% - 150px)',\n+    overflowX: 'hidden',\n+    overflowY: 'auto',\n+    width: '95%',\n+  },\n+  selectionItem: {\n+    display: 'flex',\n+    fontSize: '14px',\n+    padding: '0.2rem 0.5rem 0',\n+    width: '100%',\n+  },\n+  selectionPanel: {\n+    background: colorWithWhiteness(colors.black, 0.95),\n+    height: '100%',\n+    padding: '0.5rem 0 0 1rem',\n+  },\n+  selectionTitle: {\n+    color: colors.primary,\n+    margin: 0,\n+    padding: '0.5rem 0'\n+  }\n+});\n+\n+interface Selection extends Criteria {\n+  parameterId: string;\n+}\n+\n+interface SelectionInfoProps {\n+  index: number;\n+  selection: Selection;\n+  removeSelection: Function;\n+}\n+\n+interface SelectionInfoState {\n+  truncated: boolean;\n+}\n+\n+export class SelectionInfo extends React.Component<SelectionInfoProps, SelectionInfoState> {\n+  name: HTMLDivElement;\n+  constructor(props: SelectionInfoProps) {\n+    super(props);\n+    this.state = {truncated: false};\n+  }\n+\n+  componentDidMount(): void {\n+    const {offsetWidth, scrollWidth} = this.name;\n+    this.setState({truncated: scrollWidth > offsetWidth});\n+  }\n+\n+  get showType() {\n+    return ![\n+      DomainType.PHYSICALMEASUREMENT.toString(),\n+      DomainType.DRUG.toString(),\n+      DomainType.SURVEY.toString()\n+    ].includes(this.props.selection.domainId);\n+  }\n+\n+  get showOr() {\n+    const {index, selection} = this.props;\n+    return index > 0 && selection.domainId !== DomainType.PERSON.toString();\n+  }\n+\n+  render() {\n+    const {selection, removeSelection} = this.props;\n+    const itemName = <React.Fragment>\n+      {this.showType && <strong>{typeDisplay(selection)}&nbsp;</strong>}\n+      {nameDisplay(selection)} {attributeDisplay(selection)}\n+    </React.Fragment>;\n+    return <div style={styles.selectionItem}>\n+      <button style={styles.removeSelection} onClick={() => removeSelection()}>\n+        <ClrIcon shape='times-circle'/>\n+      </button>\n+      <div style={styles.itemInfo}>\n+        {this.showOr && <strong>OR&nbsp;</strong>}\n+        {!!selection.group && <span>Group&nbsp;</span>}\n+        <TooltipTrigger disabled={!this.state.truncated} content={itemName}>\n+          <div style={styles.itemName} ref={(e) => this.name = e}>\n+            {itemName}\n+          </div>\n+        </TooltipTrigger>\n+      </div>\n+    </div>;\n+  }\n+}\n+\n+interface Props {\n+  back: Function;\n+  cancel: Function;\n+  disableFinish: boolean;\n+  domain: DomainType;\n+  finish: Function;\n+  removeSelection: Function;\n+  selections: Array<Selection>;\n+  setView: Function;\n+  view: string;\n+}\n+\n+export class SelectionList extends React.Component<Props> {\n+  constructor(props: Props) {\n+    super(props);\n+  }\n+\n+  get showModifiers() {\n+    return ![DomainType.PHYSICALMEASUREMENT, DomainType.PERSON, DomainType.SURVEY].includes(this.props.domain);\n+  }\n+\n+  get showNext() {\n+    return this.showModifiers && this.props.view !== 'modifiers';\n+  }\n+\n+  get showBack() {\n+    return this.showModifiers && this.props.view === 'modifiers';\n+  }\n+\n+  render() {\n+    const {back, cancel, disableFinish, finish, removeSelection, selections, setView} = this.props;\n+    return <div style={styles.selectionPanel}>\n+      <h5 style={styles.selectionTitle}>Selected Criteria</h5>\n+      <div style={styles.selectionContainer}>\n+        {selections.map((selection, s) =>\n+          <SelectionInfo key={s}\n+            index={s}\n+            selection={selection}\n+            removeSelection={() => removeSelection(selection)}/>\n+        )}\n+      </div>\n+      <div style={styles.buttonContainer}>\n+        <button style={{...styles.button, background: 'transparent', color: colors.dark, fontSize: '14px'}}\n+          onClick={() => cancel()}>\n+          Cancel\n+        </button>\n+        {this.showNext && <button onClick={() => setView('modifiers')}\n+          style={{\n+            ...styles.button,\n+            ...(selections.length === 0 ? styles.disabled : {}),\n+            background: colors.primary, color: colors.white}}>\n+          Next\n+        </button>}\n+        {this.showBack && <button style={{...styles.button, background: colors.primary, color: colors.white}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk1OTA5Ng=="}, "originalCommit": {"oid": "b91207bb281db2e3fde0aa276728123cdcc8ec11"}, "originalPosition": 198}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2878, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}