{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMTcxMzQ0", "number": 4056, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTozNDo0MFrOEnGlYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTozOTo1OFrOEnGu0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDM3NzkzOnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/attributes-page-v2/attributes-page-v2.component.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTozNDo0MFrOHXgxag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOToxMDozNFrOHXpAOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxNjIzNA==", "bodyText": "nit: We can get rid of else if have, form.anyValue = checked", "url": "https://github.com/all-of-us/workbench/pull/4056#discussion_r494416234", "createdAt": "2020-09-24T15:34:40Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/cohort-search/attributes-page-v2/attributes-page-v2.component.tsx", "diffHunk": "@@ -258,21 +339,30 @@ export const AttributesPageV2 = fp.flow(withCurrentWorkspace(), withCurrentCohor\n       });\n     }\n \n-    toggleCheckbox(checked: boolean) {\n+    toggleAnyValueCheckbox(checked: boolean) {\n       const {form} = this.state;\n       let {node: {count}} = this.props;\n       if (checked) {\n-        form.exists = true;\n+        form.anyValue = true;\n         form.num = form.num.map(attr =>\n           ({...attr, operator: this.isPhysicalMeasurement ? 'ANY' : null, operands: []}));\n         form.cat = form.cat.map(attr => ({...attr, checked: false}));\n       } else {\n+        form.anyValue = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31f22ec13ae788436b34f6bae2195b79388bb184"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU1MTA5OA==", "bodyText": "Good point, fixed.", "url": "https://github.com/all-of-us/workbench/pull/4056#discussion_r494551098", "createdAt": "2020-09-24T19:10:34Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/attributes-page-v2/attributes-page-v2.component.tsx", "diffHunk": "@@ -258,21 +339,30 @@ export const AttributesPageV2 = fp.flow(withCurrentWorkspace(), withCurrentCohor\n       });\n     }\n \n-    toggleCheckbox(checked: boolean) {\n+    toggleAnyValueCheckbox(checked: boolean) {\n       const {form} = this.state;\n       let {node: {count}} = this.props;\n       if (checked) {\n-        form.exists = true;\n+        form.anyValue = true;\n         form.num = form.num.map(attr =>\n           ({...attr, operator: this.isPhysicalMeasurement ? 'ANY' : null, operands: []}));\n         form.cat = form.cat.map(attr => ({...attr, checked: false}));\n       } else {\n+        form.anyValue = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxNjIzNA=="}, "originalCommit": {"oid": "31f22ec13ae788436b34f6bae2195b79388bb184"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDM5NDYxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/attributes-page-v2/attributes-page-v2.component.tsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTozODoyMlrOHXg75A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOToxNDo0MFrOHXpIbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxODkxNg==", "bodyText": "!isCOPESurvey  will always be true", "url": "https://github.com/all-of-us/workbench/pull/4056#discussion_r494418916", "createdAt": "2020-09-24T15:38:22Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/cohort-search/attributes-page-v2/attributes-page-v2.component.tsx", "diffHunk": "@@ -522,18 +614,102 @@ export const AttributesPageV2 = fp.flow(withCurrentWorkspace(), withCurrentCohor\n       return this.isMeasurement || this.isSurvey;\n     }\n \n+    renderNumericalAttributes() {\n+      const {node: {count, subtype}} = this.props;\n+      const {form, isCOPESurvey, options} = this.state;\n+      return form.num.length > 0 && <React.Fragment>\n+        {this.isMeasurement && <div style={styles.label}>Numeric Values</div>}\n+        {isCOPESurvey && <div>\n+          <CheckBox onChange={(v) => this.toggleAnyValueCheckbox(v)}/> Any value\n+          {count > -1 && <span style={styles.badge}> {count.toLocaleString()}</span>}\n+        </div>}\n+        {!(isCOPESurvey && form.anyValue) && form.num.map((attr, a) => <div key={a}>\n+          {this.isBloodPressure && <div style={styles.label}>{attr.name}</div>}\n+          {isCOPESurvey && <div style={styles.orCircle}>OR</div>}\n+          <Dropdown style={{marginBottom: '0.5rem', width: '100%'}}\n+                    value={attr.operator}\n+                    options={options}\n+                    placeholder='Select Operator'\n+                    onChange={(e) => this.selectChange(a, e.value)}/>\n+          <FlexRowWrap>\n+            {![null, 'ANY'].includes(attr.operator) && <div style={{width: '33%'}}>\n+              <NumberInput style={{padding: '0 0.25rem', ...(this.hasUnits ? {width: '70%'} : {})}}\n+                           value={attr.operands[0] || ''}\n+                           min={attr.MIN} max={attr.MAX}\n+                           onChange={(v) => this.inputChange(v, a, 0)}/>\n+              {this.hasUnits && <span> {PM_UNITS[subtype]}</span>}\n+            </div>}\n+            {attr.operator === Operator.BETWEEN && <React.Fragment>\n+              <div style={{padding: '0.2rem 1.5rem 0 1rem'}}>and</div>\n+              <div style={{width: '33%'}}>\n+                <NumberInput style={{padding: '0 0.25rem', ...(this.hasUnits ? {width: '70%'} : {})}}\n+                             value={attr.operands[1] || ''}\n+                             min={attr.MIN} max={attr.MAX}\n+                             onChange={(v) => this.inputChange(v, a, 1)}/>\n+                {this.hasUnits && <span> {PM_UNITS[subtype]}</span>}\n+              </div>\n+            </React.Fragment>}\n+          </FlexRowWrap>\n+          {this.hasRange && ![null, 'ANY'].includes(attr.operator) && <div style={{paddingTop: '0.2rem'}}>\n+            Range: {attr.MIN.toLocaleString()} - {attr.MAX.toLocaleString()}\n+          </div>}\n+        </div>)}\n+      </React.Fragment>;\n+    }\n+\n+    renderCategoricalAttributes() {\n+      const {node: {count}} = this.props;\n+      const {form, isCOPESurvey} = this.state;\n+      return form.cat.length > 0 && <React.Fragment>\n+        {isCOPESurvey && <div>\n+          <CheckBox onChange={(v) => this.toggleAnyVersionCheckbox(v)}/> Any version\n+          {count > -1 && <span style={styles.badge}>{count.toLocaleString()}</span>}\n+        </div>}\n+        {!(isCOPESurvey && form.anyVersion) && <React.Fragment>\n+          <div style={styles.orCircle}>OR</div>\n+          {!isCOPESurvey && <div style={styles.label}>Categorical Values</div>}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31f22ec13ae788436b34f6bae2195b79388bb184"}, "originalPosition": 362}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxOTM1OA==", "bodyText": "My bad i just notice the ! in front of &&", "url": "https://github.com/all-of-us/workbench/pull/4056#discussion_r494419358", "createdAt": "2020-09-24T15:39:01Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/cohort-search/attributes-page-v2/attributes-page-v2.component.tsx", "diffHunk": "@@ -522,18 +614,102 @@ export const AttributesPageV2 = fp.flow(withCurrentWorkspace(), withCurrentCohor\n       return this.isMeasurement || this.isSurvey;\n     }\n \n+    renderNumericalAttributes() {\n+      const {node: {count, subtype}} = this.props;\n+      const {form, isCOPESurvey, options} = this.state;\n+      return form.num.length > 0 && <React.Fragment>\n+        {this.isMeasurement && <div style={styles.label}>Numeric Values</div>}\n+        {isCOPESurvey && <div>\n+          <CheckBox onChange={(v) => this.toggleAnyValueCheckbox(v)}/> Any value\n+          {count > -1 && <span style={styles.badge}> {count.toLocaleString()}</span>}\n+        </div>}\n+        {!(isCOPESurvey && form.anyValue) && form.num.map((attr, a) => <div key={a}>\n+          {this.isBloodPressure && <div style={styles.label}>{attr.name}</div>}\n+          {isCOPESurvey && <div style={styles.orCircle}>OR</div>}\n+          <Dropdown style={{marginBottom: '0.5rem', width: '100%'}}\n+                    value={attr.operator}\n+                    options={options}\n+                    placeholder='Select Operator'\n+                    onChange={(e) => this.selectChange(a, e.value)}/>\n+          <FlexRowWrap>\n+            {![null, 'ANY'].includes(attr.operator) && <div style={{width: '33%'}}>\n+              <NumberInput style={{padding: '0 0.25rem', ...(this.hasUnits ? {width: '70%'} : {})}}\n+                           value={attr.operands[0] || ''}\n+                           min={attr.MIN} max={attr.MAX}\n+                           onChange={(v) => this.inputChange(v, a, 0)}/>\n+              {this.hasUnits && <span> {PM_UNITS[subtype]}</span>}\n+            </div>}\n+            {attr.operator === Operator.BETWEEN && <React.Fragment>\n+              <div style={{padding: '0.2rem 1.5rem 0 1rem'}}>and</div>\n+              <div style={{width: '33%'}}>\n+                <NumberInput style={{padding: '0 0.25rem', ...(this.hasUnits ? {width: '70%'} : {})}}\n+                             value={attr.operands[1] || ''}\n+                             min={attr.MIN} max={attr.MAX}\n+                             onChange={(v) => this.inputChange(v, a, 1)}/>\n+                {this.hasUnits && <span> {PM_UNITS[subtype]}</span>}\n+              </div>\n+            </React.Fragment>}\n+          </FlexRowWrap>\n+          {this.hasRange && ![null, 'ANY'].includes(attr.operator) && <div style={{paddingTop: '0.2rem'}}>\n+            Range: {attr.MIN.toLocaleString()} - {attr.MAX.toLocaleString()}\n+          </div>}\n+        </div>)}\n+      </React.Fragment>;\n+    }\n+\n+    renderCategoricalAttributes() {\n+      const {node: {count}} = this.props;\n+      const {form, isCOPESurvey} = this.state;\n+      return form.cat.length > 0 && <React.Fragment>\n+        {isCOPESurvey && <div>\n+          <CheckBox onChange={(v) => this.toggleAnyVersionCheckbox(v)}/> Any version\n+          {count > -1 && <span style={styles.badge}>{count.toLocaleString()}</span>}\n+        </div>}\n+        {!(isCOPESurvey && form.anyVersion) && <React.Fragment>\n+          <div style={styles.orCircle}>OR</div>\n+          {!isCOPESurvey && <div style={styles.label}>Categorical Values</div>}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxODkxNg=="}, "originalCommit": {"oid": "31f22ec13ae788436b34f6bae2195b79388bb184"}, "originalPosition": 362}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU1MzE5OA==", "bodyText": "Yeah, sorry this component was already confusing with all the conditions for different domains, and adding new conditions for COPE has made it worse. We should come back after COPE is done and do some cleanup and refactoring..", "url": "https://github.com/all-of-us/workbench/pull/4056#discussion_r494553198", "createdAt": "2020-09-24T19:14:40Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/attributes-page-v2/attributes-page-v2.component.tsx", "diffHunk": "@@ -522,18 +614,102 @@ export const AttributesPageV2 = fp.flow(withCurrentWorkspace(), withCurrentCohor\n       return this.isMeasurement || this.isSurvey;\n     }\n \n+    renderNumericalAttributes() {\n+      const {node: {count, subtype}} = this.props;\n+      const {form, isCOPESurvey, options} = this.state;\n+      return form.num.length > 0 && <React.Fragment>\n+        {this.isMeasurement && <div style={styles.label}>Numeric Values</div>}\n+        {isCOPESurvey && <div>\n+          <CheckBox onChange={(v) => this.toggleAnyValueCheckbox(v)}/> Any value\n+          {count > -1 && <span style={styles.badge}> {count.toLocaleString()}</span>}\n+        </div>}\n+        {!(isCOPESurvey && form.anyValue) && form.num.map((attr, a) => <div key={a}>\n+          {this.isBloodPressure && <div style={styles.label}>{attr.name}</div>}\n+          {isCOPESurvey && <div style={styles.orCircle}>OR</div>}\n+          <Dropdown style={{marginBottom: '0.5rem', width: '100%'}}\n+                    value={attr.operator}\n+                    options={options}\n+                    placeholder='Select Operator'\n+                    onChange={(e) => this.selectChange(a, e.value)}/>\n+          <FlexRowWrap>\n+            {![null, 'ANY'].includes(attr.operator) && <div style={{width: '33%'}}>\n+              <NumberInput style={{padding: '0 0.25rem', ...(this.hasUnits ? {width: '70%'} : {})}}\n+                           value={attr.operands[0] || ''}\n+                           min={attr.MIN} max={attr.MAX}\n+                           onChange={(v) => this.inputChange(v, a, 0)}/>\n+              {this.hasUnits && <span> {PM_UNITS[subtype]}</span>}\n+            </div>}\n+            {attr.operator === Operator.BETWEEN && <React.Fragment>\n+              <div style={{padding: '0.2rem 1.5rem 0 1rem'}}>and</div>\n+              <div style={{width: '33%'}}>\n+                <NumberInput style={{padding: '0 0.25rem', ...(this.hasUnits ? {width: '70%'} : {})}}\n+                             value={attr.operands[1] || ''}\n+                             min={attr.MIN} max={attr.MAX}\n+                             onChange={(v) => this.inputChange(v, a, 1)}/>\n+                {this.hasUnits && <span> {PM_UNITS[subtype]}</span>}\n+              </div>\n+            </React.Fragment>}\n+          </FlexRowWrap>\n+          {this.hasRange && ![null, 'ANY'].includes(attr.operator) && <div style={{paddingTop: '0.2rem'}}>\n+            Range: {attr.MIN.toLocaleString()} - {attr.MAX.toLocaleString()}\n+          </div>}\n+        </div>)}\n+      </React.Fragment>;\n+    }\n+\n+    renderCategoricalAttributes() {\n+      const {node: {count}} = this.props;\n+      const {form, isCOPESurvey} = this.state;\n+      return form.cat.length > 0 && <React.Fragment>\n+        {isCOPESurvey && <div>\n+          <CheckBox onChange={(v) => this.toggleAnyVersionCheckbox(v)}/> Any version\n+          {count > -1 && <span style={styles.badge}>{count.toLocaleString()}</span>}\n+        </div>}\n+        {!(isCOPESurvey && form.anyVersion) && <React.Fragment>\n+          <div style={styles.orCircle}>OR</div>\n+          {!isCOPESurvey && <div style={styles.label}>Categorical Values</div>}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxODkxNg=="}, "originalCommit": {"oid": "31f22ec13ae788436b34f6bae2195b79388bb184"}, "originalPosition": 362}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDQwMjExOnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/attributes-page-v2/attributes-page-v2.component.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTozOTo1OFrOHXhAYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDowMToxOFrOHXqn-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyMDA2Nw==", "bodyText": "Can you move this to a method just so its easier to read?", "url": "https://github.com/all-of-us/workbench/pull/4056#discussion_r494420067", "createdAt": "2020-09-24T15:39:58Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/cohort-search/attributes-page-v2/attributes-page-v2.component.tsx", "diffHunk": "@@ -522,18 +614,102 @@ export const AttributesPageV2 = fp.flow(withCurrentWorkspace(), withCurrentCohor\n       return this.isMeasurement || this.isSurvey;\n     }\n \n+    renderNumericalAttributes() {\n+      const {node: {count, subtype}} = this.props;\n+      const {form, isCOPESurvey, options} = this.state;\n+      return form.num.length > 0 && <React.Fragment>\n+        {this.isMeasurement && <div style={styles.label}>Numeric Values</div>}\n+        {isCOPESurvey && <div>\n+          <CheckBox onChange={(v) => this.toggleAnyValueCheckbox(v)}/> Any value\n+          {count > -1 && <span style={styles.badge}> {count.toLocaleString()}</span>}\n+        </div>}\n+        {!(isCOPESurvey && form.anyValue) && form.num.map((attr, a) => <div key={a}>\n+          {this.isBloodPressure && <div style={styles.label}>{attr.name}</div>}\n+          {isCOPESurvey && <div style={styles.orCircle}>OR</div>}\n+          <Dropdown style={{marginBottom: '0.5rem', width: '100%'}}\n+                    value={attr.operator}\n+                    options={options}\n+                    placeholder='Select Operator'\n+                    onChange={(e) => this.selectChange(a, e.value)}/>\n+          <FlexRowWrap>\n+            {![null, 'ANY'].includes(attr.operator) && <div style={{width: '33%'}}>\n+              <NumberInput style={{padding: '0 0.25rem', ...(this.hasUnits ? {width: '70%'} : {})}}\n+                           value={attr.operands[0] || ''}\n+                           min={attr.MIN} max={attr.MAX}\n+                           onChange={(v) => this.inputChange(v, a, 0)}/>\n+              {this.hasUnits && <span> {PM_UNITS[subtype]}</span>}\n+            </div>}\n+            {attr.operator === Operator.BETWEEN && <React.Fragment>\n+              <div style={{padding: '0.2rem 1.5rem 0 1rem'}}>and</div>\n+              <div style={{width: '33%'}}>\n+                <NumberInput style={{padding: '0 0.25rem', ...(this.hasUnits ? {width: '70%'} : {})}}\n+                             value={attr.operands[1] || ''}\n+                             min={attr.MIN} max={attr.MAX}\n+                             onChange={(v) => this.inputChange(v, a, 1)}/>\n+                {this.hasUnits && <span> {PM_UNITS[subtype]}</span>}\n+              </div>\n+            </React.Fragment>}\n+          </FlexRowWrap>\n+          {this.hasRange && ![null, 'ANY'].includes(attr.operator) && <div style={{paddingTop: '0.2rem'}}>\n+            Range: {attr.MIN.toLocaleString()} - {attr.MAX.toLocaleString()}\n+          </div>}\n+        </div>)}\n+      </React.Fragment>;\n+    }\n+\n+    renderCategoricalAttributes() {\n+      const {node: {count}} = this.props;\n+      const {form, isCOPESurvey} = this.state;\n+      return form.cat.length > 0 && <React.Fragment>\n+        {isCOPESurvey && <div>\n+          <CheckBox onChange={(v) => this.toggleAnyVersionCheckbox(v)}/> Any version\n+          {count > -1 && <span style={styles.badge}>{count.toLocaleString()}</span>}\n+        </div>}\n+        {!(isCOPESurvey && form.anyVersion) && <React.Fragment>\n+          <div style={styles.orCircle}>OR</div>\n+          {!isCOPESurvey && <div style={styles.label}>Categorical Values</div>}\n+          {form.cat.map((attr, a) => <div key={a} style={styles.categorical}>\n+            <CheckBox checked={attr.checked} style={{marginRight: '3px'}}\n+                      onChange={(v) => this.checkboxChange(v, a)}/>\n+            {attr.conceptName}\n+            <span style={styles.badge}>{parseInt(attr.estCount, 10).toLocaleString()}</span>\n+          </div>)}\n+        </React.Fragment>}\n+      </React.Fragment>;\n+    }\n+\n     render() {\n       const {close, node: {domainId, name, parentId, subtype}} = this.props;\n-      const {calculating, count, countError, form, loading, options} = this.state;\n+      const {calculating, count, countError, form, isCOPESurvey, loading} = this.state;\n       const {formErrors, formValid} = this.validateForm();\n       const disableAdd = calculating || !formValid;\n-      const disableCalculate = disableAdd || form.exists || form.num.every(attr => attr.operator === 'ANY');\n+      const disableCalculate = disableAdd\n+        || (form.anyValue && count !== null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31f22ec13ae788436b34f6bae2195b79388bb184"}, "originalPosition": 381}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3NzY1OQ==", "bodyText": "Done. I also did a small refactor to move formErrors and formValid into state.", "url": "https://github.com/all-of-us/workbench/pull/4056#discussion_r494577659", "createdAt": "2020-09-24T20:01:18Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/attributes-page-v2/attributes-page-v2.component.tsx", "diffHunk": "@@ -522,18 +614,102 @@ export const AttributesPageV2 = fp.flow(withCurrentWorkspace(), withCurrentCohor\n       return this.isMeasurement || this.isSurvey;\n     }\n \n+    renderNumericalAttributes() {\n+      const {node: {count, subtype}} = this.props;\n+      const {form, isCOPESurvey, options} = this.state;\n+      return form.num.length > 0 && <React.Fragment>\n+        {this.isMeasurement && <div style={styles.label}>Numeric Values</div>}\n+        {isCOPESurvey && <div>\n+          <CheckBox onChange={(v) => this.toggleAnyValueCheckbox(v)}/> Any value\n+          {count > -1 && <span style={styles.badge}> {count.toLocaleString()}</span>}\n+        </div>}\n+        {!(isCOPESurvey && form.anyValue) && form.num.map((attr, a) => <div key={a}>\n+          {this.isBloodPressure && <div style={styles.label}>{attr.name}</div>}\n+          {isCOPESurvey && <div style={styles.orCircle}>OR</div>}\n+          <Dropdown style={{marginBottom: '0.5rem', width: '100%'}}\n+                    value={attr.operator}\n+                    options={options}\n+                    placeholder='Select Operator'\n+                    onChange={(e) => this.selectChange(a, e.value)}/>\n+          <FlexRowWrap>\n+            {![null, 'ANY'].includes(attr.operator) && <div style={{width: '33%'}}>\n+              <NumberInput style={{padding: '0 0.25rem', ...(this.hasUnits ? {width: '70%'} : {})}}\n+                           value={attr.operands[0] || ''}\n+                           min={attr.MIN} max={attr.MAX}\n+                           onChange={(v) => this.inputChange(v, a, 0)}/>\n+              {this.hasUnits && <span> {PM_UNITS[subtype]}</span>}\n+            </div>}\n+            {attr.operator === Operator.BETWEEN && <React.Fragment>\n+              <div style={{padding: '0.2rem 1.5rem 0 1rem'}}>and</div>\n+              <div style={{width: '33%'}}>\n+                <NumberInput style={{padding: '0 0.25rem', ...(this.hasUnits ? {width: '70%'} : {})}}\n+                             value={attr.operands[1] || ''}\n+                             min={attr.MIN} max={attr.MAX}\n+                             onChange={(v) => this.inputChange(v, a, 1)}/>\n+                {this.hasUnits && <span> {PM_UNITS[subtype]}</span>}\n+              </div>\n+            </React.Fragment>}\n+          </FlexRowWrap>\n+          {this.hasRange && ![null, 'ANY'].includes(attr.operator) && <div style={{paddingTop: '0.2rem'}}>\n+            Range: {attr.MIN.toLocaleString()} - {attr.MAX.toLocaleString()}\n+          </div>}\n+        </div>)}\n+      </React.Fragment>;\n+    }\n+\n+    renderCategoricalAttributes() {\n+      const {node: {count}} = this.props;\n+      const {form, isCOPESurvey} = this.state;\n+      return form.cat.length > 0 && <React.Fragment>\n+        {isCOPESurvey && <div>\n+          <CheckBox onChange={(v) => this.toggleAnyVersionCheckbox(v)}/> Any version\n+          {count > -1 && <span style={styles.badge}>{count.toLocaleString()}</span>}\n+        </div>}\n+        {!(isCOPESurvey && form.anyVersion) && <React.Fragment>\n+          <div style={styles.orCircle}>OR</div>\n+          {!isCOPESurvey && <div style={styles.label}>Categorical Values</div>}\n+          {form.cat.map((attr, a) => <div key={a} style={styles.categorical}>\n+            <CheckBox checked={attr.checked} style={{marginRight: '3px'}}\n+                      onChange={(v) => this.checkboxChange(v, a)}/>\n+            {attr.conceptName}\n+            <span style={styles.badge}>{parseInt(attr.estCount, 10).toLocaleString()}</span>\n+          </div>)}\n+        </React.Fragment>}\n+      </React.Fragment>;\n+    }\n+\n     render() {\n       const {close, node: {domainId, name, parentId, subtype}} = this.props;\n-      const {calculating, count, countError, form, loading, options} = this.state;\n+      const {calculating, count, countError, form, isCOPESurvey, loading} = this.state;\n       const {formErrors, formValid} = this.validateForm();\n       const disableAdd = calculating || !formValid;\n-      const disableCalculate = disableAdd || form.exists || form.num.every(attr => attr.operator === 'ANY');\n+      const disableCalculate = disableAdd\n+        || (form.anyValue && count !== null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyMDA2Nw=="}, "originalCommit": {"oid": "31f22ec13ae788436b34f6bae2195b79388bb184"}, "originalPosition": 381}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3953, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}