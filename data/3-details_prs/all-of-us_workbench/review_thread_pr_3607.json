{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwODM3MjYz", "number": 3607, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTo1MDozMFrOD-SExg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjowOTo0NlrOD-c2CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjM0NDM4OnYy", "diffSide": "RIGHT", "path": "api/libproject/devstart.rb", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTo1MDozMFrOGYSb_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzowMTo1MlrOGYx6QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyMTA4Ng==", "bodyText": "I'm assuming there's a more-idiomatic-Ruby way to do this - happy to replace it with any suggestions.", "url": "https://github.com/all-of-us/workbench/pull/3607#discussion_r428121086", "createdAt": "2020-05-20T15:50:30Z", "author": {"login": "jmthibault79"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1611,6 +1619,9 @@ def populate_ops_user_affiliations(cmd_name, *args)\n   gradle_args = ([\n       [\"--import-filename\", op.opts.importFilename]\n   ]).map { |kv| \"#{kv[0]}=#{kv[1]}\" }\n+  gradle_args += ([", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd4c1981da8b8786114543280410d0d559a31c7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMDI1NQ==", "bodyText": "Hmm \u2013\u00a0maybe it's possible to include it in the list definition above?\ngradle_args = ([\n      [\"--import-filename\", op.opts.importFilename],\n      [\"--user-type\", op.opts.userType]\n  ]).map { |kv| \"#{kv[0]}=#{kv[1]}\" }", "url": "https://github.com/all-of-us/workbench/pull/3607#discussion_r428410255", "createdAt": "2020-05-21T02:24:21Z", "author": {"login": "gjuggler"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1611,6 +1619,9 @@ def populate_ops_user_affiliations(cmd_name, *args)\n   gradle_args = ([\n       [\"--import-filename\", op.opts.importFilename]\n   ]).map { |kv| \"#{kv[0]}=#{kv[1]}\" }\n+  gradle_args += ([", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyMTA4Ng=="}, "originalCommit": {"oid": "dbd4c1981da8b8786114543280410d0d559a31c7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzNjczNw==", "bodyText": "looks like that worked, thanks!", "url": "https://github.com/all-of-us/workbench/pull/3607#discussion_r428636737", "createdAt": "2020-05-21T13:01:52Z", "author": {"login": "jmthibault79"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1611,6 +1619,9 @@ def populate_ops_user_affiliations(cmd_name, *args)\n   gradle_args = ([\n       [\"--import-filename\", op.opts.importFilename]\n   ]).map { |kv| \"#{kv[0]}=#{kv[1]}\" }\n+  gradle_args += ([", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyMTA4Ng=="}, "originalCommit": {"oid": "dbd4c1981da8b8786114543280410d0d559a31c7"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjM0OTAzOnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/institutions/OpsUser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTo1MTozNlrOGYSfGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTo1MTozNlrOGYSfGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyMTg4Mg==", "bodyText": "Split the existing OpsUser into this and User", "url": "https://github.com/all-of-us/workbench/pull/3607#discussion_r428121882", "createdAt": "2020-05-20T15:51:36Z", "author": {"login": "jmthibault79"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/institutions/OpsUser.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.pmiops.workbench.tools.institutions;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.model.InstitutionalRole;\n+\n+/**\n+ * Structure the incoming ops user data according to the format of the source CSV:\n+ *\n+ * <p>First Name,Last Name,Email,\"Workbench Email\",Institution,Role,Action\n+ */\n+class OpsUser extends User {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd4c1981da8b8786114543280410d0d559a31c7"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjM1OTEzOnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/institutions/PopulateUserAffiliations.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTo1Mzo1N1rOGYSlkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTo1Mzo1N1rOGYSlkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyMzUzNw==", "bodyText": "Originally PopulateOpsUserAffiliations - moved, renamed, and refactored", "url": "https://github.com/all-of-us/workbench/pull/3607#discussion_r428123537", "createdAt": "2020-05-20T15:53:57Z", "author": {"login": "jmthibault79"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/institutions/PopulateUserAffiliations.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package org.pmiops.workbench.tools.institutions;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.tools.CommandLineToolConfig;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Populate the verified_institutional_affiliation table for users listed in a CSV input file.\n+ *\n+ * <p>NOTE: input file must be located in the current directory or a subdirectory.\n+ *\n+ * <p>Example execution:\n+ *\n+ * <pre>\n+ * ./project.rb populate-user-affiliations \\\n+ * --import-filename users.csv \\\n+ * --user-type OPS \\\n+ * --dry-run \\\n+ * --project all-of-us-workbench-test\n+ * </pre>\n+ */\n+public class PopulateUserAffiliations {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd4c1981da8b8786114543280410d0d559a31c7"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjQzMTQ0OnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/institutions/User.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjoxMTozNFrOGYTVLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjoxMTozNFrOGYTVLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzNTcyNg==", "bodyText": "Tearing my hair out over this one.  If I return to this, it will be here: #3601", "url": "https://github.com/all-of-us/workbench/pull/3607#discussion_r428135726", "createdAt": "2020-05-20T16:11:34Z", "author": {"login": "jmthibault79"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/institutions/User.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.pmiops.workbench.tools.institutions;\n+\n+import com.opencsv.CSVReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+\n+public abstract class User {\n+  private static final Logger log = Logger.getLogger(User.class.getName());\n+\n+  String firstName;\n+  String lastName;\n+  String contactEmail;\n+  String userName;\n+\n+  // check data prerequisites which don't involve DB comparisons\n+  abstract void preCheck();\n+\n+  abstract DbVerifiedInstitutionalAffiliation toAffiliation(\n+      final DbUser dbUser, final InstitutionDao institutionDao);\n+\n+  static List<String[]> readFile(final String filename, final int columnLength) throws IOException {\n+    try (final CSVReader reader = new CSVReader(new FileReader(filename))) {\n+      // consume and sanity-check header line\n+      final String[] headerLine = reader.readNext();\n+      if (headerLine.length != columnLength) {\n+        throw new RuntimeException(\n+            String.format(\n+                \"Expected %d columns in input file. Was: %d\", columnLength, headerLine.length));\n+      }\n+\n+      return StreamSupport.stream(reader.spliterator(), false).collect(Collectors.toList());\n+    }\n+  }\n+\n+  private void checkField(String dbValue, String csvValue, String fieldName) {\n+    if (!dbValue.equals(csvValue)) {\n+      log.warning(\n+          String.format(\n+              \"CSV and DB values do not match for user '%s', field '%s'. CSV = %s, DB = %s\",\n+              userName, fieldName, csvValue, dbValue));\n+    }\n+  }\n+\n+  private DbUser dbCheck(final UserDao userDao) {\n+    final DbUser dbUser = userDao.findUserByUsername(userName);\n+\n+    // fatal errors: something is quite wrong and we need to recheck our assumptions!\n+\n+    if (dbUser == null) {\n+      throw new RuntimeException(String.format(\"User %s was not found in the DB\", userName));\n+    }\n+\n+    // many near-matches in the imput exist: warn only, don't stop\n+    // example: \"Dan\" instead of \"Daniel\"\n+    // example: \"\"Beth,\"\" instead of \"Beth\"\n+\n+    checkField(dbUser.getGivenName(), firstName, \"First Name\");\n+    checkField(dbUser.getFamilyName(), lastName, \"Last Name\");\n+    checkField(dbUser.getContactEmail(), contactEmail, \"Contact Email\");\n+\n+    return dbUser;\n+  }\n+\n+  void populateAffiliation(\n+      final boolean dryRun,\n+      final UserDao userDao,\n+      final InstitutionDao institutionDao,\n+      final VerifiedInstitutionalAffiliationDao affiliationDao) {\n+\n+    preCheck();\n+\n+    final DbUser dbUser = dbCheck(userDao);\n+    final DbVerifiedInstitutionalAffiliation newAffiliation = toAffiliation(dbUser, institutionDao);\n+    final Optional<DbVerifiedInstitutionalAffiliation> existingAffil =\n+        affiliationDao.findFirstByUser(dbUser);\n+\n+    if (!existingAffil.isPresent()) {\n+      if (!dryRun) {\n+        affiliationDao.save(newAffiliation);\n+      }\n+\n+      dryLog(\n+          dryRun,\n+          String.format(\n+              \"Saved Affiliation for '%s' with Institution '%s'\",\n+              newAffiliation.getUser().getUsername(),\n+              newAffiliation.getInstitution().getDisplayName()));\n+    } else {\n+      // will always execute since we checked it above\n+      existingAffil.ifPresent(\n+          existingAffiliation -> {\n+            if (equivalent(existingAffiliation, newAffiliation)) {\n+              log.info(\"No action taken.  Affiliation exists: \" + existingAffiliation);\n+            } else {\n+              throw new RuntimeException(\n+                  String.format(\n+                      \"New affiliation differs from affiliation in DB for user '%s':\\n\"\n+                          + \"New affiliation = %s\\nDB affiliation= %s\",\n+                      userName, newAffiliation, existingAffiliation));\n+            }\n+          });\n+    }\n+  }\n+\n+  // Are these two DbVerifiedInstitutionalAffiliation objects equivalent?\n+  // TODO: investigate why we can't use DbVerifiedInstitutionalAffiliation.equals() here.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8187d49ed75854bf218816f6ac8898a46e6349d7"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODEwODg4OnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/institutions/Researcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjowOTo0NlrOGYj3Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjowOTo0NlrOGYj3Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNjU3NQ==", "bodyText": "Super nitpick, but maybe these final static constants should be uppercased? I'm not sure if we have a clear style rule around this \u2013\u00a0Google's Java style says constants should be uppercase, and I do like the clarity that provides.", "url": "https://github.com/all-of-us/workbench/pull/3607#discussion_r428406575", "createdAt": "2020-05-21T02:09:46Z", "author": {"login": "gjuggler"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/institutions/Researcher.java", "diffHunk": "@@ -0,0 +1,157 @@\n+package org.pmiops.workbench.tools.institutions;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.model.InstitutionalRole;\n+\n+/**\n+ * Structure researcher user data according to the format of the source CSV:\n+ *\n+ * <p>First Name, Last Name, Institutional Email, WB User Name, Role, Institution, \"Institutional\n+ * DUA Signed?\", \"REDCap Complete?\"\n+ */\n+class Researcher extends User {\n+  // common fields from User: firstName, lastName, contactEmail, userName\n+  final InstitutionalRole institutionalRole;\n+  final String institutionDisplayName;\n+  final String duaSigned;\n+  final String redCapComplete;\n+\n+  private static final int columnLength = 8;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8187d49ed75854bf218816f6ac8898a46e6349d7"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2708, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}