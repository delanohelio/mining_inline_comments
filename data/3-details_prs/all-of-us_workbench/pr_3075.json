{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNDQxMzM1", "number": 3075, "title": "[RW-4159][risk=no] Terms of Service UI and cleanup of create-account flow.", "bodyText": "The main goal of this PR was to create a Terms of Service acknowledgement UI based on mocks from the linked Jira ticket.\n(During review, I'll keep this branch pushed to my gjordan App Engine version.)\nThe resulting UI looks like this (click \"Create Account\", then enter invitation key, then you land on this page):\n\nand the \"Next\" button is enabled once they've read & clicked the checkboxes:\n\nI couldn't help but dig into a bit of clean-up on the overall structure of the sign-in component & the various sub-components it renders. I did a few things to try and clarify the flow of data / control through the components, and improve our ability to adapt the set of sign-up forms over time. (This is partly in anticipation of launch: we're going to add a new \"institutional affiliation\" step, and remove the \"invitation key check\" step.)\nThe clean-up work significantly blew up the size of this PR \u2013\u00a0sorry about that! In return, I added a bunch of tests.\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally", "createdAt": "2020-02-03T17:45:24Z", "url": "https://github.com/all-of-us/workbench/pull/3075", "merged": true, "mergeCommit": {"oid": "c00ffc5c31d729b50302fc5570819c4675aeab4a"}, "closed": true, "closedAt": "2020-02-07T21:47:11Z", "author": {"login": "gjuggler"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAxnLAgBqjMwMDMzODQxNTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcCFlEsgH2gAyMzcwNDQxMzM1OjMzODJlMTVkNTgwZmEwZWIyYTdkMzkyOWM5NWY1NTA0NjFjZmQ1MWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bf7fbe7d8a97444f8a9623135e0c8367a95cf233", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/bf7fbe7d8a97444f8a9623135e0c8367a95cf233", "committedDate": "2020-02-03T18:47:24Z", "message": "Small tweaks to fix build."}, "afterCommit": {"oid": "c16aad492b917c80996993ab9297a4e195e9ffbf", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/c16aad492b917c80996993ab9297a4e195e9ffbf", "committedDate": "2020-02-03T18:53:56Z", "message": "Small tweaks to fix build."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c16aad492b917c80996993ab9297a4e195e9ffbf", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/c16aad492b917c80996993ab9297a4e195e9ffbf", "committedDate": "2020-02-03T18:53:56Z", "message": "Small tweaks to fix build."}, "afterCommit": {"oid": "74440073efd55fb1abcea7ba834401932801c535", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/74440073efd55fb1abcea7ba834401932801c535", "committedDate": "2020-02-03T18:55:38Z", "message": "Small tweaks to fix build."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNjAzNjU4", "url": "https://github.com/all-of-us/workbench/pull/3075#pullrequestreview-352603658", "createdAt": "2020-02-03T22:18:11Z", "commit": {"oid": "7b3a511038ef8550559add2dfcfd437d00ec5f54"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMjoxODoxMVrOFlB8YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMjoxODoxMVrOFlB8YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM3MzQ3Mg==", "bodyText": "Dev note: it was quite a challenge to get the sign-in and Terms of Service components to be styled correctly to allow a \"flexible\" PDF panel with a sticky footer at the bottom to contain the checkboxes & next button. Ultimately, I took an approach of using nested FlexColumn components all the way down... this seemed to be minimally disruptive to the existing styling, though I haven't extensively tested this on very differently-sized screens. A bit of tire-kicking against my staged App Engine version would be very helpful here.", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r374373472", "createdAt": "2020-02-03T22:18:11Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/sign-in.tsx", "diffHunk": "@@ -71,99 +60,188 @@ const styles = {\n       return position;\n     }\n   },\n-  signedInContainer: {\n+  signInContainer: {\n     backgroundSize: 'contain',\n     backgroundRepeat: 'no-repeat',\n     backgroundPosition: 'center',\n-    display: 'flex',\n     justifyContent: 'space-around',\n     alignItems: 'flex-start',\n-    width: 'auto'\n+    width: 'auto',\n+    minHeight: '100vh'\n   },\n \n };\n \n+// Tracks each major stage in the sign-in / sign-up flow. Most of the steps are related to new\n+// account creation.\n+enum SignInStep {\n+  // Landing page. User can choose to sign in or create an account.\n+  LANDING,\n+  // Interstitial step, where a user must enter their invitation key.\n+  //\n+  // TODO: this needs to be controllable per-environment before beta launch!\n+  INVITATION_KEY,\n+  // Terms of Service page. User must read and acknowledge the privacy statement & TOS.\n+  TERMS_OF_SERVICE,\n+  // Basic account creation page. User chooses a username and provides basic name / address info.\n+  ACCOUNT_CREATION,\n+  // Optional demographic survey. Completion of this step triggers actual user creation.\n+  DEMOGRAPHIC_SURVEY,\n+  // Account creation success page.\n+  SUCCESS_PAGE\n+}\n \n+interface BackgroundImageConfig {\n+  backgroundImgSrc: string;\n+  smallerBackgroundImgSrc: string;\n+}\n \n+export const StepToImageConfig = {\n+  [SignInStep.LANDING]: {\n+    backgroundImgSrc: '/assets/images/login-group.png',\n+    smallerBackgroundImgSrc: '/assets/images/login-standing.png'\n+  },\n+  [SignInStep.SUCCESS_PAGE]: {\n+    backgroundImgSrc: '/assets/images/congrats-female.png',\n+    smallerBackgroundImgSrc: 'assets/images/congrats-female-standing.png'\n+  }\n+};\n \n-const headerImg = '/assets/images/logo-registration-non-signed-in.svg';\n+const HEADER_IMAGE = '/assets/images/logo-registration-non-signed-in.svg';\n \n-export const SignInReact = withWindowSize()(\n+export interface SignInProps extends ServerConfigProps, WindowSizeProps {\n+  initialStep?: SignInStep;\n+  onInit: () => void;\n+  signIn: () => void;\n+}\n+\n+interface SignInState {\n+  currentStep: SignInStep;\n+  // Tracks the invitation key provided by the user. This is a required parameter in the createUser\n+  // API call.\n+  invitationKey: string;\n+  profile: Profile;\n+  // Tracks the Terms of Service version that was viewed and acknowledged by the user.\n+  // This is an optional parameter in the createUser API call.\n+  termsOfServiceVersion?: number;\n+}\n+\n+export const SignInReact = fp.flow(withServerConfig(), withWindowSize())(\n   class extends React.Component<SignInProps, SignInState> {\n \n     constructor(props: SignInProps) {\n       super(props);\n       this.state = {\n-        currentStep: {stepName: 'login', backgroundImages: signedOutImages.login},\n-        invitationKey: '',\n-        profile: {} as Profile\n+        currentStep: props.initialStep ? props.initialStep : SignInStep.LANDING,\n+        invitationKey: null,\n+        termsOfServiceVersion: null,\n+        // This defines the profile state for a new user flow. This will get passed to each\n+        // step component as a prop. When each sub-step completes, it will pass the updated Profile\n+        // data in its onComplete callback.\n+        profile: this.createEmptyProfile()\n+      };\n+    }\n+\n+    createEmptyProfile(): Profile {\n+      return {\n+        // Note: We abuse the \"username\" field here by omitting \"@domain.org\". After\n+        // profile creation, this field is populated with the full email address.\n+        username: '',\n+        dataAccessLevel: DataAccessLevel.Unregistered,\n+        givenName: '',\n+        familyName: '',\n+        contactEmail: '',\n+        currentPosition: '',\n+        organization: '',\n+        areaOfResearch: '',\n+        address: {\n+          streetAddress1: '',\n+          streetAddress2: '',\n+          city: '',\n+          state: '',\n+          country: '',\n+          zipCode: '',\n+        },\n+        institutionalAffiliations: [\n+          // We only allow entering a single institutional affiliation from the creat account\n+          // page, so we pre-fill a single entry which will be bound to the form.\n+          {\n+            institution: undefined,\n+            nonAcademicAffiliation: undefined,\n+            role: undefined,\n+          },\n+        ],\n+        demographicSurvey: {},\n+        degrees: [] as Degree[],\n       };\n-      this.setProfile = this.setProfile.bind(this);\n     }\n \n     componentDidMount() {\n       document.body.style.backgroundColor = colors.light;\n       this.props.onInit();\n     }\n \n-    nextDirective(index: string) {\n-      switch (index) {\n-        case 'login':\n+    renderSignInStep(currentStep: SignInStep) {\n+      const {enableNewAccountCreation} = this.props.serverConfig;\n+\n+      switch (currentStep) {\n+        case SignInStep.LANDING:\n           return <LoginReactComponent signIn={this.props.signIn} onCreateAccount={() =>\n-            this.setCurrentStep({stepName: 'invitationKey'})}/>;\n-        case 'invitationKey':\n-          return <InvitationKey onInvitationKeyVerify={(key) => this.onKeyVerified(key)}/>;\n-        case 'accountCreation':\n-          return <AccountCreation invitationKey={this.state.invitationKey} profile={this.state.profile}\n-                                  setProfile={(profile, nextStep) => this.setProfile(profile, nextStep)}/>;\n-        case 'accountCreationSurvey':\n-          return <AccountCreationSurvey profile={this.state.profile}\n-            invitationKey={this.state.invitationKey} setProfile={(profile, nextStep) => this.setProfile(profile, nextStep)}/>;\n-        case 'accountCreationSuccess':\n+            this.setState({\n+              currentStep: SignInStep.INVITATION_KEY\n+            })}/>;\n+        case SignInStep.INVITATION_KEY:\n+          return <InvitationKey onInvitationKeyVerified={(key: string) => this.setState({\n+            invitationKey: key,\n+            // We skip over TERMS_OF_SERVICE if new-style account creation isn't enabled.\n+            currentStep: enableNewAccountCreation ? SignInStep.TERMS_OF_SERVICE : SignInStep.ACCOUNT_CREATION\n+          })}/>;\n+        case SignInStep.TERMS_OF_SERVICE:\n+          return <AccountCreationTos\n+            pdfPath='/assets/documents/terms-of-service.pdf'\n+            onComplete={() => this.setState({\n+              termsOfServiceVersion: 1,\n+              currentStep: SignInStep.ACCOUNT_CREATION\n+            })}/>;\n+        case SignInStep.ACCOUNT_CREATION:\n+          return <AccountCreation invitationKey={this.state.invitationKey}\n+                                  profile={this.state.profile}\n+                                  onComplete={(profile: Profile) => this.setState({\n+                                    profile: profile,\n+                                    // Skip over the demographic survey if new-style form isn't enabled.\n+                                    currentStep: enableNewAccountCreation ? SignInStep.DEMOGRAPHIC_SURVEY :\n+                                      SignInStep.SUCCESS_PAGE\n+                                  })}/>;\n+        case SignInStep.DEMOGRAPHIC_SURVEY:\n+          return <AccountCreationSurvey\n+            profile={this.state.profile}\n+            invitationKey={this.state.invitationKey}\n+            termsOfServiceVersion={this.state.termsOfServiceVersion}\n+            onComplete={(profile: Profile) => this.setState({\n+              profile: profile,\n+              currentStep: SignInStep.SUCCESS_PAGE\n+            })}\n+            onPreviousClick={(profile: Profile) => this.setState({\n+              profile: profile,\n+              currentStep: SignInStep.ACCOUNT_CREATION\n+            })}/>;\n+        case SignInStep.SUCCESS_PAGE:\n           return <AccountCreationSuccess profile={this.state.profile}/>;\n         default:\n           return;\n       }\n     }\n \n-    setCurrentStep(nextStep: Step) {\n-      this.setState({\n-        currentStep: nextStep\n-      });\n-    }\n-\n-    onKeyVerified(invitationKey: string) {\n-      this.setState({\n-        invitationKey: invitationKey,\n-        currentStep: {stepName: 'accountCreation'}\n-      });\n-    }\n-\n-    setProfile(profile, currentStep) {\n-      this.setState({\n-        profile: profile,\n-        currentStep: currentStep\n-      });\n-    }\n-\n-\n-\n     render() {\n-      const {stepName, backgroundImages} = this.state.currentStep;\n-      const maxWidth = backgroundImages === undefined ? '100%' : '41.66667%';\n-      return <div style={styles.signedInContainer}>\n-        <FlexColumn style={{width: '100%'}}>\n-          <div data-test-id='template'\n-               style={styles.template(this.props.windowSize, backgroundImages)}>\n-            <img style={{height: '1.75rem', marginLeft: '1rem', marginTop: '1rem'}}\n-                 src={headerImg}/>\n-            <div style={{flex: `0 0 ${maxWidth}`,\n-              maxWidth: maxWidth, minWidth: '25rem'}}>\n-              {this.nextDirective(stepName)}\n-            </div>\n-          </div>\n+      const backgroundImages = StepToImageConfig[this.state.currentStep];\n+      return <FlexColumn style={styles.signInContainer} data-test-id='sign-in-container'>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b3a511038ef8550559add2dfcfd437d00ec5f54"}, "originalPosition": 316}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMjAxMzU1", "url": "https://github.com/all-of-us/workbench/pull/3075#pullrequestreview-353201355", "createdAt": "2020-02-04T18:26:44Z", "commit": {"oid": "7f90a23d6565389a4c055525d16cf22a95ef29a7"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoyNjo0NFrOFlerrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODo0Mzo0NlrOFmC6MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NDMzNA==", "bodyText": "This doesn't gel with my understanding of React rendering, or maybe I'm misunderstanding how you're querying the structure via the dataTestId.\nThe comment here seems to imply that this React component results in two elements being rendered: a \"FlexRow\" and a \"div\", when in fact the div really is just the HTML rendering of the FlexRow component - and when rendered it's just a single div. Am I missing something?", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r374844334", "createdAt": "2020-02-04T18:26:44Z", "author": {"login": "calbach"}, "path": "ui/src/app/components/flex.tsx", "diffHunk": "@@ -14,17 +14,25 @@ export const flexStyle = reactStyles({\n \n \n export const FlexRow = (props) => {\n-  return <div style={{...flexStyle.row, ...props.style}}>\n+  // The object destructuring below serves two purposes: (1) allows users of this component to pass\n+  // on styles which will override default FlexRow styles, and (2) allows other props passed to\n+  // FlexRow to be passed onto the inner <div>. We exclude data-test-id from being passed on, since\n+  // passing it onto the <div> would cause both the FlexRow and the <div> component to have the same", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f90a23d6565389a4c055525d16cf22a95ef29a7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMjczMQ==", "bodyText": "private? (also for scrollToBottom?)", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375422731", "createdAt": "2020-02-05T18:13:43Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/login/account-creation/account-creation-tos.tsx", "diffHunk": "@@ -0,0 +1,195 @@\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {CheckBox} from 'app/components/inputs';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import colors from 'app/styles/colors';\n+import {reactStyles, withWindowSize} from 'app/utils';\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+const baseCheckboxLabelStyle = {\n+  color: colors.primary,\n+  fontFamily: 'Montserrat',\n+  fontSize: '14px',\n+  fontWeight: 400,\n+  paddingLeft: '0.25rem',\n+  paddingRight: '0.5rem',\n+};\n+\n+const styles = reactStyles({\n+  checkbox: {\n+    marginRight: '.31667rem', zoom: '1.5',\n+  },\n+  checkboxLabel: baseCheckboxLabelStyle,\n+  // We add opacity to make disabled controls even more obvious (classic CSS trick).\n+  disabledCheckboxLabel: {\n+    ...baseCheckboxLabelStyle,\n+    opacity: '0.5',\n+  },\n+  noticeText: {\n+    fontSize: 14,\n+    fontWeight: 600,\n+    color: colors.primary,\n+  },\n+});\n+\n+export interface AccountCreationTosProps {\n+  windowSize: { width: number, height: number };\n+  // Callback which will be called by this component when the user clicks \"Next\".\n+  onComplete: () => void;\n+  // Path to the Terms of Service PDF file to be displayed.\n+  pdfPath: string;\n+}\n+\n+interface AccountCreationTosState {\n+  hasReadEntireTos: boolean;\n+  hasAckedPrivacyStatement: boolean;\n+  hasAckedTermsOfService: boolean;\n+  // Whether the PDF document is currently being loaded. A spinner will show while true.\n+  loadingPdf: boolean;\n+  // Once the PDF has been loaded, this value contains the number of pages in the PDF document.\n+  numPages: number;\n+}\n+\n+export const AccountCreationTos = withWindowSize()(\n+  class extends React.Component<AccountCreationTosProps, AccountCreationTosState> {\n+\n+    // Tracks whether this component has created an intersection observer to track the last page\n+    // visibility yet.\n+    hasCreatedIntersectionObserver = false;\n+    // Once the last page has been loaded, this contains a reference to the page's DOM element.\n+    lastPage: HTMLElement;\n+\n+    constructor(props: AccountCreationTosProps) {\n+      super(props);\n+      this.state = {\n+        hasReadEntireTos: false,\n+        hasAckedPrivacyStatement: false,\n+        hasAckedTermsOfService: false,\n+        loadingPdf: true,\n+        numPages: 0,\n+      };\n+    }\n+\n+    /**\n+     * Handles the onRenderSuccess callback from the Page element at the end of the document.\n+     * This sets up the intersection listener which will change state when the user scrolls to the\n+     * end of the document.\n+     */\n+    handleLastPageRender() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f90a23d6565389a4c055525d16cf22a95ef29a7"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyNTA0Mw==", "bodyText": "Thank you for adding this, I can't take any more log spam", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375425043", "createdAt": "2020-02-05T18:18:01Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/login/account-creation/account-creation-tos.tsx", "diffHunk": "@@ -0,0 +1,195 @@\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {CheckBox} from 'app/components/inputs';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import colors from 'app/styles/colors';\n+import {reactStyles, withWindowSize} from 'app/utils';\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+const baseCheckboxLabelStyle = {\n+  color: colors.primary,\n+  fontFamily: 'Montserrat',\n+  fontSize: '14px',\n+  fontWeight: 400,\n+  paddingLeft: '0.25rem',\n+  paddingRight: '0.5rem',\n+};\n+\n+const styles = reactStyles({\n+  checkbox: {\n+    marginRight: '.31667rem', zoom: '1.5',\n+  },\n+  checkboxLabel: baseCheckboxLabelStyle,\n+  // We add opacity to make disabled controls even more obvious (classic CSS trick).\n+  disabledCheckboxLabel: {\n+    ...baseCheckboxLabelStyle,\n+    opacity: '0.5',\n+  },\n+  noticeText: {\n+    fontSize: 14,\n+    fontWeight: 600,\n+    color: colors.primary,\n+  },\n+});\n+\n+export interface AccountCreationTosProps {\n+  windowSize: { width: number, height: number };\n+  // Callback which will be called by this component when the user clicks \"Next\".\n+  onComplete: () => void;\n+  // Path to the Terms of Service PDF file to be displayed.\n+  pdfPath: string;\n+}\n+\n+interface AccountCreationTosState {\n+  hasReadEntireTos: boolean;\n+  hasAckedPrivacyStatement: boolean;\n+  hasAckedTermsOfService: boolean;\n+  // Whether the PDF document is currently being loaded. A spinner will show while true.\n+  loadingPdf: boolean;\n+  // Once the PDF has been loaded, this value contains the number of pages in the PDF document.\n+  numPages: number;\n+}\n+\n+export const AccountCreationTos = withWindowSize()(\n+  class extends React.Component<AccountCreationTosProps, AccountCreationTosState> {\n+\n+    // Tracks whether this component has created an intersection observer to track the last page\n+    // visibility yet.\n+    hasCreatedIntersectionObserver = false;\n+    // Once the last page has been loaded, this contains a reference to the page's DOM element.\n+    lastPage: HTMLElement;\n+\n+    constructor(props: AccountCreationTosProps) {\n+      super(props);\n+      this.state = {\n+        hasReadEntireTos: false,\n+        hasAckedPrivacyStatement: false,\n+        hasAckedTermsOfService: false,\n+        loadingPdf: true,\n+        numPages: 0,\n+      };\n+    }\n+\n+    /**\n+     * Handles the onRenderSuccess callback from the Page element at the end of the document.\n+     * This sets up the intersection listener which will change state when the user scrolls to the\n+     * end of the document.\n+     */\n+    handleLastPageRender() {\n+      if (this.hasCreatedIntersectionObserver) {\n+        return;\n+      }\n+      this.hasCreatedIntersectionObserver = true;\n+      const intersectionCallback: IntersectionObserverCallback = (\n+        entries: IntersectionObserverEntry[], unusedObserver: IntersectionObserver) => {\n+        for (const entry of entries) {\n+          if (entry.isIntersecting) {\n+            this.setState({hasReadEntireTos: true});\n+          }\n+        }\n+      };\n+      const observer = new IntersectionObserver(intersectionCallback);\n+      observer.observe(this.lastPage);\n+    }\n+\n+    /**\n+     * Attempts to scroll the last page of the PDF document into view.\n+     */\n+    scrollToBottom() {\n+      if (this.lastPage) {\n+        this.lastPage.scrollIntoView({block: 'end'});\n+      } else {\n+        throw new Error('Last page has not yet loaded.');\n+      }\n+    }\n+\n+    render() {\n+      const {numPages, loadingPdf, hasReadEntireTos, hasAckedTermsOfService, hasAckedPrivacyStatement} = this.state;\n+\n+      return <FlexColumn data-test-id='account-creation-tos'\n+                         style={{flex: 1, padding: '1rem 3rem 0 3rem'}}>\n+        {/* TODO: all of this PDF rendering stuff should be broken out into a separate component. */}\n+        <div style={{flex: '1 1 0', overflowY: 'auto'}}>\n+          {loadingPdf && <SpinnerOverlay/>}\n+          <Document data-test-id='tos-pdf-document' file={this.props.pdfPath}\n+                    loading=''\n+                    onLoadSuccess={data => this.setState(\n+                      {numPages: data.numPages, loadingPdf: false})}\n+          >\n+            {\n+              Array.from(\n+                new Array(numPages),\n+                (el, index) => (\n+                  <Page\n+                    renderAnnotationLayer={false}\n+                    renderTextLayer={false}\n+                    loading=''\n+                    className='terms-of-service__page'\n+                    width={Math.max(500, this.props.windowSize.width * .75)}\n+                    key={`page_${index + 1}`}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f90a23d6565389a4c055525d16cf22a95ef29a7"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyNTQ4OA==", "bodyText": "Is the __ a convention we've used elsewhere?", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375425488", "createdAt": "2020-02-05T18:18:51Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/login/account-creation/account-creation-tos.tsx", "diffHunk": "@@ -0,0 +1,195 @@\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {CheckBox} from 'app/components/inputs';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import colors from 'app/styles/colors';\n+import {reactStyles, withWindowSize} from 'app/utils';\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+const baseCheckboxLabelStyle = {\n+  color: colors.primary,\n+  fontFamily: 'Montserrat',\n+  fontSize: '14px',\n+  fontWeight: 400,\n+  paddingLeft: '0.25rem',\n+  paddingRight: '0.5rem',\n+};\n+\n+const styles = reactStyles({\n+  checkbox: {\n+    marginRight: '.31667rem', zoom: '1.5',\n+  },\n+  checkboxLabel: baseCheckboxLabelStyle,\n+  // We add opacity to make disabled controls even more obvious (classic CSS trick).\n+  disabledCheckboxLabel: {\n+    ...baseCheckboxLabelStyle,\n+    opacity: '0.5',\n+  },\n+  noticeText: {\n+    fontSize: 14,\n+    fontWeight: 600,\n+    color: colors.primary,\n+  },\n+});\n+\n+export interface AccountCreationTosProps {\n+  windowSize: { width: number, height: number };\n+  // Callback which will be called by this component when the user clicks \"Next\".\n+  onComplete: () => void;\n+  // Path to the Terms of Service PDF file to be displayed.\n+  pdfPath: string;\n+}\n+\n+interface AccountCreationTosState {\n+  hasReadEntireTos: boolean;\n+  hasAckedPrivacyStatement: boolean;\n+  hasAckedTermsOfService: boolean;\n+  // Whether the PDF document is currently being loaded. A spinner will show while true.\n+  loadingPdf: boolean;\n+  // Once the PDF has been loaded, this value contains the number of pages in the PDF document.\n+  numPages: number;\n+}\n+\n+export const AccountCreationTos = withWindowSize()(\n+  class extends React.Component<AccountCreationTosProps, AccountCreationTosState> {\n+\n+    // Tracks whether this component has created an intersection observer to track the last page\n+    // visibility yet.\n+    hasCreatedIntersectionObserver = false;\n+    // Once the last page has been loaded, this contains a reference to the page's DOM element.\n+    lastPage: HTMLElement;\n+\n+    constructor(props: AccountCreationTosProps) {\n+      super(props);\n+      this.state = {\n+        hasReadEntireTos: false,\n+        hasAckedPrivacyStatement: false,\n+        hasAckedTermsOfService: false,\n+        loadingPdf: true,\n+        numPages: 0,\n+      };\n+    }\n+\n+    /**\n+     * Handles the onRenderSuccess callback from the Page element at the end of the document.\n+     * This sets up the intersection listener which will change state when the user scrolls to the\n+     * end of the document.\n+     */\n+    handleLastPageRender() {\n+      if (this.hasCreatedIntersectionObserver) {\n+        return;\n+      }\n+      this.hasCreatedIntersectionObserver = true;\n+      const intersectionCallback: IntersectionObserverCallback = (\n+        entries: IntersectionObserverEntry[], unusedObserver: IntersectionObserver) => {\n+        for (const entry of entries) {\n+          if (entry.isIntersecting) {\n+            this.setState({hasReadEntireTos: true});\n+          }\n+        }\n+      };\n+      const observer = new IntersectionObserver(intersectionCallback);\n+      observer.observe(this.lastPage);\n+    }\n+\n+    /**\n+     * Attempts to scroll the last page of the PDF document into view.\n+     */\n+    scrollToBottom() {\n+      if (this.lastPage) {\n+        this.lastPage.scrollIntoView({block: 'end'});\n+      } else {\n+        throw new Error('Last page has not yet loaded.');\n+      }\n+    }\n+\n+    render() {\n+      const {numPages, loadingPdf, hasReadEntireTos, hasAckedTermsOfService, hasAckedPrivacyStatement} = this.state;\n+\n+      return <FlexColumn data-test-id='account-creation-tos'\n+                         style={{flex: 1, padding: '1rem 3rem 0 3rem'}}>\n+        {/* TODO: all of this PDF rendering stuff should be broken out into a separate component. */}\n+        <div style={{flex: '1 1 0', overflowY: 'auto'}}>\n+          {loadingPdf && <SpinnerOverlay/>}\n+          <Document data-test-id='tos-pdf-document' file={this.props.pdfPath}\n+                    loading=''\n+                    onLoadSuccess={data => this.setState(\n+                      {numPages: data.numPages, loadingPdf: false})}\n+          >\n+            {\n+              Array.from(\n+                new Array(numPages),\n+                (el, index) => (\n+                  <Page\n+                    renderAnnotationLayer={false}\n+                    renderTextLayer={false}\n+                    loading=''\n+                    className='terms-of-service__page'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f90a23d6565389a4c055525d16cf22a95ef29a7"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyNjE4NA==", "bodyText": "Our usual pattern for React components is to use inline style (despite my initial grumbling). Is there a need for this to be done in CSS? The classes here don't seem particularly general", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375426184", "createdAt": "2020-02-05T18:20:21Z", "author": {"login": "calbach"}, "path": "ui/src/styles.css", "diffHunk": "@@ -196,3 +196,19 @@ iframe#launcher {\n     transform: rotate(359deg);\n   }\n }\n+\n+/*\n+ * Hides the unnecessary \"select all\" header from the multiselect drop-down for the\n+ * Degrees multi-select in the Account Creation component.\n+ */\n+.create-account__degree-select .p-multiselect-header {\n+  display: none;\n+}\n+\n+.terms-of-service__page {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f90a23d6565389a4c055525d16cf22a95ef29a7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyNjQ0MA==", "bodyText": "Why this change?", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375426440", "createdAt": "2020-02-05T18:20:50Z", "author": {"login": "calbach"}, "path": "ui/tsconfig.json", "diffHunk": "@@ -20,7 +20,7 @@\n       \"dom\"\n     ],\n     \"module\": \"es2015\",\n-    \"baseUrl\": \"./\",\n+    \"baseUrl\": \"./src\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f90a23d6565389a4c055525d16cf22a95ef29a7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMTExNA==", "bodyText": "I don't understand this precondition. Is this for the new account creation logic, or the old?", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375431114", "createdAt": "2020-02-05T18:29:55Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/login/account-creation/account-creation.tsx", "diffHunk": "@@ -175,45 +147,59 @@ export const MultiSelectWithLabel = (props) => {\n   </FlexColumn>;\n };\n \n+export interface AccountCreationProps {\n+  profile: Profile;\n+  invitationKey: string;\n+  onComplete: (profile: Profile) => void;\n+}\n+\n+export interface AccountCreationState {\n+  creatingAccount: boolean;\n+  errors: any;\n+  invalidEmail: boolean;\n+  rolesOptions: any;\n+  profile: Profile;\n+  showAllFieldsRequiredError: boolean;\n+  showInstitution: boolean;\n+  showNonAcademicAffiliationRole: boolean;\n+  showNonAcademicAffiliationOther: boolean;\n+  usernameCheckInProgress: boolean;\n+  usernameConflictError: boolean;\n+  institutionName: string;\n+  institutionRole: string;\n+  nonAcademicAffiliation: string;\n+  nonAcademicAffiliationRole: string;\n+  nonAcademicAffiliationOther: string;\n+}\n+\n export class AccountCreation extends React.Component<AccountCreationProps, AccountCreationState> {\n   private usernameCheckTimeout: NodeJS.Timer;\n \n   constructor(props: AccountCreationProps) {\n+    if (props.profile.institutionalAffiliations.length !== 1) {\n+      throw new Error('Profile must be pre-allocated with 1 institutional affiliation.');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f90a23d6565389a4c055525d16cf22a95ef29a7"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNzg3Mw==", "bodyText": "nit: In general I think it is best practice to avoid directly mutating the innards of the state object, though this is probably a pretty innocuous case since it's happening in the state callback. I think the preferred approach here would be either lodash set or via shallow copy:\nreturn {\n   ...currentState.profile.institutionalAffiliations[0],\n  role: '',\n  institution: '',\n  other: ''\n}", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375437873", "createdAt": "2020-02-05T18:43:46Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/login/account-creation/account-creation.tsx", "diffHunk": "@@ -362,10 +336,14 @@ export class AccountCreation extends React.Component<AccountCreationProps, Accou\n   }\n \n   clearInstitutionAffiliation() {\n-    this.updateInstitutionAffiliation('nonAcademicAffiliation', '');\n-    this.updateInstitutionAffiliation('role', '');\n-    this.updateInstitutionAffiliation('institution', '');\n-    this.updateInstitutionAffiliation('other', '');\n+    this.setState(currentState => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f90a23d6565389a4c055525d16cf22a95ef29a7"}, "originalPosition": 226}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MTY1NzI2", "url": "https://github.com/all-of-us/workbench/pull/3075#pullrequestreview-354165726", "createdAt": "2020-02-06T02:20:02Z", "commit": {"oid": "7f90a23d6565389a4c055525d16cf22a95ef29a7"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMjoyMDowMlrOFmNdMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMjozMDo1OVrOFmNmPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxMDY3Mg==", "bodyText": "Presumably this last part wasn't meant to be included in the TOS content itself, as of now it's super confusing since we'd show multiple sets of checkboxes, the ones in the PDF of course are not interactive:", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375610672", "createdAt": "2020-02-06T02:20:02Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/login/account-creation/account-creation-tos.spec.tsx", "diffHunk": "@@ -0,0 +1,91 @@\n+import {mount, ReactWrapper, shallow, ShallowWrapper} from 'enzyme';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import AccountCreationTos, {AccountCreationTosProps} from './account-creation-tos';\n+import {Document, Page, pdfjs} from 'react-pdf';\n+\n+type AnyWrapper = (ShallowWrapper|ReactWrapper);\n+const getPrivacyCheckbox = (wrapper: AnyWrapper): AnyWrapper => {\n+  return wrapper.find('[data-test-id=\"privacy-statement-check\"]');\n+};\n+const getTosCheckbox = (wrapper: AnyWrapper): AnyWrapper => {\n+  return wrapper.find('[data-test-id=\"terms-of-service-check\"]');\n+};\n+const getNextButton = (wrapper: AnyWrapper ): AnyWrapper => {\n+  return wrapper.find('[data-test-id=\"next-button\"]');\n+};\n+\n+let props: AccountCreationTosProps;\n+const onCompleteSpy = jest.fn();\n+\n+beforeEach(() => {\n+  jest.clearAllMocks();\n+  props = {\n+    windowSize: {width: 1700, height: 0},\n+    onComplete: onCompleteSpy,\n+    pdfPath: '/assets/documents/terms-of-service.pdf'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f90a23d6565389a4c055525d16cf22a95ef29a7"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxMTM4NA==", "bodyText": "Should the TOS component itself live somewhere outside of the account creation flow? I thought we were planning to eventually have some kind of client-side interceptor to redirect users who hadn't submitted the TOS to do so (i.e. for handling future potential TOS updates). If that work is not planned for now, probably fine to leave as-is.", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375611384", "createdAt": "2020-02-06T02:23:48Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/login/account-creation/account-creation-tos.tsx", "diffHunk": "@@ -0,0 +1,195 @@\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {CheckBox} from 'app/components/inputs';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import colors from 'app/styles/colors';\n+import {reactStyles, withWindowSize} from 'app/utils';\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+const baseCheckboxLabelStyle = {\n+  color: colors.primary,\n+  fontFamily: 'Montserrat',\n+  fontSize: '14px',\n+  fontWeight: 400,\n+  paddingLeft: '0.25rem',\n+  paddingRight: '0.5rem',\n+};\n+\n+const styles = reactStyles({\n+  checkbox: {\n+    marginRight: '.31667rem', zoom: '1.5',\n+  },\n+  checkboxLabel: baseCheckboxLabelStyle,\n+  // We add opacity to make disabled controls even more obvious (classic CSS trick).\n+  disabledCheckboxLabel: {\n+    ...baseCheckboxLabelStyle,\n+    opacity: '0.5',\n+  },\n+  noticeText: {\n+    fontSize: 14,\n+    fontWeight: 600,\n+    color: colors.primary,\n+  },\n+});\n+\n+export interface AccountCreationTosProps {\n+  windowSize: { width: number, height: number };\n+  // Callback which will be called by this component when the user clicks \"Next\".\n+  onComplete: () => void;\n+  // Path to the Terms of Service PDF file to be displayed.\n+  pdfPath: string;\n+}\n+\n+interface AccountCreationTosState {\n+  hasReadEntireTos: boolean;\n+  hasAckedPrivacyStatement: boolean;\n+  hasAckedTermsOfService: boolean;\n+  // Whether the PDF document is currently being loaded. A spinner will show while true.\n+  loadingPdf: boolean;\n+  // Once the PDF has been loaded, this value contains the number of pages in the PDF document.\n+  numPages: number;\n+}\n+\n+export const AccountCreationTos = withWindowSize()(\n+  class extends React.Component<AccountCreationTosProps, AccountCreationTosState> {\n+\n+    // Tracks whether this component has created an intersection observer to track the last page\n+    // visibility yet.\n+    hasCreatedIntersectionObserver = false;\n+    // Once the last page has been loaded, this contains a reference to the page's DOM element.\n+    lastPage: HTMLElement;\n+\n+    constructor(props: AccountCreationTosProps) {\n+      super(props);\n+      this.state = {\n+        hasReadEntireTos: false,\n+        hasAckedPrivacyStatement: false,\n+        hasAckedTermsOfService: false,\n+        loadingPdf: true,\n+        numPages: 0,\n+      };\n+    }\n+\n+    /**\n+     * Handles the onRenderSuccess callback from the Page element at the end of the document.\n+     * This sets up the intersection listener which will change state when the user scrolls to the\n+     * end of the document.\n+     */\n+    handleLastPageRender() {\n+      if (this.hasCreatedIntersectionObserver) {\n+        return;\n+      }\n+      this.hasCreatedIntersectionObserver = true;\n+      const intersectionCallback: IntersectionObserverCallback = (\n+        entries: IntersectionObserverEntry[], unusedObserver: IntersectionObserver) => {\n+        for (const entry of entries) {\n+          if (entry.isIntersecting) {\n+            this.setState({hasReadEntireTos: true});\n+          }\n+        }\n+      };\n+      const observer = new IntersectionObserver(intersectionCallback);\n+      observer.observe(this.lastPage);\n+    }\n+\n+    /**\n+     * Attempts to scroll the last page of the PDF document into view.\n+     */\n+    scrollToBottom() {\n+      if (this.lastPage) {\n+        this.lastPage.scrollIntoView({block: 'end'});\n+      } else {\n+        throw new Error('Last page has not yet loaded.');\n+      }\n+    }\n+\n+    render() {\n+      const {numPages, loadingPdf, hasReadEntireTos, hasAckedTermsOfService, hasAckedPrivacyStatement} = this.state;\n+\n+      return <FlexColumn data-test-id='account-creation-tos'\n+                         style={{flex: 1, padding: '1rem 3rem 0 3rem'}}>\n+        {/* TODO: all of this PDF rendering stuff should be broken out into a separate component. */}\n+        <div style={{flex: '1 1 0', overflowY: 'auto'}}>\n+          {loadingPdf && <SpinnerOverlay/>}\n+          <Document data-test-id='tos-pdf-document' file={this.props.pdfPath}\n+                    loading=''\n+                    onLoadSuccess={data => this.setState(\n+                      {numPages: data.numPages, loadingPdf: false})}\n+          >\n+            {\n+              Array.from(\n+                new Array(numPages),\n+                (el, index) => (\n+                  <Page\n+                    renderAnnotationLayer={false}\n+                    renderTextLayer={false}\n+                    loading=''\n+                    className='terms-of-service__page'\n+                    width={Math.max(500, this.props.windowSize.width * .75)}\n+                    key={`page_${index + 1}`}\n+                    pageNumber={index + 1}\n+                    inputRef={index === numPages - 1 ? (ref) => {\n+                      this.lastPage = ref;\n+                    } : undefined}\n+                    onRenderSuccess={index === numPages - 1 ? () => this.handleLastPageRender() :\n+                      undefined}\n+                  />\n+                ),\n+              )\n+            }\n+          </Document>\n+        </div>\n+        <FlexRow\n+          style={{display: 'inline-flex', padding: '1rem', maxWidth: '1000px', margin: 'auto'}}>\n+          <div style={{flex: 3}}>\n+            <div style={{...styles.noticeText, marginBottom: '.5rem', height: '3rem'}}>\n+              By clicking here and moving to the Registration step, you acknowledge that you\n+              understand the terms of this agreement and agree to abide by them.\n+              {!hasReadEntireTos && <span><br/>\n+              <a data-test-id='scroll-to-bottom'\n+                 onClick={() => this.scrollToBottom()}\n+              >Scroll to bottom</a></span>}\n+            </div>\n+            <div style={{marginBottom: '.25rem'}}>\n+              <CheckBox data-test-id='privacy-statement-check'\n+                        checked={false}\n+                        disabled={!hasReadEntireTos}\n+                        onChange={checked => this.setState({hasAckedPrivacyStatement: true})}\n+                        style={styles.checkbox}\n+                        labelStyle={hasReadEntireTos ?\n+                          styles.checkboxLabel :\n+                          styles.disabledCheckboxLabel}\n+                        wrapperStyle={{marginBottom: '0.5rem'}}\n+                        label={<span>\n+                I have read and understand the <i>All of Us</i> Research Program Privacy Statement.</span>}\n+              /></div>\n+            <div>\n+              <CheckBox data-test-id='terms-of-service-check'\n+                        checked={false}\n+                        disabled={!hasReadEntireTos}\n+                        onChange={checked => this.setState({hasAckedTermsOfService: true})}\n+                        style={styles.checkbox}\n+                        labelStyle={hasReadEntireTos ?\n+                          styles.checkboxLabel :\n+                          styles.disabledCheckboxLabel}\n+                        wrapperStyle={{marginBottom: '0.5rem'}}\n+                        label={<span>\n+                I have read and understand the <i>All of Us</i> Research Program Terms of Use described above.</span>}\n+              /></div>\n+          </div>\n+          <FlexColumn style={{paddingLeft: '3rem', alignItems: 'center', justifyContent: 'center'}}>\n+            <Button data-test-id='next-button'\n+                    style={{width: '5rem', height: '2rem', margin: '.25rem .5rem .25rem 0'}}\n+                    disabled={!hasReadEntireTos || !hasAckedPrivacyStatement ||\n+                    !hasAckedTermsOfService}\n+                    onClick={() => this.props.onComplete()}>\n+              Next\n+            </Button>\n+          </FlexColumn>\n+        </FlexRow>\n+      </FlexColumn>;\n+    }\n+  });\n+\n+export default AccountCreationTos;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f90a23d6565389a4c055525d16cf22a95ef29a7"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxMTkxOA==", "bodyText": "There used to be images on the account creation page - was removal intentional?", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375611918", "createdAt": "2020-02-06T02:26:18Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/login/sign-in.tsx", "diffHunk": "@@ -71,99 +60,188 @@ const styles = {\n       return position;\n     }\n   },\n-  signedInContainer: {\n+  signInContainer: {\n     backgroundSize: 'contain',\n     backgroundRepeat: 'no-repeat',\n     backgroundPosition: 'center',\n-    display: 'flex',\n     justifyContent: 'space-around',\n     alignItems: 'flex-start',\n-    width: 'auto'\n+    width: 'auto',\n+    minHeight: '100vh'\n   },\n \n };\n \n+// Tracks each major stage in the sign-in / sign-up flow. Most of the steps are related to new\n+// account creation.\n+enum SignInStep {\n+  // Landing page. User can choose to sign in or create an account.\n+  LANDING,\n+  // Interstitial step, where a user must enter their invitation key.\n+  //\n+  // TODO: this needs to be controllable per-environment before beta launch!\n+  INVITATION_KEY,\n+  // Terms of Service page. User must read and acknowledge the privacy statement & TOS.\n+  TERMS_OF_SERVICE,\n+  // Basic account creation page. User chooses a username and provides basic name / address info.\n+  ACCOUNT_CREATION,\n+  // Optional demographic survey. Completion of this step triggers actual user creation.\n+  DEMOGRAPHIC_SURVEY,\n+  // Account creation success page.\n+  SUCCESS_PAGE\n+}\n \n+interface BackgroundImageConfig {\n+  backgroundImgSrc: string;\n+  smallerBackgroundImgSrc: string;\n+}\n \n+export const StepToImageConfig = {\n+  [SignInStep.LANDING]: {\n+    backgroundImgSrc: '/assets/images/login-group.png',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f90a23d6565389a4c055525d16cf22a95ef29a7"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxMjU2OA==", "bodyText": "I couldn't break it - looks pretty nice to me.", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375612568", "createdAt": "2020-02-06T02:29:02Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/login/sign-in.tsx", "diffHunk": "@@ -71,99 +60,188 @@ const styles = {\n       return position;\n     }\n   },\n-  signedInContainer: {\n+  signInContainer: {\n     backgroundSize: 'contain',\n     backgroundRepeat: 'no-repeat',\n     backgroundPosition: 'center',\n-    display: 'flex',\n     justifyContent: 'space-around',\n     alignItems: 'flex-start',\n-    width: 'auto'\n+    width: 'auto',\n+    minHeight: '100vh'\n   },\n \n };\n \n+// Tracks each major stage in the sign-in / sign-up flow. Most of the steps are related to new\n+// account creation.\n+enum SignInStep {\n+  // Landing page. User can choose to sign in or create an account.\n+  LANDING,\n+  // Interstitial step, where a user must enter their invitation key.\n+  //\n+  // TODO: this needs to be controllable per-environment before beta launch!\n+  INVITATION_KEY,\n+  // Terms of Service page. User must read and acknowledge the privacy statement & TOS.\n+  TERMS_OF_SERVICE,\n+  // Basic account creation page. User chooses a username and provides basic name / address info.\n+  ACCOUNT_CREATION,\n+  // Optional demographic survey. Completion of this step triggers actual user creation.\n+  DEMOGRAPHIC_SURVEY,\n+  // Account creation success page.\n+  SUCCESS_PAGE\n+}\n \n+interface BackgroundImageConfig {\n+  backgroundImgSrc: string;\n+  smallerBackgroundImgSrc: string;\n+}\n \n+export const StepToImageConfig = {\n+  [SignInStep.LANDING]: {\n+    backgroundImgSrc: '/assets/images/login-group.png',\n+    smallerBackgroundImgSrc: '/assets/images/login-standing.png'\n+  },\n+  [SignInStep.SUCCESS_PAGE]: {\n+    backgroundImgSrc: '/assets/images/congrats-female.png',\n+    smallerBackgroundImgSrc: 'assets/images/congrats-female-standing.png'\n+  }\n+};\n \n-const headerImg = '/assets/images/logo-registration-non-signed-in.svg';\n+const HEADER_IMAGE = '/assets/images/logo-registration-non-signed-in.svg';\n \n-export const SignInReact = withWindowSize()(\n+export interface SignInProps extends ServerConfigProps, WindowSizeProps {\n+  initialStep?: SignInStep;\n+  onInit: () => void;\n+  signIn: () => void;\n+}\n+\n+interface SignInState {\n+  currentStep: SignInStep;\n+  // Tracks the invitation key provided by the user. This is a required parameter in the createUser\n+  // API call.\n+  invitationKey: string;\n+  profile: Profile;\n+  // Tracks the Terms of Service version that was viewed and acknowledged by the user.\n+  // This is an optional parameter in the createUser API call.\n+  termsOfServiceVersion?: number;\n+}\n+\n+export const SignInReact = fp.flow(withServerConfig(), withWindowSize())(\n   class extends React.Component<SignInProps, SignInState> {\n \n     constructor(props: SignInProps) {\n       super(props);\n       this.state = {\n-        currentStep: {stepName: 'login', backgroundImages: signedOutImages.login},\n-        invitationKey: '',\n-        profile: {} as Profile\n+        currentStep: props.initialStep ? props.initialStep : SignInStep.LANDING,\n+        invitationKey: null,\n+        termsOfServiceVersion: null,\n+        // This defines the profile state for a new user flow. This will get passed to each\n+        // step component as a prop. When each sub-step completes, it will pass the updated Profile\n+        // data in its onComplete callback.\n+        profile: this.createEmptyProfile()\n+      };\n+    }\n+\n+    createEmptyProfile(): Profile {\n+      return {\n+        // Note: We abuse the \"username\" field here by omitting \"@domain.org\". After\n+        // profile creation, this field is populated with the full email address.\n+        username: '',\n+        dataAccessLevel: DataAccessLevel.Unregistered,\n+        givenName: '',\n+        familyName: '',\n+        contactEmail: '',\n+        currentPosition: '',\n+        organization: '',\n+        areaOfResearch: '',\n+        address: {\n+          streetAddress1: '',\n+          streetAddress2: '',\n+          city: '',\n+          state: '',\n+          country: '',\n+          zipCode: '',\n+        },\n+        institutionalAffiliations: [\n+          // We only allow entering a single institutional affiliation from the creat account\n+          // page, so we pre-fill a single entry which will be bound to the form.\n+          {\n+            institution: undefined,\n+            nonAcademicAffiliation: undefined,\n+            role: undefined,\n+          },\n+        ],\n+        demographicSurvey: {},\n+        degrees: [] as Degree[],\n       };\n-      this.setProfile = this.setProfile.bind(this);\n     }\n \n     componentDidMount() {\n       document.body.style.backgroundColor = colors.light;\n       this.props.onInit();\n     }\n \n-    nextDirective(index: string) {\n-      switch (index) {\n-        case 'login':\n+    renderSignInStep(currentStep: SignInStep) {\n+      const {enableNewAccountCreation} = this.props.serverConfig;\n+\n+      switch (currentStep) {\n+        case SignInStep.LANDING:\n           return <LoginReactComponent signIn={this.props.signIn} onCreateAccount={() =>\n-            this.setCurrentStep({stepName: 'invitationKey'})}/>;\n-        case 'invitationKey':\n-          return <InvitationKey onInvitationKeyVerify={(key) => this.onKeyVerified(key)}/>;\n-        case 'accountCreation':\n-          return <AccountCreation invitationKey={this.state.invitationKey} profile={this.state.profile}\n-                                  setProfile={(profile, nextStep) => this.setProfile(profile, nextStep)}/>;\n-        case 'accountCreationSurvey':\n-          return <AccountCreationSurvey profile={this.state.profile}\n-            invitationKey={this.state.invitationKey} setProfile={(profile, nextStep) => this.setProfile(profile, nextStep)}/>;\n-        case 'accountCreationSuccess':\n+            this.setState({\n+              currentStep: SignInStep.INVITATION_KEY\n+            })}/>;\n+        case SignInStep.INVITATION_KEY:\n+          return <InvitationKey onInvitationKeyVerified={(key: string) => this.setState({\n+            invitationKey: key,\n+            // We skip over TERMS_OF_SERVICE if new-style account creation isn't enabled.\n+            currentStep: enableNewAccountCreation ? SignInStep.TERMS_OF_SERVICE : SignInStep.ACCOUNT_CREATION\n+          })}/>;\n+        case SignInStep.TERMS_OF_SERVICE:\n+          return <AccountCreationTos\n+            pdfPath='/assets/documents/terms-of-service.pdf'\n+            onComplete={() => this.setState({\n+              termsOfServiceVersion: 1,\n+              currentStep: SignInStep.ACCOUNT_CREATION\n+            })}/>;\n+        case SignInStep.ACCOUNT_CREATION:\n+          return <AccountCreation invitationKey={this.state.invitationKey}\n+                                  profile={this.state.profile}\n+                                  onComplete={(profile: Profile) => this.setState({\n+                                    profile: profile,\n+                                    // Skip over the demographic survey if new-style form isn't enabled.\n+                                    currentStep: enableNewAccountCreation ? SignInStep.DEMOGRAPHIC_SURVEY :\n+                                      SignInStep.SUCCESS_PAGE\n+                                  })}/>;\n+        case SignInStep.DEMOGRAPHIC_SURVEY:\n+          return <AccountCreationSurvey\n+            profile={this.state.profile}\n+            invitationKey={this.state.invitationKey}\n+            termsOfServiceVersion={this.state.termsOfServiceVersion}\n+            onComplete={(profile: Profile) => this.setState({\n+              profile: profile,\n+              currentStep: SignInStep.SUCCESS_PAGE\n+            })}\n+            onPreviousClick={(profile: Profile) => this.setState({\n+              profile: profile,\n+              currentStep: SignInStep.ACCOUNT_CREATION\n+            })}/>;\n+        case SignInStep.SUCCESS_PAGE:\n           return <AccountCreationSuccess profile={this.state.profile}/>;\n         default:\n           return;\n       }\n     }\n \n-    setCurrentStep(nextStep: Step) {\n-      this.setState({\n-        currentStep: nextStep\n-      });\n-    }\n-\n-    onKeyVerified(invitationKey: string) {\n-      this.setState({\n-        invitationKey: invitationKey,\n-        currentStep: {stepName: 'accountCreation'}\n-      });\n-    }\n-\n-    setProfile(profile, currentStep) {\n-      this.setState({\n-        profile: profile,\n-        currentStep: currentStep\n-      });\n-    }\n-\n-\n-\n     render() {\n-      const {stepName, backgroundImages} = this.state.currentStep;\n-      const maxWidth = backgroundImages === undefined ? '100%' : '41.66667%';\n-      return <div style={styles.signedInContainer}>\n-        <FlexColumn style={{width: '100%'}}>\n-          <div data-test-id='template'\n-               style={styles.template(this.props.windowSize, backgroundImages)}>\n-            <img style={{height: '1.75rem', marginLeft: '1rem', marginTop: '1rem'}}\n-                 src={headerImg}/>\n-            <div style={{flex: `0 0 ${maxWidth}`,\n-              maxWidth: maxWidth, minWidth: '25rem'}}>\n-              {this.nextDirective(stepName)}\n-            </div>\n-          </div>\n+      const backgroundImages = StepToImageConfig[this.state.currentStep];\n+      return <FlexColumn style={styles.signInContainer} data-test-id='sign-in-container'>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM3MzQ3Mg=="}, "originalCommit": {"oid": "7b3a511038ef8550559add2dfcfd437d00ec5f54"}, "originalPosition": 316}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxMjk5MQ==", "bodyText": "One thing that looks a bit wrong is the lack of any margin under the \"submit\" button on the demographics survey. That might be an existing issue, so feel free to ignore it here. Note, this screenshot shows the bottom of the window, fully scrolled:", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375612991", "createdAt": "2020-02-06T02:30:59Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/login/sign-in.tsx", "diffHunk": "@@ -71,99 +60,188 @@ const styles = {\n       return position;\n     }\n   },\n-  signedInContainer: {\n+  signInContainer: {\n     backgroundSize: 'contain',\n     backgroundRepeat: 'no-repeat',\n     backgroundPosition: 'center',\n-    display: 'flex',\n     justifyContent: 'space-around',\n     alignItems: 'flex-start',\n-    width: 'auto'\n+    width: 'auto',\n+    minHeight: '100vh'\n   },\n \n };\n \n+// Tracks each major stage in the sign-in / sign-up flow. Most of the steps are related to new\n+// account creation.\n+enum SignInStep {\n+  // Landing page. User can choose to sign in or create an account.\n+  LANDING,\n+  // Interstitial step, where a user must enter their invitation key.\n+  //\n+  // TODO: this needs to be controllable per-environment before beta launch!\n+  INVITATION_KEY,\n+  // Terms of Service page. User must read and acknowledge the privacy statement & TOS.\n+  TERMS_OF_SERVICE,\n+  // Basic account creation page. User chooses a username and provides basic name / address info.\n+  ACCOUNT_CREATION,\n+  // Optional demographic survey. Completion of this step triggers actual user creation.\n+  DEMOGRAPHIC_SURVEY,\n+  // Account creation success page.\n+  SUCCESS_PAGE\n+}\n \n+interface BackgroundImageConfig {\n+  backgroundImgSrc: string;\n+  smallerBackgroundImgSrc: string;\n+}\n \n+export const StepToImageConfig = {\n+  [SignInStep.LANDING]: {\n+    backgroundImgSrc: '/assets/images/login-group.png',\n+    smallerBackgroundImgSrc: '/assets/images/login-standing.png'\n+  },\n+  [SignInStep.SUCCESS_PAGE]: {\n+    backgroundImgSrc: '/assets/images/congrats-female.png',\n+    smallerBackgroundImgSrc: 'assets/images/congrats-female-standing.png'\n+  }\n+};\n \n-const headerImg = '/assets/images/logo-registration-non-signed-in.svg';\n+const HEADER_IMAGE = '/assets/images/logo-registration-non-signed-in.svg';\n \n-export const SignInReact = withWindowSize()(\n+export interface SignInProps extends ServerConfigProps, WindowSizeProps {\n+  initialStep?: SignInStep;\n+  onInit: () => void;\n+  signIn: () => void;\n+}\n+\n+interface SignInState {\n+  currentStep: SignInStep;\n+  // Tracks the invitation key provided by the user. This is a required parameter in the createUser\n+  // API call.\n+  invitationKey: string;\n+  profile: Profile;\n+  // Tracks the Terms of Service version that was viewed and acknowledged by the user.\n+  // This is an optional parameter in the createUser API call.\n+  termsOfServiceVersion?: number;\n+}\n+\n+export const SignInReact = fp.flow(withServerConfig(), withWindowSize())(\n   class extends React.Component<SignInProps, SignInState> {\n \n     constructor(props: SignInProps) {\n       super(props);\n       this.state = {\n-        currentStep: {stepName: 'login', backgroundImages: signedOutImages.login},\n-        invitationKey: '',\n-        profile: {} as Profile\n+        currentStep: props.initialStep ? props.initialStep : SignInStep.LANDING,\n+        invitationKey: null,\n+        termsOfServiceVersion: null,\n+        // This defines the profile state for a new user flow. This will get passed to each\n+        // step component as a prop. When each sub-step completes, it will pass the updated Profile\n+        // data in its onComplete callback.\n+        profile: this.createEmptyProfile()\n+      };\n+    }\n+\n+    createEmptyProfile(): Profile {\n+      return {\n+        // Note: We abuse the \"username\" field here by omitting \"@domain.org\". After\n+        // profile creation, this field is populated with the full email address.\n+        username: '',\n+        dataAccessLevel: DataAccessLevel.Unregistered,\n+        givenName: '',\n+        familyName: '',\n+        contactEmail: '',\n+        currentPosition: '',\n+        organization: '',\n+        areaOfResearch: '',\n+        address: {\n+          streetAddress1: '',\n+          streetAddress2: '',\n+          city: '',\n+          state: '',\n+          country: '',\n+          zipCode: '',\n+        },\n+        institutionalAffiliations: [\n+          // We only allow entering a single institutional affiliation from the creat account\n+          // page, so we pre-fill a single entry which will be bound to the form.\n+          {\n+            institution: undefined,\n+            nonAcademicAffiliation: undefined,\n+            role: undefined,\n+          },\n+        ],\n+        demographicSurvey: {},\n+        degrees: [] as Degree[],\n       };\n-      this.setProfile = this.setProfile.bind(this);\n     }\n \n     componentDidMount() {\n       document.body.style.backgroundColor = colors.light;\n       this.props.onInit();\n     }\n \n-    nextDirective(index: string) {\n-      switch (index) {\n-        case 'login':\n+    renderSignInStep(currentStep: SignInStep) {\n+      const {enableNewAccountCreation} = this.props.serverConfig;\n+\n+      switch (currentStep) {\n+        case SignInStep.LANDING:\n           return <LoginReactComponent signIn={this.props.signIn} onCreateAccount={() =>\n-            this.setCurrentStep({stepName: 'invitationKey'})}/>;\n-        case 'invitationKey':\n-          return <InvitationKey onInvitationKeyVerify={(key) => this.onKeyVerified(key)}/>;\n-        case 'accountCreation':\n-          return <AccountCreation invitationKey={this.state.invitationKey} profile={this.state.profile}\n-                                  setProfile={(profile, nextStep) => this.setProfile(profile, nextStep)}/>;\n-        case 'accountCreationSurvey':\n-          return <AccountCreationSurvey profile={this.state.profile}\n-            invitationKey={this.state.invitationKey} setProfile={(profile, nextStep) => this.setProfile(profile, nextStep)}/>;\n-        case 'accountCreationSuccess':\n+            this.setState({\n+              currentStep: SignInStep.INVITATION_KEY\n+            })}/>;\n+        case SignInStep.INVITATION_KEY:\n+          return <InvitationKey onInvitationKeyVerified={(key: string) => this.setState({\n+            invitationKey: key,\n+            // We skip over TERMS_OF_SERVICE if new-style account creation isn't enabled.\n+            currentStep: enableNewAccountCreation ? SignInStep.TERMS_OF_SERVICE : SignInStep.ACCOUNT_CREATION\n+          })}/>;\n+        case SignInStep.TERMS_OF_SERVICE:\n+          return <AccountCreationTos\n+            pdfPath='/assets/documents/terms-of-service.pdf'\n+            onComplete={() => this.setState({\n+              termsOfServiceVersion: 1,\n+              currentStep: SignInStep.ACCOUNT_CREATION\n+            })}/>;\n+        case SignInStep.ACCOUNT_CREATION:\n+          return <AccountCreation invitationKey={this.state.invitationKey}\n+                                  profile={this.state.profile}\n+                                  onComplete={(profile: Profile) => this.setState({\n+                                    profile: profile,\n+                                    // Skip over the demographic survey if new-style form isn't enabled.\n+                                    currentStep: enableNewAccountCreation ? SignInStep.DEMOGRAPHIC_SURVEY :\n+                                      SignInStep.SUCCESS_PAGE\n+                                  })}/>;\n+        case SignInStep.DEMOGRAPHIC_SURVEY:\n+          return <AccountCreationSurvey\n+            profile={this.state.profile}\n+            invitationKey={this.state.invitationKey}\n+            termsOfServiceVersion={this.state.termsOfServiceVersion}\n+            onComplete={(profile: Profile) => this.setState({\n+              profile: profile,\n+              currentStep: SignInStep.SUCCESS_PAGE\n+            })}\n+            onPreviousClick={(profile: Profile) => this.setState({\n+              profile: profile,\n+              currentStep: SignInStep.ACCOUNT_CREATION\n+            })}/>;\n+        case SignInStep.SUCCESS_PAGE:\n           return <AccountCreationSuccess profile={this.state.profile}/>;\n         default:\n           return;\n       }\n     }\n \n-    setCurrentStep(nextStep: Step) {\n-      this.setState({\n-        currentStep: nextStep\n-      });\n-    }\n-\n-    onKeyVerified(invitationKey: string) {\n-      this.setState({\n-        invitationKey: invitationKey,\n-        currentStep: {stepName: 'accountCreation'}\n-      });\n-    }\n-\n-    setProfile(profile, currentStep) {\n-      this.setState({\n-        profile: profile,\n-        currentStep: currentStep\n-      });\n-    }\n-\n-\n-\n     render() {\n-      const {stepName, backgroundImages} = this.state.currentStep;\n-      const maxWidth = backgroundImages === undefined ? '100%' : '41.66667%';\n-      return <div style={styles.signedInContainer}>\n-        <FlexColumn style={{width: '100%'}}>\n-          <div data-test-id='template'\n-               style={styles.template(this.props.windowSize, backgroundImages)}>\n-            <img style={{height: '1.75rem', marginLeft: '1rem', marginTop: '1rem'}}\n-                 src={headerImg}/>\n-            <div style={{flex: `0 0 ${maxWidth}`,\n-              maxWidth: maxWidth, minWidth: '25rem'}}>\n-              {this.nextDirective(stepName)}\n-            </div>\n-          </div>\n+      const backgroundImages = StepToImageConfig[this.state.currentStep];\n+      return <FlexColumn style={styles.signInContainer} data-test-id='sign-in-container'>\n+        <FlexColumn data-test-id='sign-in-page'\n+             style={styles.template(this.props.windowSize, backgroundImages)}>\n+          <div><img style={{height: '1.75rem', marginLeft: '1rem', marginTop: '1rem'}}\n+                    src={HEADER_IMAGE}/></div>\n+          {this.renderSignInStep(this.state.currentStep)}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f90a23d6565389a4c055525d16cf22a95ef29a7"}, "originalPosition": 321}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fd7867a8844876b7776691605cb952bd5c766b4", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/0fd7867a8844876b7776691605cb952bd5c766b4", "committedDate": "2020-02-06T15:56:49Z", "message": "Checkpoint on account creation cleanup."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b25963f8e7a3669264e133d78b396bd870db4254", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/b25963f8e7a3669264e133d78b396bd870db4254", "committedDate": "2020-02-06T15:56:49Z", "message": "Add an AccountCreationTos skeleton component."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c74b3b64b475548a4de6c6e2f705904acadaba98", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/c74b3b64b475548a4de6c6e2f705904acadaba98", "committedDate": "2020-02-06T15:56:50Z", "message": "Use react-pdf for rendering PDFs, finish up styling of TOS page, add & fix tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "238edfee5fac4e73e2215074225fb2d059adf364", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/238edfee5fac4e73e2215074225fb2d059adf364", "committedDate": "2020-02-06T15:56:50Z", "message": "Add a comment about the data-test-id prop passing."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b50a4a421938065b4d2268318234b3a1dd39505", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/9b50a4a421938065b4d2268318234b3a1dd39505", "committedDate": "2020-02-06T15:56:50Z", "message": "Add a withServerConfig HOC to ensure sign-in waits for a non-empty config value before rendering."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f854a0d7276ed5f74c6d2c73a0d937cbfae0a049", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/f854a0d7276ed5f74c6d2c73a0d937cbfae0a049", "committedDate": "2020-02-06T15:56:50Z", "message": "Add sign-in tests to ensure account flow works with new and old versions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3280362d43c616f578bf72bceb8f425958d34693", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/3280362d43c616f578bf72bceb8f425958d34693", "committedDate": "2020-02-06T15:56:50Z", "message": "Point tsconfig to src/ directory as the root. This fixes some IJ errors in spec files."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea420dfccc57f0da0853f51233369eca6699da85", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/ea420dfccc57f0da0853f51233369eca6699da85", "committedDate": "2020-02-06T15:56:50Z", "message": "Minor change from PR self-review."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5b7fde0e49e308cbb8b442e8fea4ab556848617", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/b5b7fde0e49e308cbb8b442e8fea4ab556848617", "committedDate": "2020-02-06T15:56:50Z", "message": "Small tweaks to fix build."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb182816373faba4bd7717b5a20b3a35ab5741a2", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/bb182816373faba4bd7717b5a20b3a35ab5741a2", "committedDate": "2020-02-06T15:56:50Z", "message": "Fix a test and a DOM console warning."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4844beffe7d4aacf7e236d220ddbe061d67b056f", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/4844beffe7d4aacf7e236d220ddbe061d67b056f", "committedDate": "2020-02-06T15:56:50Z", "message": "Add support for PDFs as static files."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77dc4ce9f07d6b87b6ad55b62317a5258313de83", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/77dc4ce9f07d6b87b6ad55b62317a5258313de83", "committedDate": "2020-02-06T15:56:50Z", "message": "Remove unnecessary console.log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7de049961fe8b03ff142ef78349cc713aeab5e5", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/a7de049961fe8b03ff142ef78349cc713aeab5e5", "committedDate": "2020-02-06T15:56:50Z", "message": "Add typedef for StepToImageConfig."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0ccacbbf4ef34f66f56d505a58c760c7974f7f7", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/b0ccacbbf4ef34f66f56d505a58c760c7974f7f7", "committedDate": "2020-02-07T14:09:46Z", "message": "PR feedback: data-test-id changes, new PDF file, style fixes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MTgwNTAw", "url": "https://github.com/all-of-us/workbench/pull/3075#pullrequestreview-355180500", "createdAt": "2020-02-07T14:11:31Z", "commit": {"oid": "7f90a23d6565389a4c055525d16cf22a95ef29a7"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f90a23d6565389a4c055525d16cf22a95ef29a7", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/7f90a23d6565389a4c055525d16cf22a95ef29a7", "committedDate": "2020-02-04T17:57:26Z", "message": "Remove unnecessary console.log"}, "afterCommit": {"oid": "b0ccacbbf4ef34f66f56d505a58c760c7974f7f7", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/b0ccacbbf4ef34f66f56d505a58c760c7974f7f7", "committedDate": "2020-02-07T14:09:46Z", "message": "PR feedback: data-test-id changes, new PDF file, style fixes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3022ff0982d1e11e21fabbb7f05ca5f9f62700c5", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/3022ff0982d1e11e21fabbb7f05ca5f9f62700c5", "committedDate": "2020-02-07T14:34:40Z", "message": "Imports / build fix."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "596d16a2959afc522b58e4e3d448e4db513d63a1", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/596d16a2959afc522b58e4e3d448e4db513d63a1", "committedDate": "2020-02-07T14:34:48Z", "message": "Revert change to tsconfig.json"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MzM1Mjg4", "url": "https://github.com/all-of-us/workbench/pull/3075#pullrequestreview-355335288", "createdAt": "2020-02-07T18:02:37Z", "commit": {"oid": "596d16a2959afc522b58e4e3d448e4db513d63a1"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODowMjozN1rOFnFcJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODoyNjoxM1rOFnGFWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNzkwOQ==", "bodyText": "Nevermind. Existing behavior and it matches the updated mocks.", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r376527909", "createdAt": "2020-02-07T18:02:37Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/login/sign-in.tsx", "diffHunk": "@@ -71,99 +60,188 @@ const styles = {\n       return position;\n     }\n   },\n-  signedInContainer: {\n+  signInContainer: {\n     backgroundSize: 'contain',\n     backgroundRepeat: 'no-repeat',\n     backgroundPosition: 'center',\n-    display: 'flex',\n     justifyContent: 'space-around',\n     alignItems: 'flex-start',\n-    width: 'auto'\n+    width: 'auto',\n+    minHeight: '100vh'\n   },\n \n };\n \n+// Tracks each major stage in the sign-in / sign-up flow. Most of the steps are related to new\n+// account creation.\n+enum SignInStep {\n+  // Landing page. User can choose to sign in or create an account.\n+  LANDING,\n+  // Interstitial step, where a user must enter their invitation key.\n+  //\n+  // TODO: this needs to be controllable per-environment before beta launch!\n+  INVITATION_KEY,\n+  // Terms of Service page. User must read and acknowledge the privacy statement & TOS.\n+  TERMS_OF_SERVICE,\n+  // Basic account creation page. User chooses a username and provides basic name / address info.\n+  ACCOUNT_CREATION,\n+  // Optional demographic survey. Completion of this step triggers actual user creation.\n+  DEMOGRAPHIC_SURVEY,\n+  // Account creation success page.\n+  SUCCESS_PAGE\n+}\n \n+interface BackgroundImageConfig {\n+  backgroundImgSrc: string;\n+  smallerBackgroundImgSrc: string;\n+}\n \n+export const StepToImageConfig = {\n+  [SignInStep.LANDING]: {\n+    backgroundImgSrc: '/assets/images/login-group.png',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxMTkxOA=="}, "originalCommit": {"oid": "7f90a23d6565389a4c055525d16cf22a95ef29a7"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzNTgwOA==", "bodyText": "s/creat/create/", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r376535808", "createdAt": "2020-02-07T18:20:36Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/login/sign-in.tsx", "diffHunk": "@@ -1,169 +1,248 @@\n import {Component} from '@angular/core';\n import {Router} from '@angular/router';\n+import * as fp from 'lodash/fp';\n \n+import {AccountCreation} from 'app/pages/login/account-creation/account-creation';\n import {AccountCreationSuccess} from 'app/pages/login/account-creation/account-creation-success';\n+import {AccountCreationSurvey} from 'app/pages/login/account-creation/account-creation-survey';\n+import {AccountCreationTos} from 'app/pages/login/account-creation/account-creation-tos';\n import {InvitationKey} from 'app/pages/login/invitation-key';\n import {LoginReactComponent} from 'app/pages/login/login';\n import {SignInService} from 'app/services/sign-in.service';\n import colors from 'app/styles/colors';\n-import {ReactWrapperBase, withWindowSize} from 'app/utils';\n-import {AccountCreation} from './account-creation/account-creation';\n+import {\n+  reactStyles,\n+  ReactWrapperBase, ServerConfigProps,\n+  WindowSizeProps,\n+  withServerConfig,\n+  withWindowSize,\n+} from 'app/utils';\n \n-import {Profile} from 'generated/fetch';\n+import {DataAccessLevel, Degree, Profile} from 'generated/fetch';\n \n import {FlexColumn} from 'app/components/flex';\n-import {SignedOutImages, signedOutImages} from 'app/pages/login/signed-out-images';\n import * as React from 'react';\n-import {AccountCreationSurvey} from './account-creation/account-creation-survey';\n \n-\n-\n-interface Step {\n-  stepName: string;\n-  backgroundImages?: SignedOutImages;\n-}\n-\n-export interface SignInProps {\n-  onInit: () => void;\n-  signIn: () => void;\n-  windowSize: { width: number, height: number };\n-}\n-\n-interface SignInState {\n-  currentStep: Step;\n-  invitationKey: string;\n-  profile: Profile;\n-}\n-\n-const styles = {\n-  template: (windowSize, images: SignedOutImages) => {\n-    // Lower bounds to prevent the small and large images from covering the\n-    // creation controls, respectively.\n-    const bgWidthMinPx = 900;\n-    const bgWidthSmallLimitPx = 1600;\n-\n-    return {\n-      backgroundImage: calculateImage(),\n-      backgroundColor: colors.light,\n-      backgroundRepeat: 'no-repeat',\n-      width: '100%',\n-      minHeight: '100vh',\n-      backgroundSize: windowSize.width <= bgWidthMinPx ? '0% 0%' : 'contain',\n-      backgroundPosition: calculateBackgroundPosition()\n-    };\n-\n-    function calculateImage() {\n-      if (images === undefined) {\n-        return null;\n-      }\n-      let imageUrl = 'url(\\'' + images.backgroundImgSrc + '\\')';\n-      if (windowSize.width > bgWidthMinPx && windowSize.width <= bgWidthSmallLimitPx) {\n-        imageUrl = 'url(\\'' + images.smallerBackgroundImgSrc + '\\')';\n-      }\n-      return imageUrl;\n+// A template function which returns the appropriate style config based on window size and\n+// background images.\n+const backgroundStyleTemplate = (windowSize, imageConfig?: BackgroundImageConfig) => {\n+  // Lower bounds to prevent the small and large images from covering the\n+  // creation controls, respectively.\n+  const bgWidthMinPx = 900;\n+  const bgWidthSmallLimitPx = 1600;\n+\n+  return {\n+    backgroundImage: calculateImage(),\n+    backgroundColor: colors.light,\n+    backgroundRepeat: 'no-repeat',\n+    flex: 1,\n+    width: '100%',\n+    backgroundSize: windowSize.width <= bgWidthMinPx ? '0% 0%' : 'contain',\n+    backgroundPosition: calculateBackgroundPosition()\n+  };\n+\n+  function calculateImage() {\n+    if (!imageConfig) {\n+      return null;\n+    }\n+    let imageUrl = 'url(\\'' + imageConfig.backgroundImgSrc + '\\')';\n+    if (windowSize.width > bgWidthMinPx && windowSize.width <= bgWidthSmallLimitPx) {\n+      imageUrl = 'url(\\'' + imageConfig.smallerBackgroundImgSrc + '\\')';\n     }\n+    return imageUrl;\n+  }\n \n-    function calculateBackgroundPosition() {\n-      let position = 'bottom right -1rem';\n-      if (windowSize.width > bgWidthMinPx && windowSize.width <= bgWidthSmallLimitPx) {\n-        position = 'bottom right';\n-      }\n-      return position;\n+  function calculateBackgroundPosition() {\n+    let position = 'bottom right -1rem';\n+    if (windowSize.width > bgWidthMinPx && windowSize.width <= bgWidthSmallLimitPx) {\n+      position = 'bottom right';\n     }\n-  },\n-  signedInContainer: {\n+    return position;\n+  }\n+};\n+\n+const styles = reactStyles({\n+  signInContainer: {\n     backgroundSize: 'contain',\n     backgroundRepeat: 'no-repeat',\n     backgroundPosition: 'center',\n-    display: 'flex',\n     justifyContent: 'space-around',\n     alignItems: 'flex-start',\n-    width: 'auto'\n+    width: 'auto',\n+    minHeight: '100vh'\n   },\n+});\n+\n+// Tracks each major stage in the sign-in / sign-up flow. Most of the steps are related to new\n+// account creation.\n+enum SignInStep {\n+  // Landing page. User can choose to sign in or create an account.\n+  LANDING,\n+  // Interstitial step, where a user must enter their invitation key.\n+  //\n+  // TODO: this needs to be controllable per-environment before beta launch!\n+  INVITATION_KEY,\n+  // Terms of Service page. User must read and acknowledge the privacy statement & TOS.\n+  TERMS_OF_SERVICE,\n+  // Basic account creation page. User chooses a username and provides basic name / address info.\n+  ACCOUNT_CREATION,\n+  // Optional demographic survey. Completion of this step triggers actual user creation.\n+  DEMOGRAPHIC_SURVEY,\n+  // Account creation success page.\n+  SUCCESS_PAGE\n+}\n \n-};\n-\n-\n+interface BackgroundImageConfig {\n+  backgroundImgSrc: string;\n+  smallerBackgroundImgSrc: string;\n+}\n \n+export const StepToImageConfig: Map<SignInStep, BackgroundImageConfig> = new Map([\n+  [SignInStep.LANDING, {\n+    backgroundImgSrc: '/assets/images/login-group.png',\n+    smallerBackgroundImgSrc: '/assets/images/login-standing.png'\n+  }],\n+  [SignInStep.SUCCESS_PAGE, {\n+    backgroundImgSrc: '/assets/images/congrats-female.png',\n+    smallerBackgroundImgSrc: 'assets/images/congrats-female-standing.png'\n+  }]]\n+);\n+\n+const HEADER_IMAGE = '/assets/images/logo-registration-non-signed-in.svg';\n+\n+export interface SignInProps extends ServerConfigProps, WindowSizeProps {\n+  initialStep?: SignInStep;\n+  onInit: () => void;\n+  signIn: () => void;\n+}\n \n-const headerImg = '/assets/images/logo-registration-non-signed-in.svg';\n+interface SignInState {\n+  currentStep: SignInStep;\n+  // Tracks the invitation key provided by the user. This is a required parameter in the createUser\n+  // API call.\n+  invitationKey: string;\n+  profile: Profile;\n+  // Tracks the Terms of Service version that was viewed and acknowledged by the user.\n+  // This is an optional parameter in the createUser API call.\n+  termsOfServiceVersion?: number;\n+}\n \n-export const SignInReact = withWindowSize()(\n+export const SignInReact = fp.flow(withServerConfig(), withWindowSize())(\n   class extends React.Component<SignInProps, SignInState> {\n \n     constructor(props: SignInProps) {\n       super(props);\n       this.state = {\n-        currentStep: {stepName: 'login', backgroundImages: signedOutImages.login},\n-        invitationKey: '',\n-        profile: {} as Profile\n+        currentStep: props.initialStep ? props.initialStep : SignInStep.LANDING,\n+        invitationKey: null,\n+        termsOfServiceVersion: null,\n+        // This defines the profile state for a new user flow. This will get passed to each\n+        // step component as a prop. When each sub-step completes, it will pass the updated Profile\n+        // data in its onComplete callback.\n+        profile: this.createEmptyProfile()\n+      };\n+    }\n+\n+    createEmptyProfile(): Profile {\n+      return {\n+        // Note: We abuse the \"username\" field here by omitting \"@domain.org\". After\n+        // profile creation, this field is populated with the full email address.\n+        username: '',\n+        dataAccessLevel: DataAccessLevel.Unregistered,\n+        givenName: '',\n+        familyName: '',\n+        contactEmail: '',\n+        currentPosition: '',\n+        organization: '',\n+        areaOfResearch: '',\n+        address: {\n+          streetAddress1: '',\n+          streetAddress2: '',\n+          city: '',\n+          state: '',\n+          country: '',\n+          zipCode: '',\n+        },\n+        institutionalAffiliations: [\n+          // We only allow entering a single institutional affiliation from the creat account", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "596d16a2959afc522b58e4e3d448e4db513d63a1"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzODQ1Nw==", "bodyText": "Thanks, this seems fine. I think the only thing that may be confusing here is that typically this profile is going to be passed in an empty state. My first thought on reading this is that perhaps we're expecting the affiliation to already be filled in. A comment here explaining that it will typically be just a placeholder empty affiliation might make this more clear.", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r376538457", "createdAt": "2020-02-07T18:26:13Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/login/account-creation/account-creation.tsx", "diffHunk": "@@ -175,45 +147,59 @@ export const MultiSelectWithLabel = (props) => {\n   </FlexColumn>;\n };\n \n+export interface AccountCreationProps {\n+  profile: Profile;\n+  invitationKey: string;\n+  onComplete: (profile: Profile) => void;\n+}\n+\n+export interface AccountCreationState {\n+  creatingAccount: boolean;\n+  errors: any;\n+  invalidEmail: boolean;\n+  rolesOptions: any;\n+  profile: Profile;\n+  showAllFieldsRequiredError: boolean;\n+  showInstitution: boolean;\n+  showNonAcademicAffiliationRole: boolean;\n+  showNonAcademicAffiliationOther: boolean;\n+  usernameCheckInProgress: boolean;\n+  usernameConflictError: boolean;\n+  institutionName: string;\n+  institutionRole: string;\n+  nonAcademicAffiliation: string;\n+  nonAcademicAffiliationRole: string;\n+  nonAcademicAffiliationOther: string;\n+}\n+\n export class AccountCreation extends React.Component<AccountCreationProps, AccountCreationState> {\n   private usernameCheckTimeout: NodeJS.Timer;\n \n   constructor(props: AccountCreationProps) {\n+    if (props.profile.institutionalAffiliations.length !== 1) {\n+      throw new Error('Profile must be pre-allocated with 1 institutional affiliation.');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMTExNA=="}, "originalCommit": {"oid": "7f90a23d6565389a4c055525d16cf22a95ef29a7"}, "originalPosition": 99}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3382e15d580fa0eb2a7d3929c95f550461cfd51c", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/3382e15d580fa0eb2a7d3929c95f550461cfd51c", "committedDate": "2020-02-07T20:43:57Z", "message": "Last bit of PR feedback cleanups."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3791, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}