{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNjI1MDE5", "number": 2995, "title": "[risk=low][RW-4178] Prevent compute cost increasing API calls on billing inactive workspaces", "bodyText": "Description:\nAfter many rounds of discussion, we have settled on the following user operations to be prevented when a workspace becomes billing inactive.\n\nEdit Notebook\nPlayground Mode (Notebooks)\nCreate Notebook\nCopy Notebook\n\nCopying into active billing workspaces is OK, even if the current workspace is billing inactive\nCopying into inactive billing workspaces is not OK\n\n\nExport to Notebook\nRename Notebook\n\nThis PR adds a check such that a 403 is returned to the client if the targeted workspace is in an inactive billing state. This only prevents access to the API. A UI to reflect the changes and improve the user experience will be coming in a future ticket.\nI decided to change the implementation from the swagger + AuthInterceptor approach to one that performs the checks at the beginning of the controller methods. Some reasons why I made this change\n\nThere is no generic way to check all of the requests since the identifiers for the workspace are not uniform. Nor can they be since some of the requests are checking against the destination workspace, not the current one.\nThe current approach is an existing pattern that we use to check for Firecloud access permissions.\nIt's still easy to determine which methods are being gated by finding usages of the WorkspaceService.requireActiveBilling method.\n\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-01-10T21:15:23Z", "url": "https://github.com/all-of-us/workbench/pull/2995", "merged": true, "mergeCommit": {"oid": "d4b31de0e7891ade1016cfe46d237b6619ce2dc6"}, "closed": true, "closedAt": "2020-01-13T18:45:34Z", "author": {"login": "ericsong"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb22CPxAH2gAyMzYxNjI1MDE5OmU4MDdiM2VlYjQ4ZWJlNWQxMDgyYjA1MThiYTk5YTEyYzE5YTU2MzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6AgFhgH2gAyMzYxNjI1MDE5OmEwNWM4MWVlYmQ4ZTI1ZGJlN2U0MWE1Nzk3MjBkMTRjM2E5M2ZlODI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e807b3eeb48ebe5d1082b0518ba99a12c19a5636", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/e807b3eeb48ebe5d1082b0518ba99a12c19a5636", "committedDate": "2020-01-03T22:24:10Z", "message": "add compute tags"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfaa40003e92913f3cd82178247749a5bf97a08e", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/bfaa40003e92913f3cd82178247749a5bf97a08e", "committedDate": "2020-01-03T22:33:15Z", "message": "allow some more actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00cb819eb2bd4fef66175763b5c46a1d04e7a3c9", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/00cb819eb2bd4fef66175763b5c46a1d04e7a3c9", "committedDate": "2020-01-06T22:59:27Z", "message": "add invalid billing checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a5e071ab277000db7f608598360a7a62f434b25", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/8a5e071ab277000db7f608598360a7a62f434b25", "committedDate": "2020-01-06T23:01:09Z", "message": "spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c02fe25be66fa3dd6734b552cc76bd36b3164c56", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/c02fe25be66fa3dd6734b552cc76bd36b3164c56", "committedDate": "2020-01-08T21:47:04Z", "message": "better error msg"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d2c60e889c1ab4b9bbca50d8e1334f708442871", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/9d2c60e889c1ab4b9bbca50d8e1334f708442871", "committedDate": "2020-01-09T22:45:21Z", "message": "WIP: checkpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d8e90e5f5713849f0943bc76e5a8d6b5de985ce", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/2d8e90e5f5713849f0943bc76e5a8d6b5de985ce", "committedDate": "2020-01-10T18:40:29Z", "message": "add tests and refactor into common function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1e0d6da6f34c84c2e8a2431f8f3c97da7396823", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/b1e0d6da6f34c84c2e8a2431f8f3c97da7396823", "committedDate": "2020-01-10T19:16:14Z", "message": "spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3de2b82e0cb06f8a4d94d16e5b1e1640a2946e86", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/3de2b82e0cb06f8a4d94d16e5b1e1640a2946e86", "committedDate": "2020-01-10T19:25:35Z", "message": "revert * imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "102da6593cc3147c22d59420f286f67607651f03", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/102da6593cc3147c22d59420f286f67607651f03", "committedDate": "2020-01-10T19:25:49Z", "message": "spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21caeeabd5852011e69a9978dc7026fb96964bd2", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/21caeeabd5852011e69a9978dc7026fb96964bd2", "committedDate": "2020-01-10T21:02:43Z", "message": "throw NotFoundException on invalid parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82e90d14adda3ac45e0a2073119167b0c7feebcb", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/82e90d14adda3ac45e0a2073119167b0c7feebcb", "committedDate": "2020-01-10T21:16:51Z", "message": "change exception message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e67431fd19335ee3aa05d229b60190bd8cfc36e2", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/e67431fd19335ee3aa05d229b60190bd8cfc36e2", "committedDate": "2020-01-10T21:32:35Z", "message": "Merge branch 'master' of github.com:all-of-us/workbench into songe/RW-4178"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8a42f024b7079f7ec2e9bfa7ec46b98c69173d9", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/f8a42f024b7079f7ec2e9bfa7ec46b98c69173d9", "committedDate": "2020-01-10T22:06:14Z", "message": "add feature flag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a48daf446c87cc83a0706756b7198df09dacdad", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/4a48daf446c87cc83a0706756b7198df09dacdad", "committedDate": "2020-01-10T22:07:49Z", "message": "ws"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/845c53d2390923439d181294d4d6d06830bf25f2", "committedDate": "2020-01-10T22:09:07Z", "message": "ws"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNDc3Njg2", "url": "https://github.com/all-of-us/workbench/pull/2995#pullrequestreview-341477686", "createdAt": "2020-01-10T23:46:51Z", "commit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMzo0Njo1MlrOFciuyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMzo1Njo0NVrOFci1Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3MzQ4MA==", "bodyText": "These checks should follow the access check, else this reveals some amount of information about existence of the workspace and its billing status, to any caller. In the cases where there is no explicit access check happening in the controller method, it would be probably be correct to add one - or else push this logic down into the service which is probably making that check. If this gets too hairy, I could probably be convinced it's not worth the effort for some of these without heavier refactoring.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365473480", "createdAt": "2020-01-10T23:46:52Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -438,6 +438,8 @@ private void formatTimestampValues(List<DataSetPreviewValueList> valuePreviewLis\n   @Override\n   public ResponseEntity<EmptyResponse> exportToNotebook(\n       String workspaceNamespace, String workspaceId, DataSetExportRequest dataSetExportRequest) {\n+    workspaceService.requireActiveBilling(workspaceNamespace, workspaceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3NDgwMw==", "bodyText": "this is potentially ambiguous, should this include the workspace ID in the message? Alternatively this method could return bool and the controller could throw a contextually relevant message.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365474803", "createdAt": "2020-01-10T23:55:04Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -243,6 +248,19 @@ public DbWorkspace getRequiredWithCohorts(String ns, String firecloudName) {\n     return workspace;\n   }\n \n+  @Override\n+  public void requireActiveBilling(String workspaceNamespace, String workspaceId)\n+      throws ForbiddenException {\n+    if (!workbenchConfigProvider.get().featureFlags.enableBillingLockout) {\n+      return;\n+    }\n+\n+    if (BillingStatus.INACTIVE.equals(\n+        getRequired(workspaceNamespace, workspaceId).getBillingStatus())) {\n+      throw new ForbiddenException(\"Workspace is in an inactive billing state\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3NTEwMg==", "bodyText": "nit: I think we should keep local and test in sync typically. I don't feel strongly about both true or both false", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365475102", "createdAt": "2020-01-10T23:56:45Z", "author": {"login": "calbach"}, "path": "api/config/config_local.json", "diffHunk": "@@ -85,7 +85,8 @@\n     \"unsafeAllowDeleteUser\": true,\n     \"enableVpcFlowLogs\": true,\n     \"enableVpcServicePerimeter\": true,\n-    \"enableNewAccountCreation\": true\n+    \"enableNewAccountCreation\": true,\n+    \"enableBillingLockout\": true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNDU1Nzk3", "url": "https://github.com/all-of-us/workbench/pull/2995#pullrequestreview-341455797", "createdAt": "2020-01-10T22:27:33Z", "commit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMjoyNzozNFrOFchoKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxNzo1NzoxNlrOFcmbEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1NTQwMg==", "bodyText": "nit: why is the new one not the final one? I wonder if we should alphabetize them.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365455402", "createdAt": "2020-01-10T22:27:34Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -95,6 +98,7 @@ public WorkspaceServiceImpl(\n       UserDao userDao,\n       Provider<DbUser> userProvider,\n       UserRecentWorkspaceDao userRecentWorkspaceDao,\n+      Provider<WorkbenchConfig> workbenchConfigProvider,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1NTkxMg==", "bodyText": "nit: maybe say something about the workspace's project? Or is billingInactive a workspace concept?", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365455912", "createdAt": "2020-01-10T22:29:33Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -243,6 +248,19 @@ public DbWorkspace getRequiredWithCohorts(String ns, String firecloudName) {\n     return workspace;\n   }\n \n+  @Override\n+  public void requireActiveBilling(String workspaceNamespace, String workspaceId)\n+      throws ForbiddenException {\n+    if (!workbenchConfigProvider.get().featureFlags.enableBillingLockout) {\n+      return;\n+    }\n+\n+    if (BillingStatus.INACTIVE.equals(\n+        getRequired(workspaceNamespace, workspaceId).getBillingStatus())) {\n+      throw new ForbiddenException(\"Workspace is in an inactive billing state\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1NjU2Mg==", "bodyText": "There may be a way to generically have a shim abstract class that does this before validation, but no need to go there yet.\nIn terms of the name, do we need to call out billing here, or can we have a global workspace activation for these?", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365456562", "createdAt": "2020-01-10T22:31:32Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -605,6 +605,9 @@ private Boolean copyBlob(String bucketName, Blob b) {\n       String fromWorkspaceId,\n       String fromNotebookName,\n       CopyRequest copyRequest) {\n+    workspaceService.requireActiveBilling(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1NzM0OA==", "bodyText": "It would be nice to define a custom annotation for the checked controller methods, even if it's just a glorified comment. That way you can grab all occurrences of it at once if you like.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365457348", "createdAt": "2020-01-10T22:34:13Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -605,6 +605,9 @@ private Boolean copyBlob(String bucketName, Blob b) {\n       String fromWorkspaceId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMjU0Mw==", "bodyText": "aside: is it too late to rename enableNewAccountCreation? It's really talking about a revised flow, not enabling people to create new accounts altogether?", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365532543", "createdAt": "2020-01-11T17:26:09Z", "author": {"login": "jaycarlton"}, "path": "api/config/config_local.json", "diffHunk": "@@ -85,7 +85,8 @@\n     \"unsafeAllowDeleteUser\": true,\n     \"enableVpcFlowLogs\": true,\n     \"enableVpcServicePerimeter\": true,\n-    \"enableNewAccountCreation\": true\n+    \"enableNewAccountCreation\": true,\n+    \"enableBillingLockout\": true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3NTEwMg=="}, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMjc2Mw==", "bodyText": "The need to add code to a number methods in just the right place makes me think we've missed an abstraction/opportunity to have something more systematic in place. Maybe a shim in between the ApiDelegate class and the Controller would be a good place to stick these validation methods generically.\nWhat's here is probably enough/appropriate for now to avoid scope creep, but if we need multiple overlapping kinds of checks soon, it could get unwieldy.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365532763", "createdAt": "2020-01-11T17:30:36Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -438,6 +438,8 @@ private void formatTimestampValues(List<DataSetPreviewValueList> valuePreviewLis\n   @Override\n   public ResponseEntity<EmptyResponse> exportToNotebook(\n       String workspaceNamespace, String workspaceId, DataSetExportRequest dataSetExportRequest) {\n+    workspaceService.requireActiveBilling(workspaceNamespace, workspaceId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3MzQ4MA=="}, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMjgyMg==", "bodyText": "nit: I've been naming these kind of functions starting with validate, which I associate with a check that throws. As written, it's active voice, as if we're telling the class to require active billing on these arguments.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365532822", "createdAt": "2020-01-11T17:31:38Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceService.java", "diffHunk": "@@ -40,6 +41,9 @@\n \n   DbWorkspace saveWithLastModified(DbWorkspace workspace);\n \n+  void requireActiveBilling(String workspaceNamespace, String workspaceId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMjg4NA==", "bodyText": "I'm confused why this test case needs you to both set inactive here and then stub the call below.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365532884", "createdAt": "2020-01-11T17:33:18Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -418,6 +424,31 @@ public void testLocalize_noNotebooks() throws Exception {\n     assertThat(resp.getClusterLocalDirectory()).isEqualTo(\"workspaces/wsid\");\n   }\n \n+  @Test(expected = ForbiddenException.class)\n+  public void listCluster_requireActiveBilling() {\n+    testWorkspace.setBillingStatus(BillingStatus.INACTIVE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMjk1MQ==", "bodyText": "Also, I'd probably just make two test workspaces, one active and one not, to cut down on the per-testcase setup.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365532951", "createdAt": "2020-01-11T17:34:42Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -418,6 +424,31 @@ public void testLocalize_noNotebooks() throws Exception {\n     assertThat(resp.getClusterLocalDirectory()).isEqualTo(\"workspaces/wsid\");\n   }\n \n+  @Test(expected = ForbiddenException.class)\n+  public void listCluster_requireActiveBilling() {\n+    testWorkspace.setBillingStatus(BillingStatus.INACTIVE);\n+\n+    doThrow(ForbiddenException.class)\n+        .when(workspaceService)\n+        .requireActiveBilling(WORKSPACE_NS, WORKSPACE_ID);\n+\n+    clusterController.listClusters(WORKSPACE_NS, WORKSPACE_ID);\n+  }\n+\n+  @Test(expected = ForbiddenException.class)\n+  public void localize_requireActiveBilling() {\n+    testWorkspace.setBillingStatus(BillingStatus.INACTIVE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMzAxOA==", "bodyText": "So the only assertion is that the test throws this exception, and you're only throwing the exception because of Mockito. This feels like you're possibly testing this behavior at the wrong level, or in the wrong class.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365533018", "createdAt": "2020-01-11T17:36:08Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -418,6 +424,31 @@ public void testLocalize_noNotebooks() throws Exception {\n     assertThat(resp.getClusterLocalDirectory()).isEqualTo(\"workspaces/wsid\");\n   }\n \n+  @Test(expected = ForbiddenException.class)\n+  public void listCluster_requireActiveBilling() {\n+    testWorkspace.setBillingStatus(BillingStatus.INACTIVE);\n+\n+    doThrow(ForbiddenException.class)\n+        .when(workspaceService)\n+        .requireActiveBilling(WORKSPACE_NS, WORKSPACE_ID);\n+\n+    clusterController.listClusters(WORKSPACE_NS, WORKSPACE_ID);\n+  }\n+\n+  @Test(expected = ForbiddenException.class)\n+  public void localize_requireActiveBilling() {\n+    testWorkspace.setBillingStatus(BillingStatus.INACTIVE);\n+\n+    doThrow(ForbiddenException.class)\n+        .when(workspaceService)\n+        .requireActiveBilling(WORKSPACE_NS, WORKSPACE_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMzExNQ==", "bodyText": "I just learned that there's an error code 402 Payment Required, but it's nonstandard. Would've fit like a glove here though. https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/402", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365533115", "createdAt": "2020-01-11T17:38:06Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -960,6 +968,20 @@ public void exportToNewNotebook() {\n         .saveNotebook(eq(WORKSPACE_BUCKET_NAME), eq(notebookName), any(JSONObject.class));\n   }\n \n+  @Test(expected = ForbiddenException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMzE1Mw==", "bodyText": "If you're looking for a rabbit hole, these should all be MockBeans", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365533153", "createdAt": "2020-01-11T17:38:55Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/workspaces/WorkspaceServiceTest.java", "diffHunk": "@@ -55,6 +56,7 @@\n   @Mock private DataSetService mockDataSetService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMzg4NA==", "bodyText": "I was going to post some reaction gifs to this constructor invocation, but I think there's an easier way to solve this issue.\nI'd go ahead and make a FakeWorkspaceServiceImpl class, use IntelliJ's default overload implementations that just return null, give it a zero-arg constructor, and tag it with @Service and give it a bean name. Then just inject it like a real service.\nYou'll likely need to mark the real one as primary so that the fake doesn't get pulled into real code.\nEven simpler would be to mock it with Mockito, but I think using it in production code is controversial if not frowned upon.\nIt's still a smell to me that you need to pull in this bean but don't need a working version, but I haven't looked around very much to understand the main issue you're working around.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365533884", "createdAt": "2020-01-11T17:55:25Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ExportWorkspaceData.java", "diffHunk": "@@ -84,7 +84,7 @@\n   // Importing the real one requires importing a large subtree of dependencies\n   @Bean\n   public WorkspaceService workspaceService() {\n-    return new WorkspaceServiceImpl(null, null, null, null, null, null, null, null, null);\n+    return new WorkspaceServiceImpl(null, null, null, null, null, null, null, null, null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMzk2OQ==", "bodyText": "If you have a few minutes to write a small markdown file about this mechanism and how it works and when you should make your APIs require billing, you could simply put the URL to that here. I don't think there's enough context here to help folks who come later really understand it.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365533969", "createdAt": "2020-01-11T17:57:16Z", "author": {"login": "jaycarlton"}, "path": "common-api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "diffHunk": "@@ -196,6 +196,9 @@ public static WorkbenchConfig createEmptyConfig() {\n     // Flag to indicate whether to enable the new Create Account flow\n     // https://precisionmedicineinitiative.atlassian.net/browse/RW-3284\n     public boolean enableNewAccountCreation;\n+    // Setting this to true will prevent users from making compute increasing operations on", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3e99c52b45c695b491c732bd43fc8a2426890c9", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/f3e99c52b45c695b491c732bd43fc8a2426890c9", "committedDate": "2020-01-12T06:10:36Z", "message": "enforce ws access before billing check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f3207e19853d2c5f2d80bfd0f4a07d0226cd44b", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/8f3207e19853d2c5f2d80bfd0f4a07d0226cd44b", "committedDate": "2020-01-12T06:16:19Z", "message": "revert build.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f143376b475c9d587d5a4b2b58ec61a4f32ee1cb", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/f143376b475c9d587d5a4b2b58ec61a4f32ee1cb", "committedDate": "2020-01-12T06:17:15Z", "message": "bump junit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8eee88f25a31d485cf0e8260eb00fd4903661330", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/8eee88f25a31d485cf0e8260eb00fd4903661330", "committedDate": "2020-01-12T06:55:01Z", "message": "code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a3e60d69af8c67316ff966e4215870a2103d5e9", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/9a3e60d69af8c67316ff966e4215870a2103d5e9", "committedDate": "2020-01-12T07:08:36Z", "message": "remove unneeded test setup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNTU1ODgz", "url": "https://github.com/all-of-us/workbench/pull/2995#pullrequestreview-341555883", "createdAt": "2020-01-12T06:19:23Z", "commit": {"oid": "f143376b475c9d587d5a4b2b58ec61a4f32ee1cb"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwNjoxOToyM1rOFcoCiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwNjo1NToyM1rOFcoHnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2MDQ1OQ==", "bodyText": "I think the word New always referred to a \"new\" version of account creation. I do agree the name isn't the best but I don't think its something worth the hassle of changing, at least in an unrelated PR.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365560459", "createdAt": "2020-01-12T06:19:23Z", "author": {"login": "ericsong"}, "path": "api/config/config_local.json", "diffHunk": "@@ -85,7 +85,8 @@\n     \"unsafeAllowDeleteUser\": true,\n     \"enableVpcFlowLogs\": true,\n     \"enableVpcServicePerimeter\": true,\n-    \"enableNewAccountCreation\": true\n+    \"enableNewAccountCreation\": true,\n+    \"enableBillingLockout\": true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3NTEwMg=="}, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2MDQ5Mw==", "bodyText": "sure, I like validate", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365560493", "createdAt": "2020-01-12T06:20:26Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceService.java", "diffHunk": "@@ -40,6 +41,9 @@\n \n   DbWorkspace saveWithLastModified(DbWorkspace workspace);\n \n+  void requireActiveBilling(String workspaceNamespace, String workspaceId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMjgyMg=="}, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2MDY3OA==", "bodyText": "sorry, not following. what is new and should be final?", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365560678", "createdAt": "2020-01-12T06:25:31Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -95,6 +98,7 @@ public WorkspaceServiceImpl(\n       UserDao userDao,\n       Provider<DbUser> userProvider,\n       UserRecentWorkspaceDao userRecentWorkspaceDao,\n+      Provider<WorkbenchConfig> workbenchConfigProvider,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1NTQwMg=="}, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2MDkyMw==", "bodyText": "I was on the fence about adding it. The reason I did was because I felt like it explained the condition in which the exception is thrown but I can go either way so I'll remove it.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365560923", "createdAt": "2020-01-12T06:32:44Z", "author": {"login": "ericsong"}, "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -418,6 +424,31 @@ public void testLocalize_noNotebooks() throws Exception {\n     assertThat(resp.getClusterLocalDirectory()).isEqualTo(\"workspaces/wsid\");\n   }\n \n+  @Test(expected = ForbiddenException.class)\n+  public void listCluster_requireActiveBilling() {\n+    testWorkspace.setBillingStatus(BillingStatus.INACTIVE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMjg4NA=="}, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2MTA5MA==", "bodyText": "Yeah, this was the more tricky class to test because its the only one that actually mocks out workspaceService instead of relying on a real implementation.\nThat said, I think the level of testing here is valid if you view the subject under test as just the ClusterController. The test verifies that the requireActiveBilling() method is called, not if its implementation is correct.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365561090", "createdAt": "2020-01-12T06:37:22Z", "author": {"login": "ericsong"}, "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -418,6 +424,31 @@ public void testLocalize_noNotebooks() throws Exception {\n     assertThat(resp.getClusterLocalDirectory()).isEqualTo(\"workspaces/wsid\");\n   }\n \n+  @Test(expected = ForbiddenException.class)\n+  public void listCluster_requireActiveBilling() {\n+    testWorkspace.setBillingStatus(BillingStatus.INACTIVE);\n+\n+    doThrow(ForbiddenException.class)\n+        .when(workspaceService)\n+        .requireActiveBilling(WORKSPACE_NS, WORKSPACE_ID);\n+\n+    clusterController.listClusters(WORKSPACE_NS, WORKSPACE_ID);\n+  }\n+\n+  @Test(expected = ForbiddenException.class)\n+  public void localize_requireActiveBilling() {\n+    testWorkspace.setBillingStatus(BillingStatus.INACTIVE);\n+\n+    doThrow(ForbiddenException.class)\n+        .when(workspaceService)\n+        .requireActiveBilling(WORKSPACE_NS, WORKSPACE_ID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMzAxOA=="}, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2MTE1MQ==", "bodyText": "I found that too but I believe its not fully supported, just reserved for future use.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365561151", "createdAt": "2020-01-12T06:38:59Z", "author": {"login": "ericsong"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -960,6 +968,20 @@ public void exportToNewNotebook() {\n         .saveNotebook(eq(WORKSPACE_BUCKET_NAME), eq(notebookName), any(JSONObject.class));\n   }\n \n+  @Test(expected = ForbiddenException.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMzExNQ=="}, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2MTY2Mw==", "bodyText": "I think I actually did try Mockito when I first implemented this but it didn't work for some reason. That said, this isn't exactly production code (it's one of our cmd line tools) and I don't think further refactoring in this specific case will save us time down the road.\nThe goal here was to just stop the DI wiring here so the tool wouldn't have to import a large number of dependencies.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365561663", "createdAt": "2020-01-12T06:52:04Z", "author": {"login": "ericsong"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ExportWorkspaceData.java", "diffHunk": "@@ -84,7 +84,7 @@\n   // Importing the real one requires importing a large subtree of dependencies\n   @Bean\n   public WorkspaceService workspaceService() {\n-    return new WorkspaceServiceImpl(null, null, null, null, null, null, null, null, null);\n+    return new WorkspaceServiceImpl(null, null, null, null, null, null, null, null, null, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMzg4NA=="}, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2MTc1Nw==", "bodyText": "This was necessary to bring in assertThrows", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365561757", "createdAt": "2020-01-12T06:55:23Z", "author": {"login": "ericsong"}, "path": "api/build.gradle", "diffHunk": "@@ -428,7 +428,7 @@ dependencies {\n   toolsCompile 'commons-cli:commons-cli:1.4'\n   toolsCompile 'com.opencsv:opencsv:4.6'\n \n-  testCompile 'junit:junit:4.12'\n+  testCompile 'junit:junit:4.13'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f143376b475c9d587d5a4b2b58ec61a4f32ee1cb"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea434a02c5daa163722fe9a0ab5ba74abdd4f3e5", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/ea434a02c5daa163722fe9a0ab5ba74abdd4f3e5", "committedDate": "2020-01-12T07:53:01Z", "message": "spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "749d22eed80c6f24cdfa8b485bede7eebee3add5", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/749d22eed80c6f24cdfa8b485bede7eebee3add5", "committedDate": "2020-01-12T20:08:02Z", "message": "turn on test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNTk2ODE2", "url": "https://github.com/all-of-us/workbench/pull/2995#pullrequestreview-341596816", "createdAt": "2020-01-12T20:24:29Z", "commit": {"oid": "749d22eed80c6f24cdfa8b485bede7eebee3add5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxOTQ2Mjcw", "url": "https://github.com/all-of-us/workbench/pull/2995#pullrequestreview-341946270", "createdAt": "2020-01-13T15:56:00Z", "commit": {"oid": "749d22eed80c6f24cdfa8b485bede7eebee3add5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a05c81eebd8e25dbe7e41a579720d14c3a93fe82", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/a05c81eebd8e25dbe7e41a579720d14c3a93fe82", "committedDate": "2020-01-13T18:17:35Z", "message": "add comment explaining when to add validat billing"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3666, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}