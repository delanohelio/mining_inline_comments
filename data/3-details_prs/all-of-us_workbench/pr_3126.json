{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0NjUyNzQy", "number": 3126, "title": "[risk=no][RW-4438] Use actual query instead of Java stream over all table rows", "bodyText": "Replace a number of slow queries with sensible HQL versions now that I know how to use projection interfaces. I'm sad to see my nifty generic function go, but it had a good run.\nTIL:\n\nProjection interfaces are a thing and work more easily with HQL\nyou can't use an @Transient entity property in your queries \ud83d\ude22\ndao tests are really handy for these kinds of things (and it'd be nice to set up some more soon)\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-02-13T03:39:11Z", "url": "https://github.com/all-of-us/workbench/pull/3126", "merged": true, "mergeCommit": {"oid": "7ff23fac58b2a13b1fbc6419667eb35ab6ec2b40"}, "closed": true, "closedAt": "2020-02-20T16:52:27Z", "author": {"login": "jaycarlton"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDydShAH2gAyMzc0NjUyNzQyOmY2MTVkOTFlM2IwYzMwNTc4NjRlMzNiMjdiNTY5MGZmYmRkYjJjYzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcF9sTNAFqTM2MTQ2MjM3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f615d91e3b0c3057864e33b27b5690ffbddb2cc8", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/f615d91e3b0c3057864e33b27b5690ffbddb2cc8", "committedDate": "2020-02-13T03:35:06Z", "message": "initial stab"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3OTY2ODQ2", "url": "https://github.com/all-of-us/workbench/pull/3126#pullrequestreview-357966846", "createdAt": "2020-02-13T05:45:42Z", "commit": {"oid": "f615d91e3b0c3057864e33b27b5690ffbddb2cc8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNTo0NTo0M1rOFpHqvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNTo0NTo0M1rOFpHqvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2MTU2NA==", "bodyText": "Driving by but is it necessary to add this intermediate object? I think the interface we had, getCountByStatusMap(), works well. We just need to change the implementation to speed it up.\nThe computeProjectCountByStatus2() call below should work and that gets us most of the way there. All getCountByStatusMap() would have to do is convert the result from computeProjectCountByStatus2() to match the existing interface.", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r378661564", "createdAt": "2020-02-13T05:45:43Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/BillingProjectBufferEntryDao.java", "diffHunk": "@@ -40,6 +44,29 @@\n     return DaoUtils.getAttributeToCountMap(findAll(), DbBillingProjectBufferEntry::getStatusEnum);\n   }\n \n+  @Query(value = \"select status, count(billing_project_buffer_entry.billing_project_buffer_entry_id) as num_projects\\n\"\n+      + \"    from billing_project_buffer_entry\\n\"\n+      + \"group by status\\n\"\n+      + \"order by status;\", nativeQuery = true)\n+//  List<BillingProjectBufferEntryStatusToCountResult> computeProjectCountByStatus();\n+   BillingProjectBufferEntryStatusToCountResult[] computeProjectCountByStatus();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f615d91e3b0c3057864e33b27b5690ffbddb2cc8"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3db24169970a72af961a4afd33ffb39e46f0166", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/b3db24169970a72af961a4afd33ffb39e46f0166", "committedDate": "2020-02-13T16:41:57Z", "message": "use projection interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bc103b9a9e1942a045e25220200da936e7ce176", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/5bc103b9a9e1942a045e25220200da936e7ce176", "committedDate": "2020-02-13T16:42:16Z", "message": "spot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7add5790a1ac09dc1bf4e67901a78cddbf28c8a", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/f7add5790a1ac09dc1bf4e67901a78cddbf28c8a", "committedDate": "2020-02-13T16:53:55Z", "message": "simplify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e644eca3d4d1a7183b03d20458808086fe9d09f", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/7e644eca3d4d1a7183b03d20458808086fe9d09f", "committedDate": "2020-02-14T17:15:32Z", "message": "Merge branch 'master' into jaycarlton/RW-4438"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28c9d2a801387b20639f76cb86b0144891775313", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/28c9d2a801387b20639f76cb86b0144891775313", "committedDate": "2020-02-14T20:55:39Z", "message": "cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjE5MjEz", "url": "https://github.com/all-of-us/workbench/pull/3126#pullrequestreview-359219213", "createdAt": "2020-02-14T21:07:13Z", "commit": {"oid": "28c9d2a801387b20639f76cb86b0144891775313"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTowNzoxNFrOFqDqnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTowNzoxNFrOFqDqnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY0NDU3Mw==", "bodyText": "One way around this ugliness is a persisted, computed column. Not worth it here, as much as I hate seeing this comparison to null everywhere to essentially build a boolean.", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r379644573", "createdAt": "2020-02-14T21:07:14Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserDao.java", "diffHunk": "@@ -48,7 +46,21 @@\n \n   Set<DbUser> findByFirstRegistrationCompletionTimeNotNull();\n \n-  default Map<Boolean, Long> getDisabledToCountMap() {\n-    return DaoUtils.getAttributeToCountMap(findAll(), DbUser::getDisabled);\n+  @Query(\n+      \"SELECT dataAccessLevel, disabled, CASE WHEN betaAccessBypassTime IS NOT NULL THEN TRUE ELSE FALSE END AS betaIsBypassed, COUNT(userId) AS userCount \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c9d2a801387b20639f76cb86b0144891775313"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NzgyNTMy", "url": "https://github.com/all-of-us/workbench/pull/3126#pullrequestreview-359782532", "createdAt": "2020-02-17T14:41:18Z", "commit": {"oid": "28c9d2a801387b20639f76cb86b0144891775313"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDo0MToxOFrOFqmvrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTozMzozMVrOFqofBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxOTMxMQ==", "bodyText": "Unfortunate, but glad that you were able to get this working.", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r380219311", "createdAt": "2020-02-17T14:41:18Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserDao.java", "diffHunk": "@@ -48,7 +46,21 @@\n \n   Set<DbUser> findByFirstRegistrationCompletionTimeNotNull();\n \n-  default Map<Boolean, Long> getDisabledToCountMap() {\n-    return DaoUtils.getAttributeToCountMap(findAll(), DbUser::getDisabled);\n+  @Query(\n+      \"SELECT dataAccessLevel, disabled, CASE WHEN betaAccessBypassTime IS NOT NULL THEN TRUE ELSE FALSE END AS betaIsBypassed, COUNT(userId) AS userCount \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY0NDU3Mw=="}, "originalCommit": {"oid": "28c9d2a801387b20639f76cb86b0144891775313"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMjMxOA==", "bodyText": "Are these variable ever used?", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r380222318", "createdAt": "2020-02-17T14:46:47Z", "author": {"login": "freemabd"}, "path": "api/src/test/java/org/pmiops/workbench/billing/BillingProjectBufferServiceTest.java", "diffHunk": "@@ -678,6 +679,26 @@ public void testGetGaugeData() {\n     assertThat(entryStatusBundle.get().getTags()).isNotEmpty();\n   }\n \n+  @Test\n+  public void testGetProjectCountByStatus() {\n+    DbBillingProjectBufferEntry creatingEntry1 = makeSimpleEntry(BufferEntryStatus.CREATING);\n+    DbBillingProjectBufferEntry creatingEntry2 = makeSimpleEntry(BufferEntryStatus.CREATING);\n+    DbBillingProjectBufferEntry errorEntry1 = makeSimpleEntry(BufferEntryStatus.ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c9d2a801387b20639f76cb86b0144891775313"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMzY5Mw==", "bodyText": "Shouldn't this test really be in BillingProjectBufferEntryDaoTest? Doesn't seem to test anything in the service layer.", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r380223693", "createdAt": "2020-02-17T14:49:02Z", "author": {"login": "freemabd"}, "path": "api/src/test/java/org/pmiops/workbench/billing/BillingProjectBufferServiceTest.java", "diffHunk": "@@ -678,6 +679,26 @@ public void testGetGaugeData() {\n     assertThat(entryStatusBundle.get().getTags()).isNotEmpty();\n   }\n \n+  @Test\n+  public void testGetProjectCountByStatus() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c9d2a801387b20639f76cb86b0144891775313"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0MzA1OA==", "bodyText": "Can we write a test case for this in WorkspaceDaoTest?", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r380243058", "createdAt": "2020-02-17T15:24:31Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/WorkspaceDao.java", "diffHunk": "@@ -73,11 +69,16 @@ default void updateBillingStatus(long workspaceId, BillingStatus status) {\n   @Query(\"SELECT w.creator FROM DbWorkspace w WHERE w.billingStatus = (:status)\")\n   Set<DbUser> findAllCreatorsByBillingStatus(@Param(\"status\") BillingStatus status);\n \n-  default Map<WorkspaceActiveStatus, Long> getActiveStatusToCountMap() {\n-    return DaoUtils.getAttributeToCountMap(findAll(), DbWorkspace::getWorkspaceActiveStatusEnum);\n-  }\n+  @Query(\n+      \"SELECT activeStatus, dataAccessLevel, COUNT(workspaceId) FROM DbWorkspace \"\n+          + \"GROUP BY activeStatus, dataAccessLevel ORDER BY activeStatus, dataAccessLevel\")\n+  List<ActiveStatusAndDataAccessLevelToCountResult> getActiveStatusAndDataAccessLevelToCount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c9d2a801387b20639f76cb86b0144891775313"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0NDk0Ng==", "bodyText": "Can we write a test class for UserDaoTest and test all methods?", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r380244946", "createdAt": "2020-02-17T15:28:00Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserDao.java", "diffHunk": "@@ -48,7 +46,21 @@\n \n   Set<DbUser> findByFirstRegistrationCompletionTimeNotNull();\n \n-  default Map<Boolean, Long> getDisabledToCountMap() {\n-    return DaoUtils.getAttributeToCountMap(findAll(), DbUser::getDisabled);\n+  @Query(\n+      \"SELECT dataAccessLevel, disabled, CASE WHEN betaAccessBypassTime IS NOT NULL THEN TRUE ELSE FALSE END AS betaIsBypassed, COUNT(userId) AS userCount \"\n+          + \"FROM DbUser \"\n+          + \"GROUP BY dataAccessLevel, disabled, CASE WHEN betaAccessBypassTime IS NOT NULL THEN TRUE ELSE FALSE END \"\n+          + \"ORDER BY NULL\")\n+  List<DataAccessLevelDisabledAndBetaBypassedToCountRow>\n+      getDataAccessLevelDisabledAndBetaBypassedToCount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c9d2a801387b20639f76cb86b0144891775313"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0NjQxNw==", "bodyText": "Can we write a test class for this in DataSetDaoTest and test all the methods?", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r380246417", "createdAt": "2020-02-17T15:30:53Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetDao.java", "diffHunk": "@@ -16,6 +17,20 @@\n   List<DbDataset> findByWorkspaceId(long workspaceId);\n \n   default Map<Boolean, Long> getInvalidToCountMap() {\n-    return DaoUtils.getAttributeToCountMap(findAll(), DbDataset::getInvalid);\n+    final List<InvalidToCountResult> rows = getInvalidToCount();\n+    return rows.stream()\n+        .collect(\n+            ImmutableMap.toImmutableMap(\n+                InvalidToCountResult::getIsInvalid, InvalidToCountResult::getInvalidCount));\n+  }\n+\n+  @Query(\n+      \"SELECT invalid, count(dataSetId) AS invalidCount FROM DbDataset GROUP BY invalid ORDER BY invalid\")\n+  List<InvalidToCountResult> getInvalidToCount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c9d2a801387b20639f76cb86b0144891775313"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0NzgxMg==", "bodyText": "Can we write a test class for this in BillingProjectBufferEntryDaoTest and test all the methods?", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r380247812", "createdAt": "2020-02-17T15:33:31Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/BillingProjectBufferEntryDao.java", "diffHunk": "@@ -28,18 +28,27 @@\n   List<DbBillingProjectBufferEntry> findAllByStatusAndLastStatusChangedTimeLessThan(\n       short status, Timestamp timestamp);\n \n-  DbBillingProjectBufferEntry findFirstByStatusOrderByLastSyncRequestTimeAsc(short status);\n-\n   List<DbBillingProjectBufferEntry> findTop5ByStatusOrderByLastSyncRequestTimeAsc(short status);\n \n   DbBillingProjectBufferEntry findFirstByStatusOrderByCreationTimeAsc(short status);\n \n   Long countByStatus(short status);\n \n   default Map<BufferEntryStatus, Long> getCountByStatusMap() {\n-    return DaoUtils.getAttributeToCountMap(findAll(), DbBillingProjectBufferEntry::getStatusEnum);\n+    return computeProjectCountByStatus().stream()\n+        .collect(\n+            ImmutableMap.toImmutableMap(\n+                StatusToCountResult::getStatusEnum, StatusToCountResult::getNumProjects));\n   }\n \n+  @Query(\n+      value =\n+          \"select status, count(billing_project_buffer_entry_id) as numpNrojects\\n\"\n+              + \"    from DbBillingProjectBufferEntry \\n\"\n+              + \"group by status\\n\"\n+              + \"order by status\")\n+  List<StatusToCountResult> computeProjectCountByStatus();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c9d2a801387b20639f76cb86b0144891775313"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e742fc5fe510d1b4d5bd0852e9f80bda7477a4f", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/6e742fc5fe510d1b4d5bd0852e9f80bda7477a4f", "committedDate": "2020-02-19T16:17:51Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "307513eb035540ef2710ac2acca137ff030fa6cf", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/307513eb035540ef2710ac2acca137ff030fa6cf", "committedDate": "2020-02-19T17:47:37Z", "message": "more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e01f4e3fb690cafc3fc268b99bd06c19c0c0a694", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/e01f4e3fb690cafc3fc268b99bd06c19c0c0a694", "committedDate": "2020-02-19T18:52:38Z", "message": "fix  test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNDYyMzcz", "url": "https://github.com/all-of-us/workbench/pull/3126#pullrequestreview-361462373", "createdAt": "2020-02-19T21:48:18Z", "commit": {"oid": "e01f4e3fb690cafc3fc268b99bd06c19c0c0a694"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3573, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}