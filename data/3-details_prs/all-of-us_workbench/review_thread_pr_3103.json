{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNTk1Mjkz", "number": 3103, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTozMzo1N1rODeKEtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTowNzozMlrODfBFLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTQ4OTE3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTozMzo1N1rOFnK8Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMToxMzoyNFrOFoey4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxNzk5MA==", "bodyText": "Is this going to handle strings vs numbers properly? Wouldn't strings need to be quoted?", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376617990", "createdAt": "2020-02-07T21:33:57Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");\n+      case R:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\", Sys.getenv(\\\"WORKSPACE_CDR\\\"), \\\"\");\n+      default:\n+        return query;\n+    }\n+  }\n+\n+  private static String fillInQueryParams(\n+      String query, Map<String, QueryParameterValue> queryParameterValueMap) {\n+    StringBuilder stringBuilder = new StringBuilder(query);\n+    queryParameterValueMap.forEach(\n+        (key, value) -> {\n+          if (StandardSQLTypeName.ARRAY.equals(value.getType())) {\n+            String stringToReplace = \"unnest(@\".concat(key.concat(\")\"));\n+            int startingIndex = stringBuilder.indexOf(stringToReplace);\n+            stringBuilder.replace(\n+                startingIndex,\n+                startingIndex + stringToReplace.length(),\n+                \"(\"\n+                    .concat(\n+                        nullableListToEmpty(value.getArrayValues()).stream()\n+                            .map(QueryParameterValue::getValue)\n+                            .collect(Collectors.joining(\", \")))\n+                    .concat(\")\"));\n+          } else {\n+            String stringToReplace = \"@\".concat(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEyMTE5MA==", "bodyText": "I think the key is always @key_name, so this should work?", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r377121190", "createdAt": "2020-02-10T15:10:41Z", "author": {"login": "s-rubenstein"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");\n+      case R:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\", Sys.getenv(\\\"WORKSPACE_CDR\\\"), \\\"\");\n+      default:\n+        return query;\n+    }\n+  }\n+\n+  private static String fillInQueryParams(\n+      String query, Map<String, QueryParameterValue> queryParameterValueMap) {\n+    StringBuilder stringBuilder = new StringBuilder(query);\n+    queryParameterValueMap.forEach(\n+        (key, value) -> {\n+          if (StandardSQLTypeName.ARRAY.equals(value.getType())) {\n+            String stringToReplace = \"unnest(@\".concat(key.concat(\")\"));\n+            int startingIndex = stringBuilder.indexOf(stringToReplace);\n+            stringBuilder.replace(\n+                startingIndex,\n+                startingIndex + stringToReplace.length(),\n+                \"(\"\n+                    .concat(\n+                        nullableListToEmpty(value.getArrayValues()).stream()\n+                            .map(QueryParameterValue::getValue)\n+                            .collect(Collectors.joining(\", \")))\n+                    .concat(\")\"));\n+          } else {\n+            String stringToReplace = \"@\".concat(key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxNzk5MA=="}, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyMTc0Mw==", "bodyText": "Sorry, I should have highlighted the code block. I meant to refer to the value with this comment, not the key, i.e. line 704", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r377221743", "createdAt": "2020-02-10T17:55:06Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");\n+      case R:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\", Sys.getenv(\\\"WORKSPACE_CDR\\\"), \\\"\");\n+      default:\n+        return query;\n+    }\n+  }\n+\n+  private static String fillInQueryParams(\n+      String query, Map<String, QueryParameterValue> queryParameterValueMap) {\n+    StringBuilder stringBuilder = new StringBuilder(query);\n+    queryParameterValueMap.forEach(\n+        (key, value) -> {\n+          if (StandardSQLTypeName.ARRAY.equals(value.getType())) {\n+            String stringToReplace = \"unnest(@\".concat(key.concat(\")\"));\n+            int startingIndex = stringBuilder.indexOf(stringToReplace);\n+            stringBuilder.replace(\n+                startingIndex,\n+                startingIndex + stringToReplace.length(),\n+                \"(\"\n+                    .concat(\n+                        nullableListToEmpty(value.getArrayValues()).stream()\n+                            .map(QueryParameterValue::getValue)\n+                            .collect(Collectors.joining(\", \")))\n+                    .concat(\")\"));\n+          } else {\n+            String stringToReplace = \"@\".concat(key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxNzk5MA=="}, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI0MTE4NA==", "bodyText": "I will take a look at that.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r377241184", "createdAt": "2020-02-10T18:34:10Z", "author": {"login": "s-rubenstein"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");\n+      case R:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\", Sys.getenv(\\\"WORKSPACE_CDR\\\"), \\\"\");\n+      default:\n+        return query;\n+    }\n+  }\n+\n+  private static String fillInQueryParams(\n+      String query, Map<String, QueryParameterValue> queryParameterValueMap) {\n+    StringBuilder stringBuilder = new StringBuilder(query);\n+    queryParameterValueMap.forEach(\n+        (key, value) -> {\n+          if (StandardSQLTypeName.ARRAY.equals(value.getType())) {\n+            String stringToReplace = \"unnest(@\".concat(key.concat(\")\"));\n+            int startingIndex = stringBuilder.indexOf(stringToReplace);\n+            stringBuilder.replace(\n+                startingIndex,\n+                startingIndex + stringToReplace.length(),\n+                \"(\"\n+                    .concat(\n+                        nullableListToEmpty(value.getArrayValues()).stream()\n+                            .map(QueryParameterValue::getValue)\n+                            .collect(Collectors.joining(\", \")))\n+                    .concat(\")\"));\n+          } else {\n+            String stringToReplace = \"@\".concat(key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxNzk5MA=="}, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MTkwNQ==", "bodyText": "What was the outcome here?", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r377991905", "createdAt": "2020-02-12T01:13:24Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");\n+      case R:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\", Sys.getenv(\\\"WORKSPACE_CDR\\\"), \\\"\");\n+      default:\n+        return query;\n+    }\n+  }\n+\n+  private static String fillInQueryParams(\n+      String query, Map<String, QueryParameterValue> queryParameterValueMap) {\n+    StringBuilder stringBuilder = new StringBuilder(query);\n+    queryParameterValueMap.forEach(\n+        (key, value) -> {\n+          if (StandardSQLTypeName.ARRAY.equals(value.getType())) {\n+            String stringToReplace = \"unnest(@\".concat(key.concat(\")\"));\n+            int startingIndex = stringBuilder.indexOf(stringToReplace);\n+            stringBuilder.replace(\n+                startingIndex,\n+                startingIndex + stringToReplace.length(),\n+                \"(\"\n+                    .concat(\n+                        nullableListToEmpty(value.getArrayValues()).stream()\n+                            .map(QueryParameterValue::getValue)\n+                            .collect(Collectors.joining(\", \")))\n+                    .concat(\")\"));\n+          } else {\n+            String stringToReplace = \"@\".concat(key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxNzk5MA=="}, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTQ5MjEyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTozNToyNVrOFnK-EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzo1Mjo0M1rOFnvtJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxODUxMg==", "bodyText": "Did you look at str_glue as Nicole suggested? I think it would be more readable to declare variables then substitute them into the templated SQL as is done in the snippets. Note: it would require setting up an additional package", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376618512", "createdAt": "2020-02-07T21:35:25Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NzI2NQ==", "bodyText": "+1 . I get scared seeing system calls in the middle of a complex string operation. We need to have the cleanest, earliest error code we can if one of those values is missing or malformed.\nAlso, I'll give you a dollar for every string or regex replacement we can kill in this class. \ud83d\ude09 I believe we can build almost everything up in one direction, and that's much easier to reason about and test. Later PR of course.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376787265", "createdAt": "2020-02-09T14:14:32Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxODUxMg=="}, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEyNDk0OQ==", "bodyText": "Where is the str_glue comment? I didn't see that in the email I got.\nI do hate the amount of string replacement we're doing, but we would need to go into the cohort builder sql builder to change it too much. (Unfortunately we're using the same SQL building code that they use.)", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r377124949", "createdAt": "2020-02-10T15:16:44Z", "author": {"login": "s-rubenstein"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxODUxMg=="}, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyMDM4OA==", "bodyText": "Sorry I'm not sure if she explicitly suggested this, I was more thinking you were basing the approach on the code she had already written for the snippets menu. Here's an example of str_glue: https://github.com/all-of-us/workbench-snippets/blob/f6e714328ba8c0d3ff11387944fccb0df5ba7ab5/sql-snippets/snippets_setup.R#L30 ; see more complicated variants by inserting from the snippets SQL menu. The relevant thing here is that it lets you interpolate variables into a string.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r377220388", "createdAt": "2020-02-10T17:52:43Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxODUxMg=="}, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTQ5NDU4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTozNjozMFrOFnK_pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzo1Mzo0M1rOFnvveQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxODkxOQ==", "bodyText": "I don't love inlining these into the SQL itself. I think string substitution within the notebook code would be more reusable / understandable / readable. In R: str_glue, in Py f\"\"\nAlternatively, the parameterized queries in Python were perhaps an ideal way to show how to properly use BigQuery, but understood that diverging this much between R and Python could be a problem.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376618919", "createdAt": "2020-02-07T21:36:30Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");\n+      case R:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\", Sys.getenv(\\\"WORKSPACE_CDR\\\"), \\\"\");\n+      default:\n+        return query;\n+    }\n+  }\n+\n+  private static String fillInQueryParams(\n+      String query, Map<String, QueryParameterValue> queryParameterValueMap) {\n+    StringBuilder stringBuilder = new StringBuilder(query);\n+    queryParameterValueMap.forEach(\n+        (key, value) -> {\n+          if (StandardSQLTypeName.ARRAY.equals(value.getType())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEyNjgwMw==", "bodyText": "I am happy using str_glue or f\"\", but honestly, I'm unsure what benefit it gives over the config or query parameters (They're both variables that get substitutions in)\nI can revert back to that if we like. BigRQuery does just have it use a parameter option instead of a configuration option, so it does trim a lot of boilerplate and just make it basically a substitution.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r377126803", "createdAt": "2020-02-10T15:19:38Z", "author": {"login": "s-rubenstein"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");\n+      case R:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\", Sys.getenv(\\\"WORKSPACE_CDR\\\"), \\\"\");\n+      default:\n+        return query;\n+    }\n+  }\n+\n+  private static String fillInQueryParams(\n+      String query, Map<String, QueryParameterValue> queryParameterValueMap) {\n+    StringBuilder stringBuilder = new StringBuilder(query);\n+    queryParameterValueMap.forEach(\n+        (key, value) -> {\n+          if (StandardSQLTypeName.ARRAY.equals(value.getType())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxODkxOQ=="}, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyMDk4NQ==", "bodyText": "The benefit is that it can work with arrays in R, otherwise I'd prefer config/query parameters.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r377220985", "createdAt": "2020-02-10T17:53:43Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");\n+      case R:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\", Sys.getenv(\\\"WORKSPACE_CDR\\\"), \\\"\");\n+      default:\n+        return query;\n+    }\n+  }\n+\n+  private static String fillInQueryParams(\n+      String query, Map<String, QueryParameterValue> queryParameterValueMap) {\n+    StringBuilder stringBuilder = new StringBuilder(query);\n+    queryParameterValueMap.forEach(\n+        (key, value) -> {\n+          if (StandardSQLTypeName.ARRAY.equals(value.getType())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxODkxOQ=="}, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTUwMTA3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTozOToxMlrOFnLDrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNjowMzoyN1rOFnrxrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxOTk0OQ==", "bodyText": "This deserves a comment, it seems like you're trying to replace the {project}.{dataset} templates within the query parameters at this step. But I'm not very clear on why", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376619949", "createdAt": "2020-02-07T21:39:12Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -324,7 +324,14 @@ private DataSetRequest generateDataSetRequestFromPreviewRequest(\n     DataSetPreviewResponse previewQueryResponse = new DataSetPreviewResponse();\n     DataSetRequest dataSetRequest = generateDataSetRequestFromPreviewRequest(dataSetPreviewRequest);\n     Map<String, QueryJobConfiguration> bigQueryJobConfig =\n-        dataSetService.generateQueryJobConfigurationsByDomainName(dataSetRequest);\n+        dataSetService.generateQueryJobConfigurationsByDomainName(dataSetRequest).entrySet()\n+            .stream()\n+            .collect(\n+                Collectors.toMap(\n+                    Map.Entry::getKey,\n+                    stringQueryJobConfigurationEntry ->\n+                        bigQueryService.filterBigQueryConfig(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NTcxNQ==", "bodyText": "nit: just use e for entry in an inline lambda. The extra-descriptive name is great for a class method or function name, but for single-arg lambdas I tend to expect the other extreme.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376785715", "createdAt": "2020-02-09T13:51:43Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -324,7 +324,14 @@ private DataSetRequest generateDataSetRequestFromPreviewRequest(\n     DataSetPreviewResponse previewQueryResponse = new DataSetPreviewResponse();\n     DataSetRequest dataSetRequest = generateDataSetRequestFromPreviewRequest(dataSetPreviewRequest);\n     Map<String, QueryJobConfiguration> bigQueryJobConfig =\n-        dataSetService.generateQueryJobConfigurationsByDomainName(dataSetRequest);\n+        dataSetService.generateQueryJobConfigurationsByDomainName(dataSetRequest).entrySet()\n+            .stream()\n+            .collect(\n+                Collectors.toMap(\n+                    Map.Entry::getKey,\n+                    stringQueryJobConfigurationEntry ->\n+                        bigQueryService.filterBigQueryConfig(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxOTk0OQ=="}, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE1NjAxMg==", "bodyText": "I tried checking this and it appears to be nonsense, so I removed it", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r377156012", "createdAt": "2020-02-10T16:03:27Z", "author": {"login": "s-rubenstein"}, "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -324,7 +324,14 @@ private DataSetRequest generateDataSetRequestFromPreviewRequest(\n     DataSetPreviewResponse previewQueryResponse = new DataSetPreviewResponse();\n     DataSetRequest dataSetRequest = generateDataSetRequestFromPreviewRequest(dataSetPreviewRequest);\n     Map<String, QueryJobConfiguration> bigQueryJobConfig =\n-        dataSetService.generateQueryJobConfigurationsByDomainName(dataSetRequest);\n+        dataSetService.generateQueryJobConfigurationsByDomainName(dataSetRequest).entrySet()\n+            .stream()\n+            .collect(\n+                Collectors.toMap(\n+                    Map.Entry::getKey,\n+                    stringQueryJobConfigurationEntry ->\n+                        bigQueryService.filterBigQueryConfig(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxOTk0OQ=="}, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTUwOTQ4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTo0MjozN1rOFnLI5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTo0MjozN1rOFnLI5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYyMTI4NA==", "bodyText": "There should probably be at least one test which incorporates parameters", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376621284", "createdAt": "2020-02-07T21:42:37Z", "author": {"login": "calbach"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -692,7 +692,7 @@ public void testGetPythonQuery() {\n     String prefix = \"dataset_00000000_condition_\";\n     assertThat(response.getCode())\n         .isEqualTo(\n-            \"import pandas\\n\\n\"\n+            \"import pandas\\nimport os\\n\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDczMDE1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxMzo1Mjo0NlrOFnVLdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxMzo1Mjo0NlrOFnVLdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NTc4Mg==", "bodyText": "nit: maybe name this like domainToBigQueryConfig.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376785782", "createdAt": "2020-02-09T13:52:46Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -324,7 +324,14 @@ private DataSetRequest generateDataSetRequestFromPreviewRequest(\n     DataSetPreviewResponse previewQueryResponse = new DataSetPreviewResponse();\n     DataSetRequest dataSetRequest = generateDataSetRequestFromPreviewRequest(dataSetPreviewRequest);\n     Map<String, QueryJobConfiguration> bigQueryJobConfig =\n-        dataSetService.generateQueryJobConfigurationsByDomainName(dataSetRequest);\n+        dataSetService.generateQueryJobConfigurationsByDomainName(dataSetRequest).entrySet()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDczMTQ0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxMzo1NTowNVrOFnVMGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxMzo1NTowNVrOFnVMGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NTk0Ng==", "bodyText": "nit, naming: This was confusing to read. I don't see where \"project information\" comes in. I suspect there's a better name.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376785946", "createdAt": "2020-02-09T13:55:05Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -496,11 +497,16 @@ private boolean supportsConceptSets(Domain domain) {\n \n   private QueryJobConfiguration buildQueryJobConfiguration(\n       Map<String, QueryParameterValue> namedCohortParameters, String query) {\n+    return QueryJobConfiguration.newBuilder(query)\n+        .setNamedParameters(namedCohortParameters)\n+        .setUseLegacySql(false)\n+        .build();\n+  }\n+\n+  private QueryJobConfiguration buildQueryJobConfigurationWithProjectInformation(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDczMzMyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxMzo1ODozMlrOFnVNAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxODoyMzowOVrOFnwoHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NjE3OQ==", "bodyText": "nit: I feel like just having the builder inline would be more readable than calling this helper, since you're really only assigning the legacy Sql. You could also have a function that returns a builder with the default arg set, like return QueryJobConfiguration.newBuilder().setUseLegacySql(false);. That's if it lets you make a builder without the query. \ud83e\udd37\u200d\u2642", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376786179", "createdAt": "2020-02-09T13:58:32Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -496,11 +497,16 @@ private boolean supportsConceptSets(Domain domain) {\n \n   private QueryJobConfiguration buildQueryJobConfiguration(\n       Map<String, QueryParameterValue> namedCohortParameters, String query) {\n+    return QueryJobConfiguration.newBuilder(query)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE2MDYwNg==", "bodyText": "I can do the function that returns a builder with the arg set, that seems reasonable to me. Because its in two places, I would prefer having the default args change in both with one change.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r377160606", "createdAt": "2020-02-10T16:10:50Z", "author": {"login": "s-rubenstein"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -496,11 +497,16 @@ private boolean supportsConceptSets(Domain domain) {\n \n   private QueryJobConfiguration buildQueryJobConfiguration(\n       Map<String, QueryParameterValue> namedCohortParameters, String query) {\n+    return QueryJobConfiguration.newBuilder(query)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NjE3OQ=="}, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIzNTQ4Nw==", "bodyText": "Talked offline:\nI tried to address the comment here https://github.com/all-of-us/workbench/pull/3103/files#diff-5324f051d4e486d6f33e30b9f6bebd92R500 but it looks like all the builder methods that don't require a query up front are private methods. \ud83d\ude22\nI could have it build each time it is used, but that ends up with a bunch of repeated boilerplate for the defaults.\n11:20\n(I could maybe build with an empty string literal and then set the query later?) (edited)\n11:20\nDo you have a preference?\nJay Carlton  11:26 AM\nit's not a huge win to do what I think I was saying\n11:26\njust pointing out that builders smaller than ~5 lines are all right inline unless there's lots of repeated fields", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r377235487", "createdAt": "2020-02-10T18:23:09Z", "author": {"login": "s-rubenstein"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -496,11 +497,16 @@ private boolean supportsConceptSets(Domain domain) {\n \n   private QueryJobConfiguration buildQueryJobConfiguration(\n       Map<String, QueryParameterValue> namedCohortParameters, String query) {\n+    return QueryJobConfiguration.newBuilder(query)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NjE3OQ=="}, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDczMzc0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxMzo1OToyN1rOFnVNOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxMzo1OToyN1rOFnVNOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NjIzNQ==", "bodyText": "nit: it would be more robust to have a list of things to import,  roll over it to make import statements, and then join that with a newline.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376786235", "createdAt": "2020-02-09T13:59:27Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -533,16 +539,10 @@ private String getQualifiedColumnName(Domain currentDomain, String columnName) {\n     String prerequisites;\n     switch (kernelTypeEnum) {\n       case R:\n-        prerequisites =\n-            // RW-4241 workaround: update when the Jupyter image with the reticulate fix is fully\n-            // rolled out\n-            \"require(devtools)\\n\"\n-                + \"devtools::install_github(\\\"rstudio/reticulate\\\", ref=\\\"00172079\\\")\\n\"\n-                + \"library(reticulate)\\n\"\n-                + \"pd <- reticulate::import(\\\"pandas\\\")\";\n+        prerequisites = \"library(bigrquery)\";\n         break;\n       case PYTHON:\n-        prerequisites = \"import pandas\";\n+        prerequisites = \"import pandas\\n\" + \"import os\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDczNDYwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNDowMDo1NlrOFnVNqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNjowNDowNFrOFnrzJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NjM0Ng==", "bodyText": "nit: I generally don't want to see three languages in one function.Can we wrap the bodies of these case clauses into their own functions?", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376786346", "createdAt": "2020-02-09T14:00:56Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");\n+      case R:\n+        return query.replaceAll(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE1NjM5MQ==", "bodyText": "Sure, will do.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r377156391", "createdAt": "2020-02-10T16:04:04Z", "author": {"login": "s-rubenstein"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");\n+      case R:\n+        return query.replaceAll(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NjM0Ng=="}, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDczNTcxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNDowMjo1OVrOFnVONg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNjowNDoxOVrOFnrztA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NjQ4Ng==", "bodyText": "Too much is happening here to test effectively or to really understand. Please do put comments at the top of this function and split up the string operations.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376786486", "createdAt": "2020-02-09T14:02:59Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");\n+      case R:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\", Sys.getenv(\\\"WORKSPACE_CDR\\\"), \\\"\");\n+      default:\n+        return query;\n+    }\n+  }\n+\n+  private static String fillInQueryParams(\n+      String query, Map<String, QueryParameterValue> queryParameterValueMap) {\n+    StringBuilder stringBuilder = new StringBuilder(query);\n+    queryParameterValueMap.forEach(\n+        (key, value) -> {\n+          if (StandardSQLTypeName.ARRAY.equals(value.getType())) {\n+            String stringToReplace = \"unnest(@\".concat(key.concat(\")\"));\n+            int startingIndex = stringBuilder.indexOf(stringToReplace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE1NjUzMg==", "bodyText": "Will do.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r377156532", "createdAt": "2020-02-10T16:04:19Z", "author": {"login": "s-rubenstein"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");\n+      case R:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\", Sys.getenv(\\\"WORKSPACE_CDR\\\"), \\\"\");\n+      default:\n+        return query;\n+    }\n+  }\n+\n+  private static String fillInQueryParams(\n+      String query, Map<String, QueryParameterValue> queryParameterValueMap) {\n+    StringBuilder stringBuilder = new StringBuilder(query);\n+    queryParameterValueMap.forEach(\n+        (key, value) -> {\n+          if (StandardSQLTypeName.ARRAY.equals(value.getType())) {\n+            String stringToReplace = \"unnest(@\".concat(key.concat(\")\"));\n+            int startingIndex = stringBuilder.indexOf(stringToReplace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NjQ4Ng=="}, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDczNzU4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNDowNjo1MFrOFnVPKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNDowNjo1MFrOFnVPKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NjcyOA==", "bodyText": "I'd make a helper function like  formatArrayValueStringValuesOrWhatever(QueryParameterValue queryParameterValue) that gives you everything you're concatenating here.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376786728", "createdAt": "2020-02-09T14:06:50Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");\n+      case R:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\", Sys.getenv(\\\"WORKSPACE_CDR\\\"), \\\"\");\n+      default:\n+        return query;\n+    }\n+  }\n+\n+  private static String fillInQueryParams(\n+      String query, Map<String, QueryParameterValue> queryParameterValueMap) {\n+    StringBuilder stringBuilder = new StringBuilder(query);\n+    queryParameterValueMap.forEach(\n+        (key, value) -> {\n+          if (StandardSQLTypeName.ARRAY.equals(value.getType())) {\n+            String stringToReplace = \"unnest(@\".concat(key.concat(\")\"));\n+            int startingIndex = stringBuilder.indexOf(stringToReplace);\n+            stringBuilder.replace(\n+                startingIndex,\n+                startingIndex + stringToReplace.length(),\n+                \"(\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDczODQ4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNDowODozNlrOFnVPqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjowODo0MFrOFoPIMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4Njg1Nw==", "bodyText": "nit: I think this reads better with Optional.ofNullable(...).ifPresent(v -> stringBuilder.replace(..., v)\nBut also, I'm not used to seeing replace used on a stringBuilder. It's generally expected that you build up the correct string from the beginning. Is there a way to do the swapping earlier?", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376786857", "createdAt": "2020-02-09T14:08:36Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");\n+      case R:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\", Sys.getenv(\\\"WORKSPACE_CDR\\\"), \\\"\");\n+      default:\n+        return query;\n+    }\n+  }\n+\n+  private static String fillInQueryParams(\n+      String query, Map<String, QueryParameterValue> queryParameterValueMap) {\n+    StringBuilder stringBuilder = new StringBuilder(query);\n+    queryParameterValueMap.forEach(\n+        (key, value) -> {\n+          if (StandardSQLTypeName.ARRAY.equals(value.getType())) {\n+            String stringToReplace = \"unnest(@\".concat(key.concat(\")\"));\n+            int startingIndex = stringBuilder.indexOf(stringToReplace);\n+            stringBuilder.replace(\n+                startingIndex,\n+                startingIndex + stringToReplace.length(),\n+                \"(\"\n+                    .concat(\n+                        nullableListToEmpty(value.getArrayValues()).stream()\n+                            .map(QueryParameterValue::getValue)\n+                            .collect(Collectors.joining(\", \")))\n+                    .concat(\")\"));\n+          } else {\n+            String stringToReplace = \"@\".concat(key);\n+            int startingIndex = stringBuilder.indexOf(stringToReplace);\n+            stringBuilder.replace(\n+                startingIndex,\n+                startingIndex + stringToReplace.length(),\n+                Optional.ofNullable(value.getValue()).orElse(\"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIzMDI0NA==", "bodyText": "Not without changing the Cohort Builder SQL building code, unfortunately. Will change to the Optional.ofNullable method though.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r377230244", "createdAt": "2020-02-10T18:12:20Z", "author": {"login": "s-rubenstein"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");\n+      case R:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\", Sys.getenv(\\\"WORKSPACE_CDR\\\"), \\\"\");\n+      default:\n+        return query;\n+    }\n+  }\n+\n+  private static String fillInQueryParams(\n+      String query, Map<String, QueryParameterValue> queryParameterValueMap) {\n+    StringBuilder stringBuilder = new StringBuilder(query);\n+    queryParameterValueMap.forEach(\n+        (key, value) -> {\n+          if (StandardSQLTypeName.ARRAY.equals(value.getType())) {\n+            String stringToReplace = \"unnest(@\".concat(key.concat(\")\"));\n+            int startingIndex = stringBuilder.indexOf(stringToReplace);\n+            stringBuilder.replace(\n+                startingIndex,\n+                startingIndex + stringToReplace.length(),\n+                \"(\"\n+                    .concat(\n+                        nullableListToEmpty(value.getArrayValues()).stream()\n+                            .map(QueryParameterValue::getValue)\n+                            .collect(Collectors.joining(\", \")))\n+                    .concat(\")\"));\n+          } else {\n+            String stringToReplace = \"@\".concat(key);\n+            int startingIndex = stringBuilder.indexOf(stringToReplace);\n+            stringBuilder.replace(\n+                startingIndex,\n+                startingIndex + stringToReplace.length(),\n+                Optional.ofNullable(value.getValue()).orElse(\"\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4Njg1Nw=="}, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczNTIxNw==", "bodyText": "OK, I really want to get to tinkering on a new third party query builder.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r377735217", "createdAt": "2020-02-11T16:08:40Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");\n+      case R:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\", Sys.getenv(\\\"WORKSPACE_CDR\\\"), \\\"\");\n+      default:\n+        return query;\n+    }\n+  }\n+\n+  private static String fillInQueryParams(\n+      String query, Map<String, QueryParameterValue> queryParameterValueMap) {\n+    StringBuilder stringBuilder = new StringBuilder(query);\n+    queryParameterValueMap.forEach(\n+        (key, value) -> {\n+          if (StandardSQLTypeName.ARRAY.equals(value.getType())) {\n+            String stringToReplace = \"unnest(@\".concat(key.concat(\")\"));\n+            int startingIndex = stringBuilder.indexOf(stringToReplace);\n+            stringBuilder.replace(\n+                startingIndex,\n+                startingIndex + stringToReplace.length(),\n+                \"(\"\n+                    .concat(\n+                        nullableListToEmpty(value.getArrayValues()).stream()\n+                            .map(QueryParameterValue::getValue)\n+                            .collect(Collectors.joining(\", \")))\n+                    .concat(\")\"));\n+          } else {\n+            String stringToReplace = \"@\".concat(key);\n+            int startingIndex = stringBuilder.indexOf(stringToReplace);\n+            stringBuilder.replace(\n+                startingIndex,\n+                startingIndex + stringToReplace.length(),\n+                Optional.ofNullable(value.getValue()).orElse(\"\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4Njg1Nw=="}, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDc0MDU0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNDoxMjo0OVrOFnVQyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNDoxMjo0OVrOFnVQyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NzE0NA==", "bodyText": "We need to have test cases for all the edge cases,  like when things that are expected to be there are missing. We should be failing the operation early instead of sending a broken query to the notebook if anything is amiss. (We don't have a great automatic way to find all the notebooks with queries for a given release yet from what I remember.)", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376787144", "createdAt": "2020-02-09T14:12:49Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -771,23 +755,12 @@ public void testGetRQuery() {\n                 + \"AND (c_occurrence.PERSON_ID IN (SELECT * FROM person_id from `\"\n                 + TEST_CDR_TABLE\n                 + \".person` person)) \\n\"\n-                + \"LIMIT \\\", max_number_of_rows)\\n\"\n-                + \"\\n\"\n-                + prefix\n-                + \"query_config <- list(\\n\"\n-                + \"  query = list(\\n\"\n-                + \"    parameterMode = 'NAMED',\\n\"\n-                + \"    queryParameters = list(\\n\\n\"\n-                + \"    )\\n\"\n-                + \"  )\\n\"\n-                + \")\\n\"\n+                + \"LIMIT \\\", max_number_of_rows, sep=\\\"\\\")\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzgyMjM4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTowNDoyOVrOFnx8qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo1NToxOFrOFoOkhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI1NzEzMQ==", "bodyText": "Do we need to upgrade our notebook docker image to include bigrquery?", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r377257131", "createdAt": "2020-02-10T19:04:29Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -533,16 +544,10 @@ private String getQualifiedColumnName(Domain currentDomain, String columnName) {\n     String prerequisites;\n     switch (kernelTypeEnum) {\n       case R:\n-        prerequisites =\n-            // RW-4241 workaround: update when the Jupyter image with the reticulate fix is fully\n-            // rolled out\n-            \"require(devtools)\\n\"\n-                + \"devtools::install_github(\\\"rstudio/reticulate\\\", ref=\\\"00172079\\\")\\n\"\n-                + \"library(reticulate)\\n\"\n-                + \"pd <- reticulate::import(\\\"pandas\\\")\";\n+        prerequisites = \"library(bigrquery)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf32337c0cc628728fafc4bf125ceaf5d9c453e2"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMwMTM0Ng==", "bodyText": "I think the ticket said we don't have to in this case... Don't quote me on that.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r377301346", "createdAt": "2020-02-10T20:35:04Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -533,16 +544,10 @@ private String getQualifiedColumnName(Domain currentDomain, String columnName) {\n     String prerequisites;\n     switch (kernelTypeEnum) {\n       case R:\n-        prerequisites =\n-            // RW-4241 workaround: update when the Jupyter image with the reticulate fix is fully\n-            // rolled out\n-            \"require(devtools)\\n\"\n-                + \"devtools::install_github(\\\"rstudio/reticulate\\\", ref=\\\"00172079\\\")\\n\"\n-                + \"library(reticulate)\\n\"\n-                + \"pd <- reticulate::import(\\\"pandas\\\")\";\n+        prerequisites = \"library(bigrquery)\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI1NzEzMQ=="}, "originalCommit": {"oid": "cf32337c0cc628728fafc4bf125ceaf5d9c453e2"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4OTQxNw==", "bodyText": "It functions without it, so we should be good. My guess is Leo includes it by default?", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r377689417", "createdAt": "2020-02-11T15:01:25Z", "author": {"login": "s-rubenstein"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -533,16 +544,10 @@ private String getQualifiedColumnName(Domain currentDomain, String columnName) {\n     String prerequisites;\n     switch (kernelTypeEnum) {\n       case R:\n-        prerequisites =\n-            // RW-4241 workaround: update when the Jupyter image with the reticulate fix is fully\n-            // rolled out\n-            \"require(devtools)\\n\"\n-                + \"devtools::install_github(\\\"rstudio/reticulate\\\", ref=\\\"00172079\\\")\\n\"\n-                + \"library(reticulate)\\n\"\n-                + \"pd <- reticulate::import(\\\"pandas\\\")\";\n+        prerequisites = \"library(bigrquery)\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI1NzEzMQ=="}, "originalCommit": {"oid": "cf32337c0cc628728fafc4bf125ceaf5d9c453e2"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyNjA4Nw==", "bodyText": "Great.  I'll add it to my sanity-checking notebook.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r377726087", "createdAt": "2020-02-11T15:55:18Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -533,16 +544,10 @@ private String getQualifiedColumnName(Domain currentDomain, String columnName) {\n     String prerequisites;\n     switch (kernelTypeEnum) {\n       case R:\n-        prerequisites =\n-            // RW-4241 workaround: update when the Jupyter image with the reticulate fix is fully\n-            // rolled out\n-            \"require(devtools)\\n\"\n-                + \"devtools::install_github(\\\"rstudio/reticulate\\\", ref=\\\"00172079\\\")\\n\"\n-                + \"library(reticulate)\\n\"\n-                + \"pd <- reticulate::import(\\\"pandas\\\")\";\n+        prerequisites = \"library(bigrquery)\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI1NzEzMQ=="}, "originalCommit": {"oid": "cf32337c0cc628728fafc4bf125ceaf5d9c453e2"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODUwMTU2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTowNzozMlrOFoes5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoxNjoxOFrOFo3YdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MDM3Mw==", "bodyText": "If I'm reading this correctly, this turns into: WHERE ICD9 IN (2, 5). This doesn't seem right", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r377990373", "createdAt": "2020-02-12T01:07:32Z", "author": {"login": "calbach"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -716,27 +728,16 @@ public void testGetPythonQuery() {\n                 + \"condition_source_concept_id IN (123)) \\n\"\n                 + \"AND (c_occurrence.PERSON_ID IN (SELECT * FROM person_id from `\"\n                 + TEST_CDR_TABLE\n-                + \".person` person)) \"\n+                + \".person` person WHERE \"\n+                + NAMED_PARAMETER_VALUE.getValue()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9e0bb849c6410cc153dac7624ac9b4d9edea093"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMwNjgzOQ==", "bodyText": "In this case, I just threw some random text in. In truth, it is more likely to be something like WHERE concept_id IN (132543, 2135643...)", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r378306839", "createdAt": "2020-02-12T15:02:39Z", "author": {"login": "s-rubenstein"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -716,27 +728,16 @@ public void testGetPythonQuery() {\n                 + \"condition_source_concept_id IN (123)) \\n\"\n                 + \"AND (c_occurrence.PERSON_ID IN (SELECT * FROM person_id from `\"\n                 + TEST_CDR_TABLE\n-                + \".person` person)) \"\n+                + \".person` person WHERE \"\n+                + NAMED_PARAMETER_VALUE.getValue()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MDM3Mw=="}, "originalCommit": {"oid": "a9e0bb849c6410cc153dac7624ac9b4d9edea093"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5NDc0MQ==", "bodyText": "Could you change it to be a more realistic value? I think future editors will find this confusing", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r378394741", "createdAt": "2020-02-12T17:16:18Z", "author": {"login": "calbach"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -716,27 +728,16 @@ public void testGetPythonQuery() {\n                 + \"condition_source_concept_id IN (123)) \\n\"\n                 + \"AND (c_occurrence.PERSON_ID IN (SELECT * FROM person_id from `\"\n                 + TEST_CDR_TABLE\n-                + \".person` person)) \"\n+                + \".person` person WHERE \"\n+                + NAMED_PARAMETER_VALUE.getValue()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MDM3Mw=="}, "originalCommit": {"oid": "a9e0bb849c6410cc153dac7624ac9b4d9edea093"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3289, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}