{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMDYxODc5", "number": 4157, "title": "[risk=no] Notebook environment checks should fail when the variables are not found", "bodyText": "Description:\nAdding a nonexistent variable to the notebook checks in Python and R caused failures in neither test.  This PR updates both tests so that they do fail when required environment variables are missing.\n\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n I have run the E2E tests on ths change against my local UI + API server with yarn test-local\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-10-14T02:20:45Z", "url": "https://github.com/all-of-us/workbench/pull/4157", "merged": true, "mergeCommit": {"oid": "216e4191670b0b040bb3f191a79e2576455458dc"}, "closed": true, "closedAt": "2020-10-14T15:20:07Z", "author": {"login": "jmthibault79"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSSHTAAH2gAyNTAzMDYxODc5OjNkNjc2ZWU3ZDNmMjQ2ZGVhMjc0ZDZjNjE1ODYxNDIyMDg3ZDFmZGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSeq7ngFqTUwODQ1Mzk3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3d676ee7d3f246dea274d6c615861422087d1fdd", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/3d676ee7d3f246dea274d6c615861422087d1fdd", "committedDate": "2020-10-14T00:34:08Z", "message": "Python check: actually fail if env vars are missing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00398abac1460ebbccd0e906ff8e1b597b1f991f", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/00398abac1460ebbccd0e906ff8e1b597b1f991f", "committedDate": "2020-10-14T02:05:38Z", "message": "refactor runCodeCell() to include the markdown workaround"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f244c988480367014dec4388c3171dcac5a1e4c", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/9f244c988480367014dec4388c3171dcac5a1e4c", "committedDate": "2020-10-14T02:05:56Z", "message": "Actually fail the R test when env vars are missing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab4602d99eec1b2e393a63f7a6782864d2eac3b7", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/ab4602d99eec1b2e393a63f7a6782864d2eac3b7", "committedDate": "2020-10-14T02:22:23Z", "message": "not needed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4Mzg2NzM1", "url": "https://github.com/all-of-us/workbench/pull/4157#pullrequestreview-508386735", "createdAt": "2020-10-14T14:08:13Z", "commit": {"oid": "ab4602d99eec1b2e393a63f7a6782864d2eac3b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDowODoxM1rOHhU6zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDowODoxM1rOHhU6zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcwNzc5MA==", "bodyText": "moved from the r-spec test", "url": "https://github.com/all-of-us/workbench/pull/4157#discussion_r504707790", "createdAt": "2020-10-14T14:08:13Z", "author": {"login": "jmthibault79"}, "path": "e2e/app/page/notebook-page.ts", "diffHunk": "@@ -168,23 +168,42 @@ export default class NotebookPage extends AuthenticatedPage {\n    * Click Run button in toolbar. Run focused code cell and insert a new code cell below.\n    *\n    * @param {number} cellIndex Code Cell index. (first index is 1). Use -1 to find last cell.\n-   * @param {string} code The code to run.\n-   * @param {string} codeFile The full path to file that contains code to run.\n-   * @param {number} timeOut The timeout time in milliseconds.\n-   * @returns {string} Run output.\n+   * @param opts\n+   *  {string} code The code to run.\n+   *  {string} codeFile The full path to a file that contains the code to run.\n+   *  {number} timeOut The timeout time in milliseconds (default 120 sec).\n+   *  {boolean} markdownWorkaround Convert to Markdown before typing (default false)\n    */\n-  async runCodeCell(cellIndex: number, opts: { code?: string, codeFile?: string, timeOut?: number } = {}): Promise<string> {\n+  async runCodeCell(\n+      cellIndex: number,\n+      opts: { code?: string, codeFile?: string, timeOut?: number, markdownWorkaround?: boolean } = {}): Promise<string> {\n     const cell = cellIndex === -1 ? await this.findLastCell() : await this.findCell(cellIndex);\n-    const cellInput = await cell.focus();\n-    if (opts.code !== undefined) {\n-      await cellInput.type(opts.code);\n-    } else if (opts.codeFile !== undefined) {\n-      const code = fs.readFileSync(opts.codeFile, 'utf8');\n-      await cellInput.type(code);\n+    const inputCell = await cell.focus();\n+\n+    const {code, codeFile, timeOut = 120000, markdownWorkaround = false} = opts;\n+\n+    let codeToRun;\n+    if (code !== undefined) {\n+      codeToRun = code;\n+    } else if (codeFile !== undefined) {\n+      codeToRun = fs.readFileSync(codeFile, 'ascii');\n     }\n-    await cellInput.dispose();\n+\n+    // autoCloseBrackets is true by default for R code cells.\n+    // Puppeteer types in every character of code, resulting in extra brackets.\n+    // Workaround: Type code in Markdown cell, then change to Code cell to run.\n+    if (markdownWorkaround) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab4602d99eec1b2e393a63f7a6782864d2eac3b7"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NDAwMTAw", "url": "https://github.com/all-of-us/workbench/pull/4157#pullrequestreview-508400100", "createdAt": "2020-10-14T14:20:58Z", "commit": {"oid": "ab4602d99eec1b2e393a63f7a6782864d2eac3b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NDUzOTc1", "url": "https://github.com/all-of-us/workbench/pull/4157#pullrequestreview-508453975", "createdAt": "2020-10-14T15:11:55Z", "commit": {"oid": "ab4602d99eec1b2e393a63f7a6782864d2eac3b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3952, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}