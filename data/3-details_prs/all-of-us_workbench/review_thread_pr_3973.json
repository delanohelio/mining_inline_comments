{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMDczNzUz", "number": 3973, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMzozMjowMlrOEhrKWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDoxMToyMVrOEhsUrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzQ1NjI1OnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/selection-list/selection-list.component.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMzozMjowMlrOHPHfiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNToyMTozOVrOHPMqPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxMzQ0OQ==", "bodyText": "can cohortContext or cohortContext item be null?", "url": "https://github.com/all-of-us/workbench/pull/3973#discussion_r485613449", "createdAt": "2020-09-09T13:32:02Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/cohort-search/selection-list/selection-list.component.tsx", "diffHunk": "@@ -485,16 +443,23 @@ export const SelectionList = fp.flow(withCurrentCohortCriteria(), withCurrentCoh\n             <h3 style={{...styles.sectionTitle, marginTop: 0}}>Add selected criteria to cohort</h3>\n             <div style={{paddingTop: '0.5rem', position: 'relative'}}>\n               <div style={styles.selectionContainer}>\n-                {this.renderCriteria()}\n+                {!!criteria && criteria.map((selection, s) => <SelectionInfo key={s}\n+                  index={s}\n+                  selection={selection}\n+                  removeSelection={() => this.removeCriteria(selection)}/>\n+                )}\n                 {this.showModifierButton && <div style={{paddingLeft: '0.6rem'}}>\n-                  <Button type='secondaryOnDarkBackground' style={styles.modifierButton}\n+                  <Button type='secondaryLight' style={styles.modifierButton}\n                           onClick={() => this.setState({showModifiersSlide: true})}>\n-                    {modifierButtonText}\n+                    {cohortContext.item.modifiers.length > 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7d9a3194a3fd021ddba71cd7743f1d8b2a7ae8c"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY5ODExMQ==", "bodyText": "There are at least a couple layers that should prevent that.\n\nIn help-sidebar.tsx it checks that currentCohortSearchContextStore has a value set before rendering SelectionList\nThe showModifiersButton condition above checks that the criteria prop has a value and length, which is only true if cohortContext is set.\nAnytime we set a value for cohortContext, we include a value for the item property, so that should never be null", "url": "https://github.com/all-of-us/workbench/pull/3973#discussion_r485698111", "createdAt": "2020-09-09T15:21:39Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/selection-list/selection-list.component.tsx", "diffHunk": "@@ -485,16 +443,23 @@ export const SelectionList = fp.flow(withCurrentCohortCriteria(), withCurrentCoh\n             <h3 style={{...styles.sectionTitle, marginTop: 0}}>Add selected criteria to cohort</h3>\n             <div style={{paddingTop: '0.5rem', position: 'relative'}}>\n               <div style={styles.selectionContainer}>\n-                {this.renderCriteria()}\n+                {!!criteria && criteria.map((selection, s) => <SelectionInfo key={s}\n+                  index={s}\n+                  selection={selection}\n+                  removeSelection={() => this.removeCriteria(selection)}/>\n+                )}\n                 {this.showModifierButton && <div style={{paddingLeft: '0.6rem'}}>\n-                  <Button type='secondaryOnDarkBackground' style={styles.modifierButton}\n+                  <Button type='secondaryLight' style={styles.modifierButton}\n                           onClick={() => this.setState({showModifiersSlide: true})}>\n-                    {modifierButtonText}\n+                    {cohortContext.item.modifiers.length > 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxMzQ0OQ=="}, "originalCommit": {"oid": "b7d9a3194a3fd021ddba71cd7743f1d8b2a7ae8c"}, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzYyMjMzOnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDowNjoxM1rOHPJF6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNToyODo0M1rOHPM-Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYzOTY1OQ==", "bodyText": "nit: can we have index instead of a", "url": "https://github.com/all-of-us/workbench/pull/3973#discussion_r485639659", "createdAt": "2020-09-09T14:06:13Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -427,76 +336,76 @@ export class Demographics extends React.Component<Props, State> {\n   }\n \n   get showPreview() {\n-    const {criteriaType, selections} = this.props;\n-    return !this.state.loading && (selections && selections.length > 0) && criteriaType !== CriteriaType.AGE;\n-  }\n-\n-  // Checks if form is in its initial state and if a count already exists before setting the total age count\n-  get setTotalAge() {\n-    const {count, maxAge, minAge} = this.state;\n-    return minAge === defaultMinAge && maxAge === defaultMaxAge && !count;\n+    const {selections} = this.props;\n+    return !this.state.loading && !!selections && selections.length > 0;\n   }\n \n   render() {\n     const {criteriaType, selectedIds} = this.props;\n     const {ageType, calculating, count, loading, maxAge, minAge, nodes} = this.state;\n-    const isAge = criteriaType === CriteriaType.AGE;\n-    const calcDisabled = calculating || count !== null;\n     return loading\n-      ? <div style={{textAlign: 'center'}}><Spinner style={{marginTop: '3rem'}}/></div>\n-      : <React.Fragment>\n-        {isAge\n-          // Age slider with number inputs\n-          ? <div style={styles.ageContainer}>\n-            <div style={styles.ageLabel}>\n-              Age Range\n+      ? <div style={{textAlign: 'center'}}>\n+        <Spinner style={{marginTop: '3rem'}}/>\n+      </div>\n+      : criteriaType === CriteriaType.AGE\n+        // Age slider with number inputs\n+        ? <div style={styles.ageContainer}>\n+          <div style={styles.ageLabel}>\n+            Age Range\n+          </div>\n+          <div style={styles.sliderContainer}>\n+            <div style={{width: '2.5rem'}}>\n+              <NumberInput style={styles.ageInput}\n+                min={defaultMinAge} max={maxAge}\n+                value={minAge}\n+                onBlur={() => this.onMinBlur()}\n+                onChange={(v) => this.onMinChange(v)}/>\n             </div>\n-            <div style={styles.sliderContainer}>\n-              <div style={{width: '2.5rem'}}>\n-                <NumberInput style={styles.ageInput}\n-                  min={defaultMinAge} max={maxAge}\n-                  value={minAge}\n-                  onBlur={() => this.onMinBlur()}\n-                  onChange={(v) => this.onMinChange(v)}/>\n-              </div>\n-              <div style={{...styles.slider, marginBottom: '0.75rem'}}>\n-                <div ref={(el) => this.ageWrapper = el} id='count-wrapper'>\n-                  {calculating\n-                    ? <Spinner size={16}/>\n-                    : <span style={styles.count} id='age-count'>\n-                      {count.toLocaleString()}\n-                    </span>\n-                  }\n-                </div>\n-                <Nouislider behaviour='drag'\n-                  connect\n-                  instanceRef={(slider) => this.onSliderInit(slider)}\n-                  onChange={() => this.updateAgeSelection()}\n-                  onSlide={(v) => this.onSliderUpdate(v)}\n-                  range={{min: +defaultMinAge, max: +defaultMaxAge}}\n-                  start={[+defaultMinAge, +defaultMaxAge]}\n-                  step={1}/>\n-              </div>\n-              <div style={{width: '2.5rem'}}>\n-                <NumberInput style={styles.ageInput}\n-                  min={minAge} max={defaultMaxAge}\n-                  value={maxAge}\n-                  onBlur={() => this.onMaxBlur()}\n-                  onChange={(v) => this.onMaxChange(v)}/>\n+            <div style={{...styles.slider, marginBottom: '0.75rem'}}>\n+              <div ref={(el) => this.ageWrapper = el} id='count-wrapper'>\n+                {calculating\n+                  ? <Spinner size={16}/>\n+                  : <span style={styles.count} id='age-count'>\n+                    {count.toLocaleString()}\n+                  </span>\n+                }\n               </div>\n+              <Nouislider behaviour='drag'\n+                connect\n+                instanceRef={(slider) => this.onSliderInit(slider)}\n+                onSlide={(v) => this.onSliderUpdate(v)}\n+                range={{min: +defaultMinAge, max: +defaultMaxAge}}\n+                start={[+defaultMinAge, +defaultMaxAge]}\n+                step={1}/>\n             </div>\n-            <div style={{marginLeft: '1rem'}}>\n-              {ageTypes.map((ageTypeRadio, a) => <div key={a} style={{display: 'inline-block', marginRight: '0.5rem'}}>\n-                <input type='radio' name='ageType'\n-                  style={{marginRight: '0.25rem'}}\n-                  onChange={() => this.onRadioChange(ageTypeRadio.type)}\n-                  checked={ageTypeRadio.type === ageType}/>\n-                <label>{ageTypeRadio.label}</label>\n-              </div>)}\n+            <div style={{width: '2.5rem'}}>\n+              <NumberInput style={styles.ageInput}\n+                min={minAge} max={defaultMaxAge}\n+                value={maxAge}\n+                onBlur={() => this.onMaxBlur()}\n+                onChange={(v) => this.onMaxChange(v)}/>\n             </div>\n           </div>\n-          // List of selectable criteria used for Race, Ethnicity, Gender and Sex\n-          : <div style={styles.selectList}>\n+          <div style={{marginLeft: '1rem'}}>\n+            {ageTypes.map((ageTypeRadio, a) => <div key={a} style={{display: 'inline-block', marginRight: '0.5rem'}}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7d9a3194a3fd021ddba71cd7743f1d8b2a7ae8c"}, "originalPosition": 322}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwMzI0Mg==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3973#discussion_r485703242", "createdAt": "2020-09-09T15:28:43Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -427,76 +336,76 @@ export class Demographics extends React.Component<Props, State> {\n   }\n \n   get showPreview() {\n-    const {criteriaType, selections} = this.props;\n-    return !this.state.loading && (selections && selections.length > 0) && criteriaType !== CriteriaType.AGE;\n-  }\n-\n-  // Checks if form is in its initial state and if a count already exists before setting the total age count\n-  get setTotalAge() {\n-    const {count, maxAge, minAge} = this.state;\n-    return minAge === defaultMinAge && maxAge === defaultMaxAge && !count;\n+    const {selections} = this.props;\n+    return !this.state.loading && !!selections && selections.length > 0;\n   }\n \n   render() {\n     const {criteriaType, selectedIds} = this.props;\n     const {ageType, calculating, count, loading, maxAge, minAge, nodes} = this.state;\n-    const isAge = criteriaType === CriteriaType.AGE;\n-    const calcDisabled = calculating || count !== null;\n     return loading\n-      ? <div style={{textAlign: 'center'}}><Spinner style={{marginTop: '3rem'}}/></div>\n-      : <React.Fragment>\n-        {isAge\n-          // Age slider with number inputs\n-          ? <div style={styles.ageContainer}>\n-            <div style={styles.ageLabel}>\n-              Age Range\n+      ? <div style={{textAlign: 'center'}}>\n+        <Spinner style={{marginTop: '3rem'}}/>\n+      </div>\n+      : criteriaType === CriteriaType.AGE\n+        // Age slider with number inputs\n+        ? <div style={styles.ageContainer}>\n+          <div style={styles.ageLabel}>\n+            Age Range\n+          </div>\n+          <div style={styles.sliderContainer}>\n+            <div style={{width: '2.5rem'}}>\n+              <NumberInput style={styles.ageInput}\n+                min={defaultMinAge} max={maxAge}\n+                value={minAge}\n+                onBlur={() => this.onMinBlur()}\n+                onChange={(v) => this.onMinChange(v)}/>\n             </div>\n-            <div style={styles.sliderContainer}>\n-              <div style={{width: '2.5rem'}}>\n-                <NumberInput style={styles.ageInput}\n-                  min={defaultMinAge} max={maxAge}\n-                  value={minAge}\n-                  onBlur={() => this.onMinBlur()}\n-                  onChange={(v) => this.onMinChange(v)}/>\n-              </div>\n-              <div style={{...styles.slider, marginBottom: '0.75rem'}}>\n-                <div ref={(el) => this.ageWrapper = el} id='count-wrapper'>\n-                  {calculating\n-                    ? <Spinner size={16}/>\n-                    : <span style={styles.count} id='age-count'>\n-                      {count.toLocaleString()}\n-                    </span>\n-                  }\n-                </div>\n-                <Nouislider behaviour='drag'\n-                  connect\n-                  instanceRef={(slider) => this.onSliderInit(slider)}\n-                  onChange={() => this.updateAgeSelection()}\n-                  onSlide={(v) => this.onSliderUpdate(v)}\n-                  range={{min: +defaultMinAge, max: +defaultMaxAge}}\n-                  start={[+defaultMinAge, +defaultMaxAge]}\n-                  step={1}/>\n-              </div>\n-              <div style={{width: '2.5rem'}}>\n-                <NumberInput style={styles.ageInput}\n-                  min={minAge} max={defaultMaxAge}\n-                  value={maxAge}\n-                  onBlur={() => this.onMaxBlur()}\n-                  onChange={(v) => this.onMaxChange(v)}/>\n+            <div style={{...styles.slider, marginBottom: '0.75rem'}}>\n+              <div ref={(el) => this.ageWrapper = el} id='count-wrapper'>\n+                {calculating\n+                  ? <Spinner size={16}/>\n+                  : <span style={styles.count} id='age-count'>\n+                    {count.toLocaleString()}\n+                  </span>\n+                }\n               </div>\n+              <Nouislider behaviour='drag'\n+                connect\n+                instanceRef={(slider) => this.onSliderInit(slider)}\n+                onSlide={(v) => this.onSliderUpdate(v)}\n+                range={{min: +defaultMinAge, max: +defaultMaxAge}}\n+                start={[+defaultMinAge, +defaultMaxAge]}\n+                step={1}/>\n             </div>\n-            <div style={{marginLeft: '1rem'}}>\n-              {ageTypes.map((ageTypeRadio, a) => <div key={a} style={{display: 'inline-block', marginRight: '0.5rem'}}>\n-                <input type='radio' name='ageType'\n-                  style={{marginRight: '0.25rem'}}\n-                  onChange={() => this.onRadioChange(ageTypeRadio.type)}\n-                  checked={ageTypeRadio.type === ageType}/>\n-                <label>{ageTypeRadio.label}</label>\n-              </div>)}\n+            <div style={{width: '2.5rem'}}>\n+              <NumberInput style={styles.ageInput}\n+                min={minAge} max={defaultMaxAge}\n+                value={maxAge}\n+                onBlur={() => this.onMaxBlur()}\n+                onChange={(v) => this.onMaxChange(v)}/>\n             </div>\n           </div>\n-          // List of selectable criteria used for Race, Ethnicity, Gender and Sex\n-          : <div style={styles.selectList}>\n+          <div style={{marginLeft: '1rem'}}>\n+            {ageTypes.map((ageTypeRadio, a) => <div key={a} style={{display: 'inline-block', marginRight: '0.5rem'}}>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYzOTY1OQ=="}, "originalCommit": {"oid": "b7d9a3194a3fd021ddba71cd7743f1d8b2a7ae8c"}, "originalPosition": 322}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzYzNjY5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDowOToxNVrOHPJPEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNToyODo1NFrOHPM-0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY0MjAwMw==", "bodyText": "Can we use RadioButton from input.tsx for consistency?", "url": "https://github.com/all-of-us/workbench/pull/3973#discussion_r485642003", "createdAt": "2020-09-09T14:09:15Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -427,76 +336,76 @@ export class Demographics extends React.Component<Props, State> {\n   }\n \n   get showPreview() {\n-    const {criteriaType, selections} = this.props;\n-    return !this.state.loading && (selections && selections.length > 0) && criteriaType !== CriteriaType.AGE;\n-  }\n-\n-  // Checks if form is in its initial state and if a count already exists before setting the total age count\n-  get setTotalAge() {\n-    const {count, maxAge, minAge} = this.state;\n-    return minAge === defaultMinAge && maxAge === defaultMaxAge && !count;\n+    const {selections} = this.props;\n+    return !this.state.loading && !!selections && selections.length > 0;\n   }\n \n   render() {\n     const {criteriaType, selectedIds} = this.props;\n     const {ageType, calculating, count, loading, maxAge, minAge, nodes} = this.state;\n-    const isAge = criteriaType === CriteriaType.AGE;\n-    const calcDisabled = calculating || count !== null;\n     return loading\n-      ? <div style={{textAlign: 'center'}}><Spinner style={{marginTop: '3rem'}}/></div>\n-      : <React.Fragment>\n-        {isAge\n-          // Age slider with number inputs\n-          ? <div style={styles.ageContainer}>\n-            <div style={styles.ageLabel}>\n-              Age Range\n+      ? <div style={{textAlign: 'center'}}>\n+        <Spinner style={{marginTop: '3rem'}}/>\n+      </div>\n+      : criteriaType === CriteriaType.AGE\n+        // Age slider with number inputs\n+        ? <div style={styles.ageContainer}>\n+          <div style={styles.ageLabel}>\n+            Age Range\n+          </div>\n+          <div style={styles.sliderContainer}>\n+            <div style={{width: '2.5rem'}}>\n+              <NumberInput style={styles.ageInput}\n+                min={defaultMinAge} max={maxAge}\n+                value={minAge}\n+                onBlur={() => this.onMinBlur()}\n+                onChange={(v) => this.onMinChange(v)}/>\n             </div>\n-            <div style={styles.sliderContainer}>\n-              <div style={{width: '2.5rem'}}>\n-                <NumberInput style={styles.ageInput}\n-                  min={defaultMinAge} max={maxAge}\n-                  value={minAge}\n-                  onBlur={() => this.onMinBlur()}\n-                  onChange={(v) => this.onMinChange(v)}/>\n-              </div>\n-              <div style={{...styles.slider, marginBottom: '0.75rem'}}>\n-                <div ref={(el) => this.ageWrapper = el} id='count-wrapper'>\n-                  {calculating\n-                    ? <Spinner size={16}/>\n-                    : <span style={styles.count} id='age-count'>\n-                      {count.toLocaleString()}\n-                    </span>\n-                  }\n-                </div>\n-                <Nouislider behaviour='drag'\n-                  connect\n-                  instanceRef={(slider) => this.onSliderInit(slider)}\n-                  onChange={() => this.updateAgeSelection()}\n-                  onSlide={(v) => this.onSliderUpdate(v)}\n-                  range={{min: +defaultMinAge, max: +defaultMaxAge}}\n-                  start={[+defaultMinAge, +defaultMaxAge]}\n-                  step={1}/>\n-              </div>\n-              <div style={{width: '2.5rem'}}>\n-                <NumberInput style={styles.ageInput}\n-                  min={minAge} max={defaultMaxAge}\n-                  value={maxAge}\n-                  onBlur={() => this.onMaxBlur()}\n-                  onChange={(v) => this.onMaxChange(v)}/>\n+            <div style={{...styles.slider, marginBottom: '0.75rem'}}>\n+              <div ref={(el) => this.ageWrapper = el} id='count-wrapper'>\n+                {calculating\n+                  ? <Spinner size={16}/>\n+                  : <span style={styles.count} id='age-count'>\n+                    {count.toLocaleString()}\n+                  </span>\n+                }\n               </div>\n+              <Nouislider behaviour='drag'\n+                connect\n+                instanceRef={(slider) => this.onSliderInit(slider)}\n+                onSlide={(v) => this.onSliderUpdate(v)}\n+                range={{min: +defaultMinAge, max: +defaultMaxAge}}\n+                start={[+defaultMinAge, +defaultMaxAge]}\n+                step={1}/>\n             </div>\n-            <div style={{marginLeft: '1rem'}}>\n-              {ageTypes.map((ageTypeRadio, a) => <div key={a} style={{display: 'inline-block', marginRight: '0.5rem'}}>\n-                <input type='radio' name='ageType'\n-                  style={{marginRight: '0.25rem'}}\n-                  onChange={() => this.onRadioChange(ageTypeRadio.type)}\n-                  checked={ageTypeRadio.type === ageType}/>\n-                <label>{ageTypeRadio.label}</label>\n-              </div>)}\n+            <div style={{width: '2.5rem'}}>\n+              <NumberInput style={styles.ageInput}\n+                min={minAge} max={defaultMaxAge}\n+                value={maxAge}\n+                onBlur={() => this.onMaxBlur()}\n+                onChange={(v) => this.onMaxChange(v)}/>\n             </div>\n           </div>\n-          // List of selectable criteria used for Race, Ethnicity, Gender and Sex\n-          : <div style={styles.selectList}>\n+          <div style={{marginLeft: '1rem'}}>\n+            {ageTypes.map((ageTypeRadio, a) => <div key={a} style={{display: 'inline-block', marginRight: '0.5rem'}}>\n+              <input type='radio' name='ageType'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7d9a3194a3fd021ddba71cd7743f1d8b2a7ae8c"}, "originalPosition": 323}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwMzM3OQ==", "bodyText": "Nice idea, done.", "url": "https://github.com/all-of-us/workbench/pull/3973#discussion_r485703379", "createdAt": "2020-09-09T15:28:54Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -427,76 +336,76 @@ export class Demographics extends React.Component<Props, State> {\n   }\n \n   get showPreview() {\n-    const {criteriaType, selections} = this.props;\n-    return !this.state.loading && (selections && selections.length > 0) && criteriaType !== CriteriaType.AGE;\n-  }\n-\n-  // Checks if form is in its initial state and if a count already exists before setting the total age count\n-  get setTotalAge() {\n-    const {count, maxAge, minAge} = this.state;\n-    return minAge === defaultMinAge && maxAge === defaultMaxAge && !count;\n+    const {selections} = this.props;\n+    return !this.state.loading && !!selections && selections.length > 0;\n   }\n \n   render() {\n     const {criteriaType, selectedIds} = this.props;\n     const {ageType, calculating, count, loading, maxAge, minAge, nodes} = this.state;\n-    const isAge = criteriaType === CriteriaType.AGE;\n-    const calcDisabled = calculating || count !== null;\n     return loading\n-      ? <div style={{textAlign: 'center'}}><Spinner style={{marginTop: '3rem'}}/></div>\n-      : <React.Fragment>\n-        {isAge\n-          // Age slider with number inputs\n-          ? <div style={styles.ageContainer}>\n-            <div style={styles.ageLabel}>\n-              Age Range\n+      ? <div style={{textAlign: 'center'}}>\n+        <Spinner style={{marginTop: '3rem'}}/>\n+      </div>\n+      : criteriaType === CriteriaType.AGE\n+        // Age slider with number inputs\n+        ? <div style={styles.ageContainer}>\n+          <div style={styles.ageLabel}>\n+            Age Range\n+          </div>\n+          <div style={styles.sliderContainer}>\n+            <div style={{width: '2.5rem'}}>\n+              <NumberInput style={styles.ageInput}\n+                min={defaultMinAge} max={maxAge}\n+                value={minAge}\n+                onBlur={() => this.onMinBlur()}\n+                onChange={(v) => this.onMinChange(v)}/>\n             </div>\n-            <div style={styles.sliderContainer}>\n-              <div style={{width: '2.5rem'}}>\n-                <NumberInput style={styles.ageInput}\n-                  min={defaultMinAge} max={maxAge}\n-                  value={minAge}\n-                  onBlur={() => this.onMinBlur()}\n-                  onChange={(v) => this.onMinChange(v)}/>\n-              </div>\n-              <div style={{...styles.slider, marginBottom: '0.75rem'}}>\n-                <div ref={(el) => this.ageWrapper = el} id='count-wrapper'>\n-                  {calculating\n-                    ? <Spinner size={16}/>\n-                    : <span style={styles.count} id='age-count'>\n-                      {count.toLocaleString()}\n-                    </span>\n-                  }\n-                </div>\n-                <Nouislider behaviour='drag'\n-                  connect\n-                  instanceRef={(slider) => this.onSliderInit(slider)}\n-                  onChange={() => this.updateAgeSelection()}\n-                  onSlide={(v) => this.onSliderUpdate(v)}\n-                  range={{min: +defaultMinAge, max: +defaultMaxAge}}\n-                  start={[+defaultMinAge, +defaultMaxAge]}\n-                  step={1}/>\n-              </div>\n-              <div style={{width: '2.5rem'}}>\n-                <NumberInput style={styles.ageInput}\n-                  min={minAge} max={defaultMaxAge}\n-                  value={maxAge}\n-                  onBlur={() => this.onMaxBlur()}\n-                  onChange={(v) => this.onMaxChange(v)}/>\n+            <div style={{...styles.slider, marginBottom: '0.75rem'}}>\n+              <div ref={(el) => this.ageWrapper = el} id='count-wrapper'>\n+                {calculating\n+                  ? <Spinner size={16}/>\n+                  : <span style={styles.count} id='age-count'>\n+                    {count.toLocaleString()}\n+                  </span>\n+                }\n               </div>\n+              <Nouislider behaviour='drag'\n+                connect\n+                instanceRef={(slider) => this.onSliderInit(slider)}\n+                onSlide={(v) => this.onSliderUpdate(v)}\n+                range={{min: +defaultMinAge, max: +defaultMaxAge}}\n+                start={[+defaultMinAge, +defaultMaxAge]}\n+                step={1}/>\n             </div>\n-            <div style={{marginLeft: '1rem'}}>\n-              {ageTypes.map((ageTypeRadio, a) => <div key={a} style={{display: 'inline-block', marginRight: '0.5rem'}}>\n-                <input type='radio' name='ageType'\n-                  style={{marginRight: '0.25rem'}}\n-                  onChange={() => this.onRadioChange(ageTypeRadio.type)}\n-                  checked={ageTypeRadio.type === ageType}/>\n-                <label>{ageTypeRadio.label}</label>\n-              </div>)}\n+            <div style={{width: '2.5rem'}}>\n+              <NumberInput style={styles.ageInput}\n+                min={minAge} max={defaultMaxAge}\n+                value={maxAge}\n+                onBlur={() => this.onMaxBlur()}\n+                onChange={(v) => this.onMaxChange(v)}/>\n             </div>\n           </div>\n-          // List of selectable criteria used for Race, Ethnicity, Gender and Sex\n-          : <div style={styles.selectList}>\n+          <div style={{marginLeft: '1rem'}}>\n+            {ageTypes.map((ageTypeRadio, a) => <div key={a} style={{display: 'inline-block', marginRight: '0.5rem'}}>\n+              <input type='radio' name='ageType'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY0MjAwMw=="}, "originalCommit": {"oid": "b7d9a3194a3fd021ddba71cd7743f1d8b2a7ae8c"}, "originalPosition": 323}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzY0NjUzOnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/list-search-v2/list-search-v2.component.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDoxMToyMVrOHPJVag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNToyODoxNFrOHPM8-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY0MzYyNg==", "bodyText": "nit: here as well can we use index instead of r", "url": "https://github.com/all-of-us/workbench/pull/3973#discussion_r485643626", "createdAt": "2020-09-09T14:11:21Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/cohort-search/list-search-v2/list-search-v2.component.tsx", "diffHunk": "@@ -378,78 +361,56 @@ export const ListSearchV2 = fp.flow(withCdrVersions(), withCurrentWorkspace())(\n               &nbsp;<Clickable style={styles.vocabLink}\n                                onMouseDown={() => this.trackEvent('Source Vocab Hyperlink')}\n                                onClick={() => this.setState({standardOnly: false})}>\n-              Return to source code\n-            </Clickable>.\n+                Return to source code\n+              </Clickable>.\n             </div>}\n-            {domain === DomainType.DRUG && <div style={styles.drugsText}>\n-              Your search may bring back brand names, generics and ingredients. Only ingredients may be added to your search criteria.\n-            </div>}\n-          </div>\n-          <div style={{...styles.helpText, textAlign: 'right'}}>\n             {domain === DomainType.DRUG && <div>\n-              <StyledAnchorTag\n-                 href='https://mor.nlm.nih.gov/RxNav/'\n-                 target='_blank'\n-                 rel='noopener noreferrer'>\n-                Explore\n-              </StyledAnchorTag>\n-              &nbsp;drugs by brand names outside of <AoU/>.\n+              Your search may bring back brand names, generics and ingredients. Only ingredients may be added to your search criteria.\n             </div>}\n-            {this.showDataBrowserLink && <div>\n-              Explore Source information on the&nbsp;\n-              <StyledAnchorTag\n-                 href={environment.publicUiUrl}\n-                 target='_blank'\n-                 rel='noopener noreferrer'>\n-                Data Browser.\n-              </StyledAnchorTag>\n+            {!!totalCount && <div>\n+              There are {totalCount.toLocaleString()} results{!!cdrVersion && <span> in {cdrVersion.name}</span>}.\n             </div>}\n           </div>\n         </div>\n         {!loading && !!displayData && <div style={styles.listContainer}>\n-          {!!displayData.length && <React.Fragment><table className='p-datatable' style={styles.table}>\n-            <thead className='p-datatable-thead'>\n-              <tr style={{height: '2rem'}}>\n-                <th style={{...styles.columnHeader, borderLeft: 0}}>Name</th>\n-                <th style={{...styles.columnHeader, width: '20%'}}>Code</th>\n-                <th style={{...styles.columnHeader, width: '10%'}}>Vocab</th>\n-                <th style={{...styles.columnHeader, width: '8%'}}>Count</th>\n-                <th style={{...styles.columnHeader, textAlign: 'center', width: '12%'}}>View Hierarchy</th>\n-              </tr>\n-            </thead>\n-          </table>\n-          <div style={{height: '15rem', overflowY: 'auto'}}>\n-            <table className='p-datatable' style={{...styles.table, ...styles.tableBody}}>\n-              <tbody className='p-datatable-tbody'>\n-              {displayData.map((row, r) => {\n-                const open = ingredients[row.id] && ingredients[row.id].open;\n-                const err = ingredients[row.id] && ingredients[row.id].error;\n-                return <React.Fragment key={r}>\n-                  {this.renderRow(row, false, r)}\n-                  {open && !err && ingredients[row.id].items.map((item, i) => {\n-                    return <React.Fragment key={i}>{this.renderRow(item, true, `${r}.${i}`)}</React.Fragment>;\n-                  })}\n-                  {open && err && <tr>\n-                    <td colSpan={5}>\n-                      <div style={{...styles.error, marginTop: 0}}>\n-                        <ClrIcon style={{margin: '0 0.5rem 0 0.25rem'}} className='is-solid' shape='exclamation-triangle' size='22'/>\n-                        Sorry, the request cannot be completed. Please try again or contact Support in the left hand navigation.\n-                      </div>\n-                    </td>\n-                  </tr>}\n-                </React.Fragment>;\n-              })}\n-            </tbody>\n+          {!!displayData.length && <React.Fragment>\n+            <table className='p-datatable' style={styles.table}>\n+              <thead className='p-datatable-thead'>\n+                <tr style={{height: '2rem'}}>\n+                  <th style={{...styles.columnHeader, borderLeft: 0}}>Name</th>\n+                  <th style={{...styles.columnHeader, width: '20%'}}>Code</th>\n+                  <th style={{...styles.columnHeader, width: '10%'}}>Vocab</th>\n+                  <th style={{...styles.columnHeader, width: '8%'}}>Count</th>\n+                  <th style={{...styles.columnHeader, textAlign: 'center', width: '12%'}}>View Hierarchy</th>\n+                </tr>\n+              </thead>\n             </table>\n-          </div>\n-        </React.Fragment>}\n+            <div style={{height: '15rem', overflowY: 'auto'}}>\n+              <table className='p-datatable' style={{...styles.table, ...styles.tableBody}}>\n+                <tbody className='p-datatable-tbody'>\n+                {displayData.map((row, r) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7d9a3194a3fd021ddba71cd7743f1d8b2a7ae8c"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwMjkwNw==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3973#discussion_r485702907", "createdAt": "2020-09-09T15:28:14Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/list-search-v2/list-search-v2.component.tsx", "diffHunk": "@@ -378,78 +361,56 @@ export const ListSearchV2 = fp.flow(withCdrVersions(), withCurrentWorkspace())(\n               &nbsp;<Clickable style={styles.vocabLink}\n                                onMouseDown={() => this.trackEvent('Source Vocab Hyperlink')}\n                                onClick={() => this.setState({standardOnly: false})}>\n-              Return to source code\n-            </Clickable>.\n+                Return to source code\n+              </Clickable>.\n             </div>}\n-            {domain === DomainType.DRUG && <div style={styles.drugsText}>\n-              Your search may bring back brand names, generics and ingredients. Only ingredients may be added to your search criteria.\n-            </div>}\n-          </div>\n-          <div style={{...styles.helpText, textAlign: 'right'}}>\n             {domain === DomainType.DRUG && <div>\n-              <StyledAnchorTag\n-                 href='https://mor.nlm.nih.gov/RxNav/'\n-                 target='_blank'\n-                 rel='noopener noreferrer'>\n-                Explore\n-              </StyledAnchorTag>\n-              &nbsp;drugs by brand names outside of <AoU/>.\n+              Your search may bring back brand names, generics and ingredients. Only ingredients may be added to your search criteria.\n             </div>}\n-            {this.showDataBrowserLink && <div>\n-              Explore Source information on the&nbsp;\n-              <StyledAnchorTag\n-                 href={environment.publicUiUrl}\n-                 target='_blank'\n-                 rel='noopener noreferrer'>\n-                Data Browser.\n-              </StyledAnchorTag>\n+            {!!totalCount && <div>\n+              There are {totalCount.toLocaleString()} results{!!cdrVersion && <span> in {cdrVersion.name}</span>}.\n             </div>}\n           </div>\n         </div>\n         {!loading && !!displayData && <div style={styles.listContainer}>\n-          {!!displayData.length && <React.Fragment><table className='p-datatable' style={styles.table}>\n-            <thead className='p-datatable-thead'>\n-              <tr style={{height: '2rem'}}>\n-                <th style={{...styles.columnHeader, borderLeft: 0}}>Name</th>\n-                <th style={{...styles.columnHeader, width: '20%'}}>Code</th>\n-                <th style={{...styles.columnHeader, width: '10%'}}>Vocab</th>\n-                <th style={{...styles.columnHeader, width: '8%'}}>Count</th>\n-                <th style={{...styles.columnHeader, textAlign: 'center', width: '12%'}}>View Hierarchy</th>\n-              </tr>\n-            </thead>\n-          </table>\n-          <div style={{height: '15rem', overflowY: 'auto'}}>\n-            <table className='p-datatable' style={{...styles.table, ...styles.tableBody}}>\n-              <tbody className='p-datatable-tbody'>\n-              {displayData.map((row, r) => {\n-                const open = ingredients[row.id] && ingredients[row.id].open;\n-                const err = ingredients[row.id] && ingredients[row.id].error;\n-                return <React.Fragment key={r}>\n-                  {this.renderRow(row, false, r)}\n-                  {open && !err && ingredients[row.id].items.map((item, i) => {\n-                    return <React.Fragment key={i}>{this.renderRow(item, true, `${r}.${i}`)}</React.Fragment>;\n-                  })}\n-                  {open && err && <tr>\n-                    <td colSpan={5}>\n-                      <div style={{...styles.error, marginTop: 0}}>\n-                        <ClrIcon style={{margin: '0 0.5rem 0 0.25rem'}} className='is-solid' shape='exclamation-triangle' size='22'/>\n-                        Sorry, the request cannot be completed. Please try again or contact Support in the left hand navigation.\n-                      </div>\n-                    </td>\n-                  </tr>}\n-                </React.Fragment>;\n-              })}\n-            </tbody>\n+          {!!displayData.length && <React.Fragment>\n+            <table className='p-datatable' style={styles.table}>\n+              <thead className='p-datatable-thead'>\n+                <tr style={{height: '2rem'}}>\n+                  <th style={{...styles.columnHeader, borderLeft: 0}}>Name</th>\n+                  <th style={{...styles.columnHeader, width: '20%'}}>Code</th>\n+                  <th style={{...styles.columnHeader, width: '10%'}}>Vocab</th>\n+                  <th style={{...styles.columnHeader, width: '8%'}}>Count</th>\n+                  <th style={{...styles.columnHeader, textAlign: 'center', width: '12%'}}>View Hierarchy</th>\n+                </tr>\n+              </thead>\n             </table>\n-          </div>\n-        </React.Fragment>}\n+            <div style={{height: '15rem', overflowY: 'auto'}}>\n+              <table className='p-datatable' style={{...styles.table, ...styles.tableBody}}>\n+                <tbody className='p-datatable-tbody'>\n+                {displayData.map((row, r) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY0MzYyNg=="}, "originalCommit": {"oid": "b7d9a3194a3fd021ddba71cd7743f1d8b2a7ae8c"}, "originalPosition": 170}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4037, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}