{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMzIwOTYw", "number": 3005, "title": "[RISK=LOW][No ticket] Removing null constraint from User table column creation and modified time ", "bodyText": "This will remove the not null constrain on the  columns creation and last_modified_time as well as removing the default values.\nThe reason behind this is that rather than populating creation_time with first_sign_in (which can be null as well as incorrect) or the current date time, we will spend effort in trying to find ways to populate the column with close to actual creation_date time for existing user (maybe checking when the got the email for registration or other way). In order to do that its better to have the values as null so it will be easier to find users that needs updating.\nThere is another ticket that is going to take care of populating the correct creation and last_modified_time for existing users https://precisionmedicineinitiative.atlassian.net/browse/RW-4278", "createdAt": "2020-01-15T20:22:28Z", "url": "https://github.com/all-of-us/workbench/pull/3005", "merged": true, "mergeCommit": {"oid": "94d1343d311a6676dfef776fb46601cc62f7c57c"}, "closed": true, "closedAt": "2020-01-16T21:17:51Z", "author": {"login": "NehaBroad"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6rOK-AH2gAyMzYzMzIwOTYwOmQ4Y2U2YjVkYzMzOGM5MWNiNTg1NmY4ZTc5MTdiMWM0NjgxMDZiYWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb7Au2ZAFqTM0NDIxNjMzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d8ce6b5dc338c91cb5856f8e7917b1c468106baf", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/d8ce6b5dc338c91cb5856f8e7917b1c468106baf", "committedDate": "2020-01-15T20:03:56Z", "message": "Making creation and modified time null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a05dd81f48a1a23e306a7d0ec4849cf45119fac7", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/a05dd81f48a1a23e306a7d0ec4849cf45119fac7", "committedDate": "2020-01-15T20:23:35Z", "message": "removing unused variable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNTM5MTAw", "url": "https://github.com/all-of-us/workbench/pull/3005#pullrequestreview-343539100", "createdAt": "2020-01-15T21:38:51Z", "commit": {"oid": "a05dd81f48a1a23e306a7d0ec4849cf45119fac7"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMTozODo1MlrOFeHRbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMTo0MzoxOFrOFeHYzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMDc1MA==", "bodyText": "why is this being set now?", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367120750", "createdAt": "2020-01-15T21:38:52Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/rdr/RdrExportServiceImpl.java", "diffHunk": "@@ -259,10 +267,11 @@ private RdrWorkspace toRdrWorkspace(DbWorkspace dbWorkspace) {\n     Map<String, FirecloudWorkspaceAccessEntry> aclMap = firecloudResponse.getAcl();\n     aclMap.forEach(\n         (email, access) -> {\n-          RdrWorkspaceUser workspaceUderMap = new RdrWorkspaceUser();\n-          workspaceUderMap.setUserId((int) userDao.findUserByUsername(email).getUserId());\n-          workspaceUderMap.setRole(RdrWorkspaceUser.RoleEnum.fromValue(access.getAccessLevel()));\n-          rdrWorkspace.addWorkspaceUsersItem(workspaceUderMap);\n+          RdrWorkspaceUser workspaceUserMap = new RdrWorkspaceUser();\n+          workspaceUserMap.setUserId((int) userDao.findUserByUsername(email).getUserId());\n+          workspaceUserMap.setRole(RdrWorkspaceUser.RoleEnum.fromValue(access.getAccessLevel()));\n+          workspaceUserMap.setStatus(RdrWorkspaceUser.StatusEnum.fromValue(\"ACTIVE\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05dd81f48a1a23e306a7d0ec4849cf45119fac7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMTkwNQ==", "bodyText": "are we ok with hitting the RDR multiple times with the same user account? As is, I believe a user will keep getting sent until they log in and their lat_modified_time gets set.", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367121905", "createdAt": "2020-01-15T21:41:35Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/RdrExportDao.java", "diffHunk": "@@ -12,7 +12,7 @@\n       nativeQuery = true,\n       value =\n           \"select u.user_id from user u LEFT JOIN rdr_export rdr on\"\n-              + \" u.user_id = rdr.export_id and rdr.entity_type = 1 where \"\n+              + \" u.user_id = rdr.export_id and rdr.entity_type = 1 where u.last_modified_time is null or \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05dd81f48a1a23e306a7d0ec4849cf45119fac7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMjI4NQ==", "bodyText": "I think its OK to leave the last modified time update sql. That value changes often and its not as important to ensure its integrity.", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367122285", "createdAt": "2020-01-15T21:42:28Z", "author": {"login": "ericsong"}, "path": "api/db/changelog/db.changelog-115-addColumn-user-create-modified.xml", "diffHunk": "@@ -7,17 +7,11 @@\n   <changeSet author=\"nsaxena\" id=\"db.changelog-115-addColumn-user-create-modified\">\n     <addColumn tableName=\"user\">\n       <column name=\"creation_time\" type=\"datetime\">\n-        <constraints nullable=\"false\" />\n+        <constraints nullable=\"true\" />\n       </column>\n       <column name=\"last_modified_time\" type=\"datetime\">\n-        <constraints nullable=\"false\"/>\n+        <constraints nullable=\"true\"/>\n       </column>\n     </addColumn>\n   </changeSet>\n-  <changeSet id=\"update creation time\" author=\"nsaxena\">\n-    <sql>update user set creation_time = first_sign_in_time</sql>\n-  </changeSet>\n-  <changeSet id=\"update modified time\" author=\"nsaxena\">\n-    <sql>update user set last_modified_time = first_sign_in_time</sql>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05dd81f48a1a23e306a7d0ec4849cf45119fac7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMjYzOQ==", "bodyText": "unrelated but we should try to avoid native queries wherever possible since our test db and production db are different.", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367122639", "createdAt": "2020-01-15T21:43:18Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/RdrExportDao.java", "diffHunk": "@@ -12,7 +12,7 @@\n       nativeQuery = true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05dd81f48a1a23e306a7d0ec4849cf45119fac7"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c24ec3f7abb92e694f03ea5c3d07d3c7296dfd7", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/1c24ec3f7abb92e694f03ea5c3d07d3c7296dfd7", "committedDate": "2020-01-15T22:19:07Z", "message": "Comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNTYwNzQ5", "url": "https://github.com/all-of-us/workbench/pull/3005#pullrequestreview-343560749", "createdAt": "2020-01-15T22:18:39Z", "commit": {"oid": "a05dd81f48a1a23e306a7d0ec4849cf45119fac7"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMjoxODozOVrOFeIRxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMjoyNzoyMFrOFeIfeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzNzIyMg==", "bodyText": "This feels misplaced. If the issue is that last_modified_time isn't getting updated when the user is saved, I think we should really be changing that value up within the UserServiceImpl.updateUserWithRetries method, which is where all user-modifying changes funnel through. And then this method should probably call updateUserWithRetries instead of userDao.save.", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367137222", "createdAt": "2020-01-15T22:18:39Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -386,6 +386,7 @@ public DbUser submitDataUseAgreement(\n     // TODO: Teardown/reconcile duplicated state between the user profile and DUA.\n     dbUser.setDataUseAgreementCompletionTime(timestamp);\n     dbUser.setDataUseAgreementSignedVersion(dataUseAgreementSignedVersion);\n+    dbUser.setLastModifiedTime(timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05dd81f48a1a23e306a7d0ec4849cf45119fac7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzODY5Mg==", "bodyText": "It's super surprising to see this conversion code take a null value from the DB and set it to the current timestamp in the RDR export call. I'm still kind of scratching my head about this... what's the motivation behind this choice? Is the RDR API unwilling to accept null values? Are they okay with receiving data about researchers whose creation time is constantly changing?\nThis absolutely needs some comment in the code explaining why we are making a somewhat-surprising choice.", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367138692", "createdAt": "2020-01-15T22:22:07Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/rdr/RdrExportServiceImpl.java", "diffHunk": "@@ -157,8 +157,16 @@ public void exportWorkspaces(List<Long> workspaceIds) {\n   private RdrResearcher toRdrResearcher(DbUser dbUser) {\n     RdrResearcher researcher = new RdrResearcher();\n     researcher.setUserId((int) dbUser.getUserId());\n-    researcher.setCreationTime(dbUser.getCreationTime().toLocalDateTime().atOffset(offset));\n-    researcher.setModifiedTime(dbUser.getLastModifiedTime().toLocalDateTime().atOffset(offset));\n+    if (null != researcher.getCreationTime()) {\n+      researcher.setCreationTime(dbUser.getCreationTime().toLocalDateTime().atOffset(offset));\n+    } else {\n+      researcher.setCreationTime(OffsetDateTime.now());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05dd81f48a1a23e306a7d0ec4849cf45119fac7"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0MDcyOA==", "bodyText": "[Prod safety comment] How sure are we that it's safe to modify an existing Liquibase change in-place? Will we have to do something manually to make sure the new version of this change gets applied in our test environment? What happens if someone tries to rollback this PR and/or #2948 on their own? (I suspect something will likely go wrong in our prod DB.) We should think of a clear way to signal to the oncall next week that this PR isn't atomically rollback-safe.", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367140728", "createdAt": "2020-01-15T22:27:20Z", "author": {"login": "gjuggler"}, "path": "api/db/changelog/db.changelog-115-addColumn-user-create-modified.xml", "diffHunk": "@@ -7,17 +7,14 @@\n   <changeSet author=\"nsaxena\" id=\"db.changelog-115-addColumn-user-create-modified\">\n     <addColumn tableName=\"user\">\n       <column name=\"creation_time\" type=\"datetime\">\n-        <constraints nullable=\"false\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c24ec3f7abb92e694f03ea5c3d07d3c7296dfd7"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53fc7024c273bd38dfa873c6bc8227fc8f5ab8b8", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/53fc7024c273bd38dfa873c6bc8227fc8f5ab8b8", "committedDate": "2020-01-16T15:17:30Z", "message": "update user lastModifiedTime on userRetries method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzOTk3NTMx", "url": "https://github.com/all-of-us/workbench/pull/3005#pullrequestreview-343997531", "createdAt": "2020-01-16T15:28:01Z", "commit": {"oid": "53fc7024c273bd38dfa873c6bc8227fc8f5ab8b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNToyODowMVrOFedVrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNToyODowMVrOFedVrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ4MjI4NQ==", "bodyText": "do we need a default value here?\nWe are already allowing nullable and we're copying over the first_sign_in_time (where it exists).\nThe integrity of last_modified_time is not as important but I still think its better to avoid setting it to a mix of values (first_sign_in_time and current timestamp).\nIf we do want to keep the default value, we can get rid of the nullable constraint.", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367482285", "createdAt": "2020-01-16T15:28:01Z", "author": {"login": "ericsong"}, "path": "api/db/changelog/db.changelog-115-addColumn-user-create-modified.xml", "diffHunk": "@@ -7,17 +7,14 @@\n   <changeSet author=\"nsaxena\" id=\"db.changelog-115-addColumn-user-create-modified\">\n     <addColumn tableName=\"user\">\n       <column name=\"creation_time\" type=\"datetime\">\n-        <constraints nullable=\"false\" />\n+        <constraints nullable=\"true\" />\n       </column>\n-      <column name=\"last_modified_time\" type=\"datetime\">\n-        <constraints nullable=\"false\"/>\n+      <column name=\"last_modified_time\" type=\"datetime\" defaultValueDate=\"CURRENT_TIMESTAMP\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53fc7024c273bd38dfa873c6bc8227fc8f5ab8b8"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee80bede4908d453fcbbdd3e6d3dcb99e7705197", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/ee80bede4908d453fcbbdd3e6d3dcb99e7705197", "committedDate": "2020-01-16T15:33:49Z", "message": "last_modified_time removing not null constraint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae4ef2a06dcd3c29ab48ebf3d801e4ea0d58064a", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/ae4ef2a06dcd3c29ab48ebf3d801e4ea0d58064a", "committedDate": "2020-01-16T16:55:38Z", "message": "PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c3738ff1558b2c3504bed9465306c3055a0a661", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/9c3738ff1558b2c3504bed9465306c3055a0a661", "committedDate": "2020-01-16T17:25:50Z", "message": "spotless and comments for future action"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94194a7b47da6ade2e0f2c24546ff8490381a50a", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/94194a7b47da6ade2e0f2c24546ff8490381a50a", "committedDate": "2020-01-16T17:44:35Z", "message": "spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MTczMTIz", "url": "https://github.com/all-of-us/workbench/pull/3005#pullrequestreview-344173123", "createdAt": "2020-01-16T19:50:18Z", "commit": {"oid": "94194a7b47da6ade2e0f2c24546ff8490381a50a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOTo1MDoxOFrOFelj6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOTo1MDoxOFrOFelj6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxNzAwMw==", "bodyText": "the user modifier function should only contain code to update the user object.\nOtherwise, everything else will be run multiple times with the retries. In this case, the data use agreement will be created several times.", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367617003", "createdAt": "2020-01-16T19:50:18Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -370,23 +372,28 @@ public DbUser createUser(\n   @Override\n   public DbUser submitDataUseAgreement(\n       DbUser dbUser, Integer dataUseAgreementSignedVersion, String initials) {\n-    // FIXME: this should not be hardcoded\n-    if (dataUseAgreementSignedVersion != CURRENT_DATA_USE_AGREEMENT_VERSION) {\n-      throw new BadRequestException(\"Data Use Agreement Version is not up to date\");\n-    }\n-    final Timestamp timestamp = new Timestamp(clock.instant().toEpochMilli());\n-    DbUserDataUseAgreement dataUseAgreement = new DbUserDataUseAgreement();\n-    dataUseAgreement.setDataUseAgreementSignedVersion(dataUseAgreementSignedVersion);\n-    dataUseAgreement.setUserId(dbUser.getUserId());\n-    dataUseAgreement.setUserFamilyName(dbUser.getFamilyName());\n-    dataUseAgreement.setUserGivenName(dbUser.getGivenName());\n-    dataUseAgreement.setUserInitials(initials);\n-    dataUseAgreement.setCompletionTime(timestamp);\n-    userDataUseAgreementDao.save(dataUseAgreement);\n-    // TODO: Teardown/reconcile duplicated state between the user profile and DUA.\n-    dbUser.setDataUseAgreementCompletionTime(timestamp);\n-    dbUser.setDataUseAgreementSignedVersion(dataUseAgreementSignedVersion);\n-    return userDao.save(dbUser);\n+\n+    return updateUserWithRetries(\n+        (user) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94194a7b47da6ade2e0f2c24546ff8490381a50a"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e670ce2812643ca161451560ab41fea1b544605d", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/e670ce2812643ca161451560ab41fea1b544605d", "committedDate": "2020-01-16T20:08:42Z", "message": "Fixing updateUserRetries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edb388edaf6d11bef75f9f92e39abf8fb4b92eab", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/edb388edaf6d11bef75f9f92e39abf8fb4b92eab", "committedDate": "2020-01-16T20:15:47Z", "message": "submit wiht updateUserRetires"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MjE2MzM4", "url": "https://github.com/all-of-us/workbench/pull/3005#pullrequestreview-344216338", "createdAt": "2020-01-16T21:07:38Z", "commit": {"oid": "edb388edaf6d11bef75f9f92e39abf8fb4b92eab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3678, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}