{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3ODI0MjQ0", "number": 3835, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMToyMDo0OFrOEV_y6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDoxNzozNFrOEXO84A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTAwNzc2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMToyMDo0OFrOG9Eqsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTowODozOFrOG9dirQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5Mjc4Nw==", "bodyText": "For better styling a 1rem marginLeft may be better.\nTOL - as this page is evolving it may make sense to take a step back and look at the markup and styling. We may be able to make some improvements in that area.", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r466692787", "createdAt": "2020-08-06T21:20:48Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,115 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: { [key: string]: FilterEntry },\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          margin: '0',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEwMDMzMw==", "bodyText": "Yes. I don't know if Lou has looked at it or not, but Shimon mentioned he was looking at the admin pages. As a casual UI developer, I'd really like a library of widgets that already have the right styling that I can just compose with.", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r467100333", "createdAt": "2020-08-07T15:08:38Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,115 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: { [key: string]: FilterEntry },\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          margin: '0',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5Mjc4Nw=="}, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTAxMzMxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMToyMjozNFrOG9Et4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNToxMDozNVrOG9dm_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5MzYwMQ==", "bodyText": "nit / personal preference - remove the border. If you do want to keep the border some padding may help.\nalso consider 1px solid ${colors.secondary} to combine the style onto one line (using backtics the formatting won't let me show the backtics)", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r466693601", "createdAt": "2020-08-06T21:22:34Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,115 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: { [key: string]: FilterEntry },\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          margin: '0',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: '1px solid',\n+          borderColor: colors.secondary,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEwMTQzNg==", "bodyText": "It's intended to be temporary, but yeah. Especially if there are several filter lists, I need to think about that. I just wanted a good way to make it clear this was all one widget (especially as it changes sizes).\nThere was at one point a desire to collapse and expand cards  instead of or in addition to filtering as well.", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r467101436", "createdAt": "2020-08-07T15:10:35Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,115 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: { [key: string]: FilterEntry },\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          margin: '0',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: '1px solid',\n+          borderColor: colors.secondary,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5MzYwMQ=="}, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzE5NjM2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo1OTo0NVrOG9Y6Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTowODowM1rOG9dhgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNDQ2Nw==", "bodyText": "This might be a bit cleaner / flatter than the nested flows\nfp.flow(\n    fp.map(fp.get('header.actionType')),\n    fp.join(' & '),\n    toTitleCase,\n    s => s || 'n/a')\n  (action.eventBundles);```", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r467024467", "createdAt": "2020-08-07T12:59:45Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -164,24 +177,28 @@ const EventBundleView = (props: {eventBundle: AuditEventBundle}) => {\n   </div>;\n };\n \n-const AuditActionCard = (props: { action: AuditAction }) => {\n-  const {action} = props;\n+const AuditActionCard = (props: { action: AuditAction, show: (AuditAction) => boolean }) => {\n+  const {action, show} = props;\n   // Something in the codegen is wonky here. the actionTime field is typed as a Date,\n   // but turns out to be a number for some reason here. In other contexts it appears\n   // to format itself happily though.\n   const timeString = moment(new Date(action.actionTime)).format('YYYY-MM-DD h:mm:ss');\n   const actionTypes = fp.flow(\n-    fp.map(fp.get('header.actionType')),\n-    s => s.join(' & '))\n+    fp.map(\n+      fp.flow(\n+        fp.get('header.actionType'),\n+        toTitleCase)),\n+    s => s ? s.join(' & ') : 'n/a')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEwMDAzMw==", "bodyText": "definitely.", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r467100033", "createdAt": "2020-08-07T15:08:03Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -164,24 +177,28 @@ const EventBundleView = (props: {eventBundle: AuditEventBundle}) => {\n   </div>;\n };\n \n-const AuditActionCard = (props: { action: AuditAction }) => {\n-  const {action} = props;\n+const AuditActionCard = (props: { action: AuditAction, show: (AuditAction) => boolean }) => {\n+  const {action, show} = props;\n   // Something in the codegen is wonky here. the actionTime field is typed as a Date,\n   // but turns out to be a number for some reason here. In other contexts it appears\n   // to format itself happily though.\n   const timeString = moment(new Date(action.actionTime)).format('YYYY-MM-DD h:mm:ss');\n   const actionTypes = fp.flow(\n-    fp.map(fp.get('header.actionType')),\n-    s => s.join(' & '))\n+    fp.map(\n+      fp.flow(\n+        fp.get('header.actionType'),\n+        toTitleCase)),\n+    s => s ? s.join(' & ') : 'n/a')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNDQ2Nw=="}, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzQ1NDEwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDoxMDowMlrOG9bX7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoyNDo1MVrOG-3nRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA2NDgxMw==", "bodyText": "This might be a bit cleaner with some additional desctructuring.\nAlso, keeping the code consistent with lodash may help future development and prevent confusion when reading through the code.\nI am not a fan of the double toPairs in my solution, but it does keep it in lodash/fp... I will think through it a bit more to see if there is a better solution.\nIf you don't want to do that - do take a look at the destructuring bit. It may be a bit cleaner than the array index references. The destructure should work with the native map code as well.\nfp.flow(\n          fp.toPairs,\n          fp.toPairs,\n          fp.map(([index, [id, entry]]: [number, [string, FilterEntry]]) =>\n            <CheckBox\n              key={index}\n              id={`${id}_active`}\n              onChange={() => toggleSelectedAction(id)}\n              label={entry.displayName}\n              checked={entry.isActive}\n              style={{margin: '0.25rem'}}/>)\n        )(activeActionTypes)}", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r467064813", "createdAt": "2020-08-07T14:10:02Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,115 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: { [key: string]: FilterEntry },\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          margin: '0',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: '1px solid',\n+          borderColor: colors.secondary,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+        {fp.entries(activeActionTypes).map((actionTypeValuePair: [string, FilterEntry], index) =>\n+          <CheckBox\n+            key={index}\n+            id={`${actionTypeValuePair[0]}_active`}\n+            onChange={() => toggleSelectedAction(actionTypeValuePair[0])}\n+            label={actionTypeValuePair[1].displayName}\n+            checked={actionTypeValuePair[1].isActive}\n+            style={{margin: '0.25rem'}}/>)}\n+        </div>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEwNTM1MA==", "bodyText": "This is definitely cleaner once I  wrapped my head around it. The double-pairing is awkward though. Is there a way to flatten the object into a list of (index, id, FilterEntry) first?", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r467105350", "createdAt": "2020-08-07T15:17:22Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,115 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: { [key: string]: FilterEntry },\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          margin: '0',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: '1px solid',\n+          borderColor: colors.secondary,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+        {fp.entries(activeActionTypes).map((actionTypeValuePair: [string, FilterEntry], index) =>\n+          <CheckBox\n+            key={index}\n+            id={`${actionTypeValuePair[0]}_active`}\n+            onChange={() => toggleSelectedAction(actionTypeValuePair[0])}\n+            label={actionTypeValuePair[1].displayName}\n+            checked={actionTypeValuePair[1].isActive}\n+            style={{margin: '0.25rem'}}/>)}\n+        </div>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA2NDgxMw=="}, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3NjA2OQ==", "bodyText": "It may be better to change what the structure of activeActionTypes looks like in AuditActionCardListView to make it easier to consume. That may be better for a future PR", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r468576069", "createdAt": "2020-08-11T13:24:51Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,115 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: { [key: string]: FilterEntry },\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          margin: '0',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: '1px solid',\n+          borderColor: colors.secondary,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+        {fp.entries(activeActionTypes).map((actionTypeValuePair: [string, FilterEntry], index) =>\n+          <CheckBox\n+            key={index}\n+            id={`${actionTypeValuePair[0]}_active`}\n+            onChange={() => toggleSelectedAction(actionTypeValuePair[0])}\n+            label={actionTypeValuePair[1].displayName}\n+            checked={actionTypeValuePair[1].isActive}\n+            style={{margin: '0.25rem'}}/>)}\n+        </div>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA2NDgxMw=="}, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzU3NTIyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo0MDo0OFrOG9ciVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDoyNTo0MVrOG9m23A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4Mzg2Mg==", "bodyText": "I know we differ in opinion on who should be responsible for conditional renders (parent or component).\nAfter searching the code base I only saw 2-3 instances of the show property, but many of the && < string (I believe that accurately indicates a conditional render)\nHere is a suggestion that may simplify things a bit / improve readability:\n  const filteredActions = fp.flow(\n    fp.toPairs,\n    fp.map(([index, action]) => shouldShowAction(action) && <AuditActionCard key={index} action={action}/>),\n    fp.without([false])\n  )(actions);\n\n  return (\n      <React.Fragment>\n        <ActionTypeFilter activeActionTypes={activeActionTypes}\n                          updateFilter={updateFilterCallback}\n        />\n        <div style={{margin: '1rem', width: '30rem'}}>\n          {filteredActions.length ? filteredActions : <div  style={infoMessageStyle}>All cards filtered out.</div>}\n        </div>\n      </React.Fragment>\n  );\nFollowed by a removal of the show prop in the AuditActionCard component", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r467083862", "createdAt": "2020-08-07T14:40:48Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,115 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: { [key: string]: FilterEntry },\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          margin: '0',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: '1px solid',\n+          borderColor: colors.secondary,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+        {fp.entries(activeActionTypes).map((actionTypeValuePair: [string, FilterEntry], index) =>\n+          <CheckBox\n+            key={index}\n+            id={`${actionTypeValuePair[0]}_active`}\n+            onChange={() => toggleSelectedAction(actionTypeValuePair[0])}\n+            label={actionTypeValuePair[1].displayName}\n+            checked={actionTypeValuePair[1].isActive}\n+            style={{margin: '0.25rem'}}/>)}\n+        </div>\n+    </React.Fragment>);\n+};\n+\n+export const AuditActionCardListView = (props: { actions:  AuditAction[]}) => {\n   const {actions} = props;\n+  const [actionTypes, setActionTypes] = useState([]);\n+  const [activeActionTypes, setActiveActionTypes] = useState({});\n+  const [actionTypeToCardCount, setActionTypeToCardCount] = useState({});\n+\n+  useEffect(() => {\n+    const result = (fp.flow(\n+      fp.flatMap((action: AuditAction) => action.eventBundles),\n+      fp.map((eventBundle) => eventBundle.header.actionType),\n+      fp.sortBy(a => a),\n+      fp.sortedUniq)(actions));\n+    setActionTypes(result);\n+  }, [actions]);\n+\n+  useEffect(() => {\n+    const actionTypeToShow: Object = {};\n+    fp.forEach((propertyPath: string) => {\n+      // TODO: figure out why I can't make this work using fp.set()\n+      actionTypeToShow[propertyPath] = {\n+        isActive: true,\n+        displayName: `${toTitleCase(propertyPath)} (${actionTypeToCardCount[propertyPath] || 0})`\n+      };\n+    })(actionTypes);\n+    setActiveActionTypes(actionTypeToShow);\n+  }, [actionTypes]);\n+\n+  useEffect(() => {\n+    const result: { [key: string]: number } = {};\n+    fp.forEach(action => {\n+      fp.forEach((actionType: string) => {\n+        result[actionType] = (result[actionType] || 0) + 1;\n+      })(getActionTypes(action));\n+      setActionTypeToCardCount(result);\n+    })(actions);\n+  }, [actions]);\n+\n+  const updateFilterCallback = (actionType: string, isActive: boolean) => {\n+    const newActiveActionTypes = fp.clone(activeActionTypes);\n+    newActiveActionTypes[actionType].isActive = isActive;\n+    setActiveActionTypes(newActiveActionTypes);\n+  };\n+\n+  function getActionTypes(action: AuditAction) {\n+    return fp.map((e: AuditEventBundle) => e.header.actionType)(action.eventBundles);\n+  }\n \n-  // Temporary workaround for sort order in the APIs, fixed in RW-4999.\n-  const actionsSorted = actions.sort((a, b) => {\n-    return new Date(b.actionTime).getTime() - new Date(a.actionTime).getTime();\n-  });\n+  // An action card should be shown only iff all action types\n+  // in its bundles are active (checked). Arguably this could be a simple boolean\n+  // property on the card, but then we'd have to manage that from a parent component\n+  // and use a callback, so it's not a big win.\n+  const shouldShowAction = (action: AuditAction) => {\n+    const cardActionTypes = getActionTypes(action);\n+    return fp.all((actionType: string) =>\n+        fp.get(`${actionType}.isActive`)(activeActionTypes))(cardActionTypes);\n+  };\n \n   return (\n-      <div style={{margin: '1rem', width: '30rem'}}>\n-        {actionsSorted.map((action, index) => (<AuditActionCard key={index} action={action}/>))}\n-      </div>\n+      <React.Fragment>\n+        <ActionTypeFilter activeActionTypes={activeActionTypes}\n+                          updateFilter={updateFilterCallback}\n+        />\n+        <div style={{margin: '1rem', width: '30rem'}}>\n+          {fp.any(shouldShowAction)(actions)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1Mjk1Ng==", "bodyText": "I agree that's cleaner here. I could rename show to dontBeNull and get the same idea across.", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r467252956", "createdAt": "2020-08-07T20:25:41Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,115 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: { [key: string]: FilterEntry },\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          margin: '0',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: '1px solid',\n+          borderColor: colors.secondary,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+        {fp.entries(activeActionTypes).map((actionTypeValuePair: [string, FilterEntry], index) =>\n+          <CheckBox\n+            key={index}\n+            id={`${actionTypeValuePair[0]}_active`}\n+            onChange={() => toggleSelectedAction(actionTypeValuePair[0])}\n+            label={actionTypeValuePair[1].displayName}\n+            checked={actionTypeValuePair[1].isActive}\n+            style={{margin: '0.25rem'}}/>)}\n+        </div>\n+    </React.Fragment>);\n+};\n+\n+export const AuditActionCardListView = (props: { actions:  AuditAction[]}) => {\n   const {actions} = props;\n+  const [actionTypes, setActionTypes] = useState([]);\n+  const [activeActionTypes, setActiveActionTypes] = useState({});\n+  const [actionTypeToCardCount, setActionTypeToCardCount] = useState({});\n+\n+  useEffect(() => {\n+    const result = (fp.flow(\n+      fp.flatMap((action: AuditAction) => action.eventBundles),\n+      fp.map((eventBundle) => eventBundle.header.actionType),\n+      fp.sortBy(a => a),\n+      fp.sortedUniq)(actions));\n+    setActionTypes(result);\n+  }, [actions]);\n+\n+  useEffect(() => {\n+    const actionTypeToShow: Object = {};\n+    fp.forEach((propertyPath: string) => {\n+      // TODO: figure out why I can't make this work using fp.set()\n+      actionTypeToShow[propertyPath] = {\n+        isActive: true,\n+        displayName: `${toTitleCase(propertyPath)} (${actionTypeToCardCount[propertyPath] || 0})`\n+      };\n+    })(actionTypes);\n+    setActiveActionTypes(actionTypeToShow);\n+  }, [actionTypes]);\n+\n+  useEffect(() => {\n+    const result: { [key: string]: number } = {};\n+    fp.forEach(action => {\n+      fp.forEach((actionType: string) => {\n+        result[actionType] = (result[actionType] || 0) + 1;\n+      })(getActionTypes(action));\n+      setActionTypeToCardCount(result);\n+    })(actions);\n+  }, [actions]);\n+\n+  const updateFilterCallback = (actionType: string, isActive: boolean) => {\n+    const newActiveActionTypes = fp.clone(activeActionTypes);\n+    newActiveActionTypes[actionType].isActive = isActive;\n+    setActiveActionTypes(newActiveActionTypes);\n+  };\n+\n+  function getActionTypes(action: AuditAction) {\n+    return fp.map((e: AuditEventBundle) => e.header.actionType)(action.eventBundles);\n+  }\n \n-  // Temporary workaround for sort order in the APIs, fixed in RW-4999.\n-  const actionsSorted = actions.sort((a, b) => {\n-    return new Date(b.actionTime).getTime() - new Date(a.actionTime).getTime();\n-  });\n+  // An action card should be shown only iff all action types\n+  // in its bundles are active (checked). Arguably this could be a simple boolean\n+  // property on the card, but then we'd have to manage that from a parent component\n+  // and use a callback, so it's not a big win.\n+  const shouldShowAction = (action: AuditAction) => {\n+    const cardActionTypes = getActionTypes(action);\n+    return fp.all((actionType: string) =>\n+        fp.get(`${actionType}.isActive`)(activeActionTypes))(cardActionTypes);\n+  };\n \n   return (\n-      <div style={{margin: '1rem', width: '30rem'}}>\n-        {actionsSorted.map((action, index) => (<AuditActionCard key={index} action={action}/>))}\n-      </div>\n+      <React.Fragment>\n+        <ActionTypeFilter activeActionTypes={activeActionTypes}\n+                          updateFilter={updateFilterCallback}\n+        />\n+        <div style={{margin: '1rem', width: '30rem'}}>\n+          {fp.any(shouldShowAction)(actions)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4Mzg2Mg=="}, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzU4OTM1OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo0NDoyN1rOG9crMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo0NDoyN1rOG9crMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4NjEzMA==", "bodyText": "Could this be done with a map - preventing the need to mutate the object?", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r467086130", "createdAt": "2020-08-07T14:44:27Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,115 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: { [key: string]: FilterEntry },\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          margin: '0',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: '1px solid',\n+          borderColor: colors.secondary,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+        {fp.entries(activeActionTypes).map((actionTypeValuePair: [string, FilterEntry], index) =>\n+          <CheckBox\n+            key={index}\n+            id={`${actionTypeValuePair[0]}_active`}\n+            onChange={() => toggleSelectedAction(actionTypeValuePair[0])}\n+            label={actionTypeValuePair[1].displayName}\n+            checked={actionTypeValuePair[1].isActive}\n+            style={{margin: '0.25rem'}}/>)}\n+        </div>\n+    </React.Fragment>);\n+};\n+\n+export const AuditActionCardListView = (props: { actions:  AuditAction[]}) => {\n   const {actions} = props;\n+  const [actionTypes, setActionTypes] = useState([]);\n+  const [activeActionTypes, setActiveActionTypes] = useState({});\n+  const [actionTypeToCardCount, setActionTypeToCardCount] = useState({});\n+\n+  useEffect(() => {\n+    const result = (fp.flow(\n+      fp.flatMap((action: AuditAction) => action.eventBundles),\n+      fp.map((eventBundle) => eventBundle.header.actionType),\n+      fp.sortBy(a => a),\n+      fp.sortedUniq)(actions));\n+    setActionTypes(result);\n+  }, [actions]);\n+\n+  useEffect(() => {\n+    const actionTypeToShow: Object = {};\n+    fp.forEach((propertyPath: string) => {\n+      // TODO: figure out why I can't make this work using fp.set()\n+      actionTypeToShow[propertyPath] = {\n+        isActive: true,\n+        displayName: `${toTitleCase(propertyPath)} (${actionTypeToCardCount[propertyPath] || 0})`\n+      };\n+    })(actionTypes);\n+    setActiveActionTypes(actionTypeToShow);\n+  }, [actionTypes]);\n+\n+  useEffect(() => {\n+    const result: { [key: string]: number } = {};\n+    fp.forEach(action => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzU5NTE5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo0NjowN1rOG9cu0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo0NjowN1rOG9cu0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4NzA1OA==", "bodyText": "Could this be a map rather than a forEach with object mutation?", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r467087058", "createdAt": "2020-08-07T14:46:07Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,115 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: { [key: string]: FilterEntry },\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          margin: '0',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: '1px solid',\n+          borderColor: colors.secondary,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+        {fp.entries(activeActionTypes).map((actionTypeValuePair: [string, FilterEntry], index) =>\n+          <CheckBox\n+            key={index}\n+            id={`${actionTypeValuePair[0]}_active`}\n+            onChange={() => toggleSelectedAction(actionTypeValuePair[0])}\n+            label={actionTypeValuePair[1].displayName}\n+            checked={actionTypeValuePair[1].isActive}\n+            style={{margin: '0.25rem'}}/>)}\n+        </div>\n+    </React.Fragment>);\n+};\n+\n+export const AuditActionCardListView = (props: { actions:  AuditAction[]}) => {\n   const {actions} = props;\n+  const [actionTypes, setActionTypes] = useState([]);\n+  const [activeActionTypes, setActiveActionTypes] = useState({});\n+  const [actionTypeToCardCount, setActionTypeToCardCount] = useState({});\n+\n+  useEffect(() => {\n+    const result = (fp.flow(\n+      fp.flatMap((action: AuditAction) => action.eventBundles),\n+      fp.map((eventBundle) => eventBundle.header.actionType),\n+      fp.sortBy(a => a),\n+      fp.sortedUniq)(actions));\n+    setActionTypes(result);\n+  }, [actions]);\n+\n+  useEffect(() => {\n+    const actionTypeToShow: Object = {};\n+    fp.forEach((propertyPath: string) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzYxMDcwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo1MDowM1rOG9c4Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNToxOTozM1rOG9d7RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4OTUwMw==", "bodyText": "Given that this effect runs on the prop change, and there is only one prop, it may be possible to eliminate all of the useEffect code and just compute all of the needed values. This would eliminate all 'state' in the react sense.", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r467089503", "createdAt": "2020-08-07T14:50:03Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,115 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: { [key: string]: FilterEntry },\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          margin: '0',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: '1px solid',\n+          borderColor: colors.secondary,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+        {fp.entries(activeActionTypes).map((actionTypeValuePair: [string, FilterEntry], index) =>\n+          <CheckBox\n+            key={index}\n+            id={`${actionTypeValuePair[0]}_active`}\n+            onChange={() => toggleSelectedAction(actionTypeValuePair[0])}\n+            label={actionTypeValuePair[1].displayName}\n+            checked={actionTypeValuePair[1].isActive}\n+            style={{margin: '0.25rem'}}/>)}\n+        </div>\n+    </React.Fragment>);\n+};\n+\n+export const AuditActionCardListView = (props: { actions:  AuditAction[]}) => {\n   const {actions} = props;\n+  const [actionTypes, setActionTypes] = useState([]);\n+  const [activeActionTypes, setActiveActionTypes] = useState({});\n+  const [actionTypeToCardCount, setActionTypeToCardCount] = useState({});\n+\n+  useEffect(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEwNjYyOA==", "bodyText": "Oh, right. I don't a \"prop change handler\" because that's just render(), aka the body of my function element.", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r467106628", "createdAt": "2020-08-07T15:19:33Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,115 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: { [key: string]: FilterEntry },\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          margin: '0',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: '1px solid',\n+          borderColor: colors.secondary,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+        {fp.entries(activeActionTypes).map((actionTypeValuePair: [string, FilterEntry], index) =>\n+          <CheckBox\n+            key={index}\n+            id={`${actionTypeValuePair[0]}_active`}\n+            onChange={() => toggleSelectedAction(actionTypeValuePair[0])}\n+            label={actionTypeValuePair[1].displayName}\n+            checked={actionTypeValuePair[1].isActive}\n+            style={{margin: '0.25rem'}}/>)}\n+        </div>\n+    </React.Fragment>);\n+};\n+\n+export const AuditActionCardListView = (props: { actions:  AuditAction[]}) => {\n   const {actions} = props;\n+  const [actionTypes, setActionTypes] = useState([]);\n+  const [activeActionTypes, setActiveActionTypes] = useState({});\n+  const [actionTypeToCardCount, setActionTypeToCardCount] = useState({});\n+\n+  useEffect(() => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4OTUwMw=="}, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODY1NzAwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDoyODozOVrOG9m7bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDoxMjoxMlrOG-5u5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1NDEyNQ==", "bodyText": "This is giving me all zero values somehow.", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r467254125", "createdAt": "2020-08-07T20:28:39Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,127 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+interface FilterState {\n+  [key: string]: FilterEntry;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: FilterState,\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          marginLeft: '0',\n+          padding: '2px',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: `1px solid ${colors.secondary}`,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+          {\n+            fp.flow(\n+              fp.toPairs,\n+              fp.toPairs,\n+              fp.map(([index, [id, entry]]: [number, [string, FilterEntry]]) =>\n+                    <CheckBox\n+                        key={index}\n+                        id={`${id}_active`}\n+                        onChange={() => toggleSelectedAction(id)}\n+                        label={entry.displayName}\n+                        checked={entry.isActive}\n+                        style={{margin: '0.25rem'}}/>)\n+            )(activeActionTypes)\n+          }\n+        </div>\n+    </React.Fragment>);\n+};\n+\n+export const AuditActionCardListView = (props: { actions:  AuditAction[]}) => {\n+  console.log('render AuditActionCardListView');\n   const {actions} = props;\n+  const initialFilterState: FilterState = {};\n+  const [activeActionTypes, setActiveActionTypes] = useState(initialFilterState);\n+\n+  // FIXME: handle situation when one card has the same action multiple times\n+  const actionTypeToCardCount: {[key: string]: number} = fp.flow(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db335f19e89d3d471df6ce066d30c81323edbf8"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzNTgyMw==", "bodyText": "I am not seeing this issue - I am seeing results.  Is this happening on all queries?", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r468135823", "createdAt": "2020-08-10T19:35:42Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,127 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+interface FilterState {\n+  [key: string]: FilterEntry;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: FilterState,\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          marginLeft: '0',\n+          padding: '2px',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: `1px solid ${colors.secondary}`,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+          {\n+            fp.flow(\n+              fp.toPairs,\n+              fp.toPairs,\n+              fp.map(([index, [id, entry]]: [number, [string, FilterEntry]]) =>\n+                    <CheckBox\n+                        key={index}\n+                        id={`${id}_active`}\n+                        onChange={() => toggleSelectedAction(id)}\n+                        label={entry.displayName}\n+                        checked={entry.isActive}\n+                        style={{margin: '0.25rem'}}/>)\n+            )(activeActionTypes)\n+          }\n+        </div>\n+    </React.Fragment>);\n+};\n+\n+export const AuditActionCardListView = (props: { actions:  AuditAction[]}) => {\n+  console.log('render AuditActionCardListView');\n   const {actions} = props;\n+  const initialFilterState: FilterState = {};\n+  const [activeActionTypes, setActiveActionTypes] = useState(initialFilterState);\n+\n+  // FIXME: handle situation when one card has the same action multiple times\n+  const actionTypeToCardCount: {[key: string]: number} = fp.flow(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1NDEyNQ=="}, "originalCommit": {"oid": "1db335f19e89d3d471df6ce066d30c81323edbf8"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1MTY0Mg==", "bodyText": "No, the issue is when a card has multiple eventBundles with the same action type. Frequently happens with Collaborate when you share a workspace with multiple people. We end up counting that card several times for the repeated action type.\nI think we just need to map the cards to tuples of unique action types, and then use that to build the map. I know how to do that part, but I'm not sure how to transform [[A, B, C], [A, A, A], [D]] into {A: 2, B: 1, C: 1, D: 1}.", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r468551642", "createdAt": "2020-08-11T12:46:01Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,127 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+interface FilterState {\n+  [key: string]: FilterEntry;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: FilterState,\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          marginLeft: '0',\n+          padding: '2px',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: `1px solid ${colors.secondary}`,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+          {\n+            fp.flow(\n+              fp.toPairs,\n+              fp.toPairs,\n+              fp.map(([index, [id, entry]]: [number, [string, FilterEntry]]) =>\n+                    <CheckBox\n+                        key={index}\n+                        id={`${id}_active`}\n+                        onChange={() => toggleSelectedAction(id)}\n+                        label={entry.displayName}\n+                        checked={entry.isActive}\n+                        style={{margin: '0.25rem'}}/>)\n+            )(activeActionTypes)\n+          }\n+        </div>\n+    </React.Fragment>);\n+};\n+\n+export const AuditActionCardListView = (props: { actions:  AuditAction[]}) => {\n+  console.log('render AuditActionCardListView');\n   const {actions} = props;\n+  const initialFilterState: FilterState = {};\n+  const [activeActionTypes, setActiveActionTypes] = useState(initialFilterState);\n+\n+  // FIXME: handle situation when one card has the same action multiple times\n+  const actionTypeToCardCount: {[key: string]: number} = fp.flow(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1NDEyNQ=="}, "originalCommit": {"oid": "1db335f19e89d3d471df6ce066d30c81323edbf8"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3NjU3Nw==", "bodyText": "I think I resolved this with:\n  const getActionTypes = (action: AuditAction) => fp.flow(\n    fp.map((e: AuditEventBundle) => e.header.actionType),\n    fp.uniq\n  )(action.eventBundles);\nI pushed the change.", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r468576577", "createdAt": "2020-08-11T13:25:32Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,127 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+interface FilterState {\n+  [key: string]: FilterEntry;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: FilterState,\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          marginLeft: '0',\n+          padding: '2px',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: `1px solid ${colors.secondary}`,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+          {\n+            fp.flow(\n+              fp.toPairs,\n+              fp.toPairs,\n+              fp.map(([index, [id, entry]]: [number, [string, FilterEntry]]) =>\n+                    <CheckBox\n+                        key={index}\n+                        id={`${id}_active`}\n+                        onChange={() => toggleSelectedAction(id)}\n+                        label={entry.displayName}\n+                        checked={entry.isActive}\n+                        style={{margin: '0.25rem'}}/>)\n+            )(activeActionTypes)\n+          }\n+        </div>\n+    </React.Fragment>);\n+};\n+\n+export const AuditActionCardListView = (props: { actions:  AuditAction[]}) => {\n+  console.log('render AuditActionCardListView');\n   const {actions} = props;\n+  const initialFilterState: FilterState = {};\n+  const [activeActionTypes, setActiveActionTypes] = useState(initialFilterState);\n+\n+  // FIXME: handle situation when one card has the same action multiple times\n+  const actionTypeToCardCount: {[key: string]: number} = fp.flow(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1NDEyNQ=="}, "originalCommit": {"oid": "1db335f19e89d3d471df6ce066d30c81323edbf8"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYxMDc5MA==", "bodyText": "Oh I see. Once we have the unique count per card, we can just flatten that and count each one. I was thinking we had to   keep track of the original tuples somehow. Thanks.", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r468610790", "createdAt": "2020-08-11T14:12:12Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,127 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+interface FilterState {\n+  [key: string]: FilterEntry;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: FilterState,\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          marginLeft: '0',\n+          padding: '2px',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: `1px solid ${colors.secondary}`,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+          {\n+            fp.flow(\n+              fp.toPairs,\n+              fp.toPairs,\n+              fp.map(([index, [id, entry]]: [number, [string, FilterEntry]]) =>\n+                    <CheckBox\n+                        key={index}\n+                        id={`${id}_active`}\n+                        onChange={() => toggleSelectedAction(id)}\n+                        label={entry.displayName}\n+                        checked={entry.isActive}\n+                        style={{margin: '0.25rem'}}/>)\n+            )(activeActionTypes)\n+          }\n+        </div>\n+    </React.Fragment>);\n+};\n+\n+export const AuditActionCardListView = (props: { actions:  AuditAction[]}) => {\n+  console.log('render AuditActionCardListView');\n   const {actions} = props;\n+  const initialFilterState: FilterState = {};\n+  const [activeActionTypes, setActiveActionTypes] = useState(initialFilterState);\n+\n+  // FIXME: handle situation when one card has the same action multiple times\n+  const actionTypeToCardCount: {[key: string]: number} = fp.flow(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1NDEyNQ=="}, "originalCommit": {"oid": "1db335f19e89d3d471df6ce066d30c81323edbf8"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzk3NjY0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDoxNzozNFrOG-6HOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDoyOTo0MFrOG-6rOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYxNzAxOQ==", "bodyText": "Is there a slicker way to do this? In Java, there's a builder pattern that will let you do Builder.from(originalObj).withId(2).build with no  mutations.", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r468617019", "createdAt": "2020-08-11T14:17:34Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,109 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+interface FilterState {\n+  [key: string]: FilterEntry;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: FilterState,\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          marginLeft: '0',\n+          padding: '2px',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: `1px solid ${colors.secondary}`,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+          {\n+            fp.flow(\n+              fp.toPairs,\n+              fp.toPairs,\n+              fp.map(([index, [id, entry]]: [number, [string, FilterEntry]]) =>\n+                    <CheckBox\n+                        key={index}\n+                        id={`${id}_active`}\n+                        onChange={() => toggleSelectedAction(id)}\n+                        label={entry.displayName}\n+                        checked={entry.isActive}\n+                        style={{margin: '0.25rem'}}/>)\n+            )(activeActionTypes)\n+          }\n+        </div>\n+    </React.Fragment>);\n+};\n+\n+export const AuditActionCardListView = (props: { actions:  AuditAction[]}) => {\n   const {actions} = props;\n+  const [activeActionTypes, setActiveActionTypes] = useState({});\n+\n+  const getActionTypes = (action: AuditAction) => fp.flow(\n+    fp.map((e: AuditEventBundle) => e.header.actionType),\n+    fp.uniq\n+  )(action.eventBundles);\n+\n+  useEffect(() => {\n+    const actionTypeToShow = fp.flow(\n+      fp.flatMap(getActionTypes),\n+      fp.countBy(fp.identity),\n+      fp.toPairs,\n+      fp.map(([actionName, count]: [string, number]) => [actionName, {\n+        isActive: true,\n+        displayName: `${toTitleCase(actionName)} (${count || 0})`\n+      }]),\n+      fp.fromPairs\n+    )(actions);\n+\n+    setActiveActionTypes(actionTypeToShow);\n+  }, [actions]);\n+\n+  const updateFilterCallback = (actionType: string, isActive: boolean) => {\n+    const newActiveActionTypes = fp.clone(activeActionTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d4a5af0a0449d862538910a719ac2e5877c8df"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyMDA3NA==", "bodyText": "Missed this comment when I approved - let me take a look", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r468620074", "createdAt": "2020-08-11T14:21:23Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,109 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+interface FilterState {\n+  [key: string]: FilterEntry;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: FilterState,\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          marginLeft: '0',\n+          padding: '2px',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: `1px solid ${colors.secondary}`,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+          {\n+            fp.flow(\n+              fp.toPairs,\n+              fp.toPairs,\n+              fp.map(([index, [id, entry]]: [number, [string, FilterEntry]]) =>\n+                    <CheckBox\n+                        key={index}\n+                        id={`${id}_active`}\n+                        onChange={() => toggleSelectedAction(id)}\n+                        label={entry.displayName}\n+                        checked={entry.isActive}\n+                        style={{margin: '0.25rem'}}/>)\n+            )(activeActionTypes)\n+          }\n+        </div>\n+    </React.Fragment>);\n+};\n+\n+export const AuditActionCardListView = (props: { actions:  AuditAction[]}) => {\n   const {actions} = props;\n+  const [activeActionTypes, setActiveActionTypes] = useState({});\n+\n+  const getActionTypes = (action: AuditAction) => fp.flow(\n+    fp.map((e: AuditEventBundle) => e.header.actionType),\n+    fp.uniq\n+  )(action.eventBundles);\n+\n+  useEffect(() => {\n+    const actionTypeToShow = fp.flow(\n+      fp.flatMap(getActionTypes),\n+      fp.countBy(fp.identity),\n+      fp.toPairs,\n+      fp.map(([actionName, count]: [string, number]) => [actionName, {\n+        isActive: true,\n+        displayName: `${toTitleCase(actionName)} (${count || 0})`\n+      }]),\n+      fp.fromPairs\n+    )(actions);\n+\n+    setActiveActionTypes(actionTypeToShow);\n+  }, [actions]);\n+\n+  const updateFilterCallback = (actionType: string, isActive: boolean) => {\n+    const newActiveActionTypes = fp.clone(activeActionTypes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYxNzAxOQ=="}, "originalCommit": {"oid": "30d4a5af0a0449d862538910a719ac2e5877c8df"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyNDQ0NA==", "bodyText": "It's just a curiosity, so no worries.", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r468624444", "createdAt": "2020-08-11T14:27:16Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,109 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+interface FilterState {\n+  [key: string]: FilterEntry;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: FilterState,\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          marginLeft: '0',\n+          padding: '2px',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: `1px solid ${colors.secondary}`,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+          {\n+            fp.flow(\n+              fp.toPairs,\n+              fp.toPairs,\n+              fp.map(([index, [id, entry]]: [number, [string, FilterEntry]]) =>\n+                    <CheckBox\n+                        key={index}\n+                        id={`${id}_active`}\n+                        onChange={() => toggleSelectedAction(id)}\n+                        label={entry.displayName}\n+                        checked={entry.isActive}\n+                        style={{margin: '0.25rem'}}/>)\n+            )(activeActionTypes)\n+          }\n+        </div>\n+    </React.Fragment>);\n+};\n+\n+export const AuditActionCardListView = (props: { actions:  AuditAction[]}) => {\n   const {actions} = props;\n+  const [activeActionTypes, setActiveActionTypes] = useState({});\n+\n+  const getActionTypes = (action: AuditAction) => fp.flow(\n+    fp.map((e: AuditEventBundle) => e.header.actionType),\n+    fp.uniq\n+  )(action.eventBundles);\n+\n+  useEffect(() => {\n+    const actionTypeToShow = fp.flow(\n+      fp.flatMap(getActionTypes),\n+      fp.countBy(fp.identity),\n+      fp.toPairs,\n+      fp.map(([actionName, count]: [string, number]) => [actionName, {\n+        isActive: true,\n+        displayName: `${toTitleCase(actionName)} (${count || 0})`\n+      }]),\n+      fp.fromPairs\n+    )(actions);\n+\n+    setActiveActionTypes(actionTypeToShow);\n+  }, [actions]);\n+\n+  const updateFilterCallback = (actionType: string, isActive: boolean) => {\n+    const newActiveActionTypes = fp.clone(activeActionTypes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYxNzAxOQ=="}, "originalCommit": {"oid": "30d4a5af0a0449d862538910a719ac2e5877c8df"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyNjIzNA==", "bodyText": "I saw you merged, but if you are looking for an alternative this should work:\n const updateFilterCallback = (actionType: string, isActive: boolean) => {\n    setActiveActionTypes(fp.set([actionType, 'isActive'], isActive, activeActionTypes));\n  };", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r468626234", "createdAt": "2020-08-11T14:29:40Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,109 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+interface FilterState {\n+  [key: string]: FilterEntry;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: FilterState,\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          marginLeft: '0',\n+          padding: '2px',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: `1px solid ${colors.secondary}`,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+          {\n+            fp.flow(\n+              fp.toPairs,\n+              fp.toPairs,\n+              fp.map(([index, [id, entry]]: [number, [string, FilterEntry]]) =>\n+                    <CheckBox\n+                        key={index}\n+                        id={`${id}_active`}\n+                        onChange={() => toggleSelectedAction(id)}\n+                        label={entry.displayName}\n+                        checked={entry.isActive}\n+                        style={{margin: '0.25rem'}}/>)\n+            )(activeActionTypes)\n+          }\n+        </div>\n+    </React.Fragment>);\n+};\n+\n+export const AuditActionCardListView = (props: { actions:  AuditAction[]}) => {\n   const {actions} = props;\n+  const [activeActionTypes, setActiveActionTypes] = useState({});\n+\n+  const getActionTypes = (action: AuditAction) => fp.flow(\n+    fp.map((e: AuditEventBundle) => e.header.actionType),\n+    fp.uniq\n+  )(action.eventBundles);\n+\n+  useEffect(() => {\n+    const actionTypeToShow = fp.flow(\n+      fp.flatMap(getActionTypes),\n+      fp.countBy(fp.identity),\n+      fp.toPairs,\n+      fp.map(([actionName, count]: [string, number]) => [actionName, {\n+        isActive: true,\n+        displayName: `${toTitleCase(actionName)} (${count || 0})`\n+      }]),\n+      fp.fromPairs\n+    )(actions);\n+\n+    setActiveActionTypes(actionTypeToShow);\n+  }, [actions]);\n+\n+  const updateFilterCallback = (actionType: string, isActive: boolean) => {\n+    const newActiveActionTypes = fp.clone(activeActionTypes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYxNzAxOQ=="}, "originalCommit": {"oid": "30d4a5af0a0449d862538910a719ac2e5877c8df"}, "originalPosition": 164}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2473, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}