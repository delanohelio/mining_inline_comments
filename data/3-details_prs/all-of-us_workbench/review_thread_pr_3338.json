{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3ODcwNDA2", "number": 3338, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoxNjoyM1rODuKd7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDowNTo0OVrODwmxdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzMyNTg5OnYy", "diffSide": "RIGHT", "path": "api/db/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoxNjoyM1rOGAA4lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoxNjoyM1rOGAA4lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2NzY2OQ==", "bodyText": "There's still an issue with this block, at least accorrding to IntelliJ's gradle plugin", "url": "https://github.com/all-of-us/workbench/pull/3338#discussion_r402667669", "createdAt": "2020-04-03T00:16:23Z", "author": {"login": "jaycarlton"}, "path": "api/db/build.gradle", "diffHunk": "@@ -11,16 +11,16 @@ apply plugin: 'org.liquibase.gradle'\n \n def db_host = System.getenv(\"DB_HOST\") ?: \"db\"\n def db_port = System.getenv(\"DB_PORT\") ?: \"3306\"\n+def liquibase_username = \"liquibase\"\n def liquibase_password = System.getenv(\"LIQUIBASE_DB_PASSWORD\") ?: \"lb-notasecret\"\n \n liquibase {\n     activities {\n         main {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2215ddb4db40664e2e11accc722759b2dcb8d6"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzMyOTU2OnYy", "diffSide": "RIGHT", "path": "api/db/gradle-wrapper.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoxODowNlrOGAA6jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoxODowNlrOGAA6jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2ODE3NA==", "bodyText": "I did this to make the db/build.gradle project importable in IntelliJ. I'm not sure this is the right way to do it or if I still need it. #dev-productivity thread.", "url": "https://github.com/all-of-us/workbench/pull/3338#discussion_r402668174", "createdAt": "2020-04-03T00:18:06Z", "author": {"login": "jaycarlton"}, "path": "api/db/gradle-wrapper.properties", "diffHunk": "@@ -0,0 +1,6 @@\n+#Wed Apr 01 12:34:20 EDT 2020\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-4.6-all.zip", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2215ddb4db40664e2e11accc722759b2dcb8d6"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzMzMTc1OnYy", "diffSide": "RIGHT", "path": "api/db/run-migrations.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoxOTowM1rOGAA7ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjowOTozNlrOGBfMPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2ODQ3NA==", "bodyText": "I want to break this script up into one that builds the database and one that runs a liquibase command. Even better if we can drive liquibase without Bash or Ruby.", "url": "https://github.com/all-of-us/workbench/pull/3338#discussion_r402668474", "createdAt": "2020-04-03T00:19:03Z", "author": {"login": "jaycarlton"}, "path": "api/db/run-migrations.sh", "diffHunk": "@@ -22,7 +16,9 @@ trap finish EXIT\n envsubst < \"$(dirname \"${BASH_SOURCE}\")/create_db.sql\" > $CREATE_DB_FILE\n \n echo \"Creating database if it does not exist...\"\n+# This command is run regardless, and we rely on the commands in CREATE_DB_FILE being idempotent.\n mysql -h ${DB_HOST} --port ${DB_PORT} -u root -p${MYSQL_ROOT_PASSWORD} < ${CREATE_DB_FILE}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2215ddb4db40664e2e11accc722759b2dcb8d6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxMjc5OA==", "bodyText": "Pushed to a later task.", "url": "https://github.com/all-of-us/workbench/pull/3338#discussion_r404212798", "createdAt": "2020-04-06T16:09:36Z", "author": {"login": "jaycarlton"}, "path": "api/db/run-migrations.sh", "diffHunk": "@@ -22,7 +16,9 @@ trap finish EXIT\n envsubst < \"$(dirname \"${BASH_SOURCE}\")/create_db.sql\" > $CREATE_DB_FILE\n \n echo \"Creating database if it does not exist...\"\n+# This command is run regardless, and we rely on the commands in CREATE_DB_FILE being idempotent.\n mysql -h ${DB_HOST} --port ${DB_PORT} -u root -p${MYSQL_ROOT_PASSWORD} < ${CREATE_DB_FILE}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2ODQ3NA=="}, "originalCommit": {"oid": "7a2215ddb4db40664e2e11accc722759b2dcb8d6"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzMzMjk0OnYy", "diffSide": "RIGHT", "path": "api/gradle/wrapper/gradle-wrapper.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoxOTo0MlrOGAA8bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoxOTo0MlrOGAA8bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2ODY1Mg==", "bodyText": "I don't actually know how this file works, but I don't remember making this change...", "url": "https://github.com/all-of-us/workbench/pull/3338#discussion_r402668652", "createdAt": "2020-04-03T00:19:42Z", "author": {"login": "jaycarlton"}, "path": "api/gradle/wrapper/gradle-wrapper.properties", "diffHunk": "@@ -1,6 +1,6 @@\n-#Thu May 10 14:42:28 CDT 2018\n+#Wed Apr 01 12:34:20 EDT 2020", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2215ddb4db40664e2e11accc722759b2dcb8d6"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzMzNTE3OnYy", "diffSide": "RIGHT", "path": "api/libproject/devstart.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoyMTowMlrOGAA9qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoyMTowMlrOGAA9qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2ODk3MQ==", "bodyText": "This was a pain to write, and Zeus help me if I want another option. The idea is that exactly one is provided.\nAlso, I want a general liquibase command. I'll do that tomorrow just for fun.", "url": "https://github.com/all-of-us/workbench/pull/3338#discussion_r402668971", "createdAt": "2020-04-03T00:21:02Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -634,6 +634,50 @@ def run_local_all_migrations()\n   :fn => ->() { run_local_all_migrations() }\n })\n \n+def rollback_db(cmd_name, *args)\n+  puts \"in rollback_db. cmd_name: #{cmd_name} args: #{args}\"\n+  ensure_docker_sync\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.add_typed_option(\n+      \"--count=[count]\",\n+      Integer,\n+      ->(opts, c) { opts.count = c},\n+      \"Count of changesets to roll back from end.\")\n+\n+  op.add_typed_option(\n+      \"--tag [tag]\",\n+      String,\n+      ->(opts, t) { opts.tag = t},\n+      \"Liquibase changeset tag to roll back to.\")\n+  op.add_validator ->(opts) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2215ddb4db40664e2e11accc722759b2dcb8d6"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzMzOTA2OnYy", "diffSide": "RIGHT", "path": "api/db/run-migrations.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoyMzowM1rOGAA_3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoyMzowM1rOGAA_3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2OTUzMw==", "bodyText": "We actually don't need to provide this explicitly (yet), since the only activity we have is main. That would simplify things considerably, though I don't want to sacrifice generality. If other activities are added later, the default is to run all of them, so semantics will change if we leave this out.\nIt would be more robust to set main as the default as well, if that's supported.", "url": "https://github.com/all-of-us/workbench/pull/3338#discussion_r402669533", "createdAt": "2020-04-03T00:23:03Z", "author": {"login": "jaycarlton"}, "path": "api/db/run-migrations.sh", "diffHunk": "@@ -2,15 +2,9 @@\n set -xeuo pipefail\n IFS=$'\\n\\t'\n \n-activity=\"-PrunList=$1\"\n-if [ -z ${2+x} ]\n-then\n-    context=\"\"\n-else\n-    context=\"-Pcontexts=$2\"\n-fi\n-\n-# Ruby is not installed in our dev container and this script is short, so bash is fine.\n+liquibaseCommand=\"${1-update}\"\n+runList=\"-PrunList=${2-main}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2215ddb4db40664e2e11accc722759b2dcb8d6"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzM0MTg2OnYy", "diffSide": "RIGHT", "path": "api/db/run-migrations.sh", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoyNDoyOFrOGABBag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoyNDoyOFrOGABBag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2OTkzMA==", "bodyText": "This is really gross, but it works. I.e. we are handing the liquibase plugin an empty command value, and it doesn't break anything.\nThis script is way past my Bash expertise/tolerance. If I need to keep it, I want to port to Ruby or Python, or even pure Gradle.", "url": "https://github.com/all-of-us/workbench/pull/3338#discussion_r402669930", "createdAt": "2020-04-03T00:24:28Z", "author": {"login": "jaycarlton"}, "path": "api/db/run-migrations.sh", "diffHunk": "@@ -2,15 +2,9 @@\n set -xeuo pipefail\n IFS=$'\\n\\t'\n \n-activity=\"-PrunList=$1\"\n-if [ -z ${2+x} ]\n-then\n-    context=\"\"\n-else\n-    context=\"-Pcontexts=$2\"\n-fi\n-\n-# Ruby is not installed in our dev container and this script is short, so bash is fine.\n+liquibaseCommand=\"${1-update}\"\n+runList=\"-PrunList=${2-main}\"\n+liquibaseArgs=\"${3--PliquibaseCommandValue=}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2215ddb4db40664e2e11accc722759b2dcb8d6"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzQxOTY3OnYy", "diffSide": "RIGHT", "path": "api/libproject/devstart.rb", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMTowNzo0OFrOGABvUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMTowNzo0OFrOGABvUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4MTY4MQ==", "bodyText": "Perhaps a more specific flag name, e.g. --to-tag ; currently it's slightly ambiguous as to whether it's rolling back TO this tag, or rolling back JUST this tag.", "url": "https://github.com/all-of-us/workbench/pull/3338#discussion_r402681681", "createdAt": "2020-04-03T01:07:48Z", "author": {"login": "calbach"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -634,6 +634,50 @@ def run_local_all_migrations()\n   :fn => ->() { run_local_all_migrations() }\n })\n \n+def rollback_db(cmd_name, *args)\n+  puts \"in rollback_db. cmd_name: #{cmd_name} args: #{args}\"\n+  ensure_docker_sync\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.add_typed_option(\n+      \"--count=[count]\",\n+      Integer,\n+      ->(opts, c) { opts.count = c},\n+      \"Count of changesets to roll back from end.\")\n+\n+  op.add_typed_option(\n+      \"--tag [tag]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2215ddb4db40664e2e11accc722759b2dcb8d6"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTA2MTY1OnYy", "diffSide": "RIGHT", "path": "api/db/run-migrations.sh", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDoyMjo1NlrOGDbAgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDoyMjo1NlrOGDbAgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0MTQxMA==", "bodyText": "Arguably, I don't strictly need to make changes here anymore now that I'm calling the gradle task directly in run_liquibase. However, this does give us some flexibility later on to run arbitrary tasks without doing the user confirmation.", "url": "https://github.com/all-of-us/workbench/pull/3338#discussion_r406241410", "createdAt": "2020-04-09T14:22:56Z", "author": {"login": "jaycarlton"}, "path": "api/db/run-migrations.sh", "diffHunk": "@@ -2,15 +2,9 @@\n set -xeuo pipefail\n IFS=$'\\n\\t'\n \n-activity=\"-PrunList=$1\"\n-if [ -z ${2+x} ]\n-then\n-    context=\"\"\n-else\n-    context=\"-Pcontexts=$2\"\n-fi\n-\n-# Ruby is not installed in our dev container and this script is short, so bash is fine.\n+liquibaseCommand=\"${1-update}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c2a3159963a5b6552b9b019e0924b73ab011c38"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTI5NzI3OnYy", "diffSide": "LEFT", "path": "api/db-cdr/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToxNTo1OVrOGDdWCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToxNTo1OVrOGDdWCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI3OTY5MA==", "bodyText": "Keeping this line in place breaks IntelliJ's gradle plugin. specifically, it can't be added to the Gradle pane as a project.", "url": "https://github.com/all-of-us/workbench/pull/3338#discussion_r406279690", "createdAt": "2020-04-09T15:15:59Z", "author": {"login": "jaycarlton"}, "path": "api/db-cdr/build.gradle", "diffHunk": "@@ -51,6 +51,5 @@ liquibase {\n             username \"liquibase\"\n             password \"${liquibase_password}\"\n         }\n-        runList = project.ext.runList", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c2a3159963a5b6552b9b019e0924b73ab011c38"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjkxODUxOnYy", "diffSide": "RIGHT", "path": "api/libproject/devstart.rb", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1NjoxOVrOGDtGRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1NjoxOVrOGDtGRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzNzc5Nw==", "bodyText": "spelling", "url": "https://github.com/all-of-us/workbench/pull/3338#discussion_r406537797", "createdAt": "2020-04-09T23:56:19Z", "author": {"login": "calbach"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -634,6 +634,116 @@ def run_local_all_migrations()\n   :fn => ->() { run_local_all_migrations() }\n })\n \n+def liquibase_gradlew_command(verification_command, argument, run_list)\n+  verificion_full_cmd = %W{../gradlew #{verification_command} -PrunList=#{run_list}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e95e115ed36ffe583c08d98cb874a7e36ab103fc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjkyMzg5OnYy", "diffSide": "RIGHT", "path": "api/libproject/devstart.rb", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1OToxMFrOGDtJXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjo0ODowM1rOGD5lSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzODU5MQ==", "bodyText": "\ud83d\ude21", "url": "https://github.com/all-of-us/workbench/pull/3338#discussion_r406538591", "createdAt": "2020-04-09T23:59:10Z", "author": {"login": "calbach"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -634,6 +634,116 @@ def run_local_all_migrations()\n   :fn => ->() { run_local_all_migrations() }\n })\n \n+def liquibase_gradlew_command(verification_command, argument, run_list)\n+  verificion_full_cmd = %W{../gradlew #{verification_command} -PrunList=#{run_list}}\n+  unless argument.nil? || argument.empty?\n+    verificion_full_cmd << argument\n+  end\n+  verificion_full_cmd\n+end\n+\n+# Run a liqibase command against the specified project. Where possible, show SQL\n+# statements and ask user for verification.\n+def run_liquibase(cmd_name, *args)\n+  command_to_sql = {\n+      'changelogSync' => 'changelogSyncSQL',\n+      'markNextChangesetRan' => 'markNextChangesetRanSQL',\n+      'rollback' => 'rollbackSQL',\n+      'rollbackCount' => 'rollbackCountSQL',\n+      'rollbackToDate' => 'rollbackToDateSQL',\n+      'update' => 'updateSQL',\n+      'updateCount' => 'updateCountSql',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e95e115ed36ffe583c08d98cb874a7e36ab103fc"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0MjM0NA==", "bodyText": "So it's documented as updateCountSql officially, but the task in the plugin is updateCountSql.\nupdateCountSql - Writes SQL to apply the next <liquibaseCommandValue> change sets to STDOUT.\n\nI'll add a comment bemoaning this situation.", "url": "https://github.com/all-of-us/workbench/pull/3338#discussion_r406742344", "createdAt": "2020-04-10T12:48:03Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -634,6 +634,116 @@ def run_local_all_migrations()\n   :fn => ->() { run_local_all_migrations() }\n })\n \n+def liquibase_gradlew_command(verification_command, argument, run_list)\n+  verificion_full_cmd = %W{../gradlew #{verification_command} -PrunList=#{run_list}}\n+  unless argument.nil? || argument.empty?\n+    verificion_full_cmd << argument\n+  end\n+  verificion_full_cmd\n+end\n+\n+# Run a liqibase command against the specified project. Where possible, show SQL\n+# statements and ask user for verification.\n+def run_liquibase(cmd_name, *args)\n+  command_to_sql = {\n+      'changelogSync' => 'changelogSyncSQL',\n+      'markNextChangesetRan' => 'markNextChangesetRanSQL',\n+      'rollback' => 'rollbackSQL',\n+      'rollbackCount' => 'rollbackCountSQL',\n+      'rollbackToDate' => 'rollbackToDateSQL',\n+      'update' => 'updateSQL',\n+      'updateCount' => 'updateCountSql',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzODU5MQ=="}, "originalCommit": {"oid": "e95e115ed36ffe583c08d98cb874a7e36ab103fc"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjkyNDg5OnYy", "diffSide": "RIGHT", "path": "api/libproject/devstart.rb", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1OTo0OVrOGDtKAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1OTo0OVrOGDtKAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzODc1NQ==", "bodyText": "argument", "url": "https://github.com/all-of-us/workbench/pull/3338#discussion_r406538755", "createdAt": "2020-04-09T23:59:49Z", "author": {"login": "calbach"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -634,6 +634,116 @@ def run_local_all_migrations()\n   :fn => ->() { run_local_all_migrations() }\n })\n \n+def liquibase_gradlew_command(verification_command, argument, run_list)\n+  verificion_full_cmd = %W{../gradlew #{verification_command} -PrunList=#{run_list}}\n+  unless argument.nil? || argument.empty?\n+    verificion_full_cmd << argument\n+  end\n+  verificion_full_cmd\n+end\n+\n+# Run a liqibase command against the specified project. Where possible, show SQL\n+# statements and ask user for verification.\n+def run_liquibase(cmd_name, *args)\n+  command_to_sql = {\n+      'changelogSync' => 'changelogSyncSQL',\n+      'markNextChangesetRan' => 'markNextChangesetRanSQL',\n+      'rollback' => 'rollbackSQL',\n+      'rollbackCount' => 'rollbackCountSQL',\n+      'rollbackToDate' => 'rollbackToDateSQL',\n+      'update' => 'updateSQL',\n+      'updateCount' => 'updateCountSql',\n+      'updateToTag' => 'updateToTagSQL'\n+  }\n+\n+  common = Common.new\n+  ensure_docker(cmd_name, args)\n+\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.add_typed_option(\n+      \"--command [command]\",\n+      String,\n+      ->(opts, c) { opts.command = c},\n+      \"Liquibase command, e.g. update, rollback, tag, validate. See \"+\n+          \"https://www.liquibase.org/documentation/command_line.html\")\n+  op.add_typed_option(\n+      \"--argument [argument]\",\n+      String,\n+      ->(opts, a) { opts.argument = a},\n+      \"Liquibase command argument, e.g. count or tag value\")\n+  op.add_typed_option(\n+        \"--run-list [run_list]\",\n+        String,\n+        ->(opts, rl) { opts.run_list = rl },\n+        \"Liquibase runList, a comma-separated list of activities in the liquibase task\")\n+  op.add_typed_option(\n+        '--project [project]',\n+        String,\n+        ->(opts, p) { opts.project = p },\n+        'AoU environment GCP project full name. Used to pick MySQL instance & creadentials.'\n+  )\n+  op.add_validator ->(opts) {\n+    if opts.command.nil? || opts.command.empty?\n+      raise ArgumentError.new(\"command is required\")\n+    end\n+  }\n+  op.parse.validate\n+\n+  # Currently there's only one activity (main), and leaving out the runList arugment causes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e95e115ed36ffe583c08d98cb874a7e36ab103fc"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjkyODg1OnYy", "diffSide": "RIGHT", "path": "api/libproject/devstart.rb", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDowMjoxMVrOGDtMaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODoyODoxMlrOGECQxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzOTM2OA==", "bodyText": "I believe it executes a subprocess, presumably it didn't say cd not found, rather it didn't have any effect?", "url": "https://github.com/all-of-us/workbench/pull/3338#discussion_r406539368", "createdAt": "2020-04-10T00:02:11Z", "author": {"login": "calbach"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -634,6 +634,116 @@ def run_local_all_migrations()\n   :fn => ->() { run_local_all_migrations() }\n })\n \n+def liquibase_gradlew_command(verification_command, argument, run_list)\n+  verificion_full_cmd = %W{../gradlew #{verification_command} -PrunList=#{run_list}}\n+  unless argument.nil? || argument.empty?\n+    verificion_full_cmd << argument\n+  end\n+  verificion_full_cmd\n+end\n+\n+# Run a liqibase command against the specified project. Where possible, show SQL\n+# statements and ask user for verification.\n+def run_liquibase(cmd_name, *args)\n+  command_to_sql = {\n+      'changelogSync' => 'changelogSyncSQL',\n+      'markNextChangesetRan' => 'markNextChangesetRanSQL',\n+      'rollback' => 'rollbackSQL',\n+      'rollbackCount' => 'rollbackCountSQL',\n+      'rollbackToDate' => 'rollbackToDateSQL',\n+      'update' => 'updateSQL',\n+      'updateCount' => 'updateCountSql',\n+      'updateToTag' => 'updateToTagSQL'\n+  }\n+\n+  common = Common.new\n+  ensure_docker(cmd_name, args)\n+\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.add_typed_option(\n+      \"--command [command]\",\n+      String,\n+      ->(opts, c) { opts.command = c},\n+      \"Liquibase command, e.g. update, rollback, tag, validate. See \"+\n+          \"https://www.liquibase.org/documentation/command_line.html\")\n+  op.add_typed_option(\n+      \"--argument [argument]\",\n+      String,\n+      ->(opts, a) { opts.argument = a},\n+      \"Liquibase command argument, e.g. count or tag value\")\n+  op.add_typed_option(\n+        \"--run-list [run_list]\",\n+        String,\n+        ->(opts, rl) { opts.run_list = rl },\n+        \"Liquibase runList, a comma-separated list of activities in the liquibase task\")\n+  op.add_typed_option(\n+        '--project [project]',\n+        String,\n+        ->(opts, p) { opts.project = p },\n+        'AoU environment GCP project full name. Used to pick MySQL instance & creadentials.'\n+  )\n+  op.add_validator ->(opts) {\n+    if opts.command.nil? || opts.command.empty?\n+      raise ArgumentError.new(\"command is required\")\n+    end\n+  }\n+  op.parse.validate\n+\n+  # Currently there's only one activity (main), and leaving out the runList arugment causes\n+  # it to run that activity. However, that's not because it's detected as default or primary, but\n+  # leaving out the runList is equivalent to specifying all of the activities to run in unspecified\n+  # order.\n+  # https://github.com/liquibase/liquibase-gradle-plugin#3-configuring-the-plugin\n+  if op.opts.run_list.nil? || op.opts.run_list.empty?\n+    run_list = \"main\"\n+  else\n+    run_list = op.opts.run_list\n+  end\n+\n+  if op.opts.argument.nil? || op.opts.argument.empty?\n+    # It's safe to pass the '-PliquibaseCommand=' by itself, but it's not very clean\n+    argument = ''\n+  else\n+    argument = \"-PliquibaseCommandValue=#{op.opts.argument}\"\n+  end\n+\n+  if op.opts.project.nil? || op.opts.project.empty?\n+    op.opts.project = 'local'\n+  end\n+\n+  context = GcloudContextV2.new(op)\n+  context.validate\n+\n+  with_optional_cloud_proxy_and_db(context, nil, 'sa-key.json') do |gcc|\n+    common.status('inside with_optional_cloud_proxy_and_db')\n+    common.status(\"project: #{gcc.project}, account: #{gcc.account}, creds_file: #{gcc.creds_file}, dir: #{Dir.pwd}\")\n+    command = op.opts.command\n+\n+    Dir.chdir('db') # 'cd' isn't available to run inline apparently", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e95e115ed36ffe583c08d98cb874a7e36ab103fc"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3MDU3OA==", "bodyText": "If I change that line to common.run_inline(%W{cd db}), I get\nproject: local, account: jay.carlton@pmi-ops.org, creds_file: , dir: /w/api\n+ cd db\nTraceback (most recent call last):\n\t8: from /w/api/project.rb:6:in `<main>'\n\t7: from /w/aou-utils/workbench.rb:61:in `handle_argv_or_die'\n\t6: from /w/aou-utils/utils/common.rb:86:in `handle_or_die'\n\t5: from /w/api/libproject/devstart.rb:745:in `block in <top (required)>'\n\t4: from /w/api/libproject/devstart.rb:717:in `run_liquibase'\n\t3: from /w/api/libproject/devstart.rb:2117:in `with_optional_cloud_proxy_and_db'\n\t2: from /w/api/libproject/devstart.rb:723:in `block in run_liquibase'\n\t1: from /w/aou-utils/utils/common.rb:157:in `run_inline'\n/w/aou-utils/utils/common.rb:157:in `spawn': No such file or directory - cd (Errno::ENOENT)", "url": "https://github.com/all-of-us/workbench/pull/3338#discussion_r406770578", "createdAt": "2020-04-10T14:00:59Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -634,6 +634,116 @@ def run_local_all_migrations()\n   :fn => ->() { run_local_all_migrations() }\n })\n \n+def liquibase_gradlew_command(verification_command, argument, run_list)\n+  verificion_full_cmd = %W{../gradlew #{verification_command} -PrunList=#{run_list}}\n+  unless argument.nil? || argument.empty?\n+    verificion_full_cmd << argument\n+  end\n+  verificion_full_cmd\n+end\n+\n+# Run a liqibase command against the specified project. Where possible, show SQL\n+# statements and ask user for verification.\n+def run_liquibase(cmd_name, *args)\n+  command_to_sql = {\n+      'changelogSync' => 'changelogSyncSQL',\n+      'markNextChangesetRan' => 'markNextChangesetRanSQL',\n+      'rollback' => 'rollbackSQL',\n+      'rollbackCount' => 'rollbackCountSQL',\n+      'rollbackToDate' => 'rollbackToDateSQL',\n+      'update' => 'updateSQL',\n+      'updateCount' => 'updateCountSql',\n+      'updateToTag' => 'updateToTagSQL'\n+  }\n+\n+  common = Common.new\n+  ensure_docker(cmd_name, args)\n+\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.add_typed_option(\n+      \"--command [command]\",\n+      String,\n+      ->(opts, c) { opts.command = c},\n+      \"Liquibase command, e.g. update, rollback, tag, validate. See \"+\n+          \"https://www.liquibase.org/documentation/command_line.html\")\n+  op.add_typed_option(\n+      \"--argument [argument]\",\n+      String,\n+      ->(opts, a) { opts.argument = a},\n+      \"Liquibase command argument, e.g. count or tag value\")\n+  op.add_typed_option(\n+        \"--run-list [run_list]\",\n+        String,\n+        ->(opts, rl) { opts.run_list = rl },\n+        \"Liquibase runList, a comma-separated list of activities in the liquibase task\")\n+  op.add_typed_option(\n+        '--project [project]',\n+        String,\n+        ->(opts, p) { opts.project = p },\n+        'AoU environment GCP project full name. Used to pick MySQL instance & creadentials.'\n+  )\n+  op.add_validator ->(opts) {\n+    if opts.command.nil? || opts.command.empty?\n+      raise ArgumentError.new(\"command is required\")\n+    end\n+  }\n+  op.parse.validate\n+\n+  # Currently there's only one activity (main), and leaving out the runList arugment causes\n+  # it to run that activity. However, that's not because it's detected as default or primary, but\n+  # leaving out the runList is equivalent to specifying all of the activities to run in unspecified\n+  # order.\n+  # https://github.com/liquibase/liquibase-gradle-plugin#3-configuring-the-plugin\n+  if op.opts.run_list.nil? || op.opts.run_list.empty?\n+    run_list = \"main\"\n+  else\n+    run_list = op.opts.run_list\n+  end\n+\n+  if op.opts.argument.nil? || op.opts.argument.empty?\n+    # It's safe to pass the '-PliquibaseCommand=' by itself, but it's not very clean\n+    argument = ''\n+  else\n+    argument = \"-PliquibaseCommandValue=#{op.opts.argument}\"\n+  end\n+\n+  if op.opts.project.nil? || op.opts.project.empty?\n+    op.opts.project = 'local'\n+  end\n+\n+  context = GcloudContextV2.new(op)\n+  context.validate\n+\n+  with_optional_cloud_proxy_and_db(context, nil, 'sa-key.json') do |gcc|\n+    common.status('inside with_optional_cloud_proxy_and_db')\n+    common.status(\"project: #{gcc.project}, account: #{gcc.account}, creds_file: #{gcc.creds_file}, dir: #{Dir.pwd}\")\n+    command = op.opts.command\n+\n+    Dir.chdir('db') # 'cd' isn't available to run inline apparently", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzOTM2OA=="}, "originalCommit": {"oid": "e95e115ed36ffe583c08d98cb874a7e36ab103fc"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4NDU1MA==", "bodyText": "Well.. consider me confused as well", "url": "https://github.com/all-of-us/workbench/pull/3338#discussion_r406884550", "createdAt": "2020-04-10T18:28:12Z", "author": {"login": "calbach"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -634,6 +634,116 @@ def run_local_all_migrations()\n   :fn => ->() { run_local_all_migrations() }\n })\n \n+def liquibase_gradlew_command(verification_command, argument, run_list)\n+  verificion_full_cmd = %W{../gradlew #{verification_command} -PrunList=#{run_list}}\n+  unless argument.nil? || argument.empty?\n+    verificion_full_cmd << argument\n+  end\n+  verificion_full_cmd\n+end\n+\n+# Run a liqibase command against the specified project. Where possible, show SQL\n+# statements and ask user for verification.\n+def run_liquibase(cmd_name, *args)\n+  command_to_sql = {\n+      'changelogSync' => 'changelogSyncSQL',\n+      'markNextChangesetRan' => 'markNextChangesetRanSQL',\n+      'rollback' => 'rollbackSQL',\n+      'rollbackCount' => 'rollbackCountSQL',\n+      'rollbackToDate' => 'rollbackToDateSQL',\n+      'update' => 'updateSQL',\n+      'updateCount' => 'updateCountSql',\n+      'updateToTag' => 'updateToTagSQL'\n+  }\n+\n+  common = Common.new\n+  ensure_docker(cmd_name, args)\n+\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.add_typed_option(\n+      \"--command [command]\",\n+      String,\n+      ->(opts, c) { opts.command = c},\n+      \"Liquibase command, e.g. update, rollback, tag, validate. See \"+\n+          \"https://www.liquibase.org/documentation/command_line.html\")\n+  op.add_typed_option(\n+      \"--argument [argument]\",\n+      String,\n+      ->(opts, a) { opts.argument = a},\n+      \"Liquibase command argument, e.g. count or tag value\")\n+  op.add_typed_option(\n+        \"--run-list [run_list]\",\n+        String,\n+        ->(opts, rl) { opts.run_list = rl },\n+        \"Liquibase runList, a comma-separated list of activities in the liquibase task\")\n+  op.add_typed_option(\n+        '--project [project]',\n+        String,\n+        ->(opts, p) { opts.project = p },\n+        'AoU environment GCP project full name. Used to pick MySQL instance & creadentials.'\n+  )\n+  op.add_validator ->(opts) {\n+    if opts.command.nil? || opts.command.empty?\n+      raise ArgumentError.new(\"command is required\")\n+    end\n+  }\n+  op.parse.validate\n+\n+  # Currently there's only one activity (main), and leaving out the runList arugment causes\n+  # it to run that activity. However, that's not because it's detected as default or primary, but\n+  # leaving out the runList is equivalent to specifying all of the activities to run in unspecified\n+  # order.\n+  # https://github.com/liquibase/liquibase-gradle-plugin#3-configuring-the-plugin\n+  if op.opts.run_list.nil? || op.opts.run_list.empty?\n+    run_list = \"main\"\n+  else\n+    run_list = op.opts.run_list\n+  end\n+\n+  if op.opts.argument.nil? || op.opts.argument.empty?\n+    # It's safe to pass the '-PliquibaseCommand=' by itself, but it's not very clean\n+    argument = ''\n+  else\n+    argument = \"-PliquibaseCommandValue=#{op.opts.argument}\"\n+  end\n+\n+  if op.opts.project.nil? || op.opts.project.empty?\n+    op.opts.project = 'local'\n+  end\n+\n+  context = GcloudContextV2.new(op)\n+  context.validate\n+\n+  with_optional_cloud_proxy_and_db(context, nil, 'sa-key.json') do |gcc|\n+    common.status('inside with_optional_cloud_proxy_and_db')\n+    common.status(\"project: #{gcc.project}, account: #{gcc.account}, creds_file: #{gcc.creds_file}, dir: #{Dir.pwd}\")\n+    command = op.opts.command\n+\n+    Dir.chdir('db') # 'cd' isn't available to run inline apparently", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzOTM2OA=="}, "originalCommit": {"oid": "e95e115ed36ffe583c08d98cb874a7e36ab103fc"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjkzMTMxOnYy", "diffSide": "RIGHT", "path": "api/libproject/devstart.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDowMzozNlrOGDtNxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDowMzozNlrOGDtNxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzOTcxNg==", "bodyText": "thanks, not a bad solution", "url": "https://github.com/all-of-us/workbench/pull/3338#discussion_r406539716", "createdAt": "2020-04-10T00:03:36Z", "author": {"login": "calbach"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1999,6 +2109,19 @@ def with_cloud_proxy_and_db(gcc, service_account = nil, key_file = nil)\n   end\n end\n \n+def with_optional_cloud_proxy_and_db(gcc, service_account = nil, key_file = nil)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e95e115ed36ffe583c08d98cb874a7e36ab103fc"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjkzNDkyOnYy", "diffSide": "RIGHT", "path": "api/libproject/devstart.rb", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDowNTo0OVrOGDtP2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjo0OToyN1rOGD5nLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0MDI0OQ==", "bodyText": "Does this duplicate the effect that gradle.properties is having? I assume that's just setting a default", "url": "https://github.com/all-of-us/workbench/pull/3338#discussion_r406540249", "createdAt": "2020-04-10T00:05:49Z", "author": {"login": "calbach"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -634,6 +634,116 @@ def run_local_all_migrations()\n   :fn => ->() { run_local_all_migrations() }\n })\n \n+def liquibase_gradlew_command(verification_command, argument, run_list)\n+  verificion_full_cmd = %W{../gradlew #{verification_command} -PrunList=#{run_list}}\n+  unless argument.nil? || argument.empty?\n+    verificion_full_cmd << argument\n+  end\n+  verificion_full_cmd\n+end\n+\n+# Run a liqibase command against the specified project. Where possible, show SQL\n+# statements and ask user for verification.\n+def run_liquibase(cmd_name, *args)\n+  command_to_sql = {\n+      'changelogSync' => 'changelogSyncSQL',\n+      'markNextChangesetRan' => 'markNextChangesetRanSQL',\n+      'rollback' => 'rollbackSQL',\n+      'rollbackCount' => 'rollbackCountSQL',\n+      'rollbackToDate' => 'rollbackToDateSQL',\n+      'update' => 'updateSQL',\n+      'updateCount' => 'updateCountSql',\n+      'updateToTag' => 'updateToTagSQL'\n+  }\n+\n+  common = Common.new\n+  ensure_docker(cmd_name, args)\n+\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.add_typed_option(\n+      \"--command [command]\",\n+      String,\n+      ->(opts, c) { opts.command = c},\n+      \"Liquibase command, e.g. update, rollback, tag, validate. See \"+\n+          \"https://www.liquibase.org/documentation/command_line.html\")\n+  op.add_typed_option(\n+      \"--argument [argument]\",\n+      String,\n+      ->(opts, a) { opts.argument = a},\n+      \"Liquibase command argument, e.g. count or tag value\")\n+  op.add_typed_option(\n+        \"--run-list [run_list]\",\n+        String,\n+        ->(opts, rl) { opts.run_list = rl },\n+        \"Liquibase runList, a comma-separated list of activities in the liquibase task\")\n+  op.add_typed_option(\n+        '--project [project]',\n+        String,\n+        ->(opts, p) { opts.project = p },\n+        'AoU environment GCP project full name. Used to pick MySQL instance & creadentials.'\n+  )\n+  op.add_validator ->(opts) {\n+    if opts.command.nil? || opts.command.empty?\n+      raise ArgumentError.new(\"command is required\")\n+    end\n+  }\n+  op.parse.validate\n+\n+  # Currently there's only one activity (main), and leaving out the runList arugment causes\n+  # it to run that activity. However, that's not because it's detected as default or primary, but\n+  # leaving out the runList is equivalent to specifying all of the activities to run in unspecified\n+  # order.\n+  # https://github.com/liquibase/liquibase-gradle-plugin#3-configuring-the-plugin\n+  if op.opts.run_list.nil? || op.opts.run_list.empty?\n+    run_list = \"main\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e95e115ed36ffe583c08d98cb874a7e36ab103fc"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0MjgzMA==", "bodyText": "Oh good point. I just added the gradle.properties to shut up the IJ plugin so it would let me add db as a gradle project. Let me play with this.", "url": "https://github.com/all-of-us/workbench/pull/3338#discussion_r406742830", "createdAt": "2020-04-10T12:49:27Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -634,6 +634,116 @@ def run_local_all_migrations()\n   :fn => ->() { run_local_all_migrations() }\n })\n \n+def liquibase_gradlew_command(verification_command, argument, run_list)\n+  verificion_full_cmd = %W{../gradlew #{verification_command} -PrunList=#{run_list}}\n+  unless argument.nil? || argument.empty?\n+    verificion_full_cmd << argument\n+  end\n+  verificion_full_cmd\n+end\n+\n+# Run a liqibase command against the specified project. Where possible, show SQL\n+# statements and ask user for verification.\n+def run_liquibase(cmd_name, *args)\n+  command_to_sql = {\n+      'changelogSync' => 'changelogSyncSQL',\n+      'markNextChangesetRan' => 'markNextChangesetRanSQL',\n+      'rollback' => 'rollbackSQL',\n+      'rollbackCount' => 'rollbackCountSQL',\n+      'rollbackToDate' => 'rollbackToDateSQL',\n+      'update' => 'updateSQL',\n+      'updateCount' => 'updateCountSql',\n+      'updateToTag' => 'updateToTagSQL'\n+  }\n+\n+  common = Common.new\n+  ensure_docker(cmd_name, args)\n+\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.add_typed_option(\n+      \"--command [command]\",\n+      String,\n+      ->(opts, c) { opts.command = c},\n+      \"Liquibase command, e.g. update, rollback, tag, validate. See \"+\n+          \"https://www.liquibase.org/documentation/command_line.html\")\n+  op.add_typed_option(\n+      \"--argument [argument]\",\n+      String,\n+      ->(opts, a) { opts.argument = a},\n+      \"Liquibase command argument, e.g. count or tag value\")\n+  op.add_typed_option(\n+        \"--run-list [run_list]\",\n+        String,\n+        ->(opts, rl) { opts.run_list = rl },\n+        \"Liquibase runList, a comma-separated list of activities in the liquibase task\")\n+  op.add_typed_option(\n+        '--project [project]',\n+        String,\n+        ->(opts, p) { opts.project = p },\n+        'AoU environment GCP project full name. Used to pick MySQL instance & creadentials.'\n+  )\n+  op.add_validator ->(opts) {\n+    if opts.command.nil? || opts.command.empty?\n+      raise ArgumentError.new(\"command is required\")\n+    end\n+  }\n+  op.parse.validate\n+\n+  # Currently there's only one activity (main), and leaving out the runList arugment causes\n+  # it to run that activity. However, that's not because it's detected as default or primary, but\n+  # leaving out the runList is equivalent to specifying all of the activities to run in unspecified\n+  # order.\n+  # https://github.com/liquibase/liquibase-gradle-plugin#3-configuring-the-plugin\n+  if op.opts.run_list.nil? || op.opts.run_list.empty?\n+    run_list = \"main\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0MDI0OQ=="}, "originalCommit": {"oid": "e95e115ed36ffe583c08d98cb874a7e36ab103fc"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3115, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}