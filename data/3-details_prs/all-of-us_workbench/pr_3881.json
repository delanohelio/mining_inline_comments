{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NjUzNTA0", "number": 3881, "title": "[no ticket][risk=no] Puppeteer Jupyter notebook tests", "bodyText": "Adding new notebook tests:\n\npython-pyplot.spec.ts\nimport-python-lib.spec.ts\nimport-r-lib.spec.ts\n(notebook R and Python code are retrieved from external text files in each test)\n\nTwo import-*.spec.ts notebook tests are derived from AoU release playbook notebook manual testing.\nLink.\nAnding new functions to support new test scenarios, and making incremental improvement to existing notebook functions to avoid code clutter and duplication.", "createdAt": "2020-08-13T21:58:18Z", "url": "https://github.com/all-of-us/workbench/pull/3881", "merged": true, "mergeCommit": {"oid": "d1fce43b22e5bf999608d6c55a89319876040ca5"}, "closed": true, "closedAt": "2020-08-19T21:09:47Z", "author": {"login": "aweng98"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-ouzvgBqjM2NTQyMTUyOTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAhNTbAFqTQ3MDgyMDE1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "013106d8288e364ca54b5daa3fab1ff42e08d3e3", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/013106d8288e364ca54b5daa3fab1ff42e08d3e3", "committedDate": "2020-08-13T22:53:43Z", "message": "default timeout in waitForKernelIdle"}, "afterCommit": {"oid": "1df33acb338ce79c6f9e7e4bd80acb3cc0430ac6", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/1df33acb338ce79c6f9e7e4bd80acb3cc0430ac6", "committedDate": "2020-08-13T23:36:13Z", "message": "update notebook tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTI3ODQ4", "url": "https://github.com/all-of-us/workbench/pull/3881#pullrequestreview-467927848", "createdAt": "2020-08-15T00:08:20Z", "commit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDowODoyMVrOHBGIvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDoxMToxN1rOHBGKhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxMTE2Nw==", "bodyText": "unnecessary check because next step is find then delete notebook clone.", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r470911167", "createdAt": "2020-08-15T00:08:21Z", "author": {"login": "aweng98"}, "path": "e2e/tests/notebook/notebook-actions.spec.ts", "diffHunk": "@@ -85,14 +79,11 @@ describe('Jupyter notebook tests', () => {\n \n       await workspaceAnalysisPage.duplicateNotebook(notebookName);\n \n-      // Verify duplicate notebook exists\n+      // Delete notebooks\n       const duplNotebookName = `Duplicate of ${notebookName}`;\n-      const resourceCard = new DataResourceCard(page);\n-      const duplNotebookExists = await resourceCard.cardExists(duplNotebookName, CardType.Notebook);\n-      expect(duplNotebookExists).toBe(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxMTYyMA==", "bodyText": "assertions are done after delete notebooks. this is to make sure delete always happen even if assertion fail.\napplied this new pattern in other notebook tests as well.", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r470911620", "createdAt": "2020-08-15T00:11:17Z", "author": {"login": "aweng98"}, "path": "e2e/tests/notebook/import-r-lib.spec.ts", "diffHunk": "@@ -0,0 +1,84 @@\n+import DataPage, {TabLabelAlias} from 'app/page/data-page';\n+import {Language} from 'app/text-labels';\n+import * as fs from 'fs';\n+import {config} from 'resources/workbench-config';\n+import {makeRandomName} from 'utils/str-utils';\n+import {findWorkspace, signIn} from 'utils/test-utils';\n+import {CellType} from 'app/page/notebook-cell';\n+\n+// Notebook server start may take a long time. Set maximum test running time to 20 minutes.\n+jest.setTimeout(20 * 60 * 1000);\n+\n+describe('Import R libraries', () => {\n+\n+  beforeEach(async () => {\n+    await signIn(page);\n+  });\n+\n+  test('Print sys environment details', async () => {\n+    let rCodeSnippet;\n+    try {\n+      rCodeSnippet = fs.readFileSync('resources/r-code/sys-print.txt', 'utf8');\n+    } catch(e) {\n+      throw new Error(e);\n+    }\n+\n+    const workspaceCard = await findWorkspace(page);\n+    await workspaceCard.clickWorkspaceName();\n+\n+    const dataPage = new DataPage(page);\n+    const notebookName = makeRandomName('print-sys');\n+    const notebook = await dataPage.createNotebook(notebookName, Language.R);\n+\n+    const cellIndex = 1;\n+    const outputText = await notebook.runCodeCell(cellIndex, {code: rCodeSnippet});\n+    console.log(`Code cell [${cellIndex}] output: \\n${outputText}`);\n+\n+    // Delete notebook\n+    const analysisPage = await notebook.goAnalysisPage();\n+    await dataPage.openTab(TabLabelAlias.Analysis);\n+    await analysisPage.deleteNotebook(notebookName);\n+\n+    // UserEmail and Google-bucket is expected to be printed out.\n+    const email = config.userEmail\n+    expect(outputText).toEqual(expect.stringMatching(email));\n+    expect(outputText).toEqual(expect.stringMatching('gs://fc-secure-'))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NjU1NTkz", "url": "https://github.com/all-of-us/workbench/pull/3881#pullrequestreview-468655593", "createdAt": "2020-08-17T17:01:05Z", "commit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzowMTowNlrOHBxGRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzoxOTo1NlrOHByY6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYxNTA0Ng==", "bodyText": "nit: don't need this variable, just return", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r471615046", "createdAt": "2020-08-17T17:01:06Z", "author": {"login": "calbach"}, "path": "e2e/app/page/dataset-save-modal.ts", "diffHunk": "@@ -71,4 +78,22 @@ export default class DatasetSaveModal extends Modal {\n     return newDatasetName;\n   }\n \n+  /**\n+   * Click 'See Code Preview' button. Returns code contents.\n+   */\n+  async previewCode(): Promise<string> {\n+    // Click 'See Code Preview' button.\n+    const previewButton = await Button.findByName(this.page, {name: 'See Code Preview'}, this);\n+    await previewButton.click();\n+    await waitUntilChanged(this.page, await previewButton.asElementHandle());\n+\n+    // Find Preview Code\n+    const selector = `${this.getXpath()}//textarea[@data-test-id=\"code-text-box\"]`;\n+    const previewTextArea = new Textarea(this.page, selector);\n+    // Has 'disabled' property\n+    await waitForPropertyExists(this.page, selector, 'disabled');\n+    const previewText = await previewTextArea.getTextContent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYxNTQ2Nw==", "bodyText": "The constructor indicates this is option, but the type here does not. Which should it be?", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r471615467", "createdAt": "2020-08-17T17:01:53Z", "author": {"login": "calbach"}, "path": "e2e/app/page/notebook-cell.ts", "diffHunk": "@@ -0,0 +1,152 @@\n+import {ElementHandle, Frame, Page} from 'puppeteer';\n+import {getPropValue} from 'utils/element-utils';\n+\n+export enum CellType {\n+  // To append to css selector\n+  Code = '.code_cell',\n+  Markdown = '.text_cell',\n+  Any = '',\n+}\n+\n+export default class NotebookCell {\n+\n+  private readonly page: Page;\n+  private iframe: Frame; // Jupyter notebook in iframe\n+  private cellIndex: number;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYxNTk5Ng==", "bodyText": "I don't think this variable assignment should be needed:\nconstructor(private page: Page, private cellType: CellType, private cellIndex = ..) {}", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r471615996", "createdAt": "2020-08-17T17:02:50Z", "author": {"login": "calbach"}, "path": "e2e/app/page/notebook-cell.ts", "diffHunk": "@@ -0,0 +1,152 @@\n+import {ElementHandle, Frame, Page} from 'puppeteer';\n+import {getPropValue} from 'utils/element-utils';\n+\n+export enum CellType {\n+  // To append to css selector\n+  Code = '.code_cell',\n+  Markdown = '.text_cell',\n+  Any = '',\n+}\n+\n+export default class NotebookCell {\n+\n+  private readonly page: Page;\n+  private iframe: Frame; // Jupyter notebook in iframe\n+  private cellIndex: number;\n+  private readonly cellType: CellType;\n+\n+\n+  constructor(page: Page, cellType: CellType, cellIndex?: number) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYxODY4Ng==", "bodyText": "index", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r471618686", "createdAt": "2020-08-17T17:05:16Z", "author": {"login": "calbach"}, "path": "e2e/app/page/notebook-cell.ts", "diffHunk": "@@ -0,0 +1,152 @@\n+import {ElementHandle, Frame, Page} from 'puppeteer';\n+import {getPropValue} from 'utils/element-utils';\n+\n+export enum CellType {\n+  // To append to css selector\n+  Code = '.code_cell',\n+  Markdown = '.text_cell',\n+  Any = '',\n+}\n+\n+export default class NotebookCell {\n+\n+  private readonly page: Page;\n+  private iframe: Frame; // Jupyter notebook in iframe\n+  private cellIndex: number;\n+  private readonly cellType: CellType;\n+\n+\n+  constructor(page: Page, cellType: CellType, cellIndex?: number) {\n+    this.page = page;\n+    this.cellIndex = cellIndex;\n+    this.cellType = cellType;\n+  }\n+\n+  async getIFrame(): Promise<Frame> {\n+    if (this.iframe === undefined) {\n+      const frame = await this.page.waitForSelector('iframe[src*=\"notebooks\"]');\n+      this.iframe = await frame.contentFrame();\n+    }\n+    return this.iframe;\n+  }\n+\n+  /**\n+   * Set focus in notebook cell.\n+   * @param {number} indx Cell index number.\n+   */\n+  async focusCell(indx?: number): Promise<ElementHandle> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyMTY5Mw==", "bodyText": "Does this change this container to point to a different element on the page? Would it be better to just return a different handle to another cell, rather than letting this be mutable?\nFor example, an issue with this is that you haven't updated cellType to reflect the new cell", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r471621693", "createdAt": "2020-08-17T17:07:50Z", "author": {"login": "calbach"}, "path": "e2e/app/page/notebook-cell.ts", "diffHunk": "@@ -0,0 +1,152 @@\n+import {ElementHandle, Frame, Page} from 'puppeteer';\n+import {getPropValue} from 'utils/element-utils';\n+\n+export enum CellType {\n+  // To append to css selector\n+  Code = '.code_cell',\n+  Markdown = '.text_cell',\n+  Any = '',\n+}\n+\n+export default class NotebookCell {\n+\n+  private readonly page: Page;\n+  private iframe: Frame; // Jupyter notebook in iframe\n+  private cellIndex: number;\n+  private readonly cellType: CellType;\n+\n+\n+  constructor(page: Page, cellType: CellType, cellIndex?: number) {\n+    this.page = page;\n+    this.cellIndex = cellIndex;\n+    this.cellType = cellType;\n+  }\n+\n+  async getIFrame(): Promise<Frame> {\n+    if (this.iframe === undefined) {\n+      const frame = await this.page.waitForSelector('iframe[src*=\"notebooks\"]');\n+      this.iframe = await frame.contentFrame();\n+    }\n+    return this.iframe;\n+  }\n+\n+  /**\n+   * Set focus in notebook cell.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyMjQ2Nw==", "bodyText": "Not -1? Is this a 1-based index? 0-based is probably better.", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r471622467", "createdAt": "2020-08-17T17:08:31Z", "author": {"login": "calbach"}, "path": "e2e/app/page/notebook-cell.ts", "diffHunk": "@@ -0,0 +1,152 @@\n+import {ElementHandle, Frame, Page} from 'puppeteer';\n+import {getPropValue} from 'utils/element-utils';\n+\n+export enum CellType {\n+  // To append to css selector\n+  Code = '.code_cell',\n+  Markdown = '.text_cell',\n+  Any = '',\n+}\n+\n+export default class NotebookCell {\n+\n+  private readonly page: Page;\n+  private iframe: Frame; // Jupyter notebook in iframe\n+  private cellIndex: number;\n+  private readonly cellType: CellType;\n+\n+\n+  constructor(page: Page, cellType: CellType, cellIndex?: number) {\n+    this.page = page;\n+    this.cellIndex = cellIndex;\n+    this.cellType = cellType;\n+  }\n+\n+  async getIFrame(): Promise<Frame> {\n+    if (this.iframe === undefined) {\n+      const frame = await this.page.waitForSelector('iframe[src*=\"notebooks\"]');\n+      this.iframe = await frame.contentFrame();\n+    }\n+    return this.iframe;\n+  }\n+\n+  /**\n+   * Set focus in notebook cell.\n+   * @param {number} indx Cell index number.\n+   */\n+  async focusCell(indx?: number): Promise<ElementHandle> {\n+    if (indx !== undefined) {\n+      this.cellIndex = indx;\n+    }\n+    if (this.cellIndex === undefined) {\n+      return this.focusLastCell();\n+    }\n+    const selector = `${this.cellSelector(this.getCellIndex())} .CodeMirror-code`;\n+    const frame = await this.getIFrame();\n+    const cell = await frame.waitForSelector(selector, {visible: true});\n+    await cell.click({delay: 10}); // focus\n+    return cell;\n+  }\n+\n+  /**\n+   * Set focus in last cell.\n+   */\n+  async focusLastCell(): Promise<ElementHandle> {\n+    const selector = `${this.cellSelector()} .CodeMirror-code`;\n+    const frame = await this.getIFrame();\n+    const cells = await frame.$$(selector);\n+    this.cellIndex = cells.length;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyMzUxOQ==", "bodyText": "cellIndex should be documented somewhere. For example, it's not clear to me whether this index includes both code and output cells.", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r471623519", "createdAt": "2020-08-17T17:09:24Z", "author": {"login": "calbach"}, "path": "e2e/app/page/notebook-cell.ts", "diffHunk": "@@ -0,0 +1,152 @@\n+import {ElementHandle, Frame, Page} from 'puppeteer';\n+import {getPropValue} from 'utils/element-utils';\n+\n+export enum CellType {\n+  // To append to css selector\n+  Code = '.code_cell',\n+  Markdown = '.text_cell',\n+  Any = '',\n+}\n+\n+export default class NotebookCell {\n+\n+  private readonly page: Page;\n+  private iframe: Frame; // Jupyter notebook in iframe\n+  private cellIndex: number;\n+  private readonly cellType: CellType;\n+\n+\n+  constructor(page: Page, cellType: CellType, cellIndex?: number) {\n+    this.page = page;\n+    this.cellIndex = cellIndex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyNTAwNQ==", "bodyText": "I would probably make some of these private for clarity. I doubt there's a need to use this outside this class.", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r471625005", "createdAt": "2020-08-17T17:10:39Z", "author": {"login": "calbach"}, "path": "e2e/app/page/notebook-cell.ts", "diffHunk": "@@ -0,0 +1,152 @@\n+import {ElementHandle, Frame, Page} from 'puppeteer';\n+import {getPropValue} from 'utils/element-utils';\n+\n+export enum CellType {\n+  // To append to css selector\n+  Code = '.code_cell',\n+  Markdown = '.text_cell',\n+  Any = '',\n+}\n+\n+export default class NotebookCell {\n+\n+  private readonly page: Page;\n+  private iframe: Frame; // Jupyter notebook in iframe\n+  private cellIndex: number;\n+  private readonly cellType: CellType;\n+\n+\n+  constructor(page: Page, cellType: CellType, cellIndex?: number) {\n+    this.page = page;\n+    this.cellIndex = cellIndex;\n+    this.cellType = cellType;\n+  }\n+\n+  async getIFrame(): Promise<Frame> {\n+    if (this.iframe === undefined) {\n+      const frame = await this.page.waitForSelector('iframe[src*=\"notebooks\"]');\n+      this.iframe = await frame.contentFrame();\n+    }\n+    return this.iframe;\n+  }\n+\n+  /**\n+   * Set focus in notebook cell.\n+   * @param {number} indx Cell index number.\n+   */\n+  async focusCell(indx?: number): Promise<ElementHandle> {\n+    if (indx !== undefined) {\n+      this.cellIndex = indx;\n+    }\n+    if (this.cellIndex === undefined) {\n+      return this.focusLastCell();\n+    }\n+    const selector = `${this.cellSelector(this.getCellIndex())} .CodeMirror-code`;\n+    const frame = await this.getIFrame();\n+    const cell = await frame.waitForSelector(selector, {visible: true});\n+    await cell.click({delay: 10}); // focus\n+    return cell;\n+  }\n+\n+  /**\n+   * Set focus in last cell.\n+   */\n+  async focusLastCell(): Promise<ElementHandle> {\n+    const selector = `${this.cellSelector()} .CodeMirror-code`;\n+    const frame = await this.getIFrame();\n+    const cells = await frame.$$(selector);\n+    this.cellIndex = cells.length;\n+    const cell = cells[cells.length - 1];\n+    await cell.click({delay: 10}); // focus\n+    return cell;\n+  }\n+\n+  /**\n+   * Returns cell run result. Result is either stdout or stderr.\n+   * @param {number} timeOut The timeout time in milliseconds.\n+   */\n+  async getRunResult(timeOut: number = 30 * 1000): Promise<string> {\n+    return await Promise.race([\n+      this.getRunResultSuccessText(timeOut),\n+      this.getRunResultErrorText(timeOut),\n+    ]);\n+  }\n+\n+  /**\n+   * Gets cell output texts.\n+   * @param {number} timeOut The timeout time in milliseconds.\n+   */\n+  async getRunResultSuccessText(timeOut?: number): Promise<string> {\n+    const element = await this.findOutputElement(timeOut);\n+    const value = await getPropValue<string>(element, 'innerText');\n+    await element.dispose();\n+    return value.trim();\n+  }\n+\n+  /**\n+   * Gets cell output error.\n+   * @param {number} timeOut The timeout time in milliseconds.\n+   */\n+  async getRunResultErrorText(timeOut?: number): Promise<string> {\n+    const element = await this.findOutputErrorElement(timeOut);\n+    const value = await getPropValue<string>(element, 'innerText');\n+    await element.dispose();\n+    console.error(`Run cell output error: \\n${value}`);\n+    return value.trim();\n+  }\n+\n+  /**\n+   * Find cell output_area element.\n+   * @param {number} timeOut The timeout time in milliseconds.\n+   */\n+  async findOutputElement(timeOut?: number): Promise<ElementHandle> {\n+    const selector = `${this.outputAreaSelector(this.getCellIndex())}:not(.output_error)`;\n+    const iframe = await this.getIFrame();\n+    await iframe.waitForSelector(selector, {visible: true, timeout: timeOut});\n+    const elements = await iframe.$$(selector);\n+    return elements[elements.length - 1];\n+  }\n+\n+  /**\n+   * Find cell output_area error.\n+   * @param {number} timeOut The timeout time in milliseconds.\n+   */\n+  async findOutputErrorElement(timeOut?: number): Promise<ElementHandle> {\n+    const selector = `${this.outputAreaSelector(this.getCellIndex())}.output_error`;\n+    const iframe = await this.getIFrame();\n+    return iframe.waitForSelector(selector, {visible: true, timeout: timeOut});\n+  }\n+\n+  getCellIndex(): number {\n+    return this.cellIndex;\n+  }\n+\n+  outputAreaSelector(indx?: number): string {\n+    return `${this.cellSelector(indx)} .output_subarea`;\n+  }\n+\n+  /**\n+   * Returns css selector for cell.\n+   * @param {number} indx Cell index.\n+   */\n+  cellSelector(indx?: number): string {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyNjQ1Mw==", "bodyText": "cellIndex is optional. What does this do then?", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r471626453", "createdAt": "2020-08-17T17:11:54Z", "author": {"login": "calbach"}, "path": "e2e/app/page/notebook-page.ts", "diffHunk": "@@ -28,145 +28,165 @@ export enum KernelStatus {\n }\n \n export default class NotebookPage extends AuthenticatedPage {\n-  private codeCell: CodeCell;\n \n   constructor(page: Page, private readonly documentTitle) {\n     super(page);\n   }\n \n   async isLoaded(): Promise<boolean> {\n     try {\n-      const frame = await this.frame();\n-      this.codeCell = new CodeCell(frame);\n-      // Wait up to 2 minutes.\n-      await Promise.all([\n-        waitForDocumentTitle(this.page, this.documentTitle),\n-        frame.waitForSelector(CssSelector.runCellButton, {visible: true}),\n-        frame.waitForSelector(CodeCellSelector.codeCell, {visible: true}),\n-        frame.waitForSelector(CssSelector.kernelIcon, {visible: true})\n-      ]);\n+      await waitForDocumentTitle(this.page, this.documentTitle);\n+      await this.waitForKernelIdle();\n       return true;\n     } catch (e) {\n-      console.log(`NotebookPage isLoaded() encountered ${e}`);\n+      console.error(`NotebookPage isLoaded() encountered ${e}`);\n       return false;\n     }\n   }\n \n   /**\n-   * Click \"Notebook\" link, goto Workspace Analysis tab. This function does not handle Unsaved Changes confirmation.\n+   * Click \"Notebook\" link, goto Workspace Analysis page.\n+   * This function does not handle Unsaved Changes confirmation.\n    */\n-  async goBackAnalysisPage(): Promise<WorkspaceAnalysisPage> {\n+  async goAnalysisPage(): Promise<WorkspaceAnalysisPage> {\n+    const selector = '//a[text()=\"Notebooks\"]';\n     const navPromise = this.page.waitForNavigation({ waitUntil: ['load', 'domcontentloaded', 'networkidle0'] });\n-    await this.notebookLink().then( (link) => link.click());\n+    await this.page.waitForXPath(selector, {visible: true}).then( (link) => link.click());\n     await navPromise;\n     await waitWhileLoading(this.page);\n     const analysisPage = new WorkspaceAnalysisPage(this.page);\n     await analysisPage.waitForLoad();\n     return analysisPage;\n   }\n \n-  async notebookLink(): Promise<ElementHandle> {\n-    const selector = '//a[text()=\"Notebooks\"]';\n-    return this.page.waitForXPath(selector, {visible: true});\n-  }\n-\n   /**\n-   * Click Run button in toolbar. It run focused cell and insert a new cell below.\n+   * Run focused cell and insert a new cell below. Click Run button in toolbar.\n    */\n-  async runButton(): Promise<void> {\n-    return this.frame()\n-      .then( (iframe) => iframe.waitForSelector(CssSelector.runCellButton, {visible: true}))\n-      .then( (butn) => butn.click() );\n+  async run(): Promise<void> {\n+    const frame = await this.getIframe();\n+    const runButton = await frame.waitForSelector(CssSelector.runCellButton, {visible: true});\n+    await runButton.click();\n+    await runButton.dispose();\n   }\n \n   /**\n-   * Click Save button in toolbar.\n+   * Save notebook. Click Save button in toolbar.\n    */\n-  async saveNotebook(): Promise<void> {\n-    return this.frame()\n-      .then( (iframe) => iframe.waitForSelector(CssSelector.saveNotebookButton, {visible: true}))\n-      .then( (butn) => butn.click() );\n+  async save(): Promise<void> {\n+    const frame = await this.getIframe();\n+    const saveButton = await frame.waitForSelector(CssSelector.saveNotebookButton, {visible: true});\n+    await saveButton.click();\n+    await saveButton.dispose();\n   }\n \n   /**\n    * Wait for notebook kernel becomes ready (idle).\n    */\n-  async waitForKernelIdle(timeOut?: number): Promise<boolean> {\n-    const iconSelector = `${CssSelector.kernelIcon}.kernel_idle_icon`;\n+  async waitForKernelIdle(timeOut?: number): Promise<void> {\n+    const idleIconSelector = `${CssSelector.kernelIcon}.kernel_idle_icon`;\n     const notifSelector = '#notification_kernel';\n-    const frame = await this.frame();\n+    const frame = await this.getIframe();\n     try {\n       await Promise.all([\n-        frame.waitForSelector(iconSelector, {visible: true, timeout: timeOut}),\n+        frame.waitForSelector(idleIconSelector, {visible: true, timeout: timeOut}),\n         frame.waitForSelector(notifSelector, {hidden: true, timeout: timeOut}),\n-      ])\n-      return true;\n+      ]);\n     } catch (e) {\n-      return false;\n+      console.error(`Notebook kernel is: ${await this.kernelStatus()}`);\n+      throw new Error(`waitForKernelIdle encountered ${e}`);\n     }\n   }\n \n-  async kernelStatus(): Promise<KernelStatus | null> {\n-    const elemt = await this.frame().then( (frame) => frame.waitForSelector(CssSelector.kernelIcon, {visible: true}));\n+  async kernelStatus(): Promise<KernelStatus | string> {\n+    const frame = await this.getIframe();\n+    const elemt = await frame.waitForSelector(CssSelector.kernelIcon, {visible: true});\n     const value = await getPropValue<string>(elemt, 'title');\n     await elemt.dispose();\n     Object.keys(KernelStatus).forEach(key => {\n       if (KernelStatus[key] === value) {\n         return key;\n       }\n     })\n-    return null;\n+    return value;\n   }\n \n   async getKernelName(): Promise<string> {\n-    const frame = await this.frame();\n+    const frame = await this.getIframe();\n     const elemt = await frame.waitForSelector(CssSelector.kernelName, {visible: true});\n     const value = await getPropValue<string>(elemt, 'textContent');\n     await elemt.dispose();\n-    return value;\n+    return value.trim();\n   }\n \n   /**\n    * Click Run button in toolbar. It run focused cell and insert a new cell below.\n+   *\n    * @param {number} cellIndex Code Cell index. (index number starts from 1)\n-   * @param {string} code New code.\n-   * @return {string} Output string.\n+   * @param {string} code The code to run.\n+   * @param {number} timeOut The timeout time in milliseconds.\n+   *\n    */\n-  async runCodeCell(cellIndex: number, opts: { code?: string, timeOut?: number }): Promise<string> {\n-    await this.codeCell.selectCell(cellIndex, opts.code);\n-    await this.runButton();\n+  async runCodeCell(cellIndex?: number, opts: { code?: string, timeOut?: number } = {}): Promise<string> {\n+    const cell = await this.findCell(cellIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyODYzNg==", "bodyText": ".py and .R seem like more accurate file extensions here", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r471628636", "createdAt": "2020-08-17T17:13:40Z", "author": {"login": "calbach"}, "path": "e2e/resources/python-code/import-libs.txt", "diffHunk": "@@ -0,0 +1,23 @@\n+import dateutil", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyOTM1OQ==", "bodyText": "Why bother catching this only to immediately rethrow it?", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r471629359", "createdAt": "2020-08-17T17:14:18Z", "author": {"login": "calbach"}, "path": "e2e/tests/notebook/import-python-lib.spec.ts", "diffHunk": "@@ -0,0 +1,76 @@\n+import {findWorkspace, signIn} from 'utils/test-utils';\n+import DataPage, {TabLabelAlias} from 'app/page/data-page';\n+import {makeRandomName} from 'utils/str-utils';\n+import {config} from 'resources/workbench-config';\n+import * as fs from 'fs';\n+\n+// Notebook server start may take a long time. Set maximum test running time to 20 minutes.\n+jest.setTimeout(20 * 60 * 1000);\n+\n+describe('Import Python libraries', () => {\n+\n+  beforeEach(async () => {\n+    await signIn(page);\n+  });\n+\n+  test('Import os', async () => {\n+    let codeSnippet;\n+    try {\n+      codeSnippet = fs.readFileSync('resources/python-code/import-os.txt', 'utf8');\n+    } catch(e) {\n+      throw new Error(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYzMjMxNg==", "bodyText": "Should we just have a second file for each of these inputs that includes the expected output?\nAlternatively, should we have each of these snippets output a specific string on success? e.g. \"success\", to make this checking more consistent?", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r471632316", "createdAt": "2020-08-17T17:16:40Z", "author": {"login": "calbach"}, "path": "e2e/tests/notebook/import-python-lib.spec.ts", "diffHunk": "@@ -0,0 +1,76 @@\n+import {findWorkspace, signIn} from 'utils/test-utils';\n+import DataPage, {TabLabelAlias} from 'app/page/data-page';\n+import {makeRandomName} from 'utils/str-utils';\n+import {config} from 'resources/workbench-config';\n+import * as fs from 'fs';\n+\n+// Notebook server start may take a long time. Set maximum test running time to 20 minutes.\n+jest.setTimeout(20 * 60 * 1000);\n+\n+describe('Import Python libraries', () => {\n+\n+  beforeEach(async () => {\n+    await signIn(page);\n+  });\n+\n+  test('Import os', async () => {\n+    let codeSnippet;\n+    try {\n+      codeSnippet = fs.readFileSync('resources/python-code/import-os.txt', 'utf8');\n+    } catch(e) {\n+      throw new Error(e);\n+    }\n+\n+    const workspaceCard = await findWorkspace(page);\n+    await workspaceCard.clickWorkspaceName();\n+\n+    const dataPage = new DataPage(page);\n+    const notebookName = makeRandomName('import-os');\n+    const notebook = await dataPage.createNotebook(notebookName);\n+    await notebook.waitForKernelIdle();\n+\n+    const cellIndex = 1;\n+    const outputText = await notebook.runCodeCell(cellIndex, {code: codeSnippet});\n+\n+    // Delete notebook\n+    const analysisPage = await notebook.goAnalysisPage();\n+    await dataPage.openTab(TabLabelAlias.Analysis);\n+    await analysisPage.deleteNotebook(notebookName);\n+\n+    // Partial values check: UserEmail and python3 path is expected to be printed out.\n+    const partialArray = [\n+      '/usr/local/bin/python3',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYzMzg1MQ==", "bodyText": "Please move most of this to a helper. This is 95% identical to the other test method", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r471633851", "createdAt": "2020-08-17T17:18:02Z", "author": {"login": "calbach"}, "path": "e2e/tests/notebook/import-python-lib.spec.ts", "diffHunk": "@@ -0,0 +1,76 @@\n+import {findWorkspace, signIn} from 'utils/test-utils';\n+import DataPage, {TabLabelAlias} from 'app/page/data-page';\n+import {makeRandomName} from 'utils/str-utils';\n+import {config} from 'resources/workbench-config';\n+import * as fs from 'fs';\n+\n+// Notebook server start may take a long time. Set maximum test running time to 20 minutes.\n+jest.setTimeout(20 * 60 * 1000);\n+\n+describe('Import Python libraries', () => {\n+\n+  beforeEach(async () => {\n+    await signIn(page);\n+  });\n+\n+  test('Import os', async () => {\n+    let codeSnippet;\n+    try {\n+      codeSnippet = fs.readFileSync('resources/python-code/import-os.txt', 'utf8');\n+    } catch(e) {\n+      throw new Error(e);\n+    }\n+\n+    const workspaceCard = await findWorkspace(page);\n+    await workspaceCard.clickWorkspaceName();\n+\n+    const dataPage = new DataPage(page);\n+    const notebookName = makeRandomName('import-os');\n+    const notebook = await dataPage.createNotebook(notebookName);\n+    await notebook.waitForKernelIdle();\n+\n+    const cellIndex = 1;\n+    const outputText = await notebook.runCodeCell(cellIndex, {code: codeSnippet});\n+\n+    // Delete notebook\n+    const analysisPage = await notebook.goAnalysisPage();\n+    await dataPage.openTab(TabLabelAlias.Analysis);\n+    await analysisPage.deleteNotebook(notebookName);\n+\n+    // Partial values check: UserEmail and python3 path is expected to be printed out.\n+    const partialArray = [\n+      '/usr/local/bin/python3',\n+      config.userEmail,\n+    ];\n+    const outputTextArray = outputText.split(/\\n/);\n+    expect(outputTextArray).toEqual(expect.arrayContaining(partialArray));\n+  });\n+\n+  test('Import common lib', async () => {\n+    let codeSnippet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYzNTIwMQ==", "bodyText": "Won't this affect any test which gets run after this one?", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r471635201", "createdAt": "2020-08-17T17:19:09Z", "author": {"login": "calbach"}, "path": "e2e/tests/notebook/import-r-lib.spec.ts", "diffHunk": "@@ -0,0 +1,84 @@\n+import DataPage, {TabLabelAlias} from 'app/page/data-page';\n+import {Language} from 'app/text-labels';\n+import * as fs from 'fs';\n+import {config} from 'resources/workbench-config';\n+import {makeRandomName} from 'utils/str-utils';\n+import {findWorkspace, signIn} from 'utils/test-utils';\n+import {CellType} from 'app/page/notebook-cell';\n+\n+// Notebook server start may take a long time. Set maximum test running time to 20 minutes.\n+jest.setTimeout(20 * 60 * 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYzNjIwMw==", "bodyText": "Please eliminate duplicate code here as well", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r471636203", "createdAt": "2020-08-17T17:19:56Z", "author": {"login": "calbach"}, "path": "e2e/tests/notebook/import-r-lib.spec.ts", "diffHunk": "@@ -0,0 +1,84 @@\n+import DataPage, {TabLabelAlias} from 'app/page/data-page';\n+import {Language} from 'app/text-labels';\n+import * as fs from 'fs';\n+import {config} from 'resources/workbench-config';\n+import {makeRandomName} from 'utils/str-utils';\n+import {findWorkspace, signIn} from 'utils/test-utils';\n+import {CellType} from 'app/page/notebook-cell';\n+\n+// Notebook server start may take a long time. Set maximum test running time to 20 minutes.\n+jest.setTimeout(20 * 60 * 1000);\n+\n+describe('Import R libraries', () => {\n+\n+  beforeEach(async () => {\n+    await signIn(page);\n+  });\n+\n+  test('Print sys environment details', async () => {\n+    let rCodeSnippet;\n+    try {\n+      rCodeSnippet = fs.readFileSync('resources/r-code/sys-print.txt', 'utf8');\n+    } catch(e) {\n+      throw new Error(e);\n+    }\n+\n+    const workspaceCard = await findWorkspace(page);\n+    await workspaceCard.clickWorkspaceName();\n+\n+    const dataPage = new DataPage(page);\n+    const notebookName = makeRandomName('print-sys');\n+    const notebook = await dataPage.createNotebook(notebookName, Language.R);\n+\n+    const cellIndex = 1;\n+    const outputText = await notebook.runCodeCell(cellIndex, {code: rCodeSnippet});\n+    console.log(`Code cell [${cellIndex}] output: \\n${outputText}`);\n+\n+    // Delete notebook\n+    const analysisPage = await notebook.goAnalysisPage();\n+    await dataPage.openTab(TabLabelAlias.Analysis);\n+    await analysisPage.deleteNotebook(notebookName);\n+\n+    // UserEmail and Google-bucket is expected to be printed out.\n+    const email = config.userEmail\n+    expect(outputText).toEqual(expect.stringMatching(email));\n+    expect(outputText).toEqual(expect.stringMatching('gs://fc-secure-'))\n+  });\n+\n+  test('Import common lib', async () => {\n+    let rCodeSnippet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 49}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c41f589ab9980727eb2c22f6dd7b571bca253d4", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/0c41f589ab9980727eb2c22f6dd7b571bca253d4", "committedDate": "2020-08-18T03:31:45Z", "message": "PR feedback"}, "afterCommit": {"oid": "25904b810730e3283cb95c60a86ce752456d216b", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/25904b810730e3283cb95c60a86ce752456d216b", "committedDate": "2020-08-18T03:34:01Z", "message": "new notebook tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4Njc0NDMy", "url": "https://github.com/all-of-us/workbench/pull/3881#pullrequestreview-468674432", "createdAt": "2020-08-17T17:24:08Z", "commit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzoyNDowOFrOHBytyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMDo1MDoxMlrOHB_iNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY0MTU0NA==", "bodyText": "\u2714\ufe0e", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r471641544", "createdAt": "2020-08-17T17:24:08Z", "author": {"login": "aweng98"}, "path": "e2e/app/page/dataset-save-modal.ts", "diffHunk": "@@ -71,4 +78,22 @@ export default class DatasetSaveModal extends Modal {\n     return newDatasetName;\n   }\n \n+  /**\n+   * Click 'See Code Preview' button. Returns code contents.\n+   */\n+  async previewCode(): Promise<string> {\n+    // Click 'See Code Preview' button.\n+    const previewButton = await Button.findByName(this.page, {name: 'See Code Preview'}, this);\n+    await previewButton.click();\n+    await waitUntilChanged(this.page, await previewButton.asElementHandle());\n+\n+    // Find Preview Code\n+    const selector = `${this.getXpath()}//textarea[@data-test-id=\"code-text-box\"]`;\n+    const previewTextArea = new Textarea(this.page, selector);\n+    // Has 'disabled' property\n+    await waitForPropertyExists(this.page, selector, 'disabled');\n+    const previewText = await previewTextArea.getTextContent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYxNTA0Ng=="}, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1MjQyNQ==", "bodyText": "\u2714\ufe0e", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r471652425", "createdAt": "2020-08-17T17:37:21Z", "author": {"login": "aweng98"}, "path": "e2e/resources/python-code/import-libs.txt", "diffHunk": "@@ -0,0 +1,23 @@\n+import dateutil", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyODYzNg=="}, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1Mjk2OQ==", "bodyText": "\u2714\ufe0e Removed try/catch. It didn't make any sense.", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r471652969", "createdAt": "2020-08-17T17:38:20Z", "author": {"login": "aweng98"}, "path": "e2e/tests/notebook/import-python-lib.spec.ts", "diffHunk": "@@ -0,0 +1,76 @@\n+import {findWorkspace, signIn} from 'utils/test-utils';\n+import DataPage, {TabLabelAlias} from 'app/page/data-page';\n+import {makeRandomName} from 'utils/str-utils';\n+import {config} from 'resources/workbench-config';\n+import * as fs from 'fs';\n+\n+// Notebook server start may take a long time. Set maximum test running time to 20 minutes.\n+jest.setTimeout(20 * 60 * 1000);\n+\n+describe('Import Python libraries', () => {\n+\n+  beforeEach(async () => {\n+    await signIn(page);\n+  });\n+\n+  test('Import os', async () => {\n+    let codeSnippet;\n+    try {\n+      codeSnippet = fs.readFileSync('resources/python-code/import-os.txt', 'utf8');\n+    } catch(e) {\n+      throw new Error(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyOTM1OQ=="}, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1NTAxMA==", "bodyText": "no, affects only tests in this file.", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r471655010", "createdAt": "2020-08-17T17:42:25Z", "author": {"login": "aweng98"}, "path": "e2e/tests/notebook/import-r-lib.spec.ts", "diffHunk": "@@ -0,0 +1,84 @@\n+import DataPage, {TabLabelAlias} from 'app/page/data-page';\n+import {Language} from 'app/text-labels';\n+import * as fs from 'fs';\n+import {config} from 'resources/workbench-config';\n+import {makeRandomName} from 'utils/str-utils';\n+import {findWorkspace, signIn} from 'utils/test-utils';\n+import {CellType} from 'app/page/notebook-cell';\n+\n+// Notebook server start may take a long time. Set maximum test running time to 20 minutes.\n+jest.setTimeout(20 * 60 * 1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYzNTIwMQ=="}, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1NzE0MQ==", "bodyText": "It is 1-based index. I chose this convention because the count in cell prompt starts from 1. I wanted to avoid any confusion.", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r471657141", "createdAt": "2020-08-17T17:46:30Z", "author": {"login": "aweng98"}, "path": "e2e/app/page/notebook-cell.ts", "diffHunk": "@@ -0,0 +1,152 @@\n+import {ElementHandle, Frame, Page} from 'puppeteer';\n+import {getPropValue} from 'utils/element-utils';\n+\n+export enum CellType {\n+  // To append to css selector\n+  Code = '.code_cell',\n+  Markdown = '.text_cell',\n+  Any = '',\n+}\n+\n+export default class NotebookCell {\n+\n+  private readonly page: Page;\n+  private iframe: Frame; // Jupyter notebook in iframe\n+  private cellIndex: number;\n+  private readonly cellType: CellType;\n+\n+\n+  constructor(page: Page, cellType: CellType, cellIndex?: number) {\n+    this.page = page;\n+    this.cellIndex = cellIndex;\n+    this.cellType = cellType;\n+  }\n+\n+  async getIFrame(): Promise<Frame> {\n+    if (this.iframe === undefined) {\n+      const frame = await this.page.waitForSelector('iframe[src*=\"notebooks\"]');\n+      this.iframe = await frame.contentFrame();\n+    }\n+    return this.iframe;\n+  }\n+\n+  /**\n+   * Set focus in notebook cell.\n+   * @param {number} indx Cell index number.\n+   */\n+  async focusCell(indx?: number): Promise<ElementHandle> {\n+    if (indx !== undefined) {\n+      this.cellIndex = indx;\n+    }\n+    if (this.cellIndex === undefined) {\n+      return this.focusLastCell();\n+    }\n+    const selector = `${this.cellSelector(this.getCellIndex())} .CodeMirror-code`;\n+    const frame = await this.getIFrame();\n+    const cell = await frame.waitForSelector(selector, {visible: true});\n+    await cell.click({delay: 10}); // focus\n+    return cell;\n+  }\n+\n+  /**\n+   * Set focus in last cell.\n+   */\n+  async focusLastCell(): Promise<ElementHandle> {\n+    const selector = `${this.cellSelector()} .CodeMirror-code`;\n+    const frame = await this.getIFrame();\n+    const cells = await frame.$$(selector);\n+    this.cellIndex = cells.length;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyMjQ2Nw=="}, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY4ODk1Mw==", "bodyText": "\u2714\ufe0e", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r471688953", "createdAt": "2020-08-17T18:32:07Z", "author": {"login": "aweng98"}, "path": "e2e/app/page/notebook-cell.ts", "diffHunk": "@@ -0,0 +1,152 @@\n+import {ElementHandle, Frame, Page} from 'puppeteer';\n+import {getPropValue} from 'utils/element-utils';\n+\n+export enum CellType {\n+  // To append to css selector\n+  Code = '.code_cell',\n+  Markdown = '.text_cell',\n+  Any = '',\n+}\n+\n+export default class NotebookCell {\n+\n+  private readonly page: Page;\n+  private iframe: Frame; // Jupyter notebook in iframe\n+  private cellIndex: number;\n+  private readonly cellType: CellType;\n+\n+\n+  constructor(page: Page, cellType: CellType, cellIndex?: number) {\n+    this.page = page;\n+    this.cellIndex = cellIndex;\n+    this.cellType = cellType;\n+  }\n+\n+  async getIFrame(): Promise<Frame> {\n+    if (this.iframe === undefined) {\n+      const frame = await this.page.waitForSelector('iframe[src*=\"notebooks\"]');\n+      this.iframe = await frame.contentFrame();\n+    }\n+    return this.iframe;\n+  }\n+\n+  /**\n+   * Set focus in notebook cell.\n+   * @param {number} indx Cell index number.\n+   */\n+  async focusCell(indx?: number): Promise<ElementHandle> {\n+    if (indx !== undefined) {\n+      this.cellIndex = indx;\n+    }\n+    if (this.cellIndex === undefined) {\n+      return this.focusLastCell();\n+    }\n+    const selector = `${this.cellSelector(this.getCellIndex())} .CodeMirror-code`;\n+    const frame = await this.getIFrame();\n+    const cell = await frame.waitForSelector(selector, {visible: true});\n+    await cell.click({delay: 10}); // focus\n+    return cell;\n+  }\n+\n+  /**\n+   * Set focus in last cell.\n+   */\n+  async focusLastCell(): Promise<ElementHandle> {\n+    const selector = `${this.cellSelector()} .CodeMirror-code`;\n+    const frame = await this.getIFrame();\n+    const cells = await frame.$$(selector);\n+    this.cellIndex = cells.length;\n+    const cell = cells[cells.length - 1];\n+    await cell.click({delay: 10}); // focus\n+    return cell;\n+  }\n+\n+  /**\n+   * Returns cell run result. Result is either stdout or stderr.\n+   * @param {number} timeOut The timeout time in milliseconds.\n+   */\n+  async getRunResult(timeOut: number = 30 * 1000): Promise<string> {\n+    return await Promise.race([\n+      this.getRunResultSuccessText(timeOut),\n+      this.getRunResultErrorText(timeOut),\n+    ]);\n+  }\n+\n+  /**\n+   * Gets cell output texts.\n+   * @param {number} timeOut The timeout time in milliseconds.\n+   */\n+  async getRunResultSuccessText(timeOut?: number): Promise<string> {\n+    const element = await this.findOutputElement(timeOut);\n+    const value = await getPropValue<string>(element, 'innerText');\n+    await element.dispose();\n+    return value.trim();\n+  }\n+\n+  /**\n+   * Gets cell output error.\n+   * @param {number} timeOut The timeout time in milliseconds.\n+   */\n+  async getRunResultErrorText(timeOut?: number): Promise<string> {\n+    const element = await this.findOutputErrorElement(timeOut);\n+    const value = await getPropValue<string>(element, 'innerText');\n+    await element.dispose();\n+    console.error(`Run cell output error: \\n${value}`);\n+    return value.trim();\n+  }\n+\n+  /**\n+   * Find cell output_area element.\n+   * @param {number} timeOut The timeout time in milliseconds.\n+   */\n+  async findOutputElement(timeOut?: number): Promise<ElementHandle> {\n+    const selector = `${this.outputAreaSelector(this.getCellIndex())}:not(.output_error)`;\n+    const iframe = await this.getIFrame();\n+    await iframe.waitForSelector(selector, {visible: true, timeout: timeOut});\n+    const elements = await iframe.$$(selector);\n+    return elements[elements.length - 1];\n+  }\n+\n+  /**\n+   * Find cell output_area error.\n+   * @param {number} timeOut The timeout time in milliseconds.\n+   */\n+  async findOutputErrorElement(timeOut?: number): Promise<ElementHandle> {\n+    const selector = `${this.outputAreaSelector(this.getCellIndex())}.output_error`;\n+    const iframe = await this.getIFrame();\n+    return iframe.waitForSelector(selector, {visible: true, timeout: timeOut});\n+  }\n+\n+  getCellIndex(): number {\n+    return this.cellIndex;\n+  }\n+\n+  outputAreaSelector(indx?: number): string {\n+    return `${this.cellSelector(indx)} .output_subarea`;\n+  }\n+\n+  /**\n+   * Returns css selector for cell.\n+   * @param {number} indx Cell index.\n+   */\n+  cellSelector(indx?: number): string {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyNTAwNQ=="}, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1MTU3Mg==", "bodyText": "expected code output vary per workspace.\nprint(os.getenv('OWNER_EMAIL'))\nprint(os.getenv('WORKSPACE_CDR'))\nprint(os.getenv('WORKSPACE_NAMESPACE'))\nprint(os.getenv('GOOGLE_PROJECT')) # same as WORKSPACE_NAMESPACE\nprint(os.getenv('CLUSTER_NAME'))\nprint(os.getenv('WORKSPACE_BUCKET'))", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r471851572", "createdAt": "2020-08-18T00:50:12Z", "author": {"login": "aweng98"}, "path": "e2e/tests/notebook/import-python-lib.spec.ts", "diffHunk": "@@ -0,0 +1,76 @@\n+import {findWorkspace, signIn} from 'utils/test-utils';\n+import DataPage, {TabLabelAlias} from 'app/page/data-page';\n+import {makeRandomName} from 'utils/str-utils';\n+import {config} from 'resources/workbench-config';\n+import * as fs from 'fs';\n+\n+// Notebook server start may take a long time. Set maximum test running time to 20 minutes.\n+jest.setTimeout(20 * 60 * 1000);\n+\n+describe('Import Python libraries', () => {\n+\n+  beforeEach(async () => {\n+    await signIn(page);\n+  });\n+\n+  test('Import os', async () => {\n+    let codeSnippet;\n+    try {\n+      codeSnippet = fs.readFileSync('resources/python-code/import-os.txt', 'utf8');\n+    } catch(e) {\n+      throw new Error(e);\n+    }\n+\n+    const workspaceCard = await findWorkspace(page);\n+    await workspaceCard.clickWorkspaceName();\n+\n+    const dataPage = new DataPage(page);\n+    const notebookName = makeRandomName('import-os');\n+    const notebook = await dataPage.createNotebook(notebookName);\n+    await notebook.waitForKernelIdle();\n+\n+    const cellIndex = 1;\n+    const outputText = await notebook.runCodeCell(cellIndex, {code: codeSnippet});\n+\n+    // Delete notebook\n+    const analysisPage = await notebook.goAnalysisPage();\n+    await dataPage.openTab(TabLabelAlias.Analysis);\n+    await analysisPage.deleteNotebook(notebookName);\n+\n+    // Partial values check: UserEmail and python3 path is expected to be printed out.\n+    const partialArray = [\n+      '/usr/local/bin/python3',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYzMjMxNg=="}, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1ed9146427059465634d8f6c55f2dcb353100b0", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/b1ed9146427059465634d8f6c55f2dcb353100b0", "committedDate": "2020-08-18T18:33:22Z", "message": "new notebook tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4adcb42453ad5a8c3c50ae386972a68e01cb8a6e", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/4adcb42453ad5a8c3c50ae386972a68e01cb8a6e", "committedDate": "2020-08-18T18:33:22Z", "message": "check selected property in focus function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db7b1ebfb55d73be9350eeee3ed3e661cbd2eeab", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/db7b1ebfb55d73be9350eeee3ed3e661cbd2eeab", "committedDate": "2020-08-18T18:35:15Z", "message": "revert authenticated-page"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a130317484b734068923aa848d3bfc349d337e42", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/a130317484b734068923aa848d3bfc349d337e42", "committedDate": "2020-08-18T18:28:26Z", "message": "check selected property in focus function"}, "afterCommit": {"oid": "db7b1ebfb55d73be9350eeee3ed3e661cbd2eeab", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/db7b1ebfb55d73be9350eeee3ed3e661cbd2eeab", "committedDate": "2020-08-18T18:35:15Z", "message": "revert authenticated-page"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d68c9bfd3420206f0df277b85b757a0175a8385", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/0d68c9bfd3420206f0df277b85b757a0175a8385", "committedDate": "2020-08-18T18:40:37Z", "message": "small change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NzcxMjg4", "url": "https://github.com/all-of-us/workbench/pull/3881#pullrequestreview-469771288", "createdAt": "2020-08-18T19:47:50Z", "commit": {"oid": "0d68c9bfd3420206f0df277b85b757a0175a8385"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTo0Nzo1MFrOHCjb1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTo1NDo0NVrOHCjpyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzOTc2Ng==", "bodyText": "Having a consistent \"success\" output should still be possible, for example:\nassert os.getenv('OWNER_EMAIL')\nassert os.getenv('WORKSPACE_CDR')\nassert os.getenv('WORKSPACE_NAMESPACE')\nassert os.getenv('GOOGLE_PROJECT') # same as WORKSPACE_NAMESPACE\nassert os.getenv('CLUSTER_NAME')\nassert os.getenv('WORKSPACE_BUCKET')\n\nprint('success')", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r472439766", "createdAt": "2020-08-18T19:47:50Z", "author": {"login": "calbach"}, "path": "e2e/tests/notebook/import-python-lib.spec.ts", "diffHunk": "@@ -0,0 +1,76 @@\n+import {findWorkspace, signIn} from 'utils/test-utils';\n+import DataPage, {TabLabelAlias} from 'app/page/data-page';\n+import {makeRandomName} from 'utils/str-utils';\n+import {config} from 'resources/workbench-config';\n+import * as fs from 'fs';\n+\n+// Notebook server start may take a long time. Set maximum test running time to 20 minutes.\n+jest.setTimeout(20 * 60 * 1000);\n+\n+describe('Import Python libraries', () => {\n+\n+  beforeEach(async () => {\n+    await signIn(page);\n+  });\n+\n+  test('Import os', async () => {\n+    let codeSnippet;\n+    try {\n+      codeSnippet = fs.readFileSync('resources/python-code/import-os.txt', 'utf8');\n+    } catch(e) {\n+      throw new Error(e);\n+    }\n+\n+    const workspaceCard = await findWorkspace(page);\n+    await workspaceCard.clickWorkspaceName();\n+\n+    const dataPage = new DataPage(page);\n+    const notebookName = makeRandomName('import-os');\n+    const notebook = await dataPage.createNotebook(notebookName);\n+    await notebook.waitForKernelIdle();\n+\n+    const cellIndex = 1;\n+    const outputText = await notebook.runCodeCell(cellIndex, {code: codeSnippet});\n+\n+    // Delete notebook\n+    const analysisPage = await notebook.goAnalysisPage();\n+    await dataPage.openTab(TabLabelAlias.Analysis);\n+    await analysisPage.deleteNotebook(notebookName);\n+\n+    // Partial values check: UserEmail and python3 path is expected to be printed out.\n+    const partialArray = [\n+      '/usr/local/bin/python3',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYzMjMxNg=="}, "originalCommit": {"oid": "d1228702bef4d3599d26169ad614869f614bd6ce"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0MDcyMA==", "bodyText": "I still think there's too much duplication. The only difference between these methods should be the input file. Even the output should be identical if you follow my other suggestion - else the helper can simply return the outputText and just handle the assertions in the test.", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r472440720", "createdAt": "2020-08-18T19:49:43Z", "author": {"login": "calbach"}, "path": "e2e/tests/notebook/import-python-lib.spec.ts", "diffHunk": "@@ -0,0 +1,50 @@\n+import {findWorkspace, signIn} from 'utils/test-utils';\n+import DataPage from 'app/page/data-page';\n+import {makeRandomName} from 'utils/str-utils';\n+import {config} from 'resources/workbench-config';\n+\n+// Notebook server start may take a long time. Set maximum test running time to 20 minutes.\n+jest.setTimeout(20 * 60 * 1000);\n+\n+describe('Import Python libraries', () => {\n+\n+  beforeEach(async () => {\n+    await signIn(page);\n+  });\n+\n+  test('Import os', async () => {\n+    const workspaceCard = await findWorkspace(page);\n+    await workspaceCard.clickWorkspaceName();\n+\n+    const dataPage = new DataPage(page);\n+    const notebookName = makeRandomName('import-os');\n+    const notebook = await dataPage.createNotebook(notebookName);\n+    const outputText = await notebook.runCodeCell(1, {codeFile: 'resources/python-code/import-os.py'});\n+\n+    await notebook.deleteNotebook(notebookName);\n+\n+    // Partial values check: UserEmail and python3 path is expected to be printed out.\n+    // rest of output strings vary per workspace.\n+    const partialArray = [\n+      '/usr/local/bin/python3',\n+      config.userEmail,\n+    ];\n+    const outputTextArray = outputText.split(/\\n/);\n+    expect(outputTextArray).toEqual(expect.arrayContaining(partialArray));\n+  });\n+\n+  test('Import common lib', async () => {\n+    const workspaceCard = await findWorkspace(page);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d68c9bfd3420206f0df277b85b757a0175a8385"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0MTgzMg==", "bodyText": "To be clear, the numbers shown in the Jupyter UI are not cell indices. They correspond to the execution history of the notebook. For example, you can execute the 4th cell before you execute the first one. If you do this, your notebook will look like:\n[2] cell0\n    cell1\n    cell2\n[1] cell3\n\nWhen you start the notebook, no cell will have this label. If you always execute the notebook in a linear fashion, then they will look like they are just 1-indexed cell labels, so I can see how this could be confusing to someone who is debugging the test.\nPersonally, I would still prefer 0-indexed here. This is probably what I would assume the test code would do, rather than yielding to the UI.", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r472441832", "createdAt": "2020-08-18T19:51:49Z", "author": {"login": "calbach"}, "path": "e2e/app/page/notebook-cell.ts", "diffHunk": "@@ -0,0 +1,177 @@\n+import {ElementHandle, Frame, Page} from 'puppeteer';\n+import {getPropValue} from 'utils/element-utils';\n+\n+export enum CellType {\n+  // To append to css selector\n+  Code = '.code_cell',\n+  Markdown = '.text_cell',\n+  Any = '',\n+}\n+\n+/**\n+ * Notebook Cell represents the root element that contains both the code input and output cells.\n+ */\n+export default class NotebookCell {\n+\n+  private readonly page: Page;\n+  private iframe: Frame; // Jupyter notebook iframe\n+  private cellIndex: number; // 1-based cell index because notebook cell prompt index starts from 1.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d68c9bfd3420206f0df277b85b757a0175a8385"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0MzMzNw==", "bodyText": "My constructor comment I don't think was addressed: inline private here to avoid boilerplate?", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r472443337", "createdAt": "2020-08-18T19:54:45Z", "author": {"login": "calbach"}, "path": "e2e/app/page/notebook-cell.ts", "diffHunk": "@@ -0,0 +1,177 @@\n+import {ElementHandle, Frame, Page} from 'puppeteer';\n+import {getPropValue} from 'utils/element-utils';\n+\n+export enum CellType {\n+  // To append to css selector\n+  Code = '.code_cell',\n+  Markdown = '.text_cell',\n+  Any = '',\n+}\n+\n+/**\n+ * Notebook Cell represents the root element that contains both the code input and output cells.\n+ */\n+export default class NotebookCell {\n+\n+  private readonly page: Page;\n+  private iframe: Frame; // Jupyter notebook iframe\n+  private cellIndex: number; // 1-based cell index because notebook cell prompt index starts from 1.\n+  private readonly cellType: CellType; // Markdown or Code cell.\n+\n+  /**\n+   *\n+   * @param {Page} page Puppeteer Page.\n+   * @param {CellType} cellType Cell type: Code or Markdown cell. Default value is Code cell.\n+   * @param {number} cellIndex 1-based cell index. Default value is 1.\n+   */\n+  constructor(page: Page, cellType: CellType = CellType.Code, cellIndex: number = 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d68c9bfd3420206f0df277b85b757a0175a8385"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29cc73c525f3beb3b38ceeccf344e40e5afe754f", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/29cc73c525f3beb3b38ceeccf344e40e5afe754f", "committedDate": "2020-08-19T19:02:39Z", "message": "rework notebook tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNTI4Mjg2", "url": "https://github.com/all-of-us/workbench/pull/3881#pullrequestreview-470528286", "createdAt": "2020-08-19T14:41:03Z", "commit": {"oid": "0d68c9bfd3420206f0df277b85b757a0175a8385"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDo0MTowM1rOHDKq0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNToyODoxOVrOHDMyVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4MjU3OQ==", "bodyText": "\u2714\ufe0e (overlooked first time)", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r473082579", "createdAt": "2020-08-19T14:41:03Z", "author": {"login": "aweng98"}, "path": "e2e/app/page/notebook-cell.ts", "diffHunk": "@@ -0,0 +1,177 @@\n+import {ElementHandle, Frame, Page} from 'puppeteer';\n+import {getPropValue} from 'utils/element-utils';\n+\n+export enum CellType {\n+  // To append to css selector\n+  Code = '.code_cell',\n+  Markdown = '.text_cell',\n+  Any = '',\n+}\n+\n+/**\n+ * Notebook Cell represents the root element that contains both the code input and output cells.\n+ */\n+export default class NotebookCell {\n+\n+  private readonly page: Page;\n+  private iframe: Frame; // Jupyter notebook iframe\n+  private cellIndex: number; // 1-based cell index because notebook cell prompt index starts from 1.\n+  private readonly cellType: CellType; // Markdown or Code cell.\n+\n+  /**\n+   *\n+   * @param {Page} page Puppeteer Page.\n+   * @param {CellType} cellType Cell type: Code or Markdown cell. Default value is Code cell.\n+   * @param {number} cellIndex 1-based cell index. Default value is 1.\n+   */\n+  constructor(page: Page, cellType: CellType = CellType.Code, cellIndex: number = 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0MzMzNw=="}, "originalCommit": {"oid": "0d68c9bfd3420206f0df277b85b757a0175a8385"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzExNzI3MA==", "bodyText": "Can I change your mind about 0-based cellIndex?\nI think 0-based cellIndex would be confusing to test author (non-dev QA engineer). For example, to find the first cell, code would have been written as\nnew NotebookCell(page, CellType.Code, 0); - to find cell0.\nThis code makes sense, take out guesswork:\nnew NotebookCell(page, CellType.Code, 1); - to find cell0.\nTo find the 4th cell, code is\nnew NotebookCell(page, CellType.Code, 4); - to find cell3.\nSo, it is the cell sequences in UI determines what the index to use. The numbers in cell prompt [1], [2] do not matter because they're not used at all in finding a cell.\nIn notebook-cell.ts, I'm using css :nth-child selector to find a cell. Css rule dictates the index of the first child is 1. If using 0-based index, I would have to subtract 1 from the index. It can be confusing.", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r473117270", "createdAt": "2020-08-19T15:28:19Z", "author": {"login": "aweng98"}, "path": "e2e/app/page/notebook-cell.ts", "diffHunk": "@@ -0,0 +1,177 @@\n+import {ElementHandle, Frame, Page} from 'puppeteer';\n+import {getPropValue} from 'utils/element-utils';\n+\n+export enum CellType {\n+  // To append to css selector\n+  Code = '.code_cell',\n+  Markdown = '.text_cell',\n+  Any = '',\n+}\n+\n+/**\n+ * Notebook Cell represents the root element that contains both the code input and output cells.\n+ */\n+export default class NotebookCell {\n+\n+  private readonly page: Page;\n+  private iframe: Frame; // Jupyter notebook iframe\n+  private cellIndex: number; // 1-based cell index because notebook cell prompt index starts from 1.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0MTgzMg=="}, "originalCommit": {"oid": "0d68c9bfd3420206f0df277b85b757a0175a8385"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e8bceb4abcbae007fa8bebcd482ff7989a04042", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/1e8bceb4abcbae007fa8bebcd482ff7989a04042", "committedDate": "2020-08-19T19:24:13Z", "message": "r test fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwODIwMTU2", "url": "https://github.com/all-of-us/workbench/pull/3881#pullrequestreview-470820156", "createdAt": "2020-08-19T19:57:44Z", "commit": {"oid": "0d68c9bfd3420206f0df277b85b757a0175a8385"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo1Nzo0NFrOHDW8jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo1Nzo0NFrOHDW8jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4MzcyNw==", "bodyText": "If I understand your argument, you're saying that you're making it easy for non-coders by using 1-based indexing which they are probably more familiar with than 0-indexing. If so, this is just doing a disservice to them: just use standard coding practices so they can learn the standards. The nth-child CSS selector is an implementation detail that the test writer does not need to concern themselves with.\nSo, I'm not convinced. But also I don't feel strongly enough to block the review. Fine to merge for now, happy to discuss more if you are not convinced whether this is worth changing in a follow-up.", "url": "https://github.com/all-of-us/workbench/pull/3881#discussion_r473283727", "createdAt": "2020-08-19T19:57:44Z", "author": {"login": "calbach"}, "path": "e2e/app/page/notebook-cell.ts", "diffHunk": "@@ -0,0 +1,177 @@\n+import {ElementHandle, Frame, Page} from 'puppeteer';\n+import {getPropValue} from 'utils/element-utils';\n+\n+export enum CellType {\n+  // To append to css selector\n+  Code = '.code_cell',\n+  Markdown = '.text_cell',\n+  Any = '',\n+}\n+\n+/**\n+ * Notebook Cell represents the root element that contains both the code input and output cells.\n+ */\n+export default class NotebookCell {\n+\n+  private readonly page: Page;\n+  private iframe: Frame; // Jupyter notebook iframe\n+  private cellIndex: number; // 1-based cell index because notebook cell prompt index starts from 1.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0MTgzMg=="}, "originalCommit": {"oid": "0d68c9bfd3420206f0df277b85b757a0175a8385"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4269, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}