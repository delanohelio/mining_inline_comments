{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NDg5NTI2", "number": 3779, "title": "[RW-5028][RISK=NO] use partition time to scan many fewer partitions", "bodyText": "The Audit table in BigQuery is ingestion-time partitioned, which means any time range of interest only spans a subset of partitions. By specifying start and end partition times based on the after and before parameters of the audit APIs, we can significantly reduce the time to query this information. In the handful of tests I've done, it's cut something like 750 ms off of the ~2-3 second query.\nTruncated the query output test, as I was just waiting for that to bite me again. I'm not sure the best way to test something like that.\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n I have run the E2E tests on ths change against my local UI + API server with yarn test-local\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-07-13T21:06:32Z", "url": "https://github.com/all-of-us/workbench/pull/3779", "merged": true, "mergeCommit": {"oid": "3e9dd86484b86c3e259e042ea328fe38992dbea3"}, "closed": true, "closedAt": "2020-07-20T14:53:29Z", "author": {"login": "jaycarlton"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0n82DAH2gAyNDQ4NDg5NTI2OjY4ODU1MGIxZmI5MzAxMGNmYTk1OTA2OTQ4ZjFhYTdlYWQzOWQyY2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc2yha6gFqTQ1MTY2MTM0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "688550b1fb93010cfa95906948f1aa7ead39d2cb", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/688550b1fb93010cfa95906948f1aa7ead39d2cb", "committedDate": "2020-07-13T21:02:54Z", "message": "use partition time to scan many fewer partitions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NDgxMTI4", "url": "https://github.com/all-of-us/workbench/pull/3779#pullrequestreview-448481128", "createdAt": "2020-07-14T21:31:00Z", "commit": {"oid": "688550b1fb93010cfa95906948f1aa7ead39d2cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTozMTowMVrOGxmF7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTozMTowMVrOGxmF7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1NzUxNw==", "bodyText": "Will @after always be equal to a day boundary?  If not, this query will miss 23:59:59 worth of events in the worst case.  Choosing (@after - 1 day <= partition) is safer, and only scans 1 extraneous partition in the worst case.\nActually... are we guaranteed to have a partition daily?  Maybe increase that safety buffer.\nThe @before check looks fine.", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r454657517", "createdAt": "2020-07-14T21:31:01Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -38,11 +38,13 @@\n           + \"  jsonPayload.prev_value AS prev_value,\\n\"\n           + \"  jsonPayload.new_value AS new_value\\n\"\n           + \"FROM %s\\n\"\n-          + \"WHERE %s AND\\n\"\n-          + \"  @after <= TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) AND\\n\"\n-          + \"  TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) < @before\\n\"\n+          + \"WHERE %s\\n\"\n+          + \"  AND @after <= TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64))\\n\"\n+          + \"  AND TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) < @before\\n\"\n+          + \"  AND @after <= _PARTITIONTIME\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688550b1fb93010cfa95906948f1aa7ead39d2cb"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a96bff26828002d0a69979aad4d9ebb3c1687ed", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/9a96bff26828002d0a69979aad4d9ebb3c1687ed", "committedDate": "2020-07-15T13:43:00Z", "message": "Merge branch 'master' into jaycarlton/RW-5078"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0cb0a5ed07faf24a7a8c983cc3ec37580582846", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/d0cb0a5ed07faf24a7a8c983cc3ec37580582846", "committedDate": "2020-07-15T20:55:20Z", "message": "fix partition times, remove joda-time, and make query replacement method work with substrings of parameter names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c681e9032247570aab4673d99a0516f70fe8cbdb", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/c681e9032247570aab4673d99a0516f70fe8cbdb", "committedDate": "2020-07-15T21:10:28Z", "message": "move utility methods to shared util class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5OTU3MzQ1", "url": "https://github.com/all-of-us/workbench/pull/3779#pullrequestreview-449957345", "createdAt": "2020-07-16T15:22:48Z", "commit": {"oid": "c681e9032247570aab4673d99a0516f70fe8cbdb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNToyMjo0OFrOGywHiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNToyMjo0OFrOGywHiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg3MDM0Nw==", "bodyText": "It just now occurred to me that I can use regex Patterns with word boundaries to solve this issue, and avoid re-sorting the whole list and lots of this code. All in favor of less code in this function?", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r455870347", "createdAt": "2020-07-16T15:22:48Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/cohortbuilder/util/BQParameterUtil.java", "diffHunk": "@@ -1,16 +1,78 @@\n package org.pmiops.workbench.cohortbuilder.util;\n \n+import com.google.cloud.bigquery.QueryJobConfiguration;\n import com.google.cloud.bigquery.QueryParameterValue;\n+import com.google.cloud.bigquery.StandardSQLTypeName;\n+import java.time.Instant;\n+import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n \n public final class BQParameterUtil {\n+  private static final int MICROSECONDS_IN_MILLISECOND = 1000;\n \n   /** Generate a unique parameter name and add it to the parameter map provided. */\n   public static String buildParameter(\n       Map<String, QueryParameterValue> queryParameterValueMap,\n       QueryParameterValue queryParameterValue) {\n     String parameterName = \"p\" + queryParameterValueMap.size();\n     queryParameterValueMap.put(parameterName, queryParameterValue);\n+    return decorateParameterName(parameterName);\n+  }\n+\n+  public static QueryParameterValue instantToQPValue(Instant instant) {\n+    return QueryParameterValue.timestamp(instant.toEpochMilli() * MICROSECONDS_IN_MILLISECOND);\n+  }\n+\n+  // Since BigQuery doesn't expose the literal query string built from a QueryJobConfiguration,\n+  // this method does the next best thing. Useful for diagnostics, logging, testing, etc.\n+  public static String getReplacedQueryText(QueryJobConfiguration queryJobConfiguration) {\n+    String result = \"-- reconstructed query text\\n\" + queryJobConfiguration.getQuery();\n+    final Map<String, QueryParameterValue> keyToNamedParameter =\n+        queryJobConfiguration.getNamedParameters().entrySet().stream()\n+            .collect(Collectors.toMap(e -> decorateParameterName(e.getKey()), Entry::getValue));\n+\n+    // Sort in reverse lenght order so we don't partially replace any parameter names (e.g. replace\n+    // \"@foo\" before \"@foo_bar\").\n+    final List<String> keysByLengthDesc =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c681e9032247570aab4673d99a0516f70fe8cbdb"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5OTgzMjUz", "url": "https://github.com/all-of-us/workbench/pull/3779#pullrequestreview-449983253", "createdAt": "2020-07-16T15:50:42Z", "commit": {"oid": "c681e9032247570aab4673d99a0516f70fe8cbdb"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo1MDo0M1rOGyxUqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo1NDoxOFrOGyxe9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MDA4OQ==", "bodyText": "not sure this is needed but it doesn't cost us much", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r455890089", "createdAt": "2020-07-16T15:50:43Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -117,38 +118,20 @@ public UserAuditLogQueryResponse queryEventsForUser(\n     return new UserAuditLogQueryResponse()\n         .actions(auditLogEntryMapper.logEntriesToActions(logEntries))\n         .logEntries(logEntries)\n-        .query(getReplacedQueryText(queryJobConfiguration))\n+        .query(BQParameterUtil.getReplacedQueryText(queryJobConfiguration))\n         .userDatabaseId(userDatabaseId);\n   }\n \n   private ImmutableMap.Builder<String, QueryParameterValue> getNamedParameterMapBuilder(\n-      long limit, DateTime after, DateTime before) {\n+      long limit, Instant after, Instant before) {\n+    final Instant afterPartitionTime = after.minus(PARTITION_BUFFER);\n+    final Instant beforePartitionTime = before.plus(PARTITION_BUFFER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c681e9032247570aab4673d99a0516f70fe8cbdb"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MjcyNg==", "bodyText": "these look right but could you swap the order?", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r455892726", "createdAt": "2020-07-16T15:54:18Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceTest.java", "diffHunk": "@@ -176,9 +168,27 @@ public void testQueryUserEvents() {\n \n     final UserAuditLogQueryResponse response =\n         actionAuditQueryService.queryEventsForUser(\n-            USER_DB_ID, DEFAULT_LIMIT, DEFAULT_AFTER_INCLUSIVE, DEFAULT_BEFORE_EXCLUSIVE);\n+            USER_DB_ID, DEFAULT_LIMIT, DEFAULT_AFTER, DEFAULT_BEFORE);\n     assertThat(response.getLogEntries()).isEmpty();\n     assertThat(response.getUserDatabaseId()).isEqualTo(USER_DB_ID);\n     assertThat(response.getQuery()).contains(\"SELECT\");\n   }\n+\n+  @Test\n+  public void testPartitionTimeBuffer() {\n+    doReturn(EMPTY_RESULT).when(mockBigQueryService).executeQuery(any(QueryJobConfiguration.class));\n+    final Instant after = Instant.parse(\"2020-03-10T09:30:00.00Z\");\n+    final Instant before = after.plus(Duration.ofDays(5));\n+\n+    final UserAuditLogQueryResponse response =\n+        actionAuditQueryService.queryEventsForUser(USER_DB_ID, DEFAULT_LIMIT, after, before);\n+\n+    final String query = response.getQuery();\n+    assertThat(query)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c681e9032247570aab4673d99a0516f70fe8cbdb"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2f526c776b32dedb9b8ac95177edeee5386b266", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/d2f526c776b32dedb9b8ac95177edeee5386b266", "committedDate": "2020-07-16T18:48:13Z", "message": "fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab3807782d0fd7d977094e60919256403310d73f", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/ab3807782d0fd7d977094e60919256403310d73f", "committedDate": "2020-07-16T20:12:53Z", "message": "format query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b717a2e05884da075191e1723ee91dfeffb58835", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/b717a2e05884da075191e1723ee91dfeffb58835", "committedDate": "2020-07-16T20:36:08Z", "message": "Merge branch 'master' into jaycarlton/RW-5078"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c50a928a6491aecfe0ce1e30e93e12a9ff413b14", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/c50a928a6491aecfe0ce1e30e93e12a9ff413b14", "committedDate": "2020-07-17T18:24:44Z", "message": "spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbce6d1ff1a91a7fd697fb97693b35da04d892f3", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/bbce6d1ff1a91a7fd697fb97693b35da04d892f3", "committedDate": "2020-07-17T18:40:36Z", "message": "fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa73858d031ce662c6f7c9ec5dc371ffc1357bcf", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/aa73858d031ce662c6f7c9ec5dc371ffc1357bcf", "committedDate": "2020-07-17T18:58:39Z", "message": "back out the header comment; was having issues in formatting and serialization"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNjU2NDY3", "url": "https://github.com/all-of-us/workbench/pull/3779#pullrequestreview-451656467", "createdAt": "2020-07-20T14:24:52Z", "commit": {"oid": "aa73858d031ce662c6f7c9ec5dc371ffc1357bcf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoyNDo1MlrOG0PlRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoyNDo1MlrOG0PlRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzNDQzOA==", "bodyText": "Should this be .02Z like the others?", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r457434438", "createdAt": "2020-07-20T14:24:52Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceTest.java", "diffHunk": "@@ -56,8 +57,8 @@\n   private static final long AGENT_ID = 202L;\n   private static final String ACTION_ID_1 = \"abfcb9ed-fa65-4e98-acb2-08b0d8b30000\";\n   private static final String USERNAME = \"jay@unit-test-aou.org\";\n-  private static final DateTime EVENT_DATETIME = DateTime.parse(\"2010-06-30T01:20+02:00\");\n-  public static final long EVENT_TIME_SECONDS = EVENT_DATETIME.getMillis() / 1000;\n+  private static final Instant EVENT_INSTANT = Instant.parse(\"2010-06-30T01:20:00.00Z\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa73858d031ce662c6f7c9ec5dc371ffc1357bcf"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNjYxMzQ5", "url": "https://github.com/all-of-us/workbench/pull/3779#pullrequestreview-451661349", "createdAt": "2020-07-20T14:29:45Z", "commit": {"oid": "aa73858d031ce662c6f7c9ec5dc371ffc1357bcf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4452, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}