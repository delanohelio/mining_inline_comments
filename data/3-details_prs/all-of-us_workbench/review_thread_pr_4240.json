{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MjQzMTcx", "number": 4240, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODo0ODozNVrOE077_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMDo1NDo1M1rOE11zLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTQzNDIzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/api/WorkspacesController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODo0ODozNVrOHs8Elg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODo0ODozNVrOHs8Elg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg4MzYwNg==", "bodyText": "opt nit: I would probably just inline this below, but personal preference", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r516883606", "createdAt": "2020-11-03T18:48:35Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/api/WorkspacesController.java", "diffHunk": "@@ -963,4 +964,17 @@ private void recordOperationTime(Runnable operation, String operationName) {\n         DistributionMetric.WORKSPACE_OPERATION_TIME,\n         operation);\n   }\n+\n+  public ResponseEntity<WorkspaceCreatorFreeCreditsRemainingResponse>\n+      getWorkspaceCreatorFreeCreditsRemaining(String workspaceNamespace, String workspaceId) {\n+    workspaceService.enforceWorkspaceAccessLevelAndRegisteredAuthDomain(\n+        workspaceNamespace, workspaceId, WorkspaceAccessLevel.WRITER);\n+    DbWorkspace dbWorkspace = workspaceService.getRequired(workspaceNamespace, workspaceId);\n+    double freeCreditsRemaining =\n+        freeTierBillingService.getWorkspaceCreatorFreeCreditsRemaining(dbWorkspace);\n+    WorkspaceCreatorFreeCreditsRemainingResponse response =\n+        new WorkspaceCreatorFreeCreditsRemainingResponse()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTQ0MTY5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODo1MDo0MFrOHs8JLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODo1MDo0MFrOHs8JLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg4NDc4Mg==", "bodyText": "opt: Math.max(creatorFreeCreditsRemaining, 0); probably more readable than the ternary", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r516884782", "createdAt": "2020-11-03T18:50:40Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -348,4 +348,21 @@ public boolean maybeSetDollarLimitOverride(DbUser user, double newDollarLimit) {\n   public Map<Long, Double> getUserIdToTotalCost() {\n     return workspaceFreeTierUsageDao.getUserIdToTotalCost();\n   }\n+\n+  /**\n+   * Given a workspace, find the amount of free credits that the workspace creator has left.\n+   *\n+   * @param dbWorkspace The workspace for which to find its creator's free credits remaining\n+   * @return The amount of free credits in USD the workspace creator has left, represented as a\n+   *     double\n+   */\n+  public double getWorkspaceCreatorFreeCreditsRemaining(DbWorkspace dbWorkspace) {\n+    Double creatorCachedFreeTierUsage = this.getCachedFreeTierUsage(dbWorkspace.getCreator());\n+    Double creatorFreeTierDollarLimit = this.getUserFreeTierDollarLimit(dbWorkspace.getCreator());\n+    double creatorFreeCreditsRemaining =\n+        creatorCachedFreeTierUsage == null\n+            ? creatorFreeTierDollarLimit\n+            : creatorFreeTierDollarLimit - creatorCachedFreeTierUsage;\n+    return creatorFreeCreditsRemaining > 0 ? creatorFreeCreditsRemaining : 0.0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTQ1NzM0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/help-sidebar.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODo1NToxN1rOHs8TCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODo1NToxN1rOHs8TCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg4NzMwNg==", "bodyText": "nit: destructuring would make these two lines a bit shorter", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r516887306", "createdAt": "2020-11-03T18:55:17Z", "author": {"login": "calbach"}, "path": "ui/src/app/components/help-sidebar.tsx", "diffHunk": "@@ -382,14 +385,17 @@ export const HelpSidebar = fp.flow(\n       }\n     });\n \n-    componentDidMount(): void {\n+    async componentDidMount() {\n+      const {namespace, id} = this.props.workspace;\n       this.subscription = participantStore.subscribe(participant => this.setState({participant}));\n       this.subscription.add(setSidebarActiveIconStore.subscribe(activeIcon => {\n         if (activeIcon !== null) {\n           this.setState({activeIcon});\n           this.props.setSidebarState(!!activeIcon);\n         }\n       }));\n+      const workspaceCreatorFreeCreditsRemainingResponse = await workspacesApi().getWorkspaceCreatorFreeCreditsRemaining(namespace, id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTQ2MjIxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/help-sidebar.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODo1Njo1MVrOHs8WMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNjo0MToyMlrOHtggTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg4ODExNA==", "bodyText": "I'm worried this may be a bit chatty - can you try watching the network tab while navigating around a bit locally? If this only gets triggered across workspace changes, that's probably fine. If it's more frequently than that we may want to move this", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r516888114", "createdAt": "2020-11-03T18:56:51Z", "author": {"login": "calbach"}, "path": "ui/src/app/components/help-sidebar.tsx", "diffHunk": "@@ -382,14 +385,17 @@ export const HelpSidebar = fp.flow(\n       }\n     });\n \n-    componentDidMount(): void {\n+    async componentDidMount() {\n+      const {namespace, id} = this.props.workspace;\n       this.subscription = participantStore.subscribe(participant => this.setState({participant}));\n       this.subscription.add(setSidebarActiveIconStore.subscribe(activeIcon => {\n         if (activeIcon !== null) {\n           this.setState({activeIcon});\n           this.props.setSidebarState(!!activeIcon);\n         }\n       }));\n+      const workspaceCreatorFreeCreditsRemainingResponse = await workspacesApi().getWorkspaceCreatorFreeCreditsRemaining(namespace, id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ4MDUyNA==", "bodyText": "this gets triggered on workspace changes and on moving from the data panel to the analysis panel for the first time, because the help sidebar has different content for that. I will give making this call in the runtime panel another go.", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r517480524", "createdAt": "2020-11-04T16:41:22Z", "author": {"login": "als364"}, "path": "ui/src/app/components/help-sidebar.tsx", "diffHunk": "@@ -382,14 +385,17 @@ export const HelpSidebar = fp.flow(\n       }\n     });\n \n-    componentDidMount(): void {\n+    async componentDidMount() {\n+      const {namespace, id} = this.props.workspace;\n       this.subscription = participantStore.subscribe(participant => this.setState({participant}));\n       this.subscription.add(setSidebarActiveIconStore.subscribe(activeIcon => {\n         if (activeIcon !== null) {\n           this.setState({activeIcon});\n           this.props.setSidebarState(!!activeIcon);\n         }\n       }));\n+      const workspaceCreatorFreeCreditsRemainingResponse = await workspacesApi().getWorkspaceCreatorFreeCreditsRemaining(namespace, id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg4ODExNA=="}, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTQ2NDk2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/help-sidebar.tsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODo1NzozOFrOHs8X5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODo1NTo1N1rOHtliDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg4ODU1MQ==", "bodyText": "Why put the state here rather than just in the runtime panel?", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r516888551", "createdAt": "2020-11-03T18:57:38Z", "author": {"login": "calbach"}, "path": "ui/src/app/components/help-sidebar.tsx", "diffHunk": "@@ -382,14 +385,17 @@ export const HelpSidebar = fp.flow(\n       }\n     });\n \n-    componentDidMount(): void {\n+    async componentDidMount() {\n+      const {namespace, id} = this.props.workspace;\n       this.subscription = participantStore.subscribe(participant => this.setState({participant}));\n       this.subscription.add(setSidebarActiveIconStore.subscribe(activeIcon => {\n         if (activeIcon !== null) {\n           this.setState({activeIcon});\n           this.props.setSidebarState(!!activeIcon);\n         }\n       }));\n+      const workspaceCreatorFreeCreditsRemainingResponse = await workspacesApi().getWorkspaceCreatorFreeCreditsRemaining(namespace, id);\n+      this.setState({workspaceCreatorFreeCreditsRemaining: workspaceCreatorFreeCreditsRemainingResponse.freeCreditsRemaining});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQzMzMxMA==", "bodyText": "argh, my comment on this earlier didn't post: I was struggling to make async calls compile inside the RuntimePanel. I can have another crack at it though.", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r517433310", "createdAt": "2020-11-04T15:36:38Z", "author": {"login": "als364"}, "path": "ui/src/app/components/help-sidebar.tsx", "diffHunk": "@@ -382,14 +385,17 @@ export const HelpSidebar = fp.flow(\n       }\n     });\n \n-    componentDidMount(): void {\n+    async componentDidMount() {\n+      const {namespace, id} = this.props.workspace;\n       this.subscription = participantStore.subscribe(participant => this.setState({participant}));\n       this.subscription.add(setSidebarActiveIconStore.subscribe(activeIcon => {\n         if (activeIcon !== null) {\n           this.setState({activeIcon});\n           this.props.setSidebarState(!!activeIcon);\n         }\n       }));\n+      const workspaceCreatorFreeCreditsRemainingResponse = await workspacesApi().getWorkspaceCreatorFreeCreditsRemaining(namespace, id);\n+      this.setState({workspaceCreatorFreeCreditsRemaining: workspaceCreatorFreeCreditsRemainingResponse.freeCreditsRemaining});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg4ODU1MQ=="}, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU2Mjg5NQ==", "bodyText": "Probably you'll need useEffect. The current way is not terrible, so I don't feel too strongly on this point if you can't get this working or it's messy.", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r517562895", "createdAt": "2020-11-04T18:55:57Z", "author": {"login": "calbach"}, "path": "ui/src/app/components/help-sidebar.tsx", "diffHunk": "@@ -382,14 +385,17 @@ export const HelpSidebar = fp.flow(\n       }\n     });\n \n-    componentDidMount(): void {\n+    async componentDidMount() {\n+      const {namespace, id} = this.props.workspace;\n       this.subscription = participantStore.subscribe(participant => this.setState({participant}));\n       this.subscription.add(setSidebarActiveIconStore.subscribe(activeIcon => {\n         if (activeIcon !== null) {\n           this.setState({activeIcon});\n           this.props.setSidebarState(!!activeIcon);\n         }\n       }));\n+      const workspaceCreatorFreeCreditsRemainingResponse = await workspacesApi().getWorkspaceCreatorFreeCreditsRemaining(namespace, id);\n+      this.setState({workspaceCreatorFreeCreditsRemaining: workspaceCreatorFreeCreditsRemainingResponse.freeCreditsRemaining});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg4ODU1MQ=="}, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTQ3NDM4OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTowMDoxNlrOHs8dnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTowMDoxNlrOHs8dnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5MDAxMg==", "bodyText": "opt: I like the word Estimator from your PR description slightly better than Predictor.", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r516890012", "createdAt": "2020-11-03T19:00:16Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -211,24 +226,149 @@ const DataProcConfigSelector = ({onChange, dataprocConfig})  => {\n   </fieldset>;\n };\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withCdrVersions())(({workspace, cdrVersionListResponse}) => {\n+const PresetSelector = ({hasMicroarrayData, setSelectedDiskSize, setSelectedMachine, setSelectedCompute, setSelectedDataprocConfig}) => {\n+  {/* Recommended runtime: pick from default templates or change the image. */}\n+  return <PopupTrigger side='bottom'\n+                closeOnClick\n+                content={\n+                  <React.Fragment>\n+                    {\n+                      fp.flow(\n+                        fp.filter(({runtimeTemplate}) => hasMicroarrayData || !runtimeTemplate.dataprocConfig),\n+                        fp.toPairs,\n+                        fp.map(([i, preset]) => {\n+                          return <MenuItem\n+                                style={styles.presetMenuItem}\n+                                key={i}\n+                                aria-label={preset.displayName}\n+                                onClick={() => {\n+                                  // renaming to avoid shadowing\n+                                  const {runtimeTemplate} = preset;\n+                                  const {presetDiskSize, presetMachineName, presetCompute} = fp.cond([\n+                                    // Can't destructure due to shadowing.\n+                                    [() => !!runtimeTemplate.gceConfig, (tmpl: Runtime) => ({\n+                                      presetDiskSize: tmpl.gceConfig.diskSize,\n+                                      presetMachineName: tmpl.gceConfig.machineType,\n+                                      presetCompute: ComputeType.Standard\n+                                    })],\n+                                    [() => !!runtimeTemplate.dataprocConfig, ({dataprocConfig: {masterDiskSize, masterMachineType}}) => ({\n+                                      presetDiskSize: masterDiskSize,\n+                                      presetMachineName: masterMachineType,\n+                                      presetCompute: ComputeType.Dataproc\n+                                    })]\n+                                  ])(runtimeTemplate);\n+                                  const presetMachineType = fp.find(({name}) => name === presetMachineName, validLeonardoMachineTypes);\n+\n+                                  setSelectedDiskSize(presetDiskSize);\n+                                  setSelectedMachine(presetMachineType);\n+                                  setSelectedCompute(presetCompute);\n+                                  setSelectedDataprocConfig(runtimeTemplate.dataprocConfig);\n+                                }}>\n+                              {preset.displayName}\n+                            </MenuItem>;\n+                        })\n+                      )(runtimePresets)\n+                    }\n+                  </React.Fragment>\n+                }>\n+    <Clickable data-test-id='runtime-presets-menu'>\n+      Recommended environments <ClrIcon shape='caret down'/>\n+    </Clickable>\n+  </PopupTrigger>;\n+};\n+\n+const CostPredictor = ({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTQ3OTU0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTowMTo0NFrOHs8gxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTowMTo0NFrOHs8gxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5MDgyMQ==", "bodyText": "s/owner/creator/", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r516890821", "createdAt": "2020-11-03T19:01:44Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -211,24 +226,149 @@ const DataProcConfigSelector = ({onChange, dataprocConfig})  => {\n   </fieldset>;\n };\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withCdrVersions())(({workspace, cdrVersionListResponse}) => {\n+const PresetSelector = ({hasMicroarrayData, setSelectedDiskSize, setSelectedMachine, setSelectedCompute, setSelectedDataprocConfig}) => {\n+  {/* Recommended runtime: pick from default templates or change the image. */}\n+  return <PopupTrigger side='bottom'\n+                closeOnClick\n+                content={\n+                  <React.Fragment>\n+                    {\n+                      fp.flow(\n+                        fp.filter(({runtimeTemplate}) => hasMicroarrayData || !runtimeTemplate.dataprocConfig),\n+                        fp.toPairs,\n+                        fp.map(([i, preset]) => {\n+                          return <MenuItem\n+                                style={styles.presetMenuItem}\n+                                key={i}\n+                                aria-label={preset.displayName}\n+                                onClick={() => {\n+                                  // renaming to avoid shadowing\n+                                  const {runtimeTemplate} = preset;\n+                                  const {presetDiskSize, presetMachineName, presetCompute} = fp.cond([\n+                                    // Can't destructure due to shadowing.\n+                                    [() => !!runtimeTemplate.gceConfig, (tmpl: Runtime) => ({\n+                                      presetDiskSize: tmpl.gceConfig.diskSize,\n+                                      presetMachineName: tmpl.gceConfig.machineType,\n+                                      presetCompute: ComputeType.Standard\n+                                    })],\n+                                    [() => !!runtimeTemplate.dataprocConfig, ({dataprocConfig: {masterDiskSize, masterMachineType}}) => ({\n+                                      presetDiskSize: masterDiskSize,\n+                                      presetMachineName: masterMachineType,\n+                                      presetCompute: ComputeType.Dataproc\n+                                    })]\n+                                  ])(runtimeTemplate);\n+                                  const presetMachineType = fp.find(({name}) => name === presetMachineName, validLeonardoMachineTypes);\n+\n+                                  setSelectedDiskSize(presetDiskSize);\n+                                  setSelectedMachine(presetMachineType);\n+                                  setSelectedCompute(presetCompute);\n+                                  setSelectedDataprocConfig(runtimeTemplate.dataprocConfig);\n+                                }}>\n+                              {preset.displayName}\n+                            </MenuItem>;\n+                        })\n+                      )(runtimePresets)\n+                    }\n+                  </React.Fragment>\n+                }>\n+    <Clickable data-test-id='runtime-presets-menu'>\n+      Recommended environments <ClrIcon shape='caret down'/>\n+    </Clickable>\n+  </PopupTrigger>;\n+};\n+\n+const CostPredictor = ({\n+  freeCreditsRemaining,\n+  profile,\n+  runningCost,\n+  runningCostBreakdown,\n+  runtimeChanged,\n+  storageCost,\n+  storageCostBreakdown,\n+  workspace\n+}) => {\n+  const wrapperStyle = runtimeChanged\n+    ? {...styles.costPredictorWrapper, backgroundColor: colorWithWhiteness(colors.warning, .9), borderColor: colors.warning}\n+    : styles.costPredictorWrapper;\n+  return <FlexRow\n+    style={wrapperStyle}\n+  >\n+    <FlexRow style={{minWidth: '250px', margin: '.33rem .5rem'}}>\n+      <FlexColumn style={{marginRight: '1rem'}}>\n+        <div style={{fontSize: '10px', fontWeight: 600}}>Cost when running</div>\n+        <TooltipTrigger content={\n+          <div>\n+            <div>Cost Breakdown</div>\n+            {runningCostBreakdown.map((lineItem, i) => <div key={i}>{lineItem}</div>)}\n+          </div>\n+        }>\n+          <div style={{fontSize: '20px', color: colors.accent}}>{formatUsd(runningCost)}/hr</div>\n+        </TooltipTrigger>\n+      </FlexColumn>\n+      <FlexColumn>\n+        <div style={{fontSize: '10px', fontWeight: 600}}>Cost when paused</div>\n+        <TooltipTrigger content={\n+          <div>\n+            <div>Cost Breakdown</div>\n+            {storageCostBreakdown.map((lineItem, i) => <div key={i}>{lineItem}</div>)}\n+          </div>\n+        }>\n+          <div style={{fontSize: '20px', color: colors.accent}}>{formatUsd(storageCost)}/hr</div>\n+        </TooltipTrigger>\n+      </FlexColumn>\n+    </FlexRow>\n+    {\n+      workspace.billingAccountType === BillingAccountType.FREETIER\n+      && profile.username === workspace.creator\n+      && <div style={{borderLeft: `1px solid ${colorWithWhiteness(colors.dark, .5)}`, padding: '.33rem .5rem'}}>\n+        Costs will draw from your remaining {formatUsd(freeCreditsRemaining)} of free credits.\n+      </div>\n+    }\n+    {\n+      workspace.billingAccountType === BillingAccountType.FREETIER\n+      && profile.username !== workspace.creator\n+      && <div style={{borderLeft: `1px solid ${colorWithWhiteness(colors.dark, .5)}`, padding: '.33rem .5rem'}}>\n+        Costs will draw from workspace owner's remaining {formatUsd(freeCreditsRemaining)} of free credits.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTQ4MjYyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTowMjozNlrOHs8imA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTowMjozNlrOHs8imA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5MTI4OA==", "bodyText": "nit: wrap div?", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r516891288", "createdAt": "2020-11-03T19:02:36Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -211,24 +226,149 @@ const DataProcConfigSelector = ({onChange, dataprocConfig})  => {\n   </fieldset>;\n };\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withCdrVersions())(({workspace, cdrVersionListResponse}) => {\n+const PresetSelector = ({hasMicroarrayData, setSelectedDiskSize, setSelectedMachine, setSelectedCompute, setSelectedDataprocConfig}) => {\n+  {/* Recommended runtime: pick from default templates or change the image. */}\n+  return <PopupTrigger side='bottom'\n+                closeOnClick\n+                content={\n+                  <React.Fragment>\n+                    {\n+                      fp.flow(\n+                        fp.filter(({runtimeTemplate}) => hasMicroarrayData || !runtimeTemplate.dataprocConfig),\n+                        fp.toPairs,\n+                        fp.map(([i, preset]) => {\n+                          return <MenuItem\n+                                style={styles.presetMenuItem}\n+                                key={i}\n+                                aria-label={preset.displayName}\n+                                onClick={() => {\n+                                  // renaming to avoid shadowing\n+                                  const {runtimeTemplate} = preset;\n+                                  const {presetDiskSize, presetMachineName, presetCompute} = fp.cond([\n+                                    // Can't destructure due to shadowing.\n+                                    [() => !!runtimeTemplate.gceConfig, (tmpl: Runtime) => ({\n+                                      presetDiskSize: tmpl.gceConfig.diskSize,\n+                                      presetMachineName: tmpl.gceConfig.machineType,\n+                                      presetCompute: ComputeType.Standard\n+                                    })],\n+                                    [() => !!runtimeTemplate.dataprocConfig, ({dataprocConfig: {masterDiskSize, masterMachineType}}) => ({\n+                                      presetDiskSize: masterDiskSize,\n+                                      presetMachineName: masterMachineType,\n+                                      presetCompute: ComputeType.Dataproc\n+                                    })]\n+                                  ])(runtimeTemplate);\n+                                  const presetMachineType = fp.find(({name}) => name === presetMachineName, validLeonardoMachineTypes);\n+\n+                                  setSelectedDiskSize(presetDiskSize);\n+                                  setSelectedMachine(presetMachineType);\n+                                  setSelectedCompute(presetCompute);\n+                                  setSelectedDataprocConfig(runtimeTemplate.dataprocConfig);\n+                                }}>\n+                              {preset.displayName}\n+                            </MenuItem>;\n+                        })\n+                      )(runtimePresets)\n+                    }\n+                  </React.Fragment>\n+                }>\n+    <Clickable data-test-id='runtime-presets-menu'>\n+      Recommended environments <ClrIcon shape='caret down'/>\n+    </Clickable>\n+  </PopupTrigger>;\n+};\n+\n+const CostPredictor = ({\n+  freeCreditsRemaining,\n+  profile,\n+  runningCost,\n+  runningCostBreakdown,\n+  runtimeChanged,\n+  storageCost,\n+  storageCostBreakdown,\n+  workspace\n+}) => {\n+  const wrapperStyle = runtimeChanged\n+    ? {...styles.costPredictorWrapper, backgroundColor: colorWithWhiteness(colors.warning, .9), borderColor: colors.warning}\n+    : styles.costPredictorWrapper;\n+  return <FlexRow\n+    style={wrapperStyle}\n+  >\n+    <FlexRow style={{minWidth: '250px', margin: '.33rem .5rem'}}>\n+      <FlexColumn style={{marginRight: '1rem'}}>\n+        <div style={{fontSize: '10px', fontWeight: 600}}>Cost when running</div>\n+        <TooltipTrigger content={\n+          <div>\n+            <div>Cost Breakdown</div>\n+            {runningCostBreakdown.map((lineItem, i) => <div key={i}>{lineItem}</div>)}\n+          </div>\n+        }>\n+          <div style={{fontSize: '20px', color: colors.accent}}>{formatUsd(runningCost)}/hr</div>\n+        </TooltipTrigger>\n+      </FlexColumn>\n+      <FlexColumn>\n+        <div style={{fontSize: '10px', fontWeight: 600}}>Cost when paused</div>\n+        <TooltipTrigger content={\n+          <div>\n+            <div>Cost Breakdown</div>\n+            {storageCostBreakdown.map((lineItem, i) => <div key={i}>{lineItem}</div>)}\n+          </div>\n+        }>\n+          <div style={{fontSize: '20px', color: colors.accent}}>{formatUsd(storageCost)}/hr</div>\n+        </TooltipTrigger>\n+      </FlexColumn>\n+    </FlexRow>\n+    {\n+      workspace.billingAccountType === BillingAccountType.FREETIER\n+      && profile.username === workspace.creator\n+      && <div style={{borderLeft: `1px solid ${colorWithWhiteness(colors.dark, .5)}`, padding: '.33rem .5rem'}}>\n+        Costs will draw from your remaining {formatUsd(freeCreditsRemaining)} of free credits.\n+      </div>\n+    }\n+    {\n+      workspace.billingAccountType === BillingAccountType.FREETIER\n+      && profile.username !== workspace.creator\n+      && <div style={{borderLeft: `1px solid ${colorWithWhiteness(colors.dark, .5)}`, padding: '.33rem .5rem'}}>\n+        Costs will draw from workspace owner's remaining {formatUsd(freeCreditsRemaining)} of free credits.\n+      </div>\n+    }\n+    {workspace.billingAccountType === BillingAccountType.USERPROVIDED && <div style={{borderLeft: `1px solid ${colorWithWhiteness(colors.dark, .5)}`, padding: '.33rem .5rem'}}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTUwMzc0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTowODowNFrOHs8u6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNjo0NDoxMFrOHtgn-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5NDQ0MQ==", "bodyText": "Thanks for adding this. Technically this should probably be in @ericsong 's UI PR, since currently all changes induce restarts until we have Update integration - but I'm fine adding it here since you already did the styling.\nThe logic for runtimeNeedsRestart is also not quite correct, e.g. shrinking the disk size is illegal via Update, and will require a restart. I don't know if that's the only issue, part of the update ticket was to identify exactly which config changes are supported.\nAlternatively, just drop runtimeNeedsRestart and only show this dialog with runtimeChanged - which would currently be accurate.", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r516894441", "createdAt": "2020-11-03T19:08:04Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -323,6 +458,25 @@ export const RuntimePanel = fp.flow(withCurrentWorkspace(), withCdrVersions())((\n         }\n       </FlexColumn>\n     </div>\n+    {runtimeNeedsRestart && <FlexRow\n+        style={{\n+          alignItems: 'center',\n+          backgroundColor: colorWithWhiteness(colors.warning, .9),\n+          border: `1px solid ${colors.warning}`,\n+          borderRadius: '5px',\n+          color: colors.dark,\n+          marginTop: '.5rem',\n+          padding: '.5rem 0px'\n+        }}\n+    >\n+      <ClrIcon\n+          style={{color: colors.warning, marginLeft: '.5rem'}}\n+          shape={'warning-standard'}\n+          size={16}\n+          class={'is-solid'}\n+      />\n+      <div style={{marginLeft: '.5rem'}}>You've made changes that require recreating your environment to take effect.</div>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 353}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ4MjQ4OQ==", "bodyText": "will do the latter", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r517482489", "createdAt": "2020-11-04T16:44:10Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -323,6 +458,25 @@ export const RuntimePanel = fp.flow(withCurrentWorkspace(), withCdrVersions())((\n         }\n       </FlexColumn>\n     </div>\n+    {runtimeNeedsRestart && <FlexRow\n+        style={{\n+          alignItems: 'center',\n+          backgroundColor: colorWithWhiteness(colors.warning, .9),\n+          border: `1px solid ${colors.warning}`,\n+          borderRadius: '5px',\n+          color: colors.dark,\n+          marginTop: '.5rem',\n+          padding: '.5rem 0px'\n+        }}\n+    >\n+      <ClrIcon\n+          style={{color: colors.warning, marginLeft: '.5rem'}}\n+          shape={'warning-standard'}\n+          size={16}\n+          class={'is-solid'}\n+      />\n+      <div style={{marginLeft: '.5rem'}}>You've made changes that require recreating your environment to take effect.</div>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5NDQ0MQ=="}, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 353}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTUxNTg3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/machines.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxMDo1OVrOHs810w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxMDo1OVrOHs810w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5NjIxMQ==", "bodyText": "While our UI doesn't currently support 0 node Dataproc clusters, they are legal, so I would probably handle this case", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r516896211", "createdAt": "2020-11-03T19:10:59Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/machines.ts", "diffHunk": "@@ -45,5 +51,92 @@ export const allMachineTypes = fp.map(({ price, preemptiblePrice, ...details })\n // See https://broadworkbench.atlassian.net/browse/SATURN-1337\n export const validLeonardoMachineTypes = allMachineTypes.filter(({memory}) => memory >= 4);\n \n+export const findMachineByName = (machineToFind: string) => fp.find(({name}) => name === machineToFind, allMachineTypes);\n+\n export const diskPrice = 0.04 / 730; // per GB hour, from https://cloud.google.com/compute/pricing\n export const dataprocCpuPrice = 0.01; // dataproc costs $0.01 per cpu per hour\n+\n+export const machineStoragePrice = ({masterDiskSize, numberOfWorkers, workerDiskSize }) => {\n+  if (numberOfWorkers && workerDiskSize) {\n+    return (masterDiskSize + numberOfWorkers * workerDiskSize) * diskPrice;\n+  } else {\n+    return masterDiskSize * diskPrice;\n+  }\n+};\n+\n+export const machineStorageCostBreakdown = ({masterDiskSize, numberOfWorkers, workerDiskSize}) => {\n+  const costs = [];\n+  if (numberOfWorkers && workerDiskSize) {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Master Disk`);\n+    costs.push(`${formatUsd((numberOfWorkers * workerDiskSize) * diskPrice)}/hr Worker Disks`);\n+  } else {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Disk`);\n+  }\n+  return costs;\n+};\n+\n+export const machineRunningPrice = ({\n+  computeType,\n+  masterDiskSize,\n+  masterMachineName,\n+  numberOfWorkers = 0,\n+  numberOfPreemptibleWorkers = 0,\n+  workerDiskSize,\n+  workerMachineName\n+}) => {\n+  const masterMachine = findMachineByName(masterMachineName);\n+  const workerMachine = workerMachineName && findMachineByName(workerMachineName);\n+\n+  if (computeType === ComputeType.Dataproc && !workerMachine) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTUyNzQzOnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/machines.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxNDoyOVrOHs89DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxNDoyOVrOHs89DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5ODA2MA==", "bodyText": "See above comment, returning [] here implies 0 cost for a 0 node cluster, which is not correct (though it can also never happen in the current UI)", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r516898060", "createdAt": "2020-11-03T19:14:29Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/machines.ts", "diffHunk": "@@ -45,5 +51,92 @@ export const allMachineTypes = fp.map(({ price, preemptiblePrice, ...details })\n // See https://broadworkbench.atlassian.net/browse/SATURN-1337\n export const validLeonardoMachineTypes = allMachineTypes.filter(({memory}) => memory >= 4);\n \n+export const findMachineByName = (machineToFind: string) => fp.find(({name}) => name === machineToFind, allMachineTypes);\n+\n export const diskPrice = 0.04 / 730; // per GB hour, from https://cloud.google.com/compute/pricing\n export const dataprocCpuPrice = 0.01; // dataproc costs $0.01 per cpu per hour\n+\n+export const machineStoragePrice = ({masterDiskSize, numberOfWorkers, workerDiskSize }) => {\n+  if (numberOfWorkers && workerDiskSize) {\n+    return (masterDiskSize + numberOfWorkers * workerDiskSize) * diskPrice;\n+  } else {\n+    return masterDiskSize * diskPrice;\n+  }\n+};\n+\n+export const machineStorageCostBreakdown = ({masterDiskSize, numberOfWorkers, workerDiskSize}) => {\n+  const costs = [];\n+  if (numberOfWorkers && workerDiskSize) {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Master Disk`);\n+    costs.push(`${formatUsd((numberOfWorkers * workerDiskSize) * diskPrice)}/hr Worker Disks`);\n+  } else {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Disk`);\n+  }\n+  return costs;\n+};\n+\n+export const machineRunningPrice = ({\n+  computeType,\n+  masterDiskSize,\n+  masterMachineName,\n+  numberOfWorkers = 0,\n+  numberOfPreemptibleWorkers = 0,\n+  workerDiskSize,\n+  workerMachineName\n+}) => {\n+  const masterMachine = findMachineByName(masterMachineName);\n+  const workerMachine = workerMachineName && findMachineByName(workerMachineName);\n+\n+  if (computeType === ComputeType.Dataproc && !workerMachine) {\n+    return NaN;\n+  }\n+\n+  const dataprocPrice = computeType === ComputeType.Dataproc\n+    ? fp.sum([\n+      (masterMachine.cpu + ((numberOfWorkers + numberOfPreemptibleWorkers) * workerMachine.cpu)) * dataprocCpuPrice,\n+      numberOfWorkers * workerMachine.price,\n+      numberOfPreemptibleWorkers * workerMachine.preemptiblePrice,\n+    ])\n+    : 0;\n+  return fp.sum([\n+    dataprocPrice,\n+    masterMachine.price,\n+    machineStoragePrice({masterDiskSize: masterDiskSize, numberOfWorkers: numberOfWorkers, workerDiskSize: workerDiskSize})\n+  ]);\n+};\n+\n+export const machineRunningCostBreakdown = ({\n+  computeType,\n+  masterDiskSize,\n+  masterMachineName,\n+  numberOfWorkers = 0,\n+  numberOfPreemptibleWorkers = 0,\n+  workerDiskSize,\n+  workerMachineName\n+}) => {\n+  const masterMachine = findMachineByName(masterMachineName);\n+  const costs = [];\n+  if (computeType === ComputeType.Dataproc) {\n+    const workerMachine = workerMachineName && findMachineByName(workerMachineName);\n+    if (!workerMachine) {\n+      return costs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTUzMTA4OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/machines.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxNToyNVrOHs8_Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxNToyNVrOHs8_Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5ODYxMQ==", "bodyText": "nit: pull this out into a helper? This computation is duplicated here and above", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r516898611", "createdAt": "2020-11-03T19:15:25Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/machines.ts", "diffHunk": "@@ -45,5 +51,92 @@ export const allMachineTypes = fp.map(({ price, preemptiblePrice, ...details })\n // See https://broadworkbench.atlassian.net/browse/SATURN-1337\n export const validLeonardoMachineTypes = allMachineTypes.filter(({memory}) => memory >= 4);\n \n+export const findMachineByName = (machineToFind: string) => fp.find(({name}) => name === machineToFind, allMachineTypes);\n+\n export const diskPrice = 0.04 / 730; // per GB hour, from https://cloud.google.com/compute/pricing\n export const dataprocCpuPrice = 0.01; // dataproc costs $0.01 per cpu per hour\n+\n+export const machineStoragePrice = ({masterDiskSize, numberOfWorkers, workerDiskSize }) => {\n+  if (numberOfWorkers && workerDiskSize) {\n+    return (masterDiskSize + numberOfWorkers * workerDiskSize) * diskPrice;\n+  } else {\n+    return masterDiskSize * diskPrice;\n+  }\n+};\n+\n+export const machineStorageCostBreakdown = ({masterDiskSize, numberOfWorkers, workerDiskSize}) => {\n+  const costs = [];\n+  if (numberOfWorkers && workerDiskSize) {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Master Disk`);\n+    costs.push(`${formatUsd((numberOfWorkers * workerDiskSize) * diskPrice)}/hr Worker Disks`);\n+  } else {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Disk`);\n+  }\n+  return costs;\n+};\n+\n+export const machineRunningPrice = ({\n+  computeType,\n+  masterDiskSize,\n+  masterMachineName,\n+  numberOfWorkers = 0,\n+  numberOfPreemptibleWorkers = 0,\n+  workerDiskSize,\n+  workerMachineName\n+}) => {\n+  const masterMachine = findMachineByName(masterMachineName);\n+  const workerMachine = workerMachineName && findMachineByName(workerMachineName);\n+\n+  if (computeType === ComputeType.Dataproc && !workerMachine) {\n+    return NaN;\n+  }\n+\n+  const dataprocPrice = computeType === ComputeType.Dataproc\n+    ? fp.sum([\n+      (masterMachine.cpu + ((numberOfWorkers + numberOfPreemptibleWorkers) * workerMachine.cpu)) * dataprocCpuPrice,\n+      numberOfWorkers * workerMachine.price,\n+      numberOfPreemptibleWorkers * workerMachine.preemptiblePrice,\n+    ])\n+    : 0;\n+  return fp.sum([\n+    dataprocPrice,\n+    masterMachine.price,\n+    machineStoragePrice({masterDiskSize: masterDiskSize, numberOfWorkers: numberOfWorkers, workerDiskSize: workerDiskSize})\n+  ]);\n+};\n+\n+export const machineRunningCostBreakdown = ({\n+  computeType,\n+  masterDiskSize,\n+  masterMachineName,\n+  numberOfWorkers = 0,\n+  numberOfPreemptibleWorkers = 0,\n+  workerDiskSize,\n+  workerMachineName\n+}) => {\n+  const masterMachine = findMachineByName(masterMachineName);\n+  const costs = [];\n+  if (computeType === ComputeType.Dataproc) {\n+    const workerMachine = workerMachineName && findMachineByName(workerMachineName);\n+    if (!workerMachine) {\n+      return costs;\n+    }\n+    costs.push(`${formatUsd(masterMachine.price)}/hr Master VM`);\n+    if (numberOfWorkers > 0) {\n+      costs.push(`${formatUsd(workerMachine.price  * numberOfWorkers)}/hr Worker VM(s) (${numberOfWorkers})`);\n+    }\n+    if (numberOfPreemptibleWorkers > 0) {\n+      costs.push(\n+        `${formatUsd(workerMachine.preemptiblePrice * numberOfPreemptibleWorkers)}/hr Preemptible Worker VM(s) (${numberOfPreemptibleWorkers})`\n+      );\n+    }\n+    const dataprocPrice = (masterMachine.cpu + ((numberOfWorkers + numberOfPreemptibleWorkers) * workerMachine.cpu)) * dataprocCpuPrice;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTU0MDU0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/machines.ts", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxODoyMlrOHs9FAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxOToxMDo1M1rOHtmCog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwMDA5Nw==", "bodyText": "number of preemptible workers is not considered in this calculation - is that intentional?", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r516900097", "createdAt": "2020-11-03T19:18:22Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/machines.ts", "diffHunk": "@@ -45,5 +51,92 @@ export const allMachineTypes = fp.map(({ price, preemptiblePrice, ...details })\n // See https://broadworkbench.atlassian.net/browse/SATURN-1337\n export const validLeonardoMachineTypes = allMachineTypes.filter(({memory}) => memory >= 4);\n \n+export const findMachineByName = (machineToFind: string) => fp.find(({name}) => name === machineToFind, allMachineTypes);\n+\n export const diskPrice = 0.04 / 730; // per GB hour, from https://cloud.google.com/compute/pricing\n export const dataprocCpuPrice = 0.01; // dataproc costs $0.01 per cpu per hour\n+\n+export const machineStoragePrice = ({masterDiskSize, numberOfWorkers, workerDiskSize }) => {\n+  if (numberOfWorkers && workerDiskSize) {\n+    return (masterDiskSize + numberOfWorkers * workerDiskSize) * diskPrice;\n+  } else {\n+    return masterDiskSize * diskPrice;\n+  }\n+};\n+\n+export const machineStorageCostBreakdown = ({masterDiskSize, numberOfWorkers, workerDiskSize}) => {\n+  const costs = [];\n+  if (numberOfWorkers && workerDiskSize) {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Master Disk`);\n+    costs.push(`${formatUsd((numberOfWorkers * workerDiskSize) * diskPrice)}/hr Worker Disks`);\n+  } else {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Disk`);\n+  }\n+  return costs;\n+};\n+\n+export const machineRunningPrice = ({\n+  computeType,\n+  masterDiskSize,\n+  masterMachineName,\n+  numberOfWorkers = 0,\n+  numberOfPreemptibleWorkers = 0,\n+  workerDiskSize,\n+  workerMachineName\n+}) => {\n+  const masterMachine = findMachineByName(masterMachineName);\n+  const workerMachine = workerMachineName && findMachineByName(workerMachineName);\n+\n+  if (computeType === ComputeType.Dataproc && !workerMachine) {\n+    return NaN;\n+  }\n+\n+  const dataprocPrice = computeType === ComputeType.Dataproc\n+    ? fp.sum([\n+      (masterMachine.cpu + ((numberOfWorkers + numberOfPreemptibleWorkers) * workerMachine.cpu)) * dataprocCpuPrice,\n+      numberOfWorkers * workerMachine.price,\n+      numberOfPreemptibleWorkers * workerMachine.preemptiblePrice,\n+    ])\n+    : 0;\n+  return fp.sum([\n+    dataprocPrice,\n+    masterMachine.price,\n+    machineStoragePrice({masterDiskSize: masterDiskSize, numberOfWorkers: numberOfWorkers, workerDiskSize: workerDiskSize})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1ODMyNw==", "bodyText": "It is included in the dataproc price. This could be named clearer.", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r517558327", "createdAt": "2020-11-04T18:48:05Z", "author": {"login": "als364"}, "path": "ui/src/app/utils/machines.ts", "diffHunk": "@@ -45,5 +51,92 @@ export const allMachineTypes = fp.map(({ price, preemptiblePrice, ...details })\n // See https://broadworkbench.atlassian.net/browse/SATURN-1337\n export const validLeonardoMachineTypes = allMachineTypes.filter(({memory}) => memory >= 4);\n \n+export const findMachineByName = (machineToFind: string) => fp.find(({name}) => name === machineToFind, allMachineTypes);\n+\n export const diskPrice = 0.04 / 730; // per GB hour, from https://cloud.google.com/compute/pricing\n export const dataprocCpuPrice = 0.01; // dataproc costs $0.01 per cpu per hour\n+\n+export const machineStoragePrice = ({masterDiskSize, numberOfWorkers, workerDiskSize }) => {\n+  if (numberOfWorkers && workerDiskSize) {\n+    return (masterDiskSize + numberOfWorkers * workerDiskSize) * diskPrice;\n+  } else {\n+    return masterDiskSize * diskPrice;\n+  }\n+};\n+\n+export const machineStorageCostBreakdown = ({masterDiskSize, numberOfWorkers, workerDiskSize}) => {\n+  const costs = [];\n+  if (numberOfWorkers && workerDiskSize) {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Master Disk`);\n+    costs.push(`${formatUsd((numberOfWorkers * workerDiskSize) * diskPrice)}/hr Worker Disks`);\n+  } else {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Disk`);\n+  }\n+  return costs;\n+};\n+\n+export const machineRunningPrice = ({\n+  computeType,\n+  masterDiskSize,\n+  masterMachineName,\n+  numberOfWorkers = 0,\n+  numberOfPreemptibleWorkers = 0,\n+  workerDiskSize,\n+  workerMachineName\n+}) => {\n+  const masterMachine = findMachineByName(masterMachineName);\n+  const workerMachine = workerMachineName && findMachineByName(workerMachineName);\n+\n+  if (computeType === ComputeType.Dataproc && !workerMachine) {\n+    return NaN;\n+  }\n+\n+  const dataprocPrice = computeType === ComputeType.Dataproc\n+    ? fp.sum([\n+      (masterMachine.cpu + ((numberOfWorkers + numberOfPreemptibleWorkers) * workerMachine.cpu)) * dataprocCpuPrice,\n+      numberOfWorkers * workerMachine.price,\n+      numberOfPreemptibleWorkers * workerMachine.preemptiblePrice,\n+    ])\n+    : 0;\n+  return fp.sum([\n+    dataprocPrice,\n+    masterMachine.price,\n+    machineStoragePrice({masterDiskSize: masterDiskSize, numberOfWorkers: numberOfWorkers, workerDiskSize: workerDiskSize})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwMDA5Nw=="}, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU2NDAzNA==", "bodyText": "The dataproc price just includes machine prices. I'm asking why preemptible workers are not considered on this specific line for the storage price computation.", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r517564034", "createdAt": "2020-11-04T18:57:54Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/machines.ts", "diffHunk": "@@ -45,5 +51,92 @@ export const allMachineTypes = fp.map(({ price, preemptiblePrice, ...details })\n // See https://broadworkbench.atlassian.net/browse/SATURN-1337\n export const validLeonardoMachineTypes = allMachineTypes.filter(({memory}) => memory >= 4);\n \n+export const findMachineByName = (machineToFind: string) => fp.find(({name}) => name === machineToFind, allMachineTypes);\n+\n export const diskPrice = 0.04 / 730; // per GB hour, from https://cloud.google.com/compute/pricing\n export const dataprocCpuPrice = 0.01; // dataproc costs $0.01 per cpu per hour\n+\n+export const machineStoragePrice = ({masterDiskSize, numberOfWorkers, workerDiskSize }) => {\n+  if (numberOfWorkers && workerDiskSize) {\n+    return (masterDiskSize + numberOfWorkers * workerDiskSize) * diskPrice;\n+  } else {\n+    return masterDiskSize * diskPrice;\n+  }\n+};\n+\n+export const machineStorageCostBreakdown = ({masterDiskSize, numberOfWorkers, workerDiskSize}) => {\n+  const costs = [];\n+  if (numberOfWorkers && workerDiskSize) {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Master Disk`);\n+    costs.push(`${formatUsd((numberOfWorkers * workerDiskSize) * diskPrice)}/hr Worker Disks`);\n+  } else {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Disk`);\n+  }\n+  return costs;\n+};\n+\n+export const machineRunningPrice = ({\n+  computeType,\n+  masterDiskSize,\n+  masterMachineName,\n+  numberOfWorkers = 0,\n+  numberOfPreemptibleWorkers = 0,\n+  workerDiskSize,\n+  workerMachineName\n+}) => {\n+  const masterMachine = findMachineByName(masterMachineName);\n+  const workerMachine = workerMachineName && findMachineByName(workerMachineName);\n+\n+  if (computeType === ComputeType.Dataproc && !workerMachine) {\n+    return NaN;\n+  }\n+\n+  const dataprocPrice = computeType === ComputeType.Dataproc\n+    ? fp.sum([\n+      (masterMachine.cpu + ((numberOfWorkers + numberOfPreemptibleWorkers) * workerMachine.cpu)) * dataprocCpuPrice,\n+      numberOfWorkers * workerMachine.price,\n+      numberOfPreemptibleWorkers * workerMachine.preemptiblePrice,\n+    ])\n+    : 0;\n+  return fp.sum([\n+    dataprocPrice,\n+    masterMachine.price,\n+    machineStoragePrice({masterDiskSize: masterDiskSize, numberOfWorkers: numberOfWorkers, workerDiskSize: workerDiskSize})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwMDA5Nw=="}, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU2NjM3NQ==", "bodyText": "because Terra doesn't consider them: https://github.com/DataBiosphere/terra-ui/blob/cf5ec4408db3bd1fcdbcc5302da62d42e4d03ca3/src/components/ClusterManager.js#L85", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r517566375", "createdAt": "2020-11-04T19:02:03Z", "author": {"login": "als364"}, "path": "ui/src/app/utils/machines.ts", "diffHunk": "@@ -45,5 +51,92 @@ export const allMachineTypes = fp.map(({ price, preemptiblePrice, ...details })\n // See https://broadworkbench.atlassian.net/browse/SATURN-1337\n export const validLeonardoMachineTypes = allMachineTypes.filter(({memory}) => memory >= 4);\n \n+export const findMachineByName = (machineToFind: string) => fp.find(({name}) => name === machineToFind, allMachineTypes);\n+\n export const diskPrice = 0.04 / 730; // per GB hour, from https://cloud.google.com/compute/pricing\n export const dataprocCpuPrice = 0.01; // dataproc costs $0.01 per cpu per hour\n+\n+export const machineStoragePrice = ({masterDiskSize, numberOfWorkers, workerDiskSize }) => {\n+  if (numberOfWorkers && workerDiskSize) {\n+    return (masterDiskSize + numberOfWorkers * workerDiskSize) * diskPrice;\n+  } else {\n+    return masterDiskSize * diskPrice;\n+  }\n+};\n+\n+export const machineStorageCostBreakdown = ({masterDiskSize, numberOfWorkers, workerDiskSize}) => {\n+  const costs = [];\n+  if (numberOfWorkers && workerDiskSize) {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Master Disk`);\n+    costs.push(`${formatUsd((numberOfWorkers * workerDiskSize) * diskPrice)}/hr Worker Disks`);\n+  } else {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Disk`);\n+  }\n+  return costs;\n+};\n+\n+export const machineRunningPrice = ({\n+  computeType,\n+  masterDiskSize,\n+  masterMachineName,\n+  numberOfWorkers = 0,\n+  numberOfPreemptibleWorkers = 0,\n+  workerDiskSize,\n+  workerMachineName\n+}) => {\n+  const masterMachine = findMachineByName(masterMachineName);\n+  const workerMachine = workerMachineName && findMachineByName(workerMachineName);\n+\n+  if (computeType === ComputeType.Dataproc && !workerMachine) {\n+    return NaN;\n+  }\n+\n+  const dataprocPrice = computeType === ComputeType.Dataproc\n+    ? fp.sum([\n+      (masterMachine.cpu + ((numberOfWorkers + numberOfPreemptibleWorkers) * workerMachine.cpu)) * dataprocCpuPrice,\n+      numberOfWorkers * workerMachine.price,\n+      numberOfPreemptibleWorkers * workerMachine.preemptiblePrice,\n+    ])\n+    : 0;\n+  return fp.sum([\n+    dataprocPrice,\n+    masterMachine.price,\n+    machineStoragePrice({masterDiskSize: masterDiskSize, numberOfWorkers: numberOfWorkers, workerDiskSize: workerDiskSize})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwMDA5Nw=="}, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU3MTIzNA==", "bodyText": "although, looking at GCE docs, I think it should.", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r517571234", "createdAt": "2020-11-04T19:10:53Z", "author": {"login": "als364"}, "path": "ui/src/app/utils/machines.ts", "diffHunk": "@@ -45,5 +51,92 @@ export const allMachineTypes = fp.map(({ price, preemptiblePrice, ...details })\n // See https://broadworkbench.atlassian.net/browse/SATURN-1337\n export const validLeonardoMachineTypes = allMachineTypes.filter(({memory}) => memory >= 4);\n \n+export const findMachineByName = (machineToFind: string) => fp.find(({name}) => name === machineToFind, allMachineTypes);\n+\n export const diskPrice = 0.04 / 730; // per GB hour, from https://cloud.google.com/compute/pricing\n export const dataprocCpuPrice = 0.01; // dataproc costs $0.01 per cpu per hour\n+\n+export const machineStoragePrice = ({masterDiskSize, numberOfWorkers, workerDiskSize }) => {\n+  if (numberOfWorkers && workerDiskSize) {\n+    return (masterDiskSize + numberOfWorkers * workerDiskSize) * diskPrice;\n+  } else {\n+    return masterDiskSize * diskPrice;\n+  }\n+};\n+\n+export const machineStorageCostBreakdown = ({masterDiskSize, numberOfWorkers, workerDiskSize}) => {\n+  const costs = [];\n+  if (numberOfWorkers && workerDiskSize) {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Master Disk`);\n+    costs.push(`${formatUsd((numberOfWorkers * workerDiskSize) * diskPrice)}/hr Worker Disks`);\n+  } else {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Disk`);\n+  }\n+  return costs;\n+};\n+\n+export const machineRunningPrice = ({\n+  computeType,\n+  masterDiskSize,\n+  masterMachineName,\n+  numberOfWorkers = 0,\n+  numberOfPreemptibleWorkers = 0,\n+  workerDiskSize,\n+  workerMachineName\n+}) => {\n+  const masterMachine = findMachineByName(masterMachineName);\n+  const workerMachine = workerMachineName && findMachineByName(workerMachineName);\n+\n+  if (computeType === ComputeType.Dataproc && !workerMachine) {\n+    return NaN;\n+  }\n+\n+  const dataprocPrice = computeType === ComputeType.Dataproc\n+    ? fp.sum([\n+      (masterMachine.cpu + ((numberOfWorkers + numberOfPreemptibleWorkers) * workerMachine.cpu)) * dataprocCpuPrice,\n+      numberOfWorkers * workerMachine.price,\n+      numberOfPreemptibleWorkers * workerMachine.preemptiblePrice,\n+    ])\n+    : 0;\n+  return fp.sum([\n+    dataprocPrice,\n+    masterMachine.price,\n+    machineStoragePrice({masterDiskSize: masterDiskSize, numberOfWorkers: numberOfWorkers, workerDiskSize: workerDiskSize})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwMDA5Nw=="}, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTU0MjY2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/machines.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxOTowM1rOHs9GTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxOTowM1rOHs9GTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwMDQyOQ==", "bodyText": "nit: rm trailing param space", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r516900429", "createdAt": "2020-11-03T19:19:03Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/machines.ts", "diffHunk": "@@ -45,5 +51,92 @@ export const allMachineTypes = fp.map(({ price, preemptiblePrice, ...details })\n // See https://broadworkbench.atlassian.net/browse/SATURN-1337\n export const validLeonardoMachineTypes = allMachineTypes.filter(({memory}) => memory >= 4);\n \n+export const findMachineByName = (machineToFind: string) => fp.find(({name}) => name === machineToFind, allMachineTypes);\n+\n export const diskPrice = 0.04 / 730; // per GB hour, from https://cloud.google.com/compute/pricing\n export const dataprocCpuPrice = 0.01; // dataproc costs $0.01 per cpu per hour\n+\n+export const machineStoragePrice = ({masterDiskSize, numberOfWorkers, workerDiskSize }) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTU2NTE2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/machines.ts", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToyNTo0MVrOHs9T6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxOTowMzowOFrOHtlyGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwMzkxNQ==", "bodyText": "Nice work on these utilities. Did you reference the Terra UI's implementation at all? If not - it would be good to do so now so we're aware of any discrepancies.", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r516903915", "createdAt": "2020-11-03T19:25:41Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/machines.ts", "diffHunk": "@@ -45,5 +51,92 @@ export const allMachineTypes = fp.map(({ price, preemptiblePrice, ...details })\n // See https://broadworkbench.atlassian.net/browse/SATURN-1337\n export const validLeonardoMachineTypes = allMachineTypes.filter(({memory}) => memory >= 4);\n \n+export const findMachineByName = (machineToFind: string) => fp.find(({name}) => name === machineToFind, allMachineTypes);\n+\n export const diskPrice = 0.04 / 730; // per GB hour, from https://cloud.google.com/compute/pricing\n export const dataprocCpuPrice = 0.01; // dataproc costs $0.01 per cpu per hour\n+\n+export const machineStoragePrice = ({masterDiskSize, numberOfWorkers, workerDiskSize }) => {\n+  if (numberOfWorkers && workerDiskSize) {\n+    return (masterDiskSize + numberOfWorkers * workerDiskSize) * diskPrice;\n+  } else {\n+    return masterDiskSize * diskPrice;\n+  }\n+};\n+\n+export const machineStorageCostBreakdown = ({masterDiskSize, numberOfWorkers, workerDiskSize}) => {\n+  const costs = [];\n+  if (numberOfWorkers && workerDiskSize) {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Master Disk`);\n+    costs.push(`${formatUsd((numberOfWorkers * workerDiskSize) * diskPrice)}/hr Worker Disks`);\n+  } else {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Disk`);\n+  }\n+  return costs;\n+};\n+\n+export const machineRunningPrice = ({\n+  computeType,\n+  masterDiskSize,\n+  masterMachineName,\n+  numberOfWorkers = 0,\n+  numberOfPreemptibleWorkers = 0,\n+  workerDiskSize,\n+  workerMachineName\n+}) => {\n+  const masterMachine = findMachineByName(masterMachineName);\n+  const workerMachine = workerMachineName && findMachineByName(workerMachineName);\n+\n+  if (computeType === ComputeType.Dataproc && !workerMachine) {\n+    return NaN;\n+  }\n+\n+  const dataprocPrice = computeType === ComputeType.Dataproc\n+    ? fp.sum([\n+      (masterMachine.cpu + ((numberOfWorkers + numberOfPreemptibleWorkers) * workerMachine.cpu)) * dataprocCpuPrice,\n+      numberOfWorkers * workerMachine.price,\n+      numberOfPreemptibleWorkers * workerMachine.preemptiblePrice,\n+    ])\n+    : 0;\n+  return fp.sum([\n+    dataprocPrice,\n+    masterMachine.price,\n+    machineStoragePrice({masterDiskSize: masterDiskSize, numberOfWorkers: numberOfWorkers, workerDiskSize: workerDiskSize})\n+  ]);\n+};\n+\n+export const machineRunningCostBreakdown = ({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1ODYzMA==", "bodyText": "Terra actually doesn't have this tooltip feature as far as I can tell.", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r517558630", "createdAt": "2020-11-04T18:48:41Z", "author": {"login": "als364"}, "path": "ui/src/app/utils/machines.ts", "diffHunk": "@@ -45,5 +51,92 @@ export const allMachineTypes = fp.map(({ price, preemptiblePrice, ...details })\n // See https://broadworkbench.atlassian.net/browse/SATURN-1337\n export const validLeonardoMachineTypes = allMachineTypes.filter(({memory}) => memory >= 4);\n \n+export const findMachineByName = (machineToFind: string) => fp.find(({name}) => name === machineToFind, allMachineTypes);\n+\n export const diskPrice = 0.04 / 730; // per GB hour, from https://cloud.google.com/compute/pricing\n export const dataprocCpuPrice = 0.01; // dataproc costs $0.01 per cpu per hour\n+\n+export const machineStoragePrice = ({masterDiskSize, numberOfWorkers, workerDiskSize }) => {\n+  if (numberOfWorkers && workerDiskSize) {\n+    return (masterDiskSize + numberOfWorkers * workerDiskSize) * diskPrice;\n+  } else {\n+    return masterDiskSize * diskPrice;\n+  }\n+};\n+\n+export const machineStorageCostBreakdown = ({masterDiskSize, numberOfWorkers, workerDiskSize}) => {\n+  const costs = [];\n+  if (numberOfWorkers && workerDiskSize) {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Master Disk`);\n+    costs.push(`${formatUsd((numberOfWorkers * workerDiskSize) * diskPrice)}/hr Worker Disks`);\n+  } else {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Disk`);\n+  }\n+  return costs;\n+};\n+\n+export const machineRunningPrice = ({\n+  computeType,\n+  masterDiskSize,\n+  masterMachineName,\n+  numberOfWorkers = 0,\n+  numberOfPreemptibleWorkers = 0,\n+  workerDiskSize,\n+  workerMachineName\n+}) => {\n+  const masterMachine = findMachineByName(masterMachineName);\n+  const workerMachine = workerMachineName && findMachineByName(workerMachineName);\n+\n+  if (computeType === ComputeType.Dataproc && !workerMachine) {\n+    return NaN;\n+  }\n+\n+  const dataprocPrice = computeType === ComputeType.Dataproc\n+    ? fp.sum([\n+      (masterMachine.cpu + ((numberOfWorkers + numberOfPreemptibleWorkers) * workerMachine.cpu)) * dataprocCpuPrice,\n+      numberOfWorkers * workerMachine.price,\n+      numberOfPreemptibleWorkers * workerMachine.preemptiblePrice,\n+    ])\n+    : 0;\n+  return fp.sum([\n+    dataprocPrice,\n+    masterMachine.price,\n+    machineStoragePrice({masterDiskSize: masterDiskSize, numberOfWorkers: numberOfWorkers, workerDiskSize: workerDiskSize})\n+  ]);\n+};\n+\n+export const machineRunningCostBreakdown = ({", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwMzkxNQ=="}, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU2MzQxMQ==", "bodyText": "SOrry, I commented on the wrong line - I meant this comment generally about the overall price computation.", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r517563411", "createdAt": "2020-11-04T18:56:47Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/machines.ts", "diffHunk": "@@ -45,5 +51,92 @@ export const allMachineTypes = fp.map(({ price, preemptiblePrice, ...details })\n // See https://broadworkbench.atlassian.net/browse/SATURN-1337\n export const validLeonardoMachineTypes = allMachineTypes.filter(({memory}) => memory >= 4);\n \n+export const findMachineByName = (machineToFind: string) => fp.find(({name}) => name === machineToFind, allMachineTypes);\n+\n export const diskPrice = 0.04 / 730; // per GB hour, from https://cloud.google.com/compute/pricing\n export const dataprocCpuPrice = 0.01; // dataproc costs $0.01 per cpu per hour\n+\n+export const machineStoragePrice = ({masterDiskSize, numberOfWorkers, workerDiskSize }) => {\n+  if (numberOfWorkers && workerDiskSize) {\n+    return (masterDiskSize + numberOfWorkers * workerDiskSize) * diskPrice;\n+  } else {\n+    return masterDiskSize * diskPrice;\n+  }\n+};\n+\n+export const machineStorageCostBreakdown = ({masterDiskSize, numberOfWorkers, workerDiskSize}) => {\n+  const costs = [];\n+  if (numberOfWorkers && workerDiskSize) {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Master Disk`);\n+    costs.push(`${formatUsd((numberOfWorkers * workerDiskSize) * diskPrice)}/hr Worker Disks`);\n+  } else {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Disk`);\n+  }\n+  return costs;\n+};\n+\n+export const machineRunningPrice = ({\n+  computeType,\n+  masterDiskSize,\n+  masterMachineName,\n+  numberOfWorkers = 0,\n+  numberOfPreemptibleWorkers = 0,\n+  workerDiskSize,\n+  workerMachineName\n+}) => {\n+  const masterMachine = findMachineByName(masterMachineName);\n+  const workerMachine = workerMachineName && findMachineByName(workerMachineName);\n+\n+  if (computeType === ComputeType.Dataproc && !workerMachine) {\n+    return NaN;\n+  }\n+\n+  const dataprocPrice = computeType === ComputeType.Dataproc\n+    ? fp.sum([\n+      (masterMachine.cpu + ((numberOfWorkers + numberOfPreemptibleWorkers) * workerMachine.cpu)) * dataprocCpuPrice,\n+      numberOfWorkers * workerMachine.price,\n+      numberOfPreemptibleWorkers * workerMachine.preemptiblePrice,\n+    ])\n+    : 0;\n+  return fp.sum([\n+    dataprocPrice,\n+    masterMachine.price,\n+    machineStoragePrice({masterDiskSize: masterDiskSize, numberOfWorkers: numberOfWorkers, workerDiskSize: workerDiskSize})\n+  ]);\n+};\n+\n+export const machineRunningCostBreakdown = ({", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwMzkxNQ=="}, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU2NzAwMw==", "bodyText": "Oh! Yes, I referenced Terra's implementation. I can link to the file from this file for future reference.", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r517567003", "createdAt": "2020-11-04T19:03:08Z", "author": {"login": "als364"}, "path": "ui/src/app/utils/machines.ts", "diffHunk": "@@ -45,5 +51,92 @@ export const allMachineTypes = fp.map(({ price, preemptiblePrice, ...details })\n // See https://broadworkbench.atlassian.net/browse/SATURN-1337\n export const validLeonardoMachineTypes = allMachineTypes.filter(({memory}) => memory >= 4);\n \n+export const findMachineByName = (machineToFind: string) => fp.find(({name}) => name === machineToFind, allMachineTypes);\n+\n export const diskPrice = 0.04 / 730; // per GB hour, from https://cloud.google.com/compute/pricing\n export const dataprocCpuPrice = 0.01; // dataproc costs $0.01 per cpu per hour\n+\n+export const machineStoragePrice = ({masterDiskSize, numberOfWorkers, workerDiskSize }) => {\n+  if (numberOfWorkers && workerDiskSize) {\n+    return (masterDiskSize + numberOfWorkers * workerDiskSize) * diskPrice;\n+  } else {\n+    return masterDiskSize * diskPrice;\n+  }\n+};\n+\n+export const machineStorageCostBreakdown = ({masterDiskSize, numberOfWorkers, workerDiskSize}) => {\n+  const costs = [];\n+  if (numberOfWorkers && workerDiskSize) {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Master Disk`);\n+    costs.push(`${formatUsd((numberOfWorkers * workerDiskSize) * diskPrice)}/hr Worker Disks`);\n+  } else {\n+    costs.push(`${formatUsd(masterDiskSize * diskPrice)}/hr Disk`);\n+  }\n+  return costs;\n+};\n+\n+export const machineRunningPrice = ({\n+  computeType,\n+  masterDiskSize,\n+  masterMachineName,\n+  numberOfWorkers = 0,\n+  numberOfPreemptibleWorkers = 0,\n+  workerDiskSize,\n+  workerMachineName\n+}) => {\n+  const masterMachine = findMachineByName(masterMachineName);\n+  const workerMachine = workerMachineName && findMachineByName(workerMachineName);\n+\n+  if (computeType === ComputeType.Dataproc && !workerMachine) {\n+    return NaN;\n+  }\n+\n+  const dataprocPrice = computeType === ComputeType.Dataproc\n+    ? fp.sum([\n+      (masterMachine.cpu + ((numberOfWorkers + numberOfPreemptibleWorkers) * workerMachine.cpu)) * dataprocCpuPrice,\n+      numberOfWorkers * workerMachine.price,\n+      numberOfPreemptibleWorkers * workerMachine.preemptiblePrice,\n+    ])\n+    : 0;\n+  return fp.sum([\n+    dataprocPrice,\n+    masterMachine.price,\n+    machineStoragePrice({masterDiskSize: masterDiskSize, numberOfWorkers: numberOfWorkers, workerDiskSize: workerDiskSize})\n+  ]);\n+};\n+\n+export const machineRunningCostBreakdown = ({", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwMzkxNQ=="}, "originalCommit": {"oid": "088c63f7e172c2fb53f3ec227ccfc689f1070f30"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDgwODE1OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDozODo1OVrOHtuv1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDozODo1OVrOHtuv1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxMzg3OA==", "bodyText": "nit: single quotes", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r517713878", "createdAt": "2020-11-05T00:38:59Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -17,6 +17,7 @@ import {runtimeStore} from 'app/utils/stores';\n import {cdrVersionListResponse, CdrVersionsStubVariables} from 'testing/stubs/cdr-versions-api-stub';\n import {cdrVersionStore, serverConfigStore} from 'app/utils/navigation';\n import { RuntimeConfigurationType } from 'generated/fetch';\n+import {ComputeType} from \"app/utils/machines\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06a131a31895b23659e9628b311dfee2849ba047"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDgyMTg5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDo0NTo1MlrOHtu3vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDo0NTo1MlrOHtu3vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxNTkwMA==", "bodyText": "nit: correct pattern here is probably to create a new AbortController(), pass {signal: aborter.signal} on the API fetch, then return () => aborter.abort() from this useEffect callback as a cleanup.\nThis way, if the component gets dismounted, we cancel the fetch.", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r517715900", "createdAt": "2020-11-05T00:45:52Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -211,24 +227,159 @@ const DataProcConfigSelector = ({onChange, dataprocConfig})  => {\n   </fieldset>;\n };\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withCdrVersions())(({workspace, cdrVersionListResponse}) => {\n-  const {namespace, cdrVersionId} = workspace;\n+const PresetSelector = ({hasMicroarrayData, setSelectedDiskSize, setSelectedMachine, setSelectedCompute, setSelectedDataprocConfig}) => {\n+  {/* Recommended runtime: pick from default templates or change the image. */}\n+  return <PopupTrigger side='bottom'\n+                closeOnClick\n+                content={\n+                  <React.Fragment>\n+                    {\n+                      fp.flow(\n+                        fp.filter(({runtimeTemplate}) => hasMicroarrayData || !runtimeTemplate.dataprocConfig),\n+                        fp.toPairs,\n+                        fp.map(([i, preset]) => {\n+                          return <MenuItem\n+                                style={styles.presetMenuItem}\n+                                key={i}\n+                                aria-label={preset.displayName}\n+                                onClick={() => {\n+                                  // renaming to avoid shadowing\n+                                  const {runtimeTemplate} = preset;\n+                                  const {presetDiskSize, presetMachineName, presetCompute} = fp.cond([\n+                                    // Can't destructure due to shadowing.\n+                                    [() => !!runtimeTemplate.gceConfig, (tmpl: Runtime) => ({\n+                                      presetDiskSize: tmpl.gceConfig.diskSize,\n+                                      presetMachineName: tmpl.gceConfig.machineType,\n+                                      presetCompute: ComputeType.Standard\n+                                    })],\n+                                    [() => !!runtimeTemplate.dataprocConfig, ({dataprocConfig: {masterDiskSize, masterMachineType}}) => ({\n+                                      presetDiskSize: masterDiskSize,\n+                                      presetMachineName: masterMachineType,\n+                                      presetCompute: ComputeType.Dataproc\n+                                    })]\n+                                  ])(runtimeTemplate);\n+                                  const presetMachineType = fp.find(({name}) => name === presetMachineName, validLeonardoMachineTypes);\n+\n+                                  setSelectedDiskSize(presetDiskSize);\n+                                  setSelectedMachine(presetMachineType);\n+                                  setSelectedCompute(presetCompute);\n+                                  setSelectedDataprocConfig(runtimeTemplate.dataprocConfig);\n+                                }}>\n+                              {preset.displayName}\n+                            </MenuItem>;\n+                        })\n+                      )(runtimePresets)\n+                    }\n+                  </React.Fragment>\n+                }>\n+    <Clickable data-test-id='runtime-presets-menu'>\n+      Recommended environments <ClrIcon shape='caret down'/>\n+    </Clickable>\n+  </PopupTrigger>;\n+};\n+\n+const CostEstimator = ({\n+  freeCreditsRemaining,\n+  profile,\n+  runningCost,\n+  runningCostBreakdown,\n+  runtimeChanged,\n+  storageCost,\n+  storageCostBreakdown,\n+  workspace\n+}) => {\n+  const wrapperStyle = runtimeChanged\n+    ? {...styles.costPredictorWrapper, backgroundColor: colorWithWhiteness(colors.warning, .9), borderColor: colors.warning}\n+    : styles.costPredictorWrapper;\n+  return <FlexRow\n+    style={wrapperStyle}\n+  >\n+    <FlexRow style={{minWidth: '250px', margin: '.33rem .5rem'}}>\n+      <FlexColumn style={{marginRight: '1rem'}}>\n+        <div style={{fontSize: '10px', fontWeight: 600}}>Cost when running</div>\n+        <TooltipTrigger content={\n+          <div>\n+            <div>Cost Breakdown</div>\n+            {runningCostBreakdown.map((lineItem, i) => <div key={i}>{lineItem}</div>)}\n+          </div>\n+        }>\n+          <div style={{fontSize: '20px', color: colors.accent}}>{formatUsd(runningCost)}/hr</div>\n+        </TooltipTrigger>\n+      </FlexColumn>\n+      <FlexColumn>\n+        <div style={{fontSize: '10px', fontWeight: 600}}>Cost when paused</div>\n+        <TooltipTrigger content={\n+          <div>\n+            <div>Cost Breakdown</div>\n+            {storageCostBreakdown.map((lineItem, i) => <div key={i}>{lineItem}</div>)}\n+          </div>\n+        }>\n+          <div style={{fontSize: '20px', color: colors.accent}}>{formatUsd(storageCost)}/hr</div>\n+        </TooltipTrigger>\n+      </FlexColumn>\n+    </FlexRow>\n+    {\n+      workspace.billingAccountType === BillingAccountType.FREETIER\n+      && profile.username === workspace.creator\n+      && <div style={{borderLeft: `1px solid ${colorWithWhiteness(colors.dark, .5)}`, padding: '.33rem .5rem'}}>\n+        Costs will draw from your remaining {formatUsd(freeCreditsRemaining)} of free credits.\n+      </div>\n+    }\n+    {\n+      workspace.billingAccountType === BillingAccountType.FREETIER\n+      && profile.username !== workspace.creator\n+      && <div style={{borderLeft: `1px solid ${colorWithWhiteness(colors.dark, .5)}`, padding: '.33rem .5rem'}}>\n+        Costs will draw from workspace creator's remaining {formatUsd(freeCreditsRemaining)} of free credits.\n+      </div>\n+    }\n+    {\n+      workspace.billingAccountType === BillingAccountType.USERPROVIDED\n+      && <div style={{borderLeft: `1px solid ${colorWithWhiteness(colors.dark, .5)}`, padding: '.33rem .5rem'}}>\n+        Costs will be charged to billing account {workspace.billingAccountName}.\n+      </div>\n+    }\n+  </FlexRow>;\n+};\n+\n+export const RuntimePanel = fp.flow(\n+  withCdrVersions(),\n+  withCurrentWorkspace(),\n+  withUserProfile()\n+)(({cdrVersionListResponse, workspace, profileState}) => {\n+  const {namespace, id, cdrVersionId} = workspace;\n+\n+  const {profile} = profileState;\n+\n   const {hasMicroarrayData} = fp.find({cdrVersionId}, cdrVersionListResponse.items) || {hasMicroarrayData: false};\n   const [currentRuntime, setRequestedRuntime] = useCustomRuntime(namespace);\n+\n   const {status = null, dataprocConfig = null, gceConfig = {diskSize: defaultDiskSize}} = currentRuntime || {} as Partial<Runtime>;\n-  const machineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType;\n-  const diskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.diskSize;\n-  const initialMasterMachine = findMachineByName(machineName);\n+  const diskSize = dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.diskSize;\n+  const machineName = dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType;\n+  const initialMasterMachine = findMachineByName(machineName) || defaultMachineType;\n+  const initialCompute = dataprocConfig ? ComputeType.Dataproc : ComputeType.Standard;\n+\n   const [selectedDiskSize, setSelectedDiskSize] = useState(diskSize);\n   const [selectedMachine, setSelectedMachine] = useState(initialMasterMachine);\n-  const [selectedCompute, setSelectedCompute] = useState<ComputeType>(dataprocConfig ? ComputeType.Dataproc : ComputeType.Standard);\n+  const [selectedCompute, setSelectedCompute] = useState<ComputeType>(initialCompute);\n   const [selectedDataprocConfig, setSelectedDataprocConfig] = useState<DataprocConfig | null>(dataprocConfig);\n \n   const selectedMachineType = selectedMachine && selectedMachine.name;\n   const runtimeExists = status && status !== RuntimeStatus.Deleted;\n   const runtimeChanged = !fp.equals(selectedMachine, initialMasterMachine) ||\n     selectedDiskSize !== diskSize ||\n-    !fp.equals(selectedDataprocConfig, dataprocConfig);\n+    !fp.equals(selectedDataprocConfig, dataprocConfig) ||\n+    !fp.equals(selectedCompute, initialCompute);\n+\n+  const [creatorFreeCreditsRemaining, setCreatorFreeCreditsRemaining] = useState(0);\n+  useEffect(() => {\n+    const fetchFreeCredits = async() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06a131a31895b23659e9628b311dfee2849ba047"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDgzMDk5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDo1MDozMFrOHtu9FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDo1MDozMFrOHtu9FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxNzI2OA==", "bodyText": "Lots of repeated code here with these 4 parameters, perhaps this should just be a single object payload, then let the CostEstimator pass these through to the utilities?", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r517717268", "createdAt": "2020-11-05T00:50:30Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -243,55 +394,52 @@ export const RuntimePanel = fp.flow(withCurrentWorkspace(), withCdrVersions())((\n     </div>\n     {/* TODO(RW-5419): Cost estimates go here. */}\n     <div style={styles.controlSection}>\n-      {/* Recommended runtime: pick from default templates or change the image. */}\n-      <PopupTrigger side='bottom'\n-                    closeOnClick\n-                    content={\n-                      <React.Fragment>\n-                        {\n-                          fp.flow(\n-                            fp.filter(({runtimeTemplate}) => hasMicroarrayData || !runtimeTemplate.dataprocConfig),\n-                            fp.toPairs,\n-                            fp.map(([i, preset]) => {\n-                              return <MenuItem\n-                              style={styles.presetMenuItem}\n-                              key={i}\n-                              aria-label={preset.displayName}\n-                              onClick={() => {\n-                                // renaming to avoid shadowing\n-                                const {runtimeTemplate} = preset;\n-                                const {presetDiskSize, presetMachineName, presetCompute} = fp.cond([\n-                                  // Can't destructure due to shadowing.\n-                                  [() => !!runtimeTemplate.gceConfig, (tmpl: Runtime) => ({\n-                                    presetDiskSize: tmpl.gceConfig.diskSize,\n-                                    presetMachineName: tmpl.gceConfig.machineType,\n-                                    presetCompute: ComputeType.Standard\n-                                  })],\n-                                  [() => !!runtimeTemplate.dataprocConfig, ({dataprocConfig: {masterDiskSize, masterMachineType}}) => ({\n-                                    presetDiskSize: masterDiskSize,\n-                                    presetMachineName: masterMachineType,\n-                                    presetCompute: ComputeType.Dataproc\n-                                  })]\n-                                ])(runtimeTemplate);\n-                                const presetMachineType = fp.find(({name}) => name === presetMachineName, validLeonardoMachineTypes);\n+      <CostEstimator\n+          freeCreditsRemaining={creatorFreeCreditsRemaining}\n+          profile={profile}\n+          runningCost={machineRunningPrice({\n+            computeType: selectedCompute,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06a131a31895b23659e9628b311dfee2849ba047"}, "originalPosition": 284}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDgzNDI5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDo1MjowMVrOHtu-9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDo1MjowMVrOHtu-9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxNzc0OA==", "bodyText": "note: reminder to rebase this, since I changed this a bit in my PR", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r517717748", "createdAt": "2020-11-05T00:52:01Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -13,8 +13,11 @@ import {serverConfigStore} from './navigation';\n // We're only willing to wait 20 minutes total for a runtime to initialize. After that we return\n // a rejected promise no matter what.\n const DEFAULT_OVERALL_TIMEOUT = 1000 * 60 * 20;\n-const DEFAULT_INITIAL_POLLING_DELAY = 2000;\n+// XXX: Hack for unit testing.\n+let DEFAULT_INITIAL_POLLING_DELAY = 2000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06a131a31895b23659e9628b311dfee2849ba047"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODkxNDM5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMDo1NDo1M1rOHuWGPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMDo1NzowNlrOHuWKrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM1ODU4OQ==", "bodyText": "Just noticed this diff..", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r518358589", "createdAt": "2020-11-05T20:54:53Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -311,7 +499,7 @@ export const RuntimePanel = fp.flow(withCurrentWorkspace(), withCdrVersions())((\n       <FlexColumn style={{marginTop: '1rem'}}>\n         <label htmlFor='runtime-compute'>Compute type</label>\n         <Dropdown id='runtime-compute'\n-                  disabled={!hasMicroarrayData}\n+                  // disabled={!hasMicroarrayData}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef6efd2c37bdb7d495ff079a3f04953b214ce1ef"}, "originalPosition": 392}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM1OTcyNw==", "bodyText": "fml i keep forgetting to revert this. will open new PR off master", "url": "https://github.com/all-of-us/workbench/pull/4240#discussion_r518359727", "createdAt": "2020-11-05T20:57:06Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -311,7 +499,7 @@ export const RuntimePanel = fp.flow(withCurrentWorkspace(), withCdrVersions())((\n       <FlexColumn style={{marginTop: '1rem'}}>\n         <label htmlFor='runtime-compute'>Compute type</label>\n         <Dropdown id='runtime-compute'\n-                  disabled={!hasMicroarrayData}\n+                  // disabled={!hasMicroarrayData}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM1ODU4OQ=="}, "originalCommit": {"oid": "ef6efd2c37bdb7d495ff079a3f04953b214ce1ef"}, "originalPosition": 392}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3697, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}