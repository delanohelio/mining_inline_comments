{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxNTcyMDY2", "number": 3805, "title": "[RW-5295][risk=low] Consolidate field masking, fix mapper", "bodyText": "Bug: getWorkspaces() was not returning googleBucketName. See all-of-us/workbench-snippets#50 (comment) for where this mattered. Our UI currently doesn't care.\nFix1: consolidate the field masks (request more from getWorkspaces). There should be no performance delta here given the metadata we're requesting.\nFix2: have the mapper use the Firecloud workspace\nI used a custom mapper as I didn't see another way, this is pretty ugly - mapstruct experts please advise.", "createdAt": "2020-07-18T00:15:27Z", "url": "https://github.com/all-of-us/workbench/pull/3805", "merged": true, "mergeCommit": {"oid": "9f0413d0fd9de4ae2563ce383f73218332422eae"}, "closed": true, "closedAt": "2020-07-21T23:17:22Z", "author": {"login": "calbach"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc19IF7gFqTQ1MTAxMTc4Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3K70FABqjM1NzI2OTA3MTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMDExNzgy", "url": "https://github.com/all-of-us/workbench/pull/3805#pullrequestreview-451011782", "createdAt": "2020-07-18T00:16:02Z", "commit": {"oid": "c9ae628cac303a9cb767932f630cd3cbc9651527"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMDoxNjowMlrOGzkJUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMDoxNzowMlrOGzkJ5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyMjc2OA==", "bodyText": "I switched to a default mapper because apparently @Mapping cannot support multi-source mappers: mapstruct/mapstruct#621", "url": "https://github.com/all-of-us/workbench/pull/3805#discussion_r456722768", "createdAt": "2020-07-18T00:16:02Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/WorkspaceMapper.java", "diffHunk": "@@ -61,10 +62,14 @@\n   @Mapping(target = \"researchPurpose\", source = \"dbWorkspace\")\n   Workspace toApiWorkspace(DbWorkspace dbWorkspace);\n \n-  @Mapping(target = \"workspace\", source = \"dbWorkspace\")\n-  @Mapping(target = \"accessLevel\", source = \"firecloudWorkspaceResponse\")\n-  WorkspaceResponse toApiWorkspaceResponse(\n-      DbWorkspace dbWorkspace, FirecloudWorkspaceResponse firecloudWorkspaceResponse);\n+  default WorkspaceResponse toApiWorkspaceResponse(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9ae628cac303a9cb767932f630cd3cbc9651527"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyMjkxOQ==", "bodyText": "Now that I'm in a default mapper, I needed to map the access level. This is the mechanism I could come up with for achieving this - I didn't see another built-in mechanism to inject/invoke another mapper, though I'm thinking perhaps it would be possible if I just split this mapper out from this class.", "url": "https://github.com/all-of-us/workbench/pull/3805#discussion_r456722919", "createdAt": "2020-07-18T00:17:02Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/WorkspaceMapper.java", "diffHunk": "@@ -61,10 +62,14 @@\n   @Mapping(target = \"researchPurpose\", source = \"dbWorkspace\")\n   Workspace toApiWorkspace(DbWorkspace dbWorkspace);\n \n-  @Mapping(target = \"workspace\", source = \"dbWorkspace\")\n-  @Mapping(target = \"accessLevel\", source = \"firecloudWorkspaceResponse\")\n-  WorkspaceResponse toApiWorkspaceResponse(\n-      DbWorkspace dbWorkspace, FirecloudWorkspaceResponse firecloudWorkspaceResponse);\n+  default WorkspaceResponse toApiWorkspaceResponse(\n+      DbWorkspace dbWorkspace, FirecloudWorkspaceResponse firecloudWorkspaceResponse) {\n+    FirecloudMapper fcMapper = Mappers.getMapper(FirecloudMapper.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9ae628cac303a9cb767932f630cd3cbc9651527"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMDU4Njc2", "url": "https://github.com/all-of-us/workbench/pull/3805#pullrequestreview-451058676", "createdAt": "2020-07-18T13:56:54Z", "commit": {"oid": "1da61f51e7e51cb621e106493b96ea91bb1ec17c"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxMzo1Njo1NFrOGzoZ-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxNDowNDo0MFrOGzocUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc5MjU3MA==", "bodyText": "I think you shouldn't need to do this explicitly. If you just say @Mapping(source = \"firecloudWorkspaceResponse\" , target = \"accessLevel\"), then MapStruct is supposed to walk the graph of converters (including any mappers in the uses lists) and find the method that matches the signature. There's a way to tell it explicitly in the mapping annotation too, usually only needed for common types like String or Timestamp where there can be lots of  conflicts.", "url": "https://github.com/all-of-us/workbench/pull/3805#discussion_r456792570", "createdAt": "2020-07-18T13:56:54Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/WorkspaceMapper.java", "diffHunk": "@@ -61,10 +62,14 @@\n   @Mapping(target = \"researchPurpose\", source = \"dbWorkspace\")\n   Workspace toApiWorkspace(DbWorkspace dbWorkspace);\n \n-  @Mapping(target = \"workspace\", source = \"dbWorkspace\")\n-  @Mapping(target = \"accessLevel\", source = \"firecloudWorkspaceResponse\")\n-  WorkspaceResponse toApiWorkspaceResponse(\n-      DbWorkspace dbWorkspace, FirecloudWorkspaceResponse firecloudWorkspaceResponse);\n+  default WorkspaceResponse toApiWorkspaceResponse(\n+      DbWorkspace dbWorkspace, FirecloudWorkspaceResponse firecloudWorkspaceResponse) {\n+    FirecloudMapper fcMapper = Mappers.getMapper(FirecloudMapper.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyMjkxOQ=="}, "originalCommit": {"oid": "c9ae628cac303a9cb767932f630cd3cbc9651527"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc5MjgwNQ==", "bodyText": "\ud83d\udc4d to not doing this; it's pretty opaque and likely doesn't  save  much. I really like objects in Java  to be densely populated.", "url": "https://github.com/all-of-us/workbench/pull/3805#discussion_r456792805", "createdAt": "2020-07-18T14:00:02Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -242,10 +242,10 @@ private WorkspaceResponse getWorkspaceImpl(DbWorkspace dbWorkspace) {\n     return workspaceResponse;\n   }\n \n-  private Map<String, FirecloudWorkspaceResponse> getFirecloudWorkspaces(List<String> fields) {\n+  private Map<String, FirecloudWorkspaceResponse> getFirecloudWorkspaces() {\n     // fields must include at least \"workspace.workspaceId\", otherwise\n     // the map creation will fail\n-    return fireCloudService.getWorkspaces(fields).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da61f51e7e51cb621e106493b96ea91bb1ec17c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc5Mjk4OA==", "bodyText": "nit: I'd name this like  uuidToFirecloudWorkspace. I'd abbreviate  workspace before  firecloud because of local context.", "url": "https://github.com/all-of-us/workbench/pull/3805#discussion_r456792988", "createdAt": "2020-07-18T14:02:10Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -187,10 +187,10 @@ public DbWorkspace get(String ns, String firecloudName) {\n \n   @Override\n   public List<WorkspaceResponse> getWorkspacesAndPublicWorkspaces() {\n-    Map<String, FirecloudWorkspaceResponse> fcWorkspaces =\n-        getFirecloudWorkspaces(ImmutableList.of(\"accessLevel\", \"workspace.workspaceId\"));\n+    Map<String, FirecloudWorkspaceResponse> fcWorkspaces = getFirecloudWorkspaces();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da61f51e7e51cb621e106493b96ea91bb1ec17c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc5MzE2OQ==", "bodyText": "Another useful trick  is the @AfterMapping facility, which works well,  but is somewhat less elegant IMHO. Don't think  you necessarily need it here.", "url": "https://github.com/all-of-us/workbench/pull/3805#discussion_r456793169", "createdAt": "2020-07-18T14:04:40Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/WorkspaceMapper.java", "diffHunk": "@@ -61,10 +62,14 @@\n   @Mapping(target = \"researchPurpose\", source = \"dbWorkspace\")\n   Workspace toApiWorkspace(DbWorkspace dbWorkspace);\n \n-  @Mapping(target = \"workspace\", source = \"dbWorkspace\")\n-  @Mapping(target = \"accessLevel\", source = \"firecloudWorkspaceResponse\")\n-  WorkspaceResponse toApiWorkspaceResponse(\n-      DbWorkspace dbWorkspace, FirecloudWorkspaceResponse firecloudWorkspaceResponse);\n+  default WorkspaceResponse toApiWorkspaceResponse(\n+      DbWorkspace dbWorkspace, FirecloudWorkspaceResponse firecloudWorkspaceResponse) {\n+    FirecloudMapper fcMapper = Mappers.getMapper(FirecloudMapper.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyMjkxOQ=="}, "originalCommit": {"oid": "c9ae628cac303a9cb767932f630cd3cbc9651527"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNjcyODA2", "url": "https://github.com/all-of-us/workbench/pull/3805#pullrequestreview-452672806", "createdAt": "2020-07-21T17:21:52Z", "commit": {"oid": "c9ae628cac303a9cb767932f630cd3cbc9651527"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzoyMTo1MlrOG1CMFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODowMToyNFrOG1DrGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2MzU3Mg==", "bodyText": "I see what you're saying. If you just make it non-derfault, you get this:\n    @Override\n    public WorkspaceResponse toApiWorkspaceResponse(DbWorkspace dbWorkspace, FirecloudWorkspaceResponse firecloudWorkspaceResponse) {\n        if ( dbWorkspace == null && firecloudWorkspaceResponse == null ) {\n            return null;\n        }\n\n        WorkspaceResponse workspaceResponse = new WorkspaceResponse();\n\n        if ( firecloudWorkspaceResponse != null ) {\n            workspaceResponse.setWorkspace( firecloudWorkspaceToWorkspace( firecloudWorkspaceResponse.getWorkspace() ) );\n            workspaceResponse.setAccessLevel( firecloudMapper.fcToApiWorkspaceAccessLevel( firecloudWorkspaceResponse.getAccessLevel() ) );\n        }\n\n        return workspaceResponse;\n    }\n\nand it's calling the naive mapper firecloudWorkspaceToWorkspace() instead of toApiWorkspace(DbWorkspace, FirecloudWorkspace).\nIt turns out the incomplete mapper was auto-generated (and doesn't override anything in the mapper interface).\n    protected Workspace firecloudWorkspaceToWorkspace(FirecloudWorkspace firecloudWorkspace) {\n        if ( firecloudWorkspace == null ) {\n            return null;\n        }\n\n        Workspace workspace = new Workspace();\n\n        workspace.setName( firecloudWorkspace.getName() );\n        workspace.setNamespace( firecloudWorkspace.getNamespace() );\n\n        return workspace;\n    }", "url": "https://github.com/all-of-us/workbench/pull/3805#discussion_r458263572", "createdAt": "2020-07-21T17:21:52Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/WorkspaceMapper.java", "diffHunk": "@@ -61,10 +62,14 @@\n   @Mapping(target = \"researchPurpose\", source = \"dbWorkspace\")\n   Workspace toApiWorkspace(DbWorkspace dbWorkspace);\n \n-  @Mapping(target = \"workspace\", source = \"dbWorkspace\")\n-  @Mapping(target = \"accessLevel\", source = \"firecloudWorkspaceResponse\")\n-  WorkspaceResponse toApiWorkspaceResponse(\n-      DbWorkspace dbWorkspace, FirecloudWorkspaceResponse firecloudWorkspaceResponse);\n+  default WorkspaceResponse toApiWorkspaceResponse(\n+      DbWorkspace dbWorkspace, FirecloudWorkspaceResponse firecloudWorkspaceResponse) {\n+    FirecloudMapper fcMapper = Mappers.getMapper(FirecloudMapper.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyMjkxOQ=="}, "originalCommit": {"oid": "c9ae628cac303a9cb767932f630cd3cbc9651527"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4Nzg5Ng==", "bodyText": "I fiddled with it for 20 minutes or so but didn't get much further. If a simple default method is working then I'd stick with that until we can overhaul the WorkspaceMapper somewhat.", "url": "https://github.com/all-of-us/workbench/pull/3805#discussion_r458287896", "createdAt": "2020-07-21T18:01:24Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/WorkspaceMapper.java", "diffHunk": "@@ -61,10 +62,14 @@\n   @Mapping(target = \"researchPurpose\", source = \"dbWorkspace\")\n   Workspace toApiWorkspace(DbWorkspace dbWorkspace);\n \n-  @Mapping(target = \"workspace\", source = \"dbWorkspace\")\n-  @Mapping(target = \"accessLevel\", source = \"firecloudWorkspaceResponse\")\n-  WorkspaceResponse toApiWorkspaceResponse(\n-      DbWorkspace dbWorkspace, FirecloudWorkspaceResponse firecloudWorkspaceResponse);\n+  default WorkspaceResponse toApiWorkspaceResponse(\n+      DbWorkspace dbWorkspace, FirecloudWorkspaceResponse firecloudWorkspaceResponse) {\n+    FirecloudMapper fcMapper = Mappers.getMapper(FirecloudMapper.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyMjkxOQ=="}, "originalCommit": {"oid": "c9ae628cac303a9cb767932f630cd3cbc9651527"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5714069dfe69acca996d63e6a30384429446289", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/f5714069dfe69acca996d63e6a30384429446289", "committedDate": "2020-07-21T18:40:37Z", "message": "Consolidate field masking, fix mapper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4568d9a554df22ac936d872b5a19d779e3f6107", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/d4568d9a554df22ac936d872b5a19d779e3f6107", "committedDate": "2020-07-21T18:40:37Z", "message": "test fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c12ff7468c81a9441d1867a2c8e4ab71b4c1ca0", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/5c12ff7468c81a9441d1867a2c8e4ab71b4c1ca0", "committedDate": "2020-07-21T18:40:38Z", "message": "PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "913338c2264c596b33b554ce21a425d2a017833d", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/913338c2264c596b33b554ce21a425d2a017833d", "committedDate": "2020-07-21T18:40:39Z", "message": "PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f3efdde990f07a758ff8f37c03345a9073778de", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/9f3efdde990f07a758ff8f37c03345a9073778de", "committedDate": "2020-07-21T18:56:08Z", "message": "regression test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fbc19462c22eb9749045dd8721cf7233a403e2ee", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/fbc19462c22eb9749045dd8721cf7233a403e2ee", "committedDate": "2020-07-20T21:23:20Z", "message": "PR feedback"}, "afterCommit": {"oid": "9f3efdde990f07a758ff8f37c03345a9073778de", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/9f3efdde990f07a758ff8f37c03345a9073778de", "committedDate": "2020-07-21T18:56:08Z", "message": "regression test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4473, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}