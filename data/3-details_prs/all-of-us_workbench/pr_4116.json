{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MDE5MDcz", "number": 4116, "title": "[RW-5679][risk=no] Support Institution Table", "bodyText": "Institution table upload supported. Added support to user table for denormalized columns from the affiliation table.\nFixed missing cohort upload and added institution support to DML (insert query) implementation for upload. Made some small timing logging and time printing improvements.\nTODO:\n\nfix refex pattern/match for getting table name from an insert query.\n\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n I have run the E2E tests on ths change against my local UI + API server with yarn test-local\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-10-05T17:54:28Z", "url": "https://github.com/all-of-us/workbench/pull/4116", "merged": true, "mergeCommit": {"oid": "312d9a909ec1b4e6a58e5db0f0d989efa4084521"}, "closed": true, "closedAt": "2020-10-09T15:36:29Z", "author": {"login": "jaycarlton"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQPVObgFqTUwMzIxODA2OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQ3d-0gFqTUwNTc1Mjc3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMjE4MDY5", "url": "https://github.com/all-of-us/workbench/pull/4116#pullrequestreview-503218069", "createdAt": "2020-10-06T17:52:49Z", "commit": {"oid": "e29fcb773af97303955d915878a716c9253e07f6"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo1Mjo0OVrOHdTVnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo1NzoxNVrOHdTgcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ4NzU4MA==", "bodyText": "These mean the same thing, but BigQuery is increasingly favoring INTEGER. Additionally, using INT64 causes Terraform to get into a loop, as BQ always accepts it but shows INTEGER, and TF always thinks it needs to make a change.", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r500487580", "createdAt": "2020-10-06T17:52:49Z", "author": {"login": "jaycarlton"}, "path": "api/reporting/schemas/latest/user.json", "diffHunk": "@@ -61,7 +61,7 @@\n   },\n   {\n     \"name\": \"data_use_agreement_signed_version\",\n-    \"type\": \"INT64\",\n+    \"type\": \"INTEGER\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29fcb773af97303955d915878a716c9253e07f6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ4ODAxNw==", "bodyText": "This override stuff should be pulled out into an input file soon. I have a ticket for that.", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r500488017", "createdAt": "2020-10-06T17:53:35Z", "author": {"login": "jaycarlton"}, "path": "api/reporting/schemas/reporting-wizard.rb", "diffHunk": "@@ -172,6 +179,29 @@ def to_output_path(subdir_name, suffix)\n              :bigquery => 'STRING',\n              :default_constant_value => 1 # REGISTERED\n          }\n+     },\n+     # Unlike some other entity  classes, DbInstitution exposes typed enum values.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29fcb773af97303955d915878a716c9253e07f6"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ4ODYwMg==", "bodyText": "Since the entity class does these enums the \"right way\", I had to make sure not to drop back to Short in the generated code.", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r500488602", "createdAt": "2020-10-06T17:54:29Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/projection/ProjectedReportingInstitution.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.pmiops.workbench.db.dao.projection;\n+\n+// This is a Spring Data projection interface for the Hibernate entity\n+// class DbInstitution. The properties listed correspond to query results\n+// that will be mapped into BigQuery rows in a (mostly) 1:1 fashion.\n+// Fields may not be renamed or reordered or have their types\n+// changed unless both the entity class and any queries returning\n+// this projection type are in complete agreement.\n+\n+// This code was generated using reporting-wizard.rb at 2020-10-05T09:51:25-04:00.\n+// Manual modification should be avoided if possible as this is a one-time generation\n+// and does not run on every build and updates must be merged manually for now.\n+\n+import org.pmiops.workbench.model.DuaType;\n+import org.pmiops.workbench.model.OrganizationType;\n+\n+public interface ProjectedReportingInstitution {\n+  String getDisplayName();\n+\n+  DuaType getDuaTypeEnum();\n+\n+  Long getInstitutionId();\n+\n+  OrganizationType getOrganizationTypeEnum();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29fcb773af97303955d915878a716c9253e07f6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ4OTMyOQ==", "bodyText": "Since cron jobs only report 204 or 500, the enum wasn't making much sense. However, I do continue jobs as far as I can before throwing an exception today.", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r500489329", "createdAt": "2020-10-06T17:55:36Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingService.java", "diffHunk": "@@ -6,5 +6,5 @@\n  * daily) uploads, and aggregate and time-series metrics are computed in BigQuery.\n  */\n public interface ReportingService {\n-  ReportingJobResult takeAndUploadSnapshot();\n+  void takeAndUploadSnapshot();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29fcb773af97303955d915878a716c9253e07f6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MDM1NA==", "bodyText": "These are easy to forget, especially when there are two upload service implementations. I'm thinking about consolidating them into their own thing, like an enum to rule the enums. It could hold the table name and have a method to fetch the extractor values from the other enum.", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r500490354", "createdAt": "2020-10-06T17:57:15Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceDmlImpl.java", "diffHunk": "@@ -3,58 +3,88 @@\n import com.google.cloud.bigquery.QueryJobConfiguration;\n import com.google.cloud.bigquery.QueryParameterValue;\n import com.google.cloud.bigquery.TableResult;\n+import com.google.common.base.Stopwatch;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableList.Builder;\n-import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.Lists;\n import java.time.Duration;\n import java.util.List;\n-import java.util.Map;\n-import java.util.function.Function;\n+import java.util.Optional;\n import java.util.logging.Logger;\n+import java.util.regex.Pattern;\n import javax.inject.Provider;\n import org.pmiops.workbench.api.BigQueryService;\n import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.ReportingCohort;\n+import org.pmiops.workbench.model.ReportingInstitution;\n import org.pmiops.workbench.model.ReportingSnapshot;\n import org.pmiops.workbench.model.ReportingUser;\n import org.pmiops.workbench.model.ReportingWorkspace;\n+import org.pmiops.workbench.reporting.insertion.CohortColumnValueExtractor;\n import org.pmiops.workbench.reporting.insertion.DmlInsertJobBuilder;\n+import org.pmiops.workbench.reporting.insertion.InstitutionColumnValueExtractor;\n import org.pmiops.workbench.reporting.insertion.UserColumnValueExtractor;\n import org.pmiops.workbench.reporting.insertion.WorkspaceColumnValueExtractor;\n+import org.pmiops.workbench.utils.LogFormatters;\n+import org.pmiops.workbench.utils.Matchers;\n import org.springframework.context.annotation.Primary;\n import org.springframework.stereotype.Service;\n \n @Service(\"REPORTING_UPLOAD_SERVICE_DML_IMPL\")\n @Primary\n public class ReportingUploadServiceDmlImpl implements ReportingUploadService {\n \n-  private static final Logger logger = Logger.getLogger(\"ReportingUploadServiceInsertQueryImpl\");\n+  private static final Logger logger =\n+      Logger.getLogger(ReportingUploadServiceDmlImpl.class.getName());\n   private static final long MAX_WAIT_TIME = Duration.ofSeconds(60).toMillis();\n \n   private final BigQueryService bigQueryService;\n+  private final Provider<Stopwatch> stopwatchProvider;\n   private final Provider<WorkbenchConfig> workbenchConfigProvider;\n \n   private static final DmlInsertJobBuilder<ReportingUser> userJobBuilder =\n       UserColumnValueExtractor::values;\n+\n+  private static final DmlInsertJobBuilder<ReportingCohort> cohortJobBuilder =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29fcb773af97303955d915878a716c9253e07f6"}, "originalPosition": 50}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "22386b456e3426839377de85ec4a18c8d393c87f", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/22386b456e3426839377de85ec4a18c8d393c87f", "committedDate": "2020-10-08T20:35:49Z", "message": "test fixes & add doc details"}, "afterCommit": {"oid": "6d25a3f231d25e90c87f862ceb8a3b9f83c9afc7", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/6d25a3f231d25e90c87f862ceb8a3b9f83c9afc7", "committedDate": "2020-10-08T20:57:41Z", "message": "institution support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTgwNzAx", "url": "https://github.com/all-of-us/workbench/pull/4116#pullrequestreview-505180701", "createdAt": "2020-10-08T21:31:10Z", "commit": {"oid": "6d25a3f231d25e90c87f862ceb8a3b9f83c9afc7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMTozMToxMFrOHexIJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjowOTozNVrOHeyG-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyNDIzMQ==", "bodyText": "The other 2 defaults are reasonable, but I'm not sure about this one.  I'd go with OTHER probably", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r502024231", "createdAt": "2020-10-08T21:31:10Z", "author": {"login": "jmthibault79"}, "path": "api/reporting/schemas/reporting-wizard.rb", "diffHunk": "@@ -172,6 +179,29 @@ def to_output_path(subdir_name, suffix)\n              :bigquery => 'STRING',\n              :default_constant_value => 1 # REGISTERED\n          }\n+     },\n+     # Unlike some other entity  classes, DbInstitution exposes typed enum values.\n+     'institution' => {\n+         'dua_type_enum' => {\n+             :projection => 'DuaType',\n+             :swagger => 'DuaType',\n+             :bigquery => 'STRING',\n+             :default_constant_value => 'DuaType.MASTER'\n+         },\n+         'organization_type_enum' => {\n+             :projection => 'OrganizationType',\n+             :swagger => 'OrganizationType',\n+             :bigquery => 'STRING',\n+             :default_constant_value => 'OrganizationType.ACADEMIC_RESEARCH_INSTITUTION'\n+         }\n+     },\n+     'user_verified_institutional_affiliation' => {\n+         'institutional_role_enum' => {\n+             :projection => 'InstitutionalRole',\n+             :swagger => 'InstitutionalRole',\n+             :bigquery => 'STRING',\n+             :default_constant_value => 'InstitutionalRole.UNDERGRADUATE'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d25a3f231d25e90c87f862ceb8a3b9f83c9afc7"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyNTU1NA==", "bodyText": "spellllling", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r502025554", "createdAt": "2020-10-08T21:34:10Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingMapper.java", "diffHunk": "@@ -17,16 +20,68 @@\n     config = MapStructConfig.class,\n     uses = {CommonMappers.class, DbStorageEnums.class})\n public interface ReportingMapper {\n-  ReportingUser toDto(ProjectedReportingUser prjUser);\n+\n+  ReportingInstitution toReporrtingInstitution(ProjectedReportingInstitution prjInstitution);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d25a3f231d25e90c87f862ceb8a3b9f83c9afc7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzMDA5OA==", "bodyText": "Error: the type field has no type.  This causes the UI to fail compilation.", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r502030098", "createdAt": "2020-10-08T21:44:37Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -8446,9 +8467,46 @@ definitions:\n       name:\n         type: string\n         description: User-provided human-readable name for this cohort.\n+      type:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d25a3f231d25e90c87f862ceb8a3b9f83c9afc7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzMjQ4Mw==", "bodyText": "does this need to be contained within the ReportingMapper class?", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r502032483", "createdAt": "2020-10-08T21:50:05Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingMapper.java", "diffHunk": "@@ -17,16 +20,68 @@\n     config = MapStructConfig.class,\n     uses = {CommonMappers.class, DbStorageEnums.class})\n public interface ReportingMapper {\n-  ReportingUser toDto(ProjectedReportingUser prjUser);\n+\n+  ReportingInstitution toReporrtingInstitution(ProjectedReportingInstitution prjInstitution);\n+\n+  List<ReportingInstitution> toReportingInstitutionList(\n+      Collection<ProjectedReportingInstitution> institutions);\n+\n+  ReportingUser toReportingUser(ProjectedReportingUser prjUser);\n \n   List<ReportingUser> toReportingUserList(Collection<ProjectedReportingUser> users);\n \n-  ReportingWorkspace toDto(ProjectedReportingWorkspace prjWorkspace);\n+  ReportingWorkspace toReportingWorkspace(ProjectedReportingWorkspace prjWorkspace);\n \n   List<ReportingWorkspace> toReportingWorkspaceList(\n       Collection<ProjectedReportingWorkspace> dbWorkspace);\n \n-  ReportingCohort toDto(ProjectedReportingCohort cohort);\n+  ReportingCohort toReportingCohort(ProjectedReportingCohort cohort);\n \n   List<ReportingCohort> toModelList(Collection<ProjectedReportingCohort> cohorts);\n+\n+  default ReportingSnapshot toReportingSnapshot(\n+      QueryResultBundle queryResultBundle, long snapshotTimestamp) {\n+    return new ReportingSnapshot()\n+        .captureTimestamp(snapshotTimestamp)\n+        .cohorts(toModelList(queryResultBundle.getCohorts()))\n+        .institutions(toReportingInstitutionList(queryResultBundle.getInstitutions()))\n+        .users(toReportingUserList(queryResultBundle.getUsers()))\n+        .workspaces(toReportingWorkspaceList(queryResultBundle.getWorkspaces()));\n+  }\n+\n+  // Define immutable value class to hold results of queries within a transaction. Mapping to\n+  // Reporting DTO classes will happen outside the transaction.\n+  class QueryResultBundle {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d25a3f231d25e90c87f862ceb8a3b9f83c9afc7"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzODE0MA==", "bodyText": "does getOrganizationTypeOtherText() return NULL or '' for inst 2?  Add an assert for the correct one", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r502038140", "createdAt": "2020-10-08T22:03:55Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionDaoTest.java", "diffHunk": "@@ -106,4 +112,55 @@ public void test_uniqueDisplayNameRequired() {\n         new DbInstitution().setShortName(\"Inst2\").setDisplayName(\"Not Unique\");\n     institutionDao.save(snowflake2);\n   }\n+\n+  @Test\n+  public void testGetReportingInstitutions() {\n+    DbInstitution institution = ReportingTestUtils.createDbInstitution();\n+    institutionDao.deleteAll();\n+    institution = institutionDao.save(institution);\n+\n+    final List<ProjectedReportingInstitution> institutions =\n+        institutionDao.getReportingInstitutions();\n+    assertThat(institutions).hasSize(1);\n+    ReportingTestUtils.assertInstitutionFields(institutions.get(0));\n+  }\n+\n+  @Test\n+  public void testGetReportingInstitutions_empty() {\n+    institutionDao.deleteAll();\n+    assertThat(institutionDao.getReportingInstitutions()).isEmpty();\n+  }\n+\n+  @Test\n+  public void testGetReportingInstitutions_multiple() {\n+    institutionDao.deleteAll();\n+\n+    DbInstitution institution1 = ReportingTestUtils.createDbInstitution();\n+    institution1.setDisplayName(\"Cairo Consulting\");\n+    institution1.setDuaTypeEnum(DuaType.RESTRICTED);\n+    institution1.setOrganizationTypeEnum(OrganizationType.OTHER);\n+    institution1.setOrganizationTypeOtherText(\"Pyramid Scheme\");\n+\n+    DbInstitution institution2 = new DbInstitution();\n+    institution2.setShortName(\"mash\");\n+    institution2.setDisplayName(\"MASH\");\n+    institution2.setDuaTypeEnum(DuaType.MASTER);\n+    institution2.setOrganizationTypeEnum(OrganizationType.HEALTH_CENTER_NON_PROFIT);\n+\n+    institutionDao.save(ImmutableList.of(institution1, institution2));\n+\n+    final List<ProjectedReportingInstitution> institutions =\n+        institutionDao.getReportingInstitutions();\n+    assertThat(institutions).hasSize(2);\n+    assertThat(institutions.get(0).getDisplayName()).isEqualTo(\"Cairo Consulting\");\n+    assertThat(institutions.get(0).getDuaTypeEnum()).isEqualTo(DuaType.RESTRICTED);\n+    assertThat(institutions.get(0).getOrganizationTypeEnum()).isEqualTo(OrganizationType.OTHER);\n+    assertThat(institutions.get(0).getOrganizationTypeOtherText()).isEqualTo(\"Pyramid Scheme\");\n+\n+    assertThat(institutions.get(1).getDisplayName()).isEqualTo(\"MASH\");\n+    assertThat(institutions.get(1).getDuaTypeEnum()).isEqualTo(DuaType.MASTER);\n+    assertThat(institutions.get(1).getOrganizationTypeEnum())\n+        .isEqualTo(OrganizationType.HEALTH_CENTER_NON_PROFIT);\n+    assertThat(institutions.get(1).getDisplayName()).isEqualTo(\"MASH\");\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d25a3f231d25e90c87f862ceb8a3b9f83c9afc7"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzODY2Mg==", "bodyText": "?", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r502038662", "createdAt": "2020-10-08T22:05:14Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/reporting/ReportingMapperTest.java", "diffHunk": "@@ -26,16 +30,33 @@\n   public static class conifg {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d25a3f231d25e90c87f862ceb8a3b9f83c9afc7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDIyOQ==", "bodyText": "no", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r502040229", "createdAt": "2020-10-08T22:09:21Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/testconfig/FakeTicker.java", "diffHunk": "@@ -1,17 +1,19 @@\n package org.pmiops.workbench.testconfig;\n \n import com.google.common.base.Ticker;\n+import java.util.concurrent.TimeUnit;\n \n public class FakeTicker extends Ticker {\n-  private final long elapsedMillis;\n+  private long elapsedMillis;\n \n-  protected FakeTicker(long elapsedMillis) {\n+  protected FakeTicker(long tickNanos) {\n     super();\n-    this.elapsedMillis = elapsedMillis;\n+    this.elapsedMillis = tickNanos;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d25a3f231d25e90c87f862ceb8a3b9f83c9afc7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDMxNA==", "bodyText": "also no", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r502040314", "createdAt": "2020-10-08T22:09:35Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/testconfig/FakeTicker.java", "diffHunk": "@@ -1,17 +1,19 @@\n package org.pmiops.workbench.testconfig;\n \n import com.google.common.base.Ticker;\n+import java.util.concurrent.TimeUnit;\n \n public class FakeTicker extends Ticker {\n-  private final long elapsedMillis;\n+  private long elapsedMillis;\n \n-  protected FakeTicker(long elapsedMillis) {\n+  protected FakeTicker(long tickNanos) {\n     super();\n-    this.elapsedMillis = elapsedMillis;\n+    this.elapsedMillis = tickNanos;\n   }\n \n   @Override\n   public long read() {\n+    elapsedMillis += TimeUnit.MILLISECONDS.toNanos(200);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d25a3f231d25e90c87f862ceb8a3b9f83c9afc7"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba044206079cfe819cd1856785eb60efaef6c3b3", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/ba044206079cfe819cd1856785eb60efaef6c3b3", "committedDate": "2020-10-09T13:23:22Z", "message": "rebase"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b988a9f05e09021357a08f1eb8de10013e79f01", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/4b988a9f05e09021357a08f1eb8de10013e79f01", "committedDate": "2020-10-09T13:16:44Z", "message": "swagger fix and PR comment fixes"}, "afterCommit": {"oid": "ba044206079cfe819cd1856785eb60efaef6c3b3", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/ba044206079cfe819cd1856785eb60efaef6c3b3", "committedDate": "2020-10-09T13:23:22Z", "message": "rebase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1NzUyNzcy", "url": "https://github.com/all-of-us/workbench/pull/4116#pullrequestreview-505752772", "createdAt": "2020-10-09T14:57:33Z", "commit": {"oid": "ba044206079cfe819cd1856785eb60efaef6c3b3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4170, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}