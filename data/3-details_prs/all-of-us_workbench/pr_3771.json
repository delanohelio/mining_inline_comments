{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NTA3OTU4", "number": 3771, "title": "[RW-4589][risk=no] Convert CB wizard to full page", "bodyText": "Moves main content from the cohort builder wizard to a full page\nIncludes some style updates to match new design\nRenamed root CB component cohort-page and named new component cohort-search\n\n*New UI added here is behind the enableCohortBuilderV2 feature flag.\n\n\n\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n I have run and tested this change locally\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer", "createdAt": "2020-07-10T15:36:29Z", "url": "https://github.com/all-of-us/workbench/pull/3771", "merged": true, "mergeCommit": {"oid": "d0fc47231466ad0afdf006fa3c3562f648179781"}, "closed": true, "closedAt": "2020-07-15T18:58:59Z", "author": {"login": "dolbeew"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczmumrgFqTQ0NjUwMjQxMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1NqrZgBqjM1NDk0NDg1NzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NTAyNDEx", "url": "https://github.com/all-of-us/workbench/pull/3771#pullrequestreview-446502411", "createdAt": "2020-07-10T15:38:26Z", "commit": {"oid": "631a0cbd324e3f30c333a39beed1db067ee2c2ca"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTozODoyN1rOGv8Gag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjo0NzozNVrOGv-UUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyMDkzOA==", "bodyText": "This file is mostly existing code but is showing as new code since I renamed the file. The new code is what I duplicated to use behind the feature flag.", "url": "https://github.com/all-of-us/workbench/pull/3771#discussion_r452920938", "createdAt": "2020-07-10T15:38:27Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/cohort-page/cohort-page.component.html", "diffHunk": "@@ -0,0 +1,108 @@\n+<div #wrapper class=\"cohort-search-wrapper\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "631a0cbd324e3f30c333a39beed1db067ee2c2ca"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1NzI2NA==", "bodyText": "This is a copy of ListSearch so we can match the new design without having to have a bunch of if statements to check for the feature flag", "url": "https://github.com/all-of-us/workbench/pull/3771#discussion_r452957264", "createdAt": "2020-07-10T16:47:35Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/list-search-v2/list-search-v2.component.tsx", "diffHunk": "@@ -0,0 +1,426 @@\n+import * as React from 'react';\n+import {Key} from 'ts-key-enum';\n+\n+import {domainToTitle} from 'app/cohort-search/utils';\n+import {Button, Clickable} from 'app/components/buttons';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Spinner, SpinnerOverlay} from 'app/components/spinners';\n+import {AoU} from 'app/components/text-wrappers';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, withCurrentWorkspace} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {WorkspaceData} from 'app/utils/workspace-data';\n+import {environment} from 'environments/environment';\n+import {CriteriaType, DomainType} from 'generated/fetch';\n+\n+const borderStyle = `1px solid ${colorWithWhiteness(colors.dark, 0.7)}`;\n+const styles = reactStyles({\n+  searchContainer: {\n+    width: '65%',\n+    padding: '0.4rem 0',\n+    zIndex: 10,\n+  },\n+  searchBar: {\n+    height: '2.1rem',\n+    width: '100%',\n+    padding: '7px 14px',\n+    borderRadius: '5px',\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+  },\n+  searchInput: {\n+    width: '90%',\n+    height: '1.5rem',\n+    marginLeft: '0.25rem',\n+    padding: '0',\n+    background: 'transparent',\n+    border: 0,\n+    outline: 'none',\n+  },\n+  drugsText: {\n+    marginTop: '0.25rem',\n+    lineHeight: '0.75rem'\n+  },\n+  attrIcon: {\n+    marginRight: '0.5rem',\n+    color: colors.accent,\n+    cursor: 'pointer'\n+  },\n+  selectIcon: {\n+    margin: '2px 0.5rem 2px 2px',\n+    color: colorWithWhiteness(colors.success, -0.5),\n+    cursor: 'pointer'\n+  },\n+  selectedIcon: {\n+    marginRight: '0.4rem',\n+    color: colorWithWhiteness(colors.success, -0.5),\n+    opacity: 0.4,\n+    cursor: 'not-allowed'\n+  },\n+  disabledIcon: {\n+    marginRight: '0.4rem',\n+    color: colorWithWhiteness(colors.dark, 0.5),\n+    opacity: 0.4,\n+    cursor: 'not-allowed',\n+    pointerEvents: 'none'\n+  },\n+  brandIcon: {\n+    marginRight: '0.4rem',\n+    color: colorWithWhiteness(colors.dark, 0.5),\n+    cursor: 'pointer'\n+  },\n+  treeIcon: {\n+    color: colors.accent,\n+    cursor: 'pointer',\n+    fontSize: '1.15rem',\n+  },\n+  listContainer: {\n+    width: '99%',\n+    margin: '0.5rem 0 1rem',\n+    fontSize: '12px',\n+    color: colors.primary,\n+  },\n+  vocabLink: {\n+    display: 'inline-block',\n+    color: colors.accent,\n+  },\n+  table: {\n+    width: '100%',\n+    border: borderStyle,\n+    borderRadius: '3px',\n+    tableLayout: 'fixed',\n+  },\n+  columnHeader: {\n+    padding: '0 0 0 0.25rem',\n+    background: colorWithWhiteness(colors.dark, 0.93),\n+    color: colors.primary,\n+    border: 0,\n+    borderBottom: borderStyle,\n+    fontWeight: 600,\n+    textAlign: 'left',\n+    verticalAlign: 'middle',\n+    lineHeight: '0.75rem'\n+  },\n+  columnBody: {\n+    background: colors.white,\n+    verticalAlign: 'middle',\n+    padding: 0,\n+    border: 0,\n+    borderBottom: borderStyle,\n+    color: colors.primary,\n+    lineHeight: '0.8rem',\n+  },\n+  selectDiv: {\n+    width: '6%',\n+    float: 'left',\n+    lineHeight: '0.6rem',\n+  },\n+  nameDiv: {\n+    width: '94%',\n+    float: 'left',\n+    whiteSpace: 'nowrap',\n+    overflow: 'hidden',\n+    textOverflow: 'ellipsis'\n+  },\n+  error: {\n+    width: '99%',\n+    marginTop: '2.75rem',\n+    padding: '0.25rem',\n+    background: colors.warning,\n+    color: colors.white,\n+    fontSize: '12px',\n+    borderRadius: '5px',\n+  },\n+  helpText: {\n+    display: 'table-cell',\n+    height: '100%',\n+    lineHeight: '0.75rem',\n+    verticalAlign: 'middle',\n+    width: '50%'\n+  }\n+});\n+\n+interface Props {\n+  hierarchy: Function;\n+  searchContext: any;\n+  select: Function;\n+  selectedIds: Array<string>;\n+  setAttributes: Function;\n+  workspace: WorkspaceData;\n+}\n+\n+interface State {\n+  data: any;\n+  standardData: any;\n+  error: boolean;\n+  loading: boolean;\n+  standardOnly: boolean;\n+  sourceMatch: any;\n+  ingredients: any;\n+  hoverId: string;\n+}\n+\n+export const ListSearchV2 = withCurrentWorkspace()(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "983afe57c33acd518a93363686106913a4f5adb2"}, "originalPosition": 165}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NDc4OTk0", "url": "https://github.com/all-of-us/workbench/pull/3771#pullrequestreview-447478994", "createdAt": "2020-07-13T18:02:15Z", "commit": {"oid": "bf57d1a626cde30c15b37a79379549d2937e3c87"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODowMjoxNVrOGwzsww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODowMjoxNVrOGwzsww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzMTg3NQ==", "bodyText": "We can use FlexWrap here as well", "url": "https://github.com/all-of-us/workbench/pull/3771#discussion_r453831875", "createdAt": "2020-07-13T18:02:15Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/cohort-search/cohort-search/cohort-search.component.tsx", "diffHunk": "@@ -0,0 +1,369 @@\n+import {Component, Input} from '@angular/core';\n+import * as React from 'react';\n+\n+import {AttributesPage} from 'app/cohort-search/attributes-page/attributes-page.component';\n+import {Demographics} from 'app/cohort-search/demographics/demographics.component';\n+import {ListSearchV2} from 'app/cohort-search/list-search-v2/list-search-v2.component';\n+import {searchRequestStore} from 'app/cohort-search/search-state.service';\n+import {CriteriaTree} from 'app/cohort-search/tree/tree.component';\n+import {domainToTitle, generateId, typeToTitle} from 'app/cohort-search/utils';\n+import {Button, Clickable} from 'app/components/buttons';\n+import {ClrIcon} from 'app/components/icons';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import colors, {addOpacity} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {Criteria, CriteriaType, DomainType, TemporalMention, TemporalTime} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  backArrow: {\n+    background: `${addOpacity(colors.accent, 0.15)}`,\n+    borderRadius: '50%',\n+    height: '1.5rem',\n+    lineHeight: '1.4rem',\n+    textAlign: 'center',\n+    width: '1.5rem',\n+  },\n+  footer: {\n+    marginTop: '0.5rem',\n+    padding: '0.45rem 0rem',\n+    display: 'flex',\n+    justifyContent: 'flex-end',\n+  },\n+  panelLeft: {\n+    display: 'none',\n+    flex: 1,\n+    minWidth: '14rem',\n+    overflowY: 'auto',\n+    overflowX: 'hidden',\n+    width: '100%',\n+    height: '100%',\n+    padding: '0 0.4rem 0 1rem',\n+  },\n+  searchContainer: {\n+    display: 'flex',\n+    flexWrap: 'wrap',\n+    height: '70vh',\n+    width: '100%',\n+  },\n+  titleBar: {\n+    marginBottom: '0.5rem',\n+    padding: '0rem 1rem',\n+    display: 'flex',\n+    justifyContent: 'space-between',\n+    alignItems: 'flex-end',\n+    height: '2.5rem',\n+    marginTop: '0.5rem',\n+  }\n+});\n+\n+const arrowIcon = '/assets/icons/arrow-left-regular.svg';\n+\n+function initGroup(role: string, item: any) {\n+  return {\n+    id: generateId(role),\n+    items: [item],\n+    count: null,\n+    temporal: false,\n+    mention: TemporalMention.ANYMENTION,\n+    time: TemporalTime.DURINGSAMEENCOUNTERAS,\n+    timeValue: '',\n+    timeFrame: '',\n+    isRequesting: false,\n+    status: 'active'\n+  };\n+}\n+\n+interface Selection extends Criteria {\n+  parameterId: string;\n+}\n+\n+interface Props {\n+  closeSearch: () => void;\n+  searchContext: any;\n+}\n+\n+interface State {\n+  attributesNode: Criteria;\n+  autocompleteSelection: Criteria;\n+  backMode: string;\n+  count: number;\n+  disableFinish: boolean;\n+  groupSelections: Array<number>;\n+  hierarchyNode: Criteria;\n+  loadingSubtree: boolean;\n+  mode: string;\n+  selectedIds: Array<string>;\n+  selections: Array<Selection>;\n+  title: string;\n+  treeSearchTerms: string;\n+}\n+\n+export class CohortSearch extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      attributesNode: undefined,\n+      autocompleteSelection: undefined,\n+      backMode: 'list',\n+      count: 0,\n+      disableFinish: false,\n+      groupSelections: [],\n+      hierarchyNode: undefined,\n+      loadingSubtree: false,\n+      mode: 'list',\n+      selectedIds: [],\n+      selections: [],\n+      title: '',\n+      treeSearchTerms: '',\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    const {searchContext: {domain, item, standard, type}} = this.props;\n+    const selections = item.searchParameters;\n+    const selectedIds = selections.map(s => s.parameterId);\n+    if (type === CriteriaType.DECEASED) {\n+      this.selectDeceased();\n+    } else {\n+      const title = domain === DomainType.PERSON ? typeToTitle(type) : domainToTitle(domain);\n+      let {backMode, mode} = this.state;\n+      let hierarchyNode;\n+      if (this.initTree) {\n+        hierarchyNode = {\n+          domainId: domain,\n+          type: type,\n+          isStandard: standard,\n+          id: 0,\n+        };\n+        backMode = 'tree';\n+        mode = 'tree';\n+      }\n+      this.setState({backMode, hierarchyNode, mode, selectedIds, selections, title});\n+    }\n+  }\n+\n+  setScroll = (id: string) => {\n+    const nodeId = `node${id}`;\n+    const node = document.getElementById(nodeId);\n+    if (node) {\n+      setTimeout(() => node.scrollIntoView({behavior: 'smooth', block: 'center'}), 200);\n+    }\n+    this.setState({loadingSubtree: false});\n+  }\n+\n+  back = () => {\n+    if (this.state.mode === 'tree') {\n+      this.setState({autocompleteSelection: undefined, backMode: 'list', hierarchyNode: undefined, mode: 'list'});\n+    } else {\n+      this.setState({attributesNode: undefined, mode: this.state.backMode});\n+    }\n+  }\n+\n+  finish = () => {\n+    const {searchContext: {domain, groupId, item, role, type}} = this.props;\n+    const {selections} = this.state;\n+    if (domain === DomainType.PERSON) {\n+      triggerEvent('Cohort Builder Search', 'Click', `Demo - ${typeToTitle(type)} - Finish`);\n+    }\n+    const searchRequest = searchRequestStore.getValue();\n+    item.searchParameters = selections;\n+    if (groupId) {\n+      const groupIndex = searchRequest[role].findIndex(grp => grp.id === groupId);\n+      if (groupIndex > -1) {\n+        const itemIndex = searchRequest[role][groupIndex].items.findIndex(it => it.id === item.id);\n+        if (itemIndex > -1) {\n+          searchRequest[role][groupIndex].items[itemIndex] = item;\n+        } else {\n+          searchRequest[role][groupIndex].items.push(item);\n+        }\n+      }\n+    } else {\n+      searchRequest[role].push(initGroup(role, item));\n+    }\n+    searchRequestStore.next(searchRequest);\n+    this.props.closeSearch();\n+  }\n+\n+  get initTree() {\n+    const {searchContext: {domain}} = this.props;\n+    return domain === DomainType.PHYSICALMEASUREMENT\n+      || domain === DomainType.SURVEY\n+      || domain === DomainType.VISIT;\n+  }\n+\n+  searchContentStyle(mode: string) {\n+    let style = {\n+      display: 'none',\n+      flex: 1,\n+      minWidth: '14rem',\n+      overflowY: 'auto',\n+      overflowX: 'hidden',\n+      width: '100%',\n+      height: '100%',\n+      padding: '0 0.4rem 0 1rem',\n+    } as React.CSSProperties;\n+    if (this.state.mode === mode) {\n+      style = {...style, display: 'block', animation: 'fadeEffect 1s'};\n+    }\n+    return style;\n+  }\n+\n+  showHierarchy = (criterion: Criteria) => {\n+    this.setState({\n+      autocompleteSelection: criterion,\n+      backMode: 'tree',\n+      hierarchyNode: {...criterion, id: 0},\n+      mode: 'tree',\n+      loadingSubtree: true,\n+      treeSearchTerms: criterion.name\n+    });\n+  }\n+\n+  modifiersFlag = (disabled: boolean) => {\n+    this.setState({disableFinish: disabled});\n+  }\n+\n+  setTreeSearchTerms = (input: string) => {\n+    this.setState({treeSearchTerms: input});\n+  }\n+\n+  setAutocompleteSelection = (selection: any) => {\n+    this.setState({loadingSubtree: true, autocompleteSelection: selection});\n+  }\n+\n+  setAttributes = (criterion: Criteria) => {\n+    this.setState({attributesNode: criterion, backMode: this.state.mode, mode: 'attributes'});\n+  }\n+\n+  addSelection = (param: any) => {\n+    let {groupSelections, selectedIds, selections} = this.state;\n+    if (selectedIds.includes(param.parameterId)) {\n+      selections = selections.filter(p => p.parameterId !== param.parameterId);\n+    } else {\n+      selectedIds = [...selectedIds, param.parameterId];\n+      if (param.group) {\n+        groupSelections = [...groupSelections, param.id];\n+      }\n+    }\n+    selections = [...selections, param];\n+    this.setState({groupSelections, selections, selectedIds});\n+  }\n+\n+  selectDeceased() {\n+    const param = {\n+      id: null,\n+      parentId: null,\n+      parameterId: '',\n+      type: CriteriaType.DECEASED.toString(),\n+      name: 'Deceased',\n+      group: false,\n+      domainId: DomainType.PERSON.toString(),\n+      hasAttributes: false,\n+      selectable: true,\n+      attributes: []\n+    } as Selection;\n+    // wrapping in a timeout here prevents 'ExpressionChangedAfterItHasBeenCheckedError' in the parent component\n+    // TODO remove timeout once cohort-search component is converted to React\n+    setTimeout(() => this.setState({selections: [param]}, () => this.finish()));\n+  }\n+\n+  render() {\n+    const {closeSearch, searchContext, searchContext: {domain, type}} = this.props;\n+    const {attributesNode, autocompleteSelection, count, groupSelections, hierarchyNode, loadingSubtree, mode, selectedIds, selections,\n+      title, treeSearchTerms} = this.state;\n+    return !!searchContext ? <div style={styles.searchContainer}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf57d1a626cde30c15b37a79379549d2937e3c87"}, "originalPosition": 275}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NDgwMjEz", "url": "https://github.com/all-of-us/workbench/pull/3771#pullrequestreview-447480213", "createdAt": "2020-07-13T18:04:03Z", "commit": {"oid": "bf57d1a626cde30c15b37a79379549d2937e3c87"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODowNDowM1rOGwzxFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODowNDowM1rOGwzxFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzMjk4MQ==", "bodyText": "Optional: We can create a style object for button as its same (as of now)", "url": "https://github.com/all-of-us/workbench/pull/3771#discussion_r453832981", "createdAt": "2020-07-13T18:04:03Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/cohort-search/cohort-search/cohort-search.component.tsx", "diffHunk": "@@ -0,0 +1,369 @@\n+import {Component, Input} from '@angular/core';\n+import * as React from 'react';\n+\n+import {AttributesPage} from 'app/cohort-search/attributes-page/attributes-page.component';\n+import {Demographics} from 'app/cohort-search/demographics/demographics.component';\n+import {ListSearchV2} from 'app/cohort-search/list-search-v2/list-search-v2.component';\n+import {searchRequestStore} from 'app/cohort-search/search-state.service';\n+import {CriteriaTree} from 'app/cohort-search/tree/tree.component';\n+import {domainToTitle, generateId, typeToTitle} from 'app/cohort-search/utils';\n+import {Button, Clickable} from 'app/components/buttons';\n+import {ClrIcon} from 'app/components/icons';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import colors, {addOpacity} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {Criteria, CriteriaType, DomainType, TemporalMention, TemporalTime} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  backArrow: {\n+    background: `${addOpacity(colors.accent, 0.15)}`,\n+    borderRadius: '50%',\n+    height: '1.5rem',\n+    lineHeight: '1.4rem',\n+    textAlign: 'center',\n+    width: '1.5rem',\n+  },\n+  footer: {\n+    marginTop: '0.5rem',\n+    padding: '0.45rem 0rem',\n+    display: 'flex',\n+    justifyContent: 'flex-end',\n+  },\n+  panelLeft: {\n+    display: 'none',\n+    flex: 1,\n+    minWidth: '14rem',\n+    overflowY: 'auto',\n+    overflowX: 'hidden',\n+    width: '100%',\n+    height: '100%',\n+    padding: '0 0.4rem 0 1rem',\n+  },\n+  searchContainer: {\n+    display: 'flex',\n+    flexWrap: 'wrap',\n+    height: '70vh',\n+    width: '100%',\n+  },\n+  titleBar: {\n+    marginBottom: '0.5rem',\n+    padding: '0rem 1rem',\n+    display: 'flex',\n+    justifyContent: 'space-between',\n+    alignItems: 'flex-end',\n+    height: '2.5rem',\n+    marginTop: '0.5rem',\n+  }\n+});\n+\n+const arrowIcon = '/assets/icons/arrow-left-regular.svg';\n+\n+function initGroup(role: string, item: any) {\n+  return {\n+    id: generateId(role),\n+    items: [item],\n+    count: null,\n+    temporal: false,\n+    mention: TemporalMention.ANYMENTION,\n+    time: TemporalTime.DURINGSAMEENCOUNTERAS,\n+    timeValue: '',\n+    timeFrame: '',\n+    isRequesting: false,\n+    status: 'active'\n+  };\n+}\n+\n+interface Selection extends Criteria {\n+  parameterId: string;\n+}\n+\n+interface Props {\n+  closeSearch: () => void;\n+  searchContext: any;\n+}\n+\n+interface State {\n+  attributesNode: Criteria;\n+  autocompleteSelection: Criteria;\n+  backMode: string;\n+  count: number;\n+  disableFinish: boolean;\n+  groupSelections: Array<number>;\n+  hierarchyNode: Criteria;\n+  loadingSubtree: boolean;\n+  mode: string;\n+  selectedIds: Array<string>;\n+  selections: Array<Selection>;\n+  title: string;\n+  treeSearchTerms: string;\n+}\n+\n+export class CohortSearch extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      attributesNode: undefined,\n+      autocompleteSelection: undefined,\n+      backMode: 'list',\n+      count: 0,\n+      disableFinish: false,\n+      groupSelections: [],\n+      hierarchyNode: undefined,\n+      loadingSubtree: false,\n+      mode: 'list',\n+      selectedIds: [],\n+      selections: [],\n+      title: '',\n+      treeSearchTerms: '',\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    const {searchContext: {domain, item, standard, type}} = this.props;\n+    const selections = item.searchParameters;\n+    const selectedIds = selections.map(s => s.parameterId);\n+    if (type === CriteriaType.DECEASED) {\n+      this.selectDeceased();\n+    } else {\n+      const title = domain === DomainType.PERSON ? typeToTitle(type) : domainToTitle(domain);\n+      let {backMode, mode} = this.state;\n+      let hierarchyNode;\n+      if (this.initTree) {\n+        hierarchyNode = {\n+          domainId: domain,\n+          type: type,\n+          isStandard: standard,\n+          id: 0,\n+        };\n+        backMode = 'tree';\n+        mode = 'tree';\n+      }\n+      this.setState({backMode, hierarchyNode, mode, selectedIds, selections, title});\n+    }\n+  }\n+\n+  setScroll = (id: string) => {\n+    const nodeId = `node${id}`;\n+    const node = document.getElementById(nodeId);\n+    if (node) {\n+      setTimeout(() => node.scrollIntoView({behavior: 'smooth', block: 'center'}), 200);\n+    }\n+    this.setState({loadingSubtree: false});\n+  }\n+\n+  back = () => {\n+    if (this.state.mode === 'tree') {\n+      this.setState({autocompleteSelection: undefined, backMode: 'list', hierarchyNode: undefined, mode: 'list'});\n+    } else {\n+      this.setState({attributesNode: undefined, mode: this.state.backMode});\n+    }\n+  }\n+\n+  finish = () => {\n+    const {searchContext: {domain, groupId, item, role, type}} = this.props;\n+    const {selections} = this.state;\n+    if (domain === DomainType.PERSON) {\n+      triggerEvent('Cohort Builder Search', 'Click', `Demo - ${typeToTitle(type)} - Finish`);\n+    }\n+    const searchRequest = searchRequestStore.getValue();\n+    item.searchParameters = selections;\n+    if (groupId) {\n+      const groupIndex = searchRequest[role].findIndex(grp => grp.id === groupId);\n+      if (groupIndex > -1) {\n+        const itemIndex = searchRequest[role][groupIndex].items.findIndex(it => it.id === item.id);\n+        if (itemIndex > -1) {\n+          searchRequest[role][groupIndex].items[itemIndex] = item;\n+        } else {\n+          searchRequest[role][groupIndex].items.push(item);\n+        }\n+      }\n+    } else {\n+      searchRequest[role].push(initGroup(role, item));\n+    }\n+    searchRequestStore.next(searchRequest);\n+    this.props.closeSearch();\n+  }\n+\n+  get initTree() {\n+    const {searchContext: {domain}} = this.props;\n+    return domain === DomainType.PHYSICALMEASUREMENT\n+      || domain === DomainType.SURVEY\n+      || domain === DomainType.VISIT;\n+  }\n+\n+  searchContentStyle(mode: string) {\n+    let style = {\n+      display: 'none',\n+      flex: 1,\n+      minWidth: '14rem',\n+      overflowY: 'auto',\n+      overflowX: 'hidden',\n+      width: '100%',\n+      height: '100%',\n+      padding: '0 0.4rem 0 1rem',\n+    } as React.CSSProperties;\n+    if (this.state.mode === mode) {\n+      style = {...style, display: 'block', animation: 'fadeEffect 1s'};\n+    }\n+    return style;\n+  }\n+\n+  showHierarchy = (criterion: Criteria) => {\n+    this.setState({\n+      autocompleteSelection: criterion,\n+      backMode: 'tree',\n+      hierarchyNode: {...criterion, id: 0},\n+      mode: 'tree',\n+      loadingSubtree: true,\n+      treeSearchTerms: criterion.name\n+    });\n+  }\n+\n+  modifiersFlag = (disabled: boolean) => {\n+    this.setState({disableFinish: disabled});\n+  }\n+\n+  setTreeSearchTerms = (input: string) => {\n+    this.setState({treeSearchTerms: input});\n+  }\n+\n+  setAutocompleteSelection = (selection: any) => {\n+    this.setState({loadingSubtree: true, autocompleteSelection: selection});\n+  }\n+\n+  setAttributes = (criterion: Criteria) => {\n+    this.setState({attributesNode: criterion, backMode: this.state.mode, mode: 'attributes'});\n+  }\n+\n+  addSelection = (param: any) => {\n+    let {groupSelections, selectedIds, selections} = this.state;\n+    if (selectedIds.includes(param.parameterId)) {\n+      selections = selections.filter(p => p.parameterId !== param.parameterId);\n+    } else {\n+      selectedIds = [...selectedIds, param.parameterId];\n+      if (param.group) {\n+        groupSelections = [...groupSelections, param.id];\n+      }\n+    }\n+    selections = [...selections, param];\n+    this.setState({groupSelections, selections, selectedIds});\n+  }\n+\n+  selectDeceased() {\n+    const param = {\n+      id: null,\n+      parentId: null,\n+      parameterId: '',\n+      type: CriteriaType.DECEASED.toString(),\n+      name: 'Deceased',\n+      group: false,\n+      domainId: DomainType.PERSON.toString(),\n+      hasAttributes: false,\n+      selectable: true,\n+      attributes: []\n+    } as Selection;\n+    // wrapping in a timeout here prevents 'ExpressionChangedAfterItHasBeenCheckedError' in the parent component\n+    // TODO remove timeout once cohort-search component is converted to React\n+    setTimeout(() => this.setState({selections: [param]}, () => this.finish()));\n+  }\n+\n+  render() {\n+    const {closeSearch, searchContext, searchContext: {domain, type}} = this.props;\n+    const {attributesNode, autocompleteSelection, count, groupSelections, hierarchyNode, loadingSubtree, mode, selectedIds, selections,\n+      title, treeSearchTerms} = this.state;\n+    return !!searchContext ? <div style={styles.searchContainer}>\n+      <div style={{height: '100%', width: '100%'}}>\n+        <div style={styles.titleBar}>\n+          <div style={{display: 'inline-flex', marginRight: '0.5rem'}}>\n+            <Clickable style={styles.backArrow} onClick={() => closeSearch()}>\n+              <img src={arrowIcon} style={{height: '21px', width: '18px'}} alt='Go back' />\n+            </Clickable>\n+            <h2 style={{color: colors.primary, lineHeight: '1.5rem', margin: '0 0 0 0.75rem'}}>\n+              {title}\n+            </h2>\n+          </div>\n+          {mode === 'attributes' && <Button type='link' onClick={this.back}>\n+            <ClrIcon size='24' shape='close'/>\n+          </Button>}\n+        </div>\n+        <div style={\n+          (domain === DomainType.PERSON && type !== CriteriaType.AGE)\n+            ? {marginBottom: '3.5rem'}\n+            : {height: 'calc(100% - 3.5rem)'}\n+        }>\n+          {domain === DomainType.PERSON ? <div style={{flex: 1, overflow: 'auto'}}>\n+              <Demographics\n+                count={count}\n+                criteriaType={type}\n+                select={this.addSelection}\n+                selectedIds={selectedIds}\n+                selections={selections}/>\n+            </div>\n+            : <React.Fragment>\n+              {loadingSubtree && <SpinnerOverlay/>}\n+              <div style={loadingSubtree ? {height: '100%', pointerEvents: 'none', opacity: 0.3} : {height: '100%'}}>\n+                {/* Tree View */}\n+                <div style={this.searchContentStyle('tree')}>\n+                  {hierarchyNode && <CriteriaTree\n+                      autocompleteSelection={autocompleteSelection}\n+                      back={this.back}\n+                      groupSelections={groupSelections}\n+                      node={hierarchyNode}\n+                      scrollToMatch={this.setScroll}\n+                      searchTerms={treeSearchTerms}\n+                      select={this.addSelection}\n+                      selectedIds={selectedIds}\n+                      selectOption={this.setAutocompleteSelection}\n+                      setAttributes={this.setAttributes}\n+                      setSearchTerms={this.setTreeSearchTerms}/>}\n+                </div>\n+                {/* List View (using duplicated version of ListSearch) */}\n+                <div style={this.searchContentStyle('list')}>\n+                  <ListSearchV2 hierarchy={this.showHierarchy}\n+                              searchContext={searchContext}\n+                              select={this.addSelection}\n+                              selectedIds={selectedIds}\n+                              setAttributes={this.setAttributes}/>\n+                </div>\n+                {/**\n+                 Attributes Page - This will no longer be rendered here in the future, leaving temporarily for reference\n+                 TODO Remove once AttributesPage is moved to the sidebar with RW-4595\n+                 **/}\n+                <div style={this.searchContentStyle('attributes')}>\n+                  {!!attributesNode && <AttributesPage\n+                      close={this.back}\n+                      node={attributesNode}\n+                      select={this.addSelection}/>}\n+                </div>\n+              </div>\n+            </React.Fragment>}\n+          {type === CriteriaType.AGE && <div style={styles.footer}>\n+            <Button style={{height: '1.5rem', margin: '0.25rem 0.5rem'}}\n+                    type='link'\n+                    onClick={closeSearch}>\n+              Cancel\n+            </Button>\n+            <Button style={{height: '1.5rem', margin: '0.25rem 0.5rem'}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf57d1a626cde30c15b37a79379549d2937e3c87"}, "originalPosition": 347}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NDgxMDky", "url": "https://github.com/all-of-us/workbench/pull/3771#pullrequestreview-447481092", "createdAt": "2020-07-13T18:05:22Z", "commit": {"oid": "bf57d1a626cde30c15b37a79379549d2937e3c87"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODowNToyMlrOGwzz9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODowNToyMlrOGwzz9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzMzcxNw==", "bodyText": "Can you please point to the line number for this  condition : ' '?", "url": "https://github.com/all-of-us/workbench/pull/3771#discussion_r453833717", "createdAt": "2020-07-13T18:05:22Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/cohort-search/cohort-search/cohort-search.component.tsx", "diffHunk": "@@ -0,0 +1,369 @@\n+import {Component, Input} from '@angular/core';\n+import * as React from 'react';\n+\n+import {AttributesPage} from 'app/cohort-search/attributes-page/attributes-page.component';\n+import {Demographics} from 'app/cohort-search/demographics/demographics.component';\n+import {ListSearchV2} from 'app/cohort-search/list-search-v2/list-search-v2.component';\n+import {searchRequestStore} from 'app/cohort-search/search-state.service';\n+import {CriteriaTree} from 'app/cohort-search/tree/tree.component';\n+import {domainToTitle, generateId, typeToTitle} from 'app/cohort-search/utils';\n+import {Button, Clickable} from 'app/components/buttons';\n+import {ClrIcon} from 'app/components/icons';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import colors, {addOpacity} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {Criteria, CriteriaType, DomainType, TemporalMention, TemporalTime} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  backArrow: {\n+    background: `${addOpacity(colors.accent, 0.15)}`,\n+    borderRadius: '50%',\n+    height: '1.5rem',\n+    lineHeight: '1.4rem',\n+    textAlign: 'center',\n+    width: '1.5rem',\n+  },\n+  footer: {\n+    marginTop: '0.5rem',\n+    padding: '0.45rem 0rem',\n+    display: 'flex',\n+    justifyContent: 'flex-end',\n+  },\n+  panelLeft: {\n+    display: 'none',\n+    flex: 1,\n+    minWidth: '14rem',\n+    overflowY: 'auto',\n+    overflowX: 'hidden',\n+    width: '100%',\n+    height: '100%',\n+    padding: '0 0.4rem 0 1rem',\n+  },\n+  searchContainer: {\n+    display: 'flex',\n+    flexWrap: 'wrap',\n+    height: '70vh',\n+    width: '100%',\n+  },\n+  titleBar: {\n+    marginBottom: '0.5rem',\n+    padding: '0rem 1rem',\n+    display: 'flex',\n+    justifyContent: 'space-between',\n+    alignItems: 'flex-end',\n+    height: '2.5rem',\n+    marginTop: '0.5rem',\n+  }\n+});\n+\n+const arrowIcon = '/assets/icons/arrow-left-regular.svg';\n+\n+function initGroup(role: string, item: any) {\n+  return {\n+    id: generateId(role),\n+    items: [item],\n+    count: null,\n+    temporal: false,\n+    mention: TemporalMention.ANYMENTION,\n+    time: TemporalTime.DURINGSAMEENCOUNTERAS,\n+    timeValue: '',\n+    timeFrame: '',\n+    isRequesting: false,\n+    status: 'active'\n+  };\n+}\n+\n+interface Selection extends Criteria {\n+  parameterId: string;\n+}\n+\n+interface Props {\n+  closeSearch: () => void;\n+  searchContext: any;\n+}\n+\n+interface State {\n+  attributesNode: Criteria;\n+  autocompleteSelection: Criteria;\n+  backMode: string;\n+  count: number;\n+  disableFinish: boolean;\n+  groupSelections: Array<number>;\n+  hierarchyNode: Criteria;\n+  loadingSubtree: boolean;\n+  mode: string;\n+  selectedIds: Array<string>;\n+  selections: Array<Selection>;\n+  title: string;\n+  treeSearchTerms: string;\n+}\n+\n+export class CohortSearch extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      attributesNode: undefined,\n+      autocompleteSelection: undefined,\n+      backMode: 'list',\n+      count: 0,\n+      disableFinish: false,\n+      groupSelections: [],\n+      hierarchyNode: undefined,\n+      loadingSubtree: false,\n+      mode: 'list',\n+      selectedIds: [],\n+      selections: [],\n+      title: '',\n+      treeSearchTerms: '',\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    const {searchContext: {domain, item, standard, type}} = this.props;\n+    const selections = item.searchParameters;\n+    const selectedIds = selections.map(s => s.parameterId);\n+    if (type === CriteriaType.DECEASED) {\n+      this.selectDeceased();\n+    } else {\n+      const title = domain === DomainType.PERSON ? typeToTitle(type) : domainToTitle(domain);\n+      let {backMode, mode} = this.state;\n+      let hierarchyNode;\n+      if (this.initTree) {\n+        hierarchyNode = {\n+          domainId: domain,\n+          type: type,\n+          isStandard: standard,\n+          id: 0,\n+        };\n+        backMode = 'tree';\n+        mode = 'tree';\n+      }\n+      this.setState({backMode, hierarchyNode, mode, selectedIds, selections, title});\n+    }\n+  }\n+\n+  setScroll = (id: string) => {\n+    const nodeId = `node${id}`;\n+    const node = document.getElementById(nodeId);\n+    if (node) {\n+      setTimeout(() => node.scrollIntoView({behavior: 'smooth', block: 'center'}), 200);\n+    }\n+    this.setState({loadingSubtree: false});\n+  }\n+\n+  back = () => {\n+    if (this.state.mode === 'tree') {\n+      this.setState({autocompleteSelection: undefined, backMode: 'list', hierarchyNode: undefined, mode: 'list'});\n+    } else {\n+      this.setState({attributesNode: undefined, mode: this.state.backMode});\n+    }\n+  }\n+\n+  finish = () => {\n+    const {searchContext: {domain, groupId, item, role, type}} = this.props;\n+    const {selections} = this.state;\n+    if (domain === DomainType.PERSON) {\n+      triggerEvent('Cohort Builder Search', 'Click', `Demo - ${typeToTitle(type)} - Finish`);\n+    }\n+    const searchRequest = searchRequestStore.getValue();\n+    item.searchParameters = selections;\n+    if (groupId) {\n+      const groupIndex = searchRequest[role].findIndex(grp => grp.id === groupId);\n+      if (groupIndex > -1) {\n+        const itemIndex = searchRequest[role][groupIndex].items.findIndex(it => it.id === item.id);\n+        if (itemIndex > -1) {\n+          searchRequest[role][groupIndex].items[itemIndex] = item;\n+        } else {\n+          searchRequest[role][groupIndex].items.push(item);\n+        }\n+      }\n+    } else {\n+      searchRequest[role].push(initGroup(role, item));\n+    }\n+    searchRequestStore.next(searchRequest);\n+    this.props.closeSearch();\n+  }\n+\n+  get initTree() {\n+    const {searchContext: {domain}} = this.props;\n+    return domain === DomainType.PHYSICALMEASUREMENT\n+      || domain === DomainType.SURVEY\n+      || domain === DomainType.VISIT;\n+  }\n+\n+  searchContentStyle(mode: string) {\n+    let style = {\n+      display: 'none',\n+      flex: 1,\n+      minWidth: '14rem',\n+      overflowY: 'auto',\n+      overflowX: 'hidden',\n+      width: '100%',\n+      height: '100%',\n+      padding: '0 0.4rem 0 1rem',\n+    } as React.CSSProperties;\n+    if (this.state.mode === mode) {\n+      style = {...style, display: 'block', animation: 'fadeEffect 1s'};\n+    }\n+    return style;\n+  }\n+\n+  showHierarchy = (criterion: Criteria) => {\n+    this.setState({\n+      autocompleteSelection: criterion,\n+      backMode: 'tree',\n+      hierarchyNode: {...criterion, id: 0},\n+      mode: 'tree',\n+      loadingSubtree: true,\n+      treeSearchTerms: criterion.name\n+    });\n+  }\n+\n+  modifiersFlag = (disabled: boolean) => {\n+    this.setState({disableFinish: disabled});\n+  }\n+\n+  setTreeSearchTerms = (input: string) => {\n+    this.setState({treeSearchTerms: input});\n+  }\n+\n+  setAutocompleteSelection = (selection: any) => {\n+    this.setState({loadingSubtree: true, autocompleteSelection: selection});\n+  }\n+\n+  setAttributes = (criterion: Criteria) => {\n+    this.setState({attributesNode: criterion, backMode: this.state.mode, mode: 'attributes'});\n+  }\n+\n+  addSelection = (param: any) => {\n+    let {groupSelections, selectedIds, selections} = this.state;\n+    if (selectedIds.includes(param.parameterId)) {\n+      selections = selections.filter(p => p.parameterId !== param.parameterId);\n+    } else {\n+      selectedIds = [...selectedIds, param.parameterId];\n+      if (param.group) {\n+        groupSelections = [...groupSelections, param.id];\n+      }\n+    }\n+    selections = [...selections, param];\n+    this.setState({groupSelections, selections, selectedIds});\n+  }\n+\n+  selectDeceased() {\n+    const param = {\n+      id: null,\n+      parentId: null,\n+      parameterId: '',\n+      type: CriteriaType.DECEASED.toString(),\n+      name: 'Deceased',\n+      group: false,\n+      domainId: DomainType.PERSON.toString(),\n+      hasAttributes: false,\n+      selectable: true,\n+      attributes: []\n+    } as Selection;\n+    // wrapping in a timeout here prevents 'ExpressionChangedAfterItHasBeenCheckedError' in the parent component\n+    // TODO remove timeout once cohort-search component is converted to React\n+    setTimeout(() => this.setState({selections: [param]}, () => this.finish()));\n+  }\n+\n+  render() {\n+    const {closeSearch, searchContext, searchContext: {domain, type}} = this.props;\n+    const {attributesNode, autocompleteSelection, count, groupSelections, hierarchyNode, loadingSubtree, mode, selectedIds, selections,\n+      title, treeSearchTerms} = this.state;\n+    return !!searchContext ? <div style={styles.searchContainer}>\n+      <div style={{height: '100%', width: '100%'}}>\n+        <div style={styles.titleBar}>\n+          <div style={{display: 'inline-flex', marginRight: '0.5rem'}}>\n+            <Clickable style={styles.backArrow} onClick={() => closeSearch()}>\n+              <img src={arrowIcon} style={{height: '21px', width: '18px'}} alt='Go back' />\n+            </Clickable>\n+            <h2 style={{color: colors.primary, lineHeight: '1.5rem', margin: '0 0 0 0.75rem'}}>\n+              {title}\n+            </h2>\n+          </div>\n+          {mode === 'attributes' && <Button type='link' onClick={this.back}>\n+            <ClrIcon size='24' shape='close'/>\n+          </Button>}\n+        </div>\n+        <div style={\n+          (domain === DomainType.PERSON && type !== CriteriaType.AGE)\n+            ? {marginBottom: '3.5rem'}\n+            : {height: 'calc(100% - 3.5rem)'}\n+        }>\n+          {domain === DomainType.PERSON ? <div style={{flex: 1, overflow: 'auto'}}>\n+              <Demographics\n+                count={count}\n+                criteriaType={type}\n+                select={this.addSelection}\n+                selectedIds={selectedIds}\n+                selections={selections}/>\n+            </div>\n+            : <React.Fragment>\n+              {loadingSubtree && <SpinnerOverlay/>}\n+              <div style={loadingSubtree ? {height: '100%', pointerEvents: 'none', opacity: 0.3} : {height: '100%'}}>\n+                {/* Tree View */}\n+                <div style={this.searchContentStyle('tree')}>\n+                  {hierarchyNode && <CriteriaTree\n+                      autocompleteSelection={autocompleteSelection}\n+                      back={this.back}\n+                      groupSelections={groupSelections}\n+                      node={hierarchyNode}\n+                      scrollToMatch={this.setScroll}\n+                      searchTerms={treeSearchTerms}\n+                      select={this.addSelection}\n+                      selectedIds={selectedIds}\n+                      selectOption={this.setAutocompleteSelection}\n+                      setAttributes={this.setAttributes}\n+                      setSearchTerms={this.setTreeSearchTerms}/>}\n+                </div>\n+                {/* List View (using duplicated version of ListSearch) */}\n+                <div style={this.searchContentStyle('list')}>\n+                  <ListSearchV2 hierarchy={this.showHierarchy}\n+                              searchContext={searchContext}\n+                              select={this.addSelection}\n+                              selectedIds={selectedIds}\n+                              setAttributes={this.setAttributes}/>\n+                </div>\n+                {/**\n+                 Attributes Page - This will no longer be rendered here in the future, leaving temporarily for reference\n+                 TODO Remove once AttributesPage is moved to the sidebar with RW-4595\n+                 **/}\n+                <div style={this.searchContentStyle('attributes')}>\n+                  {!!attributesNode && <AttributesPage\n+                      close={this.back}\n+                      node={attributesNode}\n+                      select={this.addSelection}/>}\n+                </div>\n+              </div>\n+            </React.Fragment>}\n+          {type === CriteriaType.AGE && <div style={styles.footer}>\n+            <Button style={{height: '1.5rem', margin: '0.25rem 0.5rem'}}\n+                    type='link'\n+                    onClick={closeSearch}>\n+              Cancel\n+            </Button>\n+            <Button style={{height: '1.5rem', margin: '0.25rem 0.5rem'}}\n+                    type='primary'\n+                    onClick={this.finish}>\n+              Finish\n+            </Button>\n+          </div>}\n+        </div>\n+      </div>\n+    </div> : '';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf57d1a626cde30c15b37a79379549d2937e3c87"}, "originalPosition": 355}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NDgxNzU5", "url": "https://github.com/all-of-us/workbench/pull/3771#pullrequestreview-447481759", "createdAt": "2020-07-13T18:06:21Z", "commit": {"oid": "bf57d1a626cde30c15b37a79379549d2937e3c87"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODowNjoyMVrOGwz2LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODowNjoyMVrOGwz2LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzNDI4NQ==", "bodyText": "EOF line", "url": "https://github.com/all-of-us/workbench/pull/3771#discussion_r453834285", "createdAt": "2020-07-13T18:06:21Z", "author": {"login": "NehaBroad"}, "path": "ui/src/assets/icons/arrow-left-regular.svg", "diffHunk": "@@ -0,0 +1 @@\n+<svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"far\" data-icon=\"arrow-left\" class=\"svg-inline--fa fa-arrow-left fa-w-14\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"#216FB4\" d=\"M229.9 473.899l19.799-19.799c4.686-4.686 4.686-12.284 0-16.971L94.569 282H436c6.627 0 12-5.373 12-12v-28c0-6.627-5.373-12-12-12H94.569l155.13-155.13c4.686-4.686 4.686-12.284 0-16.971L229.9 38.101c-4.686-4.686-12.284-4.686-16.971 0L3.515 247.515c-4.686 4.686-4.686 12.284 0 16.971L212.929 473.9c4.686 4.686 12.284 4.686 16.971-.001z\"></path></svg>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf57d1a626cde30c15b37a79379549d2937e3c87"}, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bf57d1a626cde30c15b37a79379549d2937e3c87", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/bf57d1a626cde30c15b37a79379549d2937e3c87", "committedDate": "2020-07-10T17:01:51Z", "message": "RW-4589 fix test"}, "afterCommit": {"oid": "6906089ffd78472f4ce0e4923c1446d1eb89b323", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/6906089ffd78472f4ce0e4923c1446d1eb89b323", "committedDate": "2020-07-14T15:46:18Z", "message": "RW-4589 pr feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4Mjk5MTY2", "url": "https://github.com/all-of-us/workbench/pull/3771#pullrequestreview-448299166", "createdAt": "2020-07-14T17:05:50Z", "commit": {"oid": "6906089ffd78472f4ce0e4923c1446d1eb89b323"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de41913748fb1a2e62e8594dcca16bc1b975b423", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/de41913748fb1a2e62e8594dcca16bc1b975b423", "committedDate": "2020-07-15T15:44:57Z", "message": "RW-4589 duplicate modal component, rename root CB component"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eedba0e79bdb851bd9dd8532538fea497767530e", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/eedba0e79bdb851bd9dd8532538fea497767530e", "committedDate": "2020-07-15T15:45:42Z", "message": "RW-4589 convert wizard to full page"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afe03b07f1d7337d06eb148a0666674ba672026a", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/afe03b07f1d7337d06eb148a0666674ba672026a", "committedDate": "2020-07-15T15:45:58Z", "message": "RW-4589 remove unused code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c90bef974627207dc724b93675a831ddc9539838", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/c90bef974627207dc724b93675a831ddc9539838", "committedDate": "2020-07-15T15:45:58Z", "message": "RW-4589 update styles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b1d0b67e97b48da341a0c7e981ed1cf86f0d7d2", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/4b1d0b67e97b48da341a0c7e981ed1cf86f0d7d2", "committedDate": "2020-07-15T15:47:05Z", "message": "RW-4589 add render test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a17ce896d880b1b9c4cd0b25cfdd769491eefa7", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/3a17ce896d880b1b9c4cd0b25cfdd769491eefa7", "committedDate": "2020-07-15T15:47:56Z", "message": "RW-4589 fix failing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4f4301127a8b349d34c6dd95b96e510c8fae040", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/b4f4301127a8b349d34c6dd95b96e510c8fae040", "committedDate": "2020-07-15T15:47:56Z", "message": "RW-4589 revert changes to original list-search"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d49206f4fd7e2a55f53c5315ee2ed1b567394b00", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/d49206f4fd7e2a55f53c5315ee2ed1b567394b00", "committedDate": "2020-07-15T15:48:32Z", "message": "RW-4589 pr feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2e2f4f67ef12f83aab7b6e948449ef9195bf879", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/e2e2f4f67ef12f83aab7b6e948449ef9195bf879", "committedDate": "2020-07-15T16:13:53Z", "message": "RW-4589 tweaks after rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c385334e36634696345daa955ecc7a848276cdf5", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/c385334e36634696345daa955ecc7a848276cdf5", "committedDate": "2020-07-15T16:38:41Z", "message": "RW-4589 disable local enableCohortBuilderV2 flag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d1d444d9cce3763fc5938c91155f161b120c1f2", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/5d1d444d9cce3763fc5938c91155f161b120c1f2", "committedDate": "2020-07-15T16:58:42Z", "message": "RW-4589 fix test again"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6906089ffd78472f4ce0e4923c1446d1eb89b323", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/6906089ffd78472f4ce0e4923c1446d1eb89b323", "committedDate": "2020-07-14T15:46:18Z", "message": "RW-4589 pr feedback"}, "afterCommit": {"oid": "c385334e36634696345daa955ecc7a848276cdf5", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/c385334e36634696345daa955ecc7a848276cdf5", "committedDate": "2020-07-15T16:38:41Z", "message": "RW-4589 disable local enableCohortBuilderV2 flag"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4435, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}