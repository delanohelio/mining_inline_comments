{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NDE2NzI3", "number": 3131, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDozODoxNFrODf6PmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToyNjoyMlrODf_kVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Nzg2NzEzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDozODoxNFrOFp4ojA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToyNzowMVrOFp6TWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2MzgyMA==", "bodyText": "we must have missed this while standardizing on the new name", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379463820", "createdAt": "2020-02-14T14:38:14Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserService.java", "diffHunk": "@@ -17,19 +17,13 @@\n \n   DbUser createServiceAccountUser(String email);\n \n-  DbUser createUser(\n-      String givenName,\n-      String familyName,\n-      String email,\n-      String contactEmail,\n-      String currentPosition,\n-      String organization,\n-      String areaOfResearch);\n+  // minimal version used by AuthInterceptor\n+  DbUser createUser(String givenName, String familyName, String userName);\n \n   DbUser createUser(\n       String givenName,\n       String familyName,\n-      String email,\n+      String userName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MTE2MQ==", "bodyText": "Yes. Sometimes the refactoring is smart enough to do what you want with these, but if one of the names is a substring of other identifiers, all heck breaks loose. Safer to risk leaving some local identifiers behind like this.", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379491161", "createdAt": "2020-02-14T15:27:01Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserService.java", "diffHunk": "@@ -17,19 +17,13 @@\n \n   DbUser createServiceAccountUser(String email);\n \n-  DbUser createUser(\n-      String givenName,\n-      String familyName,\n-      String email,\n-      String contactEmail,\n-      String currentPosition,\n-      String organization,\n-      String areaOfResearch);\n+  // minimal version used by AuthInterceptor\n+  DbUser createUser(String givenName, String familyName, String userName);\n \n   DbUser createUser(\n       String givenName,\n       String familyName,\n-      String email,\n+      String userName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2MzgyMA=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Nzg3MDE3OnYy", "diffSide": "LEFT", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDozOToxNVrOFp4qeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDozOToxNVrOFp4qeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NDMxMg==", "bodyText": "The last 3 were always null", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379464312", "createdAt": "2020-02-14T14:39:15Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -290,27 +290,9 @@ public DbUser createServiceAccountUser(String username) {\n   }\n \n   @Override\n-  public DbUser createUser(\n-      String givenName,\n-      String familyName,\n-      String userName,\n-      String contactEmail,\n-      String currentPosition,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Nzg4MDExOnYy", "diffSide": "LEFT", "path": "api/src/main/java/org/pmiops/workbench/interceptors/AuthInterceptor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDo0MjowN1rOFp4wcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNjoyNToyOFrOFp8R9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NTg0Mg==", "bodyText": "userInfo is a Google OAuth2 Userinfoplus object so \"email\" is correct from that perspective, though it's a \"userName\" to Workbench.", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379465842", "createdAt": "2020-02-14T14:42:07Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/interceptors/AuthInterceptor.java", "diffHunk": "@@ -155,18 +155,7 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons\n       // TODO(danrodney): start populating contact email in Google account, use it here.\n       user =\n           userService.createUser(\n-              userInfo.getGivenName(),\n-              userInfo.getFamilyName(),\n-              userInfo.getEmail(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NDA4OQ==", "bodyText": "Can you put that comment in the code and replace userInfo with something like googleOAuth2id?", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379494089", "createdAt": "2020-02-14T15:32:02Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/interceptors/AuthInterceptor.java", "diffHunk": "@@ -155,18 +155,7 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons\n       // TODO(danrodney): start populating contact email in Google account, use it here.\n       user =\n           userService.createUser(\n-              userInfo.getGivenName(),\n-              userInfo.getFamilyName(),\n-              userInfo.getEmail(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NTg0Mg=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyMzU3NQ==", "bodyText": "done", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379523575", "createdAt": "2020-02-14T16:25:28Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/interceptors/AuthInterceptor.java", "diffHunk": "@@ -155,18 +155,7 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons\n       // TODO(danrodney): start populating contact email in Google account, use it here.\n       user =\n           userService.createUser(\n-              userInfo.getGivenName(),\n-              userInfo.getFamilyName(),\n-              userInfo.getEmail(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NTg0Mg=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Nzg4MTMxOnYy", "diffSide": "LEFT", "path": "common-api/src/main/java/org/pmiops/workbench/db/model/CommonStorageEnums.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDo0MjoyN1rOFp4xHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDo0MjoyN1rOFp4xHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NjAxNQ==", "bodyText": "These are not used", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379466015", "createdAt": "2020-02-14T14:42:27Z", "author": {"login": "jmthibault79"}, "path": "common-api/src/main/java/org/pmiops/workbench/db/model/CommonStorageEnums.java", "diffHunk": "@@ -108,14 +108,6 @@ public static Short surveysToStorage(Surveys survey) {\n     return CLIENT_TO_STORAGE_SURVEY.get(survey);\n   }\n \n-  public static String surveyToSurveyId(Surveys survey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Nzg4NjkxOnYy", "diffSide": "RIGHT", "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDo0Mzo1N1rOFp40mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzowMTowNFrOFr62Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NjkwNw==", "bodyText": "Is there a more elegant way?  I want to be sure to exclude only this one, for future-proofing", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379466907", "createdAt": "2020-02-14T14:43:57Z", "author": {"login": "jmthibault79"}, "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "diffHunk": "@@ -51,4 +55,52 @@ public void testBijectiveStorageMapping() {\n       assertThat(v).isEqualTo(fromStorage.apply(storageValue));\n     }\n   }\n+\n+  // domain ID is stringly-typed so special-case this\n+\n+  @Test\n+  public void testDomainIdBijectiveStorageMapping() {\n+    for (Domain v : Domain.values()) {\n+      String storageValue = CommonStorageEnums.domainToDomainId(v);\n+      assertWithMessage(\"unmapped enum value: \" + v).that(storageValue).isNotNull();\n+      assertThat(v).isEqualTo(CommonStorageEnums.domainIdToDomain(storageValue));\n+    }\n+  }\n+\n+  // copied from api/StorageEnumsTest because the above tests are not comprehensive\n+  @Test\n+  public void noMissingMapEntries() throws Exception {\n+    for (Field f : CommonStorageEnums.class.getDeclaredFields()) {\n+      if (f.getType() != BiMap.class) {\n+        continue;\n+      }\n+\n+      Class enumClass =\n+          (Class) ((ParameterizedType) f.getAnnotatedType().getType()).getActualTypeArguments()[0];\n+\n+      Method enumToShort = null;\n+      Method shortToEnum = null;\n+      for (Method m : CommonStorageEnums.class.getDeclaredMethods()) {\n+        if (m.getParameterTypes()[0].equals(enumClass)) {\n+          enumToShort = m;\n+        }\n+\n+        if (m.getReturnType().equals(enumClass)) {\n+          shortToEnum = m;\n+        }\n+      }\n+\n+      // stringly typed map - test with testDomainIdBijectiveStorageMapping instead\n+      if (enumToShort.getName().equals(\"domainIdToDomain\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3OTQ2Mg==", "bodyText": "Not worth spending much time on.", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379479462", "createdAt": "2020-02-14T15:06:16Z", "author": {"login": "jmthibault79"}, "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "diffHunk": "@@ -51,4 +55,52 @@ public void testBijectiveStorageMapping() {\n       assertThat(v).isEqualTo(fromStorage.apply(storageValue));\n     }\n   }\n+\n+  // domain ID is stringly-typed so special-case this\n+\n+  @Test\n+  public void testDomainIdBijectiveStorageMapping() {\n+    for (Domain v : Domain.values()) {\n+      String storageValue = CommonStorageEnums.domainToDomainId(v);\n+      assertWithMessage(\"unmapped enum value: \" + v).that(storageValue).isNotNull();\n+      assertThat(v).isEqualTo(CommonStorageEnums.domainIdToDomain(storageValue));\n+    }\n+  }\n+\n+  // copied from api/StorageEnumsTest because the above tests are not comprehensive\n+  @Test\n+  public void noMissingMapEntries() throws Exception {\n+    for (Field f : CommonStorageEnums.class.getDeclaredFields()) {\n+      if (f.getType() != BiMap.class) {\n+        continue;\n+      }\n+\n+      Class enumClass =\n+          (Class) ((ParameterizedType) f.getAnnotatedType().getType()).getActualTypeArguments()[0];\n+\n+      Method enumToShort = null;\n+      Method shortToEnum = null;\n+      for (Method m : CommonStorageEnums.class.getDeclaredMethods()) {\n+        if (m.getParameterTypes()[0].equals(enumClass)) {\n+          enumToShort = m;\n+        }\n+\n+        if (m.getReturnType().equals(enumClass)) {\n+          shortToEnum = m;\n+        }\n+      }\n+\n+      // stringly typed map - test with testDomainIdBijectiveStorageMapping instead\n+      if (enumToShort.getName().equals(\"domainIdToDomain\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NjkwNw=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NjExMQ==", "bodyText": "This looks like a fun exercise, but it's way too abstract/reflexive for test code (or application code). Plus, I want to kill dbStorageEnums soon in favor of Lebowski Enums.\nCan we shelve this for another day? I'm happy to pair on the enum stuff. It's a bit funny looking at first, but I think you'll like it.", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379496111", "createdAt": "2020-02-14T15:35:34Z", "author": {"login": "jaycarlton"}, "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "diffHunk": "@@ -51,4 +55,52 @@ public void testBijectiveStorageMapping() {\n       assertThat(v).isEqualTo(fromStorage.apply(storageValue));\n     }\n   }\n+\n+  // domain ID is stringly-typed so special-case this\n+\n+  @Test\n+  public void testDomainIdBijectiveStorageMapping() {\n+    for (Domain v : Domain.values()) {\n+      String storageValue = CommonStorageEnums.domainToDomainId(v);\n+      assertWithMessage(\"unmapped enum value: \" + v).that(storageValue).isNotNull();\n+      assertThat(v).isEqualTo(CommonStorageEnums.domainIdToDomain(storageValue));\n+    }\n+  }\n+\n+  // copied from api/StorageEnumsTest because the above tests are not comprehensive\n+  @Test\n+  public void noMissingMapEntries() throws Exception {\n+    for (Field f : CommonStorageEnums.class.getDeclaredFields()) {\n+      if (f.getType() != BiMap.class) {\n+        continue;\n+      }\n+\n+      Class enumClass =\n+          (Class) ((ParameterizedType) f.getAnnotatedType().getType()).getActualTypeArguments()[0];\n+\n+      Method enumToShort = null;\n+      Method shortToEnum = null;\n+      for (Method m : CommonStorageEnums.class.getDeclaredMethods()) {\n+        if (m.getParameterTypes()[0].equals(enumClass)) {\n+          enumToShort = m;\n+        }\n+\n+        if (m.getReturnType().equals(enumClass)) {\n+          shortToEnum = m;\n+        }\n+      }\n+\n+      // stringly typed map - test with testDomainIdBijectiveStorageMapping instead\n+      if (enumToShort.getName().equals(\"domainIdToDomain\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NjkwNw=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzNTIyNQ==", "bodyText": "Some more English comments on what each chunk is doing would help. Most of us don't use these kinds of functions every day.", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379635225", "createdAt": "2020-02-14T20:42:03Z", "author": {"login": "jaycarlton"}, "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "diffHunk": "@@ -51,4 +55,52 @@ public void testBijectiveStorageMapping() {\n       assertThat(v).isEqualTo(fromStorage.apply(storageValue));\n     }\n   }\n+\n+  // domain ID is stringly-typed so special-case this\n+\n+  @Test\n+  public void testDomainIdBijectiveStorageMapping() {\n+    for (Domain v : Domain.values()) {\n+      String storageValue = CommonStorageEnums.domainToDomainId(v);\n+      assertWithMessage(\"unmapped enum value: \" + v).that(storageValue).isNotNull();\n+      assertThat(v).isEqualTo(CommonStorageEnums.domainIdToDomain(storageValue));\n+    }\n+  }\n+\n+  // copied from api/StorageEnumsTest because the above tests are not comprehensive\n+  @Test\n+  public void noMissingMapEntries() throws Exception {\n+    for (Field f : CommonStorageEnums.class.getDeclaredFields()) {\n+      if (f.getType() != BiMap.class) {\n+        continue;\n+      }\n+\n+      Class enumClass =\n+          (Class) ((ParameterizedType) f.getAnnotatedType().getType()).getActualTypeArguments()[0];\n+\n+      Method enumToShort = null;\n+      Method shortToEnum = null;\n+      for (Method m : CommonStorageEnums.class.getDeclaredMethods()) {\n+        if (m.getParameterTypes()[0].equals(enumClass)) {\n+          enumToShort = m;\n+        }\n+\n+        if (m.getReturnType().equals(enumClass)) {\n+          shortToEnum = m;\n+        }\n+      }\n+\n+      // stringly typed map - test with testDomainIdBijectiveStorageMapping instead\n+      if (enumToShort.getName().equals(\"domainIdToDomain\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NjkwNw=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY0ODQ5NQ==", "bodyText": "I'll do that but in a follow up along with some other issues I've found", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379648495", "createdAt": "2020-02-14T21:18:06Z", "author": {"login": "jmthibault79"}, "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "diffHunk": "@@ -51,4 +55,52 @@ public void testBijectiveStorageMapping() {\n       assertThat(v).isEqualTo(fromStorage.apply(storageValue));\n     }\n   }\n+\n+  // domain ID is stringly-typed so special-case this\n+\n+  @Test\n+  public void testDomainIdBijectiveStorageMapping() {\n+    for (Domain v : Domain.values()) {\n+      String storageValue = CommonStorageEnums.domainToDomainId(v);\n+      assertWithMessage(\"unmapped enum value: \" + v).that(storageValue).isNotNull();\n+      assertThat(v).isEqualTo(CommonStorageEnums.domainIdToDomain(storageValue));\n+    }\n+  }\n+\n+  // copied from api/StorageEnumsTest because the above tests are not comprehensive\n+  @Test\n+  public void noMissingMapEntries() throws Exception {\n+    for (Field f : CommonStorageEnums.class.getDeclaredFields()) {\n+      if (f.getType() != BiMap.class) {\n+        continue;\n+      }\n+\n+      Class enumClass =\n+          (Class) ((ParameterizedType) f.getAnnotatedType().getType()).getActualTypeArguments()[0];\n+\n+      Method enumToShort = null;\n+      Method shortToEnum = null;\n+      for (Method m : CommonStorageEnums.class.getDeclaredMethods()) {\n+        if (m.getParameterTypes()[0].equals(enumClass)) {\n+          enumToShort = m;\n+        }\n+\n+        if (m.getReturnType().equals(enumClass)) {\n+          shortToEnum = m;\n+        }\n+      }\n+\n+      // stringly typed map - test with testDomainIdBijectiveStorageMapping instead\n+      if (enumToShort.getName().equals(\"domainIdToDomain\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NjkwNw=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU5NzI3OQ==", "bodyText": "Comments and fix are at #3159", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r381597279", "createdAt": "2020-02-19T23:01:04Z", "author": {"login": "jmthibault79"}, "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "diffHunk": "@@ -51,4 +55,52 @@ public void testBijectiveStorageMapping() {\n       assertThat(v).isEqualTo(fromStorage.apply(storageValue));\n     }\n   }\n+\n+  // domain ID is stringly-typed so special-case this\n+\n+  @Test\n+  public void testDomainIdBijectiveStorageMapping() {\n+    for (Domain v : Domain.values()) {\n+      String storageValue = CommonStorageEnums.domainToDomainId(v);\n+      assertWithMessage(\"unmapped enum value: \" + v).that(storageValue).isNotNull();\n+      assertThat(v).isEqualTo(CommonStorageEnums.domainIdToDomain(storageValue));\n+    }\n+  }\n+\n+  // copied from api/StorageEnumsTest because the above tests are not comprehensive\n+  @Test\n+  public void noMissingMapEntries() throws Exception {\n+    for (Field f : CommonStorageEnums.class.getDeclaredFields()) {\n+      if (f.getType() != BiMap.class) {\n+        continue;\n+      }\n+\n+      Class enumClass =\n+          (Class) ((ParameterizedType) f.getAnnotatedType().getType()).getActualTypeArguments()[0];\n+\n+      Method enumToShort = null;\n+      Method shortToEnum = null;\n+      for (Method m : CommonStorageEnums.class.getDeclaredMethods()) {\n+        if (m.getParameterTypes()[0].equals(enumClass)) {\n+          enumToShort = m;\n+        }\n+\n+        if (m.getReturnType().equals(enumClass)) {\n+          shortToEnum = m;\n+        }\n+      }\n+\n+      // stringly typed map - test with testDomainIdBijectiveStorageMapping instead\n+      if (enumToShort.getName().equals(\"domainIdToDomain\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NjkwNw=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODAzMTExOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToyNDozOFrOFp6Nxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDozNjozNFrOFqC-KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4OTczNA==", "bodyText": "Do we have a name for the old affiliations? Or did we give the new ones a different name?", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379489734", "createdAt": "2020-02-14T15:24:38Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -580,6 +580,18 @@ private boolean userHasEverLoggedIn(\n       // See RW-1488.\n       throw new BadRequestException(\"Changing email is not currently supported\");\n     }\n+    updateInstitutionalAffiliations(updatedProfile, user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyMDM2Ng==", "bodyText": "New ones are Verified Institutional Affiliations", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379520366", "createdAt": "2020-02-14T16:19:23Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -580,6 +580,18 @@ private boolean userHasEverLoggedIn(\n       // See RW-1488.\n       throw new BadRequestException(\"Changing email is not currently supported\");\n     }\n+    updateInstitutionalAffiliations(updatedProfile, user);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4OTczNA=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMzE5Mw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379633193", "createdAt": "2020-02-14T20:36:34Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -580,6 +580,18 @@ private boolean userHasEverLoggedIn(\n       // See RW-1488.\n       throw new BadRequestException(\"Changing email is not currently supported\");\n     }\n+    updateInstitutionalAffiliations(updatedProfile, user);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4OTczNA=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODAzNDMxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToyNTozMFrOFp6Pww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDo1MjozOFrOFqDWbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MDI0Mw==", "bodyText": "Can you comment on the semantics/lifecycle keeping these in sync, and why we don't need to here?", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379490243", "createdAt": "2020-02-14T15:25:30Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -580,6 +580,18 @@ private boolean userHasEverLoggedIn(\n       // See RW-1488.\n       throw new BadRequestException(\"Changing email is not currently supported\");\n     }\n+    updateInstitutionalAffiliations(updatedProfile, user);\n+\n+    // This does not update the name in Google.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyMDE2Ng==", "bodyText": "I know nothing about this.  I just moved it.", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379520166", "createdAt": "2020-02-14T16:19:03Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -580,6 +580,18 @@ private boolean userHasEverLoggedIn(\n       // See RW-1488.\n       throw new BadRequestException(\"Changing email is not currently supported\");\n     }\n+    updateInstitutionalAffiliations(updatedProfile, user);\n+\n+    // This does not update the name in Google.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MDI0Mw=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMzc2NA==", "bodyText": "We need to be careful moving the audit stuff like fireUpdateAction(). This looks right though. Can you please verify we still get the events written to the audit stream?", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379633764", "createdAt": "2020-02-14T20:38:07Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -580,6 +580,18 @@ private boolean userHasEverLoggedIn(\n       // See RW-1488.\n       throw new BadRequestException(\"Changing email is not currently supported\");\n     }\n+    updateInstitutionalAffiliations(updatedProfile, user);\n+\n+    // This does not update the name in Google.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MDI0Mw=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzOTQwNQ==", "bodyText": "What I moved was the updateInstitutionalAffiliations() block into its own method.  Everything else remained in the same location.", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379639405", "createdAt": "2020-02-14T20:52:38Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -580,6 +580,18 @@ private boolean userHasEverLoggedIn(\n       // See RW-1488.\n       throw new BadRequestException(\"Changing email is not currently supported\");\n     }\n+    updateInstitutionalAffiliations(updatedProfile, user);\n+\n+    // This does not update the name in Google.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MDI0Mw=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODA0NTMzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToyODoyOFrOFp6Wqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNjoyNToxMFrOFp8RTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MjAxMA==", "bodyText": "I'm declaring shenanigans on this constructor. We need a builder.\nThere's no reason in Java 8+ I should ever have to see the word null, let alone 9 in a row. But that may be another ticket.\nIf you don't want a builder, then your shorter constructors need to call the longer ones with default methods.\nUser createUser(A a) {\n  return createUser(a, defaultB);\n}\n\nUser createUser(A a, B b) {\n  return createUser(a, b, defaultC);\n}\n// etc \n\nBut a builder is still much preferred.", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379492010", "createdAt": "2020-02-14T15:28:28Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -290,27 +290,9 @@ public DbUser createServiceAccountUser(String username) {\n   }\n \n   @Override\n-  public DbUser createUser(\n-      String givenName,\n-      String familyName,\n-      String userName,\n-      String contactEmail,\n-      String currentPosition,\n-      String organization,\n-      String areaOfResearch) {\n+  public DbUser createUser(String givenName, String familyName, String userName) {\n     return createUser(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyMzQwNQ==", "bodyText": "This is a good idea, but a larger refactoring than I am comfortable doing right now", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379523405", "createdAt": "2020-02-14T16:25:10Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -290,27 +290,9 @@ public DbUser createServiceAccountUser(String username) {\n   }\n \n   @Override\n-  public DbUser createUser(\n-      String givenName,\n-      String familyName,\n-      String userName,\n-      String contactEmail,\n-      String currentPosition,\n-      String organization,\n-      String areaOfResearch) {\n+  public DbUser createUser(String givenName, String familyName, String userName) {\n     return createUser(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MjAxMA=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODA2NDA2OnYy", "diffSide": "RIGHT", "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNTozMzoyM1rOFp6h7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNjozNjoyOVrOFp8n-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NDg5Mw==", "bodyText": "CommonStorageEnums should throw IllegalArgumentException if it's not matched IMO. This assertion seems redundant; such checking is that method's job.", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379494893", "createdAt": "2020-02-14T15:33:23Z", "author": {"login": "jaycarlton"}, "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "diffHunk": "@@ -51,4 +55,52 @@ public void testBijectiveStorageMapping() {\n       assertThat(v).isEqualTo(fromStorage.apply(storageValue));\n     }\n   }\n+\n+  // domain ID is stringly-typed so special-case this\n+\n+  @Test\n+  public void testDomainIdBijectiveStorageMapping() {\n+    for (Domain v : Domain.values()) {\n+      String storageValue = CommonStorageEnums.domainToDomainId(v);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyOTIwOQ==", "bodyText": "I don't believe this is fixable without a wholesale rewrite of our enum system.\nWhich would be a good idea!  Just not in this tiny drive-by PR", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379529209", "createdAt": "2020-02-14T16:36:29Z", "author": {"login": "jmthibault79"}, "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "diffHunk": "@@ -51,4 +55,52 @@ public void testBijectiveStorageMapping() {\n       assertThat(v).isEqualTo(fromStorage.apply(storageValue));\n     }\n   }\n+\n+  // domain ID is stringly-typed so special-case this\n+\n+  @Test\n+  public void testDomainIdBijectiveStorageMapping() {\n+    for (Domain v : Domain.values()) {\n+      String storageValue = CommonStorageEnums.domainToDomainId(v);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NDg5Mw=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODA3MzI1OnYy", "diffSide": "RIGHT", "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNTozNjowNFrOFp6nyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDo0OTo1NlrOFqDSTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NjM5Mg==", "bodyText": "You're just testing BiMap at this point I think.", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379496392", "createdAt": "2020-02-14T15:36:04Z", "author": {"login": "jaycarlton"}, "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "diffHunk": "@@ -51,4 +55,52 @@ public void testBijectiveStorageMapping() {\n       assertThat(v).isEqualTo(fromStorage.apply(storageValue));\n     }\n   }\n+\n+  // domain ID is stringly-typed so special-case this\n+\n+  @Test\n+  public void testDomainIdBijectiveStorageMapping() {\n+    for (Domain v : Domain.values()) {\n+      String storageValue = CommonStorageEnums.domainToDomainId(v);\n+      assertWithMessage(\"unmapped enum value: \" + v).that(storageValue).isNotNull();\n+      assertThat(v).isEqualTo(CommonStorageEnums.domainIdToDomain(storageValue));\n+    }\n+  }\n+\n+  // copied from api/StorageEnumsTest because the above tests are not comprehensive\n+  @Test\n+  public void noMissingMapEntries() throws Exception {\n+    for (Field f : CommonStorageEnums.class.getDeclaredFields()) {\n+      if (f.getType() != BiMap.class) {\n+        continue;\n+      }\n+\n+      Class enumClass =\n+          (Class) ((ParameterizedType) f.getAnnotatedType().getType()).getActualTypeArguments()[0];\n+\n+      Method enumToShort = null;\n+      Method shortToEnum = null;\n+      for (Method m : CommonStorageEnums.class.getDeclaredMethods()) {\n+        if (m.getParameterTypes()[0].equals(enumClass)) {\n+          enumToShort = m;\n+        }\n+\n+        if (m.getReturnType().equals(enumClass)) {\n+          shortToEnum = m;\n+        }\n+      }\n+\n+      // stringly typed map - test with testDomainIdBijectiveStorageMapping instead\n+      if (enumToShort.getName().equals(\"domainIdToDomain\")) {\n+        continue;\n+      }\n+\n+      for (Object e : enumClass.getEnumConstants()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUzMDc4OA==", "bodyText": "This actually does catch bugs!  Its StorageEnumsTest counterpart caught one of mine today - that's what prompted me to do this.  Remove an entry from one of the BiMaps to observe this.", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379530788", "createdAt": "2020-02-14T16:39:45Z", "author": {"login": "jmthibault79"}, "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "diffHunk": "@@ -51,4 +55,52 @@ public void testBijectiveStorageMapping() {\n       assertThat(v).isEqualTo(fromStorage.apply(storageValue));\n     }\n   }\n+\n+  // domain ID is stringly-typed so special-case this\n+\n+  @Test\n+  public void testDomainIdBijectiveStorageMapping() {\n+    for (Domain v : Domain.values()) {\n+      String storageValue = CommonStorageEnums.domainToDomainId(v);\n+      assertWithMessage(\"unmapped enum value: \" + v).that(storageValue).isNotNull();\n+      assertThat(v).isEqualTo(CommonStorageEnums.domainIdToDomain(storageValue));\n+    }\n+  }\n+\n+  // copied from api/StorageEnumsTest because the above tests are not comprehensive\n+  @Test\n+  public void noMissingMapEntries() throws Exception {\n+    for (Field f : CommonStorageEnums.class.getDeclaredFields()) {\n+      if (f.getType() != BiMap.class) {\n+        continue;\n+      }\n+\n+      Class enumClass =\n+          (Class) ((ParameterizedType) f.getAnnotatedType().getType()).getActualTypeArguments()[0];\n+\n+      Method enumToShort = null;\n+      Method shortToEnum = null;\n+      for (Method m : CommonStorageEnums.class.getDeclaredMethods()) {\n+        if (m.getParameterTypes()[0].equals(enumClass)) {\n+          enumToShort = m;\n+        }\n+\n+        if (m.getReturnType().equals(enumClass)) {\n+          shortToEnum = m;\n+        }\n+      }\n+\n+      // stringly typed map - test with testDomainIdBijectiveStorageMapping instead\n+      if (enumToShort.getName().equals(\"domainIdToDomain\")) {\n+        continue;\n+      }\n+\n+      for (Object e : enumClass.getEnumConstants()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NjM5Mg=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU0NzA4MA==", "bodyText": "No, I get what it's doing, and it's awesome that it catches bugs.\nIs there a reason you have to copy this instead of making a generic utility function to use in both enum classes?", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379547080", "createdAt": "2020-02-14T17:12:19Z", "author": {"login": "jaycarlton"}, "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "diffHunk": "@@ -51,4 +55,52 @@ public void testBijectiveStorageMapping() {\n       assertThat(v).isEqualTo(fromStorage.apply(storageValue));\n     }\n   }\n+\n+  // domain ID is stringly-typed so special-case this\n+\n+  @Test\n+  public void testDomainIdBijectiveStorageMapping() {\n+    for (Domain v : Domain.values()) {\n+      String storageValue = CommonStorageEnums.domainToDomainId(v);\n+      assertWithMessage(\"unmapped enum value: \" + v).that(storageValue).isNotNull();\n+      assertThat(v).isEqualTo(CommonStorageEnums.domainIdToDomain(storageValue));\n+    }\n+  }\n+\n+  // copied from api/StorageEnumsTest because the above tests are not comprehensive\n+  @Test\n+  public void noMissingMapEntries() throws Exception {\n+    for (Field f : CommonStorageEnums.class.getDeclaredFields()) {\n+      if (f.getType() != BiMap.class) {\n+        continue;\n+      }\n+\n+      Class enumClass =\n+          (Class) ((ParameterizedType) f.getAnnotatedType().getType()).getActualTypeArguments()[0];\n+\n+      Method enumToShort = null;\n+      Method shortToEnum = null;\n+      for (Method m : CommonStorageEnums.class.getDeclaredMethods()) {\n+        if (m.getParameterTypes()[0].equals(enumClass)) {\n+          enumToShort = m;\n+        }\n+\n+        if (m.getReturnType().equals(enumClass)) {\n+          shortToEnum = m;\n+        }\n+      }\n+\n+      // stringly typed map - test with testDomainIdBijectiveStorageMapping instead\n+      if (enumToShort.getName().equals(\"domainIdToDomain\")) {\n+        continue;\n+      }\n+\n+      for (Object e : enumClass.getEnumConstants()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NjM5Mg=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU2NTY1OA==", "bodyText": "We have a one-way dependency from /api -> /common-api so any common code would have to live in /common-api.  I don't want to add any new /common-api dependencies.  We'll be removing /common-api entirely, soon after Dover.", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379565658", "createdAt": "2020-02-14T17:55:30Z", "author": {"login": "jmthibault79"}, "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "diffHunk": "@@ -51,4 +55,52 @@ public void testBijectiveStorageMapping() {\n       assertThat(v).isEqualTo(fromStorage.apply(storageValue));\n     }\n   }\n+\n+  // domain ID is stringly-typed so special-case this\n+\n+  @Test\n+  public void testDomainIdBijectiveStorageMapping() {\n+    for (Domain v : Domain.values()) {\n+      String storageValue = CommonStorageEnums.domainToDomainId(v);\n+      assertWithMessage(\"unmapped enum value: \" + v).that(storageValue).isNotNull();\n+      assertThat(v).isEqualTo(CommonStorageEnums.domainIdToDomain(storageValue));\n+    }\n+  }\n+\n+  // copied from api/StorageEnumsTest because the above tests are not comprehensive\n+  @Test\n+  public void noMissingMapEntries() throws Exception {\n+    for (Field f : CommonStorageEnums.class.getDeclaredFields()) {\n+      if (f.getType() != BiMap.class) {\n+        continue;\n+      }\n+\n+      Class enumClass =\n+          (Class) ((ParameterizedType) f.getAnnotatedType().getType()).getActualTypeArguments()[0];\n+\n+      Method enumToShort = null;\n+      Method shortToEnum = null;\n+      for (Method m : CommonStorageEnums.class.getDeclaredMethods()) {\n+        if (m.getParameterTypes()[0].equals(enumClass)) {\n+          enumToShort = m;\n+        }\n+\n+        if (m.getReturnType().equals(enumClass)) {\n+          shortToEnum = m;\n+        }\n+      }\n+\n+      // stringly typed map - test with testDomainIdBijectiveStorageMapping instead\n+      if (enumToShort.getName().equals(\"domainIdToDomain\")) {\n+        continue;\n+      }\n+\n+      for (Object e : enumClass.getEnumConstants()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NjM5Mg=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzNTM3Mw==", "bodyText": "But why did your new enum maps need to go in common at all?", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379635373", "createdAt": "2020-02-14T20:42:29Z", "author": {"login": "jaycarlton"}, "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "diffHunk": "@@ -51,4 +55,52 @@ public void testBijectiveStorageMapping() {\n       assertThat(v).isEqualTo(fromStorage.apply(storageValue));\n     }\n   }\n+\n+  // domain ID is stringly-typed so special-case this\n+\n+  @Test\n+  public void testDomainIdBijectiveStorageMapping() {\n+    for (Domain v : Domain.values()) {\n+      String storageValue = CommonStorageEnums.domainToDomainId(v);\n+      assertWithMessage(\"unmapped enum value: \" + v).that(storageValue).isNotNull();\n+      assertThat(v).isEqualTo(CommonStorageEnums.domainIdToDomain(storageValue));\n+    }\n+  }\n+\n+  // copied from api/StorageEnumsTest because the above tests are not comprehensive\n+  @Test\n+  public void noMissingMapEntries() throws Exception {\n+    for (Field f : CommonStorageEnums.class.getDeclaredFields()) {\n+      if (f.getType() != BiMap.class) {\n+        continue;\n+      }\n+\n+      Class enumClass =\n+          (Class) ((ParameterizedType) f.getAnnotatedType().getType()).getActualTypeArguments()[0];\n+\n+      Method enumToShort = null;\n+      Method shortToEnum = null;\n+      for (Method m : CommonStorageEnums.class.getDeclaredMethods()) {\n+        if (m.getParameterTypes()[0].equals(enumClass)) {\n+          enumToShort = m;\n+        }\n+\n+        if (m.getReturnType().equals(enumClass)) {\n+          shortToEnum = m;\n+        }\n+      }\n+\n+      // stringly typed map - test with testDomainIdBijectiveStorageMapping instead\n+      if (enumToShort.getName().equals(\"domainIdToDomain\")) {\n+        continue;\n+      }\n+\n+      for (Object e : enumClass.getEnumConstants()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NjM5Mg=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzODM0OA==", "bodyText": "They did not.  I saw that the /api test saved my butt and was curious if the /common-api would have as well.  It would not have, so I fixed that here.", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379638348", "createdAt": "2020-02-14T20:49:56Z", "author": {"login": "jmthibault79"}, "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "diffHunk": "@@ -51,4 +55,52 @@ public void testBijectiveStorageMapping() {\n       assertThat(v).isEqualTo(fromStorage.apply(storageValue));\n     }\n   }\n+\n+  // domain ID is stringly-typed so special-case this\n+\n+  @Test\n+  public void testDomainIdBijectiveStorageMapping() {\n+    for (Domain v : Domain.values()) {\n+      String storageValue = CommonStorageEnums.domainToDomainId(v);\n+      assertWithMessage(\"unmapped enum value: \" + v).that(storageValue).isNotNull();\n+      assertThat(v).isEqualTo(CommonStorageEnums.domainIdToDomain(storageValue));\n+    }\n+  }\n+\n+  // copied from api/StorageEnumsTest because the above tests are not comprehensive\n+  @Test\n+  public void noMissingMapEntries() throws Exception {\n+    for (Field f : CommonStorageEnums.class.getDeclaredFields()) {\n+      if (f.getType() != BiMap.class) {\n+        continue;\n+      }\n+\n+      Class enumClass =\n+          (Class) ((ParameterizedType) f.getAnnotatedType().getType()).getActualTypeArguments()[0];\n+\n+      Method enumToShort = null;\n+      Method shortToEnum = null;\n+      for (Method m : CommonStorageEnums.class.getDeclaredMethods()) {\n+        if (m.getParameterTypes()[0].equals(enumClass)) {\n+          enumToShort = m;\n+        }\n+\n+        if (m.getReturnType().equals(enumClass)) {\n+          shortToEnum = m;\n+        }\n+      }\n+\n+      // stringly typed map - test with testDomainIdBijectiveStorageMapping instead\n+      if (enumToShort.getName().equals(\"domainIdToDomain\")) {\n+        continue;\n+      }\n+\n+      for (Object e : enumClass.getEnumConstants()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NjM5Mg=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODczOTQyOnYy", "diffSide": "RIGHT", "path": "api/libproject/devstart.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToyNjoyMlrOFqBOsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToyNjoyMlrOFqBOsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwNDY1Nw==", "bodyText": "Nice", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379604657", "createdAt": "2020-02-14T19:26:22Z", "author": {"login": "s-rubenstein"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -505,7 +505,8 @@ def run_gradle(cmd_name, args)\n \n def connect_to_db()\n   common = Common.new\n-\n+  common.status \"Starting database if necessary...\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11fbb814414c49c985e48ca1718b80660413e546"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3333, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}