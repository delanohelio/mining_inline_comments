{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNzQwMjc0", "number": 4304, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoyODoyOVrOE6tTng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoyODoyOVrOE6tTng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTk1MTY2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/conceptset/ConceptSetService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoyODoyOVrOH18WmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoyODoyOVrOH18WmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyNTQwMQ==", "bodyText": "you could stream it\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (DbConcept dbConcepts : conceptDao.findAll(conceptIds)) {\n          \n          \n            \n                      boolean isStandard = STANDARD_CONCEPTS.contains(dbConcepts.getStandardConcept());\n          \n          \n            \n                      criteriaList.add(\n          \n          \n            \n                          cohortBuilderMapper.dbModelToClient(\n          \n          \n            \n                              dbConcepts,\n          \n          \n            \n                              isStandard,\n          \n          \n            \n                              isStandard ? dbConcepts.getCountValue() : dbConcepts.getSourceCountValue()));\n          \n          \n            \n                    }\n          \n          \n            \n                    criteriaList.addAll(\n          \n          \n            \n                    StreamSupport.stream(conceptDao.findAll(ImmutableList.of(1L)).spliterator(), false)\n          \n          \n            \n                        .map(\n          \n          \n            \n                            c -> {\n          \n          \n            \n                              boolean isStandard = STANDARD_CONCEPTS.contains(c.getStandardConcept());\n          \n          \n            \n                              return cohortBuilderMapper.dbModelToClient(\n          \n          \n            \n                                  c, isStandard, isStandard ? c.getCountValue() : c.getSourceCountValue());\n          \n          \n            \n                            })\n          \n          \n            \n                        .collect(Collectors.toList()));", "url": "https://github.com/all-of-us/workbench/pull/4304#discussion_r526325401", "createdAt": "2020-11-18T18:28:29Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/conceptset/ConceptSetService.java", "diffHunk": "@@ -238,10 +253,23 @@ public DbConceptSet cloneConceptSetAndConceptIds(\n   private ConceptSet toHydratedConcepts(ConceptSet conceptSet) {\n     Set<Long> conceptIds = conceptSetDao.findOne(conceptSet.getId()).getConceptIds();\n     if (configProvider.get().featureFlags.enableConceptSetSearchV2) {\n-      return conceptSet.criteriums(\n-          cohortBuilderService.findCriteriaByDomainIdAndConceptIds(\n-              conceptSet.getDomain().toString(),\n-              conceptIds.stream().map(String::valueOf).collect(Collectors.toList())));\n+      List<Criteria> criteriaList = new ArrayList<Criteria>();\n+      if (!conceptSet.getDomain().equals(Domain.PHYSICAL_MEASUREMENT)) {\n+        criteriaList =\n+            cohortBuilderService.findCriteriaByDomainIdAndConceptIds(\n+                conceptSet.getDomain().toString(),\n+                conceptIds.stream().map(String::valueOf).collect(Collectors.toList()));\n+      } else {\n+        for (DbConcept dbConcepts : conceptDao.findAll(conceptIds)) {\n+          boolean isStandard = STANDARD_CONCEPTS.contains(dbConcepts.getStandardConcept());\n+          criteriaList.add(\n+              cohortBuilderMapper.dbModelToClient(\n+                  dbConcepts,\n+                  isStandard,\n+                  isStandard ? dbConcepts.getCountValue() : dbConcepts.getSourceCountValue()));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee87a8cf6b9e1aa8b795f272472aaa6d8138a29b"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3754, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}