{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MzQxOTM4", "number": 3833, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjowMjozMVrOEUqgXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0NDoyMlrOEUra0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTAzMzg4OnYy", "diffSide": "RIGHT", "path": "e2e/app/component/modal.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjowMjozMVrOG6_YNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjowMjozMVrOG6_YNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUwODk4MA==", "bodyText": "promisesArray needs the spread operator, otherwise the Promise.all will resolve after button.click", "url": "https://github.com/all-of-us/workbench/pull/3833#discussion_r464508980", "createdAt": "2020-08-03T16:02:31Z", "author": {"login": "petesantos"}, "path": "e2e/app/component/modal.ts", "diffHunk": "@@ -39,10 +39,26 @@ export default class Modal extends Container {\n     return modalText.toString();\n   }\n \n-  async clickButton(buttonLabel: LinkText): Promise<void> {\n+  /**\n+   * Click a button.\n+   * @param {string} buttonLabel The button text label.\n+   * @param waitOptions Wait for navigation or/and modal close after click button.\n+   */\n+  async clickButton(buttonLabel: LinkText, waitOptions: {waitForNav?: boolean, waitForClose?: boolean} = {}): Promise<void> {\n+    const { waitForNav = false, waitForClose = false } = waitOptions;\n     const button = await this.waitForButton(buttonLabel);\n     await button.waitUntilEnabled();\n-    return button.click();\n+    const promisesArray = [];\n+    if (waitForClose) {\n+      promisesArray.push(this.waitUntilClose());\n+    }\n+    if (waitForNav) {\n+      promisesArray.push(this.page.waitForNavigation({waitUntil: ['domcontentloaded', 'networkidle0']}));\n+    }\n+    await Promise.all([\n+      promisesArray,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924e3cb7615d75d449a5060670968b8de01c8a9d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTA0NTA5OnYy", "diffSide": "RIGHT", "path": "e2e/app/component/modal.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjowNTo0MlrOG6_fNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjowNTo0MlrOG6_fNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxMDc3NA==", "bodyText": "nit: Would setting the default/false values in the signature work, simplifying the code a bit?", "url": "https://github.com/all-of-us/workbench/pull/3833#discussion_r464510774", "createdAt": "2020-08-03T16:05:42Z", "author": {"login": "petesantos"}, "path": "e2e/app/component/modal.ts", "diffHunk": "@@ -39,10 +39,26 @@ export default class Modal extends Container {\n     return modalText.toString();\n   }\n \n-  async clickButton(buttonLabel: LinkText): Promise<void> {\n+  /**\n+   * Click a button.\n+   * @param {string} buttonLabel The button text label.\n+   * @param waitOptions Wait for navigation or/and modal close after click button.\n+   */\n+  async clickButton(buttonLabel: LinkText, waitOptions: {waitForNav?: boolean, waitForClose?: boolean} = {}): Promise<void> {\n+    const { waitForNav = false, waitForClose = false } = waitOptions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924e3cb7615d75d449a5060670968b8de01c8a9d"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTA4NjQ0OnYy", "diffSide": "RIGHT", "path": "e2e/app/page/cohort-criteria-modal.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjoxNjo0MFrOG6_3xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjoxNjo0MFrOG6_3xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxNzA2Mg==", "bodyText": "Did anyone use the waitUntilClosed parameter / should this continue to be passed through?", "url": "https://github.com/all-of-us/workbench/pull/3833#discussion_r464517062", "createdAt": "2020-08-03T16:16:40Z", "author": {"login": "petesantos"}, "path": "e2e/app/page/cohort-criteria-modal.ts", "diffHunk": "@@ -123,12 +123,8 @@ export default class CohortCriteriaModal extends Modal {\n   /**\n    * Click FINISH button.\n    */\n-  async clickFinishButton(opt: {waitUntilClosed?: boolean} = {}): Promise<void> {\n-    const { waitUntilClosed = true } = opt\n-    await this.clickButton(LinkText.Finish);\n-    if (waitUntilClosed) {\n-      await this.waitUntilClose();\n-    }\n+  async clickFinishButton(): Promise<void> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924e3cb7615d75d449a5060670968b8de01c8a9d"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTEwNzI1OnYy", "diffSide": "RIGHT", "path": "e2e/app/page/conceptset-page.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjoyMjozM1rOG7AEtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjoyMjozM1rOG7AEtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyMDM3Mg==", "bodyText": "TOL - without the context of this change I am not sure why the additional code is no longer needed", "url": "https://github.com/all-of-us/workbench/pull/3833#discussion_r464520372", "createdAt": "2020-08-03T16:22:33Z", "author": {"login": "petesantos"}, "path": "e2e/app/page/conceptset-page.ts", "diffHunk": "@@ -35,11 +35,7 @@ export default class ConceptsetPage extends AuthenticatedPage {\n   async openCopyToWorkspaceModal(conceptName: string): Promise<ConceptsetCopyModal> {\n     const ellipsis = this.getEllipsisMenu(conceptName);\n     await ellipsis.clickAction(EllipsisMenuAction.CopyToAnotherWorkspace, {waitForNav: false});\n-    const modal = new ConceptsetCopyModal(this.page);\n-    await modal.waitUntilVisible();\n-    await modal.getDestinationTextbox();\n-    await modal.getNameTextbox();\n-    return modal;\n+    return new ConceptsetCopyModal(this.page);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924e3cb7615d75d449a5060670968b8de01c8a9d"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTE4MzU1OnYy", "diffSide": "RIGHT", "path": "e2e/app/component/modal.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0NDoyMlrOG7AzCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0NDoyMlrOG7AzCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzMjIzMw==", "bodyText": "What are your thoughts on an alternative approach - something like:\n    await Promise.all( fp.flow(\n      fp.filter('shouldWait'),\n      fp.map(({waitFn}) => waitFn()),\n      fp.concat([button.click()])\n    )([\n      {shouldWait: waitForNav, waitFn: () => this.page.waitForNavigation({waitUntil: ['domcontentloaded', 'networkidle0']})}, \n      {shouldWait: waitForClose, waitFn: () => this.waitUntilClose()}\n      ])\n\u00a0\u00a0)\nThis will prevent the need for creating and mutating the array an also eliminates the imperative conditionals. If you want to add a new option later it would just be an addition to the array.", "url": "https://github.com/all-of-us/workbench/pull/3833#discussion_r464532233", "createdAt": "2020-08-03T16:44:22Z", "author": {"login": "petesantos"}, "path": "e2e/app/component/modal.ts", "diffHunk": "@@ -39,10 +39,26 @@ export default class Modal extends Container {\n     return modalText.toString();\n   }\n \n-  async clickButton(buttonLabel: LinkText): Promise<void> {\n+  /**\n+   * Click a button.\n+   * @param {string} buttonLabel The button text label.\n+   * @param waitOptions Wait for navigation or/and modal close after click button.\n+   */\n+  async clickButton(buttonLabel: LinkText, waitOptions: {waitForNav?: boolean, waitForClose?: boolean} = {}): Promise<void> {\n+    const { waitForNav = false, waitForClose = false } = waitOptions;\n     const button = await this.waitForButton(buttonLabel);\n     await button.waitUntilEnabled();\n-    return button.click();\n+    const promisesArray = [];\n+    if (waitForClose) {\n+      promisesArray.push(this.waitUntilClose());\n+    }\n+    if (waitForNav) {\n+      promisesArray.push(this.page.waitForNavigation({waitUntil: ['domcontentloaded', 'networkidle0']}));\n+    }\n+    await Promise.all([\n+      promisesArray,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924e3cb7615d75d449a5060670968b8de01c8a9d"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2470, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}