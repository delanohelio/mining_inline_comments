{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwODgxMTM5", "number": 3504, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo0Mzo1NVrOD4Ezsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjowMDo1MVrOD4G1pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTI1NjE5OnYy", "diffSide": "RIGHT", "path": "api/libproject/devstart.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo0Mzo1NVrOGOsnAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo0Mzo1NVrOGOsnAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA2NDEyOQ==", "bodyText": "This is all copy, paste, substitute.  So I'm warning you ahead of time: I'm probably going to dismiss most comments here with \"not today, but keep that in mind for the big rewrite!\"", "url": "https://github.com/all-of-us/workbench/pull/3504#discussion_r418064129", "createdAt": "2020-04-30T14:43:55Z", "author": {"login": "jmthibault79"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1524,6 +1524,60 @@ def load_institutions(cmd_name, *args)\n     :fn => ->(*args) {load_institutions(LOAD_INSTITUTIONS_CMD, *args)}\n })\n \n+def populate_ops_user_affiliations(cmd_name, *args)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e16f4aab7aa1ed3761feb89e739a7701f623ae"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTI2NDAxOnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/PopulateOpsUserAffiliations.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo0NTozNFrOGOssDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo0NTozNFrOGOssDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA2NTQyMw==", "bodyText": "I could move this to a separate file.  Hierarchy suggestions?", "url": "https://github.com/all-of-us/workbench/pull/3504#discussion_r418065423", "createdAt": "2020-04-30T14:45:34Z", "author": {"login": "jmthibault79"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/PopulateOpsUserAffiliations.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package org.pmiops.workbench.tools;\n+\n+import com.opencsv.CSVReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.model.InstitutionalRole;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Populate the verified_institutional_affiliation table for Ops users from a CSV input file.\n+ *\n+ * <p>NOTE: input file must be located in the current directory or a subdirectory.\n+ *\n+ * <p>Example execution:\n+ *\n+ * <pre>\n+ * ./project.rb populate-ops-user-affiliations \\\n+ * --import-filename users.csv \\\n+ * --dry-run \\\n+ * --project all-of-us-workbench-test\n+ * </pre>\n+ */\n+public class PopulateOpsUserAffiliations {\n+\n+  private static final Logger log = Logger.getLogger(PopulateOpsUserAffiliations.class.getName());\n+\n+  private List<DbVerifiedInstitutionalAffiliation> prepareAffiliations(\n+      final String filename,\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao)\n+      throws IOException {\n+\n+    final DbInstitution aouOps =\n+        institutionDao\n+            .findOneByShortName(\"AouOps\")\n+            .orElseThrow(\n+                () -> new RuntimeException(\"Could not find 'AouOps' Institution in the DB\"));\n+\n+    return OpsUser.parseInput(filename).stream()\n+        .map(\n+            opsUser -> {\n+              if (!opsUser.action.equals(\"To Remain\")) {\n+                throw new RuntimeException(\n+                    String.format(\n+                        \"User %s not marked as 'To Remain' in the input CSV\", opsUser.userName));\n+              }\n+\n+              final DbUser dbUser = opsUser.dbCheck(userDao, affiliationDao);\n+\n+              return new DbVerifiedInstitutionalAffiliation()\n+                  .setInstitution(aouOps)\n+                  .setUser(dbUser)\n+                  .setInstitutionalRoleEnum(InstitutionalRole.OTHER)\n+                  .setInstitutionalRoleOtherText(opsUser.operationalRole);\n+            })\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Bean\n+  public CommandLineRunner run(\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao) {\n+\n+    final Option importFilename =\n+        Option.builder()\n+            .longOpt(\"import-filename\")\n+            .desc(\"File containing CSV of ops users\")\n+            .required()\n+            .hasArg()\n+            .build();\n+    final Option dryRunOpt =\n+        Option.builder()\n+            .longOpt(\"dry-run\")\n+            .desc(\"If specified, the tool runs in dry run mode; no modifications are made\")\n+            .build();\n+    final Options options = new Options().addOption(importFilename).addOption(dryRunOpt);\n+\n+    return (args) -> {\n+      CommandLine opts = new DefaultParser().parse(options, args);\n+      boolean dryRun = opts.hasOption(dryRunOpt.getLongOpt());\n+\n+      // process whole file before taking any action\n+      final List<DbVerifiedInstitutionalAffiliation> affiliations =\n+          prepareAffiliations(\n+              opts.getOptionValue(importFilename.getLongOpt()),\n+              userDao,\n+              institutionDao,\n+              affiliationDao);\n+\n+      affiliations.forEach(\n+          affiliation -> {\n+            if (!dryRun) {\n+              affiliationDao.save(affiliation);\n+            }\n+\n+            dryLog(\n+                dryRun,\n+                String.format(\n+                    \"Saved AouOps Institutional Affiliation for %s\",\n+                    affiliation.getUser().getUsername()));\n+          });\n+    };\n+  }\n+\n+  private static void dryLog(boolean dryRun, String msg) {\n+    String prefix = \"\";\n+    if (dryRun) {\n+      prefix = \"[DRY RUN] Would have... \";\n+    }\n+    log.info(prefix + msg);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLineToolConfig.runCommandLine(PopulateOpsUserAffiliations.class, args);\n+  }\n+}\n+\n+/**\n+ * Structure the incoming ops user data according to the format of the source CSV:\n+ *\n+ * <p>First Name,Last Name,Email,\"Workbench Email\",Institution,Role,Action\n+ */\n+class OpsUser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e16f4aab7aa1ed3761feb89e739a7701f623ae"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTI3MDUzOnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/PopulateOpsUserAffiliations.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo0Njo0OVrOGOswFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMTowODozOFrOGQ7o3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA2NjQ1Mw==", "bodyText": "Only a warning because these are usually benign like \"Steve\" / \"Steven\"", "url": "https://github.com/all-of-us/workbench/pull/3504#discussion_r418066453", "createdAt": "2020-04-30T14:46:49Z", "author": {"login": "jmthibault79"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/PopulateOpsUserAffiliations.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package org.pmiops.workbench.tools;\n+\n+import com.opencsv.CSVReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.model.InstitutionalRole;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Populate the verified_institutional_affiliation table for Ops users from a CSV input file.\n+ *\n+ * <p>NOTE: input file must be located in the current directory or a subdirectory.\n+ *\n+ * <p>Example execution:\n+ *\n+ * <pre>\n+ * ./project.rb populate-ops-user-affiliations \\\n+ * --import-filename users.csv \\\n+ * --dry-run \\\n+ * --project all-of-us-workbench-test\n+ * </pre>\n+ */\n+public class PopulateOpsUserAffiliations {\n+\n+  private static final Logger log = Logger.getLogger(PopulateOpsUserAffiliations.class.getName());\n+\n+  private List<DbVerifiedInstitutionalAffiliation> prepareAffiliations(\n+      final String filename,\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao)\n+      throws IOException {\n+\n+    final DbInstitution aouOps =\n+        institutionDao\n+            .findOneByShortName(\"AouOps\")\n+            .orElseThrow(\n+                () -> new RuntimeException(\"Could not find 'AouOps' Institution in the DB\"));\n+\n+    return OpsUser.parseInput(filename).stream()\n+        .map(\n+            opsUser -> {\n+              if (!opsUser.action.equals(\"To Remain\")) {\n+                throw new RuntimeException(\n+                    String.format(\n+                        \"User %s not marked as 'To Remain' in the input CSV\", opsUser.userName));\n+              }\n+\n+              final DbUser dbUser = opsUser.dbCheck(userDao, affiliationDao);\n+\n+              return new DbVerifiedInstitutionalAffiliation()\n+                  .setInstitution(aouOps)\n+                  .setUser(dbUser)\n+                  .setInstitutionalRoleEnum(InstitutionalRole.OTHER)\n+                  .setInstitutionalRoleOtherText(opsUser.operationalRole);\n+            })\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Bean\n+  public CommandLineRunner run(\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao) {\n+\n+    final Option importFilename =\n+        Option.builder()\n+            .longOpt(\"import-filename\")\n+            .desc(\"File containing CSV of ops users\")\n+            .required()\n+            .hasArg()\n+            .build();\n+    final Option dryRunOpt =\n+        Option.builder()\n+            .longOpt(\"dry-run\")\n+            .desc(\"If specified, the tool runs in dry run mode; no modifications are made\")\n+            .build();\n+    final Options options = new Options().addOption(importFilename).addOption(dryRunOpt);\n+\n+    return (args) -> {\n+      CommandLine opts = new DefaultParser().parse(options, args);\n+      boolean dryRun = opts.hasOption(dryRunOpt.getLongOpt());\n+\n+      // process whole file before taking any action\n+      final List<DbVerifiedInstitutionalAffiliation> affiliations =\n+          prepareAffiliations(\n+              opts.getOptionValue(importFilename.getLongOpt()),\n+              userDao,\n+              institutionDao,\n+              affiliationDao);\n+\n+      affiliations.forEach(\n+          affiliation -> {\n+            if (!dryRun) {\n+              affiliationDao.save(affiliation);\n+            }\n+\n+            dryLog(\n+                dryRun,\n+                String.format(\n+                    \"Saved AouOps Institutional Affiliation for %s\",\n+                    affiliation.getUser().getUsername()));\n+          });\n+    };\n+  }\n+\n+  private static void dryLog(boolean dryRun, String msg) {\n+    String prefix = \"\";\n+    if (dryRun) {\n+      prefix = \"[DRY RUN] Would have... \";\n+    }\n+    log.info(prefix + msg);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLineToolConfig.runCommandLine(PopulateOpsUserAffiliations.class, args);\n+  }\n+}\n+\n+/**\n+ * Structure the incoming ops user data according to the format of the source CSV:\n+ *\n+ * <p>First Name,Last Name,Email,\"Workbench Email\",Institution,Role,Action\n+ */\n+class OpsUser {\n+  final String firstName;\n+  final String lastName;\n+  final String contactEmail; // \"Email\" to DRC admin staff\n+  final String userName; // \"Workbench Email\" to DRC admin staff\n+  final String operationalRole;\n+  final String action;\n+\n+  static final int COLUMNS = 6;\n+\n+  private static final Logger log = Logger.getLogger(OpsUser.class.getName());\n+\n+  private OpsUser(final String[] userLine) {\n+    this.firstName = userLine[0].trim();\n+    this.lastName = userLine[1].trim();\n+    this.contactEmail = userLine[2].trim();\n+    this.userName = userLine[3].trim();\n+    this.operationalRole = userLine[4].trim();\n+    this.action = userLine[5].trim();\n+  }\n+\n+  static List<OpsUser> parseInput(final String filename) throws IOException {\n+    try (final CSVReader reader = new CSVReader(new FileReader(filename))) {\n+      // consume and sanity-check header line\n+      final String[] headerLine = reader.readNext();\n+      if (headerLine.length != COLUMNS) {\n+        throw new RuntimeException(\n+            String.format(\n+                \"Expected %d columns in input file. Was: %d\", COLUMNS, headerLine.length));\n+      }\n+\n+      return StreamSupport.stream(reader.spliterator(), false)\n+          .map(OpsUser::new)\n+          .collect(Collectors.toList());\n+    }\n+  }\n+\n+  private void checkField(String dbValue, String csvValue, String fieldName) {\n+    if (!dbValue.equals(csvValue)) {\n+      log.warning(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e16f4aab7aa1ed3761feb89e739a7701f623ae"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExNzIwNA==", "bodyText": "Please put some sample input in the description of the PR. I'm still not clear on exactly what's happening.", "url": "https://github.com/all-of-us/workbench/pull/3504#discussion_r418117204", "createdAt": "2020-04-30T15:58:19Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/PopulateOpsUserAffiliations.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package org.pmiops.workbench.tools;\n+\n+import com.opencsv.CSVReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.model.InstitutionalRole;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Populate the verified_institutional_affiliation table for Ops users from a CSV input file.\n+ *\n+ * <p>NOTE: input file must be located in the current directory or a subdirectory.\n+ *\n+ * <p>Example execution:\n+ *\n+ * <pre>\n+ * ./project.rb populate-ops-user-affiliations \\\n+ * --import-filename users.csv \\\n+ * --dry-run \\\n+ * --project all-of-us-workbench-test\n+ * </pre>\n+ */\n+public class PopulateOpsUserAffiliations {\n+\n+  private static final Logger log = Logger.getLogger(PopulateOpsUserAffiliations.class.getName());\n+\n+  private List<DbVerifiedInstitutionalAffiliation> prepareAffiliations(\n+      final String filename,\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao)\n+      throws IOException {\n+\n+    final DbInstitution aouOps =\n+        institutionDao\n+            .findOneByShortName(\"AouOps\")\n+            .orElseThrow(\n+                () -> new RuntimeException(\"Could not find 'AouOps' Institution in the DB\"));\n+\n+    return OpsUser.parseInput(filename).stream()\n+        .map(\n+            opsUser -> {\n+              if (!opsUser.action.equals(\"To Remain\")) {\n+                throw new RuntimeException(\n+                    String.format(\n+                        \"User %s not marked as 'To Remain' in the input CSV\", opsUser.userName));\n+              }\n+\n+              final DbUser dbUser = opsUser.dbCheck(userDao, affiliationDao);\n+\n+              return new DbVerifiedInstitutionalAffiliation()\n+                  .setInstitution(aouOps)\n+                  .setUser(dbUser)\n+                  .setInstitutionalRoleEnum(InstitutionalRole.OTHER)\n+                  .setInstitutionalRoleOtherText(opsUser.operationalRole);\n+            })\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Bean\n+  public CommandLineRunner run(\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao) {\n+\n+    final Option importFilename =\n+        Option.builder()\n+            .longOpt(\"import-filename\")\n+            .desc(\"File containing CSV of ops users\")\n+            .required()\n+            .hasArg()\n+            .build();\n+    final Option dryRunOpt =\n+        Option.builder()\n+            .longOpt(\"dry-run\")\n+            .desc(\"If specified, the tool runs in dry run mode; no modifications are made\")\n+            .build();\n+    final Options options = new Options().addOption(importFilename).addOption(dryRunOpt);\n+\n+    return (args) -> {\n+      CommandLine opts = new DefaultParser().parse(options, args);\n+      boolean dryRun = opts.hasOption(dryRunOpt.getLongOpt());\n+\n+      // process whole file before taking any action\n+      final List<DbVerifiedInstitutionalAffiliation> affiliations =\n+          prepareAffiliations(\n+              opts.getOptionValue(importFilename.getLongOpt()),\n+              userDao,\n+              institutionDao,\n+              affiliationDao);\n+\n+      affiliations.forEach(\n+          affiliation -> {\n+            if (!dryRun) {\n+              affiliationDao.save(affiliation);\n+            }\n+\n+            dryLog(\n+                dryRun,\n+                String.format(\n+                    \"Saved AouOps Institutional Affiliation for %s\",\n+                    affiliation.getUser().getUsername()));\n+          });\n+    };\n+  }\n+\n+  private static void dryLog(boolean dryRun, String msg) {\n+    String prefix = \"\";\n+    if (dryRun) {\n+      prefix = \"[DRY RUN] Would have... \";\n+    }\n+    log.info(prefix + msg);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLineToolConfig.runCommandLine(PopulateOpsUserAffiliations.class, args);\n+  }\n+}\n+\n+/**\n+ * Structure the incoming ops user data according to the format of the source CSV:\n+ *\n+ * <p>First Name,Last Name,Email,\"Workbench Email\",Institution,Role,Action\n+ */\n+class OpsUser {\n+  final String firstName;\n+  final String lastName;\n+  final String contactEmail; // \"Email\" to DRC admin staff\n+  final String userName; // \"Workbench Email\" to DRC admin staff\n+  final String operationalRole;\n+  final String action;\n+\n+  static final int COLUMNS = 6;\n+\n+  private static final Logger log = Logger.getLogger(OpsUser.class.getName());\n+\n+  private OpsUser(final String[] userLine) {\n+    this.firstName = userLine[0].trim();\n+    this.lastName = userLine[1].trim();\n+    this.contactEmail = userLine[2].trim();\n+    this.userName = userLine[3].trim();\n+    this.operationalRole = userLine[4].trim();\n+    this.action = userLine[5].trim();\n+  }\n+\n+  static List<OpsUser> parseInput(final String filename) throws IOException {\n+    try (final CSVReader reader = new CSVReader(new FileReader(filename))) {\n+      // consume and sanity-check header line\n+      final String[] headerLine = reader.readNext();\n+      if (headerLine.length != COLUMNS) {\n+        throw new RuntimeException(\n+            String.format(\n+                \"Expected %d columns in input file. Was: %d\", COLUMNS, headerLine.length));\n+      }\n+\n+      return StreamSupport.stream(reader.spliterator(), false)\n+          .map(OpsUser::new)\n+          .collect(Collectors.toList());\n+    }\n+  }\n+\n+  private void checkField(String dbValue, String csvValue, String fieldName) {\n+    if (!dbValue.equals(csvValue)) {\n+      log.warning(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA2NjQ1Mw=="}, "originalCommit": {"oid": "12e16f4aab7aa1ed3761feb89e739a7701f623ae"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExNzk5MQ==", "bodyText": "OK. I think it might be safer to get the user's database ID into your CSV file so you don't have to guess. You can run reports and diff in Excel before doing the migration.", "url": "https://github.com/all-of-us/workbench/pull/3504#discussion_r418117991", "createdAt": "2020-04-30T15:59:31Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/PopulateOpsUserAffiliations.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package org.pmiops.workbench.tools;\n+\n+import com.opencsv.CSVReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.model.InstitutionalRole;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Populate the verified_institutional_affiliation table for Ops users from a CSV input file.\n+ *\n+ * <p>NOTE: input file must be located in the current directory or a subdirectory.\n+ *\n+ * <p>Example execution:\n+ *\n+ * <pre>\n+ * ./project.rb populate-ops-user-affiliations \\\n+ * --import-filename users.csv \\\n+ * --dry-run \\\n+ * --project all-of-us-workbench-test\n+ * </pre>\n+ */\n+public class PopulateOpsUserAffiliations {\n+\n+  private static final Logger log = Logger.getLogger(PopulateOpsUserAffiliations.class.getName());\n+\n+  private List<DbVerifiedInstitutionalAffiliation> prepareAffiliations(\n+      final String filename,\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao)\n+      throws IOException {\n+\n+    final DbInstitution aouOps =\n+        institutionDao\n+            .findOneByShortName(\"AouOps\")\n+            .orElseThrow(\n+                () -> new RuntimeException(\"Could not find 'AouOps' Institution in the DB\"));\n+\n+    return OpsUser.parseInput(filename).stream()\n+        .map(\n+            opsUser -> {\n+              if (!opsUser.action.equals(\"To Remain\")) {\n+                throw new RuntimeException(\n+                    String.format(\n+                        \"User %s not marked as 'To Remain' in the input CSV\", opsUser.userName));\n+              }\n+\n+              final DbUser dbUser = opsUser.dbCheck(userDao, affiliationDao);\n+\n+              return new DbVerifiedInstitutionalAffiliation()\n+                  .setInstitution(aouOps)\n+                  .setUser(dbUser)\n+                  .setInstitutionalRoleEnum(InstitutionalRole.OTHER)\n+                  .setInstitutionalRoleOtherText(opsUser.operationalRole);\n+            })\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Bean\n+  public CommandLineRunner run(\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao) {\n+\n+    final Option importFilename =\n+        Option.builder()\n+            .longOpt(\"import-filename\")\n+            .desc(\"File containing CSV of ops users\")\n+            .required()\n+            .hasArg()\n+            .build();\n+    final Option dryRunOpt =\n+        Option.builder()\n+            .longOpt(\"dry-run\")\n+            .desc(\"If specified, the tool runs in dry run mode; no modifications are made\")\n+            .build();\n+    final Options options = new Options().addOption(importFilename).addOption(dryRunOpt);\n+\n+    return (args) -> {\n+      CommandLine opts = new DefaultParser().parse(options, args);\n+      boolean dryRun = opts.hasOption(dryRunOpt.getLongOpt());\n+\n+      // process whole file before taking any action\n+      final List<DbVerifiedInstitutionalAffiliation> affiliations =\n+          prepareAffiliations(\n+              opts.getOptionValue(importFilename.getLongOpt()),\n+              userDao,\n+              institutionDao,\n+              affiliationDao);\n+\n+      affiliations.forEach(\n+          affiliation -> {\n+            if (!dryRun) {\n+              affiliationDao.save(affiliation);\n+            }\n+\n+            dryLog(\n+                dryRun,\n+                String.format(\n+                    \"Saved AouOps Institutional Affiliation for %s\",\n+                    affiliation.getUser().getUsername()));\n+          });\n+    };\n+  }\n+\n+  private static void dryLog(boolean dryRun, String msg) {\n+    String prefix = \"\";\n+    if (dryRun) {\n+      prefix = \"[DRY RUN] Would have... \";\n+    }\n+    log.info(prefix + msg);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLineToolConfig.runCommandLine(PopulateOpsUserAffiliations.class, args);\n+  }\n+}\n+\n+/**\n+ * Structure the incoming ops user data according to the format of the source CSV:\n+ *\n+ * <p>First Name,Last Name,Email,\"Workbench Email\",Institution,Role,Action\n+ */\n+class OpsUser {\n+  final String firstName;\n+  final String lastName;\n+  final String contactEmail; // \"Email\" to DRC admin staff\n+  final String userName; // \"Workbench Email\" to DRC admin staff\n+  final String operationalRole;\n+  final String action;\n+\n+  static final int COLUMNS = 6;\n+\n+  private static final Logger log = Logger.getLogger(OpsUser.class.getName());\n+\n+  private OpsUser(final String[] userLine) {\n+    this.firstName = userLine[0].trim();\n+    this.lastName = userLine[1].trim();\n+    this.contactEmail = userLine[2].trim();\n+    this.userName = userLine[3].trim();\n+    this.operationalRole = userLine[4].trim();\n+    this.action = userLine[5].trim();\n+  }\n+\n+  static List<OpsUser> parseInput(final String filename) throws IOException {\n+    try (final CSVReader reader = new CSVReader(new FileReader(filename))) {\n+      // consume and sanity-check header line\n+      final String[] headerLine = reader.readNext();\n+      if (headerLine.length != COLUMNS) {\n+        throw new RuntimeException(\n+            String.format(\n+                \"Expected %d columns in input file. Was: %d\", COLUMNS, headerLine.length));\n+      }\n+\n+      return StreamSupport.stream(reader.spliterator(), false)\n+          .map(OpsUser::new)\n+          .collect(Collectors.toList());\n+    }\n+  }\n+\n+  private void checkField(String dbValue, String csvValue, String fieldName) {\n+    if (!dbValue.equals(csvValue)) {\n+      log.warning(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA2NjQ1Mw=="}, "originalCommit": {"oid": "12e16f4aab7aa1ed3761feb89e739a7701f623ae"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQwNzUxOA==", "bodyText": "The source of this CSV is DRC staff.  They don't have access to the DB.", "url": "https://github.com/all-of-us/workbench/pull/3504#discussion_r420407518", "createdAt": "2020-05-05T21:08:38Z", "author": {"login": "jmthibault79"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/PopulateOpsUserAffiliations.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package org.pmiops.workbench.tools;\n+\n+import com.opencsv.CSVReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.model.InstitutionalRole;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Populate the verified_institutional_affiliation table for Ops users from a CSV input file.\n+ *\n+ * <p>NOTE: input file must be located in the current directory or a subdirectory.\n+ *\n+ * <p>Example execution:\n+ *\n+ * <pre>\n+ * ./project.rb populate-ops-user-affiliations \\\n+ * --import-filename users.csv \\\n+ * --dry-run \\\n+ * --project all-of-us-workbench-test\n+ * </pre>\n+ */\n+public class PopulateOpsUserAffiliations {\n+\n+  private static final Logger log = Logger.getLogger(PopulateOpsUserAffiliations.class.getName());\n+\n+  private List<DbVerifiedInstitutionalAffiliation> prepareAffiliations(\n+      final String filename,\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao)\n+      throws IOException {\n+\n+    final DbInstitution aouOps =\n+        institutionDao\n+            .findOneByShortName(\"AouOps\")\n+            .orElseThrow(\n+                () -> new RuntimeException(\"Could not find 'AouOps' Institution in the DB\"));\n+\n+    return OpsUser.parseInput(filename).stream()\n+        .map(\n+            opsUser -> {\n+              if (!opsUser.action.equals(\"To Remain\")) {\n+                throw new RuntimeException(\n+                    String.format(\n+                        \"User %s not marked as 'To Remain' in the input CSV\", opsUser.userName));\n+              }\n+\n+              final DbUser dbUser = opsUser.dbCheck(userDao, affiliationDao);\n+\n+              return new DbVerifiedInstitutionalAffiliation()\n+                  .setInstitution(aouOps)\n+                  .setUser(dbUser)\n+                  .setInstitutionalRoleEnum(InstitutionalRole.OTHER)\n+                  .setInstitutionalRoleOtherText(opsUser.operationalRole);\n+            })\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Bean\n+  public CommandLineRunner run(\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao) {\n+\n+    final Option importFilename =\n+        Option.builder()\n+            .longOpt(\"import-filename\")\n+            .desc(\"File containing CSV of ops users\")\n+            .required()\n+            .hasArg()\n+            .build();\n+    final Option dryRunOpt =\n+        Option.builder()\n+            .longOpt(\"dry-run\")\n+            .desc(\"If specified, the tool runs in dry run mode; no modifications are made\")\n+            .build();\n+    final Options options = new Options().addOption(importFilename).addOption(dryRunOpt);\n+\n+    return (args) -> {\n+      CommandLine opts = new DefaultParser().parse(options, args);\n+      boolean dryRun = opts.hasOption(dryRunOpt.getLongOpt());\n+\n+      // process whole file before taking any action\n+      final List<DbVerifiedInstitutionalAffiliation> affiliations =\n+          prepareAffiliations(\n+              opts.getOptionValue(importFilename.getLongOpt()),\n+              userDao,\n+              institutionDao,\n+              affiliationDao);\n+\n+      affiliations.forEach(\n+          affiliation -> {\n+            if (!dryRun) {\n+              affiliationDao.save(affiliation);\n+            }\n+\n+            dryLog(\n+                dryRun,\n+                String.format(\n+                    \"Saved AouOps Institutional Affiliation for %s\",\n+                    affiliation.getUser().getUsername()));\n+          });\n+    };\n+  }\n+\n+  private static void dryLog(boolean dryRun, String msg) {\n+    String prefix = \"\";\n+    if (dryRun) {\n+      prefix = \"[DRY RUN] Would have... \";\n+    }\n+    log.info(prefix + msg);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLineToolConfig.runCommandLine(PopulateOpsUserAffiliations.class, args);\n+  }\n+}\n+\n+/**\n+ * Structure the incoming ops user data according to the format of the source CSV:\n+ *\n+ * <p>First Name,Last Name,Email,\"Workbench Email\",Institution,Role,Action\n+ */\n+class OpsUser {\n+  final String firstName;\n+  final String lastName;\n+  final String contactEmail; // \"Email\" to DRC admin staff\n+  final String userName; // \"Workbench Email\" to DRC admin staff\n+  final String operationalRole;\n+  final String action;\n+\n+  static final int COLUMNS = 6;\n+\n+  private static final Logger log = Logger.getLogger(OpsUser.class.getName());\n+\n+  private OpsUser(final String[] userLine) {\n+    this.firstName = userLine[0].trim();\n+    this.lastName = userLine[1].trim();\n+    this.contactEmail = userLine[2].trim();\n+    this.userName = userLine[3].trim();\n+    this.operationalRole = userLine[4].trim();\n+    this.action = userLine[5].trim();\n+  }\n+\n+  static List<OpsUser> parseInput(final String filename) throws IOException {\n+    try (final CSVReader reader = new CSVReader(new FileReader(filename))) {\n+      // consume and sanity-check header line\n+      final String[] headerLine = reader.readNext();\n+      if (headerLine.length != COLUMNS) {\n+        throw new RuntimeException(\n+            String.format(\n+                \"Expected %d columns in input file. Was: %d\", COLUMNS, headerLine.length));\n+      }\n+\n+      return StreamSupport.stream(reader.spliterator(), false)\n+          .map(OpsUser::new)\n+          .collect(Collectors.toList());\n+    }\n+  }\n+\n+  private void checkField(String dbValue, String csvValue, String fieldName) {\n+    if (!dbValue.equals(csvValue)) {\n+      log.warning(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA2NjQ1Mw=="}, "originalCommit": {"oid": "12e16f4aab7aa1ed3761feb89e739a7701f623ae"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTI3NjU3OnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/PopulateOpsUserAffiliations.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo0ODoxNFrOGOs0Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo0ODoxNFrOGOs0Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA2NzQ4Mw==", "bodyText": "It's not a big file, and this is safer", "url": "https://github.com/all-of-us/workbench/pull/3504#discussion_r418067483", "createdAt": "2020-04-30T14:48:14Z", "author": {"login": "jmthibault79"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/PopulateOpsUserAffiliations.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package org.pmiops.workbench.tools;\n+\n+import com.opencsv.CSVReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.model.InstitutionalRole;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Populate the verified_institutional_affiliation table for Ops users from a CSV input file.\n+ *\n+ * <p>NOTE: input file must be located in the current directory or a subdirectory.\n+ *\n+ * <p>Example execution:\n+ *\n+ * <pre>\n+ * ./project.rb populate-ops-user-affiliations \\\n+ * --import-filename users.csv \\\n+ * --dry-run \\\n+ * --project all-of-us-workbench-test\n+ * </pre>\n+ */\n+public class PopulateOpsUserAffiliations {\n+\n+  private static final Logger log = Logger.getLogger(PopulateOpsUserAffiliations.class.getName());\n+\n+  private List<DbVerifiedInstitutionalAffiliation> prepareAffiliations(\n+      final String filename,\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao)\n+      throws IOException {\n+\n+    final DbInstitution aouOps =\n+        institutionDao\n+            .findOneByShortName(\"AouOps\")\n+            .orElseThrow(\n+                () -> new RuntimeException(\"Could not find 'AouOps' Institution in the DB\"));\n+\n+    return OpsUser.parseInput(filename).stream()\n+        .map(\n+            opsUser -> {\n+              if (!opsUser.action.equals(\"To Remain\")) {\n+                throw new RuntimeException(\n+                    String.format(\n+                        \"User %s not marked as 'To Remain' in the input CSV\", opsUser.userName));\n+              }\n+\n+              final DbUser dbUser = opsUser.dbCheck(userDao, affiliationDao);\n+\n+              return new DbVerifiedInstitutionalAffiliation()\n+                  .setInstitution(aouOps)\n+                  .setUser(dbUser)\n+                  .setInstitutionalRoleEnum(InstitutionalRole.OTHER)\n+                  .setInstitutionalRoleOtherText(opsUser.operationalRole);\n+            })\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Bean\n+  public CommandLineRunner run(\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao) {\n+\n+    final Option importFilename =\n+        Option.builder()\n+            .longOpt(\"import-filename\")\n+            .desc(\"File containing CSV of ops users\")\n+            .required()\n+            .hasArg()\n+            .build();\n+    final Option dryRunOpt =\n+        Option.builder()\n+            .longOpt(\"dry-run\")\n+            .desc(\"If specified, the tool runs in dry run mode; no modifications are made\")\n+            .build();\n+    final Options options = new Options().addOption(importFilename).addOption(dryRunOpt);\n+\n+    return (args) -> {\n+      CommandLine opts = new DefaultParser().parse(options, args);\n+      boolean dryRun = opts.hasOption(dryRunOpt.getLongOpt());\n+\n+      // process whole file before taking any action", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e16f4aab7aa1ed3761feb89e739a7701f623ae"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTU0NDg2OnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/PopulateOpsUserAffiliations.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo1MDoxNVrOGOvgdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMToxMzozMlrOGQ7ybQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExMTYwNw==", "bodyText": "This java file shouldn't know anything about a ruby program that happens to call it.", "url": "https://github.com/all-of-us/workbench/pull/3504#discussion_r418111607", "createdAt": "2020-04-30T15:50:15Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/PopulateOpsUserAffiliations.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package org.pmiops.workbench.tools;\n+\n+import com.opencsv.CSVReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.model.InstitutionalRole;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Populate the verified_institutional_affiliation table for Ops users from a CSV input file.\n+ *\n+ * <p>NOTE: input file must be located in the current directory or a subdirectory.\n+ *\n+ * <p>Example execution:\n+ *\n+ * <pre>\n+ * ./project.rb populate-ops-user-affiliations \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e16f4aab7aa1ed3761feb89e739a7701f623ae"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQwOTk2NQ==", "bodyText": "Our ops stack requires us to use Ruby to run Java tools, and errors are often missing or incorrect, so I spend far too much time hunting down correct command lines.  This will be a major help, if only to myself!", "url": "https://github.com/all-of-us/workbench/pull/3504#discussion_r420409965", "createdAt": "2020-05-05T21:13:32Z", "author": {"login": "jmthibault79"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/PopulateOpsUserAffiliations.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package org.pmiops.workbench.tools;\n+\n+import com.opencsv.CSVReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.model.InstitutionalRole;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Populate the verified_institutional_affiliation table for Ops users from a CSV input file.\n+ *\n+ * <p>NOTE: input file must be located in the current directory or a subdirectory.\n+ *\n+ * <p>Example execution:\n+ *\n+ * <pre>\n+ * ./project.rb populate-ops-user-affiliations \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExMTYwNw=="}, "originalCommit": {"oid": "12e16f4aab7aa1ed3761feb89e739a7701f623ae"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTU1Nzk5OnYy", "diffSide": "RIGHT", "path": "api/libproject/devstart.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo1MzoxNFrOGOvolw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo1MzoxNFrOGOvolw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExMzY4Nw==", "bodyText": "We need a more generic way to do this, if we don't have one already. This poor ruby class can't handle any more one-off mechanisms of calling things.\nJust add it to the notes I guess.", "url": "https://github.com/all-of-us/workbench/pull/3504#discussion_r418113687", "createdAt": "2020-04-30T15:53:14Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1524,6 +1524,60 @@ def load_institutions(cmd_name, *args)\n     :fn => ->(*args) {load_institutions(LOAD_INSTITUTIONS_CMD, *args)}\n })\n \n+def populate_ops_user_affiliations(cmd_name, *args)\n+  common = Common.new\n+  ensure_docker(cmd_name, args)\n+\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.opts.dry_run = true\n+  op.opts.project = TEST_PROJECT\n+\n+  op.add_typed_option(\n+      \"--dry_run=[dry_run]\",\n+      TrueClass,\n+      ->(opts, v) { opts.dry_run = v},\n+      \"When true, print debug lines instead of performing writes. Defaults to true.\")\n+\n+  op.add_typed_option(\n+      \"--import-filename [import-filename]\",\n+      String,\n+      ->(opts, v) { opts.importFilename = v},\n+      \"CSV File containing list of ops users to assign the ops institution\")\n+\n+  # Create a cloud context and apply the DB connection variables to the environment.\n+  # These will be read by Gradle and passed as Spring Boot properties to the command-line.\n+  gcc = GcloudContextV2.new(op)\n+  op.parse.validate\n+  gcc.validate()\n+\n+  if op.opts.dry_run\n+    common.status \"DRY RUN -- CHANGES WILL NOT BE PERSISTED\"\n+  end\n+\n+  gradle_args = ([", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e16f4aab7aa1ed3761feb89e739a7701f623ae"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTU2MTc3OnYy", "diffSide": "RIGHT", "path": "api/libproject/devstart.rb", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo1NDowNVrOGOvrGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMTowOTo0N1rOGQ7rOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExNDMyOA==", "bodyText": "So it's Ruby->Docker->Gradle->Java->SQL?", "url": "https://github.com/all-of-us/workbench/pull/3504#discussion_r418114328", "createdAt": "2020-04-30T15:54:05Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1524,6 +1524,60 @@ def load_institutions(cmd_name, *args)\n     :fn => ->(*args) {load_institutions(LOAD_INSTITUTIONS_CMD, *args)}\n })\n \n+def populate_ops_user_affiliations(cmd_name, *args)\n+  common = Common.new\n+  ensure_docker(cmd_name, args)\n+\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.opts.dry_run = true\n+  op.opts.project = TEST_PROJECT\n+\n+  op.add_typed_option(\n+      \"--dry_run=[dry_run]\",\n+      TrueClass,\n+      ->(opts, v) { opts.dry_run = v},\n+      \"When true, print debug lines instead of performing writes. Defaults to true.\")\n+\n+  op.add_typed_option(\n+      \"--import-filename [import-filename]\",\n+      String,\n+      ->(opts, v) { opts.importFilename = v},\n+      \"CSV File containing list of ops users to assign the ops institution\")\n+\n+  # Create a cloud context and apply the DB connection variables to the environment.\n+  # These will be read by Gradle and passed as Spring Boot properties to the command-line.\n+  gcc = GcloudContextV2.new(op)\n+  op.parse.validate\n+  gcc.validate()\n+\n+  if op.opts.dry_run\n+    common.status \"DRY RUN -- CHANGES WILL NOT BE PERSISTED\"\n+  end\n+\n+  gradle_args = ([\n+      [\"--import-filename\", op.opts.importFilename]\n+  ]).map { |kv| \"#{kv[0]}=#{kv[1]}\" }\n+  if op.opts.dry_run\n+    gradle_args += [\"--dry-run\"]\n+  end\n+  # Gradle args need to be single-quote wrapped.\n+  gradle_args.map! { |f| \"'#{f}'\" }\n+\n+  with_cloud_proxy_and_db(gcc) do\n+    common.run_inline %W{\n+        gradle populateOpsUserAffiliations\n+       -PappArgs=[#{gradle_args.join(',')}]}\n+  end\n+end\n+\n+POPULATE_OPS_USER_AFFILIATIONS_CMD = \"populate-ops-user-affiliations\"\n+\n+Common.register_command({\n+    :invocation => POPULATE_OPS_USER_AFFILIATIONS_CMD,\n+    :description => \"Populate the institutional affiliations for the ops users in the specified CSV file.\",\n+    :fn => ->(*args) {populate_ops_user_affiliations(POPULATE_OPS_USER_AFFILIATIONS_CMD, *args)}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e16f4aab7aa1ed3761feb89e739a7701f623ae"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQwODEyMw==", "bodyText": "Yes.  That's our standard.  I would like to move to a better standard.", "url": "https://github.com/all-of-us/workbench/pull/3504#discussion_r420408123", "createdAt": "2020-05-05T21:09:47Z", "author": {"login": "jmthibault79"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1524,6 +1524,60 @@ def load_institutions(cmd_name, *args)\n     :fn => ->(*args) {load_institutions(LOAD_INSTITUTIONS_CMD, *args)}\n })\n \n+def populate_ops_user_affiliations(cmd_name, *args)\n+  common = Common.new\n+  ensure_docker(cmd_name, args)\n+\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.opts.dry_run = true\n+  op.opts.project = TEST_PROJECT\n+\n+  op.add_typed_option(\n+      \"--dry_run=[dry_run]\",\n+      TrueClass,\n+      ->(opts, v) { opts.dry_run = v},\n+      \"When true, print debug lines instead of performing writes. Defaults to true.\")\n+\n+  op.add_typed_option(\n+      \"--import-filename [import-filename]\",\n+      String,\n+      ->(opts, v) { opts.importFilename = v},\n+      \"CSV File containing list of ops users to assign the ops institution\")\n+\n+  # Create a cloud context and apply the DB connection variables to the environment.\n+  # These will be read by Gradle and passed as Spring Boot properties to the command-line.\n+  gcc = GcloudContextV2.new(op)\n+  op.parse.validate\n+  gcc.validate()\n+\n+  if op.opts.dry_run\n+    common.status \"DRY RUN -- CHANGES WILL NOT BE PERSISTED\"\n+  end\n+\n+  gradle_args = ([\n+      [\"--import-filename\", op.opts.importFilename]\n+  ]).map { |kv| \"#{kv[0]}=#{kv[1]}\" }\n+  if op.opts.dry_run\n+    gradle_args += [\"--dry-run\"]\n+  end\n+  # Gradle args need to be single-quote wrapped.\n+  gradle_args.map! { |f| \"'#{f}'\" }\n+\n+  with_cloud_proxy_and_db(gcc) do\n+    common.run_inline %W{\n+        gradle populateOpsUserAffiliations\n+       -PappArgs=[#{gradle_args.join(',')}]}\n+  end\n+end\n+\n+POPULATE_OPS_USER_AFFILIATIONS_CMD = \"populate-ops-user-affiliations\"\n+\n+Common.register_command({\n+    :invocation => POPULATE_OPS_USER_AFFILIATIONS_CMD,\n+    :description => \"Populate the institutional affiliations for the ops users in the specified CSV file.\",\n+    :fn => ->(*args) {populate_ops_user_affiliations(POPULATE_OPS_USER_AFFILIATIONS_CMD, *args)}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExNDMyOA=="}, "originalCommit": {"oid": "12e16f4aab7aa1ed3761feb89e739a7701f623ae"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTU2Mzg5OnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/PopulateOpsUserAffiliations.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo1NDozNVrOGOvseQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMTozMzoyNFrOGQ8ZTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExNDY4MQ==", "bodyText": "please make this a constant (preferably attached to an enum).", "url": "https://github.com/all-of-us/workbench/pull/3504#discussion_r418114681", "createdAt": "2020-04-30T15:54:35Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/PopulateOpsUserAffiliations.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package org.pmiops.workbench.tools;\n+\n+import com.opencsv.CSVReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.model.InstitutionalRole;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Populate the verified_institutional_affiliation table for Ops users from a CSV input file.\n+ *\n+ * <p>NOTE: input file must be located in the current directory or a subdirectory.\n+ *\n+ * <p>Example execution:\n+ *\n+ * <pre>\n+ * ./project.rb populate-ops-user-affiliations \\\n+ * --import-filename users.csv \\\n+ * --dry-run \\\n+ * --project all-of-us-workbench-test\n+ * </pre>\n+ */\n+public class PopulateOpsUserAffiliations {\n+\n+  private static final Logger log = Logger.getLogger(PopulateOpsUserAffiliations.class.getName());\n+\n+  private List<DbVerifiedInstitutionalAffiliation> prepareAffiliations(\n+      final String filename,\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao)\n+      throws IOException {\n+\n+    final DbInstitution aouOps =\n+        institutionDao\n+            .findOneByShortName(\"AouOps\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e16f4aab7aa1ed3761feb89e739a7701f623ae"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxOTkxOQ==", "bodyText": "OK.  Enum doesn't fit here because this is our special snowflake not-really-institution that is making us both think we need to resign the concept of institutions.  Whee!", "url": "https://github.com/all-of-us/workbench/pull/3504#discussion_r420419919", "createdAt": "2020-05-05T21:33:24Z", "author": {"login": "jmthibault79"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/PopulateOpsUserAffiliations.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package org.pmiops.workbench.tools;\n+\n+import com.opencsv.CSVReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.model.InstitutionalRole;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Populate the verified_institutional_affiliation table for Ops users from a CSV input file.\n+ *\n+ * <p>NOTE: input file must be located in the current directory or a subdirectory.\n+ *\n+ * <p>Example execution:\n+ *\n+ * <pre>\n+ * ./project.rb populate-ops-user-affiliations \\\n+ * --import-filename users.csv \\\n+ * --dry-run \\\n+ * --project all-of-us-workbench-test\n+ * </pre>\n+ */\n+public class PopulateOpsUserAffiliations {\n+\n+  private static final Logger log = Logger.getLogger(PopulateOpsUserAffiliations.class.getName());\n+\n+  private List<DbVerifiedInstitutionalAffiliation> prepareAffiliations(\n+      final String filename,\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao)\n+      throws IOException {\n+\n+    final DbInstitution aouOps =\n+        institutionDao\n+            .findOneByShortName(\"AouOps\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExNDY4MQ=="}, "originalCommit": {"oid": "12e16f4aab7aa1ed3761feb89e739a7701f623ae"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTU3MjI5OnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/PopulateOpsUserAffiliations.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo1NjozOVrOGOvyDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo1NjozOVrOGOvyDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExNjExMA==", "bodyText": "Please list all the fields that would change.", "url": "https://github.com/all-of-us/workbench/pull/3504#discussion_r418116110", "createdAt": "2020-04-30T15:56:39Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/PopulateOpsUserAffiliations.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package org.pmiops.workbench.tools;\n+\n+import com.opencsv.CSVReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.model.InstitutionalRole;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Populate the verified_institutional_affiliation table for Ops users from a CSV input file.\n+ *\n+ * <p>NOTE: input file must be located in the current directory or a subdirectory.\n+ *\n+ * <p>Example execution:\n+ *\n+ * <pre>\n+ * ./project.rb populate-ops-user-affiliations \\\n+ * --import-filename users.csv \\\n+ * --dry-run \\\n+ * --project all-of-us-workbench-test\n+ * </pre>\n+ */\n+public class PopulateOpsUserAffiliations {\n+\n+  private static final Logger log = Logger.getLogger(PopulateOpsUserAffiliations.class.getName());\n+\n+  private List<DbVerifiedInstitutionalAffiliation> prepareAffiliations(\n+      final String filename,\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao)\n+      throws IOException {\n+\n+    final DbInstitution aouOps =\n+        institutionDao\n+            .findOneByShortName(\"AouOps\")\n+            .orElseThrow(\n+                () -> new RuntimeException(\"Could not find 'AouOps' Institution in the DB\"));\n+\n+    return OpsUser.parseInput(filename).stream()\n+        .map(\n+            opsUser -> {\n+              if (!opsUser.action.equals(\"To Remain\")) {\n+                throw new RuntimeException(\n+                    String.format(\n+                        \"User %s not marked as 'To Remain' in the input CSV\", opsUser.userName));\n+              }\n+\n+              final DbUser dbUser = opsUser.dbCheck(userDao, affiliationDao);\n+\n+              return new DbVerifiedInstitutionalAffiliation()\n+                  .setInstitution(aouOps)\n+                  .setUser(dbUser)\n+                  .setInstitutionalRoleEnum(InstitutionalRole.OTHER)\n+                  .setInstitutionalRoleOtherText(opsUser.operationalRole);\n+            })\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Bean\n+  public CommandLineRunner run(\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao) {\n+\n+    final Option importFilename =\n+        Option.builder()\n+            .longOpt(\"import-filename\")\n+            .desc(\"File containing CSV of ops users\")\n+            .required()\n+            .hasArg()\n+            .build();\n+    final Option dryRunOpt =\n+        Option.builder()\n+            .longOpt(\"dry-run\")\n+            .desc(\"If specified, the tool runs in dry run mode; no modifications are made\")\n+            .build();\n+    final Options options = new Options().addOption(importFilename).addOption(dryRunOpt);\n+\n+    return (args) -> {\n+      CommandLine opts = new DefaultParser().parse(options, args);\n+      boolean dryRun = opts.hasOption(dryRunOpt.getLongOpt());\n+\n+      // process whole file before taking any action\n+      final List<DbVerifiedInstitutionalAffiliation> affiliations =\n+          prepareAffiliations(\n+              opts.getOptionValue(importFilename.getLongOpt()),\n+              userDao,\n+              institutionDao,\n+              affiliationDao);\n+\n+      affiliations.forEach(\n+          affiliation -> {\n+            if (!dryRun) {\n+              affiliationDao.save(affiliation);\n+            }\n+\n+            dryLog(\n+                dryRun,\n+                String.format(\n+                    \"Saved AouOps Institutional Affiliation for %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e16f4aab7aa1ed3761feb89e739a7701f623ae"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTU3NTEzOnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/PopulateOpsUserAffiliations.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo1NzoyMVrOGOvz7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMTo0ODoyN1rOGQ80ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExNjU4OQ==", "bodyText": "FYI There are batch stream operators so you don't have to make one SQL call per row. https://stackoverflow.com/a/31642381/12345554", "url": "https://github.com/all-of-us/workbench/pull/3504#discussion_r418116589", "createdAt": "2020-04-30T15:57:21Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/PopulateOpsUserAffiliations.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package org.pmiops.workbench.tools;\n+\n+import com.opencsv.CSVReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.model.InstitutionalRole;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Populate the verified_institutional_affiliation table for Ops users from a CSV input file.\n+ *\n+ * <p>NOTE: input file must be located in the current directory or a subdirectory.\n+ *\n+ * <p>Example execution:\n+ *\n+ * <pre>\n+ * ./project.rb populate-ops-user-affiliations \\\n+ * --import-filename users.csv \\\n+ * --dry-run \\\n+ * --project all-of-us-workbench-test\n+ * </pre>\n+ */\n+public class PopulateOpsUserAffiliations {\n+\n+  private static final Logger log = Logger.getLogger(PopulateOpsUserAffiliations.class.getName());\n+\n+  private List<DbVerifiedInstitutionalAffiliation> prepareAffiliations(\n+      final String filename,\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao)\n+      throws IOException {\n+\n+    final DbInstitution aouOps =\n+        institutionDao\n+            .findOneByShortName(\"AouOps\")\n+            .orElseThrow(\n+                () -> new RuntimeException(\"Could not find 'AouOps' Institution in the DB\"));\n+\n+    return OpsUser.parseInput(filename).stream()\n+        .map(\n+            opsUser -> {\n+              if (!opsUser.action.equals(\"To Remain\")) {\n+                throw new RuntimeException(\n+                    String.format(\n+                        \"User %s not marked as 'To Remain' in the input CSV\", opsUser.userName));\n+              }\n+\n+              final DbUser dbUser = opsUser.dbCheck(userDao, affiliationDao);\n+\n+              return new DbVerifiedInstitutionalAffiliation()\n+                  .setInstitution(aouOps)\n+                  .setUser(dbUser)\n+                  .setInstitutionalRoleEnum(InstitutionalRole.OTHER)\n+                  .setInstitutionalRoleOtherText(opsUser.operationalRole);\n+            })\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Bean\n+  public CommandLineRunner run(\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao) {\n+\n+    final Option importFilename =\n+        Option.builder()\n+            .longOpt(\"import-filename\")\n+            .desc(\"File containing CSV of ops users\")\n+            .required()\n+            .hasArg()\n+            .build();\n+    final Option dryRunOpt =\n+        Option.builder()\n+            .longOpt(\"dry-run\")\n+            .desc(\"If specified, the tool runs in dry run mode; no modifications are made\")\n+            .build();\n+    final Options options = new Options().addOption(importFilename).addOption(dryRunOpt);\n+\n+    return (args) -> {\n+      CommandLine opts = new DefaultParser().parse(options, args);\n+      boolean dryRun = opts.hasOption(dryRunOpt.getLongOpt());\n+\n+      // process whole file before taking any action\n+      final List<DbVerifiedInstitutionalAffiliation> affiliations =\n+          prepareAffiliations(\n+              opts.getOptionValue(importFilename.getLongOpt()),\n+              userDao,\n+              institutionDao,\n+              affiliationDao);\n+\n+      affiliations.forEach(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e16f4aab7aa1ed3761feb89e739a7701f623ae"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQyNjk0Nw==", "bodyText": "I don't see how that link is relevant to this situation ?", "url": "https://github.com/all-of-us/workbench/pull/3504#discussion_r420426947", "createdAt": "2020-05-05T21:48:27Z", "author": {"login": "jmthibault79"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/PopulateOpsUserAffiliations.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package org.pmiops.workbench.tools;\n+\n+import com.opencsv.CSVReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.model.InstitutionalRole;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Populate the verified_institutional_affiliation table for Ops users from a CSV input file.\n+ *\n+ * <p>NOTE: input file must be located in the current directory or a subdirectory.\n+ *\n+ * <p>Example execution:\n+ *\n+ * <pre>\n+ * ./project.rb populate-ops-user-affiliations \\\n+ * --import-filename users.csv \\\n+ * --dry-run \\\n+ * --project all-of-us-workbench-test\n+ * </pre>\n+ */\n+public class PopulateOpsUserAffiliations {\n+\n+  private static final Logger log = Logger.getLogger(PopulateOpsUserAffiliations.class.getName());\n+\n+  private List<DbVerifiedInstitutionalAffiliation> prepareAffiliations(\n+      final String filename,\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao)\n+      throws IOException {\n+\n+    final DbInstitution aouOps =\n+        institutionDao\n+            .findOneByShortName(\"AouOps\")\n+            .orElseThrow(\n+                () -> new RuntimeException(\"Could not find 'AouOps' Institution in the DB\"));\n+\n+    return OpsUser.parseInput(filename).stream()\n+        .map(\n+            opsUser -> {\n+              if (!opsUser.action.equals(\"To Remain\")) {\n+                throw new RuntimeException(\n+                    String.format(\n+                        \"User %s not marked as 'To Remain' in the input CSV\", opsUser.userName));\n+              }\n+\n+              final DbUser dbUser = opsUser.dbCheck(userDao, affiliationDao);\n+\n+              return new DbVerifiedInstitutionalAffiliation()\n+                  .setInstitution(aouOps)\n+                  .setUser(dbUser)\n+                  .setInstitutionalRoleEnum(InstitutionalRole.OTHER)\n+                  .setInstitutionalRoleOtherText(opsUser.operationalRole);\n+            })\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Bean\n+  public CommandLineRunner run(\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao) {\n+\n+    final Option importFilename =\n+        Option.builder()\n+            .longOpt(\"import-filename\")\n+            .desc(\"File containing CSV of ops users\")\n+            .required()\n+            .hasArg()\n+            .build();\n+    final Option dryRunOpt =\n+        Option.builder()\n+            .longOpt(\"dry-run\")\n+            .desc(\"If specified, the tool runs in dry run mode; no modifications are made\")\n+            .build();\n+    final Options options = new Options().addOption(importFilename).addOption(dryRunOpt);\n+\n+    return (args) -> {\n+      CommandLine opts = new DefaultParser().parse(options, args);\n+      boolean dryRun = opts.hasOption(dryRunOpt.getLongOpt());\n+\n+      // process whole file before taking any action\n+      final List<DbVerifiedInstitutionalAffiliation> affiliations =\n+          prepareAffiliations(\n+              opts.getOptionValue(importFilename.getLongOpt()),\n+              userDao,\n+              institutionDao,\n+              affiliationDao);\n+\n+      affiliations.forEach(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExNjU4OQ=="}, "originalCommit": {"oid": "12e16f4aab7aa1ed3761feb89e739a7701f623ae"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTU4ODg3OnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/PopulateOpsUserAffiliations.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjowMDo1MVrOGOv86Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMTozOToyOVrOGQ8k0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExODg4OQ==", "bodyText": "I recommend you don't throw for one invalid input item in a batch job. Log an error and/or write a structured results file to another CSV file (or for complex migrations, to a temporary migration job staging table).", "url": "https://github.com/all-of-us/workbench/pull/3504#discussion_r418118889", "createdAt": "2020-04-30T16:00:51Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/PopulateOpsUserAffiliations.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package org.pmiops.workbench.tools;\n+\n+import com.opencsv.CSVReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.model.InstitutionalRole;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Populate the verified_institutional_affiliation table for Ops users from a CSV input file.\n+ *\n+ * <p>NOTE: input file must be located in the current directory or a subdirectory.\n+ *\n+ * <p>Example execution:\n+ *\n+ * <pre>\n+ * ./project.rb populate-ops-user-affiliations \\\n+ * --import-filename users.csv \\\n+ * --dry-run \\\n+ * --project all-of-us-workbench-test\n+ * </pre>\n+ */\n+public class PopulateOpsUserAffiliations {\n+\n+  private static final Logger log = Logger.getLogger(PopulateOpsUserAffiliations.class.getName());\n+\n+  private List<DbVerifiedInstitutionalAffiliation> prepareAffiliations(\n+      final String filename,\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao)\n+      throws IOException {\n+\n+    final DbInstitution aouOps =\n+        institutionDao\n+            .findOneByShortName(\"AouOps\")\n+            .orElseThrow(\n+                () -> new RuntimeException(\"Could not find 'AouOps' Institution in the DB\"));\n+\n+    return OpsUser.parseInput(filename).stream()\n+        .map(\n+            opsUser -> {\n+              if (!opsUser.action.equals(\"To Remain\")) {\n+                throw new RuntimeException(\n+                    String.format(\n+                        \"User %s not marked as 'To Remain' in the input CSV\", opsUser.userName));\n+              }\n+\n+              final DbUser dbUser = opsUser.dbCheck(userDao, affiliationDao);\n+\n+              return new DbVerifiedInstitutionalAffiliation()\n+                  .setInstitution(aouOps)\n+                  .setUser(dbUser)\n+                  .setInstitutionalRoleEnum(InstitutionalRole.OTHER)\n+                  .setInstitutionalRoleOtherText(opsUser.operationalRole);\n+            })\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Bean\n+  public CommandLineRunner run(\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao) {\n+\n+    final Option importFilename =\n+        Option.builder()\n+            .longOpt(\"import-filename\")\n+            .desc(\"File containing CSV of ops users\")\n+            .required()\n+            .hasArg()\n+            .build();\n+    final Option dryRunOpt =\n+        Option.builder()\n+            .longOpt(\"dry-run\")\n+            .desc(\"If specified, the tool runs in dry run mode; no modifications are made\")\n+            .build();\n+    final Options options = new Options().addOption(importFilename).addOption(dryRunOpt);\n+\n+    return (args) -> {\n+      CommandLine opts = new DefaultParser().parse(options, args);\n+      boolean dryRun = opts.hasOption(dryRunOpt.getLongOpt());\n+\n+      // process whole file before taking any action\n+      final List<DbVerifiedInstitutionalAffiliation> affiliations =\n+          prepareAffiliations(\n+              opts.getOptionValue(importFilename.getLongOpt()),\n+              userDao,\n+              institutionDao,\n+              affiliationDao);\n+\n+      affiliations.forEach(\n+          affiliation -> {\n+            if (!dryRun) {\n+              affiliationDao.save(affiliation);\n+            }\n+\n+            dryLog(\n+                dryRun,\n+                String.format(\n+                    \"Saved AouOps Institutional Affiliation for %s\",\n+                    affiliation.getUser().getUsername()));\n+          });\n+    };\n+  }\n+\n+  private static void dryLog(boolean dryRun, String msg) {\n+    String prefix = \"\";\n+    if (dryRun) {\n+      prefix = \"[DRY RUN] Would have... \";\n+    }\n+    log.info(prefix + msg);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLineToolConfig.runCommandLine(PopulateOpsUserAffiliations.class, args);\n+  }\n+}\n+\n+/**\n+ * Structure the incoming ops user data according to the format of the source CSV:\n+ *\n+ * <p>First Name,Last Name,Email,\"Workbench Email\",Institution,Role,Action\n+ */\n+class OpsUser {\n+  final String firstName;\n+  final String lastName;\n+  final String contactEmail; // \"Email\" to DRC admin staff\n+  final String userName; // \"Workbench Email\" to DRC admin staff\n+  final String operationalRole;\n+  final String action;\n+\n+  static final int COLUMNS = 6;\n+\n+  private static final Logger log = Logger.getLogger(OpsUser.class.getName());\n+\n+  private OpsUser(final String[] userLine) {\n+    this.firstName = userLine[0].trim();\n+    this.lastName = userLine[1].trim();\n+    this.contactEmail = userLine[2].trim();\n+    this.userName = userLine[3].trim();\n+    this.operationalRole = userLine[4].trim();\n+    this.action = userLine[5].trim();\n+  }\n+\n+  static List<OpsUser> parseInput(final String filename) throws IOException {\n+    try (final CSVReader reader = new CSVReader(new FileReader(filename))) {\n+      // consume and sanity-check header line\n+      final String[] headerLine = reader.readNext();\n+      if (headerLine.length != COLUMNS) {\n+        throw new RuntimeException(\n+            String.format(\n+                \"Expected %d columns in input file. Was: %d\", COLUMNS, headerLine.length));\n+      }\n+\n+      return StreamSupport.stream(reader.spliterator(), false)\n+          .map(OpsUser::new)\n+          .collect(Collectors.toList());\n+    }\n+  }\n+\n+  private void checkField(String dbValue, String csvValue, String fieldName) {\n+    if (!dbValue.equals(csvValue)) {\n+      log.warning(\n+          String.format(\n+              \"CSV and DB values do not match for user '%s', field '%s'. CSV = %s, DB = %s\",\n+              userName, fieldName, csvValue, dbValue));\n+    }\n+  }\n+\n+  public DbUser dbCheck(UserDao userDao, VerifiedInstitutionalAffiliationDao affiliationDao) {\n+    final DbUser dbUser = userDao.findUserByUsername(userName);\n+\n+    if (dbUser == null) {\n+      throw new RuntimeException(String.format(\"User %s was not found in the DB\", userName));\n+    }\n+\n+    checkField(dbUser.getGivenName(), firstName, \"First Name\");\n+    checkField(dbUser.getFamilyName(), lastName, \"Last Name\");\n+    checkField(dbUser.getContactEmail(), contactEmail, \"Contact Email\");\n+\n+    affiliationDao\n+        .findFirstByUser(dbUser)\n+        .ifPresent(\n+            affiliation -> {\n+              throw new RuntimeException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e16f4aab7aa1ed3761feb89e739a7701f623ae"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQyMjg2NA==", "bodyText": "It would be very strange for this to be true.  I want us to fail hard in that case.  I can add a comment.", "url": "https://github.com/all-of-us/workbench/pull/3504#discussion_r420422864", "createdAt": "2020-05-05T21:39:29Z", "author": {"login": "jmthibault79"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/PopulateOpsUserAffiliations.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package org.pmiops.workbench.tools;\n+\n+import com.opencsv.CSVReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.model.InstitutionalRole;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Populate the verified_institutional_affiliation table for Ops users from a CSV input file.\n+ *\n+ * <p>NOTE: input file must be located in the current directory or a subdirectory.\n+ *\n+ * <p>Example execution:\n+ *\n+ * <pre>\n+ * ./project.rb populate-ops-user-affiliations \\\n+ * --import-filename users.csv \\\n+ * --dry-run \\\n+ * --project all-of-us-workbench-test\n+ * </pre>\n+ */\n+public class PopulateOpsUserAffiliations {\n+\n+  private static final Logger log = Logger.getLogger(PopulateOpsUserAffiliations.class.getName());\n+\n+  private List<DbVerifiedInstitutionalAffiliation> prepareAffiliations(\n+      final String filename,\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao)\n+      throws IOException {\n+\n+    final DbInstitution aouOps =\n+        institutionDao\n+            .findOneByShortName(\"AouOps\")\n+            .orElseThrow(\n+                () -> new RuntimeException(\"Could not find 'AouOps' Institution in the DB\"));\n+\n+    return OpsUser.parseInput(filename).stream()\n+        .map(\n+            opsUser -> {\n+              if (!opsUser.action.equals(\"To Remain\")) {\n+                throw new RuntimeException(\n+                    String.format(\n+                        \"User %s not marked as 'To Remain' in the input CSV\", opsUser.userName));\n+              }\n+\n+              final DbUser dbUser = opsUser.dbCheck(userDao, affiliationDao);\n+\n+              return new DbVerifiedInstitutionalAffiliation()\n+                  .setInstitution(aouOps)\n+                  .setUser(dbUser)\n+                  .setInstitutionalRoleEnum(InstitutionalRole.OTHER)\n+                  .setInstitutionalRoleOtherText(opsUser.operationalRole);\n+            })\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Bean\n+  public CommandLineRunner run(\n+      UserDao userDao,\n+      InstitutionDao institutionDao,\n+      VerifiedInstitutionalAffiliationDao affiliationDao) {\n+\n+    final Option importFilename =\n+        Option.builder()\n+            .longOpt(\"import-filename\")\n+            .desc(\"File containing CSV of ops users\")\n+            .required()\n+            .hasArg()\n+            .build();\n+    final Option dryRunOpt =\n+        Option.builder()\n+            .longOpt(\"dry-run\")\n+            .desc(\"If specified, the tool runs in dry run mode; no modifications are made\")\n+            .build();\n+    final Options options = new Options().addOption(importFilename).addOption(dryRunOpt);\n+\n+    return (args) -> {\n+      CommandLine opts = new DefaultParser().parse(options, args);\n+      boolean dryRun = opts.hasOption(dryRunOpt.getLongOpt());\n+\n+      // process whole file before taking any action\n+      final List<DbVerifiedInstitutionalAffiliation> affiliations =\n+          prepareAffiliations(\n+              opts.getOptionValue(importFilename.getLongOpt()),\n+              userDao,\n+              institutionDao,\n+              affiliationDao);\n+\n+      affiliations.forEach(\n+          affiliation -> {\n+            if (!dryRun) {\n+              affiliationDao.save(affiliation);\n+            }\n+\n+            dryLog(\n+                dryRun,\n+                String.format(\n+                    \"Saved AouOps Institutional Affiliation for %s\",\n+                    affiliation.getUser().getUsername()));\n+          });\n+    };\n+  }\n+\n+  private static void dryLog(boolean dryRun, String msg) {\n+    String prefix = \"\";\n+    if (dryRun) {\n+      prefix = \"[DRY RUN] Would have... \";\n+    }\n+    log.info(prefix + msg);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLineToolConfig.runCommandLine(PopulateOpsUserAffiliations.class, args);\n+  }\n+}\n+\n+/**\n+ * Structure the incoming ops user data according to the format of the source CSV:\n+ *\n+ * <p>First Name,Last Name,Email,\"Workbench Email\",Institution,Role,Action\n+ */\n+class OpsUser {\n+  final String firstName;\n+  final String lastName;\n+  final String contactEmail; // \"Email\" to DRC admin staff\n+  final String userName; // \"Workbench Email\" to DRC admin staff\n+  final String operationalRole;\n+  final String action;\n+\n+  static final int COLUMNS = 6;\n+\n+  private static final Logger log = Logger.getLogger(OpsUser.class.getName());\n+\n+  private OpsUser(final String[] userLine) {\n+    this.firstName = userLine[0].trim();\n+    this.lastName = userLine[1].trim();\n+    this.contactEmail = userLine[2].trim();\n+    this.userName = userLine[3].trim();\n+    this.operationalRole = userLine[4].trim();\n+    this.action = userLine[5].trim();\n+  }\n+\n+  static List<OpsUser> parseInput(final String filename) throws IOException {\n+    try (final CSVReader reader = new CSVReader(new FileReader(filename))) {\n+      // consume and sanity-check header line\n+      final String[] headerLine = reader.readNext();\n+      if (headerLine.length != COLUMNS) {\n+        throw new RuntimeException(\n+            String.format(\n+                \"Expected %d columns in input file. Was: %d\", COLUMNS, headerLine.length));\n+      }\n+\n+      return StreamSupport.stream(reader.spliterator(), false)\n+          .map(OpsUser::new)\n+          .collect(Collectors.toList());\n+    }\n+  }\n+\n+  private void checkField(String dbValue, String csvValue, String fieldName) {\n+    if (!dbValue.equals(csvValue)) {\n+      log.warning(\n+          String.format(\n+              \"CSV and DB values do not match for user '%s', field '%s'. CSV = %s, DB = %s\",\n+              userName, fieldName, csvValue, dbValue));\n+    }\n+  }\n+\n+  public DbUser dbCheck(UserDao userDao, VerifiedInstitutionalAffiliationDao affiliationDao) {\n+    final DbUser dbUser = userDao.findUserByUsername(userName);\n+\n+    if (dbUser == null) {\n+      throw new RuntimeException(String.format(\"User %s was not found in the DB\", userName));\n+    }\n+\n+    checkField(dbUser.getGivenName(), firstName, \"First Name\");\n+    checkField(dbUser.getFamilyName(), lastName, \"Last Name\");\n+    checkField(dbUser.getContactEmail(), contactEmail, \"Contact Email\");\n+\n+    affiliationDao\n+        .findFirstByUser(dbUser)\n+        .ifPresent(\n+            affiliation -> {\n+              throw new RuntimeException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExODg4OQ=="}, "originalCommit": {"oid": "12e16f4aab7aa1ed3761feb89e739a7701f623ae"}, "originalPosition": 201}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2838, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}