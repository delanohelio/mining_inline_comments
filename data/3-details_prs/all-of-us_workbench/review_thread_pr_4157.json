{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMDYxODc5", "number": 4157, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDowODoxM1rOEtgMNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDowODoxM1rOEtgMNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTQ4NzkxOnYy", "diffSide": "RIGHT", "path": "e2e/app/page/notebook-page.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDowODoxM1rOHhU6zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDowODoxM1rOHhU6zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcwNzc5MA==", "bodyText": "moved from the r-spec test", "url": "https://github.com/all-of-us/workbench/pull/4157#discussion_r504707790", "createdAt": "2020-10-14T14:08:13Z", "author": {"login": "jmthibault79"}, "path": "e2e/app/page/notebook-page.ts", "diffHunk": "@@ -168,23 +168,42 @@ export default class NotebookPage extends AuthenticatedPage {\n    * Click Run button in toolbar. Run focused code cell and insert a new code cell below.\n    *\n    * @param {number} cellIndex Code Cell index. (first index is 1). Use -1 to find last cell.\n-   * @param {string} code The code to run.\n-   * @param {string} codeFile The full path to file that contains code to run.\n-   * @param {number} timeOut The timeout time in milliseconds.\n-   * @returns {string} Run output.\n+   * @param opts\n+   *  {string} code The code to run.\n+   *  {string} codeFile The full path to a file that contains the code to run.\n+   *  {number} timeOut The timeout time in milliseconds (default 120 sec).\n+   *  {boolean} markdownWorkaround Convert to Markdown before typing (default false)\n    */\n-  async runCodeCell(cellIndex: number, opts: { code?: string, codeFile?: string, timeOut?: number } = {}): Promise<string> {\n+  async runCodeCell(\n+      cellIndex: number,\n+      opts: { code?: string, codeFile?: string, timeOut?: number, markdownWorkaround?: boolean } = {}): Promise<string> {\n     const cell = cellIndex === -1 ? await this.findLastCell() : await this.findCell(cellIndex);\n-    const cellInput = await cell.focus();\n-    if (opts.code !== undefined) {\n-      await cellInput.type(opts.code);\n-    } else if (opts.codeFile !== undefined) {\n-      const code = fs.readFileSync(opts.codeFile, 'utf8');\n-      await cellInput.type(code);\n+    const inputCell = await cell.focus();\n+\n+    const {code, codeFile, timeOut = 120000, markdownWorkaround = false} = opts;\n+\n+    let codeToRun;\n+    if (code !== undefined) {\n+      codeToRun = code;\n+    } else if (codeFile !== undefined) {\n+      codeToRun = fs.readFileSync(codeFile, 'ascii');\n     }\n-    await cellInput.dispose();\n+\n+    // autoCloseBrackets is true by default for R code cells.\n+    // Puppeteer types in every character of code, resulting in extra brackets.\n+    // Workaround: Type code in Markdown cell, then change to Code cell to run.\n+    if (markdownWorkaround) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab4602d99eec1b2e393a63f7a6782864d2eac3b7"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3819, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}