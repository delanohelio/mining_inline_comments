{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1Njg0MTU2", "number": 3231, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjo1ODo1MlrODmYb1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjoyMjozMlrODm4JWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTcyODIxOnYy", "diffSide": "RIGHT", "path": "api/gradle/wrapper/gradle-wrapper.properties", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjo1ODo1MlrOFzxINg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzo0MDowNVrOFzytjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgyNjYxNA==", "bodyText": "Not sure how this file got updated, but this looks like a no-op. Probably should revert", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r389826614", "createdAt": "2020-03-09T16:58:52Z", "author": {"login": "calbach"}, "path": "api/gradle/wrapper/gradle-wrapper.properties", "diffHunk": "@@ -1,6 +1,6 @@\n-#Thu May 10 14:42:28 CDT 2018\n+#Fri Mar 06 15:11:13 EST 2020\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-4.6-all.zip", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fdea6f6d31e2cc44e3dac64e2c74c37c805f04b"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1MjU1OA==", "bodyText": "probably by telling gradle to download dependencies for me", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r389852558", "createdAt": "2020-03-09T17:40:05Z", "author": {"login": "als364"}, "path": "api/gradle/wrapper/gradle-wrapper.properties", "diffHunk": "@@ -1,6 +1,6 @@\n-#Thu May 10 14:42:28 CDT 2018\n+#Fri Mar 06 15:11:13 EST 2020\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-4.6-all.zip", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgyNjYxNA=="}, "originalCommit": {"oid": "8fdea6f6d31e2cc44e3dac64e2c74c37c805f04b"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTc1NDg0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbStorageEnums.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzowNTo1MlrOFzxY7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowNDoyMFrOF0TEYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzMDg5NA==", "bodyText": "The newly added mappings appear to duplicate those defined here: https://github.com/all-of-us/workbench/blob/bb8aec8d448abeece258d3b53d0d925ede1d5473/api/src/main/java/org/pmiops/workbench/db/model/DemographicSurveyEnum.java", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r389830894", "createdAt": "2020-03-09T17:05:52Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbStorageEnums.java", "diffHunk": "@@ -14,12 +14,18 @@\n import org.pmiops.workbench.model.Degree;\n import org.pmiops.workbench.model.DisseminateResearchEnum;\n import org.pmiops.workbench.model.Domain;\n+import org.pmiops.workbench.model.Education;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fdea6f6d31e2cc44e3dac64e2c74c37c805f04b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk3MjIyNw==", "bodyText": "This doesn't seem to have been addressed", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r389972227", "createdAt": "2020-03-09T21:28:53Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbStorageEnums.java", "diffHunk": "@@ -14,12 +14,18 @@\n import org.pmiops.workbench.model.Degree;\n import org.pmiops.workbench.model.DisseminateResearchEnum;\n import org.pmiops.workbench.model.Domain;\n+import org.pmiops.workbench.model.Education;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzMDg5NA=="}, "originalCommit": {"oid": "8fdea6f6d31e2cc44e3dac64e2c74c37c805f04b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4MjY5MQ==", "bodyText": "arghhhh", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r390382691", "createdAt": "2020-03-10T15:04:20Z", "author": {"login": "als364"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbStorageEnums.java", "diffHunk": "@@ -14,12 +14,18 @@\n import org.pmiops.workbench.model.Degree;\n import org.pmiops.workbench.model.DisseminateResearchEnum;\n import org.pmiops.workbench.model.Domain;\n+import org.pmiops.workbench.model.Education;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzMDg5NA=="}, "originalCommit": {"oid": "8fdea6f6d31e2cc44e3dac64e2c74c37c805f04b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTc2MDM3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzowNzoxNlrOFzxcQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzo0MTozMlrOFzyxPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzMTc0NQ==", "bodyText": "Looks like this got dropped:\n    profile.setFreeTierUsage(freeTierBillingService.getUserCachedFreeTierUsage(user));\n    profile.setFreeTierDollarQuota(freeTierBillingService.getUserFreeTierDollarLimit(user));", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r389831745", "createdAt": "2020-03-09T17:07:16Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.pmiops.workbench.profile;\n+\n+import java.util.Optional;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.UserTermsOfServiceDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbUserTermsOfService;\n+import org.pmiops.workbench.institution.VerifiedInstitutionalAffiliationMapper;\n+import org.pmiops.workbench.model.Profile;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ProfileService {\n+  private final ProfileMapper profileMapper;\n+  private final UserDao userDao;\n+  private final UserTermsOfServiceDao userTermsOfServiceDao;\n+  private final VerifiedInstitutionalAffiliationDao verifiedInstitutionalAffiliationDao;\n+  private final VerifiedInstitutionalAffiliationMapper verifiedInstitutionalAffiliationMapper;\n+\n+  @Autowired\n+  public ProfileService(\n+      ProfileMapper profileMapper,\n+      UserDao userDao,\n+      UserTermsOfServiceDao userTermsOfServiceDao,\n+      VerifiedInstitutionalAffiliationDao verifiedInstitutionalAffiliationDao,\n+      VerifiedInstitutionalAffiliationMapper verifiedInstitutionalAffiliationMapper) {\n+    this.profileMapper = profileMapper;\n+    this.userDao = userDao;\n+    this.userTermsOfServiceDao = userTermsOfServiceDao;\n+    this.verifiedInstitutionalAffiliationDao = verifiedInstitutionalAffiliationDao;\n+    this.verifiedInstitutionalAffiliationMapper = verifiedInstitutionalAffiliationMapper;\n+  }\n+\n+  public Profile getProfile(DbUser user) {\n+    // Fetch the user's authorities, since they aren't loaded during normal request interception.\n+    DbUser userWithAuthoritiesAndPageVisits =\n+        userDao.findUserWithAuthoritiesAndPageVisits(user.getUserId());\n+    if (userWithAuthoritiesAndPageVisits != null) {\n+      // If the user is already written to the database, use it and whatever authorities and page\n+      // visits are there.\n+      user = userWithAuthoritiesAndPageVisits;\n+    }\n+\n+    Profile profile = profileMapper.dbUserToProfile(user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fdea6f6d31e2cc44e3dac64e2c74c37c805f04b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1MzUwMg==", "bodyText": "good catch, I'll make a test case for that", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r389853502", "createdAt": "2020-03-09T17:41:32Z", "author": {"login": "als364"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.pmiops.workbench.profile;\n+\n+import java.util.Optional;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.UserTermsOfServiceDao;\n+import org.pmiops.workbench.db.dao.VerifiedInstitutionalAffiliationDao;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbUserTermsOfService;\n+import org.pmiops.workbench.institution.VerifiedInstitutionalAffiliationMapper;\n+import org.pmiops.workbench.model.Profile;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ProfileService {\n+  private final ProfileMapper profileMapper;\n+  private final UserDao userDao;\n+  private final UserTermsOfServiceDao userTermsOfServiceDao;\n+  private final VerifiedInstitutionalAffiliationDao verifiedInstitutionalAffiliationDao;\n+  private final VerifiedInstitutionalAffiliationMapper verifiedInstitutionalAffiliationMapper;\n+\n+  @Autowired\n+  public ProfileService(\n+      ProfileMapper profileMapper,\n+      UserDao userDao,\n+      UserTermsOfServiceDao userTermsOfServiceDao,\n+      VerifiedInstitutionalAffiliationDao verifiedInstitutionalAffiliationDao,\n+      VerifiedInstitutionalAffiliationMapper verifiedInstitutionalAffiliationMapper) {\n+    this.profileMapper = profileMapper;\n+    this.userDao = userDao;\n+    this.userTermsOfServiceDao = userTermsOfServiceDao;\n+    this.verifiedInstitutionalAffiliationDao = verifiedInstitutionalAffiliationDao;\n+    this.verifiedInstitutionalAffiliationMapper = verifiedInstitutionalAffiliationMapper;\n+  }\n+\n+  public Profile getProfile(DbUser user) {\n+    // Fetch the user's authorities, since they aren't loaded during normal request interception.\n+    DbUser userWithAuthoritiesAndPageVisits =\n+        userDao.findUserWithAuthoritiesAndPageVisits(user.getUserId());\n+    if (userWithAuthoritiesAndPageVisits != null) {\n+      // If the user is already written to the database, use it and whatever authorities and page\n+      // visits are there.\n+      user = userWithAuthoritiesAndPageVisits;\n+    }\n+\n+    Profile profile = profileMapper.dbUserToProfile(user);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzMTc0NQ=="}, "originalCommit": {"oid": "8fdea6f6d31e2cc44e3dac64e2c74c37c805f04b"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTc4Mjc0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzoxMjozOVrOFzxpgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzoxMjozOVrOFzxpgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzNTEzOA==", "bodyText": "optional: Most of these are not really shared across models. Would it make more sense to just define them in the relevant mappers as needed instead? e.g. moving this into ProfileMapper. Or maybe just leave the truly shared \"common\" enums here (maybe DataAccessLevel).", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r389835138", "createdAt": "2020-03-09T17:12:39Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java", "diffHunk": "@@ -53,4 +74,92 @@ public static String cdrVersionToEtag(int cdrVersion) {\n   public static int etagToCdrVersion(String etag) {\n     return Etags.toVersion(etag);\n   }\n+\n+  /////////////////////////////////////////////////////////////////////////////\n+  //                                  ENUMS                                  //\n+  /////////////////////////////////////////////////////////////////////////////\n+\n+  public static Authority authorityFromStorage(Short authority) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fdea6f6d31e2cc44e3dac64e2c74c37c805f04b"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDg3ODQ2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjowODowNVrOF0iu_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjozMjo1MFrOF0_DXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYzOTM1Nw==", "bodyText": "Probably worth having a cleanup ticket here. From a spot check of the fields you've commented here, I agree they should all be  removed at this point.", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r390639357", "createdAt": "2020-03-10T22:08:05Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.pmiops.workbench.profile;\n+\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.institution.InstitutionalAffiliationMapper;\n+import org.pmiops.workbench.model.Authority;\n+import org.pmiops.workbench.model.Degree;\n+import org.pmiops.workbench.model.EmailVerificationStatus;\n+import org.pmiops.workbench.model.Profile;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+\n+@Mapper(\n+    componentModel = \"spring\",\n+    uses = {\n+      AddressMapper.class,\n+      CommonMappers.class,\n+      DemographicSurveyMapper.class,\n+      InstitutionalAffiliationMapper.class,\n+      PageVisitMapper.class\n+    })\n+public interface ProfileMapper {\n+  @Mapping(target = \"contactEmailFailure\", ignore = true) // I don't think we actually use this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d1fcdd28850baab62f8fd1e0d0cc9ba76e4652f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwMzMyNg==", "bodyText": "https://precisionmedicineinitiative.atlassian.net/browse/RW-4598", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r391103326", "createdAt": "2020-03-11T16:32:50Z", "author": {"login": "als364"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.pmiops.workbench.profile;\n+\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.institution.InstitutionalAffiliationMapper;\n+import org.pmiops.workbench.model.Authority;\n+import org.pmiops.workbench.model.Degree;\n+import org.pmiops.workbench.model.EmailVerificationStatus;\n+import org.pmiops.workbench.model.Profile;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+\n+@Mapper(\n+    componentModel = \"spring\",\n+    uses = {\n+      AddressMapper.class,\n+      CommonMappers.class,\n+      DemographicSurveyMapper.class,\n+      InstitutionalAffiliationMapper.class,\n+      PageVisitMapper.class\n+    })\n+public interface ProfileMapper {\n+  @Mapping(target = \"contactEmailFailure\", ignore = true) // I don't think we actually use this", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYzOTM1Nw=="}, "originalCommit": {"oid": "7d1fcdd28850baab62f8fd1e0d0cc9ba76e4652f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDg4NzU3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjoxMDoyOFrOF0iz3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjoyNzozOVrOF0-11w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY0MDYwNw==", "bodyText": "FYI: This should probably also be killed eventually. Might be a bigger job", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r390640607", "createdAt": "2020-03-10T22:10:28Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.pmiops.workbench.profile;\n+\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.institution.InstitutionalAffiliationMapper;\n+import org.pmiops.workbench.model.Authority;\n+import org.pmiops.workbench.model.Degree;\n+import org.pmiops.workbench.model.EmailVerificationStatus;\n+import org.pmiops.workbench.model.Profile;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+\n+@Mapper(\n+    componentModel = \"spring\",\n+    uses = {\n+      AddressMapper.class,\n+      CommonMappers.class,\n+      DemographicSurveyMapper.class,\n+      InstitutionalAffiliationMapper.class,\n+      PageVisitMapper.class\n+    })\n+public interface ProfileMapper {\n+  @Mapping(target = \"contactEmailFailure\", ignore = true) // I don't think we actually use this\n+  @Mapping(target = \"freeTierDollarQuota\", ignore = true) // handled by ProfileService.getProfile\n+  @Mapping(target = \"freeTierUsage\", ignore = true) // handled by ProfileService.getProfile\n+  @Mapping(\n+      target = \"latestTermsOfServiceTime\",\n+      ignore = true) // handled by ProfileService.getProfile\n+  @Mapping(\n+      target = \"latestTermsOfServiceVersion\",\n+      ignore = true) // handled by ProfileService.getProfile\n+  @Mapping(\n+      target = \"verifiedInstitutionalAffiliation\",\n+      ignore = true) // handled by ProfileService.getProfile\n+  Profile dbUserToProfile(DbUser dbUser);\n+\n+  @Mapping(target = \"authoritiesEnum\", ignore = true) // derived property\n+  @Mapping(target = \"billingProjectRetries\", ignore = true) // I don't think we actually use this\n+  @Mapping(\n+      target = \"clusterConfigDefault\",\n+      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n+  @Mapping(\n+      target = \"clusterConfigDefaultRaw\",\n+      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n+  @Mapping(\n+      target = \"clusterCreateRetries\",\n+      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n+  @Mapping(\n+      target = \"complianceTrainingExpirationTime\",\n+      ignore = true) // handled by UserService.syncComplianceTraining[V1|V2]\n+  @Mapping(target = \"creationTime\", ignore = true) // handled by ProfileController.createProfile\n+  @Mapping(target = \"dataAccessLevelEnum\", ignore = true) // derived property\n+  @Mapping(target = \"degreesEnum\", ignore = true) // derived property\n+  @Mapping(target = \"emailVerificationStatusEnum\", ignore = true) // derived property", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d1fcdd28850baab62f8fd1e0d0cc9ba76e4652f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5OTg2Mw==", "bodyText": "I'll roll it in with the cleanup ticket", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r391099863", "createdAt": "2020-03-11T16:27:39Z", "author": {"login": "als364"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.pmiops.workbench.profile;\n+\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.institution.InstitutionalAffiliationMapper;\n+import org.pmiops.workbench.model.Authority;\n+import org.pmiops.workbench.model.Degree;\n+import org.pmiops.workbench.model.EmailVerificationStatus;\n+import org.pmiops.workbench.model.Profile;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+\n+@Mapper(\n+    componentModel = \"spring\",\n+    uses = {\n+      AddressMapper.class,\n+      CommonMappers.class,\n+      DemographicSurveyMapper.class,\n+      InstitutionalAffiliationMapper.class,\n+      PageVisitMapper.class\n+    })\n+public interface ProfileMapper {\n+  @Mapping(target = \"contactEmailFailure\", ignore = true) // I don't think we actually use this\n+  @Mapping(target = \"freeTierDollarQuota\", ignore = true) // handled by ProfileService.getProfile\n+  @Mapping(target = \"freeTierUsage\", ignore = true) // handled by ProfileService.getProfile\n+  @Mapping(\n+      target = \"latestTermsOfServiceTime\",\n+      ignore = true) // handled by ProfileService.getProfile\n+  @Mapping(\n+      target = \"latestTermsOfServiceVersion\",\n+      ignore = true) // handled by ProfileService.getProfile\n+  @Mapping(\n+      target = \"verifiedInstitutionalAffiliation\",\n+      ignore = true) // handled by ProfileService.getProfile\n+  Profile dbUserToProfile(DbUser dbUser);\n+\n+  @Mapping(target = \"authoritiesEnum\", ignore = true) // derived property\n+  @Mapping(target = \"billingProjectRetries\", ignore = true) // I don't think we actually use this\n+  @Mapping(\n+      target = \"clusterConfigDefault\",\n+      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n+  @Mapping(\n+      target = \"clusterConfigDefaultRaw\",\n+      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n+  @Mapping(\n+      target = \"clusterCreateRetries\",\n+      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n+  @Mapping(\n+      target = \"complianceTrainingExpirationTime\",\n+      ignore = true) // handled by UserService.syncComplianceTraining[V1|V2]\n+  @Mapping(target = \"creationTime\", ignore = true) // handled by ProfileController.createProfile\n+  @Mapping(target = \"dataAccessLevelEnum\", ignore = true) // derived property\n+  @Mapping(target = \"degreesEnum\", ignore = true) // derived property\n+  @Mapping(target = \"emailVerificationStatusEnum\", ignore = true) // derived property", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY0MDYwNw=="}, "originalCommit": {"oid": "7d1fcdd28850baab62f8fd1e0d0cc9ba76e4652f"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDkwODA0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjoxNjo0MlrOF0i_dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjoxNjo0MlrOF0i_dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY0MzU3NA==", "bodyText": "nit: ProfileController.createAccount? But more accurately for most of this properties it might suffice to just say they are used only internally by the server (i.e. have no manifestation in the client model)", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r390643574", "createdAt": "2020-03-10T22:16:42Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.pmiops.workbench.profile;\n+\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.institution.InstitutionalAffiliationMapper;\n+import org.pmiops.workbench.model.Authority;\n+import org.pmiops.workbench.model.Degree;\n+import org.pmiops.workbench.model.EmailVerificationStatus;\n+import org.pmiops.workbench.model.Profile;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+\n+@Mapper(\n+    componentModel = \"spring\",\n+    uses = {\n+      AddressMapper.class,\n+      CommonMappers.class,\n+      DemographicSurveyMapper.class,\n+      InstitutionalAffiliationMapper.class,\n+      PageVisitMapper.class\n+    })\n+public interface ProfileMapper {\n+  @Mapping(target = \"contactEmailFailure\", ignore = true) // I don't think we actually use this\n+  @Mapping(target = \"freeTierDollarQuota\", ignore = true) // handled by ProfileService.getProfile\n+  @Mapping(target = \"freeTierUsage\", ignore = true) // handled by ProfileService.getProfile\n+  @Mapping(\n+      target = \"latestTermsOfServiceTime\",\n+      ignore = true) // handled by ProfileService.getProfile\n+  @Mapping(\n+      target = \"latestTermsOfServiceVersion\",\n+      ignore = true) // handled by ProfileService.getProfile\n+  @Mapping(\n+      target = \"verifiedInstitutionalAffiliation\",\n+      ignore = true) // handled by ProfileService.getProfile\n+  Profile dbUserToProfile(DbUser dbUser);\n+\n+  @Mapping(target = \"authoritiesEnum\", ignore = true) // derived property\n+  @Mapping(target = \"billingProjectRetries\", ignore = true) // I don't think we actually use this\n+  @Mapping(\n+      target = \"clusterConfigDefault\",\n+      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n+  @Mapping(\n+      target = \"clusterConfigDefaultRaw\",\n+      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n+  @Mapping(\n+      target = \"clusterCreateRetries\",\n+      ignore = true) // used only by ClusterController / LeonardoNotebooksClient\n+  @Mapping(\n+      target = \"complianceTrainingExpirationTime\",\n+      ignore = true) // handled by UserService.syncComplianceTraining[V1|V2]\n+  @Mapping(target = \"creationTime\", ignore = true) // handled by ProfileController.createProfile", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d1fcdd28850baab62f8fd1e0d0cc9ba76e4652f"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDkyMzc3OnYy", "diffSide": "RIGHT", "path": "api/gradle/wrapper/gradle-wrapper.properties", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjoyMjozMlrOF0jIuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjoyNzoxN1rOF0-07w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY0NTk0NQ==", "bodyText": "mutations on this file are back. I'm not sure what side-effects this change might have. I'd probably revert unless there's a reason you're changing it.", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r390645945", "createdAt": "2020-03-10T22:22:32Z", "author": {"login": "calbach"}, "path": "api/gradle/wrapper/gradle-wrapper.properties", "diffHunk": "@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME\n distributionPath=wrapper/dists\n zipStoreBase=GRADLE_USER_HOME\n zipStorePath=wrapper/dists\n-distributionUrl=https\\://services.gradle.org/distributions/gradle-4.6-bin.zip\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-4.6-all.zip", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d1fcdd28850baab62f8fd1e0d0cc9ba76e4652f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5OTYzMQ==", "bodyText": "arghhhh", "url": "https://github.com/all-of-us/workbench/pull/3231#discussion_r391099631", "createdAt": "2020-03-11T16:27:17Z", "author": {"login": "als364"}, "path": "api/gradle/wrapper/gradle-wrapper.properties", "diffHunk": "@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME\n distributionPath=wrapper/dists\n zipStoreBase=GRADLE_USER_HOME\n zipStorePath=wrapper/dists\n-distributionUrl=https\\://services.gradle.org/distributions/gradle-4.6-bin.zip\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-4.6-all.zip", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY0NTk0NQ=="}, "originalCommit": {"oid": "7d1fcdd28850baab62f8fd1e0d0cc9ba76e4652f"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3210, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}