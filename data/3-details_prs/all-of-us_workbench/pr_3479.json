{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NzQwNzY2", "number": 3479, "title": "[RW-4645][risk=no] CircleCI config upgrade to version 2.1", "bodyText": "Upgrade CircleCI yaml to version 2.1, leveraging new v2.1 features like commands, parameters, when. Re-organized common actions into commands for reuse by jobs.\nHigh-level structures:\n\nNotes:\n\nKept all  jobs names unchanged to avoid adding new confusion. and number of jobs are not changed.\nUse pipeline parameters for set/access common configs.\ncommand git_checkout combines - checkout and - git submodules update.\nnew cache command s. ui_dependencies, e2e_dependencies and api_cache with parameters.\nNew anchor filter_pr, for running workflow jobs on non-master and non-release (tags) branches. In other words, run workflow's jobs for PR branches after pushed to origin.\n\nI am not able test out changes in deploy-staging, deploy-perf, api-deploy-to-test and ui-deploy-to-test because these jobs are filtered by filter_master.", "createdAt": "2020-04-24T20:04:17Z", "url": "https://github.com/all-of-us/workbench/pull/3479", "merged": true, "mergeCommit": {"oid": "f82adb2f045aa6a793c4f02e61cc6e08662b0506"}, "closed": true, "closedAt": "2020-04-27T23:41:29Z", "author": {"login": "aweng98"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABca4nR3AFqTQwMDI0Nzc2MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcb3-WRgFqTQwMTM3NDkwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMjQ3NzYw", "url": "https://github.com/all-of-us/workbench/pull/3479#pullrequestreview-400247760", "createdAt": "2020-04-24T20:25:00Z", "commit": {"oid": "3d2fbc40d035a43cb5995f7624603e2870798673"}, "state": "APPROVED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDoyNTowMFrOGLn8BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMTo0NDo0NVrOGLqVdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg0MTg2MQ==", "bodyText": "Version bump!", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r414841861", "createdAt": "2020-04-24T20:25:00Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -1,19 +1,24 @@\n-version: 2\n+version: 2.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d2fbc40d035a43cb5995f7624603e2870798673"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg0MzI0NA==", "bodyText": "Cool. Can we parameterize this to check other directories like UI?", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r414843244", "createdAt": "2020-04-24T20:27:26Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,76 +27,194 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n-    steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - run:\n-          name: Validate swagger definitions\n-          working_directory: ~/workbench/api\n-          command: ./project.rb validate-swagger --project-prop verboseTestLogging=yes\n-      - run:\n-          name: Integration tests compile\n-          working_directory: ~/workbench/api\n-          command: ./project.rb gradle compile__bigquerytest__Java compile__integration__Java\n-      - run:\n-          name: Run Java Unit Tests\n-          working_directory: ~/workbench/api\n-          command: ./project.rb test\n-      - run:\n-          # Lint last; it's more important to surface test failures early.\n-          name: Java linting\n-          working_directory: ~/workbench/api\n-          command: ./gradlew spotlessCheck\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-            - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n-          key: api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n \n-  api-local-test:\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  filter_master: &filter_master\n+    filters:\n+      branches:\n+        only: master\n+\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /^v.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   EXECUTORS\n+# -------------------------\n+executors:\n+  # Puppeteer tests run in Chrome\n+  browser_docker:\n+    <<: *default_environment\n+    docker:\n+      - image: allofustest/workbench:buildimage-0.0.16\n+      - image: circleci/node:13.10.1-browsers\n+        environment:\n+          NODE_ENV: development\n+          CI: true\n+\n+  # workbench default docker image\n+  workbench_docker:\n+    <<: *default_environment\n     docker:\n       - image: allofustest/workbench:buildimage-0.0.16\n-      - image: mysql:5.7\n+\n+  mysql_docker:\n+    <<: *default_environment\n+    docker:\n+      - image: allofustest/workbench:buildimage-0.0.16\n+      - image: mysql:5.7 # Is this same as circleci/mysql:5.7 ? This image is not cached on CircleCI\n         environment:\n           - MYSQL_ROOT_PASSWORD=ubuntu\n           - MYSQL_USER=ubuntu\n           - MYSQL_PASSWORD=ubuntu\n-    working_directory: ~/workbench\n     environment:\n-      # Drop to ~1.5G; the local API server starts two Java processes (the API\n-      # server and the cron emulator). The default machine has 4GB, so we want\n-      # the Java memory limit to be below half of that: other things on the\n-      # machine need memory as well. Using 2G here manifested in 137 errors.\n-      # If this limit proves to be too low, an alternative would be to use a\n-      # larger resource class:\n-      #   https://circleci.com/docs/2.0/configuration-reference/#resource_class\n-      JAVA_TOOL_OPTIONS: -Xmx1536m\n-      TERM: dumb\n       MYSQL_ROOT_PASSWORD: ubuntu\n+\n+# -------------------------\n+#   COMMANDS\n+# https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_accont_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI Service Account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n+      - run:\n+          name: Update Git Submodules\n+          command: git submodule update --init --recursive\n+\n+  ensure_branch_has_api_changes:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d2fbc40d035a43cb5995f7624603e2870798673"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NDc5Mw==", "bodyText": "BTW  I looked for a way to mark the tests as skipped or cancelled instead of passed in this situation. Filed an enhancement request with circle.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r414874793", "createdAt": "2020-04-24T21:30:57Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,76 +27,201 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n-    steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - run:\n-          name: Validate swagger definitions\n-          working_directory: ~/workbench/api\n-          command: ./project.rb validate-swagger --project-prop verboseTestLogging=yes\n-      - run:\n-          name: Integration tests compile\n-          working_directory: ~/workbench/api\n-          command: ./project.rb gradle compile__bigquerytest__Java compile__integration__Java\n-      - run:\n-          name: Run Java Unit Tests\n-          working_directory: ~/workbench/api\n-          command: ./project.rb test\n-      - run:\n-          # Lint last; it's more important to surface test failures early.\n-          name: Java linting\n-          working_directory: ~/workbench/api\n-          command: ./gradlew spotlessCheck\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-            - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n-          key: api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n \n-  api-local-test:\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  filter_master: &filter_master\n+    filters:\n+      branches:\n+        only: master\n+\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /^v.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   EXECUTORS\n+# -------------------------\n+executors:\n+  # Puppeteer tests run in Chrome\n+  browser_docker:\n+    <<: *default_environment\n+    docker:\n+      - image: allofustest/workbench:buildimage-0.0.16\n+      - image: circleci/node:13.10.1-browsers\n+        environment:\n+          NODE_ENV: development\n+          CI: true\n+\n+  # workbench default docker image\n+  workbench_docker:\n+    <<: *default_environment\n     docker:\n       - image: allofustest/workbench:buildimage-0.0.16\n-      - image: mysql:5.7\n+\n+  mysql_docker:\n+    <<: *default_environment\n+    docker:\n+      - image: allofustest/workbench:buildimage-0.0.16\n+      - image: mysql:5.7 # Is this same as circleci/mysql:5.7 ? This image is not cached on CircleCI\n         environment:\n           - MYSQL_ROOT_PASSWORD=ubuntu\n           - MYSQL_USER=ubuntu\n           - MYSQL_PASSWORD=ubuntu\n-    working_directory: ~/workbench\n     environment:\n-      # Drop to ~1.5G; the local API server starts two Java processes (the API\n-      # server and the cron emulator). The default machine has 4GB, so we want\n-      # the Java memory limit to be below half of that: other things on the\n-      # machine need memory as well. Using 2G here manifested in 137 errors.\n-      # If this limit proves to be too low, an alternative would be to use a\n-      # larger resource class:\n-      #   https://circleci.com/docs/2.0/configuration-reference/#resource_class\n-      JAVA_TOOL_OPTIONS: -Xmx1536m\n-      TERM: dumb\n       MYSQL_ROOT_PASSWORD: ubuntu\n+\n+# -------------------------\n+#   COMMANDS\n+# https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_accont_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI Service Account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n+      - run:\n+          name: Update Git Submodules\n+          command: git submodule update --init --recursive\n+\n+  ensure_branch_has_api_changes:\n+    description: \"Ensure branch has changes to API Code\"\n+    steps:\n+      - run:\n+          name: Ensure Branch has Changes to API Code\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] && [ ${CIRCLE_BRANCH} != \"master\" ] && [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep api/ | wc -l | xargs) == 0 ]; then\n+              echo No relevant changes on api directory in non-master branch. Skipping\n+              circleci step halt", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2aa2ecc80908d82e5e2ace89a6430c679eb51d6"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NjA3Nw==", "bodyText": "Interesting. I see how this would be faster, but I thought jobs weren't supposed to be order-dependent (though the steps in them are).", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r414876077", "createdAt": "2020-04-24T21:33:48Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -101,146 +231,154 @@ jobs:\n           name: Run Local Migrations\n           working_directory: ~/workbench/api\n           command: ./project.rb run-local-migrations\n+      - save_api_cache\n       - run:\n-          name: Local API Tests on Running Server\n+          name: Start local API server\n           working_directory: ~/workbench/api\n-          command: ./project.rb start-local-api && ./project.rb run-local-api-tests && ./project.rb stop-local-api\n+          command: ./project.rb start-local-api\n+\n+  save_api_cache:\n+    description: \"workbench/api dir: save gradle cache\"\n+    steps:\n       - save_cache:\n           paths:\n-            - ~/.gradle\n+            - ~/.gradle/caches\n+            - ~/.gradle/wrapper\n             - ~/.m2\n             - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n-          key: api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+          key: v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n \n-  api-deploy-to-test:\n-    <<: *java_defaults\n+  restore_api_cache:\n+    description: \"workbench/api dir: restore gradle cache\"\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      # Note: most of the time spent here appears to be in Gradle / App Engine\n-      # deployment. We tried more aggressively caching outputs via Circle\n-      # workspaces, but that seemed to have a negligible effect on speed. It's\n-      # also tricky to pick specific sub directories since the API deploy\n-      # touches several top level folders {common,}api.\n       - restore_cache:\n           keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - run: *activate_service_accont_creds\n-      - deploy:\n-          name: Deploy to App Engine\n+            - v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+            - v1-api-cache-\n+\n+# -------------------------\n+#        JOBS\n+# -------------------------\n+jobs:\n+  api-build-test:\n+    executor: workbench_docker\n+    steps:\n+      - git_checkout\n+      - ensure_branch_has_api_changes\n+      - restore_api_cache\n+      - run:\n+          name: Validate swagger definitions\n           working_directory: ~/workbench/api\n-          command: |\n-            ./project.rb deploy \\\n-              --project all-of-us-workbench-test \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n-              --version circle-ci-test \\\n-              --key-file circle-sa-key.json \\\n-              --promote\n+          command: ./project.rb validate-swagger --project-prop verboseTestLogging=yes\n+      - run:\n+          name: Integration tests compile\n+          working_directory: ~/workbench/api\n+          command: ./project.rb gradle compile__bigquerytest__Java compile__integration__Java\n+      - run:\n+          name: Run Java unit tests\n+          working_directory: ~/workbench/api\n+          command: ./project.rb test\n+      - run:\n+          # Lint last; it's more important to surface test failures early.\n+          name: Java linting\n+          working_directory: ~/workbench/api\n+          command: ./gradlew spotlessCheck\n+      - save_api_cache\n+\n+  api-local-test:\n+    executor: mysql_docker\n+    steps:\n+      - start_api_local:\n+          skip_no_api_change: false\n+      - run:\n+          name: Run API tests on running local server\n+          working_directory: ~/workbench/api\n+          command: ./project.rb run-local-api-tests\n+      - persist_to_workspace:\n+          root: .\n+          paths:\n+            - api\n+\n+  api-deploy-to-test:\n+    executor: workbench_docker\n+    steps:\n+      # - git_checkout\n+      # Use \"api-local-test\" job's workspace", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2aa2ecc80908d82e5e2ace89a6430c679eb51d6"}, "originalPosition": 396}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NjYzNA==", "bodyText": "Can we make the deploy_ jobs parameterized by the destination environment (maybe later)?", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r414876634", "createdAt": "2020-04-24T21:35:08Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -264,136 +402,98 @@ jobs:\n           root: .\n           paths:\n             - ui\n-\n-  # Run suite of Puppeteer end-to-end QA tests, pointed at the Workbench \"test\" environment.\n-  puppeteer-e2e-test:\n-    <<: *defaults\n-    docker:\n-      - image: circleci/node:13.10.1-browsers\n-        environment:\n-          NODE_ENV: development\n-    working_directory: ~/workbench\n-    parallelism: 3\n-    steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - v2-e2e-test-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n-          - v2-e2e-test-cache-\n-      - run:\n-          name: Initialize Yarn\n-          working_directory: ~/workbench/e2e\n-          command: yarn cache clean && yarn install --frozen-lockfile\n-      - save_cache:\n-          paths:\n-            - ~/.cache/yarn\n-          key: v2-e2e-test-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n-      - run:\n-          name: Update Puppeteer Environment Variables\n-          command: |\n-            echo 'export USER_NAME=$PUPPETEER_TEST_USER' >> $BASH_ENV\n-            echo 'export PASSWORD=$PUPPETEER_TEST_USER_PASSWORD' >> $BASH_ENV\n-            echo 'export INVITATION_KEY=$PUPPETEER_TEST_REGISTRATION_KEY' >> $BASH_ENV\n-            source $BASH_ENV\n-      - run:\n-          name: Run e2e tests (Puppeteer and Jest)\n-          working_directory: ~/workbench/e2e\n-          command: yarn test:ci $(circleci tests glob \"tests/**/*.spec.ts\" | circleci tests split --split-by=timings --timings-type=classname --show-counts)\n-      - store_artifacts:\n-          path: e2e/logs\n-          destination: logs\n-      - store_test_results:\n-          path: ~/workbench/e2e/logs\n       \n   ui-deploy-to-test:\n-    <<: *defaults\n+    executor: workbench_docker\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      # Use the ui-build-test workspace here to avoid redoing the setup.\n+      # - git_checkout\n+      # Use \"ui-build-test\" job's workspace here to avoid redoing the setup.\n       - attach_workspace:\n           at: .\n-      - restore_cache:\n-          keys:\n-          - ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n-          - ui-cache-\n-      - deploy:\n-          name: Deploy UI App to App Engine\n-          working_directory: ~/workbench/ui\n-          command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n-            ./project.rb deploy-ui \\\n-              --project all-of-us-workbench-test \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n-              --version circle-ci-test \\\n-              --key-file circle-sa-key.json \\\n-              --promote\n+      - ui_dependencies\n+      - activate_service_accont_creds\n+      - deploy_appengine:\n+          project_name: \"all-of-us-workbench-test\"\n+          deploy_arg: \"deploy-ui\"\n+          working_dir: ~/workbench/ui\n+\n \n   # In staging and perf, we deploy all at once in order to track and control\n   # the release for a tagged version only. In \"test\", we maintain individual\n   # release jobs for API and UI to allow faster deploys and because we lack\n   # a version tag.\n   deploy-staging:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2aa2ecc80908d82e5e2ace89a6430c679eb51d6"}, "originalPosition": 620}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NzEzNg==", "bodyText": "I really get nervous seeing hard-coded sleeps. Can we not teach Circle to wait for some event or trigger to proceed?", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r414877136", "createdAt": "2020-04-24T21:36:08Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -264,136 +402,98 @@ jobs:\n           root: .\n           paths:\n             - ui\n-\n-  # Run suite of Puppeteer end-to-end QA tests, pointed at the Workbench \"test\" environment.\n-  puppeteer-e2e-test:\n-    <<: *defaults\n-    docker:\n-      - image: circleci/node:13.10.1-browsers\n-        environment:\n-          NODE_ENV: development\n-    working_directory: ~/workbench\n-    parallelism: 3\n-    steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - v2-e2e-test-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n-          - v2-e2e-test-cache-\n-      - run:\n-          name: Initialize Yarn\n-          working_directory: ~/workbench/e2e\n-          command: yarn cache clean && yarn install --frozen-lockfile\n-      - save_cache:\n-          paths:\n-            - ~/.cache/yarn\n-          key: v2-e2e-test-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n-      - run:\n-          name: Update Puppeteer Environment Variables\n-          command: |\n-            echo 'export USER_NAME=$PUPPETEER_TEST_USER' >> $BASH_ENV\n-            echo 'export PASSWORD=$PUPPETEER_TEST_USER_PASSWORD' >> $BASH_ENV\n-            echo 'export INVITATION_KEY=$PUPPETEER_TEST_REGISTRATION_KEY' >> $BASH_ENV\n-            source $BASH_ENV\n-      - run:\n-          name: Run e2e tests (Puppeteer and Jest)\n-          working_directory: ~/workbench/e2e\n-          command: yarn test:ci $(circleci tests glob \"tests/**/*.spec.ts\" | circleci tests split --split-by=timings --timings-type=classname --show-counts)\n-      - store_artifacts:\n-          path: e2e/logs\n-          destination: logs\n-      - store_test_results:\n-          path: ~/workbench/e2e/logs\n       \n   ui-deploy-to-test:\n-    <<: *defaults\n+    executor: workbench_docker\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      # Use the ui-build-test workspace here to avoid redoing the setup.\n+      # - git_checkout\n+      # Use \"ui-build-test\" job's workspace here to avoid redoing the setup.\n       - attach_workspace:\n           at: .\n-      - restore_cache:\n-          keys:\n-          - ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n-          - ui-cache-\n-      - deploy:\n-          name: Deploy UI App to App Engine\n-          working_directory: ~/workbench/ui\n-          command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n-            ./project.rb deploy-ui \\\n-              --project all-of-us-workbench-test \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n-              --version circle-ci-test \\\n-              --key-file circle-sa-key.json \\\n-              --promote\n+      - ui_dependencies\n+      - activate_service_accont_creds\n+      - deploy_appengine:\n+          project_name: \"all-of-us-workbench-test\"\n+          deploy_arg: \"deploy-ui\"\n+          working_dir: ~/workbench/ui\n+\n \n   # In staging and perf, we deploy all at once in order to track and control\n   # the release for a tagged version only. In \"test\", we maintain individual\n   # release jobs for API and UI to allow faster deploys and because we lack\n   # a version tag.\n   deploy-staging:\n-    <<: *defaults\n+    executor: workbench_docker\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - deploy:\n-          working_directory: ~/workbench/deploy\n-          command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n-            ./project.rb deploy \\\n-              --project all-of-us-rw-staging \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n-              --git-version \"${CIRCLE_TAG}\" \\\n-              --app-version \"${CIRCLE_TAG}\" \\\n-              --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n-              --key-file circle-sa-key.json \\\n-              --promote\n+      - git_checkout\n+      - restore_api_cache\n+      - activate_service_accont_creds\n+      - deploy_appengine:\n+          project_name: \"all-of-us-rw-staging\"\n+          deploy_arg: \"deploy\"\n+          working_dir: ~/workbench/deploy\n \n   deploy-perf:\n-    <<: *defaults\n+    executor: workbench_docker\n     steps:\n-      - checkout\n+      - git_checkout\n+      - ensure_branch_has_api_changes\n+      - restore_api_cache\n+      - activate_service_accont_creds\n+      - deploy_appengine:\n+          project_name: \"all-of-us-rw-perf\"\n+          deploy_arg: \"deploy\"\n+          working_dir: ~/workbench/deploy\n+\n+  # deploy UI and API local server\n+  deploy-local:\n+    executor: workbench_docker\n+    steps:\n+      - start_api_local:\n+          skip_no_api_change: false\n+      - attach_workspace:\n+          at: .\n+      # - git_checkout\n+      - ui_dependencies\n+      - restore_api_cache\n       - run:\n-          command: git submodule update --init --recursive\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - deploy:\n-          name: Deploy to Perf Environment\n-          working_directory: ~/workbench/deploy\n+          name: Launch local UI server\n+          working_directory: ~/workbench/ui\n+          # Start local UI server and running in the background\n+          command: yarn dev-up --configuration=local\n+          background: true\n+      - run:\n+          name: Wait for localhost UI to be started\n           command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n-            ./project.rb deploy \\\n-              --project all-of-us-rw-perf \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n-              --git-version \"${CIRCLE_TAG}\" \\\n-              --app-version \"${CIRCLE_TAG}\" \\\n-              --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n-              --key-file circle-sa-key.json \\\n-              --promote\n+            sleep 2m", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2aa2ecc80908d82e5e2ace89a6430c679eb51d6"}, "originalPosition": 701}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NzM3MA==", "bodyText": "Can we define the URLs and ports as constants?", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r414877370", "createdAt": "2020-04-24T21:36:37Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -264,136 +402,98 @@ jobs:\n           root: .\n           paths:\n             - ui\n-\n-  # Run suite of Puppeteer end-to-end QA tests, pointed at the Workbench \"test\" environment.\n-  puppeteer-e2e-test:\n-    <<: *defaults\n-    docker:\n-      - image: circleci/node:13.10.1-browsers\n-        environment:\n-          NODE_ENV: development\n-    working_directory: ~/workbench\n-    parallelism: 3\n-    steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - v2-e2e-test-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n-          - v2-e2e-test-cache-\n-      - run:\n-          name: Initialize Yarn\n-          working_directory: ~/workbench/e2e\n-          command: yarn cache clean && yarn install --frozen-lockfile\n-      - save_cache:\n-          paths:\n-            - ~/.cache/yarn\n-          key: v2-e2e-test-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n-      - run:\n-          name: Update Puppeteer Environment Variables\n-          command: |\n-            echo 'export USER_NAME=$PUPPETEER_TEST_USER' >> $BASH_ENV\n-            echo 'export PASSWORD=$PUPPETEER_TEST_USER_PASSWORD' >> $BASH_ENV\n-            echo 'export INVITATION_KEY=$PUPPETEER_TEST_REGISTRATION_KEY' >> $BASH_ENV\n-            source $BASH_ENV\n-      - run:\n-          name: Run e2e tests (Puppeteer and Jest)\n-          working_directory: ~/workbench/e2e\n-          command: yarn test:ci $(circleci tests glob \"tests/**/*.spec.ts\" | circleci tests split --split-by=timings --timings-type=classname --show-counts)\n-      - store_artifacts:\n-          path: e2e/logs\n-          destination: logs\n-      - store_test_results:\n-          path: ~/workbench/e2e/logs\n       \n   ui-deploy-to-test:\n-    <<: *defaults\n+    executor: workbench_docker\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      # Use the ui-build-test workspace here to avoid redoing the setup.\n+      # - git_checkout\n+      # Use \"ui-build-test\" job's workspace here to avoid redoing the setup.\n       - attach_workspace:\n           at: .\n-      - restore_cache:\n-          keys:\n-          - ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n-          - ui-cache-\n-      - deploy:\n-          name: Deploy UI App to App Engine\n-          working_directory: ~/workbench/ui\n-          command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n-            ./project.rb deploy-ui \\\n-              --project all-of-us-workbench-test \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n-              --version circle-ci-test \\\n-              --key-file circle-sa-key.json \\\n-              --promote\n+      - ui_dependencies\n+      - activate_service_accont_creds\n+      - deploy_appengine:\n+          project_name: \"all-of-us-workbench-test\"\n+          deploy_arg: \"deploy-ui\"\n+          working_dir: ~/workbench/ui\n+\n \n   # In staging and perf, we deploy all at once in order to track and control\n   # the release for a tagged version only. In \"test\", we maintain individual\n   # release jobs for API and UI to allow faster deploys and because we lack\n   # a version tag.\n   deploy-staging:\n-    <<: *defaults\n+    executor: workbench_docker\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - deploy:\n-          working_directory: ~/workbench/deploy\n-          command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n-            ./project.rb deploy \\\n-              --project all-of-us-rw-staging \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n-              --git-version \"${CIRCLE_TAG}\" \\\n-              --app-version \"${CIRCLE_TAG}\" \\\n-              --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n-              --key-file circle-sa-key.json \\\n-              --promote\n+      - git_checkout\n+      - restore_api_cache\n+      - activate_service_accont_creds\n+      - deploy_appengine:\n+          project_name: \"all-of-us-rw-staging\"\n+          deploy_arg: \"deploy\"\n+          working_dir: ~/workbench/deploy\n \n   deploy-perf:\n-    <<: *defaults\n+    executor: workbench_docker\n     steps:\n-      - checkout\n+      - git_checkout\n+      - ensure_branch_has_api_changes\n+      - restore_api_cache\n+      - activate_service_accont_creds\n+      - deploy_appengine:\n+          project_name: \"all-of-us-rw-perf\"\n+          deploy_arg: \"deploy\"\n+          working_dir: ~/workbench/deploy\n+\n+  # deploy UI and API local server\n+  deploy-local:\n+    executor: workbench_docker\n+    steps:\n+      - start_api_local:\n+          skip_no_api_change: false\n+      - attach_workspace:\n+          at: .\n+      # - git_checkout\n+      - ui_dependencies\n+      - restore_api_cache\n       - run:\n-          command: git submodule update --init --recursive\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - deploy:\n-          name: Deploy to Perf Environment\n-          working_directory: ~/workbench/deploy\n+          name: Launch local UI server\n+          working_directory: ~/workbench/ui\n+          # Start local UI server and running in the background\n+          command: yarn dev-up --configuration=local\n+          background: true\n+      - run:\n+          name: Wait for localhost UI to be started\n           command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n-            ./project.rb deploy \\\n-              --project all-of-us-rw-perf \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n-              --git-version \"${CIRCLE_TAG}\" \\\n-              --app-version \"${CIRCLE_TAG}\" \\\n-              --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n-              --key-file circle-sa-key.json \\\n-              --promote\n+            sleep 2m\n+            dockerize -wait tcp://127.0.0.1:4200 -timeout 3m", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2aa2ecc80908d82e5e2ace89a6430c679eb51d6"}, "originalPosition": 702}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3Nzk0NA==", "bodyText": "The name should be e2e-test-test I think. Or make e2e-test-local just be e2e-local. It's unfortunate our qa environment is called test.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r414877944", "createdAt": "2020-04-24T21:37:51Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -264,136 +402,98 @@ jobs:\n           root: .\n           paths:\n             - ui\n-\n-  # Run suite of Puppeteer end-to-end QA tests, pointed at the Workbench \"test\" environment.\n-  puppeteer-e2e-test:\n-    <<: *defaults\n-    docker:\n-      - image: circleci/node:13.10.1-browsers\n-        environment:\n-          NODE_ENV: development\n-    working_directory: ~/workbench\n-    parallelism: 3\n-    steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - v2-e2e-test-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n-          - v2-e2e-test-cache-\n-      - run:\n-          name: Initialize Yarn\n-          working_directory: ~/workbench/e2e\n-          command: yarn cache clean && yarn install --frozen-lockfile\n-      - save_cache:\n-          paths:\n-            - ~/.cache/yarn\n-          key: v2-e2e-test-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n-      - run:\n-          name: Update Puppeteer Environment Variables\n-          command: |\n-            echo 'export USER_NAME=$PUPPETEER_TEST_USER' >> $BASH_ENV\n-            echo 'export PASSWORD=$PUPPETEER_TEST_USER_PASSWORD' >> $BASH_ENV\n-            echo 'export INVITATION_KEY=$PUPPETEER_TEST_REGISTRATION_KEY' >> $BASH_ENV\n-            source $BASH_ENV\n-      - run:\n-          name: Run e2e tests (Puppeteer and Jest)\n-          working_directory: ~/workbench/e2e\n-          command: yarn test:ci $(circleci tests glob \"tests/**/*.spec.ts\" | circleci tests split --split-by=timings --timings-type=classname --show-counts)\n-      - store_artifacts:\n-          path: e2e/logs\n-          destination: logs\n-      - store_test_results:\n-          path: ~/workbench/e2e/logs\n       \n   ui-deploy-to-test:\n-    <<: *defaults\n+    executor: workbench_docker\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      # Use the ui-build-test workspace here to avoid redoing the setup.\n+      # - git_checkout\n+      # Use \"ui-build-test\" job's workspace here to avoid redoing the setup.\n       - attach_workspace:\n           at: .\n-      - restore_cache:\n-          keys:\n-          - ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n-          - ui-cache-\n-      - deploy:\n-          name: Deploy UI App to App Engine\n-          working_directory: ~/workbench/ui\n-          command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n-            ./project.rb deploy-ui \\\n-              --project all-of-us-workbench-test \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n-              --version circle-ci-test \\\n-              --key-file circle-sa-key.json \\\n-              --promote\n+      - ui_dependencies\n+      - activate_service_accont_creds\n+      - deploy_appengine:\n+          project_name: \"all-of-us-workbench-test\"\n+          deploy_arg: \"deploy-ui\"\n+          working_dir: ~/workbench/ui\n+\n \n   # In staging and perf, we deploy all at once in order to track and control\n   # the release for a tagged version only. In \"test\", we maintain individual\n   # release jobs for API and UI to allow faster deploys and because we lack\n   # a version tag.\n   deploy-staging:\n-    <<: *defaults\n+    executor: workbench_docker\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - deploy:\n-          working_directory: ~/workbench/deploy\n-          command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n-            ./project.rb deploy \\\n-              --project all-of-us-rw-staging \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n-              --git-version \"${CIRCLE_TAG}\" \\\n-              --app-version \"${CIRCLE_TAG}\" \\\n-              --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n-              --key-file circle-sa-key.json \\\n-              --promote\n+      - git_checkout\n+      - restore_api_cache\n+      - activate_service_accont_creds\n+      - deploy_appengine:\n+          project_name: \"all-of-us-rw-staging\"\n+          deploy_arg: \"deploy\"\n+          working_dir: ~/workbench/deploy\n \n   deploy-perf:\n-    <<: *defaults\n+    executor: workbench_docker\n     steps:\n-      - checkout\n+      - git_checkout\n+      - ensure_branch_has_api_changes\n+      - restore_api_cache\n+      - activate_service_accont_creds\n+      - deploy_appengine:\n+          project_name: \"all-of-us-rw-perf\"\n+          deploy_arg: \"deploy\"\n+          working_dir: ~/workbench/deploy\n+\n+  # deploy UI and API local server\n+  deploy-local:\n+    executor: workbench_docker\n+    steps:\n+      - start_api_local:\n+          skip_no_api_change: false\n+      - attach_workspace:\n+          at: .\n+      # - git_checkout\n+      - ui_dependencies\n+      - restore_api_cache\n       - run:\n-          command: git submodule update --init --recursive\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - deploy:\n-          name: Deploy to Perf Environment\n-          working_directory: ~/workbench/deploy\n+          name: Launch local UI server\n+          working_directory: ~/workbench/ui\n+          # Start local UI server and running in the background\n+          command: yarn dev-up --configuration=local\n+          background: true\n+      - run:\n+          name: Wait for localhost UI to be started\n           command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n-            ./project.rb deploy \\\n-              --project all-of-us-rw-perf \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n-              --git-version \"${CIRCLE_TAG}\" \\\n-              --app-version \"${CIRCLE_TAG}\" \\\n-              --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n-              --key-file circle-sa-key.json \\\n-              --promote\n+            sleep 2m\n+            dockerize -wait tcp://127.0.0.1:4200 -timeout 3m\n+\n+\n+  # Run Puppeteer end-to-end UI tests on local API & UI server.\n+  e2e-test-local:\n+    executor: browser_docker\n+    environment:\n+      WORKBENCH_ENV: local\n+    parallelism: 2\n+    steps:\n+      - attach_workspace:\n+          at: .\n+      - e2e_tests\n+\n+  # Run Puppeteer end-to-end UI tests on Workbench \"test\" environment.\n+  e2e-test:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2aa2ecc80908d82e5e2ace89a6430c679eb51d6"}, "originalPosition": 717}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3OTA2MQ==", "bodyText": "I'd file a follow-on story to see if we can make this less absolute. Either we're going to wait longer than we need to, or timeout.\nI bet there's either a user-submitted orb or a builtin feature for this situation.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r414879061", "createdAt": "2020-04-24T21:40:26Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -264,136 +402,98 @@ jobs:\n           root: .\n           paths:\n             - ui\n-\n-  # Run suite of Puppeteer end-to-end QA tests, pointed at the Workbench \"test\" environment.\n-  puppeteer-e2e-test:\n-    <<: *defaults\n-    docker:\n-      - image: circleci/node:13.10.1-browsers\n-        environment:\n-          NODE_ENV: development\n-    working_directory: ~/workbench\n-    parallelism: 3\n-    steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - v2-e2e-test-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n-          - v2-e2e-test-cache-\n-      - run:\n-          name: Initialize Yarn\n-          working_directory: ~/workbench/e2e\n-          command: yarn cache clean && yarn install --frozen-lockfile\n-      - save_cache:\n-          paths:\n-            - ~/.cache/yarn\n-          key: v2-e2e-test-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n-      - run:\n-          name: Update Puppeteer Environment Variables\n-          command: |\n-            echo 'export USER_NAME=$PUPPETEER_TEST_USER' >> $BASH_ENV\n-            echo 'export PASSWORD=$PUPPETEER_TEST_USER_PASSWORD' >> $BASH_ENV\n-            echo 'export INVITATION_KEY=$PUPPETEER_TEST_REGISTRATION_KEY' >> $BASH_ENV\n-            source $BASH_ENV\n-      - run:\n-          name: Run e2e tests (Puppeteer and Jest)\n-          working_directory: ~/workbench/e2e\n-          command: yarn test:ci $(circleci tests glob \"tests/**/*.spec.ts\" | circleci tests split --split-by=timings --timings-type=classname --show-counts)\n-      - store_artifacts:\n-          path: e2e/logs\n-          destination: logs\n-      - store_test_results:\n-          path: ~/workbench/e2e/logs\n       \n   ui-deploy-to-test:\n-    <<: *defaults\n+    executor: workbench_docker\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      # Use the ui-build-test workspace here to avoid redoing the setup.\n+      # - git_checkout\n+      # Use \"ui-build-test\" job's workspace here to avoid redoing the setup.\n       - attach_workspace:\n           at: .\n-      - restore_cache:\n-          keys:\n-          - ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n-          - ui-cache-\n-      - deploy:\n-          name: Deploy UI App to App Engine\n-          working_directory: ~/workbench/ui\n-          command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n-            ./project.rb deploy-ui \\\n-              --project all-of-us-workbench-test \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n-              --version circle-ci-test \\\n-              --key-file circle-sa-key.json \\\n-              --promote\n+      - ui_dependencies\n+      - activate_service_accont_creds\n+      - deploy_appengine:\n+          project_name: \"all-of-us-workbench-test\"\n+          deploy_arg: \"deploy-ui\"\n+          working_dir: ~/workbench/ui\n+\n \n   # In staging and perf, we deploy all at once in order to track and control\n   # the release for a tagged version only. In \"test\", we maintain individual\n   # release jobs for API and UI to allow faster deploys and because we lack\n   # a version tag.\n   deploy-staging:\n-    <<: *defaults\n+    executor: workbench_docker\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - deploy:\n-          working_directory: ~/workbench/deploy\n-          command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n-            ./project.rb deploy \\\n-              --project all-of-us-rw-staging \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n-              --git-version \"${CIRCLE_TAG}\" \\\n-              --app-version \"${CIRCLE_TAG}\" \\\n-              --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n-              --key-file circle-sa-key.json \\\n-              --promote\n+      - git_checkout\n+      - restore_api_cache\n+      - activate_service_accont_creds\n+      - deploy_appengine:\n+          project_name: \"all-of-us-rw-staging\"\n+          deploy_arg: \"deploy\"\n+          working_dir: ~/workbench/deploy\n \n   deploy-perf:\n-    <<: *defaults\n+    executor: workbench_docker\n     steps:\n-      - checkout\n+      - git_checkout\n+      - ensure_branch_has_api_changes\n+      - restore_api_cache\n+      - activate_service_accont_creds\n+      - deploy_appengine:\n+          project_name: \"all-of-us-rw-perf\"\n+          deploy_arg: \"deploy\"\n+          working_dir: ~/workbench/deploy\n+\n+  # deploy UI and API local server\n+  deploy-local:\n+    executor: workbench_docker\n+    steps:\n+      - start_api_local:\n+          skip_no_api_change: false\n+      - attach_workspace:\n+          at: .\n+      # - git_checkout\n+      - ui_dependencies\n+      - restore_api_cache\n       - run:\n-          command: git submodule update --init --recursive\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - deploy:\n-          name: Deploy to Perf Environment\n-          working_directory: ~/workbench/deploy\n+          name: Launch local UI server\n+          working_directory: ~/workbench/ui\n+          # Start local UI server and running in the background\n+          command: yarn dev-up --configuration=local\n+          background: true\n+      - run:\n+          name: Wait for localhost UI to be started\n           command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n-            ./project.rb deploy \\\n-              --project all-of-us-rw-perf \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n-              --git-version \"${CIRCLE_TAG}\" \\\n-              --app-version \"${CIRCLE_TAG}\" \\\n-              --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n-              --key-file circle-sa-key.json \\\n-              --promote\n+            sleep 2m\n+            dockerize -wait tcp://127.0.0.1:4200 -timeout 3m\n+\n+\n+  # Run Puppeteer end-to-end UI tests on local API & UI server.\n+  e2e-test-local:\n+    executor: browser_docker\n+    environment:\n+      WORKBENCH_ENV: local\n+    parallelism: 2\n+    steps:\n+      - attach_workspace:\n+          at: .\n+      - e2e_tests\n+\n+  # Run Puppeteer end-to-end UI tests on Workbench \"test\" environment.\n+  e2e-test:\n+    executor: browser_docker\n+    environment:\n+      WORKBENCH_ENV: dev\n+    parallelism: 3\n+    steps:\n+      - run:\n+          name: Sleep 1 minute before starting e2e tests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2aa2ecc80908d82e5e2ace89a6430c679eb51d6"}, "originalPosition": 724}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3OTcxMQ==", "bodyText": "Is there a way to give a workflow a human-readable name and description (in addition to the key build-test-deploy? Jobs and steps have them.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r414879711", "createdAt": "2020-04-24T21:41:38Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -264,136 +402,98 @@ jobs:\n           root: .\n           paths:\n             - ui\n-\n-  # Run suite of Puppeteer end-to-end QA tests, pointed at the Workbench \"test\" environment.\n-  puppeteer-e2e-test:\n-    <<: *defaults\n-    docker:\n-      - image: circleci/node:13.10.1-browsers\n-        environment:\n-          NODE_ENV: development\n-    working_directory: ~/workbench\n-    parallelism: 3\n-    steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - v2-e2e-test-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n-          - v2-e2e-test-cache-\n-      - run:\n-          name: Initialize Yarn\n-          working_directory: ~/workbench/e2e\n-          command: yarn cache clean && yarn install --frozen-lockfile\n-      - save_cache:\n-          paths:\n-            - ~/.cache/yarn\n-          key: v2-e2e-test-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n-      - run:\n-          name: Update Puppeteer Environment Variables\n-          command: |\n-            echo 'export USER_NAME=$PUPPETEER_TEST_USER' >> $BASH_ENV\n-            echo 'export PASSWORD=$PUPPETEER_TEST_USER_PASSWORD' >> $BASH_ENV\n-            echo 'export INVITATION_KEY=$PUPPETEER_TEST_REGISTRATION_KEY' >> $BASH_ENV\n-            source $BASH_ENV\n-      - run:\n-          name: Run e2e tests (Puppeteer and Jest)\n-          working_directory: ~/workbench/e2e\n-          command: yarn test:ci $(circleci tests glob \"tests/**/*.spec.ts\" | circleci tests split --split-by=timings --timings-type=classname --show-counts)\n-      - store_artifacts:\n-          path: e2e/logs\n-          destination: logs\n-      - store_test_results:\n-          path: ~/workbench/e2e/logs\n       \n   ui-deploy-to-test:\n-    <<: *defaults\n+    executor: workbench_docker\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      # Use the ui-build-test workspace here to avoid redoing the setup.\n+      # - git_checkout\n+      # Use \"ui-build-test\" job's workspace here to avoid redoing the setup.\n       - attach_workspace:\n           at: .\n-      - restore_cache:\n-          keys:\n-          - ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n-          - ui-cache-\n-      - deploy:\n-          name: Deploy UI App to App Engine\n-          working_directory: ~/workbench/ui\n-          command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n-            ./project.rb deploy-ui \\\n-              --project all-of-us-workbench-test \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n-              --version circle-ci-test \\\n-              --key-file circle-sa-key.json \\\n-              --promote\n+      - ui_dependencies\n+      - activate_service_accont_creds\n+      - deploy_appengine:\n+          project_name: \"all-of-us-workbench-test\"\n+          deploy_arg: \"deploy-ui\"\n+          working_dir: ~/workbench/ui\n+\n \n   # In staging and perf, we deploy all at once in order to track and control\n   # the release for a tagged version only. In \"test\", we maintain individual\n   # release jobs for API and UI to allow faster deploys and because we lack\n   # a version tag.\n   deploy-staging:\n-    <<: *defaults\n+    executor: workbench_docker\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - deploy:\n-          working_directory: ~/workbench/deploy\n-          command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n-            ./project.rb deploy \\\n-              --project all-of-us-rw-staging \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n-              --git-version \"${CIRCLE_TAG}\" \\\n-              --app-version \"${CIRCLE_TAG}\" \\\n-              --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n-              --key-file circle-sa-key.json \\\n-              --promote\n+      - git_checkout\n+      - restore_api_cache\n+      - activate_service_accont_creds\n+      - deploy_appengine:\n+          project_name: \"all-of-us-rw-staging\"\n+          deploy_arg: \"deploy\"\n+          working_dir: ~/workbench/deploy\n \n   deploy-perf:\n-    <<: *defaults\n+    executor: workbench_docker\n     steps:\n-      - checkout\n+      - git_checkout\n+      - ensure_branch_has_api_changes\n+      - restore_api_cache\n+      - activate_service_accont_creds\n+      - deploy_appengine:\n+          project_name: \"all-of-us-rw-perf\"\n+          deploy_arg: \"deploy\"\n+          working_dir: ~/workbench/deploy\n+\n+  # deploy UI and API local server\n+  deploy-local:\n+    executor: workbench_docker\n+    steps:\n+      - start_api_local:\n+          skip_no_api_change: false\n+      - attach_workspace:\n+          at: .\n+      # - git_checkout\n+      - ui_dependencies\n+      - restore_api_cache\n       - run:\n-          command: git submodule update --init --recursive\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - deploy:\n-          name: Deploy to Perf Environment\n-          working_directory: ~/workbench/deploy\n+          name: Launch local UI server\n+          working_directory: ~/workbench/ui\n+          # Start local UI server and running in the background\n+          command: yarn dev-up --configuration=local\n+          background: true\n+      - run:\n+          name: Wait for localhost UI to be started\n           command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n-            ./project.rb deploy \\\n-              --project all-of-us-rw-perf \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n-              --git-version \"${CIRCLE_TAG}\" \\\n-              --app-version \"${CIRCLE_TAG}\" \\\n-              --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n-              --key-file circle-sa-key.json \\\n-              --promote\n+            sleep 2m\n+            dockerize -wait tcp://127.0.0.1:4200 -timeout 3m\n+\n+\n+  # Run Puppeteer end-to-end UI tests on local API & UI server.\n+  e2e-test-local:\n+    executor: browser_docker\n+    environment:\n+      WORKBENCH_ENV: local\n+    parallelism: 2\n+    steps:\n+      - attach_workspace:\n+          at: .\n+      - e2e_tests\n+\n+  # Run Puppeteer end-to-end UI tests on Workbench \"test\" environment.\n+  e2e-test:\n+    executor: browser_docker\n+    environment:\n+      WORKBENCH_ENV: dev\n+    parallelism: 3\n+    steps:\n+      - run:\n+          name: Sleep 1 minute before starting e2e tests\n+          command: sleep 1m\n+      - e2e_tests\n \n-# See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n-filter_master: &filter_master\n-  filters:\n-    branches:\n-      only: master\n-filter_releases: &filter_releases\n-  filters:\n-    branches:\n-      ignore: /.*/\n-    tags:\n-      only: /^v.*/\n \n workflows:\n-  version: 2\n   build-test-deploy:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2aa2ecc80908d82e5e2ace89a6430c679eb51d6"}, "originalPosition": 742}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg4MDQ4MQ==", "bodyText": "Can you please add some comments here describing what these are for?", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r414880481", "createdAt": "2020-04-24T21:43:19Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,76 +27,201 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n-    steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - run:\n-          name: Validate swagger definitions\n-          working_directory: ~/workbench/api\n-          command: ./project.rb validate-swagger --project-prop verboseTestLogging=yes\n-      - run:\n-          name: Integration tests compile\n-          working_directory: ~/workbench/api\n-          command: ./project.rb gradle compile__bigquerytest__Java compile__integration__Java\n-      - run:\n-          name: Run Java Unit Tests\n-          working_directory: ~/workbench/api\n-          command: ./project.rb test\n-      - run:\n-          # Lint last; it's more important to surface test failures early.\n-          name: Java linting\n-          working_directory: ~/workbench/api\n-          command: ./gradlew spotlessCheck\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-            - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n-          key: api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n \n-  api-local-test:\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  filter_master: &filter_master\n+    filters:\n+      branches:\n+        only: master\n+\n+  filter_releases: &filter_releases", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2aa2ecc80908d82e5e2ace89a6430c679eb51d6"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg4MTE0Mw==", "bodyText": "nit: if this gets any longer, can we move it to an include file or actually deploy it as a script? Shell code inside yaml is a bit difficult to read.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r414881143", "createdAt": "2020-04-24T21:44:45Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,76 +27,201 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n-    steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - run:\n-          name: Validate swagger definitions\n-          working_directory: ~/workbench/api\n-          command: ./project.rb validate-swagger --project-prop verboseTestLogging=yes\n-      - run:\n-          name: Integration tests compile\n-          working_directory: ~/workbench/api\n-          command: ./project.rb gradle compile__bigquerytest__Java compile__integration__Java\n-      - run:\n-          name: Run Java Unit Tests\n-          working_directory: ~/workbench/api\n-          command: ./project.rb test\n-      - run:\n-          # Lint last; it's more important to surface test failures early.\n-          name: Java linting\n-          working_directory: ~/workbench/api\n-          command: ./gradlew spotlessCheck\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-            - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n-          key: api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n \n-  api-local-test:\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  filter_master: &filter_master\n+    filters:\n+      branches:\n+        only: master\n+\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /^v.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   EXECUTORS\n+# -------------------------\n+executors:\n+  # Puppeteer tests run in Chrome\n+  browser_docker:\n+    <<: *default_environment\n+    docker:\n+      - image: allofustest/workbench:buildimage-0.0.16\n+      - image: circleci/node:13.10.1-browsers\n+        environment:\n+          NODE_ENV: development\n+          CI: true\n+\n+  # workbench default docker image\n+  workbench_docker:\n+    <<: *default_environment\n     docker:\n       - image: allofustest/workbench:buildimage-0.0.16\n-      - image: mysql:5.7\n+\n+  mysql_docker:\n+    <<: *default_environment\n+    docker:\n+      - image: allofustest/workbench:buildimage-0.0.16\n+      - image: mysql:5.7 # Is this same as circleci/mysql:5.7 ? This image is not cached on CircleCI\n         environment:\n           - MYSQL_ROOT_PASSWORD=ubuntu\n           - MYSQL_USER=ubuntu\n           - MYSQL_PASSWORD=ubuntu\n-    working_directory: ~/workbench\n     environment:\n-      # Drop to ~1.5G; the local API server starts two Java processes (the API\n-      # server and the cron emulator). The default machine has 4GB, so we want\n-      # the Java memory limit to be below half of that: other things on the\n-      # machine need memory as well. Using 2G here manifested in 137 errors.\n-      # If this limit proves to be too low, an alternative would be to use a\n-      # larger resource class:\n-      #   https://circleci.com/docs/2.0/configuration-reference/#resource_class\n-      JAVA_TOOL_OPTIONS: -Xmx1536m\n-      TERM: dumb\n       MYSQL_ROOT_PASSWORD: ubuntu\n+\n+# -------------------------\n+#   COMMANDS\n+# https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_accont_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI Service Account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n+      - run:\n+          name: Update Git Submodules\n+          command: git submodule update --init --recursive\n+\n+  ensure_branch_has_api_changes:\n+    description: \"Ensure branch has changes to API Code\"\n+    steps:\n+      - run:\n+          name: Ensure Branch has Changes to API Code\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] && [ ${CIRCLE_BRANCH} != \"master\" ] && [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep api/ | wc -l | xargs) == 0 ]; then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2aa2ecc80908d82e5e2ace89a6430c679eb51d6"}, "originalPosition": 176}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNDQ1MDkw", "url": "https://github.com/all-of-us/workbench/pull/3479#pullrequestreview-400445090", "createdAt": "2020-04-26T00:55:57Z", "commit": {"oid": "73353941de84b7b2d7791fb3f89c8ac0836deec7"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMDo1NTo1N1rOGL8lRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMToxNDo0M1rOGL8wSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE4MDEwMg==", "bodyText": "I changed ensure_branch_has_api_changes anchor to a command.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415180102", "createdAt": "2020-04-26T00:55:57Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -1,17 +1,26 @@\n-version: 2\n+version: 2.1\n \n+# -------------------------\n+#   PARAMETERS\n+# -------------------------\n+parameters:\n+  cache_key_version:\n+    type: string\n+    default: \"v1-abc789\"\n+\n+  circleci_service_account:\n+    type: string\n+    default: \"circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com\"\n+\n+# -------------------------\n+#   ANCHORS\n+# -------------------------\n anchors:\n   defaults: &defaults\n     docker:\n       - image: allofustest/workbench:buildimage-0.0.16\n     working_directory: ~/workbench\n-  ensure_branch_has_api_changes: &ensure_branch_has_api_changes\n-    name: Ensure Branch has Changes to API Code\n-    command: |\n-      if [ ${CIRCLE_BRANCH} != \"\" ] && [ ${CIRCLE_BRANCH} != \"master\" ] && [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep api/ | wc -l | xargs) == 0 ]; then\n-        echo No relevant changes on api directory in non-master branch. Skipping\n-        circleci step halt\n-      fi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73353941de84b7b2d7791fb3f89c8ac0836deec7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE4MDMwNg==", "bodyText": "I changed update_git_submodules anchor to command git_checkout.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415180306", "createdAt": "2020-04-26T00:56:58Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,217 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73353941de84b7b2d7791fb3f89c8ac0836deec7"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE4MDYyNg==", "bodyText": "No change, simply moved up filter_master, filter_releases anchors from bottom of file to here, the ANCHORS section.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415180626", "createdAt": "2020-04-26T00:59:12Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,217 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73353941de84b7b2d7791fb3f89c8ac0836deec7"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE4MDg0NA==", "bodyText": "original code. I don't want to change and break it.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415180844", "createdAt": "2020-04-26T01:00:59Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,76 +27,201 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n-    steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - run:\n-          name: Validate swagger definitions\n-          working_directory: ~/workbench/api\n-          command: ./project.rb validate-swagger --project-prop verboseTestLogging=yes\n-      - run:\n-          name: Integration tests compile\n-          working_directory: ~/workbench/api\n-          command: ./project.rb gradle compile__bigquerytest__Java compile__integration__Java\n-      - run:\n-          name: Run Java Unit Tests\n-          working_directory: ~/workbench/api\n-          command: ./project.rb test\n-      - run:\n-          # Lint last; it's more important to surface test failures early.\n-          name: Java linting\n-          working_directory: ~/workbench/api\n-          command: ./gradlew spotlessCheck\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-            - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n-          key: api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n \n-  api-local-test:\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  filter_master: &filter_master\n+    filters:\n+      branches:\n+        only: master\n+\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /^v.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   EXECUTORS\n+# -------------------------\n+executors:\n+  # Puppeteer tests run in Chrome\n+  browser_docker:\n+    <<: *default_environment\n+    docker:\n+      - image: allofustest/workbench:buildimage-0.0.16\n+      - image: circleci/node:13.10.1-browsers\n+        environment:\n+          NODE_ENV: development\n+          CI: true\n+\n+  # workbench default docker image\n+  workbench_docker:\n+    <<: *default_environment\n     docker:\n       - image: allofustest/workbench:buildimage-0.0.16\n-      - image: mysql:5.7\n+\n+  mysql_docker:\n+    <<: *default_environment\n+    docker:\n+      - image: allofustest/workbench:buildimage-0.0.16\n+      - image: mysql:5.7 # Is this same as circleci/mysql:5.7 ? This image is not cached on CircleCI\n         environment:\n           - MYSQL_ROOT_PASSWORD=ubuntu\n           - MYSQL_USER=ubuntu\n           - MYSQL_PASSWORD=ubuntu\n-    working_directory: ~/workbench\n     environment:\n-      # Drop to ~1.5G; the local API server starts two Java processes (the API\n-      # server and the cron emulator). The default machine has 4GB, so we want\n-      # the Java memory limit to be below half of that: other things on the\n-      # machine need memory as well. Using 2G here manifested in 137 errors.\n-      # If this limit proves to be too low, an alternative would be to use a\n-      # larger resource class:\n-      #   https://circleci.com/docs/2.0/configuration-reference/#resource_class\n-      JAVA_TOOL_OPTIONS: -Xmx1536m\n-      TERM: dumb\n       MYSQL_ROOT_PASSWORD: ubuntu\n+\n+# -------------------------\n+#   COMMANDS\n+# https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_accont_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI Service Account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n+      - run:\n+          name: Update Git Submodules\n+          command: git submodule update --init --recursive\n+\n+  ensure_branch_has_api_changes:\n+    description: \"Ensure branch has changes to API Code\"\n+    steps:\n+      - run:\n+          name: Ensure Branch has Changes to API Code\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] && [ ${CIRCLE_BRANCH} != \"master\" ] && [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep api/ | wc -l | xargs) == 0 ]; then", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg4MTE0Mw=="}, "originalCommit": {"oid": "d2aa2ecc80908d82e5e2ace89a6430c679eb51d6"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE4MDkwNw==", "bodyText": "cool.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415180907", "createdAt": "2020-04-26T01:01:11Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,76 +27,201 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n-    steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - run:\n-          name: Validate swagger definitions\n-          working_directory: ~/workbench/api\n-          command: ./project.rb validate-swagger --project-prop verboseTestLogging=yes\n-      - run:\n-          name: Integration tests compile\n-          working_directory: ~/workbench/api\n-          command: ./project.rb gradle compile__bigquerytest__Java compile__integration__Java\n-      - run:\n-          name: Run Java Unit Tests\n-          working_directory: ~/workbench/api\n-          command: ./project.rb test\n-      - run:\n-          # Lint last; it's more important to surface test failures early.\n-          name: Java linting\n-          working_directory: ~/workbench/api\n-          command: ./gradlew spotlessCheck\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-            - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n-          key: api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n \n-  api-local-test:\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  filter_master: &filter_master\n+    filters:\n+      branches:\n+        only: master\n+\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /^v.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   EXECUTORS\n+# -------------------------\n+executors:\n+  # Puppeteer tests run in Chrome\n+  browser_docker:\n+    <<: *default_environment\n+    docker:\n+      - image: allofustest/workbench:buildimage-0.0.16\n+      - image: circleci/node:13.10.1-browsers\n+        environment:\n+          NODE_ENV: development\n+          CI: true\n+\n+  # workbench default docker image\n+  workbench_docker:\n+    <<: *default_environment\n     docker:\n       - image: allofustest/workbench:buildimage-0.0.16\n-      - image: mysql:5.7\n+\n+  mysql_docker:\n+    <<: *default_environment\n+    docker:\n+      - image: allofustest/workbench:buildimage-0.0.16\n+      - image: mysql:5.7 # Is this same as circleci/mysql:5.7 ? This image is not cached on CircleCI\n         environment:\n           - MYSQL_ROOT_PASSWORD=ubuntu\n           - MYSQL_USER=ubuntu\n           - MYSQL_PASSWORD=ubuntu\n-    working_directory: ~/workbench\n     environment:\n-      # Drop to ~1.5G; the local API server starts two Java processes (the API\n-      # server and the cron emulator). The default machine has 4GB, so we want\n-      # the Java memory limit to be below half of that: other things on the\n-      # machine need memory as well. Using 2G here manifested in 137 errors.\n-      # If this limit proves to be too low, an alternative would be to use a\n-      # larger resource class:\n-      #   https://circleci.com/docs/2.0/configuration-reference/#resource_class\n-      JAVA_TOOL_OPTIONS: -Xmx1536m\n-      TERM: dumb\n       MYSQL_ROOT_PASSWORD: ubuntu\n+\n+# -------------------------\n+#   COMMANDS\n+# https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_accont_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI Service Account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n+      - run:\n+          name: Update Git Submodules\n+          command: git submodule update --init --recursive\n+\n+  ensure_branch_has_api_changes:\n+    description: \"Ensure branch has changes to API Code\"\n+    steps:\n+      - run:\n+          name: Ensure Branch has Changes to API Code\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] && [ ${CIRCLE_BRANCH} != \"master\" ] && [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep api/ | wc -l | xargs) == 0 ]; then\n+              echo No relevant changes on api directory in non-master branch. Skipping\n+              circleci step halt", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NDc5Mw=="}, "originalCommit": {"oid": "d2aa2ecc80908d82e5e2ace89a6430c679eb51d6"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE4MTE4NA==", "bodyText": "I'm not able to test any deploy to app engine jobs since they're only for master and release branches.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415181184", "createdAt": "2020-04-26T01:03:00Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,217 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  ensure_branch_has_api_changes:\n+    description: \"Ensure branch has changes to API code\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] && [ ${CIRCLE_BRANCH} != \"master\" ] && [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep api/ | wc -l | xargs) == 0 ]; then\n+              echo \"No relevant changes on api directory in non-master branch. Skipping.\"\n+              circleci step halt\n+            fi\n+          name: Ensure branch has changes to API code\n+\n+  ui_dependencies:\n+    description: \"workbench/ui: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n+      # caching: https://circleci.com/docs/2.0/caching/\n+      - restore_cache:\n+          keys:\n+            # restore cache strategy:\n+            # Check for the latest cache from your branch.\n+            # If that fails, then check for the latest from master branch.\n+            # If that fails, then check for the latest from any branch\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/ui: yarn install dependencies\"\n+          working_directory: ~/workbench/ui\n+          command: yarn install --verbose --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - ui/node_modules\n+          key: << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+\n+  e2e_dependencies:\n+    description: \"workbench/e2e: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n       - restore_cache:\n           keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/e2e: yarn install dependencies\"\n+          working_directory: ~/workbench/e2e\n+          command: yarn install --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - e2e/node_modules\n+          key: << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+\n+  api_cache:\n+    description: \"workbench/api: save and restore gradle cache\"\n+    parameters:\n+      save:\n+        type: boolean\n+        default: false\n+      restore:\n+        type: boolean\n+        default: false\n+    steps:\n+      - when:\n+          condition: << parameters.save >>\n+          steps:\n+            - save_cache:\n+                paths:\n+                  - ~/.gradle/caches\n+                  - ~/.gradle/wrapper\n+                  - ~/.m2\n+                  - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n+                key: v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}-{{ .Branch }}\n+      - when:\n+          condition: << parameters.restore >>\n+          steps:\n+            - restore_cache:\n+                keys:\n+                  - v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}-{{ .Branch }}\n+                  - v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}-master\n+                  - v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+\n+  deploy_appengine:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73353941de84b7b2d7791fb3f89c8ac0836deec7"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE4MTUyMQ==", "bodyText": "with a medium+ circleci container and GRADLE_OPTS: \"-Dorg.gradle.daemon=false\", OOM issue should have been resolved. Thus, removed comments.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415181521", "createdAt": "2020-04-26T01:05:35Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -71,176 +274,107 @@ jobs:\n           - MYSQL_PASSWORD=ubuntu\n     working_directory: ~/workbench\n     environment:\n-      # Drop to ~1.5G; the local API server starts two Java processes (the API\n-      # server and the cron emulator). The default machine has 4GB, so we want\n-      # the Java memory limit to be below half of that: other things on the\n-      # machine need memory as well. Using 2G here manifested in 137 errors.\n-      # If this limit proves to be too low, an alternative would be to use a\n-      # larger resource class:\n-      #   https://circleci.com/docs/2.0/configuration-reference/#resource_class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73353941de84b7b2d7791fb3f89c8ac0836deec7"}, "originalPosition": 301}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE4MjkyMg==", "bodyText": "nope", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415182922", "createdAt": "2020-04-26T01:14:43Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -264,136 +402,98 @@ jobs:\n           root: .\n           paths:\n             - ui\n-\n-  # Run suite of Puppeteer end-to-end QA tests, pointed at the Workbench \"test\" environment.\n-  puppeteer-e2e-test:\n-    <<: *defaults\n-    docker:\n-      - image: circleci/node:13.10.1-browsers\n-        environment:\n-          NODE_ENV: development\n-    working_directory: ~/workbench\n-    parallelism: 3\n-    steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - v2-e2e-test-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n-          - v2-e2e-test-cache-\n-      - run:\n-          name: Initialize Yarn\n-          working_directory: ~/workbench/e2e\n-          command: yarn cache clean && yarn install --frozen-lockfile\n-      - save_cache:\n-          paths:\n-            - ~/.cache/yarn\n-          key: v2-e2e-test-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n-      - run:\n-          name: Update Puppeteer Environment Variables\n-          command: |\n-            echo 'export USER_NAME=$PUPPETEER_TEST_USER' >> $BASH_ENV\n-            echo 'export PASSWORD=$PUPPETEER_TEST_USER_PASSWORD' >> $BASH_ENV\n-            echo 'export INVITATION_KEY=$PUPPETEER_TEST_REGISTRATION_KEY' >> $BASH_ENV\n-            source $BASH_ENV\n-      - run:\n-          name: Run e2e tests (Puppeteer and Jest)\n-          working_directory: ~/workbench/e2e\n-          command: yarn test:ci $(circleci tests glob \"tests/**/*.spec.ts\" | circleci tests split --split-by=timings --timings-type=classname --show-counts)\n-      - store_artifacts:\n-          path: e2e/logs\n-          destination: logs\n-      - store_test_results:\n-          path: ~/workbench/e2e/logs\n       \n   ui-deploy-to-test:\n-    <<: *defaults\n+    executor: workbench_docker\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      # Use the ui-build-test workspace here to avoid redoing the setup.\n+      # - git_checkout\n+      # Use \"ui-build-test\" job's workspace here to avoid redoing the setup.\n       - attach_workspace:\n           at: .\n-      - restore_cache:\n-          keys:\n-          - ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n-          - ui-cache-\n-      - deploy:\n-          name: Deploy UI App to App Engine\n-          working_directory: ~/workbench/ui\n-          command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n-            ./project.rb deploy-ui \\\n-              --project all-of-us-workbench-test \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n-              --version circle-ci-test \\\n-              --key-file circle-sa-key.json \\\n-              --promote\n+      - ui_dependencies\n+      - activate_service_accont_creds\n+      - deploy_appengine:\n+          project_name: \"all-of-us-workbench-test\"\n+          deploy_arg: \"deploy-ui\"\n+          working_dir: ~/workbench/ui\n+\n \n   # In staging and perf, we deploy all at once in order to track and control\n   # the release for a tagged version only. In \"test\", we maintain individual\n   # release jobs for API and UI to allow faster deploys and because we lack\n   # a version tag.\n   deploy-staging:\n-    <<: *defaults\n+    executor: workbench_docker\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - deploy:\n-          working_directory: ~/workbench/deploy\n-          command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n-            ./project.rb deploy \\\n-              --project all-of-us-rw-staging \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n-              --git-version \"${CIRCLE_TAG}\" \\\n-              --app-version \"${CIRCLE_TAG}\" \\\n-              --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n-              --key-file circle-sa-key.json \\\n-              --promote\n+      - git_checkout\n+      - restore_api_cache\n+      - activate_service_accont_creds\n+      - deploy_appengine:\n+          project_name: \"all-of-us-rw-staging\"\n+          deploy_arg: \"deploy\"\n+          working_dir: ~/workbench/deploy\n \n   deploy-perf:\n-    <<: *defaults\n+    executor: workbench_docker\n     steps:\n-      - checkout\n+      - git_checkout\n+      - ensure_branch_has_api_changes\n+      - restore_api_cache\n+      - activate_service_accont_creds\n+      - deploy_appengine:\n+          project_name: \"all-of-us-rw-perf\"\n+          deploy_arg: \"deploy\"\n+          working_dir: ~/workbench/deploy\n+\n+  # deploy UI and API local server\n+  deploy-local:\n+    executor: workbench_docker\n+    steps:\n+      - start_api_local:\n+          skip_no_api_change: false\n+      - attach_workspace:\n+          at: .\n+      # - git_checkout\n+      - ui_dependencies\n+      - restore_api_cache\n       - run:\n-          command: git submodule update --init --recursive\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - deploy:\n-          name: Deploy to Perf Environment\n-          working_directory: ~/workbench/deploy\n+          name: Launch local UI server\n+          working_directory: ~/workbench/ui\n+          # Start local UI server and running in the background\n+          command: yarn dev-up --configuration=local\n+          background: true\n+      - run:\n+          name: Wait for localhost UI to be started\n           command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n-            ./project.rb deploy \\\n-              --project all-of-us-rw-perf \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n-              --git-version \"${CIRCLE_TAG}\" \\\n-              --app-version \"${CIRCLE_TAG}\" \\\n-              --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n-              --key-file circle-sa-key.json \\\n-              --promote\n+            sleep 2m\n+            dockerize -wait tcp://127.0.0.1:4200 -timeout 3m\n+\n+\n+  # Run Puppeteer end-to-end UI tests on local API & UI server.\n+  e2e-test-local:\n+    executor: browser_docker\n+    environment:\n+      WORKBENCH_ENV: local\n+    parallelism: 2\n+    steps:\n+      - attach_workspace:\n+          at: .\n+      - e2e_tests\n+\n+  # Run Puppeteer end-to-end UI tests on Workbench \"test\" environment.\n+  e2e-test:\n+    executor: browser_docker\n+    environment:\n+      WORKBENCH_ENV: dev\n+    parallelism: 3\n+    steps:\n+      - run:\n+          name: Sleep 1 minute before starting e2e tests\n+          command: sleep 1m\n+      - e2e_tests\n \n-# See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n-filter_master: &filter_master\n-  filters:\n-    branches:\n-      only: master\n-filter_releases: &filter_releases\n-  filters:\n-    branches:\n-      ignore: /.*/\n-    tags:\n-      only: /^v.*/\n \n workflows:\n-  version: 2\n   build-test-deploy:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3OTcxMQ=="}, "originalCommit": {"oid": "d2aa2ecc80908d82e5e2ace89a6430c679eb51d6"}, "originalPosition": 742}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72badd90e0e250774004c3ab606d813449b58c97", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/72badd90e0e250774004c3ab606d813449b58c97", "committedDate": "2020-04-26T02:55:00Z", "message": "remove e2e-local code"}, "afterCommit": {"oid": "858b15aa311c2443fd18644179d76c85f3915144", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/858b15aa311c2443fd18644179d76c85f3915144", "committedDate": "2020-04-26T03:03:33Z", "message": "upgrade config yaml v2.1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwOTAzNTk3", "url": "https://github.com/all-of-us/workbench/pull/3479#pullrequestreview-400903597", "createdAt": "2020-04-27T12:30:03Z", "commit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "state": "COMMENTED", "comments": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjozMDowM1rOGMgnTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMzoyNDo1NlrOGMjAPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3MDQ0Ng==", "bodyText": "nit: I'd probably call this select_pull_requests and the one above select_release_tags. The reason being \"filter\" can imply filtering in or filtering out (although libraries are pretty consistent), but select is less ambiguous. I wouldn't abbrev pull request.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415770446", "createdAt": "2020-04-27T12:30:03Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3MjgwNg==", "bodyText": "I'd make this \"Halt job and succeed early if no code changes on master.\"\nNote that the regex isn't fully inclusive of files we may not care about, but it's better to err on the side of over-testing.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415772806", "createdAt": "2020-04-27T12:33:35Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3NDI5MQ==", "bodyText": "Please change to \" Ensure branch has changes to code in specified directory.\" so you don't have to update it when we add directories.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415774291", "createdAt": "2020-04-27T12:35:57Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3NjUwOA==", "bodyText": "Can you look into making this whole string a parameter or variable so you don't need to repeat it three times? << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}?", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415776508", "createdAt": "2020-04-27T12:39:15Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code\n+\n+  ui_dependencies:\n+    description: \"workbench/ui: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n+      # caching: https://circleci.com/docs/2.0/caching/\n+      - restore_cache:\n+          keys:\n+            # restore cache strategy:\n+            # Check for the latest cache from your branch.\n+            # If that fails, then check for the latest from master branch.\n+            # If that fails, then check for the latest from any branch\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3NzA3NA==", "bodyText": "Nit: other names are title case I think. Though sentence case would probably have been a more readable choice.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415777074", "createdAt": "2020-04-27T12:40:05Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code\n+\n+  ui_dependencies:\n+    description: \"workbench/ui: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n+      # caching: https://circleci.com/docs/2.0/caching/\n+      - restore_cache:\n+          keys:\n+            # restore cache strategy:\n+            # Check for the latest cache from your branch.\n+            # If that fails, then check for the latest from master branch.\n+            # If that fails, then check for the latest from any branch\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/ui: yarn install dependencies\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3ODMwOA==", "bodyText": "Do we need a parameter or flag or something to tell CircleCI to ignore the cache so we can debug any cache-related issues?\nAlso, how closely does this mirror the way our state is cached in the local environment?", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415778308", "createdAt": "2020-04-27T12:41:55Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code\n+\n+  ui_dependencies:\n+    description: \"workbench/ui: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n+      # caching: https://circleci.com/docs/2.0/caching/\n+      - restore_cache:\n+          keys:\n+            # restore cache strategy:\n+            # Check for the latest cache from your branch.\n+            # If that fails, then check for the latest from master branch.\n+            # If that fails, then check for the latest from any branch\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/ui: yarn install dependencies\"\n+          working_directory: ~/workbench/ui\n+          command: yarn install --verbose --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - ui/node_modules\n+          key: << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+\n+  e2e_dependencies:\n+    description: \"workbench/e2e: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3OTk0NQ==", "bodyText": "Maybe just \"Manage Gradle cache\" since it's save and/or restore.\nAlso, it will be more recognizable as a command if you name it with a verb, like manage_api_cache.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415779945", "createdAt": "2020-04-27T12:44:21Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code\n+\n+  ui_dependencies:\n+    description: \"workbench/ui: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n+      # caching: https://circleci.com/docs/2.0/caching/\n+      - restore_cache:\n+          keys:\n+            # restore cache strategy:\n+            # Check for the latest cache from your branch.\n+            # If that fails, then check for the latest from master branch.\n+            # If that fails, then check for the latest from any branch\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/ui: yarn install dependencies\"\n+          working_directory: ~/workbench/ui\n+          command: yarn install --verbose --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - ui/node_modules\n+          key: << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+\n+  e2e_dependencies:\n+    description: \"workbench/e2e: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n       - restore_cache:\n           keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/e2e: yarn install dependencies\"\n+          working_directory: ~/workbench/e2e\n+          command: yarn install --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - e2e/node_modules\n+          key: << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+\n+  api_cache:\n+    description: \"workbench/api: save and restore gradle cache\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc4MDc1Mg==", "bodyText": "I was hoping we could use one of the prettier mechanisms.\nIn this case, if the puppeteer credentials are project-wide, you may be able to set them at a higher scope without needing the echo statements.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415780752", "createdAt": "2020-04-27T12:45:32Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code\n+\n+  ui_dependencies:\n+    description: \"workbench/ui: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n+      # caching: https://circleci.com/docs/2.0/caching/\n+      - restore_cache:\n+          keys:\n+            # restore cache strategy:\n+            # Check for the latest cache from your branch.\n+            # If that fails, then check for the latest from master branch.\n+            # If that fails, then check for the latest from any branch\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/ui: yarn install dependencies\"\n+          working_directory: ~/workbench/ui\n+          command: yarn install --verbose --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - ui/node_modules\n+          key: << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+\n+  e2e_dependencies:\n+    description: \"workbench/e2e: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n       - restore_cache:\n           keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/e2e: yarn install dependencies\"\n+          working_directory: ~/workbench/e2e\n+          command: yarn install --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - e2e/node_modules\n+          key: << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+\n+  api_cache:\n+    description: \"workbench/api: save and restore gradle cache\"\n+    parameters:\n+      save:\n+        type: boolean\n+        default: false\n+      restore:\n+        type: boolean\n+        default: false\n+    steps:\n+      - when:\n+          condition: << parameters.save >>\n+          steps:\n+            - save_cache:\n+                paths:\n+                  - ~/.gradle/caches\n+                  - ~/.gradle/wrapper\n+                  - ~/.m2\n+                  - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n+                key: v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}-{{ .Branch }}\n+      - when:\n+          condition: << parameters.restore >>\n+          steps:\n+            - restore_cache:\n+                keys:\n+                  - v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}-{{ .Branch }}\n+                  - v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}-master\n+                  - v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+\n+  run_e2e_test:\n+    steps:\n+      - run:\n+          name: Export Puppeteer test environment variables\n+          command: |\n+            echo 'export USER_NAME=$PUPPETEER_TEST_USER' >> $BASH_ENV", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5MTUyMQ==", "bodyText": "So if they're both false, then nothing happens. It seems like one is required for meaningful operation. An accidental no-op command invocation could sit unnoticed for some time.\nYou could do a cache_mode parameter with an enum like [SAVE, RESTORE, SAVE_AND_RESTORE] and make that required? That would solve the potential no-op problem (though if you add a third command operation, it would get complicated).\nFinally, you could break this down into very simple commands like save_api_cache and restore_api_cache, or even a save_cache with the name of the cache as a parameter.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415791521", "createdAt": "2020-04-27T13:00:39Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code\n+\n+  ui_dependencies:\n+    description: \"workbench/ui: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n+      # caching: https://circleci.com/docs/2.0/caching/\n+      - restore_cache:\n+          keys:\n+            # restore cache strategy:\n+            # Check for the latest cache from your branch.\n+            # If that fails, then check for the latest from master branch.\n+            # If that fails, then check for the latest from any branch\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/ui: yarn install dependencies\"\n+          working_directory: ~/workbench/ui\n+          command: yarn install --verbose --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - ui/node_modules\n+          key: << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+\n+  e2e_dependencies:\n+    description: \"workbench/e2e: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n       - restore_cache:\n           keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/e2e: yarn install dependencies\"\n+          working_directory: ~/workbench/e2e\n+          command: yarn install --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - e2e/node_modules\n+          key: << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+\n+  api_cache:\n+    description: \"workbench/api: save and restore gradle cache\"\n+    parameters:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5NTc4Mw==", "bodyText": "+1 I like this sentence case much better.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415795783", "createdAt": "2020-04-27T13:06:39Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -46,52 +232,41 @@ jobs:\n           working_directory: ~/workbench/api\n           command: ./project.rb gradle compile__bigquerytest__Java compile__integration__Java\n       - run:\n-          name: Run Java Unit Tests\n+          name: Run Java unit tests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5NjUxOQ==", "bodyText": "Out of curiosity, have you tried the secrets cache? I realize these aren't secret, but might be an interesting thing to explore. We probably won't get permission to use it, though.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415796519", "createdAt": "2020-04-27T13:07:44Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -46,52 +232,41 @@ jobs:\n           working_directory: ~/workbench/api\n           command: ./project.rb gradle compile__bigquerytest__Java compile__integration__Java\n       - run:\n-          name: Run Java Unit Tests\n+          name: Run Java unit tests\n           working_directory: ~/workbench/api\n           command: ./project.rb test\n       - run:\n           # Lint last; it's more important to surface test failures early.\n           name: Java linting\n           working_directory: ~/workbench/api\n           command: ./gradlew spotlessCheck\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-            - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n-          key: api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - api_cache:\n+          save: true\n \n   api-local-test:\n+    # Refers to https://circleci.com/docs/2.0/configuration-reference/#resource_class\n+    resource_class: medium+\n     docker:\n       - image: allofustest/workbench:buildimage-0.0.16\n+      # Any known reason for not using circleci/mysql:5.7-ram? better performance and mitigates I/O contention.\n+      # Refers to https://circleci.com/docs/2.0/circleci-images/#service-image-variant\n       - image: mysql:5.7\n         environment:\n           - MYSQL_ROOT_PASSWORD=ubuntu", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 275}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5ODE3NQ==", "bodyText": "\ud83d\udc4f This is getting really tiny now!", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415798175", "createdAt": "2020-04-27T13:10:03Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -105,142 +280,104 @@ jobs:\n           name: Local API Tests on Running Server\n           working_directory: ~/workbench/api\n           command: ./project.rb start-local-api && ./project.rb run-local-api-tests && ./project.rb stop-local-api\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-            - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n-          key: api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - api_cache:\n+          save: true\n \n   api-deploy-to-test:\n     <<: *java_defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n+      - git_checkout\n       # Note: most of the time spent here appears to be in Gradle / App Engine\n       # deployment. We tried more aggressively caching outputs via Circle\n       # workspaces, but that seemed to have a negligible effect on speed. It's\n       # also tricky to pick specific sub directories since the API deploy\n       # touches several top level folders {common,}api.\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - run: *activate_service_accont_creds\n+      - api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - deploy:\n           name: Deploy to App Engine\n           working_directory: ~/workbench/api\n           command: |\n             ./project.rb deploy \\\n               --project all-of-us-workbench-test \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n+              --account << pipeline.parameters.circleci_service_account >> \\\n               --version circle-ci-test \\\n               --key-file circle-sa-key.json \\\n               --promote\n \n+\n   api-deps-check:\n     <<: *java_defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n+      - git_checkout\n       - run:\n           name: Scan dependencies for vulnerabilities\n           working_directory: ~/workbench/api\n-          command: |\n-            ./project.rb gradle dependencyCheckAnalyze --info\n+          command: ./project.rb gradle dependencyCheckAnalyze --info\n \n   api-integration-test:\n     <<: *java_defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n-      - restore_cache:\n-          keys:\n-          - api-integration-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-integration-cache-\n-      - run: *activate_service_accont_creds\n+      - git_checkout\n+      - ensure_branch_has_changes\n+      - api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - run:\n           name: Run Integration Tests\n           working_directory: ~/workbench/api\n           command: ./project.rb integration\n       - store_test_results:\n           path: ~/workbench/api/build/test-results/integrationTest/\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-          key: api-integration-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - api_cache:\n+          save: true\n \n   api-nightly-integration-test:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 399}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5OTE4Nw==", "bodyText": "Please name commands like functions, i.e. starting with a verb. This one could be install_ui_dependencies I think. You could also start with manage but it's less descriptive.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415799187", "createdAt": "2020-04-27T13:11:23Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code\n+\n+  ui_dependencies:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5OTgyMA==", "bodyText": "nit: maybe name this checkout_and_init_git", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415799820", "createdAt": "2020-04-27T13:12:12Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwMDIzNA==", "bodyText": "consider the name install_e2e_dependencies", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415800234", "createdAt": "2020-04-27T13:12:46Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code\n+\n+  ui_dependencies:\n+    description: \"workbench/ui: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n+      # caching: https://circleci.com/docs/2.0/caching/\n+      - restore_cache:\n+          keys:\n+            # restore cache strategy:\n+            # Check for the latest cache from your branch.\n+            # If that fails, then check for the latest from master branch.\n+            # If that fails, then check for the latest from any branch\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/ui: yarn install dependencies\"\n+          working_directory: ~/workbench/ui\n+          command: yarn install --verbose --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - ui/node_modules\n+          key: << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+\n+  e2e_dependencies:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwMDk2Mw==", "bodyText": "consider making this key file location a pipeline parameter as well.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415800963", "createdAt": "2020-04-27T13:13:41Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -105,142 +280,104 @@ jobs:\n           name: Local API Tests on Running Server\n           working_directory: ~/workbench/api\n           command: ./project.rb start-local-api && ./project.rb run-local-api-tests && ./project.rb stop-local-api\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-            - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n-          key: api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - api_cache:\n+          save: true\n \n   api-deploy-to-test:\n     <<: *java_defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n+      - git_checkout\n       # Note: most of the time spent here appears to be in Gradle / App Engine\n       # deployment. We tried more aggressively caching outputs via Circle\n       # workspaces, but that seemed to have a negligible effect on speed. It's\n       # also tricky to pick specific sub directories since the API deploy\n       # touches several top level folders {common,}api.\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - run: *activate_service_accont_creds\n+      - api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - deploy:\n           name: Deploy to App Engine\n           working_directory: ~/workbench/api\n           command: |\n             ./project.rb deploy \\\n               --project all-of-us-workbench-test \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n+              --account << pipeline.parameters.circleci_service_account >> \\\n               --version circle-ci-test \\\n               --key-file circle-sa-key.json \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 352}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwMTQ5MA==", "bodyText": "Would it make sense to have a reusable scan command?", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415801490", "createdAt": "2020-04-27T13:14:21Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -105,142 +280,104 @@ jobs:\n           name: Local API Tests on Running Server\n           working_directory: ~/workbench/api\n           command: ./project.rb start-local-api && ./project.rb run-local-api-tests && ./project.rb stop-local-api\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-            - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n-          key: api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - api_cache:\n+          save: true\n \n   api-deploy-to-test:\n     <<: *java_defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n+      - git_checkout\n       # Note: most of the time spent here appears to be in Gradle / App Engine\n       # deployment. We tried more aggressively caching outputs via Circle\n       # workspaces, but that seemed to have a negligible effect on speed. It's\n       # also tricky to pick specific sub directories since the API deploy\n       # touches several top level folders {common,}api.\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - run: *activate_service_accont_creds\n+      - api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - deploy:\n           name: Deploy to App Engine\n           working_directory: ~/workbench/api\n           command: |\n             ./project.rb deploy \\\n               --project all-of-us-workbench-test \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n+              --account << pipeline.parameters.circleci_service_account >> \\\n               --version circle-ci-test \\\n               --key-file circle-sa-key.json \\\n               --promote\n \n+\n   api-deps-check:\n     <<: *java_defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n+      - git_checkout\n       - run:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 362}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwNDMxOA==", "bodyText": "So is the \"nightly\" test suite a different one than the regular one? Or is this purely a scheduling thing?\nIf it's just for scheduling, I bet we don't need separate jobs, but just different triggers and maybe parameters.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415804318", "createdAt": "2020-04-27T13:17:57Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -105,142 +280,104 @@ jobs:\n           name: Local API Tests on Running Server\n           working_directory: ~/workbench/api\n           command: ./project.rb start-local-api && ./project.rb run-local-api-tests && ./project.rb stop-local-api\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-            - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n-          key: api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - api_cache:\n+          save: true\n \n   api-deploy-to-test:\n     <<: *java_defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n+      - git_checkout\n       # Note: most of the time spent here appears to be in Gradle / App Engine\n       # deployment. We tried more aggressively caching outputs via Circle\n       # workspaces, but that seemed to have a negligible effect on speed. It's\n       # also tricky to pick specific sub directories since the API deploy\n       # touches several top level folders {common,}api.\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - run: *activate_service_accont_creds\n+      - api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - deploy:\n           name: Deploy to App Engine\n           working_directory: ~/workbench/api\n           command: |\n             ./project.rb deploy \\\n               --project all-of-us-workbench-test \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n+              --account << pipeline.parameters.circleci_service_account >> \\\n               --version circle-ci-test \\\n               --key-file circle-sa-key.json \\\n               --promote\n \n+\n   api-deps-check:\n     <<: *java_defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n+      - git_checkout\n       - run:\n           name: Scan dependencies for vulnerabilities\n           working_directory: ~/workbench/api\n-          command: |\n-            ./project.rb gradle dependencyCheckAnalyze --info\n+          command: ./project.rb gradle dependencyCheckAnalyze --info\n \n   api-integration-test:\n     <<: *java_defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n-      - restore_cache:\n-          keys:\n-          - api-integration-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-integration-cache-\n-      - run: *activate_service_accont_creds\n+      - git_checkout\n+      - ensure_branch_has_changes\n+      - api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - run:\n           name: Run Integration Tests\n           working_directory: ~/workbench/api\n           command: ./project.rb integration\n       - store_test_results:\n           path: ~/workbench/api/build/test-results/integrationTest/\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-          key: api-integration-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - api_cache:\n+          save: true\n \n   api-nightly-integration-test:\n     <<: *java_defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - api-integration-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-integration-cache-\n-      - run: *activate_service_accont_creds\n+      - git_checkout\n+      - api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - run:\n           name: Run Nightly Integration tests\n           working_directory: ~/workbench/api\n           command: ./project.rb nightly-integration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 416}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwNTcyNA==", "bodyText": "Add a description here, please.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415805724", "createdAt": "2020-04-27T13:19:47Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code\n+\n+  ui_dependencies:\n+    description: \"workbench/ui: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n+      # caching: https://circleci.com/docs/2.0/caching/\n+      - restore_cache:\n+          keys:\n+            # restore cache strategy:\n+            # Check for the latest cache from your branch.\n+            # If that fails, then check for the latest from master branch.\n+            # If that fails, then check for the latest from any branch\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/ui: yarn install dependencies\"\n+          working_directory: ~/workbench/ui\n+          command: yarn install --verbose --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - ui/node_modules\n+          key: << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+\n+  e2e_dependencies:\n+    description: \"workbench/e2e: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n       - restore_cache:\n           keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/e2e: yarn install dependencies\"\n+          working_directory: ~/workbench/e2e\n+          command: yarn install --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - e2e/node_modules\n+          key: << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+\n+  api_cache:\n+    description: \"workbench/api: save and restore gradle cache\"\n+    parameters:\n+      save:\n+        type: boolean\n+        default: false\n+      restore:\n+        type: boolean\n+        default: false\n+    steps:\n+      - when:\n+          condition: << parameters.save >>\n+          steps:\n+            - save_cache:\n+                paths:\n+                  - ~/.gradle/caches\n+                  - ~/.gradle/wrapper\n+                  - ~/.m2\n+                  - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n+                key: v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}-{{ .Branch }}\n+      - when:\n+          condition: << parameters.restore >>\n+          steps:\n+            - restore_cache:\n+                keys:\n+                  - v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}-{{ .Branch }}\n+                  - v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}-master\n+                  - v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+\n+  run_e2e_test:\n+    steps:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwNjE0Mg==", "bodyText": "nit: either call it e2e or Puppeteer throughout.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415806142", "createdAt": "2020-04-27T13:20:23Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code\n+\n+  ui_dependencies:\n+    description: \"workbench/ui: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n+      # caching: https://circleci.com/docs/2.0/caching/\n+      - restore_cache:\n+          keys:\n+            # restore cache strategy:\n+            # Check for the latest cache from your branch.\n+            # If that fails, then check for the latest from master branch.\n+            # If that fails, then check for the latest from any branch\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/ui: yarn install dependencies\"\n+          working_directory: ~/workbench/ui\n+          command: yarn install --verbose --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - ui/node_modules\n+          key: << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+\n+  e2e_dependencies:\n+    description: \"workbench/e2e: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n       - restore_cache:\n           keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/e2e: yarn install dependencies\"\n+          working_directory: ~/workbench/e2e\n+          command: yarn install --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - e2e/node_modules\n+          key: << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+\n+  api_cache:\n+    description: \"workbench/api: save and restore gradle cache\"\n+    parameters:\n+      save:\n+        type: boolean\n+        default: false\n+      restore:\n+        type: boolean\n+        default: false\n+    steps:\n+      - when:\n+          condition: << parameters.save >>\n+          steps:\n+            - save_cache:\n+                paths:\n+                  - ~/.gradle/caches\n+                  - ~/.gradle/wrapper\n+                  - ~/.m2\n+                  - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n+                key: v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}-{{ .Branch }}\n+      - when:\n+          condition: << parameters.restore >>\n+          steps:\n+            - restore_cache:\n+                keys:\n+                  - v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}-{{ .Branch }}\n+                  - v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}-master\n+                  - v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+\n+  run_e2e_test:\n+    steps:\n+      - run:\n+          name: Export Puppeteer test environment variables\n+          command: |\n+            echo 'export USER_NAME=$PUPPETEER_TEST_USER' >> $BASH_ENV\n+            echo 'export PASSWORD=$PUPPETEER_TEST_USER_PASSWORD' >> $BASH_ENV\n+            echo 'export INVITATION_KEY=$PUPPETEER_TEST_REGISTRATION_KEY' >> $BASH_ENV\n+            source $BASH_ENV\n+      - run:\n+          name: Run Puppeteer test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwNzE1Ng==", "bodyText": "Please file a Jira ticket for this comment to follow up. I don't think we need the comment here (it won't age well most likely).", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415807156", "createdAt": "2020-04-27T13:21:39Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -46,52 +232,41 @@ jobs:\n           working_directory: ~/workbench/api\n           command: ./project.rb gradle compile__bigquerytest__Java compile__integration__Java\n       - run:\n-          name: Run Java Unit Tests\n+          name: Run Java unit tests\n           working_directory: ~/workbench/api\n           command: ./project.rb test\n       - run:\n           # Lint last; it's more important to surface test failures early.\n           name: Java linting\n           working_directory: ~/workbench/api\n           command: ./gradlew spotlessCheck\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-            - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n-          key: api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - api_cache:\n+          save: true\n \n   api-local-test:\n+    # Refers to https://circleci.com/docs/2.0/configuration-reference/#resource_class\n+    resource_class: medium+\n     docker:\n       - image: allofustest/workbench:buildimage-0.0.16\n+      # Any known reason for not using circleci/mysql:5.7-ram? better performance and mitigates I/O contention.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwNzYxNw==", "bodyText": "please add a job description", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415807617", "createdAt": "2020-04-27T13:22:18Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -265,67 +402,38 @@ jobs:\n           paths:\n             - ui\n \n-  # Run suite of Puppeteer end-to-end QA tests, pointed at the Workbench \"test\" environment.\n+  # Run Puppeteer end-to-end UI tests on Workbench deployed \"test\" environment.\n   puppeteer-e2e-test:\n     <<: *defaults", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 495}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwODM1MQ==", "bodyText": "Can we not do this in an idempotent way with the cache facility? I'm nervous that we've introduced an order dependency here.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415808351", "createdAt": "2020-04-27T13:23:19Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -265,67 +402,38 @@ jobs:\n           paths:\n             - ui\n \n-  # Run suite of Puppeteer end-to-end QA tests, pointed at the Workbench \"test\" environment.\n+  # Run Puppeteer end-to-end UI tests on Workbench deployed \"test\" environment.\n   puppeteer-e2e-test:\n     <<: *defaults\n     docker:\n-      - image: circleci/node:13.10.1-browsers\n-        environment:\n-          NODE_ENV: development\n+      - image: circleci/node:12.16.2-browsers\n+    environment:\n+      WORKBENCH_ENV: dev\n+      CI: true\n+      NODE_ENV: development\n     working_directory: ~/workbench\n     parallelism: 3\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - v2-e2e-test-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n-          - v2-e2e-test-cache-\n-      - run:\n-          name: Initialize Yarn\n-          working_directory: ~/workbench/e2e\n-          command: yarn cache clean && yarn install --frozen-lockfile\n-      - save_cache:\n-          paths:\n-            - ~/.cache/yarn\n-          key: v2-e2e-test-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n-      - run:\n-          name: Update Puppeteer Environment Variables\n-          command: |\n-            echo 'export USER_NAME=$PUPPETEER_TEST_USER' >> $BASH_ENV\n-            echo 'export PASSWORD=$PUPPETEER_TEST_USER_PASSWORD' >> $BASH_ENV\n-            echo 'export INVITATION_KEY=$PUPPETEER_TEST_REGISTRATION_KEY' >> $BASH_ENV\n-            source $BASH_ENV\n-      - run:\n-          name: Run e2e tests (Puppeteer and Jest)\n-          working_directory: ~/workbench/e2e\n-          command: yarn test:ci $(circleci tests glob \"tests/**/*.spec.ts\" | circleci tests split --split-by=timings --timings-type=classname --show-counts)\n-      - store_artifacts:\n-          path: e2e/logs\n-          destination: logs\n-      - store_test_results:\n-          path: ~/workbench/e2e/logs\n-      \n+      - git_checkout\n+      - e2e_dependencies\n+      - run_e2e_test\n+\n   ui-deploy-to-test:\n     <<: *defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      # Use the ui-build-test workspace here to avoid redoing the setup.\n+      - git_checkout\n+      # Use \"ui-build-test\" job's workspace here to avoid redoing the setup.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 550}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwODYyNQ==", "bodyText": "Please add a job description.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415808625", "createdAt": "2020-04-27T13:23:38Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -337,63 +445,75 @@ jobs:\n   deploy-staging:\n     <<: *defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n+      - git_checkout\n+      - api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - deploy:\n           working_directory: ~/workbench/deploy\n           command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n             ./project.rb deploy \\\n               --project all-of-us-rw-staging \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n+              --account << pipeline.parameters.circleci_service_account >> \\\n               --git-version \"${CIRCLE_TAG}\" \\\n               --app-version \"${CIRCLE_TAG}\" \\\n               --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n               --key-file circle-sa-key.json \\\n               --promote\n+          name: deploy to staging env\n \n   deploy-perf:\n     <<: *defaults\n     steps:\n-      - checkout\n-      - run:\n-          command: git submodule update --init --recursive\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n+      - git_checkout\n+      - api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - deploy:\n           name: Deploy to Perf Environment\n           working_directory: ~/workbench/deploy\n           command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n             ./project.rb deploy \\\n               --project all-of-us-rw-perf \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n+              --account << pipeline.parameters.circleci_service_account >> \\\n               --git-version \"${CIRCLE_TAG}\" \\\n               --app-version \"${CIRCLE_TAG}\" \\\n               --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n               --key-file circle-sa-key.json \\\n               --promote\n \n-# See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n-filter_master: &filter_master\n-  filters:\n-    branches:\n-      only: master\n-filter_releases: &filter_releases\n-  filters:\n-    branches:\n-      ignore: /.*/\n-    tags:\n-      only: /^v.*/\n+\n+  # Deploy local UI server and run Puppeteer 2e2 tests\n+  e2e-local-ui:\n+    <<: *defaults", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 643}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwOTU5OA==", "bodyText": "Maybe comment somewhere on which values need to live in this file vs at the various levels in the CircleCI configs.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415809598", "createdAt": "2020-04-27T13:24:56Z", "author": {"login": "jaycarlton"}, "path": "e2e/package.json", "diffHunk": "@@ -9,7 +9,7 @@\n     \"test\": \"cross-env WORKBENCH_ENV=dev jest\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMTAzODI4", "url": "https://github.com/all-of-us/workbench/pull/3479#pullrequestreview-401103828", "createdAt": "2020-04-27T16:07:13Z", "commit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "state": "COMMENTED", "comments": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjowNzoxM1rOGMrVzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzo0NDowMFrOGMvxSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk0NjE4OQ==", "bodyText": "How about filter_only_master_branch, filter_only_release_tags, and filter_pull_request_branch? I think we ought to keep filter_ string because uses circleci key filters:.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415946189", "createdAt": "2020-04-27T16:07:13Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3MDQ0Ng=="}, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk0OTEwMg==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415949102", "createdAt": "2020-04-27T16:11:03Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3NDI5MQ=="}, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk0OTI1MQ==", "bodyText": "Let me know if I can add more types of files in filter regex. I am using this new command in puppeteer-e2e-local-ui job. Is there any other jobs could use this filter too to avoid unnecessary builds.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415949251", "createdAt": "2020-04-27T16:11:13Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3MjgwNg=="}, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk1MjE3OA==", "bodyText": "Done. also renamed e2e_dependencies command name to install_e2e_dependencies.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415952178", "createdAt": "2020-04-27T16:14:59Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code\n+\n+  ui_dependencies:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5OTE4Nw=="}, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk1OTU4MA==", "bodyText": "prefix command names with a verb is a good idea. api_cache renamed to manage_api_cache.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415959580", "createdAt": "2020-04-27T16:24:20Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code\n+\n+  ui_dependencies:\n+    description: \"workbench/ui: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n+      # caching: https://circleci.com/docs/2.0/caching/\n+      - restore_cache:\n+          keys:\n+            # restore cache strategy:\n+            # Check for the latest cache from your branch.\n+            # If that fails, then check for the latest from master branch.\n+            # If that fails, then check for the latest from any branch\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/ui: yarn install dependencies\"\n+          working_directory: ~/workbench/ui\n+          command: yarn install --verbose --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - ui/node_modules\n+          key: << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+\n+  e2e_dependencies:\n+    description: \"workbench/e2e: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n       - restore_cache:\n           keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/e2e: yarn install dependencies\"\n+          working_directory: ~/workbench/e2e\n+          command: yarn install --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - e2e/node_modules\n+          key: << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+\n+  api_cache:\n+    description: \"workbench/api: save and restore gradle cache\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3OTk0NQ=="}, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk2MjcxOA==", "bodyText": "renamed to checkout_init_git for start with a verb and keep it shorter. I'm not a fan of _and_ in names.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415962718", "createdAt": "2020-04-27T16:28:28Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5OTgyMA=="}, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk2ODc1Mw==", "bodyText": "yes yes. added new parameter key_prefix\nkey_prefix:\n        type: string\n        default: << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415968753", "createdAt": "2020-04-27T16:36:09Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code\n+\n+  ui_dependencies:\n+    description: \"workbench/ui: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n+      # caching: https://circleci.com/docs/2.0/caching/\n+      - restore_cache:\n+          keys:\n+            # restore cache strategy:\n+            # Check for the latest cache from your branch.\n+            # If that fails, then check for the latest from master branch.\n+            # If that fails, then check for the latest from any branch\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3NjUwOA=="}, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk3NDU5Mg==", "bodyText": "mixed styles were driving me crazy. I like sentence case better than title case.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415974592", "createdAt": "2020-04-27T16:43:48Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code\n+\n+  ui_dependencies:\n+    description: \"workbench/ui: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n+      # caching: https://circleci.com/docs/2.0/caching/\n+      - restore_cache:\n+          keys:\n+            # restore cache strategy:\n+            # Check for the latest cache from your branch.\n+            # If that fails, then check for the latest from master branch.\n+            # If that fails, then check for the latest from any branch\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/ui: yarn install dependencies\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3NzA3NA=="}, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk3NDY4NQ==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415974685", "createdAt": "2020-04-27T16:43:56Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code\n+\n+  ui_dependencies:\n+    description: \"workbench/ui: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n+      # caching: https://circleci.com/docs/2.0/caching/\n+      - restore_cache:\n+          keys:\n+            # restore cache strategy:\n+            # Check for the latest cache from your branch.\n+            # If that fails, then check for the latest from master branch.\n+            # If that fails, then check for the latest from any branch\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/ui: yarn install dependencies\"\n+          working_directory: ~/workbench/ui\n+          command: yarn install --verbose --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - ui/node_modules\n+          key: << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+\n+  e2e_dependencies:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwMDIzNA=="}, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk3Nzk4MA==", "bodyText": "It's a good idea. No one ever asked or requested this feature so far. It deserves a new ticket for that change.\nI don't have answer to second question.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415977980", "createdAt": "2020-04-27T16:48:24Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code\n+\n+  ui_dependencies:\n+    description: \"workbench/ui: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n+      # caching: https://circleci.com/docs/2.0/caching/\n+      - restore_cache:\n+          keys:\n+            # restore cache strategy:\n+            # Check for the latest cache from your branch.\n+            # If that fails, then check for the latest from master branch.\n+            # If that fails, then check for the latest from any branch\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/ui: yarn install dependencies\"\n+          working_directory: ~/workbench/ui\n+          command: yarn install --verbose --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - ui/node_modules\n+          key: << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+\n+  e2e_dependencies:\n+    description: \"workbench/e2e: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3ODMwOA=="}, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk5NTQwMg==", "bodyText": "Using enum type for parameter adds code complexity. The when clause under steps does not support equality, only Booleans. I will need to do the compare logic inside a shell using if clauses. I'd rather not to write more new code, it might increase chance of introducing new bugs.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r415995402", "createdAt": "2020-04-27T17:12:06Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code\n+\n+  ui_dependencies:\n+    description: \"workbench/ui: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n+      # caching: https://circleci.com/docs/2.0/caching/\n+      - restore_cache:\n+          keys:\n+            # restore cache strategy:\n+            # Check for the latest cache from your branch.\n+            # If that fails, then check for the latest from master branch.\n+            # If that fails, then check for the latest from any branch\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/ui: yarn install dependencies\"\n+          working_directory: ~/workbench/ui\n+          command: yarn install --verbose --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - ui/node_modules\n+          key: << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+\n+  e2e_dependencies:\n+    description: \"workbench/e2e: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n       - restore_cache:\n           keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/e2e: yarn install dependencies\"\n+          working_directory: ~/workbench/e2e\n+          command: yarn install --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - e2e/node_modules\n+          key: << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+\n+  api_cache:\n+    description: \"workbench/api: save and restore gradle cache\"\n+    parameters:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5MTUyMQ=="}, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAwMTAxOA==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416001018", "createdAt": "2020-04-27T17:20:16Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code\n+\n+  ui_dependencies:\n+    description: \"workbench/ui: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n+      # caching: https://circleci.com/docs/2.0/caching/\n+      - restore_cache:\n+          keys:\n+            # restore cache strategy:\n+            # Check for the latest cache from your branch.\n+            # If that fails, then check for the latest from master branch.\n+            # If that fails, then check for the latest from any branch\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/ui: yarn install dependencies\"\n+          working_directory: ~/workbench/ui\n+          command: yarn install --verbose --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - ui/node_modules\n+          key: << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+\n+  e2e_dependencies:\n+    description: \"workbench/e2e: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n       - restore_cache:\n           keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/e2e: yarn install dependencies\"\n+          working_directory: ~/workbench/e2e\n+          command: yarn install --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - e2e/node_modules\n+          key: << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+\n+  api_cache:\n+    description: \"workbench/api: save and restore gradle cache\"\n+    parameters:\n+      save:\n+        type: boolean\n+        default: false\n+      restore:\n+        type: boolean\n+        default: false\n+    steps:\n+      - when:\n+          condition: << parameters.save >>\n+          steps:\n+            - save_cache:\n+                paths:\n+                  - ~/.gradle/caches\n+                  - ~/.gradle/wrapper\n+                  - ~/.m2\n+                  - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n+                key: v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}-{{ .Branch }}\n+      - when:\n+          condition: << parameters.restore >>\n+          steps:\n+            - restore_cache:\n+                keys:\n+                  - v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}-{{ .Branch }}\n+                  - v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}-master\n+                  - v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+\n+  run_e2e_test:\n+    steps:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwNTcyNA=="}, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAwMzgzMw==", "bodyText": "ah, I completely missed this, setting environment variables in a step. Done.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416003833", "createdAt": "2020-04-27T17:24:16Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code\n+\n+  ui_dependencies:\n+    description: \"workbench/ui: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n+      # caching: https://circleci.com/docs/2.0/caching/\n+      - restore_cache:\n+          keys:\n+            # restore cache strategy:\n+            # Check for the latest cache from your branch.\n+            # If that fails, then check for the latest from master branch.\n+            # If that fails, then check for the latest from any branch\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/ui: yarn install dependencies\"\n+          working_directory: ~/workbench/ui\n+          command: yarn install --verbose --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - ui/node_modules\n+          key: << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+\n+  e2e_dependencies:\n+    description: \"workbench/e2e: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n       - restore_cache:\n           keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/e2e: yarn install dependencies\"\n+          working_directory: ~/workbench/e2e\n+          command: yarn install --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - e2e/node_modules\n+          key: << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+\n+  api_cache:\n+    description: \"workbench/api: save and restore gradle cache\"\n+    parameters:\n+      save:\n+        type: boolean\n+        default: false\n+      restore:\n+        type: boolean\n+        default: false\n+    steps:\n+      - when:\n+          condition: << parameters.save >>\n+          steps:\n+            - save_cache:\n+                paths:\n+                  - ~/.gradle/caches\n+                  - ~/.gradle/wrapper\n+                  - ~/.m2\n+                  - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n+                key: v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}-{{ .Branch }}\n+      - when:\n+          condition: << parameters.restore >>\n+          steps:\n+            - restore_cache:\n+                keys:\n+                  - v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}-{{ .Branch }}\n+                  - v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}-master\n+                  - v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+\n+  run_e2e_test:\n+    steps:\n+      - run:\n+          name: Export Puppeteer test environment variables\n+          command: |\n+            echo 'export USER_NAME=$PUPPETEER_TEST_USER' >> $BASH_ENV", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc4MDc1Mg=="}, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAwNTM3MA==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416005370", "createdAt": "2020-04-27T17:26:20Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code\n+\n+  ui_dependencies:\n+    description: \"workbench/ui: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n+      # caching: https://circleci.com/docs/2.0/caching/\n+      - restore_cache:\n+          keys:\n+            # restore cache strategy:\n+            # Check for the latest cache from your branch.\n+            # If that fails, then check for the latest from master branch.\n+            # If that fails, then check for the latest from any branch\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/ui: yarn install dependencies\"\n+          working_directory: ~/workbench/ui\n+          command: yarn install --verbose --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - ui/node_modules\n+          key: << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+\n+  e2e_dependencies:\n+    description: \"workbench/e2e: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n       - restore_cache:\n           keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/e2e: yarn install dependencies\"\n+          working_directory: ~/workbench/e2e\n+          command: yarn install --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - e2e/node_modules\n+          key: << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+\n+  api_cache:\n+    description: \"workbench/api: save and restore gradle cache\"\n+    parameters:\n+      save:\n+        type: boolean\n+        default: false\n+      restore:\n+        type: boolean\n+        default: false\n+    steps:\n+      - when:\n+          condition: << parameters.save >>\n+          steps:\n+            - save_cache:\n+                paths:\n+                  - ~/.gradle/caches\n+                  - ~/.gradle/wrapper\n+                  - ~/.m2\n+                  - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n+                key: v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}-{{ .Branch }}\n+      - when:\n+          condition: << parameters.restore >>\n+          steps:\n+            - restore_cache:\n+                keys:\n+                  - v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}-{{ .Branch }}\n+                  - v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}-master\n+                  - v1-api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+\n+  run_e2e_test:\n+    steps:\n+      - run:\n+          name: Export Puppeteer test environment variables\n+          command: |\n+            echo 'export USER_NAME=$PUPPETEER_TEST_USER' >> $BASH_ENV\n+            echo 'export PASSWORD=$PUPPETEER_TEST_USER_PASSWORD' >> $BASH_ENV\n+            echo 'export INVITATION_KEY=$PUPPETEER_TEST_REGISTRATION_KEY' >> $BASH_ENV\n+            source $BASH_ENV\n+      - run:\n+          name: Run Puppeteer test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwNjE0Mg=="}, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAwNTU5MA==", "bodyText": "me too!", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416005590", "createdAt": "2020-04-27T17:26:35Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -46,52 +232,41 @@ jobs:\n           working_directory: ~/workbench/api\n           command: ./project.rb gradle compile__bigquerytest__Java compile__integration__Java\n       - run:\n-          name: Run Java Unit Tests\n+          name: Run Java unit tests", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5NTc4Mw=="}, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAxMTM5MA==", "bodyText": "Removed comment. filed ticket https://precisionmedicineinitiative.atlassian.net/browse/RW-4836", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416011390", "createdAt": "2020-04-27T17:34:08Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -46,52 +232,41 @@ jobs:\n           working_directory: ~/workbench/api\n           command: ./project.rb gradle compile__bigquerytest__Java compile__integration__Java\n       - run:\n-          name: Run Java Unit Tests\n+          name: Run Java unit tests\n           working_directory: ~/workbench/api\n           command: ./project.rb test\n       - run:\n           # Lint last; it's more important to surface test failures early.\n           name: Java linting\n           working_directory: ~/workbench/api\n           command: ./gradlew spotlessCheck\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-            - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n-          key: api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - api_cache:\n+          save: true\n \n   api-local-test:\n+    # Refers to https://circleci.com/docs/2.0/configuration-reference/#resource_class\n+    resource_class: medium+\n     docker:\n       - image: allofustest/workbench:buildimage-0.0.16\n+      # Any known reason for not using circleci/mysql:5.7-ram? better performance and mitigates I/O contention.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwNzE1Ng=="}, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAxMjAyMA==", "bodyText": "no, I have not. It sounds like a good thing to try and have.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416012020", "createdAt": "2020-04-27T17:35:01Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -46,52 +232,41 @@ jobs:\n           working_directory: ~/workbench/api\n           command: ./project.rb gradle compile__bigquerytest__Java compile__integration__Java\n       - run:\n-          name: Run Java Unit Tests\n+          name: Run Java unit tests\n           working_directory: ~/workbench/api\n           command: ./project.rb test\n       - run:\n           # Lint last; it's more important to surface test failures early.\n           name: Java linting\n           working_directory: ~/workbench/api\n           command: ./gradlew spotlessCheck\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-            - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n-          key: api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - api_cache:\n+          save: true\n \n   api-local-test:\n+    # Refers to https://circleci.com/docs/2.0/configuration-reference/#resource_class\n+    resource_class: medium+\n     docker:\n       - image: allofustest/workbench:buildimage-0.0.16\n+      # Any known reason for not using circleci/mysql:5.7-ram? better performance and mitigates I/O contention.\n+      # Refers to https://circleci.com/docs/2.0/circleci-images/#service-image-variant\n       - image: mysql:5.7\n         environment:\n           - MYSQL_ROOT_PASSWORD=ubuntu", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5NjUxOQ=="}, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 275}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAxMjI3NA==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416012274", "createdAt": "2020-04-27T17:35:21Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -105,142 +280,104 @@ jobs:\n           name: Local API Tests on Running Server\n           working_directory: ~/workbench/api\n           command: ./project.rb start-local-api && ./project.rb run-local-api-tests && ./project.rb stop-local-api\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-            - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n-          key: api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - api_cache:\n+          save: true\n \n   api-deploy-to-test:\n     <<: *java_defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n+      - git_checkout\n       # Note: most of the time spent here appears to be in Gradle / App Engine\n       # deployment. We tried more aggressively caching outputs via Circle\n       # workspaces, but that seemed to have a negligible effect on speed. It's\n       # also tricky to pick specific sub directories since the API deploy\n       # touches several top level folders {common,}api.\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - run: *activate_service_accont_creds\n+      - api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - deploy:\n           name: Deploy to App Engine\n           working_directory: ~/workbench/api\n           command: |\n             ./project.rb deploy \\\n               --project all-of-us-workbench-test \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n+              --account << pipeline.parameters.circleci_service_account >> \\\n               --version circle-ci-test \\\n               --key-file circle-sa-key.json \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwMDk2Mw=="}, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 352}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAxMzM2OQ==", "bodyText": "It is only called here. If there are other jobs that could use scan, create it as a command makes sense.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416013369", "createdAt": "2020-04-27T17:36:43Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -105,142 +280,104 @@ jobs:\n           name: Local API Tests on Running Server\n           working_directory: ~/workbench/api\n           command: ./project.rb start-local-api && ./project.rb run-local-api-tests && ./project.rb stop-local-api\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-            - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n-          key: api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - api_cache:\n+          save: true\n \n   api-deploy-to-test:\n     <<: *java_defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n+      - git_checkout\n       # Note: most of the time spent here appears to be in Gradle / App Engine\n       # deployment. We tried more aggressively caching outputs via Circle\n       # workspaces, but that seemed to have a negligible effect on speed. It's\n       # also tricky to pick specific sub directories since the API deploy\n       # touches several top level folders {common,}api.\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - run: *activate_service_accont_creds\n+      - api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - deploy:\n           name: Deploy to App Engine\n           working_directory: ~/workbench/api\n           command: |\n             ./project.rb deploy \\\n               --project all-of-us-workbench-test \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n+              --account << pipeline.parameters.circleci_service_account >> \\\n               --version circle-ci-test \\\n               --key-file circle-sa-key.json \\\n               --promote\n \n+\n   api-deps-check:\n     <<: *java_defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n+      - git_checkout\n       - run:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwMTQ5MA=="}, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 362}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAxNjc1Nw==", "bodyText": "description is not allowed on job's level.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416016757", "createdAt": "2020-04-27T17:41:13Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -265,67 +402,38 @@ jobs:\n           paths:\n             - ui\n \n-  # Run suite of Puppeteer end-to-end QA tests, pointed at the Workbench \"test\" environment.\n+  # Run Puppeteer end-to-end UI tests on Workbench deployed \"test\" environment.\n   puppeteer-e2e-test:\n     <<: *defaults", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwNzYxNw=="}, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 495}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAxNzQ5OQ==", "bodyText": "I think you made that change, right? I kept logic unchanged. :)", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416017499", "createdAt": "2020-04-27T17:42:11Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -265,67 +402,38 @@ jobs:\n           paths:\n             - ui\n \n-  # Run suite of Puppeteer end-to-end QA tests, pointed at the Workbench \"test\" environment.\n+  # Run Puppeteer end-to-end UI tests on Workbench deployed \"test\" environment.\n   puppeteer-e2e-test:\n     <<: *defaults\n     docker:\n-      - image: circleci/node:13.10.1-browsers\n-        environment:\n-          NODE_ENV: development\n+      - image: circleci/node:12.16.2-browsers\n+    environment:\n+      WORKBENCH_ENV: dev\n+      CI: true\n+      NODE_ENV: development\n     working_directory: ~/workbench\n     parallelism: 3\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - v2-e2e-test-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n-          - v2-e2e-test-cache-\n-      - run:\n-          name: Initialize Yarn\n-          working_directory: ~/workbench/e2e\n-          command: yarn cache clean && yarn install --frozen-lockfile\n-      - save_cache:\n-          paths:\n-            - ~/.cache/yarn\n-          key: v2-e2e-test-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n-      - run:\n-          name: Update Puppeteer Environment Variables\n-          command: |\n-            echo 'export USER_NAME=$PUPPETEER_TEST_USER' >> $BASH_ENV\n-            echo 'export PASSWORD=$PUPPETEER_TEST_USER_PASSWORD' >> $BASH_ENV\n-            echo 'export INVITATION_KEY=$PUPPETEER_TEST_REGISTRATION_KEY' >> $BASH_ENV\n-            source $BASH_ENV\n-      - run:\n-          name: Run e2e tests (Puppeteer and Jest)\n-          working_directory: ~/workbench/e2e\n-          command: yarn test:ci $(circleci tests glob \"tests/**/*.spec.ts\" | circleci tests split --split-by=timings --timings-type=classname --show-counts)\n-      - store_artifacts:\n-          path: e2e/logs\n-          destination: logs\n-      - store_test_results:\n-          path: ~/workbench/e2e/logs\n-      \n+      - git_checkout\n+      - e2e_dependencies\n+      - run_e2e_test\n+\n   ui-deploy-to-test:\n     <<: *defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      # Use the ui-build-test workspace here to avoid redoing the setup.\n+      - git_checkout\n+      # Use \"ui-build-test\" job's workspace here to avoid redoing the setup.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwODM1MQ=="}, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 550}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAxODc2MQ==", "bodyText": "tried and reverted. deploy arg for \"test\" is different from \"perf\" and \"staging\". I didn't like it as a command because code were messy and alot.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416018761", "createdAt": "2020-04-27T17:44:00Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -264,136 +402,98 @@ jobs:\n           root: .\n           paths:\n             - ui\n-\n-  # Run suite of Puppeteer end-to-end QA tests, pointed at the Workbench \"test\" environment.\n-  puppeteer-e2e-test:\n-    <<: *defaults\n-    docker:\n-      - image: circleci/node:13.10.1-browsers\n-        environment:\n-          NODE_ENV: development\n-    working_directory: ~/workbench\n-    parallelism: 3\n-    steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - v2-e2e-test-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n-          - v2-e2e-test-cache-\n-      - run:\n-          name: Initialize Yarn\n-          working_directory: ~/workbench/e2e\n-          command: yarn cache clean && yarn install --frozen-lockfile\n-      - save_cache:\n-          paths:\n-            - ~/.cache/yarn\n-          key: v2-e2e-test-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n-      - run:\n-          name: Update Puppeteer Environment Variables\n-          command: |\n-            echo 'export USER_NAME=$PUPPETEER_TEST_USER' >> $BASH_ENV\n-            echo 'export PASSWORD=$PUPPETEER_TEST_USER_PASSWORD' >> $BASH_ENV\n-            echo 'export INVITATION_KEY=$PUPPETEER_TEST_REGISTRATION_KEY' >> $BASH_ENV\n-            source $BASH_ENV\n-      - run:\n-          name: Run e2e tests (Puppeteer and Jest)\n-          working_directory: ~/workbench/e2e\n-          command: yarn test:ci $(circleci tests glob \"tests/**/*.spec.ts\" | circleci tests split --split-by=timings --timings-type=classname --show-counts)\n-      - store_artifacts:\n-          path: e2e/logs\n-          destination: logs\n-      - store_test_results:\n-          path: ~/workbench/e2e/logs\n       \n   ui-deploy-to-test:\n-    <<: *defaults\n+    executor: workbench_docker\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      # Use the ui-build-test workspace here to avoid redoing the setup.\n+      # - git_checkout\n+      # Use \"ui-build-test\" job's workspace here to avoid redoing the setup.\n       - attach_workspace:\n           at: .\n-      - restore_cache:\n-          keys:\n-          - ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n-          - ui-cache-\n-      - deploy:\n-          name: Deploy UI App to App Engine\n-          working_directory: ~/workbench/ui\n-          command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n-            ./project.rb deploy-ui \\\n-              --project all-of-us-workbench-test \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n-              --version circle-ci-test \\\n-              --key-file circle-sa-key.json \\\n-              --promote\n+      - ui_dependencies\n+      - activate_service_accont_creds\n+      - deploy_appengine:\n+          project_name: \"all-of-us-workbench-test\"\n+          deploy_arg: \"deploy-ui\"\n+          working_dir: ~/workbench/ui\n+\n \n   # In staging and perf, we deploy all at once in order to track and control\n   # the release for a tagged version only. In \"test\", we maintain individual\n   # release jobs for API and UI to allow faster deploys and because we lack\n   # a version tag.\n   deploy-staging:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NjYzNA=="}, "originalCommit": {"oid": "d2aa2ecc80908d82e5e2ace89a6430c679eb51d6"}, "originalPosition": 620}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMjAwMzQ3", "url": "https://github.com/all-of-us/workbench/pull/3479#pullrequestreview-401200347", "createdAt": "2020-04-27T18:07:19Z", "commit": {"oid": "ffda9b5de764b5e85be70c1ec5d64aa33f1aa70a"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODowNzoxOVrOGMwy9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODoxNjozMlrOGMxLcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzNTU3Mw==", "bodyText": "I don't think this makes sense as a parameter, it is unlikely we're going to want to invalidate all of our caches simultaneously", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416035573", "createdAt": "2020-04-27T18:07:19Z", "author": {"login": "calbach"}, "path": ".circleci/config.yml", "diffHunk": "@@ -1,17 +1,26 @@\n-version: 2\n+version: 2.1\n \n+# -------------------------\n+#   PARAMETERS\n+# -------------------------\n+parameters:\n+  cache_key_version:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffda9b5de764b5e85be70c1ec5d64aa33f1aa70a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzNjQ5Nw==", "bodyText": "Cool", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416036497", "createdAt": "2020-04-27T18:08:45Z", "author": {"login": "calbach"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,203 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_only_master_branch: &filter_only_master_branch\n+    tags:\n+      ignore: /.*/\n+    branches:\n+      only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_only_release_tags: &filter_only_release_tags\n+    branches:\n+      ignore: /.*/\n+    tags:\n+      # Workbench release tag format example: v5-3-rc1\n+      only: /^v[0-9]+-[0-9]+-rc[0-9]+$/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pull_request_branch: &filter_pull_request_branch\n+    tags:\n+      ignore: /.*/\n+    branches:\n+      ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  checkout_init_git:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halt job and succeed early if no code changes on master branch\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Halt job and succeed early if no code changes on master branch\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to code in specified directory\"\n+    parameters:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffda9b5de764b5e85be70c1ec5d64aa33f1aa70a"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA0MDQ3Nw==", "bodyText": "This is definitely a new job - should this be a separate PR?\nALso, I thought the plan was to run a local UI and API server. Did you try to get this working?", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416040477", "createdAt": "2020-04-27T18:14:26Z", "author": {"login": "calbach"}, "path": ".circleci/config.yml", "diffHunk": "@@ -337,63 +448,74 @@ jobs:\n   deploy-staging:\n     <<: *defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n+      - checkout_init_git\n+      - manage_api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - deploy:\n           working_directory: ~/workbench/deploy\n           command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n             ./project.rb deploy \\\n               --project all-of-us-rw-staging \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n+              --account << pipeline.parameters.circleci_service_account >> \\\n               --git-version \"${CIRCLE_TAG}\" \\\n               --app-version \"${CIRCLE_TAG}\" \\\n               --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n               --key-file circle-sa-key.json \\\n               --promote\n+          name: Deploy API and UI to \"staging\" App Engine\n \n   deploy-perf:\n     <<: *defaults\n     steps:\n-      - checkout\n-      - run:\n-          command: git submodule update --init --recursive\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n+      - checkout_init_git\n+      - manage_api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - deploy:\n-          name: Deploy to Perf Environment\n           working_directory: ~/workbench/deploy\n           command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n             ./project.rb deploy \\\n               --project all-of-us-rw-perf \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n+              --account << pipeline.parameters.circleci_service_account >> \\\n               --git-version \"${CIRCLE_TAG}\" \\\n               --app-version \"${CIRCLE_TAG}\" \\\n               --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n               --key-file circle-sa-key.json \\\n               --promote\n+          name: Deploy API and UI to \"perf\" App Engine\n+\n+  # Deploy local UI server and run Puppeteer 2e2 tests\n+  puppeteer-e2e-local-ui:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffda9b5de764b5e85be70c1ec5d64aa33f1aa70a"}, "originalPosition": 664}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA0MTg0Mw==", "bodyText": "We need a comment above explaining why it has been set to medium+", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416041843", "createdAt": "2020-04-27T18:16:32Z", "author": {"login": "calbach"}, "path": ".circleci/config.yml", "diffHunk": "@@ -71,176 +274,107 @@ jobs:\n           - MYSQL_PASSWORD=ubuntu\n     working_directory: ~/workbench\n     environment:\n-      # Drop to ~1.5G; the local API server starts two Java processes (the API\n-      # server and the cron emulator). The default machine has 4GB, so we want\n-      # the Java memory limit to be below half of that: other things on the\n-      # machine need memory as well. Using 2G here manifested in 137 errors.\n-      # If this limit proves to be too low, an alternative would be to use a\n-      # larger resource class:\n-      #   https://circleci.com/docs/2.0/configuration-reference/#resource_class", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE4MTUyMQ=="}, "originalCommit": {"oid": "73353941de84b7b2d7791fb3f89c8ac0836deec7"}, "originalPosition": 301}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMjM3MTAx", "url": "https://github.com/all-of-us/workbench/pull/3479#pullrequestreview-401237101", "createdAt": "2020-04-27T18:55:50Z", "commit": {"oid": "34800c3001e0e487d9c67bfe966432d98793eda2"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo1NTo1MFrOGMyzaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxOTowNDoxN1rOGMzIwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2ODQ1Nw==", "bodyText": "right, I didn't think of that. Original comment explained why this job would need a bigger machine. I added comment back now.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416068457", "createdAt": "2020-04-27T18:55:50Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -71,176 +274,107 @@ jobs:\n           - MYSQL_PASSWORD=ubuntu\n     working_directory: ~/workbench\n     environment:\n-      # Drop to ~1.5G; the local API server starts two Java processes (the API\n-      # server and the cron emulator). The default machine has 4GB, so we want\n-      # the Java memory limit to be below half of that: other things on the\n-      # machine need memory as well. Using 2G here manifested in 137 errors.\n-      # If this limit proves to be too low, an alternative would be to use a\n-      # larger resource class:\n-      #   https://circleci.com/docs/2.0/configuration-reference/#resource_class", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE4MTUyMQ=="}, "originalCommit": {"oid": "73353941de84b7b2d7791fb3f89c8ac0836deec7"}, "originalPosition": 301}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA3MTA2OA==", "bodyText": "It's ready if someone ever want to. install_ui_dependencies and install_api_dependencies have a command parameter which defaults to this pipeline parameter, user can choose to change it or use it as default.\ninstall_ui_dependencies:\n    description: \"workbench/ui: yarn install, save and restore cache\"\n    parameters:\n        version:\n           type: string\n           default: << pipeline.parameters.cache_key_version >>", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416071068", "createdAt": "2020-04-27T18:59:49Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -1,17 +1,26 @@\n-version: 2\n+version: 2.1\n \n+# -------------------------\n+#   PARAMETERS\n+# -------------------------\n+parameters:\n+  cache_key_version:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzNTU3Mw=="}, "originalCommit": {"oid": "ffda9b5de764b5e85be70c1ec5d64aa33f1aa70a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA3MzkyMg==", "bodyText": "Removed it from this PR. BTW, I couldn't get local ui/api working. I spent days on it, still having issues, I need your help!", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416073922", "createdAt": "2020-04-27T19:04:17Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -337,63 +448,74 @@ jobs:\n   deploy-staging:\n     <<: *defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n+      - checkout_init_git\n+      - manage_api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - deploy:\n           working_directory: ~/workbench/deploy\n           command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n             ./project.rb deploy \\\n               --project all-of-us-rw-staging \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n+              --account << pipeline.parameters.circleci_service_account >> \\\n               --git-version \"${CIRCLE_TAG}\" \\\n               --app-version \"${CIRCLE_TAG}\" \\\n               --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n               --key-file circle-sa-key.json \\\n               --promote\n+          name: Deploy API and UI to \"staging\" App Engine\n \n   deploy-perf:\n     <<: *defaults\n     steps:\n-      - checkout\n-      - run:\n-          command: git submodule update --init --recursive\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n+      - checkout_init_git\n+      - manage_api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - deploy:\n-          name: Deploy to Perf Environment\n           working_directory: ~/workbench/deploy\n           command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n             ./project.rb deploy \\\n               --project all-of-us-rw-perf \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n+              --account << pipeline.parameters.circleci_service_account >> \\\n               --git-version \"${CIRCLE_TAG}\" \\\n               --app-version \"${CIRCLE_TAG}\" \\\n               --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n               --key-file circle-sa-key.json \\\n               --promote\n+          name: Deploy API and UI to \"perf\" App Engine\n+\n+  # Deploy local UI server and run Puppeteer 2e2 tests\n+  puppeteer-e2e-local-ui:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA0MDQ3Nw=="}, "originalCommit": {"oid": "ffda9b5de764b5e85be70c1ec5d64aa33f1aa70a"}, "originalPosition": 664}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMjYyMTY5", "url": "https://github.com/all-of-us/workbench/pull/3479#pullrequestreview-401262169", "createdAt": "2020-04-27T19:30:58Z", "commit": {"oid": "8163be0484dc42bc4af3a71069e5c90625194804"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxOTozMDo1OFrOGM0JPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxOTozMDo1OFrOGM0JPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA5MDQyOQ==", "bodyText": "regex short explanation:\n^ asserts position at start of a line.\nv matches the character v literally (case sensitive).\n[0-9]+ match a single numerical digit (the + quantifier \u2014 matches between one and unlimited times, as many times as possible).\n- matches the character - literally (case sensitive).\nrc matches the character rc literally.\n$ asserts position at the end of a line.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416090429", "createdAt": "2020-04-27T19:30:58Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,202 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_only_master_branch: &filter_only_master_branch\n+    tags:\n+      ignore: /.*/\n+    branches:\n+      only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_only_release_tags: &filter_only_release_tags\n+    branches:\n+      ignore: /.*/\n+    tags:\n+      # Workbench release tag format example: v5-3-rc1\n+      only: /^v[0-9]+-[0-9]+-rc[0-9]+$/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8163be0484dc42bc4af3a71069e5c90625194804"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzEyMzky", "url": "https://github.com/all-of-us/workbench/pull/3479#pullrequestreview-401312392", "createdAt": "2020-04-27T20:45:41Z", "commit": {"oid": "8163be0484dc42bc4af3a71069e5c90625194804"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDo0NTo0MVrOGM26Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDo1ODozN1rOGM3aGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEzNTcyNg==", "bodyText": "I'm not about to pick a fight with the cache system.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416135726", "createdAt": "2020-04-27T20:45:41Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code\n+\n+  ui_dependencies:\n+    description: \"workbench/ui: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n+      # caching: https://circleci.com/docs/2.0/caching/\n+      - restore_cache:\n+          keys:\n+            # restore cache strategy:\n+            # Check for the latest cache from your branch.\n+            # If that fails, then check for the latest from master branch.\n+            # If that fails, then check for the latest from any branch\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/ui: yarn install dependencies\"\n+          working_directory: ~/workbench/ui\n+          command: yarn install --verbose --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - ui/node_modules\n+          key: << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+\n+  e2e_dependencies:\n+    description: \"workbench/e2e: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3ODMwOA=="}, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEzODE0MQ==", "bodyText": "You're right. It won't take a boolean-valued expression in the << >>. Bummer.\nWhat you have is fine. You just always have to supply a parameter or nothing happens.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416138141", "createdAt": "2020-04-27T20:49:36Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,198 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_master: &filter_master\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_releases: &filter_releases\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        only: /^v.*/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pr: &filter_pr\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  git_checkout:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halting job because no application code was changed\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has application code changes\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to API or UI code\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to API or UI code\n+\n+  ui_dependencies:\n+    description: \"workbench/ui: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n+      # caching: https://circleci.com/docs/2.0/caching/\n+      - restore_cache:\n+          keys:\n+            # restore cache strategy:\n+            # Check for the latest cache from your branch.\n+            # If that fails, then check for the latest from master branch.\n+            # If that fails, then check for the latest from any branch\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/ui: yarn install dependencies\"\n+          working_directory: ~/workbench/ui\n+          command: yarn install --verbose --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - ui/node_modules\n+          key: << parameters.version >>-yarn-ui-cache-{{ checksum \"~/workbench/ui/yarn.lock\" }}-{{ .Branch }}\n+\n+  e2e_dependencies:\n+    description: \"workbench/e2e: yarn install, save and restore cache\"\n+    parameters:\n+      version:\n+        type: string\n+        default: << pipeline.parameters.cache_key_version >>\n+    steps:\n       - restore_cache:\n           keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-master\n+            - << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}\n+      - run:\n+          name: \"workbench/e2e: yarn install dependencies\"\n+          working_directory: ~/workbench/e2e\n+          command: yarn install --frozen-lockfile --non-interactive\n+      - save_cache:\n+          paths:\n+            - ~/.cache/yarn\n+            - e2e/node_modules\n+          key: << parameters.version >>-yarn-e2e-cache-{{ checksum \"~/workbench/e2e/yarn.lock\" }}-{{ .Branch }}\n+\n+  api_cache:\n+    description: \"workbench/api: save and restore gradle cache\"\n+    parameters:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5MTUyMQ=="}, "originalCommit": {"oid": "acb1c9da255c4177dedf55b99cc5d43c5c77cac5"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEzOTU5Mg==", "bodyText": "nit: I'd still capitalize Swagger, Angular, & React since they're proper nouns.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416139592", "createdAt": "2020-04-27T20:51:47Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -71,183 +262,134 @@ jobs:\n           - MYSQL_PASSWORD=ubuntu\n     working_directory: ~/workbench\n     environment:\n-      # Drop to ~1.5G; the local API server starts two Java processes (the API\n-      # server and the cron emulator). The default machine has 4GB, so we want\n-      # the Java memory limit to be below half of that: other things on the\n-      # machine need memory as well. Using 2G here manifested in 137 errors.\n-      # If this limit proves to be too low, an alternative would be to use a\n-      # larger resource class:\n-      #   https://circleci.com/docs/2.0/configuration-reference/#resource_class\n-      JAVA_TOOL_OPTIONS: -Xmx1536m\n+      JAVA_TOOL_OPTIONS: -Xmx2g\n       TERM: dumb\n       MYSQL_ROOT_PASSWORD: ubuntu\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - run: &activate_service_accont_creds\n-          name: Activate Service Accont Credentials\n-          working_directory: ~/workbench\n-          command: ci/activate_creds.sh api/circle-sa-key.json\n+      - checkout_init_git\n+      - manage_api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - run:\n           # MySQL sometimes refuses connections by the time we attempt to apply\n           # data migrations. Watch the port for 2m for startup.\n-          name: Await MySQL startup\n+          name: Await MySQL start up\n           command: dockerize -wait tcp://127.0.0.1:3306 -timeout 2m\n       - run:\n-          name: Run Local Migrations\n+          name: Run local migrations\n           working_directory: ~/workbench/api\n           command: ./project.rb run-local-migrations\n       - run:\n-          name: Local API Tests on Running Server\n+          name: Local API tests on running server\n           working_directory: ~/workbench/api\n           command: ./project.rb start-local-api && ./project.rb run-local-api-tests && ./project.rb stop-local-api\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-            - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n-          key: api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - manage_api_cache:\n+          save: true\n \n   api-deploy-to-test:\n     <<: *java_defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n+      - checkout_init_git\n       # Note: most of the time spent here appears to be in Gradle / App Engine\n       # deployment. We tried more aggressively caching outputs via Circle\n       # workspaces, but that seemed to have a negligible effect on speed. It's\n       # also tricky to pick specific sub directories since the API deploy\n       # touches several top level folders {common,}api.\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - run: *activate_service_accont_creds\n+      - manage_api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - deploy:\n-          name: Deploy to App Engine\n+          name: Deploy API to \"test\" App Engine\n           working_directory: ~/workbench/api\n           command: |\n             ./project.rb deploy \\\n               --project all-of-us-workbench-test \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n+              --account << pipeline.parameters.circleci_service_account >> \\\n               --version circle-ci-test \\\n               --key-file circle-sa-key.json \\\n               --promote\n \n+\n   api-deps-check:\n     <<: *java_defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n+      - checkout_init_git\n       - run:\n           name: Scan dependencies for vulnerabilities\n           working_directory: ~/workbench/api\n-          command: |\n-            ./project.rb gradle dependencyCheckAnalyze --info\n+          command: ./project.rb gradle dependencyCheckAnalyze --info\n \n   api-integration-test:\n     <<: *java_defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n-      - restore_cache:\n-          keys:\n-          - api-integration-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-integration-cache-\n-      - run: *activate_service_accont_creds\n+      - checkout_init_git\n+      - ensure_branch_has_changes\n+      - manage_api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - run:\n           name: Run Integration Tests\n           working_directory: ~/workbench/api\n           command: ./project.rb integration\n       - store_test_results:\n           path: ~/workbench/api/build/test-results/integrationTest/\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-          key: api-integration-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - manage_api_cache:\n+          save: true\n \n   api-nightly-integration-test:\n     <<: *java_defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - api-integration-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-integration-cache-\n-      - run: *activate_service_accont_creds\n+      - checkout_init_git\n+      - manage_api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - run:\n-          name: Run Nightly Integration tests\n+          name: Run nightly integration tests\n           working_directory: ~/workbench/api\n           command: ./project.rb nightly-integration\n       - store_test_results:\n           path: ~/workbench/api/build/test-results/integrationTest/\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-          key: api-integration-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - manage_api_cache:\n+          save: true\n \n   api-bigquery-test:\n     <<: *java_defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n-      - restore_cache:\n-          keys:\n-          - api-integration-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-integration-cache-\n+      - checkout_init_git\n+      - ensure_branch_has_changes\n+      - manage_api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - run:\n-          name: Activate Service Accont Credentials\n-          working_directory: ~/workbench\n-          # Used to call gsutil from the circle environment.\n-          command: ci/activate_creds.sh api/circle-sa-key.json\n-      - run:\n-          name: Run BigQuery Tests\n+          name: Run BigQuery tests\n           working_directory: ~/workbench/api\n           command: ./project.rb bigquerytest\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-          key: api-integration-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - manage_api_cache:\n+          save: true\n \n   ui-build-test:\n     <<: *defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n+      - checkout_init_git\n       - run:\n-          name: Download Swagger CLI\n+          name: Download swagger CLI", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8163be0484dc42bc4af3a71069e5c90625194804"}, "originalPosition": 482}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0MjczNA==", "bodyText": "Could we just have one install_dependencies that takes ui vs api as a parameter?", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416142734", "createdAt": "2020-04-27T20:56:43Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,202 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_only_master_branch: &filter_only_master_branch\n+    tags:\n+      ignore: /.*/\n+    branches:\n+      only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_only_release_tags: &filter_only_release_tags\n+    branches:\n+      ignore: /.*/\n+    tags:\n+      # Workbench release tag format example: v5-3-rc1\n+      only: /^v[0-9]+-[0-9]+-rc[0-9]+$/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pull_request_branch: &filter_pull_request_branch\n+    tags:\n+      ignore: /.*/\n+    branches:\n+      ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  checkout_init_git:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halt job and succeed early if no code changes on master branch\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Halt job and succeed early if no code changes on master branch\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to code in specified directory\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to code in specified directory\n+\n+  install_ui_dependencies:\n+    description: \"workbench/ui: yarn install, save and restore cache\"\n+    parameters:\n+      version:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8163be0484dc42bc4af3a71069e5c90625194804"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0MzI5OA==", "bodyText": "Is there a way to not have this in a publicly-visible file? It's not a secret, but we don't need a neon light either.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416143298", "createdAt": "2020-04-27T20:57:42Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -1,17 +1,26 @@\n-version: 2\n+version: 2.1\n \n+# -------------------------\n+#   PARAMETERS\n+# -------------------------\n+parameters:\n+  cache_key_version:\n+    type: string\n+    default: \"v1\"\n+\n+  circleci_service_account:\n+    type: string\n+    default: \"circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8163be0484dc42bc4af3a71069e5c90625194804"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0Mzg5OQ==", "bodyText": "nit: \"credentials\" is effectively the singular I believe", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416143899", "createdAt": "2020-04-27T20:58:37Z", "author": {"login": "jaycarlton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,202 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_only_master_branch: &filter_only_master_branch\n+    tags:\n+      ignore: /.*/\n+    branches:\n+      only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_only_release_tags: &filter_only_release_tags\n+    branches:\n+      ignore: /.*/\n+    tags:\n+      # Workbench release tag format example: v5-3-rc1\n+      only: /^v[0-9]+-[0-9]+-rc[0-9]+$/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pull_request_branch: &filter_pull_request_branch\n+    tags:\n+      ignore: /.*/\n+    branches:\n+      ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8163be0484dc42bc4af3a71069e5c90625194804"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzMxMDU1", "url": "https://github.com/all-of-us/workbench/pull/3479#pullrequestreview-401331055", "createdAt": "2020-04-27T21:13:32Z", "commit": {"oid": "8163be0484dc42bc4af3a71069e5c90625194804"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMjU4MzA3", "url": "https://github.com/all-of-us/workbench/pull/3479#pullrequestreview-401258307", "createdAt": "2020-04-27T19:25:31Z", "commit": {"oid": "8163be0484dc42bc4af3a71069e5c90625194804"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxOToyNTozMlrOGMz70A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMjowNzo1NFrOGM5ymw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA4Njk5Mg==", "bodyText": "I see that, but at a conceptual level having a single key version across all of the caches doesn't really make sense, so I think it's misleading to have this as a global parameter. Each key prefix should be considered independently", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416086992", "createdAt": "2020-04-27T19:25:32Z", "author": {"login": "calbach"}, "path": ".circleci/config.yml", "diffHunk": "@@ -1,17 +1,26 @@\n-version: 2\n+version: 2.1\n \n+# -------------------------\n+#   PARAMETERS\n+# -------------------------\n+parameters:\n+  cache_key_version:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzNTU3Mw=="}, "originalCommit": {"oid": "ffda9b5de764b5e85be70c1ec5d64aa33f1aa70a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA4NzY1OQ==", "bodyText": "Can you remove the default and make the parameter required? If so please remove it", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416087659", "createdAt": "2020-04-27T19:26:33Z", "author": {"login": "calbach"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,202 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_only_master_branch: &filter_only_master_branch\n+    tags:\n+      ignore: /.*/\n+    branches:\n+      only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_only_release_tags: &filter_only_release_tags\n+    branches:\n+      ignore: /.*/\n+    tags:\n+      # Workbench release tag format example: v5-3-rc1\n+      only: /^v[0-9]+-[0-9]+-rc[0-9]+$/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pull_request_branch: &filter_pull_request_branch\n+    tags:\n+      ignore: /.*/\n+    branches:\n+      ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  checkout_init_git:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halt job and succeed early if no code changes on master branch\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Halt job and succeed early if no code changes on master branch\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to code in specified directory\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8163be0484dc42bc4af3a71069e5c90625194804"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE4MjkzOQ==", "bodyText": "Sure thing, I didn't realize you were working on this. Please push up a draft PR of what you were trying and I can take a look.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416182939", "createdAt": "2020-04-27T22:07:54Z", "author": {"login": "calbach"}, "path": ".circleci/config.yml", "diffHunk": "@@ -337,63 +448,74 @@ jobs:\n   deploy-staging:\n     <<: *defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n+      - checkout_init_git\n+      - manage_api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - deploy:\n           working_directory: ~/workbench/deploy\n           command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n             ./project.rb deploy \\\n               --project all-of-us-rw-staging \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n+              --account << pipeline.parameters.circleci_service_account >> \\\n               --git-version \"${CIRCLE_TAG}\" \\\n               --app-version \"${CIRCLE_TAG}\" \\\n               --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n               --key-file circle-sa-key.json \\\n               --promote\n+          name: Deploy API and UI to \"staging\" App Engine\n \n   deploy-perf:\n     <<: *defaults\n     steps:\n-      - checkout\n-      - run:\n-          command: git submodule update --init --recursive\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n+      - checkout_init_git\n+      - manage_api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - deploy:\n-          name: Deploy to Perf Environment\n           working_directory: ~/workbench/deploy\n           command: |\n-            ../ci/activate_creds.sh circle-sa-key.json\n             ./project.rb deploy \\\n               --project all-of-us-rw-perf \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n+              --account << pipeline.parameters.circleci_service_account >> \\\n               --git-version \"${CIRCLE_TAG}\" \\\n               --app-version \"${CIRCLE_TAG}\" \\\n               --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n               --key-file circle-sa-key.json \\\n               --promote\n+          name: Deploy API and UI to \"perf\" App Engine\n+\n+  # Deploy local UI server and run Puppeteer 2e2 tests\n+  puppeteer-e2e-local-ui:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA0MDQ3Nw=="}, "originalCommit": {"oid": "ffda9b5de764b5e85be70c1ec5d64aa33f1aa70a"}, "originalPosition": 664}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1632db41ec446c11e68a5d95ad8dfcc7cac1145", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/f1632db41ec446c11e68a5d95ad8dfcc7cac1145", "committedDate": "2020-04-27T23:24:48Z", "message": "upgrade config yaml v2.1\n\nadding e2e-local-ui job\n\nensure_branch_has_changes job\n\nhalt_job_noncode_changes job\n\nhalt_job_noncode_changes job error fix\n\nhalt_job_noncode_changes job error fix\n\ndeploy test\n\ndeploy test\n\ndeploy error\n\ndeploy error\n\ndeploy cmd revert\n\nfinished deploy-to-test testing\n\nsaving work\n\nAddressing PR feedback 1\n\nfix syntax error\n\nfix syntax error\n\nhalt_job_noncode_changes command testing\n\nhalt job retest\n\nhalt job retest\n\npuppeteer-e2e-local-ui job testing\n\nremove puppeteer-e2e-local-ui job\n\nPR feedback\n\nPR feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "50dae9403983ecad7730f4c6cd318d565624268f", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/50dae9403983ecad7730f4c6cd318d565624268f", "committedDate": "2020-04-27T23:15:49Z", "message": "PR feedback"}, "afterCommit": {"oid": "f1632db41ec446c11e68a5d95ad8dfcc7cac1145", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/f1632db41ec446c11e68a5d95ad8dfcc7cac1145", "committedDate": "2020-04-27T23:24:48Z", "message": "upgrade config yaml v2.1\n\nadding e2e-local-ui job\n\nensure_branch_has_changes job\n\nhalt_job_noncode_changes job\n\nhalt_job_noncode_changes job error fix\n\nhalt_job_noncode_changes job error fix\n\ndeploy test\n\ndeploy test\n\ndeploy error\n\ndeploy error\n\ndeploy cmd revert\n\nfinished deploy-to-test testing\n\nsaving work\n\nAddressing PR feedback 1\n\nfix syntax error\n\nfix syntax error\n\nhalt_job_noncode_changes command testing\n\nhalt job retest\n\nhalt job retest\n\npuppeteer-e2e-local-ui job testing\n\nremove puppeteer-e2e-local-ui job\n\nPR feedback\n\nPR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzc0OTAy", "url": "https://github.com/all-of-us/workbench/pull/3479#pullrequestreview-401374902", "createdAt": "2020-04-27T22:34:31Z", "commit": {"oid": "8163be0484dc42bc4af3a71069e5c90625194804"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMjozNDozMVrOGM6jGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMzozMzo1MVrOGM8EHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE5NTM1Mg==", "bodyText": "Agree, removed pipeline `cache_key_version\" parameter.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416195352", "createdAt": "2020-04-27T22:34:31Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -1,17 +1,26 @@\n-version: 2\n+version: 2.1\n \n+# -------------------------\n+#   PARAMETERS\n+# -------------------------\n+parameters:\n+  cache_key_version:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzNTU3Mw=="}, "originalCommit": {"oid": "ffda9b5de764b5e85be70c1ec5d64aa33f1aa70a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE5NTc2NA==", "bodyText": "Yes. The default value for the parameter, if not present, the parameter is implied to be required.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416195764", "createdAt": "2020-04-27T22:35:30Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,202 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_only_master_branch: &filter_only_master_branch\n+    tags:\n+      ignore: /.*/\n+    branches:\n+      only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_only_release_tags: &filter_only_release_tags\n+    branches:\n+      ignore: /.*/\n+    tags:\n+      # Workbench release tag format example: v5-3-rc1\n+      only: /^v[0-9]+-[0-9]+-rc[0-9]+$/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pull_request_branch: &filter_pull_request_branch\n+    tags:\n+      ignore: /.*/\n+    branches:\n+      ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  checkout_init_git:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halt job and succeed early if no code changes on master branch\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Halt job and succeed early if no code changes on master branch\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to code in specified directory\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA4NzY1OQ=="}, "originalCommit": {"oid": "8163be0484dc42bc4af3a71069e5c90625194804"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE5OTQxOA==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416199418", "createdAt": "2020-04-27T22:43:55Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -71,183 +262,134 @@ jobs:\n           - MYSQL_PASSWORD=ubuntu\n     working_directory: ~/workbench\n     environment:\n-      # Drop to ~1.5G; the local API server starts two Java processes (the API\n-      # server and the cron emulator). The default machine has 4GB, so we want\n-      # the Java memory limit to be below half of that: other things on the\n-      # machine need memory as well. Using 2G here manifested in 137 errors.\n-      # If this limit proves to be too low, an alternative would be to use a\n-      # larger resource class:\n-      #   https://circleci.com/docs/2.0/configuration-reference/#resource_class\n-      JAVA_TOOL_OPTIONS: -Xmx1536m\n+      JAVA_TOOL_OPTIONS: -Xmx2g\n       TERM: dumb\n       MYSQL_ROOT_PASSWORD: ubuntu\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - run: &activate_service_accont_creds\n-          name: Activate Service Accont Credentials\n-          working_directory: ~/workbench\n-          command: ci/activate_creds.sh api/circle-sa-key.json\n+      - checkout_init_git\n+      - manage_api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - run:\n           # MySQL sometimes refuses connections by the time we attempt to apply\n           # data migrations. Watch the port for 2m for startup.\n-          name: Await MySQL startup\n+          name: Await MySQL start up\n           command: dockerize -wait tcp://127.0.0.1:3306 -timeout 2m\n       - run:\n-          name: Run Local Migrations\n+          name: Run local migrations\n           working_directory: ~/workbench/api\n           command: ./project.rb run-local-migrations\n       - run:\n-          name: Local API Tests on Running Server\n+          name: Local API tests on running server\n           working_directory: ~/workbench/api\n           command: ./project.rb start-local-api && ./project.rb run-local-api-tests && ./project.rb stop-local-api\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-            - ~/workbench/api/build/exploded-api/WEB-INF/lib/\n-          key: api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - manage_api_cache:\n+          save: true\n \n   api-deploy-to-test:\n     <<: *java_defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n+      - checkout_init_git\n       # Note: most of the time spent here appears to be in Gradle / App Engine\n       # deployment. We tried more aggressively caching outputs via Circle\n       # workspaces, but that seemed to have a negligible effect on speed. It's\n       # also tricky to pick specific sub directories since the API deploy\n       # touches several top level folders {common,}api.\n-      - restore_cache:\n-          keys:\n-          - api-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-cache-\n-      - run: *activate_service_accont_creds\n+      - manage_api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - deploy:\n-          name: Deploy to App Engine\n+          name: Deploy API to \"test\" App Engine\n           working_directory: ~/workbench/api\n           command: |\n             ./project.rb deploy \\\n               --project all-of-us-workbench-test \\\n-              --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \\\n+              --account << pipeline.parameters.circleci_service_account >> \\\n               --version circle-ci-test \\\n               --key-file circle-sa-key.json \\\n               --promote\n \n+\n   api-deps-check:\n     <<: *java_defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n+      - checkout_init_git\n       - run:\n           name: Scan dependencies for vulnerabilities\n           working_directory: ~/workbench/api\n-          command: |\n-            ./project.rb gradle dependencyCheckAnalyze --info\n+          command: ./project.rb gradle dependencyCheckAnalyze --info\n \n   api-integration-test:\n     <<: *java_defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n-      - restore_cache:\n-          keys:\n-          - api-integration-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-integration-cache-\n-      - run: *activate_service_accont_creds\n+      - checkout_init_git\n+      - ensure_branch_has_changes\n+      - manage_api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - run:\n           name: Run Integration Tests\n           working_directory: ~/workbench/api\n           command: ./project.rb integration\n       - store_test_results:\n           path: ~/workbench/api/build/test-results/integrationTest/\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-          key: api-integration-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - manage_api_cache:\n+          save: true\n \n   api-nightly-integration-test:\n     <<: *java_defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - restore_cache:\n-          keys:\n-          - api-integration-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-integration-cache-\n-      - run: *activate_service_accont_creds\n+      - checkout_init_git\n+      - manage_api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - run:\n-          name: Run Nightly Integration tests\n+          name: Run nightly integration tests\n           working_directory: ~/workbench/api\n           command: ./project.rb nightly-integration\n       - store_test_results:\n           path: ~/workbench/api/build/test-results/integrationTest/\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-          key: api-integration-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - manage_api_cache:\n+          save: true\n \n   api-bigquery-test:\n     <<: *java_defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n-      - restore_cache:\n-          keys:\n-          - api-integration-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n-          - api-integration-cache-\n+      - checkout_init_git\n+      - ensure_branch_has_changes\n+      - manage_api_cache:\n+          restore: true\n+      - activate_service_account_creds\n       - run:\n-          name: Activate Service Accont Credentials\n-          working_directory: ~/workbench\n-          # Used to call gsutil from the circle environment.\n-          command: ci/activate_creds.sh api/circle-sa-key.json\n-      - run:\n-          name: Run BigQuery Tests\n+          name: Run BigQuery tests\n           working_directory: ~/workbench/api\n           command: ./project.rb bigquerytest\n-      - save_cache:\n-          paths:\n-            - ~/.gradle\n-            - ~/.m2\n-          key: api-integration-cache-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - manage_api_cache:\n+          save: true\n \n   ui-build-test:\n     <<: *defaults\n     steps:\n-      - checkout\n-      - run: *update_git_submodules\n+      - checkout_init_git\n       - run:\n-          name: Download Swagger CLI\n+          name: Download swagger CLI", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEzOTU5Mg=="}, "originalCommit": {"oid": "8163be0484dc42bc4af3a71069e5c90625194804"}, "originalPosition": 482}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE5OTc1NA==", "bodyText": "renamed it to activate_service_account_credential.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416199754", "createdAt": "2020-04-27T22:44:55Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,202 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_only_master_branch: &filter_only_master_branch\n+    tags:\n+      ignore: /.*/\n+    branches:\n+      only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_only_release_tags: &filter_only_release_tags\n+    branches:\n+      ignore: /.*/\n+    tags:\n+      # Workbench release tag format example: v5-3-rc1\n+      only: /^v[0-9]+-[0-9]+-rc[0-9]+$/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pull_request_branch: &filter_pull_request_branch\n+    tags:\n+      ignore: /.*/\n+    branches:\n+      ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0Mzg5OQ=="}, "originalCommit": {"oid": "8163be0484dc42bc4af3a71069e5c90625194804"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMTYzNQ==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416201635", "createdAt": "2020-04-27T22:49:11Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,202 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_only_master_branch: &filter_only_master_branch\n+    tags:\n+      ignore: /.*/\n+    branches:\n+      only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_only_release_tags: &filter_only_release_tags\n+    branches:\n+      ignore: /.*/\n+    tags:\n+      # Workbench release tag format example: v5-3-rc1\n+      only: /^v[0-9]+-[0-9]+-rc[0-9]+$/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA5MDQyOQ=="}, "originalCommit": {"oid": "8163be0484dc42bc4af3a71069e5c90625194804"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwOTY3OA==", "bodyText": "It can be hidden with either a context or a env variable\nI can do change here or in another PR. Do you have any preference on how and when?", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416209678", "createdAt": "2020-04-27T23:08:17Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -1,17 +1,26 @@\n-version: 2\n+version: 2.1\n \n+# -------------------------\n+#   PARAMETERS\n+# -------------------------\n+parameters:\n+  cache_key_version:\n+    type: string\n+    default: \"v1\"\n+\n+  circleci_service_account:\n+    type: string\n+    default: \"circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0MzI5OA=="}, "originalCommit": {"oid": "8163be0484dc42bc4af3a71069e5c90625194804"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIyMDE4OQ==", "bodyText": "no boolean eval in <<   >>, suggested changes involve shell scripts and if.", "url": "https://github.com/all-of-us/workbench/pull/3479#discussion_r416220189", "createdAt": "2020-04-27T23:33:51Z", "author": {"login": "aweng98"}, "path": ".circleci/config.yml", "diffHunk": "@@ -22,21 +31,202 @@ anchors:\n       # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n       # so we bumped this down further to 2G.\n       JAVA_TOOL_OPTIONS: -Xmx2g\n+      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon\n+      GRADLE_OPTS: \"-Dorg.gradle.daemon=false\"\n       TERM: dumb\n-    update_git_submodules: &update_git_submodules\n-      name: Update Git Submodules\n-      command: git submodule update --init --recursive\n-jobs:\n-  api-build-test:\n-    <<: *java_defaults\n+\n+  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n+  # Job runs for master branch only\n+  filter_only_master_branch: &filter_only_master_branch\n+    tags:\n+      ignore: /.*/\n+    branches:\n+      only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter_only_release_tags: &filter_only_release_tags\n+    branches:\n+      ignore: /.*/\n+    tags:\n+      # Workbench release tag format example: v5-3-rc1\n+      only: /^v[0-9]+-[0-9]+-rc[0-9]+$/\n+\n+  # Job runs for all branches EXCEPT all tag and master branches\n+  filter_pull_request_branch: &filter_pull_request_branch\n+    tags:\n+      ignore: /.*/\n+    branches:\n+      ignore: master\n+\n+# -------------------------\n+#   COMMANDS\n+# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n+# -------------------------\n+commands:\n+  activate_service_account_creds:\n+    description: \"Activiate CircleCI service account credential\"\n+    steps:\n+      - run:\n+          name: Activate CircleCI service account credential\n+          working_directory: ~/workbench\n+          # Used to call gsutil from the circle environment.\n+          command: ci/activate_creds.sh api/circle-sa-key.json\n+\n+  checkout_init_git:\n+    description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n-      - run: *update_git_submodules\n-      - run: *ensure_branch_has_api_changes\n+      - run:\n+          name: Update git submodules\n+          command: git submodule update --init --recursive\n+\n+  halt_job_noncode_changes:\n+    description: \"Halt job and succeed early if no code changes on master branch\"\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then\n+                echo \"No code changes in non-master branch. halting job.\"\n+                circleci step halt\n+            fi\n+          name: Halt job and succeed early if no code changes on master branch\n+\n+  ensure_branch_has_changes:\n+    description: \"Ensure branch has changes to code in specified directory\"\n+    parameters:\n+      dir_name:\n+        type: enum\n+        default: 'api'\n+        enum: [\"api\", \"ui\"]\n+    steps:\n+      - run:\n+          command: |\n+            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n+              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n+              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n+                echo \"No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping.\"\n+                circleci step halt\n+            fi\n+          name: Ensure branch has changes to code in specified directory\n+\n+  install_ui_dependencies:\n+    description: \"workbench/ui: yarn install, save and restore cache\"\n+    parameters:\n+      version:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0MjczNA=="}, "originalCommit": {"oid": "8163be0484dc42bc4af3a71069e5c90625194804"}, "originalPosition": 130}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4881, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}