{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzOTU5NDI5", "number": 3985, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMjo0MDozMlrOEjWbJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzozOTowN1rOEkir8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTAzMDE1OnYy", "diffSide": "RIGHT", "path": "api/src/bigquerytest/java/org/pmiops/workbench/api/CohortReviewControllerBQTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMjo0MDozMlrOHRqAiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMjo0MDozMlrOHRqAiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI3NjEwNw==", "bodyText": "I needed to add this MockBean to a lot of tests after adding it to the WorkspaceServiceImpl constructor.", "url": "https://github.com/all-of-us/workbench/pull/3985#discussion_r488276107", "createdAt": "2020-09-14T22:40:32Z", "author": {"login": "jmthibault79"}, "path": "api/src/bigquerytest/java/org/pmiops/workbench/api/CohortReviewControllerBQTest.java", "diffHunk": "@@ -21,6 +21,7 @@\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.pmiops.workbench.actionaudit.auditors.BillingProjectAuditor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f98f0f69afdcf36e9105033e530526855bb7cce5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzQ4OTY4OnYy", "diffSide": "RIGHT", "path": "api/src/bigquerytest/java/org/pmiops/workbench/api/CohortReviewControllerBQTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzozMTo0M1rOHTiWoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzozMTo0M1rOHTiWoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI0Nzg0MA==", "bodyText": "Maybe for later, but if you find bundles of dependencies that are frequently needed together, you can make a stand-alone test configuration class with them and import that.", "url": "https://github.com/all-of-us/workbench/pull/3985#discussion_r490247840", "createdAt": "2020-09-17T13:31:43Z", "author": {"login": "jaycarlton"}, "path": "api/src/bigquerytest/java/org/pmiops/workbench/api/CohortReviewControllerBQTest.java", "diffHunk": "@@ -103,30 +104,31 @@\n     CohortMapperImpl.class,\n     CohortQueryBuilder.class,\n     CohortReviewMapperImpl.class,\n+    CohortReviewMapperImpl.class,\n     CohortReviewServiceImpl.class,\n     CommonMappers.class,\n+    CommonMappers.class,\n     ConceptSetMapperImpl.class,\n     DataSetMapperImpl.class,\n     FirecloudMapperImpl.class,\n+    ParticipantCohortAnnotationMapperImpl.class,\n+    ParticipantCohortStatusMapperImpl.class,\n     ReviewQueryBuilder.class,\n     SearchGroupItemQueryBuilder.class,\n     UserMapperImpl.class,\n     WorkspaceMapperImpl.class,\n     WorkspaceServiceImpl.class,\n-    ParticipantCohortStatusMapperImpl.class,\n-    CohortReviewMapperImpl.class,\n-    ParticipantCohortAnnotationMapperImpl.class,\n-    CommonMappers.class\n   })\n   @MockBean({\n-    CohortFactory.class,\n+    BillingProjectAuditor.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f98f0f69afdcf36e9105033e530526855bb7cce5"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzQ5ODUzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudServiceImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzozMzoyNlrOHTiclg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTozMzozNFrOHTobGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI0OTM2Ng==", "bodyText": "nit: you should be able to omit the return statement.", "url": "https://github.com/all-of-us/workbench/pull/3985#discussion_r490249366", "createdAt": "2020-09-17T13:33:26Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudServiceImpl.java", "diffHunk": "@@ -270,6 +270,16 @@ public void createAllOfUsBillingProject(String projectName) {\n         });\n   }\n \n+  @Override\n+  public void deleteBillingProject(String billingProject) {\n+    BillingApi billingApi = billingApiProvider.get();\n+    retryHandler.run(\n+        (context) -> {\n+          billingApi.deleteBillingProject(billingProject);\n+          return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f98f0f69afdcf36e9105033e530526855bb7cce5"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MDEwOQ==", "bodyText": "What happens if it's not found? Do we want  the delete method to throw an exception, or just return success (i.e. be idempotent)?", "url": "https://github.com/all-of-us/workbench/pull/3985#discussion_r490250109", "createdAt": "2020-09-17T13:34:16Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudServiceImpl.java", "diffHunk": "@@ -270,6 +270,16 @@ public void createAllOfUsBillingProject(String projectName) {\n         });\n   }\n \n+  @Override\n+  public void deleteBillingProject(String billingProject) {\n+    BillingApi billingApi = billingApiProvider.get();\n+    retryHandler.run(\n+        (context) -> {\n+          billingApi.deleteBillingProject(billingProject);\n+          return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI0OTM2Ng=="}, "originalCommit": {"oid": "f98f0f69afdcf36e9105033e530526855bb7cce5"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0NzI5MA==", "bodyText": "no - this requires a return value", "url": "https://github.com/all-of-us/workbench/pull/3985#discussion_r490347290", "createdAt": "2020-09-17T15:33:34Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudServiceImpl.java", "diffHunk": "@@ -270,6 +270,16 @@ public void createAllOfUsBillingProject(String projectName) {\n         });\n   }\n \n+  @Override\n+  public void deleteBillingProject(String billingProject) {\n+    BillingApi billingApi = billingApiProvider.get();\n+    retryHandler.run(\n+        (context) -> {\n+          billingApi.deleteBillingProject(billingProject);\n+          return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI0OTM2Ng=="}, "originalCommit": {"oid": "f98f0f69afdcf36e9105033e530526855bb7cce5"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzUwODYxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzozNToyN1rOHTijBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTozNzo0NlrOHTomug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MTAxNQ==", "bodyText": "Have you thought through the transactionality of errors here? If we succeed in deleting the workspace, but fail to delete the project, are we happy?", "url": "https://github.com/all-of-us/workbench/pull/3985#discussion_r490251015", "createdAt": "2020-09-17T13:35:27Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -306,6 +310,10 @@ public void deleteWorkspace(DbWorkspace dbWorkspace) {\n     dbWorkspace.setWorkspaceActiveStatusEnum(WorkspaceActiveStatus.DELETED);\n     dbWorkspace = saveWithLastModified(dbWorkspace);\n     maybeDeleteRecentWorkspace(dbWorkspace.getWorkspaceId());\n+\n+    String billingProjectName = dbWorkspace.getWorkspaceNamespace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f98f0f69afdcf36e9105033e530526855bb7cce5"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM1MDI2Ng==", "bodyText": "Yes - that would be equivalent to the current behavior.  We will always be in a world where we need to go back and clean up orphaned projects (due to local DB wipes) so this is acceptable.\nI'll update this to catch-and-log errors", "url": "https://github.com/all-of-us/workbench/pull/3985#discussion_r490350266", "createdAt": "2020-09-17T15:37:46Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -306,6 +310,10 @@ public void deleteWorkspace(DbWorkspace dbWorkspace) {\n     dbWorkspace.setWorkspaceActiveStatusEnum(WorkspaceActiveStatus.DELETED);\n     dbWorkspace = saveWithLastModified(dbWorkspace);\n     maybeDeleteRecentWorkspace(dbWorkspace.getWorkspaceId());\n+\n+    String billingProjectName = dbWorkspace.getWorkspaceNamespace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MTAxNQ=="}, "originalCommit": {"oid": "f98f0f69afdcf36e9105033e530526855bb7cce5"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzUxMjM0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudServiceImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzozNjoxNFrOHTilVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTo0Nzo1N1rOHTpCjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MTYwNA==", "bodyText": "Does this immediately expunge the GCP project, or does it get put into a queue for deletion? There's no wrong answer, as long as everyone understands the behavior.", "url": "https://github.com/all-of-us/workbench/pull/3985#discussion_r490251604", "createdAt": "2020-09-17T13:36:14Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudServiceImpl.java", "diffHunk": "@@ -270,6 +270,16 @@ public void createAllOfUsBillingProject(String projectName) {\n         });\n   }\n \n+  @Override\n+  public void deleteBillingProject(String billingProject) {\n+    BillingApi billingApi = billingApiProvider.get();\n+    retryHandler.run(\n+        (context) -> {\n+          billingApi.deleteBillingProject(billingProject);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f98f0f69afdcf36e9105033e530526855bb7cce5"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1NDEwNw==", "bodyText": "Also, is there a ticket for a simple cron to find orphaned billing projects?", "url": "https://github.com/all-of-us/workbench/pull/3985#discussion_r490254107", "createdAt": "2020-09-17T13:39:45Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudServiceImpl.java", "diffHunk": "@@ -270,6 +270,16 @@ public void createAllOfUsBillingProject(String projectName) {\n         });\n   }\n \n+  @Override\n+  public void deleteBillingProject(String billingProject) {\n+    BillingApi billingApi = billingApiProvider.get();\n+    retryHandler.run(\n+        (context) -> {\n+          billingApi.deleteBillingProject(billingProject);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MTYwNA=="}, "originalCommit": {"oid": "f98f0f69afdcf36e9105033e530526855bb7cce5"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM1NzM4OA==", "bodyText": "Immediate deletion.\nWe currently have a \"Garbage Collection\" cron for orphaned billing projects, but we should revisit this process.  I have a plan to do this, but it's not in JIRA yet", "url": "https://github.com/all-of-us/workbench/pull/3985#discussion_r490357388", "createdAt": "2020-09-17T15:47:57Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudServiceImpl.java", "diffHunk": "@@ -270,6 +270,16 @@ public void createAllOfUsBillingProject(String projectName) {\n         });\n   }\n \n+  @Override\n+  public void deleteBillingProject(String billingProject) {\n+    BillingApi billingApi = billingApiProvider.get();\n+    retryHandler.run(\n+        (context) -> {\n+          billingApi.deleteBillingProject(billingProject);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MTYwNA=="}, "originalCommit": {"oid": "f98f0f69afdcf36e9105033e530526855bb7cce5"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzUxNTUzOnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/firecloud.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzozNjo1N1rOHTinYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzozNjo1N1rOHTinYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MjEzMA==", "bodyText": "Please elaborate on this, potentially for folks who haven't worked with the billing system or have forgotten what a billing project is.", "url": "https://github.com/all-of-us/workbench/pull/3985#discussion_r490252130", "createdAt": "2020-09-17T13:36:57Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/firecloud.yaml", "diffHunk": "@@ -264,6 +264,39 @@ paths:\n           - openid\n           - email\n           - profile\n+  /api/user/billing/{projectName}:\n+    delete:\n+      tags:\n+        - Billing\n+      summary: delete billing project\n+      description: delete billing project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f98f0f69afdcf36e9105033e530526855bb7cce5"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzUyMDYxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudServiceImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzozODowOVrOHTiqsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNzoyNToxNlrOHTtpHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1Mjk3Ng==", "bodyText": "Does this behave the same for user-provided billing projects and free tier billing projects/accounts? Do we need to update spend totals before killing it?", "url": "https://github.com/all-of-us/workbench/pull/3985#discussion_r490252976", "createdAt": "2020-09-17T13:38:09Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudServiceImpl.java", "diffHunk": "@@ -270,6 +270,16 @@ public void createAllOfUsBillingProject(String projectName) {\n         });\n   }\n \n+  @Override\n+  public void deleteBillingProject(String billingProject) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f98f0f69afdcf36e9105033e530526855bb7cce5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM1OTkzNA==", "bodyText": "We will always own the whole lifecycle for billing projects - users will bring billing accounts in the future which we will assign to the already-existing projects.", "url": "https://github.com/all-of-us/workbench/pull/3985#discussion_r490359934", "createdAt": "2020-09-17T15:51:34Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudServiceImpl.java", "diffHunk": "@@ -270,6 +270,16 @@ public void createAllOfUsBillingProject(String projectName) {\n         });\n   }\n \n+  @Override\n+  public void deleteBillingProject(String billingProject) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1Mjk3Ng=="}, "originalCommit": {"oid": "f98f0f69afdcf36e9105033e530526855bb7cce5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQzMjc5Ng==", "bodyText": "that makes more sense, thanks.", "url": "https://github.com/all-of-us/workbench/pull/3985#discussion_r490432796", "createdAt": "2020-09-17T17:25:16Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudServiceImpl.java", "diffHunk": "@@ -270,6 +270,16 @@ public void createAllOfUsBillingProject(String projectName) {\n         });\n   }\n \n+  @Override\n+  public void deleteBillingProject(String billingProject) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1Mjk3Ng=="}, "originalCommit": {"oid": "f98f0f69afdcf36e9105033e530526855bb7cce5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzUyNDk5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/workspaces/WorkspaceServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzozOTowN1rOHTitbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo0OTozM1rOHTsWEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MzY3OQ==", "bodyText": "please add tests showing all the failure modes (exceptions) and their handling (if any).", "url": "https://github.com/all-of-us/workbench/pull/3985#discussion_r490253679", "createdAt": "2020-09-17T13:39:07Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/workspaces/WorkspaceServiceTest.java", "diffHunk": "@@ -389,4 +390,16 @@ public void enforceFirecloudAclsInRecentWorkspaces() {\n     assertThat(recentWorkspaces.size()).isEqualTo(1);\n     assertThat(recentWorkspaces.get(0).getWorkspaceId()).isEqualTo(ownedId);\n   }\n+\n+  @Test\n+  public void deleteWorkspace() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f98f0f69afdcf36e9105033e530526855bb7cce5"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxMTUzNw==", "bodyText": "Mostly this is a passthrough, so there's not much to test.  I added a test for failed project deletion", "url": "https://github.com/all-of-us/workbench/pull/3985#discussion_r490411537", "createdAt": "2020-09-17T16:49:33Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/workspaces/WorkspaceServiceTest.java", "diffHunk": "@@ -389,4 +390,16 @@ public void enforceFirecloudAclsInRecentWorkspaces() {\n     assertThat(recentWorkspaces.size()).isEqualTo(1);\n     assertThat(recentWorkspaces.get(0).getWorkspaceId()).isEqualTo(ownedId);\n   }\n+\n+  @Test\n+  public void deleteWorkspace() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MzY3OQ=="}, "originalCommit": {"oid": "f98f0f69afdcf36e9105033e530526855bb7cce5"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4047, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}