{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0OTIyNjE0", "number": 4324, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMzo1MTo1N1rOE76CPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjoxMzoxNVrOFAVarA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjUyMjg2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/jdbc/ReportingNativeQueryServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMzo1MTo1N1rOH3yUQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMzo1MTo1N1rOH3yUQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1ODExMw==", "bodyText": "Note that this method uses native queries, so no fiddling with the Entity definition's conventions is required.", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r528258113", "createdAt": "2020-11-21T23:51:57Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/jdbc/ReportingNativeQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.pmiops.workbench.db.jdbc;\n+\n+import java.util.List;\n+import org.pmiops.workbench.model.ReportingDatasetCohort;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ReportingNativeQueryServiceImpl implements ReportingNativeQueryService {\n+\n+  private final JdbcTemplate jdbcTemplate;\n+  private static final String FULL_TABLE_QUERY =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjUyMzMwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbDataset.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMzo1MjozMVrOH3yUeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMzo1MjozMVrOH3yUeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1ODE2OQ==", "bodyText": "this may need to be a separate fix", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r528258169", "createdAt": "2020-11-21T23:52:31Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbDataset.java", "diffHunk": "@@ -188,7 +190,7 @@ public void setCohortIds(List<Long> cohortIds) {\n \n   @ElementCollection\n   @CollectionTable(name = \"data_set_values\", joinColumns = @JoinColumn(name = \"data_set_id\"))\n-  @Column(name = \"values\")\n+  @Column(name = \"value\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjUyNDE1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMzo1Mzo0M1rOH3yU3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMzo1Mzo0M1rOH3yU3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1ODI2OQ==", "bodyText": "No MapStruct call required for the join table \ud83d\udcaf .", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r528258269", "createdAt": "2020-11-21T23:53:43Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingMapper.java", "diffHunk": "@@ -39,11 +41,17 @@\n \n   List<ReportingCohort> toReportingCohortList(Collection<ProjectedReportingCohort> cohorts);\n \n+  ReportingDataset toReportingDataset(ProjectedReportingDataset projectedReportingDataset);\n+\n+  List<ReportingDataset> toReportingDatasetList(Collection<ProjectedReportingDataset> datasets);\n+\n   default ReportingSnapshot toReportingSnapshot(\n       QueryResultBundle queryResultBundle, long snapshotTimestamp) {\n     return new ReportingSnapshot()\n         .captureTimestamp(snapshotTimestamp)\n         .cohorts(toReportingCohortList(queryResultBundle.getCohorts()))\n+        .datasets(toReportingDatasetList(queryResultBundle.getDatasets()))\n+        .datasetCohorts(queryResultBundle.getDatasetCohorts())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjUyNjAxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceInsertQueryImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMzo1NTo1N1rOH3yVrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMzo1NTo1N1rOH3yVrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1ODQ3Ng==", "bodyText": "This is still an itch: I don't know how to attach a static method to a bunch of enum classes. You can't have static interface methods in Java, so it's on the honor system for every one of these extractor classes to expose TABLE_NAME. I could do it on all of the enum values, but then you have to do CohortColumnValueExtractor.values[0].getTableName(), which is just gross.", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r528258476", "createdAt": "2020-11-21T23:55:57Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceInsertQueryImpl.java", "diffHunk": "@@ -119,32 +126,45 @@ private TableResult executeWithTimeout(QueryJobConfiguration job) {\n     final QueryParameterValue snapshotTimestamp = getTimestampValue(reportingSnapshot);\n     final ImmutableList.Builder<JobInfo> resultBuilder = new Builder<>();\n \n-    resultBuilder.addAll(\n-        getJobsForDTOs(\n-            CohortColumnValueExtractor.TABLE_NAME,\n-            cohortJobBuilder,\n-            snapshotTimestamp,\n-            reportingSnapshot.getCohorts()));\n-    resultBuilder.addAll(\n-        getJobsForDTOs(\n-            InstitutionColumnValueExtractor.TABLE_NAME,\n-            institutionJobBuilder,\n-            snapshotTimestamp,\n-            reportingSnapshot.getInstitutions()));\n-    resultBuilder.addAll(\n-        getJobsForDTOs(\n-            UserColumnValueExtractor.TABLE_NAME,\n-            userJobBuilder,\n-            snapshotTimestamp,\n-            reportingSnapshot.getUsers()));\n-    resultBuilder.addAll(\n-        getJobsForDTOs(\n-            WorkspaceColumnValueExtractor.TABLE_NAME,\n-            workspaceJobBuilder,\n-            snapshotTimestamp,\n-            reportingSnapshot.getWorkspaces()));\n-\n-    final List<JobInfo> result = resultBuilder.build();\n+    final List<JobInfo> result =\n+        resultBuilder\n+            .addAll(\n+                getJobsForDTOs(\n+                    CohortColumnValueExtractor.TABLE_NAME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjUyNzQ0OnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/workbench-api.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMzo1Nzo1NVrOH3yWZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMzo1Nzo1NVrOH3yWZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1ODY2Mg==", "bodyText": "Arguably a suboptimal name for this. Maybe datasetCohortJoins or datasetCohortPairs?", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r528258662", "createdAt": "2020-11-21T23:57:55Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -8228,6 +8228,14 @@ definitions:\n         type: array\n         items:\n           \"$ref\": \"#/definitions/ReportingCohort\"\n+      datasetCohorts:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjUyOTc3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/db/dao/CohortDaoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMDowMDo1MVrOH3yXhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMDowMDo1MVrOH3yXhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1ODk0OQ==", "bodyText": "I shied away from pulling all the test fixture code out of ReportingTestUtils for this branch, but there's support in the works on the Ruby side to make this much cleaner.", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r528258949", "createdAt": "2020-11-22T00:00:51Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/CohortDaoTest.java", "diffHunk": "@@ -43,7 +54,7 @@ public void setUp() {\n     dbWorkspace.setLastModifiedTime(timestamp);\n     workspaceDao.save(dbWorkspace);\n \n-    dbUser = userDao.save(ReportingTestUtils.createDbUser());\n+    dbUser = userDao.save(userFixture.createEntity());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjUzMTA2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/db/jdbc/ReportingNativeQueryServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMDowMzowOVrOH3yYMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMDowMzowOVrOH3yYMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1OTEyMA==", "bodyText": "We could almost pull all of these machinations into a reporting config class, since we'll need to set up similar things for other joint tables. To start with, I think it's fine to overload this test class with dependencies, as join tables always require extra test data to test.", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r528259120", "createdAt": "2020-11-22T00:03:09Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/db/jdbc/ReportingNativeQueryServiceTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.pmiops.workbench.db.jdbc;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.dao.CdrVersionDao;\n+import org.pmiops.workbench.db.dao.CohortDao;\n+import org.pmiops.workbench.db.dao.DataSetDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.dao.projection.ProjectedReportingUser;\n+import org.pmiops.workbench.db.dao.rowmappers.ReportingDatasetCohortRowMapperImpl;\n+import org.pmiops.workbench.db.model.DbCdrVersion;\n+import org.pmiops.workbench.db.model.DbCohort;\n+import org.pmiops.workbench.db.model.DbDataset;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.ReportingDatasetCohort;\n+import org.pmiops.workbench.model.ReportingUser;\n+import org.pmiops.workbench.testconfig.ReportingTestUtils;\n+import org.pmiops.workbench.testconfig.fixtures.ReportingTestFixture;\n+import org.pmiops.workbench.testconfig.fixtures.ReportingUserFixture;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * Test the unique ReportingNativeQueryService, which bypasses Spring in favor of low-level JDBC\n+ * queries. This means we need real DAOs.\n+ */\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class ReportingNativeQueryServiceTest {\n+\n+  @Autowired private ReportingNativeQueryService reportingNativeQueryService;\n+\n+  // It's necessary to bring in several Dao classes, since we aim to populate join tables\n+  // that have neither entities of their own nor stand-alone DAOs.\n+  @Autowired private CdrVersionDao cCdrVersionDao;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjUzNjUyOnYy", "diffSide": "LEFT", "path": "api/reporting/schemas/input/mysql_describe_csv/dataset.csv", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMDoxMDowMFrOH3yalg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMDoxMDowMFrOH3yalg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1OTczNA==", "bodyText": "The contract for how this all works will soon be simplified to a single yaml input file for each table. I'm moving away from storing this EXPLAIN table output and separate file for skipped rows, etc.", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r528259734", "createdAt": "2020-11-22T00:10:00Z", "author": {"login": "jaycarlton"}, "path": "api/reporting/schemas/input/mysql_describe_csv/dataset.csv", "diffHunk": "@@ -8,4 +8,3 @@ invalid,bit(1),YES,\"\",,\"\"\n includes_all_participants,bit(1),YES,\"\",,\"\"\n last_modified_time,datetime,YES,\"\",,\"\"\n version,smallint(6),NO,\"\",1,\"\"\n-pre_packaged_concept_set,tinyint(4),YES,\"\",,\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e7a2f923bea16103fabbcd2decacc38efce4eeb"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1ODU4MTA0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/dataset/mapper/DataSetMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNTowODo1MFrOH-hAPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOToyODoyOVrOH-tnZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMxNDQ5NQ==", "bodyText": "Is the intention here to set the copy's version to INITIAL_VERSION?  the Impl is not doing that.", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535314495", "createdAt": "2020-12-03T15:08:50Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/dataset/mapper/DataSetMapper.java", "diffHunk": "@@ -135,4 +136,7 @@ default DomainValuePair createDomainValuePair(DbDatasetValue dbDatasetValue) {\n \n   @Mapping(target = \"cdrVersionId\", source = \"dbModel.cdrVersion.cdrVersionId\")\n   DataDictionaryEntry dbModelToClient(DbDataDictionaryEntry dbModel);\n+\n+  @ValueMapping(source = \"DbDataset.INITIAL_VERSION\", target = \"version\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUyMTEyNg==", "bodyText": "Yes, but I meant to pull this change out. It was ultimately a tangent that I needed to avoid.", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535521126", "createdAt": "2020-12-03T19:28:29Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/dataset/mapper/DataSetMapper.java", "diffHunk": "@@ -135,4 +136,7 @@ default DomainValuePair createDomainValuePair(DbDatasetValue dbDatasetValue) {\n \n   @Mapping(target = \"cdrVersionId\", source = \"dbModel.cdrVersion.cdrVersionId\")\n   DataDictionaryEntry dbModelToClient(DbDataDictionaryEntry dbModel);\n+\n+  @ValueMapping(source = \"DbDataset.INITIAL_VERSION\", target = \"version\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMxNDQ5NQ=="}, "originalCommit": {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1ODU5NTM0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbDataset.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNToxMToyOFrOH-hI6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNToxMToyOFrOH-hI6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMxNjcxNQ==", "bodyText": "Reminder to remove this if you can convince MapStruct to init the version", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535316715", "createdAt": "2020-12-03T15:11:28Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbDataset.java", "diffHunk": "@@ -61,12 +61,14 @@ public DbDataset(\n     this.invalid = invalid;\n   }\n \n+  //   TODO(jaycarlton): use MapStruct to generate a copy ctor for us\n   public DbDataset(DbDataset dataSet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1ODY3MTQxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceInsertQueryImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNToyNTo0OFrOH-h3MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOTozNTowNVrOH-t_Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMyODU2MQ==", "bodyText": "Please make this a const", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535328561", "createdAt": "2020-12-03T15:25:48Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceInsertQueryImpl.java", "diffHunk": "@@ -29,12 +30,12 @@\n \n @Service(\"REPORTING_UPLOAD_SERVICE_DML_IMPL\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUyNzI3MA==", "bodyText": "I changed this and then backed it out. Since the annotation is outside the class's scope, so it has to point to a public static method, which means at the injection site you wind up with a reference to the actual class being injected, which is supposed to be abstracted away from you. The string doesn't really belong to the class, but is an external identifier.\nI suppose you could make a file with all the qualifiers, but that wouldn't be very legible.", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535527270", "createdAt": "2020-12-03T19:35:05Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceInsertQueryImpl.java", "diffHunk": "@@ -29,12 +30,12 @@\n \n @Service(\"REPORTING_UPLOAD_SERVICE_DML_IMPL\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMyODU2MQ=="}, "originalCommit": {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1ODY4MzgzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceStreamingImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNToyNzo1MlrOH-h-dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNToyNzo1MlrOH-h-dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMzMDQyMQ==", "bodyText": "const", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535330421", "createdAt": "2020-12-03T15:27:52Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceStreamingImpl.java", "diffHunk": "@@ -28,17 +39,24 @@\n \n @Service(\"REPORTING_UPLOAD_SERVICE_STREAMING_IMPL\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1ODcyMTUzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/reporting/insertion/CohortColumnValueExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNTozMzoyOVrOH-iWmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNTozMzoyOVrOH-iWmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMzNjYwMA==", "bodyText": "return TABLE_NAME here (and also make TABLE_NAME private)", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535336600", "createdAt": "2020-12-03T15:33:29Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/insertion/CohortColumnValueExtractor.java", "diffHunk": "@@ -41,6 +41,11 @@\n     this.parameterValueFunction = parameterValueFunction;\n   }\n \n+  @Override\n+  public String getBigQueryTableName() {\n+    return \"cohort\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1ODc1NDUyOnYy", "diffSide": "LEFT", "path": "api/src/test/java/org/pmiops/workbench/api/WorkspacesControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNTozODoyOVrOH-irxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNTozODoyOVrOH-irxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM0MjAyMA==", "bodyText": "oh nice.  thanks.", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535342020", "createdAt": "2020-12-03T15:38:29Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/api/WorkspacesControllerTest.java", "diffHunk": "@@ -398,14 +398,9 @@ WorkbenchConfig workbenchConfig() {\n \n   @Before\n   public void setUp() {\n-    workbenchConfig = new WorkbenchConfig();\n-    workbenchConfig.featureFlags = new WorkbenchConfig.FeatureFlagsConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1ODkwNzA2OnYy", "diffSide": "RIGHT", "path": "api/src/test/resources/application.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjowNDoyNFrOH-kLgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjowNDoyNFrOH-kLgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM2NjUzMA==", "bodyText": "good to know \ud83d\udc4d", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535366530", "createdAt": "2020-12-03T16:04:24Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/resources/application.properties", "diffHunk": "@@ -5,9 +5,14 @@ spring.datasource.password=sa\n spring.jpa.hibernate.ddl-auto=create-drop\n spring.jpa.properties.hibernate.dialect=org.pmiops.workbench.cdr.CommonTestDialect\n liquibase.enabled=false\n+\n # Uncomment the following to turn on full SQL debugging\n-#logging.level.org.hibernate.SQL=DEBUG\n-#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE\n #spring.jpa.properties.hibernate.show_sql=true\n #spring.jpa.properties.hibernate.format_sql=true\n-#spring.jpa.properties.hibernate.type=trace\n\\ No newline at end of file\n+#spring.jpa.properties.hibernate.type=trace\n+# Show Hibernate statements in addition to SQL\n+#spring.jpa.properties.hibernate.use_sql_comments=true\n+\n+# Alternative settings for debugging. When combined with those above, seems to give redundant output.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1ODk0Mjg4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/db/dao/DataSetDaoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjoxMToyNFrOH-khFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjoxMToyNFrOH-khFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MjA1Mw==", "bodyText": "spelling", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535372053", "createdAt": "2020-12-03T16:11:24Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/DataSetDaoTest.java", "diffHunk": "@@ -59,10 +62,48 @@ private DbDataset insertDatasetForGauge(boolean isInvalid, long workspaceId) {\n   }\n \n   @Test\n-  public void test() {\n+  public void testGague() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1ODk1MjEyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/db/dao/DataSetDaoTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjoxMzoxNVrOH-kmtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjoxMzoxNVrOH-kmtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MzQ5NQ==", "bodyText": "Please add the other dataset elements.  ConceptSets and DomainIds ?", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535373495", "createdAt": "2020-12-03T16:13:15Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/DataSetDaoTest.java", "diffHunk": "@@ -59,10 +62,48 @@ private DbDataset insertDatasetForGauge(boolean isInvalid, long workspaceId) {\n   }\n \n   @Test\n-  public void test() {\n+  public void testGague() {\n+    insertDatasetForGauge(true, workspace.getWorkspaceId());\n+    insertDatasetForGauge(true, workspace.getWorkspaceId());\n+    insertDatasetForGauge(false, workspace.getWorkspaceId());\n+\n     final Map<Boolean, Long> map = dataSetDao.getInvalidToCountMap();\n     assertThat(map).hasSize(Booleans.VALUE_STRINGS.size());\n     assertThat(map.get(true)).isEqualTo(2L);\n     assertThat(map.get(false)).isEqualTo(1L);\n   }\n+\n+  @Test\n+  public void testGetReportingDatasets() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3592, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}