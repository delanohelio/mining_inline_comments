{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNDg0Mzc2", "number": 3917, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzoyOToyMFrOEcT9aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzo0MDowNFrOEcUXjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MTIyNjAwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/app-router.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzoyOToyMFrOHGxCXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMToyNzo1N1rOHHHvAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg1NjkyNw==", "bodyText": "What's the purpose of putting children in an array, only to immediately flatten them?", "url": "https://github.com/all-of-us/workbench/pull/3917#discussion_r476856927", "createdAt": "2020-08-25T23:29:20Z", "author": {"login": "calbach"}, "path": "ui/src/app/components/app-router.tsx", "diffHunk": "@@ -38,21 +38,36 @@ const NavRedirect = ({path}) => {\n   return null;\n };\n \n-export const AppRoute = ({path, data = {}, component: Component}): React.ReactElement => {\n+export const AppRoute = ({path, data = {}, guards = [], component: Component}): React.ReactElement => {\n   const routeParams = useParams();\n   const routeHistory = useHistory();\n \n-  return <Route exact={true} path={path} >\n-    <Component urlParams={routeParams} routeHistory={routeHistory} routeConfig={data}/>\n+  return <Route exact={true} path={path} render={\n+    () => {\n+      const { redirectPath = null } = fp.find(({allowed}) => !allowed(), guards) || {};\n+      return redirectPath\n+        ? <NavRedirect path={redirectPath}/>\n+        : <Component urlParams={routeParams} routeHistory={routeHistory} routeConfig={data}/>;\n+    }}>\n   </Route>;\n };\n \n export const ProtectedRoutes = (\n   {guards, children}: {guards: Guard[], children: any }): React.ReactElement => {\n-  const { redirectPath = null } = fp.find(({allowed}) => !allowed(), guards) || {};\n \n-  return redirectPath ? <NavRedirect path={redirectPath}/>\n-  : <Fragment>{children}</Fragment>;\n+  // Pass the guards to the individual routes. Be sure not to overwrite any existing guards\n+  const guardedChildren = fp.flow(\n+    fp.flatten,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79e09775df6bf0abc27050ddac2385e4461e40e8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIyODgwMQ==", "bodyText": "If a component has a single react child it will not create an array of children - it will be the individual item. If there are multiple children they will already be in an array. I want to ensure we are always dealing with an array of children, I flatten in case children is already an array, and it ends up getting nested.", "url": "https://github.com/all-of-us/workbench/pull/3917#discussion_r477228801", "createdAt": "2020-08-26T11:27:57Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/app-router.tsx", "diffHunk": "@@ -38,21 +38,36 @@ const NavRedirect = ({path}) => {\n   return null;\n };\n \n-export const AppRoute = ({path, data = {}, component: Component}): React.ReactElement => {\n+export const AppRoute = ({path, data = {}, guards = [], component: Component}): React.ReactElement => {\n   const routeParams = useParams();\n   const routeHistory = useHistory();\n \n-  return <Route exact={true} path={path} >\n-    <Component urlParams={routeParams} routeHistory={routeHistory} routeConfig={data}/>\n+  return <Route exact={true} path={path} render={\n+    () => {\n+      const { redirectPath = null } = fp.find(({allowed}) => !allowed(), guards) || {};\n+      return redirectPath\n+        ? <NavRedirect path={redirectPath}/>\n+        : <Component urlParams={routeParams} routeHistory={routeHistory} routeConfig={data}/>;\n+    }}>\n   </Route>;\n };\n \n export const ProtectedRoutes = (\n   {guards, children}: {guards: Guard[], children: any }): React.ReactElement => {\n-  const { redirectPath = null } = fp.find(({allowed}) => !allowed(), guards) || {};\n \n-  return redirectPath ? <NavRedirect path={redirectPath}/>\n-  : <Fragment>{children}</Fragment>;\n+  // Pass the guards to the individual routes. Be sure not to overwrite any existing guards\n+  const guardedChildren = fp.flow(\n+    fp.flatten,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg1NjkyNw=="}, "originalCommit": {"oid": "79e09775df6bf0abc27050ddac2385e4461e40e8"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MTI1MDkxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/app-router.tsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzozMzoyNFrOHGxS-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjozNzoxMlrOHHKBJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg2MTE3OQ==", "bodyText": "I gather children is a map of keys -> react elements. I'm a bit confused though, since the previous approach rendered this directly, and your new approach appears to instead render an array of elements. Does React just support either?", "url": "https://github.com/all-of-us/workbench/pull/3917#discussion_r476861179", "createdAt": "2020-08-25T23:33:24Z", "author": {"login": "calbach"}, "path": "ui/src/app/components/app-router.tsx", "diffHunk": "@@ -38,21 +38,36 @@ const NavRedirect = ({path}) => {\n   return null;\n };\n \n-export const AppRoute = ({path, data = {}, component: Component}): React.ReactElement => {\n+export const AppRoute = ({path, data = {}, guards = [], component: Component}): React.ReactElement => {\n   const routeParams = useParams();\n   const routeHistory = useHistory();\n \n-  return <Route exact={true} path={path} >\n-    <Component urlParams={routeParams} routeHistory={routeHistory} routeConfig={data}/>\n+  return <Route exact={true} path={path} render={\n+    () => {\n+      const { redirectPath = null } = fp.find(({allowed}) => !allowed(), guards) || {};\n+      return redirectPath\n+        ? <NavRedirect path={redirectPath}/>\n+        : <Component urlParams={routeParams} routeHistory={routeHistory} routeConfig={data}/>;\n+    }}>\n   </Route>;\n };\n \n export const ProtectedRoutes = (\n   {guards, children}: {guards: Guard[], children: any }): React.ReactElement => {\n-  const { redirectPath = null } = fp.find(({allowed}) => !allowed(), guards) || {};\n \n-  return redirectPath ? <NavRedirect path={redirectPath}/>\n-  : <Fragment>{children}</Fragment>;\n+  // Pass the guards to the individual routes. Be sure not to overwrite any existing guards\n+  const guardedChildren = fp.flow(\n+    fp.flatten,\n+    fp.toPairs,\n+    fp.map(\n+      ([key, element]: [string, React.ReactElement]) => {\n+        const {guards: elementGuards = []} = element.props;\n+        return React.cloneElement(element, {key, guards: [...elementGuards, ...guards]});\n+      }\n+    )\n+  )([children]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79e09775df6bf0abc27050ddac2385e4461e40e8"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIyOTkzNw==", "bodyText": "children can be a react element or an array of react elements. React does support arrays of elements.", "url": "https://github.com/all-of-us/workbench/pull/3917#discussion_r477229937", "createdAt": "2020-08-26T11:30:10Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/app-router.tsx", "diffHunk": "@@ -38,21 +38,36 @@ const NavRedirect = ({path}) => {\n   return null;\n };\n \n-export const AppRoute = ({path, data = {}, component: Component}): React.ReactElement => {\n+export const AppRoute = ({path, data = {}, guards = [], component: Component}): React.ReactElement => {\n   const routeParams = useParams();\n   const routeHistory = useHistory();\n \n-  return <Route exact={true} path={path} >\n-    <Component urlParams={routeParams} routeHistory={routeHistory} routeConfig={data}/>\n+  return <Route exact={true} path={path} render={\n+    () => {\n+      const { redirectPath = null } = fp.find(({allowed}) => !allowed(), guards) || {};\n+      return redirectPath\n+        ? <NavRedirect path={redirectPath}/>\n+        : <Component urlParams={routeParams} routeHistory={routeHistory} routeConfig={data}/>;\n+    }}>\n   </Route>;\n };\n \n export const ProtectedRoutes = (\n   {guards, children}: {guards: Guard[], children: any }): React.ReactElement => {\n-  const { redirectPath = null } = fp.find(({allowed}) => !allowed(), guards) || {};\n \n-  return redirectPath ? <NavRedirect path={redirectPath}/>\n-  : <Fragment>{children}</Fragment>;\n+  // Pass the guards to the individual routes. Be sure not to overwrite any existing guards\n+  const guardedChildren = fp.flow(\n+    fp.flatten,\n+    fp.toPairs,\n+    fp.map(\n+      ([key, element]: [string, React.ReactElement]) => {\n+        const {guards: elementGuards = []} = element.props;\n+        return React.cloneElement(element, {key, guards: [...elementGuards, ...guards]});\n+      }\n+    )\n+  )([children]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg2MTE3OQ=="}, "originalCommit": {"oid": "79e09775df6bf0abc27050ddac2385e4461e40e8"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI2NjIxMg==", "bodyText": "I updated the type for children to help clarify this in the code and I added a comment.\nAnd to expand on my previous comment - children can be many different types in react, but for the purposes of ProtectedRoutes - it should be a react element or array of elements. I could make it more specifically an AppRoute / array of routes. But I would like to leave that as an exercise for a future PR to work on my Typescript.", "url": "https://github.com/all-of-us/workbench/pull/3917#discussion_r477266212", "createdAt": "2020-08-26T12:37:12Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/app-router.tsx", "diffHunk": "@@ -38,21 +38,36 @@ const NavRedirect = ({path}) => {\n   return null;\n };\n \n-export const AppRoute = ({path, data = {}, component: Component}): React.ReactElement => {\n+export const AppRoute = ({path, data = {}, guards = [], component: Component}): React.ReactElement => {\n   const routeParams = useParams();\n   const routeHistory = useHistory();\n \n-  return <Route exact={true} path={path} >\n-    <Component urlParams={routeParams} routeHistory={routeHistory} routeConfig={data}/>\n+  return <Route exact={true} path={path} render={\n+    () => {\n+      const { redirectPath = null } = fp.find(({allowed}) => !allowed(), guards) || {};\n+      return redirectPath\n+        ? <NavRedirect path={redirectPath}/>\n+        : <Component urlParams={routeParams} routeHistory={routeHistory} routeConfig={data}/>;\n+    }}>\n   </Route>;\n };\n \n export const ProtectedRoutes = (\n   {guards, children}: {guards: Guard[], children: any }): React.ReactElement => {\n-  const { redirectPath = null } = fp.find(({allowed}) => !allowed(), guards) || {};\n \n-  return redirectPath ? <NavRedirect path={redirectPath}/>\n-  : <Fragment>{children}</Fragment>;\n+  // Pass the guards to the individual routes. Be sure not to overwrite any existing guards\n+  const guardedChildren = fp.flow(\n+    fp.flatten,\n+    fp.toPairs,\n+    fp.map(\n+      ([key, element]: [string, React.ReactElement]) => {\n+        const {guards: elementGuards = []} = element.props;\n+        return React.cloneElement(element, {key, guards: [...elementGuards, ...guards]});\n+      }\n+    )\n+  )([children]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg2MTE3OQ=="}, "originalCommit": {"oid": "79e09775df6bf0abc27050ddac2385e4461e40e8"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MTI1NzcwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/app-router.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzozNDozMFrOHGxXjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMTozMTo1MVrOHHH20A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg2MjM0OQ==", "bodyText": "This is the opposite order of guard execution than what I would expect, i.e. was expecting [...guards, ...elementGuards], which should track with increasing specificity.", "url": "https://github.com/all-of-us/workbench/pull/3917#discussion_r476862349", "createdAt": "2020-08-25T23:34:30Z", "author": {"login": "calbach"}, "path": "ui/src/app/components/app-router.tsx", "diffHunk": "@@ -38,21 +38,36 @@ const NavRedirect = ({path}) => {\n   return null;\n };\n \n-export const AppRoute = ({path, data = {}, component: Component}): React.ReactElement => {\n+export const AppRoute = ({path, data = {}, guards = [], component: Component}): React.ReactElement => {\n   const routeParams = useParams();\n   const routeHistory = useHistory();\n \n-  return <Route exact={true} path={path} >\n-    <Component urlParams={routeParams} routeHistory={routeHistory} routeConfig={data}/>\n+  return <Route exact={true} path={path} render={\n+    () => {\n+      const { redirectPath = null } = fp.find(({allowed}) => !allowed(), guards) || {};\n+      return redirectPath\n+        ? <NavRedirect path={redirectPath}/>\n+        : <Component urlParams={routeParams} routeHistory={routeHistory} routeConfig={data}/>;\n+    }}>\n   </Route>;\n };\n \n export const ProtectedRoutes = (\n   {guards, children}: {guards: Guard[], children: any }): React.ReactElement => {\n-  const { redirectPath = null } = fp.find(({allowed}) => !allowed(), guards) || {};\n \n-  return redirectPath ? <NavRedirect path={redirectPath}/>\n-  : <Fragment>{children}</Fragment>;\n+  // Pass the guards to the individual routes. Be sure not to overwrite any existing guards\n+  const guardedChildren = fp.flow(\n+    fp.flatten,\n+    fp.toPairs,\n+    fp.map(\n+      ([key, element]: [string, React.ReactElement]) => {\n+        const {guards: elementGuards = []} = element.props;\n+        return React.cloneElement(element, {key, guards: [...elementGuards, ...guards]});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79e09775df6bf0abc27050ddac2385e4461e40e8"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIzMDgwMA==", "bodyText": "fixed", "url": "https://github.com/all-of-us/workbench/pull/3917#discussion_r477230800", "createdAt": "2020-08-26T11:31:51Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/app-router.tsx", "diffHunk": "@@ -38,21 +38,36 @@ const NavRedirect = ({path}) => {\n   return null;\n };\n \n-export const AppRoute = ({path, data = {}, component: Component}): React.ReactElement => {\n+export const AppRoute = ({path, data = {}, guards = [], component: Component}): React.ReactElement => {\n   const routeParams = useParams();\n   const routeHistory = useHistory();\n \n-  return <Route exact={true} path={path} >\n-    <Component urlParams={routeParams} routeHistory={routeHistory} routeConfig={data}/>\n+  return <Route exact={true} path={path} render={\n+    () => {\n+      const { redirectPath = null } = fp.find(({allowed}) => !allowed(), guards) || {};\n+      return redirectPath\n+        ? <NavRedirect path={redirectPath}/>\n+        : <Component urlParams={routeParams} routeHistory={routeHistory} routeConfig={data}/>;\n+    }}>\n   </Route>;\n };\n \n export const ProtectedRoutes = (\n   {guards, children}: {guards: Guard[], children: any }): React.ReactElement => {\n-  const { redirectPath = null } = fp.find(({allowed}) => !allowed(), guards) || {};\n \n-  return redirectPath ? <NavRedirect path={redirectPath}/>\n-  : <Fragment>{children}</Fragment>;\n+  // Pass the guards to the individual routes. Be sure not to overwrite any existing guards\n+  const guardedChildren = fp.flow(\n+    fp.flatten,\n+    fp.toPairs,\n+    fp.map(\n+      ([key, element]: [string, React.ReactElement]) => {\n+        const {guards: elementGuards = []} = element.props;\n+        return React.cloneElement(element, {key, guards: [...elementGuards, ...guards]});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg2MjM0OQ=="}, "originalCommit": {"oid": "79e09775df6bf0abc27050ddac2385e4461e40e8"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MTI5MjkyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/app-routing.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzo0MDowNFrOHGxv1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMTozODoyMlrOHHIDUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg2ODU2Nw==", "bodyText": "Existing issue, but we're not treating this as state, right? so there is nothing to cause a route to be rerendered as a result of a registration status change, for example?\nI think this issue is purely hypothetical for now, since Angular routing should cause this to be reevaluated on every navigate anyways.", "url": "https://github.com/all-of-us/workbench/pull/3917#discussion_r476868567", "createdAt": "2020-08-25T23:40:04Z", "author": {"login": "calbach"}, "path": "ui/src/app/app-routing.tsx", "diffHunk": "@@ -23,11 +24,10 @@ const signInGuard: Guard = {\n   redirectPath: '/login'\n };\n \n-// This will be added back in after the protectedRoutes fix\n-// const registrationGuard: Guard = {\n-//   allowed: (): boolean => hasRegisteredAccess(profileStore.get().profile.dataAccessLevel),\n-//   redirectPath: '/'\n-// };\n+const registrationGuard: Guard = {\n+  allowed: (): boolean => hasRegisteredAccess(profileStore.get().profile.dataAccessLevel),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79e09775df6bf0abc27050ddac2385e4461e40e8"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIzNDAwMw==", "bodyText": "That is correct. The guards are based on stores at the moment. We could use a hook in the top level router to subscribe to the store and re-render on update.", "url": "https://github.com/all-of-us/workbench/pull/3917#discussion_r477234003", "createdAt": "2020-08-26T11:38:22Z", "author": {"login": "petesantos"}, "path": "ui/src/app/app-routing.tsx", "diffHunk": "@@ -23,11 +24,10 @@ const signInGuard: Guard = {\n   redirectPath: '/login'\n };\n \n-// This will be added back in after the protectedRoutes fix\n-// const registrationGuard: Guard = {\n-//   allowed: (): boolean => hasRegisteredAccess(profileStore.get().profile.dataAccessLevel),\n-//   redirectPath: '/'\n-// };\n+const registrationGuard: Guard = {\n+  allowed: (): boolean => hasRegisteredAccess(profileStore.get().profile.dataAccessLevel),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg2ODU2Nw=="}, "originalCommit": {"oid": "79e09775df6bf0abc27050ddac2385e4461e40e8"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2333, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}