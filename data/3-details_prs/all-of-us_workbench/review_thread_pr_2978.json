{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMTc3NzE3", "number": 2978, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMToxMjowOFrODWq5hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMToxMjowOFrODWq5hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MDk4MTE4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/monitoring/StackdriverStatsExporterService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMToxMjowOVrOFbj-DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxOToyOTozOVrOFcA_Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ0NTE5Ng==", "bodyText": "Is there a plan to have this return the actual location in the future?  Please add a comment.", "url": "https://github.com/all-of-us/workbench/pull/2978#discussion_r364445196", "createdAt": "2020-01-08T21:12:09Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/StackdriverStatsExporterService.java", "diffHunk": "@@ -34,23 +49,68 @@ public StackdriverStatsExporterService(Provider<WorkbenchConfig> workbenchConfig\n   public void createAndRegister() {\n     if (!initialized) {\n       try {\n-        final StackdriverStatsConfiguration configuration =\n-            StackdriverStatsConfiguration.builder()\n-                .setMetricNamePrefix(buildMetricNamePrefix())\n-                .setProjectId(workbenchConfigProvider.get().server.projectId)\n-                .build();\n+        final StackdriverStatsConfiguration configuration = makeStackdriverStatsConfiguration();\n         StackdriverStatsExporter.createAndRegister(configuration);\n+        logger.info(\n+            String.format(\n+                \"Configured StackDriver exports with configuration:\\n%s\",\n+                configuration.toString()));\n         initialized = true;\n       } catch (IOException e) {\n         logger.log(Level.WARNING, \"Failed to initialize global StackdriverStatsExporter.\", e);\n       }\n     }\n   }\n \n+  @VisibleForTesting\n+  public StackdriverStatsConfiguration makeStackdriverStatsConfiguration() {\n+    return StackdriverStatsConfiguration.builder()\n+        .setMetricNamePrefix(buildMetricNamePrefix())\n+        .setProjectId(getProjectId())\n+        .setMonitoredResource(makeMonitoredResource())\n+        .build();\n+  }\n+\n+  private MonitoredResource makeMonitoredResource() {\n+    final MonitoredResource.Builder resultBuilder =\n+        MonitoredResource.newBuilder()\n+            .setType(MONITORED_RESOURCE_TYPE)\n+            .putLabels(PROJECT_ID_LABEL, getProjectId())\n+            .putLabels(LOCATION_LABEL, getLocation())\n+            .putLabels(NAMESPACE_LABEL, getEnvironmentShortName())\n+            .putLabels(NODE_ID_LABEL, getNodeId());\n+\n+    return resultBuilder.build();\n+  }\n+\n+  private String getProjectId() {\n+    return workbenchConfigProvider.get().server.projectId;\n+  }\n+\n+  private String getLocation() {\n+    return workbenchConfigProvider.get().server.appEngineLocationId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "409ce2a09b89b2fd6e066582d4d49cecd1c6a996"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkxNTU5Ng==", "bodyText": "Plan would be to have this set in the config at deploy time based on a gcloud command. It's app-wide.\nCan't add comments to the JSON file tho.", "url": "https://github.com/all-of-us/workbench/pull/2978#discussion_r364915596", "createdAt": "2020-01-09T19:18:00Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/StackdriverStatsExporterService.java", "diffHunk": "@@ -34,23 +49,68 @@ public StackdriverStatsExporterService(Provider<WorkbenchConfig> workbenchConfig\n   public void createAndRegister() {\n     if (!initialized) {\n       try {\n-        final StackdriverStatsConfiguration configuration =\n-            StackdriverStatsConfiguration.builder()\n-                .setMetricNamePrefix(buildMetricNamePrefix())\n-                .setProjectId(workbenchConfigProvider.get().server.projectId)\n-                .build();\n+        final StackdriverStatsConfiguration configuration = makeStackdriverStatsConfiguration();\n         StackdriverStatsExporter.createAndRegister(configuration);\n+        logger.info(\n+            String.format(\n+                \"Configured StackDriver exports with configuration:\\n%s\",\n+                configuration.toString()));\n         initialized = true;\n       } catch (IOException e) {\n         logger.log(Level.WARNING, \"Failed to initialize global StackdriverStatsExporter.\", e);\n       }\n     }\n   }\n \n+  @VisibleForTesting\n+  public StackdriverStatsConfiguration makeStackdriverStatsConfiguration() {\n+    return StackdriverStatsConfiguration.builder()\n+        .setMetricNamePrefix(buildMetricNamePrefix())\n+        .setProjectId(getProjectId())\n+        .setMonitoredResource(makeMonitoredResource())\n+        .build();\n+  }\n+\n+  private MonitoredResource makeMonitoredResource() {\n+    final MonitoredResource.Builder resultBuilder =\n+        MonitoredResource.newBuilder()\n+            .setType(MONITORED_RESOURCE_TYPE)\n+            .putLabels(PROJECT_ID_LABEL, getProjectId())\n+            .putLabels(LOCATION_LABEL, getLocation())\n+            .putLabels(NAMESPACE_LABEL, getEnvironmentShortName())\n+            .putLabels(NODE_ID_LABEL, getNodeId());\n+\n+    return resultBuilder.build();\n+  }\n+\n+  private String getProjectId() {\n+    return workbenchConfigProvider.get().server.projectId;\n+  }\n+\n+  private String getLocation() {\n+    return workbenchConfigProvider.get().server.appEngineLocationId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ0NTE5Ng=="}, "originalCommit": {"oid": "409ce2a09b89b2fd6e066582d4d49cecd1c6a996"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkyMDYyMw==", "bodyText": "OK", "url": "https://github.com/all-of-us/workbench/pull/2978#discussion_r364920623", "createdAt": "2020-01-09T19:29:39Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/StackdriverStatsExporterService.java", "diffHunk": "@@ -34,23 +49,68 @@ public StackdriverStatsExporterService(Provider<WorkbenchConfig> workbenchConfig\n   public void createAndRegister() {\n     if (!initialized) {\n       try {\n-        final StackdriverStatsConfiguration configuration =\n-            StackdriverStatsConfiguration.builder()\n-                .setMetricNamePrefix(buildMetricNamePrefix())\n-                .setProjectId(workbenchConfigProvider.get().server.projectId)\n-                .build();\n+        final StackdriverStatsConfiguration configuration = makeStackdriverStatsConfiguration();\n         StackdriverStatsExporter.createAndRegister(configuration);\n+        logger.info(\n+            String.format(\n+                \"Configured StackDriver exports with configuration:\\n%s\",\n+                configuration.toString()));\n         initialized = true;\n       } catch (IOException e) {\n         logger.log(Level.WARNING, \"Failed to initialize global StackdriverStatsExporter.\", e);\n       }\n     }\n   }\n \n+  @VisibleForTesting\n+  public StackdriverStatsConfiguration makeStackdriverStatsConfiguration() {\n+    return StackdriverStatsConfiguration.builder()\n+        .setMetricNamePrefix(buildMetricNamePrefix())\n+        .setProjectId(getProjectId())\n+        .setMonitoredResource(makeMonitoredResource())\n+        .build();\n+  }\n+\n+  private MonitoredResource makeMonitoredResource() {\n+    final MonitoredResource.Builder resultBuilder =\n+        MonitoredResource.newBuilder()\n+            .setType(MONITORED_RESOURCE_TYPE)\n+            .putLabels(PROJECT_ID_LABEL, getProjectId())\n+            .putLabels(LOCATION_LABEL, getLocation())\n+            .putLabels(NAMESPACE_LABEL, getEnvironmentShortName())\n+            .putLabels(NODE_ID_LABEL, getNodeId());\n+\n+    return resultBuilder.build();\n+  }\n+\n+  private String getProjectId() {\n+    return workbenchConfigProvider.get().server.projectId;\n+  }\n+\n+  private String getLocation() {\n+    return workbenchConfigProvider.get().server.appEngineLocationId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ0NTE5Ng=="}, "originalCommit": {"oid": "409ce2a09b89b2fd6e066582d4d49cecd1c6a996"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3575, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}