{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNTI2NjYx", "number": 3908, "title": "[no ticket][risk=no] Puppeteer notebook tests", "bodyText": "Add two new notebook tests for copy-to-workspace testing:\nreader-copy-to-workspace.spec\nowner-copy-to-workspace.spec\nAdd new functions and modify existing functions to support new tests steps.", "createdAt": "2020-08-24T13:35:37Z", "url": "https://github.com/all-of-us/workbench/pull/3908", "merged": true, "mergeCommit": {"oid": "a20b17f33224fcf9f7b59da298c87df038a204b6"}, "closed": true, "closedAt": "2020-08-28T16:26:53Z", "author": {"login": "aweng98"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCDDDYAFqTQ3MzQ4NDkyMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDXCJPAFqTQ3NzgzOTMwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNDg0OTIy", "url": "https://github.com/all-of-us/workbench/pull/3908#pullrequestreview-473484922", "createdAt": "2020-08-24T13:37:19Z", "commit": {"oid": "cb62240ab6ab7037ad669124ed7174577f48970d"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzozNzoyMFrOHFkp-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzo1Njo1OFrOHFmHrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYwNTQ5Ng==", "bodyText": "The Copy Modal window UI is same for copy Concept Set and Notebook. I renamed class name to make it reusable/generic.", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r475605496", "createdAt": "2020-08-24T13:37:20Z", "author": {"login": "aweng98"}, "path": "e2e/app/component/copy-modal.ts", "diffHunk": "@@ -2,9 +2,10 @@ import Modal from 'app/component/modal';\n import Textbox from 'app/element/textbox';\n import {LinkText} from 'app/text-labels';\n import {ElementHandle, Page} from 'puppeteer';\n+import {waitWhileLoading} from 'utils/test-utils';\n \n \n-export default class ConceptsetCopyModal extends Modal {\n+export default class CopyModal extends Modal {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb62240ab6ab7037ad669124ed7174577f48970d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYwOTA4MQ==", "bodyText": "I like getTextContent better.\nFunction used to returns all strings as one long string of texts. It was not very useful for test assertions.\nFunction now returns string array. It can be used to verify modal title and text messages independently.", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r475609081", "createdAt": "2020-08-24T13:39:55Z", "author": {"login": "aweng98"}, "path": "e2e/app/component/modal.ts", "diffHunk": "@@ -32,13 +32,17 @@ export default class Modal extends Container {\n     return this;\n   }\n \n-  async getContent(): Promise<string> {\n+  async getTextContent(): Promise<string[]> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb62240ab6ab7037ad669124ed7174577f48970d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYxOTc1NA==", "bodyText": "Fix flaky step.", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r475619754", "createdAt": "2020-08-24T13:48:59Z", "author": {"login": "aweng98"}, "path": "e2e/app/component/data-resource-card.ts", "diffHunk": "@@ -36,6 +36,7 @@ export default class DataResourceCard {\n    * @throws TimeoutError if fails to find Card.\n    */\n   static async findAllCards(page: Page, timeOut: number = 2000): Promise<DataResourceCard[]> {\n+    await waitWhileLoading(page);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb62240ab6ab7037ad669124ed7174577f48970d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYxOTg0Mw==", "bodyText": "Fix flaky step.", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r475619843", "createdAt": "2020-08-24T13:49:04Z", "author": {"login": "aweng98"}, "path": "e2e/app/element/select.ts", "diffHunk": "@@ -29,7 +29,8 @@ export default class Select extends BaseElement {\n       console.warn(`Select is disabled. Cannot select option value: \"${value}\".`);\n     }\n     const selector = `${this.xpath}/option[text()=\"${value}\"]`;\n-    const option = (await page.$x(selector))[0];\n+    await this.page.waitForXPath(selector);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb62240ab6ab7037ad669124ed7174577f48970d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYyMjI5MA==", "bodyText": "flaky func fix - add retry.", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r475622290", "createdAt": "2020-08-24T13:50:58Z", "author": {"login": "aweng98"}, "path": "e2e/app/page/notebook-cell.ts", "diffHunk": "@@ -34,17 +34,34 @@ export default class NotebookCell {\n   }\n \n   /**\n-   * Set focus to (select) a notebook cell input.\n+   * Set focus to (select) a notebook cell input. Retry up to 3 times if focus fails.\n    * @returns ElementHandle to code input if exists.\n    */\n-  async focus(): Promise<ElementHandle> {\n+  async focus(maxAttempts: number = 3): Promise<ElementHandle> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb62240ab6ab7037ad669124ed7174577f48970d"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYyMjQ5NQ==", "bodyText": "Fix flaky step.", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r475622495", "createdAt": "2020-08-24T13:51:08Z", "author": {"login": "aweng98"}, "path": "e2e/app/page/notebook-page.ts", "diffHunk": "@@ -86,11 +86,13 @@ export default class NotebookPage extends AuthenticatedPage {\n   async waitForKernelIdle(timeOut?: number): Promise<void> {\n     const idleIconSelector = `${CssSelector.kernelIcon}.kernel_idle_icon`;\n     const notifSelector = '#notification_kernel';\n+    const mathJaxMessage = '#MathJax_Message'; // py library loading in background", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb62240ab6ab7037ad669124ed7174577f48970d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYyOTQ4Ng==", "bodyText": "Adding one new feature in findWorkspace function: allow finding a known workspace. This is change needed for owner-copy-to-workspace.spec test to enable reusing same workspace. Because starting a new notebook server on a new workspace takes a long time, up to 10 minutes.", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r475629486", "createdAt": "2020-08-24T13:56:58Z", "author": {"login": "aweng98"}, "path": "e2e/utils/test-utils.ts", "diffHunk": "@@ -187,28 +187,39 @@ export async function performAction(\n \n /**\n  * Find an exsting workspace. Create a new workspace if none exists.\n- * @param {boolean} createNew Create a new workspace, without regard to any existing workspaces or not.\n+ * @param {boolean} create Create a new workspace, regardless any workspace exists or not.\n+ * @param {string} workspaceName The name of a Workspace to find. If not found and create parameter is true, create new and returns it.\n  */\n-export async function findWorkspace(page: Page, createNew: boolean = false): Promise<WorkspaceCard> {\n+export async function findWorkspace(page: Page, opts: {create?: boolean, workspaceName?: string} = {}): Promise<WorkspaceCard> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb62240ab6ab7037ad669124ed7174577f48970d"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjE3Mjcx", "url": "https://github.com/all-of-us/workbench/pull/3908#pullrequestreview-475617271", "createdAt": "2020-08-26T15:40:39Z", "commit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTo0MDo0MFrOHHSIzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODoxNTozOFrOHHYAsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5OTI0NA==", "bodyText": "Something like this will prevent the need for the array mutation:\nreturn fp.flow(\n  fp.map(async (elem) => await getPropValue<string>(elem, 'textContent')).trim()),\n  contents => Promise.all(contents)\n)(elements)", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r477399244", "createdAt": "2020-08-26T15:40:40Z", "author": {"login": "petesantos"}, "path": "e2e/app/component/modal.ts", "diffHunk": "@@ -32,13 +32,17 @@ export default class Modal extends Container {\n     return this;\n   }\n \n-  async getContent(): Promise<string> {\n+  async getTextContent(): Promise<string[]> {\n     // xpath that excludes button labels and spans\n-    // '//*[@role=\"dialog\"]//div[normalize-space(text()) and not(@role=\"button\")]'\n-    const modal = await this.waitUntilVisible();\n-    const modalText = await getPropValue<string>(modal, 'innerText');\n-    console.debug('Modal: \\n' + modalText);\n-    return modalText.toString();\n+    const selector = '//*[@role=\"dialog\"]//div[normalize-space(text()) and not(@role=\"button\")]';\n+    await this.waitUntilVisible();\n+    await this.page.waitForXPath(selector, {visible: true});\n+    const elements = await this.page.$x(selector);\n+    const textContents = [];\n+    for (const elem of elements) {\n+      textContents.push((await getPropValue<string>(elem, 'textContent')).trim());\n+    }\n+    return textContents;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQwMjg4NQ==", "bodyText": "Is this needed?", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r477402885", "createdAt": "2020-08-26T15:45:24Z", "author": {"login": "petesantos"}, "path": "e2e/app/page/google-login.ts", "diffHunk": "@@ -118,6 +118,7 @@ export default class GoogleLoginPage {\n       if (!user || user.trim().length === 0) {\n         console.warn('Login user email: value is empty!!!')\n       }\n+      console.log(`Sign in as ${user}`);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQwNjM4NQ==", "bodyText": "Are we waiting for the notebook cell to be focused? Are there any tools in puppeteer that can check or wait for a focus? Or are notebook cells \"synthetically\" focused (not actually a focused element in the browser).", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r477406385", "createdAt": "2020-08-26T15:50:32Z", "author": {"login": "petesantos"}, "path": "e2e/app/page/notebook-cell.ts", "diffHunk": "@@ -34,17 +34,34 @@ export default class NotebookCell {\n   }\n \n   /**\n-   * Set focus to (select) a notebook cell input.\n+   * Set focus to (select) a notebook cell input. Retry up to 3 times if focus fails.\n    * @returns ElementHandle to code input if exists.\n    */\n-  async focus(): Promise<ElementHandle> {\n+  async focus(maxAttempts: number = 3): Promise<ElementHandle> {\n+    const clickInCell = async (iframe: Frame): Promise<ElementHandle> => {\n+      const selector = this.cellSelector(this.getCellIndex());\n+      const cell = await iframe.waitForSelector(`${selector} .CodeMirror-code`, {visible: true});\n+      await cell.click({delay: 10}); // focus", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQxMjcwNg==", "bodyText": "There is a function in the test suite that will perform a retry until a timeout.\nIf it works for this use case it could simplify this code down to something like:\nconst intervalMillis = 3000;\nconst result = await waitForFn(\n    () => {\n        const [element] = await iframe.$$('body.notebook_app.edit_mode');\n        return element;\n    }, \n    intervalMillis, \n    intervalMillis * maxAttempts );\n!result && console.warn('Notebook body is not in edit_mode.');\nreturn cell;", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r477412706", "createdAt": "2020-08-26T15:59:39Z", "author": {"login": "petesantos"}, "path": "e2e/app/page/notebook-cell.ts", "diffHunk": "@@ -34,17 +34,34 @@ export default class NotebookCell {\n   }\n \n   /**\n-   * Set focus to (select) a notebook cell input.\n+   * Set focus to (select) a notebook cell input. Retry up to 3 times if focus fails.\n    * @returns ElementHandle to code input if exists.\n    */\n-  async focus(): Promise<ElementHandle> {\n+  async focus(maxAttempts: number = 3): Promise<ElementHandle> {\n+    const clickInCell = async (iframe: Frame): Promise<ElementHandle> => {\n+      const selector = this.cellSelector(this.getCellIndex());\n+      const cell = await iframe.waitForSelector(`${selector} .CodeMirror-code`, {visible: true});\n+      await cell.click({delay: 10}); // focus\n+      return cell;\n+    };\n+\n+    const clickAndCheck = async (iframe: Frame): Promise<ElementHandle> => {\n+      maxAttempts--;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyMzA2Ng==", "bodyText": "I am a little confused about what this is checking and returning. It looks like it is checking for the notebook edit mode, but always returns a cell. If any of this fails and focus is not gained, how do we know? Is the console.warn how the error will be reported?", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r477423066", "createdAt": "2020-08-26T16:15:26Z", "author": {"login": "petesantos"}, "path": "e2e/app/page/notebook-cell.ts", "diffHunk": "@@ -34,17 +34,34 @@ export default class NotebookCell {\n   }\n \n   /**\n-   * Set focus to (select) a notebook cell input.\n+   * Set focus to (select) a notebook cell input. Retry up to 3 times if focus fails.\n    * @returns ElementHandle to code input if exists.\n    */\n-  async focus(): Promise<ElementHandle> {\n+  async focus(maxAttempts: number = 3): Promise<ElementHandle> {\n+    const clickInCell = async (iframe: Frame): Promise<ElementHandle> => {\n+      const selector = this.cellSelector(this.getCellIndex());\n+      const cell = await iframe.waitForSelector(`${selector} .CodeMirror-code`, {visible: true});\n+      await cell.click({delay: 10}); // focus\n+      return cell;\n+    };\n+\n+    const clickAndCheck = async (iframe: Frame): Promise<ElementHandle> => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMTUxNQ==", "bodyText": "To avoid let\nconst cell = cellIndex === -1 ? await this.findLastCell() : await this.findCell(cellIndex);", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r477431515", "createdAt": "2020-08-26T16:29:04Z", "author": {"login": "petesantos"}, "path": "e2e/app/page/notebook-page.ts", "diffHunk": "@@ -142,14 +144,19 @@ export default class NotebookPage extends AuthenticatedPage {\n   /**\n    * Click Run button in toolbar. Run focused code cell and insert a new code cell below.\n    *\n-   * @param {number} cellIndex Code Cell index. (first index is 1)\n+   * @param {number} cellIndex Code Cell index. (first index is 1). Use -1 to find last cell.\n    * @param {string} code The code to run.\n    * @param {string} codeFile The full path to file that contains code to run.\n    * @param {number} timeOut The timeout time in milliseconds.\n    * @returns {string} Run output.\n    */\n   async runCodeCell(cellIndex: number, opts: { code?: string, codeFile?: string, timeOut?: number } = {}): Promise<string> {\n-    const cell = await this.findCell(cellIndex)\n+    let cell;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMzExOQ==", "bodyText": "Can this be a const?", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r477433119", "createdAt": "2020-08-26T16:31:29Z", "author": {"login": "petesantos"}, "path": "e2e/tests/notebook/notebook-owner-actions.spec.ts", "diffHunk": "@@ -2,23 +2,30 @@ import DataResourceCard, {CardType} from 'app/component/data-resource-card';\n import NewNotebookModal from 'app/component/new-notebook-modal';\n import WorkspacesPage from 'app/page/workspaces-page';\n import {LinkText} from 'app/text-labels';\n-import {makeRandomName} from 'utils/str-utils';\n+import {makeRandomName, makeWorkspaceName} from 'utils/str-utils';\n import {signIn} from 'utils/test-utils';\n \n // Notebook server start may take a long time. Set maximum test running time to 20 minutes.\n jest.setTimeout(20 * 60 * 1000);\n \n describe('Workspace owner Jupyter notebook action tests', () => {\n \n+  // In order to reduce test playback time, reuse same Workspace for all tests in this file.\n+  // Workspace to be created in first test. If first test fails, next test will create it.\n+  let workspaceName: string;\n+\n   beforeEach(async () => {\n     await signIn(page);\n   });\n \n \n   test('Notebook name must be unique in same workspace', async () => {\n-    const notebookName = makeRandomName('test-notebook');\n     const workspacesPage = new WorkspacesPage(page);\n-    const workspaceAnalysisPage = await workspacesPage.createNotebook(notebookName);\n+\n+    const notebookName = makeRandomName('pyNotebook1');\n+    workspaceName = makeWorkspaceName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3MjUxMw==", "bodyText": "No need to address in this PR - would this be better setup as three distinct functions rather than accepting options that change the functions behavior/return value?", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r477472513", "createdAt": "2020-08-26T17:35:23Z", "author": {"login": "petesantos"}, "path": "e2e/utils/test-utils.ts", "diffHunk": "@@ -187,28 +187,39 @@ export async function performAction(\n \n /**\n  * Find an exsting workspace. Create a new workspace if none exists.\n- * @param {boolean} createNew Create a new workspace, without regard to any existing workspaces or not.\n+ * @param {boolean} create Create a new workspace, regardless any workspace exists or not.\n+ * @param {string} workspaceName The name of a Workspace to find. If not found and create parameter is true, create new and returns it.\n  */\n-export async function findWorkspace(page: Page, createNew: boolean = false): Promise<WorkspaceCard> {\n+export async function findWorkspace(page: Page, opts: {create?: boolean, workspaceName?: string} = {}): Promise<WorkspaceCard> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3Mzc1OA==", "bodyText": "could this be a const/function or could extractNameSpace be directly called instead of using let?", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r477473758", "createdAt": "2020-08-26T17:37:33Z", "author": {"login": "petesantos"}, "path": "e2e/tests/notebook/owner-copy-to-workspace.spec.ts", "diffHunk": "@@ -0,0 +1,101 @@\n+import DataResourceCard, {CardType} from 'app/component/data-resource-card';\n+import Modal from 'app/component/modal';\n+import DataPage, {TabLabelAlias} from 'app/page/data-page';\n+import NotebookPreviewPage from 'app/page/notebook-preview-page';\n+import {LinkText} from 'app/text-labels';\n+import {extractNamespace, makeRandomName} from 'utils/str-utils';\n+import {findWorkspace, signIn} from 'utils/test-utils';\n+\n+// Notebook server start may take a long time. Set maximum test running time to 20 minutes.\n+jest.setTimeout(20 * 60 * 1000);\n+\n+describe('Workspace owner Jupyter notebook action tests', () => {\n+\n+  beforeEach(async () => {\n+    await signIn(page);\n+  });\n+\n+  /**\n+   * Test:\n+   * - Create new Workspace as the copy-to destination Workspace.\n+   * - Create new Workspace as copy-from Workspace and create new notebook in this Workspace.\n+   * - Run code to print WORKSPACE_NAMESPACE. It should match Workspace namespace from Workspace URL.\n+   * - Copy notebook to destination Workspace and give copied notebook a new name.\n+   * - Verify copied notebook is in destination Workspace.\n+   * - Open copied notebook and run code to print WORKSPACE_NAMESPACE. It should match destination Workspace namespace.\n+   * - Delete notebooks.\n+   */\n+  test('Copy notebook to another Workspace', async () => {\n+    // Create destination workspace\n+    const toWorkspace = await findWorkspace(page, {create: true}).then(card => card.getWorkspaceName());\n+\n+    // Create copy-from workspace\n+    await findWorkspace(page, {create: true}).then(card => card.clickWorkspaceName());\n+\n+    // Create notebook in copy-from workspace.\n+    const copyFromNotebookName = makeRandomName('pytest');\n+    const dataPage = new DataPage(page);\n+\n+    // Get the billing project name from page url.\n+    let namespace = extractNamespace(new URL(page.url()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5NDk0OA==", "bodyText": "Could these other let variables be functions (e.g in this case accept the notebookName as a param)?", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r477494948", "createdAt": "2020-08-26T18:14:41Z", "author": {"login": "petesantos"}, "path": "e2e/tests/notebook/owner-copy-to-workspace.spec.ts", "diffHunk": "@@ -0,0 +1,101 @@\n+import DataResourceCard, {CardType} from 'app/component/data-resource-card';\n+import Modal from 'app/component/modal';\n+import DataPage, {TabLabelAlias} from 'app/page/data-page';\n+import NotebookPreviewPage from 'app/page/notebook-preview-page';\n+import {LinkText} from 'app/text-labels';\n+import {extractNamespace, makeRandomName} from 'utils/str-utils';\n+import {findWorkspace, signIn} from 'utils/test-utils';\n+\n+// Notebook server start may take a long time. Set maximum test running time to 20 minutes.\n+jest.setTimeout(20 * 60 * 1000);\n+\n+describe('Workspace owner Jupyter notebook action tests', () => {\n+\n+  beforeEach(async () => {\n+    await signIn(page);\n+  });\n+\n+  /**\n+   * Test:\n+   * - Create new Workspace as the copy-to destination Workspace.\n+   * - Create new Workspace as copy-from Workspace and create new notebook in this Workspace.\n+   * - Run code to print WORKSPACE_NAMESPACE. It should match Workspace namespace from Workspace URL.\n+   * - Copy notebook to destination Workspace and give copied notebook a new name.\n+   * - Verify copied notebook is in destination Workspace.\n+   * - Open copied notebook and run code to print WORKSPACE_NAMESPACE. It should match destination Workspace namespace.\n+   * - Delete notebooks.\n+   */\n+  test('Copy notebook to another Workspace', async () => {\n+    // Create destination workspace\n+    const toWorkspace = await findWorkspace(page, {create: true}).then(card => card.getWorkspaceName());\n+\n+    // Create copy-from workspace\n+    await findWorkspace(page, {create: true}).then(card => card.clickWorkspaceName());\n+\n+    // Create notebook in copy-from workspace.\n+    const copyFromNotebookName = makeRandomName('pytest');\n+    const dataPage = new DataPage(page);\n+\n+    // Get the billing project name from page url.\n+    let namespace = extractNamespace(new URL(page.url()));\n+\n+    let notebookPage = await dataPage.createNotebook(copyFromNotebookName);\n+\n+    // Run code to print out Workspace namespace.\n+    const code =\n+       'import os\\n' +\n+       'print(os.getenv(\\'WORKSPACE_NAMESPACE\\'))';\n+\n+    let codeOutput = await notebookPage.runCodeCell(1, {code});\n+    expect(codeOutput).toEqual(namespace);\n+\n+    // Exit notebook and returns to the Workspace Analysis tab.\n+    const analysisPage = await notebookPage.goAnalysisPage();\n+\n+    // Copy to destination Workspace and give notebook a new name.\n+    const copiedNotebookName = makeRandomName('copy-of');\n+    await analysisPage.copyNotebookToWorkspace(copyFromNotebookName, toWorkspace, copiedNotebookName);\n+\n+    // Verify Copy Success modal.\n+    const modal = new Modal(page);\n+    await modal.waitForButton(LinkText.GoToCopiedNotebook);\n+    const textContent = await modal.getTextContent();\n+    const successMsg = `Successfully copied ${copyFromNotebookName}  to ${toWorkspace} . Do you want to view the copied Notebook?`;\n+    expect(textContent).toContain(successMsg);\n+    // Dismiss modal.\n+    await modal.clickButton(LinkText.StayHere, {waitForClose: true});\n+\n+    // Delete notebook\n+    let modalTextContent = await analysisPage.deleteNotebook(copyFromNotebookName);\n+    expect(modalTextContent).toContain(`Are you sure you want to delete Notebook: ${copyFromNotebookName}?`);\n+\n+    // Perform actions in copied notebook.\n+    // Open destination Workspace\n+    await findWorkspace(page, {workspaceName: toWorkspace}).then(card => card.clickWorkspaceName());\n+    // Get the destination Workspace namespace.\n+    namespace = extractNamespace(new URL(page.url()));\n+\n+    // Verify copy-to notebook exists in destination Workspace\n+    await dataPage.openTab(TabLabelAlias.Analysis);\n+    const dataResourceCard = new DataResourceCard(page);\n+    const notebookCard = await dataResourceCard.findCard(copiedNotebookName, CardType.Notebook);\n+    expect(notebookCard).toBeTruthy();\n+\n+    // Open copied notebook and run code to verify billing project name.\n+    await notebookCard.clickResourceName();\n+    const notebookPreviewPage = new NotebookPreviewPage(page);\n+    await notebookPreviewPage.waitForLoad();\n+    notebookPage = await notebookPreviewPage.openEditMode(copiedNotebookName);\n+\n+    // Run same code and compare namespace.\n+    codeOutput = await notebookPage.runCodeCell(-1, {code});\n+    expect(codeOutput).toEqual(namespace);\n+\n+    // Exit notebook. Returns to the Workspace Analysis tab.\n+    await notebookPage.goAnalysisPage();\n+    // Delete notebook\n+    modalTextContent = await analysisPage.deleteNotebook(copiedNotebookName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5NTQ3Mw==", "bodyText": "Same basic premise as above - could the let variables be factored out?", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r477495473", "createdAt": "2020-08-26T18:15:38Z", "author": {"login": "petesantos"}, "path": "e2e/tests/notebook/reader-copy-to-workspace.spec.ts", "diffHunk": "@@ -0,0 +1,143 @@\n+import Navigation, {NavLink} from 'app/component/navigation';\n+import Link from 'app/element/link';\n+import DataPage, {TabLabelAlias} from 'app/page/data-page';\n+import WorkspaceAboutPage from 'app/page/workspace-about-page';\n+import WorkspaceAnalysisPage from 'app/page/workspace-analysis-page';\n+import {EllipsisMenuAction, Language, LinkText, WorkspaceAccessLevel} from 'app/text-labels';\n+import {config} from 'resources/workbench-config';\n+import {makeRandomName} from 'utils/str-utils';\n+import {findWorkspace, signIn, signInAs, waitWhileLoading} from 'utils/test-utils';\n+import WorkspaceCard from 'app/component/workspace-card';\n+import DataResourceCard, {CardType} from 'app/component/data-resource-card';\n+import Modal from 'app/component/modal';\n+import NotebookPreviewPage from 'app/page/notebook-preview-page';\n+\n+jest.setTimeout(20 * 60 * 1000);\n+\n+describe('Workspace reader Jupyter notebook action tests', () => {\n+\n+  beforeEach(async () => {\n+    await signIn(page);\n+  });\n+\n+  /**\n+   * Test: Workspace reader can copy notebook to another Workspace then gain Edit right to the clone notebook.\n+   * - Create a Workspace and a new notebook. Run simple code in notebook and save notebook.\n+   * - Share Workspace with collaborator as READER.\n+   * - Sign in as collaborator.\n+   * - Create Workspace where collaborator is the OWNER.\n+   * - Verify Workspace and notebook permissions.\n+   * - Copy notebook to collaborator Workspace.\n+   * - Full Edit rights to clone notebook.\n+   * - Verify original notebook contents are unchaged in clone notebook.\n+   * - Delete clone notebook.\n+   */\n+  test('Workspace reader copy notebook to another workspace', async () => {\n+    const workspaceName = await findWorkspace(page, {create: true}).then(card => card.clickWorkspaceName());\n+\n+    let dataPage = new DataPage(page);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c40a93bee0eab9f234fdf5122ad323bdd8669c04", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/c40a93bee0eab9f234fdf5122ad323bdd8669c04", "committedDate": "2020-08-27T15:30:34Z", "message": "copy notebook test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41b55fcb15a39b1bf167a3034113ea4133e28ef0", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/41b55fcb15a39b1bf167a3034113ea4133e28ef0", "committedDate": "2020-08-27T15:30:34Z", "message": "notebook-copy.spec test working"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "821197dae6f44943f835b6d7c4ebc46a8b6dec81", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/821197dae6f44943f835b6d7c4ebc46a8b6dec81", "committedDate": "2020-08-27T15:30:34Z", "message": "workspace-reader-actions.spec test working"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab07361e4d713556df09675293133023bafd612a", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/ab07361e4d713556df09675293133023bafd612a", "committedDate": "2020-08-27T15:30:34Z", "message": "rename tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce6bb45c364e86c86ef25de00897a672dc06830f", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/ce6bb45c364e86c86ef25de00897a672dc06830f", "committedDate": "2020-08-27T15:30:34Z", "message": "mv reader-copy-to-workspace test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07533c957df75d9926e27cde247190f7678755ff", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/07533c957df75d9926e27cde247190f7678755ff", "committedDate": "2020-08-27T15:30:34Z", "message": "fix success copy msg"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07c9bb0a4a64418860b281306c52495f9c0b21d4", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/07c9bb0a4a64418860b281306c52495f9c0b21d4", "committedDate": "2020-08-28T15:36:34Z", "message": "PR feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6051c271bc64d661bf891671c6220424fd248465", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/6051c271bc64d661bf891671c6220424fd248465", "committedDate": "2020-08-24T14:58:59Z", "message": "fix success copy msg"}, "afterCommit": {"oid": "07c9bb0a4a64418860b281306c52495f9c0b21d4", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/07c9bb0a4a64418860b281306c52495f9c0b21d4", "committedDate": "2020-08-28T15:36:34Z", "message": "PR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3ODAwNTQ1", "url": "https://github.com/all-of-us/workbench/pull/3908#pullrequestreview-477800545", "createdAt": "2020-08-28T14:59:13Z", "commit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDo1OToxM1rOHJJ4xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNTozNTowMlrOHJLJ-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM2MTIyMw==", "bodyText": "I want to know user email for debug tests failures.", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r479361223", "createdAt": "2020-08-28T14:59:13Z", "author": {"login": "aweng98"}, "path": "e2e/app/page/google-login.ts", "diffHunk": "@@ -118,6 +118,7 @@ export default class GoogleLoginPage {\n       if (!user || user.trim().length === 0) {\n         console.warn('Login user email: value is empty!!!')\n       }\n+      console.log(`Sign in as ${user}`);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQwMjg4NQ=="}, "originalCommit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM2MTQ0OA==", "bodyText": "This is nice! \ud83d\udc4d", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r479361448", "createdAt": "2020-08-28T14:59:35Z", "author": {"login": "aweng98"}, "path": "e2e/app/component/modal.ts", "diffHunk": "@@ -32,13 +32,17 @@ export default class Modal extends Container {\n     return this;\n   }\n \n-  async getContent(): Promise<string> {\n+  async getTextContent(): Promise<string[]> {\n     // xpath that excludes button labels and spans\n-    // '//*[@role=\"dialog\"]//div[normalize-space(text()) and not(@role=\"button\")]'\n-    const modal = await this.waitUntilVisible();\n-    const modalText = await getPropValue<string>(modal, 'innerText');\n-    console.debug('Modal: \\n' + modalText);\n-    return modalText.toString();\n+    const selector = '//*[@role=\"dialog\"]//div[normalize-space(text()) and not(@role=\"button\")]';\n+    await this.waitUntilVisible();\n+    await this.page.waitForXPath(selector, {visible: true});\n+    const elements = await this.page.$x(selector);\n+    const textContents = [];\n+    for (const elem of elements) {\n+      textContents.push((await getPropValue<string>(elem, 'textContent')).trim());\n+    }\n+    return textContents;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5OTI0NA=="}, "originalCommit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM2NDE3Ng==", "bodyText": "notebook cell is not a standard input html element. Puppeteer api focus() is useless for notebook cell. notebook focused actually selects both input and output cells.\nIn this function, code is waiting for cell to be in focus by look for the body element that match selector 'body.notebook_app.edit_mode'. It is what I know to make sure cell is \"focused\".", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r479364176", "createdAt": "2020-08-28T15:04:15Z", "author": {"login": "aweng98"}, "path": "e2e/app/page/notebook-cell.ts", "diffHunk": "@@ -34,17 +34,34 @@ export default class NotebookCell {\n   }\n \n   /**\n-   * Set focus to (select) a notebook cell input.\n+   * Set focus to (select) a notebook cell input. Retry up to 3 times if focus fails.\n    * @returns ElementHandle to code input if exists.\n    */\n-  async focus(): Promise<ElementHandle> {\n+  async focus(maxAttempts: number = 3): Promise<ElementHandle> {\n+    const clickInCell = async (iframe: Frame): Promise<ElementHandle> => {\n+      const selector = this.cellSelector(this.getCellIndex());\n+      const cell = await iframe.waitForSelector(`${selector} .CodeMirror-code`, {visible: true});\n+      await cell.click({delay: 10}); // focus", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQwNjM4NQ=="}, "originalCommit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM2NzA0MQ==", "bodyText": "ah, because I decided to ignore body.notebook_app.edit_mode is not found error after retries max was reached. let the test continue to run while log a warning so I can be informed about what happened. I need more time to learn and refine notebook functions after a lot of test runs.", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r479367041", "createdAt": "2020-08-28T15:09:03Z", "author": {"login": "aweng98"}, "path": "e2e/app/page/notebook-cell.ts", "diffHunk": "@@ -34,17 +34,34 @@ export default class NotebookCell {\n   }\n \n   /**\n-   * Set focus to (select) a notebook cell input.\n+   * Set focus to (select) a notebook cell input. Retry up to 3 times if focus fails.\n    * @returns ElementHandle to code input if exists.\n    */\n-  async focus(): Promise<ElementHandle> {\n+  async focus(maxAttempts: number = 3): Promise<ElementHandle> {\n+    const clickInCell = async (iframe: Frame): Promise<ElementHandle> => {\n+      const selector = this.cellSelector(this.getCellIndex());\n+      const cell = await iframe.waitForSelector(`${selector} .CodeMirror-code`, {visible: true});\n+      await cell.click({delay: 10}); // focus\n+      return cell;\n+    };\n+\n+    const clickAndCheck = async (iframe: Frame): Promise<ElementHandle> => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyMzA2Ng=="}, "originalCommit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3MDQxNg==", "bodyText": "\ud83d\udc4d This is a good sample code. I know the function existed but don't know how to use it. I created a JIRA ticket for refactor functions that has retries. I'd like to do all refactor in a new PR.", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r479370416", "createdAt": "2020-08-28T15:14:38Z", "author": {"login": "aweng98"}, "path": "e2e/app/page/notebook-cell.ts", "diffHunk": "@@ -34,17 +34,34 @@ export default class NotebookCell {\n   }\n \n   /**\n-   * Set focus to (select) a notebook cell input.\n+   * Set focus to (select) a notebook cell input. Retry up to 3 times if focus fails.\n    * @returns ElementHandle to code input if exists.\n    */\n-  async focus(): Promise<ElementHandle> {\n+  async focus(maxAttempts: number = 3): Promise<ElementHandle> {\n+    const clickInCell = async (iframe: Frame): Promise<ElementHandle> => {\n+      const selector = this.cellSelector(this.getCellIndex());\n+      const cell = await iframe.waitForSelector(`${selector} .CodeMirror-code`, {visible: true});\n+      await cell.click({delay: 10}); // focus\n+      return cell;\n+    };\n+\n+    const clickAndCheck = async (iframe: Frame): Promise<ElementHandle> => {\n+      maxAttempts--;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQxMjcwNg=="}, "originalCommit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3MTExNg==", "bodyText": "\ud83d\udc4d Done.", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r479371116", "createdAt": "2020-08-28T15:15:51Z", "author": {"login": "aweng98"}, "path": "e2e/app/page/notebook-page.ts", "diffHunk": "@@ -142,14 +144,19 @@ export default class NotebookPage extends AuthenticatedPage {\n   /**\n    * Click Run button in toolbar. Run focused code cell and insert a new code cell below.\n    *\n-   * @param {number} cellIndex Code Cell index. (first index is 1)\n+   * @param {number} cellIndex Code Cell index. (first index is 1). Use -1 to find last cell.\n    * @param {string} code The code to run.\n    * @param {string} codeFile The full path to file that contains code to run.\n    * @param {number} timeOut The timeout time in milliseconds.\n    * @returns {string} Run output.\n    */\n   async runCodeCell(cellIndex: number, opts: { code?: string, codeFile?: string, timeOut?: number } = {}): Promise<string> {\n-    const cell = await this.findCell(cellIndex)\n+    let cell;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMTUxNQ=="}, "originalCommit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3MTk1OA==", "bodyText": "compile failed with const.", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r479371958", "createdAt": "2020-08-28T15:17:20Z", "author": {"login": "aweng98"}, "path": "e2e/tests/notebook/notebook-owner-actions.spec.ts", "diffHunk": "@@ -2,23 +2,30 @@ import DataResourceCard, {CardType} from 'app/component/data-resource-card';\n import NewNotebookModal from 'app/component/new-notebook-modal';\n import WorkspacesPage from 'app/page/workspaces-page';\n import {LinkText} from 'app/text-labels';\n-import {makeRandomName} from 'utils/str-utils';\n+import {makeRandomName, makeWorkspaceName} from 'utils/str-utils';\n import {signIn} from 'utils/test-utils';\n \n // Notebook server start may take a long time. Set maximum test running time to 20 minutes.\n jest.setTimeout(20 * 60 * 1000);\n \n describe('Workspace owner Jupyter notebook action tests', () => {\n \n+  // In order to reduce test playback time, reuse same Workspace for all tests in this file.\n+  // Workspace to be created in first test. If first test fails, next test will create it.\n+  let workspaceName: string;\n+\n   beforeEach(async () => {\n     await signIn(page);\n   });\n \n \n   test('Notebook name must be unique in same workspace', async () => {\n-    const notebookName = makeRandomName('test-notebook');\n     const workspacesPage = new WorkspacesPage(page);\n-    const workspaceAnalysisPage = await workspacesPage.createNotebook(notebookName);\n+\n+    const notebookName = makeRandomName('pyNotebook1');\n+    workspaceName = makeWorkspaceName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMzExOQ=="}, "originalCommit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3NTIzOQ==", "bodyText": "I got rid of let.\nCreated toWorkspaceNamespace and fromWorkspaceNamespace variables.", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r479375239", "createdAt": "2020-08-28T15:23:15Z", "author": {"login": "aweng98"}, "path": "e2e/tests/notebook/owner-copy-to-workspace.spec.ts", "diffHunk": "@@ -0,0 +1,101 @@\n+import DataResourceCard, {CardType} from 'app/component/data-resource-card';\n+import Modal from 'app/component/modal';\n+import DataPage, {TabLabelAlias} from 'app/page/data-page';\n+import NotebookPreviewPage from 'app/page/notebook-preview-page';\n+import {LinkText} from 'app/text-labels';\n+import {extractNamespace, makeRandomName} from 'utils/str-utils';\n+import {findWorkspace, signIn} from 'utils/test-utils';\n+\n+// Notebook server start may take a long time. Set maximum test running time to 20 minutes.\n+jest.setTimeout(20 * 60 * 1000);\n+\n+describe('Workspace owner Jupyter notebook action tests', () => {\n+\n+  beforeEach(async () => {\n+    await signIn(page);\n+  });\n+\n+  /**\n+   * Test:\n+   * - Create new Workspace as the copy-to destination Workspace.\n+   * - Create new Workspace as copy-from Workspace and create new notebook in this Workspace.\n+   * - Run code to print WORKSPACE_NAMESPACE. It should match Workspace namespace from Workspace URL.\n+   * - Copy notebook to destination Workspace and give copied notebook a new name.\n+   * - Verify copied notebook is in destination Workspace.\n+   * - Open copied notebook and run code to print WORKSPACE_NAMESPACE. It should match destination Workspace namespace.\n+   * - Delete notebooks.\n+   */\n+  test('Copy notebook to another Workspace', async () => {\n+    // Create destination workspace\n+    const toWorkspace = await findWorkspace(page, {create: true}).then(card => card.getWorkspaceName());\n+\n+    // Create copy-from workspace\n+    await findWorkspace(page, {create: true}).then(card => card.clickWorkspaceName());\n+\n+    // Create notebook in copy-from workspace.\n+    const copyFromNotebookName = makeRandomName('pytest');\n+    const dataPage = new DataPage(page);\n+\n+    // Get the billing project name from page url.\n+    let namespace = extractNamespace(new URL(page.url()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3Mzc1OA=="}, "originalCommit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3Nzg4NA==", "bodyText": "yeah probably. but it will be more change code. I have other improvement to make in new PR. This would be a good to include in new PR.", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r479377884", "createdAt": "2020-08-28T15:28:08Z", "author": {"login": "aweng98"}, "path": "e2e/tests/notebook/owner-copy-to-workspace.spec.ts", "diffHunk": "@@ -0,0 +1,101 @@\n+import DataResourceCard, {CardType} from 'app/component/data-resource-card';\n+import Modal from 'app/component/modal';\n+import DataPage, {TabLabelAlias} from 'app/page/data-page';\n+import NotebookPreviewPage from 'app/page/notebook-preview-page';\n+import {LinkText} from 'app/text-labels';\n+import {extractNamespace, makeRandomName} from 'utils/str-utils';\n+import {findWorkspace, signIn} from 'utils/test-utils';\n+\n+// Notebook server start may take a long time. Set maximum test running time to 20 minutes.\n+jest.setTimeout(20 * 60 * 1000);\n+\n+describe('Workspace owner Jupyter notebook action tests', () => {\n+\n+  beforeEach(async () => {\n+    await signIn(page);\n+  });\n+\n+  /**\n+   * Test:\n+   * - Create new Workspace as the copy-to destination Workspace.\n+   * - Create new Workspace as copy-from Workspace and create new notebook in this Workspace.\n+   * - Run code to print WORKSPACE_NAMESPACE. It should match Workspace namespace from Workspace URL.\n+   * - Copy notebook to destination Workspace and give copied notebook a new name.\n+   * - Verify copied notebook is in destination Workspace.\n+   * - Open copied notebook and run code to print WORKSPACE_NAMESPACE. It should match destination Workspace namespace.\n+   * - Delete notebooks.\n+   */\n+  test('Copy notebook to another Workspace', async () => {\n+    // Create destination workspace\n+    const toWorkspace = await findWorkspace(page, {create: true}).then(card => card.getWorkspaceName());\n+\n+    // Create copy-from workspace\n+    await findWorkspace(page, {create: true}).then(card => card.clickWorkspaceName());\n+\n+    // Create notebook in copy-from workspace.\n+    const copyFromNotebookName = makeRandomName('pytest');\n+    const dataPage = new DataPage(page);\n+\n+    // Get the billing project name from page url.\n+    let namespace = extractNamespace(new URL(page.url()));\n+\n+    let notebookPage = await dataPage.createNotebook(copyFromNotebookName);\n+\n+    // Run code to print out Workspace namespace.\n+    const code =\n+       'import os\\n' +\n+       'print(os.getenv(\\'WORKSPACE_NAMESPACE\\'))';\n+\n+    let codeOutput = await notebookPage.runCodeCell(1, {code});\n+    expect(codeOutput).toEqual(namespace);\n+\n+    // Exit notebook and returns to the Workspace Analysis tab.\n+    const analysisPage = await notebookPage.goAnalysisPage();\n+\n+    // Copy to destination Workspace and give notebook a new name.\n+    const copiedNotebookName = makeRandomName('copy-of');\n+    await analysisPage.copyNotebookToWorkspace(copyFromNotebookName, toWorkspace, copiedNotebookName);\n+\n+    // Verify Copy Success modal.\n+    const modal = new Modal(page);\n+    await modal.waitForButton(LinkText.GoToCopiedNotebook);\n+    const textContent = await modal.getTextContent();\n+    const successMsg = `Successfully copied ${copyFromNotebookName}  to ${toWorkspace} . Do you want to view the copied Notebook?`;\n+    expect(textContent).toContain(successMsg);\n+    // Dismiss modal.\n+    await modal.clickButton(LinkText.StayHere, {waitForClose: true});\n+\n+    // Delete notebook\n+    let modalTextContent = await analysisPage.deleteNotebook(copyFromNotebookName);\n+    expect(modalTextContent).toContain(`Are you sure you want to delete Notebook: ${copyFromNotebookName}?`);\n+\n+    // Perform actions in copied notebook.\n+    // Open destination Workspace\n+    await findWorkspace(page, {workspaceName: toWorkspace}).then(card => card.clickWorkspaceName());\n+    // Get the destination Workspace namespace.\n+    namespace = extractNamespace(new URL(page.url()));\n+\n+    // Verify copy-to notebook exists in destination Workspace\n+    await dataPage.openTab(TabLabelAlias.Analysis);\n+    const dataResourceCard = new DataResourceCard(page);\n+    const notebookCard = await dataResourceCard.findCard(copiedNotebookName, CardType.Notebook);\n+    expect(notebookCard).toBeTruthy();\n+\n+    // Open copied notebook and run code to verify billing project name.\n+    await notebookCard.clickResourceName();\n+    const notebookPreviewPage = new NotebookPreviewPage(page);\n+    await notebookPreviewPage.waitForLoad();\n+    notebookPage = await notebookPreviewPage.openEditMode(copiedNotebookName);\n+\n+    // Run same code and compare namespace.\n+    codeOutput = await notebookPage.runCodeCell(-1, {code});\n+    expect(codeOutput).toEqual(namespace);\n+\n+    // Exit notebook. Returns to the Workspace Analysis tab.\n+    await notebookPage.goAnalysisPage();\n+    // Delete notebook\n+    modalTextContent = await analysisPage.deleteNotebook(copiedNotebookName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5NDk0OA=="}, "originalCommit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM4MDk4NA==", "bodyText": "got rid of all let.", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r479380984", "createdAt": "2020-08-28T15:33:20Z", "author": {"login": "aweng98"}, "path": "e2e/tests/notebook/reader-copy-to-workspace.spec.ts", "diffHunk": "@@ -0,0 +1,143 @@\n+import Navigation, {NavLink} from 'app/component/navigation';\n+import Link from 'app/element/link';\n+import DataPage, {TabLabelAlias} from 'app/page/data-page';\n+import WorkspaceAboutPage from 'app/page/workspace-about-page';\n+import WorkspaceAnalysisPage from 'app/page/workspace-analysis-page';\n+import {EllipsisMenuAction, Language, LinkText, WorkspaceAccessLevel} from 'app/text-labels';\n+import {config} from 'resources/workbench-config';\n+import {makeRandomName} from 'utils/str-utils';\n+import {findWorkspace, signIn, signInAs, waitWhileLoading} from 'utils/test-utils';\n+import WorkspaceCard from 'app/component/workspace-card';\n+import DataResourceCard, {CardType} from 'app/component/data-resource-card';\n+import Modal from 'app/component/modal';\n+import NotebookPreviewPage from 'app/page/notebook-preview-page';\n+\n+jest.setTimeout(20 * 60 * 1000);\n+\n+describe('Workspace reader Jupyter notebook action tests', () => {\n+\n+  beforeEach(async () => {\n+    await signIn(page);\n+  });\n+\n+  /**\n+   * Test: Workspace reader can copy notebook to another Workspace then gain Edit right to the clone notebook.\n+   * - Create a Workspace and a new notebook. Run simple code in notebook and save notebook.\n+   * - Share Workspace with collaborator as READER.\n+   * - Sign in as collaborator.\n+   * - Create Workspace where collaborator is the OWNER.\n+   * - Verify Workspace and notebook permissions.\n+   * - Copy notebook to collaborator Workspace.\n+   * - Full Edit rights to clone notebook.\n+   * - Verify original notebook contents are unchaged in clone notebook.\n+   * - Delete clone notebook.\n+   */\n+  test('Workspace reader copy notebook to another workspace', async () => {\n+    const workspaceName = await findWorkspace(page, {create: true}).then(card => card.clickWorkspaceName());\n+\n+    let dataPage = new DataPage(page);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5NTQ3Mw=="}, "originalCommit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM4MjAwOA==", "bodyText": "\ud83e\udd14 probably a personal preference choice. I don't have strong opinion about this approach. I am just used-to this approach now after writing a lot of them.", "url": "https://github.com/all-of-us/workbench/pull/3908#discussion_r479382008", "createdAt": "2020-08-28T15:35:02Z", "author": {"login": "aweng98"}, "path": "e2e/utils/test-utils.ts", "diffHunk": "@@ -187,28 +187,39 @@ export async function performAction(\n \n /**\n  * Find an exsting workspace. Create a new workspace if none exists.\n- * @param {boolean} createNew Create a new workspace, without regard to any existing workspaces or not.\n+ * @param {boolean} create Create a new workspace, regardless any workspace exists or not.\n+ * @param {string} workspaceName The name of a Workspace to find. If not found and create parameter is true, create new and returns it.\n  */\n-export async function findWorkspace(page: Page, createNew: boolean = false): Promise<WorkspaceCard> {\n+export async function findWorkspace(page: Page, opts: {create?: boolean, workspaceName?: string} = {}): Promise<WorkspaceCard> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3MjUxMw=="}, "originalCommit": {"oid": "6051c271bc64d661bf891671c6220424fd248465"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3ODM5MzA1", "url": "https://github.com/all-of-us/workbench/pull/3908#pullrequestreview-477839305", "createdAt": "2020-08-28T15:49:10Z", "commit": {"oid": "07c9bb0a4a64418860b281306c52495f9c0b21d4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4320, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}