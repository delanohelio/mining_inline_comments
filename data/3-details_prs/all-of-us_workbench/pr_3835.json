{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3ODI0MjQ0", "number": 3835, "title": "[RW-5343][risk=no] filter on action types", "bodyText": "Simple filter on action types for audit cards. If any matching action type is unchecked, the card is not shown. The approach can be readily extended to other attributes of combinations of attributes on actions.\nFormatting isn't the best, but it works. I also moved away from UPPER_SNAKE_CASE to Title Case labels, which I think is much easier on the eyes.\nFilter labels include a count of how many cards match. Since a card can have many action types, the sum of the numbers in the filter may be more than the number of cards available (i.e. some match multiple filter categories, but all actions on a card must be checked in order for it to be shown.\nTODO:\n[] some better formatting and alignment\n[] visual effect of some kind to show a card being removed or added\n[] generalized component to filter\n\n\na collection of objects based on a function to evaluate each one\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n I have run the E2E tests on ths change against my local UI + API server with yarn test:local\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-07-28T13:52:55Z", "url": "https://github.com/all-of-us/workbench/pull/3835", "merged": true, "mergeCommit": {"oid": "8f542929bcfeae5acabd125204fe87178c6b1947"}, "closed": true, "closedAt": "2020-08-11T14:24:10Z", "author": {"login": "jaycarlton"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8TzpmgH2gAyNDU3ODI0MjQ0OmM2Yjc1MWFmZWZkZTU0Y2MzNGYwYmVkMzhmNDY5NGIzNjFkYzUxNjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc93iLDAFqTQ2NTExMzE4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/c6b751afefde54cc34f0bed38f4694b361dc5167", "committedDate": "2020-08-06T18:06:09Z", "message": "action type filter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1bfc1aa8e00e624e9ad7188c87b5dfe92f40f8eb", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/1bfc1aa8e00e624e9ad7188c87b5dfe92f40f8eb", "committedDate": "2020-07-28T22:45:09Z", "message": "updates & linting"}, "afterCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/c6b751afefde54cc34f0bed38f4694b361dc5167", "committedDate": "2020-08-06T18:06:09Z", "message": "action type filter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyODg1MTc4", "url": "https://github.com/all-of-us/workbench/pull/3835#pullrequestreview-462885178", "createdAt": "2020-08-06T21:20:48Z", "commit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMToyMDo0OFrOG9Eqsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo1MDowM1rOG9c4Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5Mjc4Nw==", "bodyText": "For better styling a 1rem marginLeft may be better.\nTOL - as this page is evolving it may make sense to take a step back and look at the markup and styling. We may be able to make some improvements in that area.", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r466692787", "createdAt": "2020-08-06T21:20:48Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,115 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: { [key: string]: FilterEntry },\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          margin: '0',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5MzYwMQ==", "bodyText": "nit / personal preference - remove the border. If you do want to keep the border some padding may help.\nalso consider 1px solid ${colors.secondary} to combine the style onto one line (using backtics the formatting won't let me show the backtics)", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r466693601", "createdAt": "2020-08-06T21:22:34Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,115 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: { [key: string]: FilterEntry },\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          margin: '0',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: '1px solid',\n+          borderColor: colors.secondary,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNDQ2Nw==", "bodyText": "This might be a bit cleaner / flatter than the nested flows\nfp.flow(\n    fp.map(fp.get('header.actionType')),\n    fp.join(' & '),\n    toTitleCase,\n    s => s || 'n/a')\n  (action.eventBundles);```", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r467024467", "createdAt": "2020-08-07T12:59:45Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -164,24 +177,28 @@ const EventBundleView = (props: {eventBundle: AuditEventBundle}) => {\n   </div>;\n };\n \n-const AuditActionCard = (props: { action: AuditAction }) => {\n-  const {action} = props;\n+const AuditActionCard = (props: { action: AuditAction, show: (AuditAction) => boolean }) => {\n+  const {action, show} = props;\n   // Something in the codegen is wonky here. the actionTime field is typed as a Date,\n   // but turns out to be a number for some reason here. In other contexts it appears\n   // to format itself happily though.\n   const timeString = moment(new Date(action.actionTime)).format('YYYY-MM-DD h:mm:ss');\n   const actionTypes = fp.flow(\n-    fp.map(fp.get('header.actionType')),\n-    s => s.join(' & '))\n+    fp.map(\n+      fp.flow(\n+        fp.get('header.actionType'),\n+        toTitleCase)),\n+    s => s ? s.join(' & ') : 'n/a')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA2NDgxMw==", "bodyText": "This might be a bit cleaner with some additional desctructuring.\nAlso, keeping the code consistent with lodash may help future development and prevent confusion when reading through the code.\nI am not a fan of the double toPairs in my solution, but it does keep it in lodash/fp... I will think through it a bit more to see if there is a better solution.\nIf you don't want to do that - do take a look at the destructuring bit. It may be a bit cleaner than the array index references. The destructure should work with the native map code as well.\nfp.flow(\n          fp.toPairs,\n          fp.toPairs,\n          fp.map(([index, [id, entry]]: [number, [string, FilterEntry]]) =>\n            <CheckBox\n              key={index}\n              id={`${id}_active`}\n              onChange={() => toggleSelectedAction(id)}\n              label={entry.displayName}\n              checked={entry.isActive}\n              style={{margin: '0.25rem'}}/>)\n        )(activeActionTypes)}", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r467064813", "createdAt": "2020-08-07T14:10:02Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,115 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: { [key: string]: FilterEntry },\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          margin: '0',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: '1px solid',\n+          borderColor: colors.secondary,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+        {fp.entries(activeActionTypes).map((actionTypeValuePair: [string, FilterEntry], index) =>\n+          <CheckBox\n+            key={index}\n+            id={`${actionTypeValuePair[0]}_active`}\n+            onChange={() => toggleSelectedAction(actionTypeValuePair[0])}\n+            label={actionTypeValuePair[1].displayName}\n+            checked={actionTypeValuePair[1].isActive}\n+            style={{margin: '0.25rem'}}/>)}\n+        </div>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4Mzg2Mg==", "bodyText": "I know we differ in opinion on who should be responsible for conditional renders (parent or component).\nAfter searching the code base I only saw 2-3 instances of the show property, but many of the && < string (I believe that accurately indicates a conditional render)\nHere is a suggestion that may simplify things a bit / improve readability:\n  const filteredActions = fp.flow(\n    fp.toPairs,\n    fp.map(([index, action]) => shouldShowAction(action) && <AuditActionCard key={index} action={action}/>),\n    fp.without([false])\n  )(actions);\n\n  return (\n      <React.Fragment>\n        <ActionTypeFilter activeActionTypes={activeActionTypes}\n                          updateFilter={updateFilterCallback}\n        />\n        <div style={{margin: '1rem', width: '30rem'}}>\n          {filteredActions.length ? filteredActions : <div  style={infoMessageStyle}>All cards filtered out.</div>}\n        </div>\n      </React.Fragment>\n  );\nFollowed by a removal of the show prop in the AuditActionCard component", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r467083862", "createdAt": "2020-08-07T14:40:48Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,115 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: { [key: string]: FilterEntry },\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          margin: '0',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: '1px solid',\n+          borderColor: colors.secondary,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+        {fp.entries(activeActionTypes).map((actionTypeValuePair: [string, FilterEntry], index) =>\n+          <CheckBox\n+            key={index}\n+            id={`${actionTypeValuePair[0]}_active`}\n+            onChange={() => toggleSelectedAction(actionTypeValuePair[0])}\n+            label={actionTypeValuePair[1].displayName}\n+            checked={actionTypeValuePair[1].isActive}\n+            style={{margin: '0.25rem'}}/>)}\n+        </div>\n+    </React.Fragment>);\n+};\n+\n+export const AuditActionCardListView = (props: { actions:  AuditAction[]}) => {\n   const {actions} = props;\n+  const [actionTypes, setActionTypes] = useState([]);\n+  const [activeActionTypes, setActiveActionTypes] = useState({});\n+  const [actionTypeToCardCount, setActionTypeToCardCount] = useState({});\n+\n+  useEffect(() => {\n+    const result = (fp.flow(\n+      fp.flatMap((action: AuditAction) => action.eventBundles),\n+      fp.map((eventBundle) => eventBundle.header.actionType),\n+      fp.sortBy(a => a),\n+      fp.sortedUniq)(actions));\n+    setActionTypes(result);\n+  }, [actions]);\n+\n+  useEffect(() => {\n+    const actionTypeToShow: Object = {};\n+    fp.forEach((propertyPath: string) => {\n+      // TODO: figure out why I can't make this work using fp.set()\n+      actionTypeToShow[propertyPath] = {\n+        isActive: true,\n+        displayName: `${toTitleCase(propertyPath)} (${actionTypeToCardCount[propertyPath] || 0})`\n+      };\n+    })(actionTypes);\n+    setActiveActionTypes(actionTypeToShow);\n+  }, [actionTypes]);\n+\n+  useEffect(() => {\n+    const result: { [key: string]: number } = {};\n+    fp.forEach(action => {\n+      fp.forEach((actionType: string) => {\n+        result[actionType] = (result[actionType] || 0) + 1;\n+      })(getActionTypes(action));\n+      setActionTypeToCardCount(result);\n+    })(actions);\n+  }, [actions]);\n+\n+  const updateFilterCallback = (actionType: string, isActive: boolean) => {\n+    const newActiveActionTypes = fp.clone(activeActionTypes);\n+    newActiveActionTypes[actionType].isActive = isActive;\n+    setActiveActionTypes(newActiveActionTypes);\n+  };\n+\n+  function getActionTypes(action: AuditAction) {\n+    return fp.map((e: AuditEventBundle) => e.header.actionType)(action.eventBundles);\n+  }\n \n-  // Temporary workaround for sort order in the APIs, fixed in RW-4999.\n-  const actionsSorted = actions.sort((a, b) => {\n-    return new Date(b.actionTime).getTime() - new Date(a.actionTime).getTime();\n-  });\n+  // An action card should be shown only iff all action types\n+  // in its bundles are active (checked). Arguably this could be a simple boolean\n+  // property on the card, but then we'd have to manage that from a parent component\n+  // and use a callback, so it's not a big win.\n+  const shouldShowAction = (action: AuditAction) => {\n+    const cardActionTypes = getActionTypes(action);\n+    return fp.all((actionType: string) =>\n+        fp.get(`${actionType}.isActive`)(activeActionTypes))(cardActionTypes);\n+  };\n \n   return (\n-      <div style={{margin: '1rem', width: '30rem'}}>\n-        {actionsSorted.map((action, index) => (<AuditActionCard key={index} action={action}/>))}\n-      </div>\n+      <React.Fragment>\n+        <ActionTypeFilter activeActionTypes={activeActionTypes}\n+                          updateFilter={updateFilterCallback}\n+        />\n+        <div style={{margin: '1rem', width: '30rem'}}>\n+          {fp.any(shouldShowAction)(actions)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4NjEzMA==", "bodyText": "Could this be done with a map - preventing the need to mutate the object?", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r467086130", "createdAt": "2020-08-07T14:44:27Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,115 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: { [key: string]: FilterEntry },\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          margin: '0',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: '1px solid',\n+          borderColor: colors.secondary,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+        {fp.entries(activeActionTypes).map((actionTypeValuePair: [string, FilterEntry], index) =>\n+          <CheckBox\n+            key={index}\n+            id={`${actionTypeValuePair[0]}_active`}\n+            onChange={() => toggleSelectedAction(actionTypeValuePair[0])}\n+            label={actionTypeValuePair[1].displayName}\n+            checked={actionTypeValuePair[1].isActive}\n+            style={{margin: '0.25rem'}}/>)}\n+        </div>\n+    </React.Fragment>);\n+};\n+\n+export const AuditActionCardListView = (props: { actions:  AuditAction[]}) => {\n   const {actions} = props;\n+  const [actionTypes, setActionTypes] = useState([]);\n+  const [activeActionTypes, setActiveActionTypes] = useState({});\n+  const [actionTypeToCardCount, setActionTypeToCardCount] = useState({});\n+\n+  useEffect(() => {\n+    const result = (fp.flow(\n+      fp.flatMap((action: AuditAction) => action.eventBundles),\n+      fp.map((eventBundle) => eventBundle.header.actionType),\n+      fp.sortBy(a => a),\n+      fp.sortedUniq)(actions));\n+    setActionTypes(result);\n+  }, [actions]);\n+\n+  useEffect(() => {\n+    const actionTypeToShow: Object = {};\n+    fp.forEach((propertyPath: string) => {\n+      // TODO: figure out why I can't make this work using fp.set()\n+      actionTypeToShow[propertyPath] = {\n+        isActive: true,\n+        displayName: `${toTitleCase(propertyPath)} (${actionTypeToCardCount[propertyPath] || 0})`\n+      };\n+    })(actionTypes);\n+    setActiveActionTypes(actionTypeToShow);\n+  }, [actionTypes]);\n+\n+  useEffect(() => {\n+    const result: { [key: string]: number } = {};\n+    fp.forEach(action => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4NzA1OA==", "bodyText": "Could this be a map rather than a forEach with object mutation?", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r467087058", "createdAt": "2020-08-07T14:46:07Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,115 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: { [key: string]: FilterEntry },\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          margin: '0',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: '1px solid',\n+          borderColor: colors.secondary,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+        {fp.entries(activeActionTypes).map((actionTypeValuePair: [string, FilterEntry], index) =>\n+          <CheckBox\n+            key={index}\n+            id={`${actionTypeValuePair[0]}_active`}\n+            onChange={() => toggleSelectedAction(actionTypeValuePair[0])}\n+            label={actionTypeValuePair[1].displayName}\n+            checked={actionTypeValuePair[1].isActive}\n+            style={{margin: '0.25rem'}}/>)}\n+        </div>\n+    </React.Fragment>);\n+};\n+\n+export const AuditActionCardListView = (props: { actions:  AuditAction[]}) => {\n   const {actions} = props;\n+  const [actionTypes, setActionTypes] = useState([]);\n+  const [activeActionTypes, setActiveActionTypes] = useState({});\n+  const [actionTypeToCardCount, setActionTypeToCardCount] = useState({});\n+\n+  useEffect(() => {\n+    const result = (fp.flow(\n+      fp.flatMap((action: AuditAction) => action.eventBundles),\n+      fp.map((eventBundle) => eventBundle.header.actionType),\n+      fp.sortBy(a => a),\n+      fp.sortedUniq)(actions));\n+    setActionTypes(result);\n+  }, [actions]);\n+\n+  useEffect(() => {\n+    const actionTypeToShow: Object = {};\n+    fp.forEach((propertyPath: string) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4OTUwMw==", "bodyText": "Given that this effect runs on the prop change, and there is only one prop, it may be possible to eliminate all of the useEffect code and just compute all of the needed values. This would eliminate all 'state' in the react sense.", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r467089503", "createdAt": "2020-08-07T14:50:03Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,115 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: { [key: string]: FilterEntry },\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          margin: '0',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: '1px solid',\n+          borderColor: colors.secondary,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+        {fp.entries(activeActionTypes).map((actionTypeValuePair: [string, FilterEntry], index) =>\n+          <CheckBox\n+            key={index}\n+            id={`${actionTypeValuePair[0]}_active`}\n+            onChange={() => toggleSelectedAction(actionTypeValuePair[0])}\n+            label={actionTypeValuePair[1].displayName}\n+            checked={actionTypeValuePair[1].isActive}\n+            style={{margin: '0.25rem'}}/>)}\n+        </div>\n+    </React.Fragment>);\n+};\n+\n+export const AuditActionCardListView = (props: { actions:  AuditAction[]}) => {\n   const {actions} = props;\n+  const [actionTypes, setActionTypes] = useState([]);\n+  const [activeActionTypes, setActiveActionTypes] = useState({});\n+  const [actionTypeToCardCount, setActionTypeToCardCount] = useState({});\n+\n+  useEffect(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 145}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfeaeafe04e3e357bdbc3b3493270123f99be641", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/bfeaeafe04e3e357bdbc3b3493270123f99be641", "committedDate": "2020-08-07T15:03:05Z", "message": "Merge branch 'master' into jaycarlton/filterAudit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1db335f19e89d3d471df6ce066d30c81323edbf8", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/1db335f19e89d3d471df6ce066d30c81323edbf8", "committedDate": "2020-08-07T20:15:11Z", "message": "some fixes, but broken - DO NOT MERGEE [skip ci]"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92d090d6b2c6bafd72994f4171ebd4e81ca95fe6", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/92d090d6b2c6bafd72994f4171ebd4e81ca95fe6", "committedDate": "2020-08-10T14:17:26Z", "message": "fixup:"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "112f2029823c4df56f0a6b18014af297418053ab", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/112f2029823c4df56f0a6b18014af297418053ab", "committedDate": "2020-08-10T14:17:42Z", "message": "Merge branch 'master' into jaycarlton/filterAudit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e62869698d61d0b36c022648f6a0d4549c863fb", "author": {"user": {"login": "petesantos", "name": "Pete Santos"}}, "url": "https://github.com/all-of-us/workbench/commit/2e62869698d61d0b36c022648f6a0d4549c863fb", "committedDate": "2020-08-10T15:37:51Z", "message": "Remove some state from AuditActionCardListView"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5025f3a138fb46b31144bb61772693267efbf395", "author": {"user": {"login": "petesantos", "name": "Pete Santos"}}, "url": "https://github.com/all-of-us/workbench/commit/5025f3a138fb46b31144bb61772693267efbf395", "committedDate": "2020-08-10T15:43:51Z", "message": "name tweak"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68a8582936176e0a09506b8776bcbf9044908f4a", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/68a8582936176e0a09506b8776bcbf9044908f4a", "committedDate": "2020-08-10T18:17:26Z", "message": "tweaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51fa79a0263160da76771d5c73f56f5d39768928", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/51fa79a0263160da76771d5c73f56f5d39768928", "committedDate": "2020-08-10T18:21:51Z", "message": "merge Pete's changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb30b676278b7cdeeb6171c8d6c32d8f15626899", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/fb30b676278b7cdeeb6171c8d6c32d8f15626899", "committedDate": "2020-08-10T19:09:08Z", "message": "fix merge errors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNTkwNzMx", "url": "https://github.com/all-of-us/workbench/pull/3835#pullrequestreview-463590731", "createdAt": "2020-08-07T20:25:41Z", "commit": {"oid": "1db335f19e89d3d471df6ce066d30c81323edbf8"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDoyNTo0MVrOG9m23A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDoyODozOVrOG9m7bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1Mjk1Ng==", "bodyText": "I agree that's cleaner here. I could rename show to dontBeNull and get the same idea across.", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r467252956", "createdAt": "2020-08-07T20:25:41Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,115 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: { [key: string]: FilterEntry },\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          margin: '0',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: '1px solid',\n+          borderColor: colors.secondary,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+        {fp.entries(activeActionTypes).map((actionTypeValuePair: [string, FilterEntry], index) =>\n+          <CheckBox\n+            key={index}\n+            id={`${actionTypeValuePair[0]}_active`}\n+            onChange={() => toggleSelectedAction(actionTypeValuePair[0])}\n+            label={actionTypeValuePair[1].displayName}\n+            checked={actionTypeValuePair[1].isActive}\n+            style={{margin: '0.25rem'}}/>)}\n+        </div>\n+    </React.Fragment>);\n+};\n+\n+export const AuditActionCardListView = (props: { actions:  AuditAction[]}) => {\n   const {actions} = props;\n+  const [actionTypes, setActionTypes] = useState([]);\n+  const [activeActionTypes, setActiveActionTypes] = useState({});\n+  const [actionTypeToCardCount, setActionTypeToCardCount] = useState({});\n+\n+  useEffect(() => {\n+    const result = (fp.flow(\n+      fp.flatMap((action: AuditAction) => action.eventBundles),\n+      fp.map((eventBundle) => eventBundle.header.actionType),\n+      fp.sortBy(a => a),\n+      fp.sortedUniq)(actions));\n+    setActionTypes(result);\n+  }, [actions]);\n+\n+  useEffect(() => {\n+    const actionTypeToShow: Object = {};\n+    fp.forEach((propertyPath: string) => {\n+      // TODO: figure out why I can't make this work using fp.set()\n+      actionTypeToShow[propertyPath] = {\n+        isActive: true,\n+        displayName: `${toTitleCase(propertyPath)} (${actionTypeToCardCount[propertyPath] || 0})`\n+      };\n+    })(actionTypes);\n+    setActiveActionTypes(actionTypeToShow);\n+  }, [actionTypes]);\n+\n+  useEffect(() => {\n+    const result: { [key: string]: number } = {};\n+    fp.forEach(action => {\n+      fp.forEach((actionType: string) => {\n+        result[actionType] = (result[actionType] || 0) + 1;\n+      })(getActionTypes(action));\n+      setActionTypeToCardCount(result);\n+    })(actions);\n+  }, [actions]);\n+\n+  const updateFilterCallback = (actionType: string, isActive: boolean) => {\n+    const newActiveActionTypes = fp.clone(activeActionTypes);\n+    newActiveActionTypes[actionType].isActive = isActive;\n+    setActiveActionTypes(newActiveActionTypes);\n+  };\n+\n+  function getActionTypes(action: AuditAction) {\n+    return fp.map((e: AuditEventBundle) => e.header.actionType)(action.eventBundles);\n+  }\n \n-  // Temporary workaround for sort order in the APIs, fixed in RW-4999.\n-  const actionsSorted = actions.sort((a, b) => {\n-    return new Date(b.actionTime).getTime() - new Date(a.actionTime).getTime();\n-  });\n+  // An action card should be shown only iff all action types\n+  // in its bundles are active (checked). Arguably this could be a simple boolean\n+  // property on the card, but then we'd have to manage that from a parent component\n+  // and use a callback, so it's not a big win.\n+  const shouldShowAction = (action: AuditAction) => {\n+    const cardActionTypes = getActionTypes(action);\n+    return fp.all((actionType: string) =>\n+        fp.get(`${actionType}.isActive`)(activeActionTypes))(cardActionTypes);\n+  };\n \n   return (\n-      <div style={{margin: '1rem', width: '30rem'}}>\n-        {actionsSorted.map((action, index) => (<AuditActionCard key={index} action={action}/>))}\n-      </div>\n+      <React.Fragment>\n+        <ActionTypeFilter activeActionTypes={activeActionTypes}\n+                          updateFilter={updateFilterCallback}\n+        />\n+        <div style={{margin: '1rem', width: '30rem'}}>\n+          {fp.any(shouldShowAction)(actions)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4Mzg2Mg=="}, "originalCommit": {"oid": "c6b751afefde54cc34f0bed38f4694b361dc5167"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1NDEyNQ==", "bodyText": "This is giving me all zero values somehow.", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r467254125", "createdAt": "2020-08-07T20:28:39Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,127 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+interface FilterState {\n+  [key: string]: FilterEntry;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: FilterState,\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          marginLeft: '0',\n+          padding: '2px',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: `1px solid ${colors.secondary}`,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+          {\n+            fp.flow(\n+              fp.toPairs,\n+              fp.toPairs,\n+              fp.map(([index, [id, entry]]: [number, [string, FilterEntry]]) =>\n+                    <CheckBox\n+                        key={index}\n+                        id={`${id}_active`}\n+                        onChange={() => toggleSelectedAction(id)}\n+                        label={entry.displayName}\n+                        checked={entry.isActive}\n+                        style={{margin: '0.25rem'}}/>)\n+            )(activeActionTypes)\n+          }\n+        </div>\n+    </React.Fragment>);\n+};\n+\n+export const AuditActionCardListView = (props: { actions:  AuditAction[]}) => {\n+  console.log('render AuditActionCardListView');\n   const {actions} = props;\n+  const initialFilterState: FilterState = {};\n+  const [activeActionTypes, setActiveActionTypes] = useState(initialFilterState);\n+\n+  // FIXME: handle situation when one card has the same action multiple times\n+  const actionTypeToCardCount: {[key: string]: number} = fp.flow(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db335f19e89d3d471df6ce066d30c81323edbf8"}, "originalPosition": 159}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30d4a5af0a0449d862538910a719ac2e5877c8df", "author": {"user": {"login": "petesantos", "name": "Pete Santos"}}, "url": "https://github.com/all-of-us/workbench/commit/30d4a5af0a0449d862538910a719ac2e5877c8df", "committedDate": "2020-08-11T13:11:57Z", "message": "Correct for multi action event bundles"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MTA5NTE3", "url": "https://github.com/all-of-us/workbench/pull/3835#pullrequestreview-465109517", "createdAt": "2020-08-11T14:13:56Z", "commit": {"oid": "30d4a5af0a0449d862538910a719ac2e5877c8df"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MTEzMTgw", "url": "https://github.com/all-of-us/workbench/pull/3835#pullrequestreview-465113180", "createdAt": "2020-08-11T14:17:34Z", "commit": {"oid": "30d4a5af0a0449d862538910a719ac2e5877c8df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDoxNzozNFrOG-6HOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDoxNzozNFrOG-6HOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYxNzAxOQ==", "bodyText": "Is there a slicker way to do this? In Java, there's a builder pattern that will let you do Builder.from(originalObj).withId(2).build with no  mutations.", "url": "https://github.com/all-of-us/workbench/pull/3835#discussion_r468617019", "createdAt": "2020-08-11T14:17:34Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -193,17 +210,109 @@ const AuditActionCard = (props: { action: AuditAction }) => {\n   );\n };\n \n-export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+interface FilterEntry {\n+  displayName?: string;\n+  isActive: boolean;\n+}\n+\n+interface FilterState {\n+  [key: string]: FilterEntry;\n+}\n+\n+const ActionTypeFilter = (props: {\n+  activeActionTypes: FilterState,\n+  updateFilter: (actionType: string, isActive: boolean) => void }) => {\n+\n+  const {activeActionTypes, updateFilter} = props;\n+\n+  const toggleSelectedAction = (actionType) => {\n+    updateFilter(actionType, !fp.get(`${actionType}.isActive`)(activeActionTypes));\n+  };\n+\n+  return (\n+      <React.Fragment>\n+        <div style={{\n+          marginLeft: '0',\n+          padding: '2px',\n+          display: 'flex',\n+          flexDirection: 'column',\n+          textAlign: 'left',\n+          border: `1px solid ${colors.secondary}`,\n+          width: 'fit-content'\n+        }}>\n+        <div style={{fontWeight: 600, color: colors.accent}}>Action Types</div>\n+          {\n+            fp.flow(\n+              fp.toPairs,\n+              fp.toPairs,\n+              fp.map(([index, [id, entry]]: [number, [string, FilterEntry]]) =>\n+                    <CheckBox\n+                        key={index}\n+                        id={`${id}_active`}\n+                        onChange={() => toggleSelectedAction(id)}\n+                        label={entry.displayName}\n+                        checked={entry.isActive}\n+                        style={{margin: '0.25rem'}}/>)\n+            )(activeActionTypes)\n+          }\n+        </div>\n+    </React.Fragment>);\n+};\n+\n+export const AuditActionCardListView = (props: { actions:  AuditAction[]}) => {\n   const {actions} = props;\n+  const [activeActionTypes, setActiveActionTypes] = useState({});\n+\n+  const getActionTypes = (action: AuditAction) => fp.flow(\n+    fp.map((e: AuditEventBundle) => e.header.actionType),\n+    fp.uniq\n+  )(action.eventBundles);\n+\n+  useEffect(() => {\n+    const actionTypeToShow = fp.flow(\n+      fp.flatMap(getActionTypes),\n+      fp.countBy(fp.identity),\n+      fp.toPairs,\n+      fp.map(([actionName, count]: [string, number]) => [actionName, {\n+        isActive: true,\n+        displayName: `${toTitleCase(actionName)} (${count || 0})`\n+      }]),\n+      fp.fromPairs\n+    )(actions);\n+\n+    setActiveActionTypes(actionTypeToShow);\n+  }, [actions]);\n+\n+  const updateFilterCallback = (actionType: string, isActive: boolean) => {\n+    const newActiveActionTypes = fp.clone(activeActionTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d4a5af0a0449d862538910a719ac2e5877c8df"}, "originalPosition": 164}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4512, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}