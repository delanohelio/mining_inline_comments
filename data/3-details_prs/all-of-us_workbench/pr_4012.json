{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NzAxNjk2", "number": 4012, "title": "[RW-5407][risk=no] CreateRuntime: support optional user override of runtime config", "bodyText": "Description:\nRuntime will be set with an override label based on the ConfigurationType field on the incoming Runtime object from the UI.\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n I have run the E2E tests on ths change against my local UI + API server with yarn test:local\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-09-16T03:40:25Z", "url": "https://github.com/all-of-us/workbench/pull/4012", "merged": true, "mergeCommit": {"oid": "e2b6adfd28b370237dd037e6643aaeef7478e996"}, "closed": true, "closedAt": "2020-09-20T15:56:47Z", "author": {"login": "ericsong"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdI4fsiAH2gAyNDg3NzAxNjk2OjA5NDlkMzkxMTdiZGZhOTg5MzY2NmQ2MTEzMDdhNGFhMjBlM2QyMzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKKnbuAH2gAyNDg3NzAxNjk2OjIzNDNmOTZjODMxZDJlNzlmZjI0MTEzMjUwMDk0NjhmMDRjZDZhNDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0949d39117bdfa9893666d611307a4aa20e3d233", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/0949d39117bdfa9893666d611307a4aa20e3d233", "committedDate": "2020-09-14T19:37:56Z", "message": "add new Runtime fields and mapping fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cda3099ac70eac455d109dd92f8e69dab1904491", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/cda3099ac70eac455d109dd92f8e69dab1904491", "committedDate": "2020-09-14T19:38:38Z", "message": "spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51a0225c88b02c102b0655aa298f9b99b5faf9cb", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/51a0225c88b02c102b0655aa298f9b99b5faf9cb", "committedDate": "2020-09-14T19:43:19Z", "message": "add comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73d4f6692ccad94a2f14e5d761512c71744b9053", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/73d4f6692ccad94a2f14e5d761512c71744b9053", "committedDate": "2020-09-15T16:18:04Z", "message": "refactor to use real LeonardoNotebooksClientImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc60ff23b54cf41d0debf27a34335e485513d385", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/fc60ff23b54cf41d0debf27a34335e485513d385", "committedDate": "2020-09-15T16:18:45Z", "message": "LeonardoNotebooksClientTest - just for history, will remove"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "409ecaee24d6befa34bc65602ffa41deb69323ea", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/409ecaee24d6befa34bc65602ffa41deb69323ea", "committedDate": "2020-09-15T16:19:03Z", "message": "remove"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19983aa114695b96f05c361241409e6f6acde090", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/19983aa114695b96f05c361241409e6f6acde090", "committedDate": "2020-09-15T17:57:01Z", "message": "Set label based on Runtime.ConfigurationType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77f2d4e76c2ccad968b946b0b35d40c495ad62cc", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/77f2d4e76c2ccad968b946b0b35d40c495ad62cc", "committedDate": "2020-09-16T03:11:36Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f36f4880f2b06bcd6142cd68b462d3c693bdaeba", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/f36f4880f2b06bcd6142cd68b462d3c693bdaeba", "committedDate": "2020-09-16T03:28:43Z", "message": "handle null runtime case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19244908389cb6e2c3803756e6e3ec0238c0be0e", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/19244908389cb6e2c3803756e6e3ec0238c0be0e", "committedDate": "2020-09-16T03:33:53Z", "message": "only create shell runtime if null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61e0b52ec2b33a5538ecd112ee4e3fcd93a27466", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/61e0b52ec2b33a5538ecd112ee4e3fcd93a27466", "committedDate": "2020-09-16T03:39:33Z", "message": "add test case for null runtime case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1485ee5cb16520af4e633150c092c40dcd8db318", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/1485ee5cb16520af4e633150c092c40dcd8db318", "committedDate": "2020-09-16T15:40:36Z", "message": "send configurationType oer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcdbbadf2df1f0038dce23bea8d17219e066e593", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/bcdbbadf2df1f0038dce23bea8d17219e066e593", "committedDate": "2020-09-16T15:41:14Z", "message": "spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a0f8e81c42ec3cc0d24054ccf885305aab3b1fb", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/5a0f8e81c42ec3cc0d24054ccf885305aab3b1fb", "committedDate": "2020-09-16T16:30:28Z", "message": "test fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fb5127336d28533428d77a1998da718b3149275", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/3fb5127336d28533428d77a1998da718b3149275", "committedDate": "2020-09-16T17:33:47Z", "message": "yarn lint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMDU2MTMy", "url": "https://github.com/all-of-us/workbench/pull/4012#pullrequestreview-490056132", "createdAt": "2020-09-16T22:13:24Z", "commit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjoxMzoyNFrOHTGAyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjoyNjoxNVrOHTGSwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4MzQ5OA==", "bodyText": "Nice to have: can this endpoint accept the absence of a body Runtime payload? This would ensure that older UI clients don't break when this goes out.", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489783498", "createdAt": "2020-09-16T22:13:24Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/api/RuntimeController.java", "diffHunk": "@@ -180,14 +180,16 @@ private DbWorkspace lookupWorkspace(String workspaceNamespace) throws NotFoundEx\n   }\n \n   @Override\n-  public ResponseEntity<EmptyResponse> createRuntime(String workspaceNamespace) {\n+  public ResponseEntity<EmptyResponse> createRuntime(String workspaceNamespace, Runtime runtime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NDEyMw==", "bodyText": "There are more values in the enum. Maybe just map the enum string value directly here for now; or else have a separate enum/map here that converts these into value strings (this avoids unexpected breakages if we decide to rename any of these enum values)", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489784123", "createdAt": "2020-09-16T22:15:19Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -97,39 +101,51 @@ private LeonardoCreateRuntimeRequest buildCreateRuntimeRequest(\n     nbExtensions.put(\n         \"aou-upload-policy-extension\", assetsBaseUrl + \"/aou-upload-policy-extension.js\");\n \n-    return new LeonardoCreateRuntimeRequest()\n-        .labels(ImmutableMap.of(RUNTIME_LABEL_AOU, \"true\", RUNTIME_LABEL_CREATED_BY, userEmail))\n-        .defaultClientId(config.server.oauthClientId)\n-        // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n-        .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n-        .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n-        .userJupyterExtensionConfig(\n-            new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n-        // Matches Terra UI's scopes, see RW-3531 for rationale.\n-        .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n-        .runtimeConfig(\n-            new LeonardoMachineConfig()\n-                .cloudService(CloudServiceEnum.DATAPROC)\n-                .masterDiskSize(\n-                    Optional.ofNullable(clusterOverride.masterDiskSize)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))\n-                .masterMachineType(\n-                    Optional.ofNullable(clusterOverride.machineType)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultMachineType)))\n-        .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n-        .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n-        .customEnvironmentVariables(customEnvironmentVariables);\n+    LeonardoCreateRuntimeRequest request =\n+        new LeonardoCreateRuntimeRequest()\n+            .labels(\n+                ImmutableMap.of(\n+                    RUNTIME_LABEL_AOU,\n+                    \"true\",\n+                    RUNTIME_LABEL_CREATED_BY,\n+                    userEmail,\n+                    RUNTIME_LABEL_AOU_CONFIG,\n+                    RuntimeConfigurationType.USEROVERRIDE.equals(runtime.getConfigurationType())\n+                        ? \"user-override\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NDc5MQ==", "bodyText": "Sorry, this was not super clearly written in the ticket AC, but the main point of the ticket is to actually plumb through the values supplied by the client to create the runtime instance: machine type and disk size. That hasn't been done here. This should also only happen if the flag is enabled - otherwise we shouldn't expect to receive a runtime payload in the create request.", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489784791", "createdAt": "2020-09-16T22:17:12Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -97,39 +101,51 @@ private LeonardoCreateRuntimeRequest buildCreateRuntimeRequest(\n     nbExtensions.put(\n         \"aou-upload-policy-extension\", assetsBaseUrl + \"/aou-upload-policy-extension.js\");\n \n-    return new LeonardoCreateRuntimeRequest()\n-        .labels(ImmutableMap.of(RUNTIME_LABEL_AOU, \"true\", RUNTIME_LABEL_CREATED_BY, userEmail))\n-        .defaultClientId(config.server.oauthClientId)\n-        // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n-        .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n-        .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n-        .userJupyterExtensionConfig(\n-            new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n-        // Matches Terra UI's scopes, see RW-3531 for rationale.\n-        .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n-        .runtimeConfig(\n-            new LeonardoMachineConfig()\n-                .cloudService(CloudServiceEnum.DATAPROC)\n-                .masterDiskSize(\n-                    Optional.ofNullable(clusterOverride.masterDiskSize)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))\n-                .masterMachineType(\n-                    Optional.ofNullable(clusterOverride.machineType)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultMachineType)))\n-        .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n-        .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n-        .customEnvironmentVariables(customEnvironmentVariables);\n+    LeonardoCreateRuntimeRequest request =\n+        new LeonardoCreateRuntimeRequest()\n+            .labels(\n+                ImmutableMap.of(\n+                    RUNTIME_LABEL_AOU,\n+                    \"true\",\n+                    RUNTIME_LABEL_CREATED_BY,\n+                    userEmail,\n+                    RUNTIME_LABEL_AOU_CONFIG,\n+                    RuntimeConfigurationType.USEROVERRIDE.equals(runtime.getConfigurationType())\n+                        ? \"user-override\"\n+                        : \"default\"))\n+            .defaultClientId(config.server.oauthClientId)\n+            // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n+            .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n+            .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n+            .userJupyterExtensionConfig(\n+                new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n+            // Matches Terra UI's scopes, see RW-3531 for rationale.\n+            .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n+            .runtimeConfig(\n+                new LeonardoMachineConfig()\n+                    .cloudService(CloudServiceEnum.DATAPROC)\n+                    .masterDiskSize(\n+                        Optional.ofNullable(clusterOverride.masterDiskSize)\n+                            .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NTI5NA==", "bodyText": "The client does not get to control this. We should continue to set this according to our own logic", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489785294", "createdAt": "2020-09-16T22:18:35Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -143,10 +159,13 @@ public void createRuntime(\n     leonardoRetryHandler.run(\n         (context) -> {\n           runtimesApi.createRuntime(\n-              googleProject,\n-              runtimeName,\n+              runtime.getGoogleProject(),\n+              runtime.getRuntimeName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NTM4MQ==", "bodyText": "If we're getting the project value here, we should also be rejecting requests where this does not matching the URL workspaceaNamespace. However, it may be cleaner just to ignore the value that's in the runtime payload.", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489785381", "createdAt": "2020-09-16T22:18:50Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -143,10 +159,13 @@ public void createRuntime(\n     leonardoRetryHandler.run(\n         (context) -> {\n           runtimesApi.createRuntime(\n-              googleProject,\n-              runtimeName,\n+              runtime.getGoogleProject(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NTk3OQ==", "bodyText": "This code still needs to function without the new feature flag enabled. In this current version, I don't think it will function either way.", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489785979", "createdAt": "2020-09-16T22:20:33Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -143,10 +159,13 @@ public void createRuntime(\n     leonardoRetryHandler.run(\n         (context) -> {\n           runtimesApi.createRuntime(\n-              googleProject,\n-              runtimeName,\n+              runtime.getGoogleProject(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4ODA5Ng==", "bodyText": "nit: perhaps this was changed for debugging, but definitely prefer how this was previously written - assigning to a variable only to immediately return it on the next line is a bit of a pet peeve of mine", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489788096", "createdAt": "2020-09-16T22:26:15Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -97,39 +101,51 @@ private LeonardoCreateRuntimeRequest buildCreateRuntimeRequest(\n     nbExtensions.put(\n         \"aou-upload-policy-extension\", assetsBaseUrl + \"/aou-upload-policy-extension.js\");\n \n-    return new LeonardoCreateRuntimeRequest()\n-        .labels(ImmutableMap.of(RUNTIME_LABEL_AOU, \"true\", RUNTIME_LABEL_CREATED_BY, userEmail))\n-        .defaultClientId(config.server.oauthClientId)\n-        // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n-        .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n-        .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n-        .userJupyterExtensionConfig(\n-            new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n-        // Matches Terra UI's scopes, see RW-3531 for rationale.\n-        .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n-        .runtimeConfig(\n-            new LeonardoMachineConfig()\n-                .cloudService(CloudServiceEnum.DATAPROC)\n-                .masterDiskSize(\n-                    Optional.ofNullable(clusterOverride.masterDiskSize)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))\n-                .masterMachineType(\n-                    Optional.ofNullable(clusterOverride.machineType)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultMachineType)))\n-        .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n-        .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n-        .customEnvironmentVariables(customEnvironmentVariables);\n+    LeonardoCreateRuntimeRequest request =\n+        new LeonardoCreateRuntimeRequest()\n+            .labels(\n+                ImmutableMap.of(\n+                    RUNTIME_LABEL_AOU,\n+                    \"true\",\n+                    RUNTIME_LABEL_CREATED_BY,\n+                    userEmail,\n+                    RUNTIME_LABEL_AOU_CONFIG,\n+                    RuntimeConfigurationType.USEROVERRIDE.equals(runtime.getConfigurationType())\n+                        ? \"user-override\"\n+                        : \"default\"))\n+            .defaultClientId(config.server.oauthClientId)\n+            // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n+            .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n+            .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n+            .userJupyterExtensionConfig(\n+                new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n+            // Matches Terra UI's scopes, see RW-3531 for rationale.\n+            .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n+            .runtimeConfig(\n+                new LeonardoMachineConfig()\n+                    .cloudService(CloudServiceEnum.DATAPROC)\n+                    .masterDiskSize(\n+                        Optional.ofNullable(clusterOverride.masterDiskSize)\n+                            .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))\n+                    .masterMachineType(\n+                        Optional.ofNullable(clusterOverride.machineType)\n+                            .orElse(config.firecloud.notebookRuntimeDefaultMachineType)))\n+            .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n+            .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n+            .customEnvironmentVariables(customEnvironmentVariables);\n+\n+    return request;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40f99adcf083704a85058393628c3f4d54c30e7c", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/40f99adcf083704a85058393628c3f4d54c30e7c", "committedDate": "2020-09-17T19:23:04Z", "message": "new labels, handle null/empty case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b3fc77fb5ae22650bf507900a246d2eb972c3d9", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/8b3fc77fb5ae22650bf507900a246d2eb972c3d9", "committedDate": "2020-09-17T19:24:16Z", "message": "spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDA0NDM4", "url": "https://github.com/all-of-us/workbench/pull/4012#pullrequestreview-491004438", "createdAt": "2020-09-17T21:33:14Z", "commit": {"oid": "8b3fc77fb5ae22650bf507900a246d2eb972c3d9"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTozMzoxNFrOHT2THg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo0MTozMVrOHT2hUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3NDYyMg==", "bodyText": "nit: leave TODO to add these back after next release", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r490574622", "createdAt": "2020-09-17T21:33:14Z", "author": {"login": "calbach"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -5336,13 +5341,19 @@ definitions:\n     - Deleting\n     - Deleted\n     - Unknown\n+  RuntimeConfigurationType:\n+    description: >\n+      The configuration type for this runtime. Namely, whether there was a user\n+      override of a specific cloud service type, or whether one of the preset\n+      system defaults was used. This distinction is meaningful for display\n+      purposes, and allows the user to pickup natural upgrades to the default\n+      configuration.\n+    type: string\n+    enum:\n+      - UserOverride\n+      - DefaultGce\n+      - DefaultDataproc\n   Runtime:\n-    required:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b3fc77fb5ae22650bf507900a246d2eb972c3d9"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3NjEzNg==", "bodyText": "Would be good to validate that the machine type and disk are actually getting plumbed in a test case", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r490576136", "createdAt": "2020-09-17T21:36:41Z", "author": {"login": "calbach"}, "path": "api/src/test/java/org/pmiops/workbench/api/RuntimeControllerTest.java", "diffHunk": "@@ -454,24 +480,95 @@ public void testDeleteRuntimesInProject_NullRuntimesList() {\n   }\n \n   @Test\n-  public void testCreateRuntime() {\n-    when(mockLeoNotebooksClient.getRuntime(BILLING_PROJECT_ID, getRuntimeName()))\n+  public void testCreateRuntime() throws ApiException {\n+    when(userRuntimesApi.getRuntime(BILLING_PROJECT_ID, getRuntimeName()))\n         .thenThrow(new NotFoundException());\n     stubGetWorkspace(WORKSPACE_NS, WORKSPACE_ID, \"test\");\n \n-    runtimeController.createRuntime(BILLING_PROJECT_ID);\n-    verify(mockLeoNotebooksClient)\n-        .createRuntime(eq(BILLING_PROJECT_ID), eq(getRuntimeName()), eq(WORKSPACE_ID));\n+    runtimeController.createRuntime(BILLING_PROJECT_ID, new Runtime());\n+    verify(userRuntimesApi).createRuntime(eq(BILLING_PROJECT_ID), eq(getRuntimeName()), any());\n   }\n \n   @Test\n-  public void testDeleteRuntime() {\n+  public void testCreateRuntime_nullRuntime() throws ApiException {\n+    when(userRuntimesApi.getRuntime(BILLING_PROJECT_ID, getRuntimeName()))\n+        .thenThrow(new NotFoundException());\n+    stubGetWorkspace(WORKSPACE_NS, WORKSPACE_ID, \"test\");\n+\n+    runtimeController.createRuntime(BILLING_PROJECT_ID, null);\n+    verify(userRuntimesApi).createRuntime(eq(BILLING_PROJECT_ID), eq(getRuntimeName()), any());\n+  }\n+\n+  @Test\n+  public void testCreateRuntime_emptyRuntime() throws ApiException {\n+    when(userRuntimesApi.getRuntime(BILLING_PROJECT_ID, getRuntimeName()))\n+        .thenThrow(new NotFoundException());\n+    stubGetWorkspace(WORKSPACE_NS, WORKSPACE_ID, \"test\");\n+\n+    runtimeController.createRuntime(BILLING_PROJECT_ID, new Runtime());\n+    verify(userRuntimesApi).createRuntime(eq(BILLING_PROJECT_ID), eq(getRuntimeName()), any());\n+  }\n+\n+  @Test\n+  public void testCreateRuntime_defaultLabel_dataproc() throws ApiException {\n+    when(userRuntimesApi.getRuntime(BILLING_PROJECT_ID, getRuntimeName()))\n+        .thenThrow(new NotFoundException());\n+    stubGetWorkspace(WORKSPACE_NS, WORKSPACE_ID, \"test\");\n+\n+    runtimeController.createRuntime(\n+        BILLING_PROJECT_ID,\n+        new Runtime().configurationType(RuntimeConfigurationType.DEFAULTDATAPROC));\n+    verify(userRuntimesApi)\n+        .createRuntime(\n+            eq(BILLING_PROJECT_ID), eq(getRuntimeName()), createRuntimeRequestCaptor.capture());\n+\n+    LeonardoCreateRuntimeRequest createRuntimeRequest = createRuntimeRequestCaptor.getValue();\n+    assertThat(((Map<String, String>) createRuntimeRequest.getLabels()).get(\"all-of-us-config\"))\n+        .isEqualTo(\"default-dataproc\");\n+  }\n+\n+  @Test\n+  public void testCreateRuntime_defaultLabel_gce() throws ApiException {\n+    when(userRuntimesApi.getRuntime(BILLING_PROJECT_ID, getRuntimeName()))\n+        .thenThrow(new NotFoundException());\n+    stubGetWorkspace(WORKSPACE_NS, WORKSPACE_ID, \"test\");\n+\n+    runtimeController.createRuntime(\n+        BILLING_PROJECT_ID, new Runtime().configurationType(RuntimeConfigurationType.DEFAULTGCE));\n+    verify(userRuntimesApi)\n+        .createRuntime(\n+            eq(BILLING_PROJECT_ID), eq(getRuntimeName()), createRuntimeRequestCaptor.capture());\n+\n+    LeonardoCreateRuntimeRequest createRuntimeRequest = createRuntimeRequestCaptor.getValue();\n+    assertThat(((Map<String, String>) createRuntimeRequest.getLabels()).get(\"all-of-us-config\"))\n+        .isEqualTo(\"default-gce\");\n+  }\n+\n+  @Test\n+  public void testCreateRuntime_overrideLabel() throws ApiException {\n+    when(userRuntimesApi.getRuntime(BILLING_PROJECT_ID, getRuntimeName()))\n+        .thenThrow(new NotFoundException());\n+    stubGetWorkspace(WORKSPACE_NS, WORKSPACE_ID, \"test\");\n+\n+    runtimeController.createRuntime(\n+        BILLING_PROJECT_ID, new Runtime().configurationType(RuntimeConfigurationType.USEROVERRIDE));\n+    verify(userRuntimesApi)\n+        .createRuntime(\n+            eq(BILLING_PROJECT_ID), eq(getRuntimeName()), createRuntimeRequestCaptor.capture());\n+\n+    LeonardoCreateRuntimeRequest createRuntimeRequest = createRuntimeRequestCaptor.getValue();\n+    assertThat(((Map<String, String>) createRuntimeRequest.getLabels()).get(\"all-of-us-config\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b3fc77fb5ae22650bf507900a246d2eb972c3d9"}, "originalPosition": 329}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3ODI1OA==", "bodyText": "The machineType and masterDisk size are still not being passed through on L135-140. The logic should be as follows:\n\nIf Runtime is provided, prefer the masterMachineType and masterDiskSize from the client-specified values.\nElse if !enableCustomRuntimes && clusterOverride != null, prefer that (with current fallback logic for either type or disk)\nelse use the default from config.firecloud.*\n\nOptionally: require a runtime payload be provided if enableCustomRuntimes; potentially this mitigates the need for bullet (2) above", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r490578258", "createdAt": "2020-09-17T21:41:31Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -97,8 +107,18 @@ private LeonardoCreateRuntimeRequest buildCreateRuntimeRequest(\n     nbExtensions.put(\n         \"aou-upload-policy-extension\", assetsBaseUrl + \"/aou-upload-policy-extension.js\");\n \n+    Map<String, String> runtimeLabels = new HashMap<>();\n+    runtimeLabels.put(RUNTIME_LABEL_AOU, \"true\");\n+    runtimeLabels.put(RUNTIME_LABEL_CREATED_BY, userEmail);\n+\n+    if (runtime.getConfigurationType() != null) {\n+      runtimeLabels.put(\n+          RUNTIME_LABEL_AOU_CONFIG,\n+          RUNTIME_CONFIGURATION_TYPE_ENUM_TO_STORAGE_MAP.get(runtime.getConfigurationType()));\n+    }\n+\n     return new LeonardoCreateRuntimeRequest()\n-        .labels(ImmutableMap.of(RUNTIME_LABEL_AOU, \"true\", RUNTIME_LABEL_CREATED_BY, userEmail))\n+        .labels(runtimeLabels)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b3fc77fb5ae22650bf507900a246d2eb972c3d9"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66095df7119aff74ae8b5fa08d9ed7872b9ec416", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/66095df7119aff74ae8b5fa08d9ed7872b9ec416", "committedDate": "2020-09-18T18:36:25Z", "message": "respect custom runtime configs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2122efd739a3a22c9596a2d21b2b0aa4214494f7", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/2122efd739a3a22c9596a2d21b2b0aa4214494f7", "committedDate": "2020-09-18T18:38:13Z", "message": "comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35d5e85525995fcef671d8af8eaf43ebc80f96c1", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/35d5e85525995fcef671d8af8eaf43ebc80f96c1", "committedDate": "2020-09-18T18:43:21Z", "message": "more comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34d03341f61b0b24b6edc33fc2c637818cfc223e", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/34d03341f61b0b24b6edc33fc2c637818cfc223e", "committedDate": "2020-09-18T18:47:48Z", "message": "merge master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNzA1MDQ3", "url": "https://github.com/all-of-us/workbench/pull/4012#pullrequestreview-491705047", "createdAt": "2020-09-18T18:48:34Z", "commit": {"oid": "35d5e85525995fcef671d8af8eaf43ebc80f96c1"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODo0ODo1MVrOHUYRtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODo1Mjo0M1rOHUYYdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzMTMxNw==", "bodyText": "nit: BadRequestException", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r491131317", "createdAt": "2020-09-18T18:48:51Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -97,39 +112,72 @@ private LeonardoCreateRuntimeRequest buildCreateRuntimeRequest(\n     nbExtensions.put(\n         \"aou-upload-policy-extension\", assetsBaseUrl + \"/aou-upload-policy-extension.js\");\n \n-    return new LeonardoCreateRuntimeRequest()\n-        .labels(ImmutableMap.of(RUNTIME_LABEL_AOU, \"true\", RUNTIME_LABEL_CREATED_BY, userEmail))\n-        .defaultClientId(config.server.oauthClientId)\n-        // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n-        .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n-        .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n-        .userJupyterExtensionConfig(\n-            new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n-        // Matches Terra UI's scopes, see RW-3531 for rationale.\n-        .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n-        .runtimeConfig(\n-            new LeonardoMachineConfig()\n-                .cloudService(CloudServiceEnum.DATAPROC)\n-                .masterDiskSize(\n-                    Optional.ofNullable(clusterOverride.masterDiskSize)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))\n-                .masterMachineType(\n-                    Optional.ofNullable(clusterOverride.machineType)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultMachineType)))\n-        .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n-        .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n-        .customEnvironmentVariables(customEnvironmentVariables);\n+    Map<String, String> runtimeLabels = new HashMap<>();\n+    runtimeLabels.put(RUNTIME_LABEL_AOU, \"true\");\n+    runtimeLabels.put(RUNTIME_LABEL_CREATED_BY, userEmail);\n+\n+    if (runtime.getConfigurationType() != null) {\n+      runtimeLabels.put(\n+          RUNTIME_LABEL_AOU_CONFIG,\n+          RUNTIME_CONFIGURATION_TYPE_ENUM_TO_STORAGE_MAP.get(runtime.getConfigurationType()));\n+    }\n+\n+    LeonardoCreateRuntimeRequest request =\n+        new LeonardoCreateRuntimeRequest()\n+            .labels(runtimeLabels)\n+            .defaultClientId(config.server.oauthClientId)\n+            // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n+            .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n+            .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n+            .userJupyterExtensionConfig(\n+                new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n+            // Matches Terra UI's scopes, see RW-3531 for rationale.\n+            .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n+            .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n+            .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n+            .customEnvironmentVariables(customEnvironmentVariables);\n+\n+    if (workbenchConfigProvider.get().featureFlags.enableCustomRuntimes) {\n+      if (runtime.getGceConfig() == null && runtime.getDataprocConfig() == null) {\n+        // There's probably a code smell here where I'm throwing an exception that we're only\n+        // expecting to handle as a response from Leo but this was the quickest path forward for now.\n+        throw new ApiException(400, \"Either a GceConfig or DataprocConfig must be provided\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34d03341f61b0b24b6edc33fc2c637818cfc223e"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzMTczNg==", "bodyText": "opt: Ideally I would probably move this validation logic to the controller method. This could also wait for some of the dust to settle as well", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r491131736", "createdAt": "2020-09-18T18:49:42Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -97,39 +112,72 @@ private LeonardoCreateRuntimeRequest buildCreateRuntimeRequest(\n     nbExtensions.put(\n         \"aou-upload-policy-extension\", assetsBaseUrl + \"/aou-upload-policy-extension.js\");\n \n-    return new LeonardoCreateRuntimeRequest()\n-        .labels(ImmutableMap.of(RUNTIME_LABEL_AOU, \"true\", RUNTIME_LABEL_CREATED_BY, userEmail))\n-        .defaultClientId(config.server.oauthClientId)\n-        // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n-        .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n-        .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n-        .userJupyterExtensionConfig(\n-            new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n-        // Matches Terra UI's scopes, see RW-3531 for rationale.\n-        .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n-        .runtimeConfig(\n-            new LeonardoMachineConfig()\n-                .cloudService(CloudServiceEnum.DATAPROC)\n-                .masterDiskSize(\n-                    Optional.ofNullable(clusterOverride.masterDiskSize)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))\n-                .masterMachineType(\n-                    Optional.ofNullable(clusterOverride.machineType)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultMachineType)))\n-        .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n-        .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n-        .customEnvironmentVariables(customEnvironmentVariables);\n+    Map<String, String> runtimeLabels = new HashMap<>();\n+    runtimeLabels.put(RUNTIME_LABEL_AOU, \"true\");\n+    runtimeLabels.put(RUNTIME_LABEL_CREATED_BY, userEmail);\n+\n+    if (runtime.getConfigurationType() != null) {\n+      runtimeLabels.put(\n+          RUNTIME_LABEL_AOU_CONFIG,\n+          RUNTIME_CONFIGURATION_TYPE_ENUM_TO_STORAGE_MAP.get(runtime.getConfigurationType()));\n+    }\n+\n+    LeonardoCreateRuntimeRequest request =\n+        new LeonardoCreateRuntimeRequest()\n+            .labels(runtimeLabels)\n+            .defaultClientId(config.server.oauthClientId)\n+            // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n+            .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n+            .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n+            .userJupyterExtensionConfig(\n+                new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n+            // Matches Terra UI's scopes, see RW-3531 for rationale.\n+            .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n+            .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n+            .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n+            .customEnvironmentVariables(customEnvironmentVariables);\n+\n+    if (workbenchConfigProvider.get().featureFlags.enableCustomRuntimes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34d03341f61b0b24b6edc33fc2c637818cfc223e"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzMzA0NA==", "bodyText": "Would @aftermapping + ignore be cleaner here?", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r491133044", "createdAt": "2020-09-18T18:52:43Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/LeonardoMapper.java", "diffHunk": "@@ -25,8 +25,23 @@\n \n   DataprocConfig toDataprocConfig(LeonardoMachineConfig leonardoMachineConfig);\n \n+  @Mapping(\n+      target = \"cloudService\",\n+      // I wanted to use constant/defaultValue here but MapStruct will only accept a static string,\n+      // not an Enum value. This is a problem because we have 3 definitions of `CloudServiceEnum`\n+      // and MapStruct doesn't know that this mapper should use the one from LeonardoMachineConfig\n+      // while the mapper for LeonardoGceConfig should use its own `CloudServiceEnum` class.\n+      // This `expression` field feels kind of hacky since I'm expressing code as a string but", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34d03341f61b0b24b6edc33fc2c637818cfc223e"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b3a74cf3933d4f8cad371da32132f11c064b265", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/4b3a74cf3933d4f8cad371da32132f11c064b265", "committedDate": "2020-09-18T19:15:05Z", "message": "move argument checking to controller, use afterMapping over expression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2343f96c831d2e79ff2411325009468f04cd6a44", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/2343f96c831d2e79ff2411325009468f04cd6a44", "committedDate": "2020-09-18T19:18:36Z", "message": "fix tets import"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4247, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}