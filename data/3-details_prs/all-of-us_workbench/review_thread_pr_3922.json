{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczOTI3MjI5", "number": 3922, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzoxNTozMFrOEdvC4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOTowNzowMVrOEfCs8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjE0OTQ3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/utils/TemporalAssertions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzoxNTozMFrOHJEwlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzoxNTozMFrOHJEwlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI3NzIwNw==", "bodyText": "from our offline conversation: please add a version of this with a tolerance, and a basic test for all methods here which don't yet have one", "url": "https://github.com/all-of-us/workbench/pull/3922#discussion_r479277207", "createdAt": "2020-08-28T13:15:30Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/utils/TemporalAssertions.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.pmiops.workbench.utils;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+\n+public class TemporalAssertions {\n+\n+  private static final double TIME_TOLERANCE_MILLIS = 100.0;\n+\n+  public static void assertTimeWithinTolerance(OffsetDateTime actual, OffsetDateTime expected) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac4315e176ba3d3c22d62f1df9b334037ac6bfcd"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTg1NTg0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/utils/TemporalAssertionsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOTowNzowMVrOHLEezQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDo0Njo0OVrOHLHndg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2OTgwNQ==", "bodyText": "make this a minus to show explicitly that the problem is the tolerance delta rather than being \"larger than max\"", "url": "https://github.com/all-of-us/workbench/pull/3922#discussion_r481369805", "createdAt": "2020-09-01T19:07:01Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/utils/TemporalAssertionsTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.pmiops.workbench.utils;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.pmiops.workbench.utils.TemporalAssertions.DEFAULT_TOLERANCE;\n+import static org.pmiops.workbench.utils.TemporalAssertions.MAX_SUPPORTED_INSTANT;\n+import static org.pmiops.workbench.utils.TemporalAssertions.MIN_SUPPORTED_INSTANT;\n+import static org.pmiops.workbench.utils.TemporalAssertions.assertTimeWithinTolerance;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import org.junit.Test;\n+\n+public class TemporalAssertionsTest {\n+\n+  private static final Instant EXPECTED_TIME = Instant.parse(\"2010-06-30T01:20:00.00Z\");\n+  private static final Duration DELTA_WITHIN_TOLERANCE = DEFAULT_TOLERANCE.dividedBy(2);\n+  private static final Duration DELTA_OUTSIDE_TOLERANCE = DEFAULT_TOLERANCE.multipliedBy(2);\n+\n+  @Test\n+  public void testZeroTime() {\n+    assertTimeWithinTolerance(0, 0);\n+    assertTimeWithinTolerance(Instant.ofEpochMilli(0), Instant.ofEpochMilli(0));\n+  }\n+\n+  @Test\n+  public void testInstant_smallDifference() {\n+    assertTimeWithinTolerance(EXPECTED_TIME.plus(DELTA_WITHIN_TOLERANCE), EXPECTED_TIME);\n+    assertTimeWithinTolerance(\n+        EXPECTED_TIME.plus(DELTA_WITHIN_TOLERANCE),\n+        EXPECTED_TIME,\n+        DEFAULT_TOLERANCE.multipliedBy(10));\n+    assertThrows(\n+        AssertionError.class,\n+        () ->\n+            assertTimeWithinTolerance(EXPECTED_TIME.plus(DELTA_OUTSIDE_TOLERANCE), EXPECTED_TIME));\n+  }\n+\n+  @Test\n+  public void testLong() {\n+    assertTimeWithinTolerance(1_598_550_909_000L, 1_598_550_909_000L);\n+  }\n+\n+  @Test\n+  public void testOffsetDateTime() {\n+    final OffsetDateTime expected = OffsetDateTime.ofInstant(EXPECTED_TIME, ZoneOffset.UTC);\n+    final AssertionError exception =\n+        assertThrows(\n+            AssertionError.class,\n+            () -> assertTimeWithinTolerance(expected.plus(DELTA_OUTSIDE_TOLERANCE), expected));\n+    assertThat(exception.getMessage()).contains(\"outside tolerance\");\n+\n+    assertTimeWithinTolerance(expected.plus(DELTA_WITHIN_TOLERANCE), expected);\n+    assertTimeWithinTolerance(expected.plusSeconds(3), expected, Duration.ofSeconds(4));\n+  }\n+\n+  @Test\n+  public void testMaximumDateTime() {\n+    assertTimeWithinTolerance(MIN_SUPPORTED_INSTANT, MIN_SUPPORTED_INSTANT);\n+    assertTimeWithinTolerance(\n+        MAX_SUPPORTED_INSTANT.plus(DELTA_WITHIN_TOLERANCE), MAX_SUPPORTED_INSTANT);\n+    assertThrows(\n+        AssertionError.class,\n+        () ->\n+            assertTimeWithinTolerance(\n+                MIN_SUPPORTED_INSTANT.plus(DELTA_OUTSIDE_TOLERANCE), MIN_SUPPORTED_INSTANT));\n+\n+    assertTimeWithinTolerance(MAX_SUPPORTED_INSTANT, MAX_SUPPORTED_INSTANT);\n+    assertTimeWithinTolerance(\n+        MAX_SUPPORTED_INSTANT.minus(DELTA_WITHIN_TOLERANCE), MAX_SUPPORTED_INSTANT);\n+    assertThrows(\n+        AssertionError.class,\n+        () ->\n+            assertTimeWithinTolerance(\n+                MAX_SUPPORTED_INSTANT.plus(DELTA_OUTSIDE_TOLERANCE), MAX_SUPPORTED_INSTANT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5363b80ab4d2b57e937771b6dbf922d58579e6e"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQyMTE3NA==", "bodyText": "Nice catch.", "url": "https://github.com/all-of-us/workbench/pull/3922#discussion_r481421174", "createdAt": "2020-09-01T20:46:49Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/utils/TemporalAssertionsTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.pmiops.workbench.utils;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.pmiops.workbench.utils.TemporalAssertions.DEFAULT_TOLERANCE;\n+import static org.pmiops.workbench.utils.TemporalAssertions.MAX_SUPPORTED_INSTANT;\n+import static org.pmiops.workbench.utils.TemporalAssertions.MIN_SUPPORTED_INSTANT;\n+import static org.pmiops.workbench.utils.TemporalAssertions.assertTimeWithinTolerance;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import org.junit.Test;\n+\n+public class TemporalAssertionsTest {\n+\n+  private static final Instant EXPECTED_TIME = Instant.parse(\"2010-06-30T01:20:00.00Z\");\n+  private static final Duration DELTA_WITHIN_TOLERANCE = DEFAULT_TOLERANCE.dividedBy(2);\n+  private static final Duration DELTA_OUTSIDE_TOLERANCE = DEFAULT_TOLERANCE.multipliedBy(2);\n+\n+  @Test\n+  public void testZeroTime() {\n+    assertTimeWithinTolerance(0, 0);\n+    assertTimeWithinTolerance(Instant.ofEpochMilli(0), Instant.ofEpochMilli(0));\n+  }\n+\n+  @Test\n+  public void testInstant_smallDifference() {\n+    assertTimeWithinTolerance(EXPECTED_TIME.plus(DELTA_WITHIN_TOLERANCE), EXPECTED_TIME);\n+    assertTimeWithinTolerance(\n+        EXPECTED_TIME.plus(DELTA_WITHIN_TOLERANCE),\n+        EXPECTED_TIME,\n+        DEFAULT_TOLERANCE.multipliedBy(10));\n+    assertThrows(\n+        AssertionError.class,\n+        () ->\n+            assertTimeWithinTolerance(EXPECTED_TIME.plus(DELTA_OUTSIDE_TOLERANCE), EXPECTED_TIME));\n+  }\n+\n+  @Test\n+  public void testLong() {\n+    assertTimeWithinTolerance(1_598_550_909_000L, 1_598_550_909_000L);\n+  }\n+\n+  @Test\n+  public void testOffsetDateTime() {\n+    final OffsetDateTime expected = OffsetDateTime.ofInstant(EXPECTED_TIME, ZoneOffset.UTC);\n+    final AssertionError exception =\n+        assertThrows(\n+            AssertionError.class,\n+            () -> assertTimeWithinTolerance(expected.plus(DELTA_OUTSIDE_TOLERANCE), expected));\n+    assertThat(exception.getMessage()).contains(\"outside tolerance\");\n+\n+    assertTimeWithinTolerance(expected.plus(DELTA_WITHIN_TOLERANCE), expected);\n+    assertTimeWithinTolerance(expected.plusSeconds(3), expected, Duration.ofSeconds(4));\n+  }\n+\n+  @Test\n+  public void testMaximumDateTime() {\n+    assertTimeWithinTolerance(MIN_SUPPORTED_INSTANT, MIN_SUPPORTED_INSTANT);\n+    assertTimeWithinTolerance(\n+        MAX_SUPPORTED_INSTANT.plus(DELTA_WITHIN_TOLERANCE), MAX_SUPPORTED_INSTANT);\n+    assertThrows(\n+        AssertionError.class,\n+        () ->\n+            assertTimeWithinTolerance(\n+                MIN_SUPPORTED_INSTANT.plus(DELTA_OUTSIDE_TOLERANCE), MIN_SUPPORTED_INSTANT));\n+\n+    assertTimeWithinTolerance(MAX_SUPPORTED_INSTANT, MAX_SUPPORTED_INSTANT);\n+    assertTimeWithinTolerance(\n+        MAX_SUPPORTED_INSTANT.minus(DELTA_WITHIN_TOLERANCE), MAX_SUPPORTED_INSTANT);\n+    assertThrows(\n+        AssertionError.class,\n+        () ->\n+            assertTimeWithinTolerance(\n+                MAX_SUPPORTED_INSTANT.plus(DELTA_OUTSIDE_TOLERANCE), MAX_SUPPORTED_INSTANT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2OTgwNQ=="}, "originalCommit": {"oid": "c5363b80ab4d2b57e937771b6dbf922d58579e6e"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2346, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}