{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0OTIyNjE0", "number": 4324, "title": "[RW-5899] [risk=low] dataset and dataset_cohort join table", "bodyText": "Add the dataset table, just like all the others, as well as the first join table, dataset_cohort. For the latter table, I used a JdbcTemplate call to simply fetch both columns, which turns out to be much simpler than extending the existing Dataset and/or Cohort entities to provide this in a single query with no self-joins. It also skips the generation of a projection proxy object, building the DTO instance directly in a RowMapper<MyDTO>. If this works as well as it appears, we could save half the memory by ripping all the projection stuff out and just using JdbcTemplate. It also supports batching from what I understand, so this is doubly exciting.\nThe data_set table on the MySQL side maps to the dataset table in the BigQuery database. There is continuing discussions on whether to keep moving ahead with the rename in the backend code.\nThe join tables turned out to be simpler than expected, as we bypass the projection class and MapStruct step for all of those. A future story will use this trick to elide those steps for all of the reporting tables (or at least the largest ones in terms of memory use).\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n I have run the E2E tests on ths change against my local UI + API server with yarn test-local\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-11-20T20:01:13Z", "url": "https://github.com/all-of-us/workbench/pull/4324", "merged": true, "mergeCommit": {"oid": "d31bc0c0213d0c2a097f5a7e054d10ca9143fb4b"}, "closed": true, "closedAt": "2020-12-04T12:59:41Z", "author": {"login": "jaycarlton"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABde0OEyABqjQwMjQyODQ5NjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdire7zAH2gAyNTI0OTIyNjE0OmNiMDgyNzgzMmYxNWViYTdkNzZhNGY3M2ViNDJhNTQxZDBkNjdlNWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "21657e0e77dadbe383f5898fb7b8516ee4a3a05d", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/21657e0e77dadbe383f5898fb7b8516ee4a3a05d", "committedDate": "2020-11-21T18:03:42Z", "message": "use flush and transactional to make DB work nicely in test case"}, "afterCommit": {"oid": "87f95f56da694d1c106865760c6d34d1765b8170", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/87f95f56da694d1c106865760c6d34d1765b8170", "committedDate": "2020-11-21T23:05:06Z", "message": "dataset and datasetcohort support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "87f95f56da694d1c106865760c6d34d1765b8170", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/87f95f56da694d1c106865760c6d34d1765b8170", "committedDate": "2020-11-21T23:05:06Z", "message": "dataset and datasetcohort support"}, "afterCommit": {"oid": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/3a4dd851ccac9f4f15c97d4c945bda51a4e5c359", "committedDate": "2020-11-21T23:41:02Z", "message": "dataset and dataset_cohort tables"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/3a4dd851ccac9f4f15c97d4c945bda51a4e5c359", "committedDate": "2020-11-21T23:41:02Z", "message": "dataset and dataset_cohort tables"}, "afterCommit": {"oid": "4e7a2f923bea16103fabbcd2decacc38efce4eeb", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/4e7a2f923bea16103fabbcd2decacc38efce4eeb", "committedDate": "2020-11-22T00:08:13Z", "message": "reporting tables for datasets and dataset-cohort join table"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e7a2f923bea16103fabbcd2decacc38efce4eeb", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/4e7a2f923bea16103fabbcd2decacc38efce4eeb", "committedDate": "2020-11-22T00:08:13Z", "message": "reporting tables for datasets and dataset-cohort join table"}, "afterCommit": {"oid": "ceca24ecffa1a57e61a8c4117a23ef8e9c169ed6", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/ceca24ecffa1a57e61a8c4117a23ef8e9c169ed6", "committedDate": "2020-11-22T00:19:27Z", "message": "dataset and dataset_cohort reporting tables"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MDE3NDgz", "url": "https://github.com/all-of-us/workbench/pull/4324#pullrequestreview-536017483", "createdAt": "2020-11-21T23:51:56Z", "commit": {"oid": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMzo1MTo1N1rOH3yUQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMDoxMDowMFrOH3yalg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1ODExMw==", "bodyText": "Note that this method uses native queries, so no fiddling with the Entity definition's conventions is required.", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r528258113", "createdAt": "2020-11-21T23:51:57Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/jdbc/ReportingNativeQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.pmiops.workbench.db.jdbc;\n+\n+import java.util.List;\n+import org.pmiops.workbench.model.ReportingDatasetCohort;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ReportingNativeQueryServiceImpl implements ReportingNativeQueryService {\n+\n+  private final JdbcTemplate jdbcTemplate;\n+  private static final String FULL_TABLE_QUERY =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1ODE2OQ==", "bodyText": "this may need to be a separate fix", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r528258169", "createdAt": "2020-11-21T23:52:31Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbDataset.java", "diffHunk": "@@ -188,7 +190,7 @@ public void setCohortIds(List<Long> cohortIds) {\n \n   @ElementCollection\n   @CollectionTable(name = \"data_set_values\", joinColumns = @JoinColumn(name = \"data_set_id\"))\n-  @Column(name = \"values\")\n+  @Column(name = \"value\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1ODI2OQ==", "bodyText": "No MapStruct call required for the join table \ud83d\udcaf .", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r528258269", "createdAt": "2020-11-21T23:53:43Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingMapper.java", "diffHunk": "@@ -39,11 +41,17 @@\n \n   List<ReportingCohort> toReportingCohortList(Collection<ProjectedReportingCohort> cohorts);\n \n+  ReportingDataset toReportingDataset(ProjectedReportingDataset projectedReportingDataset);\n+\n+  List<ReportingDataset> toReportingDatasetList(Collection<ProjectedReportingDataset> datasets);\n+\n   default ReportingSnapshot toReportingSnapshot(\n       QueryResultBundle queryResultBundle, long snapshotTimestamp) {\n     return new ReportingSnapshot()\n         .captureTimestamp(snapshotTimestamp)\n         .cohorts(toReportingCohortList(queryResultBundle.getCohorts()))\n+        .datasets(toReportingDatasetList(queryResultBundle.getDatasets()))\n+        .datasetCohorts(queryResultBundle.getDatasetCohorts())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1ODQ3Ng==", "bodyText": "This is still an itch: I don't know how to attach a static method to a bunch of enum classes. You can't have static interface methods in Java, so it's on the honor system for every one of these extractor classes to expose TABLE_NAME. I could do it on all of the enum values, but then you have to do CohortColumnValueExtractor.values[0].getTableName(), which is just gross.", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r528258476", "createdAt": "2020-11-21T23:55:57Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceInsertQueryImpl.java", "diffHunk": "@@ -119,32 +126,45 @@ private TableResult executeWithTimeout(QueryJobConfiguration job) {\n     final QueryParameterValue snapshotTimestamp = getTimestampValue(reportingSnapshot);\n     final ImmutableList.Builder<JobInfo> resultBuilder = new Builder<>();\n \n-    resultBuilder.addAll(\n-        getJobsForDTOs(\n-            CohortColumnValueExtractor.TABLE_NAME,\n-            cohortJobBuilder,\n-            snapshotTimestamp,\n-            reportingSnapshot.getCohorts()));\n-    resultBuilder.addAll(\n-        getJobsForDTOs(\n-            InstitutionColumnValueExtractor.TABLE_NAME,\n-            institutionJobBuilder,\n-            snapshotTimestamp,\n-            reportingSnapshot.getInstitutions()));\n-    resultBuilder.addAll(\n-        getJobsForDTOs(\n-            UserColumnValueExtractor.TABLE_NAME,\n-            userJobBuilder,\n-            snapshotTimestamp,\n-            reportingSnapshot.getUsers()));\n-    resultBuilder.addAll(\n-        getJobsForDTOs(\n-            WorkspaceColumnValueExtractor.TABLE_NAME,\n-            workspaceJobBuilder,\n-            snapshotTimestamp,\n-            reportingSnapshot.getWorkspaces()));\n-\n-    final List<JobInfo> result = resultBuilder.build();\n+    final List<JobInfo> result =\n+        resultBuilder\n+            .addAll(\n+                getJobsForDTOs(\n+                    CohortColumnValueExtractor.TABLE_NAME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1ODY2Mg==", "bodyText": "Arguably a suboptimal name for this. Maybe datasetCohortJoins or datasetCohortPairs?", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r528258662", "createdAt": "2020-11-21T23:57:55Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -8228,6 +8228,14 @@ definitions:\n         type: array\n         items:\n           \"$ref\": \"#/definitions/ReportingCohort\"\n+      datasetCohorts:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1ODk0OQ==", "bodyText": "I shied away from pulling all the test fixture code out of ReportingTestUtils for this branch, but there's support in the works on the Ruby side to make this much cleaner.", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r528258949", "createdAt": "2020-11-22T00:00:51Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/CohortDaoTest.java", "diffHunk": "@@ -43,7 +54,7 @@ public void setUp() {\n     dbWorkspace.setLastModifiedTime(timestamp);\n     workspaceDao.save(dbWorkspace);\n \n-    dbUser = userDao.save(ReportingTestUtils.createDbUser());\n+    dbUser = userDao.save(userFixture.createEntity());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1OTEyMA==", "bodyText": "We could almost pull all of these machinations into a reporting config class, since we'll need to set up similar things for other joint tables. To start with, I think it's fine to overload this test class with dependencies, as join tables always require extra test data to test.", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r528259120", "createdAt": "2020-11-22T00:03:09Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/db/jdbc/ReportingNativeQueryServiceTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.pmiops.workbench.db.jdbc;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.dao.CdrVersionDao;\n+import org.pmiops.workbench.db.dao.CohortDao;\n+import org.pmiops.workbench.db.dao.DataSetDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.dao.projection.ProjectedReportingUser;\n+import org.pmiops.workbench.db.dao.rowmappers.ReportingDatasetCohortRowMapperImpl;\n+import org.pmiops.workbench.db.model.DbCdrVersion;\n+import org.pmiops.workbench.db.model.DbCohort;\n+import org.pmiops.workbench.db.model.DbDataset;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.ReportingDatasetCohort;\n+import org.pmiops.workbench.model.ReportingUser;\n+import org.pmiops.workbench.testconfig.ReportingTestUtils;\n+import org.pmiops.workbench.testconfig.fixtures.ReportingTestFixture;\n+import org.pmiops.workbench.testconfig.fixtures.ReportingUserFixture;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * Test the unique ReportingNativeQueryService, which bypasses Spring in favor of low-level JDBC\n+ * queries. This means we need real DAOs.\n+ */\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class ReportingNativeQueryServiceTest {\n+\n+  @Autowired private ReportingNativeQueryService reportingNativeQueryService;\n+\n+  // It's necessary to bring in several Dao classes, since we aim to populate join tables\n+  // that have neither entities of their own nor stand-alone DAOs.\n+  @Autowired private CdrVersionDao cCdrVersionDao;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a4dd851ccac9f4f15c97d4c945bda51a4e5c359"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1OTczNA==", "bodyText": "The contract for how this all works will soon be simplified to a single yaml input file for each table. I'm moving away from storing this EXPLAIN table output and separate file for skipped rows, etc.", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r528259734", "createdAt": "2020-11-22T00:10:00Z", "author": {"login": "jaycarlton"}, "path": "api/reporting/schemas/input/mysql_describe_csv/dataset.csv", "diffHunk": "@@ -8,4 +8,3 @@ invalid,bit(1),YES,\"\",,\"\"\n includes_all_participants,bit(1),YES,\"\",,\"\"\n last_modified_time,datetime,YES,\"\",,\"\"\n version,smallint(6),NO,\"\",1,\"\"\n-pre_packaged_concept_set,tinyint(4),YES,\"\",,\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e7a2f923bea16103fabbcd2decacc38efce4eeb"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ceca24ecffa1a57e61a8c4117a23ef8e9c169ed6", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/ceca24ecffa1a57e61a8c4117a23ef8e9c169ed6", "committedDate": "2020-11-22T00:19:27Z", "message": "dataset and dataset_cohort reporting tables"}, "afterCommit": {"oid": "e9f2dd32fd6f03796437c0fd5a3294471b54eee7", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/e9f2dd32fd6f03796437c0fd5a3294471b54eee7", "committedDate": "2020-11-25T16:33:46Z", "message": "report join tables and datasets"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e9f2dd32fd6f03796437c0fd5a3294471b54eee7", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/e9f2dd32fd6f03796437c0fd5a3294471b54eee7", "committedDate": "2020-11-25T16:33:46Z", "message": "report join tables and datasets"}, "afterCommit": {"oid": "744660268c10824c9d24ee3745708fbe203f4fb3", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/744660268c10824c9d24ee3745708fbe203f4fb3", "committedDate": "2020-11-25T16:35:50Z", "message": "report join tables and datasets"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "744660268c10824c9d24ee3745708fbe203f4fb3", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/744660268c10824c9d24ee3745708fbe203f4fb3", "committedDate": "2020-11-25T16:35:50Z", "message": "report join tables and datasets"}, "afterCommit": {"oid": "c5187313d0773ad91dfd5912bfff3c5265000dcb", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/c5187313d0773ad91dfd5912bfff3c5265000dcb", "committedDate": "2020-11-25T16:36:36Z", "message": "re-squash"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5187313d0773ad91dfd5912bfff3c5265000dcb", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/c5187313d0773ad91dfd5912bfff3c5265000dcb", "committedDate": "2020-11-25T16:36:36Z", "message": "re-squash"}, "afterCommit": {"oid": "87a18d7d4acf152d2ace00dd3e7d845530e71747", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/87a18d7d4acf152d2ace00dd3e7d845530e71747", "committedDate": "2020-11-28T10:54:16Z", "message": "dataset table and join table support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "87a18d7d4acf152d2ace00dd3e7d845530e71747", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/87a18d7d4acf152d2ace00dd3e7d845530e71747", "committedDate": "2020-11-28T10:54:16Z", "message": "dataset table and join table support"}, "afterCommit": {"oid": "7b9cd870ae7dd207bc05f5c41a302a103dc76d17", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/7b9cd870ae7dd207bc05f5c41a302a103dc76d17", "committedDate": "2020-12-01T21:03:45Z", "message": "dataset tables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08f13fdba3cdfc79d37444b6cfb154c2d840283b", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/08f13fdba3cdfc79d37444b6cfb154c2d840283b", "committedDate": "2020-12-02T22:20:20Z", "message": "dataset tables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b535251ca286932a68f21aff03156f65d77e8af", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/1b535251ca286932a68f21aff03156f65d77e8af", "committedDate": "2020-12-02T22:20:20Z", "message": "restore unrelated changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/f14cf437b8a58e9180f94e9098419a7e67fbd6db", "committedDate": "2020-12-02T22:23:26Z", "message": "spotless"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "48e420df6637e5343d76ea44113643502e9e41fa", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/48e420df6637e5343d76ea44113643502e9e41fa", "committedDate": "2020-12-01T21:50:10Z", "message": "restore unrelated changes"}, "afterCommit": {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/f14cf437b8a58e9180f94e9098419a7e67fbd6db", "committedDate": "2020-12-02T22:23:26Z", "message": "spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0MDUwNDIx", "url": "https://github.com/all-of-us/workbench/pull/4324#pullrequestreview-544050421", "createdAt": "2020-12-03T15:08:50Z", "commit": {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db"}, "state": "APPROVED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNTowODo1MFrOH-hAPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjoxMzoxNVrOH-kmtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMxNDQ5NQ==", "bodyText": "Is the intention here to set the copy's version to INITIAL_VERSION?  the Impl is not doing that.", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535314495", "createdAt": "2020-12-03T15:08:50Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/dataset/mapper/DataSetMapper.java", "diffHunk": "@@ -135,4 +136,7 @@ default DomainValuePair createDomainValuePair(DbDatasetValue dbDatasetValue) {\n \n   @Mapping(target = \"cdrVersionId\", source = \"dbModel.cdrVersion.cdrVersionId\")\n   DataDictionaryEntry dbModelToClient(DbDataDictionaryEntry dbModel);\n+\n+  @ValueMapping(source = \"DbDataset.INITIAL_VERSION\", target = \"version\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMxNjcxNQ==", "bodyText": "Reminder to remove this if you can convince MapStruct to init the version", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535316715", "createdAt": "2020-12-03T15:11:28Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbDataset.java", "diffHunk": "@@ -61,12 +61,14 @@ public DbDataset(\n     this.invalid = invalid;\n   }\n \n+  //   TODO(jaycarlton): use MapStruct to generate a copy ctor for us\n   public DbDataset(DbDataset dataSet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMyODU2MQ==", "bodyText": "Please make this a const", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535328561", "createdAt": "2020-12-03T15:25:48Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceInsertQueryImpl.java", "diffHunk": "@@ -29,12 +30,12 @@\n \n @Service(\"REPORTING_UPLOAD_SERVICE_DML_IMPL\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMzMDQyMQ==", "bodyText": "const", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535330421", "createdAt": "2020-12-03T15:27:52Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceStreamingImpl.java", "diffHunk": "@@ -28,17 +39,24 @@\n \n @Service(\"REPORTING_UPLOAD_SERVICE_STREAMING_IMPL\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMzNjYwMA==", "bodyText": "return TABLE_NAME here (and also make TABLE_NAME private)", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535336600", "createdAt": "2020-12-03T15:33:29Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/insertion/CohortColumnValueExtractor.java", "diffHunk": "@@ -41,6 +41,11 @@\n     this.parameterValueFunction = parameterValueFunction;\n   }\n \n+  @Override\n+  public String getBigQueryTableName() {\n+    return \"cohort\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM0MjAyMA==", "bodyText": "oh nice.  thanks.", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535342020", "createdAt": "2020-12-03T15:38:29Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/api/WorkspacesControllerTest.java", "diffHunk": "@@ -398,14 +398,9 @@ WorkbenchConfig workbenchConfig() {\n \n   @Before\n   public void setUp() {\n-    workbenchConfig = new WorkbenchConfig();\n-    workbenchConfig.featureFlags = new WorkbenchConfig.FeatureFlagsConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM2NjUzMA==", "bodyText": "good to know \ud83d\udc4d", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535366530", "createdAt": "2020-12-03T16:04:24Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/resources/application.properties", "diffHunk": "@@ -5,9 +5,14 @@ spring.datasource.password=sa\n spring.jpa.hibernate.ddl-auto=create-drop\n spring.jpa.properties.hibernate.dialect=org.pmiops.workbench.cdr.CommonTestDialect\n liquibase.enabled=false\n+\n # Uncomment the following to turn on full SQL debugging\n-#logging.level.org.hibernate.SQL=DEBUG\n-#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE\n #spring.jpa.properties.hibernate.show_sql=true\n #spring.jpa.properties.hibernate.format_sql=true\n-#spring.jpa.properties.hibernate.type=trace\n\\ No newline at end of file\n+#spring.jpa.properties.hibernate.type=trace\n+# Show Hibernate statements in addition to SQL\n+#spring.jpa.properties.hibernate.use_sql_comments=true\n+\n+# Alternative settings for debugging. When combined with those above, seems to give redundant output.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MjA1Mw==", "bodyText": "spelling", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535372053", "createdAt": "2020-12-03T16:11:24Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/DataSetDaoTest.java", "diffHunk": "@@ -59,10 +62,48 @@ private DbDataset insertDatasetForGauge(boolean isInvalid, long workspaceId) {\n   }\n \n   @Test\n-  public void test() {\n+  public void testGague() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MzQ5NQ==", "bodyText": "Please add the other dataset elements.  ConceptSets and DomainIds ?", "url": "https://github.com/all-of-us/workbench/pull/4324#discussion_r535373495", "createdAt": "2020-12-03T16:13:15Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/DataSetDaoTest.java", "diffHunk": "@@ -59,10 +62,48 @@ private DbDataset insertDatasetForGauge(boolean isInvalid, long workspaceId) {\n   }\n \n   @Test\n-  public void test() {\n+  public void testGague() {\n+    insertDatasetForGauge(true, workspace.getWorkspaceId());\n+    insertDatasetForGauge(true, workspace.getWorkspaceId());\n+    insertDatasetForGauge(false, workspace.getWorkspaceId());\n+\n     final Map<Boolean, Long> map = dataSetDao.getInvalidToCountMap();\n     assertThat(map).hasSize(Booleans.VALUE_STRINGS.size());\n     assertThat(map.get(true)).isEqualTo(2L);\n     assertThat(map.get(false)).isEqualTo(1L);\n   }\n+\n+  @Test\n+  public void testGetReportingDatasets() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14cf437b8a58e9180f94e9098419a7e67fbd6db"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb3f3964c08530a1bc37312a40366ebfdd305143", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/eb3f3964c08530a1bc37312a40366ebfdd305143", "committedDate": "2020-12-03T19:35:45Z", "message": "restore the maper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb0827832f15eba7d76a4f73eb42a541d0d67e5f", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/cb0827832f15eba7d76a4f73eb42a541d0d67e5f", "committedDate": "2020-12-03T23:10:22Z", "message": "fixes & use new lambda"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3685, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}