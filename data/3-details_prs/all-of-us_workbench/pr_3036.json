{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NjY3MDcx", "number": 3036, "title": "[RW-4322][risk=low] Implement describe-cluster debug tool", "bodyText": "Usage:\n./project.rb list-clusters --project all-of-us-rw-prod\n... # find cluster of interest\n\n./project.rb describe-cluster --id aou-rw-xxxxxx/all-of-us-xx\n\nPrints command line instructions for inspecting the logs directory for the cluster.\nSample output: https://pmi-engteam.slack.com/files/U5KGPEEPK/FSS4UKYF5/describe-cluster_output", "createdAt": "2020-01-24T03:44:22Z", "url": "https://github.com/all-of-us/workbench/pull/3036", "merged": true, "mergeCommit": {"oid": "ddfe9869e1b231612391578f051427d0bf8ac1ec"}, "closed": true, "closedAt": "2020-01-29T23:28:13Z", "author": {"login": "calbach"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9WkLMAH2gAyMzY2NjY3MDcxOjU5MjQwMmY3MzcwMGZiN2U4NzJhNTNmOTNiNWY3NTkwNGIzYjdkOTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-6Dh7gH2gAyMzY2NjY3MDcxOmJkYjgxMWQ4MjdjMWUwODg3Y2NlMDgxN2E1YTU4Y2NiZjNmNThlZjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "592402f73700fb7e872a53f93b5f75904b3b7d96", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/592402f73700fb7e872a53f93b5f75904b3b7d96", "committedDate": "2020-01-24T03:41:44Z", "message": "Implement describe-cluster"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3OTk2OTYy", "url": "https://github.com/all-of-us/workbench/pull/3036#pullrequestreview-347996962", "createdAt": "2020-01-24T14:41:04Z", "commit": {"oid": "592402f73700fb7e872a53f93b5f75904b3b7d96"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDo0MTowNFrOFhfv3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDo0NDozMVrOFhf3Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2NzQ4Ng==", "bodyText": "nit: I might name these arguments, even the null ones, for readability.", "url": "https://github.com/all-of-us/workbench/pull/3036#discussion_r370667486", "createdAt": "2020-01-24T14:41:04Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ManageClusters.java", "diffHunk": "@@ -91,6 +101,42 @@ private static void listClusters(String apiUrl) throws IOException, ApiException\n     System.out.println(String.format(\"listed %d clusters\", count.get()));\n   }\n \n+  private static void describeCluster(\n+      String apiUrl, String workbenchProjectId, String workbenchServiceAccount, String clusterId)\n+      throws IOException, ApiException {\n+    String[] parts = clusterId.split(\"/\");\n+    if (parts.length != 2) {\n+      System.err.println(\n+          String.format(\n+              \"given cluster ID '%s' is invalid, wanted format 'project/clusterName'\", clusterId));\n+      return;\n+    }\n+\n+    // Leo's getCluster API swagger tends to be outdated; issue a raw getCluster request to ensure\n+    // we get all available information for debugging.\n+    ClusterApi client = newApiClient(apiUrl);\n+    com.squareup.okhttp.Call call = client.getClusterCall(parts[0], parts[1], null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "592402f73700fb7e872a53f93b5f75904b3b7d96"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2ODE0NQ==", "bodyText": "nit: why not allow the caller to specify an output stream?", "url": "https://github.com/all-of-us/workbench/pull/3036#discussion_r370668145", "createdAt": "2020-01-24T14:42:09Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ManageClusters.java", "diffHunk": "@@ -91,6 +101,42 @@ private static void listClusters(String apiUrl) throws IOException, ApiException\n     System.out.println(String.format(\"listed %d clusters\", count.get()));\n   }\n \n+  private static void describeCluster(\n+      String apiUrl, String workbenchProjectId, String workbenchServiceAccount, String clusterId)\n+      throws IOException, ApiException {\n+    String[] parts = clusterId.split(\"/\");\n+    if (parts.length != 2) {\n+      System.err.println(\n+          String.format(\n+              \"given cluster ID '%s' is invalid, wanted format 'project/clusterName'\", clusterId));\n+      return;\n+    }\n+\n+    // Leo's getCluster API swagger tends to be outdated; issue a raw getCluster request to ensure\n+    // we get all available information for debugging.\n+    ClusterApi client = newApiClient(apiUrl);\n+    com.squareup.okhttp.Call call = client.getClusterCall(parts[0], parts[1], null, null);\n+    ApiResponse<Object> resp = client.getApiClient().execute(call, Object.class);\n+\n+    // Parse the response as well so we can log specific structured fields.\n+    Cluster cluster = PRETTY_GSON.fromJson(PRETTY_GSON.toJson(resp.getData()), Cluster.class);\n+\n+    System.out.println(PRETTY_GSON.toJson(resp.getData()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "592402f73700fb7e872a53f93b5f75904b3b7d96"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2OTAxNA==", "bodyText": "should this specify that you should run this on your cluster?", "url": "https://github.com/all-of-us/workbench/pull/3036#discussion_r370669014", "createdAt": "2020-01-24T14:43:49Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ManageClusters.java", "diffHunk": "@@ -91,6 +101,42 @@ private static void listClusters(String apiUrl) throws IOException, ApiException\n     System.out.println(String.format(\"listed %d clusters\", count.get()));\n   }\n \n+  private static void describeCluster(\n+      String apiUrl, String workbenchProjectId, String workbenchServiceAccount, String clusterId)\n+      throws IOException, ApiException {\n+    String[] parts = clusterId.split(\"/\");\n+    if (parts.length != 2) {\n+      System.err.println(\n+          String.format(\n+              \"given cluster ID '%s' is invalid, wanted format 'project/clusterName'\", clusterId));\n+      return;\n+    }\n+\n+    // Leo's getCluster API swagger tends to be outdated; issue a raw getCluster request to ensure\n+    // we get all available information for debugging.\n+    ClusterApi client = newApiClient(apiUrl);\n+    com.squareup.okhttp.Call call = client.getClusterCall(parts[0], parts[1], null, null);\n+    ApiResponse<Object> resp = client.getApiClient().execute(call, Object.class);\n+\n+    // Parse the response as well so we can log specific structured fields.\n+    Cluster cluster = PRETTY_GSON.fromJson(PRETTY_GSON.toJson(resp.getData()), Cluster.class);\n+\n+    System.out.println(PRETTY_GSON.toJson(resp.getData()));\n+    System.out.printf(\"\\n\\nTo inspect logs in cloud storage, run the following:\\n\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "592402f73700fb7e872a53f93b5f75904b3b7d96"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2OTMzNA==", "bodyText": "aside: Do we not yet have an argument parser for Java like we do in Ruby?", "url": "https://github.com/all-of-us/workbench/pull/3036#discussion_r370669334", "createdAt": "2020-01-24T14:44:31Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ManageClusters.java", "diffHunk": "@@ -140,13 +186,23 @@ private static void deleteClusters(\n   public CommandLineRunner run() {\n     return (args) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "592402f73700fb7e872a53f93b5f75904b3b7d96"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MTkxNDg0", "url": "https://github.com/all-of-us/workbench/pull/3036#pullrequestreview-348191484", "createdAt": "2020-01-24T19:58:55Z", "commit": {"oid": "592402f73700fb7e872a53f93b5f75904b3b7d96"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbef989506747b01c7102ced7b7affd35deed049", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/dbef989506747b01c7102ced7b7affd35deed049", "committedDate": "2020-01-24T23:25:57Z", "message": "PR fixes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eab37b312d86b3bc579740c9baa93be1a1a9d2ad", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/eab37b312d86b3bc579740c9baa93be1a1a9d2ad", "committedDate": "2020-01-24T23:17:30Z", "message": "PR fixes"}, "afterCommit": {"oid": "dbef989506747b01c7102ced7b7affd35deed049", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/dbef989506747b01c7102ced7b7affd35deed049", "committedDate": "2020-01-24T23:25:57Z", "message": "PR fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcd6e319c5a1e6191e255e6c6b2d5c421b5c8705", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/fcd6e319c5a1e6191e255e6c6b2d5c421b5c8705", "committedDate": "2020-01-27T18:17:58Z", "message": "Update SA ctx usage and usage logs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MTExODk2", "url": "https://github.com/all-of-us/workbench/pull/3036#pullrequestreview-349111896", "createdAt": "2020-01-28T03:25:55Z", "commit": {"oid": "fcd6e319c5a1e6191e255e6c6b2d5c421b5c8705"}, "state": "APPROVED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMzoyNTo1NVrOFiYUEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDowMDoxNVrOFiYqsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU5NDI1Ng==", "bodyText": "I'm surprised there's not an even more succinct way to bind the option value to an attribute.", "url": "https://github.com/all-of-us/workbench/pull/3036#discussion_r371594256", "createdAt": "2020-01-28T03:25:55Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1301,6 +1301,60 @@ def delete_clusters(cmd_name, *args)\n   :fn => ->(*args) { delete_clusters(\"delete-clusters\", *args) }\n })\n \n+def describe_cluster(cmd_name, *args)\n+  ensure_docker cmd_name, args\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.add_option(\n+      \"--id [CLUSTER_ID]\",\n+      ->(opts, v) { opts.cluster_id = v},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd6e319c5a1e6191e255e6c6b2d5c421b5c8705"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU5NDQ3Mg==", "bodyText": "nit: We should have a standard validator with a bit more descriptive message when a required parameter is missing.", "url": "https://github.com/all-of-us/workbench/pull/3036#discussion_r371594472", "createdAt": "2020-01-28T03:27:02Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1301,6 +1301,60 @@ def delete_clusters(cmd_name, *args)\n   :fn => ->(*args) { delete_clusters(\"delete-clusters\", *args) }\n })\n \n+def describe_cluster(cmd_name, *args)\n+  ensure_docker cmd_name, args\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.add_option(\n+      \"--id [CLUSTER_ID]\",\n+      ->(opts, v) { opts.cluster_id = v},\n+      \"Required cluster ID to describe, e.g. 'aou-test-f1-1/all-of-us'\")\n+  op.add_option(\n+      \"--project [project]\",\n+      ->(opts, v) { opts.project = v},\n+      \"Optional project ID; by default will infer the project form the cluster ID\")\n+  op.add_validator ->(opts) { raise ArgumentError unless opts.cluster_id }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd6e319c5a1e6191e255e6c6b2d5c421b5c8705"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU5NTA2Ng==", "bodyText": "How are you handling local vs test here? Or do you not need to?", "url": "https://github.com/all-of-us/workbench/pull/3036#discussion_r371595066", "createdAt": "2020-01-28T03:30:41Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1301,6 +1301,60 @@ def delete_clusters(cmd_name, *args)\n   :fn => ->(*args) { delete_clusters(\"delete-clusters\", *args) }\n })\n \n+def describe_cluster(cmd_name, *args)\n+  ensure_docker cmd_name, args\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.add_option(\n+      \"--id [CLUSTER_ID]\",\n+      ->(opts, v) { opts.cluster_id = v},\n+      \"Required cluster ID to describe, e.g. 'aou-test-f1-1/all-of-us'\")\n+  op.add_option(\n+      \"--project [project]\",\n+      ->(opts, v) { opts.project = v},\n+      \"Optional project ID; by default will infer the project form the cluster ID\")\n+  op.add_validator ->(opts) { raise ArgumentError unless opts.cluster_id }\n+  op.parse.validate\n+\n+  # Infer the project from the cluster ID project ID. If for some reason, the\n+  # target cluster ID does not conform to the current billing prefix (e.g. if we\n+  # changed the prefix), --project will override this.\n+  common = Common.new\n+  project_from_cluster = nil\n+  ENVIRONMENTS.each_key do |env|\n+    if op.opts.cluster_id.start_with?(get_billing_project_prefix(env))\n+      # Take the most specific prefix match, since prod is a substring of the others.\n+      if not project_from_cluster or project_from_cluster.length < env.length\n+        project_from_cluster = env", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd6e319c5a1e6191e255e6c6b2d5c421b5c8705"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU5NTk1Nw==", "bodyText": "Is it possible to pull out the command into a separate Ruby script or class so that we don't keep adding . code to devstart.rb? Presumably you'd just have to leave behind this command registration.\naside: it's kind of annoying that we need two levels of registration, one in Common and another with WbOptionsParser. I wonder if there's something more generic that could handle multiple levels of commands a la gcloud.", "url": "https://github.com/all-of-us/workbench/pull/3036#discussion_r371595957", "createdAt": "2020-01-28T03:35:53Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1301,6 +1301,60 @@ def delete_clusters(cmd_name, *args)\n   :fn => ->(*args) { delete_clusters(\"delete-clusters\", *args) }\n })\n \n+def describe_cluster(cmd_name, *args)\n+  ensure_docker cmd_name, args\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.add_option(\n+      \"--id [CLUSTER_ID]\",\n+      ->(opts, v) { opts.cluster_id = v},\n+      \"Required cluster ID to describe, e.g. 'aou-test-f1-1/all-of-us'\")\n+  op.add_option(\n+      \"--project [project]\",\n+      ->(opts, v) { opts.project = v},\n+      \"Optional project ID; by default will infer the project form the cluster ID\")\n+  op.add_validator ->(opts) { raise ArgumentError unless opts.cluster_id }\n+  op.parse.validate\n+\n+  # Infer the project from the cluster ID project ID. If for some reason, the\n+  # target cluster ID does not conform to the current billing prefix (e.g. if we\n+  # changed the prefix), --project will override this.\n+  common = Common.new\n+  project_from_cluster = nil\n+  ENVIRONMENTS.each_key do |env|\n+    if op.opts.cluster_id.start_with?(get_billing_project_prefix(env))\n+      # Take the most specific prefix match, since prod is a substring of the others.\n+      if not project_from_cluster or project_from_cluster.length < env.length\n+        project_from_cluster = env\n+      end\n+    end\n+  end\n+  common.warning \"unable to determine project by cluster ID\" unless project_from_cluster\n+  unless op.opts.project\n+    op.opts.project = project_from_cluster\n+  end\n+\n+  # Add the GcloudContext after setting up the project parameter to avoid\n+  # earlier validation failures.\n+  gcc = GcloudContextV2.new(op)\n+  op.parse.validate\n+  gcc.validate\n+\n+  api_url = get_leo_api_url(gcc.project)\n+  ServiceAccountContext.new(gcc.project).run do |ctx|\n+    common = Common.new\n+    common.run_inline %W{\n+       gradle manageClusters\n+      -PappArgs=['describe','#{api_url}','#{gcc.project}','#{ctx.service_account}','#{op.opts.cluster_id}']}\n+  end\n+end\n+\n+Common.register_command({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd6e319c5a1e6191e255e6c6b2d5c421b5c8705"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU5NjY2MQ==", "bodyText": "nit: This looks like the kind of list you might want in an Enum, so that you can add description, friendly name, or whatever other metadata you like to the arguments. It also lets you be a bit more type-safe, so no one can pass in an unsupported argument.", "url": "https://github.com/all-of-us/workbench/pull/3036#discussion_r371596661", "createdAt": "2020-01-28T03:40:19Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ManageClusters.java", "diffHunk": "@@ -41,6 +46,11 @@\n         \"https://www.googleapis.com/auth/userinfo.profile\",\n         \"https://www.googleapis.com/auth/userinfo.email\"\n       };\n+  private static final List<String> DESCRIBE_ARG_NAMES =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd6e319c5a1e6191e255e6c6b2d5c421b5c8705"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU5NzAzMQ==", "bodyText": "I wonder if it's worth making a shell command in devstart that's just a straight pass-through. If the args are only going to have one source of truth, I'd probably want that to be the code that responds to them, i.e. this file. Plus, ideally we should be able to run this just as easily from outside a ruby dispatching system; we needn't depend on it.", "url": "https://github.com/all-of-us/workbench/pull/3036#discussion_r371597031", "createdAt": "2020-01-28T03:42:38Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ManageClusters.java", "diffHunk": "@@ -155,9 +219,11 @@ public CommandLineRunner run() {\n         case \"delete\":\n           // User-friendly command-line parsing is done in devstart.rb, so we do only simple", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd6e319c5a1e6191e255e6c6b2d5c421b5c8705"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU5NzQ0MA==", "bodyText": "nit: this logic seems like it should be in a utility class so that services can use it if they need to. You wouldn't want those to depend on tools I wouldn't think.", "url": "https://github.com/all-of-us/workbench/pull/3036#discussion_r371597440", "createdAt": "2020-01-28T03:45:02Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ManageClusters.java", "diffHunk": "@@ -91,6 +101,50 @@ private static void listClusters(String apiUrl) throws IOException, ApiException\n     System.out.println(String.format(\"listed %d clusters\", count.get()));\n   }\n \n+  private static void describeCluster(\n+      String apiUrl, String workbenchProjectId, String workbenchServiceAccount, String clusterId)\n+      throws IOException, ApiException {\n+    String[] parts = clusterId.split(\"/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd6e319c5a1e6191e255e6c6b2d5c421b5c8705"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU5Nzc2Mw==", "bodyText": "System.out calls won't go to stackdriver logging, right? I guess that's what was curious. Maybe it needn't, since this is just for inspection. There might be a requirement for auditing administrative exploration of a cluster eventually though.", "url": "https://github.com/all-of-us/workbench/pull/3036#discussion_r371597763", "createdAt": "2020-01-28T03:46:37Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ManageClusters.java", "diffHunk": "@@ -91,6 +101,42 @@ private static void listClusters(String apiUrl) throws IOException, ApiException\n     System.out.println(String.format(\"listed %d clusters\", count.get()));\n   }\n \n+  private static void describeCluster(\n+      String apiUrl, String workbenchProjectId, String workbenchServiceAccount, String clusterId)\n+      throws IOException, ApiException {\n+    String[] parts = clusterId.split(\"/\");\n+    if (parts.length != 2) {\n+      System.err.println(\n+          String.format(\n+              \"given cluster ID '%s' is invalid, wanted format 'project/clusterName'\", clusterId));\n+      return;\n+    }\n+\n+    // Leo's getCluster API swagger tends to be outdated; issue a raw getCluster request to ensure\n+    // we get all available information for debugging.\n+    ClusterApi client = newApiClient(apiUrl);\n+    com.squareup.okhttp.Call call = client.getClusterCall(parts[0], parts[1], null, null);\n+    ApiResponse<Object> resp = client.getApiClient().execute(call, Object.class);\n+\n+    // Parse the response as well so we can log specific structured fields.\n+    Cluster cluster = PRETTY_GSON.fromJson(PRETTY_GSON.toJson(resp.getData()), Cluster.class);\n+\n+    System.out.println(PRETTY_GSON.toJson(resp.getData()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2ODE0NQ=="}, "originalCommit": {"oid": "592402f73700fb7e872a53f93b5f75904b3b7d96"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU5ODIwMg==", "bodyText": "Oh that's interesting about the SA tokens.\nDo you think it would make sense to define a group for all the developers who need to go on-call? I know they tend not to want to do that unless there are ~3 or more accounts that need whatever access it might be. It just seems like managing the next person to join the team would be much simpler if it were just adding them to an oncall group.", "url": "https://github.com/all-of-us/workbench/pull/3036#discussion_r371598202", "createdAt": "2020-01-28T03:49:13Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ManageClusters.java", "diffHunk": "@@ -91,6 +101,42 @@ private static void listClusters(String apiUrl) throws IOException, ApiException\n     System.out.println(String.format(\"listed %d clusters\", count.get()));\n   }\n \n+  private static void describeCluster(\n+      String apiUrl, String workbenchProjectId, String workbenchServiceAccount, String clusterId)\n+      throws IOException, ApiException {\n+    String[] parts = clusterId.split(\"/\");\n+    if (parts.length != 2) {\n+      System.err.println(\n+          String.format(\n+              \"given cluster ID '%s' is invalid, wanted format 'project/clusterName'\", clusterId));\n+      return;\n+    }\n+\n+    // Leo's getCluster API swagger tends to be outdated; issue a raw getCluster request to ensure\n+    // we get all available information for debugging.\n+    ClusterApi client = newApiClient(apiUrl);\n+    com.squareup.okhttp.Call call = client.getClusterCall(parts[0], parts[1], null, null);\n+    ApiResponse<Object> resp = client.getApiClient().execute(call, Object.class);\n+\n+    // Parse the response as well so we can log specific structured fields.\n+    Cluster cluster = PRETTY_GSON.fromJson(PRETTY_GSON.toJson(resp.getData()), Cluster.class);\n+\n+    System.out.println(PRETTY_GSON.toJson(resp.getData()));\n+    System.out.printf(\"\\n\\nTo inspect logs in cloud storage, run the following:\\n\\n\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2OTAxNA=="}, "originalCommit": {"oid": "592402f73700fb7e872a53f93b5f75904b3b7d96"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwMDA1MQ==", "bodyText": "If I'm reading this right, you can set an explicit expiration time by passing validBeforeTime, but I think it's only for the REST API and not the gcloud command.", "url": "https://github.com/all-of-us/workbench/pull/3036#discussion_r371600051", "createdAt": "2020-01-28T04:00:15Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ManageClusters.java", "diffHunk": "@@ -91,6 +101,50 @@ private static void listClusters(String apiUrl) throws IOException, ApiException\n     System.out.println(String.format(\"listed %d clusters\", count.get()));\n   }\n \n+  private static void describeCluster(\n+      String apiUrl, String workbenchProjectId, String workbenchServiceAccount, String clusterId)\n+      throws IOException, ApiException {\n+    String[] parts = clusterId.split(\"/\");\n+    if (parts.length != 2) {\n+      System.err.println(\n+          String.format(\n+              \"given cluster ID '%s' is invalid, wanted format 'project/clusterName'\", clusterId));\n+      return;\n+    }\n+    String clusterProject = parts[0];\n+    String clusterName = parts[1];\n+\n+    // Leo's getCluster API swagger tends to be outdated; issue a raw getCluster request to ensure\n+    // we get all available information for debugging.\n+    ClusterApi client = newApiClient(apiUrl);\n+    com.squareup.okhttp.Call call =\n+        client.getClusterCall(\n+            clusterProject,\n+            clusterName,\n+            /* progressListener */ null,\n+            /* progressRequestListener */ null);\n+    ApiResponse<Object> resp = client.getApiClient().execute(call, Object.class);\n+\n+    // Parse the response as well so we can log specific structured fields.\n+    Cluster cluster = PRETTY_GSON.fromJson(PRETTY_GSON.toJson(resp.getData()), Cluster.class);\n+\n+    System.out.println(PRETTY_GSON.toJson(resp.getData()));\n+    System.out.printf(\"\\n\\nTo inspect logs in cloud storage, run the following:\\n\\n\");\n+\n+    // TODO(PD-4740): Use impersonation here instead.\n+    String keyPath = String.format(\"/tmp/%s-key.json\", workbenchProjectId);\n+    System.out.printf(\n+        \"    gcloud iam service-accounts keys create %s --iam-account %s\\n\",\n+        keyPath, workbenchServiceAccount);\n+    System.out.printf(\"    gcloud auth activate-service-account --key-file %s\\n\\n\", keyPath);\n+    System.out.printf(\"    gsutil ls gs://%s/**\\n\", cluster.getStagingBucket());\n+    System.out.printf(\"    gsutil cat ... # inspect or copy logs\\n\\n\");\n+    System.out.printf(\"    # Delete the key when done\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd6e319c5a1e6191e255e6c6b2d5c421b5c8705"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd7596df038cb2dd7405a5af361cfd0a46364321", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/bd7596df038cb2dd7405a5af361cfd0a46364321", "committedDate": "2020-01-28T23:26:26Z", "message": "Update utils submodule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdb811d827c1e0887cce0817a5a58ccbf3f58ef2", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/bdb811d827c1e0887cce0817a5a58ccbf3f58ef2", "committedDate": "2020-01-28T23:36:35Z", "message": "handl local"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3729, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}