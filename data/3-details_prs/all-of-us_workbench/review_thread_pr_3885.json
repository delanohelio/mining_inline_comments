{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MTM4NTMx", "number": 3885, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjo1MzoyNlrOEZIFjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzo0MDo1OFrOEZJpfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzgyMzQ5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/list-search-v2/list-search-v2.component.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjo1MzoyNlrOHBw01g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjo1MzoyNlrOHBw01g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYxMDU4Mg==", "bodyText": "Should we add check for selectionsIds being null or undefined?", "url": "https://github.com/all-of-us/workbench/pull/3885#discussion_r471610582", "createdAt": "2020-08-17T16:53:26Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/cohort-search/list-search-v2/list-search-v2.component.tsx", "diffHunk": "@@ -411,7 +411,12 @@ export const ListSearchV2 = withCurrentWorkspace()(\n             </tbody>\n           </table>}\n           {!standardOnly && !displayData.length && <div>No results found</div>}\n-          <Button type='primary' style={{borderRadius: '5px', float: 'right', marginTop: '1rem'}}>Finish & Review</Button>\n+          <Button type='primary'\n+                  style={{borderRadius: '5px', float: 'right', marginTop: '1rem'}}\n+                  disabled={selectedIds.length === 0}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16b7206b8f76035e932bf3ff5e71a669b20221c2"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Nzk2MTIxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/selection-list/selection-list.component.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzoxODoyMFrOHByRVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODo1Mzo1MVrOHB27vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYzNDI2Mw==", "bodyText": "nit we can move this in a function as we are using this condition twice (at 442) attributesSelection || showModifiersSlide", "url": "https://github.com/all-of-us/workbench/pull/3885#discussion_r471634263", "createdAt": "2020-08-17T17:18:20Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/cohort-search/selection-list/selection-list.component.tsx", "diffHunk": "@@ -310,111 +329,143 @@ export class SelectionListModalVersion extends React.Component<Props> {\n   }\n }\n \n-export const SelectionList = withCurrentCohortCriteria()(class extends React.Component<Props, State> {\n-  constructor(props: Props) {\n-    super(props);\n-    this.state = {\n-      modifierButtonText: 'APPLY MODIFIERS',\n-      showModifiersSlide: false\n-    };\n-  }\n-\n-  componentDidUpdate(prevProps: Readonly<Props>): void {\n-    if (!this.props.criteria && !!prevProps.criteria) {\n-      this.setState({\n+export const SelectionList = fp.flow(withCurrentCohortCriteria(), withCurrentCohortSearchContext())(\n+  class extends React.Component<Props, State> {\n+    subscription: Subscription;\n+    constructor(props: Props) {\n+      super(props);\n+      this.state = {\n+        attributesSelection: undefined,\n         modifierButtonText: 'APPLY MODIFIERS',\n         showModifiersSlide: false\n+      };\n+    }\n+\n+    componentDidMount(): void {\n+      this.subscription = attributesSelectionStore.subscribe(attributesSelection => {\n+        this.setState({attributesSelection});\n+        if (!!attributesSelection) {\n+          setSidebarActiveIconStore.next('criteria');\n+        }\n       });\n     }\n-  }\n \n-  get showModifiers() {\n-    return ![DomainType.PHYSICALMEASUREMENT, DomainType.PERSON, DomainType.SURVEY].includes(this.props.domain);\n-  }\n+    componentDidUpdate(prevProps: Readonly<Props>): void {\n+      if (!this.props.criteria && !!prevProps.criteria) {\n+        this.setState({\n+          modifierButtonText: 'APPLY MODIFIERS',\n+          showModifiersSlide: false\n+        });\n+      }\n+    }\n \n-  get showNext() {\n-    return this.showModifiers && this.props.view !== 'modifiers';\n-  }\n+    get showModifiers() {\n+      return ![DomainType.PHYSICALMEASUREMENT, DomainType.PERSON, DomainType.SURVEY].includes(this.props.domain);\n+    }\n \n-  get showBack() {\n-    return this.showModifiers && this.props.view === 'modifiers';\n-  }\n+    get showNext() {\n+      return this.showModifiers && this.props.view !== 'modifiers';\n+    }\n \n-  showOr(index, selection) {\n-    return index > 0 && selection.domainId !== DomainType.PERSON.toString();\n-  }\n+    get showBack() {\n+      return this.showModifiers && this.props.view === 'modifiers';\n+    }\n \n-  renderCriteria() {\n-    const {criteria} = this.props;\n-    const g = fp.groupBy('isStandard', criteria);\n-    return <div style={{paddingLeft: '0.5rem', paddingBottom: '4rem'}}>\n-      {g['true'] && g['true'].length > 0 && this.renderCriteriaGroup(g['true'] , 'Standard Groups')}\n-      {g['false'] && g['false'].length > 0 && this.renderCriteriaGroup(g['false'], 'Source code Groups')}\n-    </div>;\n-  }\n+    showOr(index, selection) {\n+      return index > 0 && selection.domainId !== DomainType.PERSON.toString();\n+    }\n \n-  removeCriteria(criteriaToDel) {\n-    const updateList =  fp.remove(\n-      (selection) => selection.parameterId === criteriaToDel.parameterId, this.props.criteria);\n-    currentCohortCriteriaStore.next(updateList);\n-  }\n+    renderCriteria() {\n+      const {criteria} = this.props;\n+      const g = fp.groupBy('isStandard', criteria);\n+      return <div style={{paddingLeft: '0.5rem', paddingBottom: '4rem'}}>\n+        {g['true'] && g['true'].length > 0 && this.renderCriteriaGroup(g['true'] , 'Standard Groups')}\n+        {g['false'] && g['false'].length > 0 && this.renderCriteriaGroup(g['false'], 'Source code Groups')}\n+      </div>;\n+    }\n \n-  renderCriteriaGroup(criteriaGroup, header) {\n-    return  <React.Fragment>\n-      <h3> {header}</h3>\n-      <hr style={{marginRight: '0.5rem'}}/>\n-      {criteriaGroup && criteriaGroup.map((criteria, index) =>\n-        <SelectionInfo key={index}\n-                       index={index}\n-                       selection={criteria}\n-                       removeSelection={() => this.removeCriteria(criteria)}/>\n-\n-      )}\n-    </React.Fragment> ;\n-  }\n+    removeCriteria(criteriaToDel) {\n+      const updateList = fp.remove((selection) => selection.parameterId === criteriaToDel.parameterId, this.props.criteria);\n+      currentCohortCriteriaStore.next(updateList);\n+    }\n+\n+    renderCriteriaGroup(criteriaGroup, header) {\n+      return  <React.Fragment>\n+        <h3> {header}</h3>\n+        <hr style={{marginRight: '0.5rem'}}/>\n+        {criteriaGroup && criteriaGroup.map((criteria, index) =>\n+          <SelectionInfo key={index}\n+                         index={index}\n+                         selection={criteria}\n+                         removeSelection={() => this.removeCriteria(criteria)}/>\n \n-  applyModifier(modifiers) {\n-    if (modifiers) {\n-      const modifierButtonText = '(' + modifiers.length + ')  MODIFIERS APPLIED';\n-      this.setState({showModifiersSlide: false, modifierButtonText: modifierButtonText});\n-    } else {\n-      this.setState({showModifiersSlide: false, modifierButtonText: 'APPLY MODIFIERS'});\n+        )}\n+      </React.Fragment> ;\n     }\n-  }\n \n-  get showModifierButton() {\n-    const {criteria} = this.props;\n-    return criteria && criteria.length > 0 &&\n-      criteria[0].domainId !== DomainType.PHYSICALMEASUREMENT.toString()\n-      && criteria[0].domainId !== DomainType.PERSON.toString();\n-  }\n+    applyModifier(modifiers) {\n+      if (modifiers) {\n+        const modifierButtonText = '(' + modifiers.length + ')  MODIFIERS APPLIED';\n+        this.setState({showModifiersSlide: false, modifierButtonText: modifierButtonText});\n+      } else {\n+        this.setState({showModifiersSlide: false, modifierButtonText: 'APPLY MODIFIERS'});\n+      }\n+    }\n \n-  render() {\n-    const {back, criteria} = this.props;\n-    const {modifierButtonText, showModifiersSlide} = this.state;\n-    return <div>\n-        {!showModifiersSlide ?  <React.Fragment>\n-          <h3 style={{...styles.sectionTitle, marginTop: 0}}>Add selected criteria to cohort</h3>\n-          <div style={{paddingTop: '0.5rem', position: 'relative'}}>\n-            <div style={styles.selectionContainer}>\n-              {this.renderCriteria()}\n-              {this.showModifierButton && <div style={{paddingLeft: '0.6rem'}}>\n-                <Button type='secondaryOnDarkBackground' style={styles.modifierButton}\n-                        onClick={() => this.setState({showModifiersSlide: true})}>\n-                  {modifierButtonText}\n-                </Button>\n-              </div>}\n+    get showModifierButton() {\n+      const {criteria} = this.props;\n+      return criteria && criteria.length > 0 &&\n+        criteria[0].domainId !== DomainType.PHYSICALMEASUREMENT.toString()\n+        && criteria[0].domainId !== DomainType.PERSON.toString();\n+    }\n+\n+    render() {\n+      const {back, criteria} = this.props;\n+      const {attributesSelection, modifierButtonText, showModifiersSlide} = this.state;\n+      return <div>\n+        <FlexRow style={styles.navIcons}>\n+          {(attributesSelection || showModifiersSlide) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16b7206b8f76035e932bf3ff5e71a669b20221c2"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcxMDY1Mg==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3885#discussion_r471710652", "createdAt": "2020-08-17T18:53:51Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/selection-list/selection-list.component.tsx", "diffHunk": "@@ -310,111 +329,143 @@ export class SelectionListModalVersion extends React.Component<Props> {\n   }\n }\n \n-export const SelectionList = withCurrentCohortCriteria()(class extends React.Component<Props, State> {\n-  constructor(props: Props) {\n-    super(props);\n-    this.state = {\n-      modifierButtonText: 'APPLY MODIFIERS',\n-      showModifiersSlide: false\n-    };\n-  }\n-\n-  componentDidUpdate(prevProps: Readonly<Props>): void {\n-    if (!this.props.criteria && !!prevProps.criteria) {\n-      this.setState({\n+export const SelectionList = fp.flow(withCurrentCohortCriteria(), withCurrentCohortSearchContext())(\n+  class extends React.Component<Props, State> {\n+    subscription: Subscription;\n+    constructor(props: Props) {\n+      super(props);\n+      this.state = {\n+        attributesSelection: undefined,\n         modifierButtonText: 'APPLY MODIFIERS',\n         showModifiersSlide: false\n+      };\n+    }\n+\n+    componentDidMount(): void {\n+      this.subscription = attributesSelectionStore.subscribe(attributesSelection => {\n+        this.setState({attributesSelection});\n+        if (!!attributesSelection) {\n+          setSidebarActiveIconStore.next('criteria');\n+        }\n       });\n     }\n-  }\n \n-  get showModifiers() {\n-    return ![DomainType.PHYSICALMEASUREMENT, DomainType.PERSON, DomainType.SURVEY].includes(this.props.domain);\n-  }\n+    componentDidUpdate(prevProps: Readonly<Props>): void {\n+      if (!this.props.criteria && !!prevProps.criteria) {\n+        this.setState({\n+          modifierButtonText: 'APPLY MODIFIERS',\n+          showModifiersSlide: false\n+        });\n+      }\n+    }\n \n-  get showNext() {\n-    return this.showModifiers && this.props.view !== 'modifiers';\n-  }\n+    get showModifiers() {\n+      return ![DomainType.PHYSICALMEASUREMENT, DomainType.PERSON, DomainType.SURVEY].includes(this.props.domain);\n+    }\n \n-  get showBack() {\n-    return this.showModifiers && this.props.view === 'modifiers';\n-  }\n+    get showNext() {\n+      return this.showModifiers && this.props.view !== 'modifiers';\n+    }\n \n-  showOr(index, selection) {\n-    return index > 0 && selection.domainId !== DomainType.PERSON.toString();\n-  }\n+    get showBack() {\n+      return this.showModifiers && this.props.view === 'modifiers';\n+    }\n \n-  renderCriteria() {\n-    const {criteria} = this.props;\n-    const g = fp.groupBy('isStandard', criteria);\n-    return <div style={{paddingLeft: '0.5rem', paddingBottom: '4rem'}}>\n-      {g['true'] && g['true'].length > 0 && this.renderCriteriaGroup(g['true'] , 'Standard Groups')}\n-      {g['false'] && g['false'].length > 0 && this.renderCriteriaGroup(g['false'], 'Source code Groups')}\n-    </div>;\n-  }\n+    showOr(index, selection) {\n+      return index > 0 && selection.domainId !== DomainType.PERSON.toString();\n+    }\n \n-  removeCriteria(criteriaToDel) {\n-    const updateList =  fp.remove(\n-      (selection) => selection.parameterId === criteriaToDel.parameterId, this.props.criteria);\n-    currentCohortCriteriaStore.next(updateList);\n-  }\n+    renderCriteria() {\n+      const {criteria} = this.props;\n+      const g = fp.groupBy('isStandard', criteria);\n+      return <div style={{paddingLeft: '0.5rem', paddingBottom: '4rem'}}>\n+        {g['true'] && g['true'].length > 0 && this.renderCriteriaGroup(g['true'] , 'Standard Groups')}\n+        {g['false'] && g['false'].length > 0 && this.renderCriteriaGroup(g['false'], 'Source code Groups')}\n+      </div>;\n+    }\n \n-  renderCriteriaGroup(criteriaGroup, header) {\n-    return  <React.Fragment>\n-      <h3> {header}</h3>\n-      <hr style={{marginRight: '0.5rem'}}/>\n-      {criteriaGroup && criteriaGroup.map((criteria, index) =>\n-        <SelectionInfo key={index}\n-                       index={index}\n-                       selection={criteria}\n-                       removeSelection={() => this.removeCriteria(criteria)}/>\n-\n-      )}\n-    </React.Fragment> ;\n-  }\n+    removeCriteria(criteriaToDel) {\n+      const updateList = fp.remove((selection) => selection.parameterId === criteriaToDel.parameterId, this.props.criteria);\n+      currentCohortCriteriaStore.next(updateList);\n+    }\n+\n+    renderCriteriaGroup(criteriaGroup, header) {\n+      return  <React.Fragment>\n+        <h3> {header}</h3>\n+        <hr style={{marginRight: '0.5rem'}}/>\n+        {criteriaGroup && criteriaGroup.map((criteria, index) =>\n+          <SelectionInfo key={index}\n+                         index={index}\n+                         selection={criteria}\n+                         removeSelection={() => this.removeCriteria(criteria)}/>\n \n-  applyModifier(modifiers) {\n-    if (modifiers) {\n-      const modifierButtonText = '(' + modifiers.length + ')  MODIFIERS APPLIED';\n-      this.setState({showModifiersSlide: false, modifierButtonText: modifierButtonText});\n-    } else {\n-      this.setState({showModifiersSlide: false, modifierButtonText: 'APPLY MODIFIERS'});\n+        )}\n+      </React.Fragment> ;\n     }\n-  }\n \n-  get showModifierButton() {\n-    const {criteria} = this.props;\n-    return criteria && criteria.length > 0 &&\n-      criteria[0].domainId !== DomainType.PHYSICALMEASUREMENT.toString()\n-      && criteria[0].domainId !== DomainType.PERSON.toString();\n-  }\n+    applyModifier(modifiers) {\n+      if (modifiers) {\n+        const modifierButtonText = '(' + modifiers.length + ')  MODIFIERS APPLIED';\n+        this.setState({showModifiersSlide: false, modifierButtonText: modifierButtonText});\n+      } else {\n+        this.setState({showModifiersSlide: false, modifierButtonText: 'APPLY MODIFIERS'});\n+      }\n+    }\n \n-  render() {\n-    const {back, criteria} = this.props;\n-    const {modifierButtonText, showModifiersSlide} = this.state;\n-    return <div>\n-        {!showModifiersSlide ?  <React.Fragment>\n-          <h3 style={{...styles.sectionTitle, marginTop: 0}}>Add selected criteria to cohort</h3>\n-          <div style={{paddingTop: '0.5rem', position: 'relative'}}>\n-            <div style={styles.selectionContainer}>\n-              {this.renderCriteria()}\n-              {this.showModifierButton && <div style={{paddingLeft: '0.6rem'}}>\n-                <Button type='secondaryOnDarkBackground' style={styles.modifierButton}\n-                        onClick={() => this.setState({showModifiersSlide: true})}>\n-                  {modifierButtonText}\n-                </Button>\n-              </div>}\n+    get showModifierButton() {\n+      const {criteria} = this.props;\n+      return criteria && criteria.length > 0 &&\n+        criteria[0].domainId !== DomainType.PHYSICALMEASUREMENT.toString()\n+        && criteria[0].domainId !== DomainType.PERSON.toString();\n+    }\n+\n+    render() {\n+      const {back, criteria} = this.props;\n+      const {attributesSelection, modifierButtonText, showModifiersSlide} = this.state;\n+      return <div>\n+        <FlexRow style={styles.navIcons}>\n+          {(attributesSelection || showModifiersSlide) &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYzNDI2Mw=="}, "originalCommit": {"oid": "16b7206b8f76035e932bf3ff5e71a669b20221c2"}, "originalPosition": 240}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODA3OTMzOnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/tree-node/tree-node.component.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzo0MDo1OFrOHBzfjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOTo1MTowMVrOHB4pMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1NDI4NA==", "bodyText": "Nit: can you please add brackets, because of so many conditions its a little difficult to read", "url": "https://github.com/all-of-us/workbench/pull/3885#discussion_r471654284", "createdAt": "2020-08-17T17:40:58Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/cohort-search/tree-node/tree-node.component.tsx", "diffHunk": "@@ -292,7 +292,9 @@ export class TreeNode extends React.Component<TreeNodeProps, TreeNodeState> {\n       setAttributes} = this.props;\n     const {children, error, expanded, hover, loading, searchMatch} = this.state;\n     const nodeChildren = domainId === DomainType.PHYSICALMEASUREMENT.toString() ? node.children : children;\n-    const selected = selectedIds.includes(this.paramId) || groupSelections.includes(parentId);\n+    const selected = serverConfigStore.getValue().enableCohortBuilderV2\n+      ? currentCohortCriteriaStore.getValue().some(crit => crit.parameterId === this.paramId)\n+      : selectedIds.includes(this.paramId) || groupSelections.includes(parentId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16b7206b8f76035e932bf3ff5e71a669b20221c2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTczODY3Mw==", "bodyText": "Not sure if this is what you meant, but I tried to make it a little more readable. Also added a parentId check we were missing for the V2 UI.", "url": "https://github.com/all-of-us/workbench/pull/3885#discussion_r471738673", "createdAt": "2020-08-17T19:51:01Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/tree-node/tree-node.component.tsx", "diffHunk": "@@ -292,7 +292,9 @@ export class TreeNode extends React.Component<TreeNodeProps, TreeNodeState> {\n       setAttributes} = this.props;\n     const {children, error, expanded, hover, loading, searchMatch} = this.state;\n     const nodeChildren = domainId === DomainType.PHYSICALMEASUREMENT.toString() ? node.children : children;\n-    const selected = selectedIds.includes(this.paramId) || groupSelections.includes(parentId);\n+    const selected = serverConfigStore.getValue().enableCohortBuilderV2\n+      ? currentCohortCriteriaStore.getValue().some(crit => crit.parameterId === this.paramId)\n+      : selectedIds.includes(this.paramId) || groupSelections.includes(parentId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1NDI4NA=="}, "originalCommit": {"oid": "16b7206b8f76035e932bf3ff5e71a669b20221c2"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2273, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}