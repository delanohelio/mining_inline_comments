{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNDE2MjM3", "number": 3266, "title": "[RW-4524][risk=no] Add in-form institution check to user creation page.", "bodyText": "This adds the last missing piece to the institution form, to check the validity of the user's email address before allowing them to progress.\nFrom local testing, demonstrating the error icon and tooltip within the input element:\n\n... and a validation error at the form level, which blocks form progression:\n\nI also found an error in one of our existing unit tests for the form (yikes!) which was causing the test to not actually verify anything. That's fixed, and the unit tests are now exercising this entire form in what I believe is a pretty reasonable manner.\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally", "createdAt": "2020-03-18T12:49:13Z", "url": "https://github.com/all-of-us/workbench/pull/3266", "merged": true, "mergeCommit": {"oid": "92c5486f6f72a3af24381bb465391859156b84c7"}, "closed": true, "closedAt": "2020-03-23T16:35:09Z", "author": {"login": "gjuggler"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcO256UgFqTM3NjgzMTg4Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQgb7KABqjMxNTU4ODQ0MTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2ODMxODg2", "url": "https://github.com/all-of-us/workbench/pull/3266#pullrequestreview-376831886", "createdAt": "2020-03-18T12:51:47Z", "commit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjo1MTo0N1rOF4DgWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjo1NjoxNlrOF4DqjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyMjAxMQ==", "bodyText": "There's a bit of \"clean up the awkward single-quote whitespace\" here. We should probably do this for the whole file at some point, but I couldn't help myself from fixing it for institution APIs while I was here.", "url": "https://github.com/all-of-us/workbench/pull/3266#discussion_r394322011", "createdAt": "2020-03-18T12:51:47Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -2320,23 +2320,17 @@ paths:\n       tags:\n       - institution\n       description: 'Gets the list of all Institutions. Requires INSTITUTION_ADMIN\n-        authority.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyNDI4OA==", "bodyText": "Today I learned: the trailing slash here is important. I'd initially left it out, and what happened was that an API call such as:\n/v1/institutions/VUMC/checkEmail/gjuggler%40gmail.com\nwould land in our controller with parameters like:\nshortName: VUMC\nemail: gjuggler@gmail\nwithout the trailing \".com\".\nAdding the trailing slash to the Swagger helped fix this \u2013\u00a0the client now sends requests with the trailing slash, and the controller parses them correctly.\n(Note to self: if we were truly paranoid here, we'd add some more extensive controller-level tests to exercise the full request parsing flow. I didn't think it was worth it in this case, but I'm happy to hear disagreement.)", "url": "https://github.com/all-of-us/workbench/pull/3266#discussion_r394324288", "createdAt": "2020-03-18T12:55:42Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -2423,11 +2401,33 @@ paths:\n           \"$ref\": \"#/definitions/Institution\"\n       responses:\n         200:\n-          description: 'The updated Institution.\n-\n-'\n+          description: The updated Institution.\n           schema:\n             \"$ref\": \"#/definitions/Institution\"\n+  \"/v1/institutions/{shortName}/checkEmail/{email}/\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyNDYyMA==", "bodyText": "I didn't make any change here, but I think IntelliJ just removed the trailing whitespace automatically (here and below). I'm not sure how to go about removing these changes if I'm using IJ for editing...", "url": "https://github.com/all-of-us/workbench/pull/3266#discussion_r394324620", "createdAt": "2020-03-18T12:56:16Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -3884,7 +3884,7 @@ definitions:\n         type: string\n       approved:\n         type: boolean\n-        default: \n+        default:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "originalPosition": 151}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2ODY0OTE0", "url": "https://github.com/all-of-us/workbench/pull/3266#pullrequestreview-376864914", "createdAt": "2020-03-18T13:32:54Z", "commit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzozMjo1NFrOF4FFIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODo0NzowMFrOF4ScVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0NzgwOA==", "bodyText": "Javadoc-ifying is good.  Let's fill in the return description too.", "url": "https://github.com/all-of-us/workbench/pull/3266#discussion_r394347808", "createdAt": "2020-03-18T13:32:54Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/api/InstitutionController.java", "diffHunk": "@@ -56,8 +57,11 @@\n     return ResponseEntity.ok(response);\n   }\n \n-  // note: this endpoint is publicly accessible because it is needed for account creation\n-\n+  /**\n+   * This API is publicly-accessible since it is called during account creation.\n+   *\n+   * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0OTQ0Nw==", "bodyText": "@Override", "url": "https://github.com/all-of-us/workbench/pull/3266#discussion_r394349447", "createdAt": "2020-03-18T13:35:19Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/api/InstitutionController.java", "diffHunk": "@@ -66,6 +70,24 @@\n     return ResponseEntity.ok(response);\n   }\n \n+  /**\n+   * This API is publicly-accessible since it is called during account creation.\n+   *\n+   * @return\n+   */\n+  public ResponseEntity<CheckEmailResponse> checkEmail(final String shortName, final String email) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1MDA0MQ==", "bodyText": "We repeat this block in a few places now so let's make it a private method", "url": "https://github.com/all-of-us/workbench/pull/3266#discussion_r394350041", "createdAt": "2020-03-18T13:36:13Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/api/InstitutionController.java", "diffHunk": "@@ -66,6 +70,24 @@\n     return ResponseEntity.ok(response);\n   }\n \n+  /**\n+   * This API is publicly-accessible since it is called during account creation.\n+   *\n+   * @return\n+   */\n+  public ResponseEntity<CheckEmailResponse> checkEmail(final String shortName, final String email) {\n+    final Institution institution =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1NTM1MQ==", "bodyText": "might as well fill in these as well", "url": "https://github.com/all-of-us/workbench/pull/3266#discussion_r394355351", "createdAt": "2020-03-18T13:44:03Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionService.java", "diffHunk": "@@ -35,4 +35,13 @@\n    */\n   boolean validateAffiliation(\n       @Nullable DbVerifiedInstitutionalAffiliation dbAffiliation, String contactEmail);\n+\n+  /**\n+   * Checks whether a given email address is a valid member of an Institution.\n+   *\n+   * @param institution", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1NTgwMg==", "bodyText": "maybe: copy the pattern matching comment from the previous method", "url": "https://github.com/all-of-us/workbench/pull/3266#discussion_r394355802", "createdAt": "2020-03-18T13:44:46Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionService.java", "diffHunk": "@@ -35,4 +35,13 @@\n    */\n   boolean validateAffiliation(\n       @Nullable DbVerifiedInstitutionalAffiliation dbAffiliation, String contactEmail);\n+\n+  /**\n+   * Checks whether a given email address is a valid member of an Institution.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1NzcwNw==", "bodyText": "Weird!  Was this a side-effect of the merge?  Thanks for cleanup.", "url": "https://github.com/all-of-us/workbench/pull/3266#discussion_r394357707", "createdAt": "2020-03-18T13:47:31Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -2320,23 +2320,17 @@ paths:\n       tags:\n       - institution\n       description: 'Gets the list of all Institutions. Requires INSTITUTION_ADMIN\n-        authority.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyMjAxMQ=="}, "originalCommit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2NDg3OA==", "bodyText": "yikes, good catch", "url": "https://github.com/all-of-us/workbench/pull/3266#discussion_r394364878", "createdAt": "2020-03-18T13:57:21Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -2423,11 +2401,33 @@ paths:\n           \"$ref\": \"#/definitions/Institution\"\n       responses:\n         200:\n-          description: 'The updated Institution.\n-\n-'\n+          description: The updated Institution.\n           schema:\n             \"$ref\": \"#/definitions/Institution\"\n+  \"/v1/institutions/{shortName}/checkEmail/{email}/\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyNDI4OA=="}, "originalCommit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2Nzk3Mw==", "bodyText": "TOL with paranoia hat on: an attacker could spam this endpoint with emails, hunting for one that works.\nBut what would they do with that information?  They would still need to control that email address which the Inst is explicitly approving.\nMaybe not a real concern then.\nDOS is a real concern but that's true generally and should be mitigated in a general way, not here.", "url": "https://github.com/all-of-us/workbench/pull/3266#discussion_r394367973", "createdAt": "2020-03-18T14:01:41Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -2423,11 +2401,33 @@ paths:\n           \"$ref\": \"#/definitions/Institution\"\n       responses:\n         200:\n-          description: 'The updated Institution.\n-\n-'\n+          description: The updated Institution.\n           schema:\n             \"$ref\": \"#/definitions/Institution\"\n+  \"/v1/institutions/{shortName}/checkEmail/{email}/\":\n+    parameters:\n+    - in: path\n+      name: shortName\n+      type: string\n+      description: 'The short name / key of the institution to check, e.g. \"VUMC\"'\n+      required: true\n+    - in: path\n+      name: email\n+      type: string\n+      description: Institutional contact email address to check.\n+      required: true\n+    get:\n+      tags:\n+        - institution\n+      operationId: checkEmail\n+      description: Checks whether the given email address is a verified member of an institution.\n+      x-aou-note: This endpoint is publicly-accessible and called by clients during user registration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3NzcwMA==", "bodyText": "Could this return a ResponseEntity<Boolean> instead?", "url": "https://github.com/all-of-us/workbench/pull/3266#discussion_r394377700", "createdAt": "2020-03-18T14:15:03Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/api/InstitutionController.java", "diffHunk": "@@ -66,6 +70,24 @@\n     return ResponseEntity.ok(response);\n   }\n \n+  /**\n+   * This API is publicly-accessible since it is called during account creation.\n+   *\n+   * @return\n+   */\n+  public ResponseEntity<CheckEmailResponse> checkEmail(final String shortName, final String email) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU2NTQ0NA==", "bodyText": "Is this event guaranteed to happen before the submit button is clicked?  Consider whether a user might choose to enter their Role before their Email", "url": "https://github.com/all-of-us/workbench/pull/3266#discussion_r394565444", "createdAt": "2020-03-18T18:44:47Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/login/account-creation/account-creation-institution.tsx", "diffHunk": "@@ -235,12 +314,21 @@ export class AccountCreationInstitution extends React.Component<Props, State> {\n                                     This will be the primary email contact for your new account.\n                                   </div>\n                                 </div>}\n-                                invalid={this.state.emailFailedValidation}\n-                                onBlur={() => this.validateContactEmailInline()}\n-                                onChange={email => this.updateContactEmail(email)}/>\n-            {this.state.emailFailedValidation &&\n-              <ErrorDiv data-test-id='invalid-email-error'>\n-                Error: email address is invalid\n+                                invalid={!this.isEmailValid()}\n+                                onBlur={() => this.onEmailBlur()}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU2Njc0MA==", "bodyText": "why change this?", "url": "https://github.com/all-of-us/workbench/pull/3266#discussion_r394566740", "createdAt": "2020-03-18T18:47:00Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/login/account-creation/account-creation-institution.tsx", "diffHunk": "@@ -118,23 +190,30 @@ export class AccountCreationInstitution extends React.Component<Props, State> {\n           message: '^Email address is invalid'\n         }\n       },\n-      'verifiedInstitutionalAffiliation.institutionalRoleEnum': {\n+      'profile.verifiedInstitutionalAffiliation.institutionalRoleEnum': {\n         presence: {\n           allowEmpty: false,\n           message: '^Institutional role cannot be blank',\n         }\n       },\n     };\n+    if (!isBlank(this.state.profile.verifiedInstitutionalAffiliation.institutionShortName) &&\n+        !isBlank(this.state.profile.contactEmail)) {\n+      validationCheck['checkEmailResponse'] = {\n+        checkEmailResponse: {}\n+      };\n+    }\n+\n     if (this.state.profile.verifiedInstitutionalAffiliation.institutionalRoleEnum === InstitutionalRole.OTHER) {\n-      validationCheck['verifiedInstitutionalAffiliation.institutionalRoleOtherText'] = {\n+      validationCheck['profile.verifiedInstitutionalAffiliation.institutionalRoleOtherText'] = {\n         presence: {\n           allowEmpty: false,\n           message: '^Institutional role text cannot be blank',\n         }\n       };\n     }\n \n-    return validate(this.state.profile, validationCheck);\n+    return validate(this.state, validationCheck);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "originalPosition": 216}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTIwOTg5", "url": "https://github.com/all-of-us/workbench/pull/3266#pullrequestreview-378920989", "createdAt": "2020-03-21T14:05:23Z", "commit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNDowNToyM1rOF5ppDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNDoyNjozOFrOF5pvdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5NTQwNA==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3266#discussion_r395995404", "createdAt": "2020-03-21T14:05:23Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/api/InstitutionController.java", "diffHunk": "@@ -56,8 +57,11 @@\n     return ResponseEntity.ok(response);\n   }\n \n-  // note: this endpoint is publicly accessible because it is needed for account creation\n-\n+  /**\n+   * This API is publicly-accessible since it is called during account creation.\n+   *\n+   * @return", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0NzgwOA=="}, "originalCommit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5NTQzNw==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3266#discussion_r395995437", "createdAt": "2020-03-21T14:05:39Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/api/InstitutionController.java", "diffHunk": "@@ -66,6 +70,24 @@\n     return ResponseEntity.ok(response);\n   }\n \n+  /**\n+   * This API is publicly-accessible since it is called during account creation.\n+   *\n+   * @return\n+   */\n+  public ResponseEntity<CheckEmailResponse> checkEmail(final String shortName, final String email) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0OTQ0Nw=="}, "originalCommit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5NTU0Nw==", "bodyText": "I generally tend to avoid primitive return types for API responses where possible. It dramatically reduces the additional effort for someone to add another response field in the future, which I've found to be a maintenance win.", "url": "https://github.com/all-of-us/workbench/pull/3266#discussion_r395995547", "createdAt": "2020-03-21T14:07:34Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/api/InstitutionController.java", "diffHunk": "@@ -66,6 +70,24 @@\n     return ResponseEntity.ok(response);\n   }\n \n+  /**\n+   * This API is publicly-accessible since it is called during account creation.\n+   *\n+   * @return\n+   */\n+  public ResponseEntity<CheckEmailResponse> checkEmail(final String shortName, final String email) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3NzcwMA=="}, "originalCommit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5NTY4Mw==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3266#discussion_r395995683", "createdAt": "2020-03-21T14:09:22Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/api/InstitutionController.java", "diffHunk": "@@ -66,6 +70,24 @@\n     return ResponseEntity.ok(response);\n   }\n \n+  /**\n+   * This API is publicly-accessible since it is called during account creation.\n+   *\n+   * @return\n+   */\n+  public ResponseEntity<CheckEmailResponse> checkEmail(final String shortName, final String email) {\n+    final Institution institution =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1MDA0MQ=="}, "originalCommit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5NTg1MQ==", "bodyText": "Done, did some comment cleanup here.", "url": "https://github.com/all-of-us/workbench/pull/3266#discussion_r395995851", "createdAt": "2020-03-21T14:12:02Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionService.java", "diffHunk": "@@ -35,4 +35,13 @@\n    */\n   boolean validateAffiliation(\n       @Nullable DbVerifiedInstitutionalAffiliation dbAffiliation, String contactEmail);\n+\n+  /**\n+   * Checks whether a given email address is a valid member of an Institution.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1NTgwMg=="}, "originalCommit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5NTk1Mw==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3266#discussion_r395995953", "createdAt": "2020-03-21T14:13:12Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionService.java", "diffHunk": "@@ -35,4 +35,13 @@\n    */\n   boolean validateAffiliation(\n       @Nullable DbVerifiedInstitutionalAffiliation dbAffiliation, String contactEmail);\n+\n+  /**\n+   * Checks whether a given email address is a valid member of an Institution.\n+   *\n+   * @param institution", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1NTM1MQ=="}, "originalCommit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5NjQwNg==", "bodyText": "Agreed \u2013\u00a0the DOS risk is nonzero, but we have other non-auth endpoints that access the DB as well. We should probably take some time to better document our ddos-protection story: what protections are afforded at the WAF, App Engine, Google Cloud, and application levels. Filed RW-4630 to track.", "url": "https://github.com/all-of-us/workbench/pull/3266#discussion_r395996406", "createdAt": "2020-03-21T14:18:17Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -2423,11 +2401,33 @@ paths:\n           \"$ref\": \"#/definitions/Institution\"\n       responses:\n         200:\n-          description: 'The updated Institution.\n-\n-'\n+          description: The updated Institution.\n           schema:\n             \"$ref\": \"#/definitions/Institution\"\n+  \"/v1/institutions/{shortName}/checkEmail/{email}/\":\n+    parameters:\n+    - in: path\n+      name: shortName\n+      type: string\n+      description: 'The short name / key of the institution to check, e.g. \"VUMC\"'\n+      required: true\n+    - in: path\n+      name: email\n+      type: string\n+      description: Institutional contact email address to check.\n+      required: true\n+    get:\n+      tags:\n+        - institution\n+      operationId: checkEmail\n+      description: Checks whether the given email address is a verified member of an institution.\n+      x-aou-note: This endpoint is publicly-accessible and called by clients during user registration.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2Nzk3Mw=="}, "originalCommit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5NjkyNA==", "bodyText": "This was a kind of subtle but interesting change \u2013 by providing the entire state object to validate.js, it allows us to run checks against any property of the component's state (which is the most flexible for future additions). In this case, I wanted to add some validation on the checkEmailResponse property, to ensure our form submission is appropriately blocked if the email-validation check hasn't completed.", "url": "https://github.com/all-of-us/workbench/pull/3266#discussion_r395996924", "createdAt": "2020-03-21T14:25:14Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/account-creation/account-creation-institution.tsx", "diffHunk": "@@ -118,23 +190,30 @@ export class AccountCreationInstitution extends React.Component<Props, State> {\n           message: '^Email address is invalid'\n         }\n       },\n-      'verifiedInstitutionalAffiliation.institutionalRoleEnum': {\n+      'profile.verifiedInstitutionalAffiliation.institutionalRoleEnum': {\n         presence: {\n           allowEmpty: false,\n           message: '^Institutional role cannot be blank',\n         }\n       },\n     };\n+    if (!isBlank(this.state.profile.verifiedInstitutionalAffiliation.institutionShortName) &&\n+        !isBlank(this.state.profile.contactEmail)) {\n+      validationCheck['checkEmailResponse'] = {\n+        checkEmailResponse: {}\n+      };\n+    }\n+\n     if (this.state.profile.verifiedInstitutionalAffiliation.institutionalRoleEnum === InstitutionalRole.OTHER) {\n-      validationCheck['verifiedInstitutionalAffiliation.institutionalRoleOtherText'] = {\n+      validationCheck['profile.verifiedInstitutionalAffiliation.institutionalRoleOtherText'] = {\n         presence: {\n           allowEmpty: false,\n           message: '^Institutional role text cannot be blank',\n         }\n       };\n     }\n \n-    return validate(this.state.profile, validationCheck);\n+    return validate(this.state, validationCheck);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU2Njc0MA=="}, "originalCommit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5NzA0Nw==", "bodyText": "That situation is caught correctly by the form-level validation: if an institution is selected, the form won't allow progress unless there is a non-null checkEmailResponse object in the component state.", "url": "https://github.com/all-of-us/workbench/pull/3266#discussion_r395997047", "createdAt": "2020-03-21T14:26:38Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/account-creation/account-creation-institution.tsx", "diffHunk": "@@ -235,12 +314,21 @@ export class AccountCreationInstitution extends React.Component<Props, State> {\n                                     This will be the primary email contact for your new account.\n                                   </div>\n                                 </div>}\n-                                invalid={this.state.emailFailedValidation}\n-                                onBlur={() => this.validateContactEmailInline()}\n-                                onChange={email => this.updateContactEmail(email)}/>\n-            {this.state.emailFailedValidation &&\n-              <ErrorDiv data-test-id='invalid-email-error'>\n-                Error: email address is invalid\n+                                invalid={!this.isEmailValid()}\n+                                onBlur={() => this.onEmailBlur()}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU2NTQ0NA=="}, "originalCommit": {"oid": "0a567f713962c2831e5c02dae97425fc7347accf"}, "originalPosition": 240}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NTY2NjYx", "url": "https://github.com/all-of-us/workbench/pull/3266#pullrequestreview-379566661", "createdAt": "2020-03-23T15:53:46Z", "commit": {"oid": "c1e5fe9ff1f9921e267d0e24f67503c01810c16b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f60f804a3cd152fef081e59d8b0cc3c165eec645", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/f60f804a3cd152fef081e59d8b0cc3c165eec645", "committedDate": "2020-03-23T15:55:39Z", "message": "WIP checkEmail API and UI."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50e111d099e7a491a7eda62004a8a93351e591cb", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/50e111d099e7a491a7eda62004a8a93351e591cb", "committedDate": "2020-03-23T15:55:39Z", "message": "Move API to better location, add UI and unit tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2a28c962640424da5fa59eb613a8396ee372d2f", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/f2a28c962640424da5fa59eb613a8396ee372d2f", "committedDate": "2020-03-23T15:55:39Z", "message": "Revert temp change to starting sign-in step."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d96d1d06b4ef68d962bdef9c293aec32908ef1b", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/3d96d1d06b4ef68d962bdef9c293aec32908ef1b", "committedDate": "2020-03-23T15:55:40Z", "message": "PR feedback and added test case."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bafe6f251da61243d23b5182c452ccacabca193c", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/bafe6f251da61243d23b5182c452ccacabca193c", "committedDate": "2020-03-23T15:55:40Z", "message": "Add fix & test case for email-before-institution scenario"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea5639e67abae3862a3ca321307d879157558ece", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/ea5639e67abae3862a3ca321307d879157558ece", "committedDate": "2020-03-23T15:55:40Z", "message": "Fix bug in dropdown change handler."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1e5fe9ff1f9921e267d0e24f67503c01810c16b", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/c1e5fe9ff1f9921e267d0e24f67503c01810c16b", "committedDate": "2020-03-23T15:40:48Z", "message": "Fix bug in dropdown change handler."}, "afterCommit": {"oid": "ea5639e67abae3862a3ca321307d879157558ece", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/ea5639e67abae3862a3ca321307d879157558ece", "committedDate": "2020-03-23T15:55:40Z", "message": "Fix bug in dropdown change handler."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3489, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}