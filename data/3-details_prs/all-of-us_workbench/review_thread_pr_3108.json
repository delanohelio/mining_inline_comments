{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyODgxOTM5", "number": 3108, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMjo0MDoxMVrODeyaWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzo1ODowOFrODfRuHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjA5ODE5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMjo0MDoxMVrOFoHcNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDowNjoyNVrOFovy7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYwOTI3MQ==", "bodyText": "todo: return just the workspaceResponse here and build OK at outer level. same below.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377609271", "createdAt": "2020-02-11T12:40:11Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -359,27 +386,45 @@ private void setDbWorkspaceFields(\n     dbWorkspace = workspaceService.saveWithLastModified(dbWorkspace);\n     workspaceService.maybeDeleteRecentWorkspace(dbWorkspace.getWorkspaceId());\n     workspaceAuditor.fireDeleteAction(dbWorkspace);\n-    return ResponseEntity.ok(new EmptyResponse());\n   }\n \n   @Override\n   public ResponseEntity<WorkspaceResponse> getWorkspace(\n       String workspaceNamespace, String workspaceId) {\n-    return ResponseEntity.ok(workspaceService.getWorkspace(workspaceNamespace, workspaceId));\n+    final WorkspaceResponse workspaceResponse =\n+        logsBasedMetricService.recordElapsedTime(\n+            MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"getWorkspace\"),\n+            DistributionMetric.WORKSPACE_OPERATION_TIME,\n+            () -> workspaceService.getWorkspace(workspaceNamespace, workspaceId));\n+    return ResponseEntity.ok(workspaceResponse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NzA0NA==", "bodyText": "Maybe as part of a future refactoring of these to a Service?  not sure it makes sense in this PR - let's keep this one focused.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377947044", "createdAt": "2020-02-11T22:50:12Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -359,27 +386,45 @@ private void setDbWorkspaceFields(\n     dbWorkspace = workspaceService.saveWithLastModified(dbWorkspace);\n     workspaceService.maybeDeleteRecentWorkspace(dbWorkspace.getWorkspaceId());\n     workspaceAuditor.fireDeleteAction(dbWorkspace);\n-    return ResponseEntity.ok(new EmptyResponse());\n   }\n \n   @Override\n   public ResponseEntity<WorkspaceResponse> getWorkspace(\n       String workspaceNamespace, String workspaceId) {\n-    return ResponseEntity.ok(workspaceService.getWorkspace(workspaceNamespace, workspaceId));\n+    final WorkspaceResponse workspaceResponse =\n+        logsBasedMetricService.recordElapsedTime(\n+            MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"getWorkspace\"),\n+            DistributionMetric.WORKSPACE_OPERATION_TIME,\n+            () -> workspaceService.getWorkspace(workspaceNamespace, workspaceId));\n+    return ResponseEntity.ok(workspaceResponse);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYwOTI3MQ=="}, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI3MDQ0NQ==", "bodyText": "for consistency with the other lambdas, the  impl functions I pulled out are exactly what would go into the service (returning an API object instead of a ResponseEntity, which is controller business). You can use these methods without doing (with a big lambda), but it made the diff huge.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378270445", "createdAt": "2020-02-12T14:06:25Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -359,27 +386,45 @@ private void setDbWorkspaceFields(\n     dbWorkspace = workspaceService.saveWithLastModified(dbWorkspace);\n     workspaceService.maybeDeleteRecentWorkspace(dbWorkspace.getWorkspaceId());\n     workspaceAuditor.fireDeleteAction(dbWorkspace);\n-    return ResponseEntity.ok(new EmptyResponse());\n   }\n \n   @Override\n   public ResponseEntity<WorkspaceResponse> getWorkspace(\n       String workspaceNamespace, String workspaceId) {\n-    return ResponseEntity.ok(workspaceService.getWorkspace(workspaceNamespace, workspaceId));\n+    final WorkspaceResponse workspaceResponse =\n+        logsBasedMetricService.recordElapsedTime(\n+            MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"getWorkspace\"),\n+            DistributionMetric.WORKSPACE_OPERATION_TIME,\n+            () -> workspaceService.getWorkspace(workspaceNamespace, workspaceId));\n+    return ResponseEntity.ok(workspaceResponse);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYwOTI3MQ=="}, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODE0NzMwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/monitoring/LogsBasedMetricService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjoyMzowOFrOFobWxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNToxNzo1MFrOFoyonA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzNTU1OQ==", "bodyText": "Is there a need for both?", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377935559", "createdAt": "2020-02-11T22:23:08Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/LogsBasedMetricService.java", "diffHunk": "@@ -28,4 +31,30 @@\n   default void recordEvent(EventMetric eventMetric) {\n     record(MeasurementBundle.builder().addEvent(eventMetric).build());\n   }\n+  /**\n+   * Use a Stopwatch to time the supplied operation, then add a measurement to the supplied\n+   * measurementBundleBuilder and record the associated DistributionMetric.\n+   *\n+   * @param measurementBundleBuilder - Builder for a MeasurementBundle to be recorded. Typically\n+   *     only has tags.\n+   * @param distributionMetric - Metric to be recorded. Always a distribution, as gauge and count\n+   *     don't make sense for timings\n+   * @param operation - Code to be run, e.g. () -> myService.computeThings()\n+   */\n+  void recordElapsedTime(\n+      Builder measurementBundleBuilder, DistributionMetric distributionMetric, Runnable operation);\n+\n+  /**\n+   * Same as above, but returns the result of the operation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI2NzIxNA==", "bodyText": "Yes, AFAICT, the compiler won't allow a Supplier to have its value returned.\nYou could argue it shouldn't be an overload, to make it more obvious which one is used.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378267214", "createdAt": "2020-02-12T14:00:47Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/LogsBasedMetricService.java", "diffHunk": "@@ -28,4 +31,30 @@\n   default void recordEvent(EventMetric eventMetric) {\n     record(MeasurementBundle.builder().addEvent(eventMetric).build());\n   }\n+  /**\n+   * Use a Stopwatch to time the supplied operation, then add a measurement to the supplied\n+   * measurementBundleBuilder and record the associated DistributionMetric.\n+   *\n+   * @param measurementBundleBuilder - Builder for a MeasurementBundle to be recorded. Typically\n+   *     only has tags.\n+   * @param distributionMetric - Metric to be recorded. Always a distribution, as gauge and count\n+   *     don't make sense for timings\n+   * @param operation - Code to be run, e.g. () -> myService.computeThings()\n+   */\n+  void recordElapsedTime(\n+      Builder measurementBundleBuilder, DistributionMetric distributionMetric, Runnable operation);\n+\n+  /**\n+   * Same as above, but returns the result of the operation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzNTU1OQ=="}, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMxNjk1Ng==", "bodyText": "Confirmed by commenting out the Runnable version. You can't have a void-valued argument passed in as a runnable.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378316956", "createdAt": "2020-02-12T15:17:50Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/LogsBasedMetricService.java", "diffHunk": "@@ -28,4 +31,30 @@\n   default void recordEvent(EventMetric eventMetric) {\n     record(MeasurementBundle.builder().addEvent(eventMetric).build());\n   }\n+  /**\n+   * Use a Stopwatch to time the supplied operation, then add a measurement to the supplied\n+   * measurementBundleBuilder and record the associated DistributionMetric.\n+   *\n+   * @param measurementBundleBuilder - Builder for a MeasurementBundle to be recorded. Typically\n+   *     only has tags.\n+   * @param distributionMetric - Metric to be recorded. Always a distribution, as gauge and count\n+   *     don't make sense for timings\n+   * @param operation - Code to be run, e.g. () -> myService.computeThings()\n+   */\n+  void recordElapsedTime(\n+      Builder measurementBundleBuilder, DistributionMetric distributionMetric, Runnable operation);\n+\n+  /**\n+   * Same as above, but returns the result of the operation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzNTU1OQ=="}, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODE3MDQ0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/DistributionAggregation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjozMToyOVrOFobkxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNToyNToxM1rOFoy7vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzOTE0Mw==", "bodyText": "Please add comments describing what this enum is and what its values mean", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377939143", "createdAt": "2020-02-11T22:31:29Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/DistributionAggregation.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.pmiops.workbench.monitoring.views;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.opencensus.stats.Aggregation;\n+import io.opencensus.stats.Aggregation.Distribution;\n+import io.opencensus.stats.BucketBoundaries;\n+\n+public enum DistributionAggregation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyMTg1Mw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378321853", "createdAt": "2020-02-12T15:25:13Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/DistributionAggregation.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.pmiops.workbench.monitoring.views;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.opencensus.stats.Aggregation;\n+import io.opencensus.stats.Aggregation.Distribution;\n+import io.opencensus.stats.BucketBoundaries;\n+\n+public enum DistributionAggregation {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzOTE0Mw=="}, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODE3NTc5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/DistributionMetric.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjozMzoyOVrOFobn9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjozMzoyOVrOFobn9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzOTk1Ng==", "bodyText": "Same comment as DistributionAggregation", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377939956", "createdAt": "2020-02-11T22:33:29Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/DistributionMetric.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package org.pmiops.workbench.monitoring.views;\n+\n+import io.opencensus.stats.Aggregation;\n+import io.opencensus.stats.Measure.MeasureDouble;\n+import io.opencensus.stats.Measure.MeasureLong;\n+import java.util.Collections;\n+import java.util.List;\n+import org.pmiops.workbench.monitoring.labels.MetricLabel;\n+\n+public enum DistributionMetric implements Metric {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODE3ODAzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/DistributionMetric.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjozNDoxNVrOFobpQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDowMTozOVrOFovoQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MDI5MQ==", "bodyText": "why 2?", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377940291", "createdAt": "2020-02-11T22:34:15Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/DistributionMetric.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package org.pmiops.workbench.monitoring.views;\n+\n+import io.opencensus.stats.Aggregation;\n+import io.opencensus.stats.Measure.MeasureDouble;\n+import io.opencensus.stats.Measure.MeasureLong;\n+import java.util.Collections;\n+import java.util.List;\n+import org.pmiops.workbench.monitoring.labels.MetricLabel;\n+\n+public enum DistributionMetric implements Metric {\n+  COHORT_OPERATION_TIME(\n+      \"cohort_operation_time\",\n+      \"Time to complete Cohort-related operation.\",\n+      Collections.singletonList(MetricLabel.OPERATION_NAME),\n+      DistributionAggregation.OPERATION_TIME,\n+      MeasureLong.class),\n+  UNIFORM_RANDOM_SAMPLE(\n+      \"random_sample_2\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI2NzcxNA==", "bodyText": "We have to \"burn\" old metric names when making structural changes, so my convention is to add a number suffix. Definitely something to. put in the docs.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378267714", "createdAt": "2020-02-12T14:01:39Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/DistributionMetric.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package org.pmiops.workbench.monitoring.views;\n+\n+import io.opencensus.stats.Aggregation;\n+import io.opencensus.stats.Measure.MeasureDouble;\n+import io.opencensus.stats.Measure.MeasureLong;\n+import java.util.Collections;\n+import java.util.List;\n+import org.pmiops.workbench.monitoring.labels.MetricLabel;\n+\n+public enum DistributionMetric implements Metric {\n+  COHORT_OPERATION_TIME(\n+      \"cohort_operation_time\",\n+      \"Time to complete Cohort-related operation.\",\n+      Collections.singletonList(MetricLabel.OPERATION_NAME),\n+      DistributionAggregation.OPERATION_TIME,\n+      MeasureLong.class),\n+  UNIFORM_RANDOM_SAMPLE(\n+      \"random_sample_2\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MDI5MQ=="}, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODE5NzkwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo0MToyN1rOFob1Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDowMzo0OVrOFovs_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MzM5NQ==", "bodyText": "Do we want callers to have to think about MeasurementBundle.Builder?  I'd prefer an interface like one of these:\nlogsBasedMetricService.recordElapsedTime(\n            \"createWorkspace\",\n            DistributionMetric.WORKSPACE_OPERATION_TIME,\n            () -> createWorkspaceImpl(workspace));\n\nor\nlogsBasedMetricService.recordElapsedTime(\n            MeasurementBundle.operationTag(\"createWorkspace\"),\n            DistributionMetric.WORKSPACE_OPERATION_TIME,\n            () -> createWorkspaceImpl(workspace));", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377943395", "createdAt": "2020-02-11T22:41:27Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -246,6 +253,17 @@ private void maybeFileZendeskReviewRequest(Workspace workspace) {\n \n   @Override\n   public ResponseEntity<Workspace> createWorkspace(Workspace workspace) throws BadRequestException {\n+    final Workspace result =\n+        logsBasedMetricService.recordElapsedTime(\n+            MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"createWorkspace\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI2ODkyNw==", "bodyText": "This was done for consistency with all the other metric recording calls. Operation tags aren't a concept the MeasurementBundle knows about. It just knows about labels.\nGoal is to move almost all such calls into. generated code.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378268927", "createdAt": "2020-02-12T14:03:49Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -246,6 +253,17 @@ private void maybeFileZendeskReviewRequest(Workspace workspace) {\n \n   @Override\n   public ResponseEntity<Workspace> createWorkspace(Workspace workspace) throws BadRequestException {\n+    final Workspace result =\n+        logsBasedMetricService.recordElapsedTime(\n+            MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"createWorkspace\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MzM5NQ=="}, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODE5ODg2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo0MTo0OVrOFob16w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOToyODoxOVrOFo7qsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MzUzMQ==", "bodyText": "Preach!", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377943531", "createdAt": "2020-02-11T22:41:49Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -246,6 +253,17 @@ private void maybeFileZendeskReviewRequest(Workspace workspace) {\n \n   @Override\n   public ResponseEntity<Workspace> createWorkspace(Workspace workspace) throws BadRequestException {\n+    final Workspace result =\n+        logsBasedMetricService.recordElapsedTime(\n+            MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"createWorkspace\"),\n+            DistributionMetric.WORKSPACE_OPERATION_TIME,\n+            () -> createWorkspaceImpl(workspace));\n+    return ResponseEntity.ok(result);\n+  }\n+\n+  // TODO(jaycarlton): migrate this and other \"impl\" methods to WorkspaceService &", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxODU5OA==", "bodyText": "Still not really sold on this. This is only useful if this controller plays a role that's different from WorkspaceService, and isn't just passing through every method call. If that's what's happening (e.g. if this change here exemplifies the expected division of labor), then WorkspacesController may as well become WorkspaceService. Unless there are Spring reasons to want to use WorkspaceService over WorkspaceController in other places.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378418598", "createdAt": "2020-02-12T18:00:07Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -246,6 +253,17 @@ private void maybeFileZendeskReviewRequest(Workspace workspace) {\n \n   @Override\n   public ResponseEntity<Workspace> createWorkspace(Workspace workspace) throws BadRequestException {\n+    final Workspace result =\n+        logsBasedMetricService.recordElapsedTime(\n+            MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"createWorkspace\"),\n+            DistributionMetric.WORKSPACE_OPERATION_TIME,\n+            () -> createWorkspaceImpl(workspace));\n+    return ResponseEntity.ok(result);\n+  }\n+\n+  // TODO(jaycarlton): migrate this and other \"impl\" methods to WorkspaceService &", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MzUzMQ=="}, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2NDk0NA==", "bodyText": "What's the difference between a Controller and a service then? I like controllers to be dumb, and to be the place the request \"takes its shoes off\" and we call a regular old method that works with POJOs, then puts them on again by donning a response entity.\nLet's take this into another channel.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378464944", "createdAt": "2020-02-12T19:28:19Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -246,6 +253,17 @@ private void maybeFileZendeskReviewRequest(Workspace workspace) {\n \n   @Override\n   public ResponseEntity<Workspace> createWorkspace(Workspace workspace) throws BadRequestException {\n+    final Workspace result =\n+        logsBasedMetricService.recordElapsedTime(\n+            MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"createWorkspace\"),\n+            DistributionMetric.WORKSPACE_OPERATION_TIME,\n+            () -> createWorkspaceImpl(workspace));\n+    return ResponseEntity.ok(result);\n+  }\n+\n+  // TODO(jaycarlton): migrate this and other \"impl\" methods to WorkspaceService &", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MzUzMQ=="}, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODIwMTc0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo0MzowMFrOFob3xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNTozNzozNlrOFozdOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NDAwNg==", "bodyText": "if you're going to reflow this text, keep going :)", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377944006", "createdAt": "2020-02-11T22:43:00Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -266,7 +284,8 @@ private void maybeFileZendeskReviewRequest(Workspace workspace) {\n     Timestamp now = new Timestamp(clock.instant().toEpochMilli());\n     DbWorkspace dbWorkspace = new DbWorkspace();\n     // A little unintuitive but setting this here reflects the current state of the workspace\n-    // while it was in the billing buffer. Setting this value will inform the update billing code to\n+    // while it was in the billing buffer. Setting this value will inform the update billing\n+    // code to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMzMDQyNA==", "bodyText": "Oh \ud83d\udca1, it moved when I had this whole block inside the lamda.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378330424", "createdAt": "2020-02-12T15:37:36Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -266,7 +284,8 @@ private void maybeFileZendeskReviewRequest(Workspace workspace) {\n     Timestamp now = new Timestamp(clock.instant().toEpochMilli());\n     DbWorkspace dbWorkspace = new DbWorkspace();\n     // A little unintuitive but setting this here reflects the current state of the workspace\n-    // while it was in the billing buffer. Setting this value will inform the update billing code to\n+    // while it was in the billing buffer. Setting this value will inform the update billing\n+    // code to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NDAwNg=="}, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODIwMjU1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo0MzoyMFrOFob4Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo0MzoyMFrOFob4Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NDE1NA==", "bodyText": "same", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377944154", "createdAt": "2020-02-11T22:43:20Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -295,11 +314,11 @@ private void maybeFileZendeskReviewRequest(Workspace workspace) {\n     } catch (Exception e) {\n       throw new ServerErrorException(\"Could not update the workspace's billing account\", e);\n     }\n-\n     try {\n       dbWorkspace = workspaceService.getDao().save(dbWorkspace);\n     } catch (Exception e) {\n-      // Tell Google to set the billing account back to the free tier if the workspace creation\n+      // Tell Google to set the billing account back to the free tier if the workspace\n+      // creation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODIwNzkzOnYy", "diffSide": "LEFT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo0NToyNFrOFob7kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMjo0MDoxNVrOFpqG7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NDk3Ng==", "bodyText": "restore", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377944976", "createdAt": "2020-02-11T22:45:24Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -408,8 +453,6 @@ private void setDbWorkspaceFields(\n     }\n     ResearchPurpose researchPurpose = request.getWorkspace().getResearchPurpose();\n     if (researchPurpose != null) {\n-      // Note: this utility does not set the \"review requested\" bit or time. This is currently", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2Nzk2MA==", "bodyText": "Please restore this comment or explain why it was removed", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r379167960", "createdAt": "2020-02-13T23:02:46Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -408,8 +453,6 @@ private void setDbWorkspaceFields(\n     }\n     ResearchPurpose researchPurpose = request.getWorkspace().getResearchPurpose();\n     if (researchPurpose != null) {\n-      // Note: this utility does not set the \"review requested\" bit or time. This is currently", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NDk3Ng=="}, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyNTgzOQ==", "bodyText": "Good catch. I had \"hide unimportant differences\" checked in my diff/merge tool (Beyond Compare), so it didn't flag the comment change.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r379225839", "createdAt": "2020-02-14T02:40:15Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -408,8 +453,6 @@ private void setDbWorkspaceFields(\n     }\n     ResearchPurpose researchPurpose = request.getWorkspace().getResearchPurpose();\n     if (researchPurpose != null) {\n-      // Note: this utility does not set the \"review requested\" bit or time. This is currently", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NDk3Ng=="}, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODIwODYxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo0NTozN1rOFob78Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo0NTozN1rOFob78Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NTA3Mw==", "bodyText": "flow issue again", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377945073", "createdAt": "2020-02-11T22:45:37Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -421,13 +464,13 @@ private void setDbWorkspaceFields(\n         throw new ServerErrorException(\"Could not update the workspace's billing account\", e);\n       }\n     }\n-\n     try {\n       // The version asserted on save is the same as the one we read via\n       // getRequired() above, see RW-215 for details.\n       dbWorkspace = workspaceService.saveWithLastModified(dbWorkspace);\n     } catch (Exception e) {\n-      // Tell Google Cloud to set the billing account back to the original one since our update\n+      // Tell Google Cloud to set the billing account back to the original one since our\n+      // update", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODIxNTkzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo0ODoxOFrOFocAXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMToxMzoyMlrOFo-v_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NjIwNQ==", "bodyText": "since the metric is the same for all of these, can you add a little helper method that takes care of it? Something like recordElapsedWorkspaceOperation(\"cloneWorkspace\", () -> cloneWorkspaceImpl(...))", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377946205", "createdAt": "2020-02-11T22:48:18Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -438,13 +481,21 @@ private void setDbWorkspaceFields(\n \n     workspaceAuditor.fireEditAction(\n         originalWorkspace, editedWorkspace, dbWorkspace.getWorkspaceId());\n-    return ResponseEntity.ok(manualWorkspaceMapper.toApiWorkspace(dbWorkspace, fcWorkspace));\n+    return manualWorkspaceMapper.toApiWorkspace(dbWorkspace, fcWorkspace);\n   }\n \n   @Override\n   public ResponseEntity<CloneWorkspaceResponse> cloneWorkspace(\n       String fromWorkspaceNamespace, String fromWorkspaceId, CloneWorkspaceRequest body)\n       throws BadRequestException, TooManyRequestsException {\n+    return logsBasedMetricService.recordElapsedTime(\n+        MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"cloneWorkspace\"),\n+        DistributionMetric.WORKSPACE_OPERATION_TIME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI2OTI2NQ==", "bodyText": "Great idea! Might need two of them though \ud83e\udd14", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378269265", "createdAt": "2020-02-12T14:04:26Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -438,13 +481,21 @@ private void setDbWorkspaceFields(\n \n     workspaceAuditor.fireEditAction(\n         originalWorkspace, editedWorkspace, dbWorkspace.getWorkspaceId());\n-    return ResponseEntity.ok(manualWorkspaceMapper.toApiWorkspace(dbWorkspace, fcWorkspace));\n+    return manualWorkspaceMapper.toApiWorkspace(dbWorkspace, fcWorkspace);\n   }\n \n   @Override\n   public ResponseEntity<CloneWorkspaceResponse> cloneWorkspace(\n       String fromWorkspaceNamespace, String fromWorkspaceId, CloneWorkspaceRequest body)\n       throws BadRequestException, TooManyRequestsException {\n+    return logsBasedMetricService.recordElapsedTime(\n+        MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"cloneWorkspace\"),\n+        DistributionMetric.WORKSPACE_OPERATION_TIME,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NjIwNQ=="}, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM0MTM5NA==", "bodyText": "An even bigger win here is that when I switch over the services, I only have to change 5 lines (including imports).", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378341394", "createdAt": "2020-02-12T15:53:42Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -438,13 +481,21 @@ private void setDbWorkspaceFields(\n \n     workspaceAuditor.fireEditAction(\n         originalWorkspace, editedWorkspace, dbWorkspace.getWorkspaceId());\n-    return ResponseEntity.ok(manualWorkspaceMapper.toApiWorkspace(dbWorkspace, fcWorkspace));\n+    return manualWorkspaceMapper.toApiWorkspace(dbWorkspace, fcWorkspace);\n   }\n \n   @Override\n   public ResponseEntity<CloneWorkspaceResponse> cloneWorkspace(\n       String fromWorkspaceNamespace, String fromWorkspaceId, CloneWorkspaceRequest body)\n       throws BadRequestException, TooManyRequestsException {\n+    return logsBasedMetricService.recordElapsedTime(\n+        MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"cloneWorkspace\"),\n+        DistributionMetric.WORKSPACE_OPERATION_TIME,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NjIwNQ=="}, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNTQ1Mg==", "bodyText": "This supercedes my \"Do we want WorskapceController to know about MeausurementBundle.Builder\" comment - if we're localizing that knowledge to a single location, that works for me.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378515452", "createdAt": "2020-02-12T21:13:22Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -438,13 +481,21 @@ private void setDbWorkspaceFields(\n \n     workspaceAuditor.fireEditAction(\n         originalWorkspace, editedWorkspace, dbWorkspace.getWorkspaceId());\n-    return ResponseEntity.ok(manualWorkspaceMapper.toApiWorkspace(dbWorkspace, fcWorkspace));\n+    return manualWorkspaceMapper.toApiWorkspace(dbWorkspace, fcWorkspace);\n   }\n \n   @Override\n   public ResponseEntity<CloneWorkspaceResponse> cloneWorkspace(\n       String fromWorkspaceNamespace, String fromWorkspaceId, CloneWorkspaceRequest body)\n       throws BadRequestException, TooManyRequestsException {\n+    return logsBasedMetricService.recordElapsedTime(\n+        MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"cloneWorkspace\"),\n+        DistributionMetric.WORKSPACE_OPERATION_TIME,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NjIwNQ=="}, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODIyNDc1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo1MToyMVrOFocFeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODoxNjoyMlrOFo5V1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NzUxNA==", "bodyText": "This change seems unrelated", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377947514", "createdAt": "2020-02-11T22:51:21Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -236,8 +237,10 @@\n   @Autowired WorkspaceMapper workspaceMapper;\n \n   @Autowired ManualWorkspaceMapper manualWorkspaceMapper;\n+  @Autowired LogsBasedMetricService logsBasedMetricService;\n \n-  @Autowired Provider<Zendesk> mockZendeskProvider;\n+  @MockBean Provider<Zendesk> mockZendeskProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM2NTE5MQ==", "bodyText": "It's. general style fix. The free-standing form is preferred when there's a named member variabler for the. mock. If no name is needed, then putting. it in the list on the ctrlr is better. It's a non-functional cleanup change. If we don't. do those in test files as we go, things will deteriorate quickly.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378365191", "createdAt": "2020-02-12T16:28:58Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -236,8 +237,10 @@\n   @Autowired WorkspaceMapper workspaceMapper;\n \n   @Autowired ManualWorkspaceMapper manualWorkspaceMapper;\n+  @Autowired LogsBasedMetricService logsBasedMetricService;\n \n-  @Autowired Provider<Zendesk> mockZendeskProvider;\n+  @MockBean Provider<Zendesk> mockZendeskProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NzUxNA=="}, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQyNjgzOQ==", "bodyText": "This change is the correct local optimization. I'd rather not have to make this distinction though, the reason we had to here is that we're hand-constructing the controllers in setUp, resulting in all the above verbosity. The better goal here would be to autowire them all.\n(not for this PR)", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378426839", "createdAt": "2020-02-12T18:16:22Z", "author": {"login": "calbach"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -236,8 +237,10 @@\n   @Autowired WorkspaceMapper workspaceMapper;\n \n   @Autowired ManualWorkspaceMapper manualWorkspaceMapper;\n+  @Autowired LogsBasedMetricService logsBasedMetricService;\n \n-  @Autowired Provider<Zendesk> mockZendeskProvider;\n+  @MockBean Provider<Zendesk> mockZendeskProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NzUxNA=="}, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODIzMTQ2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/monitoring/LogsBasedMetricsServiceTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo1Mzo1OFrOFocJnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMjo0ODo1OFrOFpqOFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0ODU3Mg==", "bodyText": "is there a nice const or other value you can use here that shows why 4 is correct?  Is it PayloadKey.values().size()?", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377948572", "createdAt": "2020-02-11T22:53:58Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/monitoring/LogsBasedMetricsServiceTest.java", "diffHunk": "@@ -79,20 +92,18 @@ public void testRecordMeasurementBundle_writes() {\n     assertThat(logEntry.getSeverity()).isEqualTo(Severity.INFO);\n \n     final Map<String, Object> payloadMap = logEntry.<JsonPayload>getPayload().getDataAsMap();\n-    assertThat(payloadMap).hasSize(3);\n+    assertThat(payloadMap).hasSize(4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI3MDc3Nw==", "bodyText": "now that i have the. enum, yes.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378270777", "createdAt": "2020-02-12T14:06:58Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/monitoring/LogsBasedMetricsServiceTest.java", "diffHunk": "@@ -79,20 +92,18 @@ public void testRecordMeasurementBundle_writes() {\n     assertThat(logEntry.getSeverity()).isEqualTo(Severity.INFO);\n \n     final Map<String, Object> payloadMap = logEntry.<JsonPayload>getPayload().getDataAsMap();\n-    assertThat(payloadMap).hasSize(3);\n+    assertThat(payloadMap).hasSize(4);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0ODU3Mg=="}, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNjE5Nw==", "bodyText": "Could you make that update please?  :)", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378516197", "createdAt": "2020-02-12T21:15:01Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/monitoring/LogsBasedMetricsServiceTest.java", "diffHunk": "@@ -79,20 +92,18 @@ public void testRecordMeasurementBundle_writes() {\n     assertThat(logEntry.getSeverity()).isEqualTo(Severity.INFO);\n \n     final Map<String, Object> payloadMap = logEntry.<JsonPayload>getPayload().getDataAsMap();\n-    assertThat(payloadMap).hasSize(3);\n+    assertThat(payloadMap).hasSize(4);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0ODU3Mg=="}, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyNzY3MQ==", "bodyText": "It's fixed locally in a couple places.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r379227671", "createdAt": "2020-02-14T02:48:58Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/monitoring/LogsBasedMetricsServiceTest.java", "diffHunk": "@@ -79,20 +92,18 @@ public void testRecordMeasurementBundle_writes() {\n     assertThat(logEntry.getSeverity()).isEqualTo(Severity.INFO);\n \n     final Map<String, Object> payloadMap = logEntry.<JsonPayload>getPayload().getDataAsMap();\n-    assertThat(payloadMap).hasSize(3);\n+    assertThat(payloadMap).hasSize(4);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0ODU3Mg=="}, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODI1MTQzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/monitoring/LogsBasedMetricsServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzowMjowOFrOFocVsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDowNzoyOVrOFov1Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1MTY2NQ==", "bodyText": "worth making some asserts on the logs here?", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377951665", "createdAt": "2020-02-11T23:02:08Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/monitoring/LogsBasedMetricsServiceTest.java", "diffHunk": "@@ -121,12 +132,103 @@ public void testRecord_handlesMultipleMeasurements() {\n         sentEntries.stream()\n             .map(e -> (JsonPayload) e.getPayload())\n             .map(JsonPayload::getDataAsMap)\n-            .map(m -> (String) m.get(LogsBasedMetricService.METRIC_NAME_KEY))\n+            .map(m -> (String) m.get(PayloadKey.NAME.getKeyName()))\n             .filter(Objects::nonNull)\n             .collect(ImmutableSet.toImmutableSet());\n     assertThat(metricNames)\n         .containsAllIn(\n             ImmutableSet.of(\n                 EventMetric.NOTEBOOK_CLONE.getName(), EventMetric.NOTEBOOK_DELETE.getName()));\n   }\n+\n+  @Test\n+  public void testTimeAndRecordWithRunnable() {\n+    Set<Integer> sideEffectSet = new HashSet<>();\n+    logsBasedMetricService.recordElapsedTime(\n+        MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"test1\"),\n+        DistributionMetric.WORKSPACE_OPERATION_TIME,\n+        () -> {\n+          int innerInt = 2;\n+          sideEffectSet.add(3);\n+          innerInt -= 3;\n+          assertThat(innerInt).isEqualTo(-1);\n+        });\n+    assertThat(sideEffectSet).contains(3);\n+    verify(mockLogging).write(logEntriesCaptor.capture());\n+    final Map<String, Object> entryData =\n+        StreamSupport.stream(logEntriesCaptor.getValue().spliterator(), false)\n+            .map(LogEntry::getPayload)\n+            .map(p -> (JsonPayload) p)\n+            .map(JsonPayload::getDataAsMap)\n+            .findFirst()\n+            .orElse(Collections.emptyMap());\n+    assertThat(entryData).hasSize(4);\n+    assertThat(entryData.get(PayloadKey.NAME.getKeyName()))\n+        .isEqualTo(DistributionMetric.WORKSPACE_OPERATION_TIME.getName());\n+    assertThat((double) entryData.get(PayloadKey.VALUE.getKeyName()))\n+        .isEqualTo((double) OPERATION_DURATION.toMillis());\n+  }\n+\n+  public void testTimeAndRecordWithSupplier() {\n+    Set<Integer> aSet = new HashSet<>();\n+    final int result =\n+        logsBasedMetricService.recordElapsedTime(\n+            MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"test1\"),\n+            DistributionMetric.WORKSPACE_OPERATION_TIME,\n+            () -> {\n+              return 99;\n+            });\n+    assertThat(aSet).contains(3);\n+    assertThat(result).isEqualTo(99);\n+\n+    verify(mockLogging).write(logEntriesCaptor.capture());\n+    final Map<String, Object> entryData =\n+        StreamSupport.stream(logEntriesCaptor.getValue().spliterator(), false)\n+            .map(LogEntry::getPayload)\n+            .map(p -> (JsonPayload) p)\n+            .map(JsonPayload::getDataAsMap)\n+            .findFirst()\n+            .orElse(Collections.emptyMap());\n+    assertThat(entryData).hasSize(4);\n+    assertThat(entryData.get(PayloadKey.NAME.getKeyName()))\n+        .isEqualTo(DistributionMetric.WORKSPACE_OPERATION_TIME.getName());\n+    assertThat(entryData.get(PayloadKey.UNIT.getKeyName()))\n+        .isEqualTo(UnitOfMeasure.MILLISECOND.getUcmSymbol());\n+\n+    assertThat((Double) entryData.get(PayloadKey.VALUE.getKeyName()))\n+        .isEqualTo(OPERATION_DURATION.toMillis());\n+  }\n+\n+  @Test(expected = IllegalAccessError.class)\n+  public void testRecordElapsedTime_throws() {\n+    logsBasedMetricService.recordElapsedTime(\n+        MeasurementBundle.builder(),\n+        DistributionMetric.COHORT_OPERATION_TIME,\n+        () -> {\n+          throw new IllegalAccessError(\"Boo!\");\n+        });\n+  }\n+\n+  @Test\n+  public void testRecordElapsedTime_nestedWorks() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI3MTA2Mg==", "bodyText": "Not sure if I can mock the stopwatch to give ttwo different times.  I'll see what I can do.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378271062", "createdAt": "2020-02-12T14:07:29Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/monitoring/LogsBasedMetricsServiceTest.java", "diffHunk": "@@ -121,12 +132,103 @@ public void testRecord_handlesMultipleMeasurements() {\n         sentEntries.stream()\n             .map(e -> (JsonPayload) e.getPayload())\n             .map(JsonPayload::getDataAsMap)\n-            .map(m -> (String) m.get(LogsBasedMetricService.METRIC_NAME_KEY))\n+            .map(m -> (String) m.get(PayloadKey.NAME.getKeyName()))\n             .filter(Objects::nonNull)\n             .collect(ImmutableSet.toImmutableSet());\n     assertThat(metricNames)\n         .containsAllIn(\n             ImmutableSet.of(\n                 EventMetric.NOTEBOOK_CLONE.getName(), EventMetric.NOTEBOOK_DELETE.getName()));\n   }\n+\n+  @Test\n+  public void testTimeAndRecordWithRunnable() {\n+    Set<Integer> sideEffectSet = new HashSet<>();\n+    logsBasedMetricService.recordElapsedTime(\n+        MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"test1\"),\n+        DistributionMetric.WORKSPACE_OPERATION_TIME,\n+        () -> {\n+          int innerInt = 2;\n+          sideEffectSet.add(3);\n+          innerInt -= 3;\n+          assertThat(innerInt).isEqualTo(-1);\n+        });\n+    assertThat(sideEffectSet).contains(3);\n+    verify(mockLogging).write(logEntriesCaptor.capture());\n+    final Map<String, Object> entryData =\n+        StreamSupport.stream(logEntriesCaptor.getValue().spliterator(), false)\n+            .map(LogEntry::getPayload)\n+            .map(p -> (JsonPayload) p)\n+            .map(JsonPayload::getDataAsMap)\n+            .findFirst()\n+            .orElse(Collections.emptyMap());\n+    assertThat(entryData).hasSize(4);\n+    assertThat(entryData.get(PayloadKey.NAME.getKeyName()))\n+        .isEqualTo(DistributionMetric.WORKSPACE_OPERATION_TIME.getName());\n+    assertThat((double) entryData.get(PayloadKey.VALUE.getKeyName()))\n+        .isEqualTo((double) OPERATION_DURATION.toMillis());\n+  }\n+\n+  public void testTimeAndRecordWithSupplier() {\n+    Set<Integer> aSet = new HashSet<>();\n+    final int result =\n+        logsBasedMetricService.recordElapsedTime(\n+            MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"test1\"),\n+            DistributionMetric.WORKSPACE_OPERATION_TIME,\n+            () -> {\n+              return 99;\n+            });\n+    assertThat(aSet).contains(3);\n+    assertThat(result).isEqualTo(99);\n+\n+    verify(mockLogging).write(logEntriesCaptor.capture());\n+    final Map<String, Object> entryData =\n+        StreamSupport.stream(logEntriesCaptor.getValue().spliterator(), false)\n+            .map(LogEntry::getPayload)\n+            .map(p -> (JsonPayload) p)\n+            .map(JsonPayload::getDataAsMap)\n+            .findFirst()\n+            .orElse(Collections.emptyMap());\n+    assertThat(entryData).hasSize(4);\n+    assertThat(entryData.get(PayloadKey.NAME.getKeyName()))\n+        .isEqualTo(DistributionMetric.WORKSPACE_OPERATION_TIME.getName());\n+    assertThat(entryData.get(PayloadKey.UNIT.getKeyName()))\n+        .isEqualTo(UnitOfMeasure.MILLISECOND.getUcmSymbol());\n+\n+    assertThat((Double) entryData.get(PayloadKey.VALUE.getKeyName()))\n+        .isEqualTo(OPERATION_DURATION.toMillis());\n+  }\n+\n+  @Test(expected = IllegalAccessError.class)\n+  public void testRecordElapsedTime_throws() {\n+    logsBasedMetricService.recordElapsedTime(\n+        MeasurementBundle.builder(),\n+        DistributionMetric.COHORT_OPERATION_TIME,\n+        () -> {\n+          throw new IllegalAccessError(\"Boo!\");\n+        });\n+  }\n+\n+  @Test\n+  public void testRecordElapsedTime_nestedWorks() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1MTY2NQ=="}, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTIxMDEzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/monitoring/LogsBasedMetricServiceFakeImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzo1Mjo0NVrOFo4mJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzo1Mjo0NVrOFo4mJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxNDYyOA==", "bodyText": "Really like this pattern.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378414628", "createdAt": "2020-02-12T17:52:45Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/LogsBasedMetricServiceFakeImpl.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package org.pmiops.workbench.monitoring;\n+\n+import java.util.function.Supplier;\n+import org.pmiops.workbench.monitoring.MeasurementBundle.Builder;\n+import org.pmiops.workbench.monitoring.views.DistributionMetric;\n+import org.pmiops.workbench.monitoring.views.EventMetric;\n+import org.springframework.stereotype.Service;\n+\n+/**\n+ * While it's possible to mock this service correctly, it's much less intrusive to simply provide a\n+ * no-op implementation. If you're curious on what the stubbing looks like, see\n+ * https://stackoverflow.com/questions/60138415/which-breaks-first-mockito-or-java-generics for\n+ * details on how to mock the generic supplier matcher.\n+ */\n+@Service(\"LOGS_BASED_METRIC_SERVICE_FAKE\")\n+public class LogsBasedMetricServiceFakeImpl implements LogsBasedMetricService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbec34e063fc0896f6d515df8f75ad1991ac176"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTIxNjQzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/monitoring/LogsBasedMetricServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzo1NDo0M1rOFo4qNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzo1NDo0M1rOFo4qNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxNTY2OA==", "bodyText": "spelling: manually", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378415668", "createdAt": "2020-02-12T17:54:43Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/LogsBasedMetricServiceImpl.java", "diffHunk": "@@ -79,4 +121,41 @@ private LogEntry payloadToLogEntry(JsonPayload jsonPayload) {\n         .setResource(stackdriverStatsExporterService.getLoggingMonitoredResource())\n         .build();\n   }\n+\n+  /**\n+   * Allowed labels for the JsonPayload are here.\n+   *\n+   * <p>NAME: name of the metric, to show up in the Metric Explorer. Should be snake_case. Existing\n+   * EventMetric class's getName() method works.\n+   *\n+   * <p>VALUE: double value for the metric for this sample. Either 1.0 for count metrics, or some\n+   * number in the distribution for a distribution metric. For cumulative metrics, just use a value\n+   * to be summed, and choose the right aggregation on the Stackdriver side. That is, there's no\n+   * separate option for it.\n+   *\n+   * <p>LABELS: String-String map of label to value. Should only contain keys and discrete values\n+   * allowed by the EventMetric and MetricLabel classes, respectively. (Using a MeasurementBundle\n+   * ensures this).\n+   *\n+   * <p>UNIT: Official unit of measure. It looks like you still have to set this up manuaally when", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbec34e063fc0896f6d515df8f75ad1991ac176"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTIyMDU3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/DistributionAggregation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzo1NTo1NFrOFo4svA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo1NTo1MlrOFo6nPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxNjMxNg==", "bodyText": "spelling: OpenCensus here and below", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378416316", "createdAt": "2020-02-12T17:55:54Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/DistributionAggregation.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.pmiops.workbench.monitoring.views;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.opencensus.stats.Aggregation;\n+import io.opencensus.stats.Aggregation.Distribution;\n+import io.opencensus.stats.BucketBoundaries;\n+\n+/**\n+ * Aggregation values to use with OpenCensus Distribution metrics. The bucket bounadries are inner\n+ * boundaries, so a list of [0.25, 0.50, 0.75] would actually make 5 buckets, with the lowest being\n+ * [0.0, 0.25), [0.25, 0.5), [0.5, 0.75), [0.75, MAX_DOUBLE].\n+ *\n+ * <p>Note: These buckets are provided for use with OpenCenss distribution metrics, which are not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbec34e063fc0896f6d515df8f75ad1991ac176"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0NzY3Ng==", "bodyText": "thanks. my keyboard is dying.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378447676", "createdAt": "2020-02-12T18:55:52Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/DistributionAggregation.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.pmiops.workbench.monitoring.views;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.opencensus.stats.Aggregation;\n+import io.opencensus.stats.Aggregation.Distribution;\n+import io.opencensus.stats.BucketBoundaries;\n+\n+/**\n+ * Aggregation values to use with OpenCensus Distribution metrics. The bucket bounadries are inner\n+ * boundaries, so a list of [0.25, 0.50, 0.75] would actually make 5 buckets, with the lowest being\n+ * [0.0, 0.25), [0.25, 0.5), [0.5, 0.75), [0.75, MAX_DOUBLE].\n+ *\n+ * <p>Note: These buckets are provided for use with OpenCenss distribution metrics, which are not", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxNjMxNg=="}, "originalCommit": {"oid": "ccbec34e063fc0896f6d515df8f75ad1991ac176"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTIyMDk3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/DistributionAggregation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzo1NjowMlrOFo4tAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzo1NjowMlrOFo4tAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxNjM4NQ==", "bodyText": "currently", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378416385", "createdAt": "2020-02-12T17:56:02Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/DistributionAggregation.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.pmiops.workbench.monitoring.views;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.opencensus.stats.Aggregation;\n+import io.opencensus.stats.Aggregation.Distribution;\n+import io.opencensus.stats.BucketBoundaries;\n+\n+/**\n+ * Aggregation values to use with OpenCensus Distribution metrics. The bucket bounadries are inner\n+ * boundaries, so a list of [0.25, 0.50, 0.75] would actually make 5 buckets, with the lowest being\n+ * [0.0, 0.25), [0.25, 0.5), [0.5, 0.75), [0.75, MAX_DOUBLE].\n+ *\n+ * <p>Note: These buckets are provided for use with OpenCenss distribution metrics, which are not\n+ * currenlty in service. Since every MetricBase needs an Aggregation anyway, and I wanted the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbec34e063fc0896f6d515df8f75ad1991ac176"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTIyNzgyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzo1ODowOFrOFo4xTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjozODoyNFrOFpmCZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxNzQ4NA==", "bodyText": "This doesn't exactly match the pattern you've added in the log service, but I think it would be less intrusive to handle method-level timing in an interceptor, e.g. https://github.com/all-of-us/workbench/blob/8541d09075b0bbc3e4ad786212a4fea8c84aee54/api/src/main/java/org/pmiops/workbench/interceptors/TracingInterceptor.java", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378417484", "createdAt": "2020-02-12T17:58:08Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -246,6 +254,13 @@ private void maybeFileZendeskReviewRequest(Workspace workspace) {\n \n   @Override\n   public ResponseEntity<Workspace> createWorkspace(Workspace workspace) throws BadRequestException {\n+    return ResponseEntity.ok(\n+        recordOperationTime(() -> createWorkspaceImpl(workspace), \"createWorkspace\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbec34e063fc0896f6d515df8f75ad1991ac176"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1MTA1NQ==", "bodyText": "I had hoped to be able to pull live latency distributions from the traces to use. with Alerting. @blrubenstein looked into whether we could alert on Traces. and said the systems were basically totally separate.\nI do see they have alerting, but it appears to be more limited to the number of Stackdriver Trace spans ingested per month, your quota usage, and your rate of span ingestion\nIt looks like they do expose a handful of metrics, but so far I'm only seeing builtin GCP services represented.\n\nFor my purposes here, I basically needed quantities to send to verify the service is working for distributions.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378451055", "createdAt": "2020-02-12T19:02:14Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -246,6 +254,13 @@ private void maybeFileZendeskReviewRequest(Workspace workspace) {\n \n   @Override\n   public ResponseEntity<Workspace> createWorkspace(Workspace workspace) throws BadRequestException {\n+    return ResponseEntity.ok(\n+        recordOperationTime(() -> createWorkspaceImpl(workspace), \"createWorkspace\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxNzQ4NA=="}, "originalCommit": {"oid": "ccbec34e063fc0896f6d515df8f75ad1991ac176"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1NzY0MA==", "bodyText": "Ignore StackDriver tracing for now, I'm asking whether you can implement recording a request's latency using an interceptor, similar to the approach used in the code I linked, instead of writing new code on every method.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378457640", "createdAt": "2020-02-12T19:14:49Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -246,6 +254,13 @@ private void maybeFileZendeskReviewRequest(Workspace workspace) {\n \n   @Override\n   public ResponseEntity<Workspace> createWorkspace(Workspace workspace) throws BadRequestException {\n+    return ResponseEntity.ok(\n+        recordOperationTime(() -> createWorkspaceImpl(workspace), \"createWorkspace\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxNzQ4NA=="}, "originalCommit": {"oid": "ccbec34e063fc0896f6d515df8f75ad1991ac176"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2NjA2OA==", "bodyText": "Drive-by comment here: for some reason I'd been thinking we wouldn't be able to use an interceptor for logging per-inbound-request latency, but it looks to me like it would totally work.\nThe fancy stuff I'd done in #2901 editing Swagger templates was important for instrumenting outbound API requests where RW acts as a client to Firecloud, but for inbound APIs an interceptor does seem to have most of the information we'd need.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378466068", "createdAt": "2020-02-12T19:30:33Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -246,6 +254,13 @@ private void maybeFileZendeskReviewRequest(Workspace workspace) {\n \n   @Override\n   public ResponseEntity<Workspace> createWorkspace(Workspace workspace) throws BadRequestException {\n+    return ResponseEntity.ok(\n+        recordOperationTime(() -> createWorkspaceImpl(workspace), \"createWorkspace\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxNzQ4NA=="}, "originalCommit": {"oid": "ccbec34e063fc0896f6d515df8f75ad1991ac176"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUyODQxMg==", "bodyText": "Oh you're saying to hack a trace interceptor to record the request latency. Sure.\nThis isn't intended to be a pattern for every method.  Just a handful of things that are of major perf importance like workspaces and cohorts.\nI don't have a story for that yet.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378528412", "createdAt": "2020-02-12T21:40:37Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -246,6 +254,13 @@ private void maybeFileZendeskReviewRequest(Workspace workspace) {\n \n   @Override\n   public ResponseEntity<Workspace> createWorkspace(Workspace workspace) throws BadRequestException {\n+    return ResponseEntity.ok(\n+        recordOperationTime(() -> createWorkspaceImpl(workspace), \"createWorkspace\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxNzQ4NA=="}, "originalCommit": {"oid": "ccbec34e063fc0896f6d515df8f75ad1991ac176"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1Nzc3Mg==", "bodyText": "No. I regret linking the TraceInterceptor, I used it as an example because it's the most similar to what you'd need to do.\nInterceptors are a standard spring concept where you can install some pre and post-processing hook on a set of controller endpoitns. We have several such interceptors defined here: https://github.com/all-of-us/workbench/tree/2599364f3f32bacb1878854dae47ec8c61d08970/api/src/main/java/org/pmiops/workbench/interceptors\nWhy would we not want to record a general purpose latency metric split out by method name?", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r379157772", "createdAt": "2020-02-13T22:34:40Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -246,6 +254,13 @@ private void maybeFileZendeskReviewRequest(Workspace workspace) {\n \n   @Override\n   public ResponseEntity<Workspace> createWorkspace(Workspace workspace) throws BadRequestException {\n+    return ResponseEntity.ok(\n+        recordOperationTime(() -> createWorkspaceImpl(workspace), \"createWorkspace\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxNzQ4NA=="}, "originalCommit": {"oid": "ccbec34e063fc0896f6d515df8f75ad1991ac176"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1OTE0MQ==", "bodyText": "We do want to do that. Until very recently we thought we had to hack swagger-codegen to do it. I'm happy and eager to do that on a later ticket.\nThe priority with this branch is integrating and demonstrating distribution metrics, and elapsed time was an easy starting point.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r379159141", "createdAt": "2020-02-13T22:38:24Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -246,6 +254,13 @@ private void maybeFileZendeskReviewRequest(Workspace workspace) {\n \n   @Override\n   public ResponseEntity<Workspace> createWorkspace(Workspace workspace) throws BadRequestException {\n+    return ResponseEntity.ok(\n+        recordOperationTime(() -> createWorkspaceImpl(workspace), \"createWorkspace\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxNzQ4NA=="}, "originalCommit": {"oid": "ccbec34e063fc0896f6d515df8f75ad1991ac176"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3296, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}