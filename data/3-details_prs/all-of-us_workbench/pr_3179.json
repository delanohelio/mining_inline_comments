{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MDcyMTI1", "number": 3179, "title": "[risk=low][RW-4423] Include researcher contact email in RDR export", "bodyText": "Added a proper unit test. Cleaned up a typo and some other slight jank in RdrExportServiceImpl.\n--\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers", "createdAt": "2020-02-24T16:04:09Z", "url": "https://github.com/all-of-us/workbench/pull/3179", "merged": true, "mergeCommit": {"oid": "658517f7af9daee18b429d6aa46ef0fd90b83902"}, "closed": true, "closedAt": "2020-02-24T19:14:06Z", "author": {"login": "als364"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHfrT7gH2gAyMzc5MDcyMTI1OjMxOTgyOTQ3NGFmZTRhZWM1MTIwYmZkZWIyNWIzODJhOTQ1NTQ5MTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHiPkoAH2gAyMzc5MDcyMTI1OmYwMTg2MGVkZjZmM2RiMjEwZTY3NjdjZThlNDAxNzY2NTVmNTQ4NTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "319829474afe4aec5120bfdeb25b382a94554913", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/319829474afe4aec5120bfdeb25b382a94554913", "committedDate": "2020-02-24T15:57:55Z", "message": "export email"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce7b47d91f96f7f42622ab855b67f330557225b1", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/ce7b47d91f96f7f42622ab855b67f330557225b1", "committedDate": "2020-02-24T15:57:55Z", "message": "new test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTcyNDI4", "url": "https://github.com/all-of-us/workbench/pull/3179#pullrequestreview-363572428", "createdAt": "2020-02-24T17:35:34Z", "commit": {"oid": "ce7b47d91f96f7f42622ab855b67f330557225b1"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzozNTozNFrOFtpghg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo0ODoxMlrOFtp5zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMDMxMA==", "bodyText": "nit: while you're here, I'd fix the CamelCase in the method name: should be updateDbRdrExport (per Google's guidelines which I always link to, https://google.github.io/styleguide/javaguide.html#s5.3-camel-case)", "url": "https://github.com/all-of-us/workbench/pull/3179#discussion_r383410310", "createdAt": "2020-02-24T17:35:34Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/rdr/RdrExportServiceImpl.java", "diffHunk": "@@ -409,7 +405,7 @@ RdrWorkspaceDemographic toRdrWorkspaceDemographics(\n    * @param entity\n    * @param idList\n    */\n-  private void updateDBRdrExport(RdrEntity entity, List<Long> idList) {\n+  public void updateDBRdrExport(RdrEntity entity, List<Long> idList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce7b47d91f96f7f42622ab855b67f330557225b1"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMDUwNw==", "bodyText": "Is this worth a @VisibleForTesting annotation?", "url": "https://github.com/all-of-us/workbench/pull/3179#discussion_r383410507", "createdAt": "2020-02-24T17:35:55Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/rdr/RdrExportServiceImpl.java", "diffHunk": "@@ -409,7 +405,7 @@ RdrWorkspaceDemographic toRdrWorkspaceDemographics(\n    * @param entity\n    * @param idList\n    */\n-  private void updateDBRdrExport(RdrEntity entity, List<Long> idList) {\n+  public void updateDBRdrExport(RdrEntity entity, List<Long> idList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce7b47d91f96f7f42622ab855b67f330557225b1"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMTQ2Mw==", "bodyText": "Some of these (RdrApi, RdrExportDao, and UserDao) should be unnecessary since you use the inline @MockBean annotation above (which I tend to prefer, as it directly associates it with an instance variable if needed). In fact, I tend to use only the inline version, even for mock beans that aren't directly used in the test (since it avoids creating a situation where some mockbeans are defined in one place, and some in the other place).\nI'd be happy to hear reasons for preferring a different approach, though... I'm definitely still honing my Spring test aesthetic.", "url": "https://github.com/all-of-us/workbench/pull/3179#discussion_r383411463", "createdAt": "2020-02-24T17:37:45Z", "author": {"login": "gjuggler"}, "path": "api/src/test/java/org/pmiops/workbench/rdr/RdrExportServiceImplTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.pmiops.workbench.rdr;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyListOf;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyShort;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.sql.Timestamp;\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.dao.RdrExportDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.model.Degree;\n+import org.pmiops.workbench.rdr.api.RdrApi;\n+import org.pmiops.workbench.test.FakeClock;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class RdrExportServiceImplTest {\n+  @Autowired private RdrExportService rdrExportService;\n+\n+  @MockBean private ApiClient mockApiClient;\n+  @MockBean private RdrApi mockRdrApi;\n+  @MockBean private RdrExportDao rdrExportDao;\n+  @MockBean private UserDao mockUserDao;\n+\n+  private static final Instant NOW = Instant.now();\n+  private static final Timestamp NOW_TIMESTAMP = Timestamp.from(NOW);\n+  private static final FakeClock CLOCK = new FakeClock(NOW, ZoneId.systemDefault());\n+\n+  private DbUser dbUserWithEmail;\n+  private DbUser dbUserWithoutEmail;\n+\n+  @TestConfiguration\n+  @Import({RdrExportServiceImpl.class})\n+  @MockBean({\n+      RdrApi.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce7b47d91f96f7f42622ab855b67f330557225b1"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxNjc4MA==", "bodyText": "Thanks for adding a test case! I know this was a TODO that @NehaBroad had been tracking, I'm sure we can add to it over time, but usually the biggest hurdle is just creating a test file with some basic assertions :)", "url": "https://github.com/all-of-us/workbench/pull/3179#discussion_r383416780", "createdAt": "2020-02-24T17:48:12Z", "author": {"login": "gjuggler"}, "path": "api/src/test/java/org/pmiops/workbench/rdr/RdrExportServiceImplTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.pmiops.workbench.rdr;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyListOf;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyShort;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.sql.Timestamp;\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.dao.RdrExportDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.model.Degree;\n+import org.pmiops.workbench.rdr.api.RdrApi;\n+import org.pmiops.workbench.test.FakeClock;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class RdrExportServiceImplTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce7b47d91f96f7f42622ab855b67f330557225b1"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "812ef7763e1cf957935a3d7f5a946498475e36f5", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/812ef7763e1cf957935a3d7f5a946498475e36f5", "committedDate": "2020-02-24T18:15:09Z", "message": "review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f01860edf6f3db210e6767ce8e40176655f54855", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/f01860edf6f3db210e6767ce8e40176655f54855", "committedDate": "2020-02-24T18:57:20Z", "message": "spotless"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3639, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}