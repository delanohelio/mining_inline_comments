{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NTc3MjM4", "number": 3021, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0MDowOFrODZ5iXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNTo1Mzo1N1rODah6cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDgzNjc5OnYy", "diffSide": "LEFT", "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0MDowOFrOFgjAUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0MDowOFrOFgjAUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3MjI3NQ==", "bodyText": "This was only used for free tier alert logging, and email alerting supersedes this.", "url": "https://github.com/all-of-us/workbench/pull/3021#discussion_r369672275", "createdAt": "2020-01-22T16:40:08Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -34,7 +35,7 @@\n public class FreeTierBillingService {\n \n   private final BigQueryService bigQueryService;\n-  private final NotificationService notificationService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "449e8b2b586d204c990c4529ff4a418f96c055c1"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDg1NTExOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0NTowNVrOFgjL-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0NTowNVrOFgjL-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3NTI1Nw==", "bodyText": "Sending email alerts is best-effort by design: no retries.\nI could report this in a louder or better way if you prefer.", "url": "https://github.com/all-of-us/workbench/pull/3021#discussion_r369675257", "createdAt": "2020-01-22T16:45:05Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -106,7 +109,11 @@ public void checkFreeTierBillingUsage() {\n     final Set<DbUser> newlyExpiredUsers =\n         Sets.difference(currentExpiredUsers, previouslyExpiredUsers);\n     for (final DbUser user : newlyExpiredUsers) {\n-      notificationService.alertUserFreeTierExpiration(user);\n+      try {\n+        mailService.alertUserFreeTierExpiration(user);\n+      } catch (final MessagingException e) {\n+        logger.log(Level.WARNING, e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "449e8b2b586d204c990c4529ff4a418f96c055c1"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTMwNjAyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowOTowNVrOFgnqfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowOTowNVrOFgnqfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0ODYwNQ==", "bodyText": "We shouldn't be calling this if the registration time is null, but I wanted to make the nullability contract explicit", "url": "https://github.com/all-of-us/workbench/pull/3021#discussion_r369748605", "createdAt": "2020-01-22T19:09:05Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -123,11 +130,17 @@ private boolean expiredByCost(final DbUser user, final double currentCost) {\n     return currentCost > getUserFreeTierDollarLimit(user);\n   }\n \n+  private Optional<Instant> getUserFreeCreditExpirationTime(final DbUser user) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b81f09414ac4ef1a8dda51a19e08322de76a612"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTMwOTYxOnYy", "diffSide": "LEFT", "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOToxMDowOVrOFgnsoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOToxMDowOVrOFgnsoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0OTE1Mg==", "bodyText": "I missed that we needed expiration date for this alert when I was doing the logic story", "url": "https://github.com/all-of-us/workbench/pull/3021#discussion_r369749152", "createdAt": "2020-01-22T19:10:09Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -195,8 +208,16 @@ private void maybeAlertOnCostThresholds(\n       if (currentFraction > threshold) {\n         // only alert if we have not done so previously\n         if (previousFraction <= threshold) {\n-          notificationService.alertUserFreeTierDollarThreshold(\n-              user, threshold, currentCost, remainingBalance);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b81f09414ac4ef1a8dda51a19e08322de76a612"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTM3ODQwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNTozMjowMlrOFhhZHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMTo0MzoxOVrOFhrO5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY5NDQyOA==", "bodyText": "should this be info or a warning message", "url": "https://github.com/all-of-us/workbench/pull/3021#discussion_r370694428", "createdAt": "2020-01-24T15:32:02Z", "author": {"login": "NehaBroad"}, "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "diffHunk": "@@ -84,6 +98,110 @@ public void sendWelcomeEmail(final String contactEmail, final String password, f\n     sendWithRetries(msg, String.format(\"Welcome for %s\", user.getName()));\n   }\n \n+  @Override\n+  public void alertUserFreeTierDollarThreshold(\n+      final DbUser user,\n+      double threshold,\n+      double currentUsage,\n+      double remainingBalance,\n+      final Optional<Instant> expirationTimeIfKnown)\n+      throws MessagingException {\n+    final WorkbenchConfig workbenchConfig = workbenchConfigProvider.get();\n+\n+    final String logMsg =\n+        String.format(\n+            \"User %s has passed the %.2f free tier dollar threshold.  Current total usage is $%.2f with remaining balance $%.2f\",\n+            user.getUsername(), threshold, currentUsage, remainingBalance);\n+    log.info(logMsg);\n+\n+    if (workbenchConfig.featureFlags.sendFreeTierAlertEmails) {\n+      final String msgHtml =\n+          buildHtml(\n+              FREE_TIER_DOLLAR_THRESHOLD_RESOURCE,\n+              freeTierDollarThresholdSubstitutionMap(\n+                  user, currentUsage, remainingBalance, expirationTimeIfKnown));\n+      final String subject =\n+          String.format(\n+              \"Reminder - %s Free credit usage in All of Us Researcher Workbench\",\n+              formatPercentage(threshold));\n+\n+      final MandrillMessage msg =\n+          new MandrillMessage()\n+              .to(Collections.singletonList(validatedRecipient(user.getContactEmail())))\n+              .html(msgHtml)\n+              .subject(subject)\n+              .fromEmail(workbenchConfig.mandrill.fromEmail);\n+\n+      sendWithRetries(\n+          msg, String.format(\"User %s passed a free tier dollar threshold\", user.getUsername()));\n+    }\n+  }\n+\n+  @Override\n+  public void alertUserFreeTierTimeThreshold(\n+      final DbUser user,\n+      long daysRemaining,\n+      final LocalDate expirationDate,\n+      double remainingDollarBalance)\n+      throws MessagingException {\n+    final WorkbenchConfig workbenchConfig = workbenchConfigProvider.get();\n+\n+    final String logMsg =\n+        String.format(\n+            \"User %s has %d days remaining until their expiration date of %s.  Current total usage is $%.2f\",\n+            user.getUsername(), daysRemaining, formatDate(expirationDate), remainingDollarBalance);\n+    log.info(logMsg);\n+\n+    if (workbenchConfig.featureFlags.sendFreeTierAlertEmails) {\n+      final String msgHtml =\n+          buildHtml(\n+              FREE_TIER_TIME_THRESHOLD_RESOURCE,\n+              freeTierTimeThresholdSubstitutionMap(\n+                  user, daysRemaining, remainingDollarBalance, expirationDate));\n+\n+      final String subject =\n+          String.format(\n+              \"Reminder - %d days remaining in Free credits in All of Us Researcher Workbench\",\n+              daysRemaining);\n+\n+      final MandrillMessage msg =\n+          new MandrillMessage()\n+              .to(Collections.singletonList(validatedRecipient(user.getContactEmail())))\n+              .html(msgHtml)\n+              .subject(subject)\n+              .fromEmail(workbenchConfig.mandrill.fromEmail);\n+\n+      sendWithRetries(\n+          msg, String.format(\"User %s passed a free tier time threshold\", user.getUsername()));\n+    }\n+  }\n+\n+  @Override\n+  public void alertUserFreeTierExpiration(final DbUser user) throws MessagingException {\n+    final WorkbenchConfig workbenchConfig = workbenchConfigProvider.get();\n+\n+    final String logMsg =\n+        String.format(\"Free credits have expired for User %s\", user.getUsername());\n+    log.info(logMsg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b81f09414ac4ef1a8dda51a19e08322de76a612"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1NTY1NQ==", "bodyText": "I don't think this should be a warning because this is an expected situation, from our system's perspective.", "url": "https://github.com/all-of-us/workbench/pull/3021#discussion_r370855655", "createdAt": "2020-01-24T21:43:19Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "diffHunk": "@@ -84,6 +98,110 @@ public void sendWelcomeEmail(final String contactEmail, final String password, f\n     sendWithRetries(msg, String.format(\"Welcome for %s\", user.getName()));\n   }\n \n+  @Override\n+  public void alertUserFreeTierDollarThreshold(\n+      final DbUser user,\n+      double threshold,\n+      double currentUsage,\n+      double remainingBalance,\n+      final Optional<Instant> expirationTimeIfKnown)\n+      throws MessagingException {\n+    final WorkbenchConfig workbenchConfig = workbenchConfigProvider.get();\n+\n+    final String logMsg =\n+        String.format(\n+            \"User %s has passed the %.2f free tier dollar threshold.  Current total usage is $%.2f with remaining balance $%.2f\",\n+            user.getUsername(), threshold, currentUsage, remainingBalance);\n+    log.info(logMsg);\n+\n+    if (workbenchConfig.featureFlags.sendFreeTierAlertEmails) {\n+      final String msgHtml =\n+          buildHtml(\n+              FREE_TIER_DOLLAR_THRESHOLD_RESOURCE,\n+              freeTierDollarThresholdSubstitutionMap(\n+                  user, currentUsage, remainingBalance, expirationTimeIfKnown));\n+      final String subject =\n+          String.format(\n+              \"Reminder - %s Free credit usage in All of Us Researcher Workbench\",\n+              formatPercentage(threshold));\n+\n+      final MandrillMessage msg =\n+          new MandrillMessage()\n+              .to(Collections.singletonList(validatedRecipient(user.getContactEmail())))\n+              .html(msgHtml)\n+              .subject(subject)\n+              .fromEmail(workbenchConfig.mandrill.fromEmail);\n+\n+      sendWithRetries(\n+          msg, String.format(\"User %s passed a free tier dollar threshold\", user.getUsername()));\n+    }\n+  }\n+\n+  @Override\n+  public void alertUserFreeTierTimeThreshold(\n+      final DbUser user,\n+      long daysRemaining,\n+      final LocalDate expirationDate,\n+      double remainingDollarBalance)\n+      throws MessagingException {\n+    final WorkbenchConfig workbenchConfig = workbenchConfigProvider.get();\n+\n+    final String logMsg =\n+        String.format(\n+            \"User %s has %d days remaining until their expiration date of %s.  Current total usage is $%.2f\",\n+            user.getUsername(), daysRemaining, formatDate(expirationDate), remainingDollarBalance);\n+    log.info(logMsg);\n+\n+    if (workbenchConfig.featureFlags.sendFreeTierAlertEmails) {\n+      final String msgHtml =\n+          buildHtml(\n+              FREE_TIER_TIME_THRESHOLD_RESOURCE,\n+              freeTierTimeThresholdSubstitutionMap(\n+                  user, daysRemaining, remainingDollarBalance, expirationDate));\n+\n+      final String subject =\n+          String.format(\n+              \"Reminder - %d days remaining in Free credits in All of Us Researcher Workbench\",\n+              daysRemaining);\n+\n+      final MandrillMessage msg =\n+          new MandrillMessage()\n+              .to(Collections.singletonList(validatedRecipient(user.getContactEmail())))\n+              .html(msgHtml)\n+              .subject(subject)\n+              .fromEmail(workbenchConfig.mandrill.fromEmail);\n+\n+      sendWithRetries(\n+          msg, String.format(\"User %s passed a free tier time threshold\", user.getUsername()));\n+    }\n+  }\n+\n+  @Override\n+  public void alertUserFreeTierExpiration(final DbUser user) throws MessagingException {\n+    final WorkbenchConfig workbenchConfig = workbenchConfigProvider.get();\n+\n+    final String logMsg =\n+        String.format(\"Free credits have expired for User %s\", user.getUsername());\n+    log.info(logMsg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY5NDQyOA=="}, "originalCommit": {"oid": "8b81f09414ac4ef1a8dda51a19e08322de76a612"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTM4NTMyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNTozNDowOFrOFhhdRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMToyOTowOFrOFhq7DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY5NTQ5Mw==", "bodyText": "nit: cloudStorageServiceProvider.get().getImageUrl(\"all_of_us_logo.png\")) this is being repeated a lot of times, if its going to be the same i am wondering if it can be taken out, just so if we will ever change the image source we can do it at one place", "url": "https://github.com/all-of-us/workbench/pull/3021#discussion_r370695493", "createdAt": "2020-01-24T15:34:08Z", "author": {"login": "NehaBroad"}, "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "diffHunk": "@@ -114,25 +232,72 @@ public void sendBetaAccessCompleteEmail(final String contactEmail, final String\n   }\n \n   private Map<EmailSubstitutionField, String> betaAccessSubstitutionMap(final String username) {\n-    final CloudStorageService cloudStorageService = cloudStorageServiceProvider.get();\n-\n+    final WorkbenchConfig workbenchConfig = workbenchConfigProvider.get();\n     final String action =\n         \"login to the workbench via <a class=\\\"link\\\" href=\\\"\"\n-            + workbenchConfigProvider.get().admin.loginUrl\n+            + workbenchConfig.admin.loginUrl\n             + \"\\\">\"\n-            + workbenchConfigProvider.get().admin.loginUrl\n+            + workbenchConfig.admin.loginUrl\n             + \"</a>\";\n \n     return new ImmutableMap.Builder<EmailSubstitutionField, String>()\n         .put(EmailSubstitutionField.ACTION, action)\n         .put(EmailSubstitutionField.BETA_ACCESS_REPORT, \"approved for use\")\n         .put(\n             EmailSubstitutionField.HEADER_IMG,\n-            cloudStorageService.getImageUrl(\"all_of_us_logo.png\"))\n+            cloudStorageServiceProvider.get().getImageUrl(\"all_of_us_logo.png\"))\n         .put(EmailSubstitutionField.USERNAME, username)\n         .build();\n   }\n \n+  private ImmutableMap<EmailSubstitutionField, String> freeTierDollarThresholdSubstitutionMap(\n+      final DbUser user,\n+      double currentUsage,\n+      double remainingBalance,\n+      final Optional<Instant> expirationTimeIfKnown) {\n+\n+    final String expirationDate =\n+        expirationTimeIfKnown\n+            .map(time -> formatDate(time.atZone(ZoneId.systemDefault()).toLocalDate()))\n+            .orElse(\"[unknown]\");\n+\n+    return new ImmutableMap.Builder<EmailSubstitutionField, String>()\n+        .put(\n+            EmailSubstitutionField.HEADER_IMG,\n+            cloudStorageServiceProvider.get().getImageUrl(\"all_of_us_logo.png\"))\n+        .put(EmailSubstitutionField.FIRST_NAME, user.getGivenName())\n+        .put(EmailSubstitutionField.LAST_NAME, user.getFamilyName())\n+        .put(EmailSubstitutionField.USED_CREDITS, formatCurrency(currentUsage))\n+        .put(EmailSubstitutionField.CREDIT_BALANCE, formatCurrency(remainingBalance))\n+        .put(EmailSubstitutionField.EXPIRATION_DATE, expirationDate)\n+        .build();\n+  }\n+\n+  private ImmutableMap<EmailSubstitutionField, String> freeTierTimeThresholdSubstitutionMap(\n+      DbUser user, long daysRemaining, double remainingDollarBalance, LocalDate expirationDate) {\n+    return new ImmutableMap.Builder<EmailSubstitutionField, String>()\n+        .put(\n+            EmailSubstitutionField.HEADER_IMG,\n+            cloudStorageServiceProvider.get().getImageUrl(\"all_of_us_logo.png\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b81f09414ac4ef1a8dda51a19e08322de76a612"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1MDU3Mw==", "bodyText": "good idea, thanks", "url": "https://github.com/all-of-us/workbench/pull/3021#discussion_r370850573", "createdAt": "2020-01-24T21:29:08Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "diffHunk": "@@ -114,25 +232,72 @@ public void sendBetaAccessCompleteEmail(final String contactEmail, final String\n   }\n \n   private Map<EmailSubstitutionField, String> betaAccessSubstitutionMap(final String username) {\n-    final CloudStorageService cloudStorageService = cloudStorageServiceProvider.get();\n-\n+    final WorkbenchConfig workbenchConfig = workbenchConfigProvider.get();\n     final String action =\n         \"login to the workbench via <a class=\\\"link\\\" href=\\\"\"\n-            + workbenchConfigProvider.get().admin.loginUrl\n+            + workbenchConfig.admin.loginUrl\n             + \"\\\">\"\n-            + workbenchConfigProvider.get().admin.loginUrl\n+            + workbenchConfig.admin.loginUrl\n             + \"</a>\";\n \n     return new ImmutableMap.Builder<EmailSubstitutionField, String>()\n         .put(EmailSubstitutionField.ACTION, action)\n         .put(EmailSubstitutionField.BETA_ACCESS_REPORT, \"approved for use\")\n         .put(\n             EmailSubstitutionField.HEADER_IMG,\n-            cloudStorageService.getImageUrl(\"all_of_us_logo.png\"))\n+            cloudStorageServiceProvider.get().getImageUrl(\"all_of_us_logo.png\"))\n         .put(EmailSubstitutionField.USERNAME, username)\n         .build();\n   }\n \n+  private ImmutableMap<EmailSubstitutionField, String> freeTierDollarThresholdSubstitutionMap(\n+      final DbUser user,\n+      double currentUsage,\n+      double remainingBalance,\n+      final Optional<Instant> expirationTimeIfKnown) {\n+\n+    final String expirationDate =\n+        expirationTimeIfKnown\n+            .map(time -> formatDate(time.atZone(ZoneId.systemDefault()).toLocalDate()))\n+            .orElse(\"[unknown]\");\n+\n+    return new ImmutableMap.Builder<EmailSubstitutionField, String>()\n+        .put(\n+            EmailSubstitutionField.HEADER_IMG,\n+            cloudStorageServiceProvider.get().getImageUrl(\"all_of_us_logo.png\"))\n+        .put(EmailSubstitutionField.FIRST_NAME, user.getGivenName())\n+        .put(EmailSubstitutionField.LAST_NAME, user.getFamilyName())\n+        .put(EmailSubstitutionField.USED_CREDITS, formatCurrency(currentUsage))\n+        .put(EmailSubstitutionField.CREDIT_BALANCE, formatCurrency(remainingBalance))\n+        .put(EmailSubstitutionField.EXPIRATION_DATE, expirationDate)\n+        .build();\n+  }\n+\n+  private ImmutableMap<EmailSubstitutionField, String> freeTierTimeThresholdSubstitutionMap(\n+      DbUser user, long daysRemaining, double remainingDollarBalance, LocalDate expirationDate) {\n+    return new ImmutableMap.Builder<EmailSubstitutionField, String>()\n+        .put(\n+            EmailSubstitutionField.HEADER_IMG,\n+            cloudStorageServiceProvider.get().getImageUrl(\"all_of_us_logo.png\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY5NTQ5Mw=="}, "originalCommit": {"oid": "8b81f09414ac4ef1a8dda51a19e08322de76a612"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTQ1MjAwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNTo1Mzo1N1rOFhiGug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTowNTozM1rOFiWmZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcwNjEwNg==", "bodyText": "Can we add documentation for this class", "url": "https://github.com/all-of-us/workbench/pull/3021#discussion_r370706106", "createdAt": "2020-01-24T15:53:57Z", "author": {"login": "NehaBroad"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -34,7 +35,7 @@\n public class FreeTierBillingService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b81f09414ac4ef1a8dda51a19e08322de76a612"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1NDI4MQ==", "bodyText": "what documentation would you find useful here?", "url": "https://github.com/all-of-us/workbench/pull/3021#discussion_r370854281", "createdAt": "2020-01-24T21:39:15Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -34,7 +35,7 @@\n public class FreeTierBillingService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcwNjEwNg=="}, "originalCommit": {"oid": "8b81f09414ac4ef1a8dda51a19e08322de76a612"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NjE4Mg==", "bodyText": "just basic javacdoc comments describing the purpose of the class", "url": "https://github.com/all-of-us/workbench/pull/3021#discussion_r371566182", "createdAt": "2020-01-28T01:05:33Z", "author": {"login": "NehaBroad"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -34,7 +35,7 @@\n public class FreeTierBillingService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcwNjEwNg=="}, "originalCommit": {"oid": "8b81f09414ac4ef1a8dda51a19e08322de76a612"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3473, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}