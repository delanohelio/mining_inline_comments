{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NTg1NDQ5", "number": 3703, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODozOTozN1rOEIFtwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODowMzoyNVrOEIeOLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTE3Njk3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODozOTozN1rOGn13Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMToyMzoyNFrOGn7JdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzMDExNQ==", "bodyText": "Arguably I could split this one out, since it's not needed here, but for simplicity I went one class or file at a time.", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444430115", "createdAt": "2020-06-23T18:39:37Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserService.java", "diffHunk": "@@ -101,4 +101,8 @@ DbUser syncEraCommonsStatusUsingImpersonation(DbUser user, Agent agent)\n \n   // same as the above, but throw NotFoundException if not found\n   DbUser getByUsernameOrThrow(String username);\n+\n+  Optional<DbUser> getByDatabaseId(long databaseId);\n+\n+  void updateBypassTime(long userDatabaseId, AccessBypassRequest accessBypassRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "341326e2d53247b660391425d17e595769ac30cf"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUxNjcyNQ==", "bodyText": "Please delete the original ProfileController.updateBypass() because it will be very confusing to have both, even for a short time.", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444516725", "createdAt": "2020-06-23T21:23:24Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserService.java", "diffHunk": "@@ -101,4 +101,8 @@ DbUser syncEraCommonsStatusUsingImpersonation(DbUser user, Agent agent)\n \n   // same as the above, but throw NotFoundException if not found\n   DbUser getByUsernameOrThrow(String username);\n+\n+  Optional<DbUser> getByDatabaseId(long databaseId);\n+\n+  void updateBypassTime(long userDatabaseId, AccessBypassRequest accessBypassRequest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzMDExNQ=="}, "originalCommit": {"oid": "341326e2d53247b660391425d17e595769ac30cf"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTE4MTEyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo0MDo0MVrOGn15hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo0MDo0MVrOGn15hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzMDcyNg==", "bodyText": "I'd build this into a mapper, but it's slated to be removed soon.", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444430726", "createdAt": "2020-06-23T18:40:41Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -356,4 +358,23 @@ private void validateInstitution(Institution institutionRequest) {\n               });\n     }\n   }\n+\n+  @Override\n+  public DbInstitutionalAffiliation legacyInstitutionToDbInstitution(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "341326e2d53247b660391425d17e595769ac30cf"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTE4NTYxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo0MTo0M1rOGn18EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMTozMTozMVrOGn7Yag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzMTM3Nw==", "bodyText": "We should probably make a separate ProfileService interface and make this a ProfileServiceImpl.", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444431377", "createdAt": "2020-06-23T18:41:43Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -35,20 +56,32 @@\n \n   @Autowired\n   public ProfileService(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "341326e2d53247b660391425d17e595769ac30cf"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUyMDU1NA==", "bodyText": "I am planning to.", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444520554", "createdAt": "2020-06-23T21:31:31Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -35,20 +56,32 @@\n \n   @Autowired\n   public ProfileService(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzMTM3Nw=="}, "originalCommit": {"oid": "341326e2d53247b660391425d17e595769ac30cf"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTE4NzgwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo0MjoxNVrOGn19Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMTozNDoxN1rOGn7dJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzMTcxOQ==", "bodyText": "All this updateXForUser should be unchanged from what it was in the ProfileController.", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444431719", "createdAt": "2020-06-23T18:42:15Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -135,4 +168,155 @@ public void validateInstitutionalAffiliation(Profile profile) {\n       throw new BadRequestException(msg);\n     }\n   }\n+\n+  public void updateProfileForUser(DbUser user, Profile updatedProfile, Profile previousProfile) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "341326e2d53247b660391425d17e595769ac30cf"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUyMTQ1Mw==", "bodyText": "please rm original", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444521453", "createdAt": "2020-06-23T21:33:38Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -135,4 +168,155 @@ public void validateInstitutionalAffiliation(Profile profile) {\n       throw new BadRequestException(msg);\n     }\n   }\n+\n+  public void updateProfileForUser(DbUser user, Profile updatedProfile, Profile previousProfile) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzMTcxOQ=="}, "originalCommit": {"oid": "341326e2d53247b660391425d17e595769ac30cf"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUyMTc2NA==", "bodyText": "same goes for the others in this file", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444521764", "createdAt": "2020-06-23T21:34:17Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -135,4 +168,155 @@ public void validateInstitutionalAffiliation(Profile profile) {\n       throw new BadRequestException(msg);\n     }\n   }\n+\n+  public void updateProfileForUser(DbUser user, Profile updatedProfile, Profile previousProfile) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzMTcxOQ=="}, "originalCommit": {"oid": "341326e2d53247b660391425d17e595769ac30cf"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTE5MzY1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo0Mzo1MlrOGn2A8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo0Mzo1MlrOGn2A8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzMjYyNw==", "bodyText": "The rename here is because I felt like \"federated\" wan't really an abstraction, but a function of where the information is fetched from, which is an implementation detail.", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444432627", "createdAt": "2020-06-23T18:43:52Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminController.java", "diffHunk": "@@ -1,150 +1,36 @@\n package org.pmiops.workbench.workspaceadmin;\n \n-import com.google.monitoring.v3.Point;\n-import com.google.monitoring.v3.TimeSeries;\n-import com.google.protobuf.util.Timestamps;\n-import java.time.Duration;\n-import java.util.ArrayList;\n-import java.util.Comparator;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n import javax.annotation.Nullable;\n-import org.joda.time.DateTime;\n-import org.pmiops.workbench.actionaudit.ActionAuditQueryService;\n import org.pmiops.workbench.annotations.AuthorityRequired;\n import org.pmiops.workbench.api.WorkspaceAdminApiDelegate;\n-import org.pmiops.workbench.db.model.DbWorkspace;\n-import org.pmiops.workbench.exceptions.NotFoundException;\n-import org.pmiops.workbench.firecloud.FireCloudService;\n-import org.pmiops.workbench.firecloud.model.FirecloudWorkspace;\n-import org.pmiops.workbench.google.CloudMonitoringService;\n-import org.pmiops.workbench.model.AdminFederatedWorkspaceDetailsResponse;\n-import org.pmiops.workbench.model.AdminWorkspaceCloudStorageCounts;\n-import org.pmiops.workbench.model.AdminWorkspaceObjectsCounts;\n-import org.pmiops.workbench.model.AdminWorkspaceResources;\n import org.pmiops.workbench.model.Authority;\n import org.pmiops.workbench.model.CloudStorageTraffic;\n-import org.pmiops.workbench.model.ClusterStatus;\n-import org.pmiops.workbench.model.ListClusterResponse;\n-import org.pmiops.workbench.model.TimeSeriesPoint;\n-import org.pmiops.workbench.model.UserRole;\n+import org.pmiops.workbench.model.WorkspaceAdminView;\n import org.pmiops.workbench.model.WorkspaceAuditLogQueryResponse;\n-import org.pmiops.workbench.notebooks.LeonardoNotebooksClient;\n-import org.pmiops.workbench.utils.mappers.WorkspaceMapper;\n-import org.pmiops.workbench.workspaces.WorkspaceService;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.RestController;\n \n @RestController\n public class WorkspaceAdminController implements WorkspaceAdminApiDelegate {\n \n-  private static final Duration TRAILING_TIME_TO_QUERY = Duration.ofHours(6);\n-\n-  private ActionAuditQueryService actionAuditQueryService;\n-  private final CloudMonitoringService cloudMonitoringService;\n-  private final FireCloudService fireCloudService;\n-  private final LeonardoNotebooksClient leonardoNotebooksClient;\n   private final WorkspaceAdminService workspaceAdminService;\n-  private final WorkspaceMapper workspaceMapper;\n-  private final WorkspaceService workspaceService;\n \n   @Autowired\n-  public WorkspaceAdminController(\n-      ActionAuditQueryService actionAuditQueryService,\n-      CloudMonitoringService cloudMonitoringService,\n-      FireCloudService fireCloudService,\n-      LeonardoNotebooksClient leonardoNotebooksClient,\n-      WorkspaceAdminService workspaceAdminService,\n-      WorkspaceMapper workspaceMapper,\n-      WorkspaceService workspaceService) {\n-    this.actionAuditQueryService = actionAuditQueryService;\n-    this.cloudMonitoringService = cloudMonitoringService;\n-    this.fireCloudService = fireCloudService;\n-    this.leonardoNotebooksClient = leonardoNotebooksClient;\n+  public WorkspaceAdminController(WorkspaceAdminService workspaceAdminService) {\n     this.workspaceAdminService = workspaceAdminService;\n-    this.workspaceMapper = workspaceMapper;\n-    this.workspaceService = workspaceService;\n   }\n \n   @Override\n   @AuthorityRequired({Authority.RESEARCHER_DATA_VIEW})\n   public ResponseEntity<CloudStorageTraffic> getCloudStorageTraffic(String workspaceNamespace) {\n-    CloudStorageTraffic response = new CloudStorageTraffic().receivedBytes(new ArrayList<>());\n-\n-    for (TimeSeries timeSeries :\n-        cloudMonitoringService.getCloudStorageReceivedBytes(\n-            workspaceNamespace, TRAILING_TIME_TO_QUERY)) {\n-      for (Point point : timeSeries.getPointsList()) {\n-        response.addReceivedBytesItem(\n-            new TimeSeriesPoint()\n-                .timestamp(Timestamps.toMillis(point.getInterval().getEndTime()))\n-                .value(point.getValue().getDoubleValue()));\n-      }\n-    }\n-\n-    // Highcharts expects its data to be pre-sorted; we do this on the server side for convenience.\n-    response.getReceivedBytes().sort(Comparator.comparing(TimeSeriesPoint::getTimestamp));\n-\n-    return ResponseEntity.ok(response);\n+    return ResponseEntity.ok(workspaceAdminService.getCloudStorageTraffic(workspaceNamespace));\n   }\n \n   @Override\n   @AuthorityRequired({Authority.RESEARCHER_DATA_VIEW})\n-  public ResponseEntity<AdminFederatedWorkspaceDetailsResponse> getFederatedWorkspaceDetails(\n-      String workspaceNamespace) {\n-    Optional<DbWorkspace> workspaceMaybe =\n-        workspaceAdminService.getFirstWorkspaceByNamespace(workspaceNamespace);\n-    if (workspaceMaybe.isPresent()) {\n-      DbWorkspace dbWorkspace = workspaceMaybe.get();\n-\n-      String workspaceFirecloudName = dbWorkspace.getFirecloudName();\n-      List<UserRole> collaborators =\n-          workspaceService.getFirecloudUserRoles(workspaceNamespace, workspaceFirecloudName);\n-\n-      AdminWorkspaceObjectsCounts adminWorkspaceObjects =\n-          workspaceAdminService.getAdminWorkspaceObjects(dbWorkspace.getWorkspaceId());\n-\n-      AdminWorkspaceCloudStorageCounts adminWorkspaceCloudStorageCounts =\n-          workspaceAdminService.getAdminWorkspaceCloudStorageCounts(\n-              dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName());\n-\n-      List<org.pmiops.workbench.notebooks.model.ListClusterResponse> fcClusters =\n-          leonardoNotebooksClient.listClustersByProjectAsService(workspaceNamespace);\n-      List<ListClusterResponse> clusters =\n-          fcClusters.stream()\n-              .map(\n-                  fcCluster ->\n-                      new ListClusterResponse()\n-                          .clusterName(fcCluster.getClusterName())\n-                          .createdDate(fcCluster.getCreatedDate())\n-                          .dateAccessed(fcCluster.getDateAccessed())\n-                          .googleProject(fcCluster.getGoogleProject())\n-                          .labels(fcCluster.getLabels())\n-                          .status(ClusterStatus.fromValue(fcCluster.getStatus().toString())))\n-              .collect(Collectors.toList());\n-\n-      AdminWorkspaceResources resources =\n-          new AdminWorkspaceResources()\n-              .workspaceObjects(adminWorkspaceObjects)\n-              .cloudStorage(adminWorkspaceCloudStorageCounts)\n-              .clusters(clusters);\n-\n-      FirecloudWorkspace fcWorkspace =\n-          fireCloudService\n-              .getWorkspaceAsService(workspaceNamespace, workspaceFirecloudName)\n-              .getWorkspace();\n-\n-      return ResponseEntity.ok(\n-          new AdminFederatedWorkspaceDetailsResponse()\n-              .workspace(workspaceMapper.toApiWorkspace(dbWorkspace, fcWorkspace))\n-              .collaborators(collaborators)\n-              .resources(resources));\n-    } else {\n-      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n-    }\n+  public ResponseEntity<WorkspaceAdminView> getWorkspaceAdminView(String workspaceNamespace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "341326e2d53247b660391425d17e595769ac30cf"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTE5NjM2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo0NDoyNFrOGn2CbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo0NDoyNFrOGn2CbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzMzAwNQ==", "bodyText": "@als364 Some things have moved from here.", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444433005", "createdAt": "2020-06-23T18:44:24Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminController.java", "diffHunk": "@@ -1,150 +1,36 @@\n package org.pmiops.workbench.workspaceadmin;\n \n-import com.google.monitoring.v3.Point;\n-import com.google.monitoring.v3.TimeSeries;\n-import com.google.protobuf.util.Timestamps;\n-import java.time.Duration;\n-import java.util.ArrayList;\n-import java.util.Comparator;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n import javax.annotation.Nullable;\n-import org.joda.time.DateTime;\n-import org.pmiops.workbench.actionaudit.ActionAuditQueryService;\n import org.pmiops.workbench.annotations.AuthorityRequired;\n import org.pmiops.workbench.api.WorkspaceAdminApiDelegate;\n-import org.pmiops.workbench.db.model.DbWorkspace;\n-import org.pmiops.workbench.exceptions.NotFoundException;\n-import org.pmiops.workbench.firecloud.FireCloudService;\n-import org.pmiops.workbench.firecloud.model.FirecloudWorkspace;\n-import org.pmiops.workbench.google.CloudMonitoringService;\n-import org.pmiops.workbench.model.AdminFederatedWorkspaceDetailsResponse;\n-import org.pmiops.workbench.model.AdminWorkspaceCloudStorageCounts;\n-import org.pmiops.workbench.model.AdminWorkspaceObjectsCounts;\n-import org.pmiops.workbench.model.AdminWorkspaceResources;\n import org.pmiops.workbench.model.Authority;\n import org.pmiops.workbench.model.CloudStorageTraffic;\n-import org.pmiops.workbench.model.ClusterStatus;\n-import org.pmiops.workbench.model.ListClusterResponse;\n-import org.pmiops.workbench.model.TimeSeriesPoint;\n-import org.pmiops.workbench.model.UserRole;\n+import org.pmiops.workbench.model.WorkspaceAdminView;\n import org.pmiops.workbench.model.WorkspaceAuditLogQueryResponse;\n-import org.pmiops.workbench.notebooks.LeonardoNotebooksClient;\n-import org.pmiops.workbench.utils.mappers.WorkspaceMapper;\n-import org.pmiops.workbench.workspaces.WorkspaceService;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.RestController;\n \n @RestController\n public class WorkspaceAdminController implements WorkspaceAdminApiDelegate {\n \n-  private static final Duration TRAILING_TIME_TO_QUERY = Duration.ofHours(6);\n-\n-  private ActionAuditQueryService actionAuditQueryService;\n-  private final CloudMonitoringService cloudMonitoringService;\n-  private final FireCloudService fireCloudService;\n-  private final LeonardoNotebooksClient leonardoNotebooksClient;\n   private final WorkspaceAdminService workspaceAdminService;\n-  private final WorkspaceMapper workspaceMapper;\n-  private final WorkspaceService workspaceService;\n \n   @Autowired\n-  public WorkspaceAdminController(\n-      ActionAuditQueryService actionAuditQueryService,\n-      CloudMonitoringService cloudMonitoringService,\n-      FireCloudService fireCloudService,\n-      LeonardoNotebooksClient leonardoNotebooksClient,\n-      WorkspaceAdminService workspaceAdminService,\n-      WorkspaceMapper workspaceMapper,\n-      WorkspaceService workspaceService) {\n-    this.actionAuditQueryService = actionAuditQueryService;\n-    this.cloudMonitoringService = cloudMonitoringService;\n-    this.fireCloudService = fireCloudService;\n-    this.leonardoNotebooksClient = leonardoNotebooksClient;\n+  public WorkspaceAdminController(WorkspaceAdminService workspaceAdminService) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "341326e2d53247b660391425d17e595769ac30cf"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTIwMDU1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo0NTo0MFrOGn2FLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo0NTo0MFrOGn2FLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzMzcxMQ==", "bodyText": "one could argue that the WorkspaceAdminController should depend on the ActionAuditQueryService directly instead of putting getAuditLogEntries() here.", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444433711", "createdAt": "2020-06-23T18:45:40Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminController.java", "diffHunk": "@@ -163,19 +49,8 @@ public WorkspaceAdminController(\n       Integer limit,\n       Long afterMillis,\n       @Nullable Long beforeMillisNullable) {\n-    final long workspaceDatabaseId =\n-        workspaceAdminService\n-            .getFirstWorkspaceByNamespace(workspaceNamespace)\n-            .map(DbWorkspace::getWorkspaceId)\n-            .orElseThrow(\n-                () ->\n-                    new NotFoundException(\n-                        String.format(\n-                            \"No workspace found with Firecloud namespace %s\", workspaceNamespace)));\n-    final DateTime after = new DateTime(afterMillis);\n-    final DateTime before =\n-        Optional.ofNullable(beforeMillisNullable).map(DateTime::new).orElse(DateTime.now());\n     return ResponseEntity.ok(\n-        actionAuditQueryService.queryEventsForWorkspace(workspaceDatabaseId, limit, after, before));\n+        workspaceAdminService.getAuditLogEntries(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "341326e2d53247b660391425d17e595769ac30cf"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTIxMDgxOnYy", "diffSide": "LEFT", "path": "api/src/test/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo0ODozNFrOGn2LsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo0ODozNFrOGn2LsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzNTM3Ng==", "bodyText": "I killed these two, because it boiled down to m = mock(); assert(m); after the method moved.", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444435376", "createdAt": "2020-06-23T18:48:34Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminControllerTest.java", "diffHunk": "@@ -192,126 +169,13 @@ public void setUp() {\n         .thenReturn(fcWorkspaceResponse);\n   }\n \n-  @Test\n-  public void getFederatedWorkspaceDetails() {\n-    ResponseEntity<AdminFederatedWorkspaceDetailsResponse> response =\n-        workspaceAdminController.getFederatedWorkspaceDetails(WORKSPACE_NAMESPACE);\n-    assertThat(response.getStatusCodeValue()).isEqualTo(200);\n-\n-    AdminFederatedWorkspaceDetailsResponse workspaceDetailsResponse = response.getBody();\n-    assertThat(workspaceDetailsResponse.getWorkspace().getNamespace())\n-        .isEqualTo(WORKSPACE_NAMESPACE);\n-    assertThat(workspaceDetailsResponse.getWorkspace().getName()).isEqualTo(WORKSPACE_NAME);\n-\n-    AdminWorkspaceResources resources = workspaceDetailsResponse.getResources();\n-    AdminWorkspaceObjectsCounts objectsCounts = resources.getWorkspaceObjects();\n-    assertThat(objectsCounts.getCohortCount()).isEqualTo(1);\n-    assertThat(objectsCounts.getConceptSetCount()).isEqualTo(2);\n-    assertThat(objectsCounts.getDatasetCount()).isEqualTo(3);\n-\n-    AdminWorkspaceCloudStorageCounts cloudStorageCounts = resources.getCloudStorage();\n-    assertThat(cloudStorageCounts.getNotebookFileCount()).isEqualTo(1);\n-    assertThat(cloudStorageCounts.getNonNotebookFileCount()).isEqualTo(2);\n-    assertThat(cloudStorageCounts.getStorageBytesUsed()).isEqualTo(123456789L);\n-\n-    List<ListClusterResponse> clusters = resources.getClusters();\n-    assertThat(clusters.size()).isEqualTo(1);\n-    ListClusterResponse cluster = clusters.get(0);\n-    assertThat(cluster.getClusterName()).isEqualTo(\"cluster\");\n-    assertThat(cluster.getGoogleProject()).isEqualTo(\"google-project\");\n-    assertThat(cluster.getStatus()).isEqualTo(ClusterStatus.STOPPED);\n-  }\n-\n-  @Test\n-  public void getFederatedWorkspaceDetails_404sWhenNotFound() {\n-    ResponseEntity<AdminFederatedWorkspaceDetailsResponse> response =\n-        workspaceAdminController.getFederatedWorkspaceDetails(NONSENSE_NAMESPACE);\n-    assertThat(response.getStatusCodeValue()).isEqualTo(404);\n-  }\n-\n-  @Test\n-  public void getCloudStorageTraffic_sortsPointsByTimestamp() {\n-    TimeSeries timeSeries =\n-        TimeSeries.newBuilder()\n-            .addPoints(\n-                Point.newBuilder()\n-                    .setInterval(TimeInterval.newBuilder().setEndTime(Timestamps.fromMillis(2000)))\n-                    .setValue(TypedValue.newBuilder().setDoubleValue(1234)))\n-            .addPoints(\n-                Point.newBuilder()\n-                    .setInterval(TimeInterval.newBuilder().setEndTime(Timestamps.fromMillis(1000)))\n-                    .setValue(TypedValue.newBuilder().setDoubleValue(1234)))\n-            .build();\n-\n-    when(mockCloudMonitoringService.getCloudStorageReceivedBytes(anyString(), any(Duration.class)))\n-        .thenReturn(Arrays.asList(timeSeries));\n-\n-    CloudStorageTraffic cloudStorageTraffic =\n-        workspaceAdminController.getCloudStorageTraffic(WORKSPACE_NAMESPACE).getBody();\n-\n-    assertThat(\n-            cloudStorageTraffic.getReceivedBytes().stream()\n-                .map(timeSeriesPoint -> timeSeriesPoint.getTimestamp())\n-                .collect(Collectors.toList()))\n-        .containsExactly(1000L, 2000L);\n-  }\n-\n-  // TODO(jaycarlton) use  WorkspaceMapper.toDbWorkspace() once it's available RW 4803\n-  private DbWorkspace createDbWorkspaceStub(Workspace workspace) {\n-    DbWorkspace dbWorkspace = new DbWorkspace();\n-    dbWorkspace.setWorkspaceId(DB_WORKSPACE_ID);\n-    dbWorkspace.setName(workspace.getName());\n-    dbWorkspace.setWorkspaceNamespace(workspace.getNamespace());\n-    // a.k.a. FirecloudWorkspace.name\n-    dbWorkspace.setFirecloudName(workspace.getId()); // DB_WORKSPACE_FIRECLOUD_NAME);\n-    ResearchPurpose researchPurpose = workspace.getResearchPurpose();\n-    dbWorkspace.setDiseaseFocusedResearch(researchPurpose.getDiseaseFocusedResearch());\n-    dbWorkspace.setDiseaseOfFocus(researchPurpose.getDiseaseOfFocus());\n-    dbWorkspace.setMethodsDevelopment(researchPurpose.getMethodsDevelopment());\n-    dbWorkspace.setControlSet(researchPurpose.getControlSet());\n-    dbWorkspace.setAncestry(researchPurpose.getAncestry());\n-    dbWorkspace.setCommercialPurpose(researchPurpose.getCommercialPurpose());\n-    dbWorkspace.setSocialBehavioral(researchPurpose.getSocialBehavioral());\n-    dbWorkspace.setPopulationHealth(researchPurpose.getPopulationHealth());\n-    dbWorkspace.setEducational(researchPurpose.getEducational());\n-    dbWorkspace.setDrugDevelopment(researchPurpose.getDrugDevelopment());\n-\n-    dbWorkspace.setSpecificPopulationsEnum(new HashSet<>(researchPurpose.getPopulationDetails()));\n-    dbWorkspace.setAdditionalNotes(researchPurpose.getAdditionalNotes());\n-    dbWorkspace.setReasonForAllOfUs(researchPurpose.getReasonForAllOfUs());\n-    dbWorkspace.setIntendedStudy(researchPurpose.getIntendedStudy());\n-    dbWorkspace.setAnticipatedFindings(researchPurpose.getAnticipatedFindings());\n-    return dbWorkspace;\n-  }\n-\n-  @Test\n-  public void testGetAuditLogEntries() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "341326e2d53247b660391425d17e595769ac30cf"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTIxMzk0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-workspace.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo0OTozMVrOGn2NsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo0OTozMVrOGn2NsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzNTg4OA==", "bodyText": "@als364 FYI. I'm not sure if there are unit tests covering this page yet, but I made it compile.", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444435888", "createdAt": "2020-06-23T18:49:31Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/pages/admin/admin-workspace.tsx", "diffHunk": "@@ -17,8 +17,8 @@ import {\n   getSelectedPrimaryPurposeItems\n } from 'app/utils/research-purpose';\n import {\n-  AdminFederatedWorkspaceDetailsResponse,\n-  CloudStorageTraffic, ListClusterResponse,\n+  CloudStorageTraffic,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "341326e2d53247b660391425d17e595769ac30cf"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTIxNTgyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-workspace.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo1MDowMFrOGn2O3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo1MDowMFrOGn2O3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzNjE4OQ==", "bodyText": "N.B. the UserRole object's email is really a username.", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444436189", "createdAt": "2020-06-23T18:50:00Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/pages/admin/admin-workspace.tsx", "diffHunk": "@@ -228,9 +228,9 @@ class AdminWorkspaceImpl extends React.Component<UrlParamsProps, State> {\n           </div>\n           <h3>Collaborators</h3>\n           <div className='collaborators' style={{marginTop: '1rem'}}>\n-            {collaborators.map((userRole, i) =>\n+            {collaborators.map((workspaceUserAdminView, i) =>\n               <div key={i}>\n-                {userRole.email + ': ' + userRole.role}\n+                {workspaceUserAdminView.userModel.userName + ': ' + workspaceUserAdminView.role}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "341326e2d53247b660391425d17e595769ac30cf"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTcxNTM0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMToyNjo1NFrOGn7PlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMzo1ODoxMlrOGoTYEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUxODI5Mw==", "bodyText": "please rm the original ProfileController.FROM_CLIENT_INSTITUTIONAL_AFFILIATION and copy over its comment", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444518293", "createdAt": "2020-06-23T21:26:54Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionService.java", "diffHunk": "@@ -106,4 +108,13 @@ boolean validateAffiliation(\n    * @return\n    */\n   boolean validateOperationalUser(DbInstitution institution);\n+\n+  /**\n+   * @deprecated\n+   * @param institutionalAffiliation\n+   * @return\n+   */\n+  @Deprecated\n+  DbInstitutionalAffiliation legacyInstitutionToDbInstitution(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57dd447b5fd71a41d78f3a3dc9a98ee17dbc25de"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkxMzY4MA==", "bodyText": "Oh, I think I dropped all my ProfileController changes \ud83e\udd14", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444913680", "createdAt": "2020-06-24T13:58:12Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionService.java", "diffHunk": "@@ -106,4 +108,13 @@ boolean validateAffiliation(\n    * @return\n    */\n   boolean validateOperationalUser(DbInstitution institution);\n+\n+  /**\n+   * @deprecated\n+   * @param institutionalAffiliation\n+   * @return\n+   */\n+  @Deprecated\n+  DbInstitutionalAffiliation legacyInstitutionToDbInstitution(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUxODI5Mw=="}, "originalCommit": {"oid": "57dd447b5fd71a41d78f3a3dc9a98ee17dbc25de"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTczMjE4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMTozMjozMlrOGn7aHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDowMTo1NFrOGoTicg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUyMDk4OQ==", "bodyText": "nit: let's keep this in the same order as the param list", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444520989", "createdAt": "2020-06-23T21:32:32Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -35,20 +56,32 @@\n \n   @Autowired\n   public ProfileService(\n+      AddressMapper addressMapper,\n+      Clock clock,\n+      DemographicSurveyMapper demographicSurveyMapper,\n       FreeTierBillingService freeTierBillingService,\n       InstitutionDao institutionDao,\n       InstitutionService institutionService,\n+      ProfileAuditor profileAuditor,\n       ProfileMapper profileMapper,\n+      Provider<DbUser> userProvider,\n+      Provider<WorkbenchConfig> workbenchConfigProvider,\n       UserDao userDao,\n       UserService userService,\n       UserTermsOfServiceDao userTermsOfServiceDao,\n       VerifiedInstitutionalAffiliationDao verifiedInstitutionalAffiliationDao,\n       VerifiedInstitutionalAffiliationMapper verifiedInstitutionalAffiliationMapper) {\n+    this.addressMapper = addressMapper;\n+    this.clock = clock;\n+    this.demographicSurveyMapper = demographicSurveyMapper;\n     this.freeTierBillingService = freeTierBillingService;\n     this.institutionDao = institutionDao;\n     this.institutionService = institutionService;\n+    this.profileAuditor = profileAuditor;\n     this.profileMapper = profileMapper;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n     this.userDao = userDao;\n+    this.userProvider = userProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57dd447b5fd71a41d78f3a3dc9a98ee17dbc25de"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkxNjMzOA==", "bodyText": "It seems easier to maintain and look things up to have them both alphabetical, but I see your point.", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444916338", "createdAt": "2020-06-24T14:01:54Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -35,20 +56,32 @@\n \n   @Autowired\n   public ProfileService(\n+      AddressMapper addressMapper,\n+      Clock clock,\n+      DemographicSurveyMapper demographicSurveyMapper,\n       FreeTierBillingService freeTierBillingService,\n       InstitutionDao institutionDao,\n       InstitutionService institutionService,\n+      ProfileAuditor profileAuditor,\n       ProfileMapper profileMapper,\n+      Provider<DbUser> userProvider,\n+      Provider<WorkbenchConfig> workbenchConfigProvider,\n       UserDao userDao,\n       UserService userService,\n       UserTermsOfServiceDao userTermsOfServiceDao,\n       VerifiedInstitutionalAffiliationDao verifiedInstitutionalAffiliationDao,\n       VerifiedInstitutionalAffiliationMapper verifiedInstitutionalAffiliationMapper) {\n+    this.addressMapper = addressMapper;\n+    this.clock = clock;\n+    this.demographicSurveyMapper = demographicSurveyMapper;\n     this.freeTierBillingService = freeTierBillingService;\n     this.institutionDao = institutionDao;\n     this.institutionService = institutionService;\n+    this.profileAuditor = profileAuditor;\n     this.profileMapper = profileMapper;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n     this.userDao = userDao;\n+    this.userProvider = userProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUyMDk4OQ=="}, "originalCommit": {"oid": "57dd447b5fd71a41d78f3a3dc9a98ee17dbc25de"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTc3NTkzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMTo0Nzo1N1rOGn71fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMTo0Nzo1N1rOGn71fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUyNzk5Nw==", "bodyText": "yes", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444527997", "createdAt": "2020-06-23T21:47:57Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminServiceImpl.java", "diffHunk": "@@ -79,17 +132,120 @@ public AdminWorkspaceCloudStorageCounts getAdminWorkspaceCloudStorageCounts(\n         .storageBytesUsed(storageSizeBytes);\n   }\n \n+  @Override\n+  public CloudStorageTraffic getCloudStorageTraffic(String workspaceNamespace) {\n+    CloudStorageTraffic response = new CloudStorageTraffic().receivedBytes(new ArrayList<>());\n+\n+    for (TimeSeries timeSeries :\n+        cloudMonitoringService.getCloudStorageReceivedBytes(\n+            workspaceNamespace, TRAILING_TIME_TO_QUERY)) {\n+      for (Point point : timeSeries.getPointsList()) {\n+        response.addReceivedBytesItem(\n+            new TimeSeriesPoint()\n+                .timestamp(Timestamps.toMillis(point.getInterval().getEndTime()))\n+                .value(point.getValue().getDoubleValue()));\n+      }\n+    }\n+\n+    response.getReceivedBytes().sort(Comparator.comparing(TimeSeriesPoint::getTimestamp));\n+    return response;\n+  }\n+\n+  @Override\n+  public WorkspaceAdminView getWorkspaceAdminView(String workspaceNamespace) {\n+    final DbWorkspace dbWorkspace =\n+        getFirstWorkspaceByNamespace(workspaceNamespace)\n+            .orElseThrow(\n+                () ->\n+                    new NotFoundException(\n+                        String.format(\"No workspace found for namespace %s\", workspaceNamespace)));\n+\n+    final String workspaceFirecloudName = dbWorkspace.getFirecloudName();\n+\n+    final List<WorkspaceUserAdminView> collaborators =\n+        workspaceService.getFirecloudUserRoles(workspaceNamespace, workspaceFirecloudName).stream()\n+            .map(this::toWorkspaceUserAdminView)\n+            .collect(Collectors.toList());\n+\n+    final AdminWorkspaceObjectsCounts adminWorkspaceObjects =\n+        getAdminWorkspaceObjects(dbWorkspace.getWorkspaceId());\n+\n+    final AdminWorkspaceCloudStorageCounts adminWorkspaceCloudStorageCounts =\n+        getAdminWorkspaceCloudStorageCounts(\n+            dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName());\n+\n+    final List<ListClusterResponse> workbenchListClusterResponses =\n+        leonardoNotebooksClient.listClustersByProjectAsService(workspaceNamespace).stream()\n+            .map(firecloudMapper::toApiListClusterResponse)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57dd447b5fd71a41d78f3a3dc9a98ee17dbc25de"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTc5NDQ4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMTo1NDo1NlrOGn8A-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODowNDowOVrOGodSYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUzMDkzOQ==", "bodyText": "So this couldn't be a new userMapper.toWorkspaceUserAdminView(userRole) ?", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444530939", "createdAt": "2020-06-23T21:54:56Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminServiceImpl.java", "diffHunk": "@@ -79,17 +132,120 @@ public AdminWorkspaceCloudStorageCounts getAdminWorkspaceCloudStorageCounts(\n         .storageBytesUsed(storageSizeBytes);\n   }\n \n+  @Override\n+  public CloudStorageTraffic getCloudStorageTraffic(String workspaceNamespace) {\n+    CloudStorageTraffic response = new CloudStorageTraffic().receivedBytes(new ArrayList<>());\n+\n+    for (TimeSeries timeSeries :\n+        cloudMonitoringService.getCloudStorageReceivedBytes(\n+            workspaceNamespace, TRAILING_TIME_TO_QUERY)) {\n+      for (Point point : timeSeries.getPointsList()) {\n+        response.addReceivedBytesItem(\n+            new TimeSeriesPoint()\n+                .timestamp(Timestamps.toMillis(point.getInterval().getEndTime()))\n+                .value(point.getValue().getDoubleValue()));\n+      }\n+    }\n+\n+    response.getReceivedBytes().sort(Comparator.comparing(TimeSeriesPoint::getTimestamp));\n+    return response;\n+  }\n+\n+  @Override\n+  public WorkspaceAdminView getWorkspaceAdminView(String workspaceNamespace) {\n+    final DbWorkspace dbWorkspace =\n+        getFirstWorkspaceByNamespace(workspaceNamespace)\n+            .orElseThrow(\n+                () ->\n+                    new NotFoundException(\n+                        String.format(\"No workspace found for namespace %s\", workspaceNamespace)));\n+\n+    final String workspaceFirecloudName = dbWorkspace.getFirecloudName();\n+\n+    final List<WorkspaceUserAdminView> collaborators =\n+        workspaceService.getFirecloudUserRoles(workspaceNamespace, workspaceFirecloudName).stream()\n+            .map(this::toWorkspaceUserAdminView)\n+            .collect(Collectors.toList());\n+\n+    final AdminWorkspaceObjectsCounts adminWorkspaceObjects =\n+        getAdminWorkspaceObjects(dbWorkspace.getWorkspaceId());\n+\n+    final AdminWorkspaceCloudStorageCounts adminWorkspaceCloudStorageCounts =\n+        getAdminWorkspaceCloudStorageCounts(\n+            dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName());\n+\n+    final List<ListClusterResponse> workbenchListClusterResponses =\n+        leonardoNotebooksClient.listClustersByProjectAsService(workspaceNamespace).stream()\n+            .map(firecloudMapper::toApiListClusterResponse)\n+            .collect(Collectors.toList());\n+\n+    final AdminWorkspaceResources adminWorkspaceResources =\n+        new AdminWorkspaceResources()\n+            .workspaceObjects(adminWorkspaceObjects)\n+            .cloudStorage(adminWorkspaceCloudStorageCounts)\n+            .clusters(workbenchListClusterResponses);\n+\n+    final FirecloudWorkspace firecloudWorkspace =\n+        fireCloudService\n+            .getWorkspaceAsService(workspaceNamespace, workspaceFirecloudName)\n+            .getWorkspace();\n+\n+    return new WorkspaceAdminView()\n+        .workspace(workspaceMapper.toApiWorkspace(dbWorkspace, firecloudWorkspace))\n+        .collaborators(collaborators)\n+        .resources(adminWorkspaceResources);\n+  }\n+\n+  @Override\n+  public WorkspaceAuditLogQueryResponse getAuditLogEntries(\n+      String workspaceNamespace,\n+      Integer limit,\n+      Long afterMillis,\n+      @Nullable Long beforeMillisNullable) {\n+    final long workspaceDatabaseId =\n+        getFirstWorkspaceByNamespace(workspaceNamespace)\n+            .map(DbWorkspace::getWorkspaceId)\n+            .orElseThrow(\n+                () ->\n+                    new NotFoundException(\n+                        String.format(\n+                            \"No workspace found with Firecloud namespace %s\", workspaceNamespace)));\n+    final DateTime after = new DateTime(afterMillis);\n+    final DateTime before =\n+        Optional.ofNullable(beforeMillisNullable).map(DateTime::new).orElse(DateTime.now());\n+    return actionAuditQueryService.queryEventsForWorkspace(\n+        workspaceDatabaseId, limit, after, before);\n+  }\n+\n   private int getNonNotebookFileCount(String bucketName) {\n-    return cloudStorageService\n-        .getBlobListForPrefix(bucketName, NotebooksService.NOTEBOOKS_WORKSPACE_DIRECTORY).stream()\n-        .filter(blob -> !NotebooksService.NOTEBOOK_PATTERN.matcher(blob.getName()).matches())\n-        .collect(Collectors.toList())\n-        .size();\n+    return (int)\n+        cloudStorageService\n+            .getBlobListForPrefix(bucketName, NotebooksService.NOTEBOOKS_WORKSPACE_DIRECTORY)\n+            .stream()\n+            .filter(b -> !notebooksService.isNotebookBlob(b))\n+            .count();\n   }\n \n   private long getStorageSizeBytes(String bucketName) {\n     return cloudStorageService.getBlobList(bucketName).stream()\n         .map(BlobInfo::getSize)\n         .reduce(0L, Long::sum);\n   }\n+\n+  // This is somewhat awkward, as we want to tolerate collaborators who aren't in the database\n+  // anymore.\n+  // TODO(jaycarlton): is this really what we want, or can we make this return an Optional that's\n+  // empty\n+  // when the user isn't in the DB. The assumption is that the fields agree between the UserRole and\n+  // the DbUser, but we don't check that here.\n+  private WorkspaceUserAdminView toWorkspaceUserAdminView(UserRole userRole) {\n+    return userService\n+        .getByUsername(userRole.getEmail())\n+        .map(u -> userMapper.toWorkspaceUserAdminView(u, userRole))\n+        .orElse(\n+            new WorkspaceUserAdminView() // the MapStruct-generated method won't handle a partial", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57dd447b5fd71a41d78f3a3dc9a98ee17dbc25de"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyMTcwOA==", "bodyText": "It didn't feel like a win. I don't like adding incomplete mapping methods to the mappers. This was an odd case where we try to return partial information on an invalid user, and I want the mapper to operate on valid users only more or less.", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444921708", "createdAt": "2020-06-24T14:09:46Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminServiceImpl.java", "diffHunk": "@@ -79,17 +132,120 @@ public AdminWorkspaceCloudStorageCounts getAdminWorkspaceCloudStorageCounts(\n         .storageBytesUsed(storageSizeBytes);\n   }\n \n+  @Override\n+  public CloudStorageTraffic getCloudStorageTraffic(String workspaceNamespace) {\n+    CloudStorageTraffic response = new CloudStorageTraffic().receivedBytes(new ArrayList<>());\n+\n+    for (TimeSeries timeSeries :\n+        cloudMonitoringService.getCloudStorageReceivedBytes(\n+            workspaceNamespace, TRAILING_TIME_TO_QUERY)) {\n+      for (Point point : timeSeries.getPointsList()) {\n+        response.addReceivedBytesItem(\n+            new TimeSeriesPoint()\n+                .timestamp(Timestamps.toMillis(point.getInterval().getEndTime()))\n+                .value(point.getValue().getDoubleValue()));\n+      }\n+    }\n+\n+    response.getReceivedBytes().sort(Comparator.comparing(TimeSeriesPoint::getTimestamp));\n+    return response;\n+  }\n+\n+  @Override\n+  public WorkspaceAdminView getWorkspaceAdminView(String workspaceNamespace) {\n+    final DbWorkspace dbWorkspace =\n+        getFirstWorkspaceByNamespace(workspaceNamespace)\n+            .orElseThrow(\n+                () ->\n+                    new NotFoundException(\n+                        String.format(\"No workspace found for namespace %s\", workspaceNamespace)));\n+\n+    final String workspaceFirecloudName = dbWorkspace.getFirecloudName();\n+\n+    final List<WorkspaceUserAdminView> collaborators =\n+        workspaceService.getFirecloudUserRoles(workspaceNamespace, workspaceFirecloudName).stream()\n+            .map(this::toWorkspaceUserAdminView)\n+            .collect(Collectors.toList());\n+\n+    final AdminWorkspaceObjectsCounts adminWorkspaceObjects =\n+        getAdminWorkspaceObjects(dbWorkspace.getWorkspaceId());\n+\n+    final AdminWorkspaceCloudStorageCounts adminWorkspaceCloudStorageCounts =\n+        getAdminWorkspaceCloudStorageCounts(\n+            dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName());\n+\n+    final List<ListClusterResponse> workbenchListClusterResponses =\n+        leonardoNotebooksClient.listClustersByProjectAsService(workspaceNamespace).stream()\n+            .map(firecloudMapper::toApiListClusterResponse)\n+            .collect(Collectors.toList());\n+\n+    final AdminWorkspaceResources adminWorkspaceResources =\n+        new AdminWorkspaceResources()\n+            .workspaceObjects(adminWorkspaceObjects)\n+            .cloudStorage(adminWorkspaceCloudStorageCounts)\n+            .clusters(workbenchListClusterResponses);\n+\n+    final FirecloudWorkspace firecloudWorkspace =\n+        fireCloudService\n+            .getWorkspaceAsService(workspaceNamespace, workspaceFirecloudName)\n+            .getWorkspace();\n+\n+    return new WorkspaceAdminView()\n+        .workspace(workspaceMapper.toApiWorkspace(dbWorkspace, firecloudWorkspace))\n+        .collaborators(collaborators)\n+        .resources(adminWorkspaceResources);\n+  }\n+\n+  @Override\n+  public WorkspaceAuditLogQueryResponse getAuditLogEntries(\n+      String workspaceNamespace,\n+      Integer limit,\n+      Long afterMillis,\n+      @Nullable Long beforeMillisNullable) {\n+    final long workspaceDatabaseId =\n+        getFirstWorkspaceByNamespace(workspaceNamespace)\n+            .map(DbWorkspace::getWorkspaceId)\n+            .orElseThrow(\n+                () ->\n+                    new NotFoundException(\n+                        String.format(\n+                            \"No workspace found with Firecloud namespace %s\", workspaceNamespace)));\n+    final DateTime after = new DateTime(afterMillis);\n+    final DateTime before =\n+        Optional.ofNullable(beforeMillisNullable).map(DateTime::new).orElse(DateTime.now());\n+    return actionAuditQueryService.queryEventsForWorkspace(\n+        workspaceDatabaseId, limit, after, before);\n+  }\n+\n   private int getNonNotebookFileCount(String bucketName) {\n-    return cloudStorageService\n-        .getBlobListForPrefix(bucketName, NotebooksService.NOTEBOOKS_WORKSPACE_DIRECTORY).stream()\n-        .filter(blob -> !NotebooksService.NOTEBOOK_PATTERN.matcher(blob.getName()).matches())\n-        .collect(Collectors.toList())\n-        .size();\n+    return (int)\n+        cloudStorageService\n+            .getBlobListForPrefix(bucketName, NotebooksService.NOTEBOOKS_WORKSPACE_DIRECTORY)\n+            .stream()\n+            .filter(b -> !notebooksService.isNotebookBlob(b))\n+            .count();\n   }\n \n   private long getStorageSizeBytes(String bucketName) {\n     return cloudStorageService.getBlobList(bucketName).stream()\n         .map(BlobInfo::getSize)\n         .reduce(0L, Long::sum);\n   }\n+\n+  // This is somewhat awkward, as we want to tolerate collaborators who aren't in the database\n+  // anymore.\n+  // TODO(jaycarlton): is this really what we want, or can we make this return an Optional that's\n+  // empty\n+  // when the user isn't in the DB. The assumption is that the fields agree between the UserRole and\n+  // the DbUser, but we don't check that here.\n+  private WorkspaceUserAdminView toWorkspaceUserAdminView(UserRole userRole) {\n+    return userService\n+        .getByUsername(userRole.getEmail())\n+        .map(u -> userMapper.toWorkspaceUserAdminView(u, userRole))\n+        .orElse(\n+            new WorkspaceUserAdminView() // the MapStruct-generated method won't handle a partial", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUzMDkzOQ=="}, "originalCommit": {"oid": "57dd447b5fd71a41d78f3a3dc9a98ee17dbc25de"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3NjA2Ng==", "bodyText": "ok", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r445076066", "createdAt": "2020-06-24T18:04:09Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminServiceImpl.java", "diffHunk": "@@ -79,17 +132,120 @@ public AdminWorkspaceCloudStorageCounts getAdminWorkspaceCloudStorageCounts(\n         .storageBytesUsed(storageSizeBytes);\n   }\n \n+  @Override\n+  public CloudStorageTraffic getCloudStorageTraffic(String workspaceNamespace) {\n+    CloudStorageTraffic response = new CloudStorageTraffic().receivedBytes(new ArrayList<>());\n+\n+    for (TimeSeries timeSeries :\n+        cloudMonitoringService.getCloudStorageReceivedBytes(\n+            workspaceNamespace, TRAILING_TIME_TO_QUERY)) {\n+      for (Point point : timeSeries.getPointsList()) {\n+        response.addReceivedBytesItem(\n+            new TimeSeriesPoint()\n+                .timestamp(Timestamps.toMillis(point.getInterval().getEndTime()))\n+                .value(point.getValue().getDoubleValue()));\n+      }\n+    }\n+\n+    response.getReceivedBytes().sort(Comparator.comparing(TimeSeriesPoint::getTimestamp));\n+    return response;\n+  }\n+\n+  @Override\n+  public WorkspaceAdminView getWorkspaceAdminView(String workspaceNamespace) {\n+    final DbWorkspace dbWorkspace =\n+        getFirstWorkspaceByNamespace(workspaceNamespace)\n+            .orElseThrow(\n+                () ->\n+                    new NotFoundException(\n+                        String.format(\"No workspace found for namespace %s\", workspaceNamespace)));\n+\n+    final String workspaceFirecloudName = dbWorkspace.getFirecloudName();\n+\n+    final List<WorkspaceUserAdminView> collaborators =\n+        workspaceService.getFirecloudUserRoles(workspaceNamespace, workspaceFirecloudName).stream()\n+            .map(this::toWorkspaceUserAdminView)\n+            .collect(Collectors.toList());\n+\n+    final AdminWorkspaceObjectsCounts adminWorkspaceObjects =\n+        getAdminWorkspaceObjects(dbWorkspace.getWorkspaceId());\n+\n+    final AdminWorkspaceCloudStorageCounts adminWorkspaceCloudStorageCounts =\n+        getAdminWorkspaceCloudStorageCounts(\n+            dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName());\n+\n+    final List<ListClusterResponse> workbenchListClusterResponses =\n+        leonardoNotebooksClient.listClustersByProjectAsService(workspaceNamespace).stream()\n+            .map(firecloudMapper::toApiListClusterResponse)\n+            .collect(Collectors.toList());\n+\n+    final AdminWorkspaceResources adminWorkspaceResources =\n+        new AdminWorkspaceResources()\n+            .workspaceObjects(adminWorkspaceObjects)\n+            .cloudStorage(adminWorkspaceCloudStorageCounts)\n+            .clusters(workbenchListClusterResponses);\n+\n+    final FirecloudWorkspace firecloudWorkspace =\n+        fireCloudService\n+            .getWorkspaceAsService(workspaceNamespace, workspaceFirecloudName)\n+            .getWorkspace();\n+\n+    return new WorkspaceAdminView()\n+        .workspace(workspaceMapper.toApiWorkspace(dbWorkspace, firecloudWorkspace))\n+        .collaborators(collaborators)\n+        .resources(adminWorkspaceResources);\n+  }\n+\n+  @Override\n+  public WorkspaceAuditLogQueryResponse getAuditLogEntries(\n+      String workspaceNamespace,\n+      Integer limit,\n+      Long afterMillis,\n+      @Nullable Long beforeMillisNullable) {\n+    final long workspaceDatabaseId =\n+        getFirstWorkspaceByNamespace(workspaceNamespace)\n+            .map(DbWorkspace::getWorkspaceId)\n+            .orElseThrow(\n+                () ->\n+                    new NotFoundException(\n+                        String.format(\n+                            \"No workspace found with Firecloud namespace %s\", workspaceNamespace)));\n+    final DateTime after = new DateTime(afterMillis);\n+    final DateTime before =\n+        Optional.ofNullable(beforeMillisNullable).map(DateTime::new).orElse(DateTime.now());\n+    return actionAuditQueryService.queryEventsForWorkspace(\n+        workspaceDatabaseId, limit, after, before);\n+  }\n+\n   private int getNonNotebookFileCount(String bucketName) {\n-    return cloudStorageService\n-        .getBlobListForPrefix(bucketName, NotebooksService.NOTEBOOKS_WORKSPACE_DIRECTORY).stream()\n-        .filter(blob -> !NotebooksService.NOTEBOOK_PATTERN.matcher(blob.getName()).matches())\n-        .collect(Collectors.toList())\n-        .size();\n+    return (int)\n+        cloudStorageService\n+            .getBlobListForPrefix(bucketName, NotebooksService.NOTEBOOKS_WORKSPACE_DIRECTORY)\n+            .stream()\n+            .filter(b -> !notebooksService.isNotebookBlob(b))\n+            .count();\n   }\n \n   private long getStorageSizeBytes(String bucketName) {\n     return cloudStorageService.getBlobList(bucketName).stream()\n         .map(BlobInfo::getSize)\n         .reduce(0L, Long::sum);\n   }\n+\n+  // This is somewhat awkward, as we want to tolerate collaborators who aren't in the database\n+  // anymore.\n+  // TODO(jaycarlton): is this really what we want, or can we make this return an Optional that's\n+  // empty\n+  // when the user isn't in the DB. The assumption is that the fields agree between the UserRole and\n+  // the DbUser, but we don't check that here.\n+  private WorkspaceUserAdminView toWorkspaceUserAdminView(UserRole userRole) {\n+    return userService\n+        .getByUsername(userRole.getEmail())\n+        .map(u -> userMapper.toWorkspaceUserAdminView(u, userRole))\n+        .orElse(\n+            new WorkspaceUserAdminView() // the MapStruct-generated method won't handle a partial", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUzMDkzOQ=="}, "originalCommit": {"oid": "57dd447b5fd71a41d78f3a3dc9a98ee17dbc25de"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTgwMTc5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMTo1Nzo1NVrOGn8FnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoxMzoyMlrOGoUBew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUzMjEyNA==", "bodyText": "nit: could use Guava not() here", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444532124", "createdAt": "2020-06-23T21:57:55Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminServiceImpl.java", "diffHunk": "@@ -79,17 +132,120 @@ public AdminWorkspaceCloudStorageCounts getAdminWorkspaceCloudStorageCounts(\n         .storageBytesUsed(storageSizeBytes);\n   }\n \n+  @Override\n+  public CloudStorageTraffic getCloudStorageTraffic(String workspaceNamespace) {\n+    CloudStorageTraffic response = new CloudStorageTraffic().receivedBytes(new ArrayList<>());\n+\n+    for (TimeSeries timeSeries :\n+        cloudMonitoringService.getCloudStorageReceivedBytes(\n+            workspaceNamespace, TRAILING_TIME_TO_QUERY)) {\n+      for (Point point : timeSeries.getPointsList()) {\n+        response.addReceivedBytesItem(\n+            new TimeSeriesPoint()\n+                .timestamp(Timestamps.toMillis(point.getInterval().getEndTime()))\n+                .value(point.getValue().getDoubleValue()));\n+      }\n+    }\n+\n+    response.getReceivedBytes().sort(Comparator.comparing(TimeSeriesPoint::getTimestamp));\n+    return response;\n+  }\n+\n+  @Override\n+  public WorkspaceAdminView getWorkspaceAdminView(String workspaceNamespace) {\n+    final DbWorkspace dbWorkspace =\n+        getFirstWorkspaceByNamespace(workspaceNamespace)\n+            .orElseThrow(\n+                () ->\n+                    new NotFoundException(\n+                        String.format(\"No workspace found for namespace %s\", workspaceNamespace)));\n+\n+    final String workspaceFirecloudName = dbWorkspace.getFirecloudName();\n+\n+    final List<WorkspaceUserAdminView> collaborators =\n+        workspaceService.getFirecloudUserRoles(workspaceNamespace, workspaceFirecloudName).stream()\n+            .map(this::toWorkspaceUserAdminView)\n+            .collect(Collectors.toList());\n+\n+    final AdminWorkspaceObjectsCounts adminWorkspaceObjects =\n+        getAdminWorkspaceObjects(dbWorkspace.getWorkspaceId());\n+\n+    final AdminWorkspaceCloudStorageCounts adminWorkspaceCloudStorageCounts =\n+        getAdminWorkspaceCloudStorageCounts(\n+            dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName());\n+\n+    final List<ListClusterResponse> workbenchListClusterResponses =\n+        leonardoNotebooksClient.listClustersByProjectAsService(workspaceNamespace).stream()\n+            .map(firecloudMapper::toApiListClusterResponse)\n+            .collect(Collectors.toList());\n+\n+    final AdminWorkspaceResources adminWorkspaceResources =\n+        new AdminWorkspaceResources()\n+            .workspaceObjects(adminWorkspaceObjects)\n+            .cloudStorage(adminWorkspaceCloudStorageCounts)\n+            .clusters(workbenchListClusterResponses);\n+\n+    final FirecloudWorkspace firecloudWorkspace =\n+        fireCloudService\n+            .getWorkspaceAsService(workspaceNamespace, workspaceFirecloudName)\n+            .getWorkspace();\n+\n+    return new WorkspaceAdminView()\n+        .workspace(workspaceMapper.toApiWorkspace(dbWorkspace, firecloudWorkspace))\n+        .collaborators(collaborators)\n+        .resources(adminWorkspaceResources);\n+  }\n+\n+  @Override\n+  public WorkspaceAuditLogQueryResponse getAuditLogEntries(\n+      String workspaceNamespace,\n+      Integer limit,\n+      Long afterMillis,\n+      @Nullable Long beforeMillisNullable) {\n+    final long workspaceDatabaseId =\n+        getFirstWorkspaceByNamespace(workspaceNamespace)\n+            .map(DbWorkspace::getWorkspaceId)\n+            .orElseThrow(\n+                () ->\n+                    new NotFoundException(\n+                        String.format(\n+                            \"No workspace found with Firecloud namespace %s\", workspaceNamespace)));\n+    final DateTime after = new DateTime(afterMillis);\n+    final DateTime before =\n+        Optional.ofNullable(beforeMillisNullable).map(DateTime::new).orElse(DateTime.now());\n+    return actionAuditQueryService.queryEventsForWorkspace(\n+        workspaceDatabaseId, limit, after, before);\n+  }\n+\n   private int getNonNotebookFileCount(String bucketName) {\n-    return cloudStorageService\n-        .getBlobListForPrefix(bucketName, NotebooksService.NOTEBOOKS_WORKSPACE_DIRECTORY).stream()\n-        .filter(blob -> !NotebooksService.NOTEBOOK_PATTERN.matcher(blob.getName()).matches())\n-        .collect(Collectors.toList())\n-        .size();\n+    return (int)\n+        cloudStorageService\n+            .getBlobListForPrefix(bucketName, NotebooksService.NOTEBOOKS_WORKSPACE_DIRECTORY)\n+            .stream()\n+            .filter(b -> !notebooksService.isNotebookBlob(b))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57dd447b5fd71a41d78f3a3dc9a98ee17dbc25de"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyNDI4Mw==", "bodyText": "Guava for the most part isn't needed for streams anymore I think.\n\nNew hotness is\n            pageToken =\n                Optional.ofNullable(resp.getNextPageToken())\n                    .filter(((Predicate<String>) String::isEmpty).negate());", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444924283", "createdAt": "2020-06-24T14:13:22Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminServiceImpl.java", "diffHunk": "@@ -79,17 +132,120 @@ public AdminWorkspaceCloudStorageCounts getAdminWorkspaceCloudStorageCounts(\n         .storageBytesUsed(storageSizeBytes);\n   }\n \n+  @Override\n+  public CloudStorageTraffic getCloudStorageTraffic(String workspaceNamespace) {\n+    CloudStorageTraffic response = new CloudStorageTraffic().receivedBytes(new ArrayList<>());\n+\n+    for (TimeSeries timeSeries :\n+        cloudMonitoringService.getCloudStorageReceivedBytes(\n+            workspaceNamespace, TRAILING_TIME_TO_QUERY)) {\n+      for (Point point : timeSeries.getPointsList()) {\n+        response.addReceivedBytesItem(\n+            new TimeSeriesPoint()\n+                .timestamp(Timestamps.toMillis(point.getInterval().getEndTime()))\n+                .value(point.getValue().getDoubleValue()));\n+      }\n+    }\n+\n+    response.getReceivedBytes().sort(Comparator.comparing(TimeSeriesPoint::getTimestamp));\n+    return response;\n+  }\n+\n+  @Override\n+  public WorkspaceAdminView getWorkspaceAdminView(String workspaceNamespace) {\n+    final DbWorkspace dbWorkspace =\n+        getFirstWorkspaceByNamespace(workspaceNamespace)\n+            .orElseThrow(\n+                () ->\n+                    new NotFoundException(\n+                        String.format(\"No workspace found for namespace %s\", workspaceNamespace)));\n+\n+    final String workspaceFirecloudName = dbWorkspace.getFirecloudName();\n+\n+    final List<WorkspaceUserAdminView> collaborators =\n+        workspaceService.getFirecloudUserRoles(workspaceNamespace, workspaceFirecloudName).stream()\n+            .map(this::toWorkspaceUserAdminView)\n+            .collect(Collectors.toList());\n+\n+    final AdminWorkspaceObjectsCounts adminWorkspaceObjects =\n+        getAdminWorkspaceObjects(dbWorkspace.getWorkspaceId());\n+\n+    final AdminWorkspaceCloudStorageCounts adminWorkspaceCloudStorageCounts =\n+        getAdminWorkspaceCloudStorageCounts(\n+            dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName());\n+\n+    final List<ListClusterResponse> workbenchListClusterResponses =\n+        leonardoNotebooksClient.listClustersByProjectAsService(workspaceNamespace).stream()\n+            .map(firecloudMapper::toApiListClusterResponse)\n+            .collect(Collectors.toList());\n+\n+    final AdminWorkspaceResources adminWorkspaceResources =\n+        new AdminWorkspaceResources()\n+            .workspaceObjects(adminWorkspaceObjects)\n+            .cloudStorage(adminWorkspaceCloudStorageCounts)\n+            .clusters(workbenchListClusterResponses);\n+\n+    final FirecloudWorkspace firecloudWorkspace =\n+        fireCloudService\n+            .getWorkspaceAsService(workspaceNamespace, workspaceFirecloudName)\n+            .getWorkspace();\n+\n+    return new WorkspaceAdminView()\n+        .workspace(workspaceMapper.toApiWorkspace(dbWorkspace, firecloudWorkspace))\n+        .collaborators(collaborators)\n+        .resources(adminWorkspaceResources);\n+  }\n+\n+  @Override\n+  public WorkspaceAuditLogQueryResponse getAuditLogEntries(\n+      String workspaceNamespace,\n+      Integer limit,\n+      Long afterMillis,\n+      @Nullable Long beforeMillisNullable) {\n+    final long workspaceDatabaseId =\n+        getFirstWorkspaceByNamespace(workspaceNamespace)\n+            .map(DbWorkspace::getWorkspaceId)\n+            .orElseThrow(\n+                () ->\n+                    new NotFoundException(\n+                        String.format(\n+                            \"No workspace found with Firecloud namespace %s\", workspaceNamespace)));\n+    final DateTime after = new DateTime(afterMillis);\n+    final DateTime before =\n+        Optional.ofNullable(beforeMillisNullable).map(DateTime::new).orElse(DateTime.now());\n+    return actionAuditQueryService.queryEventsForWorkspace(\n+        workspaceDatabaseId, limit, after, before);\n+  }\n+\n   private int getNonNotebookFileCount(String bucketName) {\n-    return cloudStorageService\n-        .getBlobListForPrefix(bucketName, NotebooksService.NOTEBOOKS_WORKSPACE_DIRECTORY).stream()\n-        .filter(blob -> !NotebooksService.NOTEBOOK_PATTERN.matcher(blob.getName()).matches())\n-        .collect(Collectors.toList())\n-        .size();\n+    return (int)\n+        cloudStorageService\n+            .getBlobListForPrefix(bucketName, NotebooksService.NOTEBOOKS_WORKSPACE_DIRECTORY)\n+            .stream()\n+            .filter(b -> !notebooksService.isNotebookBlob(b))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUzMjEyNA=="}, "originalCommit": {"oid": "57dd447b5fd71a41d78f3a3dc9a98ee17dbc25de"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTgzMjU0OnYy", "diffSide": "LEFT", "path": "api/src/test/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminServiceTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMjoxMToxOVrOGn8ZSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODozMTowNVrOGoeMaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUzNzE2Mg==", "bodyText": "what does this removal do?", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444537162", "createdAt": "2020-06-23T22:11:19Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminServiceTest.java", "diffHunk": "@@ -2,50 +2,155 @@\n \n import static com.google.common.truth.Truth.assertThat;\n import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.doReturn;\n import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n+import com.google.monitoring.v3.Point;\n+import com.google.monitoring.v3.TimeInterval;\n+import com.google.monitoring.v3.TimeSeries;\n+import com.google.monitoring.v3.TypedValue;\n+import com.google.protobuf.util.Timestamps;\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.pmiops.workbench.actionaudit.ActionAuditQueryService;\n+import org.pmiops.workbench.cohortreview.CohortReviewMapper;\n+import org.pmiops.workbench.cohorts.CohortMapperImpl;\n+import org.pmiops.workbench.conceptset.ConceptSetMapper;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.dataset.DataSetMapper;\n+import org.pmiops.workbench.db.dao.CohortDao;\n+import org.pmiops.workbench.db.dao.ConceptSetDao;\n+import org.pmiops.workbench.db.dao.DataSetDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.UserService;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.firecloud.FireCloudService;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspace;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceResponse;\n+import org.pmiops.workbench.google.CloudMonitoringService;\n import org.pmiops.workbench.google.CloudStorageService;\n import org.pmiops.workbench.model.AdminWorkspaceCloudStorageCounts;\n+import org.pmiops.workbench.model.AdminWorkspaceObjectsCounts;\n+import org.pmiops.workbench.model.AdminWorkspaceResources;\n+import org.pmiops.workbench.model.CloudStorageTraffic;\n+import org.pmiops.workbench.model.ListClusterResponse;\n+import org.pmiops.workbench.model.TimeSeriesPoint;\n+import org.pmiops.workbench.model.Workspace;\n+import org.pmiops.workbench.model.WorkspaceAdminView;\n+import org.pmiops.workbench.notebooks.LeonardoNotebooksClient;\n import org.pmiops.workbench.notebooks.NotebooksService;\n+import org.pmiops.workbench.utils.TestMockFactory;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+import org.pmiops.workbench.utils.mappers.FirecloudMapper;\n+import org.pmiops.workbench.utils.mappers.UserMapper;\n+import org.pmiops.workbench.utils.mappers.WorkspaceMapperImpl;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n import org.springframework.boot.test.context.TestConfiguration;\n import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Import;\n import org.springframework.test.context.junit4.SpringRunner;\n \n @RunWith(SpringRunner.class)\n-@DataJpaTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57dd447b5fd71a41d78f3a3dc9a98ee17dbc25de"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyODIwMw==", "bodyText": "I don't want live DAOs in this test class anymore, so I removed this to make sure I don't depend on them again.", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r444928203", "createdAt": "2020-06-24T14:18:44Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminServiceTest.java", "diffHunk": "@@ -2,50 +2,155 @@\n \n import static com.google.common.truth.Truth.assertThat;\n import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.doReturn;\n import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n+import com.google.monitoring.v3.Point;\n+import com.google.monitoring.v3.TimeInterval;\n+import com.google.monitoring.v3.TimeSeries;\n+import com.google.monitoring.v3.TypedValue;\n+import com.google.protobuf.util.Timestamps;\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.pmiops.workbench.actionaudit.ActionAuditQueryService;\n+import org.pmiops.workbench.cohortreview.CohortReviewMapper;\n+import org.pmiops.workbench.cohorts.CohortMapperImpl;\n+import org.pmiops.workbench.conceptset.ConceptSetMapper;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.dataset.DataSetMapper;\n+import org.pmiops.workbench.db.dao.CohortDao;\n+import org.pmiops.workbench.db.dao.ConceptSetDao;\n+import org.pmiops.workbench.db.dao.DataSetDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.UserService;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.firecloud.FireCloudService;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspace;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceResponse;\n+import org.pmiops.workbench.google.CloudMonitoringService;\n import org.pmiops.workbench.google.CloudStorageService;\n import org.pmiops.workbench.model.AdminWorkspaceCloudStorageCounts;\n+import org.pmiops.workbench.model.AdminWorkspaceObjectsCounts;\n+import org.pmiops.workbench.model.AdminWorkspaceResources;\n+import org.pmiops.workbench.model.CloudStorageTraffic;\n+import org.pmiops.workbench.model.ListClusterResponse;\n+import org.pmiops.workbench.model.TimeSeriesPoint;\n+import org.pmiops.workbench.model.Workspace;\n+import org.pmiops.workbench.model.WorkspaceAdminView;\n+import org.pmiops.workbench.notebooks.LeonardoNotebooksClient;\n import org.pmiops.workbench.notebooks.NotebooksService;\n+import org.pmiops.workbench.utils.TestMockFactory;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+import org.pmiops.workbench.utils.mappers.FirecloudMapper;\n+import org.pmiops.workbench.utils.mappers.UserMapper;\n+import org.pmiops.workbench.utils.mappers.WorkspaceMapperImpl;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n import org.springframework.boot.test.context.TestConfiguration;\n import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Import;\n import org.springframework.test.context.junit4.SpringRunner;\n \n @RunWith(SpringRunner.class)\n-@DataJpaTest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUzNzE2Mg=="}, "originalCommit": {"oid": "57dd447b5fd71a41d78f3a3dc9a98ee17dbc25de"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3NjU4MA==", "bodyText": "ok", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r445076580", "createdAt": "2020-06-24T18:05:00Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminServiceTest.java", "diffHunk": "@@ -2,50 +2,155 @@\n \n import static com.google.common.truth.Truth.assertThat;\n import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.doReturn;\n import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n+import com.google.monitoring.v3.Point;\n+import com.google.monitoring.v3.TimeInterval;\n+import com.google.monitoring.v3.TimeSeries;\n+import com.google.monitoring.v3.TypedValue;\n+import com.google.protobuf.util.Timestamps;\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.pmiops.workbench.actionaudit.ActionAuditQueryService;\n+import org.pmiops.workbench.cohortreview.CohortReviewMapper;\n+import org.pmiops.workbench.cohorts.CohortMapperImpl;\n+import org.pmiops.workbench.conceptset.ConceptSetMapper;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.dataset.DataSetMapper;\n+import org.pmiops.workbench.db.dao.CohortDao;\n+import org.pmiops.workbench.db.dao.ConceptSetDao;\n+import org.pmiops.workbench.db.dao.DataSetDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.UserService;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.firecloud.FireCloudService;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspace;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceResponse;\n+import org.pmiops.workbench.google.CloudMonitoringService;\n import org.pmiops.workbench.google.CloudStorageService;\n import org.pmiops.workbench.model.AdminWorkspaceCloudStorageCounts;\n+import org.pmiops.workbench.model.AdminWorkspaceObjectsCounts;\n+import org.pmiops.workbench.model.AdminWorkspaceResources;\n+import org.pmiops.workbench.model.CloudStorageTraffic;\n+import org.pmiops.workbench.model.ListClusterResponse;\n+import org.pmiops.workbench.model.TimeSeriesPoint;\n+import org.pmiops.workbench.model.Workspace;\n+import org.pmiops.workbench.model.WorkspaceAdminView;\n+import org.pmiops.workbench.notebooks.LeonardoNotebooksClient;\n import org.pmiops.workbench.notebooks.NotebooksService;\n+import org.pmiops.workbench.utils.TestMockFactory;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+import org.pmiops.workbench.utils.mappers.FirecloudMapper;\n+import org.pmiops.workbench.utils.mappers.UserMapper;\n+import org.pmiops.workbench.utils.mappers.WorkspaceMapperImpl;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n import org.springframework.boot.test.context.TestConfiguration;\n import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Import;\n import org.springframework.test.context.junit4.SpringRunner;\n \n @RunWith(SpringRunner.class)\n-@DataJpaTest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUzNzE2Mg=="}, "originalCommit": {"oid": "57dd447b5fd71a41d78f3a3dc9a98ee17dbc25de"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5MDkyMQ==", "bodyText": "might load the test faster too", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r445090921", "createdAt": "2020-06-24T18:31:05Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminServiceTest.java", "diffHunk": "@@ -2,50 +2,155 @@\n \n import static com.google.common.truth.Truth.assertThat;\n import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.doReturn;\n import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n+import com.google.monitoring.v3.Point;\n+import com.google.monitoring.v3.TimeInterval;\n+import com.google.monitoring.v3.TimeSeries;\n+import com.google.monitoring.v3.TypedValue;\n+import com.google.protobuf.util.Timestamps;\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.pmiops.workbench.actionaudit.ActionAuditQueryService;\n+import org.pmiops.workbench.cohortreview.CohortReviewMapper;\n+import org.pmiops.workbench.cohorts.CohortMapperImpl;\n+import org.pmiops.workbench.conceptset.ConceptSetMapper;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.dataset.DataSetMapper;\n+import org.pmiops.workbench.db.dao.CohortDao;\n+import org.pmiops.workbench.db.dao.ConceptSetDao;\n+import org.pmiops.workbench.db.dao.DataSetDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.UserService;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.firecloud.FireCloudService;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspace;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceResponse;\n+import org.pmiops.workbench.google.CloudMonitoringService;\n import org.pmiops.workbench.google.CloudStorageService;\n import org.pmiops.workbench.model.AdminWorkspaceCloudStorageCounts;\n+import org.pmiops.workbench.model.AdminWorkspaceObjectsCounts;\n+import org.pmiops.workbench.model.AdminWorkspaceResources;\n+import org.pmiops.workbench.model.CloudStorageTraffic;\n+import org.pmiops.workbench.model.ListClusterResponse;\n+import org.pmiops.workbench.model.TimeSeriesPoint;\n+import org.pmiops.workbench.model.Workspace;\n+import org.pmiops.workbench.model.WorkspaceAdminView;\n+import org.pmiops.workbench.notebooks.LeonardoNotebooksClient;\n import org.pmiops.workbench.notebooks.NotebooksService;\n+import org.pmiops.workbench.utils.TestMockFactory;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+import org.pmiops.workbench.utils.mappers.FirecloudMapper;\n+import org.pmiops.workbench.utils.mappers.UserMapper;\n+import org.pmiops.workbench.utils.mappers.WorkspaceMapperImpl;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n import org.springframework.boot.test.context.TestConfiguration;\n import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Import;\n import org.springframework.test.context.junit4.SpringRunner;\n \n @RunWith(SpringRunner.class)\n-@DataJpaTest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUzNzE2Mg=="}, "originalCommit": {"oid": "57dd447b5fd71a41d78f3a3dc9a98ee17dbc25de"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzE3MjE2OnYy", "diffSide": "LEFT", "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzo1NzoxNFrOGodDgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODoyMTo0N1rOGod4fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3MjI1Ng==", "bodyText": "Why remove this?", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r445072256", "createdAt": "2020-06-24T17:57:14Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -115,8 +113,6 @@ public BillingProjectMembership apply(\n             }\n           };\n \n-  // Deprecated because it refers to old-style Institutional Affiliations, to be deleted in RW-4362", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc3e9144d9d6065e052dad90a7dd5d3255b316fd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4NTgyMA==", "bodyText": "Oh, the whole function is supposed to be moved.", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r445085820", "createdAt": "2020-06-24T18:21:47Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -115,8 +113,6 @@ public BillingProjectMembership apply(\n             }\n           };\n \n-  // Deprecated because it refers to old-style Institutional Affiliations, to be deleted in RW-4362", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3MjI1Ng=="}, "originalCommit": {"oid": "cc3e9144d9d6065e052dad90a7dd5d3255b316fd"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzE3OTgzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzo1OTozNFrOGodIng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzo1OTozNFrOGodIng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3MzU2Ng==", "bodyText": "please remove the ProfileContorller version of this", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r445073566", "createdAt": "2020-06-24T17:59:34Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -135,4 +168,170 @@ public void validateInstitutionalAffiliation(Profile profile) {\n       throw new BadRequestException(msg);\n     }\n   }\n+\n+  public void updateProfileForUser(DbUser user, Profile updatedProfile, Profile previousProfile) {\n+    validateUpdatedProfile(updatedProfile, previousProfile);\n+\n+    if (!userProvider.get().getGivenName().equalsIgnoreCase(updatedProfile.getGivenName())\n+        || !userProvider.get().getFamilyName().equalsIgnoreCase(updatedProfile.getFamilyName())) {\n+      userService.setDataUseAgreementNameOutOfDate(\n+          updatedProfile.getGivenName(), updatedProfile.getFamilyName());\n+    }\n+\n+    Timestamp now = new Timestamp(clock.instant().toEpochMilli());\n+\n+    user.setGivenName(updatedProfile.getGivenName());\n+    user.setFamilyName(updatedProfile.getFamilyName());\n+    user.setAreaOfResearch(updatedProfile.getAreaOfResearch());\n+    user.setProfessionalUrl(updatedProfile.getProfessionalUrl());\n+    user.setAddress(addressMapper.addressToDbAddress(updatedProfile.getAddress()));\n+    user.getAddress().setUser(user);\n+    DbDemographicSurvey dbDemographicSurvey =\n+        demographicSurveyMapper.demographicSurveyToDbDemographicSurvey(\n+            updatedProfile.getDemographicSurvey());\n+\n+    if (user.getDemographicSurveyCompletionTime() == null && dbDemographicSurvey != null) {\n+      user.setDemographicSurveyCompletionTime(now);\n+    }\n+\n+    if (dbDemographicSurvey != null && dbDemographicSurvey.getUser() == null) {\n+      dbDemographicSurvey.setUser(user);\n+    }\n+\n+    user.setDemographicSurvey(dbDemographicSurvey);\n+    user.setLastModifiedTime(now);\n+\n+    updateInstitutionalAffiliations(updatedProfile, user);\n+    boolean requireInstitutionalVerification =\n+        workbenchConfigProvider.get().featureFlags.requireInstitutionalVerification;\n+    if (requireInstitutionalVerification) {\n+      validateInstitutionalAffiliation(updatedProfile);\n+    }\n+\n+    userService.updateUserWithConflictHandling(user);\n+    if (requireInstitutionalVerification) {\n+      DbVerifiedInstitutionalAffiliation updatedDbVerifiedAffiliation =\n+          verifiedInstitutionalAffiliationMapper.modelToDbWithoutUser(\n+              updatedProfile.getVerifiedInstitutionalAffiliation(), institutionService);\n+      updatedDbVerifiedAffiliation.setUser(user);\n+      Optional<DbVerifiedInstitutionalAffiliation> dbVerifiedAffiliation =\n+          verifiedInstitutionalAffiliationDao.findFirstByUser(user);\n+      dbVerifiedAffiliation.ifPresent(\n+          verifiedInstitutionalAffiliation ->\n+              updatedDbVerifiedAffiliation.setVerifiedInstitutionalAffiliationId(\n+                  verifiedInstitutionalAffiliation.getVerifiedInstitutionalAffiliationId()));\n+      this.verifiedInstitutionalAffiliationDao.save(updatedDbVerifiedAffiliation);\n+    }\n+\n+    final Profile appliedUpdatedProfile = getProfile(user);\n+    profileAuditor.fireUpdateAction(previousProfile, appliedUpdatedProfile);\n+  }\n+\n+  public void validateAndCleanProfile(Profile profile) throws BadRequestException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc3e9144d9d6065e052dad90a7dd5d3255b316fd"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzE4NTA1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODowMToxMVrOGodMLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODowMToxMVrOGodMLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3NDQ3OA==", "bodyText": "delete ProfileController version of this\nmove ProfileController comment and @deprecated here", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r445074478", "createdAt": "2020-06-24T18:01:11Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -135,4 +168,170 @@ public void validateInstitutionalAffiliation(Profile profile) {\n       throw new BadRequestException(msg);\n     }\n   }\n+\n+  public void updateProfileForUser(DbUser user, Profile updatedProfile, Profile previousProfile) {\n+    validateUpdatedProfile(updatedProfile, previousProfile);\n+\n+    if (!userProvider.get().getGivenName().equalsIgnoreCase(updatedProfile.getGivenName())\n+        || !userProvider.get().getFamilyName().equalsIgnoreCase(updatedProfile.getFamilyName())) {\n+      userService.setDataUseAgreementNameOutOfDate(\n+          updatedProfile.getGivenName(), updatedProfile.getFamilyName());\n+    }\n+\n+    Timestamp now = new Timestamp(clock.instant().toEpochMilli());\n+\n+    user.setGivenName(updatedProfile.getGivenName());\n+    user.setFamilyName(updatedProfile.getFamilyName());\n+    user.setAreaOfResearch(updatedProfile.getAreaOfResearch());\n+    user.setProfessionalUrl(updatedProfile.getProfessionalUrl());\n+    user.setAddress(addressMapper.addressToDbAddress(updatedProfile.getAddress()));\n+    user.getAddress().setUser(user);\n+    DbDemographicSurvey dbDemographicSurvey =\n+        demographicSurveyMapper.demographicSurveyToDbDemographicSurvey(\n+            updatedProfile.getDemographicSurvey());\n+\n+    if (user.getDemographicSurveyCompletionTime() == null && dbDemographicSurvey != null) {\n+      user.setDemographicSurveyCompletionTime(now);\n+    }\n+\n+    if (dbDemographicSurvey != null && dbDemographicSurvey.getUser() == null) {\n+      dbDemographicSurvey.setUser(user);\n+    }\n+\n+    user.setDemographicSurvey(dbDemographicSurvey);\n+    user.setLastModifiedTime(now);\n+\n+    updateInstitutionalAffiliations(updatedProfile, user);\n+    boolean requireInstitutionalVerification =\n+        workbenchConfigProvider.get().featureFlags.requireInstitutionalVerification;\n+    if (requireInstitutionalVerification) {\n+      validateInstitutionalAffiliation(updatedProfile);\n+    }\n+\n+    userService.updateUserWithConflictHandling(user);\n+    if (requireInstitutionalVerification) {\n+      DbVerifiedInstitutionalAffiliation updatedDbVerifiedAffiliation =\n+          verifiedInstitutionalAffiliationMapper.modelToDbWithoutUser(\n+              updatedProfile.getVerifiedInstitutionalAffiliation(), institutionService);\n+      updatedDbVerifiedAffiliation.setUser(user);\n+      Optional<DbVerifiedInstitutionalAffiliation> dbVerifiedAffiliation =\n+          verifiedInstitutionalAffiliationDao.findFirstByUser(user);\n+      dbVerifiedAffiliation.ifPresent(\n+          verifiedInstitutionalAffiliation ->\n+              updatedDbVerifiedAffiliation.setVerifiedInstitutionalAffiliationId(\n+                  verifiedInstitutionalAffiliation.getVerifiedInstitutionalAffiliationId()));\n+      this.verifiedInstitutionalAffiliationDao.save(updatedDbVerifiedAffiliation);\n+    }\n+\n+    final Profile appliedUpdatedProfile = getProfile(user);\n+    profileAuditor.fireUpdateAction(previousProfile, appliedUpdatedProfile);\n+  }\n+\n+  public void validateAndCleanProfile(Profile profile) throws BadRequestException {\n+    // Validation steps, which yield a BadRequestException if errors are found.\n+    String userName = profile.getUsername();\n+    if (userName == null || userName.length() < 3 || userName.length() > 64) {\n+      throw new BadRequestException(\n+          \"Username should be at least 3 characters and not more than 64 characters\");\n+    }\n+    validateStringLength(profile.getGivenName(), \"Given Name\", 80, 1);\n+    validateStringLength(profile.getFamilyName(), \"Family Name\", 80, 1);\n+\n+    // Cleaning steps, which provide non-null fields or apply some cleanup / transformation.\n+    profile.setDemographicSurvey(\n+        Optional.ofNullable(profile.getDemographicSurvey()).orElse(new DemographicSurvey()));\n+    profile.setInstitutionalAffiliations(\n+        Optional.ofNullable(profile.getInstitutionalAffiliations()).orElse(new ArrayList<>()));\n+    // We always store the username as all lowercase.\n+    profile.setUsername(profile.getUsername().toLowerCase());\n+  }\n+\n+  private void updateInstitutionalAffiliations(Profile updatedProfile, DbUser user) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc3e9144d9d6065e052dad90a7dd5d3255b316fd"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzE4NzAzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODowMTo1NlrOGodNjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODozMDowMlrOGoeKPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3NDgyOA==", "bodyText": "remove ProfileController version of this", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r445074828", "createdAt": "2020-06-24T18:01:56Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -135,4 +168,170 @@ public void validateInstitutionalAffiliation(Profile profile) {\n       throw new BadRequestException(msg);\n     }\n   }\n+\n+  public void updateProfileForUser(DbUser user, Profile updatedProfile, Profile previousProfile) {\n+    validateUpdatedProfile(updatedProfile, previousProfile);\n+\n+    if (!userProvider.get().getGivenName().equalsIgnoreCase(updatedProfile.getGivenName())\n+        || !userProvider.get().getFamilyName().equalsIgnoreCase(updatedProfile.getFamilyName())) {\n+      userService.setDataUseAgreementNameOutOfDate(\n+          updatedProfile.getGivenName(), updatedProfile.getFamilyName());\n+    }\n+\n+    Timestamp now = new Timestamp(clock.instant().toEpochMilli());\n+\n+    user.setGivenName(updatedProfile.getGivenName());\n+    user.setFamilyName(updatedProfile.getFamilyName());\n+    user.setAreaOfResearch(updatedProfile.getAreaOfResearch());\n+    user.setProfessionalUrl(updatedProfile.getProfessionalUrl());\n+    user.setAddress(addressMapper.addressToDbAddress(updatedProfile.getAddress()));\n+    user.getAddress().setUser(user);\n+    DbDemographicSurvey dbDemographicSurvey =\n+        demographicSurveyMapper.demographicSurveyToDbDemographicSurvey(\n+            updatedProfile.getDemographicSurvey());\n+\n+    if (user.getDemographicSurveyCompletionTime() == null && dbDemographicSurvey != null) {\n+      user.setDemographicSurveyCompletionTime(now);\n+    }\n+\n+    if (dbDemographicSurvey != null && dbDemographicSurvey.getUser() == null) {\n+      dbDemographicSurvey.setUser(user);\n+    }\n+\n+    user.setDemographicSurvey(dbDemographicSurvey);\n+    user.setLastModifiedTime(now);\n+\n+    updateInstitutionalAffiliations(updatedProfile, user);\n+    boolean requireInstitutionalVerification =\n+        workbenchConfigProvider.get().featureFlags.requireInstitutionalVerification;\n+    if (requireInstitutionalVerification) {\n+      validateInstitutionalAffiliation(updatedProfile);\n+    }\n+\n+    userService.updateUserWithConflictHandling(user);\n+    if (requireInstitutionalVerification) {\n+      DbVerifiedInstitutionalAffiliation updatedDbVerifiedAffiliation =\n+          verifiedInstitutionalAffiliationMapper.modelToDbWithoutUser(\n+              updatedProfile.getVerifiedInstitutionalAffiliation(), institutionService);\n+      updatedDbVerifiedAffiliation.setUser(user);\n+      Optional<DbVerifiedInstitutionalAffiliation> dbVerifiedAffiliation =\n+          verifiedInstitutionalAffiliationDao.findFirstByUser(user);\n+      dbVerifiedAffiliation.ifPresent(\n+          verifiedInstitutionalAffiliation ->\n+              updatedDbVerifiedAffiliation.setVerifiedInstitutionalAffiliationId(\n+                  verifiedInstitutionalAffiliation.getVerifiedInstitutionalAffiliationId()));\n+      this.verifiedInstitutionalAffiliationDao.save(updatedDbVerifiedAffiliation);\n+    }\n+\n+    final Profile appliedUpdatedProfile = getProfile(user);\n+    profileAuditor.fireUpdateAction(previousProfile, appliedUpdatedProfile);\n+  }\n+\n+  public void validateAndCleanProfile(Profile profile) throws BadRequestException {\n+    // Validation steps, which yield a BadRequestException if errors are found.\n+    String userName = profile.getUsername();\n+    if (userName == null || userName.length() < 3 || userName.length() > 64) {\n+      throw new BadRequestException(\n+          \"Username should be at least 3 characters and not more than 64 characters\");\n+    }\n+    validateStringLength(profile.getGivenName(), \"Given Name\", 80, 1);\n+    validateStringLength(profile.getFamilyName(), \"Family Name\", 80, 1);\n+\n+    // Cleaning steps, which provide non-null fields or apply some cleanup / transformation.\n+    profile.setDemographicSurvey(\n+        Optional.ofNullable(profile.getDemographicSurvey()).orElse(new DemographicSurvey()));\n+    profile.setInstitutionalAffiliations(\n+        Optional.ofNullable(profile.getInstitutionalAffiliations()).orElse(new ArrayList<>()));\n+    // We always store the username as all lowercase.\n+    profile.setUsername(profile.getUsername().toLowerCase());\n+  }\n+\n+  private void updateInstitutionalAffiliations(Profile updatedProfile, DbUser user) {\n+    List<DbInstitutionalAffiliation> newAffiliations =\n+        updatedProfile.getInstitutionalAffiliations().stream()\n+            .map(institutionService::legacyInstitutionToDbInstitution)\n+            .collect(Collectors.toList());\n+    int i = 0;\n+    ListIterator<DbInstitutionalAffiliation> oldAffilations =\n+        user.getInstitutionalAffiliations().listIterator();\n+    boolean shouldAdd = false;\n+    if (newAffiliations.size() == 0) {\n+      shouldAdd = true;\n+    }\n+    for (DbInstitutionalAffiliation affiliation : newAffiliations) {\n+      affiliation.setOrderIndex(i);\n+      affiliation.setUser(user);\n+      if (oldAffilations.hasNext()) {\n+        DbInstitutionalAffiliation oldAffilation = oldAffilations.next();\n+        if (!oldAffilation.getRole().equals(affiliation.getRole())\n+            || !oldAffilation.getInstitution().equals(affiliation.getInstitution())) {\n+          shouldAdd = true;\n+        }\n+      } else {\n+        shouldAdd = true;\n+      }\n+      i++;\n+    }\n+    if (oldAffilations.hasNext()) {\n+      shouldAdd = true;\n+    }\n+    if (shouldAdd) {\n+      user.clearInstitutionalAffiliations();\n+      for (DbInstitutionalAffiliation affiliation : newAffiliations) {\n+        user.addInstitutionalAffiliation(affiliation);\n+      }\n+    }\n+  }\n+\n+  private void validateUpdatedProfile(Profile updatedProfile, Profile prevProfile)\n+      throws BadRequestException {\n+    validateAndCleanProfile(updatedProfile);\n+    if (StringUtils.isEmpty(updatedProfile.getAreaOfResearch())) {\n+      throw new BadRequestException(\"Research background cannot be empty\");\n+    }\n+    Optional.ofNullable(updatedProfile.getAddress())\n+        .orElseThrow(() -> new BadRequestException(\"Address must not be empty\"));\n+\n+    Address updatedProfileAddress = updatedProfile.getAddress();\n+    if (StringUtils.isEmpty(updatedProfileAddress.getStreetAddress1())\n+        || StringUtils.isEmpty(updatedProfileAddress.getCity())\n+        || StringUtils.isEmpty(updatedProfileAddress.getState())\n+        || StringUtils.isEmpty(updatedProfileAddress.getCountry())\n+        || StringUtils.isEmpty(updatedProfileAddress.getZipCode())) {\n+      throw new BadRequestException(\n+          \"Address cannot have empty street Address 1/city/state/country or Zip Code\");\n+    }\n+    if (updatedProfile.getContactEmail() != null\n+        && !updatedProfile.getContactEmail().equals(prevProfile.getContactEmail())) {\n+      // See RW-1488.\n+      throw new BadRequestException(\"Changing email is not currently supported\");\n+    }\n+    if (updatedProfile.getUsername() != null\n+        && !updatedProfile.getUsername().equals(prevProfile.getUsername())) {\n+      // See RW-1488.\n+      throw new BadRequestException(\"Changing username is not supported\");\n+    }\n+  }\n+\n+  private void validateStringLength(String field, String fieldName, int max, int min) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc3e9144d9d6065e052dad90a7dd5d3255b316fd"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5MDM2NA==", "bodyText": "I should've just cherry picked it from the other branch at this rate. \ud83d\ude1e", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r445090364", "createdAt": "2020-06-24T18:30:02Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -135,4 +168,170 @@ public void validateInstitutionalAffiliation(Profile profile) {\n       throw new BadRequestException(msg);\n     }\n   }\n+\n+  public void updateProfileForUser(DbUser user, Profile updatedProfile, Profile previousProfile) {\n+    validateUpdatedProfile(updatedProfile, previousProfile);\n+\n+    if (!userProvider.get().getGivenName().equalsIgnoreCase(updatedProfile.getGivenName())\n+        || !userProvider.get().getFamilyName().equalsIgnoreCase(updatedProfile.getFamilyName())) {\n+      userService.setDataUseAgreementNameOutOfDate(\n+          updatedProfile.getGivenName(), updatedProfile.getFamilyName());\n+    }\n+\n+    Timestamp now = new Timestamp(clock.instant().toEpochMilli());\n+\n+    user.setGivenName(updatedProfile.getGivenName());\n+    user.setFamilyName(updatedProfile.getFamilyName());\n+    user.setAreaOfResearch(updatedProfile.getAreaOfResearch());\n+    user.setProfessionalUrl(updatedProfile.getProfessionalUrl());\n+    user.setAddress(addressMapper.addressToDbAddress(updatedProfile.getAddress()));\n+    user.getAddress().setUser(user);\n+    DbDemographicSurvey dbDemographicSurvey =\n+        demographicSurveyMapper.demographicSurveyToDbDemographicSurvey(\n+            updatedProfile.getDemographicSurvey());\n+\n+    if (user.getDemographicSurveyCompletionTime() == null && dbDemographicSurvey != null) {\n+      user.setDemographicSurveyCompletionTime(now);\n+    }\n+\n+    if (dbDemographicSurvey != null && dbDemographicSurvey.getUser() == null) {\n+      dbDemographicSurvey.setUser(user);\n+    }\n+\n+    user.setDemographicSurvey(dbDemographicSurvey);\n+    user.setLastModifiedTime(now);\n+\n+    updateInstitutionalAffiliations(updatedProfile, user);\n+    boolean requireInstitutionalVerification =\n+        workbenchConfigProvider.get().featureFlags.requireInstitutionalVerification;\n+    if (requireInstitutionalVerification) {\n+      validateInstitutionalAffiliation(updatedProfile);\n+    }\n+\n+    userService.updateUserWithConflictHandling(user);\n+    if (requireInstitutionalVerification) {\n+      DbVerifiedInstitutionalAffiliation updatedDbVerifiedAffiliation =\n+          verifiedInstitutionalAffiliationMapper.modelToDbWithoutUser(\n+              updatedProfile.getVerifiedInstitutionalAffiliation(), institutionService);\n+      updatedDbVerifiedAffiliation.setUser(user);\n+      Optional<DbVerifiedInstitutionalAffiliation> dbVerifiedAffiliation =\n+          verifiedInstitutionalAffiliationDao.findFirstByUser(user);\n+      dbVerifiedAffiliation.ifPresent(\n+          verifiedInstitutionalAffiliation ->\n+              updatedDbVerifiedAffiliation.setVerifiedInstitutionalAffiliationId(\n+                  verifiedInstitutionalAffiliation.getVerifiedInstitutionalAffiliationId()));\n+      this.verifiedInstitutionalAffiliationDao.save(updatedDbVerifiedAffiliation);\n+    }\n+\n+    final Profile appliedUpdatedProfile = getProfile(user);\n+    profileAuditor.fireUpdateAction(previousProfile, appliedUpdatedProfile);\n+  }\n+\n+  public void validateAndCleanProfile(Profile profile) throws BadRequestException {\n+    // Validation steps, which yield a BadRequestException if errors are found.\n+    String userName = profile.getUsername();\n+    if (userName == null || userName.length() < 3 || userName.length() > 64) {\n+      throw new BadRequestException(\n+          \"Username should be at least 3 characters and not more than 64 characters\");\n+    }\n+    validateStringLength(profile.getGivenName(), \"Given Name\", 80, 1);\n+    validateStringLength(profile.getFamilyName(), \"Family Name\", 80, 1);\n+\n+    // Cleaning steps, which provide non-null fields or apply some cleanup / transformation.\n+    profile.setDemographicSurvey(\n+        Optional.ofNullable(profile.getDemographicSurvey()).orElse(new DemographicSurvey()));\n+    profile.setInstitutionalAffiliations(\n+        Optional.ofNullable(profile.getInstitutionalAffiliations()).orElse(new ArrayList<>()));\n+    // We always store the username as all lowercase.\n+    profile.setUsername(profile.getUsername().toLowerCase());\n+  }\n+\n+  private void updateInstitutionalAffiliations(Profile updatedProfile, DbUser user) {\n+    List<DbInstitutionalAffiliation> newAffiliations =\n+        updatedProfile.getInstitutionalAffiliations().stream()\n+            .map(institutionService::legacyInstitutionToDbInstitution)\n+            .collect(Collectors.toList());\n+    int i = 0;\n+    ListIterator<DbInstitutionalAffiliation> oldAffilations =\n+        user.getInstitutionalAffiliations().listIterator();\n+    boolean shouldAdd = false;\n+    if (newAffiliations.size() == 0) {\n+      shouldAdd = true;\n+    }\n+    for (DbInstitutionalAffiliation affiliation : newAffiliations) {\n+      affiliation.setOrderIndex(i);\n+      affiliation.setUser(user);\n+      if (oldAffilations.hasNext()) {\n+        DbInstitutionalAffiliation oldAffilation = oldAffilations.next();\n+        if (!oldAffilation.getRole().equals(affiliation.getRole())\n+            || !oldAffilation.getInstitution().equals(affiliation.getInstitution())) {\n+          shouldAdd = true;\n+        }\n+      } else {\n+        shouldAdd = true;\n+      }\n+      i++;\n+    }\n+    if (oldAffilations.hasNext()) {\n+      shouldAdd = true;\n+    }\n+    if (shouldAdd) {\n+      user.clearInstitutionalAffiliations();\n+      for (DbInstitutionalAffiliation affiliation : newAffiliations) {\n+        user.addInstitutionalAffiliation(affiliation);\n+      }\n+    }\n+  }\n+\n+  private void validateUpdatedProfile(Profile updatedProfile, Profile prevProfile)\n+      throws BadRequestException {\n+    validateAndCleanProfile(updatedProfile);\n+    if (StringUtils.isEmpty(updatedProfile.getAreaOfResearch())) {\n+      throw new BadRequestException(\"Research background cannot be empty\");\n+    }\n+    Optional.ofNullable(updatedProfile.getAddress())\n+        .orElseThrow(() -> new BadRequestException(\"Address must not be empty\"));\n+\n+    Address updatedProfileAddress = updatedProfile.getAddress();\n+    if (StringUtils.isEmpty(updatedProfileAddress.getStreetAddress1())\n+        || StringUtils.isEmpty(updatedProfileAddress.getCity())\n+        || StringUtils.isEmpty(updatedProfileAddress.getState())\n+        || StringUtils.isEmpty(updatedProfileAddress.getCountry())\n+        || StringUtils.isEmpty(updatedProfileAddress.getZipCode())) {\n+      throw new BadRequestException(\n+          \"Address cannot have empty street Address 1/city/state/country or Zip Code\");\n+    }\n+    if (updatedProfile.getContactEmail() != null\n+        && !updatedProfile.getContactEmail().equals(prevProfile.getContactEmail())) {\n+      // See RW-1488.\n+      throw new BadRequestException(\"Changing email is not currently supported\");\n+    }\n+    if (updatedProfile.getUsername() != null\n+        && !updatedProfile.getUsername().equals(prevProfile.getUsername())) {\n+      // See RW-1488.\n+      throw new BadRequestException(\"Changing username is not supported\");\n+    }\n+  }\n+\n+  private void validateStringLength(String field, String fieldName, int max, int min) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3NDgyOA=="}, "originalCommit": {"oid": "cc3e9144d9d6065e052dad90a7dd5d3255b316fd"}, "originalPosition": 234}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzE5MjEzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODowMzoyNVrOGodQtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODowMzoyNVrOGodQtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3NTYzOQ==", "bodyText": "remove ProfileController.FROM_CLIENT_INSTITUTIONAL_AFFILIATION", "url": "https://github.com/all-of-us/workbench/pull/3703#discussion_r445075639", "createdAt": "2020-06-24T18:03:25Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionService.java", "diffHunk": "@@ -106,4 +108,16 @@ boolean validateAffiliation(\n    * @return\n    */\n   boolean validateOperationalUser(DbInstitution institution);\n+\n+  /**\n+   * Deprecated because it refers to old-style Institutional Affiliations, to be deleted in RW-4362\n+   * The new-style equivalent is VerifiedInstitutionalAffiliationMapper.modelToDbWithoutUser()\n+   *\n+   * @deprecated\n+   * @param institutionalAffiliation\n+   * @return\n+   */\n+  @Deprecated\n+  DbInstitutionalAffiliation legacyInstitutionToDbInstitution(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc3e9144d9d6065e052dad90a7dd5d3255b316fd"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2562, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}