{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNTkwMDgz", "number": 2994, "title": "Add admin delete clusters in project endpoint", "bodyText": "Description:\nThis adds an endpoint which allows security admins to delete all clusters in a project. We went with delete because Leonardo doesn't currently allow for stopping clusters as a project owner, just deleting them.\nManual test on local included:\nDeleting current user's cluster as that user.\nDeleting another user's cluster as one user, in a workspace the user does not have access to.\nI would love some thoughts on the unit tests here, because I am unsure where the cost/benefit lands for amount of unit tests. (The one I wrote just basically verifies that it hits Leo)\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-01-10T19:29:00Z", "url": "https://github.com/all-of-us/workbench/pull/2994", "merged": true, "mergeCommit": {"oid": "e9ac9162436d47b7471df72ce8dac43eab297fab"}, "closed": true, "closedAt": "2020-01-14T20:41:12Z", "author": {"login": "s-rubenstein"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb5_Y53AFqTM0MTk3NDU4NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6W_V1AH2gAyMzYxNTkwMDgzOjNkN2FhZDRkNDNlNTQ2NjllMzQyMzRlMmI1YWRmYmUwZGIwOTU0ODY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxOTc0NTg0", "url": "https://github.com/all-of-us/workbench/pull/2994#pullrequestreview-341974584", "createdAt": "2020-01-13T16:33:57Z", "commit": {"oid": "c3ff3a3061220ffafb5a23fb4d39a8bd5ef298ea"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjozMzo1N1rOFc85gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjo1ODozOVrOFc9ugQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkwMjIxMQ==", "bodyText": "Nitpick: I'm not sure the \"admin\" prefix is too helpful here. We have a pretty strong pattern of calling this member variable \"userProvider\". I see that locally within this package AuthDomainAuditorImpl also calls it \"adminDbUserProvider\" (which is probably where this naming came from), but I'd argue both usages are inconsistent with a pretty global pattern across our codebase. It crease more confusion than it resolves IMO, since the \"user\" is still the \"user from the current request context\" in all cases.", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r365902211", "createdAt": "2020-01-13T16:33:57Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/ClusterAuditorImpl.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.pmiops.workbench.actionaudit.auditors;\n+\n+import org.pmiops.workbench.actionaudit.ActionAuditEvent;\n+import org.pmiops.workbench.actionaudit.ActionAuditService;\n+import org.pmiops.workbench.actionaudit.ActionType;\n+import org.pmiops.workbench.actionaudit.AgentType;\n+import org.pmiops.workbench.actionaudit.TargetType;\n+import org.pmiops.workbench.actionaudit.targetproperties.AccountTargetProperty;\n+import org.pmiops.workbench.actionaudit.targetproperties.values.AccountDisabledStatus;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+\n+import javax.inject.Provider;\n+import java.time.Clock;\n+\n+@Service\n+public class ClusterAuditorImpl implements ClusterAuditor {\n+  private ActionAuditService actionAuditService;\n+  private Clock clock;\n+  private Provider<DbUser> adminDbUserProvider;\n+\n+  @Autowired\n+  public ClusterAuditorImpl(\n+      ActionAuditService actionAuditService,\n+      Clock clock,\n+      Provider<DbUser> adminDbUserProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ff3a3061220ffafb5a23fb4d39a8bd5ef298ea"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkwMzYxMQ==", "bodyText": "I'd be inclined to move this towards the bottom of this method, so the audit log is only sent after the Firecloud interactions are completed. Just checking how Jay set this up for other controllers, there seems to be a pretty clear pattern of \"do the work first, then fire an audit log\".", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r365903611", "createdAt": "2020-01-13T16:36:27Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/api/ClusterController.java", "diffHunk": "@@ -116,7 +123,51 @@\n   }\n \n   @Override\n-  public ResponseEntity<ClusterListResponse> listClusters(\n+  @AuthorityRequired(Authority.SECURITY_ADMIN)\n+  public ResponseEntity<List<ListClusterResponse>> deleteClustersInProject(String billingProjectId) {\n+    if (billingProjectId == null) {\n+      throw new BadRequestException(\"Must specify billing project\");\n+    }\n+    clusterAuditor.fireDeleteClustersInProject(billingProjectId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ff3a3061220ffafb5a23fb4d39a8bd5ef298ea"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkwNTAzOQ==", "bodyText": "Nitpick: update summary s/pause/delete/", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r365905039", "createdAt": "2020-01-13T16:39:02Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench.yaml", "diffHunk": "@@ -538,6 +538,32 @@ paths:\n \n   # Notebook clusters ####################################################################\n \n+  /v1/admin/security/clusters/{billingProjectId}/delete-clusters:\n+    post:\n+      summary: Pause all clusters in a project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ff3a3061220ffafb5a23fb4d39a8bd5ef298ea"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkwNTc2MA==", "bodyText": "Is there a need to return data about the clusters that were just paused? I'd be inclined to call YAGNI (you ain't gonna need this) on this piece. We can easily add more return info if required, but I don't seen an obvious use case for the client to use this data.", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r365905760", "createdAt": "2020-01-13T16:40:25Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench.yaml", "diffHunk": "@@ -3634,14 +3661,44 @@ definitions:\n         format: int64\n         description: Milliseconds since the UNIX epoch.\n \n-  ClusterListResponse:\n+  DefaultClusterResponse:\n     type: object\n     required:\n       - defaultCluster\n     properties:\n       defaultCluster:\n         $ref: \"#/definitions/Cluster\"\n \n+  ListClusterResponse:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ff3a3061220ffafb5a23fb4d39a8bd5ef298ea"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkwNzg4Mg==", "bodyText": "The testing pattern here is a bit awkward. What I might have expected to see in a controller-level test would be to make sure all inbound parameters are correctly mapped to the service-level call, e.g.\n\nSet up any required mocks, e.g. when(notebookService).listClustersByProjectAsAdmin(...)\nCall the controller method.\nVerify that notebookService.deleteClusterAsAdmin was called with BILLING_PROJECT_ID\nVerify that clusterAuditor.fireDeleteClustersInProject is called with BILLING_PROJECT_ID", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r365907882", "createdAt": "2020-01-13T16:44:23Z", "author": {"login": "gjuggler"}, "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -234,6 +249,27 @@ public void testListClusters() throws Exception {\n         .isEqualTo(testCluster);\n   }\n \n+  @Test\n+  public void testDeleteClustersInProject() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ff3a3061220ffafb5a23fb4d39a8bd5ef298ea"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxNTc3Nw==", "bodyText": "[Important] Per discussion on Slack, we'll want to flex the requirements to this ticket a bit and add support for deleting a specific named cluster from within the project. The easiest way to handle this would probably be to add an optional body parameter to this API method, \"cluster_names\", which allows one or more cluster names to be provided.\nThe idea is that if / when we implement auto-cluster-delete in response to high-egress events, we'll likely have the specific name of the offending cluster. To reduce the blast radius of the alert response, we'll favor deleting just the known cluster name rather than blasting all clusters from the project.\nDo you think it'll be possible to fit that into this PR without too much re-working? It could also be a follow-up \u2013\u00a0your judgement call to make.", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r365915777", "createdAt": "2020-01-13T16:58:39Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench.yaml", "diffHunk": "@@ -538,6 +538,32 @@ paths:\n \n   # Notebook clusters ####################################################################\n \n+  /v1/admin/security/clusters/{billingProjectId}/delete-clusters:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ff3a3061220ffafb5a23fb4d39a8bd5ef298ea"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNjI0MDAw", "url": "https://github.com/all-of-us/workbench/pull/2994#pullrequestreview-342624000", "createdAt": "2020-01-14T15:35:18Z", "commit": {"oid": "fee3de204e004115159014af8a3f873fc66a9242"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNTozNToxOFrOFdbwPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjo0Mzo0NVrOFdeTMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQwNzc0Mg==", "bodyText": "wrong import", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366407742", "createdAt": "2020-01-14T15:35:18Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/api/ClusterController.java", "diffHunk": "@@ -1,12 +1,14 @@\n package org.pmiops.workbench.api;\n \n+import com.google.appengine.repackaged.com.google.common.collect.ImmutableList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fee3de204e004115159014af8a3f873fc66a9242"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQwODU2MA==", "bodyText": "Might want to blacklist com.google.appengine.repackaged a la https://blog.jetbrains.com/idea/2009/03/excluding-classes-from-auto-import/", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366408560", "createdAt": "2020-01-14T15:36:43Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/api/ClusterController.java", "diffHunk": "@@ -1,12 +1,14 @@\n package org.pmiops.workbench.api;\n \n+import com.google.appengine.repackaged.com.google.common.collect.ImmutableList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQwNzc0Mg=="}, "originalCommit": {"oid": "fee3de204e004115159014af8a3f873fc66a9242"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyMTE0MA==", "bodyText": "This call will skip deleted clusters - see LeonardoNotebooksClientImpl line 155", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366421140", "createdAt": "2020-01-14T15:56:35Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/api/ClusterController.java", "diffHunk": "@@ -116,7 +124,65 @@\n   }\n \n   @Override\n-  public ResponseEntity<ClusterListResponse> listClusters(\n+  @AuthorityRequired(Authority.SECURITY_ADMIN)\n+  public ResponseEntity<List<ListClusterResponse>> deleteClustersInProject(\n+      String billingProjectId, ListClusterDeleteRequest clusterNamesToDelete) {\n+    if (billingProjectId == null) {\n+      throw new BadRequestException(\"Must specify billing project\");\n+    }\n+    List<org.pmiops.workbench.notebooks.model.ListClusterResponse> clustersToDelete =\n+        leonardoNotebooksClient.listClustersByProjectAsAdmin(billingProjectId).stream()\n+            .filter(\n+                cluster ->\n+                    clusterNamesToDelete.getClustersToDelete() == null\n+                        || clusterNamesToDelete\n+                            .getClustersToDelete()\n+                            .contains(cluster.getClusterName()))\n+            .collect(Collectors.toList());\n+\n+    clustersToDelete.forEach(\n+        cluster ->\n+            leonardoNotebooksClient.deleteClusterAsAdmin(\n+                cluster.getGoogleProject(), cluster.getClusterName()));\n+    List<ListClusterResponse> clustersInProjectAffected =\n+        leonardoNotebooksClient.listClustersByProjectAsAdmin(billingProjectId).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fee3de204e004115159014af8a3f873fc66a9242"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyNjAxNw==", "bodyText": "This filter block is repeated below, so we can extract it as a small function", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366426017", "createdAt": "2020-01-14T16:04:36Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/api/ClusterController.java", "diffHunk": "@@ -116,7 +124,65 @@\n   }\n \n   @Override\n-  public ResponseEntity<ClusterListResponse> listClusters(\n+  @AuthorityRequired(Authority.SECURITY_ADMIN)\n+  public ResponseEntity<List<ListClusterResponse>> deleteClustersInProject(\n+      String billingProjectId, ListClusterDeleteRequest clusterNamesToDelete) {\n+    if (billingProjectId == null) {\n+      throw new BadRequestException(\"Must specify billing project\");\n+    }\n+    List<org.pmiops.workbench.notebooks.model.ListClusterResponse> clustersToDelete =\n+        leonardoNotebooksClient.listClustersByProjectAsAdmin(billingProjectId).stream()\n+            .filter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fee3de204e004115159014af8a3f873fc66a9242"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQzMDczMA==", "bodyText": "does not throw Exception - this can actually be removed from every method in this class", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366430730", "createdAt": "2020-01-14T16:12:42Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -234,6 +249,26 @@ public void testListClusters() throws Exception {\n         .isEqualTo(testCluster);\n   }\n \n+  @Test\n+  public void testDeleteClustersInProject() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fee3de204e004115159014af8a3f873fc66a9242"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQzMzk1Mg==", "bodyText": "changing this to CLUSTER_NAMES.length() would make it explicit", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366433952", "createdAt": "2020-01-14T16:17:59Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/actionaudit/auditors/ClusterAuditorTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package org.pmiops.workbench.actionaudit.auditors;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.inject.Provider;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.pmiops.workbench.actionaudit.ActionAuditEvent;\n+import org.pmiops.workbench.actionaudit.ActionAuditService;\n+import org.pmiops.workbench.actionaudit.ActionType;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class ClusterAuditorTest {\n+  private DbUser user1;\n+  private static final long Y2K_EPOCH_MILLIS =\n+      Instant.parse(\"2000-01-01T00:00:00.00Z\").toEpochMilli();\n+  private static final String ACTION_ID = \"58cbae08-447f-499f-95b9-7bdedc955f4d\";\n+  private static final String BILLING_PROJECT_ID = \"all-of-us-yjty\";\n+  private static final List<String> CLUSTER_NAMES =\n+      ImmutableList.of(\"all-of-us-1\", \"all-of-us-2\", \"all-of-us-3\");\n+\n+  private ClusterAuditor clusterAuditor;\n+\n+  @Captor private ArgumentCaptor<Collection<ActionAuditEvent>> eventCollectionCaptor;\n+\n+  @Mock private Provider<String> mockActionIdProvider;\n+  @Mock private ActionAuditService mockActionAuditService;\n+  @Mock private Clock mockClock;\n+  @Mock private Provider<DbUser> mockUserProvider;\n+\n+  @TestConfiguration\n+  @MockBean(value = {ActionAuditService.class})\n+  static class Configuration {}\n+\n+  @Before\n+  public void setUp() {\n+    user1 = new DbUser();\n+    user1.setUserId(101L);\n+    user1.setUsername(\"fflinstone@slate.com\");\n+    user1.setGivenName(\"Fred\");\n+    user1.setFamilyName(\"Flintstone\");\n+    doReturn(user1).when(mockUserProvider).get();\n+    clusterAuditor =\n+        new ClusterAuditorImpl(\n+            mockActionIdProvider, mockActionAuditService, mockClock, mockUserProvider);\n+\n+    doReturn(Y2K_EPOCH_MILLIS).when(mockClock).millis();\n+    doReturn(ACTION_ID).when(mockActionIdProvider).get();\n+  }\n+\n+  @Test\n+  public void testFireDeleteClustersInProject() {\n+    clusterAuditor.fireDeleteClustersInProject(BILLING_PROJECT_ID, CLUSTER_NAMES);\n+    verify(mockActionAuditService).send(eventCollectionCaptor.capture());\n+    Collection<ActionAuditEvent> eventsSent = eventCollectionCaptor.getValue();\n+    assertThat(eventsSent).hasSize(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fee3de204e004115159014af8a3f873fc66a9242"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQzOTg4OQ==", "bodyText": "good rename", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366439889", "createdAt": "2020-01-14T16:27:40Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/resources/workbench.yaml", "diffHunk": "@@ -565,7 +597,7 @@ paths:\n         200:\n           description: Available clusters\n           schema:\n-            $ref: '#/definitions/ClusterListResponse'\n+            $ref: '#/definitions/DefaultClusterResponse'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fee3de204e004115159014af8a3f873fc66a9242"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ0MDY3Ng==", "bodyText": "Can we change this to \"the user's cluster\" or similar?", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366440676", "createdAt": "2020-01-14T16:28:56Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/resources/workbench.yaml", "diffHunk": "@@ -565,7 +597,7 @@ paths:\n         200:\n           description: Available clusters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fee3de204e004115159014af8a3f873fc66a9242"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ0OTQ1Nw==", "bodyText": "I would also like to see these test cases:\n\nclusterNamesToDelete.getClustersToDelete() is null\nclusterNamesToDelete.getClustersToDelete() is an empty list\ndelete some but not all clusters\nrequest to delete cluster(s) which exist but are in a different project\nreturned cluster status is DELETED (I think there's a bug here)\nreturned cluster status is in a non-acceptable state", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366449457", "createdAt": "2020-01-14T16:43:45Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -234,6 +249,27 @@ public void testListClusters() throws Exception {\n         .isEqualTo(testCluster);\n   }\n \n+  @Test\n+  public void testDeleteClustersInProject() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkwNzg4Mg=="}, "originalCommit": {"oid": "c3ff3a3061220ffafb5a23fb4d39a8bd5ef298ea"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb104832c9ea9b6b374571e28a34a4465d4cef5e", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/cb104832c9ea9b6b374571e28a34a4465d4cef5e", "committedDate": "2020-01-14T18:55:27Z", "message": "Add admin delete clusters in project endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c2482043b12f998d2a32fc9b773ea398196b511", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/4c2482043b12f998d2a32fc9b773ea398196b511", "committedDate": "2020-01-14T18:55:27Z", "message": "Add auditing?"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dfe25c6c7c393787e7cd0775e157c38722f7036", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/0dfe25c6c7c393787e7cd0775e157c38722f7036", "committedDate": "2020-01-14T18:55:28Z", "message": "Make list of all clusters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e1bf7747622af9d2f84fc34e8fda99e571a8ab9", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/0e1bf7747622af9d2f84fc34e8fda99e571a8ab9", "committedDate": "2020-01-14T18:55:28Z", "message": "Update auditing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9789c96dde71e140be3e82f6b4bfc35d3e8fc0f", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/b9789c96dde71e140be3e82f6b4bfc35d3e8fc0f", "committedDate": "2020-01-14T18:55:28Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7615a305577402f96c5dbd71c1de438884248236", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/7615a305577402f96c5dbd71c1de438884248236", "committedDate": "2020-01-14T18:55:28Z", "message": "Fix linting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d849ce52d12c53b1511978191d767c5392b5738", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/8d849ce52d12c53b1511978191d767c5392b5738", "committedDate": "2020-01-14T18:55:28Z", "message": "Add cluster auditor tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b476ddaa115ebfb6c5ac64cb16a9accdd523c457", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/b476ddaa115ebfb6c5ac64cb16a9accdd523c457", "committedDate": "2020-01-14T18:55:28Z", "message": "Update test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fb920190539866721ec8352953d95d153ecfa6e", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/8fb920190539866721ec8352953d95d153ecfa6e", "committedDate": "2020-01-14T18:57:33Z", "message": "PR feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3401e46d8d0bcf30133287c72b627f47afb5cc50", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/3401e46d8d0bcf30133287c72b627f47afb5cc50", "committedDate": "2020-01-14T18:51:33Z", "message": "PR feedback"}, "afterCommit": {"oid": "8fb920190539866721ec8352953d95d153ecfa6e", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/8fb920190539866721ec8352953d95d153ecfa6e", "committedDate": "2020-01-14T18:57:33Z", "message": "PR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNzg0ODk5", "url": "https://github.com/all-of-us/workbench/pull/2994#pullrequestreview-342784899", "createdAt": "2020-01-14T19:31:47Z", "commit": {"oid": "8fb920190539866721ec8352953d95d153ecfa6e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTozMTo0N1rOFdjS5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTozNjo0NVrOFdjcDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMTMwMg==", "bodyText": "nit, optional: there's a verifyZeroCalls() (or similar) that can be used instead", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366531302", "createdAt": "2020-01-14T19:31:47Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -242,7 +294,96 @@ public void testListClusters() throws Exception {\n   }\n \n   @Test\n-  public void testListClustersUnknownStatus() throws Exception {\n+  public void testDeleteClustersInProject() {\n+    List<ListClusterResponse> listClusterResponseList = ImmutableList.of(testFcClusterListResponse);\n+    when(notebookService.listClustersByProjectAsAdmin(BILLING_PROJECT_ID))\n+        .thenReturn(listClusterResponseList);\n+\n+    clusterController.deleteClustersInProject(\n+        BILLING_PROJECT_ID,\n+        new ListClusterDeleteRequest()\n+            .clustersToDelete(ImmutableList.of(testFcCluster.getClusterName())));\n+    verify(notebookService)\n+        .deleteClusterAsAdmin(BILLING_PROJECT_ID, testFcCluster.getClusterName());\n+    verify(clusterAuditor)\n+        .fireDeleteClustersInProject(\n+            BILLING_PROJECT_ID,\n+            listClusterResponseList.stream()\n+                .map(ListClusterResponse::getClusterName)\n+                .collect(Collectors.toList()));\n+  }\n+\n+  @Test\n+  public void testDeleteClustersInProjectDeleteSome() {\n+    List<ListClusterResponse> listClusterResponseList =\n+        ImmutableList.of(testFcClusterListResponse, testFcClusterListResponse2);\n+    List<String> clustersToDelete = ImmutableList.of(testFcCluster.getClusterName());\n+    when(notebookService.listClustersByProjectAsAdmin(BILLING_PROJECT_ID))\n+        .thenReturn(listClusterResponseList);\n+\n+    clusterController.deleteClustersInProject(\n+        BILLING_PROJECT_ID, new ListClusterDeleteRequest().clustersToDelete(clustersToDelete));\n+    verify(notebookService, times(clustersToDelete.size()))\n+        .deleteClusterAsAdmin(BILLING_PROJECT_ID, testFcCluster.getClusterName());\n+    verify(clusterAuditor, times(1))\n+        .fireDeleteClustersInProject(BILLING_PROJECT_ID, clustersToDelete);\n+  }\n+\n+  @Test\n+  public void testDeleteClustersInProjectDeleteDoesNotAffectOtherProjects() {\n+    List<ListClusterResponse> listClusterResponseList =\n+        ImmutableList.of(testFcClusterListResponse, testFcClusterListResponse2);\n+    List<String> clustersToDelete =\n+        ImmutableList.of(testFcClusterDifferentProject.getClusterName());\n+    when(notebookService.listClustersByProjectAsAdmin(BILLING_PROJECT_ID))\n+        .thenReturn(listClusterResponseList);\n+\n+    clusterController.deleteClustersInProject(\n+        BILLING_PROJECT_ID, new ListClusterDeleteRequest().clustersToDelete(clustersToDelete));\n+    verify(notebookService, times(0))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb920190539866721ec8352953d95d153ecfa6e"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMzA3OQ==", "bodyText": "This is something I was curious about: do we want a missing param (null) to have different semantics from an empty-list param?  We should be explicit about this in the swagger, if so.", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366533079", "createdAt": "2020-01-14T19:35:34Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -242,7 +294,96 @@ public void testListClusters() throws Exception {\n   }\n \n   @Test\n-  public void testListClustersUnknownStatus() throws Exception {\n+  public void testDeleteClustersInProject() {\n+    List<ListClusterResponse> listClusterResponseList = ImmutableList.of(testFcClusterListResponse);\n+    when(notebookService.listClustersByProjectAsAdmin(BILLING_PROJECT_ID))\n+        .thenReturn(listClusterResponseList);\n+\n+    clusterController.deleteClustersInProject(\n+        BILLING_PROJECT_ID,\n+        new ListClusterDeleteRequest()\n+            .clustersToDelete(ImmutableList.of(testFcCluster.getClusterName())));\n+    verify(notebookService)\n+        .deleteClusterAsAdmin(BILLING_PROJECT_ID, testFcCluster.getClusterName());\n+    verify(clusterAuditor)\n+        .fireDeleteClustersInProject(\n+            BILLING_PROJECT_ID,\n+            listClusterResponseList.stream()\n+                .map(ListClusterResponse::getClusterName)\n+                .collect(Collectors.toList()));\n+  }\n+\n+  @Test\n+  public void testDeleteClustersInProjectDeleteSome() {\n+    List<ListClusterResponse> listClusterResponseList =\n+        ImmutableList.of(testFcClusterListResponse, testFcClusterListResponse2);\n+    List<String> clustersToDelete = ImmutableList.of(testFcCluster.getClusterName());\n+    when(notebookService.listClustersByProjectAsAdmin(BILLING_PROJECT_ID))\n+        .thenReturn(listClusterResponseList);\n+\n+    clusterController.deleteClustersInProject(\n+        BILLING_PROJECT_ID, new ListClusterDeleteRequest().clustersToDelete(clustersToDelete));\n+    verify(notebookService, times(clustersToDelete.size()))\n+        .deleteClusterAsAdmin(BILLING_PROJECT_ID, testFcCluster.getClusterName());\n+    verify(clusterAuditor, times(1))\n+        .fireDeleteClustersInProject(BILLING_PROJECT_ID, clustersToDelete);\n+  }\n+\n+  @Test\n+  public void testDeleteClustersInProjectDeleteDoesNotAffectOtherProjects() {\n+    List<ListClusterResponse> listClusterResponseList =\n+        ImmutableList.of(testFcClusterListResponse, testFcClusterListResponse2);\n+    List<String> clustersToDelete =\n+        ImmutableList.of(testFcClusterDifferentProject.getClusterName());\n+    when(notebookService.listClustersByProjectAsAdmin(BILLING_PROJECT_ID))\n+        .thenReturn(listClusterResponseList);\n+\n+    clusterController.deleteClustersInProject(\n+        BILLING_PROJECT_ID, new ListClusterDeleteRequest().clustersToDelete(clustersToDelete));\n+    verify(notebookService, times(0))\n+        .deleteClusterAsAdmin(BILLING_PROJECT_ID, testFcCluster.getClusterName());\n+    verify(clusterAuditor, times(0))\n+        .fireDeleteClustersInProject(BILLING_PROJECT_ID, clustersToDelete);\n+  }\n+\n+  @Test\n+  public void testDeleteClustersInProjectNoClusters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb920190539866721ec8352953d95d153ecfa6e"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMzY0NA==", "bodyText": "agreed offline - we do not want to list deleted", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366533644", "createdAt": "2020-01-14T19:36:45Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/api/ClusterController.java", "diffHunk": "@@ -116,7 +124,65 @@\n   }\n \n   @Override\n-  public ResponseEntity<ClusterListResponse> listClusters(\n+  @AuthorityRequired(Authority.SECURITY_ADMIN)\n+  public ResponseEntity<List<ListClusterResponse>> deleteClustersInProject(\n+      String billingProjectId, ListClusterDeleteRequest clusterNamesToDelete) {\n+    if (billingProjectId == null) {\n+      throw new BadRequestException(\"Must specify billing project\");\n+    }\n+    List<org.pmiops.workbench.notebooks.model.ListClusterResponse> clustersToDelete =\n+        leonardoNotebooksClient.listClustersByProjectAsAdmin(billingProjectId).stream()\n+            .filter(\n+                cluster ->\n+                    clusterNamesToDelete.getClustersToDelete() == null\n+                        || clusterNamesToDelete\n+                            .getClustersToDelete()\n+                            .contains(cluster.getClusterName()))\n+            .collect(Collectors.toList());\n+\n+    clustersToDelete.forEach(\n+        cluster ->\n+            leonardoNotebooksClient.deleteClusterAsAdmin(\n+                cluster.getGoogleProject(), cluster.getClusterName()));\n+    List<ListClusterResponse> clustersInProjectAffected =\n+        leonardoNotebooksClient.listClustersByProjectAsAdmin(billingProjectId).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyMTE0MA=="}, "originalCommit": {"oid": "fee3de204e004115159014af8a3f873fc66a9242"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d0c96c36ad58859871f45bc4560fc5e722dc88e", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/3d0c96c36ad58859871f45bc4560fc5e722dc88e", "committedDate": "2020-01-14T19:46:44Z", "message": "Update swagger"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNzk3NjM3", "url": "https://github.com/all-of-us/workbench/pull/2994#pullrequestreview-342797637", "createdAt": "2020-01-14T19:53:05Z", "commit": {"oid": "3d0c96c36ad58859871f45bc4560fc5e722dc88e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTo1MzowNlrOFdj5Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTo1MzowNlrOFdj5Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0MTA3MQ==", "bodyText": "no longer necessarily all clusters", "url": "https://github.com/all-of-us/workbench/pull/2994#discussion_r366541071", "createdAt": "2020-01-14T19:53:06Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/resources/workbench.yaml", "diffHunk": "@@ -538,6 +538,39 @@ paths:\n \n   # Notebook clusters ####################################################################\n \n+  /v1/admin/security/clusters/{billingProjectId}/delete-clusters:\n+    post:\n+      summary: Delete all clusters in a project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0c96c36ad58859871f45bc4560fc5e722dc88e"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d7aad4d43e54669e34234e2b5adfbe0db095486", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/3d7aad4d43e54669e34234e2b5adfbe0db095486", "committedDate": "2020-01-14T20:29:38Z", "message": "update swagger"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3664, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}