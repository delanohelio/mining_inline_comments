{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MDAzODAy", "number": 3321, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMTo0Njo1MFrODs6mMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMTo0Njo1MFrODs6mMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDIzOTg1OnYy", "diffSide": "RIGHT", "path": "ui/src/app/guards/disabled-guard.service.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMTo0Njo1MFrOF-CXZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMTo1OToxMlrOF-Ckug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5NDc4OQ==", "bodyText": "You just have read my mind \u2013\u00a0I was adding a review comment asking for a comment, then your comment showed up when I refreshed :)\nI'm still a little confused as to how we have confidence that this guard will be called again once the sign-in state is changed. Is this something we handle explicitly somewhere?", "url": "https://github.com/all-of-us/workbench/pull/3321#discussion_r400594789", "createdAt": "2020-03-31T01:46:50Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/guards/disabled-guard.service.ts", "diffHunk": "@@ -1,16 +1,24 @@\n import {Injectable} from '@angular/core';\n import {ActivatedRouteSnapshot, CanActivate, CanActivateChild, Router, RouterStateSnapshot} from '@angular/router';\n \n+import {SignInService} from 'app/services/sign-in.service';\n import {profileApi} from 'app/services/swagger-fetch-clients';\n import {convertAPIError} from 'app/utils/errors';\n import {ErrorCode} from 'generated/fetch';\n \n @Injectable()\n export class DisabledGuard implements CanActivate, CanActivateChild {\n-  constructor(private router: Router) {}\n+  constructor(private router: Router, private signInService: SignInService) {}\n \n   async canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n     try {\n+      // The user is not necessarily authenticated at this point - we have to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b7db3f05b1c7e8c9b5b0ce4e33556092013253e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5ODAxNQ==", "bodyText": "The observable here blocks until the state is known, at which point it fires the first event which gets captured by this toPromise. Subsequently, it may fire again I believe if the user sign in state changes again, but we're no longer listening at that point.", "url": "https://github.com/all-of-us/workbench/pull/3321#discussion_r400598015", "createdAt": "2020-03-31T01:58:34Z", "author": {"login": "calbach"}, "path": "ui/src/app/guards/disabled-guard.service.ts", "diffHunk": "@@ -1,16 +1,24 @@\n import {Injectable} from '@angular/core';\n import {ActivatedRouteSnapshot, CanActivate, CanActivateChild, Router, RouterStateSnapshot} from '@angular/router';\n \n+import {SignInService} from 'app/services/sign-in.service';\n import {profileApi} from 'app/services/swagger-fetch-clients';\n import {convertAPIError} from 'app/utils/errors';\n import {ErrorCode} from 'generated/fetch';\n \n @Injectable()\n export class DisabledGuard implements CanActivate, CanActivateChild {\n-  constructor(private router: Router) {}\n+  constructor(private router: Router, private signInService: SignInService) {}\n \n   async canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n     try {\n+      // The user is not necessarily authenticated at this point - we have to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5NDc4OQ=="}, "originalCommit": {"oid": "2b7db3f05b1c7e8c9b5b0ce4e33556092013253e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5ODIwMg==", "bodyText": "On initial sign in - we're currently dependent on a full page reload. Therefore signed out -> signed in is not a valid state transition anyways.", "url": "https://github.com/all-of-us/workbench/pull/3321#discussion_r400598202", "createdAt": "2020-03-31T01:59:12Z", "author": {"login": "calbach"}, "path": "ui/src/app/guards/disabled-guard.service.ts", "diffHunk": "@@ -1,16 +1,24 @@\n import {Injectable} from '@angular/core';\n import {ActivatedRouteSnapshot, CanActivate, CanActivateChild, Router, RouterStateSnapshot} from '@angular/router';\n \n+import {SignInService} from 'app/services/sign-in.service';\n import {profileApi} from 'app/services/swagger-fetch-clients';\n import {convertAPIError} from 'app/utils/errors';\n import {ErrorCode} from 'generated/fetch';\n \n @Injectable()\n export class DisabledGuard implements CanActivate, CanActivateChild {\n-  constructor(private router: Router) {}\n+  constructor(private router: Router, private signInService: SignInService) {}\n \n   async canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n     try {\n+      // The user is not necessarily authenticated at this point - we have to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5NDc4OQ=="}, "originalCommit": {"oid": "2b7db3f05b1c7e8c9b5b0ce4e33556092013253e"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3088, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}