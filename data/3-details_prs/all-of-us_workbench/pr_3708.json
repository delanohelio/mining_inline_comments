{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MzUxNTE2", "number": 3708, "title": "[RW-4929][risk=low] Add flag control & GSuite email extraction for dev auto-registration", "bodyText": "This PR attempts to formalize our dev user registration flow, which had previously been inlined into AuthInterceptor.\nBreaking this function out into its own service should make it clearer to any readers what's going on.\nThe only slightly clever thing going on here is with institutional affiliation: to support the follow-up work (where we want to auto-load a few dev institutions into a blank-slate dev database), this PR adds some logic to dev user registration which finds the first matching institution, if available, and uses that for the verified institutional affiliation. This felt to me like the right thing to do in preparation for the future, but I'm open to alternative views.\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n[No \u2013 this adds a long-lived server config variable] If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-06-24T17:36:47Z", "url": "https://github.com/all-of-us/workbench/pull/3708", "merged": true, "mergeCommit": {"oid": "976d4b6575271c444528727aaced72abcd71152c"}, "closed": true, "closedAt": "2020-06-25T13:10:47Z", "author": {"login": "gjuggler"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcs3gsFAH2gAyNDM5MzUxNTE2OjE4NzA1NzNmZDM4YmM3ZWVmN2YwZjUyMmM4MWNkZjljMWYzODViOTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcutrR8AFqTQzNzQyNzY4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1870573fd38bc7eef7f0f522c81cdf9c1f385b99", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/1870573fd38bc7eef7f0f522c81cdf9c1f385b99", "committedDate": "2020-06-19T18:39:14Z", "message": "Initial check-in with tests and new config variable."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8de63199d8a99fe3c2da65c7d8951ea995306b81", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/8de63199d8a99fe3c2da65c7d8951ea995306b81", "committedDate": "2020-06-20T04:20:04Z", "message": "Split out DevUserRegistration into its own service."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bb9f7f230ee3dc661b3cbb9693dad91806a7493", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/9bb9f7f230ee3dc661b3cbb9693dad91806a7493", "committedDate": "2020-06-24T17:44:46Z", "message": "Rename config var and fix integation tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3f52ca05b825e11796b507aed9407b1abc06ab3", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/e3f52ca05b825e11796b507aed9407b1abc06ab3", "committedDate": "2020-06-24T17:50:04Z", "message": "Fix method rename."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODcyMTM5", "url": "https://github.com/all-of-us/workbench/pull/3708#pullrequestreview-436872139", "createdAt": "2020-06-24T17:46:33Z", "commit": {"oid": "9bb9f7f230ee3dc661b3cbb9693dad91806a7493"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzo0NjozM1rOGocrqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzo0ODo0OVrOGocwqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2NjE1NQ==", "bodyText": "Changes in this file were mostly opportunistic (e.g. s/emailAddress/email/ in method names), but the key need was to add a method supportting conversion from the full GSuite email address (gjordan@fake-research-aou.org) to the username (gjordan).", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445066155", "createdAt": "2020-06-24T17:46:33Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/google/DirectoryService.java", "diffHunk": "@@ -1,25 +1,29 @@\n package org.pmiops.workbench.google;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb9f7f230ee3dc661b3cbb9693dad91806a7493"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2NjUzMA==", "bodyText": "I decided this wasn't worth a unit test case... feel free to disagree!", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445066530", "createdAt": "2020-06-24T17:47:13Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -356,4 +356,10 @@ private void validateInstitution(Institution institutionRequest) {\n               });\n     }\n   }\n+\n+  public Optional<Institution> getFirstMatchingInstitution(final String contactEmail) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb9f7f230ee3dc661b3cbb9693dad91806a7493"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2Njc2Nw==", "bodyText": "Opportunistic rename \u2013 the original var didn't conform to style guidelines, and userInfo is sufficiently precise.", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445066767", "createdAt": "2020-06-24T17:47:38Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/interceptors/AuthInterceptor.java", "diffHunk": "@@ -110,16 +114,15 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons\n     }\n \n     final String token = authorizationHeader.substring(\"Bearer\".length()).trim();\n-    final Userinfoplus OAuth2Userinfo = userInfoService.getUserInfo(token);\n+    final Userinfoplus userInfo = userInfoService.getUserInfo(token);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb9f7f230ee3dc661b3cbb9693dad91806a7493"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2NzQzNA==", "bodyText": "A lot of the changes in this file were related to Spring-ifying this test class, and pulling some very common logic into simple helper methods.", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445067434", "createdAt": "2020-06-24T17:48:49Z", "author": {"login": "gjuggler"}, "path": "api/src/test/java/org/pmiops/workbench/interceptors/AuthInterceptorTest.java", "diffHunk": "@@ -47,95 +60,114 @@ public void handle() {}\n   public void handle() {}\n }\n \n+@RunWith(SpringRunner.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb9f7f230ee3dc661b3cbb9693dad91806a7493"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b64740172c49d08096ada5e3af84a63e86b95122", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/b64740172c49d08096ada5e3af84a63e86b95122", "committedDate": "2020-06-24T18:28:04Z", "message": "One more unit test fix."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODc5NTcz", "url": "https://github.com/all-of-us/workbench/pull/3708#pullrequestreview-436879573", "createdAt": "2020-06-24T17:56:45Z", "commit": {"oid": "e3f52ca05b825e11796b507aed9407b1abc06ab3"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzo1Njo0NVrOGodCbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODozOTowMFrOGoecwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3MTk4MA==", "bodyText": "Since this is a hierarchical structure, maybe unsafe should be its own section so you don't need a prefix.\nAlso, what's \"unsafe\" here? Is it that the user doesn't go through all the right registration steps? Could we not make it safe by synthesizing those, so these test users are more representative?", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445071980", "createdAt": "2020-06-24T17:56:45Z", "author": {"login": "jaycarlton"}, "path": "api/config/config_local.json", "diffHunk": "@@ -87,6 +87,7 @@\n     \"enableDataUseAgreement\": true,\n     \"enableBetaAccess\": false,\n     \"unsafeAllowSelfBypass\": true,\n+    \"unsafeAllowUserCreationFromGSuiteData\": true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3f52ca05b825e11796b507aed9407b1abc06ab3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3NjUyNw==", "bodyText": "nit: If you do\nimport static com.google.common.truth.Truth8.assertThat;\n\nin addition to the main assertThat(), you can use\nassertThat(service.getContactEmail(userName)).hasValue(\"notasecret@gmail.com\");", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445076527", "createdAt": "2020-06-24T18:04:54Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/google/DirectoryServiceImplIntegrationTest.java", "diffHunk": "@@ -53,7 +53,14 @@ public void testCreateAndDeleteTestUser() {\n                 });\n     // Ensure our two custom schema fields are correctly set & re-fetched from GSuite.\n     assertThat(aouMeta).containsEntry(\"Institution\", \"All of Us Research Workbench\");\n-    assertThat(service.getContactEmailAddress(userName)).isEqualTo(\"notasecret@gmail.com\");\n+    assertThat(service.getContactEmail(userName).get()).isEqualTo(\"notasecret@gmail.com\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3f52ca05b825e11796b507aed9407b1abc06ab3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3ODI0Mw==", "bodyText": "Maybe add a comment that this \"email\" is what we now call username.", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445078243", "createdAt": "2020-06-24T18:08:08Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -312,12 +312,15 @@ public DbUser createServiceAccountUser(String username) {\n   }\n \n   @Override\n-  public DbUser createUser(final Userinfoplus oAuth2Userinfo) {\n+  public DbUser createUser(\n+      final Userinfoplus oAuth2Userinfo,\n+      final String contactEmail,\n+      DbVerifiedInstitutionalAffiliation dbVerifiedAffiliation) {\n     return createUser(\n         oAuth2Userinfo.getGivenName(),\n         oAuth2Userinfo.getFamilyName(),\n         oAuth2Userinfo.getEmail(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3f52ca05b825e11796b507aed9407b1abc06ab3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3ODUwMw==", "bodyText": "aside: a builder would be nice for this class.", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445078503", "createdAt": "2020-06-24T18:08:39Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -326,7 +329,7 @@ public DbUser createUser(final Userinfoplus oAuth2Userinfo) {\n         null,\n         null,\n         null,\n-        null);\n+        dbVerifiedAffiliation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3f52ca05b825e11796b507aed9407b1abc06ab3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3OTExMg==", "bodyText": "this is the only place I've seen gSuiteEmailAddress instead of username. Is the idea here that there may not actually be a user yet?", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445079112", "createdAt": "2020-06-24T18:09:44Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/google/DirectoryService.java", "diffHunk": "@@ -1,25 +1,29 @@\n package org.pmiops.workbench.google;\n \n import com.google.api.services.directory.model.User;\n+import java.util.Optional;\n \n /** Encapsulate Googe APIs for handling GSuite user accounts. */\n public interface DirectoryService {\n   boolean isUsernameTaken(String username);\n \n-  /** Returns a user via email address lookup. */\n+  /** Returns a user via email address lookup. Returns null if no user was found. */\n   User getUser(String email);\n \n   /**\n    * Returns a user via username lookup (e.g. the user's GSuite email address without the domain\n-   * suffix.\n+   * suffix. Returns null if no user was found.\n    */\n   User getUserByUsername(String username);\n \n+  /** Looks up a user by username and returns their stored contact email address, if available. */\n+  Optional<String> getContactEmail(String username);\n+\n   /**\n-   * Looks up a user by username and returns their stored contact email address. If no contact email\n-   * is stored in G Suite, then null is returned.\n+   * Looks up a user by GSuite email address and returns their stored contact email address, if\n+   * available.\n    */\n-  String getContactEmailAddress(String username);\n+  Optional<String> getContactEmailFromGSuiteEmail(String gSuiteEmailAddress);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3f52ca05b825e11796b507aed9407b1abc06ab3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4MDgyMw==", "bodyText": "nit: If we need to do much with this API, a helper class might...help. For example\nOptional<String> getStringField(customSchemaMap, schemaName, fieldName)", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445080823", "createdAt": "2020-06-24T18:12:51Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/google/DirectoryServiceImpl.java", "diffHunk": "@@ -189,12 +189,26 @@ public boolean isUsernameTaken(String username) {\n   }\n \n   // Returns a user's contact email address via the custom schema in the directory API.\n-  public String getContactEmailAddress(String username) {\n-    return (String)\n-        getUserByUsername(username)\n-            .getCustomSchemas()\n-            .get(GSUITE_AOU_SCHEMA_NAME)\n-            .get(GSUITE_FIELD_CONTACT_EMAIL);\n+  public Optional<String> getContactEmail(String username) {\n+    return Optional.ofNullable(getUserByUsername(username))\n+        .map(\n+            user ->\n+                (String)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3f52ca05b825e11796b507aed9407b1abc06ab3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5NTEwNQ==", "bodyText": "nit: I prefer very small names for lambda arguments, especially if they go out of scope in the same line.", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445095105", "createdAt": "2020-06-24T18:39:00Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -356,4 +356,10 @@ private void validateInstitution(Institution institutionRequest) {\n               });\n     }\n   }\n+\n+  public Optional<Institution> getFirstMatchingInstitution(final String contactEmail) {\n+    return getInstitutions().stream()\n+        .filter(institution -> validateInstitutionalEmail(institution, contactEmail))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3f52ca05b825e11796b507aed9407b1abc06ab3"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2OTc1MTIz", "url": "https://github.com/all-of-us/workbench/pull/3708#pullrequestreview-436975123", "createdAt": "2020-06-24T20:17:48Z", "commit": {"oid": "b64740172c49d08096ada5e3af84a63e86b95122"}, "state": "APPROVED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDoxNzo0OFrOGohnVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDo0NDoyM1rOGoidJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0Njk2NA==", "bodyText": "In that case, I'd rename username in this class then to usernamePrefix or some such.\nFWIW I rarely absorb code a file at a time. It's 80% hopping via IDE linkage between occurrences. Email already means two things. If username means two things, then we're in trouble.", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445146964", "createdAt": "2020-06-24T20:17:48Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/google/DirectoryService.java", "diffHunk": "@@ -1,25 +1,29 @@\n package org.pmiops.workbench.google;\n \n import com.google.api.services.directory.model.User;\n+import java.util.Optional;\n \n /** Encapsulate Googe APIs for handling GSuite user accounts. */\n public interface DirectoryService {\n   boolean isUsernameTaken(String username);\n \n-  /** Returns a user via email address lookup. */\n+  /** Returns a user via email address lookup. Returns null if no user was found. */\n   User getUser(String email);\n \n   /**\n    * Returns a user via username lookup (e.g. the user's GSuite email address without the domain\n-   * suffix.\n+   * suffix. Returns null if no user was found.\n    */\n   User getUserByUsername(String username);\n \n+  /** Looks up a user by username and returns their stored contact email address, if available. */\n+  Optional<String> getContactEmail(String username);\n+\n   /**\n-   * Looks up a user by username and returns their stored contact email address. If no contact email\n-   * is stored in G Suite, then null is returned.\n+   * Looks up a user by GSuite email address and returns their stored contact email address, if\n+   * available.\n    */\n-  String getContactEmailAddress(String username);\n+  Optional<String> getContactEmailFromGSuiteEmail(String gSuiteEmailAddress);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3OTExMg=="}, "originalCommit": {"oid": "e3f52ca05b825e11796b507aed9407b1abc06ab3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0NzUxOA==", "bodyText": "super nit: might be faster to do this via a query directly on the DAO, but with a small # of institutions it doesn't much matter.", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445147518", "createdAt": "2020-06-24T20:18:55Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -356,4 +356,10 @@ private void validateInstitution(Institution institutionRequest) {\n               });\n     }\n   }\n+\n+  public Optional<Institution> getFirstMatchingInstitution(final String contactEmail) {\n+    return getInstitutions().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b64740172c49d08096ada5e3af84a63e86b95122"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0OTE1MA==", "bodyText": "nit: Userinfoplus isn't the most descriptive class name. Maybe oauthInfo? \"user\" is implied I think.", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445149150", "createdAt": "2020-06-24T20:22:05Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/interceptors/AuthInterceptor.java", "diffHunk": "@@ -110,16 +114,15 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons\n     }\n \n     final String token = authorizationHeader.substring(\"Bearer\".length()).trim();\n-    final Userinfoplus OAuth2Userinfo = userInfoService.getUserInfo(token);\n+    final Userinfoplus userInfo = userInfoService.getUserInfo(token);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2Njc2Nw=="}, "originalCommit": {"oid": "9bb9f7f230ee3dc661b3cbb9693dad91806a7493"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1MDA4NQ==", "bodyText": "nit: not sure if \"dev\" is an approved abbrev.", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445150085", "createdAt": "2020-06-24T20:23:53Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/user/DevUserRegistrationService.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package org.pmiops.workbench.user;\n+\n+import com.google.api.services.oauth2.model.Userinfoplus;\n+import org.pmiops.workbench.db.model.DbUser;\n+\n+public interface DevUserRegistrationService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b64740172c49d08096ada5e3af84a63e86b95122"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1MDYzNg==", "bodyText": "Might as well use the full class name createUserFromUserinfoplus or leave it out, i.e. createUser().", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445150636", "createdAt": "2020-06-24T20:24:58Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/user/DevUserRegistrationService.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package org.pmiops.workbench.user;\n+\n+import com.google.api.services.oauth2.model.Userinfoplus;\n+import org.pmiops.workbench.db.model.DbUser;\n+\n+public interface DevUserRegistrationService {\n+  DbUser createUserFromUserInfo(Userinfoplus userInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b64740172c49d08096ada5e3af84a63e86b95122"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1MjM3Mw==", "bodyText": "It seems awkward that this service needs to know anything about institutions. It seems like the UserService should have all the machinery necessary to affiliate the user.", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445152373", "createdAt": "2020-06-24T20:28:09Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/user/DevUserRegistrationServiceImpl.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.pmiops.workbench.user;\n+\n+import com.google.api.services.oauth2.model.Userinfoplus;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+import org.pmiops.workbench.db.dao.UserService;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.google.DirectoryService;\n+import org.pmiops.workbench.institution.InstitutionService;\n+import org.pmiops.workbench.institution.VerifiedInstitutionalAffiliationMapper;\n+import org.pmiops.workbench.model.Institution;\n+import org.pmiops.workbench.model.InstitutionalRole;\n+import org.pmiops.workbench.model.VerifiedInstitutionalAffiliation;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class DevUserRegistrationServiceImpl implements DevUserRegistrationService {\n+\n+  private static final Logger log =\n+      Logger.getLogger(DevUserRegistrationServiceImpl.class.getName());\n+\n+  private final DirectoryService directoryService;\n+  private final InstitutionService institutionService;\n+  private final UserService userService;\n+  private final VerifiedInstitutionalAffiliationMapper verifiedInstitutionalAffiliationMapper;\n+\n+  @Autowired\n+  DevUserRegistrationServiceImpl(\n+      DirectoryService directoryService,\n+      InstitutionService institutionService,\n+      UserService userService,\n+      VerifiedInstitutionalAffiliationMapper verifiedInstitutionalAffiliationMapper) {\n+    this.directoryService = directoryService;\n+    this.institutionService = institutionService;\n+    this.userService = userService;\n+    this.verifiedInstitutionalAffiliationMapper = verifiedInstitutionalAffiliationMapper;\n+  }\n+\n+  @Override\n+  public DbUser createUserFromUserInfo(Userinfoplus userInfo) {\n+    // We'll try to lookup the GSuite contact email if available. Otherwise, fall back to the\n+    // username email address (e.g. foobar@fake-research-aou.org).\n+    Optional<String> gSuiteContactEmail =\n+        directoryService.getContactEmailFromGSuiteEmail(userInfo.getEmail());\n+    String contactEmail = gSuiteContactEmail.orElse(userInfo.getEmail());\n+\n+    log.info(\n+        String.format(\n+            \"Re-creating dev user '%s' with contact email '%s'.\",\n+            userInfo.getEmail(), contactEmail));\n+\n+    Institution institution =\n+        institutionService\n+            .getFirstMatchingInstitution(contactEmail)\n+            .orElseThrow(\n+                () ->\n+                    new BadRequestException(\n+                        String.format(\n+                            \"Contact email %s does not match any institutions. Cannot register new dev user.\",\n+                            contactEmail)));\n+    VerifiedInstitutionalAffiliation verifiedAffiliation =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b64740172c49d08096ada5e3af84a63e86b95122"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1NTY3Mg==", "bodyText": "nit: you can use the new Optional<DbUser> getByUsername(String username) on UserService to avoid the null comparison.", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445155672", "createdAt": "2020-06-24T20:34:37Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/interceptors/AuthInterceptor.java", "diffHunk": "@@ -155,8 +159,13 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons\n     }\n     DbUser user = userDao.findUserByUsername(userName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b64740172c49d08096ada5e3af84a63e86b95122"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1NjE1NQ==", "bodyText": "for later: it would be good to audit this...though if it never happens in production \ud83e\udd37 .", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445156155", "createdAt": "2020-06-24T20:35:31Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/interceptors/AuthInterceptor.java", "diffHunk": "@@ -155,8 +159,13 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons\n     }\n     DbUser user = userDao.findUserByUsername(userName);\n     if (user == null) {\n-      // TODO(danrodney): start populating contact email in Google account, use it here.\n-      user = userService.createUser(OAuth2Userinfo);\n+      if (workbenchConfigProvider.get().access.unsafeAllowUserCreationFromGSuiteData) {\n+        DbUser dbUser = devUserRegistrationService.createUserFromUserInfo(userInfo);\n+        log.info(String.format(\"Dev user '%s' has been re-created.\", dbUser.getUsername()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b64740172c49d08096ada5e3af84a63e86b95122"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1NjkwOA==", "bodyText": "You could make this a bean I think.", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445156908", "createdAt": "2020-06-24T20:36:55Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/interceptors/AuthInterceptorTest.java", "diffHunk": "@@ -47,95 +59,114 @@ public void handle() {}\n   public void handle() {}\n }\n \n+@RunWith(SpringRunner.class)\n public class AuthInterceptorTest {\n \n   private static final long USER_ID = 123L;\n \n-  @Mock private UserInfoService userInfoService;\n-  @Mock private FireCloudService fireCloudService;\n-  @Mock private UserDao userDao;\n+  @MockBean private UserInfoService userInfoService;\n+  @MockBean private FireCloudService fireCloudService;\n+  @MockBean private UserDao userDao;\n+  @MockBean private UserService userService;\n+  @MockBean private DevUserRegistrationService devUserRegistrationService;\n+\n+  private static WorkbenchConfig workbenchConfig;\n+\n   @Mock private HttpServletRequest request;\n   @Mock private HttpServletResponse response;\n   @Mock private HandlerMethod handler;\n-  @Mock private UserService userService;\n+  private DbUser user;\n \n   @Rule public MockitoRule mockitoRule = MockitoJUnit.rule();\n \n-  private AuthInterceptor interceptor;\n-  private DbUser user;\n+  @Autowired private AuthInterceptor interceptor;\n+\n+  @TestConfiguration\n+  @Import({AuthInterceptor.class})\n+  static class Configuration {\n+    @Bean\n+    @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+    public WorkbenchConfig getWorkbenchConfig() {\n+      return workbenchConfig;\n+    }\n+  }\n \n   @Before\n   public void setUp() {\n-    WorkbenchConfig workbenchConfig = new WorkbenchConfig();\n+    workbenchConfig = WorkbenchConfig.createEmptyConfig();\n     workbenchConfig.googleDirectoryService = new GoogleDirectoryServiceConfig();\n     workbenchConfig.googleDirectoryService.gSuiteDomain = \"fake-domain.org\";\n     workbenchConfig.auth = new AuthConfig();\n     workbenchConfig.auth.serviceAccountApiUsers = new ArrayList<>();\n     workbenchConfig.auth.serviceAccountApiUsers.add(\"service-account@appspot.gserviceaccount.com\");\n-    this.interceptor =\n-        new AuthInterceptor(\n-            userInfoService, fireCloudService, Providers.of(workbenchConfig), userDao, userService);\n-    this.user = new DbUser();\n+    user = new DbUser();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b64740172c49d08096ada5e3af84a63e86b95122"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1OTE1MQ==", "bodyText": "nit: new convention is to have a mock prefix for mock instance variables, since the call site can be a long way from the declaration.", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445159151", "createdAt": "2020-06-24T20:41:22Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/interceptors/AuthInterceptorTest.java", "diffHunk": "@@ -47,95 +59,114 @@ public void handle() {}\n   public void handle() {}\n }\n \n+@RunWith(SpringRunner.class)\n public class AuthInterceptorTest {\n \n   private static final long USER_ID = 123L;\n \n-  @Mock private UserInfoService userInfoService;\n-  @Mock private FireCloudService fireCloudService;\n-  @Mock private UserDao userDao;\n+  @MockBean private UserInfoService userInfoService;\n+  @MockBean private FireCloudService fireCloudService;\n+  @MockBean private UserDao userDao;\n+  @MockBean private UserService userService;\n+  @MockBean private DevUserRegistrationService devUserRegistrationService;\n+\n+  private static WorkbenchConfig workbenchConfig;\n+\n   @Mock private HttpServletRequest request;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b64740172c49d08096ada5e3af84a63e86b95122"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2MDc0MQ==", "bodyText": "Are there no other side effects to verify here?", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445160741", "createdAt": "2020-06-24T20:44:23Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/user/DevUserRegistrationServiceTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.pmiops.workbench.user;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.api.services.oauth2.model.Userinfoplus;\n+import java.util.Optional;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.pmiops.workbench.db.dao.UserService;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.google.DirectoryService;\n+import org.pmiops.workbench.institution.InstitutionService;\n+import org.pmiops.workbench.institution.VerifiedInstitutionalAffiliationMapperImpl;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class DevUserRegistrationServiceTest {\n+\n+  @MockBean private DirectoryService directoryService;\n+  @MockBean private InstitutionService institutionService;\n+  @MockBean private UserService userService;\n+\n+  private Userinfoplus userInfo;\n+  private ArgumentCaptor<DbVerifiedInstitutionalAffiliation> dbAffiliationCaptor =\n+      ArgumentCaptor.forClass(DbVerifiedInstitutionalAffiliation.class);\n+\n+  @Autowired private DevUserRegistrationService service;\n+\n+  @TestConfiguration\n+  @Import({DevUserRegistrationServiceImpl.class, VerifiedInstitutionalAffiliationMapperImpl.class})\n+  static class Configuration {}\n+\n+  @Before\n+  public void setUp() {\n+    userInfo = new Userinfoplus().setEmail(\"gjordan@fake-research-aou.org\");\n+  }\n+\n+  @Test\n+  public void testCreateUserFromUserInfo() {\n+    // Tests the happy path: a contact email and matching institution are both found, allowing us\n+    // to register the dev user.\n+    DbUser dbUser = new DbUser();\n+    dbUser.setContactEmail(\"gregory.jordan.123@gmail.com\");\n+    dbUser.setUsername(\"gjordan@fake-research-aou.org\");\n+    DbInstitution dbInstitution = new DbInstitution();\n+    dbInstitution.setShortName(\"Google\");\n+\n+    when(directoryService.getContactEmailFromGSuiteEmail(eq(\"gjordan@fake-research-aou.org\")))\n+        .thenReturn(Optional.of(\"gregory.jordan.123@gmail.com\"));\n+    when(institutionService.getFirstMatchingInstitution(\"gregory.jordan.123@gmail.com\"))\n+        .thenReturn(Optional.of(new Institution().shortName(\"Google\")));\n+    when(institutionService.getDbInstitutionOrThrow(eq(\"Google\"))).thenReturn(dbInstitution);\n+    when(userService.createUser(\n+            eq(userInfo), eq(\"gregory.jordan.123@gmail.com\"), dbAffiliationCaptor.capture()))\n+        .thenReturn(dbUser);\n+\n+    service.createUserFromUserInfo(userInfo);\n+\n+    assertThat(dbAffiliationCaptor.getValue().getInstitution().getShortName()).isEqualTo(\"Google\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b64740172c49d08096ada5e3af84a63e86b95122"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ad4ed644073c61a9369b05ee60e3b911e2eec39", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/4ad4ed644073c61a9369b05ee60e3b911e2eec39", "committedDate": "2020-06-24T22:04:53Z", "message": "Tweak the logic in auth interceptor."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDUxNDY4", "url": "https://github.com/all-of-us/workbench/pull/3708#pullrequestreview-437051468", "createdAt": "2020-06-24T22:32:34Z", "commit": {"oid": "b64740172c49d08096ada5e3af84a63e86b95122"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjozMjozNFrOGolWMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjozMjozNFrOGolWMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwODExNQ==", "bodyText": "Thanks for this improvement. Will reference this in the post-mortem.", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445208115", "createdAt": "2020-06-24T22:32:34Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/interceptors/AuthInterceptor.java", "diffHunk": "@@ -155,8 +159,13 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons\n     }\n     DbUser user = userDao.findUserByUsername(userName);\n     if (user == null) {\n-      // TODO(danrodney): start populating contact email in Google account, use it here.\n-      user = userService.createUser(OAuth2Userinfo);\n+      if (workbenchConfigProvider.get().access.unsafeAllowUserCreationFromGSuiteData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b64740172c49d08096ada5e3af84a63e86b95122"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "572c196be99bf9b1dd761808a289ddb706250bdb", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/572c196be99bf9b1dd761808a289ddb706250bdb", "committedDate": "2020-06-25T00:17:29Z", "message": "Method renames and PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c534f35cf8b801e8485a46d4194a576054ee4d1", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/3c534f35cf8b801e8485a46d4194a576054ee4d1", "committedDate": "2020-06-25T03:26:24Z", "message": "Refactor to improve consistency of username handling in DirectoryService."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb5a79b9cb9a8916bb58307aab6e10420a5f6581", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/bb5a79b9cb9a8916bb58307aab6e10420a5f6581", "committedDate": "2020-06-25T03:28:49Z", "message": "Fix comment formatting."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NDI3Njgx", "url": "https://github.com/all-of-us/workbench/pull/3708#pullrequestreview-437427681", "createdAt": "2020-06-25T12:07:05Z", "commit": {"oid": "bb5a79b9cb9a8916bb58307aab6e10420a5f6581"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMjowNzowNVrOGo3rkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMjoxODo1NFrOGo4CzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUwODQ5Nw==", "bodyText": "I understand,  but I'm saying  changing the var  name to  be more descriptive at the  expense of matching the type would help.", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445508497", "createdAt": "2020-06-25T12:07:05Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/interceptors/AuthInterceptor.java", "diffHunk": "@@ -110,16 +114,15 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons\n     }\n \n     final String token = authorizationHeader.substring(\"Bearer\".length()).trim();\n-    final Userinfoplus OAuth2Userinfo = userInfoService.getUserInfo(token);\n+    final Userinfoplus userInfo = userInfoService.getUserInfo(token);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2Njc2Nw=="}, "originalCommit": {"oid": "9bb9f7f230ee3dc661b3cbb9693dad91806a7493"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUxMDY3OA==", "bodyText": "Yeah, it's hard to write awkward logic with Optionals, which is kind of the point.\nFWIW you can do DbUser user  = getByUsername(String username).orElseGet(() -> userService.createServiceAccountUser(userName)); to clean up one  conditional. Or better yet put a getOrCreateServiceAccount(String username) on the UserService.", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445510678", "createdAt": "2020-06-25T12:11:17Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/interceptors/AuthInterceptor.java", "diffHunk": "@@ -155,8 +159,13 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons\n     }\n     DbUser user = userDao.findUserByUsername(userName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1NTY3Mg=="}, "originalCommit": {"oid": "b64740172c49d08096ada5e3af84a63e86b95122"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUxNDQ0NA==", "bodyText": "OK. I was going to  see if any other fields on the  created user could  be validated, but it's mocks all  the way down.", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445514444", "createdAt": "2020-06-25T12:18:54Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/user/DevUserRegistrationServiceTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.pmiops.workbench.user;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.api.services.oauth2.model.Userinfoplus;\n+import java.util.Optional;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.pmiops.workbench.db.dao.UserService;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.google.DirectoryService;\n+import org.pmiops.workbench.institution.InstitutionService;\n+import org.pmiops.workbench.institution.VerifiedInstitutionalAffiliationMapperImpl;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class DevUserRegistrationServiceTest {\n+\n+  @MockBean private DirectoryService directoryService;\n+  @MockBean private InstitutionService institutionService;\n+  @MockBean private UserService userService;\n+\n+  private Userinfoplus userInfo;\n+  private ArgumentCaptor<DbVerifiedInstitutionalAffiliation> dbAffiliationCaptor =\n+      ArgumentCaptor.forClass(DbVerifiedInstitutionalAffiliation.class);\n+\n+  @Autowired private DevUserRegistrationService service;\n+\n+  @TestConfiguration\n+  @Import({DevUserRegistrationServiceImpl.class, VerifiedInstitutionalAffiliationMapperImpl.class})\n+  static class Configuration {}\n+\n+  @Before\n+  public void setUp() {\n+    userInfo = new Userinfoplus().setEmail(\"gjordan@fake-research-aou.org\");\n+  }\n+\n+  @Test\n+  public void testCreateUserFromUserInfo() {\n+    // Tests the happy path: a contact email and matching institution are both found, allowing us\n+    // to register the dev user.\n+    DbUser dbUser = new DbUser();\n+    dbUser.setContactEmail(\"gregory.jordan.123@gmail.com\");\n+    dbUser.setUsername(\"gjordan@fake-research-aou.org\");\n+    DbInstitution dbInstitution = new DbInstitution();\n+    dbInstitution.setShortName(\"Google\");\n+\n+    when(directoryService.getContactEmailFromGSuiteEmail(eq(\"gjordan@fake-research-aou.org\")))\n+        .thenReturn(Optional.of(\"gregory.jordan.123@gmail.com\"));\n+    when(institutionService.getFirstMatchingInstitution(\"gregory.jordan.123@gmail.com\"))\n+        .thenReturn(Optional.of(new Institution().shortName(\"Google\")));\n+    when(institutionService.getDbInstitutionOrThrow(eq(\"Google\"))).thenReturn(dbInstitution);\n+    when(userService.createUser(\n+            eq(userInfo), eq(\"gregory.jordan.123@gmail.com\"), dbAffiliationCaptor.capture()))\n+        .thenReturn(dbUser);\n+\n+    service.createUserFromUserInfo(userInfo);\n+\n+    assertThat(dbAffiliationCaptor.getValue().getInstitution().getShortName()).isEqualTo(\"Google\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2MDc0MQ=="}, "originalCommit": {"oid": "b64740172c49d08096ada5e3af84a63e86b95122"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4616, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}