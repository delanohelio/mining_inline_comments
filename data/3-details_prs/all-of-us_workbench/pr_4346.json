{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMzUwMjk5", "number": 4346, "title": "[RW-5921][risk=no] Lazy runtime initialization should pick accurate configuration", "bodyText": "Description:\n\nLazily create the user's latest runtime is a valid one has been saved. No video since the status updates take too long.\n\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n I have run the E2E tests on ths change against my local UI + API server with yarn test-local\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-12-02T23:19:39Z", "url": "https://github.com/all-of-us/workbench/pull/4346", "merged": true, "mergeCommit": {"oid": "7091b3ad2d9b64fe6674d4f3d281a46f471cc5b9"}, "closed": true, "closedAt": "2020-12-04T00:18:52Z", "author": {"login": "ericsong"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiVXPTgH2gAyNTMxMzUwMjk5OjdmYWI1ZjBjZmVlNWE4MmFkNjUyY2M5N2Y2NjIxMGYxMWY3MTUyOTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdir0HRAFqTU0NDU0ODc0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7fab5f0cfee5a82ad652cc97f66210f11f715290", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/7fab5f0cfee5a82ad652cc97f66210f11f715290", "committedDate": "2020-12-02T21:24:03Z", "message": "add test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62a6f76d6361d4703f8bd4d6efbd04e0d2dbcff9", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/62a6f76d6361d4703f8bd4d6efbd04e0d2dbcff9", "committedDate": "2020-12-02T22:42:43Z", "message": "add impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8ab30a87453571211588b37c37045aa7ac23438", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/f8ab30a87453571211588b37c37045aa7ac23438", "committedDate": "2020-12-02T23:18:30Z", "message": "syntax"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMzE5ODM1", "url": "https://github.com/all-of-us/workbench/pull/4346#pullrequestreview-543319835", "createdAt": "2020-12-02T23:20:22Z", "commit": {"oid": "f8ab30a87453571211588b37c37045aa7ac23438"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMzoyMDoyMlrOH9yTCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMzoyMDoyMlrOH9yTCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU0OTI1OA==", "bodyText": "I'm pretty sure this does what I want but I don't really understand how it works. Can someone explain to me why this works but await LeoRuntimeInitializer..... does not?", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r534549258", "createdAt": "2020-12-02T23:20:22Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/leo-runtime-initializer.spec.tsx", "diffHunk": "@@ -163,6 +163,31 @@ describe('RuntimeInitializer', () => {\n     expect(runtime.status).toEqual(RuntimeStatus.Running);\n   });\n \n+  it('should lazily create user\\'s most runtime if a valid one exists', async() => {\n+    serverConfigStore.next({gsuiteDomain: 'researchallofus.org', enableCustomRuntimes: true});\n+    mockGetRuntime.mockImplementation(namespace => {\n+      return {\n+        ...defaultRuntime(),\n+        gceConfig: {\n+          diskSize: 777,\n+          machineType: 'n1-standard-16'\n+        },\n+        status: RuntimeStatus.Deleted\n+      }; });\n+\n+    LeoRuntimeInitializer.initialize({\n+      workspaceNamespace: workspaceNamespace,\n+    });\n+    await new Promise(setImmediate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8ab30a87453571211588b37c37045aa7ac23438"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMzM1Mzg0", "url": "https://github.com/all-of-us/workbench/pull/4346#pullrequestreview-543335384", "createdAt": "2020-12-02T23:56:06Z", "commit": {"oid": "f8ab30a87453571211588b37c37045aa7ac23438"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMzo1NjowN1rOH9zJjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMzo1OTo0MFrOH9zOeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU2MzIxMw==", "bodyText": "See TODO/comment above (and you can remove the TODO part). Ideally the logic here would be the same as you added on the create panel: if the deleted runtime has one of the preset configuration types, use that as the target (instead of whatever we got from the backend). This makes the behavior symmetric to opening the create panel, where we want to snap to the latest \"preset\", rather than whatever the preset happened to be when the user last used the system.\nNote: this won't matter much for now as we don't expect the presets to change, but later when we start allowing configuration of docker image versions, this will be important so people don't unintentionally stuck on old versions.", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r534563213", "createdAt": "2020-12-02T23:56:07Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -204,7 +202,15 @@ export class LeoRuntimeInitializer {\n       // - the user's most recent UserOverride config, if any\n       // - (maybe) the user's most recently selected preset, if any\n       // - general analysis\n-      runtime = {...runtimePresets.generalAnalysis.runtimeTemplate};\n+\n+      if (this.currentRuntime && this.currentRuntime.status === RuntimeStatus.Deleted) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8ab30a87453571211588b37c37045aa7ac23438"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU2NDQ3NA==", "bodyText": "Also, as to why this await new Promise(setImmediate) appeared to work: what this does is allow the call stack to resolve for any calbacks/promises that are pending. In this case, I expect this gives the first call to getRuntime in the initializer a chance to return and be processed, which may be enough to satisfy your test constraints.", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r534564474", "createdAt": "2020-12-02T23:59:40Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/leo-runtime-initializer.spec.tsx", "diffHunk": "@@ -163,6 +163,31 @@ describe('RuntimeInitializer', () => {\n     expect(runtime.status).toEqual(RuntimeStatus.Running);\n   });\n \n+  it('should lazily create user\\'s most runtime if a valid one exists', async() => {\n+    serverConfigStore.next({gsuiteDomain: 'researchallofus.org', enableCustomRuntimes: true});\n+    mockGetRuntime.mockImplementation(namespace => {\n+      return {\n+        ...defaultRuntime(),\n+        gceConfig: {\n+          diskSize: 777,\n+          machineType: 'n1-standard-16'\n+        },\n+        status: RuntimeStatus.Deleted\n+      }; });\n+\n+    LeoRuntimeInitializer.initialize({\n+      workspaceNamespace: workspaceNamespace,\n+    });\n+    await new Promise(setImmediate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU0OTI1OA=="}, "originalCommit": {"oid": "f8ab30a87453571211588b37c37045aa7ac23438"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee8bc3e378ca5db1bf43d3fbc2d50d8432db7c5b", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/ee8bc3e378ca5db1bf43d3fbc2d50d8432db7c5b", "committedDate": "2020-12-03T14:27:37Z", "message": "use latest preset values during lazy instantiation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1beedf060a9d80b182869c6d1440a41ce06b763f", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/1beedf060a9d80b182869c6d1440a41ce06b763f", "committedDate": "2020-12-03T14:31:06Z", "message": "syntax"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31f8be1fa94d4875ea21a0fc8e687df71f3ec6e5", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/31f8be1fa94d4875ea21a0fc8e687df71f3ec6e5", "committedDate": "2020-12-03T17:22:02Z", "message": "fix case that relies on runtime being undefined for create panel"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Mzc4ODg3", "url": "https://github.com/all-of-us/workbench/pull/4346#pullrequestreview-544378887", "createdAt": "2020-12-03T20:13:15Z", "commit": {"oid": "31f8be1fa94d4875ea21a0fc8e687df71f3ec6e5"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDoxMzoxNlrOH-vsbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDoxOTo0MlrOH-wITg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU1NTE4Mw==", "bodyText": "rm", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r535555183", "createdAt": "2020-12-03T20:13:16Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -791,6 +790,8 @@ export const RuntimePanel = fp.flow(\n       () => PanelContent.Create],\n     [() => true, () => PanelContent.Customize]\n   ])([currentRuntime, status]);\n+  console.log(currentRuntime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31f8be1fa94d4875ea21a0fc8e687df71f3ec6e5"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU1NjM1NQ==", "bodyText": "Unnecessary && check as newRuntime cannot be null at this point", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r535556355", "createdAt": "2020-12-03T20:14:19Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-presets.ts", "diffHunk": "@@ -29,3 +30,26 @@ export const runtimePresets: {\n     }\n   }\n };\n+\n+export const applyPresetOverride = (runtime) => {\n+  if (!runtime) {\n+    return runtime;\n+  }\n+\n+  const newRuntime = {...runtime};\n+\n+  // if runtime configuration type is a default, override its config with preset values\n+  // The Deleted check is so that we only update the user's runtime to the latest preset values\n+  // after they delete their runtime (ex. not while its actively in use).\n+  if (newRuntime && newRuntime.status === RuntimeStatus.Deleted) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31f8be1fa94d4875ea21a0fc8e687df71f3ec6e5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU1NjYxOQ==", "bodyText": "nit: indent", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r535556619", "createdAt": "2020-12-03T20:14:33Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-presets.ts", "diffHunk": "@@ -29,3 +30,26 @@ export const runtimePresets: {\n     }\n   }\n };\n+\n+export const applyPresetOverride = (runtime) => {\n+  if (!runtime) {\n+    return runtime;\n+  }\n+\n+  const newRuntime = {...runtime};\n+\n+  // if runtime configuration type is a default, override its config with preset values\n+  // The Deleted check is so that we only update the user's runtime to the latest preset values\n+  // after they delete their runtime (ex. not while its actively in use).\n+  if (newRuntime && newRuntime.status === RuntimeStatus.Deleted) {\n+    const runtimePresetKey = fp.keys(runtimePresets)\n+    .find(key => runtimePresets[key].runtimeTemplate.configurationType === newRuntime.configurationType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31f8be1fa94d4875ea21a0fc8e687df71f3ec6e5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU1NzU5Mg==", "bodyText": "revert", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r535557592", "createdAt": "2020-12-03T20:15:30Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -282,7 +281,7 @@ export const useRuntimeStatus = (currentWorkspaceNamespace): [\n             resolutionCondition: (r) => resolutionCondition(r)\n           });\n         } catch (e) {\n-          // ExceededActionCountError is expected, as we exceed our create limit of 0.\n+          // gxceededActionCountError is expected, as we exceed our create limit of 0.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31f8be1fa94d4875ea21a0fc8e687df71f3ec6e5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU2MjMxOA==", "bodyText": "IMO this business logic belongs outside of this helper function. I realize this may result in some small duplication, but the separation of responsibilities is clearer if the caller only calls applyPresetOverride in cases where it actually wants to apply a presetOverride. Otherwise you probably need a super verbose method name to convey the semantics accurately.", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r535562318", "createdAt": "2020-12-03T20:19:42Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-presets.ts", "diffHunk": "@@ -29,3 +30,26 @@ export const runtimePresets: {\n     }\n   }\n };\n+\n+export const applyPresetOverride = (runtime) => {\n+  if (!runtime) {\n+    return runtime;\n+  }\n+\n+  const newRuntime = {...runtime};\n+\n+  // if runtime configuration type is a default, override its config with preset values\n+  // The Deleted check is so that we only update the user's runtime to the latest preset values\n+  // after they delete their runtime (ex. not while its actively in use).\n+  if (newRuntime && newRuntime.status === RuntimeStatus.Deleted) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31f8be1fa94d4875ea21a0fc8e687df71f3ec6e5"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92800581784e7ac1dc7de43f5a9ca5a2630f854a", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/92800581784e7ac1dc7de43f5a9ca5a2630f854a", "committedDate": "2020-12-03T22:59:56Z", "message": "code review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "534d18e908f58dd0a07ffefed181163de26130bf", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/534d18e908f58dd0a07ffefed181163de26130bf", "committedDate": "2020-12-03T23:01:31Z", "message": "lint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcfa6caef4d1132b07663a51516655073f7511e1", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/dcfa6caef4d1132b07663a51516655073f7511e1", "committedDate": "2020-12-03T23:06:46Z", "message": "remove deleted check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NTM3MDY0", "url": "https://github.com/all-of-us/workbench/pull/4346#pullrequestreview-544537064", "createdAt": "2020-12-03T23:07:50Z", "commit": {"oid": "534d18e908f58dd0a07ffefed181163de26130bf"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMzowNzo1MFrOH-5Ulg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMzoxMDo1MlrOH-5Z1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcxMjkxOA==", "bodyText": "the existing functions look like they take in a wrapper component but I don't think we actually have one in these tests", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r535712918", "createdAt": "2020-12-03T23:07:50Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/leo-runtime-initializer.spec.tsx", "diffHunk": "@@ -163,6 +163,31 @@ describe('RuntimeInitializer', () => {\n     expect(runtime.status).toEqual(RuntimeStatus.Running);\n   });\n \n+  it('should lazily create user\\'s most runtime if a valid one exists', async() => {\n+    serverConfigStore.next({gsuiteDomain: 'researchallofus.org', enableCustomRuntimes: true});\n+    mockGetRuntime.mockImplementation(namespace => {\n+      return {\n+        ...defaultRuntime(),\n+        gceConfig: {\n+          diskSize: 777,\n+          machineType: 'n1-standard-16'\n+        },\n+        status: RuntimeStatus.Deleted\n+      }; });\n+\n+    LeoRuntimeInitializer.initialize({\n+      workspaceNamespace: workspaceNamespace,\n+    });\n+    await new Promise(setImmediate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU0OTI1OA=="}, "originalCommit": {"oid": "f8ab30a87453571211588b37c37045aa7ac23438"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcxNDI2MQ==", "bodyText": "your comment about factoring out the business logic made me realize that I could probably just remove that check here.\nIn most cases the status will be Deleted at this point but even in the case where it isn't, I feel like it probably makes sense to create the currentRuntime (w/ the preset override) instead of defaulting to the General Analysis template.", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r535714261", "createdAt": "2020-12-03T23:10:52Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -196,16 +194,16 @@ export class LeoRuntimeInitializer {\n       throw new ExceededActionCountError(\n         `Reached max runtime create count (${this.maxCreateCount})`, this.currentRuntime);\n     }\n+\n     let runtime: Runtime;\n     if (serverConfigStore.getValue().enableCustomRuntimes && this.targetRuntime) {\n       runtime = this.targetRuntime;\n+    } else if (this.currentRuntime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcfa6caef4d1132b07663a51516655073f7511e1"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NTQ4NzQw", "url": "https://github.com/all-of-us/workbench/pull/4346#pullrequestreview-544548740", "createdAt": "2020-12-03T23:33:30Z", "commit": {"oid": "dcfa6caef4d1132b07663a51516655073f7511e1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3700, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}