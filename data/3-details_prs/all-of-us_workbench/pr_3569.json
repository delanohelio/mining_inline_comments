{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NDA3Nzgz", "number": 3569, "title": "[RW-3942][risk=low] Leverage new readonly user in developer CLI tooling (2/2)", "bodyText": "This was already reviewed/approved during #3550, which was partially reverted. Adds a new flag to ./project.rb connect-to-cloud-db of --db-user. Defaults to the new readonly user.\nBlocked on: https://precisionmedicineinitiative.atlassian.net/browse/PD-5108", "createdAt": "2020-05-11T23:52:23Z", "url": "https://github.com/all-of-us/workbench/pull/3569", "merged": true, "mergeCommit": {"oid": "552af31a5409847313f008a3c1545e84d5dc2a73"}, "closed": true, "closedAt": "2020-05-13T23:23:22Z", "author": {"login": "calbach"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgUxH8gH2gAyNDE2NDA3NzgzOjRjZWVmYWY5YTNlMWM2MDBkNjRmNmU5OTYzNjM5ZjQ5YTdhMGUyYTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgnavjAH2gAyNDE2NDA3NzgzOjE2M2E0YmNiMDM1YTAyZGE4MjRjMjY2ZmM4NjRhZTFhMDE3NzZhZmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4ceefaf9a3e1c600d64f6e9963639f49a7a0e2a0", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/4ceefaf9a3e1c600d64f6e9963639f49a7a0e2a0", "committedDate": "2020-05-11T19:23:25Z", "message": "Add readonly user and support specifying a DB user for CLI access"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "274adc284e6519fd8658fa0ca3cc6cbf4eca89ee", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/274adc284e6519fd8658fa0ca3cc6cbf4eca89ee", "committedDate": "2020-05-11T19:23:28Z", "message": "PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "653975d731ce803473d47d871e1ddfdc3cce8372", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/653975d731ce803473d47d871e1ddfdc3cce8372", "committedDate": "2020-05-11T19:23:28Z", "message": "update binlogs cmd"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NjYzNTY0", "url": "https://github.com/all-of-us/workbench/pull/3569#pullrequestreview-409663564", "createdAt": "2020-05-12T02:52:40Z", "commit": {"oid": "653975d731ce803473d47d871e1ddfdc3cce8372"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMjo1Mjo0MFrOGT0Ofw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMjo1Nzo1NVrOGT0Tcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzMTgwNw==", "bodyText": "For later, if we're thinking of a \"break glass\" mode in certain responses, maybe this is one of those. I wonder if there's a way to capture/log a justification when signing in as root.", "url": "https://github.com/all-of-us/workbench/pull/3569#discussion_r423431807", "createdAt": "2020-05-12T02:52:40Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -2022,20 +2022,42 @@ def connect_to_cloud_db(cmd_name, *args)\n   common = Common.new\n   op = WbOptionsParser.new(cmd_name, args)\n   op.add_option(\n-    \"--root\",\n-    ->(opts, _) { opts.root = true },\n-    \"Connect as root\")\n+    \"--db-user [user]\",\n+    ->(opts, v) { opts.db_user = v },\n+    \"Optional database user to connect as, defaults to 'dev-readonly'. \" +\n+    \"To perform mutations use 'workbench'. Avoid using 'root' unless \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653975d731ce803473d47d871e1ddfdc3cce8372"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzMTk3MA==", "bodyText": "nit: to catch blank strings too you can do db_user.to_s.empty?.", "url": "https://github.com/all-of-us/workbench/pull/3569#discussion_r423431970", "createdAt": "2020-05-12T02:53:18Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -2022,20 +2022,42 @@ def connect_to_cloud_db(cmd_name, *args)\n   common = Common.new\n   op = WbOptionsParser.new(cmd_name, args)\n   op.add_option(\n-    \"--root\",\n-    ->(opts, _) { opts.root = true },\n-    \"Connect as root\")\n+    \"--db-user [user]\",\n+    ->(opts, v) { opts.db_user = v },\n+    \"Optional database user to connect as, defaults to 'dev-readonly'. \" +\n+    \"To perform mutations use 'workbench'. Avoid using 'root' unless \" +\n+    \"absolutely necessary.\")\n   gcc = GcloudContextV2.new(op)\n   op.parse.validate\n   gcc.validate\n+\n+  if op.opts.db_user.nil?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653975d731ce803473d47d871e1ddfdc3cce8372"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzMjE3MA==", "bodyText": "nit: Rubocop's style guide prefers parenthesis when there are arguments.", "url": "https://github.com/all-of-us/workbench/pull/3569#discussion_r423432170", "createdAt": "2020-05-12T02:54:10Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -2022,20 +2022,42 @@ def connect_to_cloud_db(cmd_name, *args)\n   common = Common.new\n   op = WbOptionsParser.new(cmd_name, args)\n   op.add_option(\n-    \"--root\",\n-    ->(opts, _) { opts.root = true },\n-    \"Connect as root\")\n+    \"--db-user [user]\",\n+    ->(opts, v) { opts.db_user = v },\n+    \"Optional database user to connect as, defaults to 'dev-readonly'. \" +\n+    \"To perform mutations use 'workbench'. Avoid using 'root' unless \" +\n+    \"absolutely necessary.\")\n   gcc = GcloudContextV2.new(op)\n   op.parse.validate\n   gcc.validate\n+\n+  if op.opts.db_user.nil?\n+    op.opts.db_user = \"dev-readonly\"\n+  end\n+\n   env = read_db_vars(gcc)\n+  user_to_password = {\n+    \"dev-readonly\" => env[\"DEV_READONLY_DB_PASSWORD\"],\n+    \"workbench\" => env[\"WORKBENCH_DB_PASSWORD\"],\n+    \"root\" => env[\"MYSQL_ROOT_PASSWORD\"]\n+  }\n+  unless user_to_password.has_key? op.opts.db_user", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653975d731ce803473d47d871e1ddfdc3cce8372"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzMjY5Nw==", "bodyText": "does mysql not let them know that during startup?", "url": "https://github.com/all-of-us/workbench/pull/3569#discussion_r423432697", "createdAt": "2020-05-12T02:56:21Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -2022,20 +2022,42 @@ def connect_to_cloud_db(cmd_name, *args)\n   common = Common.new\n   op = WbOptionsParser.new(cmd_name, args)\n   op.add_option(\n-    \"--root\",\n-    ->(opts, _) { opts.root = true },\n-    \"Connect as root\")\n+    \"--db-user [user]\",\n+    ->(opts, v) { opts.db_user = v },\n+    \"Optional database user to connect as, defaults to 'dev-readonly'. \" +\n+    \"To perform mutations use 'workbench'. Avoid using 'root' unless \" +\n+    \"absolutely necessary.\")\n   gcc = GcloudContextV2.new(op)\n   op.parse.validate\n   gcc.validate\n+\n+  if op.opts.db_user.nil?\n+    op.opts.db_user = \"dev-readonly\"\n+  end\n+\n   env = read_db_vars(gcc)\n+  user_to_password = {\n+    \"dev-readonly\" => env[\"DEV_READONLY_DB_PASSWORD\"],\n+    \"workbench\" => env[\"WORKBENCH_DB_PASSWORD\"],\n+    \"root\" => env[\"MYSQL_ROOT_PASSWORD\"]\n+  }\n+  unless user_to_password.has_key? op.opts.db_user\n+    Common.new.error(\n+      \"invalid --db-user provided, wanted one of #{user_to_password.keys}, got '#{op.opts.db_user}'\")\n+    exit 1\n+  end\n+  db_password = user_to_password[op.opts.db_user]\n+\n   CloudSqlProxyContext.new(gcc.project).run do\n-    password = op.opts.root ? env[\"MYSQL_ROOT_PASSWORD\"] : env[\"WORKBENCH_DB_PASSWORD\"]\n-    user = op.opts.root ? \"root\" : env[\"WORKBENCH_DB_USER\"]\n+    if op.opts.db_user == \"dev-readonly\"\n+      common.status \"\"\n+      common.status \"Database session will be read-only; use --db-user to change this\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653975d731ce803473d47d871e1ddfdc3cce8372"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzMzA3NA==", "bodyText": "nit: if we add another readonly user, we'll need to adjust this. Maybe make an array of read only users and check inclusion in it. But again, I wonder if this blurb is redundant.", "url": "https://github.com/all-of-us/workbench/pull/3569#discussion_r423433074", "createdAt": "2020-05-12T02:57:55Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -2022,20 +2022,42 @@ def connect_to_cloud_db(cmd_name, *args)\n   common = Common.new\n   op = WbOptionsParser.new(cmd_name, args)\n   op.add_option(\n-    \"--root\",\n-    ->(opts, _) { opts.root = true },\n-    \"Connect as root\")\n+    \"--db-user [user]\",\n+    ->(opts, v) { opts.db_user = v },\n+    \"Optional database user to connect as, defaults to 'dev-readonly'. \" +\n+    \"To perform mutations use 'workbench'. Avoid using 'root' unless \" +\n+    \"absolutely necessary.\")\n   gcc = GcloudContextV2.new(op)\n   op.parse.validate\n   gcc.validate\n+\n+  if op.opts.db_user.nil?\n+    op.opts.db_user = \"dev-readonly\"\n+  end\n+\n   env = read_db_vars(gcc)\n+  user_to_password = {\n+    \"dev-readonly\" => env[\"DEV_READONLY_DB_PASSWORD\"],\n+    \"workbench\" => env[\"WORKBENCH_DB_PASSWORD\"],\n+    \"root\" => env[\"MYSQL_ROOT_PASSWORD\"]\n+  }\n+  unless user_to_password.has_key? op.opts.db_user\n+    Common.new.error(\n+      \"invalid --db-user provided, wanted one of #{user_to_password.keys}, got '#{op.opts.db_user}'\")\n+    exit 1\n+  end\n+  db_password = user_to_password[op.opts.db_user]\n+\n   CloudSqlProxyContext.new(gcc.project).run do\n-    password = op.opts.root ? env[\"MYSQL_ROOT_PASSWORD\"] : env[\"WORKBENCH_DB_PASSWORD\"]\n-    user = op.opts.root ? \"root\" : env[\"WORKBENCH_DB_USER\"]\n+    if op.opts.db_user == \"dev-readonly\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653975d731ce803473d47d871e1ddfdc3cce8372"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "163a4bcb035a02da824c266fc864ae1a01776afa", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/163a4bcb035a02da824c266fc864ae1a01776afa", "committedDate": "2020-05-12T17:07:10Z", "message": "pr fixes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4998, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}