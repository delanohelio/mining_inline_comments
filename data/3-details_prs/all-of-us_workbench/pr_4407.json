{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMzIyMjQz", "number": 4407, "title": "[RW-5691][risk=no] Remove Remaining Projections", "bodyText": "JdbcTemplate All the Things! Follow-up to #4374.\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n I have run the E2E tests on ths change against my local UI + API server with yarn test-local\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-12-15T15:11:08Z", "url": "https://github.com/all-of-us/workbench/pull/4407", "merged": true, "mergeCommit": {"oid": "0cbee7dab3909e2290b8d5e5816ec4beb4fad03c"}, "closed": true, "closedAt": "2020-12-16T14:05:13Z", "author": {"login": "jaycarlton"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmKxibgH2gAyNTQwMzIyMjQzOmM2ZmRjNWRkOWZlZGY1YTBlMTdhMDk0NTljZjIzODZiNzIzZjFmMWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmhwPbgH2gAyNTQwMzIyMjQzOmEyMjFlNGM3ZmQwOTZhNDM0Mzc5YWQyMDEyZTZhZmRkNWQzNzJlZGY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c6fdc5dd9fedf5a0e17a09459cf2386b723f1f1b", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/c6fdc5dd9fedf5a0e17a09459cf2386b723f1f1b", "committedDate": "2020-12-14T19:19:31Z", "message": "start"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44e03ce0b55803f81ba4a453c591028658b31eb1", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/44e03ce0b55803f81ba4a453c591028658b31eb1", "committedDate": "2020-12-14T19:19:31Z", "message": "kill ProjectedReportingInstitution class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d5f15fd360b64e28daf21cc290fb6a2f670e938", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/2d5f15fd360b64e28daf21cc290fb6a2f670e938", "committedDate": "2020-12-14T19:19:31Z", "message": "progress"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25777b1b233d48e0cfbf6f85aeddb462cba7bcb8", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/25777b1b233d48e0cfbf6f85aeddb462cba7bcb8", "committedDate": "2020-12-14T19:19:31Z", "message": "progress"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fca4071b5e20c908e0e7e8cc1b995c1fe4a96d79", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/fca4071b5e20c908e0e7e8cc1b995c1fe4a96d79", "committedDate": "2020-12-14T19:44:03Z", "message": "add users & spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b845f702850c7ec84a11cb633caa28740e0ad092", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/b845f702850c7ec84a11cb633caa28740e0ad092", "committedDate": "2020-12-15T15:00:09Z", "message": "migrate remaining tables away from projections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3902359d997cb35acad94dee5ea86b877b02245b", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/3902359d997cb35acad94dee5ea86b877b02245b", "committedDate": "2020-12-15T15:07:56Z", "message": "reemove more methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abbe490acec50c2c3e75082d2a090324211ba146", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/abbe490acec50c2c3e75082d2a090324211ba146", "committedDate": "2020-12-15T15:08:22Z", "message": "spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0fb2f648ad1758773bd0841d00bbe1b97725f31", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/b0fb2f648ad1758773bd0841d00bbe1b97725f31", "committedDate": "2020-12-15T15:44:48Z", "message": "implement missing method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83421df3cbed16e4b28d167d085fa553355db048", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/83421df3cbed16e4b28d167d085fa553355db048", "committedDate": "2020-12-15T18:31:05Z", "message": "spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyODEwMTI5", "url": "https://github.com/all-of-us/workbench/pull/4407#pullrequestreview-552810129", "createdAt": "2020-12-15T19:44:54Z", "commit": {"oid": "83421df3cbed16e4b28d167d085fa553355db048"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTo0NDo1NFrOIGc-ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTo0OToxNFrOIGdJUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYzNzA5OA==", "bodyText": "Since you hardcode the column names below anyways - is there a reason not to just do a select * here?", "url": "https://github.com/all-of-us/workbench/pull/4407#discussion_r543637098", "createdAt": "2020-12-15T19:44:54Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/db/jdbc/ReportingQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,294 @@\n+package org.pmiops.workbench.db.jdbc;\n+\n+import static org.pmiops.workbench.db.model.DbStorageEnums.billingAccountTypeFromStorage;\n+import static org.pmiops.workbench.db.model.DbStorageEnums.billingStatusFromStorage;\n+import static org.pmiops.workbench.db.model.DbStorageEnums.dataAccessLevelFromStorage;\n+import static org.pmiops.workbench.db.model.DbStorageEnums.institutionDUATypeFromStorage;\n+import static org.pmiops.workbench.db.model.DbStorageEnums.organizationTypeFromStorage;\n+import static org.pmiops.workbench.utils.mappers.CommonMappers.offsetDateTimeUtc;\n+\n+import java.util.List;\n+import org.pmiops.workbench.model.ReportingCohort;\n+import org.pmiops.workbench.model.ReportingDataset;\n+import org.pmiops.workbench.model.ReportingDatasetCohort;\n+import org.pmiops.workbench.model.ReportingDatasetConceptSet;\n+import org.pmiops.workbench.model.ReportingDatasetDomainIdValue;\n+import org.pmiops.workbench.model.ReportingInstitution;\n+import org.pmiops.workbench.model.ReportingUser;\n+import org.pmiops.workbench.model.ReportingWorkspace;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ReportingQueryServiceImpl implements ReportingQueryService {\n+\n+  private final JdbcTemplate jdbcTemplate;\n+\n+  public ReportingQueryServiceImpl(JdbcTemplate jdbcTemplate) {\n+    this.jdbcTemplate = jdbcTemplate;\n+  }\n+\n+  @Override\n+  public List<ReportingWorkspace> getWorkspaces() {\n+    return jdbcTemplate.query(\n+        \"SELECT \\n\"\n+            + \"  billing_account_type,\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83421df3cbed16e4b28d167d085fa553355db048"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYzOTg5MA==", "bodyText": "Why do these need to be ordered, and the others not? Comment?", "url": "https://github.com/all-of-us/workbench/pull/4407#discussion_r543639890", "createdAt": "2020-12-15T19:49:14Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/db/jdbc/ReportingQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,294 @@\n+package org.pmiops.workbench.db.jdbc;\n+\n+import static org.pmiops.workbench.db.model.DbStorageEnums.billingAccountTypeFromStorage;\n+import static org.pmiops.workbench.db.model.DbStorageEnums.billingStatusFromStorage;\n+import static org.pmiops.workbench.db.model.DbStorageEnums.dataAccessLevelFromStorage;\n+import static org.pmiops.workbench.db.model.DbStorageEnums.institutionDUATypeFromStorage;\n+import static org.pmiops.workbench.db.model.DbStorageEnums.organizationTypeFromStorage;\n+import static org.pmiops.workbench.utils.mappers.CommonMappers.offsetDateTimeUtc;\n+\n+import java.util.List;\n+import org.pmiops.workbench.model.ReportingCohort;\n+import org.pmiops.workbench.model.ReportingDataset;\n+import org.pmiops.workbench.model.ReportingDatasetCohort;\n+import org.pmiops.workbench.model.ReportingDatasetConceptSet;\n+import org.pmiops.workbench.model.ReportingDatasetDomainIdValue;\n+import org.pmiops.workbench.model.ReportingInstitution;\n+import org.pmiops.workbench.model.ReportingUser;\n+import org.pmiops.workbench.model.ReportingWorkspace;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ReportingQueryServiceImpl implements ReportingQueryService {\n+\n+  private final JdbcTemplate jdbcTemplate;\n+\n+  public ReportingQueryServiceImpl(JdbcTemplate jdbcTemplate) {\n+    this.jdbcTemplate = jdbcTemplate;\n+  }\n+\n+  @Override\n+  public List<ReportingWorkspace> getWorkspaces() {\n+    return jdbcTemplate.query(\n+        \"SELECT \\n\"\n+            + \"  billing_account_type,\\n\"\n+            + \"  billing_status,\\n\"\n+            + \"  cdr_version_id,\\n\"\n+            + \"  creation_time,\\n\"\n+            + \"  creator_id,\\n\"\n+            + \"  disseminate_research_other,\\n\"\n+            + \"  last_accessed_time,\\n\"\n+            + \"  last_modified_time,\\n\"\n+            + \"  name,\\n\"\n+            + \"  needs_rp_review_prompt,\\n\"\n+            + \"  published,\\n\"\n+            + \"  rp_additional_notes,\\n\"\n+            + \"  rp_ancestry,\\n\"\n+            + \"  rp_anticipated_findings,\\n\"\n+            + \"  rp_approved,\\n\"\n+            + \"  rp_commercial_purpose,\\n\"\n+            + \"  rp_control_set,\\n\"\n+            + \"  rp_disease_focused_research,\\n\"\n+            + \"  rp_disease_of_focus,\\n\"\n+            + \"  rp_drug_development,\\n\"\n+            + \"  rp_educational,\\n\"\n+            + \"  rp_ethics,\\n\"\n+            + \"  rp_intended_study,\\n\"\n+            + \"  rp_methods_development,\\n\"\n+            + \"  rp_other_population_details,\\n\"\n+            + \"  rp_other_purpose,\\n\"\n+            + \"  rp_other_purpose_details,\\n\"\n+            + \"  rp_population_health,\\n\"\n+            + \"  rp_reason_for_all_of_us,\\n\"\n+            + \"  rp_review_requested,\\n\"\n+            + \"  rp_scientific_approach,\\n\"\n+            + \"  rp_social_behavioral,\\n\"\n+            + \"  rp_time_requested,\\n\"\n+            + \"  workspace_id\\n\"\n+            + \"FROM workspace\",\n+        (rs, unused) ->\n+            new ReportingWorkspace()\n+                .billingAccountType(\n+                    billingAccountTypeFromStorage(rs.getShort(\"billing_account_type\")))\n+                .billingStatus(billingStatusFromStorage(rs.getShort(\"billing_status\")))\n+                .cdrVersionId(rs.getLong(\"cdr_version_id\"))\n+                .creationTime(offsetDateTimeUtc(rs.getTimestamp(\"creation_time\")))\n+                .creatorId(rs.getLong(\"creator_id\"))\n+                .disseminateResearchOther(rs.getString(\"disseminate_research_other\"))\n+                .lastAccessedTime(offsetDateTimeUtc(rs.getTimestamp(\"last_accessed_time\")))\n+                .lastModifiedTime(offsetDateTimeUtc(rs.getTimestamp(\"last_modified_time\")))\n+                .name(rs.getString(\"name\"))\n+                .needsRpReviewPrompt((int) rs.getShort(\"needs_rp_review_prompt\"))\n+                .published(rs.getBoolean(\"published\"))\n+                .rpAdditionalNotes(rs.getString(\"rp_additional_notes\"))\n+                .rpAncestry(rs.getBoolean(\"rp_ancestry\"))\n+                .rpAnticipatedFindings(rs.getString(\"rp_anticipated_findings\"))\n+                .rpApproved(rs.getBoolean(\"rp_approved\"))\n+                .rpCommercialPurpose(rs.getBoolean(\"rp_commercial_purpose\"))\n+                .rpControlSet(rs.getBoolean(\"rp_control_set\"))\n+                .rpDiseaseFocusedResearch(rs.getBoolean(\"rp_disease_focused_research\"))\n+                .rpDiseaseOfFocus(rs.getString(\"rp_disease_of_focus\"))\n+                .rpDrugDevelopment(rs.getBoolean(\"rp_drug_development\"))\n+                .rpEducational(rs.getBoolean(\"rp_educational\"))\n+                .rpEthics(rs.getBoolean(\"rp_ethics\"))\n+                .rpIntendedStudy(rs.getString(\"rp_intended_study\"))\n+                .rpMethodsDevelopment(rs.getBoolean(\"rp_methods_development\"))\n+                .rpOtherPopulationDetails(rs.getString(\"rp_other_population_details\"))\n+                .rpOtherPurpose(rs.getBoolean(\"rp_other_purpose\"))\n+                .rpOtherPurposeDetails(rs.getString(\"rp_other_purpose_details\"))\n+                .rpPopulationHealth(rs.getBoolean(\"rp_population_health\"))\n+                .rpReasonForAllOfUs(rs.getString(\"rp_reason_for_all_of_us\"))\n+                .rpReviewRequested(rs.getBoolean(\"rp_review_requested\"))\n+                .rpScientificApproach(rs.getString(\"rp_scientific_approach\"))\n+                .rpSocialBehavioral(rs.getBoolean(\"rp_social_behavioral\"))\n+                .rpTimeRequested(offsetDateTimeUtc(rs.getTimestamp(\"rp_time_requested\")))\n+                .workspaceId(rs.getLong(\"workspace_id\")));\n+  }\n+\n+  @Override\n+  public List<ReportingCohort> getCohorts() {\n+    return jdbcTemplate.query(\n+        \"SELECT \\n\"\n+            + \"  cohort_id,\\n\"\n+            + \"  creation_time,\\n\"\n+            + \"  creator_id,\\n\"\n+            + \"  criteria,\\n\"\n+            + \"  description,\\n\"\n+            + \"  last_modified_time,\\n\"\n+            + \"  name,\\n\"\n+            + \"  workspace_id\\n\"\n+            + \"FROM cohort\",\n+        (rs, unused) ->\n+            new ReportingCohort()\n+                .cohortId(rs.getLong(\"cohort_id\"))\n+                .creationTime(offsetDateTimeUtc(rs.getTimestamp(\"creation_time\")))\n+                .creatorId(rs.getLong(\"creator_id\"))\n+                .criteria(rs.getString(\"criteria\"))\n+                .description(rs.getString(\"description\"))\n+                .lastModifiedTime(offsetDateTimeUtc(rs.getTimestamp(\"last_modified_time\")))\n+                .name(rs.getString(\"name\"))\n+                .workspaceId(rs.getLong(\"workspace_id\")));\n+  }\n+\n+  @Override\n+  public List<ReportingDataset> getDatasets() {\n+    return jdbcTemplate.query(\n+        \"SELECT \\n\"\n+            + \"  creation_time,\\n\"\n+            + \"  creator_id,\\n\"\n+            + \"  data_set_id,\\n\"\n+            + \"  description,\\n\"\n+            + \"  includes_all_participants,\\n\"\n+            + \"  last_modified_time,\\n\"\n+            + \"  name,\\n\"\n+            + \"  workspace_id\\n\"\n+            + \"FROM data_set\",\n+        (rs, unused) ->\n+            new ReportingDataset()\n+                .creationTime(offsetDateTimeUtc(rs.getTimestamp(\"creation_time\")))\n+                .creatorId(rs.getLong(\"creator_id\"))\n+                .datasetId(rs.getLong(\"data_set_id\"))\n+                .description(rs.getString(\"description\"))\n+                .includesAllParticipants(rs.getBoolean(\"includes_all_participants\"))\n+                .lastModifiedTime(offsetDateTimeUtc(rs.getTimestamp(\"last_modified_time\")))\n+                .name(rs.getString(\"name\"))\n+                .workspaceId(rs.getLong(\"workspace_id\")));\n+  }\n+\n+  @Override\n+  public List<ReportingDatasetCohort> getDatasetCohorts() {\n+    return jdbcTemplate.query(\n+        \"SELECT data_set_id, cohort_id\\n\"\n+            + \"FROM data_set_cohort\\n\"\n+            + \"ORDER BY data_set_id, cohort_id;\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83421df3cbed16e4b28d167d085fa553355db048"}, "originalPosition": 164}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a221e4c7fd096a434379ad2012e6afdd5d372edf", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/a221e4c7fd096a434379ad2012e6afdd5d372edf", "committedDate": "2020-12-15T22:05:55Z", "message": "remove order"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3767, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}