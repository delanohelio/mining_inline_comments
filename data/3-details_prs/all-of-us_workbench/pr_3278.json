{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNTQzNTIw", "number": 3278, "title": "[RW-4367] Manual Workspace Migration (Part 1) - toApiWorkspace, researchPurpose", "bodyText": "Migrate usages of toApiWorkspace(DbWorkspace workspace)\nMigrate usages of setResearchPurposeDetails(DbWorkspace dbWorkspace, ResearchPurpose purpose)\nRemove population boolean field from ResearchPurpose\n\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-03-20T13:51:50Z", "url": "https://github.com/all-of-us/workbench/pull/3278", "merged": true, "mergeCommit": {"oid": "7d64640cf5bfcfb5755438e6e89ff88a8b24ba45"}, "closed": true, "closedAt": "2020-03-26T20:26:27Z", "author": {"login": "ericsong"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcO9eWhgH2gAyMzkxNTQzNTIwOjljZWY1MTNlMTJjZDE4OGFjNWVjMTUzZDQ3Yzg1YzkzYjk0MDVmZTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRhrK-gH2gAyMzkxNTQzNTIwOmI4ZWYyMmQyOWMzZTUzN2M5YTIzYzQxNGZmOWJkYzYxYjZiMzU1NWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9cef513e12cd188ac5ec153d47c85c93b9405fe8", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/9cef513e12cd188ac5ec153d47c85c93b9405fe8", "committedDate": "2020-03-18T20:38:23Z", "message": "fix and migrate research purpose mapper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7453f9293529c8a10d1b26c712400880d4a72042", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/7453f9293529c8a10d1b26c712400880d4a72042", "committedDate": "2020-03-19T16:25:00Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a251018ad86541c3afdab66976ae251903cb9111", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/a251018ad86541c3afdab66976ae251903cb9111", "committedDate": "2020-03-19T18:32:50Z", "message": "tests passing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cd350f6d4cf905654641f2dd54b842a9f9298d1", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/1cd350f6d4cf905654641f2dd54b842a9f9298d1", "committedDate": "2020-03-19T21:22:32Z", "message": "remove population field"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aad8972df4b87f9cbd1fe7e3a2f0dbeadd27ad2f", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/aad8972df4b87f9cbd1fe7e3a2f0dbeadd27ad2f", "committedDate": "2020-03-19T21:51:14Z", "message": "remove population from ui"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94511333513046bcbfde1554d6f0205925898fec", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/94511333513046bcbfde1554d6f0205925898fec", "committedDate": "2020-03-19T21:53:38Z", "message": "lint/spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19eb9541ef5b4ce8baede4368f3d8ef1831f37af", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/19eb9541ef5b4ce8baede4368f3d8ef1831f37af", "committedDate": "2020-03-19T22:23:42Z", "message": "remove api(db) calls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df8db2a3dbc7c328c03fa712df34fed25750ac3e", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/df8db2a3dbc7c328c03fa712df34fed25750ac3e", "committedDate": "2020-03-19T22:24:30Z", "message": "spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb9a4beeb9eba7968b206d06eeffed604d3374e0", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/eb9a4beeb9eba7968b206d06eeffed604d3374e0", "committedDate": "2020-03-20T14:11:15Z", "message": "fix api tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bf715d09605b5ea41cfa85784824ac83bf0fc4f", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/5bf715d09605b5ea41cfa85784824ac83bf0fc4f", "committedDate": "2020-03-20T14:14:41Z", "message": "fix ui"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ceeca0f6fb2779a874406bdcc7d2cbd61767f58", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/0ceeca0f6fb2779a874406bdcc7d2cbd61767f58", "committedDate": "2020-03-20T14:25:39Z", "message": "fix bq"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96e04d36aad0a209bef42e33f2f483653d53b1a6", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/96e04d36aad0a209bef42e33f2f483653d53b1a6", "committedDate": "2020-03-20T14:39:21Z", "message": "fix bq"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f1269c7094e6deea68d6e8dffea9c290035f2a7", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/3f1269c7094e6deea68d6e8dffea9c290035f2a7", "committedDate": "2020-03-20T15:07:48Z", "message": "fix some tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a7bec4b216b1795157c05003a0da17732bbe4b0", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/1a7bec4b216b1795157c05003a0da17732bbe4b0", "committedDate": "2020-03-20T15:48:51Z", "message": "whack a mole"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f36968ee448ac200b9256a1494995524311badf4", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/f36968ee448ac200b9256a1494995524311badf4", "committedDate": "2020-03-20T16:07:33Z", "message": "whack"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "002aa8976c725794c45f654e43ac1a5a540b0f68", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/002aa8976c725794c45f654e43ac1a5a540b0f68", "committedDate": "2020-03-20T16:25:26Z", "message": "whack"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "477e6d23c73f4fac75613bc91b0bce2099fc7109", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/477e6d23c73f4fac75613bc91b0bce2099fc7109", "committedDate": "2020-03-20T16:35:15Z", "message": "whack"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NjAyNzU4", "url": "https://github.com/all-of-us/workbench/pull/3278#pullrequestreview-378602758", "createdAt": "2020-03-20T15:51:07Z", "commit": {"oid": "1a7bec4b216b1795157c05003a0da17732bbe4b0"}, "state": "APPROVED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNTo1MTowN1rOF5ZXYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzowOTowMlrOF5cRFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyODczOA==", "bodyText": "I'm slightly confused on what the effect of this will be. It looks like a switch to append instances in a collection instead of replacing a collection. But I'm trying to understand why there would be existing instances at all in a brand-new target object's collection.", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395728738", "createdAt": "2020-03-20T15:51:07Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java", "diffHunk": "@@ -1,36 +1,40 @@\n package org.pmiops.workbench.utils;\n \n-import com.google.common.collect.ImmutableSet;\n-import java.util.List;\n-import java.util.Set;\n+import static org.mapstruct.NullValuePropertyMappingStrategy.*;\n+\n+import org.mapstruct.CollectionMappingStrategy;\n import org.mapstruct.Mapper;\n import org.mapstruct.Mapping;\n-import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.mapstruct.MappingTarget;\n import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspace;\n import org.pmiops.workbench.model.CdrVersion;\n import org.pmiops.workbench.model.ResearchPurpose;\n-import org.pmiops.workbench.model.SpecificPopulationEnum;\n import org.pmiops.workbench.model.Workspace;\n import org.pmiops.workbench.utils.mappers.CommonMappers;\n \n @Mapper(\n     componentModel = \"spring\",\n+    collectionMappingStrategy = CollectionMappingStrategy.TARGET_IMMUTABLE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7bec4b216b1795157c05003a0da17732bbe4b0"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyOTU0NQ==", "bodyText": "What would be the default behavior here if you didn't specify dbWorkspace as the source?", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395729545", "createdAt": "2020-03-20T15:52:21Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java", "diffHunk": "@@ -1,36 +1,40 @@\n package org.pmiops.workbench.utils;\n \n-import com.google.common.collect.ImmutableSet;\n-import java.util.List;\n-import java.util.Set;\n+import static org.mapstruct.NullValuePropertyMappingStrategy.*;\n+\n+import org.mapstruct.CollectionMappingStrategy;\n import org.mapstruct.Mapper;\n import org.mapstruct.Mapping;\n-import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.mapstruct.MappingTarget;\n import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspace;\n import org.pmiops.workbench.model.CdrVersion;\n import org.pmiops.workbench.model.ResearchPurpose;\n-import org.pmiops.workbench.model.SpecificPopulationEnum;\n import org.pmiops.workbench.model.Workspace;\n import org.pmiops.workbench.utils.mappers.CommonMappers;\n \n @Mapper(\n     componentModel = \"spring\",\n+    collectionMappingStrategy = CollectionMappingStrategy.TARGET_IMMUTABLE,\n     uses = {CommonMappers.class})\n public interface WorkspaceMapper {\n \n   @Mapping(target = \"researchPurpose\", source = \"dbWorkspace\")\n   @Mapping(target = \"etag\", source = \"dbWorkspace.version\", qualifiedByName = \"cdrVersionToEtag\")\n-  @Mapping(target = \"dataAccessLevel\", source = \"dbWorkspace.dataAccessLevelEnum\")\n   @Mapping(target = \"name\", source = \"dbWorkspace.name\")\n   @Mapping(target = \"id\", source = \"fcWorkspace.name\")\n   @Mapping(target = \"googleBucketName\", source = \"fcWorkspace.bucketName\")\n   @Mapping(target = \"creator\", source = \"fcWorkspace.createdBy\")\n   @Mapping(target = \"cdrVersionId\", source = \"dbWorkspace.cdrVersion\")\n   Workspace toApiWorkspace(DbWorkspace dbWorkspace, FirecloudWorkspace fcWorkspace);\n \n-  // This method is simply merging the research purpose, which covers only a subset of the fields\n-  // in the DbWorkspace source.\n+  @Mapping(target = \"researchPurpose\", source = \"dbWorkspace\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7bec4b216b1795157c05003a0da17732bbe4b0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMDI2OQ==", "bodyText": "(later) Let's think about consolidating some of these names on the DB and/or api side so we don't have so many non-obvious mappings.", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395730269", "createdAt": "2020-03-20T15:53:27Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java", "diffHunk": "@@ -1,36 +1,40 @@\n package org.pmiops.workbench.utils;\n \n-import com.google.common.collect.ImmutableSet;\n-import java.util.List;\n-import java.util.Set;\n+import static org.mapstruct.NullValuePropertyMappingStrategy.*;\n+\n+import org.mapstruct.CollectionMappingStrategy;\n import org.mapstruct.Mapper;\n import org.mapstruct.Mapping;\n-import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.mapstruct.MappingTarget;\n import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspace;\n import org.pmiops.workbench.model.CdrVersion;\n import org.pmiops.workbench.model.ResearchPurpose;\n-import org.pmiops.workbench.model.SpecificPopulationEnum;\n import org.pmiops.workbench.model.Workspace;\n import org.pmiops.workbench.utils.mappers.CommonMappers;\n \n @Mapper(\n     componentModel = \"spring\",\n+    collectionMappingStrategy = CollectionMappingStrategy.TARGET_IMMUTABLE,\n     uses = {CommonMappers.class})\n public interface WorkspaceMapper {\n \n   @Mapping(target = \"researchPurpose\", source = \"dbWorkspace\")\n   @Mapping(target = \"etag\", source = \"dbWorkspace.version\", qualifiedByName = \"cdrVersionToEtag\")\n-  @Mapping(target = \"dataAccessLevel\", source = \"dbWorkspace.dataAccessLevelEnum\")\n   @Mapping(target = \"name\", source = \"dbWorkspace.name\")\n   @Mapping(target = \"id\", source = \"fcWorkspace.name\")\n   @Mapping(target = \"googleBucketName\", source = \"fcWorkspace.bucketName\")\n   @Mapping(target = \"creator\", source = \"fcWorkspace.createdBy\")\n   @Mapping(target = \"cdrVersionId\", source = \"dbWorkspace.cdrVersion\")\n   Workspace toApiWorkspace(DbWorkspace dbWorkspace, FirecloudWorkspace fcWorkspace);\n \n-  // This method is simply merging the research purpose, which covers only a subset of the fields\n-  // in the DbWorkspace source.\n+  @Mapping(target = \"researchPurpose\", source = \"dbWorkspace\")\n+  @Mapping(target = \"etag\", source = \"version\", qualifiedByName = \"cdrVersionToEtag\")\n+  @Mapping(target = \"id\", source = \"firecloudName\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7bec4b216b1795157c05003a0da17732bbe4b0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMDc2OQ==", "bodyText": "Can you please comment whenever you're ignoring something on why that's expected/correct behavior?", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395730769", "createdAt": "2020-03-20T15:54:09Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java", "diffHunk": "@@ -39,11 +43,24 @@\n   @Mapping(target = \"otherDisseminateResearchFindings\", source = \"disseminateResearchOther\")\n   ResearchPurpose workspaceToResearchPurpose(DbWorkspace dbWorkspace);\n \n-  default Set<Short> map(List<SpecificPopulationEnum> value) {\n-    return value.stream()\n-        .map(DbStorageEnums::specificPopulationToStorage)\n-        .collect(ImmutableSet.toImmutableSet());\n-  }\n+  @Mapping(target = \"approved\", ignore = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7bec4b216b1795157c05003a0da17732bbe4b0"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMTY2OA==", "bodyText": "This is cool. I wonder if you can set it at the top level for the mapper and only override that when you don't want this behavior.", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395731668", "createdAt": "2020-03-20T15:55:32Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java", "diffHunk": "@@ -39,11 +43,24 @@\n   @Mapping(target = \"otherDisseminateResearchFindings\", source = \"disseminateResearchOther\")\n   ResearchPurpose workspaceToResearchPurpose(DbWorkspace dbWorkspace);\n \n-  default Set<Short> map(List<SpecificPopulationEnum> value) {\n-    return value.stream()\n-        .map(DbStorageEnums::specificPopulationToStorage)\n-        .collect(ImmutableSet.toImmutableSet());\n-  }\n+  @Mapping(target = \"approved\", ignore = true)\n+  @Mapping(target = \"reviewRequested\", ignore = true)\n+  @Mapping(target = \"timeRequested\", ignore = true)\n+  @Mapping(\n+      target = \"specificPopulationsEnum\",\n+      source = \"populationDetails\",\n+      nullValuePropertyMappingStrategy = SET_TO_DEFAULT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7bec4b216b1795157c05003a0da17732bbe4b0"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMjMzOA==", "bodyText": "Maybe name these longToTimestamp and timestampToLong?", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395732338", "createdAt": "2020-03-20T15:56:33Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java", "diffHunk": "@@ -2,63 +2,80 @@\n \n import java.sql.Timestamp;\n import java.util.Optional;\n-import org.mapstruct.Mapper;\n+import javax.inject.Provider;\n import org.mapstruct.Named;\n import org.pmiops.workbench.api.Etags;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.db.model.DbCdrVersion;\n import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.model.BillingStatus;\n import org.pmiops.workbench.model.DataAccessLevel;\n+import org.springframework.stereotype.Service;\n \n-@Mapper(componentModel = \"spring\")\n+@Service\n public class CommonMappers {\n \n-  public static Long timestamp(Timestamp timestamp) {\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  public CommonMappers(Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  public Long timestamp(Timestamp timestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7bec4b216b1795157c05003a0da17732bbe4b0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMzExOQ==", "bodyText": "nit: unless we're going to put these billboard comments everywhere, I say we drop them. They're a pain to maintain, even when they're consistent.", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395733119", "createdAt": "2020-03-20T15:57:45Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java", "diffHunk": "@@ -2,63 +2,80 @@\n \n import java.sql.Timestamp;\n import java.util.Optional;\n-import org.mapstruct.Mapper;\n+import javax.inject.Provider;\n import org.mapstruct.Named;\n import org.pmiops.workbench.api.Etags;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.db.model.DbCdrVersion;\n import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.model.BillingStatus;\n import org.pmiops.workbench.model.DataAccessLevel;\n+import org.springframework.stereotype.Service;\n \n-@Mapper(componentModel = \"spring\")\n+@Service\n public class CommonMappers {\n \n-  public static Long timestamp(Timestamp timestamp) {\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  public CommonMappers(Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  public Long timestamp(Timestamp timestamp) {\n     if (timestamp != null) {\n       return timestamp.getTime();\n     }\n \n     return null;\n   }\n \n-  public static Timestamp timestamp(Long timestamp) {\n+  public Timestamp timestamp(Long timestamp) {\n     if (timestamp != null) {\n       return new Timestamp(timestamp);\n     }\n \n     return null;\n   }\n \n-  public static String dbUserToCreatorEmail(DbUser creator) {\n+  public String dbUserToCreatorEmail(DbUser creator) {\n     return Optional.ofNullable(creator).map(DbUser::getUsername).orElse(null);\n   }\n \n-  public static String cdrVersionToId(DbCdrVersion cdrVersion) {\n+  public String cdrVersionToId(DbCdrVersion cdrVersion) {\n     return Optional.ofNullable(cdrVersion)\n         .map(DbCdrVersion::getCdrVersionId)\n         .map(id -> Long.toString(id))\n         .orElse(null);\n   }\n \n   @Named(\"cdrVersionToEtag\")\n-  public static String cdrVersionToEtag(int cdrVersion) {\n+  public String cdrVersionToEtag(int cdrVersion) {\n     return Etags.fromVersion(cdrVersion);\n   }\n \n   @Named(\"etagToCdrVersion\")\n-  public static int etagToCdrVersion(String etag) {\n+  public int etagToCdrVersion(String etag) {\n     return Etags.toVersion(etag);\n   }\n \n   /////////////////////////////////////////////////////////////////////////////\n   //                                  ENUMS                                  //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7bec4b216b1795157c05003a0da17732bbe4b0"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMzk3MA==", "bodyText": "Malkovich Malkovich Malkovich. Malkovich?", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395733970", "createdAt": "2020-03-20T15:58:56Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java", "diffHunk": "@@ -2,63 +2,80 @@\n \n import java.sql.Timestamp;\n import java.util.Optional;\n-import org.mapstruct.Mapper;\n+import javax.inject.Provider;\n import org.mapstruct.Named;\n import org.pmiops.workbench.api.Etags;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.db.model.DbCdrVersion;\n import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.model.BillingStatus;\n import org.pmiops.workbench.model.DataAccessLevel;\n+import org.springframework.stereotype.Service;\n \n-@Mapper(componentModel = \"spring\")\n+@Service\n public class CommonMappers {\n \n-  public static Long timestamp(Timestamp timestamp) {\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  public CommonMappers(Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  public Long timestamp(Timestamp timestamp) {\n     if (timestamp != null) {\n       return timestamp.getTime();\n     }\n \n     return null;\n   }\n \n-  public static Timestamp timestamp(Long timestamp) {\n+  public Timestamp timestamp(Long timestamp) {\n     if (timestamp != null) {\n       return new Timestamp(timestamp);\n     }\n \n     return null;\n   }\n \n-  public static String dbUserToCreatorEmail(DbUser creator) {\n+  public String dbUserToCreatorEmail(DbUser creator) {\n     return Optional.ofNullable(creator).map(DbUser::getUsername).orElse(null);\n   }\n \n-  public static String cdrVersionToId(DbCdrVersion cdrVersion) {\n+  public String cdrVersionToId(DbCdrVersion cdrVersion) {\n     return Optional.ofNullable(cdrVersion)\n         .map(DbCdrVersion::getCdrVersionId)\n         .map(id -> Long.toString(id))\n         .orElse(null);\n   }\n \n   @Named(\"cdrVersionToEtag\")\n-  public static String cdrVersionToEtag(int cdrVersion) {\n+  public String cdrVersionToEtag(int cdrVersion) {\n     return Etags.fromVersion(cdrVersion);\n   }\n \n   @Named(\"etagToCdrVersion\")\n-  public static int etagToCdrVersion(String etag) {\n+  public int etagToCdrVersion(String etag) {\n     return Etags.toVersion(etag);\n   }\n \n   /////////////////////////////////////////////////////////////////////////////\n   //                                  ENUMS                                  //\n   /////////////////////////////////////////////////////////////////////////////\n \n-  public static DataAccessLevel dataAccessLevelFromStorage(Short dataAccessLevel) {\n+  public DataAccessLevel dataAccessLevelFromStorage(Short dataAccessLevel) {\n     return DbStorageEnums.dataAccessLevelFromStorage(dataAccessLevel);\n   }\n \n-  public static Short dataAccessLevelToStorage(DataAccessLevel dataAccessLevel) {\n+  public Short dataAccessLevelToStorage(DataAccessLevel dataAccessLevel) {\n     return DbStorageEnums.dataAccessLevelToStorage(dataAccessLevel);\n   }\n+\n+  public BillingStatus billingStatus(BillingStatus billingStatus) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7bec4b216b1795157c05003a0da17732bbe4b0"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3MjE0Ng==", "bodyText": "nit; use method ref", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395772146", "createdAt": "2020-03-20T17:01:32Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -741,7 +741,7 @@ private Boolean copyBlob(String bucketName, Blob b) {\n     List<DbWorkspace> workspaces = workspaceService.findForReview();\n     response.setItems(\n         workspaces.stream()\n-            .map(ws -> manualWorkspaceMapper.toApiWorkspace(ws))\n+            .map(ws -> workspaceMapper.toApiWorkspace(ws))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7bec4b216b1795157c05003a0da17732bbe4b0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3NTEwNQ==", "bodyText": "nit: Ideally we could tie this to a constant or something invariant. This is probably my fault though.", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395775105", "createdAt": "2020-03-20T17:06:59Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/actionaudit/auditors/WorkspaceAuditorTest.java", "diffHunk": "@@ -117,7 +129,7 @@ public void testFiresCreateWorkspaceEvents() {\n     workspaceAuditor.fireCreateAction(workspace1, WORKSPACE_1_DB_ID);\n     verify(mockActionAuditService).send(eventCollectionCaptor.capture());\n     Collection<ActionAuditEvent> eventsSent = eventCollectionCaptor.getValue();\n-    assertThat(eventsSent).hasSize(20);\n+    assertThat(eventsSent).hasSize(19);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "477e6d23c73f4fac75613bc91b0bce2099fc7109"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3NjE2OQ==", "bodyText": "I thought @gjuggler had a scheme where you could extend a parent class and get a config for free. I'm too hungry to go look it up or how to use it. This looks OK to me, but there's some duplication across test classes.", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395776169", "createdAt": "2020-03-20T17:08:51Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminControllerTest.java", "diffHunk": "@@ -66,12 +69,20 @@\n   private static final String WORKSPACE_NAME = \"name\";\n \n   @TestConfiguration\n-  @Import({WorkspaceAdminController.class, WorkspaceMapperImpl.class})\n+  @Import({WorkspaceAdminController.class, WorkspaceMapperImpl.class, CommonMappers.class})\n   @MockBean({\n     CloudStorageService.class,\n     NotebooksService.class,\n   })\n-  static class Configuration {}\n+  static class Configuration {\n+    @Bean\n+    WorkbenchConfig workbenchConfig() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "477e6d23c73f4fac75613bc91b0bce2099fc7109"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3NjI3Ng==", "bodyText": "\ud83d\ude22", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395776276", "createdAt": "2020-03-20T17:09:02Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ExportWorkspaceData.java", "diffHunk": "@@ -85,7 +85,7 @@\n   @Bean\n   public WorkspaceService workspaceService() {\n     return new WorkspaceServiceImpl(\n-        null, null, null, null, null, null, null, null, null, null, null, null, null, null);\n+        null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "477e6d23c73f4fac75613bc91b0bce2099fc7109"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzE2NTc5", "url": "https://github.com/all-of-us/workbench/pull/3278#pullrequestreview-378716579", "createdAt": "2020-03-20T18:22:26Z", "commit": {"oid": "477e6d23c73f4fac75613bc91b0bce2099fc7109"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoyMjoyNlrOF5euAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODozMjozNVrOF5fB3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNjQ1MA==", "bodyText": "From my understanding, the default is it will look for a getter on dbWorkspace called getResearchPurpose. I don't think this annotation is quite what we want; I think what this will do is look for a getter in dbWorkspace called getDbWorkspace...", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395816450", "createdAt": "2020-03-20T18:22:26Z", "author": {"login": "als364"}, "path": "api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java", "diffHunk": "@@ -1,36 +1,40 @@\n package org.pmiops.workbench.utils;\n \n-import com.google.common.collect.ImmutableSet;\n-import java.util.List;\n-import java.util.Set;\n+import static org.mapstruct.NullValuePropertyMappingStrategy.*;\n+\n+import org.mapstruct.CollectionMappingStrategy;\n import org.mapstruct.Mapper;\n import org.mapstruct.Mapping;\n-import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.mapstruct.MappingTarget;\n import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspace;\n import org.pmiops.workbench.model.CdrVersion;\n import org.pmiops.workbench.model.ResearchPurpose;\n-import org.pmiops.workbench.model.SpecificPopulationEnum;\n import org.pmiops.workbench.model.Workspace;\n import org.pmiops.workbench.utils.mappers.CommonMappers;\n \n @Mapper(\n     componentModel = \"spring\",\n+    collectionMappingStrategy = CollectionMappingStrategy.TARGET_IMMUTABLE,\n     uses = {CommonMappers.class})\n public interface WorkspaceMapper {\n \n   @Mapping(target = \"researchPurpose\", source = \"dbWorkspace\")\n   @Mapping(target = \"etag\", source = \"dbWorkspace.version\", qualifiedByName = \"cdrVersionToEtag\")\n-  @Mapping(target = \"dataAccessLevel\", source = \"dbWorkspace.dataAccessLevelEnum\")\n   @Mapping(target = \"name\", source = \"dbWorkspace.name\")\n   @Mapping(target = \"id\", source = \"fcWorkspace.name\")\n   @Mapping(target = \"googleBucketName\", source = \"fcWorkspace.bucketName\")\n   @Mapping(target = \"creator\", source = \"fcWorkspace.createdBy\")\n   @Mapping(target = \"cdrVersionId\", source = \"dbWorkspace.cdrVersion\")\n   Workspace toApiWorkspace(DbWorkspace dbWorkspace, FirecloudWorkspace fcWorkspace);\n \n-  // This method is simply merging the research purpose, which covers only a subset of the fields\n-  // in the DbWorkspace source.\n+  @Mapping(target = \"researchPurpose\", source = \"dbWorkspace\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyOTU0NQ=="}, "originalCommit": {"oid": "1a7bec4b216b1795157c05003a0da17732bbe4b0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxOTAzOA==", "bodyText": "not useful for this, but generally this is used for things we never display on the frontend, such as ids.", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395819038", "createdAt": "2020-03-20T18:27:31Z", "author": {"login": "als364"}, "path": "api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java", "diffHunk": "@@ -39,11 +43,24 @@\n   @Mapping(target = \"otherDisseminateResearchFindings\", source = \"disseminateResearchOther\")\n   ResearchPurpose workspaceToResearchPurpose(DbWorkspace dbWorkspace);\n \n-  default Set<Short> map(List<SpecificPopulationEnum> value) {\n-    return value.stream()\n-        .map(DbStorageEnums::specificPopulationToStorage)\n-        .collect(ImmutableSet.toImmutableSet());\n-  }\n+  @Mapping(target = \"approved\", ignore = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMDc2OQ=="}, "originalCommit": {"oid": "1a7bec4b216b1795157c05003a0da17732bbe4b0"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMTUzNQ==", "bodyText": "Yeah, I agree that this should probably have a verb", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395821535", "createdAt": "2020-03-20T18:32:35Z", "author": {"login": "als364"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java", "diffHunk": "@@ -2,63 +2,80 @@\n \n import java.sql.Timestamp;\n import java.util.Optional;\n-import org.mapstruct.Mapper;\n+import javax.inject.Provider;\n import org.mapstruct.Named;\n import org.pmiops.workbench.api.Etags;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.db.model.DbCdrVersion;\n import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.model.BillingStatus;\n import org.pmiops.workbench.model.DataAccessLevel;\n+import org.springframework.stereotype.Service;\n \n-@Mapper(componentModel = \"spring\")\n+@Service\n public class CommonMappers {\n \n-  public static Long timestamp(Timestamp timestamp) {\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  public CommonMappers(Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  public Long timestamp(Timestamp timestamp) {\n     if (timestamp != null) {\n       return timestamp.getTime();\n     }\n \n     return null;\n   }\n \n-  public static Timestamp timestamp(Long timestamp) {\n+  public Timestamp timestamp(Long timestamp) {\n     if (timestamp != null) {\n       return new Timestamp(timestamp);\n     }\n \n     return null;\n   }\n \n-  public static String dbUserToCreatorEmail(DbUser creator) {\n+  public String dbUserToCreatorEmail(DbUser creator) {\n     return Optional.ofNullable(creator).map(DbUser::getUsername).orElse(null);\n   }\n \n-  public static String cdrVersionToId(DbCdrVersion cdrVersion) {\n+  public String cdrVersionToId(DbCdrVersion cdrVersion) {\n     return Optional.ofNullable(cdrVersion)\n         .map(DbCdrVersion::getCdrVersionId)\n         .map(id -> Long.toString(id))\n         .orElse(null);\n   }\n \n   @Named(\"cdrVersionToEtag\")\n-  public static String cdrVersionToEtag(int cdrVersion) {\n+  public String cdrVersionToEtag(int cdrVersion) {\n     return Etags.fromVersion(cdrVersion);\n   }\n \n   @Named(\"etagToCdrVersion\")\n-  public static int etagToCdrVersion(String etag) {\n+  public int etagToCdrVersion(String etag) {\n     return Etags.toVersion(etag);\n   }\n \n   /////////////////////////////////////////////////////////////////////////////\n   //                                  ENUMS                                  //\n   /////////////////////////////////////////////////////////////////////////////\n \n-  public static DataAccessLevel dataAccessLevelFromStorage(Short dataAccessLevel) {\n+  public DataAccessLevel dataAccessLevelFromStorage(Short dataAccessLevel) {\n     return DbStorageEnums.dataAccessLevelFromStorage(dataAccessLevel);\n   }\n \n-  public static Short dataAccessLevelToStorage(DataAccessLevel dataAccessLevel) {\n+  public Short dataAccessLevelToStorage(DataAccessLevel dataAccessLevel) {\n     return DbStorageEnums.dataAccessLevelToStorage(dataAccessLevel);\n   }\n+\n+  public BillingStatus billingStatus(BillingStatus billingStatus) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMzk3MA=="}, "originalCommit": {"oid": "1a7bec4b216b1795157c05003a0da17732bbe4b0"}, "originalPosition": 83}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6d446c21266c6fe0a736e026626acb5c3e0dad9", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/e6d446c21266c6fe0a736e026626acb5c3e0dad9", "committedDate": "2020-03-26T14:56:56Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b2784b77a220dac55826b2bab851aeb8f9ce484", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/6b2784b77a220dac55826b2bab851aeb8f9ce484", "committedDate": "2020-03-26T15:35:48Z", "message": "code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f7135a3a967d943a00b36550b2999f10faeb672", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/9f7135a3a967d943a00b36550b2999f10faeb672", "committedDate": "2020-03-26T15:37:14Z", "message": "spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e188a3e38985c0fb4395c7fbb19a2a4d8b73e49", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/1e188a3e38985c0fb4395c7fbb19a2a4d8b73e49", "committedDate": "2020-03-26T15:46:31Z", "message": "Merge branch 'master' of github.com:all-of-us/workbench into songe/RW-4367"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21648aebc3efabe3caf2d3805382f46f4272cc45", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/21648aebc3efabe3caf2d3805382f46f4272cc45", "committedDate": "2020-03-26T17:00:36Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6edfc82d579e75d3df5ddc3084d74044c6785cf", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/b6edfc82d579e75d3df5ddc3084d74044c6785cf", "committedDate": "2020-03-26T18:44:57Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fdcc71456ddae4f3bb48427426dd7e8c2c02405", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/9fdcc71456ddae4f3bb48427426dd7e8c2c02405", "committedDate": "2020-03-26T19:56:12Z", "message": "add update stub. fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8ef22d29c3e537c9a23c414ff9bdc61b6b3555f", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/b8ef22d29c3e537c9a23c414ff9bdc61b6b3555f", "committedDate": "2020-03-26T19:56:49Z", "message": "lint"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3263, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}