{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MTY0MDEx", "number": 3785, "reviewThreads": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTozMDowNVrOEOvTbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTozMjoxOFrOETTziw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODkwNTQxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTozMDowNVrOGyDrtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNToxMzowNFrOG08zaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0MjMyNQ==", "bodyText": "This seems clearer", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r455142325", "createdAt": "2020-07-15T15:30:05Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -279,9 +279,8 @@ public Double getCachedFreeTierUsage(DbUser user) {\n    * @return whether the user has remaining credits\n    */\n   public boolean userHasRemainingFreeTierCredits(DbUser user) {\n-    return Optional.ofNullable(getCachedFreeTierUsage(user))\n-        .map(usage -> compareCosts(getUserFreeTierDollarLimit(user), usage) > 0)\n-        .orElse(true);\n+    final double usage = Optional.ofNullable(getCachedFreeTierUsage(user)).orElse(0.0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eea22af4c4a0bcc72896ff41b6e095803eff57ad"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3NTMzOQ==", "bodyText": "Yes. I'd also wrap compareCosts in something like isBelowCeiling(double usage, double ceiling) so we don't need the > 0 in this high-level function. In other words, all userHasRemainingFreeTierCredits knows how to do is get the limit and call the limit checker; no math happens here.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458175339", "createdAt": "2020-07-21T15:13:04Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -279,9 +279,8 @@ public Double getCachedFreeTierUsage(DbUser user) {\n    * @return whether the user has remaining credits\n    */\n   public boolean userHasRemainingFreeTierCredits(DbUser user) {\n-    return Optional.ofNullable(getCachedFreeTierUsage(user))\n-        .map(usage -> compareCosts(getUserFreeTierDollarLimit(user), usage) > 0)\n-        .orElse(true);\n+    final double usage = Optional.ofNullable(getCachedFreeTierUsage(user)).orElse(0.0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0MjMyNQ=="}, "originalCommit": {"oid": "eea22af4c4a0bcc72896ff41b6e095803eff57ad"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTA1NzgwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNjowOTo0MlrOGyFKDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMTowMToxN1rOG4k4JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2NjQ3Ng==", "bodyText": "admins can change this, but users cannot.  See the validateProfile() methods family.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r455166476", "createdAt": "2020-07-15T16:09:42Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -201,6 +223,7 @@ public void updateProfileForUser(DbUser user, Profile updatedProfile, Profile pr\n \n     Timestamp now = new Timestamp(clock.instant().toEpochMilli());\n \n+    user.setContactEmail(updatedProfile.getContactEmail());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eea22af4c4a0bcc72896ff41b6e095803eff57ad"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4NzUyNw==", "bodyText": "I don't like how we're mixing admin-only settings into the user-changeable stuff. We need to put authority guards around the set of properties only administrators can change.\nIf order is independent, it would be nice to bundle the admin properties into a setAdminProperties method or some such, guarded by an internal Authority check. I  think the @authority annotation only works at the controller level, but I'm not actually sure.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458187527", "createdAt": "2020-07-21T15:29:03Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -201,6 +223,7 @@ public void updateProfileForUser(DbUser user, Profile updatedProfile, Profile pr\n \n     Timestamp now = new Timestamp(clock.instant().toEpochMilli());\n \n+    user.setContactEmail(updatedProfile.getContactEmail());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2NjQ3Ng=="}, "originalCommit": {"oid": "eea22af4c4a0bcc72896ff41b6e095803eff57ad"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3NzYzNw==", "bodyText": "The annotation is Controller-only, but I added a UserService.hasAuthority() here which does the job", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r461977637", "createdAt": "2020-07-29T01:01:17Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -201,6 +223,7 @@ public void updateProfileForUser(DbUser user, Profile updatedProfile, Profile pr\n \n     Timestamp now = new Timestamp(clock.instant().toEpochMilli());\n \n+    user.setContactEmail(updatedProfile.getContactEmail());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2NjQ3Ng=="}, "originalCommit": {"oid": "eea22af4c4a0bcc72896ff41b6e095803eff57ad"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDc5MDQ4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDo1MDoyN1rOGy8S4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzoyMDowNFrOG1senw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA2OTg1Ng==", "bodyText": "not a change, just an observation of the current state", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r456069856", "createdAt": "2020-07-16T20:50:27Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -231,6 +235,9 @@ public void setUp() throws IOException {\n             .country(COUNTRY)\n             .zipCode(ZIP_CODE));\n \n+    // TODO: this needs to be set in createAccountAndDbUserWithAffiliation() instead of here.  Why?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d8c72b51e0f705f8e87229fadfcd8f6645046e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4NDM5MA==", "bodyText": "do you have a ticket  tracking these issues?", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458284390", "createdAt": "2020-07-21T17:55:52Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -231,6 +235,9 @@ public void setUp() throws IOException {\n             .country(COUNTRY)\n             .zipCode(ZIP_CODE));\n \n+    // TODO: this needs to be set in createAccountAndDbUserWithAffiliation() instead of here.  Why?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA2OTg1Ng=="}, "originalCommit": {"oid": "81d8c72b51e0f705f8e87229fadfcd8f6645046e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1NjQ0Nw==", "bodyText": "not currently.  My assumption is that these test classes will change quite a lot, so I plan to revisit then or soon after", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458956447", "createdAt": "2020-07-22T17:20:04Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -231,6 +235,9 @@ public void setUp() throws IOException {\n             .country(COUNTRY)\n             .zipCode(ZIP_CODE));\n \n+    // TODO: this needs to be set in createAccountAndDbUserWithAffiliation() instead of here.  Why?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA2OTg1Ng=="}, "originalCommit": {"oid": "81d8c72b51e0f705f8e87229fadfcd8f6645046e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDc5NzU3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDo1MjoyMlrOGy8W_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDo1MjoyMlrOGy8W_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA3MDkxMA==", "bodyText": "these two lines help with round-tripping consistency", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r456070910", "createdAt": "2020-07-16T20:52:22Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -1147,14 +1155,333 @@ public void testUpdateProfile_updateDemographicSurvey() {\n         false);\n   }\n \n+  @Test(expected = NotFoundException.class)\n+  public void test_editUserInformation_null_user() {\n+    profileService.editUserInformation(new EditUserInformationRequest());\n+  }\n+\n+  @Test(expected = NotFoundException.class)\n+  public void test_editUserInformation_user_not_found() {\n+    final EditUserInformationRequest request =\n+        new EditUserInformationRequest().username(\"not found\");\n+    profileService.editUserInformation(request);\n+  }\n+\n+  @Test\n+  public void test_editUserInformation_no_change() {\n+    final Profile original = createAccountAndDbUserWithAffiliation();\n+\n+    // valid user but no fields updated\n+    final EditUserInformationRequest request =\n+        new EditUserInformationRequest().username(PRIMARY_EMAIL);\n+    final Profile retrieved = profileService.editUserInformation(request);\n+\n+    // RW-5257 Demo Survey completion time is incorrectly updated\n+    retrieved.setDemographicSurveyCompletionTime(null);\n+    assertThat(retrieved).isEqualTo(original);\n+  }\n+\n+  @Test\n+  public void test_editUserInformation_contactEmail() {\n+    // pre-affiliate with an Institution which will validate the user's existing\n+    // CONTACT_EMAIL and also a new one\n+    final String newContactEmail = \"eric.lander@broadinstitute.org\";\n+\n+    final Institution broadPlus =\n+        new Institution()\n+            .shortName(\"Broad\")\n+            .displayName(\"The Broad Institute\")\n+            .emailAddresses(ImmutableList.of(CONTACT_EMAIL, newContactEmail))\n+            .duaTypeEnum(DuaType.RESTRICTED)\n+            .organizationTypeEnum(OrganizationType.ACADEMIC_RESEARCH_INSTITUTION);\n+    institutionService.createInstitution(broadPlus);\n+\n+    final VerifiedInstitutionalAffiliation affiliation =\n+        new VerifiedInstitutionalAffiliation()\n+            .institutionShortName(broadPlus.getShortName())\n+            .institutionDisplayName(broadPlus.getDisplayName())\n+            .institutionalRoleEnum(InstitutionalRole.PROJECT_PERSONNEL);\n+\n+    final Profile original = createAccountAndDbUserWithAffiliation(affiliation);\n+    assertThat(original.getContactEmail()).isEqualTo(CONTACT_EMAIL);\n+\n+    final EditUserInformationRequest request =\n+        new EditUserInformationRequest().username(PRIMARY_EMAIL).contactEmail(newContactEmail);\n+    final Profile retrieved = profileService.editUserInformation(request);\n+    assertThat(retrieved.getContactEmail()).isEqualTo(newContactEmail);\n+  }\n+\n+  @Test(expected = BadRequestException.class)\n+  public void test_editUserInformation_contactEmail_no_match() {\n+    // the existing Institution for this user only matches the single CONTACT_EMAIL\n+    createAccountAndDbUserWithAffiliation();\n+\n+    final String newContactEmail = \"eric.lander@broadinstitute.org\";\n+    final EditUserInformationRequest request =\n+        new EditUserInformationRequest().username(PRIMARY_EMAIL).contactEmail(newContactEmail);\n+    profileService.editUserInformation(request);\n+  }\n+\n+  @Test\n+  public void test_editUserInformation_newAffiliation() {\n+    final VerifiedInstitutionalAffiliation expectedOriginalAffiliation =\n+        new VerifiedInstitutionalAffiliation()\n+            .institutionShortName(\"Broad\")\n+            .institutionDisplayName(\"The Broad Institute\")\n+            .institutionalRoleEnum(InstitutionalRole.PROJECT_PERSONNEL);\n+    final Profile original = createAccountAndDbUserWithAffiliation();\n+\n+    assertThat(original.getVerifiedInstitutionalAffiliation())\n+        .isEqualTo(expectedOriginalAffiliation);\n+\n+    // define a new affiliation which will match the user's existing CONTACT_EMAIL\n+\n+    final Institution massGeneral =\n+        new Institution()\n+            .shortName(\"MGH123\")\n+            .displayName(\"Massachusetts General Hospital\")\n+            .emailAddresses(ImmutableList.of(CONTACT_EMAIL))\n+            .duaTypeEnum(DuaType.RESTRICTED)\n+            .organizationTypeEnum(OrganizationType.HEALTH_CENTER_NON_PROFIT);\n+    institutionService.createInstitution(massGeneral);\n+\n+    final VerifiedInstitutionalAffiliation newAffiliation =\n+        new VerifiedInstitutionalAffiliation()\n+            .institutionShortName(massGeneral.getShortName())\n+            .institutionDisplayName(massGeneral.getDisplayName())\n+            .institutionalRoleEnum(InstitutionalRole.POST_DOCTORAL);\n+\n+    final EditUserInformationRequest request =\n+        new EditUserInformationRequest()\n+            .username(PRIMARY_EMAIL)\n+            .verifiedInstitutionalAffiliation(newAffiliation);\n+    final Profile retrieved = profileService.editUserInformation(request);\n+    assertThat(retrieved.getVerifiedInstitutionalAffiliation()).isEqualTo(newAffiliation);\n+  }\n+\n+  @Test(expected = BadRequestException.class)\n+  public void test_editUserInformation_newAffiliation_no_match() {\n+    createAccountAndDbUserWithAffiliation();\n+\n+    // define a new affiliation which will not match the user's CONTACT_EMAIL\n+\n+    final Institution massGeneral =\n+        new Institution()\n+            .shortName(\"MGH123\")\n+            .displayName(\"Massachusetts General Hospital\")\n+            .duaTypeEnum(DuaType.MASTER)\n+            .emailDomains(ImmutableList.of(\"mgh.org\", \"massgeneral.hospital\"))\n+            .organizationTypeEnum(OrganizationType.HEALTH_CENTER_NON_PROFIT);\n+    institutionService.createInstitution(massGeneral);\n+\n+    final VerifiedInstitutionalAffiliation newAffiliation =\n+        new VerifiedInstitutionalAffiliation()\n+            .institutionShortName(massGeneral.getShortName())\n+            .institutionDisplayName(massGeneral.getDisplayName())\n+            .institutionalRoleEnum(InstitutionalRole.POST_DOCTORAL);\n+\n+    final EditUserInformationRequest request =\n+        new EditUserInformationRequest()\n+            .username(PRIMARY_EMAIL)\n+            .verifiedInstitutionalAffiliation(newAffiliation);\n+    profileService.editUserInformation(request);\n+  }\n+\n+  @Test\n+  public void test_editUserInformation_contactEmail_newAffiliation_self_match() {\n+    final VerifiedInstitutionalAffiliation expectedOriginalAffiliation =\n+        new VerifiedInstitutionalAffiliation()\n+            .institutionShortName(\"Broad\")\n+            .institutionDisplayName(\"The Broad Institute\")\n+            .institutionalRoleEnum(InstitutionalRole.PROJECT_PERSONNEL);\n+\n+    final Profile original = createAccountAndDbUserWithAffiliation();\n+    assertThat(original.getContactEmail()).isEqualTo(CONTACT_EMAIL);\n+    assertThat(original.getVerifiedInstitutionalAffiliation())\n+        .isEqualTo(expectedOriginalAffiliation);\n+\n+    // update both the contact email and the affiliation, and validate against each other\n+\n+    final String newContactEmail = \"doctor@mgh.org\";\n+\n+    final Institution massGeneral =\n+        new Institution()\n+            .shortName(\"MGH123\")\n+            .displayName(\"Massachusetts General Hospital\")\n+            .duaTypeEnum(DuaType.MASTER)\n+            .emailDomains(ImmutableList.of(\"mgh.org\", \"massgeneral.hospital\"))\n+            .organizationTypeEnum(OrganizationType.HEALTH_CENTER_NON_PROFIT);\n+    institutionService.createInstitution(massGeneral);\n+\n+    final VerifiedInstitutionalAffiliation newAffiliation =\n+        new VerifiedInstitutionalAffiliation()\n+            .institutionShortName(massGeneral.getShortName())\n+            .institutionDisplayName(massGeneral.getDisplayName())\n+            .institutionalRoleEnum(InstitutionalRole.POST_DOCTORAL);\n+\n+    final EditUserInformationRequest request =\n+        new EditUserInformationRequest()\n+            .username(PRIMARY_EMAIL)\n+            .contactEmail(newContactEmail)\n+            .verifiedInstitutionalAffiliation(newAffiliation);\n+    final Profile retrieved = profileService.editUserInformation(request);\n+    assertThat(retrieved.getContactEmail()).isEqualTo(newContactEmail);\n+    assertThat(retrieved.getVerifiedInstitutionalAffiliation()).isEqualTo(newAffiliation);\n+  }\n+\n+  @Test(expected = BadRequestException.class)\n+  public void test_editUserInformation_contactEmail_newAffiliation_no_match() {\n+    final VerifiedInstitutionalAffiliation expectedOriginalAffiliation =\n+        new VerifiedInstitutionalAffiliation()\n+            .institutionShortName(\"Broad\")\n+            .institutionDisplayName(\"The Broad Institute\")\n+            .institutionalRoleEnum(InstitutionalRole.PROJECT_PERSONNEL);\n+\n+    final Profile original = createAccountAndDbUserWithAffiliation();\n+    assertThat(original.getContactEmail()).isEqualTo(CONTACT_EMAIL);\n+    assertThat(original.getVerifiedInstitutionalAffiliation())\n+        .isEqualTo(expectedOriginalAffiliation);\n+\n+    // update both the contact email and the affiliation, and fail to validate against each other\n+\n+    final String newContactEmail = \"notadoctor@hotmail.com\";\n+\n+    final Institution massGeneral =\n+        new Institution()\n+            .shortName(\"MGH123\")\n+            .displayName(\"Massachusetts General Hospital\")\n+            .duaTypeEnum(DuaType.MASTER)\n+            .emailDomains(ImmutableList.of(\"mgh.org\", \"massgeneral.hospital\"))\n+            .organizationTypeEnum(OrganizationType.HEALTH_CENTER_NON_PROFIT);\n+    institutionService.createInstitution(massGeneral);\n+\n+    final VerifiedInstitutionalAffiliation newAffiliation =\n+        new VerifiedInstitutionalAffiliation()\n+            .institutionShortName(massGeneral.getShortName())\n+            .institutionDisplayName(massGeneral.getDisplayName())\n+            .institutionalRoleEnum(InstitutionalRole.POST_DOCTORAL);\n+\n+    final EditUserInformationRequest request =\n+        new EditUserInformationRequest()\n+            .username(PRIMARY_EMAIL)\n+            .contactEmail(newContactEmail)\n+            .verifiedInstitutionalAffiliation(newAffiliation);\n+    profileService.editUserInformation(request);\n+  }\n+\n+  @Test\n+  public void test_editUserInformation_no_bypass_requests() {\n+    final Profile original = createAccountAndDbUserWithAffiliation();\n+\n+    final EditUserInformationRequest request =\n+        new EditUserInformationRequest()\n+            .username(PRIMARY_EMAIL)\n+            .accessBypassRequests(Collections.emptyList());\n+    final Profile retrieved = profileService.editUserInformation(request);\n+\n+    // RW-5257 Demo Survey completion time is incorrectly updated\n+    retrieved.setDemographicSurveyCompletionTime(null);\n+    assertThat(retrieved).isEqualTo(original);\n+  }\n+\n+  @Test\n+  public void test_editUserInformation_bypass_requests() {\n+    final Profile original = createAccountAndDbUserWithAffiliation();\n+\n+    // user has no bypasses at test start\n+    assertThat(original.getDataUseAgreementBypassTime()).isNull();\n+    assertThat(original.getComplianceTrainingBypassTime()).isNull();\n+    assertThat(original.getBetaAccessBypassTime()).isNull();\n+    assertThat(original.getEraCommonsBypassTime()).isNull();\n+    assertThat(original.getTwoFactorAuthBypassTime()).isNull();\n+\n+    final List<AccessBypassRequest> bypasses1 =\n+        ImmutableList.of(\n+            new AccessBypassRequest().moduleName(AccessModule.DATA_USE_AGREEMENT).isBypassed(true),\n+            new AccessBypassRequest().moduleName(AccessModule.COMPLIANCE_TRAINING).isBypassed(true),\n+            // would un-bypass if a bypass had existed\n+            new AccessBypassRequest().moduleName(AccessModule.BETA_ACCESS).isBypassed(false));\n+\n+    final EditUserInformationRequest request1 =\n+        new EditUserInformationRequest().username(PRIMARY_EMAIL).accessBypassRequests(bypasses1);\n+    final Profile retrieved1 = profileService.editUserInformation(request1);\n+\n+    // these two are now bypassed\n+    assertThat(retrieved1.getDataUseAgreementBypassTime()).isNotNull();\n+    assertThat(retrieved1.getComplianceTrainingBypassTime()).isNotNull();\n+    // remains unbypassed because the flag was set to false\n+    assertThat(retrieved1.getBetaAccessBypassTime()).isNull();\n+    // unchanged: unbypassed\n+    assertThat(retrieved1.getEraCommonsBypassTime()).isNull();\n+    assertThat(retrieved1.getTwoFactorAuthBypassTime()).isNull();\n+\n+    final List<AccessBypassRequest> bypasses2 =\n+        ImmutableList.of(\n+            // un-bypass the previously bypassed\n+            new AccessBypassRequest().moduleName(AccessModule.DATA_USE_AGREEMENT).isBypassed(false),\n+            new AccessBypassRequest()\n+                .moduleName(AccessModule.COMPLIANCE_TRAINING)\n+                .isBypassed(false),\n+            // bypass\n+            new AccessBypassRequest().moduleName(AccessModule.ERA_COMMONS).isBypassed(true),\n+            new AccessBypassRequest().moduleName(AccessModule.TWO_FACTOR_AUTH).isBypassed(true));\n+\n+    final EditUserInformationRequest request2 = request1.accessBypassRequests(bypasses2);\n+    final Profile retrieved2 = profileService.editUserInformation(request2);\n+\n+    // these two are now unbypassed\n+    assertThat(retrieved2.getDataUseAgreementBypassTime()).isNull();\n+    assertThat(retrieved2.getComplianceTrainingBypassTime()).isNull();\n+    // remains unbypassed\n+    assertThat(retrieved2.getBetaAccessBypassTime()).isNull();\n+    // the two are now bypassed\n+    assertThat(retrieved2.getEraCommonsBypassTime()).isNotNull();\n+    assertThat(retrieved2.getTwoFactorAuthBypassTime()).isNotNull();\n+  }\n+\n+  // verify that setFreeTierDollarOverride() is called when the quota changes\n+\n+  @Test\n+  public void test_editUserInformation_free_tier_quota() {\n+    createAccountAndDbUserWithAffiliation();\n+\n+    final Double newQuota = 123.4;\n+\n+    final EditUserInformationRequest request =\n+        new EditUserInformationRequest().username(PRIMARY_EMAIL).freeCreditsLimit(newQuota);\n+    profileService.editUserInformation(request);\n+    verify(mockFreeTierBillingService).setFreeTierDollarOverride(dbUser, newQuota);\n+  }\n+\n+  // verify that setFreeTierDollarOverride() is not called when the quota does not change\n+\n+  @Test\n+  public void test_editUserInformation_free_tier_quota_no_change() {\n+    final Profile original = createAccountAndDbUserWithAffiliation();\n+\n+    final EditUserInformationRequest request =\n+        new EditUserInformationRequest()\n+            .username(PRIMARY_EMAIL)\n+            .freeCreditsLimit(original.getFreeTierDollarQuota());\n+    profileService.editUserInformation(request);\n+\n+    verify(mockFreeTierBillingService, never()).setFreeTierDollarOverride(any(), anyDouble());\n+  }\n+\n   private Profile createAccountAndDbUserWithAffiliation(\n       VerifiedInstitutionalAffiliation verifiedAffiliation) {\n     createAccountRequest.getProfile().setVerifiedInstitutionalAffiliation(verifiedAffiliation);\n \n     Profile result = profileController.createAccount(createAccountRequest).getBody();\n+\n+    // initialize the global test dbUser\n     dbUser = userDao.findUserByUsername(PRIMARY_EMAIL);\n+\n+    // TODO: why is this necessary instead of initializing in setUp() ?\n     dbUser.setEmailVerificationStatusEnum(EmailVerificationStatus.SUBSCRIBED);\n-    userDao.save(dbUser);\n+    dbUser = userDao.save(dbUser);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81d8c72b51e0f705f8e87229fadfcd8f6645046e"}, "originalPosition": 373}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzU4NzA0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/FreeTierAuditor.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo1NTowOFrOGzWOaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzoyMDozNlrOG1sf8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NDY5Nw==", "bodyText": "This was a fun exercise for Baby's First Kotlin, but it might be more appropriately part of User or Profile Auditor", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r456494697", "createdAt": "2020-07-17T14:55:08Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/FreeTierAuditor.kt", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.pmiops.workbench.actionaudit.auditors\n+\n+interface FreeTierAuditor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de57249e6b1c350d9fd94e21b2558e04ebe28f8c"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE1OTIxNA==", "bodyText": "Nice. Note that it's not necessary to write auditors in Kotlin.\nThe UserServiceAuditor could work well here, since it has the administrator injected already.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458159214", "createdAt": "2020-07-21T14:51:52Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/FreeTierAuditor.kt", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.pmiops.workbench.actionaudit.auditors\n+\n+interface FreeTierAuditor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NDY5Nw=="}, "originalCommit": {"oid": "de57249e6b1c350d9fd94e21b2558e04ebe28f8c"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1Njc4NQ==", "bodyText": "sounds good", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458956785", "createdAt": "2020-07-22T17:20:36Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/FreeTierAuditor.kt", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.pmiops.workbench.actionaudit.auditors\n+\n+interface FreeTierAuditor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NDY5Nw=="}, "originalCommit": {"oid": "de57249e6b1c350d9fd94e21b2558e04ebe28f8c"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzU5MzQ4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/targetproperties/ProfileTargetProperty.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo1Njo0NVrOGzWSdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzoyMTo1NlrOG1sjOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NTczNQ==", "bodyText": "not sure whether this makes sense as a ProfileTargetProperty or elsewhere", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r456495735", "createdAt": "2020-07-17T14:56:45Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/targetproperties/ProfileTargetProperty.kt", "diffHunk": "@@ -20,5 +20,6 @@ constructor(override val propertyName: String, override val extractor: (Profile)\n     INSTITUTIONAL_AFFILIATIONS(\"institutional_affiliations\",\n             { it.institutionalAffiliations?.joinToString(\", \") }),\n     DEMOGRAPHIC_SURVEY(\"demographic_survey\", { it.demographicSurvey?.toString() }),\n-    ADDRESS(\"address\", { it.address?.toString() });\n+    ADDRESS(\"address\", { it.address?.toString() }),\n+    FREE_TIER_DOLLAR_QUOTA(\"free_tier_dollar_quota\", { it.freeTierDollarQuota?.toString() });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de57249e6b1c350d9fd94e21b2558e04ebe28f8c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE2NTgzNA==", "bodyText": "There's also an ACCOUNT target type which could make sense. the important thing is to capture the user ID, administrator ID, etc.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458165834", "createdAt": "2020-07-21T15:00:18Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/targetproperties/ProfileTargetProperty.kt", "diffHunk": "@@ -20,5 +20,6 @@ constructor(override val propertyName: String, override val extractor: (Profile)\n     INSTITUTIONAL_AFFILIATIONS(\"institutional_affiliations\",\n             { it.institutionalAffiliations?.joinToString(\", \") }),\n     DEMOGRAPHIC_SURVEY(\"demographic_survey\", { it.demographicSurvey?.toString() }),\n-    ADDRESS(\"address\", { it.address?.toString() });\n+    ADDRESS(\"address\", { it.address?.toString() }),\n+    FREE_TIER_DOLLAR_QUOTA(\"free_tier_dollar_quota\", { it.freeTierDollarQuota?.toString() });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NTczNQ=="}, "originalCommit": {"oid": "de57249e6b1c350d9fd94e21b2558e04ebe28f8c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1NzYyNA==", "bodyText": "ok", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458957624", "createdAt": "2020-07-22T17:21:56Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/targetproperties/ProfileTargetProperty.kt", "diffHunk": "@@ -20,5 +20,6 @@ constructor(override val propertyName: String, override val extractor: (Profile)\n     INSTITUTIONAL_AFFILIATIONS(\"institutional_affiliations\",\n             { it.institutionalAffiliations?.joinToString(\", \") }),\n     DEMOGRAPHIC_SURVEY(\"demographic_survey\", { it.demographicSurvey?.toString() }),\n-    ADDRESS(\"address\", { it.address?.toString() });\n+    ADDRESS(\"address\", { it.address?.toString() }),\n+    FREE_TIER_DOLLAR_QUOTA(\"free_tier_dollar_quota\", { it.freeTierDollarQuota?.toString() });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NTczNQ=="}, "originalCommit": {"oid": "de57249e6b1c350d9fd94e21b2558e04ebe28f8c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzYwMjg2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo1OTowOFrOGzWYJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTo0NjoyN1rOG2ZG8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NzE5MQ==", "bodyText": "broken out here so it can be called when either the VIA or the email change", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r456497191", "createdAt": "2020-07-17T14:59:08Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -159,6 +160,10 @@ public void validateInstitutionalAffiliation(Profile profile) {\n           \"Institutional role description cannot be empty when institutional role is set to Other\");\n     }\n \n+    validateInstitutionalAffiliationAgainstEmail(profile);\n+  }\n+\n+  private void validateInstitutionalAffiliationAgainstEmail(Profile profile) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de57249e6b1c350d9fd94e21b2558e04ebe28f8c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NjkwNw==", "bodyText": "Can we just start calling it Affiliation? I.e. validateEmailInAffiliatedDomain()?", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459066907", "createdAt": "2020-07-22T20:35:17Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -159,6 +160,10 @@ public void validateInstitutionalAffiliation(Profile profile) {\n           \"Institutional role description cannot be empty when institutional role is set to Other\");\n     }\n \n+    validateInstitutionalAffiliationAgainstEmail(profile);\n+  }\n+\n+  private void validateInstitutionalAffiliationAgainstEmail(Profile profile) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NzE5MQ=="}, "originalCommit": {"oid": "de57249e6b1c350d9fd94e21b2558e04ebe28f8c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NzM0NQ==", "bodyText": "Also, I try not to throw exceptions in services (especially exceptions intended for clients). Also, below, there's a 'validate' method that returns a boolean and doesn't throw:\n!institutionService.validateAffiliation(dbVerifiedAffiliation, contactEmail)", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459067345", "createdAt": "2020-07-22T20:36:03Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -159,6 +160,10 @@ public void validateInstitutionalAffiliation(Profile profile) {\n           \"Institutional role description cannot be empty when institutional role is set to Other\");\n     }\n \n+    validateInstitutionalAffiliationAgainstEmail(profile);\n+  }\n+\n+  private void validateInstitutionalAffiliationAgainstEmail(Profile profile) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NzE5MQ=="}, "originalCommit": {"oid": "de57249e6b1c350d9fd94e21b2558e04ebe28f8c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY4NzY2Ng==", "bodyText": "We throw all over this Service.  It's useful for me to do so here as well.\nvalidateAffiliation() works for me", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459687666", "createdAt": "2020-07-23T19:46:27Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -159,6 +160,10 @@ public void validateInstitutionalAffiliation(Profile profile) {\n           \"Institutional role description cannot be empty when institutional role is set to Other\");\n     }\n \n+    validateInstitutionalAffiliationAgainstEmail(profile);\n+  }\n+\n+  private void validateInstitutionalAffiliationAgainstEmail(Profile profile) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NzE5MQ=="}, "originalCommit": {"oid": "de57249e6b1c350d9fd94e21b2558e04ebe28f8c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzYwNDQ2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo1OTozNlrOGzWZKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMDo0ODo1MlrOG2gL1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NzQ0OQ==", "bodyText": "I'm not super happy about the boolean flag here - open to ideas", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r456497449", "createdAt": "2020-07-17T14:59:36Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -187,11 +192,28 @@ public void validateInstitutionalAffiliation(Profile profile) {\n    * @param previousProfile\n    */\n   public void updateProfileForUser(DbUser user, Profile updatedProfile, Profile previousProfile) {\n+    updateProfileForUser(user, updatedProfile, previousProfile, false);\n+  }\n+\n+  /**\n+   * Updates a profile for a given user as Admin and persists all information to the database.\n+   *\n+   * @param user\n+   * @param updatedProfile\n+   * @param previousProfile\n+   */\n+  public void adminUpdateProfileForUser(\n+      DbUser user, Profile updatedProfile, Profile previousProfile) {\n+    updateProfileForUser(user, updatedProfile, previousProfile, true);\n+  }\n+\n+  private void updateProfileForUser(\n+      DbUser user, Profile updatedProfile, Profile previousProfile, boolean userIsAdmin) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de57249e6b1c350d9fd94e21b2558e04ebe28f8c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3NzQzMQ==", "bodyText": "We can put a transient method on DbUser to return isAdministrrator or whatever based on the Authorities enum.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458177431", "createdAt": "2020-07-21T15:15:56Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -187,11 +192,28 @@ public void validateInstitutionalAffiliation(Profile profile) {\n    * @param previousProfile\n    */\n   public void updateProfileForUser(DbUser user, Profile updatedProfile, Profile previousProfile) {\n+    updateProfileForUser(user, updatedProfile, previousProfile, false);\n+  }\n+\n+  /**\n+   * Updates a profile for a given user as Admin and persists all information to the database.\n+   *\n+   * @param user\n+   * @param updatedProfile\n+   * @param previousProfile\n+   */\n+  public void adminUpdateProfileForUser(\n+      DbUser user, Profile updatedProfile, Profile previousProfile) {\n+    updateProfileForUser(user, updatedProfile, previousProfile, true);\n+  }\n+\n+  private void updateProfileForUser(\n+      DbUser user, Profile updatedProfile, Profile previousProfile, boolean userIsAdmin) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NzQ0OQ=="}, "originalCommit": {"oid": "de57249e6b1c350d9fd94e21b2558e04ebe28f8c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1ODU3MA==", "bodyText": "That seems reasonable.  One snag here is that sometimes the user object is \"without authorities\" and I don't understand the implications of that well enough", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458958570", "createdAt": "2020-07-22T17:23:32Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -187,11 +192,28 @@ public void validateInstitutionalAffiliation(Profile profile) {\n    * @param previousProfile\n    */\n   public void updateProfileForUser(DbUser user, Profile updatedProfile, Profile previousProfile) {\n+    updateProfileForUser(user, updatedProfile, previousProfile, false);\n+  }\n+\n+  /**\n+   * Updates a profile for a given user as Admin and persists all information to the database.\n+   *\n+   * @param user\n+   * @param updatedProfile\n+   * @param previousProfile\n+   */\n+  public void adminUpdateProfileForUser(\n+      DbUser user, Profile updatedProfile, Profile previousProfile) {\n+    updateProfileForUser(user, updatedProfile, previousProfile, true);\n+  }\n+\n+  private void updateProfileForUser(\n+      DbUser user, Profile updatedProfile, Profile previousProfile, boolean userIsAdmin) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NzQ0OQ=="}, "originalCommit": {"oid": "de57249e6b1c350d9fd94e21b2558e04ebe28f8c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2ODUwMQ==", "bodyText": "Aren't they just lazily fetched the first time you try to grab them?\n  // Authorities (special permissions) are granted using api/project.rb set-authority.\n  @ElementCollection(fetch = FetchType.LAZY)\n  @CollectionTable(name = \"authority\", joinColumns = @JoinColumn(name = \"user_id\"))\n  @Column(name = \"authority\")\n  public Set<Short> getAuthorities() {\n    return authorities;\n  }\n\nThis is getting at my main source of confusion: does the DAO or the Entity drive the train here?", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459068501", "createdAt": "2020-07-22T20:38:15Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -187,11 +192,28 @@ public void validateInstitutionalAffiliation(Profile profile) {\n    * @param previousProfile\n    */\n   public void updateProfileForUser(DbUser user, Profile updatedProfile, Profile previousProfile) {\n+    updateProfileForUser(user, updatedProfile, previousProfile, false);\n+  }\n+\n+  /**\n+   * Updates a profile for a given user as Admin and persists all information to the database.\n+   *\n+   * @param user\n+   * @param updatedProfile\n+   * @param previousProfile\n+   */\n+  public void adminUpdateProfileForUser(\n+      DbUser user, Profile updatedProfile, Profile previousProfile) {\n+    updateProfileForUser(user, updatedProfile, previousProfile, true);\n+  }\n+\n+  private void updateProfileForUser(\n+      DbUser user, Profile updatedProfile, Profile previousProfile, boolean userIsAdmin) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NzQ0OQ=="}, "originalCommit": {"oid": "de57249e6b1c350d9fd94e21b2558e04ebe28f8c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY4ODk4MA==", "bodyText": "Oh I see, thanks.  This seems much more tractable, then.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459688980", "createdAt": "2020-07-23T19:49:18Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -187,11 +192,28 @@ public void validateInstitutionalAffiliation(Profile profile) {\n    * @param previousProfile\n    */\n   public void updateProfileForUser(DbUser user, Profile updatedProfile, Profile previousProfile) {\n+    updateProfileForUser(user, updatedProfile, previousProfile, false);\n+  }\n+\n+  /**\n+   * Updates a profile for a given user as Admin and persists all information to the database.\n+   *\n+   * @param user\n+   * @param updatedProfile\n+   * @param previousProfile\n+   */\n+  public void adminUpdateProfileForUser(\n+      DbUser user, Profile updatedProfile, Profile previousProfile) {\n+    updateProfileForUser(user, updatedProfile, previousProfile, true);\n+  }\n+\n+  private void updateProfileForUser(\n+      DbUser user, Profile updatedProfile, Profile previousProfile, boolean userIsAdmin) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NzQ0OQ=="}, "originalCommit": {"oid": "de57249e6b1c350d9fd94e21b2558e04ebe28f8c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwMzYwNw==", "bodyText": "This logic is now gated on the new DbUser.hasAuthority()", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459803607", "createdAt": "2020-07-24T00:48:52Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -187,11 +192,28 @@ public void validateInstitutionalAffiliation(Profile profile) {\n    * @param previousProfile\n    */\n   public void updateProfileForUser(DbUser user, Profile updatedProfile, Profile previousProfile) {\n+    updateProfileForUser(user, updatedProfile, previousProfile, false);\n+  }\n+\n+  /**\n+   * Updates a profile for a given user as Admin and persists all information to the database.\n+   *\n+   * @param user\n+   * @param updatedProfile\n+   * @param previousProfile\n+   */\n+  public void adminUpdateProfileForUser(\n+      DbUser user, Profile updatedProfile, Profile previousProfile) {\n+    updateProfileForUser(user, updatedProfile, previousProfile, true);\n+  }\n+\n+  private void updateProfileForUser(\n+      DbUser user, Profile updatedProfile, Profile previousProfile, boolean userIsAdmin) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NzQ0OQ=="}, "originalCommit": {"oid": "de57249e6b1c350d9fd94e21b2558e04ebe28f8c"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzYxODM3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNTowMzoxM1rOGzWhpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNTowMzoxM1rOGzWhpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5OTYyMQ==", "bodyText": "Split into \"this is a correct Profile\" vs \"user or admin can change this\" for clarity", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r456499621", "createdAt": "2020-07-17T15:03:13Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -381,47 +415,73 @@ private void validateAreaOfResearch(Profile profile) throws BadRequestException\n    * object.\n    *\n    * @param updatedProfile\n-   * @param prevProfile\n+   * @param previousProfile\n    * @throws BadRequestException\n    */\n   @VisibleForTesting\n-  public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile prevProfile)\n+  public void validateProfile(\n+      @Nonnull Profile updatedProfile, @Nullable Profile previousProfile, boolean userIsAdmin) {\n+\n+    final boolean isNewProfile = previousProfile == null;\n+    final Diff diff = javers.compare(previousProfile, updatedProfile);\n+\n+    validateProfileForCorrectness(updatedProfile, isNewProfile, diff);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de57249e6b1c350d9fd94e21b2558e04ebe28f8c"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzYzMDU3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/actionaudit/auditors/FreeTierAuditorTest.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNTowNjoxNFrOGzWo6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjo0MToyOVrOG1ApYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwMTQ4Mw==", "bodyText": "using ProfileAuditorTest as a model", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r456501483", "createdAt": "2020-07-17T15:06:14Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/actionaudit/auditors/FreeTierAuditorTest.kt", "diffHunk": "@@ -0,0 +1,100 @@\n+package org.pmiops.workbench.actionaudit.auditors\n+\n+import com.google.common.truth.Truth.assertThat\n+import com.nhaarman.mockitokotlin2.argumentCaptor\n+import com.nhaarman.mockitokotlin2.mock\n+import com.nhaarman.mockitokotlin2.verify\n+import com.nhaarman.mockitokotlin2.whenever\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.pmiops.workbench.actionaudit.ActionAuditEvent\n+import org.pmiops.workbench.actionaudit.ActionAuditService\n+import org.pmiops.workbench.actionaudit.ActionType\n+import org.pmiops.workbench.actionaudit.AgentType\n+import org.pmiops.workbench.actionaudit.TargetType\n+import org.pmiops.workbench.actionaudit.targetproperties.ProfileTargetProperty\n+import org.pmiops.workbench.db.model.DbUser\n+import org.springframework.test.context.junit4.SpringRunner\n+import java.time.Clock\n+import java.time.Instant\n+import javax.inject.Provider\n+\n+@RunWith(SpringRunner::class)\n+class FreeTierAuditorTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de57249e6b1c350d9fd94e21b2558e04ebe28f8c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzODMwNw==", "bodyText": "OK. You don't need to use Kotlin unless you want to for these as well, unless you're getting really fancy with generics.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458238307", "createdAt": "2020-07-21T16:41:29Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/actionaudit/auditors/FreeTierAuditorTest.kt", "diffHunk": "@@ -0,0 +1,100 @@\n+package org.pmiops.workbench.actionaudit.auditors\n+\n+import com.google.common.truth.Truth.assertThat\n+import com.nhaarman.mockitokotlin2.argumentCaptor\n+import com.nhaarman.mockitokotlin2.mock\n+import com.nhaarman.mockitokotlin2.verify\n+import com.nhaarman.mockitokotlin2.whenever\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.pmiops.workbench.actionaudit.ActionAuditEvent\n+import org.pmiops.workbench.actionaudit.ActionAuditService\n+import org.pmiops.workbench.actionaudit.ActionType\n+import org.pmiops.workbench.actionaudit.AgentType\n+import org.pmiops.workbench.actionaudit.TargetType\n+import org.pmiops.workbench.actionaudit.targetproperties.ProfileTargetProperty\n+import org.pmiops.workbench.db.model.DbUser\n+import org.springframework.test.context.junit4.SpringRunner\n+import java.time.Clock\n+import java.time.Instant\n+import javax.inject.Provider\n+\n+@RunWith(SpringRunner::class)\n+class FreeTierAuditorTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwMTQ4Mw=="}, "originalCommit": {"oid": "de57249e6b1c350d9fd94e21b2558e04ebe28f8c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzYzNzM3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/api/WorkspacesControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNTowODowMFrOGzWtKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNTowODowMFrOGzWtKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwMjU3MQ==", "bodyText": "Because FreeTierBillingService now has a FreeTierAuditor dependency, this class needs to @Import it to run.  Instead, I took the opportunity to change this from a sorta-mock to a proper mock.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r456502571", "createdAt": "2020-07-17T15:08:00Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/api/WorkspacesControllerTest.java", "diffHunk": "@@ -260,6 +260,8 @@\n   @Autowired private CohortAnnotationDefinitionController cohortAnnotationDefinitionController;\n   @Autowired private WorkspacesController workspacesController;\n \n+  @MockBean FreeTierBillingService mockFreeTierBillingService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de57249e6b1c350d9fd94e21b2558e04ebe28f8c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTA4MjAyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionType.kt", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNDo1NzoxN1rOG08FCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxNDoxOVrOG2YF4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE2MzQ2Nw==", "bodyText": "With this new one, BYPASS might be appropriate for the action type, and the target would be ACCOUNT, with a property type like FREE_TIER_SPEND_LIMIT. That way you can query for everything anyone has bypassed for a particular user (or any actions on the free tier limit).\nDETECT_HIGH_EGRESS_EVENT is the red-headed stepchild here, because it merges an action (detection) with a target (egress threshold). But it didn't have a clear enough mapping to a target at the time, or a generic notion of EGRESS_SYSTEM - DETECT - EVENT. Might be a good thing to change if we get around to consolidating those events somehow (as they currently fire once per minute).", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458163467", "createdAt": "2020-07-21T14:57:17Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionType.kt", "diffHunk": "@@ -11,5 +11,6 @@ enum class ActionType {\n     DUPLICATE_TO,\n     COLLABORATE,\n     DELETE,\n-    DETECT_HIGH_EGRESS_EVENT\n+    DETECT_HIGH_EGRESS_EVENT,\n+    FREE_TIER_DOLLAR_OVERRIDE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk2MjYyMA==", "bodyText": "I don't like \"bypass\" here because we use that term exclusively to refer to Access Modules.  OVERRIDE_DEFAULT of the FREE_TIER_SPEND_LIMIT, maybe.  Account fits too.  I'll try something along those lines.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458962620", "createdAt": "2020-07-22T17:30:10Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionType.kt", "diffHunk": "@@ -11,5 +11,6 @@ enum class ActionType {\n     DUPLICATE_TO,\n     COLLABORATE,\n     DELETE,\n-    DETECT_HIGH_EGRESS_EVENT\n+    DETECT_HIGH_EGRESS_EVENT,\n+    FREE_TIER_DOLLAR_OVERRIDE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE2MzQ2Nw=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NTEzNQ==", "bodyText": "Action type names should not have targets in them. You could just reuse EDIT. BYPASS to me works for any kind of limit or other blocker that the administrator is removing, and I could see it being helpful to query all such changes together.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459065135", "createdAt": "2020-07-22T20:31:47Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionType.kt", "diffHunk": "@@ -11,5 +11,6 @@ enum class ActionType {\n     DUPLICATE_TO,\n     COLLABORATE,\n     DELETE,\n-    DETECT_HIGH_EGRESS_EVENT\n+    DETECT_HIGH_EGRESS_EVENT,\n+    FREE_TIER_DOLLAR_OVERRIDE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE2MzQ2Nw=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MTAwOQ==", "bodyText": "edit works for me", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459671009", "createdAt": "2020-07-23T19:14:19Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionType.kt", "diffHunk": "@@ -11,5 +11,6 @@ enum class ActionType {\n     DUPLICATE_TO,\n     COLLABORATE,\n     DELETE,\n-    DETECT_HIGH_EGRESS_EVENT\n+    DETECT_HIGH_EGRESS_EVENT,\n+    FREE_TIER_DOLLAR_OVERRIDE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE2MzQ2Nw=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTA4NzU5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/FreeTierAuditorImpl.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNDo1ODozMFrOG08Ing==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNDo1ODozMFrOG08Ing==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE2NDM4Mg==", "bodyText": "please name the first argument targetUserId, as the provided user is the administrator.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458164382", "createdAt": "2020-07-21T14:58:30Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/FreeTierAuditorImpl.kt", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.pmiops.workbench.actionaudit.auditors\n+\n+import org.pmiops.workbench.actionaudit.ActionAuditEvent\n+import org.pmiops.workbench.actionaudit.ActionAuditService\n+import org.pmiops.workbench.actionaudit.ActionType\n+import org.pmiops.workbench.actionaudit.AgentType\n+import org.pmiops.workbench.actionaudit.TargetType\n+import org.pmiops.workbench.actionaudit.targetproperties.ProfileTargetProperty\n+import org.pmiops.workbench.db.model.DbUser\n+import org.springframework.beans.factory.annotation.Autowired\n+import org.springframework.beans.factory.annotation.Qualifier\n+import org.springframework.stereotype.Service\n+import java.time.Clock\n+import javax.inject.Provider\n+\n+@Service\n+class FreeTierAuditorImpl @Autowired\n+constructor(\n+    private val userProvider: Provider<DbUser>,\n+    private val actionAuditService: ActionAuditService,\n+    private val clock: Clock,\n+    @Qualifier(\"ACTION_ID\") private val actionIdProvider: Provider<String>\n+) : FreeTierAuditor {\n+    override fun fireFreeTierDollarQuotaAction(userId: Long, previousDollarQuota: Double?, newDollarQuota: Double?) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTEzNjc5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNTowOTowOFrOG08oCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTozMzo1MVrOG20CEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3MjQyNg==", "bodyText": "Aside: Is this slated to move to UserAdminService or similar?", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458172426", "createdAt": "2020-07-21T15:09:08Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -579,6 +580,12 @@ private boolean userHasEverLoggedIn(\n     return ResponseEntity.ok(new EmptyResponse());\n   }\n \n+  @Override\n+  @AuthorityRequired({Authority.ACCESS_CONTROL_ADMIN})\n+  public ResponseEntity<Profile> editUserInformation(EditUserInformationRequest request) {\n+    return ResponseEntity.ok(profileService.editUserInformation(request));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk2NjA4NA==", "bodyText": "I'm undecided on whether to move ACCESS_CONTROL_ADMIN endpoints like these to a new FooAdminController/Service.  Certainly this will share the fate of others like it, whatever we decide on.  Before then, these will get pushed down to ProfileService/Impl like the others.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458966084", "createdAt": "2020-07-22T17:35:52Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -579,6 +580,12 @@ private boolean userHasEverLoggedIn(\n     return ResponseEntity.ok(new EmptyResponse());\n   }\n \n+  @Override\n+  @AuthorityRequired({Authority.ACCESS_CONTROL_ADMIN})\n+  public ResponseEntity<Profile> editUserInformation(EditUserInformationRequest request) {\n+    return ResponseEntity.ok(profileService.editUserInformation(request));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3MjQyNg=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2MjQ2MQ==", "bodyText": "I prefer a separate UserAdminController, leaving the profile stuff to just user-editable fields. Otherwise it's going to be too easy to accidentally give non-administrators access via some random codepath. I've already got changes to do that on one of my branches.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459062461", "createdAt": "2020-07-22T20:26:42Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -579,6 +580,12 @@ private boolean userHasEverLoggedIn(\n     return ResponseEntity.ok(new EmptyResponse());\n   }\n \n+  @Override\n+  @AuthorityRequired({Authority.ACCESS_CONTROL_ADMIN})\n+  public ResponseEntity<Profile> editUserInformation(EditUserInformationRequest request) {\n+    return ResponseEntity.ok(profileService.editUserInformation(request));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3MjQyNg=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NTY0MQ==", "bodyText": "I'm a bit concerned that \"user information\" is not a well-scoped abstraction. What isn't user information? How about updateAccountAdminProperties() or something?", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459065641", "createdAt": "2020-07-22T20:32:46Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -579,6 +580,12 @@ private boolean userHasEverLoggedIn(\n     return ResponseEntity.ok(new EmptyResponse());\n   }\n \n+  @Override\n+  @AuthorityRequired({Authority.ACCESS_CONTROL_ADMIN})\n+  public ResponseEntity<Profile> editUserInformation(EditUserInformationRequest request) {\n+    return ResponseEntity.ok(profileService.editUserInformation(request));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3MjQyNg=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyODc4Nw==", "bodyText": "\"User Information\" comes from the UI control.  I agree that it's vague and should be changed.  Something like AdminAccountProperties, yeah.  Let's see how that looks.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r460128787", "createdAt": "2020-07-24T15:33:51Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -579,6 +580,12 @@ private boolean userHasEverLoggedIn(\n     return ResponseEntity.ok(new EmptyResponse());\n   }\n \n+  @Override\n+  @AuthorityRequired({Authority.ACCESS_CONTROL_ADMIN})\n+  public ResponseEntity<Profile> editUserInformation(EditUserInformationRequest request) {\n+    return ResponseEntity.ok(profileService.editUserInformation(request));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3MjQyNg=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTIzNzI0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNTozMDo0OVrOG09oIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNTozMDo0OVrOG09oIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4ODgzMw==", "bodyText": "nit: check .size() > 0 so you don't have to use ! on the left and isEmpty() on the right.\nNot sure why we'd want to return a boolean and throw away the diffs though.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458188833", "createdAt": "2020-07-21T15:30:49Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -370,6 +393,17 @@ private void validateAreaOfResearch(Profile profile) throws BadRequestException\n                 && ((PropertyChange) change).getPropertyNameWithPath().startsWith(pathPrefix));\n   }\n \n+  /**\n+   * Has this field changed?\n+   *\n+   * @param diff a Diff between two profiles\n+   * @param field which field to check\n+   * @return true if there are difference between the Profiles\n+   */\n+  private boolean fieldChanged(Diff diff, String field) {\n+    return !getChangesWithPrefix(diff, field).isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTI0NjU3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNTozMjo0M1rOG09t6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNTozMjo0M1rOG09t6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE5MDMxNA==", "bodyText": "Yeah, the validate method should not assume the user is an admin just based on some other function's opinion. We can use the user provider-provided user's authorities to check the required ones. (Note that \"admin\" isn't a single concept in the backend today as I understand it. It's just whoever has the authorities.)", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458190314", "createdAt": "2020-07-21T15:32:43Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -381,47 +415,73 @@ private void validateAreaOfResearch(Profile profile) throws BadRequestException\n    * object.\n    *\n    * @param updatedProfile\n-   * @param prevProfile\n+   * @param previousProfile\n    * @throws BadRequestException\n    */\n   @VisibleForTesting\n-  public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile prevProfile)\n+  public void validateProfile(\n+      @Nonnull Profile updatedProfile, @Nullable Profile previousProfile, boolean userIsAdmin) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTI2Mjc3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNTozNTo1MFrOG093eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo0OTo0OFrOG48MJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE5Mjc2Mg==", "bodyText": "Have you checked the API spec to make sure this is marked read-only? Might not hurt to verify the others as well.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458192762", "createdAt": "2020-07-21T15:35:50Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -381,47 +415,73 @@ private void validateAreaOfResearch(Profile profile) throws BadRequestException\n    * object.\n    *\n    * @param updatedProfile\n-   * @param prevProfile\n+   * @param previousProfile\n    * @throws BadRequestException\n    */\n   @VisibleForTesting\n-  public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile prevProfile)\n+  public void validateProfile(\n+      @Nonnull Profile updatedProfile, @Nullable Profile previousProfile, boolean userIsAdmin) {\n+\n+    final boolean isNewProfile = previousProfile == null;\n+    final Diff diff = javers.compare(previousProfile, updatedProfile);\n+\n+    validateProfileForCorrectness(updatedProfile, isNewProfile, diff);\n+\n+    if (userIsAdmin) {\n+      validateChangesAllowedByAdmin(diff);\n+    } else {\n+      validateChangesAllowedByUser(diff);\n+    }\n+  }\n+\n+  private void validateProfileForCorrectness(Profile profile, boolean isNewProfile, Diff diff)\n       throws BadRequestException {\n-    boolean isNewObject = prevProfile == null;\n-    Diff diff = javers.compare(prevProfile, updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"username\")) {\n+      validateUsername(profile);\n+    }\n+    if (isNewProfile || fieldChanged(diff, \"contactEmail\")) {\n+      validateContactEmail(profile);\n \n-    if (!getChangesWithPrefix(diff, \"username\").isEmpty() || isNewObject) {\n-      validateUsername(updatedProfile);\n+      // only validate if the new profile has an affiliation - some older users do not\n+      if (profile.getVerifiedInstitutionalAffiliation() != null) {\n+        validateInstitutionalAffiliationAgainstEmail(profile);\n+      }\n     }\n-    if (!getChangesWithPrefix(diff, \"contactEmail\").isEmpty() || isNewObject) {\n-      validateContactEmail(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"givenName\")) {\n+      validateGivenName(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"givenName\").isEmpty() || isNewObject) {\n-      validateGivenName(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"familyName\")) {\n+      validateFamilyName(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"familyName\").isEmpty() || isNewObject) {\n-      validateFamilyName(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"address\")) {\n+      validateAddress(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"address\").isEmpty() || isNewObject) {\n-      validateAddress(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"areaOfResearch\")) {\n+      validateAreaOfResearch(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"areaOfResearch\").isEmpty() || isNewObject) {\n-      validateAreaOfResearch(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"verifiedInstitutionalAffiliation\")) {\n+      validateInstitutionalAffiliation(profile);\n+    }\n+  }\n+\n+  private void validateChangesAllowedByUser(Diff diff) {\n+    if (fieldChanged(diff, \"username\")) {\n+      // See RW-1488.\n+      throw new BadRequestException(\"Changing username is not supported\");\n     }\n-    if (!getChangesWithPrefix(diff, \"verifiedInstitutionalAffiliation\").isEmpty() || isNewObject) {\n-      validateInstitutionalAffiliation(updatedProfile);\n+    if (fieldChanged(diff, \"contactEmail\")) {\n+      // See RW-1488.\n+      throw new BadRequestException(\"Changing contact email is not currently supported\");\n     }\n+    if (fieldChanged(diff, \"verifiedInstitutionalAffiliation\")) {\n+      throw new BadRequestException(\"Changing Verified Institutional Affiliation is not supported\");\n+    }\n+  }\n \n-    if (!isNewObject) {\n-      // We disallow changes in certain fields.\n-      if (!getChangesWithPrefix(diff, \"username\").isEmpty()) {\n-        // See RW-1488.\n-        throw new BadRequestException(\"Changing username is not supported\");\n-      }\n-      if (!getChangesWithPrefix(diff, \"contactEmail\").isEmpty()) {\n-        // See RW-1488.\n-        throw new BadRequestException(\"Changing contact email is not currently supported\");\n-      }\n+  private void validateChangesAllowedByAdmin(Diff diff) {\n+    if (fieldChanged(diff, \"username\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3NDUzMA==", "bodyText": "could you clarify?", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458974530", "createdAt": "2020-07-22T17:49:43Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -381,47 +415,73 @@ private void validateAreaOfResearch(Profile profile) throws BadRequestException\n    * object.\n    *\n    * @param updatedProfile\n-   * @param prevProfile\n+   * @param previousProfile\n    * @throws BadRequestException\n    */\n   @VisibleForTesting\n-  public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile prevProfile)\n+  public void validateProfile(\n+      @Nonnull Profile updatedProfile, @Nullable Profile previousProfile, boolean userIsAdmin) {\n+\n+    final boolean isNewProfile = previousProfile == null;\n+    final Diff diff = javers.compare(previousProfile, updatedProfile);\n+\n+    validateProfileForCorrectness(updatedProfile, isNewProfile, diff);\n+\n+    if (userIsAdmin) {\n+      validateChangesAllowedByAdmin(diff);\n+    } else {\n+      validateChangesAllowedByUser(diff);\n+    }\n+  }\n+\n+  private void validateProfileForCorrectness(Profile profile, boolean isNewProfile, Diff diff)\n       throws BadRequestException {\n-    boolean isNewObject = prevProfile == null;\n-    Diff diff = javers.compare(prevProfile, updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"username\")) {\n+      validateUsername(profile);\n+    }\n+    if (isNewProfile || fieldChanged(diff, \"contactEmail\")) {\n+      validateContactEmail(profile);\n \n-    if (!getChangesWithPrefix(diff, \"username\").isEmpty() || isNewObject) {\n-      validateUsername(updatedProfile);\n+      // only validate if the new profile has an affiliation - some older users do not\n+      if (profile.getVerifiedInstitutionalAffiliation() != null) {\n+        validateInstitutionalAffiliationAgainstEmail(profile);\n+      }\n     }\n-    if (!getChangesWithPrefix(diff, \"contactEmail\").isEmpty() || isNewObject) {\n-      validateContactEmail(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"givenName\")) {\n+      validateGivenName(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"givenName\").isEmpty() || isNewObject) {\n-      validateGivenName(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"familyName\")) {\n+      validateFamilyName(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"familyName\").isEmpty() || isNewObject) {\n-      validateFamilyName(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"address\")) {\n+      validateAddress(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"address\").isEmpty() || isNewObject) {\n-      validateAddress(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"areaOfResearch\")) {\n+      validateAreaOfResearch(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"areaOfResearch\").isEmpty() || isNewObject) {\n-      validateAreaOfResearch(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"verifiedInstitutionalAffiliation\")) {\n+      validateInstitutionalAffiliation(profile);\n+    }\n+  }\n+\n+  private void validateChangesAllowedByUser(Diff diff) {\n+    if (fieldChanged(diff, \"username\")) {\n+      // See RW-1488.\n+      throw new BadRequestException(\"Changing username is not supported\");\n     }\n-    if (!getChangesWithPrefix(diff, \"verifiedInstitutionalAffiliation\").isEmpty() || isNewObject) {\n-      validateInstitutionalAffiliation(updatedProfile);\n+    if (fieldChanged(diff, \"contactEmail\")) {\n+      // See RW-1488.\n+      throw new BadRequestException(\"Changing contact email is not currently supported\");\n     }\n+    if (fieldChanged(diff, \"verifiedInstitutionalAffiliation\")) {\n+      throw new BadRequestException(\"Changing Verified Institutional Affiliation is not supported\");\n+    }\n+  }\n \n-    if (!isNewObject) {\n-      // We disallow changes in certain fields.\n-      if (!getChangesWithPrefix(diff, \"username\").isEmpty()) {\n-        // See RW-1488.\n-        throw new BadRequestException(\"Changing username is not supported\");\n-      }\n-      if (!getChangesWithPrefix(diff, \"contactEmail\").isEmpty()) {\n-        // See RW-1488.\n-        throw new BadRequestException(\"Changing contact email is not currently supported\");\n-      }\n+  private void validateChangesAllowedByAdmin(Diff diff) {\n+    if (fieldChanged(diff, \"username\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE5Mjc2Mg=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3NDI2MA==", "bodyText": "In the Swagger I mean. It's actually marked required even though we can't change it  \ud83d\ude22 .\n  Profile:\n    type: object\n    required:\n    - username\n    - dataAccessLevel", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459074260", "createdAt": "2020-07-22T20:48:56Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -381,47 +415,73 @@ private void validateAreaOfResearch(Profile profile) throws BadRequestException\n    * object.\n    *\n    * @param updatedProfile\n-   * @param prevProfile\n+   * @param previousProfile\n    * @throws BadRequestException\n    */\n   @VisibleForTesting\n-  public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile prevProfile)\n+  public void validateProfile(\n+      @Nonnull Profile updatedProfile, @Nullable Profile previousProfile, boolean userIsAdmin) {\n+\n+    final boolean isNewProfile = previousProfile == null;\n+    final Diff diff = javers.compare(previousProfile, updatedProfile);\n+\n+    validateProfileForCorrectness(updatedProfile, isNewProfile, diff);\n+\n+    if (userIsAdmin) {\n+      validateChangesAllowedByAdmin(diff);\n+    } else {\n+      validateChangesAllowedByUser(diff);\n+    }\n+  }\n+\n+  private void validateProfileForCorrectness(Profile profile, boolean isNewProfile, Diff diff)\n       throws BadRequestException {\n-    boolean isNewObject = prevProfile == null;\n-    Diff diff = javers.compare(prevProfile, updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"username\")) {\n+      validateUsername(profile);\n+    }\n+    if (isNewProfile || fieldChanged(diff, \"contactEmail\")) {\n+      validateContactEmail(profile);\n \n-    if (!getChangesWithPrefix(diff, \"username\").isEmpty() || isNewObject) {\n-      validateUsername(updatedProfile);\n+      // only validate if the new profile has an affiliation - some older users do not\n+      if (profile.getVerifiedInstitutionalAffiliation() != null) {\n+        validateInstitutionalAffiliationAgainstEmail(profile);\n+      }\n     }\n-    if (!getChangesWithPrefix(diff, \"contactEmail\").isEmpty() || isNewObject) {\n-      validateContactEmail(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"givenName\")) {\n+      validateGivenName(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"givenName\").isEmpty() || isNewObject) {\n-      validateGivenName(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"familyName\")) {\n+      validateFamilyName(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"familyName\").isEmpty() || isNewObject) {\n-      validateFamilyName(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"address\")) {\n+      validateAddress(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"address\").isEmpty() || isNewObject) {\n-      validateAddress(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"areaOfResearch\")) {\n+      validateAreaOfResearch(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"areaOfResearch\").isEmpty() || isNewObject) {\n-      validateAreaOfResearch(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"verifiedInstitutionalAffiliation\")) {\n+      validateInstitutionalAffiliation(profile);\n+    }\n+  }\n+\n+  private void validateChangesAllowedByUser(Diff diff) {\n+    if (fieldChanged(diff, \"username\")) {\n+      // See RW-1488.\n+      throw new BadRequestException(\"Changing username is not supported\");\n     }\n-    if (!getChangesWithPrefix(diff, \"verifiedInstitutionalAffiliation\").isEmpty() || isNewObject) {\n-      validateInstitutionalAffiliation(updatedProfile);\n+    if (fieldChanged(diff, \"contactEmail\")) {\n+      // See RW-1488.\n+      throw new BadRequestException(\"Changing contact email is not currently supported\");\n     }\n+    if (fieldChanged(diff, \"verifiedInstitutionalAffiliation\")) {\n+      throw new BadRequestException(\"Changing Verified Institutional Affiliation is not supported\");\n+    }\n+  }\n \n-    if (!isNewObject) {\n-      // We disallow changes in certain fields.\n-      if (!getChangesWithPrefix(diff, \"username\").isEmpty()) {\n-        // See RW-1488.\n-        throw new BadRequestException(\"Changing username is not supported\");\n-      }\n-      if (!getChangesWithPrefix(diff, \"contactEmail\").isEmpty()) {\n-        // See RW-1488.\n-        throw new BadRequestException(\"Changing contact email is not currently supported\");\n-      }\n+  private void validateChangesAllowedByAdmin(Diff diff) {\n+    if (fieldChanged(diff, \"username\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE5Mjc2Mg=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NTA0OA==", "bodyText": "Looks like we don't use readOnly properties at all.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r460145048", "createdAt": "2020-07-24T16:01:27Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -381,47 +415,73 @@ private void validateAreaOfResearch(Profile profile) throws BadRequestException\n    * object.\n    *\n    * @param updatedProfile\n-   * @param prevProfile\n+   * @param previousProfile\n    * @throws BadRequestException\n    */\n   @VisibleForTesting\n-  public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile prevProfile)\n+  public void validateProfile(\n+      @Nonnull Profile updatedProfile, @Nullable Profile previousProfile, boolean userIsAdmin) {\n+\n+    final boolean isNewProfile = previousProfile == null;\n+    final Diff diff = javers.compare(previousProfile, updatedProfile);\n+\n+    validateProfileForCorrectness(updatedProfile, isNewProfile, diff);\n+\n+    if (userIsAdmin) {\n+      validateChangesAllowedByAdmin(diff);\n+    } else {\n+      validateChangesAllowedByUser(diff);\n+    }\n+  }\n+\n+  private void validateProfileForCorrectness(Profile profile, boolean isNewProfile, Diff diff)\n       throws BadRequestException {\n-    boolean isNewObject = prevProfile == null;\n-    Diff diff = javers.compare(prevProfile, updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"username\")) {\n+      validateUsername(profile);\n+    }\n+    if (isNewProfile || fieldChanged(diff, \"contactEmail\")) {\n+      validateContactEmail(profile);\n \n-    if (!getChangesWithPrefix(diff, \"username\").isEmpty() || isNewObject) {\n-      validateUsername(updatedProfile);\n+      // only validate if the new profile has an affiliation - some older users do not\n+      if (profile.getVerifiedInstitutionalAffiliation() != null) {\n+        validateInstitutionalAffiliationAgainstEmail(profile);\n+      }\n     }\n-    if (!getChangesWithPrefix(diff, \"contactEmail\").isEmpty() || isNewObject) {\n-      validateContactEmail(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"givenName\")) {\n+      validateGivenName(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"givenName\").isEmpty() || isNewObject) {\n-      validateGivenName(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"familyName\")) {\n+      validateFamilyName(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"familyName\").isEmpty() || isNewObject) {\n-      validateFamilyName(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"address\")) {\n+      validateAddress(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"address\").isEmpty() || isNewObject) {\n-      validateAddress(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"areaOfResearch\")) {\n+      validateAreaOfResearch(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"areaOfResearch\").isEmpty() || isNewObject) {\n-      validateAreaOfResearch(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"verifiedInstitutionalAffiliation\")) {\n+      validateInstitutionalAffiliation(profile);\n+    }\n+  }\n+\n+  private void validateChangesAllowedByUser(Diff diff) {\n+    if (fieldChanged(diff, \"username\")) {\n+      // See RW-1488.\n+      throw new BadRequestException(\"Changing username is not supported\");\n     }\n-    if (!getChangesWithPrefix(diff, \"verifiedInstitutionalAffiliation\").isEmpty() || isNewObject) {\n-      validateInstitutionalAffiliation(updatedProfile);\n+    if (fieldChanged(diff, \"contactEmail\")) {\n+      // See RW-1488.\n+      throw new BadRequestException(\"Changing contact email is not currently supported\");\n     }\n+    if (fieldChanged(diff, \"verifiedInstitutionalAffiliation\")) {\n+      throw new BadRequestException(\"Changing Verified Institutional Affiliation is not supported\");\n+    }\n+  }\n \n-    if (!isNewObject) {\n-      // We disallow changes in certain fields.\n-      if (!getChangesWithPrefix(diff, \"username\").isEmpty()) {\n-        // See RW-1488.\n-        throw new BadRequestException(\"Changing username is not supported\");\n-      }\n-      if (!getChangesWithPrefix(diff, \"contactEmail\").isEmpty()) {\n-        // See RW-1488.\n-        throw new BadRequestException(\"Changing contact email is not currently supported\");\n-      }\n+  private void validateChangesAllowedByAdmin(Diff diff) {\n+    if (fieldChanged(diff, \"username\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE5Mjc2Mg=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5NTQ1NA==", "bodyText": "I don't believe that's by policy, it's just that we haven't yet. I have it on a branch someplace, but that didn't go in for other reasons.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r460895454", "createdAt": "2020-07-27T13:38:14Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -381,47 +415,73 @@ private void validateAreaOfResearch(Profile profile) throws BadRequestException\n    * object.\n    *\n    * @param updatedProfile\n-   * @param prevProfile\n+   * @param previousProfile\n    * @throws BadRequestException\n    */\n   @VisibleForTesting\n-  public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile prevProfile)\n+  public void validateProfile(\n+      @Nonnull Profile updatedProfile, @Nullable Profile previousProfile, boolean userIsAdmin) {\n+\n+    final boolean isNewProfile = previousProfile == null;\n+    final Diff diff = javers.compare(previousProfile, updatedProfile);\n+\n+    validateProfileForCorrectness(updatedProfile, isNewProfile, diff);\n+\n+    if (userIsAdmin) {\n+      validateChangesAllowedByAdmin(diff);\n+    } else {\n+      validateChangesAllowedByUser(diff);\n+    }\n+  }\n+\n+  private void validateProfileForCorrectness(Profile profile, boolean isNewProfile, Diff diff)\n       throws BadRequestException {\n-    boolean isNewObject = prevProfile == null;\n-    Diff diff = javers.compare(prevProfile, updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"username\")) {\n+      validateUsername(profile);\n+    }\n+    if (isNewProfile || fieldChanged(diff, \"contactEmail\")) {\n+      validateContactEmail(profile);\n \n-    if (!getChangesWithPrefix(diff, \"username\").isEmpty() || isNewObject) {\n-      validateUsername(updatedProfile);\n+      // only validate if the new profile has an affiliation - some older users do not\n+      if (profile.getVerifiedInstitutionalAffiliation() != null) {\n+        validateInstitutionalAffiliationAgainstEmail(profile);\n+      }\n     }\n-    if (!getChangesWithPrefix(diff, \"contactEmail\").isEmpty() || isNewObject) {\n-      validateContactEmail(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"givenName\")) {\n+      validateGivenName(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"givenName\").isEmpty() || isNewObject) {\n-      validateGivenName(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"familyName\")) {\n+      validateFamilyName(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"familyName\").isEmpty() || isNewObject) {\n-      validateFamilyName(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"address\")) {\n+      validateAddress(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"address\").isEmpty() || isNewObject) {\n-      validateAddress(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"areaOfResearch\")) {\n+      validateAreaOfResearch(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"areaOfResearch\").isEmpty() || isNewObject) {\n-      validateAreaOfResearch(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"verifiedInstitutionalAffiliation\")) {\n+      validateInstitutionalAffiliation(profile);\n+    }\n+  }\n+\n+  private void validateChangesAllowedByUser(Diff diff) {\n+    if (fieldChanged(diff, \"username\")) {\n+      // See RW-1488.\n+      throw new BadRequestException(\"Changing username is not supported\");\n     }\n-    if (!getChangesWithPrefix(diff, \"verifiedInstitutionalAffiliation\").isEmpty() || isNewObject) {\n-      validateInstitutionalAffiliation(updatedProfile);\n+    if (fieldChanged(diff, \"contactEmail\")) {\n+      // See RW-1488.\n+      throw new BadRequestException(\"Changing contact email is not currently supported\");\n     }\n+    if (fieldChanged(diff, \"verifiedInstitutionalAffiliation\")) {\n+      throw new BadRequestException(\"Changing Verified Institutional Affiliation is not supported\");\n+    }\n+  }\n \n-    if (!isNewObject) {\n-      // We disallow changes in certain fields.\n-      if (!getChangesWithPrefix(diff, \"username\").isEmpty()) {\n-        // See RW-1488.\n-        throw new BadRequestException(\"Changing username is not supported\");\n-      }\n-      if (!getChangesWithPrefix(diff, \"contactEmail\").isEmpty()) {\n-        // See RW-1488.\n-        throw new BadRequestException(\"Changing contact email is not currently supported\");\n-      }\n+  private void validateChangesAllowedByAdmin(Diff diff) {\n+    if (fieldChanged(diff, \"username\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE5Mjc2Mg=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3NjYzMg==", "bodyText": "I tried this out and it didn't seem do anything.  It didn't remove the generated Profile.setUsername() or even prevent us from calling it - which we do, by the way: ProfileService.java:261\nIt also doesn't seem to hurt anything, so we could add it to mark our intention.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r461976632", "createdAt": "2020-07-29T00:57:24Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -381,47 +415,73 @@ private void validateAreaOfResearch(Profile profile) throws BadRequestException\n    * object.\n    *\n    * @param updatedProfile\n-   * @param prevProfile\n+   * @param previousProfile\n    * @throws BadRequestException\n    */\n   @VisibleForTesting\n-  public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile prevProfile)\n+  public void validateProfile(\n+      @Nonnull Profile updatedProfile, @Nullable Profile previousProfile, boolean userIsAdmin) {\n+\n+    final boolean isNewProfile = previousProfile == null;\n+    final Diff diff = javers.compare(previousProfile, updatedProfile);\n+\n+    validateProfileForCorrectness(updatedProfile, isNewProfile, diff);\n+\n+    if (userIsAdmin) {\n+      validateChangesAllowedByAdmin(diff);\n+    } else {\n+      validateChangesAllowedByUser(diff);\n+    }\n+  }\n+\n+  private void validateProfileForCorrectness(Profile profile, boolean isNewProfile, Diff diff)\n       throws BadRequestException {\n-    boolean isNewObject = prevProfile == null;\n-    Diff diff = javers.compare(prevProfile, updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"username\")) {\n+      validateUsername(profile);\n+    }\n+    if (isNewProfile || fieldChanged(diff, \"contactEmail\")) {\n+      validateContactEmail(profile);\n \n-    if (!getChangesWithPrefix(diff, \"username\").isEmpty() || isNewObject) {\n-      validateUsername(updatedProfile);\n+      // only validate if the new profile has an affiliation - some older users do not\n+      if (profile.getVerifiedInstitutionalAffiliation() != null) {\n+        validateInstitutionalAffiliationAgainstEmail(profile);\n+      }\n     }\n-    if (!getChangesWithPrefix(diff, \"contactEmail\").isEmpty() || isNewObject) {\n-      validateContactEmail(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"givenName\")) {\n+      validateGivenName(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"givenName\").isEmpty() || isNewObject) {\n-      validateGivenName(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"familyName\")) {\n+      validateFamilyName(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"familyName\").isEmpty() || isNewObject) {\n-      validateFamilyName(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"address\")) {\n+      validateAddress(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"address\").isEmpty() || isNewObject) {\n-      validateAddress(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"areaOfResearch\")) {\n+      validateAreaOfResearch(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"areaOfResearch\").isEmpty() || isNewObject) {\n-      validateAreaOfResearch(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"verifiedInstitutionalAffiliation\")) {\n+      validateInstitutionalAffiliation(profile);\n+    }\n+  }\n+\n+  private void validateChangesAllowedByUser(Diff diff) {\n+    if (fieldChanged(diff, \"username\")) {\n+      // See RW-1488.\n+      throw new BadRequestException(\"Changing username is not supported\");\n     }\n-    if (!getChangesWithPrefix(diff, \"verifiedInstitutionalAffiliation\").isEmpty() || isNewObject) {\n-      validateInstitutionalAffiliation(updatedProfile);\n+    if (fieldChanged(diff, \"contactEmail\")) {\n+      // See RW-1488.\n+      throw new BadRequestException(\"Changing contact email is not currently supported\");\n     }\n+    if (fieldChanged(diff, \"verifiedInstitutionalAffiliation\")) {\n+      throw new BadRequestException(\"Changing Verified Institutional Affiliation is not supported\");\n+    }\n+  }\n \n-    if (!isNewObject) {\n-      // We disallow changes in certain fields.\n-      if (!getChangesWithPrefix(diff, \"username\").isEmpty()) {\n-        // See RW-1488.\n-        throw new BadRequestException(\"Changing username is not supported\");\n-      }\n-      if (!getChangesWithPrefix(diff, \"contactEmail\").isEmpty()) {\n-        // See RW-1488.\n-        throw new BadRequestException(\"Changing contact email is not currently supported\");\n-      }\n+  private void validateChangesAllowedByAdmin(Diff diff) {\n+    if (fieldChanged(diff, \"username\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE5Mjc2Mg=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1OTU4OQ==", "bodyText": "I want to say something gets checked in the generated controller code. You'd have to try to set it to see what happens.  I dont' recall if it sets the readonly attribute in the client class or not.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r462359589", "createdAt": "2020-07-29T14:49:48Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -381,47 +415,73 @@ private void validateAreaOfResearch(Profile profile) throws BadRequestException\n    * object.\n    *\n    * @param updatedProfile\n-   * @param prevProfile\n+   * @param previousProfile\n    * @throws BadRequestException\n    */\n   @VisibleForTesting\n-  public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile prevProfile)\n+  public void validateProfile(\n+      @Nonnull Profile updatedProfile, @Nullable Profile previousProfile, boolean userIsAdmin) {\n+\n+    final boolean isNewProfile = previousProfile == null;\n+    final Diff diff = javers.compare(previousProfile, updatedProfile);\n+\n+    validateProfileForCorrectness(updatedProfile, isNewProfile, diff);\n+\n+    if (userIsAdmin) {\n+      validateChangesAllowedByAdmin(diff);\n+    } else {\n+      validateChangesAllowedByUser(diff);\n+    }\n+  }\n+\n+  private void validateProfileForCorrectness(Profile profile, boolean isNewProfile, Diff diff)\n       throws BadRequestException {\n-    boolean isNewObject = prevProfile == null;\n-    Diff diff = javers.compare(prevProfile, updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"username\")) {\n+      validateUsername(profile);\n+    }\n+    if (isNewProfile || fieldChanged(diff, \"contactEmail\")) {\n+      validateContactEmail(profile);\n \n-    if (!getChangesWithPrefix(diff, \"username\").isEmpty() || isNewObject) {\n-      validateUsername(updatedProfile);\n+      // only validate if the new profile has an affiliation - some older users do not\n+      if (profile.getVerifiedInstitutionalAffiliation() != null) {\n+        validateInstitutionalAffiliationAgainstEmail(profile);\n+      }\n     }\n-    if (!getChangesWithPrefix(diff, \"contactEmail\").isEmpty() || isNewObject) {\n-      validateContactEmail(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"givenName\")) {\n+      validateGivenName(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"givenName\").isEmpty() || isNewObject) {\n-      validateGivenName(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"familyName\")) {\n+      validateFamilyName(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"familyName\").isEmpty() || isNewObject) {\n-      validateFamilyName(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"address\")) {\n+      validateAddress(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"address\").isEmpty() || isNewObject) {\n-      validateAddress(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"areaOfResearch\")) {\n+      validateAreaOfResearch(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"areaOfResearch\").isEmpty() || isNewObject) {\n-      validateAreaOfResearch(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"verifiedInstitutionalAffiliation\")) {\n+      validateInstitutionalAffiliation(profile);\n+    }\n+  }\n+\n+  private void validateChangesAllowedByUser(Diff diff) {\n+    if (fieldChanged(diff, \"username\")) {\n+      // See RW-1488.\n+      throw new BadRequestException(\"Changing username is not supported\");\n     }\n-    if (!getChangesWithPrefix(diff, \"verifiedInstitutionalAffiliation\").isEmpty() || isNewObject) {\n-      validateInstitutionalAffiliation(updatedProfile);\n+    if (fieldChanged(diff, \"contactEmail\")) {\n+      // See RW-1488.\n+      throw new BadRequestException(\"Changing contact email is not currently supported\");\n     }\n+    if (fieldChanged(diff, \"verifiedInstitutionalAffiliation\")) {\n+      throw new BadRequestException(\"Changing Verified Institutional Affiliation is not supported\");\n+    }\n+  }\n \n-    if (!isNewObject) {\n-      // We disallow changes in certain fields.\n-      if (!getChangesWithPrefix(diff, \"username\").isEmpty()) {\n-        // See RW-1488.\n-        throw new BadRequestException(\"Changing username is not supported\");\n-      }\n-      if (!getChangesWithPrefix(diff, \"contactEmail\").isEmpty()) {\n-        // See RW-1488.\n-        throw new BadRequestException(\"Changing contact email is not currently supported\");\n-      }\n+  private void validateChangesAllowedByAdmin(Diff diff) {\n+    if (fieldChanged(diff, \"username\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE5Mjc2Mg=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTI4MjgyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNTozOTo1N1rOG0-D9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNTozOTo1N1rOG0-D9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE5NTk1OQ==", "bodyText": "I'd make a Diffs utility class and add this as a public static <T> Diff fromNewObject(T object).", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458195959", "createdAt": "2020-07-21T15:39:57Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -432,10 +492,48 @@ public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile p\n    * @throws BadRequestException\n    */\n   public void validateNewProfile(Profile profile) throws BadRequestException {\n-    validateProfile(profile, null);\n+    // unused, but this is the correct syntax for a \"Diff\" of a new object\n+    final Diff dummyDiff = javers.compare(null, profile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTQ2NDI3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjoyMToyNlrOG0_2mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMTo1ODoyNlrOG2-1Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyNTMwNg==", "bodyText": "I thought the Diff object would have already done this comparison.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458225306", "createdAt": "2020-07-21T16:21:26Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -432,10 +492,48 @@ public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile p\n    * @throws BadRequestException\n    */\n   public void validateNewProfile(Profile profile) throws BadRequestException {\n-    validateProfile(profile, null);\n+    // unused, but this is the correct syntax for a \"Diff\" of a new object\n+    final Diff dummyDiff = javers.compare(null, profile);\n+    validateProfileForCorrectness(profile, true, dummyDiff);\n   }\n \n   public List<Profile> listAllProfiles() {\n     return userService.getAllUsers().stream().map(this::getProfile).collect(Collectors.toList());\n   }\n+\n+  /**\n+   * Updates the user metadata referenced by the fields of EditUserInformationRequest.\n+   *\n+   * @param request the fields to update. Fields left null here will not be updated. Contact Email\n+   *     and Verified Institutional Affiliation updates will trigger a check for affiliation\n+   *     validation.\n+   * @return the Profile of the user, after updates\n+   */\n+  public Profile editUserInformation(EditUserInformationRequest request) {\n+    final DbUser dbUser = userService.getByUsernameOrThrow(request.getUsername());\n+    final Profile originalProfile = getProfile(dbUser);\n+\n+    Optional.ofNullable(request.getFreeCreditsLimit())\n+        // only set override if it's different\n+        .filter(newLimit -> !newLimit.equals(originalProfile.getFreeTierDollarQuota()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3NzE2MA==", "bodyText": "this is a different code path than the diffs", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458977160", "createdAt": "2020-07-22T17:53:47Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -432,10 +492,48 @@ public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile p\n    * @throws BadRequestException\n    */\n   public void validateNewProfile(Profile profile) throws BadRequestException {\n-    validateProfile(profile, null);\n+    // unused, but this is the correct syntax for a \"Diff\" of a new object\n+    final Diff dummyDiff = javers.compare(null, profile);\n+    validateProfileForCorrectness(profile, true, dummyDiff);\n   }\n \n   public List<Profile> listAllProfiles() {\n     return userService.getAllUsers().stream().map(this::getProfile).collect(Collectors.toList());\n   }\n+\n+  /**\n+   * Updates the user metadata referenced by the fields of EditUserInformationRequest.\n+   *\n+   * @param request the fields to update. Fields left null here will not be updated. Contact Email\n+   *     and Verified Institutional Affiliation updates will trigger a check for affiliation\n+   *     validation.\n+   * @return the Profile of the user, after updates\n+   */\n+  public Profile editUserInformation(EditUserInformationRequest request) {\n+    final DbUser dbUser = userService.getByUsernameOrThrow(request.getUsername());\n+    final Profile originalProfile = getProfile(dbUser);\n+\n+    Optional.ofNullable(request.getFreeCreditsLimit())\n+        // only set override if it's different\n+        .filter(newLimit -> !newLimit.equals(originalProfile.getFreeTierDollarQuota()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyNTMwNg=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MDUwMQ==", "bodyText": "There is also a subtlety here which is a bit complicated and would probably benefit from a longer comment.  I'll work on that.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458980501", "createdAt": "2020-07-22T17:59:24Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -432,10 +492,48 @@ public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile p\n    * @throws BadRequestException\n    */\n   public void validateNewProfile(Profile profile) throws BadRequestException {\n-    validateProfile(profile, null);\n+    // unused, but this is the correct syntax for a \"Diff\" of a new object\n+    final Diff dummyDiff = javers.compare(null, profile);\n+    validateProfileForCorrectness(profile, true, dummyDiff);\n   }\n \n   public List<Profile> listAllProfiles() {\n     return userService.getAllUsers().stream().map(this::getProfile).collect(Collectors.toList());\n   }\n+\n+  /**\n+   * Updates the user metadata referenced by the fields of EditUserInformationRequest.\n+   *\n+   * @param request the fields to update. Fields left null here will not be updated. Contact Email\n+   *     and Verified Institutional Affiliation updates will trigger a check for affiliation\n+   *     validation.\n+   * @return the Profile of the user, after updates\n+   */\n+  public Profile editUserInformation(EditUserInformationRequest request) {\n+    final DbUser dbUser = userService.getByUsernameOrThrow(request.getUsername());\n+    final Profile originalProfile = getProfile(dbUser);\n+\n+    Optional.ofNullable(request.getFreeCreditsLimit())\n+        // only set override if it's different\n+        .filter(newLimit -> !newLimit.equals(originalProfile.getFreeTierDollarQuota()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyNTMwNg=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3NTQ5OQ==", "bodyText": "Can you compare with a tolerance (like $0.01) so that we're not affected by roundoff problems?", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459075499", "createdAt": "2020-07-22T20:51:23Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -432,10 +492,48 @@ public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile p\n    * @throws BadRequestException\n    */\n   public void validateNewProfile(Profile profile) throws BadRequestException {\n-    validateProfile(profile, null);\n+    // unused, but this is the correct syntax for a \"Diff\" of a new object\n+    final Diff dummyDiff = javers.compare(null, profile);\n+    validateProfileForCorrectness(profile, true, dummyDiff);\n   }\n \n   public List<Profile> listAllProfiles() {\n     return userService.getAllUsers().stream().map(this::getProfile).collect(Collectors.toList());\n   }\n+\n+  /**\n+   * Updates the user metadata referenced by the fields of EditUserInformationRequest.\n+   *\n+   * @param request the fields to update. Fields left null here will not be updated. Contact Email\n+   *     and Verified Institutional Affiliation updates will trigger a check for affiliation\n+   *     validation.\n+   * @return the Profile of the user, after updates\n+   */\n+  public Profile editUserInformation(EditUserInformationRequest request) {\n+    final DbUser dbUser = userService.getByUsernameOrThrow(request.getUsername());\n+    final Profile originalProfile = getProfile(dbUser);\n+\n+    Optional.ofNullable(request.getFreeCreditsLimit())\n+        // only set override if it's different\n+        .filter(newLimit -> !newLimit.equals(originalProfile.getFreeTierDollarQuota()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyNTMwNg=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMwNTcyMg==", "bodyText": "OK.  The comment I am referring to is now the Javadoc for the method FreeTierBillingService.maybeSetDollarLimitOverride()\nand it does now check vs a tolerance", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r460305722", "createdAt": "2020-07-24T21:58:26Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -432,10 +492,48 @@ public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile p\n    * @throws BadRequestException\n    */\n   public void validateNewProfile(Profile profile) throws BadRequestException {\n-    validateProfile(profile, null);\n+    // unused, but this is the correct syntax for a \"Diff\" of a new object\n+    final Diff dummyDiff = javers.compare(null, profile);\n+    validateProfileForCorrectness(profile, true, dummyDiff);\n   }\n \n   public List<Profile> listAllProfiles() {\n     return userService.getAllUsers().stream().map(this::getProfile).collect(Collectors.toList());\n   }\n+\n+  /**\n+   * Updates the user metadata referenced by the fields of EditUserInformationRequest.\n+   *\n+   * @param request the fields to update. Fields left null here will not be updated. Contact Email\n+   *     and Verified Institutional Affiliation updates will trigger a check for affiliation\n+   *     validation.\n+   * @return the Profile of the user, after updates\n+   */\n+  public Profile editUserInformation(EditUserInformationRequest request) {\n+    final DbUser dbUser = userService.getByUsernameOrThrow(request.getUsername());\n+    final Profile originalProfile = getProfile(dbUser);\n+\n+    Optional.ofNullable(request.getFreeCreditsLimit())\n+        // only set override if it's different\n+        .filter(newLimit -> !newLimit.equals(originalProfile.getFreeTierDollarQuota()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyNTMwNg=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTQ4NjAyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjoyNjozOVrOG1AEGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDo1Mjo0N1rOG1zyUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyODc2Mw==", "bodyText": "If codegen is initializing your list variables to null, that's a bummer. It looks like it's inconsistent somehow on that.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458228763", "createdAt": "2020-07-21T16:26:39Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -432,10 +492,48 @@ public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile p\n    * @throws BadRequestException\n    */\n   public void validateNewProfile(Profile profile) throws BadRequestException {\n-    validateProfile(profile, null);\n+    // unused, but this is the correct syntax for a \"Diff\" of a new object\n+    final Diff dummyDiff = javers.compare(null, profile);\n+    validateProfileForCorrectness(profile, true, dummyDiff);\n   }\n \n   public List<Profile> listAllProfiles() {\n     return userService.getAllUsers().stream().map(this::getProfile).collect(Collectors.toList());\n   }\n+\n+  /**\n+   * Updates the user metadata referenced by the fields of EditUserInformationRequest.\n+   *\n+   * @param request the fields to update. Fields left null here will not be updated. Contact Email\n+   *     and Verified Institutional Affiliation updates will trigger a check for affiliation\n+   *     validation.\n+   * @return the Profile of the user, after updates\n+   */\n+  public Profile editUserInformation(EditUserInformationRequest request) {\n+    final DbUser dbUser = userService.getByUsernameOrThrow(request.getUsername());\n+    final Profile originalProfile = getProfile(dbUser);\n+\n+    Optional.ofNullable(request.getFreeCreditsLimit())\n+        // only set override if it's different\n+        .filter(newLimit -> !newLimit.equals(originalProfile.getFreeTierDollarQuota()))\n+        .ifPresent(\n+            freeCreditsLimit ->\n+                freeTierBillingService.setFreeTierDollarOverride(dbUser, freeCreditsLimit));\n+\n+    Optional.ofNullable(request.getAccessBypassRequests())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA1NjQ5Ng==", "bodyText": "it's not a required field in the JSON.  I can make it one, since an empty list has the same semantics as no list here.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459056496", "createdAt": "2020-07-22T20:15:13Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -432,10 +492,48 @@ public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile p\n    * @throws BadRequestException\n    */\n   public void validateNewProfile(Profile profile) throws BadRequestException {\n-    validateProfile(profile, null);\n+    // unused, but this is the correct syntax for a \"Diff\" of a new object\n+    final Diff dummyDiff = javers.compare(null, profile);\n+    validateProfileForCorrectness(profile, true, dummyDiff);\n   }\n \n   public List<Profile> listAllProfiles() {\n     return userService.getAllUsers().stream().map(this::getProfile).collect(Collectors.toList());\n   }\n+\n+  /**\n+   * Updates the user metadata referenced by the fields of EditUserInformationRequest.\n+   *\n+   * @param request the fields to update. Fields left null here will not be updated. Contact Email\n+   *     and Verified Institutional Affiliation updates will trigger a check for affiliation\n+   *     validation.\n+   * @return the Profile of the user, after updates\n+   */\n+  public Profile editUserInformation(EditUserInformationRequest request) {\n+    final DbUser dbUser = userService.getByUsernameOrThrow(request.getUsername());\n+    final Profile originalProfile = getProfile(dbUser);\n+\n+    Optional.ofNullable(request.getFreeCreditsLimit())\n+        // only set override if it's different\n+        .filter(newLimit -> !newLimit.equals(originalProfile.getFreeTierDollarQuota()))\n+        .ifPresent(\n+            freeCreditsLimit ->\n+                freeTierBillingService.setFreeTierDollarOverride(dbUser, freeCreditsLimit));\n+\n+    Optional.ofNullable(request.getAccessBypassRequests())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyODc2Mw=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3NjE3Ng==", "bodyText": "\ud83d\udca5  null should be deprecated along with if.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459076176", "createdAt": "2020-07-22T20:52:47Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -432,10 +492,48 @@ public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile p\n    * @throws BadRequestException\n    */\n   public void validateNewProfile(Profile profile) throws BadRequestException {\n-    validateProfile(profile, null);\n+    // unused, but this is the correct syntax for a \"Diff\" of a new object\n+    final Diff dummyDiff = javers.compare(null, profile);\n+    validateProfileForCorrectness(profile, true, dummyDiff);\n   }\n \n   public List<Profile> listAllProfiles() {\n     return userService.getAllUsers().stream().map(this::getProfile).collect(Collectors.toList());\n   }\n+\n+  /**\n+   * Updates the user metadata referenced by the fields of EditUserInformationRequest.\n+   *\n+   * @param request the fields to update. Fields left null here will not be updated. Contact Email\n+   *     and Verified Institutional Affiliation updates will trigger a check for affiliation\n+   *     validation.\n+   * @return the Profile of the user, after updates\n+   */\n+  public Profile editUserInformation(EditUserInformationRequest request) {\n+    final DbUser dbUser = userService.getByUsernameOrThrow(request.getUsername());\n+    final Profile originalProfile = getProfile(dbUser);\n+\n+    Optional.ofNullable(request.getFreeCreditsLimit())\n+        // only set override if it's different\n+        .filter(newLimit -> !newLimit.equals(originalProfile.getFreeTierDollarQuota()))\n+        .ifPresent(\n+            freeCreditsLimit ->\n+                freeTierBillingService.setFreeTierDollarOverride(dbUser, freeCreditsLimit));\n+\n+    Optional.ofNullable(request.getAccessBypassRequests())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyODc2Mw=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTQ5MDI3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjoyNzo0NFrOG1AGxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjoyNzo0NFrOG1AGxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyOTQ0NA==", "bodyText": "[aside] In Java 9 this gets prettier with Optional.stream(). https://www.geeksforgeeks.org/optional-stream-method-in-java-with-examples/", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458229444", "createdAt": "2020-07-21T16:27:44Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -432,10 +492,48 @@ public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile p\n    * @throws BadRequestException\n    */\n   public void validateNewProfile(Profile profile) throws BadRequestException {\n-    validateProfile(profile, null);\n+    // unused, but this is the correct syntax for a \"Diff\" of a new object\n+    final Diff dummyDiff = javers.compare(null, profile);\n+    validateProfileForCorrectness(profile, true, dummyDiff);\n   }\n \n   public List<Profile> listAllProfiles() {\n     return userService.getAllUsers().stream().map(this::getProfile).collect(Collectors.toList());\n   }\n+\n+  /**\n+   * Updates the user metadata referenced by the fields of EditUserInformationRequest.\n+   *\n+   * @param request the fields to update. Fields left null here will not be updated. Contact Email\n+   *     and Verified Institutional Affiliation updates will trigger a check for affiliation\n+   *     validation.\n+   * @return the Profile of the user, after updates\n+   */\n+  public Profile editUserInformation(EditUserInformationRequest request) {\n+    final DbUser dbUser = userService.getByUsernameOrThrow(request.getUsername());\n+    final Profile originalProfile = getProfile(dbUser);\n+\n+    Optional.ofNullable(request.getFreeCreditsLimit())\n+        // only set override if it's different\n+        .filter(newLimit -> !newLimit.equals(originalProfile.getFreeTierDollarQuota()))\n+        .ifPresent(\n+            freeCreditsLimit ->\n+                freeTierBillingService.setFreeTierDollarOverride(dbUser, freeCreditsLimit));\n+\n+    Optional.ofNullable(request.getAccessBypassRequests())\n+        .ifPresent(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTQ5NzE3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjoyOTozN1rOG1ALYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoyMToxN1rOG1yx5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzMDYyNQ==", "bodyText": "Consider guarding against empty strings as well, e.g. with Strings.isNullOrEmpty().", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458230625", "createdAt": "2020-07-21T16:29:37Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -432,10 +492,48 @@ public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile p\n    * @throws BadRequestException\n    */\n   public void validateNewProfile(Profile profile) throws BadRequestException {\n-    validateProfile(profile, null);\n+    // unused, but this is the correct syntax for a \"Diff\" of a new object\n+    final Diff dummyDiff = javers.compare(null, profile);\n+    validateProfileForCorrectness(profile, true, dummyDiff);\n   }\n \n   public List<Profile> listAllProfiles() {\n     return userService.getAllUsers().stream().map(this::getProfile).collect(Collectors.toList());\n   }\n+\n+  /**\n+   * Updates the user metadata referenced by the fields of EditUserInformationRequest.\n+   *\n+   * @param request the fields to update. Fields left null here will not be updated. Contact Email\n+   *     and Verified Institutional Affiliation updates will trigger a check for affiliation\n+   *     validation.\n+   * @return the Profile of the user, after updates\n+   */\n+  public Profile editUserInformation(EditUserInformationRequest request) {\n+    final DbUser dbUser = userService.getByUsernameOrThrow(request.getUsername());\n+    final Profile originalProfile = getProfile(dbUser);\n+\n+    Optional.ofNullable(request.getFreeCreditsLimit())\n+        // only set override if it's different\n+        .filter(newLimit -> !newLimit.equals(originalProfile.getFreeTierDollarQuota()))\n+        .ifPresent(\n+            freeCreditsLimit ->\n+                freeTierBillingService.setFreeTierDollarOverride(dbUser, freeCreditsLimit));\n+\n+    Optional.ofNullable(request.getAccessBypassRequests())\n+        .ifPresent(\n+            requests ->\n+                requests.forEach(\n+                    bypass -> userService.updateBypassTime(dbUser.getUserId(), bypass)));\n+\n+    // refetch from the DB\n+    Profile updatedProfile = getProfile(userService.getByUsernameOrThrow(request.getUsername()));\n+    Optional.ofNullable(request.getContactEmail()).ifPresent(updatedProfile::setContactEmail);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA1OTY4NQ==", "bodyText": "this will get caught by validateContactEmail()", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459059685", "createdAt": "2020-07-22T20:21:17Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -432,10 +492,48 @@ public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile p\n    * @throws BadRequestException\n    */\n   public void validateNewProfile(Profile profile) throws BadRequestException {\n-    validateProfile(profile, null);\n+    // unused, but this is the correct syntax for a \"Diff\" of a new object\n+    final Diff dummyDiff = javers.compare(null, profile);\n+    validateProfileForCorrectness(profile, true, dummyDiff);\n   }\n \n   public List<Profile> listAllProfiles() {\n     return userService.getAllUsers().stream().map(this::getProfile).collect(Collectors.toList());\n   }\n+\n+  /**\n+   * Updates the user metadata referenced by the fields of EditUserInformationRequest.\n+   *\n+   * @param request the fields to update. Fields left null here will not be updated. Contact Email\n+   *     and Verified Institutional Affiliation updates will trigger a check for affiliation\n+   *     validation.\n+   * @return the Profile of the user, after updates\n+   */\n+  public Profile editUserInformation(EditUserInformationRequest request) {\n+    final DbUser dbUser = userService.getByUsernameOrThrow(request.getUsername());\n+    final Profile originalProfile = getProfile(dbUser);\n+\n+    Optional.ofNullable(request.getFreeCreditsLimit())\n+        // only set override if it's different\n+        .filter(newLimit -> !newLimit.equals(originalProfile.getFreeTierDollarQuota()))\n+        .ifPresent(\n+            freeCreditsLimit ->\n+                freeTierBillingService.setFreeTierDollarOverride(dbUser, freeCreditsLimit));\n+\n+    Optional.ofNullable(request.getAccessBypassRequests())\n+        .ifPresent(\n+            requests ->\n+                requests.forEach(\n+                    bypass -> userService.updateBypassTime(dbUser.getUserId(), bypass)));\n+\n+    // refetch from the DB\n+    Profile updatedProfile = getProfile(userService.getByUsernameOrThrow(request.getUsername()));\n+    Optional.ofNullable(request.getContactEmail()).ifPresent(updatedProfile::setContactEmail);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzMDYyNQ=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTUwMzYxOnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/workbench-api.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjozMToxNVrOG1APlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjozMToxNVrOG1APlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzMTcwMA==", "bodyText": "[aside] Would it be clearer to call this UpdateAccount? In other words, move slowly toward a model an account is the admin-owned thing, and a profile is the user-owned portion (at least in the api).", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458231700", "createdAt": "2020-07-21T16:31:15Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7787,3 +7814,29 @@ definitions:\n           timestamp (epoch millis) at workspace creation\n         type: integer\n         format: int64\n+  EditUserInformationRequest:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTUxMTc2OnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/workbench-api.yaml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjozMzoyNFrOG1AU4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjowOToyN1rOG21Tmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzMzA1Nw==", "bodyText": "I suspect there could be pushback to using a different request type here. I've gotten feedback before that we prefer to use the same payload object for create and update, though I understand the rationale. I believe @calbach had an opinion here, at least in the case of workspaces.\nBut if we have different logical resources for account and profile (for example), then there's more granularity.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458233057", "createdAt": "2020-07-21T16:33:24Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7787,3 +7814,29 @@ definitions:\n           timestamp (epoch millis) at workspace creation\n         type: integer\n         format: int64\n+  EditUserInformationRequest:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0OTY1OA==", "bodyText": "Profile would be overkill here, and much more difficult to get right.  (That was the main difficulty of a previous iteration of this work.)  This fits the semantics of what we're trying to do here.  I have updated the name to reference the Account concept, per other comments.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r460149658", "createdAt": "2020-07-24T16:09:27Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7787,3 +7814,29 @@ definitions:\n           timestamp (epoch millis) at workspace creation\n         type: integer\n         format: int64\n+  EditUserInformationRequest:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzMzA1Nw=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTUyMTE3OnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/workbench-api.yaml", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjozNTo1MlrOG1AbEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTozMDoyOVrOG4-DLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzNDY0MA==", "bodyText": "If these two fields need to be set together, I'd define a little object with just these two fields that gets updated atomically. Call it UserDomainInfo or something. That way the error handling is more transactional, in that you fail to apply either unless both agree.\nYou could get fancier by having flags to indicate no change vs delete or just require  both to  match exactly.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458234640", "createdAt": "2020-07-21T16:35:52Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7787,3 +7814,29 @@ definitions:\n           timestamp (epoch millis) at workspace creation\n         type: integer\n         format: int64\n+  EditUserInformationRequest:\n+    description: >\n+      A group of changes an admin can make to a user in the Edit Information card of the individual-user admin page.\n+      Updates to the contact email or the institutional affiliation will be rejected if they do not validate.\n+    type: object\n+    required:\n+      - username\n+    properties:\n+      username:\n+        description: The full system-assigned ID of a user, including email domain\n+        type: string\n+      freeCreditsLimit:\n+        description: When set, overrides the default free credits dollar limit for this user.\n+        type: number\n+        format: double\n+      contactEmail:\n+        description: When set, replaces the user's contact email.  Must validate against the user's Institutional Affiliation, if one exists.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NDYxMg==", "bodyText": "They don't need to be set together - either can validate against the previous-profile value if the other is unset here", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459064612", "createdAt": "2020-07-22T20:30:48Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7787,3 +7814,29 @@ definitions:\n           timestamp (epoch millis) at workspace creation\n         type: integer\n         format: int64\n+  EditUserInformationRequest:\n+    description: >\n+      A group of changes an admin can make to a user in the Edit Information card of the individual-user admin page.\n+      Updates to the contact email or the institutional affiliation will be rejected if they do not validate.\n+    type: object\n+    required:\n+      - username\n+    properties:\n+      username:\n+        description: The full system-assigned ID of a user, including email domain\n+        type: string\n+      freeCreditsLimit:\n+        description: When set, overrides the default free credits dollar limit for this user.\n+        type: number\n+        format: double\n+      contactEmail:\n+        description: When set, replaces the user's contact email.  Must validate against the user's Institutional Affiliation, if one exists.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzNDY0MA=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5NjMzNQ==", "bodyText": "But now there's an order dependence: you can't change one without changing the other if there's a new domain and a new institution, right?\nAlso, I'm really surprised no one has asked for separate contact emails and institutional emails yet.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r460896335", "createdAt": "2020-07-27T13:39:36Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7787,3 +7814,29 @@ definitions:\n           timestamp (epoch millis) at workspace creation\n         type: integer\n         format: int64\n+  EditUserInformationRequest:\n+    description: >\n+      A group of changes an admin can make to a user in the Edit Information card of the individual-user admin page.\n+      Updates to the contact email or the institutional affiliation will be rejected if they do not validate.\n+    type: object\n+    required:\n+      - username\n+    properties:\n+      username:\n+        description: The full system-assigned ID of a user, including email domain\n+        type: string\n+      freeCreditsLimit:\n+        description: When set, overrides the default free credits dollar limit for this user.\n+        type: number\n+        format: double\n+      contactEmail:\n+        description: When set, replaces the user's contact email.  Must validate against the user's Institutional Affiliation, if one exists.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzNDY0MA=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5OTg2Nw==", "bodyText": "Not necessarily - a contact email could potentially be valid for more than one institution.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r461199867", "createdAt": "2020-07-27T22:11:20Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7787,3 +7814,29 @@ definitions:\n           timestamp (epoch millis) at workspace creation\n         type: integer\n         format: int64\n+  EditUserInformationRequest:\n+    description: >\n+      A group of changes an admin can make to a user in the Edit Information card of the individual-user admin page.\n+      Updates to the contact email or the institutional affiliation will be rejected if they do not validate.\n+    type: object\n+    required:\n+      - username\n+    properties:\n+      username:\n+        description: The full system-assigned ID of a user, including email domain\n+        type: string\n+      freeCreditsLimit:\n+        description: When set, overrides the default free credits dollar limit for this user.\n+        type: number\n+        format: double\n+      contactEmail:\n+        description: When set, replaces the user's contact email.  Must validate against the user's Institutional Affiliation, if one exists.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzNDY0MA=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5MDA2Mg==", "bodyText": "No I mean my verified institutional email is brassrat@mit.edu but I want transactional email to go to prince.adam@gmail.com. As in I only use the institutional email for official purposes (kind of like how I have a broadinstitute email that I never check).", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r462390062", "createdAt": "2020-07-29T15:30:29Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7787,3 +7814,29 @@ definitions:\n           timestamp (epoch millis) at workspace creation\n         type: integer\n         format: int64\n+  EditUserInformationRequest:\n+    description: >\n+      A group of changes an admin can make to a user in the Edit Information card of the individual-user admin page.\n+      Updates to the contact email or the institutional affiliation will be rejected if they do not validate.\n+    type: object\n+    required:\n+      - username\n+    properties:\n+      username:\n+        description: The full system-assigned ID of a user, including email domain\n+        type: string\n+      freeCreditsLimit:\n+        description: When set, overrides the default free credits dollar limit for this user.\n+        type: number\n+        format: double\n+      contactEmail:\n+        description: When set, replaces the user's contact email.  Must validate against the user's Institutional Affiliation, if one exists.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzNDY0MA=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTU0MDYyOnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/workbench-api.yaml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjo0MDozOVrOG1AnQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzo0MDo0NFrOG3i7Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzNzc2MQ==", "bodyText": "I looked at AccessBypassRequest, and one thing to verify is that it handles the null case correctly. I.e. we start out with null bypass times in the current model, and we can update it here to true or false, but we can never remove any trace of it ever having been set. I guess that's fine if those are the intended rules. In particular, the isBypassed property is required, which I believes means you can't set it to null in Typescript.\nIf it's not too late, can we avoid nullable booleans altogether in favor of an enum BYPASS_STATUS like {NEVER_BYPASSED, BYPASSED, REVOKED}?", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458237761", "createdAt": "2020-07-21T16:40:39Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7787,3 +7814,29 @@ definitions:\n           timestamp (epoch millis) at workspace creation\n         type: integer\n         format: int64\n+  EditUserInformationRequest:\n+    description: >\n+      A group of changes an admin can make to a user in the Edit Information card of the individual-user admin page.\n+      Updates to the contact email or the institutional affiliation will be rejected if they do not validate.\n+    type: object\n+    required:\n+      - username\n+    properties:\n+      username:\n+        description: The full system-assigned ID of a user, including email domain\n+        type: string\n+      freeCreditsLimit:\n+        description: When set, overrides the default free credits dollar limit for this user.\n+        type: number\n+        format: double\n+      contactEmail:\n+        description: When set, replaces the user's contact email.  Must validate against the user's Institutional Affiliation, if one exists.\n+        type: string\n+      verifiedInstitutionalAffiliation:\n+        description: When set, replaces the user's verified institutional email.  Must validate against the user's contact email.\n+        \"$ref\": '#/definitions/VerifiedInstitutionalAffiliation'\n+      accessBypassRequests:\n+        description: When set, updates the user's bypass status for one or more access modules.\n+        type: array\n+        items:\n+          \"$ref\": '#/definitions/AccessBypassRequest'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2OTYwOA==", "bodyText": "There's no nullable boolean here - this is a confusion between data at rest and the action to change the data.\nAccessBypassRequest holds the intent to make a change: turn a bypass on or off (possibly redundantly).  The bypass state itself is a nullable timestamp on DbUser, with the semantics of isBypassed = (timestamp != null).\nSo the default of \"never set\" is equivalent to false.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459069608", "createdAt": "2020-07-22T20:40:10Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7787,3 +7814,29 @@ definitions:\n           timestamp (epoch millis) at workspace creation\n         type: integer\n         format: int64\n+  EditUserInformationRequest:\n+    description: >\n+      A group of changes an admin can make to a user in the Edit Information card of the individual-user admin page.\n+      Updates to the contact email or the institutional affiliation will be rejected if they do not validate.\n+    type: object\n+    required:\n+      - username\n+    properties:\n+      username:\n+        description: The full system-assigned ID of a user, including email domain\n+        type: string\n+      freeCreditsLimit:\n+        description: When set, overrides the default free credits dollar limit for this user.\n+        type: number\n+        format: double\n+      contactEmail:\n+        description: When set, replaces the user's contact email.  Must validate against the user's Institutional Affiliation, if one exists.\n+        type: string\n+      verifiedInstitutionalAffiliation:\n+        description: When set, replaces the user's verified institutional email.  Must validate against the user's contact email.\n+        \"$ref\": '#/definitions/VerifiedInstitutionalAffiliation'\n+      accessBypassRequests:\n+        description: When set, updates the user's bypass status for one or more access modules.\n+        type: array\n+        items:\n+          \"$ref\": '#/definitions/AccessBypassRequest'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzNzc2MQ=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5NzA5OQ==", "bodyText": "Right. We can't distinguish a state with no history from a state where it was bypassed and removed by looking at the database. If history matters, then a boolean isn't really enough.\nIt's in the audit trail, though, and not something that should really be tackled on this PR.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r460897099", "createdAt": "2020-07-27T13:40:44Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7787,3 +7814,29 @@ definitions:\n           timestamp (epoch millis) at workspace creation\n         type: integer\n         format: int64\n+  EditUserInformationRequest:\n+    description: >\n+      A group of changes an admin can make to a user in the Edit Information card of the individual-user admin page.\n+      Updates to the contact email or the institutional affiliation will be rejected if they do not validate.\n+    type: object\n+    required:\n+      - username\n+    properties:\n+      username:\n+        description: The full system-assigned ID of a user, including email domain\n+        type: string\n+      freeCreditsLimit:\n+        description: When set, overrides the default free credits dollar limit for this user.\n+        type: number\n+        format: double\n+      contactEmail:\n+        description: When set, replaces the user's contact email.  Must validate against the user's Institutional Affiliation, if one exists.\n+        type: string\n+      verifiedInstitutionalAffiliation:\n+        description: When set, replaces the user's verified institutional email.  Must validate against the user's contact email.\n+        \"$ref\": '#/definitions/VerifiedInstitutionalAffiliation'\n+      accessBypassRequests:\n+        description: When set, updates the user's bypass status for one or more access modules.\n+        type: array\n+        items:\n+          \"$ref\": '#/definitions/AccessBypassRequest'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzNzc2MQ=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTU3ODQ2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjo0OTo0MlrOG1A-Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDo0MjowNlrOG1zchw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0MzY2Mg==", "bodyText": "nit: alphabetize these, please. there are a couple of IJ plugins that can do that.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458243662", "createdAt": "2020-07-21T16:49:42Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -180,8 +188,9 @@\n     CaptchaVerificationService.class,\n     UserServiceImpl.class,\n     UserServiceTestConfiguration.class,\n+    FreeTierBillingService.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3MDU5OQ==", "bodyText": "Will do.  I typically use Edit -> Sort Lines", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459070599", "createdAt": "2020-07-22T20:42:06Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -180,8 +188,9 @@\n     CaptchaVerificationService.class,\n     UserServiceImpl.class,\n     UserServiceTestConfiguration.class,\n+    FreeTierBillingService.class,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0MzY2Mg=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTU4MTEyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjo1MDoxOVrOG1A_4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDo0Mzo0MFrOG1zfxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0NDA2NQ==", "bodyText": "why is this commented out?", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458244065", "createdAt": "2020-07-21T16:50:19Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -231,6 +240,9 @@ public void setUp() throws IOException {\n             .country(COUNTRY)\n             .zipCode(ZIP_CODE));\n \n+    // TODO: this needs to be set in createAccountAndDbUserWithAffiliation() instead of here.  Why?\n+    // profile.setEmailVerificationStatus(EmailVerificationStatus.SUBSCRIBED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3MTQyOQ==", "bodyText": "This is the command which logically fits here but does not work properly.  Is there a better way to make that clear?\nI could also just remove it.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459071429", "createdAt": "2020-07-22T20:43:40Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -231,6 +240,9 @@ public void setUp() throws IOException {\n             .country(COUNTRY)\n             .zipCode(ZIP_CODE));\n \n+    // TODO: this needs to be set in createAccountAndDbUserWithAffiliation() instead of here.  Why?\n+    // profile.setEmailVerificationStatus(EmailVerificationStatus.SUBSCRIBED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0NDA2NQ=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTgzNTc0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo1Njo1NVrOG1DgDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDo0NTozOVrOG1zj7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4NTA2OA==", "bodyText": "are you verifying the wrong behavior here?", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r458285068", "createdAt": "2020-07-21T17:56:55Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -1147,14 +1138,382 @@ public void testUpdateProfile_updateDemographicSurvey() {\n         false);\n   }\n \n+  @Test(expected = NotFoundException.class)\n+  public void test_editUserInformation_null_user() {\n+    profileService.editUserInformation(new EditUserInformationRequest());\n+  }\n+\n+  @Test(expected = NotFoundException.class)\n+  public void test_editUserInformation_user_not_found() {\n+    final EditUserInformationRequest request =\n+        new EditUserInformationRequest().username(\"not found\");\n+    profileService.editUserInformation(request);\n+  }\n+\n+  @Test\n+  public void test_editUserInformation_no_change() {\n+    final Profile original = createAccountAndDbUserWithAffiliation();\n+\n+    // valid user but no fields updated\n+    final EditUserInformationRequest request =\n+        new EditUserInformationRequest().username(PRIMARY_EMAIL);\n+    final Profile retrieved = profileService.editUserInformation(request);\n+\n+    // RW-5257 Demo Survey completion time is incorrectly updated\n+    retrieved.setDemographicSurveyCompletionTime(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3MjQ5NA==", "bodyText": "I want to assert a round trip but I can't because of RW-5257: this line is necessary to correct that.  Is there a better way to show this?", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459072494", "createdAt": "2020-07-22T20:45:39Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -1147,14 +1138,382 @@ public void testUpdateProfile_updateDemographicSurvey() {\n         false);\n   }\n \n+  @Test(expected = NotFoundException.class)\n+  public void test_editUserInformation_null_user() {\n+    profileService.editUserInformation(new EditUserInformationRequest());\n+  }\n+\n+  @Test(expected = NotFoundException.class)\n+  public void test_editUserInformation_user_not_found() {\n+    final EditUserInformationRequest request =\n+        new EditUserInformationRequest().username(\"not found\");\n+    profileService.editUserInformation(request);\n+  }\n+\n+  @Test\n+  public void test_editUserInformation_no_change() {\n+    final Profile original = createAccountAndDbUserWithAffiliation();\n+\n+    // valid user but no fields updated\n+    final EditUserInformationRequest request =\n+        new EditUserInformationRequest().username(PRIMARY_EMAIL);\n+    final Profile retrieved = profileService.editUserInformation(request);\n+\n+    // RW-5257 Demo Survey completion time is incorrectly updated\n+    retrieved.setDemographicSurveyCompletionTime(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4NTA2OA=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDg0MzIxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDo0NjozM1rOG1zlxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDo0NjozM1rOG1zlxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3Mjk2NQ==", "bodyText": "This would be cleaner if you passed in isNewProfile to fieldChanged(). Actually I'd probably have a method that absorbed all the ifs as well so there's not so much branching. Like\nboolean validateIfChanged(Diff diff, String fieldName, Consumer<Profile> validateFunction);\nBonus points for putting all that into an enum, or using a map from field names to validators.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459072965", "createdAt": "2020-07-22T20:46:33Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -381,47 +415,73 @@ private void validateAreaOfResearch(Profile profile) throws BadRequestException\n    * object.\n    *\n    * @param updatedProfile\n-   * @param prevProfile\n+   * @param previousProfile\n    * @throws BadRequestException\n    */\n   @VisibleForTesting\n-  public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile prevProfile)\n+  public void validateProfile(\n+      @Nonnull Profile updatedProfile, @Nullable Profile previousProfile, boolean userIsAdmin) {\n+\n+    final boolean isNewProfile = previousProfile == null;\n+    final Diff diff = javers.compare(previousProfile, updatedProfile);\n+\n+    validateProfileForCorrectness(updatedProfile, isNewProfile, diff);\n+\n+    if (userIsAdmin) {\n+      validateChangesAllowedByAdmin(diff);\n+    } else {\n+      validateChangesAllowedByUser(diff);\n+    }\n+  }\n+\n+  private void validateProfileForCorrectness(Profile profile, boolean isNewProfile, Diff diff)\n       throws BadRequestException {\n-    boolean isNewObject = prevProfile == null;\n-    Diff diff = javers.compare(prevProfile, updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"username\")) {\n+      validateUsername(profile);\n+    }\n+    if (isNewProfile || fieldChanged(diff, \"contactEmail\")) {\n+      validateContactEmail(profile);\n \n-    if (!getChangesWithPrefix(diff, \"username\").isEmpty() || isNewObject) {\n-      validateUsername(updatedProfile);\n+      // only validate if the new profile has an affiliation - some older users do not\n+      if (profile.getVerifiedInstitutionalAffiliation() != null) {\n+        validateInstitutionalAffiliationAgainstEmail(profile);\n+      }\n     }\n-    if (!getChangesWithPrefix(diff, \"contactEmail\").isEmpty() || isNewObject) {\n-      validateContactEmail(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"givenName\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDg1NjI1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDo1MDozMVrOG1zt-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjoxMjowMlrOG21ZZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3NTA2NA==", "bodyText": "I'd bundle these two calls into a ProfileService#getByUsername(String username) if you don't need the DbUser.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459075064", "createdAt": "2020-07-22T20:50:31Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -432,10 +492,48 @@ public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile p\n    * @throws BadRequestException\n    */\n   public void validateNewProfile(Profile profile) throws BadRequestException {\n-    validateProfile(profile, null);\n+    // unused, but this is the correct syntax for a \"Diff\" of a new object\n+    final Diff dummyDiff = javers.compare(null, profile);\n+    validateProfileForCorrectness(profile, true, dummyDiff);\n   }\n \n   public List<Profile> listAllProfiles() {\n     return userService.getAllUsers().stream().map(this::getProfile).collect(Collectors.toList());\n   }\n+\n+  /**\n+   * Updates the user metadata referenced by the fields of EditUserInformationRequest.\n+   *\n+   * @param request the fields to update. Fields left null here will not be updated. Contact Email\n+   *     and Verified Institutional Affiliation updates will trigger a check for affiliation\n+   *     validation.\n+   * @return the Profile of the user, after updates\n+   */\n+  public Profile editUserInformation(EditUserInformationRequest request) {\n+    final DbUser dbUser = userService.getByUsernameOrThrow(request.getUsername());\n+    final Profile originalProfile = getProfile(dbUser);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1MTE0Mg==", "bodyText": "I do need the DbUser", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r460151142", "createdAt": "2020-07-24T16:12:02Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -432,10 +492,48 @@ public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile p\n    * @throws BadRequestException\n    */\n   public void validateNewProfile(Profile profile) throws BadRequestException {\n-    validateProfile(profile, null);\n+    // unused, but this is the correct syntax for a \"Diff\" of a new object\n+    final Diff dummyDiff = javers.compare(null, profile);\n+    validateProfileForCorrectness(profile, true, dummyDiff);\n   }\n \n   public List<Profile> listAllProfiles() {\n     return userService.getAllUsers().stream().map(this::getProfile).collect(Collectors.toList());\n   }\n+\n+  /**\n+   * Updates the user metadata referenced by the fields of EditUserInformationRequest.\n+   *\n+   * @param request the fields to update. Fields left null here will not be updated. Contact Email\n+   *     and Verified Institutional Affiliation updates will trigger a check for affiliation\n+   *     validation.\n+   * @return the Profile of the user, after updates\n+   */\n+  public Profile editUserInformation(EditUserInformationRequest request) {\n+    final DbUser dbUser = userService.getByUsernameOrThrow(request.getUsername());\n+    final Profile originalProfile = getProfile(dbUser);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3NTA2NA=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDg2NTg1OnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/workbench-api.yaml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDo1Mzo0MFrOG1zz9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODoyMjo0NlrOG25a9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3NjU5Ng==", "bodyText": "Can we just name this property affiliation with the intention to rename VerifiedInstitutionalAffiliation soon?", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459076596", "createdAt": "2020-07-22T20:53:40Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7787,3 +7814,29 @@ definitions:\n           timestamp (epoch millis) at workspace creation\n         type: integer\n         format: int64\n+  EditUserInformationRequest:\n+    description: >\n+      A group of changes an admin can make to a user in the Edit Information card of the individual-user admin page.\n+      Updates to the contact email or the institutional affiliation will be rejected if they do not validate.\n+    type: object\n+    required:\n+      - username\n+    properties:\n+      username:\n+        description: The full system-assigned ID of a user, including email domain\n+        type: string\n+      freeCreditsLimit:\n+        description: When set, overrides the default free credits dollar limit for this user.\n+        type: number\n+        format: double\n+      contactEmail:\n+        description: When set, replaces the user's contact email.  Must validate against the user's Institutional Affiliation, if one exists.\n+        type: string\n+      verifiedInstitutionalAffiliation:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIxNzA3OA==", "bodyText": "I like that.\nWe should remove all of the old-style affiliations before doing so, but I think we can get to this soon.  New ticket: https://precisionmedicineinitiative.atlassian.net/browse/RW-5326", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r460217078", "createdAt": "2020-07-24T18:22:46Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7787,3 +7814,29 @@ definitions:\n           timestamp (epoch millis) at workspace creation\n         type: integer\n         format: int64\n+  EditUserInformationRequest:\n+    description: >\n+      A group of changes an admin can make to a user in the Edit Information card of the individual-user admin page.\n+      Updates to the contact email or the institutional affiliation will be rejected if they do not validate.\n+    type: object\n+    required:\n+      - username\n+    properties:\n+      username:\n+        description: The full system-assigned ID of a user, including email domain\n+        type: string\n+      freeCreditsLimit:\n+        description: When set, overrides the default free credits dollar limit for this user.\n+        type: number\n+        format: double\n+      contactEmail:\n+        description: When set, replaces the user's contact email.  Must validate against the user's Institutional Affiliation, if one exists.\n+        type: string\n+      verifiedInstitutionalAffiliation:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3NjU5Ng=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDg2ODAxOnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/workbench-api.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDo1NDoyNVrOG1z1XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjoxMzowMFrOG21bKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3Njk1Ng==", "bodyText": "I'm confused: does the affiliation own the contact email or is it independent?", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459076956", "createdAt": "2020-07-22T20:54:25Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7787,3 +7814,29 @@ definitions:\n           timestamp (epoch millis) at workspace creation\n         type: integer\n         format: int64\n+  EditUserInformationRequest:\n+    description: >\n+      A group of changes an admin can make to a user in the Edit Information card of the individual-user admin page.\n+      Updates to the contact email or the institutional affiliation will be rejected if they do not validate.\n+    type: object\n+    required:\n+      - username\n+    properties:\n+      username:\n+        description: The full system-assigned ID of a user, including email domain\n+        type: string\n+      freeCreditsLimit:\n+        description: When set, overrides the default free credits dollar limit for this user.\n+        type: number\n+        format: double\n+      contactEmail:\n+        description: When set, replaces the user's contact email.  Must validate against the user's Institutional Affiliation, if one exists.\n+        type: string\n+      verifiedInstitutionalAffiliation:\n+        description: When set, replaces the user's verified institutional email.  Must validate against the user's contact email.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1MTU5NA==", "bodyText": "copypaste error.  fixed.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r460151594", "createdAt": "2020-07-24T16:13:00Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7787,3 +7814,29 @@ definitions:\n           timestamp (epoch millis) at workspace creation\n         type: integer\n         format: int64\n+  EditUserInformationRequest:\n+    description: >\n+      A group of changes an admin can make to a user in the Edit Information card of the individual-user admin page.\n+      Updates to the contact email or the institutional affiliation will be rejected if they do not validate.\n+    type: object\n+    required:\n+      - username\n+    properties:\n+      username:\n+        description: The full system-assigned ID of a user, including email domain\n+        type: string\n+      freeCreditsLimit:\n+        description: When set, overrides the default free credits dollar limit for this user.\n+        type: number\n+        format: double\n+      contactEmail:\n+        description: When set, replaces the user's contact email.  Must validate against the user's Institutional Affiliation, if one exists.\n+        type: string\n+      verifiedInstitutionalAffiliation:\n+        description: When set, replaces the user's verified institutional email.  Must validate against the user's contact email.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3Njk1Ng=="}, "originalCommit": {"oid": "ff3b03c67c15c4d98328542add0bdf8b5e22a6aa"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDkxNzk4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTowOToyMVrOG10T5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMTo1OTo1MlrOG2-28w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4NDc3NA==", "bodyText": "If I see a method starting with set that returns a boolean, I generally assume it returns true if the value was successfully set. This contract is confusing to me.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459084774", "createdAt": "2020-07-22T21:09:21Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -295,4 +296,34 @@ public double getUserFreeTierDollarLimit(DbUser user) {\n     return Optional.ofNullable(user.getFreeTierCreditsLimitDollarsOverride())\n         .orElse(workbenchConfigProvider.get().billing.defaultFreeCreditsDollarLimit);\n   }\n+\n+  /**\n+   * Set a custom Free Tier dollar limit override for this user. If this is greater than the user's\n+   * total cost, set their workspaces to active. Note: lowering the limit below total cost will not\n+   * set the workspaces to inactive. checkFreeTierBillingUsage() will do this as part of the next\n+   * cron run.\n+   *\n+   * @param user the user as represented in our database\n+   * @param dollarLimit the US dollar amount, represented as a double\n+   * @return whether the user's total cost is now below their limit", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9825a21a642b4ce0b41f32d9a213778cb61ff"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzNDQ4OQ==", "bodyText": "good point.  We don't need this return value.  It's a void now.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r460234489", "createdAt": "2020-07-24T19:00:18Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -295,4 +296,34 @@ public double getUserFreeTierDollarLimit(DbUser user) {\n     return Optional.ofNullable(user.getFreeTierCreditsLimitDollarsOverride())\n         .orElse(workbenchConfigProvider.get().billing.defaultFreeCreditsDollarLimit);\n   }\n+\n+  /**\n+   * Set a custom Free Tier dollar limit override for this user. If this is greater than the user's\n+   * total cost, set their workspaces to active. Note: lowering the limit below total cost will not\n+   * set the workspaces to inactive. checkFreeTierBillingUsage() will do this as part of the next\n+   * cron run.\n+   *\n+   * @param user the user as represented in our database\n+   * @param dollarLimit the US dollar amount, represented as a double\n+   * @return whether the user's total cost is now below their limit", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4NDc3NA=="}, "originalCommit": {"oid": "16a9825a21a642b4ce0b41f32d9a213778cb61ff"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMwNjE2Mw==", "bodyText": "Update: it returns a boolean again, and works in the way you describe.  Method is now called maybeSetDollarLimitOverride() and has more internal logic", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r460306163", "createdAt": "2020-07-24T21:59:52Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -295,4 +296,34 @@ public double getUserFreeTierDollarLimit(DbUser user) {\n     return Optional.ofNullable(user.getFreeTierCreditsLimitDollarsOverride())\n         .orElse(workbenchConfigProvider.get().billing.defaultFreeCreditsDollarLimit);\n   }\n+\n+  /**\n+   * Set a custom Free Tier dollar limit override for this user. If this is greater than the user's\n+   * total cost, set their workspaces to active. Note: lowering the limit below total cost will not\n+   * set the workspaces to inactive. checkFreeTierBillingUsage() will do this as part of the next\n+   * cron run.\n+   *\n+   * @param user the user as represented in our database\n+   * @param dollarLimit the US dollar amount, represented as a double\n+   * @return whether the user's total cost is now below their limit", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4NDc3NA=="}, "originalCommit": {"oid": "16a9825a21a642b4ce0b41f32d9a213778cb61ff"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDkyMTk5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMToxMDozOFrOG10WVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMToxMDozOFrOG10WVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4NTM5Nw==", "bodyText": "I am surprised to see this being set in this service as opposed to the UserAdminService or ProfileService or someplace. I guess you'd have to invert the dependency for that to happen though.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459085397", "createdAt": "2020-07-22T21:10:38Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -295,4 +296,34 @@ public double getUserFreeTierDollarLimit(DbUser user) {\n     return Optional.ofNullable(user.getFreeTierCreditsLimitDollarsOverride())\n         .orElse(workbenchConfigProvider.get().billing.defaultFreeCreditsDollarLimit);\n   }\n+\n+  /**\n+   * Set a custom Free Tier dollar limit override for this user. If this is greater than the user's\n+   * total cost, set their workspaces to active. Note: lowering the limit below total cost will not\n+   * set the workspaces to inactive. checkFreeTierBillingUsage() will do this as part of the next\n+   * cron run.\n+   *\n+   * @param user the user as represented in our database\n+   * @param dollarLimit the US dollar amount, represented as a double\n+   * @return whether the user's total cost is now below their limit\n+   */\n+  public boolean setFreeTierDollarOverride(DbUser user, double dollarLimit) {\n+    final Double previousLimitMaybe = user.getFreeTierCreditsLimitDollarsOverride();\n+\n+    // TODO: prevent setting this limit directly except in this method?\n+    user.setFreeTierCreditsLimitDollarsOverride(dollarLimit);\n+    user = userDao.save(user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9825a21a642b4ce0b41f32d9a213778cb61ff"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDkzMDM4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMToxMzoxMFrOG10bTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMjo0MTo1NlrOG3R6pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4NjY3MA==", "bodyText": "Why do we need the \"forUser\" suffix? I think that was there previously but I never got what it meant.\nSo Admins can't create profiles, right? At least not in their capacity as admins.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459086670", "createdAt": "2020-07-22T21:13:10Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -187,11 +192,28 @@ public void validateInstitutionalAffiliation(Profile profile) {\n    * @param previousProfile\n    */\n   public void updateProfileForUser(DbUser user, Profile updatedProfile, Profile previousProfile) {\n+    updateProfileForUser(user, updatedProfile, previousProfile, false);\n+  }\n+\n+  /**\n+   * Updates a profile for a given user as Admin and persists all information to the database.\n+   *\n+   * @param user\n+   * @param updatedProfile\n+   * @param previousProfile\n+   */\n+  public void adminUpdateProfileForUser(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9825a21a642b4ce0b41f32d9a213778cb61ff"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1Mzg4MA==", "bodyText": "(NOTE: I have removed the admin version of this method in favor of checking authorities)\nI'm not sure.  @gjuggler this was your originally, right?  Any concern with renaming updateProfileForUser() to \"updateProfile\" ?", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r460253880", "createdAt": "2020-07-24T19:43:34Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -187,11 +192,28 @@ public void validateInstitutionalAffiliation(Profile profile) {\n    * @param previousProfile\n    */\n   public void updateProfileForUser(DbUser user, Profile updatedProfile, Profile previousProfile) {\n+    updateProfileForUser(user, updatedProfile, previousProfile, false);\n+  }\n+\n+  /**\n+   * Updates a profile for a given user as Admin and persists all information to the database.\n+   *\n+   * @param user\n+   * @param updatedProfile\n+   * @param previousProfile\n+   */\n+  public void adminUpdateProfileForUser(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4NjY3MA=="}, "originalCommit": {"oid": "16a9825a21a642b4ce0b41f32d9a213778cb61ff"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI2NjQ4NA==", "bodyText": "IIRC this method originally lived at the controller level, where there is also an updateProfile() method (which handles the case when \"my current user\" is the target user being updated). Now that it's in the service it makes sense to remove the suffix for consistency with other methods in that file.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r460266484", "createdAt": "2020-07-24T20:13:37Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -187,11 +192,28 @@ public void validateInstitutionalAffiliation(Profile profile) {\n    * @param previousProfile\n    */\n   public void updateProfileForUser(DbUser user, Profile updatedProfile, Profile previousProfile) {\n+    updateProfileForUser(user, updatedProfile, previousProfile, false);\n+  }\n+\n+  /**\n+   * Updates a profile for a given user as Admin and persists all information to the database.\n+   *\n+   * @param user\n+   * @param updatedProfile\n+   * @param previousProfile\n+   */\n+  public void adminUpdateProfileForUser(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4NjY3MA=="}, "originalCommit": {"oid": "16a9825a21a642b4ce0b41f32d9a213778cb61ff"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYxODQwNA==", "bodyText": "Thanks.  Updated.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r460618404", "createdAt": "2020-07-27T02:41:56Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -187,11 +192,28 @@ public void validateInstitutionalAffiliation(Profile profile) {\n    * @param previousProfile\n    */\n   public void updateProfileForUser(DbUser user, Profile updatedProfile, Profile previousProfile) {\n+    updateProfileForUser(user, updatedProfile, previousProfile, false);\n+  }\n+\n+  /**\n+   * Updates a profile for a given user as Admin and persists all information to the database.\n+   *\n+   * @param user\n+   * @param updatedProfile\n+   * @param previousProfile\n+   */\n+  public void adminUpdateProfileForUser(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4NjY3MA=="}, "originalCommit": {"oid": "16a9825a21a642b4ce0b41f32d9a213778cb61ff"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDkzMzY4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMToxNDoxOVrOG10dZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMTowNjoyOVrOG4k9Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4NzIwNQ==", "bodyText": "By exiting early, we can't validate multiple fields and give the client a single exception with a list of issues with the profile. Granted no one has asked for that yet.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r459087205", "createdAt": "2020-07-22T21:14:19Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -381,47 +415,73 @@ private void validateAreaOfResearch(Profile profile) throws BadRequestException\n    * object.\n    *\n    * @param updatedProfile\n-   * @param prevProfile\n+   * @param previousProfile\n    * @throws BadRequestException\n    */\n   @VisibleForTesting\n-  public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile prevProfile)\n+  public void validateProfile(\n+      @Nonnull Profile updatedProfile, @Nullable Profile previousProfile, boolean userIsAdmin) {\n+\n+    final boolean isNewProfile = previousProfile == null;\n+    final Diff diff = javers.compare(previousProfile, updatedProfile);\n+\n+    validateProfileForCorrectness(updatedProfile, isNewProfile, diff);\n+\n+    if (userIsAdmin) {\n+      validateChangesAllowedByAdmin(diff);\n+    } else {\n+      validateChangesAllowedByUser(diff);\n+    }\n+  }\n+\n+  private void validateProfileForCorrectness(Profile profile, boolean isNewProfile, Diff diff)\n       throws BadRequestException {\n-    boolean isNewObject = prevProfile == null;\n-    Diff diff = javers.compare(prevProfile, updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"username\")) {\n+      validateUsername(profile);\n+    }\n+    if (isNewProfile || fieldChanged(diff, \"contactEmail\")) {\n+      validateContactEmail(profile);\n \n-    if (!getChangesWithPrefix(diff, \"username\").isEmpty() || isNewObject) {\n-      validateUsername(updatedProfile);\n+      // only validate if the new profile has an affiliation - some older users do not\n+      if (profile.getVerifiedInstitutionalAffiliation() != null) {\n+        validateInstitutionalAffiliationAgainstEmail(profile);\n+      }\n     }\n-    if (!getChangesWithPrefix(diff, \"contactEmail\").isEmpty() || isNewObject) {\n-      validateContactEmail(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"givenName\")) {\n+      validateGivenName(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"givenName\").isEmpty() || isNewObject) {\n-      validateGivenName(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"familyName\")) {\n+      validateFamilyName(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"familyName\").isEmpty() || isNewObject) {\n-      validateFamilyName(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"address\")) {\n+      validateAddress(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"address\").isEmpty() || isNewObject) {\n-      validateAddress(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"areaOfResearch\")) {\n+      validateAreaOfResearch(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"areaOfResearch\").isEmpty() || isNewObject) {\n-      validateAreaOfResearch(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"verifiedInstitutionalAffiliation\")) {\n+      validateInstitutionalAffiliation(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"verifiedInstitutionalAffiliation\").isEmpty() || isNewObject) {\n-      validateInstitutionalAffiliation(updatedProfile);\n+  }\n+\n+  private void validateChangesAllowedByUser(Diff diff) {\n+    if (fieldChanged(diff, \"username\")) {\n+      // See RW-1488.\n+      throw new BadRequestException(\"Changing username is not supported\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9825a21a642b4ce0b41f32d9a213778cb61ff"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3ODkyMw==", "bodyText": "Good point!  I filed this: https://precisionmedicineinitiative.atlassian.net/browse/RW-5334", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r461978923", "createdAt": "2020-07-29T01:06:29Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -381,47 +415,73 @@ private void validateAreaOfResearch(Profile profile) throws BadRequestException\n    * object.\n    *\n    * @param updatedProfile\n-   * @param prevProfile\n+   * @param previousProfile\n    * @throws BadRequestException\n    */\n   @VisibleForTesting\n-  public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile prevProfile)\n+  public void validateProfile(\n+      @Nonnull Profile updatedProfile, @Nullable Profile previousProfile, boolean userIsAdmin) {\n+\n+    final boolean isNewProfile = previousProfile == null;\n+    final Diff diff = javers.compare(previousProfile, updatedProfile);\n+\n+    validateProfileForCorrectness(updatedProfile, isNewProfile, diff);\n+\n+    if (userIsAdmin) {\n+      validateChangesAllowedByAdmin(diff);\n+    } else {\n+      validateChangesAllowedByUser(diff);\n+    }\n+  }\n+\n+  private void validateProfileForCorrectness(Profile profile, boolean isNewProfile, Diff diff)\n       throws BadRequestException {\n-    boolean isNewObject = prevProfile == null;\n-    Diff diff = javers.compare(prevProfile, updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"username\")) {\n+      validateUsername(profile);\n+    }\n+    if (isNewProfile || fieldChanged(diff, \"contactEmail\")) {\n+      validateContactEmail(profile);\n \n-    if (!getChangesWithPrefix(diff, \"username\").isEmpty() || isNewObject) {\n-      validateUsername(updatedProfile);\n+      // only validate if the new profile has an affiliation - some older users do not\n+      if (profile.getVerifiedInstitutionalAffiliation() != null) {\n+        validateInstitutionalAffiliationAgainstEmail(profile);\n+      }\n     }\n-    if (!getChangesWithPrefix(diff, \"contactEmail\").isEmpty() || isNewObject) {\n-      validateContactEmail(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"givenName\")) {\n+      validateGivenName(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"givenName\").isEmpty() || isNewObject) {\n-      validateGivenName(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"familyName\")) {\n+      validateFamilyName(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"familyName\").isEmpty() || isNewObject) {\n-      validateFamilyName(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"address\")) {\n+      validateAddress(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"address\").isEmpty() || isNewObject) {\n-      validateAddress(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"areaOfResearch\")) {\n+      validateAreaOfResearch(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"areaOfResearch\").isEmpty() || isNewObject) {\n-      validateAreaOfResearch(updatedProfile);\n+    if (isNewProfile || fieldChanged(diff, \"verifiedInstitutionalAffiliation\")) {\n+      validateInstitutionalAffiliation(profile);\n     }\n-    if (!getChangesWithPrefix(diff, \"verifiedInstitutionalAffiliation\").isEmpty() || isNewObject) {\n-      validateInstitutionalAffiliation(updatedProfile);\n+  }\n+\n+  private void validateChangesAllowedByUser(Diff diff) {\n+    if (fieldChanged(diff, \"username\")) {\n+      // See RW-1488.\n+      throw new BadRequestException(\"Changing username is not supported\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4NzIwNQ=="}, "originalCommit": {"oid": "16a9825a21a642b4ce0b41f32d9a213778cb61ff"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzExNzI4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionType.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzoxOToxN1rOG3iE9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDo1ODoyM1rOG4k1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg4MzE4OA==", "bodyText": "nit: I don't know if we have a decision on trailing commas in these kinds of lists. Seems like it might not work everywhere in Java.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r460883188", "createdAt": "2020-07-27T13:19:17Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionType.kt", "diffHunk": "@@ -11,5 +11,5 @@ enum class ActionType {\n     DUPLICATE_TO,\n     COLLABORATE,\n     DELETE,\n-    DETECT_HIGH_EGRESS_EVENT\n+    DETECT_HIGH_EGRESS_EVENT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87ab893c65de603cf4bec15d49083cb081a5f2c2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3Njg4MA==", "bodyText": "I've been adding these various places - especially @Import({...}) lists in tests", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r461976880", "createdAt": "2020-07-29T00:58:23Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionType.kt", "diffHunk": "@@ -11,5 +11,5 @@ enum class ActionType {\n     DUPLICATE_TO,\n     COLLABORATE,\n     DELETE,\n-    DETECT_HIGH_EGRESS_EVENT\n+    DETECT_HIGH_EGRESS_EVENT,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg4MzE4OA=="}, "originalCommit": {"oid": "87ab893c65de603cf4bec15d49083cb081a5f2c2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzEyODI5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/UserServiceAuditor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzoyMTo1OFrOG3iLkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzoyMTo1OFrOG3iLkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg4NDg4MA==", "bodyText": "nit: general convention would be something like fireEditFreeTierQuota(). Auditors always fire actions, so that part of the name doesn't narrow it down much.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r460884880", "createdAt": "2020-07-27T13:21:58Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/UserServiceAuditor.java", "diffHunk": "@@ -21,4 +22,7 @@ void fireAdministrativeBypassTime(\n       Optional<Instant> newBypassTime);\n \n   void fireAcknowledgeTermsOfService(DbUser targetUser, Integer termsOfServiceVersion);\n+\n+  void fireFreeTierDollarQuotaAction(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87ab893c65de603cf4bec15d49083cb081a5f2c2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzE0NDk2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzoyNTo0M1rOG3iVcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzoyNTo0M1rOG3iVcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg4NzQwOQ==", "bodyText": "It might help to have a small MyCurrency class to wrap the double, from which you could move to a standard representation using integral cents. Just to keep money from getting subtracted from weights or something.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r460887409", "createdAt": "2020-07-27T13:25:43Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -136,10 +138,14 @@ private int compareCostFractions(final double a, final double b) {\n     return DoubleMath.fuzzyCompare(a, b, COST_FRACTION_TOLERANCE);\n   }\n \n-  private boolean expiredByCost(final DbUser user, final double currentCost) {\n+  private boolean costAboveLimit(final DbUser user, final double currentCost) {\n     return compareCosts(currentCost, getUserFreeTierDollarLimit(user)) > 0;\n   }\n \n+  private boolean costsDiffer(final double a, final double b) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87ab893c65de603cf4bec15d49083cb081a5f2c2"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzE1OTU2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzoyOToyNVrOG3ienA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjoyMzo0NVrOG31sfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg4OTc1Ng==", "bodyText": "Best way to do that is with a separate little service that only exposes one entry point.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r460889756", "createdAt": "2020-07-27T13:29:25Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -295,4 +300,42 @@ public double getUserFreeTierDollarLimit(DbUser user) {\n     return Optional.ofNullable(user.getFreeTierCreditsLimitDollarsOverride())\n         .orElse(workbenchConfigProvider.get().billing.defaultFreeCreditsDollarLimit);\n   }\n+\n+  /**\n+   * Set a Free Tier dollar limit override value for this user, but only if the value to set differs\n+   * from the system default or the user has an existing override. If the user has no override and\n+   * the value to set it equal to the system default, retain the system default so this user's quota\n+   * continues to track it.\n+   *\n+   * <p>If this is greater than the user's total cost, set their workspaces to active. Note:\n+   * lowering the limit below total cost will NOT set the workspaces to inactive.\n+   * checkFreeTierBillingUsage() will do this as part of the next cron run.\n+   *\n+   * @param user the user as represented in our database\n+   * @param newDollarLimit the US dollar amount, represented as a double\n+   * @return whether an override was set\n+   */\n+  public boolean maybeSetDollarLimitOverride(DbUser user, double newDollarLimit) {\n+    final Double previousLimitMaybe = user.getFreeTierCreditsLimitDollarsOverride();\n+\n+    if (previousLimitMaybe != null\n+        || costsDiffer(\n+            newDollarLimit, workbenchConfigProvider.get().billing.defaultFreeCreditsDollarLimit)) {\n+\n+      // TODO: prevent setting this limit directly except in this method?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87ab893c65de603cf4bec15d49083cb081a5f2c2"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwNDYwNg==", "bodyText": "That's effectively what we're doing already, at the Service or Controller level.  I'm imagining something stricter which we probably can't do, like \"only FreeTierBillingService can call this DbUser accessor\"", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r461204606", "createdAt": "2020-07-27T22:23:45Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -295,4 +300,42 @@ public double getUserFreeTierDollarLimit(DbUser user) {\n     return Optional.ofNullable(user.getFreeTierCreditsLimitDollarsOverride())\n         .orElse(workbenchConfigProvider.get().billing.defaultFreeCreditsDollarLimit);\n   }\n+\n+  /**\n+   * Set a Free Tier dollar limit override value for this user, but only if the value to set differs\n+   * from the system default or the user has an existing override. If the user has no override and\n+   * the value to set it equal to the system default, retain the system default so this user's quota\n+   * continues to track it.\n+   *\n+   * <p>If this is greater than the user's total cost, set their workspaces to active. Note:\n+   * lowering the limit below total cost will NOT set the workspaces to inactive.\n+   * checkFreeTierBillingUsage() will do this as part of the next cron run.\n+   *\n+   * @param user the user as represented in our database\n+   * @param newDollarLimit the US dollar amount, represented as a double\n+   * @return whether an override was set\n+   */\n+  public boolean maybeSetDollarLimitOverride(DbUser user, double newDollarLimit) {\n+    final Double previousLimitMaybe = user.getFreeTierCreditsLimitDollarsOverride();\n+\n+    if (previousLimitMaybe != null\n+        || costsDiffer(\n+            newDollarLimit, workbenchConfigProvider.get().billing.defaultFreeCreditsDollarLimit)) {\n+\n+      // TODO: prevent setting this limit directly except in this method?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg4OTc1Ng=="}, "originalCommit": {"oid": "87ab893c65de603cf4bec15d49083cb081a5f2c2"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzE2NTcwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzozMDo1M1rOG3iiYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjoxNDo0NlrOG36Dvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5MDcyMg==", "bodyText": "Looks like we're not setting the modified time on the user row? Please confirm that's what's wanted.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r460890722", "createdAt": "2020-07-27T13:30:53Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -295,4 +300,42 @@ public double getUserFreeTierDollarLimit(DbUser user) {\n     return Optional.ofNullable(user.getFreeTierCreditsLimitDollarsOverride())\n         .orElse(workbenchConfigProvider.get().billing.defaultFreeCreditsDollarLimit);\n   }\n+\n+  /**\n+   * Set a Free Tier dollar limit override value for this user, but only if the value to set differs\n+   * from the system default or the user has an existing override. If the user has no override and\n+   * the value to set it equal to the system default, retain the system default so this user's quota\n+   * continues to track it.\n+   *\n+   * <p>If this is greater than the user's total cost, set their workspaces to active. Note:\n+   * lowering the limit below total cost will NOT set the workspaces to inactive.\n+   * checkFreeTierBillingUsage() will do this as part of the next cron run.\n+   *\n+   * @param user the user as represented in our database\n+   * @param newDollarLimit the US dollar amount, represented as a double\n+   * @return whether an override was set\n+   */\n+  public boolean maybeSetDollarLimitOverride(DbUser user, double newDollarLimit) {\n+    final Double previousLimitMaybe = user.getFreeTierCreditsLimitDollarsOverride();\n+\n+    if (previousLimitMaybe != null\n+        || costsDiffer(\n+            newDollarLimit, workbenchConfigProvider.get().billing.defaultFreeCreditsDollarLimit)) {\n+\n+      // TODO: prevent setting this limit directly except in this method?\n+      user.setFreeTierCreditsLimitDollarsOverride(newDollarLimit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87ab893c65de603cf4bec15d49083cb081a5f2c2"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NjA5NA==", "bodyText": "good catch.  fixed.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r461276094", "createdAt": "2020-07-28T02:14:46Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -295,4 +300,42 @@ public double getUserFreeTierDollarLimit(DbUser user) {\n     return Optional.ofNullable(user.getFreeTierCreditsLimitDollarsOverride())\n         .orElse(workbenchConfigProvider.get().billing.defaultFreeCreditsDollarLimit);\n   }\n+\n+  /**\n+   * Set a Free Tier dollar limit override value for this user, but only if the value to set differs\n+   * from the system default or the user has an existing override. If the user has no override and\n+   * the value to set it equal to the system default, retain the system default so this user's quota\n+   * continues to track it.\n+   *\n+   * <p>If this is greater than the user's total cost, set their workspaces to active. Note:\n+   * lowering the limit below total cost will NOT set the workspaces to inactive.\n+   * checkFreeTierBillingUsage() will do this as part of the next cron run.\n+   *\n+   * @param user the user as represented in our database\n+   * @param newDollarLimit the US dollar amount, represented as a double\n+   * @return whether an override was set\n+   */\n+  public boolean maybeSetDollarLimitOverride(DbUser user, double newDollarLimit) {\n+    final Double previousLimitMaybe = user.getFreeTierCreditsLimitDollarsOverride();\n+\n+    if (previousLimitMaybe != null\n+        || costsDiffer(\n+            newDollarLimit, workbenchConfigProvider.get().billing.defaultFreeCreditsDollarLimit)) {\n+\n+      // TODO: prevent setting this limit directly except in this method?\n+      user.setFreeTierCreditsLimitDollarsOverride(newDollarLimit);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5MDcyMg=="}, "originalCommit": {"oid": "87ab893c65de603cf4bec15d49083cb081a5f2c2"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzE4MDUyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbUser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzozNDozM1rOG3irmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjoxNzowNVrOG36GPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5MzA4MQ==", "bodyText": "We should never have an enumeration where some states include others. This is icky. DEVELOPER should be its own, separate concept then.\nAdditionally, DEVELOPER is a bad name for this. I don't have or want authorities on PROD to do things like this.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r460893081", "createdAt": "2020-07-27T13:34:33Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbUser.java", "diffHunk": "@@ -301,6 +301,13 @@ public void setAuthorities(Set<Short> newAuthorities) {\n     this.authorities = newAuthorities;\n   }\n \n+  @Transient\n+  public boolean hasAuthority(Authority required) {\n+    // DEVELOPER is the super-authority which subsumes all others", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87ab893c65de603cf4bec15d49083cb081a5f2c2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NjczNQ==", "bodyText": "This replicates the existing Controller auth behavior.\nI would support removing it, but that's going to require a separate ticket and a larger conversation at a minimum.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r461276735", "createdAt": "2020-07-28T02:17:05Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbUser.java", "diffHunk": "@@ -301,6 +301,13 @@ public void setAuthorities(Set<Short> newAuthorities) {\n     this.authorities = newAuthorities;\n   }\n \n+  @Transient\n+  public boolean hasAuthority(Authority required) {\n+    // DEVELOPER is the super-authority which subsumes all others", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5MzA4MQ=="}, "originalCommit": {"oid": "87ab893c65de603cf4bec15d49083cb081a5f2c2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzE5MjM2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzozNzoyNlrOG3iy-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjo1ODoxMFrOG36yXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5NDk2OQ==", "bodyText": "I don't like the isNewProfile flag here, because the Diff should already be able to tell us that. E.g. something like boolean isNewObject(Diff diff). Then each validate method could just take in a Diff and a string for the field name, or we could have a validateFields(Diff diff, Set<String> fieldNames). there are lots of if statements here currently, which are easily breakable by maintainers.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r460894969", "createdAt": "2020-07-27T13:37:26Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -381,47 +395,72 @@ private void validateAreaOfResearch(Profile profile) throws BadRequestException\n    * object.\n    *\n    * @param updatedProfile\n-   * @param prevProfile\n+   * @param previousProfile\n    * @throws BadRequestException\n    */\n   @VisibleForTesting\n-  public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile prevProfile)\n+  public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile previousProfile) {\n+\n+    final boolean isNewProfile = previousProfile == null;\n+    final Diff diff = javers.compare(previousProfile, updatedProfile);\n+\n+    validateProfileForCorrectness(updatedProfile, isNewProfile, diff);\n+\n+    if (userProvider.get().hasAuthority(Authority.ACCESS_CONTROL_ADMIN)) {\n+      validateChangesAllowedByAdmin(diff);\n+    } else {\n+      validateChangesAllowedByUser(diff);\n+    }\n+  }\n+\n+  private void validateProfileForCorrectness(Profile profile, boolean isNewProfile, Diff diff)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87ab893c65de603cf4bec15d49083cb081a5f2c2"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4ODAyOA==", "bodyText": "ok fine: isNewProfile is now a function of the Diff.\nI'm keeping the ifs because I like how they make the intent explicit.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r461288028", "createdAt": "2020-07-28T02:58:10Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -381,47 +395,72 @@ private void validateAreaOfResearch(Profile profile) throws BadRequestException\n    * object.\n    *\n    * @param updatedProfile\n-   * @param prevProfile\n+   * @param previousProfile\n    * @throws BadRequestException\n    */\n   @VisibleForTesting\n-  public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile prevProfile)\n+  public void validateProfile(@Nonnull Profile updatedProfile, @Nullable Profile previousProfile) {\n+\n+    final boolean isNewProfile = previousProfile == null;\n+    final Diff diff = javers.compare(previousProfile, updatedProfile);\n+\n+    validateProfileForCorrectness(updatedProfile, isNewProfile, diff);\n+\n+    if (userProvider.get().hasAuthority(Authority.ACCESS_CONTROL_ADMIN)) {\n+      validateChangesAllowedByAdmin(diff);\n+    } else {\n+      validateChangesAllowedByUser(diff);\n+    }\n+  }\n+\n+  private void validateProfileForCorrectness(Profile profile, boolean isNewProfile, Diff diff)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5NDk2OQ=="}, "originalCommit": {"oid": "87ab893c65de603cf4bec15d49083cb081a5f2c2"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDE1Nzc3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMTowMDozMFrOG4k3ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMTowMDozMFrOG4k3ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3NzQ0NQ==", "bodyText": "This is new, and it works because it calls the query with JOIN FETCH", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r461977445", "createdAt": "2020-07-29T01:00:30Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -1022,4 +1024,13 @@ public void updateBypassTime(long userDatabaseId, AccessBypassRequest accessBypa\n             \"There is no access module named: \" + accessBypassRequest.getModuleName().toString());\n     }\n   }\n+\n+  @Override\n+  public boolean hasAuthority(long userId, Authority required) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "561eca062537f072cb9a00d883fdee041e292afe"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjgxNDAwOnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/workbench-api.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNToyOTowNFrOG49-tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNToyOTowNFrOG49-tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM4ODkxOQ==", "bodyText": "aside: we should start using a yaml partial to bring these common codes in if we want to declare them everywhere. I'm not sure there's much percentage in doing it for all the endpoints.", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r462388919", "createdAt": "2020-07-29T15:29:04Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -1128,6 +1128,33 @@ paths:\n           description: No module exists with name submitted\n           schema:\n             \"$ref\": \"#/definitions/ErrorResponse\"\n+  \"/v1/admin/users/updateAccount\":\n+    post:\n+      tags:\n+        - profile\n+      consumes:\n+        - application/json\n+      description: 'Updates a subset of a user''s account metadata, as defined by the AccountPropertyUpdate object.  Requires ACCESS_CONTROL_ADMIN authority.'\n+      parameters:\n+        - in: body\n+          name: request\n+          description: The admin edit request to perform on a user\n+          schema:\n+            \"$ref\": \"#/definitions/AccountPropertyUpdate\"\n+      operationId: updateAccountProperties\n+      responses:\n+        200:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac91daa055cb6470a36df01e8db2407078a58ee7"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjgyODkxOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/billing/FreeTierBillingServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTozMjoxOFrOG4-IAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTozMjoxOFrOG4-IAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5MTI5Nw==", "bodyText": "I've been using .isWithin(100.0).of(time_millis) for millisecond comparisons. Have to cast the arg to assertThat() to double to make that work. I guess we could make an instant-valued version...", "url": "https://github.com/all-of-us/workbench/pull/3785#discussion_r462391297", "createdAt": "2020-07-29T15:32:18Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/billing/FreeTierBillingServiceTest.java", "diffHunk": "@@ -329,27 +335,112 @@ public void checkFreeTierBillingUsage_workspaceMissingCreatorNoNPE() {\n   }\n \n   @Test\n-  public void checkFreeTierBillingUsage_override() throws MessagingException {\n+  public void maybeSetDollarLimitOverride_true() {\n     workbenchConfig.billing.defaultFreeCreditsDollarLimit = 100.0;\n-    doReturn(mockBQTableSingleResult(100.01)).when(bigQueryService).executeQuery(any());\n+    final DbUser user = createUser(SINGLE_WORKSPACE_TEST_USER);\n+    assertThat(user.getLastModifiedTime()).isNull();\n+\n+    // we update the user and should see this last modified time\n+    final Instant time2 = START_INSTANT.plusSeconds(1000);\n+    CLOCK.setInstant(time2);\n+\n+    assertThat(freeTierBillingService.maybeSetDollarLimitOverride(user, 200.0)).isTrue();\n+    verify(mockUserServiceAuditor)\n+        .fireSetFreeTierDollarLimitOverride(user.getUserId(), null, 200.0);\n+    assertWithinBillingTolerance(freeTierBillingService.getUserFreeTierDollarLimit(user), 200.0);\n+    assertThat(userDao.findUserByUserId(user.getUserId()).getLastModifiedTime())\n+        .isEqualTo(new Timestamp(time2.toEpochMilli()));\n+\n+    // we update the user again and should see this new last modified time\n+    final Instant time3 = START_INSTANT.plusSeconds(2000);\n+    CLOCK.setInstant(time3);\n+\n+    assertThat(freeTierBillingService.maybeSetDollarLimitOverride(user, 100.0)).isTrue();\n+    verify(mockUserServiceAuditor)\n+        .fireSetFreeTierDollarLimitOverride(user.getUserId(), 200.0, 100.0);\n+    assertWithinBillingTolerance(freeTierBillingService.getUserFreeTierDollarLimit(user), 100.0);\n+    assertThat(userDao.findUserByUserId(user.getUserId()).getLastModifiedTime())\n+        .isEqualTo(new Timestamp(time3.toEpochMilli()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac91daa055cb6470a36df01e8db2407078a58ee7"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2427, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}