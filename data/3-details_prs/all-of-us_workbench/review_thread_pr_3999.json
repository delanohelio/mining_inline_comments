{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NzcyMDM0", "number": 3999, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozMDozMFrOEjQ49w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0NzowNVrOEjRPdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDEyMzQzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/AdminAuditorImpl.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozMDozMFrOHRhmXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTowNjoyMFrOHRizRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzODMzMg==", "bodyText": "So far the convention has been snake_case for property names, though to be fair I cut them up in the client for display. I have a slight preference for consistency on the DB side.", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488138332", "createdAt": "2020-09-14T18:30:30Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/AdminAuditorImpl.kt", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.pmiops.workbench.actionaudit.auditors\n+\n+import org.pmiops.workbench.actionaudit.ActionAuditEvent\n+import org.pmiops.workbench.actionaudit.ActionAuditService\n+import org.pmiops.workbench.actionaudit.ActionType\n+import org.pmiops.workbench.actionaudit.AgentType\n+import org.pmiops.workbench.actionaudit.TargetType\n+import org.pmiops.workbench.db.model.DbUser\n+import org.pmiops.workbench.model.AccessReason\n+import org.springframework.beans.factory.annotation.Autowired\n+import org.springframework.beans.factory.annotation.Qualifier\n+import org.springframework.stereotype.Service\n+import java.time.Clock\n+import java.util.logging.Logger\n+import javax.inject.Provider\n+\n+@Service\n+class AdminAuditorImpl @Autowired\n+constructor(\n+    private val userProvider: Provider<DbUser>,\n+    private val actionAuditService: ActionAuditService,\n+    private val clock: Clock,\n+    @Qualifier(\"ACTION_ID\") private val actionIdProvider: Provider<String>\n+) : AdminAuditor {\n+\n+    override fun fireViewNotebookAction(workspaceNamespace: String, workspaceName: String, accessReason: AccessReason, notebookFilename: String) {\n+        val dbUser = userProvider.get()\n+        val actionId = actionIdProvider.get()\n+\n+        val props = mapOf(\n+            \"Workspace Namespace\" to workspaceNamespace,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1ODAyMg==", "bodyText": "fixed", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488158022", "createdAt": "2020-09-14T19:06:20Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/AdminAuditorImpl.kt", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.pmiops.workbench.actionaudit.auditors\n+\n+import org.pmiops.workbench.actionaudit.ActionAuditEvent\n+import org.pmiops.workbench.actionaudit.ActionAuditService\n+import org.pmiops.workbench.actionaudit.ActionType\n+import org.pmiops.workbench.actionaudit.AgentType\n+import org.pmiops.workbench.actionaudit.TargetType\n+import org.pmiops.workbench.db.model.DbUser\n+import org.pmiops.workbench.model.AccessReason\n+import org.springframework.beans.factory.annotation.Autowired\n+import org.springframework.beans.factory.annotation.Qualifier\n+import org.springframework.stereotype.Service\n+import java.time.Clock\n+import java.util.logging.Logger\n+import javax.inject.Provider\n+\n+@Service\n+class AdminAuditorImpl @Autowired\n+constructor(\n+    private val userProvider: Provider<DbUser>,\n+    private val actionAuditService: ActionAuditService,\n+    private val clock: Clock,\n+    @Qualifier(\"ACTION_ID\") private val actionIdProvider: Provider<String>\n+) : AdminAuditor {\n+\n+    override fun fireViewNotebookAction(workspaceNamespace: String, workspaceName: String, accessReason: AccessReason, notebookFilename: String) {\n+        val dbUser = userProvider.get()\n+        val actionId = actionIdProvider.get()\n+\n+        val props = mapOf(\n+            \"Workspace Namespace\" to workspaceNamespace,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzODMzMg=="}, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDEyNzE4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/AdminAuditorImpl.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozMTozNVrOHRhoig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTowNjoxMVrOHRizAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzODg5MA==", "bodyText": "nit: please use a single timestamp for the whole action (i.e. all events under the action id). There are places where I think I make that assumption.", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488138890", "createdAt": "2020-09-14T18:31:35Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/AdminAuditorImpl.kt", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.pmiops.workbench.actionaudit.auditors\n+\n+import org.pmiops.workbench.actionaudit.ActionAuditEvent\n+import org.pmiops.workbench.actionaudit.ActionAuditService\n+import org.pmiops.workbench.actionaudit.ActionType\n+import org.pmiops.workbench.actionaudit.AgentType\n+import org.pmiops.workbench.actionaudit.TargetType\n+import org.pmiops.workbench.db.model.DbUser\n+import org.pmiops.workbench.model.AccessReason\n+import org.springframework.beans.factory.annotation.Autowired\n+import org.springframework.beans.factory.annotation.Qualifier\n+import org.springframework.stereotype.Service\n+import java.time.Clock\n+import java.util.logging.Logger\n+import javax.inject.Provider\n+\n+@Service\n+class AdminAuditorImpl @Autowired\n+constructor(\n+    private val userProvider: Provider<DbUser>,\n+    private val actionAuditService: ActionAuditService,\n+    private val clock: Clock,\n+    @Qualifier(\"ACTION_ID\") private val actionIdProvider: Provider<String>\n+) : AdminAuditor {\n+\n+    override fun fireViewNotebookAction(workspaceNamespace: String, workspaceName: String, accessReason: AccessReason, notebookFilename: String) {\n+        val dbUser = userProvider.get()\n+        val actionId = actionIdProvider.get()\n+\n+        val props = mapOf(\n+            \"Workspace Namespace\" to workspaceNamespace,\n+            \"Workspace Name\" to workspaceName,\n+            \"Notebook Name\" to notebookFilename,\n+            \"Access Reason\" to accessReason.reason\n+        )\n+\n+        val events = props.map {\n+            ActionAuditEvent(\n+                    actionId = actionId,\n+                    actionType = ActionType.VIEW,\n+                    agentType = AgentType.ADMINISTRATOR,\n+                    agentEmailMaybe = dbUser.username,\n+                    agentIdMaybe = dbUser.userId,\n+                    targetType = TargetType.NOTEBOOK,\n+                    targetPropertyMaybe = it.key,\n+                    newValueMaybe = it.value,\n+                    timestamp = clock.millis()) }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1Nzk1NA==", "bodyText": "fixed", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488157954", "createdAt": "2020-09-14T19:06:11Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/AdminAuditorImpl.kt", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.pmiops.workbench.actionaudit.auditors\n+\n+import org.pmiops.workbench.actionaudit.ActionAuditEvent\n+import org.pmiops.workbench.actionaudit.ActionAuditService\n+import org.pmiops.workbench.actionaudit.ActionType\n+import org.pmiops.workbench.actionaudit.AgentType\n+import org.pmiops.workbench.actionaudit.TargetType\n+import org.pmiops.workbench.db.model.DbUser\n+import org.pmiops.workbench.model.AccessReason\n+import org.springframework.beans.factory.annotation.Autowired\n+import org.springframework.beans.factory.annotation.Qualifier\n+import org.springframework.stereotype.Service\n+import java.time.Clock\n+import java.util.logging.Logger\n+import javax.inject.Provider\n+\n+@Service\n+class AdminAuditorImpl @Autowired\n+constructor(\n+    private val userProvider: Provider<DbUser>,\n+    private val actionAuditService: ActionAuditService,\n+    private val clock: Clock,\n+    @Qualifier(\"ACTION_ID\") private val actionIdProvider: Provider<String>\n+) : AdminAuditor {\n+\n+    override fun fireViewNotebookAction(workspaceNamespace: String, workspaceName: String, accessReason: AccessReason, notebookFilename: String) {\n+        val dbUser = userProvider.get()\n+        val actionId = actionIdProvider.get()\n+\n+        val props = mapOf(\n+            \"Workspace Namespace\" to workspaceNamespace,\n+            \"Workspace Name\" to workspaceName,\n+            \"Notebook Name\" to notebookFilename,\n+            \"Access Reason\" to accessReason.reason\n+        )\n+\n+        val events = props.map {\n+            ActionAuditEvent(\n+                    actionId = actionId,\n+                    actionType = ActionType.VIEW,\n+                    agentType = AgentType.ADMINISTRATOR,\n+                    agentEmailMaybe = dbUser.username,\n+                    agentIdMaybe = dbUser.userId,\n+                    targetType = TargetType.NOTEBOOK,\n+                    targetPropertyMaybe = it.key,\n+                    newValueMaybe = it.value,\n+                    timestamp = clock.millis()) }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzODg5MA=="}, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDEzMjEzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozMzowM1rOHRhrmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozMzowM1rOHRhrmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzOTY3NA==", "bodyText": "Please update the PR description with the general approach here. I didn't expect to see FC cloud changes, but it makes sense.", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488139674", "createdAt": "2020-09-14T18:33:03Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudConfig.java", "diffHunk": "@@ -38,6 +38,9 @@\n   public static final String SERVICE_ACCOUNT_GROUPS_API = \"serviceAccountGroupsApi\";\n   public static final String SERVICE_ACCOUNT_WORKSPACE_API = \"workspaceAclsApi\";\n   public static final String END_USER_WORKSPACE_API = \"workspacesApi\";\n+  public static final String SERVICE_ACCOUNT_STATIC_NOTEBOOKS_API =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDEzNTQzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozNDowNVrOHRhtuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDoyMDowOVrOHRlJ4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MDIxOQ==", "bodyText": "Looks like these three lines could be their own helper function called by both beans.", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488140219", "createdAt": "2020-09-14T18:34:05Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudConfig.java", "diffHunk": "@@ -91,15 +94,24 @@ public WorkspacesApi workspacesApiAcls(\n     return api;\n   }\n \n-  @Bean\n+  @Bean(name = END_USER_STATIC_NOTEBOOKS_API)\n   @RequestScope(proxyMode = ScopedProxyMode.DEFAULT)\n-  public StaticNotebooksApi staticNotebooksApi(\n+  public StaticNotebooksApi endUserStaticNotebooksApi(\n       @Qualifier(END_USER_API_CLIENT) ApiClient apiClient) {\n     StaticNotebooksApi api = new StaticNotebooksApi();\n     api.setApiClient(apiClient);\n     return api;\n   }\n \n+  @Bean(name = SERVICE_ACCOUNT_STATIC_NOTEBOOKS_API)\n+  @RequestScope(proxyMode = ScopedProxyMode.DEFAULT)\n+  public StaticNotebooksApi serviceAccountStaticNotebooksApi(\n+      @Qualifier(SERVICE_ACCOUNT_API_CLIENT) ApiClient apiClient) {\n+    StaticNotebooksApi api = new StaticNotebooksApi();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1ODcyMQ==", "bodyText": "I'm not sure that gets us much", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488158721", "createdAt": "2020-09-14T19:07:40Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudConfig.java", "diffHunk": "@@ -91,15 +94,24 @@ public WorkspacesApi workspacesApiAcls(\n     return api;\n   }\n \n-  @Bean\n+  @Bean(name = END_USER_STATIC_NOTEBOOKS_API)\n   @RequestScope(proxyMode = ScopedProxyMode.DEFAULT)\n-  public StaticNotebooksApi staticNotebooksApi(\n+  public StaticNotebooksApi endUserStaticNotebooksApi(\n       @Qualifier(END_USER_API_CLIENT) ApiClient apiClient) {\n     StaticNotebooksApi api = new StaticNotebooksApi();\n     api.setApiClient(apiClient);\n     return api;\n   }\n \n+  @Bean(name = SERVICE_ACCOUNT_STATIC_NOTEBOOKS_API)\n+  @RequestScope(proxyMode = ScopedProxyMode.DEFAULT)\n+  public StaticNotebooksApi serviceAccountStaticNotebooksApi(\n+      @Qualifier(SERVICE_ACCOUNT_API_CLIENT) ApiClient apiClient) {\n+    StaticNotebooksApi api = new StaticNotebooksApi();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MDIxOQ=="}, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE5NjU3Ng==", "bodyText": "it's easy to do and makes it obvious that it's the same bean but with different ApiClients.", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488196576", "createdAt": "2020-09-14T20:20:09Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudConfig.java", "diffHunk": "@@ -91,15 +94,24 @@ public WorkspacesApi workspacesApiAcls(\n     return api;\n   }\n \n-  @Bean\n+  @Bean(name = END_USER_STATIC_NOTEBOOKS_API)\n   @RequestScope(proxyMode = ScopedProxyMode.DEFAULT)\n-  public StaticNotebooksApi staticNotebooksApi(\n+  public StaticNotebooksApi endUserStaticNotebooksApi(\n       @Qualifier(END_USER_API_CLIENT) ApiClient apiClient) {\n     StaticNotebooksApi api = new StaticNotebooksApi();\n     api.setApiClient(apiClient);\n     return api;\n   }\n \n+  @Bean(name = SERVICE_ACCOUNT_STATIC_NOTEBOOKS_API)\n+  @RequestScope(proxyMode = ScopedProxyMode.DEFAULT)\n+  public StaticNotebooksApi serviceAccountStaticNotebooksApi(\n+      @Qualifier(SERVICE_ACCOUNT_API_CLIENT) ApiClient apiClient) {\n+    StaticNotebooksApi api = new StaticNotebooksApi();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MDIxOQ=="}, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDEzODU5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozNDo1NVrOHRhvpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTo1NDo0OVrOHRkW1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MDcwOQ==", "bodyText": "nit: change context to unused here and below.", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488140709", "createdAt": "2020-09-14T18:34:55Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudServiceImpl.java", "diffHunk": "@@ -471,7 +476,13 @@ public boolean isUserMemberOfGroup(String email, String groupName) {\n   @Override\n   public String staticNotebooksConvert(byte[] notebook) {\n     return retryHandler.run(\n-        (context) -> staticNotebooksApiProvider.get().convertNotebook(notebook));\n+        (context) -> endUserStaticNotebooksApiProvider.get().convertNotebook(notebook));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1Mzg4NA==", "bodyText": "the whole file uses this style.  I'm going to keep it like this", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488153884", "createdAt": "2020-09-14T18:58:57Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudServiceImpl.java", "diffHunk": "@@ -471,7 +476,13 @@ public boolean isUserMemberOfGroup(String email, String groupName) {\n   @Override\n   public String staticNotebooksConvert(byte[] notebook) {\n     return retryHandler.run(\n-        (context) -> staticNotebooksApiProvider.get().convertNotebook(notebook));\n+        (context) -> endUserStaticNotebooksApiProvider.get().convertNotebook(notebook));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MDcwOQ=="}, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE4MzUwOA==", "bodyText": "ok", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488183508", "createdAt": "2020-09-14T19:54:49Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudServiceImpl.java", "diffHunk": "@@ -471,7 +476,13 @@ public boolean isUserMemberOfGroup(String email, String groupName) {\n   @Override\n   public String staticNotebooksConvert(byte[] notebook) {\n     return retryHandler.run(\n-        (context) -> staticNotebooksApiProvider.get().convertNotebook(notebook));\n+        (context) -> endUserStaticNotebooksApiProvider.get().convertNotebook(notebook));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MDcwOQ=="}, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDE0NzM4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/notebooks/NotebooksServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozNzoyN1rOHRh1Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozNzoyN1rOHRh1Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MjExNA==", "bodyText": "Huh. I'm surprised there's not a flag or something to avoid this.", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488142114", "createdAt": "2020-09-14T18:37:27Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/NotebooksServiceImpl.java", "diffHunk": "@@ -255,6 +255,24 @@ public String getReadOnlyHtml(\n     return PREVIEW_SANITIZER.sanitize(fireCloudService.staticNotebooksConvert(blob.getContent()));\n   }\n \n+  @Override\n+  public String adminGetReadOnlyHtml(\n+      String workspaceNamespace, String workspaceName, String notebookName) {\n+    String bucketName =\n+        fireCloudService\n+            .getWorkspaceAsService(workspaceNamespace, workspaceName)\n+            .getWorkspace()\n+            .getBucketName();\n+\n+    Blob blob = getBlobWithSizeConstraint(bucketName, notebookName);\n+    // We need to send a byte array so the ApiClient attaches the body as is instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDE1MDY2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozODoyN1rOHRh3Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTowNTo1NFrOHRiyUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MjYxOA==", "bodyText": "super-nit: I'd kind of expect the notebook name to come before the reason, as it's the third in a line of increasingly specific identifiers.", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488142618", "createdAt": "2020-09-14T18:38:27Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminService.java", "diffHunk": "@@ -26,4 +27,10 @@ WorkspaceAuditLogQueryResponse getAuditLogEntries(\n       Integer limit,\n       Long afterMillis,\n       @Nullable Long beforeMillisNullable);\n+\n+  String getReadOnlyNotebook(\n+      String workspaceNamespace,\n+      String workspaceName,\n+      AccessReason accessReason,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1Nzc3OQ==", "bodyText": "agreed, fixed", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488157779", "createdAt": "2020-09-14T19:05:54Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminService.java", "diffHunk": "@@ -26,4 +27,10 @@ WorkspaceAuditLogQueryResponse getAuditLogEntries(\n       Integer limit,\n       Long afterMillis,\n       @Nullable Long beforeMillisNullable);\n+\n+  String getReadOnlyNotebook(\n+      String workspaceNamespace,\n+      String workspaceName,\n+      AccessReason accessReason,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MjYxOA=="}, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDE2MDQ0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0MToxN1rOHRh8_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0MToxN1rOHRh8_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0NDEyNg==", "bodyText": "Can you please add a unit test on this service (and possibly notebooks service)? I'm especially interested in showing this serialization workaround.", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488144126", "createdAt": "2020-09-14T18:41:17Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminServiceImpl.java", "diffHunk": "@@ -220,6 +227,21 @@ public WorkspaceAuditLogQueryResponse getAuditLogEntries(\n         workspaceDatabaseId, limit, after, before);\n   }\n \n+  @Override\n+  public String getReadOnlyNotebook(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDE4MTAxOnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/workbench-api.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0NzowNVrOHRiJbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0NzowNVrOHRiJbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0NzMwOQ==", "bodyText": "Is the html base64 encoded or something? How do you get it to play nice with JSON otherwise?", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488147309", "createdAt": "2020-09-14T18:47:05Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -1697,6 +1697,30 @@ paths:\n           description: HTML Read Only version of the notebook\n           schema:\n             \"$ref\": \"#/definitions/ReadOnlyNotebookResponse\"\n+  \"/v1/admin/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/readonly\":\n+    parameters:\n+      - \"$ref\": \"#/parameters/workspaceNamespace\"\n+      - \"$ref\": \"#/parameters/workspaceId\"\n+    post:\n+      tags:\n+        - workspaceAdmin\n+      description: Get the HTML for a read only view of the notebook. RESEARCHER_DATA_VIEW authority required.\n+      operationId: adminReadOnlyNotebook\n+      parameters:\n+        - in: body\n+          name: accessReason\n+          required: true\n+          schema:\n+            \"$ref\": \"#/definitions/AccessReason\"\n+        - in: path\n+          name: notebookName\n+          required: true\n+          type: string\n+      responses:\n+        200:\n+          description: HTML Read Only version of the notebook\n+          schema:\n+            \"$ref\": \"#/definitions/ReadOnlyNotebookResponse\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4066, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}