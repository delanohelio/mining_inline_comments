{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NDE2NzI3", "number": 3131, "title": "[risk=no] A grab bag of small refactorings while doing other work", "bodyText": "Description:\n\nAbout half of ProfileController.updateProfile() deals with old-style Institutional Affiliations, so I moved that into its own method.\nThe shorter version of UserService.createUser() exists solely for AuthInterceptor's use, and the parameter list now matches what it knows about.\nCommonStorageEnumsTest did not comprehensively check for missing map values like StorageEnumsTest does.\nproject.rb connect-to-db now starts the local DB if it's not running\n\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-02-14T14:31:18Z", "url": "https://github.com/all-of-us/workbench/pull/3131", "merged": true, "mergeCommit": {"oid": "9fd429fcc95a4c6921467ff02caa466653f870ae"}, "closed": true, "closedAt": "2020-02-14T21:19:26Z", "author": {"login": "jmthibault79"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEQY__AH2gAyMzc1NDE2NzI3OmNiZWIyNzBmNWZjY2I2YWVmYWQxODI2OWQyNDQxNmU4NWIyMGIyN2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcEVwcdAFqTM1OTIwNDY3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cbeb270f5fccb6aefad18269d24416e85b20b27a", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/cbeb270f5fccb6aefad18269d24416e85b20b27a", "committedDate": "2020-02-14T14:27:34Z", "message": "Constrain AuthInterceptor's special userService.createUser() to what it actually uses and rename to username"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68d334fe53c65316706a363df49686c565048461", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/68d334fe53c65316706a363df49686c565048461", "committedDate": "2020-02-14T14:27:56Z", "message": "Split this off into its own function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/c629fb07582664af8dd0f3d2a165f301aed93ab7", "committedDate": "2020-02-14T14:28:06Z", "message": "Fix a gap in CommonStorageEnumsTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4OTg0Mjg5", "url": "https://github.com/all-of-us/workbench/pull/3131#pullrequestreview-358984289", "createdAt": "2020-02-14T14:38:14Z", "commit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDozODoxNFrOFp4ojA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDozODoxNFrOFp4ojA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2MzgyMA==", "bodyText": "we must have missed this while standardizing on the new name", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379463820", "createdAt": "2020-02-14T14:38:14Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserService.java", "diffHunk": "@@ -17,19 +17,13 @@\n \n   DbUser createServiceAccountUser(String email);\n \n-  DbUser createUser(\n-      String givenName,\n-      String familyName,\n-      String email,\n-      String contactEmail,\n-      String currentPosition,\n-      String organization,\n-      String areaOfResearch);\n+  // minimal version used by AuthInterceptor\n+  DbUser createUser(String givenName, String familyName, String userName);\n \n   DbUser createUser(\n       String givenName,\n       String familyName,\n-      String email,\n+      String userName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4OTg0OTY3", "url": "https://github.com/all-of-us/workbench/pull/3131#pullrequestreview-358984967", "createdAt": "2020-02-14T14:39:15Z", "commit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDozOToxNVrOFp4qeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDozOToxNVrOFp4qeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NDMxMg==", "bodyText": "The last 3 were always null", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379464312", "createdAt": "2020-02-14T14:39:15Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -290,27 +290,9 @@ public DbUser createServiceAccountUser(String username) {\n   }\n \n   @Override\n-  public DbUser createUser(\n-      String givenName,\n-      String familyName,\n-      String userName,\n-      String contactEmail,\n-      String currentPosition,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4OTg3MDIw", "url": "https://github.com/all-of-us/workbench/pull/3131#pullrequestreview-358987020", "createdAt": "2020-02-14T14:42:07Z", "commit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDo0MjowN1rOFp4wcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDo0MjowN1rOFp4wcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NTg0Mg==", "bodyText": "userInfo is a Google OAuth2 Userinfoplus object so \"email\" is correct from that perspective, though it's a \"userName\" to Workbench.", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379465842", "createdAt": "2020-02-14T14:42:07Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/interceptors/AuthInterceptor.java", "diffHunk": "@@ -155,18 +155,7 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons\n       // TODO(danrodney): start populating contact email in Google account, use it here.\n       user =\n           userService.createUser(\n-              userInfo.getGivenName(),\n-              userInfo.getFamilyName(),\n-              userInfo.getEmail(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4OTg3Mjgw", "url": "https://github.com/all-of-us/workbench/pull/3131#pullrequestreview-358987280", "createdAt": "2020-02-14T14:42:27Z", "commit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDo0MjoyN1rOFp4xHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDo0MjoyN1rOFp4xHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NjAxNQ==", "bodyText": "These are not used", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379466015", "createdAt": "2020-02-14T14:42:27Z", "author": {"login": "jmthibault79"}, "path": "common-api/src/main/java/org/pmiops/workbench/db/model/CommonStorageEnums.java", "diffHunk": "@@ -108,14 +108,6 @@ public static Short surveysToStorage(Surveys survey) {\n     return CLIENT_TO_STORAGE_SURVEY.get(survey);\n   }\n \n-  public static String surveyToSurveyId(Surveys survey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4OTg4Mzgz", "url": "https://github.com/all-of-us/workbench/pull/3131#pullrequestreview-358988383", "createdAt": "2020-02-14T14:43:57Z", "commit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDo0Mzo1N1rOFp40mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDo0Mzo1N1rOFp40mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NjkwNw==", "bodyText": "Is there a more elegant way?  I want to be sure to exclude only this one, for future-proofing", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379466907", "createdAt": "2020-02-14T14:43:57Z", "author": {"login": "jmthibault79"}, "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "diffHunk": "@@ -51,4 +55,52 @@ public void testBijectiveStorageMapping() {\n       assertThat(v).isEqualTo(fromStorage.apply(storageValue));\n     }\n   }\n+\n+  // domain ID is stringly-typed so special-case this\n+\n+  @Test\n+  public void testDomainIdBijectiveStorageMapping() {\n+    for (Domain v : Domain.values()) {\n+      String storageValue = CommonStorageEnums.domainToDomainId(v);\n+      assertWithMessage(\"unmapped enum value: \" + v).that(storageValue).isNotNull();\n+      assertThat(v).isEqualTo(CommonStorageEnums.domainIdToDomain(storageValue));\n+    }\n+  }\n+\n+  // copied from api/StorageEnumsTest because the above tests are not comprehensive\n+  @Test\n+  public void noMissingMapEntries() throws Exception {\n+    for (Field f : CommonStorageEnums.class.getDeclaredFields()) {\n+      if (f.getType() != BiMap.class) {\n+        continue;\n+      }\n+\n+      Class enumClass =\n+          (Class) ((ParameterizedType) f.getAnnotatedType().getType()).getActualTypeArguments()[0];\n+\n+      Method enumToShort = null;\n+      Method shortToEnum = null;\n+      for (Method m : CommonStorageEnums.class.getDeclaredMethods()) {\n+        if (m.getParameterTypes()[0].equals(enumClass)) {\n+          enumToShort = m;\n+        }\n+\n+        if (m.getReturnType().equals(enumClass)) {\n+          shortToEnum = m;\n+        }\n+      }\n+\n+      // stringly typed map - test with testDomainIdBijectiveStorageMapping instead\n+      if (enumToShort.getName().equals(\"domainIdToDomain\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MDE4MTY1", "url": "https://github.com/all-of-us/workbench/pull/3131#pullrequestreview-359018165", "createdAt": "2020-02-14T15:24:38Z", "commit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToyNDozOFrOFp6Nxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNTozNjowNFrOFp6nyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4OTczNA==", "bodyText": "Do we have a name for the old affiliations? Or did we give the new ones a different name?", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379489734", "createdAt": "2020-02-14T15:24:38Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -580,6 +580,18 @@ private boolean userHasEverLoggedIn(\n       // See RW-1488.\n       throw new BadRequestException(\"Changing email is not currently supported\");\n     }\n+    updateInstitutionalAffiliations(updatedProfile, user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MDI0Mw==", "bodyText": "Can you comment on the semantics/lifecycle keeping these in sync, and why we don't need to here?", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379490243", "createdAt": "2020-02-14T15:25:30Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -580,6 +580,18 @@ private boolean userHasEverLoggedIn(\n       // See RW-1488.\n       throw new BadRequestException(\"Changing email is not currently supported\");\n     }\n+    updateInstitutionalAffiliations(updatedProfile, user);\n+\n+    // This does not update the name in Google.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MTE2MQ==", "bodyText": "Yes. Sometimes the refactoring is smart enough to do what you want with these, but if one of the names is a substring of other identifiers, all heck breaks loose. Safer to risk leaving some local identifiers behind like this.", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379491161", "createdAt": "2020-02-14T15:27:01Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserService.java", "diffHunk": "@@ -17,19 +17,13 @@\n \n   DbUser createServiceAccountUser(String email);\n \n-  DbUser createUser(\n-      String givenName,\n-      String familyName,\n-      String email,\n-      String contactEmail,\n-      String currentPosition,\n-      String organization,\n-      String areaOfResearch);\n+  // minimal version used by AuthInterceptor\n+  DbUser createUser(String givenName, String familyName, String userName);\n \n   DbUser createUser(\n       String givenName,\n       String familyName,\n-      String email,\n+      String userName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2MzgyMA=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MjAxMA==", "bodyText": "I'm declaring shenanigans on this constructor. We need a builder.\nThere's no reason in Java 8+ I should ever have to see the word null, let alone 9 in a row. But that may be another ticket.\nIf you don't want a builder, then your shorter constructors need to call the longer ones with default methods.\nUser createUser(A a) {\n  return createUser(a, defaultB);\n}\n\nUser createUser(A a, B b) {\n  return createUser(a, b, defaultC);\n}\n// etc \n\nBut a builder is still much preferred.", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379492010", "createdAt": "2020-02-14T15:28:28Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -290,27 +290,9 @@ public DbUser createServiceAccountUser(String username) {\n   }\n \n   @Override\n-  public DbUser createUser(\n-      String givenName,\n-      String familyName,\n-      String userName,\n-      String contactEmail,\n-      String currentPosition,\n-      String organization,\n-      String areaOfResearch) {\n+  public DbUser createUser(String givenName, String familyName, String userName) {\n     return createUser(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NDA4OQ==", "bodyText": "Can you put that comment in the code and replace userInfo with something like googleOAuth2id?", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379494089", "createdAt": "2020-02-14T15:32:02Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/interceptors/AuthInterceptor.java", "diffHunk": "@@ -155,18 +155,7 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons\n       // TODO(danrodney): start populating contact email in Google account, use it here.\n       user =\n           userService.createUser(\n-              userInfo.getGivenName(),\n-              userInfo.getFamilyName(),\n-              userInfo.getEmail(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NTg0Mg=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NDg5Mw==", "bodyText": "CommonStorageEnums should throw IllegalArgumentException if it's not matched IMO. This assertion seems redundant; such checking is that method's job.", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379494893", "createdAt": "2020-02-14T15:33:23Z", "author": {"login": "jaycarlton"}, "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "diffHunk": "@@ -51,4 +55,52 @@ public void testBijectiveStorageMapping() {\n       assertThat(v).isEqualTo(fromStorage.apply(storageValue));\n     }\n   }\n+\n+  // domain ID is stringly-typed so special-case this\n+\n+  @Test\n+  public void testDomainIdBijectiveStorageMapping() {\n+    for (Domain v : Domain.values()) {\n+      String storageValue = CommonStorageEnums.domainToDomainId(v);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NjExMQ==", "bodyText": "This looks like a fun exercise, but it's way too abstract/reflexive for test code (or application code). Plus, I want to kill dbStorageEnums soon in favor of Lebowski Enums.\nCan we shelve this for another day? I'm happy to pair on the enum stuff. It's a bit funny looking at first, but I think you'll like it.", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379496111", "createdAt": "2020-02-14T15:35:34Z", "author": {"login": "jaycarlton"}, "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "diffHunk": "@@ -51,4 +55,52 @@ public void testBijectiveStorageMapping() {\n       assertThat(v).isEqualTo(fromStorage.apply(storageValue));\n     }\n   }\n+\n+  // domain ID is stringly-typed so special-case this\n+\n+  @Test\n+  public void testDomainIdBijectiveStorageMapping() {\n+    for (Domain v : Domain.values()) {\n+      String storageValue = CommonStorageEnums.domainToDomainId(v);\n+      assertWithMessage(\"unmapped enum value: \" + v).that(storageValue).isNotNull();\n+      assertThat(v).isEqualTo(CommonStorageEnums.domainIdToDomain(storageValue));\n+    }\n+  }\n+\n+  // copied from api/StorageEnumsTest because the above tests are not comprehensive\n+  @Test\n+  public void noMissingMapEntries() throws Exception {\n+    for (Field f : CommonStorageEnums.class.getDeclaredFields()) {\n+      if (f.getType() != BiMap.class) {\n+        continue;\n+      }\n+\n+      Class enumClass =\n+          (Class) ((ParameterizedType) f.getAnnotatedType().getType()).getActualTypeArguments()[0];\n+\n+      Method enumToShort = null;\n+      Method shortToEnum = null;\n+      for (Method m : CommonStorageEnums.class.getDeclaredMethods()) {\n+        if (m.getParameterTypes()[0].equals(enumClass)) {\n+          enumToShort = m;\n+        }\n+\n+        if (m.getReturnType().equals(enumClass)) {\n+          shortToEnum = m;\n+        }\n+      }\n+\n+      // stringly typed map - test with testDomainIdBijectiveStorageMapping instead\n+      if (enumToShort.getName().equals(\"domainIdToDomain\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NjkwNw=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NjM5Mg==", "bodyText": "You're just testing BiMap at this point I think.", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379496392", "createdAt": "2020-02-14T15:36:04Z", "author": {"login": "jaycarlton"}, "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "diffHunk": "@@ -51,4 +55,52 @@ public void testBijectiveStorageMapping() {\n       assertThat(v).isEqualTo(fromStorage.apply(storageValue));\n     }\n   }\n+\n+  // domain ID is stringly-typed so special-case this\n+\n+  @Test\n+  public void testDomainIdBijectiveStorageMapping() {\n+    for (Domain v : Domain.values()) {\n+      String storageValue = CommonStorageEnums.domainToDomainId(v);\n+      assertWithMessage(\"unmapped enum value: \" + v).that(storageValue).isNotNull();\n+      assertThat(v).isEqualTo(CommonStorageEnums.domainIdToDomain(storageValue));\n+    }\n+  }\n+\n+  // copied from api/StorageEnumsTest because the above tests are not comprehensive\n+  @Test\n+  public void noMissingMapEntries() throws Exception {\n+    for (Field f : CommonStorageEnums.class.getDeclaredFields()) {\n+      if (f.getType() != BiMap.class) {\n+        continue;\n+      }\n+\n+      Class enumClass =\n+          (Class) ((ParameterizedType) f.getAnnotatedType().getType()).getActualTypeArguments()[0];\n+\n+      Method enumToShort = null;\n+      Method shortToEnum = null;\n+      for (Method m : CommonStorageEnums.class.getDeclaredMethods()) {\n+        if (m.getParameterTypes()[0].equals(enumClass)) {\n+          enumToShort = m;\n+        }\n+\n+        if (m.getReturnType().equals(enumClass)) {\n+          shortToEnum = m;\n+        }\n+      }\n+\n+      // stringly typed map - test with testDomainIdBijectiveStorageMapping instead\n+      if (enumToShort.getName().equals(\"domainIdToDomain\")) {\n+        continue;\n+      }\n+\n+      for (Object e : enumClass.getEnumConstants()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7b8bfe006ed266f9877eec33c12b137167f657c", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/c7b8bfe006ed266f9877eec33c12b137167f657c", "committedDate": "2020-02-14T16:17:56Z", "message": "clarify the Userinfoplus OAUth2 situation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6341b923fdfa1ecef6053d2c3816d4217d972d2", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/c6341b923fdfa1ecef6053d2c3816d4217d972d2", "committedDate": "2020-02-14T16:21:01Z", "message": "./project.rb connect-to-db now starts local DB if necessary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b66d338162d95c97cbd8dee235afb2036d7cbe0", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/6b66d338162d95c97cbd8dee235afb2036d7cbe0", "committedDate": "2020-02-14T16:28:34Z", "message": "forgot the test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11fbb814414c49c985e48ca1718b80660413e546", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/11fbb814414c49c985e48ca1718b80660413e546", "committedDate": "2020-02-14T16:32:22Z", "message": "comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTY3ODc4", "url": "https://github.com/all-of-us/workbench/pull/3131#pullrequestreview-359167878", "createdAt": "2020-02-14T19:26:21Z", "commit": {"oid": "11fbb814414c49c985e48ca1718b80660413e546"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToyNjoyMlrOFqBOsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToyNjoyMlrOFqBOsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwNDY1Nw==", "bodyText": "Nice", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379604657", "createdAt": "2020-02-14T19:26:22Z", "author": {"login": "s-rubenstein"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -505,7 +505,8 @@ def run_gradle(cmd_name, args)\n \n def connect_to_db()\n   common = Common.new\n-\n+  common.status \"Starting database if necessary...\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11fbb814414c49c985e48ca1718b80660413e546"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjA0Njc3", "url": "https://github.com/all-of-us/workbench/pull/3131#pullrequestreview-359204677", "createdAt": "2020-02-14T20:36:34Z", "commit": {"oid": "11fbb814414c49c985e48ca1718b80660413e546"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDozNjozNFrOFqC-KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDo0MjoyOVrOFqDGrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMzE5Mw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379633193", "createdAt": "2020-02-14T20:36:34Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -580,6 +580,18 @@ private boolean userHasEverLoggedIn(\n       // See RW-1488.\n       throw new BadRequestException(\"Changing email is not currently supported\");\n     }\n+    updateInstitutionalAffiliations(updatedProfile, user);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4OTczNA=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMzc2NA==", "bodyText": "We need to be careful moving the audit stuff like fireUpdateAction(). This looks right though. Can you please verify we still get the events written to the audit stream?", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379633764", "createdAt": "2020-02-14T20:38:07Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -580,6 +580,18 @@ private boolean userHasEverLoggedIn(\n       // See RW-1488.\n       throw new BadRequestException(\"Changing email is not currently supported\");\n     }\n+    updateInstitutionalAffiliations(updatedProfile, user);\n+\n+    // This does not update the name in Google.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5MDI0Mw=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzNTIyNQ==", "bodyText": "Some more English comments on what each chunk is doing would help. Most of us don't use these kinds of functions every day.", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379635225", "createdAt": "2020-02-14T20:42:03Z", "author": {"login": "jaycarlton"}, "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "diffHunk": "@@ -51,4 +55,52 @@ public void testBijectiveStorageMapping() {\n       assertThat(v).isEqualTo(fromStorage.apply(storageValue));\n     }\n   }\n+\n+  // domain ID is stringly-typed so special-case this\n+\n+  @Test\n+  public void testDomainIdBijectiveStorageMapping() {\n+    for (Domain v : Domain.values()) {\n+      String storageValue = CommonStorageEnums.domainToDomainId(v);\n+      assertWithMessage(\"unmapped enum value: \" + v).that(storageValue).isNotNull();\n+      assertThat(v).isEqualTo(CommonStorageEnums.domainIdToDomain(storageValue));\n+    }\n+  }\n+\n+  // copied from api/StorageEnumsTest because the above tests are not comprehensive\n+  @Test\n+  public void noMissingMapEntries() throws Exception {\n+    for (Field f : CommonStorageEnums.class.getDeclaredFields()) {\n+      if (f.getType() != BiMap.class) {\n+        continue;\n+      }\n+\n+      Class enumClass =\n+          (Class) ((ParameterizedType) f.getAnnotatedType().getType()).getActualTypeArguments()[0];\n+\n+      Method enumToShort = null;\n+      Method shortToEnum = null;\n+      for (Method m : CommonStorageEnums.class.getDeclaredMethods()) {\n+        if (m.getParameterTypes()[0].equals(enumClass)) {\n+          enumToShort = m;\n+        }\n+\n+        if (m.getReturnType().equals(enumClass)) {\n+          shortToEnum = m;\n+        }\n+      }\n+\n+      // stringly typed map - test with testDomainIdBijectiveStorageMapping instead\n+      if (enumToShort.getName().equals(\"domainIdToDomain\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2NjkwNw=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzNTM3Mw==", "bodyText": "But why did your new enum maps need to go in common at all?", "url": "https://github.com/all-of-us/workbench/pull/3131#discussion_r379635373", "createdAt": "2020-02-14T20:42:29Z", "author": {"login": "jaycarlton"}, "path": "common-api/src/test/java/org/pmiops/workbench/db/model/CommonStorageEnumsTest.java", "diffHunk": "@@ -51,4 +55,52 @@ public void testBijectiveStorageMapping() {\n       assertThat(v).isEqualTo(fromStorage.apply(storageValue));\n     }\n   }\n+\n+  // domain ID is stringly-typed so special-case this\n+\n+  @Test\n+  public void testDomainIdBijectiveStorageMapping() {\n+    for (Domain v : Domain.values()) {\n+      String storageValue = CommonStorageEnums.domainToDomainId(v);\n+      assertWithMessage(\"unmapped enum value: \" + v).that(storageValue).isNotNull();\n+      assertThat(v).isEqualTo(CommonStorageEnums.domainIdToDomain(storageValue));\n+    }\n+  }\n+\n+  // copied from api/StorageEnumsTest because the above tests are not comprehensive\n+  @Test\n+  public void noMissingMapEntries() throws Exception {\n+    for (Field f : CommonStorageEnums.class.getDeclaredFields()) {\n+      if (f.getType() != BiMap.class) {\n+        continue;\n+      }\n+\n+      Class enumClass =\n+          (Class) ((ParameterizedType) f.getAnnotatedType().getType()).getActualTypeArguments()[0];\n+\n+      Method enumToShort = null;\n+      Method shortToEnum = null;\n+      for (Method m : CommonStorageEnums.class.getDeclaredMethods()) {\n+        if (m.getParameterTypes()[0].equals(enumClass)) {\n+          enumToShort = m;\n+        }\n+\n+        if (m.getReturnType().equals(enumClass)) {\n+          shortToEnum = m;\n+        }\n+      }\n+\n+      // stringly typed map - test with testDomainIdBijectiveStorageMapping instead\n+      if (enumToShort.getName().equals(\"domainIdToDomain\")) {\n+        continue;\n+      }\n+\n+      for (Object e : enumClass.getEnumConstants()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ5NjM5Mg=="}, "originalCommit": {"oid": "c629fb07582664af8dd0f3d2a165f301aed93ab7"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3577, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}