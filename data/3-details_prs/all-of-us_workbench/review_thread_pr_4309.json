{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNjQxMjA4", "number": 4309, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMzowMzoxNVrOE62snw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMzowMzoxNVrOE62snw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTQ5MDIzOnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/search-group-list/search-group-list.component.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMzowMzoxNVrOH2KzTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMzowMzoxNVrOH2KzTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU2MjEyNQ==", "bodyText": "This is the only intentional change, rest are indentation changes.", "url": "https://github.com/all-of-us/workbench/pull/4309#discussion_r526562125", "createdAt": "2020-11-19T03:03:15Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/cohort-search/search-group-list/search-group-list.component.tsx", "diffHunk": "@@ -120,93 +123,97 @@ interface Props {\n   role: keyof SearchRequest;\n   updated: number;\n   updateRequest: Function;\n+  workspace: WorkspaceData;\n+  cdrVersionListResponse: CdrVersionListResponse;\n }\n \n interface State {\n   criteriaMenuOptions: any;\n   index: number;\n   loadingMenuOptions: boolean;\n }\n+const SearchGroupList = fp.flow(withCurrentWorkspace(), withCdrVersions())(\n+  class extends React.Component<Props, State> {\n+    private criteriaMenu: any;\n+    private subscription: Subscription;\n+    constructor(props: Props) {\n+      super(props);\n+      this.state = {\n+        criteriaMenuOptions: {programTypes: [], domainTypes: []},\n+        index: 0,\n+        loadingMenuOptions: false\n+      };\n+    }\n \n-export class SearchGroupList extends React.Component<Props, State> {\n-  private criteriaMenu: any;\n-  private subscription: Subscription;\n-  constructor(props: Props) {\n-    super(props);\n-    this.state = {\n-      criteriaMenuOptions: {programTypes: [], domainTypes: []},\n-      index: 0,\n-      loadingMenuOptions: false\n-    };\n-  }\n-\n-  componentDidMount(): void {\n-    const {role} = this.props;\n-    const {cdrVersionId} = currentWorkspaceStore.getValue();\n-    this.subscription = criteriaMenuOptionsStore.subscribe(options => {\n-      if (role === 'includes' && !options[cdrVersionId]) {\n-        this.getMenuOptions();\n-      } else if (!!options[cdrVersionId]) {\n-        this.setState({criteriaMenuOptions: options[cdrVersionId]});\n+    componentDidMount(): void {\n+      const {role} = this.props;\n+      const {cdrVersionId} = currentWorkspaceStore.getValue();\n+      this.subscription = criteriaMenuOptionsStore.subscribe(options => {\n+        if (role === 'includes' && !options[cdrVersionId]) {\n+          this.getMenuOptions();\n+        } else if (!!options[cdrVersionId]) {\n+          this.setState({criteriaMenuOptions: options[cdrVersionId]});\n+        }\n+      });\n+      if (role === 'excludes') {\n+        this.subscription.add(\n+          searchRequestStore.subscribe(sr => this.setState({index: sr.includes.length + 1})));\n       }\n-    });\n-    if (role === 'excludes') {\n-      this.subscription.add(searchRequestStore.subscribe(sr => this.setState({index: sr.includes.length + 1})));\n     }\n-  }\n \n-  componentWillUnmount(): void {\n-    this.subscription.unsubscribe();\n-  }\n+    componentWillUnmount(): void {\n+      this.subscription.unsubscribe();\n+    }\n \n-  getMenuOptions() {\n-    this.setState({loadingMenuOptions: true});\n-    const {cdrVersionId} = currentWorkspaceStore.getValue();\n-    const criteriaMenuOptions = criteriaMenuOptionsStore.getValue();\n-    cohortBuilderApi().findCriteriaMenuOptions(+cdrVersionId).then(res => {\n-      criteriaMenuOptions[cdrVersionId] = res.items.reduce((acc, opt) => {\n-        const {domain, types} = opt;\n-        if (PROGRAM_TYPES.includes(Domain[domain]) &&\n-          !(!serverConfigStore.getValue().enableFitbit && domain === Domain.FITBIT.toString())) {\n-          const option = {\n-            name: domainToTitle(domain),\n-            domain,\n-            type: types[0].type,\n-            standard: types[0].standardFlags[0].standard,\n-            order: PROGRAM_TYPES.indexOf(Domain[domain])\n-          };\n-          if (domain === Domain[Domain.PERSON]) {\n-            option['children'] = types.map(subopt => ({name: typeToTitle(subopt.type), domain, type: subopt.type}));\n+    getMenuOptions() {\n+      this.setState({loadingMenuOptions: true});\n+      const {workspace, cdrVersionListResponse} = this.props;\n+      const {cdrVersionId} = workspace;\n+      const criteriaMenuOptions = criteriaMenuOptionsStore.getValue();\n+      cohortBuilderApi().findCriteriaMenuOptions(+cdrVersionId).then(res => {\n+        criteriaMenuOptions[cdrVersionId] = res.items.reduce((acc, opt) => {\n+          const {domain, types} = opt;\n+          if (PROGRAM_TYPES.includes(Domain[domain]) &&\n+          !(!getCdrVersion(workspace, cdrVersionListResponse).hasFitbitData && domain === Domain.FITBIT.toString())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c504dfd28beb0cb964a5e95ee1cf93ee068521c8"}, "originalPosition": 121}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3766, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}