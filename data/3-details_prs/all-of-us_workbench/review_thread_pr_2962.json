{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4ODEzNTk5", "number": 2962, "reviewThreads": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMToxODoxM1rODVlBsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwMTo0MDoyMVrODWaxpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTUzMzI5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/config/CommonConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMToxODoxM1rOFZ4h2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo1Mzo1N1rOFa7rdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY4NDg5MQ==", "bodyText": "Some notes about the set of changes in the /config/ directory:\n\nGoogleCredential.Builder was removed because it's unused in the newer oauth2 package.\nChanges to RetryConfig, StoredCredentialsConfig (new file) and WebMvcConfig were all related to refactoring configs to better support shared config across MVC and integration test contexts.\nWhile digging into this code, I realized that WorkbenchEnvironment was only used in one place, by ServiceAccounts, and that with the newer oauth2 package we shouldn't need different behavior between local development and App Engine (I verified this by deploying to a personal app engine instance). So I removed this class entirely.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362684891", "createdAt": "2020-01-03T01:18:13Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/config/CommonConfig.java", "diffHunk": "@@ -1,15 +1,12 @@\n package org.pmiops.workbench.config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d025dbbdb73641f8aff0d2252397a2226b9db406"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg0OTg1MA==", "bodyText": "Is there an existing markdown doc these notes can migrate to? If not, I think it would be handy to have some high level coverage of some of these topics.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362849850", "createdAt": "2020-01-03T15:29:06Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/config/CommonConfig.java", "diffHunk": "@@ -1,15 +1,12 @@\n package org.pmiops.workbench.config;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY4NDg5MQ=="}, "originalCommit": {"oid": "d025dbbdb73641f8aff0d2252397a2226b9db406"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc4NTA3OQ==", "bodyText": "Agreed \u2013\u00a0there's still a wide-open task to create a set of high-level docs describing our conventions and patterns around Spring, service authentication, etc.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363785079", "createdAt": "2020-01-07T14:53:57Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/config/CommonConfig.java", "diffHunk": "@@ -1,15 +1,12 @@\n package org.pmiops.workbench.config;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY4NDg5MQ=="}, "originalCommit": {"oid": "d025dbbdb73641f8aff0d2252397a2226b9db406"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTUzODU2OnYy", "diffSide": "LEFT", "path": "api/src/test/java/org/pmiops/workbench/firecloud/FireCloudServiceImplTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMToyNDo0OVrOFZ4k6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjo0OTozMFrOFaEbHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY4NTY3NQ==", "bodyText": "I ultimately decided to remove this test... the calls to get impersonated credentials are fairly trivial uses of the newer oauth2 library that a unit test with mocked dependencies started to feel like much more trouble than it was worth. This code is being more effectively tested in the integration tests which actually verify that the credential exchange is working as expected when hitting live Google endpoints.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362685675", "createdAt": "2020-01-03T01:24:49Z", "author": {"login": "gjuggler"}, "path": "api/src/test/java/org/pmiops/workbench/firecloud/FireCloudServiceImplTest.java", "diffHunk": "@@ -197,21 +190,6 @@ public void testNihCallbackServerError() throws Exception {\n     service.postNihCallback(any());\n   }\n \n-  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d025dbbdb73641f8aff0d2252397a2226b9db406"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3OTc3NA==", "bodyText": "For me, the value in this kind of test is just live documentation rather than coverage. Also, if there are any failure modes (like when failing to refresh), it might be good to demonstrate what is expected to happen.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362879774", "createdAt": "2020-01-03T16:49:30Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/firecloud/FireCloudServiceImplTest.java", "diffHunk": "@@ -197,21 +190,6 @@ public void testNihCallbackServerError() throws Exception {\n     service.postNihCallback(any());\n   }\n \n-  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY4NTY3NQ=="}, "originalCommit": {"oid": "d025dbbdb73641f8aff0d2252397a2226b9db406"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTUzODg3OnYy", "diffSide": "LEFT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/CommandLineToolConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMToyNTozM1rOFZ4lIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMToyNTozM1rOFZ4lIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY4NTczMA==", "bodyText": "This was kind of a drive-by cleanup based on the TODO. Now that ServiceAccounts only holds static methods, it doesn't need to be awkwardly injected into places like this.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362685730", "createdAt": "2020-01-03T01:25:33Z", "author": {"login": "gjuggler"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/CommandLineToolConfig.java", "diffHunk": "@@ -42,23 +39,9 @@\n  */\n @Configuration\n @EnableAutoConfiguration\n-@Import({RetryConfig.class, CommonConfig.class})\n+@Import({RetryConfig.class, CommonConfig.class, CloudStorageServiceImpl.class})\n @EnableJpaRepositories({\"org.pmiops.workbench.db.dao\"})\n @EntityScan(\"org.pmiops.workbench.db.model\")\n-// Scan the google module, for CloudStorageService and DirectoryService beans.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d025dbbdb73641f8aff0d2252397a2226b9db406"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDQzNDg1OnYy", "diffSide": "LEFT", "path": "api/src/main/java/org/pmiops/workbench/config/WebMvcConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNDowMjowNFrOFaAq1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNToxMDo0OFrOFa8New==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjgxODI2Mg==", "bodyText": "The change to this method (now located in StoredCredentialsConfig) should be the only functional change in this PR. Instead of loading the gsuite-admin SA creds from the App Engine resource package, I decided to follow-up on my prior TODO and switch to loading them from GCS. What this effectively means is that each App Engine task will talk to GCS when the first API call is made that requires G Suite interactions (e.g. creating a user). This bean is singleton-scoped, so the credentials should be loaded and cached for the lifetime of each GAE task.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362818262", "createdAt": "2020-01-03T14:02:04Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/config/WebMvcConfig.java", "diffHunk": "@@ -66,56 +60,6 @@ public DbUser user(UserAuthentication userAuthentication) {\n     return userAuthentication.getUser();\n   }\n \n-  @Bean\n-  public WorkbenchEnvironment workbenchEnvironment() {\n-    return new WorkbenchEnvironment();\n-  }\n-\n-  /**\n-   * Service account credentials for Gsuite administration. These are derived from a key JSON file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3NDMyOQ==", "bodyText": "But it still needs to be refreshed during the task lifetime?", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362874329", "createdAt": "2020-01-03T16:34:28Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/config/WebMvcConfig.java", "diffHunk": "@@ -66,56 +60,6 @@ public DbUser user(UserAuthentication userAuthentication) {\n     return userAuthentication.getUser();\n   }\n \n-  @Bean\n-  public WorkbenchEnvironment workbenchEnvironment() {\n-    return new WorkbenchEnvironment();\n-  }\n-\n-  /**\n-   * Service account credentials for Gsuite administration. These are derived from a key JSON file", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjgxODI2Mg=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc5Mzc4Nw==", "bodyText": "The OAuth2 access token needs to be refreshed periodically \u2013\u00a0this logic is handled by the ServiceAccountCredentials class. What's stored persistently in this singleton-scoped bean is the private key file loaded from GCS, which is only ever refreshed / rotated between workbench releases.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363793787", "createdAt": "2020-01-07T15:10:48Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/config/WebMvcConfig.java", "diffHunk": "@@ -66,56 +60,6 @@ public DbUser user(UserAuthentication userAuthentication) {\n     return userAuthentication.getUser();\n   }\n \n-  @Bean\n-  public WorkbenchEnvironment workbenchEnvironment() {\n-    return new WorkbenchEnvironment();\n-  }\n-\n-  /**\n-   * Service account credentials for Gsuite administration. These are derived from a key JSON file", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjgxODI2Mg=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDUzMDQ5OnYy", "diffSide": "RIGHT", "path": "api/src/integration/java/org/pmiops/workbench/ApplicationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNDo0MzoxNlrOFaBi3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNzo0MTozMlrOFakRiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjgzMjYwNA==", "bodyText": "Is this the base for integration tests only? Maybe SpringApplicationIntegrationTest would be more descriptive?", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362832604", "createdAt": "2020-01-03T14:43:16Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/ApplicationTest.java", "diffHunk": "@@ -18,7 +18,7 @@\n  * Services, Controllers, Components and Configurations.\n  */\n @RunWith(SpringRunner.class)\n-@SpringBootTest(classes = {TestWebMvcConfig.class})\n+@SpringBootTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQwMTYwOA==", "bodyText": "This test is separate from the other integration tests. AFAICT, it tests whether all beans can be instantiated when booting up the application. There's possibly a better name for it, but I won't take it on in this PR.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363401608", "createdAt": "2020-01-06T17:41:32Z", "author": {"login": "gjuggler"}, "path": "api/src/integration/java/org/pmiops/workbench/ApplicationTest.java", "diffHunk": "@@ -18,7 +18,7 @@\n  * Services, Controllers, Components and Configurations.\n  */\n @RunWith(SpringRunner.class)\n-@SpringBootTest(classes = {TestWebMvcConfig.class})\n+@SpringBootTest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjgzMjYwNA=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDUzMzIzOnYy", "diffSide": "RIGHT", "path": "api/src/integration/java/org/pmiops/workbench/ApplicationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNDo0NDoyN1rOFaBkbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNzo0MjozMlrOFakS_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjgzMzAwNg==", "bodyText": "aside: I've been looking for a patter for selectively changing the log level for individual classes & packages. If we had that, you could have a debug log here and turn it to INFO while tracking down an issue with this class, then restore it. I know we had that set up at a prior workplace with log4j, but I don't know what else was involved.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362833006", "createdAt": "2020-01-03T14:44:27Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/ApplicationTest.java", "diffHunk": "@@ -42,7 +42,6 @@ public void contextLoads() throws Exception {\n     // This loads all @Service, @Controller, @Component and @Configuration annotations\n     beans.addAll(context.getBeansWithAnnotation(Component.class).values());\n     for (Object object : beans) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQwMTk4Mw==", "bodyText": "It's probably something like https://stackoverflow.com/questions/20485059/spring-boot-how-can-i-set-the-logging-level-with-application-properties, but maybe with some extra stuff where it points at a developer-specific version of that file or the environment if needed.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363401983", "createdAt": "2020-01-06T17:42:32Z", "author": {"login": "gjuggler"}, "path": "api/src/integration/java/org/pmiops/workbench/ApplicationTest.java", "diffHunk": "@@ -42,7 +42,6 @@ public void contextLoads() throws Exception {\n     // This loads all @Service, @Controller, @Component and @Configuration annotations\n     beans.addAll(context.getBeansWithAnnotation(Component.class).values());\n     for (Object object : beans) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjgzMzAwNg=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDU5MzkxOnYy", "diffSide": "RIGHT", "path": "api/src/integration/java/org/pmiops/workbench/ApplicationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNToxMDoxM1rOFaCJWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNzo0MzozMFrOFakUbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg0MjQ1OQ==", "bodyText": "Can you actually trip this assertion? Looks like List#addAll() may throw an NPE, depending on the concrete list type.\nIt's also probably better to assert on the beans retrieved from the context (i.e. by declaring a map for NoRepositoryBeans and another for ComponentBeans. I'm trying to understand why it would fetch a null bean for an annotation.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362842459", "createdAt": "2020-01-03T15:10:13Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/ApplicationTest.java", "diffHunk": "@@ -42,7 +42,6 @@ public void contextLoads() throws Exception {\n     // This loads all @Service, @Controller, @Component and @Configuration annotations\n     beans.addAll(context.getBeansWithAnnotation(Component.class).values());\n     for (Object object : beans) {\n-      System.out.println(object);\n       assertThat(object).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQwMjM1MQ==", "bodyText": "I've seen this test fail if there is an error loading all beans for the application. I'm not sure about the exact details of the mechanism, but that's the overall intent of this test.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363402351", "createdAt": "2020-01-06T17:43:30Z", "author": {"login": "gjuggler"}, "path": "api/src/integration/java/org/pmiops/workbench/ApplicationTest.java", "diffHunk": "@@ -42,7 +42,6 @@ public void contextLoads() throws Exception {\n     // This loads all @Service, @Controller, @Component and @Configuration annotations\n     beans.addAll(context.getBeansWithAnnotation(Component.class).values());\n     for (Object object : beans) {\n-      System.out.println(object);\n       assertThat(object).isNotNull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg0MjQ1OQ=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDYwNTc3OnYy", "diffSide": "RIGHT", "path": "api/src/integration/java/org/pmiops/workbench/BaseIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNToxNTowMFrOFaCQhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDoxMjo1MFrOFa6eeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg0NDI5NQ==", "bodyText": "Can you put or point to an example of a modification?\nAlso, do we not need/want to use the same mechanism for unit tests that require a workbench config? That might argue for a parent class to both the BaseIntegrationTest and BaseUnitTest, if there is such a thing.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362844295", "createdAt": "2020-01-03T15:15:00Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/BaseIntegrationTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.pmiops.workbench;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+\n+@RunWith(SpringRunner.class)\n+@WebAppConfiguration\n+@Import({IntegrationTestConfig.class})\n+public abstract class BaseIntegrationTest {\n+\n+  static WorkbenchConfig config;\n+\n+  @TestConfiguration\n+  static class Configuration {\n+    // This prototype-scoped bean override will cause all autowired services to call\n+    // this method for their Provider<WorkbenchConfig>. This allows test classes to either leave\n+    // this alone (in which case the test WorkbenchConfig is used), or make config modifications\n+    // before a test case which will be ready by all services.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2NTM2OQ==", "bodyText": "FireCloudIntegrationTest has a test that loads the prod config to test the prod Terra status endpoint. That modification was what motivated this setup.\nI'm not going to touch unit tests in this PR :)", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363765369", "createdAt": "2020-01-07T14:12:50Z", "author": {"login": "gjuggler"}, "path": "api/src/integration/java/org/pmiops/workbench/BaseIntegrationTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.pmiops.workbench;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+\n+@RunWith(SpringRunner.class)\n+@WebAppConfiguration\n+@Import({IntegrationTestConfig.class})\n+public abstract class BaseIntegrationTest {\n+\n+  static WorkbenchConfig config;\n+\n+  @TestConfiguration\n+  static class Configuration {\n+    // This prototype-scoped bean override will cause all autowired services to call\n+    // this method for their Provider<WorkbenchConfig>. This allows test classes to either leave\n+    // this alone (in which case the test WorkbenchConfig is used), or make config modifications\n+    // before a test case which will be ready by all services.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg0NDI5NQ=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDYxNDA3OnYy", "diffSide": "RIGHT", "path": "api/src/integration/java/org/pmiops/workbench/BaseIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNToxODozMVrOFaCVrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDoxNTozMlrOFa6i7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg0NTYxNQ==", "bodyText": "This @Primary seems like a bit magical at first glance. I guess there's a trade space here between succinctness and foolproof-ness, but I'm trying to understand why this is desirable here, as it makes overriding more difficult.\nI'd almost rather require all the test cases to use a qualifier like \"base_integration_workbench_config\" so there are no misunderstandings, and so a test could explicitly decide not to use this common if there were some reason to do so. Though I suppose all you need to do in that case is to give your own bean a name and inject it with a qualifier. If that's the intended pattern, then maybe comment on it here.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362845615", "createdAt": "2020-01-03T15:18:31Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/BaseIntegrationTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.pmiops.workbench;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+\n+@RunWith(SpringRunner.class)\n+@WebAppConfiguration\n+@Import({IntegrationTestConfig.class})\n+public abstract class BaseIntegrationTest {\n+\n+  static WorkbenchConfig config;\n+\n+  @TestConfiguration\n+  static class Configuration {\n+    // This prototype-scoped bean override will cause all autowired services to call\n+    // this method for their Provider<WorkbenchConfig>. This allows test classes to either leave\n+    // this alone (in which case the test WorkbenchConfig is used), or make config modifications\n+    // before a test case which will be ready by all services.\n+    @Bean\n+    @Primary", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2NjUxMA==", "bodyText": "Thanks for noting. At some point the @primary had been necessary, but I must have made further changes to the config structure that rendered it unnecessary.\nSide note: I really haven't had good experiences with bean qualifiers. The way it's been used for GoogleCredentials is just kind of painful. I'd be tempted to go as far as to say that all beans should be class-based beans, but I'm not confident enough in my Spring-foo to fully understand why I feel like that's a better solution.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363766510", "createdAt": "2020-01-07T14:15:32Z", "author": {"login": "gjuggler"}, "path": "api/src/integration/java/org/pmiops/workbench/BaseIntegrationTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.pmiops.workbench;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+\n+@RunWith(SpringRunner.class)\n+@WebAppConfiguration\n+@Import({IntegrationTestConfig.class})\n+public abstract class BaseIntegrationTest {\n+\n+  static WorkbenchConfig config;\n+\n+  @TestConfiguration\n+  static class Configuration {\n+    // This prototype-scoped bean override will cause all autowired services to call\n+    // this method for their Provider<WorkbenchConfig>. This allows test classes to either leave\n+    // this alone (in which case the test WorkbenchConfig is used), or make config modifications\n+    // before a test case which will be ready by all services.\n+    @Bean\n+    @Primary", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg0NTYxNQ=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDYzMDIxOnYy", "diffSide": "RIGHT", "path": "api/src/integration/java/org/pmiops/workbench/BaseIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNToyNToxMFrOFaCfkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDoxNjowOVrOFa6j-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg0ODE0Ng==", "bodyText": "Can this file name be externalized? I don't know what the _test suffix means, since that's also an (unfortunate) environment name.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362848146", "createdAt": "2020-01-03T15:25:10Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/BaseIntegrationTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.pmiops.workbench;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+\n+@RunWith(SpringRunner.class)\n+@WebAppConfiguration\n+@Import({IntegrationTestConfig.class})\n+public abstract class BaseIntegrationTest {\n+\n+  static WorkbenchConfig config;\n+\n+  @TestConfiguration\n+  static class Configuration {\n+    // This prototype-scoped bean override will cause all autowired services to call\n+    // this method for their Provider<WorkbenchConfig>. This allows test classes to either leave\n+    // this alone (in which case the test WorkbenchConfig is used), or make config modifications\n+    // before a test case which will be ready by all services.\n+    @Bean\n+    @Primary\n+    @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+    WorkbenchConfig getTestConfig() throws IOException {\n+      if (config == null) {\n+        config = loadConfig(\"config_test.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2Njc3OA==", "bodyText": "The \"config_test.json\" is the filename of our test config file (see api/config/config_test.json). I created config-specific methods to avoid confusion.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363766778", "createdAt": "2020-01-07T14:16:09Z", "author": {"login": "gjuggler"}, "path": "api/src/integration/java/org/pmiops/workbench/BaseIntegrationTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.pmiops.workbench;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+\n+@RunWith(SpringRunner.class)\n+@WebAppConfiguration\n+@Import({IntegrationTestConfig.class})\n+public abstract class BaseIntegrationTest {\n+\n+  static WorkbenchConfig config;\n+\n+  @TestConfiguration\n+  static class Configuration {\n+    // This prototype-scoped bean override will cause all autowired services to call\n+    // this method for their Provider<WorkbenchConfig>. This allows test classes to either leave\n+    // this alone (in which case the test WorkbenchConfig is used), or make config modifications\n+    // before a test case which will be ready by all services.\n+    @Bean\n+    @Primary\n+    @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+    WorkbenchConfig getTestConfig() throws IOException {\n+      if (config == null) {\n+        config = loadConfig(\"config_test.json\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg0ODE0Ng=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDY2NjIxOnYy", "diffSide": "RIGHT", "path": "api/src/integration/java/org/pmiops/workbench/FireCloudIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNTozODozMFrOFaC0yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDoxODoxMlrOFa6nrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1MzU3OQ==", "bodyText": "nit: We're migrating to a convention of Firecloud, since it's really one token to us. That was the approved convention for the generated classes when I prefixed them anyway.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362853579", "createdAt": "2020-01-03T15:38:30Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/FireCloudIntegrationTest.java", "diffHunk": "@@ -2,130 +2,47 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.common.io.Resources;\n-import com.google.gson.Gson;\n import java.io.IOException;\n-import java.nio.charset.Charset;\n import org.junit.Before;\n import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Mock;\n-import org.pmiops.workbench.auth.Constants;\n-import org.pmiops.workbench.auth.ServiceAccounts;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.firecloud.ApiClient;\n import org.pmiops.workbench.firecloud.ApiException;\n import org.pmiops.workbench.firecloud.FireCloudService;\n import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n-import org.pmiops.workbench.firecloud.FirecloudRetryHandler;\n-import org.pmiops.workbench.firecloud.api.BillingApi;\n-import org.pmiops.workbench.firecloud.api.GroupsApi;\n import org.pmiops.workbench.firecloud.api.NihApi;\n import org.pmiops.workbench.firecloud.api.ProfileApi;\n-import org.pmiops.workbench.firecloud.api.StaticNotebooksApi;\n-import org.pmiops.workbench.firecloud.api.StatusApi;\n-import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n import org.pmiops.workbench.firecloud.model.FirecloudMe;\n-import org.pmiops.workbench.test.Providers;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Import;\n \n-@RunWith(SpringRunner.class)\n-@ContextConfiguration(classes = {IntegrationTestConfig.class})\n-public class FireCloudIntegrationTest {\n+public class FireCloudIntegrationTest extends BaseIntegrationTest {\n \n-  /*\n-   * Mocked service providers are (currently) not available for functional integration tests.\n-   * Integration tests with real users/workspaces against production FireCloud is not\n-   * recommended at this time.\n-   */\n-  @Mock private BillingApi billingApi;\n-  @Mock private WorkspacesApi workspacesApi;\n-  @Mock private GroupsApi allOfUsGroupsApi;\n-  @Mock private WorkspacesApi workspaceAclsApi;\n-  @Mock private StaticNotebooksApi staticNotebooksApi;\n-  @Mock private ProfileApi profileApi;\n-  @Mock private NihApi nihApi;\n-\n-  // N.B. this will load the default service account credentials for whatever AoU environment\n-  // is set when running integration tests. This should be the test environment.\n-  @Autowired\n-  @Qualifier(Constants.DEFAULT_SERVICE_ACCOUNT_CREDS)\n-  private GoogleCredential serviceAccountCredential;\n+  @Autowired private FireCloudService service;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2NzcyNw==", "bodyText": "That's fine \u2013 I won't change anything in this PR.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363767727", "createdAt": "2020-01-07T14:18:12Z", "author": {"login": "gjuggler"}, "path": "api/src/integration/java/org/pmiops/workbench/FireCloudIntegrationTest.java", "diffHunk": "@@ -2,130 +2,47 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.common.io.Resources;\n-import com.google.gson.Gson;\n import java.io.IOException;\n-import java.nio.charset.Charset;\n import org.junit.Before;\n import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Mock;\n-import org.pmiops.workbench.auth.Constants;\n-import org.pmiops.workbench.auth.ServiceAccounts;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.firecloud.ApiClient;\n import org.pmiops.workbench.firecloud.ApiException;\n import org.pmiops.workbench.firecloud.FireCloudService;\n import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n-import org.pmiops.workbench.firecloud.FirecloudRetryHandler;\n-import org.pmiops.workbench.firecloud.api.BillingApi;\n-import org.pmiops.workbench.firecloud.api.GroupsApi;\n import org.pmiops.workbench.firecloud.api.NihApi;\n import org.pmiops.workbench.firecloud.api.ProfileApi;\n-import org.pmiops.workbench.firecloud.api.StaticNotebooksApi;\n-import org.pmiops.workbench.firecloud.api.StatusApi;\n-import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n import org.pmiops.workbench.firecloud.model.FirecloudMe;\n-import org.pmiops.workbench.test.Providers;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Import;\n \n-@RunWith(SpringRunner.class)\n-@ContextConfiguration(classes = {IntegrationTestConfig.class})\n-public class FireCloudIntegrationTest {\n+public class FireCloudIntegrationTest extends BaseIntegrationTest {\n \n-  /*\n-   * Mocked service providers are (currently) not available for functional integration tests.\n-   * Integration tests with real users/workspaces against production FireCloud is not\n-   * recommended at this time.\n-   */\n-  @Mock private BillingApi billingApi;\n-  @Mock private WorkspacesApi workspacesApi;\n-  @Mock private GroupsApi allOfUsGroupsApi;\n-  @Mock private WorkspacesApi workspaceAclsApi;\n-  @Mock private StaticNotebooksApi staticNotebooksApi;\n-  @Mock private ProfileApi profileApi;\n-  @Mock private NihApi nihApi;\n-\n-  // N.B. this will load the default service account credentials for whatever AoU environment\n-  // is set when running integration tests. This should be the test environment.\n-  @Autowired\n-  @Qualifier(Constants.DEFAULT_SERVICE_ACCOUNT_CREDS)\n-  private GoogleCredential serviceAccountCredential;\n+  @Autowired private FireCloudService service;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1MzU3OQ=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDY2OTg0OnYy", "diffSide": "RIGHT", "path": "api/src/integration/java/org/pmiops/workbench/FireCloudIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNTo0MDoxN1rOFaC3RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDoxOToyNlrOFa6p2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NDIxMg==", "bodyText": "This is another one of those greedy, magical things in Spring. I don't know how you evangelize things like this, but it's easy to move things in and out of packages (or rename them) without expecting any functional changes. Best case scenario, it falls apart on startup when you do that.\nAnother bummer is that you can't call something like getClass().getPackage() within an annotation, as everything has to be a compile-time constant. So if we rename any part of the package, it breaks, and we find out at runtime.\nWhat you can do is put a placeholder type at the top level of the package to be scanned. It looks like the syntax is @ComponentScan(basePackageClasses = org.pmiops.workbench.firecloud.ComponentScanPlaceholder.class). (Since it's generated, you'd have to figure out which class to use or put a placeholder in the yaml). ComponentScanPlaceholder can be an empty interface.\nFrom the doc\n\t/**\n\t * Type-safe alternative to {@link #basePackages} for specifying the packages\n\t * to scan for annotated components. The package of each class specified will be scanned.\n\t * <p>Consider creating a special no-op marker class or interface in each package\n\t * that serves no purpose other than being referenced by this attribute.\n\t */\n\nA happy side -effect is that this placeholder would show up in the tree view of the source, so folks would realize there were Spring shenanigans afoot in that package.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362854212", "createdAt": "2020-01-03T15:40:17Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/FireCloudIntegrationTest.java", "diffHunk": "@@ -2,130 +2,47 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.common.io.Resources;\n-import com.google.gson.Gson;\n import java.io.IOException;\n-import java.nio.charset.Charset;\n import org.junit.Before;\n import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Mock;\n-import org.pmiops.workbench.auth.Constants;\n-import org.pmiops.workbench.auth.ServiceAccounts;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.firecloud.ApiClient;\n import org.pmiops.workbench.firecloud.ApiException;\n import org.pmiops.workbench.firecloud.FireCloudService;\n import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n-import org.pmiops.workbench.firecloud.FirecloudRetryHandler;\n-import org.pmiops.workbench.firecloud.api.BillingApi;\n-import org.pmiops.workbench.firecloud.api.GroupsApi;\n import org.pmiops.workbench.firecloud.api.NihApi;\n import org.pmiops.workbench.firecloud.api.ProfileApi;\n-import org.pmiops.workbench.firecloud.api.StaticNotebooksApi;\n-import org.pmiops.workbench.firecloud.api.StatusApi;\n-import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n import org.pmiops.workbench.firecloud.model.FirecloudMe;\n-import org.pmiops.workbench.test.Providers;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Import;\n \n-@RunWith(SpringRunner.class)\n-@ContextConfiguration(classes = {IntegrationTestConfig.class})\n-public class FireCloudIntegrationTest {\n+public class FireCloudIntegrationTest extends BaseIntegrationTest {\n \n-  /*\n-   * Mocked service providers are (currently) not available for functional integration tests.\n-   * Integration tests with real users/workspaces against production FireCloud is not\n-   * recommended at this time.\n-   */\n-  @Mock private BillingApi billingApi;\n-  @Mock private WorkspacesApi workspacesApi;\n-  @Mock private GroupsApi allOfUsGroupsApi;\n-  @Mock private WorkspacesApi workspaceAclsApi;\n-  @Mock private StaticNotebooksApi staticNotebooksApi;\n-  @Mock private ProfileApi profileApi;\n-  @Mock private NihApi nihApi;\n-\n-  // N.B. this will load the default service account credentials for whatever AoU environment\n-  // is set when running integration tests. This should be the test environment.\n-  @Autowired\n-  @Qualifier(Constants.DEFAULT_SERVICE_ACCOUNT_CREDS)\n-  private GoogleCredential serviceAccountCredential;\n+  @Autowired private FireCloudService service;\n \n-  @Autowired private ServiceAccounts serviceAccounts;\n-\n-  @Autowired\n-  @Qualifier(Constants.FIRECLOUD_ADMIN_CREDS)\n-  private GoogleCredential fireCloudAdminCredential;\n+  @TestConfiguration\n+  @ComponentScan(\"org.pmiops.workbench.firecloud\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2ODI4Mg==", "bodyText": "Good point. I changed this to component scan based on FireCloudServiceImpl.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363768282", "createdAt": "2020-01-07T14:19:26Z", "author": {"login": "gjuggler"}, "path": "api/src/integration/java/org/pmiops/workbench/FireCloudIntegrationTest.java", "diffHunk": "@@ -2,130 +2,47 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.common.io.Resources;\n-import com.google.gson.Gson;\n import java.io.IOException;\n-import java.nio.charset.Charset;\n import org.junit.Before;\n import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Mock;\n-import org.pmiops.workbench.auth.Constants;\n-import org.pmiops.workbench.auth.ServiceAccounts;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.firecloud.ApiClient;\n import org.pmiops.workbench.firecloud.ApiException;\n import org.pmiops.workbench.firecloud.FireCloudService;\n import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n-import org.pmiops.workbench.firecloud.FirecloudRetryHandler;\n-import org.pmiops.workbench.firecloud.api.BillingApi;\n-import org.pmiops.workbench.firecloud.api.GroupsApi;\n import org.pmiops.workbench.firecloud.api.NihApi;\n import org.pmiops.workbench.firecloud.api.ProfileApi;\n-import org.pmiops.workbench.firecloud.api.StaticNotebooksApi;\n-import org.pmiops.workbench.firecloud.api.StatusApi;\n-import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n import org.pmiops.workbench.firecloud.model.FirecloudMe;\n-import org.pmiops.workbench.test.Providers;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Import;\n \n-@RunWith(SpringRunner.class)\n-@ContextConfiguration(classes = {IntegrationTestConfig.class})\n-public class FireCloudIntegrationTest {\n+public class FireCloudIntegrationTest extends BaseIntegrationTest {\n \n-  /*\n-   * Mocked service providers are (currently) not available for functional integration tests.\n-   * Integration tests with real users/workspaces against production FireCloud is not\n-   * recommended at this time.\n-   */\n-  @Mock private BillingApi billingApi;\n-  @Mock private WorkspacesApi workspacesApi;\n-  @Mock private GroupsApi allOfUsGroupsApi;\n-  @Mock private WorkspacesApi workspaceAclsApi;\n-  @Mock private StaticNotebooksApi staticNotebooksApi;\n-  @Mock private ProfileApi profileApi;\n-  @Mock private NihApi nihApi;\n-\n-  // N.B. this will load the default service account credentials for whatever AoU environment\n-  // is set when running integration tests. This should be the test environment.\n-  @Autowired\n-  @Qualifier(Constants.DEFAULT_SERVICE_ACCOUNT_CREDS)\n-  private GoogleCredential serviceAccountCredential;\n+  @Autowired private FireCloudService service;\n \n-  @Autowired private ServiceAccounts serviceAccounts;\n-\n-  @Autowired\n-  @Qualifier(Constants.FIRECLOUD_ADMIN_CREDS)\n-  private GoogleCredential fireCloudAdminCredential;\n+  @TestConfiguration\n+  @ComponentScan(\"org.pmiops.workbench.firecloud\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NDIxMg=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDY3Nzg1OnYy", "diffSide": "RIGHT", "path": "api/src/integration/java/org/pmiops/workbench/FireCloudIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNTo0Mzo1NFrOFaC8XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDoxOTo1MFrOFa6qkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NTUxNg==", "bodyText": "We need a test resource file or something. Same issue above, so we could pull in INTEGRATION_TEST_WORKBENCH_CONFIG_PATH or whatever.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362855516", "createdAt": "2020-01-03T15:43:54Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/FireCloudIntegrationTest.java", "diffHunk": "@@ -2,130 +2,47 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.common.io.Resources;\n-import com.google.gson.Gson;\n import java.io.IOException;\n-import java.nio.charset.Charset;\n import org.junit.Before;\n import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Mock;\n-import org.pmiops.workbench.auth.Constants;\n-import org.pmiops.workbench.auth.ServiceAccounts;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.firecloud.ApiClient;\n import org.pmiops.workbench.firecloud.ApiException;\n import org.pmiops.workbench.firecloud.FireCloudService;\n import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n-import org.pmiops.workbench.firecloud.FirecloudRetryHandler;\n-import org.pmiops.workbench.firecloud.api.BillingApi;\n-import org.pmiops.workbench.firecloud.api.GroupsApi;\n import org.pmiops.workbench.firecloud.api.NihApi;\n import org.pmiops.workbench.firecloud.api.ProfileApi;\n-import org.pmiops.workbench.firecloud.api.StaticNotebooksApi;\n-import org.pmiops.workbench.firecloud.api.StatusApi;\n-import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n import org.pmiops.workbench.firecloud.model.FirecloudMe;\n-import org.pmiops.workbench.test.Providers;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Import;\n \n-@RunWith(SpringRunner.class)\n-@ContextConfiguration(classes = {IntegrationTestConfig.class})\n-public class FireCloudIntegrationTest {\n+public class FireCloudIntegrationTest extends BaseIntegrationTest {\n \n-  /*\n-   * Mocked service providers are (currently) not available for functional integration tests.\n-   * Integration tests with real users/workspaces against production FireCloud is not\n-   * recommended at this time.\n-   */\n-  @Mock private BillingApi billingApi;\n-  @Mock private WorkspacesApi workspacesApi;\n-  @Mock private GroupsApi allOfUsGroupsApi;\n-  @Mock private WorkspacesApi workspaceAclsApi;\n-  @Mock private StaticNotebooksApi staticNotebooksApi;\n-  @Mock private ProfileApi profileApi;\n-  @Mock private NihApi nihApi;\n-\n-  // N.B. this will load the default service account credentials for whatever AoU environment\n-  // is set when running integration tests. This should be the test environment.\n-  @Autowired\n-  @Qualifier(Constants.DEFAULT_SERVICE_ACCOUNT_CREDS)\n-  private GoogleCredential serviceAccountCredential;\n+  @Autowired private FireCloudService service;\n \n-  @Autowired private ServiceAccounts serviceAccounts;\n-\n-  @Autowired\n-  @Qualifier(Constants.FIRECLOUD_ADMIN_CREDS)\n-  private GoogleCredential fireCloudAdminCredential;\n+  @TestConfiguration\n+  @ComponentScan(\"org.pmiops.workbench.firecloud\")\n+  @Import({FireCloudServiceImpl.class})\n+  static class Configuration {}\n \n   @Before\n   public void setUp() throws IOException {\n-    // Get a refreshed access token for the FireCloud service account credentials.\n-    serviceAccountCredential =\n-        serviceAccountCredential.createScoped(FireCloudServiceImpl.FIRECLOUD_API_OAUTH_SCOPES);\n-    serviceAccountCredential.refreshToken();\n-  }\n-\n-  /**\n-   * Creates a FireCloudService instance with the FireCloud base URL corresponding to the given\n-   * WorkbenchConfig. Note that this will always use the test environment's default service account\n-   * credentials when making API calls. It shouldn't be possible to make authenticated calls to the\n-   * FireCloud prod environment.\n-   *\n-   * <p>This method mostly exists to allow us to run a status-check against both FC dev & prod\n-   * within the same integration test run.\n-   */\n-  private FireCloudService createService(WorkbenchConfig config) {\n-    ApiClient apiClient =\n-        new ApiClient()\n-            .setBasePath(config.firecloud.baseUrl)\n-            .setDebugging(config.firecloud.debugEndpoints);\n-    apiClient.setAccessToken(serviceAccountCredential.getAccessToken());\n-\n-    return new FireCloudServiceImpl(\n-        Providers.of(config),\n-        Providers.of(profileApi),\n-        Providers.of(billingApi),\n-        Providers.of(allOfUsGroupsApi),\n-        Providers.of(nihApi),\n-        Providers.of(workspacesApi),\n-        Providers.of(workspaceAclsApi),\n-        Providers.of(new StatusApi(apiClient)),\n-        Providers.of(staticNotebooksApi),\n-        new FirecloudRetryHandler(new NoBackOffPolicy()),\n-        serviceAccounts,\n-        Providers.of(fireCloudAdminCredential));\n-  }\n-\n-  private WorkbenchConfig loadConfig(String filename) throws Exception {\n-    String testConfig =\n-        Resources.toString(Resources.getResource(filename), Charset.defaultCharset());\n-    WorkbenchConfig workbenchConfig = new Gson().fromJson(testConfig, WorkbenchConfig.class);\n-    workbenchConfig.firecloud.debugEndpoints = true;\n-    return workbenchConfig;\n-  }\n-\n-  private FireCloudService getTestService() throws Exception {\n-    return createService(loadConfig(\"config_test.json\"));\n-  }\n-\n-  private FireCloudService getProdService() throws Exception {\n-    return createService(loadConfig(\"config_prod.json\"));\n+    config = loadConfig(\"config_test.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2ODQ2NQ==", "bodyText": "Noted above \u2013\u00a0this points directly to our actual test environment config, which I'm pretty sure is what we want.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363768465", "createdAt": "2020-01-07T14:19:50Z", "author": {"login": "gjuggler"}, "path": "api/src/integration/java/org/pmiops/workbench/FireCloudIntegrationTest.java", "diffHunk": "@@ -2,130 +2,47 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.common.io.Resources;\n-import com.google.gson.Gson;\n import java.io.IOException;\n-import java.nio.charset.Charset;\n import org.junit.Before;\n import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Mock;\n-import org.pmiops.workbench.auth.Constants;\n-import org.pmiops.workbench.auth.ServiceAccounts;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.firecloud.ApiClient;\n import org.pmiops.workbench.firecloud.ApiException;\n import org.pmiops.workbench.firecloud.FireCloudService;\n import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n-import org.pmiops.workbench.firecloud.FirecloudRetryHandler;\n-import org.pmiops.workbench.firecloud.api.BillingApi;\n-import org.pmiops.workbench.firecloud.api.GroupsApi;\n import org.pmiops.workbench.firecloud.api.NihApi;\n import org.pmiops.workbench.firecloud.api.ProfileApi;\n-import org.pmiops.workbench.firecloud.api.StaticNotebooksApi;\n-import org.pmiops.workbench.firecloud.api.StatusApi;\n-import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n import org.pmiops.workbench.firecloud.model.FirecloudMe;\n-import org.pmiops.workbench.test.Providers;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Import;\n \n-@RunWith(SpringRunner.class)\n-@ContextConfiguration(classes = {IntegrationTestConfig.class})\n-public class FireCloudIntegrationTest {\n+public class FireCloudIntegrationTest extends BaseIntegrationTest {\n \n-  /*\n-   * Mocked service providers are (currently) not available for functional integration tests.\n-   * Integration tests with real users/workspaces against production FireCloud is not\n-   * recommended at this time.\n-   */\n-  @Mock private BillingApi billingApi;\n-  @Mock private WorkspacesApi workspacesApi;\n-  @Mock private GroupsApi allOfUsGroupsApi;\n-  @Mock private WorkspacesApi workspaceAclsApi;\n-  @Mock private StaticNotebooksApi staticNotebooksApi;\n-  @Mock private ProfileApi profileApi;\n-  @Mock private NihApi nihApi;\n-\n-  // N.B. this will load the default service account credentials for whatever AoU environment\n-  // is set when running integration tests. This should be the test environment.\n-  @Autowired\n-  @Qualifier(Constants.DEFAULT_SERVICE_ACCOUNT_CREDS)\n-  private GoogleCredential serviceAccountCredential;\n+  @Autowired private FireCloudService service;\n \n-  @Autowired private ServiceAccounts serviceAccounts;\n-\n-  @Autowired\n-  @Qualifier(Constants.FIRECLOUD_ADMIN_CREDS)\n-  private GoogleCredential fireCloudAdminCredential;\n+  @TestConfiguration\n+  @ComponentScan(\"org.pmiops.workbench.firecloud\")\n+  @Import({FireCloudServiceImpl.class})\n+  static class Configuration {}\n \n   @Before\n   public void setUp() throws IOException {\n-    // Get a refreshed access token for the FireCloud service account credentials.\n-    serviceAccountCredential =\n-        serviceAccountCredential.createScoped(FireCloudServiceImpl.FIRECLOUD_API_OAUTH_SCOPES);\n-    serviceAccountCredential.refreshToken();\n-  }\n-\n-  /**\n-   * Creates a FireCloudService instance with the FireCloud base URL corresponding to the given\n-   * WorkbenchConfig. Note that this will always use the test environment's default service account\n-   * credentials when making API calls. It shouldn't be possible to make authenticated calls to the\n-   * FireCloud prod environment.\n-   *\n-   * <p>This method mostly exists to allow us to run a status-check against both FC dev & prod\n-   * within the same integration test run.\n-   */\n-  private FireCloudService createService(WorkbenchConfig config) {\n-    ApiClient apiClient =\n-        new ApiClient()\n-            .setBasePath(config.firecloud.baseUrl)\n-            .setDebugging(config.firecloud.debugEndpoints);\n-    apiClient.setAccessToken(serviceAccountCredential.getAccessToken());\n-\n-    return new FireCloudServiceImpl(\n-        Providers.of(config),\n-        Providers.of(profileApi),\n-        Providers.of(billingApi),\n-        Providers.of(allOfUsGroupsApi),\n-        Providers.of(nihApi),\n-        Providers.of(workspacesApi),\n-        Providers.of(workspaceAclsApi),\n-        Providers.of(new StatusApi(apiClient)),\n-        Providers.of(staticNotebooksApi),\n-        new FirecloudRetryHandler(new NoBackOffPolicy()),\n-        serviceAccounts,\n-        Providers.of(fireCloudAdminCredential));\n-  }\n-\n-  private WorkbenchConfig loadConfig(String filename) throws Exception {\n-    String testConfig =\n-        Resources.toString(Resources.getResource(filename), Charset.defaultCharset());\n-    WorkbenchConfig workbenchConfig = new Gson().fromJson(testConfig, WorkbenchConfig.class);\n-    workbenchConfig.firecloud.debugEndpoints = true;\n-    return workbenchConfig;\n-  }\n-\n-  private FireCloudService getTestService() throws Exception {\n-    return createService(loadConfig(\"config_test.json\"));\n-  }\n-\n-  private FireCloudService getProdService() throws Exception {\n-    return createService(loadConfig(\"config_prod.json\"));\n+    config = loadConfig(\"config_test.json\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NTUxNg=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDY4MzEwOnYy", "diffSide": "RIGHT", "path": "api/src/integration/java/org/pmiops/workbench/FireCloudIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNTo0NjowMlrOFaC_hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDoyMToxOVrOFa6tHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NjMyNg==", "bodyText": "aside: What we are calling integration tests are what I might have called smoke tests. Both are useful, but I'd have expected a full e2e test to exercise a whole user journey or at least a good chunk of it. If all we're doing is asking the services what their opinions are of their status, then I'm not sure how robust that is or if we're really covering very much code.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362856326", "createdAt": "2020-01-03T15:46:02Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/FireCloudIntegrationTest.java", "diffHunk": "@@ -2,130 +2,47 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.common.io.Resources;\n-import com.google.gson.Gson;\n import java.io.IOException;\n-import java.nio.charset.Charset;\n import org.junit.Before;\n import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Mock;\n-import org.pmiops.workbench.auth.Constants;\n-import org.pmiops.workbench.auth.ServiceAccounts;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.firecloud.ApiClient;\n import org.pmiops.workbench.firecloud.ApiException;\n import org.pmiops.workbench.firecloud.FireCloudService;\n import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n-import org.pmiops.workbench.firecloud.FirecloudRetryHandler;\n-import org.pmiops.workbench.firecloud.api.BillingApi;\n-import org.pmiops.workbench.firecloud.api.GroupsApi;\n import org.pmiops.workbench.firecloud.api.NihApi;\n import org.pmiops.workbench.firecloud.api.ProfileApi;\n-import org.pmiops.workbench.firecloud.api.StaticNotebooksApi;\n-import org.pmiops.workbench.firecloud.api.StatusApi;\n-import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n import org.pmiops.workbench.firecloud.model.FirecloudMe;\n-import org.pmiops.workbench.test.Providers;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Import;\n \n-@RunWith(SpringRunner.class)\n-@ContextConfiguration(classes = {IntegrationTestConfig.class})\n-public class FireCloudIntegrationTest {\n+public class FireCloudIntegrationTest extends BaseIntegrationTest {\n \n-  /*\n-   * Mocked service providers are (currently) not available for functional integration tests.\n-   * Integration tests with real users/workspaces against production FireCloud is not\n-   * recommended at this time.\n-   */\n-  @Mock private BillingApi billingApi;\n-  @Mock private WorkspacesApi workspacesApi;\n-  @Mock private GroupsApi allOfUsGroupsApi;\n-  @Mock private WorkspacesApi workspaceAclsApi;\n-  @Mock private StaticNotebooksApi staticNotebooksApi;\n-  @Mock private ProfileApi profileApi;\n-  @Mock private NihApi nihApi;\n-\n-  // N.B. this will load the default service account credentials for whatever AoU environment\n-  // is set when running integration tests. This should be the test environment.\n-  @Autowired\n-  @Qualifier(Constants.DEFAULT_SERVICE_ACCOUNT_CREDS)\n-  private GoogleCredential serviceAccountCredential;\n+  @Autowired private FireCloudService service;\n \n-  @Autowired private ServiceAccounts serviceAccounts;\n-\n-  @Autowired\n-  @Qualifier(Constants.FIRECLOUD_ADMIN_CREDS)\n-  private GoogleCredential fireCloudAdminCredential;\n+  @TestConfiguration\n+  @ComponentScan(\"org.pmiops.workbench.firecloud\")\n+  @Import({FireCloudServiceImpl.class})\n+  static class Configuration {}\n \n   @Before\n   public void setUp() throws IOException {\n-    // Get a refreshed access token for the FireCloud service account credentials.\n-    serviceAccountCredential =\n-        serviceAccountCredential.createScoped(FireCloudServiceImpl.FIRECLOUD_API_OAUTH_SCOPES);\n-    serviceAccountCredential.refreshToken();\n-  }\n-\n-  /**\n-   * Creates a FireCloudService instance with the FireCloud base URL corresponding to the given\n-   * WorkbenchConfig. Note that this will always use the test environment's default service account\n-   * credentials when making API calls. It shouldn't be possible to make authenticated calls to the\n-   * FireCloud prod environment.\n-   *\n-   * <p>This method mostly exists to allow us to run a status-check against both FC dev & prod\n-   * within the same integration test run.\n-   */\n-  private FireCloudService createService(WorkbenchConfig config) {\n-    ApiClient apiClient =\n-        new ApiClient()\n-            .setBasePath(config.firecloud.baseUrl)\n-            .setDebugging(config.firecloud.debugEndpoints);\n-    apiClient.setAccessToken(serviceAccountCredential.getAccessToken());\n-\n-    return new FireCloudServiceImpl(\n-        Providers.of(config),\n-        Providers.of(profileApi),\n-        Providers.of(billingApi),\n-        Providers.of(allOfUsGroupsApi),\n-        Providers.of(nihApi),\n-        Providers.of(workspacesApi),\n-        Providers.of(workspaceAclsApi),\n-        Providers.of(new StatusApi(apiClient)),\n-        Providers.of(staticNotebooksApi),\n-        new FirecloudRetryHandler(new NoBackOffPolicy()),\n-        serviceAccounts,\n-        Providers.of(fireCloudAdminCredential));\n-  }\n-\n-  private WorkbenchConfig loadConfig(String filename) throws Exception {\n-    String testConfig =\n-        Resources.toString(Resources.getResource(filename), Charset.defaultCharset());\n-    WorkbenchConfig workbenchConfig = new Gson().fromJson(testConfig, WorkbenchConfig.class);\n-    workbenchConfig.firecloud.debugEndpoints = true;\n-    return workbenchConfig;\n-  }\n-\n-  private FireCloudService getTestService() throws Exception {\n-    return createService(loadConfig(\"config_test.json\"));\n-  }\n-\n-  private FireCloudService getProdService() throws Exception {\n-    return createService(loadConfig(\"config_prod.json\"));\n+    config = loadConfig(\"config_test.json\");\n   }\n \n   @Test\n-  public void testStatusProd() throws Exception {\n-    assertThat(getProdService().getFirecloudStatus()).isTrue();\n+  public void testStatusProd() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2OTExOQ==", "bodyText": "Yes, we haven't expanded the coverage of our integration tests much at all. We've ultimately decided to focus on end-to-end tests via puppeteer, since that will cover our UI pieces as well. These tests still have value, since they ensure our connectivity to external services is working as intended.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363769119", "createdAt": "2020-01-07T14:21:19Z", "author": {"login": "gjuggler"}, "path": "api/src/integration/java/org/pmiops/workbench/FireCloudIntegrationTest.java", "diffHunk": "@@ -2,130 +2,47 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.common.io.Resources;\n-import com.google.gson.Gson;\n import java.io.IOException;\n-import java.nio.charset.Charset;\n import org.junit.Before;\n import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Mock;\n-import org.pmiops.workbench.auth.Constants;\n-import org.pmiops.workbench.auth.ServiceAccounts;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.firecloud.ApiClient;\n import org.pmiops.workbench.firecloud.ApiException;\n import org.pmiops.workbench.firecloud.FireCloudService;\n import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n-import org.pmiops.workbench.firecloud.FirecloudRetryHandler;\n-import org.pmiops.workbench.firecloud.api.BillingApi;\n-import org.pmiops.workbench.firecloud.api.GroupsApi;\n import org.pmiops.workbench.firecloud.api.NihApi;\n import org.pmiops.workbench.firecloud.api.ProfileApi;\n-import org.pmiops.workbench.firecloud.api.StaticNotebooksApi;\n-import org.pmiops.workbench.firecloud.api.StatusApi;\n-import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n import org.pmiops.workbench.firecloud.model.FirecloudMe;\n-import org.pmiops.workbench.test.Providers;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Import;\n \n-@RunWith(SpringRunner.class)\n-@ContextConfiguration(classes = {IntegrationTestConfig.class})\n-public class FireCloudIntegrationTest {\n+public class FireCloudIntegrationTest extends BaseIntegrationTest {\n \n-  /*\n-   * Mocked service providers are (currently) not available for functional integration tests.\n-   * Integration tests with real users/workspaces against production FireCloud is not\n-   * recommended at this time.\n-   */\n-  @Mock private BillingApi billingApi;\n-  @Mock private WorkspacesApi workspacesApi;\n-  @Mock private GroupsApi allOfUsGroupsApi;\n-  @Mock private WorkspacesApi workspaceAclsApi;\n-  @Mock private StaticNotebooksApi staticNotebooksApi;\n-  @Mock private ProfileApi profileApi;\n-  @Mock private NihApi nihApi;\n-\n-  // N.B. this will load the default service account credentials for whatever AoU environment\n-  // is set when running integration tests. This should be the test environment.\n-  @Autowired\n-  @Qualifier(Constants.DEFAULT_SERVICE_ACCOUNT_CREDS)\n-  private GoogleCredential serviceAccountCredential;\n+  @Autowired private FireCloudService service;\n \n-  @Autowired private ServiceAccounts serviceAccounts;\n-\n-  @Autowired\n-  @Qualifier(Constants.FIRECLOUD_ADMIN_CREDS)\n-  private GoogleCredential fireCloudAdminCredential;\n+  @TestConfiguration\n+  @ComponentScan(\"org.pmiops.workbench.firecloud\")\n+  @Import({FireCloudServiceImpl.class})\n+  static class Configuration {}\n \n   @Before\n   public void setUp() throws IOException {\n-    // Get a refreshed access token for the FireCloud service account credentials.\n-    serviceAccountCredential =\n-        serviceAccountCredential.createScoped(FireCloudServiceImpl.FIRECLOUD_API_OAUTH_SCOPES);\n-    serviceAccountCredential.refreshToken();\n-  }\n-\n-  /**\n-   * Creates a FireCloudService instance with the FireCloud base URL corresponding to the given\n-   * WorkbenchConfig. Note that this will always use the test environment's default service account\n-   * credentials when making API calls. It shouldn't be possible to make authenticated calls to the\n-   * FireCloud prod environment.\n-   *\n-   * <p>This method mostly exists to allow us to run a status-check against both FC dev & prod\n-   * within the same integration test run.\n-   */\n-  private FireCloudService createService(WorkbenchConfig config) {\n-    ApiClient apiClient =\n-        new ApiClient()\n-            .setBasePath(config.firecloud.baseUrl)\n-            .setDebugging(config.firecloud.debugEndpoints);\n-    apiClient.setAccessToken(serviceAccountCredential.getAccessToken());\n-\n-    return new FireCloudServiceImpl(\n-        Providers.of(config),\n-        Providers.of(profileApi),\n-        Providers.of(billingApi),\n-        Providers.of(allOfUsGroupsApi),\n-        Providers.of(nihApi),\n-        Providers.of(workspacesApi),\n-        Providers.of(workspaceAclsApi),\n-        Providers.of(new StatusApi(apiClient)),\n-        Providers.of(staticNotebooksApi),\n-        new FirecloudRetryHandler(new NoBackOffPolicy()),\n-        serviceAccounts,\n-        Providers.of(fireCloudAdminCredential));\n-  }\n-\n-  private WorkbenchConfig loadConfig(String filename) throws Exception {\n-    String testConfig =\n-        Resources.toString(Resources.getResource(filename), Charset.defaultCharset());\n-    WorkbenchConfig workbenchConfig = new Gson().fromJson(testConfig, WorkbenchConfig.class);\n-    workbenchConfig.firecloud.debugEndpoints = true;\n-    return workbenchConfig;\n-  }\n-\n-  private FireCloudService getTestService() throws Exception {\n-    return createService(loadConfig(\"config_test.json\"));\n-  }\n-\n-  private FireCloudService getProdService() throws Exception {\n-    return createService(loadConfig(\"config_prod.json\"));\n+    config = loadConfig(\"config_test.json\");\n   }\n \n   @Test\n-  public void testStatusProd() throws Exception {\n-    assertThat(getProdService().getFirecloudStatus()).isTrue();\n+  public void testStatusProd() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NjMyNg=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDY4NDM0OnYy", "diffSide": "RIGHT", "path": "api/src/integration/java/org/pmiops/workbench/FireCloudIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNTo0Njo0MVrOFaDAYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDoyMjoxNlrOFa6vFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NjU0NQ==", "bodyText": "I'd move this username to an integration test config file, especially if it's a real account.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362856545", "createdAt": "2020-01-03T15:46:41Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/FireCloudIntegrationTest.java", "diffHunk": "@@ -138,8 +55,7 @@ public void testStatusDev() throws Exception {\n   @Test\n   public void testImpersonatedProfileCall() throws Exception {\n     ApiClient apiClient =\n-        getTestService()\n-            .getApiClientWithImpersonation(\"integration-test-user@fake-research-aou.org\");\n+        service.getApiClientWithImpersonation(\"integration-test-user@fake-research-aou.org\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2OTYyMA==", "bodyText": "What value would that add, or simplicity would it gain us? This file is less than 100 lines of code, I think it's pretty easy to spot the constant, and the preconditions on the account's existence are documented in the test case javadoc.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363769620", "createdAt": "2020-01-07T14:22:16Z", "author": {"login": "gjuggler"}, "path": "api/src/integration/java/org/pmiops/workbench/FireCloudIntegrationTest.java", "diffHunk": "@@ -138,8 +55,7 @@ public void testStatusDev() throws Exception {\n   @Test\n   public void testImpersonatedProfileCall() throws Exception {\n     ApiClient apiClient =\n-        getTestService()\n-            .getApiClientWithImpersonation(\"integration-test-user@fake-research-aou.org\");\n+        service.getApiClientWithImpersonation(\"integration-test-user@fake-research-aou.org\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NjU0NQ=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDY4NjE0OnYy", "diffSide": "RIGHT", "path": "api/src/integration/java/org/pmiops/workbench/IntegrationTestConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNTo0NzoyOVrOFaDBdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDoyODo1OVrOFa67Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NjgyMg==", "bodyText": "I'd name this so it's more obviously a Spring configuration, e.g. IntegrationTestSpringConfiguration. There are many kinds of configs.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362856822", "createdAt": "2020-01-03T15:47:29Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/IntegrationTestConfig.java", "diffHunk": "@@ -1,100 +1,24 @@\n package org.pmiops.workbench;\n \n-import static org.springframework.context.annotation.FilterType.ASSIGNABLE_TYPE;\n-\n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n import com.google.api.client.http.HttpTransport;\n import com.google.api.client.http.apache.ApacheHttpTransport;\n-import com.google.common.io.Resources;\n-import com.google.gson.Gson;\n-import java.io.IOException;\n-import java.nio.charset.Charset;\n-import org.pmiops.workbench.auth.Constants;\n-import org.pmiops.workbench.auth.ServiceAccounts;\n import org.pmiops.workbench.config.CommonConfig;\n import org.pmiops.workbench.config.RetryConfig;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.config.StoredCredentialsConfig;\n import org.pmiops.workbench.firecloud.ApiClient;\n import org.pmiops.workbench.firecloud.FireCloudConfig;\n-import org.pmiops.workbench.google.CloudStorageService;\n+import org.springframework.boot.test.context.TestConfiguration;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.ComponentScan;\n-import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n-import org.springframework.context.annotation.Lazy;\n import org.springframework.retry.backoff.BackOffPolicy;\n import org.springframework.retry.backoff.ExponentialRandomBackOffPolicy;\n import org.springframework.retry.backoff.Sleeper;\n import org.springframework.retry.backoff.ThreadWaitSleeper;\n \n-@Configuration\n-@Import({RetryConfig.class, CommonConfig.class})\n-// Scan the google package, which we need for the CloudStorage bean.\n-@ComponentScan(\"org.pmiops.workbench.google\")\n-// Scan the ServiceAccounts class, but exclude other classes in auth (since they\n-// bring in JPA-related beans, which include a whole bunch of other deps that are\n-// more complicated than we need for now).\n-//\n-// TODO(gjuggler): move ServiceAccounts out of the auth package, or move the more\n-// dependency-ridden classes (e.g. ProfileService) out instead.\n-@ComponentScan(\n-    basePackageClasses = ServiceAccounts.class,\n-    useDefaultFilters = false,\n-    includeFilters = {\n-      @ComponentScan.Filter(type = ASSIGNABLE_TYPE, value = ServiceAccounts.class),\n-    })\n+@TestConfiguration\n+@Import({RetryConfig.class, CommonConfig.class, StoredCredentialsConfig.class})\n public class IntegrationTestConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3MjcyNg==", "bodyText": "I'll make an argument for consistency with our existing codebase. I see you've used this pattern for ActionAuditSpringConfiguration and MonitoringSpringConfiguration (and I don't disagree with the clarification, though those class names do start to be a bit of a mouthful). But we have ~20 files which omit the \"spring\" and end with \"config\". If we wanted to enact a mass change as a team, we should feel free to do that \u2013\u00a0but for now I'd rather stay consistent with our existing conventions.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363772726", "createdAt": "2020-01-07T14:28:59Z", "author": {"login": "gjuggler"}, "path": "api/src/integration/java/org/pmiops/workbench/IntegrationTestConfig.java", "diffHunk": "@@ -1,100 +1,24 @@\n package org.pmiops.workbench;\n \n-import static org.springframework.context.annotation.FilterType.ASSIGNABLE_TYPE;\n-\n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n import com.google.api.client.http.HttpTransport;\n import com.google.api.client.http.apache.ApacheHttpTransport;\n-import com.google.common.io.Resources;\n-import com.google.gson.Gson;\n-import java.io.IOException;\n-import java.nio.charset.Charset;\n-import org.pmiops.workbench.auth.Constants;\n-import org.pmiops.workbench.auth.ServiceAccounts;\n import org.pmiops.workbench.config.CommonConfig;\n import org.pmiops.workbench.config.RetryConfig;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.config.StoredCredentialsConfig;\n import org.pmiops.workbench.firecloud.ApiClient;\n import org.pmiops.workbench.firecloud.FireCloudConfig;\n-import org.pmiops.workbench.google.CloudStorageService;\n+import org.springframework.boot.test.context.TestConfiguration;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.ComponentScan;\n-import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n-import org.springframework.context.annotation.Lazy;\n import org.springframework.retry.backoff.BackOffPolicy;\n import org.springframework.retry.backoff.ExponentialRandomBackOffPolicy;\n import org.springframework.retry.backoff.Sleeper;\n import org.springframework.retry.backoff.ThreadWaitSleeper;\n \n-@Configuration\n-@Import({RetryConfig.class, CommonConfig.class})\n-// Scan the google package, which we need for the CloudStorage bean.\n-@ComponentScan(\"org.pmiops.workbench.google\")\n-// Scan the ServiceAccounts class, but exclude other classes in auth (since they\n-// bring in JPA-related beans, which include a whole bunch of other deps that are\n-// more complicated than we need for now).\n-//\n-// TODO(gjuggler): move ServiceAccounts out of the auth package, or move the more\n-// dependency-ridden classes (e.g. ProfileService) out instead.\n-@ComponentScan(\n-    basePackageClasses = ServiceAccounts.class,\n-    useDefaultFilters = false,\n-    includeFilters = {\n-      @ComponentScan.Filter(type = ASSIGNABLE_TYPE, value = ServiceAccounts.class),\n-    })\n+@TestConfiguration\n+@Import({RetryConfig.class, CommonConfig.class, StoredCredentialsConfig.class})\n public class IntegrationTestConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NjgyMg=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDczMTc1OnYy", "diffSide": "RIGHT", "path": "api/src/integration/java/org/pmiops/workbench/NotebooksIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjowNzozM1rOFaDeKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDozMTowMVrOFa6-4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2NDE3MQ==", "bodyText": "I'd rename getNotebooksStatus to isNotebooksServiceUp(), as it better matches what it does and corresponds to a boolean.\nAgain, I'd rename this to NotebooksSmokeTest. I expected a lot more actual testing considering the boilerplate.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362864171", "createdAt": "2020-01-03T16:07:33Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/NotebooksIntegrationTest.java", "diffHunk": "@@ -3,47 +3,23 @@\n import static com.google.common.truth.Truth.assertThat;\n \n import org.junit.Test;\n-import org.mockito.Mock;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.notebooks.LeonardoNotebooksClient;\n import org.pmiops.workbench.notebooks.LeonardoNotebooksClientImpl;\n-import org.pmiops.workbench.notebooks.NotebooksRetryHandler;\n-import org.pmiops.workbench.notebooks.api.ClusterApi;\n-import org.pmiops.workbench.notebooks.api.NotebooksApi;\n-import org.pmiops.workbench.test.Providers;\n-import org.pmiops.workbench.workspaces.WorkspaceService;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Import;\n \n-/** Created by brubenst on 5/8/18. */\n-public class NotebooksIntegrationTest {\n-  /*\n-   * Mocked service providers are (currently) not available for functional integration tests.\n-   * Integration tests with real projects/clusters against production Notebooks is not\n-   * recommended at this time.\n-   */\n+public class NotebooksIntegrationTest extends BaseIntegrationTest {\n+  @Autowired private LeonardoNotebooksClient leonardoNotebooksClient;\n \n-  @Mock private ClusterApi clusterApi;\n-  @Mock private NotebooksApi notebooksApi;\n-  @Mock private WorkspaceService workspaceService;\n-\n-  private final LeonardoNotebooksClient leonardoNotebooksClient =\n-      new LeonardoNotebooksClientImpl(\n-          Providers.of(clusterApi),\n-          Providers.of(notebooksApi),\n-          Providers.of(createConfig()),\n-          Providers.of(null),\n-          new NotebooksRetryHandler(new NoBackOffPolicy()),\n-          workspaceService);\n+  @TestConfiguration\n+  @ComponentScan(\"org.pmiops.workbench.notebooks\")\n+  @Import({LeonardoNotebooksClientImpl.class})\n+  static class Configuration {}\n \n   @Test\n   public void testStatus() {\n     assertThat(leonardoNotebooksClient.getNotebooksStatus()).isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3MzY2NA==", "bodyText": "Not bad points \u2013\u00a0but this is too far beyond the scope of my PR.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363773664", "createdAt": "2020-01-07T14:31:01Z", "author": {"login": "gjuggler"}, "path": "api/src/integration/java/org/pmiops/workbench/NotebooksIntegrationTest.java", "diffHunk": "@@ -3,47 +3,23 @@\n import static com.google.common.truth.Truth.assertThat;\n \n import org.junit.Test;\n-import org.mockito.Mock;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.notebooks.LeonardoNotebooksClient;\n import org.pmiops.workbench.notebooks.LeonardoNotebooksClientImpl;\n-import org.pmiops.workbench.notebooks.NotebooksRetryHandler;\n-import org.pmiops.workbench.notebooks.api.ClusterApi;\n-import org.pmiops.workbench.notebooks.api.NotebooksApi;\n-import org.pmiops.workbench.test.Providers;\n-import org.pmiops.workbench.workspaces.WorkspaceService;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Import;\n \n-/** Created by brubenst on 5/8/18. */\n-public class NotebooksIntegrationTest {\n-  /*\n-   * Mocked service providers are (currently) not available for functional integration tests.\n-   * Integration tests with real projects/clusters against production Notebooks is not\n-   * recommended at this time.\n-   */\n+public class NotebooksIntegrationTest extends BaseIntegrationTest {\n+  @Autowired private LeonardoNotebooksClient leonardoNotebooksClient;\n \n-  @Mock private ClusterApi clusterApi;\n-  @Mock private NotebooksApi notebooksApi;\n-  @Mock private WorkspaceService workspaceService;\n-\n-  private final LeonardoNotebooksClient leonardoNotebooksClient =\n-      new LeonardoNotebooksClientImpl(\n-          Providers.of(clusterApi),\n-          Providers.of(notebooksApi),\n-          Providers.of(createConfig()),\n-          Providers.of(null),\n-          new NotebooksRetryHandler(new NoBackOffPolicy()),\n-          workspaceService);\n+  @TestConfiguration\n+  @ComponentScan(\"org.pmiops.workbench.notebooks\")\n+  @Import({LeonardoNotebooksClientImpl.class})\n+  static class Configuration {}\n \n   @Test\n   public void testStatus() {\n     assertThat(leonardoNotebooksClient.getNotebooksStatus()).isTrue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2NDE3MQ=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDczNjQ3OnYy", "diffSide": "RIGHT", "path": "api/src/integration/java/org/pmiops/workbench/NotebooksIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjowOTo0OFrOFaDhZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDozMDowOVrOFa69Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2NDk5OA==", "bodyText": "please use a typed basePackages ref if possible, as above.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362864998", "createdAt": "2020-01-03T16:09:48Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/NotebooksIntegrationTest.java", "diffHunk": "@@ -3,47 +3,23 @@\n import static com.google.common.truth.Truth.assertThat;\n \n import org.junit.Test;\n-import org.mockito.Mock;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.notebooks.LeonardoNotebooksClient;\n import org.pmiops.workbench.notebooks.LeonardoNotebooksClientImpl;\n-import org.pmiops.workbench.notebooks.NotebooksRetryHandler;\n-import org.pmiops.workbench.notebooks.api.ClusterApi;\n-import org.pmiops.workbench.notebooks.api.NotebooksApi;\n-import org.pmiops.workbench.test.Providers;\n-import org.pmiops.workbench.workspaces.WorkspaceService;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Import;\n \n-/** Created by brubenst on 5/8/18. */\n-public class NotebooksIntegrationTest {\n-  /*\n-   * Mocked service providers are (currently) not available for functional integration tests.\n-   * Integration tests with real projects/clusters against production Notebooks is not\n-   * recommended at this time.\n-   */\n+public class NotebooksIntegrationTest extends BaseIntegrationTest {\n+  @Autowired private LeonardoNotebooksClient leonardoNotebooksClient;\n \n-  @Mock private ClusterApi clusterApi;\n-  @Mock private NotebooksApi notebooksApi;\n-  @Mock private WorkspaceService workspaceService;\n-\n-  private final LeonardoNotebooksClient leonardoNotebooksClient =\n-      new LeonardoNotebooksClientImpl(\n-          Providers.of(clusterApi),\n-          Providers.of(notebooksApi),\n-          Providers.of(createConfig()),\n-          Providers.of(null),\n-          new NotebooksRetryHandler(new NoBackOffPolicy()),\n-          workspaceService);\n+  @TestConfiguration\n+  @ComponentScan(\"org.pmiops.workbench.notebooks\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3MzI0Mw==", "bodyText": "Done.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363773243", "createdAt": "2020-01-07T14:30:09Z", "author": {"login": "gjuggler"}, "path": "api/src/integration/java/org/pmiops/workbench/NotebooksIntegrationTest.java", "diffHunk": "@@ -3,47 +3,23 @@\n import static com.google.common.truth.Truth.assertThat;\n \n import org.junit.Test;\n-import org.mockito.Mock;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.notebooks.LeonardoNotebooksClient;\n import org.pmiops.workbench.notebooks.LeonardoNotebooksClientImpl;\n-import org.pmiops.workbench.notebooks.NotebooksRetryHandler;\n-import org.pmiops.workbench.notebooks.api.ClusterApi;\n-import org.pmiops.workbench.notebooks.api.NotebooksApi;\n-import org.pmiops.workbench.test.Providers;\n-import org.pmiops.workbench.workspaces.WorkspaceService;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Import;\n \n-/** Created by brubenst on 5/8/18. */\n-public class NotebooksIntegrationTest {\n-  /*\n-   * Mocked service providers are (currently) not available for functional integration tests.\n-   * Integration tests with real projects/clusters against production Notebooks is not\n-   * recommended at this time.\n-   */\n+public class NotebooksIntegrationTest extends BaseIntegrationTest {\n+  @Autowired private LeonardoNotebooksClient leonardoNotebooksClient;\n \n-  @Mock private ClusterApi clusterApi;\n-  @Mock private NotebooksApi notebooksApi;\n-  @Mock private WorkspaceService workspaceService;\n-\n-  private final LeonardoNotebooksClient leonardoNotebooksClient =\n-      new LeonardoNotebooksClientImpl(\n-          Providers.of(clusterApi),\n-          Providers.of(notebooksApi),\n-          Providers.of(createConfig()),\n-          Providers.of(null),\n-          new NotebooksRetryHandler(new NoBackOffPolicy()),\n-          workspaceService);\n+  @TestConfiguration\n+  @ComponentScan(\"org.pmiops.workbench.notebooks\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2NDk5OA=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDczOTU4OnYy", "diffSide": "RIGHT", "path": "api/src/integration/java/org/pmiops/workbench/google/DirectoryServiceImplIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjoxMTowN1rOFaDjUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDozMToyMlrOFa6_Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2NTQ4OA==", "bodyText": "Do we need the Impl in the middle of the test class name (here and above)?", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362865488", "createdAt": "2020-01-03T16:11:07Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/google/DirectoryServiceImplIntegrationTest.java", "diffHunk": "@@ -2,37 +2,23 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.api.client.http.apache.ApacheHttpTransport;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n import java.time.Clock;\n import java.util.Map;\n-import org.junit.Before;\n import org.junit.Test;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n-import org.pmiops.workbench.test.Providers;\n+import org.pmiops.workbench.BaseIntegrationTest;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Import;\n import org.springframework.retry.backoff.ExponentialRandomBackOffPolicy;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n import org.springframework.retry.policy.SimpleRetryPolicy;\n import org.springframework.retry.support.RetryTemplate;\n \n-public class DirectoryServiceImplIntegrationTest {\n-  private DirectoryServiceImpl service;\n-  private final GoogleCredential googleCredential = getGoogleCredential();\n-  private final WorkbenchConfig workbenchConfig = createConfig();\n-  private final ApacheHttpTransport httpTransport = new ApacheHttpTransport();\n+public class DirectoryServiceImplIntegrationTest extends BaseIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3Mzc5NQ==", "bodyText": "Good point \u2013\u00a0this applies to all files in this directory. I'd rather follow-up with a quick file rename PR to keep things cleaner.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363773795", "createdAt": "2020-01-07T14:31:22Z", "author": {"login": "gjuggler"}, "path": "api/src/integration/java/org/pmiops/workbench/google/DirectoryServiceImplIntegrationTest.java", "diffHunk": "@@ -2,37 +2,23 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.api.client.http.apache.ApacheHttpTransport;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n import java.time.Clock;\n import java.util.Map;\n-import org.junit.Before;\n import org.junit.Test;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n-import org.pmiops.workbench.test.Providers;\n+import org.pmiops.workbench.BaseIntegrationTest;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Import;\n import org.springframework.retry.backoff.ExponentialRandomBackOffPolicy;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n import org.springframework.retry.policy.SimpleRetryPolicy;\n import org.springframework.retry.support.RetryTemplate;\n \n-public class DirectoryServiceImplIntegrationTest {\n-  private DirectoryServiceImpl service;\n-  private final GoogleCredential googleCredential = getGoogleCredential();\n-  private final WorkbenchConfig workbenchConfig = createConfig();\n-  private final ApacheHttpTransport httpTransport = new ApacheHttpTransport();\n+public class DirectoryServiceImplIntegrationTest extends BaseIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2NTQ4OA=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDc0MzA1OnYy", "diffSide": "RIGHT", "path": "api/src/integration/java/org/pmiops/workbench/google/DirectoryServiceImplIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjoxMjozOVrOFaDleA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjoxMzoxOFrOFaKdjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2NjA0MA==", "bodyText": "Wait, so this test is explicitly making sure usernames are recyclable? I didn't know we allowed that. What's the benefit of allowing that?", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362866040", "createdAt": "2020-01-03T16:12:39Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/google/DirectoryServiceImplIntegrationTest.java", "diffHunk": "@@ -2,37 +2,23 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.api.client.http.apache.ApacheHttpTransport;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n import java.time.Clock;\n import java.util.Map;\n-import org.junit.Before;\n import org.junit.Test;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n-import org.pmiops.workbench.test.Providers;\n+import org.pmiops.workbench.BaseIntegrationTest;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Import;\n import org.springframework.retry.backoff.ExponentialRandomBackOffPolicy;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n import org.springframework.retry.policy.SimpleRetryPolicy;\n import org.springframework.retry.support.RetryTemplate;\n \n-public class DirectoryServiceImplIntegrationTest {\n-  private DirectoryServiceImpl service;\n-  private final GoogleCredential googleCredential = getGoogleCredential();\n-  private final WorkbenchConfig workbenchConfig = createConfig();\n-  private final ApacheHttpTransport httpTransport = new ApacheHttpTransport();\n+public class DirectoryServiceImplIntegrationTest extends BaseIntegrationTest {\n+  @Autowired private DirectoryService service;\n \n-  @Before\n-  public void setUp() {\n-    service =\n-        new DirectoryServiceImpl(\n-            Providers.of(googleCredential),\n-            Providers.of(workbenchConfig),\n-            httpTransport,\n-            new GoogleRetryHandler(new NoBackOffPolicy()));\n-  }\n+  @TestConfiguration\n+  @Import(DirectoryServiceImpl.class)\n+  static class Configuration {}\n \n   @Test\n   public void testDummyUsernameIsNotTaken() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk3ODcwMg==", "bodyText": "This is not making any statement about recycling usernames. It's testing that a user which has never been created is not taken. The test would break if someone create such a user, but hopefully they won't as indicated by the username.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362978702", "createdAt": "2020-01-03T22:13:18Z", "author": {"login": "calbach"}, "path": "api/src/integration/java/org/pmiops/workbench/google/DirectoryServiceImplIntegrationTest.java", "diffHunk": "@@ -2,37 +2,23 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.api.client.http.apache.ApacheHttpTransport;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n import java.time.Clock;\n import java.util.Map;\n-import org.junit.Before;\n import org.junit.Test;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n-import org.pmiops.workbench.test.Providers;\n+import org.pmiops.workbench.BaseIntegrationTest;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Import;\n import org.springframework.retry.backoff.ExponentialRandomBackOffPolicy;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n import org.springframework.retry.policy.SimpleRetryPolicy;\n import org.springframework.retry.support.RetryTemplate;\n \n-public class DirectoryServiceImplIntegrationTest {\n-  private DirectoryServiceImpl service;\n-  private final GoogleCredential googleCredential = getGoogleCredential();\n-  private final WorkbenchConfig workbenchConfig = createConfig();\n-  private final ApacheHttpTransport httpTransport = new ApacheHttpTransport();\n+public class DirectoryServiceImplIntegrationTest extends BaseIntegrationTest {\n+  @Autowired private DirectoryService service;\n \n-  @Before\n-  public void setUp() {\n-    service =\n-        new DirectoryServiceImpl(\n-            Providers.of(googleCredential),\n-            Providers.of(workbenchConfig),\n-            httpTransport,\n-            new GoogleRetryHandler(new NoBackOffPolicy()));\n-  }\n+  @TestConfiguration\n+  @Import(DirectoryServiceImpl.class)\n+  static class Configuration {}\n \n   @Test\n   public void testDummyUsernameIsNotTaken() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2NjA0MA=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDc1MDE3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjoxNToyNlrOFaDp2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0MTowM1rOFa7Rlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2NzE2Mw==", "bodyText": "I was very pro-utility class until I realized just how much Spring and Mockito aren't excited about working with them. If there are unit tests you want to write that depend on any of these functions, you can't inject a mock.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362867163", "createdAt": "2020-01-03T16:15:26Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -1,52 +1,26 @@\n package org.pmiops.workbench.auth;\n \n-import static com.google.api.client.googleapis.util.Utils.getDefaultJsonFactory;\n-\n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.api.client.http.HttpTransport;\n-import com.google.appengine.api.appidentity.AppIdentityService;\n-import com.google.appengine.api.appidentity.AppIdentityServiceFactory;\n+import com.google.auth.oauth2.GoogleCredentials;\n import java.io.IOException;\n import java.util.List;\n-import org.pmiops.workbench.config.WorkbenchEnvironment;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n /**\n  * Handles functionality related to loading service account credentials and generating derived /\n  * impersonated credentials.\n  */\n-@Component\n public class ServiceAccounts {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3ODQ1NA==", "bodyText": "I agree with the overall approach. I found that after migrating to GoogleCredentials, this class became so tiny that it wasn't worth treating as a service anymore. I think the follow-up PR will clarify this even further, once we have a DelegatedUserCredentials to be the actual object / component being passed into our service classes.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363778454", "createdAt": "2020-01-07T14:41:03Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -1,52 +1,26 @@\n package org.pmiops.workbench.auth;\n \n-import static com.google.api.client.googleapis.util.Utils.getDefaultJsonFactory;\n-\n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.api.client.http.HttpTransport;\n-import com.google.appengine.api.appidentity.AppIdentityService;\n-import com.google.appengine.api.appidentity.AppIdentityServiceFactory;\n+import com.google.auth.oauth2.GoogleCredentials;\n import java.io.IOException;\n import java.util.List;\n-import org.pmiops.workbench.config.WorkbenchEnvironment;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n /**\n  * Handles functionality related to loading service account credentials and generating derived /\n  * impersonated credentials.\n  */\n-@Component\n public class ServiceAccounts {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2NzE2Mw=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDc1MjM5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjoxNjoyOFrOFaDrTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjoxNjoyOFrOFaDrTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2NzUzMw==", "bodyText": "I'd probably have a verb in the function name, like getRefreshedWorkbenchAccessToken()", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362867533", "createdAt": "2020-01-03T16:16:28Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -1,52 +1,26 @@\n package org.pmiops.workbench.auth;\n \n-import static com.google.api.client.googleapis.util.Utils.getDefaultJsonFactory;\n-\n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.api.client.http.HttpTransport;\n-import com.google.appengine.api.appidentity.AppIdentityService;\n-import com.google.appengine.api.appidentity.AppIdentityServiceFactory;\n+import com.google.auth.oauth2.GoogleCredentials;\n import java.io.IOException;\n import java.util.List;\n-import org.pmiops.workbench.config.WorkbenchEnvironment;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n /**\n  * Handles functionality related to loading service account credentials and generating derived /\n  * impersonated credentials.\n  */\n-@Component\n public class ServiceAccounts {\n \n-  private final HttpTransport httpTransport;\n-\n-  @Autowired\n-  public ServiceAccounts(HttpTransport httpTransport) {\n-    this.httpTransport = httpTransport;\n-  }\n-\n-  public GoogleCredential.Builder getCredentialBuilder() {\n-    return new GoogleCredential.Builder();\n-  }\n+  private static final String SIGN_JWT_URL_FORMAT =\n+      \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/%s:signJwt\";\n \n   /**\n    * Retrieves an access token for the Workbench server service account. This should be used\n    * carefully, as this account is generally more privileged than an end user researcher account.\n    */\n-  public String workbenchAccessToken(WorkbenchEnvironment workbenchEnvironment, List<String> scopes)\n-      throws IOException {\n-    // When running locally, we get application default credentials in a different way than\n-    // when running in Cloud.\n-    if (workbenchEnvironment.isDevelopment()) {\n-      GoogleCredential credential = GoogleCredential.getApplicationDefault().createScoped(scopes);\n-      credential.refreshToken();\n-      return credential.getAccessToken();\n-    }\n-    AppIdentityService appIdentity = AppIdentityServiceFactory.getAppIdentityService();\n-    final AppIdentityService.GetAccessTokenResult accessTokenResult =\n-        appIdentity.getAccessToken(scopes);\n-    return accessTokenResult.getAccessToken();\n+  public static String workbenchAccessToken(List<String> scopes) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDc1MzU1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjoxNjo1NVrOFaDsBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0MTo1MVrOFa7THw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2NzcxOA==", "bodyText": "nit: can this just be chained with the statement prior?", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362867718", "createdAt": "2020-01-03T16:16:55Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -1,52 +1,26 @@\n package org.pmiops.workbench.auth;\n \n-import static com.google.api.client.googleapis.util.Utils.getDefaultJsonFactory;\n-\n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.api.client.http.HttpTransport;\n-import com.google.appengine.api.appidentity.AppIdentityService;\n-import com.google.appengine.api.appidentity.AppIdentityServiceFactory;\n+import com.google.auth.oauth2.GoogleCredentials;\n import java.io.IOException;\n import java.util.List;\n-import org.pmiops.workbench.config.WorkbenchEnvironment;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n /**\n  * Handles functionality related to loading service account credentials and generating derived /\n  * impersonated credentials.\n  */\n-@Component\n public class ServiceAccounts {\n \n-  private final HttpTransport httpTransport;\n-\n-  @Autowired\n-  public ServiceAccounts(HttpTransport httpTransport) {\n-    this.httpTransport = httpTransport;\n-  }\n-\n-  public GoogleCredential.Builder getCredentialBuilder() {\n-    return new GoogleCredential.Builder();\n-  }\n+  private static final String SIGN_JWT_URL_FORMAT =\n+      \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/%s:signJwt\";\n \n   /**\n    * Retrieves an access token for the Workbench server service account. This should be used\n    * carefully, as this account is generally more privileged than an end user researcher account.\n    */\n-  public String workbenchAccessToken(WorkbenchEnvironment workbenchEnvironment, List<String> scopes)\n-      throws IOException {\n-    // When running locally, we get application default credentials in a different way than\n-    // when running in Cloud.\n-    if (workbenchEnvironment.isDevelopment()) {\n-      GoogleCredential credential = GoogleCredential.getApplicationDefault().createScoped(scopes);\n-      credential.refreshToken();\n-      return credential.getAccessToken();\n-    }\n-    AppIdentityService appIdentity = AppIdentityServiceFactory.getAppIdentityService();\n-    final AppIdentityService.GetAccessTokenResult accessTokenResult =\n-        appIdentity.getAccessToken(scopes);\n-    return accessTokenResult.getAccessToken();\n+  public static String workbenchAccessToken(List<String> scopes) throws IOException {\n+    GoogleCredentials scopedCreds = GoogleCredentials.getApplicationDefault().createScoped(scopes);\n+    scopedCreds.refresh();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3ODg0Nw==", "bodyText": "Sadly no, refresh() returns void.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363778847", "createdAt": "2020-01-07T14:41:51Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -1,52 +1,26 @@\n package org.pmiops.workbench.auth;\n \n-import static com.google.api.client.googleapis.util.Utils.getDefaultJsonFactory;\n-\n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.api.client.http.HttpTransport;\n-import com.google.appengine.api.appidentity.AppIdentityService;\n-import com.google.appengine.api.appidentity.AppIdentityServiceFactory;\n+import com.google.auth.oauth2.GoogleCredentials;\n import java.io.IOException;\n import java.util.List;\n-import org.pmiops.workbench.config.WorkbenchEnvironment;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n /**\n  * Handles functionality related to loading service account credentials and generating derived /\n  * impersonated credentials.\n  */\n-@Component\n public class ServiceAccounts {\n \n-  private final HttpTransport httpTransport;\n-\n-  @Autowired\n-  public ServiceAccounts(HttpTransport httpTransport) {\n-    this.httpTransport = httpTransport;\n-  }\n-\n-  public GoogleCredential.Builder getCredentialBuilder() {\n-    return new GoogleCredential.Builder();\n-  }\n+  private static final String SIGN_JWT_URL_FORMAT =\n+      \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/%s:signJwt\";\n \n   /**\n    * Retrieves an access token for the Workbench server service account. This should be used\n    * carefully, as this account is generally more privileged than an end user researcher account.\n    */\n-  public String workbenchAccessToken(WorkbenchEnvironment workbenchEnvironment, List<String> scopes)\n-      throws IOException {\n-    // When running locally, we get application default credentials in a different way than\n-    // when running in Cloud.\n-    if (workbenchEnvironment.isDevelopment()) {\n-      GoogleCredential credential = GoogleCredential.getApplicationDefault().createScoped(scopes);\n-      credential.refreshToken();\n-      return credential.getAccessToken();\n-    }\n-    AppIdentityService appIdentity = AppIdentityServiceFactory.getAppIdentityService();\n-    final AppIdentityService.GetAccessTokenResult accessTokenResult =\n-        appIdentity.getAccessToken(scopes);\n-    return accessTokenResult.getAccessToken();\n+  public static String workbenchAccessToken(List<String> scopes) throws IOException {\n+    GoogleCredentials scopedCreds = GoogleCredentials.getApplicationDefault().createScoped(scopes);\n+    scopedCreds.refresh();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2NzcxOA=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDc1NTM0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjoxNzo0N1rOFaDtGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0MjoyN1rOFa7UMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2Nzk5NA==", "bodyText": "is this the username property (i.e. not contact email) in the new usage? If so, I recommend username. as a parameter name.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362867994", "createdAt": "2020-01-03T16:17:47Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -56,30 +30,18 @@ public String workbenchAccessToken(WorkbenchEnvironment workbenchEnvironment, Li\n    *\n    * <p>See docs/domain-delegation.md for more details.\n    *\n-   * @param serviceAccountCredential\n+   * @param originalCredentials\n    * @param userEmail Email address of the user to impersonate.\n    * @param scopes The list of Google / OAuth API scopes to be authorized for.\n    * @return\n    * @throws IOException\n    */\n-  public GoogleCredential getImpersonatedCredential(\n-      GoogleCredential serviceAccountCredential, String userEmail, List<String> scopes)\n+  public static GoogleCredentials getImpersonatedCredentials(\n+      GoogleCredentials originalCredentials, String userEmail, List<String> scopes)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3OTEyMw==", "bodyText": "This is the email address for the user, since that is what OAuth2 cares about.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363779123", "createdAt": "2020-01-07T14:42:27Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -56,30 +30,18 @@ public String workbenchAccessToken(WorkbenchEnvironment workbenchEnvironment, Li\n    *\n    * <p>See docs/domain-delegation.md for more details.\n    *\n-   * @param serviceAccountCredential\n+   * @param originalCredentials\n    * @param userEmail Email address of the user to impersonate.\n    * @param scopes The list of Google / OAuth API scopes to be authorized for.\n    * @return\n    * @throws IOException\n    */\n-  public GoogleCredential getImpersonatedCredential(\n-      GoogleCredential serviceAccountCredential, String userEmail, List<String> scopes)\n+  public static GoogleCredentials getImpersonatedCredentials(\n+      GoogleCredentials originalCredentials, String userEmail, List<String> scopes)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2Nzk5NA=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDc1OTkyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/billing/BillingGarbageCollectionService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjoxOTo1M1rOFaDwAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0ODoxMVrOFa7gDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2ODczNw==", "bodyText": "nit: I'd probably abreviate Garbage Collection as gc and spell out the rest, like gcServiceAccountCredentials. Not used to seeing abbreviations in the middle of identifiers.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362868737", "createdAt": "2020-01-03T16:19:53Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/billing/BillingGarbageCollectionService.java", "diffHunk": "@@ -35,7 +35,7 @@\n   private final Provider<WorkbenchConfig> workbenchConfigProvider;\n   private final Provider<CloudStorageService> cloudStorageServiceProvider;\n   private final Clock clock;\n-  private final LoadingCache<String, GoogleCredential> garbageCollectionSACredentials;\n+  private final LoadingCache<String, GoogleCredentials> garbageCollectionSACredentials;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc4MjE1Nw==", "bodyText": "I'll bite \u2013\u00a0I did a bit of variable renaming for clarity here.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363782157", "createdAt": "2020-01-07T14:48:11Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/billing/BillingGarbageCollectionService.java", "diffHunk": "@@ -35,7 +35,7 @@\n   private final Provider<WorkbenchConfig> workbenchConfigProvider;\n   private final Provider<CloudStorageService> cloudStorageServiceProvider;\n   private final Clock clock;\n-  private final LoadingCache<String, GoogleCredential> garbageCollectionSACredentials;\n+  private final LoadingCache<String, GoogleCredentials> garbageCollectionSACredentials;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2ODczNw=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDc2MTk5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/billing/BillingGarbageCollectionService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjoyMDo0NVrOFaDxOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo1MTozNVrOFa7m-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2OTA0OA==", "bodyText": "Can we factor it out a bit more and inject a Provider<GoogleCredentials> that always gives you refreshed ones? Having to call refresh() like this is kinda temporal coupling, and in any case, we shouldn't expect a programmer to remember to do something we're not willing to ask the computer to remember. So if the provider doesn't work, we can at least have a helper method that fetches and refreshes in one shot and returns one ready to go, RAII-style.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362869048", "createdAt": "2020-01-03T16:20:45Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/billing/BillingGarbageCollectionService.java", "diffHunk": "@@ -137,13 +137,12 @@ private void transferOwnership(final String projectName) {\n     fireCloudService.addOwnerToBillingProject(garbageCollectionSA, projectName);\n \n     try {\n-      final GoogleCredential gcsaCredential =\n+      final GoogleCredentials gcsaCredential =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc4MzkzMQ==", "bodyText": "There's probably a way to get rid of this one line of boilerplate, but it doesn't seem too onerous, so I'm not going to attempt a refactoring of the service here. That would unnecessarily add to the risk of this PR, which already has enough of a potential blast radius.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363783931", "createdAt": "2020-01-07T14:51:35Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/billing/BillingGarbageCollectionService.java", "diffHunk": "@@ -137,13 +137,12 @@ private void transferOwnership(final String projectName) {\n     fireCloudService.addOwnerToBillingProject(garbageCollectionSA, projectName);\n \n     try {\n-      final GoogleCredential gcsaCredential =\n+      final GoogleCredentials gcsaCredential =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2OTA0OA=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDc3NTA0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/config/StoredCredentialsConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjoyNjoxOVrOFaD5OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjoyNjoxOVrOFaD5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3MTA5Ng==", "bodyText": "nit: recommend StoredCredentialsSpringConfiguration, as above.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362871096", "createdAt": "2020-01-03T16:26:19Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/config/StoredCredentialsConfig.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.pmiops.workbench.config;\n+\n+import com.google.auth.oauth2.ServiceAccountCredentials;\n+import java.io.IOException;\n+import org.pmiops.workbench.auth.Constants;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.pmiops.workbench.google.CloudStorageServiceImpl;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Lazy;\n+\n+@Configuration\n+@Import(CloudStorageServiceImpl.class)\n+public class StoredCredentialsConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDc5MTAxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/config/StoredCredentialsConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjozMjoyOVrOFaECpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjozMjoyOVrOFaECpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3MzUwOQ==", "bodyText": "nit: After fiddling with this, I remember why this has to be a constant string rather than an enum name. Still, I'd likely rename Constants to AuthBeanNames.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362873509", "createdAt": "2020-01-03T16:32:29Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/config/StoredCredentialsConfig.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.pmiops.workbench.config;\n+\n+import com.google.auth.oauth2.ServiceAccountCredentials;\n+import java.io.IOException;\n+import org.pmiops.workbench.auth.Constants;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.pmiops.workbench.google.CloudStorageServiceImpl;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Lazy;\n+\n+@Configuration\n+@Import(CloudStorageServiceImpl.class)\n+public class StoredCredentialsConfig {\n+  /**\n+   * Service account credentials for Gsuite administration, corresponding to the \"gsuite-admin\"\n+   * service account in each environment. Enabled for domain-wide delegation of authority.\n+   */\n+  @Lazy\n+  @Bean(name = Constants.GSUITE_ADMIN_CREDS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDc5OTA4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjozNTozOFrOFaEHsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNToxMToyMVrOFa8OmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3NDgwMw==", "bodyText": "nit: is there any additional context you want to add before rethrowing?", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362874803", "createdAt": "2020-01-03T16:35:38Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudConfig.java", "diffHunk": "@@ -55,14 +54,10 @@ public ApiClient endUserApiClient(\n \n   @Bean(name = SERVICE_ACCOUNT_API_CLIENT)\n   @RequestScope(proxyMode = ScopedProxyMode.DEFAULT)\n-  public ApiClient allOfUsApiClient(\n-      WorkbenchEnvironment workbenchEnvironment,\n-      WorkbenchConfig workbenchConfig,\n-      ServiceAccounts serviceAccounts) {\n+  public ApiClient allOfUsApiClient(WorkbenchConfig workbenchConfig) {\n     ApiClient apiClient = buildApiClient(workbenchConfig);\n     try {\n-      apiClient.setAccessToken(\n-          serviceAccounts.workbenchAccessToken(workbenchEnvironment, BILLING_SCOPES));\n+      apiClient.setAccessToken(ServiceAccounts.workbenchAccessToken(BILLING_SCOPES));\n     } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc5NDA3Mg==", "bodyText": "I'll ignore this \u2013\u00a0too far outside the scope of this PR.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363794072", "createdAt": "2020-01-07T15:11:21Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudConfig.java", "diffHunk": "@@ -55,14 +54,10 @@ public ApiClient endUserApiClient(\n \n   @Bean(name = SERVICE_ACCOUNT_API_CLIENT)\n   @RequestScope(proxyMode = ScopedProxyMode.DEFAULT)\n-  public ApiClient allOfUsApiClient(\n-      WorkbenchEnvironment workbenchEnvironment,\n-      WorkbenchConfig workbenchConfig,\n-      ServiceAccounts serviceAccounts) {\n+  public ApiClient allOfUsApiClient(WorkbenchConfig workbenchConfig) {\n     ApiClient apiClient = buildApiClient(workbenchConfig);\n     try {\n-      apiClient.setAccessToken(\n-          serviceAccounts.workbenchAccessToken(workbenchEnvironment, BILLING_SCOPES));\n+      apiClient.setAccessToken(ServiceAccounts.workbenchAccessToken(BILLING_SCOPES));\n     } catch (IOException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3NDgwMw=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDgwMzYzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjozNzoxOFrOFaEKTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNToxMTozN1rOFa8PLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3NTQ2OA==", "bodyText": "Should you add @VisibleForTesting at the interface level too? I don't believe there's any differentiation between unit and other types of testing.\nWould it make sense to define this one level up, at some common parent interface for all REST services we depend on? Probably not worth it right now.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362875468", "createdAt": "2020-01-03T16:37:18Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudService.java", "diffHunk": "@@ -24,6 +24,9 @@\n \n   String WORKSPACE_DELIMITER = \"__\";\n \n+  /** Returns the base path for the FireCloud API. Exposed for integration testing purposes only. */\n+  String getBasePath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc5NDIyMA==", "bodyText": "I didn't think to add it to the interface \u2013\u00a0done.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363794220", "createdAt": "2020-01-07T15:11:37Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudService.java", "diffHunk": "@@ -24,6 +24,9 @@\n \n   String WORKSPACE_DELIMITER = \"__\";\n \n+  /** Returns the base path for the FireCloud API. Exposed for integration testing purposes only. */\n+  String getBasePath();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3NTQ2OA=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDgwOTEzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjozOTozNVrOFaENgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNToxMjozOFrOFa8RIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3NjI5MQ==", "bodyText": "nit: maybe rename this to getFirecloudApiBasePath() so it's more obviously distinct from the service's object model.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362876291", "createdAt": "2020-01-03T16:39:35Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudServiceImpl.java", "diffHunk": "@@ -152,6 +150,12 @@ private void checkAndAddRegistered(FirecloudWorkspaceIngest workspaceIngest) {\n     workspaceIngest.setAuthorizationDomain(ImmutableList.of(registeredDomain));\n   }\n \n+  @Override\n+  @VisibleForTesting\n+  public String getBasePath() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc5NDcyMg==", "bodyText": "Renamed to getApiBasePath", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363794722", "createdAt": "2020-01-07T15:12:38Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudServiceImpl.java", "diffHunk": "@@ -152,6 +150,12 @@ private void checkAndAddRegistered(FirecloudWorkspaceIngest workspaceIngest) {\n     workspaceIngest.setAuthorizationDomain(ImmutableList.of(registeredDomain));\n   }\n \n+  @Override\n+  @VisibleForTesting\n+  public String getBasePath() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3NjI5MQ=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDgxMzI5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/google/CloudStorageServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjo0MTozMVrOFaEQLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNToxMzo0MlrOFa8TOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3Njk3NQ==", "bodyText": "I'd make these json strings constants or configurable.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362876975", "createdAt": "2020-01-03T16:41:31Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/google/CloudStorageServiceImpl.java", "diffHunk": "@@ -130,36 +130,36 @@ private String readCredentialsBucketString(String objectPath) {\n     return readBlobAsString(getBlob(getCredentialsBucketName(), objectPath));\n   }\n \n-  private GoogleCredential getCredential(final String objectPath) throws IOException {\n+  private ServiceAccountCredentials getCredentials(final String objectPath) throws IOException {\n     final String json = readCredentialsBucketString(objectPath);\n-    return GoogleCredential.fromStream(new ByteArrayInputStream(json.getBytes()));\n+    return ServiceAccountCredentials.fromStream(new ByteArrayInputStream(json.getBytes()));\n   }\n \n   @Override\n-  public GoogleCredential getGSuiteAdminCredentials() throws IOException {\n-    return getCredential(\"gsuite-admin-sa.json\");\n+  public ServiceAccountCredentials getGSuiteAdminCredentials() throws IOException {\n+    return getCredentials(\"gsuite-admin-sa.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc5NTI1Ng==", "bodyText": "As replied above to CH's comment \u2013\u00a0this code isn't super ideal, but it's going away soon so I'd rather not spin wheels making it perfect for now.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363795256", "createdAt": "2020-01-07T15:13:42Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/google/CloudStorageServiceImpl.java", "diffHunk": "@@ -130,36 +130,36 @@ private String readCredentialsBucketString(String objectPath) {\n     return readBlobAsString(getBlob(getCredentialsBucketName(), objectPath));\n   }\n \n-  private GoogleCredential getCredential(final String objectPath) throws IOException {\n+  private ServiceAccountCredentials getCredentials(final String objectPath) throws IOException {\n     final String json = readCredentialsBucketString(objectPath);\n-    return GoogleCredential.fromStream(new ByteArrayInputStream(json.getBytes()));\n+    return ServiceAccountCredentials.fromStream(new ByteArrayInputStream(json.getBytes()));\n   }\n \n   @Override\n-  public GoogleCredential getGSuiteAdminCredentials() throws IOException {\n-    return getCredential(\"gsuite-admin-sa.json\");\n+  public ServiceAccountCredentials getGSuiteAdminCredentials() throws IOException {\n+    return getCredentials(\"gsuite-admin-sa.json\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3Njk3NQ=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDgyMDg3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/google/DirectoryService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjo0NDo1NlrOFaEU5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNToxNDowOFrOFa8UAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3ODE4Mg==", "bodyText": "Would renaming this to GSuiteDirectoryService or similar be clearer at a glance? If you're looking in the tree view it's probably clear, but I like to jump around.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362878182", "createdAt": "2020-01-03T16:44:56Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/google/DirectoryService.java", "diffHunk": "@@ -6,8 +6,21 @@\n public interface DirectoryService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc5NTQ1OA==", "bodyText": "It might be clearer, but I'd rather avoid renaming service classes in this PR.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363795458", "createdAt": "2020-01-07T15:14:08Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/google/DirectoryService.java", "diffHunk": "@@ -6,8 +6,21 @@\n public interface DirectoryService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3ODE4Mg=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDgyMjkyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/google/DirectoryServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjo0NTo1MFrOFaEWLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNToyMzoyOFrOFa8nEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3ODUwOA==", "bodyText": "maybe document when you should expect an IOException.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362878508", "createdAt": "2020-01-03T16:45:50Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/google/DirectoryServiceImpl.java", "diffHunk": "@@ -65,42 +69,35 @@\n               DirectoryScopes.ADMIN_DIRECTORY_USER_ALIAS_READONLY,\n           DirectoryScopes.ADMIN_DIRECTORY_USER, DirectoryScopes.ADMIN_DIRECTORY_USER_READONLY);\n \n-  private final Provider<GoogleCredential> googleCredentialProvider;\n+  private final Provider<ServiceAccountCredentials> googleCredentialsProvider;\n   private final Provider<WorkbenchConfig> configProvider;\n   private final HttpTransport httpTransport;\n   private final GoogleRetryHandler retryHandler;\n \n   @Autowired\n   public DirectoryServiceImpl(\n-      @Qualifier(\"gsuiteAdminCredentials\") Provider<GoogleCredential> googleCredentialProvider,\n+      @Qualifier(Constants.GSUITE_ADMIN_CREDS)\n+          Provider<ServiceAccountCredentials> googleCredentialsProvider,\n       Provider<WorkbenchConfig> configProvider,\n       HttpTransport httpTransport,\n       GoogleRetryHandler retryHandler) {\n-    this.googleCredentialProvider = googleCredentialProvider;\n+    this.googleCredentialsProvider = googleCredentialsProvider;\n     this.configProvider = configProvider;\n     this.httpTransport = httpTransport;\n     this.retryHandler = retryHandler;\n   }\n \n-  private GoogleCredential createCredentialWithImpersonation() {\n-    GoogleCredential googleCredential = googleCredentialProvider.get();\n+  private GoogleCredentials createCredentialWithImpersonation() throws IOException {\n     String gSuiteDomain = configProvider.get().googleDirectoryService.gSuiteDomain;\n-    return new GoogleCredential.Builder()\n-        .setTransport(httpTransport)\n-        .setJsonFactory(getDefaultJsonFactory())\n-        // Must be an admin user in the GSuite domain.\n-        .setServiceAccountUser(\"directory-service@\" + gSuiteDomain)\n-        .setServiceAccountId(googleCredential.getServiceAccountId())\n-        .setServiceAccountScopes(SCOPES)\n-        .setServiceAccountPrivateKey(googleCredential.getServiceAccountPrivateKey())\n-        .setServiceAccountPrivateKeyId(googleCredential.getServiceAccountPrivateKeyId())\n-        .setTokenServerEncodedUrl(googleCredential.getTokenServerEncodedUrl())\n-        .build();\n+    return ServiceAccounts.getImpersonatedCredentials(\n+        googleCredentialsProvider.get(), \"directory-service@\" + gSuiteDomain, SCOPES);\n   }\n \n-  private Directory getGoogleDirectoryService() {\n+  private Directory getGoogleDirectoryService() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMDMzOQ==", "bodyText": "Done.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363800339", "createdAt": "2020-01-07T15:23:28Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/google/DirectoryServiceImpl.java", "diffHunk": "@@ -65,42 +69,35 @@\n               DirectoryScopes.ADMIN_DIRECTORY_USER_ALIAS_READONLY,\n           DirectoryScopes.ADMIN_DIRECTORY_USER, DirectoryScopes.ADMIN_DIRECTORY_USER_READONLY);\n \n-  private final Provider<GoogleCredential> googleCredentialProvider;\n+  private final Provider<ServiceAccountCredentials> googleCredentialsProvider;\n   private final Provider<WorkbenchConfig> configProvider;\n   private final HttpTransport httpTransport;\n   private final GoogleRetryHandler retryHandler;\n \n   @Autowired\n   public DirectoryServiceImpl(\n-      @Qualifier(\"gsuiteAdminCredentials\") Provider<GoogleCredential> googleCredentialProvider,\n+      @Qualifier(Constants.GSUITE_ADMIN_CREDS)\n+          Provider<ServiceAccountCredentials> googleCredentialsProvider,\n       Provider<WorkbenchConfig> configProvider,\n       HttpTransport httpTransport,\n       GoogleRetryHandler retryHandler) {\n-    this.googleCredentialProvider = googleCredentialProvider;\n+    this.googleCredentialsProvider = googleCredentialsProvider;\n     this.configProvider = configProvider;\n     this.httpTransport = httpTransport;\n     this.retryHandler = retryHandler;\n   }\n \n-  private GoogleCredential createCredentialWithImpersonation() {\n-    GoogleCredential googleCredential = googleCredentialProvider.get();\n+  private GoogleCredentials createCredentialWithImpersonation() throws IOException {\n     String gSuiteDomain = configProvider.get().googleDirectoryService.gSuiteDomain;\n-    return new GoogleCredential.Builder()\n-        .setTransport(httpTransport)\n-        .setJsonFactory(getDefaultJsonFactory())\n-        // Must be an admin user in the GSuite domain.\n-        .setServiceAccountUser(\"directory-service@\" + gSuiteDomain)\n-        .setServiceAccountId(googleCredential.getServiceAccountId())\n-        .setServiceAccountScopes(SCOPES)\n-        .setServiceAccountPrivateKey(googleCredential.getServiceAccountPrivateKey())\n-        .setServiceAccountPrivateKeyId(googleCredential.getServiceAccountPrivateKeyId())\n-        .setTokenServerEncodedUrl(googleCredential.getTokenServerEncodedUrl())\n-        .build();\n+    return ServiceAccounts.getImpersonatedCredentials(\n+        googleCredentialsProvider.get(), \"directory-service@\" + gSuiteDomain, SCOPES);\n   }\n \n-  private Directory getGoogleDirectoryService() {\n+  private Directory getGoogleDirectoryService() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3ODUwOA=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDgyNjg3OnYy", "diffSide": "LEFT", "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjo0Nzo0M1rOFaEYvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNToyNDoxOFrOFa8ojA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3OTE2NQ==", "bodyText": "nit: if you still have appetite for refactoring, consider autowiring this. I believe we shouldn't need to use Providers.of() if we're setting up the test configuration properly.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362879165", "createdAt": "2020-01-03T16:47:43Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -171,25 +167,7 @@ public void setUp() throws MessagingException {\n             fireCloudService,\n             directoryService,\n             cloudStorageService,\n-            leonardoNotebooksClient,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMDcxNg==", "bodyText": "Nope! I engaged in integration test refactoring because those tests are relevant to credentials evaluation, and they seemed tractable enough as a group to tackle as part of this PR (which was probably not the right judgement, given how the scope blew up). But unit tests are a whole different story.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363800716", "createdAt": "2020-01-07T15:24:18Z", "author": {"login": "gjuggler"}, "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -171,25 +167,7 @@ public void setUp() throws MessagingException {\n             fireCloudService,\n             directoryService,\n             cloudStorageService,\n-            leonardoNotebooksClient,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3OTE2NQ=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDgzMzI1OnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ServiceAccountAPIClientFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjo1MDo0OFrOFaEcxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNTozMDoyM1rOFa81Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg4MDE5OQ==", "bodyText": "So is \"credentials\" singular now? Or both?", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362880199", "createdAt": "2020-01-03T16:50:48Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ServiceAccountAPIClientFactory.java", "diffHunk": "@@ -24,10 +24,10 @@ public ServiceAccountAPIClientFactory(String apiUrl) {\n   private ApiClient newApiClient(String apiUrl) throws IOException {\n     ApiClient apiClient = new ApiClient();\n     apiClient.setBasePath(apiUrl);\n-    GoogleCredential credential =\n-        GoogleCredential.getApplicationDefault().createScoped(Arrays.asList(FC_SCOPES));\n-    credential.refreshToken();\n-    apiClient.setAccessToken(credential.getAccessToken());\n+    GoogleCredentials credentials =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMzkyMw==", "bodyText": "I think Google's decision to rename the core class was meant to align more with standard oauth2 documentation, where Credentials is generally referred to as the set of identifiers / keys used to authenticate into a system", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363803923", "createdAt": "2020-01-07T15:30:23Z", "author": {"login": "gjuggler"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ServiceAccountAPIClientFactory.java", "diffHunk": "@@ -24,10 +24,10 @@ public ServiceAccountAPIClientFactory(String apiUrl) {\n   private ApiClient newApiClient(String apiUrl) throws IOException {\n     ApiClient apiClient = new ApiClient();\n     apiClient.setBasePath(apiUrl);\n-    GoogleCredential credential =\n-        GoogleCredential.getApplicationDefault().createScoped(Arrays.asList(FC_SCOPES));\n-    credential.refreshToken();\n-    apiClient.setAccessToken(credential.getAccessToken());\n+    GoogleCredentials credentials =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg4MDE5OQ=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDgzNzQ3OnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ServiceAccountAPIClientFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjo1Mjo1NFrOFaEfXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNToyNzowN1rOFa8uxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg4MDg2MQ==", "bodyText": "Why do we need to use a factory class instead of defining a bean in a configuration somewhere? If we had an ApiUrlProvider it could be beans all the way down...", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362880861", "createdAt": "2020-01-03T16:52:54Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ServiceAccountAPIClientFactory.java", "diffHunk": "@@ -1,6 +1,6 @@\n package org.pmiops.workbench.tools;\n \n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.auth.oauth2.GoogleCredentials;\n import java.io.IOException;\n import java.util.Arrays;\n import org.pmiops.workbench.firecloud.ApiClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMjMxMQ==", "bodyText": "Yeah, there might be an alternative spring config based approach that would work. Not sure it's worth too much effort in the context of the tools module, since we're likely going to move away from that pattern altogether in the long run.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363802311", "createdAt": "2020-01-07T15:27:07Z", "author": {"login": "gjuggler"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ServiceAccountAPIClientFactory.java", "diffHunk": "@@ -1,6 +1,6 @@\n package org.pmiops.workbench.tools;\n \n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.auth.oauth2.GoogleCredentials;\n import java.io.IOException;\n import java.util.Arrays;\n import org.pmiops.workbench.firecloud.ApiClient;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg4MDg2MQ=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTQ2NTk4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjoxNzoyOFrOFaKhRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDozNzowN1rOFa7KcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk3OTY1NQ==", "bodyText": "Per Jay's comment above, in this case I would either change this function to accept a GoogleCredentials as a parameter (the client would pass ADC), or revert the static change and go back to a component/service", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362979655", "createdAt": "2020-01-03T22:17:28Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -1,52 +1,26 @@\n package org.pmiops.workbench.auth;\n \n-import static com.google.api.client.googleapis.util.Utils.getDefaultJsonFactory;\n-\n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.api.client.http.HttpTransport;\n-import com.google.appengine.api.appidentity.AppIdentityService;\n-import com.google.appengine.api.appidentity.AppIdentityServiceFactory;\n+import com.google.auth.oauth2.GoogleCredentials;\n import java.io.IOException;\n import java.util.List;\n-import org.pmiops.workbench.config.WorkbenchEnvironment;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n /**\n  * Handles functionality related to loading service account credentials and generating derived /\n  * impersonated credentials.\n  */\n-@Component\n public class ServiceAccounts {\n \n-  private final HttpTransport httpTransport;\n-\n-  @Autowired\n-  public ServiceAccounts(HttpTransport httpTransport) {\n-    this.httpTransport = httpTransport;\n-  }\n-\n-  public GoogleCredential.Builder getCredentialBuilder() {\n-    return new GoogleCredential.Builder();\n-  }\n+  private static final String SIGN_JWT_URL_FORMAT =\n+      \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/%s:signJwt\";\n \n   /**\n    * Retrieves an access token for the Workbench server service account. This should be used\n    * carefully, as this account is generally more privileged than an end user researcher account.\n    */\n-  public String workbenchAccessToken(WorkbenchEnvironment workbenchEnvironment, List<String> scopes)\n-      throws IOException {\n-    // When running locally, we get application default credentials in a different way than\n-    // when running in Cloud.\n-    if (workbenchEnvironment.isDevelopment()) {\n-      GoogleCredential credential = GoogleCredential.getApplicationDefault().createScoped(scopes);\n-      credential.refreshToken();\n-      return credential.getAccessToken();\n-    }\n-    AppIdentityService appIdentity = AppIdentityServiceFactory.getAppIdentityService();\n-    final AppIdentityService.GetAccessTokenResult accessTokenResult =\n-        appIdentity.getAccessToken(scopes);\n-    return accessTokenResult.getAccessToken();\n+  public static String workbenchAccessToken(List<String> scopes) throws IOException {\n+    GoogleCredentials scopedCreds = GoogleCredentials.getApplicationDefault().createScoped(scopes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3NjYyNA==", "bodyText": "For consistency with the other util method, I opted for the former approach. There's so little here (and there will be even less after the follow-up PR), it's not worth treating this as an injected component.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363776624", "createdAt": "2020-01-07T14:37:07Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -1,52 +1,26 @@\n package org.pmiops.workbench.auth;\n \n-import static com.google.api.client.googleapis.util.Utils.getDefaultJsonFactory;\n-\n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.api.client.http.HttpTransport;\n-import com.google.appengine.api.appidentity.AppIdentityService;\n-import com.google.appengine.api.appidentity.AppIdentityServiceFactory;\n+import com.google.auth.oauth2.GoogleCredentials;\n import java.io.IOException;\n import java.util.List;\n-import org.pmiops.workbench.config.WorkbenchEnvironment;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n /**\n  * Handles functionality related to loading service account credentials and generating derived /\n  * impersonated credentials.\n  */\n-@Component\n public class ServiceAccounts {\n \n-  private final HttpTransport httpTransport;\n-\n-  @Autowired\n-  public ServiceAccounts(HttpTransport httpTransport) {\n-    this.httpTransport = httpTransport;\n-  }\n-\n-  public GoogleCredential.Builder getCredentialBuilder() {\n-    return new GoogleCredential.Builder();\n-  }\n+  private static final String SIGN_JWT_URL_FORMAT =\n+      \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/%s:signJwt\";\n \n   /**\n    * Retrieves an access token for the Workbench server service account. This should be used\n    * carefully, as this account is generally more privileged than an end user researcher account.\n    */\n-  public String workbenchAccessToken(WorkbenchEnvironment workbenchEnvironment, List<String> scopes)\n-      throws IOException {\n-    // When running locally, we get application default credentials in a different way than\n-    // when running in Cloud.\n-    if (workbenchEnvironment.isDevelopment()) {\n-      GoogleCredential credential = GoogleCredential.getApplicationDefault().createScoped(scopes);\n-      credential.refreshToken();\n-      return credential.getAccessToken();\n-    }\n-    AppIdentityService appIdentity = AppIdentityServiceFactory.getAppIdentityService();\n-    final AppIdentityService.GetAccessTokenResult accessTokenResult =\n-        appIdentity.getAccessToken(scopes);\n-    return accessTokenResult.getAccessToken();\n+  public static String workbenchAccessToken(List<String> scopes) throws IOException {\n+    GoogleCredentials scopedCreds = GoogleCredentials.getApplicationDefault().createScoped(scopes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk3OTY1NQ=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTQ3MjczOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/config/StoredCredentialsConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjoyMTozMVrOFaKlLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNTowODo0OVrOFa8JhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4MDY1NQ==", "bodyText": "Probably just a TODO: this method (and friends) should not exist on cloudStorageService. Now that you have this bean, I would remove it there, and just have this call a basic readBlob() method instead; knowledge of that file's name etc would be better encoded in this provider.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362980655", "createdAt": "2020-01-03T22:21:31Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/config/StoredCredentialsConfig.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.pmiops.workbench.config;\n+\n+import com.google.auth.oauth2.ServiceAccountCredentials;\n+import java.io.IOException;\n+import org.pmiops.workbench.auth.Constants;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.pmiops.workbench.google.CloudStorageServiceImpl;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Lazy;\n+\n+@Configuration\n+@Import(CloudStorageServiceImpl.class)\n+public class StoredCredentialsConfig {\n+  /**\n+   * Service account credentials for Gsuite administration, corresponding to the \"gsuite-admin\"\n+   * service account in each environment. Enabled for domain-wide delegation of authority.\n+   */\n+  @Lazy\n+  @Bean(name = Constants.GSUITE_ADMIN_CREDS)\n+  public ServiceAccountCredentials gsuiteAdminCredential(CloudStorageService cloudStorageService)\n+      throws IOException {\n+    return cloudStorageService.getGSuiteAdminCredentials();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc5Mjc3Mw==", "bodyText": "Yeah \u2013\u00a0it's not ideal, but all of this code will go away once we've moved to on-GCS-stored credentials. So while it would a nice minor TODO / cleanup, I'll punt for now.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363792773", "createdAt": "2020-01-07T15:08:49Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/config/StoredCredentialsConfig.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.pmiops.workbench.config;\n+\n+import com.google.auth.oauth2.ServiceAccountCredentials;\n+import java.io.IOException;\n+import org.pmiops.workbench.auth.Constants;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.pmiops.workbench.google.CloudStorageServiceImpl;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Lazy;\n+\n+@Configuration\n+@Import(CloudStorageServiceImpl.class)\n+public class StoredCredentialsConfig {\n+  /**\n+   * Service account credentials for Gsuite administration, corresponding to the \"gsuite-admin\"\n+   * service account in each environment. Enabled for domain-wide delegation of authority.\n+   */\n+  @Lazy\n+  @Bean(name = Constants.GSUITE_ADMIN_CREDS)\n+  public ServiceAccountCredentials gsuiteAdminCredential(CloudStorageService cloudStorageService)\n+      throws IOException {\n+    return cloudStorageService.getGSuiteAdminCredentials();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4MDY1NQ=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTQ3OTcyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/config/RetryConfig.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjoyNjowMlrOFaKpPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwMTo0Mzo0MVrOFbKyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4MTY5Mg==", "bodyText": "Hmmm... this is importing all of the subclasses of RetryConfig.ResponseCodeRetryPolicy. That seems a bit circular to me. What was the rationale for this change? Please also add a comment here explaining the criteria for adding another handler here.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362981692", "createdAt": "2020-01-03T22:26:02Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/config/RetryConfig.java", "diffHunk": "@@ -14,6 +18,7 @@\n import org.springframework.retry.policy.SimpleRetryPolicy;\n \n @Configuration\n+@Import({NotebooksRetryHandler.class, GoogleRetryHandler.class, FirecloudRetryHandler.class})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM2MDU5OQ==", "bodyText": "Aside: If the intent is to import a bunch of classes that have something in common (like a parent interface), I bet there's a pattern for that, such that another new subclass would automatically get picked up.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363360599", "createdAt": "2020-01-06T16:08:08Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/config/RetryConfig.java", "diffHunk": "@@ -14,6 +18,7 @@\n import org.springframework.retry.policy.SimpleRetryPolicy;\n \n @Configuration\n+@Import({NotebooksRetryHandler.class, GoogleRetryHandler.class, FirecloudRetryHandler.class})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4MTY5Mg=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc5MTM5OA==", "bodyText": "PTAL \u2013 I tried pulling out the class definition so this is more obviously a pattern of one config importing a bunch of thematically related / dependent configurations.\nThe problem I was running into was that the integration test config was dependent on all of these widely-scattered configuration files. It felt like importing them all via a base RetryConfig was sensible enough; the alternative was to move this @import statement into IntegrationTestConfig directly.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363791398", "createdAt": "2020-01-07T15:06:06Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/config/RetryConfig.java", "diffHunk": "@@ -14,6 +18,7 @@\n import org.springframework.retry.policy.SimpleRetryPolicy;\n \n @Configuration\n+@Import({NotebooksRetryHandler.class, GoogleRetryHandler.class, FirecloudRetryHandler.class})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4MTY5Mg=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAzMjU2Ng==", "bodyText": "Thanks, I find this to be much clearer.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r364032566", "createdAt": "2020-01-08T01:43:41Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/config/RetryConfig.java", "diffHunk": "@@ -14,6 +18,7 @@\n import org.springframework.retry.policy.SimpleRetryPolicy;\n \n @Configuration\n+@Import({NotebooksRetryHandler.class, GoogleRetryHandler.class, FirecloudRetryHandler.class})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4MTY5Mg=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTQ4NTg1OnYy", "diffSide": "RIGHT", "path": "api/src/integration/java/org/pmiops/workbench/BaseIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjozMDoxNVrOFaKs6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNzo0NDo1MlrOFakWdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4MjYzMw==", "bodyText": "package private doesn't seem correct here - is the intent that subclasses can modify this? If so, probably should be public or protected (likewise for loadConfig)", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362982633", "createdAt": "2020-01-03T22:30:15Z", "author": {"login": "calbach"}, "path": "api/src/integration/java/org/pmiops/workbench/BaseIntegrationTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.pmiops.workbench;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+\n+@RunWith(SpringRunner.class)\n+@WebAppConfiguration\n+@Import({IntegrationTestConfig.class})\n+public abstract class BaseIntegrationTest {\n+\n+  static WorkbenchConfig config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQwMjg2OQ==", "bodyText": "Yes, good point \u2013 protected is what I'd meant to use.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363402869", "createdAt": "2020-01-06T17:44:52Z", "author": {"login": "gjuggler"}, "path": "api/src/integration/java/org/pmiops/workbench/BaseIntegrationTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.pmiops.workbench;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+\n+@RunWith(SpringRunner.class)\n+@WebAppConfiguration\n+@Import({IntegrationTestConfig.class})\n+public abstract class BaseIntegrationTest {\n+\n+  static WorkbenchConfig config;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4MjYzMw=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTQ5MjUyOnYy", "diffSide": "RIGHT", "path": "api/src/integration/java/org/pmiops/workbench/BaseIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjozNTowOFrOFaKwxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDoxMjoyM1rOFa6dyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4MzYyMw==", "bodyText": "I'd be a bit worried about state carrying over between test cases. Perhaps a setup/tearDown base method integrated approach would be safer. i.e. setUp() calls an optional method getWorkbenchConfig() (used when there's a consistent config used for the whole test class), tearDown() nulls it out. Still allow direct access to config in case a subclass needs to customize the config per individual test cases.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362983623", "createdAt": "2020-01-03T22:35:08Z", "author": {"login": "calbach"}, "path": "api/src/integration/java/org/pmiops/workbench/BaseIntegrationTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.pmiops.workbench;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+\n+@RunWith(SpringRunner.class)\n+@WebAppConfiguration\n+@Import({IntegrationTestConfig.class})\n+public abstract class BaseIntegrationTest {\n+\n+  static WorkbenchConfig config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM2MzExMA==", "bodyText": "So the first question for me is whether a subclass is expected to grab this config object and mutate it, or supply its own config bean and import it in with a qualifier. I feel like the latter approach is more idiomatic in Spring. Maybe have a default builder or something for an IntegrationTestConfig for convenience.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363363110", "createdAt": "2020-01-06T16:13:29Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/BaseIntegrationTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.pmiops.workbench;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+\n+@RunWith(SpringRunner.class)\n+@WebAppConfiguration\n+@Import({IntegrationTestConfig.class})\n+public abstract class BaseIntegrationTest {\n+\n+  static WorkbenchConfig config;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4MzYyMw=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2NTE5NA==", "bodyText": "Thanks \u2013 I went with the setUp / tearDown approach in the base class.\nWhile I agree that having each subclass provide its own bean may be more idiomatic, it would create a ton of boilerplate that we don't need here. If anyone else comes up with a cleaner / simpler approach I'd be happy to see it, but I think this is as minimal as we can get.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r363765194", "createdAt": "2020-01-07T14:12:23Z", "author": {"login": "gjuggler"}, "path": "api/src/integration/java/org/pmiops/workbench/BaseIntegrationTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.pmiops.workbench;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+\n+@RunWith(SpringRunner.class)\n+@WebAppConfiguration\n+@Import({IntegrationTestConfig.class})\n+public abstract class BaseIntegrationTest {\n+\n+  static WorkbenchConfig config;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4MzYyMw=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODMzOTU3OnYy", "diffSide": "LEFT", "path": "api/src/integration/java/org/pmiops/workbench/google/DirectoryServiceImplIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwMTo0MDoyMVrOFbKvpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNzoxOTo1NVrOFbeCkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAzMTkxMQ==", "bodyText": "Sorry, I missed your original request from me. Not sure why we were doing things this way - reading from GCS seems totally fine. Either as part of this, or as a follow-up cleanup ticket, I would also teardown the code that bundles the keyfile into the application itself: \n  \n    \n      workbench/api/libproject/devstart.rb\n    \n    \n         Line 344\n      in\n      dee66cf\n    \n    \n    \n    \n\n        \n          \n           def get_gsuite_admin_key(project)", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r364031911", "createdAt": "2020-01-08T01:40:21Z", "author": {"login": "calbach"}, "path": "api/src/integration/java/org/pmiops/workbench/google/DirectoryServiceImplIntegrationTest.java", "diffHunk": "@@ -80,20 +66,4 @@ private static RetryTemplate retryTemplate() {\n     tmpl.setThrowLastExceptionOnExhausted(true);\n     return tmpl;\n   }\n-\n-  private static GoogleCredential getGoogleCredential() {\n-    try {\n-      String saKeyPath = \"src/main/webapp/WEB-INF/gsuite-admin-sa.json\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e7e0760ee5b5e6a8a08a675007d338c048c0aa3"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM0ODA0OA==", "bodyText": "Thanks for the sanity-check. I'll flag that task as part of the overall private-key-storage cleanup (just filed as RW-4250).", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r364348048", "createdAt": "2020-01-08T17:19:55Z", "author": {"login": "gjuggler"}, "path": "api/src/integration/java/org/pmiops/workbench/google/DirectoryServiceImplIntegrationTest.java", "diffHunk": "@@ -80,20 +66,4 @@ private static RetryTemplate retryTemplate() {\n     tmpl.setThrowLastExceptionOnExhausted(true);\n     return tmpl;\n   }\n-\n-  private static GoogleCredential getGoogleCredential() {\n-    try {\n-      String saKeyPath = \"src/main/webapp/WEB-INF/gsuite-admin-sa.json\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAzMTkxMQ=="}, "originalCommit": {"oid": "2e7e0760ee5b5e6a8a08a675007d338c048c0aa3"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3561, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}