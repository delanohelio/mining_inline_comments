{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMzkyNDUx", "number": 3286, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDowNzozOFrODqZJCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDozNDoxM1rODrrI7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzc4Njk5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/pdf-viewer.spec.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDowNzozOFrOF6HAvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDowNzozOFrOF6HAvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NjYwNg==", "bodyText": "nit: check the IDE settings to insert a newline before EOF", "url": "https://github.com/all-of-us/workbench/pull/3286#discussion_r396476606", "createdAt": "2020-03-23T14:07:38Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/pdf-viewer.spec.tsx", "diffHunk": "@@ -0,0 +1,27 @@\n+import {shallow} from 'enzyme';\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+import {PdfViewer, Props} from 'app/components/pdf-viewer';\n+\n+let props = {\n+  windowSize: {width: 1700, height: 0},\n+  pdfPath: '/assets/documents/fake-document-path.pdf'\n+};\n+\n+it('should load PDF pages', async() => {\n+  const wrapper = shallow(<PdfViewer {...props} />).shallow();\n+\n+  // Initially we should have a document and no pages.\n+  expect(wrapper.find(Document).length).toEqual(1);\n+  expect(wrapper.find(Page).length).toEqual(0);\n+\n+  // Simulate the PDF document loading and calling the 'onLoadSuccess' prop to indicate we have\n+  // 10 pages in the PDF.\n+  const pdfDocument = wrapper.find(Document);\n+  const onSuccess = pdfDocument.prop('onLoadSuccess') as (data: object) => {};\n+  onSuccess({numPages: 10});\n+\n+  // We should now be rendering a <Page> component for each of the pages.\n+  expect(wrapper.find(Page).length).toEqual(10);\n+});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c98e0ee90e9612d7ce690af2a335e926611572c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzc5NzA0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/pdf-viewer.spec.tsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxMDowM1rOF6HHKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToxODoyOVrOF61StA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3ODI1MQ==", "bodyText": "thinking out loud: Is there a way to test actual content on the pages? This kinda feels like we're saying \"there are 10 pages. How many pages are there? 10? good.\" Not sure how much is really getting covered by this test I guess, but it may be all you can really do here.", "url": "https://github.com/all-of-us/workbench/pull/3286#discussion_r396478251", "createdAt": "2020-03-23T14:10:03Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/pdf-viewer.spec.tsx", "diffHunk": "@@ -0,0 +1,27 @@\n+import {shallow} from 'enzyme';\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+import {PdfViewer, Props} from 'app/components/pdf-viewer';\n+\n+let props = {\n+  windowSize: {width: 1700, height: 0},\n+  pdfPath: '/assets/documents/fake-document-path.pdf'\n+};\n+\n+it('should load PDF pages', async() => {\n+  const wrapper = shallow(<PdfViewer {...props} />).shallow();\n+\n+  // Initially we should have a document and no pages.\n+  expect(wrapper.find(Document).length).toEqual(1);\n+  expect(wrapper.find(Page).length).toEqual(0);\n+\n+  // Simulate the PDF document loading and calling the 'onLoadSuccess' prop to indicate we have\n+  // 10 pages in the PDF.\n+  const pdfDocument = wrapper.find(Document);\n+  const onSuccess = pdfDocument.prop('onLoadSuccess') as (data: object) => {};\n+  onSuccess({numPages: 10});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c98e0ee90e9612d7ce690af2a335e926611572c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5MTMzNA==", "bodyText": "I could ingest the blob, I guess, but there's not much value in that. what I should really test is that the callback is getting called when we scroll all the way to the bottom.", "url": "https://github.com/all-of-us/workbench/pull/3286#discussion_r396491334", "createdAt": "2020-03-23T14:27:38Z", "author": {"login": "als364"}, "path": "ui/src/app/components/pdf-viewer.spec.tsx", "diffHunk": "@@ -0,0 +1,27 @@\n+import {shallow} from 'enzyme';\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+import {PdfViewer, Props} from 'app/components/pdf-viewer';\n+\n+let props = {\n+  windowSize: {width: 1700, height: 0},\n+  pdfPath: '/assets/documents/fake-document-path.pdf'\n+};\n+\n+it('should load PDF pages', async() => {\n+  const wrapper = shallow(<PdfViewer {...props} />).shallow();\n+\n+  // Initially we should have a document and no pages.\n+  expect(wrapper.find(Document).length).toEqual(1);\n+  expect(wrapper.find(Page).length).toEqual(0);\n+\n+  // Simulate the PDF document loading and calling the 'onLoadSuccess' prop to indicate we have\n+  // 10 pages in the PDF.\n+  const pdfDocument = wrapper.find(Document);\n+  const onSuccess = pdfDocument.prop('onLoadSuccess') as (data: object) => {};\n+  onSuccess({numPages: 10});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3ODI1MQ=="}, "originalCommit": {"oid": "4c98e0ee90e9612d7ce690af2a335e926611572c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzNDg2OA==", "bodyText": "ah, looking at the test for the parent component, it seems like it tests some of this functionality, and the rest is covered by E2E tests.", "url": "https://github.com/all-of-us/workbench/pull/3286#discussion_r397234868", "createdAt": "2020-03-24T15:18:29Z", "author": {"login": "als364"}, "path": "ui/src/app/components/pdf-viewer.spec.tsx", "diffHunk": "@@ -0,0 +1,27 @@\n+import {shallow} from 'enzyme';\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+import {PdfViewer, Props} from 'app/components/pdf-viewer';\n+\n+let props = {\n+  windowSize: {width: 1700, height: 0},\n+  pdfPath: '/assets/documents/fake-document-path.pdf'\n+};\n+\n+it('should load PDF pages', async() => {\n+  const wrapper = shallow(<PdfViewer {...props} />).shallow();\n+\n+  // Initially we should have a document and no pages.\n+  expect(wrapper.find(Document).length).toEqual(1);\n+  expect(wrapper.find(Page).length).toEqual(0);\n+\n+  // Simulate the PDF document loading and calling the 'onLoadSuccess' prop to indicate we have\n+  // 10 pages in the PDF.\n+  const pdfDocument = wrapper.find(Document);\n+  const onSuccess = pdfDocument.prop('onLoadSuccess') as (data: object) => {};\n+  onSuccess({numPages: 10});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3ODI1MQ=="}, "originalCommit": {"oid": "4c98e0ee90e9612d7ce690af2a335e926611572c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzgwMTU3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/pdf-viewer.spec.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxMTowMlrOF6HKEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxMTowMlrOF6HKEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3ODk5NA==", "bodyText": "Could you have a /test/assets/documents/pdf1.pdf or something and test with a real doc?", "url": "https://github.com/all-of-us/workbench/pull/3286#discussion_r396478994", "createdAt": "2020-03-23T14:11:02Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/pdf-viewer.spec.tsx", "diffHunk": "@@ -0,0 +1,27 @@\n+import {shallow} from 'enzyme';\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+import {PdfViewer, Props} from 'app/components/pdf-viewer';\n+\n+let props = {\n+  windowSize: {width: 1700, height: 0},\n+  pdfPath: '/assets/documents/fake-document-path.pdf'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c98e0ee90e9612d7ce690af2a335e926611572c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzgwODQyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/pdf-viewer.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxMjozNVrOF6HOWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTozMDowNVrOF6K0dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MDA5MA==", "bodyText": "aside: why isn't this the preferred way to do all the styles? Just a TSX style thing?", "url": "https://github.com/all-of-us/workbench/pull/3286#discussion_r396480090", "createdAt": "2020-03-23T14:12:35Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/pdf-viewer.tsx", "diffHunk": "@@ -0,0 +1,73 @@\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {withWindowSize} from 'app/utils';\n+\n+export interface Props {\n+  handleLastPageRender: () => void;\n+  pdfPath: string;\n+  setLastPageRef: (ref) => void;\n+  windowSize: {\n+    width: number,\n+    height: number\n+  };\n+}\n+\n+interface State {\n+  loading: boolean;\n+  numPages: number;\n+}\n+\n+export const PdfViewer = withWindowSize()( class extends React.Component<Props, State> {\n+  constructor(props) {\n+    super(props);\n+\n+    this.state = {\n+      loading: true,\n+      numPages: 0\n+    };\n+  }\n+\n+  render() {\n+    const {loading, numPages} = this.state;\n+\n+    return <div style={{flex: '1 1 0', overflowY: 'auto'}}>\n+      {loading && <SpinnerOverlay/>}\n+      <Document data-test-id='tos-pdf-document'\n+                file={this.props.pdfPath}\n+                loading=''\n+                onLoadSuccess={\n+                  data => this.setState({numPages: data.numPages, loading: false})\n+                }\n+      >\n+        {\n+          Array.from(\n+            new Array(numPages),\n+            (el, index) => (\n+                  // We can't set inline styles on the react-pdf Page element, so instead we set a\n+                  // className and specify some style overrides in src/styles.css", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c98e0ee90e9612d7ce690af2a335e926611572c"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzODk5OQ==", "bodyText": "No idea. I just factored this out.", "url": "https://github.com/all-of-us/workbench/pull/3286#discussion_r396538999", "createdAt": "2020-03-23T15:30:05Z", "author": {"login": "als364"}, "path": "ui/src/app/components/pdf-viewer.tsx", "diffHunk": "@@ -0,0 +1,73 @@\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {withWindowSize} from 'app/utils';\n+\n+export interface Props {\n+  handleLastPageRender: () => void;\n+  pdfPath: string;\n+  setLastPageRef: (ref) => void;\n+  windowSize: {\n+    width: number,\n+    height: number\n+  };\n+}\n+\n+interface State {\n+  loading: boolean;\n+  numPages: number;\n+}\n+\n+export const PdfViewer = withWindowSize()( class extends React.Component<Props, State> {\n+  constructor(props) {\n+    super(props);\n+\n+    this.state = {\n+      loading: true,\n+      numPages: 0\n+    };\n+  }\n+\n+  render() {\n+    const {loading, numPages} = this.state;\n+\n+    return <div style={{flex: '1 1 0', overflowY: 'auto'}}>\n+      {loading && <SpinnerOverlay/>}\n+      <Document data-test-id='tos-pdf-document'\n+                file={this.props.pdfPath}\n+                loading=''\n+                onLoadSuccess={\n+                  data => this.setState({numPages: data.numPages, loading: false})\n+                }\n+      >\n+        {\n+          Array.from(\n+            new Array(numPages),\n+            (el, index) => (\n+                  // We can't set inline styles on the react-pdf Page element, so instead we set a\n+                  // className and specify some style overrides in src/styles.css", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MDA5MA=="}, "originalCommit": {"oid": "4c98e0ee90e9612d7ce690af2a335e926611572c"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzgxNTc1OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/pdf-viewer.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxNDowOVrOF6HTIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTowMDo1OVrOF6Jd0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MTMxNA==", "bodyText": "It's not obvious by the name inputRef that it has to do with last page handling. Are you just using this property assignment for its side effect of calling setLastPageRef()?", "url": "https://github.com/all-of-us/workbench/pull/3286#discussion_r396481314", "createdAt": "2020-03-23T14:14:09Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/pdf-viewer.tsx", "diffHunk": "@@ -0,0 +1,73 @@\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {withWindowSize} from 'app/utils';\n+\n+export interface Props {\n+  handleLastPageRender: () => void;\n+  pdfPath: string;\n+  setLastPageRef: (ref) => void;\n+  windowSize: {\n+    width: number,\n+    height: number\n+  };\n+}\n+\n+interface State {\n+  loading: boolean;\n+  numPages: number;\n+}\n+\n+export const PdfViewer = withWindowSize()( class extends React.Component<Props, State> {\n+  constructor(props) {\n+    super(props);\n+\n+    this.state = {\n+      loading: true,\n+      numPages: 0\n+    };\n+  }\n+\n+  render() {\n+    const {loading, numPages} = this.state;\n+\n+    return <div style={{flex: '1 1 0', overflowY: 'auto'}}>\n+      {loading && <SpinnerOverlay/>}\n+      <Document data-test-id='tos-pdf-document'\n+                file={this.props.pdfPath}\n+                loading=''\n+                onLoadSuccess={\n+                  data => this.setState({numPages: data.numPages, loading: false})\n+                }\n+      >\n+        {\n+          Array.from(\n+            new Array(numPages),\n+            (el, index) => (\n+                  // We can't set inline styles on the react-pdf Page element, so instead we set a\n+                  // className and specify some style overrides in src/styles.css\n+                  <Page\n+                      renderAnnotationLayer={false}\n+                      renderTextLayer={false}\n+                      loading=''\n+                      className='tos-pdf-page'\n+                      width={Math.max(500, this.props.windowSize.width * .75)}\n+                      key={`page_${index + 1}`}\n+                      pageNumber={index + 1}\n+                      inputRef={index === numPages - 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c98e0ee90e9612d7ce690af2a335e926611572c"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxNjgxNg==", "bodyText": "Yes, it's non-obvious, but that's what Page calls it, and that's not a Workbench component.", "url": "https://github.com/all-of-us/workbench/pull/3286#discussion_r396516816", "createdAt": "2020-03-23T15:00:59Z", "author": {"login": "als364"}, "path": "ui/src/app/components/pdf-viewer.tsx", "diffHunk": "@@ -0,0 +1,73 @@\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {withWindowSize} from 'app/utils';\n+\n+export interface Props {\n+  handleLastPageRender: () => void;\n+  pdfPath: string;\n+  setLastPageRef: (ref) => void;\n+  windowSize: {\n+    width: number,\n+    height: number\n+  };\n+}\n+\n+interface State {\n+  loading: boolean;\n+  numPages: number;\n+}\n+\n+export const PdfViewer = withWindowSize()( class extends React.Component<Props, State> {\n+  constructor(props) {\n+    super(props);\n+\n+    this.state = {\n+      loading: true,\n+      numPages: 0\n+    };\n+  }\n+\n+  render() {\n+    const {loading, numPages} = this.state;\n+\n+    return <div style={{flex: '1 1 0', overflowY: 'auto'}}>\n+      {loading && <SpinnerOverlay/>}\n+      <Document data-test-id='tos-pdf-document'\n+                file={this.props.pdfPath}\n+                loading=''\n+                onLoadSuccess={\n+                  data => this.setState({numPages: data.numPages, loading: false})\n+                }\n+      >\n+        {\n+          Array.from(\n+            new Array(numPages),\n+            (el, index) => (\n+                  // We can't set inline styles on the react-pdf Page element, so instead we set a\n+                  // className and specify some style overrides in src/styles.css\n+                  <Page\n+                      renderAnnotationLayer={false}\n+                      renderTextLayer={false}\n+                      loading=''\n+                      className='tos-pdf-page'\n+                      width={Math.max(500, this.props.windowSize.width * .75)}\n+                      key={`page_${index + 1}`}\n+                      pageNumber={index + 1}\n+                      inputRef={index === numPages - 1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MTMxNA=="}, "originalCommit": {"oid": "4c98e0ee90e9612d7ce690af2a335e926611572c"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzgyMTM4OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/pdf-viewer.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxNToyOFrOF6HWxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTowMTo0MFrOF6Jf6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MjI0NQ==", "bodyText": "nit: it feels redundant to have an index, a page number, and a key like page_99. Do we really need all three? If so, it would help to have unit tests to make sure they are always in sync.", "url": "https://github.com/all-of-us/workbench/pull/3286#discussion_r396482245", "createdAt": "2020-03-23T14:15:28Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/pdf-viewer.tsx", "diffHunk": "@@ -0,0 +1,73 @@\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {withWindowSize} from 'app/utils';\n+\n+export interface Props {\n+  handleLastPageRender: () => void;\n+  pdfPath: string;\n+  setLastPageRef: (ref) => void;\n+  windowSize: {\n+    width: number,\n+    height: number\n+  };\n+}\n+\n+interface State {\n+  loading: boolean;\n+  numPages: number;\n+}\n+\n+export const PdfViewer = withWindowSize()( class extends React.Component<Props, State> {\n+  constructor(props) {\n+    super(props);\n+\n+    this.state = {\n+      loading: true,\n+      numPages: 0\n+    };\n+  }\n+\n+  render() {\n+    const {loading, numPages} = this.state;\n+\n+    return <div style={{flex: '1 1 0', overflowY: 'auto'}}>\n+      {loading && <SpinnerOverlay/>}\n+      <Document data-test-id='tos-pdf-document'\n+                file={this.props.pdfPath}\n+                loading=''\n+                onLoadSuccess={\n+                  data => this.setState({numPages: data.numPages, loading: false})\n+                }\n+      >\n+        {\n+          Array.from(\n+            new Array(numPages),\n+            (el, index) => (\n+                  // We can't set inline styles on the react-pdf Page element, so instead we set a\n+                  // className and specify some style overrides in src/styles.css\n+                  <Page\n+                      renderAnnotationLayer={false}\n+                      renderTextLayer={false}\n+                      loading=''\n+                      className='tos-pdf-page'\n+                      width={Math.max(500, this.props.windowSize.width * .75)}\n+                      key={`page_${index + 1}`}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c98e0ee90e9612d7ce690af2a335e926611572c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxNzM1NA==", "bodyText": "We do, they're all required and Page is not a Workbench component.", "url": "https://github.com/all-of-us/workbench/pull/3286#discussion_r396517354", "createdAt": "2020-03-23T15:01:40Z", "author": {"login": "als364"}, "path": "ui/src/app/components/pdf-viewer.tsx", "diffHunk": "@@ -0,0 +1,73 @@\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {withWindowSize} from 'app/utils';\n+\n+export interface Props {\n+  handleLastPageRender: () => void;\n+  pdfPath: string;\n+  setLastPageRef: (ref) => void;\n+  windowSize: {\n+    width: number,\n+    height: number\n+  };\n+}\n+\n+interface State {\n+  loading: boolean;\n+  numPages: number;\n+}\n+\n+export const PdfViewer = withWindowSize()( class extends React.Component<Props, State> {\n+  constructor(props) {\n+    super(props);\n+\n+    this.state = {\n+      loading: true,\n+      numPages: 0\n+    };\n+  }\n+\n+  render() {\n+    const {loading, numPages} = this.state;\n+\n+    return <div style={{flex: '1 1 0', overflowY: 'auto'}}>\n+      {loading && <SpinnerOverlay/>}\n+      <Document data-test-id='tos-pdf-document'\n+                file={this.props.pdfPath}\n+                loading=''\n+                onLoadSuccess={\n+                  data => this.setState({numPages: data.numPages, loading: false})\n+                }\n+      >\n+        {\n+          Array.from(\n+            new Array(numPages),\n+            (el, index) => (\n+                  // We can't set inline styles on the react-pdf Page element, so instead we set a\n+                  // className and specify some style overrides in src/styles.css\n+                  <Page\n+                      renderAnnotationLayer={false}\n+                      renderTextLayer={false}\n+                      loading=''\n+                      className='tos-pdf-page'\n+                      width={Math.max(500, this.props.windowSize.width * .75)}\n+                      key={`page_${index + 1}`}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MjI0NQ=="}, "originalCommit": {"oid": "4c98e0ee90e9612d7ce690af2a335e926611572c"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzgyNDczOnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/pdf-viewer.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxNjoxNVrOF6HY_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTowMjoyMVrOF6Jh_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MjgxNQ==", "bodyText": "What's the difference between {false} and false?", "url": "https://github.com/all-of-us/workbench/pull/3286#discussion_r396482815", "createdAt": "2020-03-23T14:16:15Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/pdf-viewer.tsx", "diffHunk": "@@ -0,0 +1,73 @@\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {withWindowSize} from 'app/utils';\n+\n+export interface Props {\n+  handleLastPageRender: () => void;\n+  pdfPath: string;\n+  setLastPageRef: (ref) => void;\n+  windowSize: {\n+    width: number,\n+    height: number\n+  };\n+}\n+\n+interface State {\n+  loading: boolean;\n+  numPages: number;\n+}\n+\n+export const PdfViewer = withWindowSize()( class extends React.Component<Props, State> {\n+  constructor(props) {\n+    super(props);\n+\n+    this.state = {\n+      loading: true,\n+      numPages: 0\n+    };\n+  }\n+\n+  render() {\n+    const {loading, numPages} = this.state;\n+\n+    return <div style={{flex: '1 1 0', overflowY: 'auto'}}>\n+      {loading && <SpinnerOverlay/>}\n+      <Document data-test-id='tos-pdf-document'\n+                file={this.props.pdfPath}\n+                loading=''\n+                onLoadSuccess={\n+                  data => this.setState({numPages: data.numPages, loading: false})\n+                }\n+      >\n+        {\n+          Array.from(\n+            new Array(numPages),\n+            (el, index) => (\n+                  // We can't set inline styles on the react-pdf Page element, so instead we set a\n+                  // className and specify some style overrides in src/styles.css\n+                  <Page\n+                      renderAnnotationLayer={false}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c98e0ee90e9612d7ce690af2a335e926611572c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxNzg4NQ==", "bodyText": "that is how one passes values. some of the rest of these are a bit wrong.", "url": "https://github.com/all-of-us/workbench/pull/3286#discussion_r396517885", "createdAt": "2020-03-23T15:02:21Z", "author": {"login": "als364"}, "path": "ui/src/app/components/pdf-viewer.tsx", "diffHunk": "@@ -0,0 +1,73 @@\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {withWindowSize} from 'app/utils';\n+\n+export interface Props {\n+  handleLastPageRender: () => void;\n+  pdfPath: string;\n+  setLastPageRef: (ref) => void;\n+  windowSize: {\n+    width: number,\n+    height: number\n+  };\n+}\n+\n+interface State {\n+  loading: boolean;\n+  numPages: number;\n+}\n+\n+export const PdfViewer = withWindowSize()( class extends React.Component<Props, State> {\n+  constructor(props) {\n+    super(props);\n+\n+    this.state = {\n+      loading: true,\n+      numPages: 0\n+    };\n+  }\n+\n+  render() {\n+    const {loading, numPages} = this.state;\n+\n+    return <div style={{flex: '1 1 0', overflowY: 'auto'}}>\n+      {loading && <SpinnerOverlay/>}\n+      <Document data-test-id='tos-pdf-document'\n+                file={this.props.pdfPath}\n+                loading=''\n+                onLoadSuccess={\n+                  data => this.setState({numPages: data.numPages, loading: false})\n+                }\n+      >\n+        {\n+          Array.from(\n+            new Array(numPages),\n+            (el, index) => (\n+                  // We can't set inline styles on the react-pdf Page element, so instead we set a\n+                  // className and specify some style overrides in src/styles.css\n+                  <Page\n+                      renderAnnotationLayer={false}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MjgxNQ=="}, "originalCommit": {"oid": "4c98e0ee90e9612d7ce690af2a335e926611572c"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzgzMzY0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/pdf-viewer.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxODoxMVrOF6HeiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTowMTo0N1rOF6JgRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4NDIzMg==", "bodyText": "nit: I'd spell out terms-of-service or make it more general like pdf-page. That is, is there anything TOS-specific about this component?", "url": "https://github.com/all-of-us/workbench/pull/3286#discussion_r396484232", "createdAt": "2020-03-23T14:18:11Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/pdf-viewer.tsx", "diffHunk": "@@ -0,0 +1,73 @@\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {withWindowSize} from 'app/utils';\n+\n+export interface Props {\n+  handleLastPageRender: () => void;\n+  pdfPath: string;\n+  setLastPageRef: (ref) => void;\n+  windowSize: {\n+    width: number,\n+    height: number\n+  };\n+}\n+\n+interface State {\n+  loading: boolean;\n+  numPages: number;\n+}\n+\n+export const PdfViewer = withWindowSize()( class extends React.Component<Props, State> {\n+  constructor(props) {\n+    super(props);\n+\n+    this.state = {\n+      loading: true,\n+      numPages: 0\n+    };\n+  }\n+\n+  render() {\n+    const {loading, numPages} = this.state;\n+\n+    return <div style={{flex: '1 1 0', overflowY: 'auto'}}>\n+      {loading && <SpinnerOverlay/>}\n+      <Document data-test-id='tos-pdf-document'\n+                file={this.props.pdfPath}\n+                loading=''\n+                onLoadSuccess={\n+                  data => this.setState({numPages: data.numPages, loading: false})\n+                }\n+      >\n+        {\n+          Array.from(\n+            new Array(numPages),\n+            (el, index) => (\n+                  // We can't set inline styles on the react-pdf Page element, so instead we set a\n+                  // className and specify some style overrides in src/styles.css\n+                  <Page\n+                      renderAnnotationLayer={false}\n+                      renderTextLayer={false}\n+                      loading=''\n+                      className='tos-pdf-page'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c98e0ee90e9612d7ce690af2a335e926611572c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxNzQ0NA==", "bodyText": "ooh good call", "url": "https://github.com/all-of-us/workbench/pull/3286#discussion_r396517444", "createdAt": "2020-03-23T15:01:47Z", "author": {"login": "als364"}, "path": "ui/src/app/components/pdf-viewer.tsx", "diffHunk": "@@ -0,0 +1,73 @@\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {withWindowSize} from 'app/utils';\n+\n+export interface Props {\n+  handleLastPageRender: () => void;\n+  pdfPath: string;\n+  setLastPageRef: (ref) => void;\n+  windowSize: {\n+    width: number,\n+    height: number\n+  };\n+}\n+\n+interface State {\n+  loading: boolean;\n+  numPages: number;\n+}\n+\n+export const PdfViewer = withWindowSize()( class extends React.Component<Props, State> {\n+  constructor(props) {\n+    super(props);\n+\n+    this.state = {\n+      loading: true,\n+      numPages: 0\n+    };\n+  }\n+\n+  render() {\n+    const {loading, numPages} = this.state;\n+\n+    return <div style={{flex: '1 1 0', overflowY: 'auto'}}>\n+      {loading && <SpinnerOverlay/>}\n+      <Document data-test-id='tos-pdf-document'\n+                file={this.props.pdfPath}\n+                loading=''\n+                onLoadSuccess={\n+                  data => this.setState({numPages: data.numPages, loading: false})\n+                }\n+      >\n+        {\n+          Array.from(\n+            new Array(numPages),\n+            (el, index) => (\n+                  // We can't set inline styles on the react-pdf Page element, so instead we set a\n+                  // className and specify some style overrides in src/styles.css\n+                  <Page\n+                      renderAnnotationLayer={false}\n+                      renderTextLayer={false}\n+                      loading=''\n+                      className='tos-pdf-page'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4NDIzMg=="}, "originalCommit": {"oid": "4c98e0ee90e9612d7ce690af2a335e926611572c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzgzNzU2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/pdf-viewer.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxOTowNlrOF6HhCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxOTowNlrOF6HhCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4NDg3Mw==", "bodyText": "instead of undefined, could you define a stub method to just demonstrate that it gets called and nothing happens? That feels safer too, since you don't have to test for undefined before calling.", "url": "https://github.com/all-of-us/workbench/pull/3286#discussion_r396484873", "createdAt": "2020-03-23T14:19:06Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/pdf-viewer.tsx", "diffHunk": "@@ -0,0 +1,73 @@\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {withWindowSize} from 'app/utils';\n+\n+export interface Props {\n+  handleLastPageRender: () => void;\n+  pdfPath: string;\n+  setLastPageRef: (ref) => void;\n+  windowSize: {\n+    width: number,\n+    height: number\n+  };\n+}\n+\n+interface State {\n+  loading: boolean;\n+  numPages: number;\n+}\n+\n+export const PdfViewer = withWindowSize()( class extends React.Component<Props, State> {\n+  constructor(props) {\n+    super(props);\n+\n+    this.state = {\n+      loading: true,\n+      numPages: 0\n+    };\n+  }\n+\n+  render() {\n+    const {loading, numPages} = this.state;\n+\n+    return <div style={{flex: '1 1 0', overflowY: 'auto'}}>\n+      {loading && <SpinnerOverlay/>}\n+      <Document data-test-id='tos-pdf-document'\n+                file={this.props.pdfPath}\n+                loading=''\n+                onLoadSuccess={\n+                  data => this.setState({numPages: data.numPages, loading: false})\n+                }\n+      >\n+        {\n+          Array.from(\n+            new Array(numPages),\n+            (el, index) => (\n+                  // We can't set inline styles on the react-pdf Page element, so instead we set a\n+                  // className and specify some style overrides in src/styles.css\n+                  <Page\n+                      renderAnnotationLayer={false}\n+                      renderTextLayer={false}\n+                      loading=''\n+                      className='tos-pdf-page'\n+                      width={Math.max(500, this.props.windowSize.width * .75)}\n+                      key={`page_${index + 1}`}\n+                      pageNumber={index + 1}\n+                      inputRef={index === numPages - 1\n+                          ? (ref) => this.props.setLastPageRef(ref)\n+                          : undefined\n+                      }\n+                      onRenderSuccess={index === numPages - 1\n+                          ? () => this.props.handleLastPageRender()\n+                          : undefined", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c98e0ee90e9612d7ce690af2a335e926611572c"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzgzOTgwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/login/account-creation/account-creation-tos.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxOTozN1rOF6Higg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxOTozN1rOF6Higg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4NTI1MA==", "bodyText": "nit: check indent", "url": "https://github.com/all-of-us/workbench/pull/3286#discussion_r396485250", "createdAt": "2020-03-23T14:19:37Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/pages/login/account-creation/account-creation-tos.tsx", "diffHunk": "@@ -82,7 +80,7 @@ export const AccountCreationTos = withWindowSize()(\n       }\n       this.hasCreatedIntersectionObserver = true;\n       const intersectionCallback: IntersectionObserverCallback = (\n-        entries: IntersectionObserverEntry[], unusedObserver: IntersectionObserver) => {\n+          entries: IntersectionObserverEntry[], unusedObserver: IntersectionObserver) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c98e0ee90e9612d7ce690af2a335e926611572c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzg1NTE0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/login/account-creation/account-creation-tos.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyMjo0N1rOF6HsKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyMjo0N1rOF6HsKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4NzcyMA==", "bodyText": "very nice \ud83d\udcaf", "url": "https://github.com/all-of-us/workbench/pull/3286#discussion_r396487720", "createdAt": "2020-03-23T14:22:47Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/pages/login/account-creation/account-creation-tos.tsx", "diffHunk": "@@ -93,44 +91,21 @@ export const AccountCreationTos = withWindowSize()(\n       observer.observe(this.lastPage);\n     }\n \n+    private setLastPageRef(ref) {\n+      this.lastPage = ref;\n+    }\n+\n     render() {\n-      const {numPages, loadingPdf, hasReadEntireTos, hasAckedTermsOfService, hasAckedPrivacyStatement} = this.state;\n+      const {hasReadEntireTos, hasAckedTermsOfService, hasAckedPrivacyStatement} = this.state;\n \n       return <FlexColumn data-test-id='account-creation-tos'\n                          style={{flex: 1, padding: '1rem 3rem 0 3rem'}}>\n-        {/* TODO: all of this PDF rendering stuff should be broken out into a separate component. */}\n-        <div style={{flex: '1 1 0', overflowY: 'auto'}}>\n-          {loadingPdf && <SpinnerOverlay/>}\n-          <Document data-test-id='tos-pdf-document' file={this.props.pdfPath}\n-                    loading=''\n-                    onLoadSuccess={data => this.setState(\n-                      {numPages: data.numPages, loadingPdf: false})}\n-          >\n-            {\n-              Array.from(\n-                new Array(numPages),\n-                (el, index) => (\n-                  // We can't set inline styles on the react-pdf Page element, so instead we set a\n-                  // className and specify some style overrides in src/styles.css\n-                  <Page\n-                    renderAnnotationLayer={false}\n-                    renderTextLayer={false}\n-                    loading=''\n-                    className='tos-pdf-page'\n-                    width={Math.max(500, this.props.windowSize.width * .75)}\n-                    key={`page_${index + 1}`}\n-                    pageNumber={index + 1}\n-                    inputRef={index === numPages - 1 ? (ref) => {\n-                      this.lastPage = ref;\n-                    } : undefined}\n-                    onRenderSuccess={index === numPages - 1 ? () => this.handleLastPageRender() :\n-                      undefined}\n-                  />\n-                ),\n-              )\n-            }\n-          </Document>\n-        </div>\n+        <PdfViewer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c98e0ee90e9612d7ce690af2a335e926611572c"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjU4MzcwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/login/account-creation/account-creation-tos.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo0MTo0NVrOF62aZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo0MTo0NVrOF62aZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1MzIyMw==", "bodyText": "Is it necessary to pass in the windowSize if we're using withWindowSize() in the component? Or we can keep this and remove the withWindowSize()", "url": "https://github.com/all-of-us/workbench/pull/3286#discussion_r397253223", "createdAt": "2020-03-24T15:41:45Z", "author": {"login": "ericsong"}, "path": "ui/src/app/pages/login/account-creation/account-creation-tos.tsx", "diffHunk": "@@ -93,44 +93,21 @@ export const AccountCreationTos = withWindowSize()(\n       observer.observe(this.lastPage);\n     }\n \n+    private setLastPageRef(ref) {\n+      this.lastPage = ref;\n+    }\n+\n     render() {\n-      const {numPages, loadingPdf, hasReadEntireTos, hasAckedTermsOfService, hasAckedPrivacyStatement} = this.state;\n+      const {hasReadEntireTos, hasAckedTermsOfService, hasAckedPrivacyStatement} = this.state;\n \n       return <FlexColumn data-test-id='account-creation-tos'\n                          style={{flex: 1, padding: '1rem 3rem 0 3rem'}}>\n-        {/* TODO: all of this PDF rendering stuff should be broken out into a separate component. */}\n-        <div style={{flex: '1 1 0', overflowY: 'auto'}}>\n-          {loadingPdf && <SpinnerOverlay/>}\n-          <Document data-test-id='tos-pdf-document' file={this.props.pdfPath}\n-                    loading=''\n-                    onLoadSuccess={data => this.setState(\n-                      {numPages: data.numPages, loadingPdf: false})}\n-          >\n-            {\n-              Array.from(\n-                new Array(numPages),\n-                (el, index) => (\n-                  // We can't set inline styles on the react-pdf Page element, so instead we set a\n-                  // className and specify some style overrides in src/styles.css\n-                  <Page\n-                    renderAnnotationLayer={false}\n-                    renderTextLayer={false}\n-                    loading=''\n-                    className='tos-pdf-page'\n-                    width={Math.max(500, this.props.windowSize.width * .75)}\n-                    key={`page_${index + 1}`}\n-                    pageNumber={index + 1}\n-                    inputRef={index === numPages - 1 ? (ref) => {\n-                      this.lastPage = ref;\n-                    } : undefined}\n-                    onRenderSuccess={index === numPages - 1 ? () => this.handleLastPageRender() :\n-                      undefined}\n-                  />\n-                ),\n-              )\n-            }\n-          </Document>\n-        </div>\n+        <PdfViewer\n+            handleLastPageRender={() => this.handleLastPageRender()}\n+            pdfPath={this.props.pdfPath}\n+            setLastPageRef={(ref) => this.setLastPageRef(ref)}\n+            windowSize={this.props.windowSize}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "087bc58130ab1f2ddb77f006c0d2d6ebe6f0b544"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjU5NTE5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/login/account-creation/account-creation-tos.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo0NDowN1rOF62h3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo0NDowN1rOF62h3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1NTEzMg==", "bodyText": "the rest of the stuff in handleLastPageRender() looks like stuff that might be able to go into the shared component.\nI don't fully understand how it works but I think, ultimately, components that use the PdfViewer component just want to know when the user has read the entire PDF and not concern themselves with stuff like IntersectionObserverCallback.", "url": "https://github.com/all-of-us/workbench/pull/3286#discussion_r397255132", "createdAt": "2020-03-24T15:44:07Z", "author": {"login": "ericsong"}, "path": "ui/src/app/pages/login/account-creation/account-creation-tos.tsx", "diffHunk": "@@ -82,7 +80,9 @@ export const AccountCreationTos = withWindowSize()(\n       }\n       this.hasCreatedIntersectionObserver = true;\n       const intersectionCallback: IntersectionObserverCallback = (\n-        entries: IntersectionObserverEntry[], unusedObserver: IntersectionObserver) => {\n+        entries: IntersectionObserverEntry[],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "087bc58130ab1f2ddb77f006c0d2d6ebe6f0b544"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDA5Mjc5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/login/account-creation/account-creation-tos.spec.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoyNzowM1rOF7Fcog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoyNzowM1rOF7Fcog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5OTU1NA==", "bodyText": "Per slack discussion, it appears that in order to trigger the event property you need to call simulate() on the input rather than the CheckBox element.", "url": "https://github.com/all-of-us/workbench/pull/3286#discussion_r397499554", "createdAt": "2020-03-24T22:27:03Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/login/account-creation/account-creation-tos.spec.tsx", "diffHunk": "@@ -71,14 +48,15 @@ it('should enable checkboxes and next button with user input', async() => {\n   expect(getNextButton(wrapper).prop('disabled')).toBeTruthy();\n \n   // Now, simulate checking both boxes, which should enable the \"next\" button.\n+  debugger;\n   getPrivacyCheckbox(wrapper).simulate('change', {target: {checked: true}});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0212513c54ab8813192c3a5c87358eb9985a40af"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTIyMTU4OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/login/account-creation/account-creation-tos.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDozNDoxM1rOF8J4Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDozNDoxM1rOF8J4Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyMDczNQ==", "bodyText": "Nice! This interface looks super easy to use.", "url": "https://github.com/all-of-us/workbench/pull/3286#discussion_r398620735", "createdAt": "2020-03-26T14:34:13Z", "author": {"login": "ericsong"}, "path": "ui/src/app/pages/login/account-creation/account-creation-tos.tsx", "diffHunk": "@@ -51,137 +49,79 @@ interface AccountCreationTosState {\n   numPages: number;\n }\n \n-export const AccountCreationTos = withWindowSize()(\n-  class extends React.Component<AccountCreationTosProps, AccountCreationTosState> {\n+export class AccountCreationTos extends React.Component<\n+  AccountCreationTosProps,\n+  AccountCreationTosState\n+> {\n+  constructor(props: AccountCreationTosProps) {\n+    super(props);\n+    this.state = {\n+      hasReadEntireTos: false,\n+      hasAckedPrivacyStatement: false,\n+      hasAckedTermsOfService: false,\n+      loadingPdf: true,\n+      numPages: 0,\n+    };\n+  }\n \n-    // Tracks whether this component has created an intersection observer to track the last page\n-    // visibility yet.\n-    hasCreatedIntersectionObserver = false;\n-    // Once the last page has been loaded, this contains a reference to the page's DOM element.\n-    lastPage: HTMLElement;\n+  render() {\n+    const {hasReadEntireTos, hasAckedTermsOfService, hasAckedPrivacyStatement} = this.state;\n \n-    constructor(props: AccountCreationTosProps) {\n-      super(props);\n-      this.state = {\n-        hasReadEntireTos: false,\n-        hasAckedPrivacyStatement: false,\n-        hasAckedTermsOfService: false,\n-        loadingPdf: true,\n-        numPages: 0,\n-      };\n-    }\n-\n-    /**\n-     * Handles the onRenderSuccess callback from the Page element at the end of the document.\n-     * This sets up the intersection listener which will change state when the user scrolls to the\n-     * end of the document.\n-     */\n-    private handleLastPageRender() {\n-      if (this.hasCreatedIntersectionObserver) {\n-        return;\n-      }\n-      this.hasCreatedIntersectionObserver = true;\n-      const intersectionCallback: IntersectionObserverCallback = (\n-        entries: IntersectionObserverEntry[], unusedObserver: IntersectionObserver) => {\n-        for (const entry of entries) {\n-          if (entry.isIntersecting) {\n-            this.setState({hasReadEntireTos: true});\n-          }\n-        }\n-      };\n-      const observer = new IntersectionObserver(intersectionCallback);\n-      observer.observe(this.lastPage);\n-    }\n-\n-    render() {\n-      const {numPages, loadingPdf, hasReadEntireTos, hasAckedTermsOfService, hasAckedPrivacyStatement} = this.state;\n-\n-      return <FlexColumn data-test-id='account-creation-tos'\n-                         style={{flex: 1, padding: '1rem 3rem 0 3rem'}}>\n-        {/* TODO: all of this PDF rendering stuff should be broken out into a separate component. */}\n-        <div style={{flex: '1 1 0', overflowY: 'auto'}}>\n-          {loadingPdf && <SpinnerOverlay/>}\n-          <Document data-test-id='tos-pdf-document' file={this.props.pdfPath}\n-                    loading=''\n-                    onLoadSuccess={data => this.setState(\n-                      {numPages: data.numPages, loadingPdf: false})}\n-          >\n-            {\n-              Array.from(\n-                new Array(numPages),\n-                (el, index) => (\n-                  // We can't set inline styles on the react-pdf Page element, so instead we set a\n-                  // className and specify some style overrides in src/styles.css\n-                  <Page\n-                    renderAnnotationLayer={false}\n-                    renderTextLayer={false}\n-                    loading=''\n-                    className='tos-pdf-page'\n-                    width={Math.max(500, this.props.windowSize.width * .75)}\n-                    key={`page_${index + 1}`}\n-                    pageNumber={index + 1}\n-                    inputRef={index === numPages - 1 ? (ref) => {\n-                      this.lastPage = ref;\n-                    } : undefined}\n-                    onRenderSuccess={index === numPages - 1 ? () => this.handleLastPageRender() :\n-                      undefined}\n-                  />\n-                ),\n-              )\n-            }\n-          </Document>\n-        </div>\n-        <FlexRow\n-          style={{display: 'inline-flex', padding: '1rem', maxWidth: '1000px', margin: 'auto'}}>\n-          <div style={{flex: 3}}>\n-            <div style={{...styles.noticeText, marginBottom: '.5rem', height: '3rem'}}>\n-              <div style={{fontWeight: 400}}>\n-                By clicking here and moving to the Registration step, you acknowledge that you\n-                understand the terms of this agreement and agree to abide by them.\n-              </div>\n-              <div>\n-                Please read through the entire agreement to continue.\n-              </div>\n+    return <FlexColumn data-test-id='account-creation-tos'\n+                       style={{flex: 1, padding: '1rem 3rem 0 3rem'}}>\n+      <PdfViewer\n+          onLastPageRender={() => this.setState({hasReadEntireTos: true})}\n+          pdfPath={this.props.pdfPath}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87dcb3af23d4110237257e60fdc72270fff372f8"}, "originalPosition": 137}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3048, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}