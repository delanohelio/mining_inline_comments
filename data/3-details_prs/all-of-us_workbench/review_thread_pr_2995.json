{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNjI1MDE5", "number": 2995, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMjoyNzozNFrODXSURA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwNjo1NToyM1rODXXGsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzQzOTQwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMjoyNzozNFrOFchoKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQyMDoxODoyMVrOFcq7iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1NTQwMg==", "bodyText": "nit: why is the new one not the final one? I wonder if we should alphabetize them.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365455402", "createdAt": "2020-01-10T22:27:34Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -95,6 +98,7 @@ public WorkspaceServiceImpl(\n       UserDao userDao,\n       Provider<DbUser> userProvider,\n       UserRecentWorkspaceDao userRecentWorkspaceDao,\n+      Provider<WorkbenchConfig> workbenchConfigProvider,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2MDY3OA==", "bodyText": "sorry, not following. what is new and should be final?", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365560678", "createdAt": "2020-01-12T06:25:31Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -95,6 +98,7 @@ public WorkspaceServiceImpl(\n       UserDao userDao,\n       Provider<DbUser> userProvider,\n       UserRecentWorkspaceDao userRecentWorkspaceDao,\n+      Provider<WorkbenchConfig> workbenchConfigProvider,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1NTQwMg=="}, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYwNzgxNw==", "bodyText": "I meant the config provider looks like it was added but isn't the last parameter in the list. It's not worth worrying about.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365607817", "createdAt": "2020-01-12T20:18:21Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -95,6 +98,7 @@ public WorkspaceServiceImpl(\n       UserDao userDao,\n       Provider<DbUser> userProvider,\n       UserRecentWorkspaceDao userRecentWorkspaceDao,\n+      Provider<WorkbenchConfig> workbenchConfigProvider,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1NTQwMg=="}, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzQ0MjYzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMjoyOTozM1rOFchqKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMjoyOTozM1rOFchqKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1NTkxMg==", "bodyText": "nit: maybe say something about the workspace's project? Or is billingInactive a workspace concept?", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365455912", "createdAt": "2020-01-10T22:29:33Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -243,6 +248,19 @@ public DbWorkspace getRequiredWithCohorts(String ns, String firecloudName) {\n     return workspace;\n   }\n \n+  @Override\n+  public void requireActiveBilling(String workspaceNamespace, String workspaceId)\n+      throws ForbiddenException {\n+    if (!workbenchConfigProvider.get().featureFlags.enableBillingLockout) {\n+      return;\n+    }\n+\n+    if (BillingStatus.INACTIVE.equals(\n+        getRequired(workspaceNamespace, workspaceId).getBillingStatus())) {\n+      throw new ForbiddenException(\"Workspace is in an inactive billing state\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzQ0Njk5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMjozMTozMlrOFchssg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMjozMTozMlrOFchssg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1NjU2Mg==", "bodyText": "There may be a way to generically have a shim abstract class that does this before validation, but no need to go there yet.\nIn terms of the name, do we need to call out billing here, or can we have a global workspace activation for these?", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365456562", "createdAt": "2020-01-10T22:31:32Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -605,6 +605,9 @@ private Boolean copyBlob(String bucketName, Blob b) {\n       String fromWorkspaceId,\n       String fromNotebookName,\n       CopyRequest copyRequest) {\n+    workspaceService.requireActiveBilling(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzQ1MTYwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMjozNDoxM1rOFchvxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMjozNDoxM1rOFchvxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1NzM0OA==", "bodyText": "It would be nice to define a custom annotation for the checked controller methods, even if it's just a glorified comment. That way you can grab all occurrences of it at once if you like.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365457348", "createdAt": "2020-01-10T22:34:13Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -605,6 +605,9 @@ private Boolean copyBlob(String bucketName, Blob b) {\n       String fromWorkspaceId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzU1NDIxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMzo0Njo1MlrOFciuyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQyMDozNjowN1rOFcq_qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3MzQ4MA==", "bodyText": "These checks should follow the access check, else this reveals some amount of information about existence of the workspace and its billing status, to any caller. In the cases where there is no explicit access check happening in the controller method, it would be probably be correct to add one - or else push this logic down into the service which is probably making that check. If this gets too hairy, I could probably be convinced it's not worth the effort for some of these without heavier refactoring.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365473480", "createdAt": "2020-01-10T23:46:52Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -438,6 +438,8 @@ private void formatTimestampValues(List<DataSetPreviewValueList> valuePreviewLis\n   @Override\n   public ResponseEntity<EmptyResponse> exportToNotebook(\n       String workspaceNamespace, String workspaceId, DataSetExportRequest dataSetExportRequest) {\n+    workspaceService.requireActiveBilling(workspaceNamespace, workspaceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMjc2Mw==", "bodyText": "The need to add code to a number methods in just the right place makes me think we've missed an abstraction/opportunity to have something more systematic in place. Maybe a shim in between the ApiDelegate class and the Controller would be a good place to stick these validation methods generically.\nWhat's here is probably enough/appropriate for now to avoid scope creep, but if we need multiple overlapping kinds of checks soon, it could get unwieldy.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365532763", "createdAt": "2020-01-11T17:30:36Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -438,6 +438,8 @@ private void formatTimestampValues(List<DataSetPreviewValueList> valuePreviewLis\n   @Override\n   public ResponseEntity<EmptyResponse> exportToNotebook(\n       String workspaceNamespace, String workspaceId, DataSetExportRequest dataSetExportRequest) {\n+    workspaceService.requireActiveBilling(workspaceNamespace, workspaceId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3MzQ4MA=="}, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYwODg3NA==", "bodyText": "I was able to correctly order the access checks by pushing down the validate call to the underlying copy notebook function which performs the workspace access check. One side effect of this change, is that Rename Notebook will no longer be allowed since rename works by copying the original and then deleting it.\nGiven that we were unsure if Rename should be allowed or not, I thought it would be OK to not allow it if it makes the implementation easier.\nAnother note to Jay's point, this refactoring went in a direction of checking access at the point where we perform the relevant action instead of checking it at the top of the controller methods. It's a design that he brought up a while ago and I think that may be the way to go if we need to add more access control. It is going to be difficult to have to fully understand what an API call is going to do and declare the necessary permissions.\nOne downside to that approach though, is that our access control checks can be expensive (if we ask Firecloud) so we do not want to be calling it multiple times in a single client serving API call. One solution to this may be to add some caching mechanism that exists for the duration of a client serving API call so that we can add access control checks at various points without worrying about performance.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365608874", "createdAt": "2020-01-12T20:36:07Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -438,6 +438,8 @@ private void formatTimestampValues(List<DataSetPreviewValueList> valuePreviewLis\n   @Override\n   public ResponseEntity<EmptyResponse> exportToNotebook(\n       String workspaceNamespace, String workspaceId, DataSetExportRequest dataSetExportRequest) {\n+    workspaceService.requireActiveBilling(workspaceNamespace, workspaceId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3MzQ4MA=="}, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzU2MjMzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMzo1NTowNFrOFciz8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMzo1NTowNFrOFciz8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3NDgwMw==", "bodyText": "this is potentially ambiguous, should this include the workspace ID in the message? Alternatively this method could return bool and the controller could throw a contextually relevant message.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365474803", "createdAt": "2020-01-10T23:55:04Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -243,6 +248,19 @@ public DbWorkspace getRequiredWithCohorts(String ns, String firecloudName) {\n     return workspace;\n   }\n \n+  @Override\n+  public void requireActiveBilling(String workspaceNamespace, String workspaceId)\n+      throws ForbiddenException {\n+    if (!workbenchConfigProvider.get().featureFlags.enableBillingLockout) {\n+      return;\n+    }\n+\n+    if (BillingStatus.INACTIVE.equals(\n+        getRequired(workspaceNamespace, workspaceId).getBillingStatus())) {\n+      throw new ForbiddenException(\"Workspace is in an inactive billing state\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzU2NDE2OnYy", "diffSide": "RIGHT", "path": "api/config/config_local.json", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMzo1Njo0NVrOFci1Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQyMDoxNzo0MFrOFcq7aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3NTEwMg==", "bodyText": "nit: I think we should keep local and test in sync typically. I don't feel strongly about both true or both false", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365475102", "createdAt": "2020-01-10T23:56:45Z", "author": {"login": "calbach"}, "path": "api/config/config_local.json", "diffHunk": "@@ -85,7 +85,8 @@\n     \"unsafeAllowDeleteUser\": true,\n     \"enableVpcFlowLogs\": true,\n     \"enableVpcServicePerimeter\": true,\n-    \"enableNewAccountCreation\": true\n+    \"enableNewAccountCreation\": true,\n+    \"enableBillingLockout\": true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMjU0Mw==", "bodyText": "aside: is it too late to rename enableNewAccountCreation? It's really talking about a revised flow, not enabling people to create new accounts altogether?", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365532543", "createdAt": "2020-01-11T17:26:09Z", "author": {"login": "jaycarlton"}, "path": "api/config/config_local.json", "diffHunk": "@@ -85,7 +85,8 @@\n     \"unsafeAllowDeleteUser\": true,\n     \"enableVpcFlowLogs\": true,\n     \"enableVpcServicePerimeter\": true,\n-    \"enableNewAccountCreation\": true\n+    \"enableNewAccountCreation\": true,\n+    \"enableBillingLockout\": true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3NTEwMg=="}, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2MDQ1OQ==", "bodyText": "I think the word New always referred to a \"new\" version of account creation. I do agree the name isn't the best but I don't think its something worth the hassle of changing, at least in an unrelated PR.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365560459", "createdAt": "2020-01-12T06:19:23Z", "author": {"login": "ericsong"}, "path": "api/config/config_local.json", "diffHunk": "@@ -85,7 +85,8 @@\n     \"unsafeAllowDeleteUser\": true,\n     \"enableVpcFlowLogs\": true,\n     \"enableVpcServicePerimeter\": true,\n-    \"enableNewAccountCreation\": true\n+    \"enableNewAccountCreation\": true,\n+    \"enableBillingLockout\": true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3NTEwMg=="}, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYwNzc4NA==", "bodyText": "sounds good.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365607784", "createdAt": "2020-01-12T20:17:40Z", "author": {"login": "jaycarlton"}, "path": "api/config/config_local.json", "diffHunk": "@@ -85,7 +85,8 @@\n     \"unsafeAllowDeleteUser\": true,\n     \"enableVpcFlowLogs\": true,\n     \"enableVpcServicePerimeter\": true,\n-    \"enableNewAccountCreation\": true\n+    \"enableNewAccountCreation\": true,\n+    \"enableBillingLockout\": true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3NTEwMg=="}, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Nzk5NDk5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxNzozMTozOFrOFcmWlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwNjoyMDoyNlrOFcoCrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMjgyMg==", "bodyText": "nit: I've been naming these kind of functions starting with validate, which I associate with a check that throws. As written, it's active voice, as if we're telling the class to require active billing on these arguments.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365532822", "createdAt": "2020-01-11T17:31:38Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceService.java", "diffHunk": "@@ -40,6 +41,9 @@\n \n   DbWorkspace saveWithLastModified(DbWorkspace workspace);\n \n+  void requireActiveBilling(String workspaceNamespace, String workspaceId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2MDQ5Mw==", "bodyText": "sure, I like validate", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365560493", "createdAt": "2020-01-12T06:20:26Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceService.java", "diffHunk": "@@ -40,6 +41,9 @@\n \n   DbWorkspace saveWithLastModified(DbWorkspace workspace);\n \n+  void requireActiveBilling(String workspaceNamespace, String workspaceId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMjgyMg=="}, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Nzk5NTQyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxNzozMzoxOFrOFcmW1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwNjozMjo0NFrOFcoEWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMjg4NA==", "bodyText": "I'm confused why this test case needs you to both set inactive here and then stub the call below.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365532884", "createdAt": "2020-01-11T17:33:18Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -418,6 +424,31 @@ public void testLocalize_noNotebooks() throws Exception {\n     assertThat(resp.getClusterLocalDirectory()).isEqualTo(\"workspaces/wsid\");\n   }\n \n+  @Test(expected = ForbiddenException.class)\n+  public void listCluster_requireActiveBilling() {\n+    testWorkspace.setBillingStatus(BillingStatus.INACTIVE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2MDkyMw==", "bodyText": "I was on the fence about adding it. The reason I did was because I felt like it explained the condition in which the exception is thrown but I can go either way so I'll remove it.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365560923", "createdAt": "2020-01-12T06:32:44Z", "author": {"login": "ericsong"}, "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -418,6 +424,31 @@ public void testLocalize_noNotebooks() throws Exception {\n     assertThat(resp.getClusterLocalDirectory()).isEqualTo(\"workspaces/wsid\");\n   }\n \n+  @Test(expected = ForbiddenException.class)\n+  public void listCluster_requireActiveBilling() {\n+    testWorkspace.setBillingStatus(BillingStatus.INACTIVE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMjg4NA=="}, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Nzk5NTkwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxNzozNDo0MlrOFcmXFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxNzozNDo0MlrOFcmXFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMjk1MQ==", "bodyText": "Also, I'd probably just make two test workspaces, one active and one not, to cut down on the per-testcase setup.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365532951", "createdAt": "2020-01-11T17:34:42Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -418,6 +424,31 @@ public void testLocalize_noNotebooks() throws Exception {\n     assertThat(resp.getClusterLocalDirectory()).isEqualTo(\"workspaces/wsid\");\n   }\n \n+  @Test(expected = ForbiddenException.class)\n+  public void listCluster_requireActiveBilling() {\n+    testWorkspace.setBillingStatus(BillingStatus.INACTIVE);\n+\n+    doThrow(ForbiddenException.class)\n+        .when(workspaceService)\n+        .requireActiveBilling(WORKSPACE_NS, WORKSPACE_ID);\n+\n+    clusterController.listClusters(WORKSPACE_NS, WORKSPACE_ID);\n+  }\n+\n+  @Test(expected = ForbiddenException.class)\n+  public void localize_requireActiveBilling() {\n+    testWorkspace.setBillingStatus(BillingStatus.INACTIVE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Nzk5NjQwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxNzozNjowOFrOFcmXWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQyMDoyMDoxM1rOFcq78A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMzAxOA==", "bodyText": "So the only assertion is that the test throws this exception, and you're only throwing the exception because of Mockito. This feels like you're possibly testing this behavior at the wrong level, or in the wrong class.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365533018", "createdAt": "2020-01-11T17:36:08Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -418,6 +424,31 @@ public void testLocalize_noNotebooks() throws Exception {\n     assertThat(resp.getClusterLocalDirectory()).isEqualTo(\"workspaces/wsid\");\n   }\n \n+  @Test(expected = ForbiddenException.class)\n+  public void listCluster_requireActiveBilling() {\n+    testWorkspace.setBillingStatus(BillingStatus.INACTIVE);\n+\n+    doThrow(ForbiddenException.class)\n+        .when(workspaceService)\n+        .requireActiveBilling(WORKSPACE_NS, WORKSPACE_ID);\n+\n+    clusterController.listClusters(WORKSPACE_NS, WORKSPACE_ID);\n+  }\n+\n+  @Test(expected = ForbiddenException.class)\n+  public void localize_requireActiveBilling() {\n+    testWorkspace.setBillingStatus(BillingStatus.INACTIVE);\n+\n+    doThrow(ForbiddenException.class)\n+        .when(workspaceService)\n+        .requireActiveBilling(WORKSPACE_NS, WORKSPACE_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2MTA5MA==", "bodyText": "Yeah, this was the more tricky class to test because its the only one that actually mocks out workspaceService instead of relying on a real implementation.\nThat said, I think the level of testing here is valid if you view the subject under test as just the ClusterController. The test verifies that the requireActiveBilling() method is called, not if its implementation is correct.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365561090", "createdAt": "2020-01-12T06:37:22Z", "author": {"login": "ericsong"}, "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -418,6 +424,31 @@ public void testLocalize_noNotebooks() throws Exception {\n     assertThat(resp.getClusterLocalDirectory()).isEqualTo(\"workspaces/wsid\");\n   }\n \n+  @Test(expected = ForbiddenException.class)\n+  public void listCluster_requireActiveBilling() {\n+    testWorkspace.setBillingStatus(BillingStatus.INACTIVE);\n+\n+    doThrow(ForbiddenException.class)\n+        .when(workspaceService)\n+        .requireActiveBilling(WORKSPACE_NS, WORKSPACE_ID);\n+\n+    clusterController.listClusters(WORKSPACE_NS, WORKSPACE_ID);\n+  }\n+\n+  @Test(expected = ForbiddenException.class)\n+  public void localize_requireActiveBilling() {\n+    testWorkspace.setBillingStatus(BillingStatus.INACTIVE);\n+\n+    doThrow(ForbiddenException.class)\n+        .when(workspaceService)\n+        .requireActiveBilling(WORKSPACE_NS, WORKSPACE_ID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMzAxOA=="}, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYwNzkyMA==", "bodyText": "I was thinking about this a bit. I think just verifying that requireActiveBilling() is called is enough here, since we test that it throws or not correctly elsewhere. That way you could drop the expected and the doThrow in favor of one statement that's a bit clearer I think.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365607920", "createdAt": "2020-01-12T20:20:13Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/ClusterControllerTest.java", "diffHunk": "@@ -418,6 +424,31 @@ public void testLocalize_noNotebooks() throws Exception {\n     assertThat(resp.getClusterLocalDirectory()).isEqualTo(\"workspaces/wsid\");\n   }\n \n+  @Test(expected = ForbiddenException.class)\n+  public void listCluster_requireActiveBilling() {\n+    testWorkspace.setBillingStatus(BillingStatus.INACTIVE);\n+\n+    doThrow(ForbiddenException.class)\n+        .when(workspaceService)\n+        .requireActiveBilling(WORKSPACE_NS, WORKSPACE_ID);\n+\n+    clusterController.listClusters(WORKSPACE_NS, WORKSPACE_ID);\n+  }\n+\n+  @Test(expected = ForbiddenException.class)\n+  public void localize_requireActiveBilling() {\n+    testWorkspace.setBillingStatus(BillingStatus.INACTIVE);\n+\n+    doThrow(ForbiddenException.class)\n+        .when(workspaceService)\n+        .requireActiveBilling(WORKSPACE_NS, WORKSPACE_ID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMzAxOA=="}, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Nzk5NzA5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxNzozODowNlrOFcmXuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwNjozODo1OVrOFcoFPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMzExNQ==", "bodyText": "I just learned that there's an error code 402 Payment Required, but it's nonstandard. Would've fit like a glove here though. https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/402", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365533115", "createdAt": "2020-01-11T17:38:06Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -960,6 +968,20 @@ public void exportToNewNotebook() {\n         .saveNotebook(eq(WORKSPACE_BUCKET_NAME), eq(notebookName), any(JSONObject.class));\n   }\n \n+  @Test(expected = ForbiddenException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2MTE1MQ==", "bodyText": "I found that too but I believe its not fully supported, just reserved for future use.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365561151", "createdAt": "2020-01-12T06:38:59Z", "author": {"login": "ericsong"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -960,6 +968,20 @@ public void exportToNewNotebook() {\n         .saveNotebook(eq(WORKSPACE_BUCKET_NAME), eq(notebookName), any(JSONObject.class));\n   }\n \n+  @Test(expected = ForbiddenException.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMzExNQ=="}, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Nzk5NzM4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/workspaces/WorkspaceServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxNzozODo1NVrOFcmX4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxNzozODo1NVrOFcmX4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMzE1Mw==", "bodyText": "If you're looking for a rabbit hole, these should all be MockBeans", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365533153", "createdAt": "2020-01-11T17:38:55Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/workspaces/WorkspaceServiceTest.java", "diffHunk": "@@ -55,6 +56,7 @@\n   @Mock private DataSetService mockDataSetService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODAwMzE1OnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ExportWorkspaceData.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxNzo1NToyNVrOFcmavA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQyMDoyMjoxOVrOFcq8bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMzg4NA==", "bodyText": "I was going to post some reaction gifs to this constructor invocation, but I think there's an easier way to solve this issue.\nI'd go ahead and make a FakeWorkspaceServiceImpl class, use IntelliJ's default overload implementations that just return null, give it a zero-arg constructor, and tag it with @Service and give it a bean name. Then just inject it like a real service.\nYou'll likely need to mark the real one as primary so that the fake doesn't get pulled into real code.\nEven simpler would be to mock it with Mockito, but I think using it in production code is controversial if not frowned upon.\nIt's still a smell to me that you need to pull in this bean but don't need a working version, but I haven't looked around very much to understand the main issue you're working around.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365533884", "createdAt": "2020-01-11T17:55:25Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ExportWorkspaceData.java", "diffHunk": "@@ -84,7 +84,7 @@\n   // Importing the real one requires importing a large subtree of dependencies\n   @Bean\n   public WorkspaceService workspaceService() {\n-    return new WorkspaceServiceImpl(null, null, null, null, null, null, null, null, null);\n+    return new WorkspaceServiceImpl(null, null, null, null, null, null, null, null, null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2MTY2Mw==", "bodyText": "I think I actually did try Mockito when I first implemented this but it didn't work for some reason. That said, this isn't exactly production code (it's one of our cmd line tools) and I don't think further refactoring in this specific case will save us time down the road.\nThe goal here was to just stop the DI wiring here so the tool wouldn't have to import a large number of dependencies.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365561663", "createdAt": "2020-01-12T06:52:04Z", "author": {"login": "ericsong"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ExportWorkspaceData.java", "diffHunk": "@@ -84,7 +84,7 @@\n   // Importing the real one requires importing a large subtree of dependencies\n   @Bean\n   public WorkspaceService workspaceService() {\n-    return new WorkspaceServiceImpl(null, null, null, null, null, null, null, null, null);\n+    return new WorkspaceServiceImpl(null, null, null, null, null, null, null, null, null, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMzg4NA=="}, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYwODA0NA==", "bodyText": "Right, so you need something depends on WorkspaceService, but aren't actually calling any method on it that needs WorkspaceService. That's a symptom of the services getting too large most likely. Not something to chase here if you're trying to keep this small though.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365608044", "createdAt": "2020-01-12T20:22:19Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ExportWorkspaceData.java", "diffHunk": "@@ -84,7 +84,7 @@\n   // Importing the real one requires importing a large subtree of dependencies\n   @Bean\n   public WorkspaceService workspaceService() {\n-    return new WorkspaceServiceImpl(null, null, null, null, null, null, null, null, null);\n+    return new WorkspaceServiceImpl(null, null, null, null, null, null, null, null, null, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMzg4NA=="}, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODAwMzg2OnYy", "diffSide": "RIGHT", "path": "common-api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxNzo1NzoxNlrOFcmbEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxNzo1NzoxNlrOFcmbEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMzk2OQ==", "bodyText": "If you have a few minutes to write a small markdown file about this mechanism and how it works and when you should make your APIs require billing, you could simply put the URL to that here. I don't think there's enough context here to help folks who come later really understand it.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365533969", "createdAt": "2020-01-11T17:57:16Z", "author": {"login": "jaycarlton"}, "path": "common-api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "diffHunk": "@@ -196,6 +196,9 @@ public static WorkbenchConfig createEmptyConfig() {\n     // Flag to indicate whether to enable the new Create Account flow\n     // https://precisionmedicineinitiative.atlassian.net/browse/RW-3284\n     public boolean enableNewAccountCreation;\n+    // Setting this to true will prevent users from making compute increasing operations on", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845c53d2390923439d181294d4d6d06830bf25f2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODIyMzg0OnYy", "diffSide": "RIGHT", "path": "api/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwNjo1NToyM1rOFcoHnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQyMDoyMzoyNFrOFcq8rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2MTc1Nw==", "bodyText": "This was necessary to bring in assertThrows", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365561757", "createdAt": "2020-01-12T06:55:23Z", "author": {"login": "ericsong"}, "path": "api/build.gradle", "diffHunk": "@@ -428,7 +428,7 @@ dependencies {\n   toolsCompile 'commons-cli:commons-cli:1.4'\n   toolsCompile 'com.opencsv:opencsv:4.6'\n \n-  testCompile 'junit:junit:4.12'\n+  testCompile 'junit:junit:4.13'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f143376b475c9d587d5a4b2b58ec61a4f32ee1cb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYwODEwOA==", "bodyText": "Oh nice. I wanted to use that somewhere not long ago.", "url": "https://github.com/all-of-us/workbench/pull/2995#discussion_r365608108", "createdAt": "2020-01-12T20:23:24Z", "author": {"login": "jaycarlton"}, "path": "api/build.gradle", "diffHunk": "@@ -428,7 +428,7 @@ dependencies {\n   toolsCompile 'commons-cli:commons-cli:1.4'\n   toolsCompile 'com.opencsv:opencsv:4.6'\n \n-  testCompile 'junit:junit:4.12'\n+  testCompile 'junit:junit:4.13'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2MTc1Nw=="}, "originalCommit": {"oid": "f143376b475c9d587d5a4b2b58ec61a4f32ee1cb"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3424, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}