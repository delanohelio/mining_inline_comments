{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMDA2OTg0", "number": 3296, "title": "[RW-4445][risk=low] Add OpsGenieService to create alerts on inbound high-egress events.", "bodyText": "To tighten up our egress alerting story, it makes more sense to directly fire OpsGenie alerts from the Workbench rather than going through the more circuitous path of Stackdriver logs-based metrics (see attached ticket for a more detailed description).\nThis PR adds a simple Opsgenie API client and hooks it into the SumoLogicController to create an Opsgenie alert for each high-egress event detected.\nTesting\nI tested this locally by manually firing an API request to the local backend:\ncurl -H \"X-API-KEY: [redacted]\" -H \"Content-Type: application/json\" -d @test.json http://localhost:8081/v1/admin/sumo/egressEvent\n\nwhere API-KEY is our GCS-stored inbound-sumologic API key, and test.json is a temporary file replicating the JSON structure sent from SumoLogic to Workbench (see this gist for example).\nThe resulting Opsgenie alert looked like this:\n\nAlert deduplication\nAnother nice thing about directly connecting to Opsgenie here is that events can be de-duplicated in a meaningful way. This is important, because our SumoLogic queries are set up to detect alerts with different time windows, meaning a single underlying event may result in 3+ distinct highEgressEvent calls from SumoLogic to the Workbench.\nWith this PR, when that happens subsequent alerts will be bundled into any existing open alerts (this is the \"alias\" key that Opsgenie uses for deduplicatdion). Each alert will add a timestamped note to the Opsgenie sidepanel with some more details:\n\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally", "createdAt": "2020-03-24T13:57:39Z", "url": "https://github.com/all-of-us/workbench/pull/3296", "merged": true, "mergeCommit": {"oid": "af1f3f2974233cd6e1b4c3e092c1ed306154efeb"}, "closed": true, "closedAt": "2020-03-26T02:56:51Z", "author": {"login": "gjuggler"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQzMKlgH2gAyMzkzMDA2OTg0OjEyZmY0ZjQxZTEyMjA2N2YxYTUyNTE0ZTY2MjJiYmZkN2ZiYTA4NjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRNhYGgH2gAyMzkzMDA2OTg0OjA5MmZjODVjYmQ1MGE2MDU4MTkxMTA0Y2Q1MGQ1YjNiZGRmZTUzYWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "12ff4f41e122067f1a52514e6622bbfd7fba0863", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/12ff4f41e122067f1a52514e6622bbfd7fba0863", "committedDate": "2020-03-24T13:47:19Z", "message": "Add OpsGenieService to create alerts on inbound high-egress events."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "295c37a88b84c1e8f1a0d85755bce811d26037fc", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/295c37a88b84c1e8f1a0d85755bce811d26037fc", "committedDate": "2020-03-24T14:03:29Z", "message": "Add missing build.gradle changes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMzUzNTYy", "url": "https://github.com/all-of-us/workbench/pull/3296#pullrequestreview-380353562", "createdAt": "2020-03-24T14:18:17Z", "commit": {"oid": "295c37a88b84c1e8f1a0d85755bce811d26037fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoxODoxN1rOF6yX5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoxODoxN1rOF6yX5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE4NzA0NQ==", "bodyText": "I was a little surprised that we didn't have this in our backend config already. I think it's distinct enough from the API base URL (they're different App Engine services with different base paths) that it's worth including here. I'm open to alternative suggestions, though.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397187045", "createdAt": "2020-03-24T14:18:17Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "diffHunk": "@@ -141,6 +141,9 @@ public String freeTierBillingAccountName() {\n   }\n \n   public static class ServerConfig {\n+    // Base URL for the webapp (e.g. client / ui service).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295c37a88b84c1e8f1a0d85755bce811d26037fc"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/08a3d806f4a5108a45aaa296b23d8f9d4ccad1de", "committedDate": "2020-03-24T14:23:32Z", "message": "Fix Sumo controller tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTM5ODcw", "url": "https://github.com/all-of-us/workbench/pull/3296#pullrequestreview-380539870", "createdAt": "2020-03-24T17:28:38Z", "commit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "state": "COMMENTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzoyODozOVrOF67X4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo1ODo0NVrOF68mLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMzNDQ5OQ==", "bodyText": "nit: Can/should this port be parameterized somehow (independently of the url)? I guess it's fine to wait on that.\nDo we not support https locally?", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397334499", "createdAt": "2020-03-24T17:28:39Z", "author": {"login": "jaycarlton"}, "path": "api/config/config_local.json", "diffHunk": "@@ -46,6 +46,7 @@\n     \"gSuiteDomain\": \"fake-research-aou.org\"\n   },\n   \"server\": {\n+    \"clientBaseUrl\": \"http:\\/\\/localhost:4200\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMzNTYwNw==", "bodyText": "I'm slightly confused by the client prefix on this name, as we're in the server section, and I don't know exactly which client we're talking about. Would it be correct to call it uiBaseUrl?", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397335607", "createdAt": "2020-03-24T17:30:20Z", "author": {"login": "jaycarlton"}, "path": "api/config/config_perf.json", "diffHunk": "@@ -49,6 +49,7 @@\n     \"gSuiteDomain\": \"perf.fake-research-aou.org\"\n   },\n   \"server\": {\n+    \"clientBaseUrl\": \"https:\\/\\/all-of-us-rw-perf.appspot.com\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMzNzk5Nw==", "bodyText": "It still seems odd for this to be named SumoLogicController, since it doesn't directly depend on or control SumoLogic at all. Maybe EgressEventController?", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397337997", "createdAt": "2020-03-24T17:33:53Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/SumoLogicController.java", "diffHunk": "@@ -26,15 +27,18 @@\n   private static final Logger log = Logger.getLogger(SumoLogicController.class.getName());\n   private final EgressEventAuditor egressEventAuditor;\n   private final CloudStorageService cloudStorageService;\n+  private final OpsGenieService opsGenieService;\n   private final Provider<WorkbenchConfig> workbenchConfigProvider;\n \n   @Autowired\n   SumoLogicController(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMzOTIzOA==", "bodyText": "nit: it might help to organize all the file names in this bucket into a CedentialFile enum so you can ensure that you don't accidentally reuse one. I guess the bigger benefit is containing all these strings into one class that knows what to do with them.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397339238", "createdAt": "2020-03-24T17:35:44Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieConfig.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.OpsGenieClient;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Scope;\n+\n+@Configuration\n+public class OpsGenieConfig {\n+\n+  static final String OPSGENIE_API_KEY_FILENAME = \"opsgenie-key.txt\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0MDM0OQ==", "bodyText": "TOL: I think it would be good to have a policy here for what kinds of changes should be dynamic vs requiring a restart. I agree that a credential rotation shouldn't require a restart.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397340349", "createdAt": "2020-03-24T17:37:23Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieConfig.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.OpsGenieClient;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Scope;\n+\n+@Configuration\n+public class OpsGenieConfig {\n+\n+  static final String OPSGENIE_API_KEY_FILENAME = \"opsgenie-key.txt\";\n+\n+  // This bean is prototype-scoped, so a Cloud Storage API call will be made every time a new\n+  // instance is injected. This is okay since we expect alert API requests to be rare; the benefit\n+  // is that API key changes will be reflected immediately rather than requiring a restart of all\n+  // App Engine tasks.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0MDkzMg==", "bodyText": "Not your fault, but this is a pretty awkward way to set up the constructor/builder.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397340932", "createdAt": "2020-03-24T17:38:15Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieConfig.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.OpsGenieClient;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Scope;\n+\n+@Configuration\n+public class OpsGenieConfig {\n+\n+  static final String OPSGENIE_API_KEY_FILENAME = \"opsgenie-key.txt\";\n+\n+  // This bean is prototype-scoped, so a Cloud Storage API call will be made every time a new\n+  // instance is injected. This is okay since we expect alert API requests to be rare; the benefit\n+  // is that API key changes will be reflected immediately rather than requiring a restart of all\n+  // App Engine tasks.\n+  @Bean\n+  @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+  public AlertApi getAlertApi(CloudStorageService cloudStorageService) {\n+    AlertApi client = new OpsGenieClient().alertV2();\n+    client", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NDAwNg==", "bodyText": "One thing to think about would be making one service for sending things to OpsGenie (that traffics in that libraries objects, like CreateAlertRequest), and a slightly higher-level service for handling egress events (that, among possibly other things, would make one of those requests and call the OpsGenieService to send it).\nIn other words, even though this is small and readable, there's a minor smell I think in OpsGenieServiceImpl, because it knows about a workbench-specific concept (i.e. the EgressEvent).\nThere are potentially some testing advantages to this split as well (such as mocking the lower service), and we can add another alert trigger later with less tear-up. Though I realize you don't want this to become a pattern.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397344006", "createdAt": "2020-03-24T17:42:52Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieService.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import org.pmiops.workbench.model.EgressEvent;\n+\n+public interface OpsGenieService {\n+\n+  // Creates an Opsgenie alert for a high-egress event detected in the Workbench system.\n+  public void createEgressEventAlert(EgressEvent egressEvent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NTMyMw==", "bodyText": "With the void return here, you won't be able to distinguish easily which Egress Alert maps to which OG alert if there are many happening at once. I'd try to provide bi-directional traceability if possible.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397345323", "createdAt": "2020-03-24T17:44:55Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class OpsGenieServiceImpl implements OpsGenieService {\n+  private static final Logger logger = Logger.getLogger(OpsGenieServiceImpl.class.getName());\n+\n+  private Provider<AlertApi> alertApiProvider;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  public OpsGenieServiceImpl(\n+      Provider<AlertApi> alertApiProvider, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.alertApiProvider = alertApiProvider;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  private CreateAlertRequest egressEventToOpsGenieAlert(\n+      EgressEvent egressEvent, WorkbenchConfig workbenchConfig) {\n+    CreateAlertRequest request = new CreateAlertRequest();\n+    request.setMessage(String.format(\"High-egress event (%s)\", egressEvent.getProjectName()));\n+    request.setDescription(\n+        new StringBuilder()\n+            .append(String.format(\"Workspace project: %s\\n\", egressEvent.getProjectName()))\n+            .append(String.format(\"VM name: %s\\n\", egressEvent.getVmName()))\n+            .append(String.format(\"Egress amount: %.2f Mib\\n\\n\", egressEvent.getEgressMib()))\n+            .append(\n+                String.format(\n+                    \"Admin link (PMI-Ops): %s/admin/workspaces/%s/\\n\",\n+                    workbenchConfig.server.clientBaseUrl, egressEvent.getProjectName()))\n+            .append(\"Playbook: https://broad.io/aou-high-egress-event\")\n+            .toString());\n+    // Add a note with some more specific details about the alerting criteria and threshold. Notes\n+    // are appended to an existing Opsgenie ticket if this request is de-duplicated against an\n+    // existing ticket, so they're a helpful way to summarize temporal updates to the status of\n+    // an incident.\n+    request.setNote(\n+        String.format(\n+            \"Time window: %d secs, threshold: %.2f Mib, observed: %.2f Mib\",\n+            egressEvent.getTimeWindowDuration(),\n+            egressEvent.getEgressMibThreshold(),\n+            egressEvent.getEgressMib()));\n+    // Set the alias, which is Opsgenie's string key for alert de-duplication. See\n+    // https://docs.opsgenie.com/docs/alert-deduplication\n+    request.setAlias(egressEvent.getProjectName() + \" - \" + egressEvent.getVmName());\n+    return request;\n+  }\n+\n+  @Override\n+  public void createEgressEventAlert(EgressEvent egressEvent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NjI4Nw==", "bodyText": "You don't strictly need this yet, but I'm a bit surprised there's no cancelAlert endpoint here. For testing, etc, it would be nice to have a button or script to kill the alert after it's created. Plus, we could be sure that we have a good handle on the alert we've created with the create API.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397346287", "createdAt": "2020-03-24T17:46:21Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieService.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import org.pmiops.workbench.model.EgressEvent;\n+\n+public interface OpsGenieService {\n+\n+  // Creates an Opsgenie alert for a high-egress event detected in the Workbench system.\n+  public void createEgressEventAlert(EgressEvent egressEvent);\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NzE0Mw==", "bodyText": "I would log this (at least as a warning) in the main application logs. I guess it's already in the audit log.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397347143", "createdAt": "2020-03-24T17:47:37Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class OpsGenieServiceImpl implements OpsGenieService {\n+  private static final Logger logger = Logger.getLogger(OpsGenieServiceImpl.class.getName());\n+\n+  private Provider<AlertApi> alertApiProvider;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  public OpsGenieServiceImpl(\n+      Provider<AlertApi> alertApiProvider, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.alertApiProvider = alertApiProvider;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  private CreateAlertRequest egressEventToOpsGenieAlert(\n+      EgressEvent egressEvent, WorkbenchConfig workbenchConfig) {\n+    CreateAlertRequest request = new CreateAlertRequest();\n+    request.setMessage(String.format(\"High-egress event (%s)\", egressEvent.getProjectName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NzQxMw==", "bodyText": "nit: is there a more precise term that amount?", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397347413", "createdAt": "2020-03-24T17:48:00Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class OpsGenieServiceImpl implements OpsGenieService {\n+  private static final Logger logger = Logger.getLogger(OpsGenieServiceImpl.class.getName());\n+\n+  private Provider<AlertApi> alertApiProvider;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  public OpsGenieServiceImpl(\n+      Provider<AlertApi> alertApiProvider, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.alertApiProvider = alertApiProvider;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  private CreateAlertRequest egressEventToOpsGenieAlert(\n+      EgressEvent egressEvent, WorkbenchConfig workbenchConfig) {\n+    CreateAlertRequest request = new CreateAlertRequest();\n+    request.setMessage(String.format(\"High-egress event (%s)\", egressEvent.getProjectName()));\n+    request.setDescription(\n+        new StringBuilder()\n+            .append(String.format(\"Workspace project: %s\\n\", egressEvent.getProjectName()))\n+            .append(String.format(\"VM name: %s\\n\", egressEvent.getVmName()))\n+            .append(String.format(\"Egress amount: %.2f Mib\\n\\n\", egressEvent.getEgressMib()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0ODM1MA==", "bodyText": "TOL: This would be a good excuse to try using handlebars/moustache.\nIt's too bad we can't just put a getDescription field on EgressEvent.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397348350", "createdAt": "2020-03-24T17:49:31Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class OpsGenieServiceImpl implements OpsGenieService {\n+  private static final Logger logger = Logger.getLogger(OpsGenieServiceImpl.class.getName());\n+\n+  private Provider<AlertApi> alertApiProvider;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  public OpsGenieServiceImpl(\n+      Provider<AlertApi> alertApiProvider, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.alertApiProvider = alertApiProvider;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  private CreateAlertRequest egressEventToOpsGenieAlert(\n+      EgressEvent egressEvent, WorkbenchConfig workbenchConfig) {\n+    CreateAlertRequest request = new CreateAlertRequest();\n+    request.setMessage(String.format(\"High-egress event (%s)\", egressEvent.getProjectName()));\n+    request.setDescription(\n+        new StringBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0OTAyNQ==", "bodyText": "This is neat. If an alert is closed but then another one is fired with that same alias, is it a new alert or a reopened one?", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397349025", "createdAt": "2020-03-24T17:50:34Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class OpsGenieServiceImpl implements OpsGenieService {\n+  private static final Logger logger = Logger.getLogger(OpsGenieServiceImpl.class.getName());\n+\n+  private Provider<AlertApi> alertApiProvider;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  public OpsGenieServiceImpl(\n+      Provider<AlertApi> alertApiProvider, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.alertApiProvider = alertApiProvider;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  private CreateAlertRequest egressEventToOpsGenieAlert(\n+      EgressEvent egressEvent, WorkbenchConfig workbenchConfig) {\n+    CreateAlertRequest request = new CreateAlertRequest();\n+    request.setMessage(String.format(\"High-egress event (%s)\", egressEvent.getProjectName()));\n+    request.setDescription(\n+        new StringBuilder()\n+            .append(String.format(\"Workspace project: %s\\n\", egressEvent.getProjectName()))\n+            .append(String.format(\"VM name: %s\\n\", egressEvent.getVmName()))\n+            .append(String.format(\"Egress amount: %.2f Mib\\n\\n\", egressEvent.getEgressMib()))\n+            .append(\n+                String.format(\n+                    \"Admin link (PMI-Ops): %s/admin/workspaces/%s/\\n\",\n+                    workbenchConfig.server.clientBaseUrl, egressEvent.getProjectName()))\n+            .append(\"Playbook: https://broad.io/aou-high-egress-event\")\n+            .toString());\n+    // Add a note with some more specific details about the alerting criteria and threshold. Notes\n+    // are appended to an existing Opsgenie ticket if this request is de-duplicated against an\n+    // existing ticket, so they're a helpful way to summarize temporal updates to the status of\n+    // an incident.\n+    request.setNote(\n+        String.format(\n+            \"Time window: %d secs, threshold: %.2f Mib, observed: %.2f Mib\",\n+            egressEvent.getTimeWindowDuration(),\n+            egressEvent.getEgressMibThreshold(),\n+            egressEvent.getEgressMib()));\n+    // Set the alias, which is Opsgenie's string key for alert de-duplication. See\n+    // https://docs.opsgenie.com/docs/alert-deduplication\n+    request.setAlias(egressEvent.getProjectName() + \" - \" + egressEvent.getVmName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1MzAzMw==", "bodyText": "nit: why not just make this static final?", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397353033", "createdAt": "2020-03-24T17:56:27Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/opsgenie/OpsGenieServiceTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.verify;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class OpsGenieServiceTest {\n+  private static WorkbenchConfig workbenchConfig;\n+  private EgressEvent egressEvent;\n+\n+  @MockBean private AlertApi mockAlertApi;\n+  @Captor private ArgumentCaptor<CreateAlertRequest> alertRequestCaptor;\n+  @Autowired private OpsGenieService opsGenieService;\n+\n+  @TestConfiguration\n+  @Import({OpsGenieServiceImpl.class})\n+  static class Configuration {\n+    @Bean\n+    @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+    WorkbenchConfig getWorkbenchConfig() {\n+      return workbenchConfig;\n+    }\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    workbenchConfig = WorkbenchConfig.createEmptyConfig();\n+    workbenchConfig.server.clientBaseUrl = \"https://workbench.researchallofus.org\";\n+\n+    egressEvent =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1Mzc5Ng==", "bodyText": "Can we also fetch information about the user like username, email, and institution?", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397353796", "createdAt": "2020-03-24T17:57:34Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class OpsGenieServiceImpl implements OpsGenieService {\n+  private static final Logger logger = Logger.getLogger(OpsGenieServiceImpl.class.getName());\n+\n+  private Provider<AlertApi> alertApiProvider;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  public OpsGenieServiceImpl(\n+      Provider<AlertApi> alertApiProvider, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.alertApiProvider = alertApiProvider;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  private CreateAlertRequest egressEventToOpsGenieAlert(\n+      EgressEvent egressEvent, WorkbenchConfig workbenchConfig) {\n+    CreateAlertRequest request = new CreateAlertRequest();\n+    request.setMessage(String.format(\"High-egress event (%s)\", egressEvent.getProjectName()));\n+    request.setDescription(\n+        new StringBuilder()\n+            .append(String.format(\"Workspace project: %s\\n\", egressEvent.getProjectName()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1NDU0Mw==", "bodyText": "for the format here, the hyphens in each token and - between them is tough on my brain. I.e. if they're a word character, it's hard to use them as a separator. I bet you could just do\n\"{project=aou-rw-test-c7dec260, vm=aou-rw-1}\"", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397354543", "createdAt": "2020-03-24T17:58:45Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/opsgenie/OpsGenieServiceTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.verify;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class OpsGenieServiceTest {\n+  private static WorkbenchConfig workbenchConfig;\n+  private EgressEvent egressEvent;\n+\n+  @MockBean private AlertApi mockAlertApi;\n+  @Captor private ArgumentCaptor<CreateAlertRequest> alertRequestCaptor;\n+  @Autowired private OpsGenieService opsGenieService;\n+\n+  @TestConfiguration\n+  @Import({OpsGenieServiceImpl.class})\n+  static class Configuration {\n+    @Bean\n+    @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+    WorkbenchConfig getWorkbenchConfig() {\n+      return workbenchConfig;\n+    }\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    workbenchConfig = WorkbenchConfig.createEmptyConfig();\n+    workbenchConfig.server.clientBaseUrl = \"https://workbench.researchallofus.org\";\n+\n+    egressEvent =\n+        new EgressEvent()\n+            .projectName(\"aou-rw-test-c7dec260\")\n+            .vmName(\"aou-rw-1\")\n+            .egressMib(120.7)\n+            .egressMibThreshold(100.0)\n+            .timeWindowDuration(600L);\n+  }\n+\n+  @Test\n+  public void createEgressEventAlert() throws ApiException {\n+    opsGenieService.createEgressEventAlert(egressEvent);\n+    verify(mockAlertApi).createAlert(alertRequestCaptor.capture());\n+\n+    CreateAlertRequest request = alertRequestCaptor.getValue();\n+    assertThat(request.getDescription()).contains(\"Workspace project: aou-rw-test-c7dec260\");\n+    assertThat(request.getDescription())\n+        .contains(\"https://workbench.researchallofus.org/admin/workspaces/aou-rw-test-c7dec260/\");\n+    assertThat(request.getAlias()).isEqualTo(\"aou-rw-test-c7dec260 - aou-rw-1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f03a6feb6ff46fc1222288894ac9537548606c38", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/f03a6feb6ff46fc1222288894ac9537548606c38", "committedDate": "2020-03-25T18:33:51Z", "message": "PR feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNTA2MDgy", "url": "https://github.com/all-of-us/workbench/pull/3296#pullrequestreview-381506082", "createdAt": "2020-03-25T20:22:24Z", "commit": {"oid": "f03a6feb6ff46fc1222288894ac9537548606c38"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "092fc85cbd50a6058191104cd50d5b3bddfe53af", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/092fc85cbd50a6058191104cd50d5b3bddfe53af", "committedDate": "2020-03-25T20:28:01Z", "message": "Add alert tag."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3288, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}