{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNTQ2OTM3", "number": 3095, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNjowOTowNVrODdvWGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNjowOTowNVrODdvWGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTExMDAwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/monitoring/LogsBasedMetricsServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNjowOTowNVrOFmg5SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNjowOTowNVrOFmg5SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkyOTE2MQ==", "bodyText": "setup*", "url": "https://github.com/all-of-us/workbench/pull/3095#discussion_r375929161", "createdAt": "2020-02-06T16:09:05Z", "author": {"login": "ericsong"}, "path": "api/src/test/java/org/pmiops/workbench/monitoring/LogsBasedMetricsServiceTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.pmiops.workbench.monitoring;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+\n+import com.google.cloud.MonitoredResource;\n+import com.google.cloud.logging.LogEntry;\n+import com.google.cloud.logging.Logging;\n+import com.google.cloud.logging.Payload.JsonPayload;\n+import com.google.cloud.logging.Payload.Type;\n+import com.google.cloud.logging.Severity;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.pmiops.workbench.model.DataAccessLevel;\n+import org.pmiops.workbench.model.WorkspaceActiveStatus;\n+import org.pmiops.workbench.monitoring.labels.MetricLabel;\n+import org.pmiops.workbench.monitoring.views.EventMetric;\n+import org.pmiops.workbench.monitoring.views.GaugeMetric;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class LogsBasedMetricsServiceTest {\n+\n+  private static MonitoredResource MONITORED_RESOURCE =\n+      MonitoredResource.newBuilder(\"resource_type_woot\")\n+          .addLabel(\"height\", \"3 apples tall\")\n+          .addLabel(\"area_code\", \"90210\")\n+          .build();\n+  @MockBean Logging mockLogging;\n+  @MockBean StackdriverStatsExporterService mockStackdriverStatsExporterService;\n+\n+  @Captor ArgumentCaptor<Iterable<LogEntry>> logEntriesCaptor;\n+  @Autowired LogsBasedMetricService logsBasedMetricService;\n+\n+  @TestConfiguration\n+  @Import({LogsBasedMetricServiceImpl.class})\n+  static class Configuration {}\n+\n+  @Before\n+  public void settup() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8f90295603069a531a127f5f1aee182d1cf9db5"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3280, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}