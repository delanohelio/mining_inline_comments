{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMDk1OTgx", "number": 2990, "title": "[RW-2840][risk=no] Use AppIdentityService to generate service-backed credentials", "bodyText": "After #2962 merged, we started seeing 401 errors in test when creating a new workspace.\nI tracked this down to an issue where the newer GoogleCredentials library doesn't do what I was expecting when calling GoogleCredentials.getApplicationDefault(). See the new comments on the ServiceAccounts method which describes the issue in some detail.\nThis PR essentially brings back the logic to switch how we generate scoped service credentials based on the operating environment: if App Engine, use the AppIdentityService; if development, use ADCs. This method is called by a couple config classes for APIs which use our service identity to call downstream APIs.\n\nPR checklist\n\n I have run and tested this change locally", "createdAt": "2020-01-09T18:25:42Z", "url": "https://github.com/all-of-us/workbench/pull/2990", "merged": true, "mergeCommit": {"oid": "249c3f7dddb83e7494ccdb3c0c646e25fcb8da73"}, "closed": true, "closedAt": "2020-01-10T02:14:32Z", "author": {"login": "gjuggler"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4uM56gH2gAyMzYxMDk1OTgxOmVlZGMxYTM2YTIzODFiYTMzODBmMmMwOGUzMWYzYjZlYmY1ZTA3ODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4xpuugFqTM0MDg1NDIyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "eedc1a36a2381ba3380f2c08e31f3b6ebf5e0780", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/eedc1a36a2381ba3380f2c08e31f3b6ebf5e0780", "committedDate": "2020-01-09T18:24:25Z", "message": "Use AppIdentityService to generate service-backed credentials."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwNzM5NDU5", "url": "https://github.com/all-of-us/workbench/pull/2990#pullrequestreview-340739459", "createdAt": "2020-01-09T18:49:31Z", "commit": {"oid": "eedc1a36a2381ba3380f2c08e31f3b6ebf5e0780"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxODo0OTozMVrOFb_9YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxODo1Mjo1M1rOFcADDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkwMzc3Ng==", "bodyText": "comment is no longer accurate", "url": "https://github.com/all-of-us/workbench/pull/2990#discussion_r364903776", "createdAt": "2020-01-09T18:49:31Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -13,14 +17,46 @@\n   private static final String SIGN_JWT_URL_FORMAT =\n       \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/%s:signJwt\";\n \n+  /**\n+   * Returns an appropriate set of service credentials based on the current operating environment.\n+   *\n+   * <p>When running a local server, Application Default Credentials (ADCs) are used.\n+   *\n+   * <p>When running in App Engine, we use AppIdentityService to return an instance of\n+   * AppEngineCredentials. Unfortunately, if we use GoogleCredentials.getApplicationDefault() from\n+   * within an App Engine environment, the returned credentials will be an instance of\n+   * ComputeEngineCredentials, which doesn't support scoped access tokens. Frustratingly, the call\n+   * to .createScoped will silently proceed by doing nothing -- meaning we only learn about the\n+   * error once an attempt to use these credentials fails in a downstream service due to bad scopes.\n+   *\n+   * <p>See https://github.com/googleapis/google-auth-library-java/issues/272 and\n+   * https://github.com/googleapis/google-auth-library-java/issues/172 for reference; this seems to\n+   * be a common pain point for users of the com.google.auth.oauth2 library.\n+   *\n+   * @param scopes\n+   * @return\n+   * @throws IOException\n+   */\n+  private static GoogleCredentials getScopedServiceCredentials(List<String> scopes)\n+      throws IOException {\n+    if (SystemProperty.environment.value().equals(SystemProperty.Environment.Value.Development)) {\n+      return GoogleCredentials.getApplicationDefault().createScoped(scopes);\n+    } else {\n+      AppIdentityService appIdentityService = AppIdentityServiceFactory.getAppIdentityService();\n+      return AppEngineCredentials.newBuilder()\n+          .setScopes(scopes)\n+          .setAppIdentityService(appIdentityService)\n+          .build();\n+    }\n+  }\n+\n   /**\n    * Retrieves an access token with the specified set of scopes derived from a given set of Google", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eedc1a36a2381ba3380f2c08e31f3b6ebf5e0780"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkwNTIzMQ==", "bodyText": "Could use the just-removed WorkbenchEnvironment here if it still existed.  Would it make sense to bring it back?", "url": "https://github.com/all-of-us/workbench/pull/2990#discussion_r364905231", "createdAt": "2020-01-09T18:52:53Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -13,14 +17,46 @@\n   private static final String SIGN_JWT_URL_FORMAT =\n       \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/%s:signJwt\";\n \n+  /**\n+   * Returns an appropriate set of service credentials based on the current operating environment.\n+   *\n+   * <p>When running a local server, Application Default Credentials (ADCs) are used.\n+   *\n+   * <p>When running in App Engine, we use AppIdentityService to return an instance of\n+   * AppEngineCredentials. Unfortunately, if we use GoogleCredentials.getApplicationDefault() from\n+   * within an App Engine environment, the returned credentials will be an instance of\n+   * ComputeEngineCredentials, which doesn't support scoped access tokens. Frustratingly, the call\n+   * to .createScoped will silently proceed by doing nothing -- meaning we only learn about the\n+   * error once an attempt to use these credentials fails in a downstream service due to bad scopes.\n+   *\n+   * <p>See https://github.com/googleapis/google-auth-library-java/issues/272 and\n+   * https://github.com/googleapis/google-auth-library-java/issues/172 for reference; this seems to\n+   * be a common pain point for users of the com.google.auth.oauth2 library.\n+   *\n+   * @param scopes\n+   * @return\n+   * @throws IOException\n+   */\n+  private static GoogleCredentials getScopedServiceCredentials(List<String> scopes)\n+      throws IOException {\n+    if (SystemProperty.environment.value().equals(SystemProperty.Environment.Value.Development)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eedc1a36a2381ba3380f2c08e31f3b6ebf5e0780"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13b8446eeda2ae2d6662989934fdb4a76c1a34f0", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/13b8446eeda2ae2d6662989934fdb4a76c1a34f0", "committedDate": "2020-01-09T22:20:34Z", "message": "PR feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b321dda915d2b315b51344c0f399dc3b40ddd61e", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/b321dda915d2b315b51344c0f399dc3b40ddd61e", "committedDate": "2020-01-09T22:24:07Z", "message": "Spotless format fix."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwODU0MjI2", "url": "https://github.com/all-of-us/workbench/pull/2990#pullrequestreview-340854226", "createdAt": "2020-01-09T22:25:37Z", "commit": {"oid": "b321dda915d2b315b51344c0f399dc3b40ddd61e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3653, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}