{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NjM0OTA5", "number": 2973, "title": "[RW-3650][risk=no] Add label support to our core CheckBox class and add type-safety and unit tests.", "bodyText": "I ended up digging into the checkbox issue a bit more on Friday. I think this is the most balanced approach to fixing the issue. The crux of the matter is this: should a checkbox manage its own checked state, or should it always blindly render the value passed in via props?\nAfter taking stock of existing usage in the Workbench, I realized that in most scenarios, it's fine to allow checkboxes manage their own state. Wrapping components can pass in the initial value, and listen for changes by providing an .onChange(checked) prop.\nIn one or two use cases, though, we seem to be expecting the checkbox to always render the value passed in via props. The wrapping component implements the toggling behavior by listening to onChange events, updating its own state, and using that state variable to pass into the CheckBox's 'props'. This pattern should be disfavored, since it causes wrapping components to effectively re-implement the checkbox toggling logic.\nI also took the opportunity to add type-safe props and state to the CheckBox component, and a couple unit tests. It's a bit scary that, across our whole codebase, our core UI components have the least type-safety and unit testing. This makes it hard to safely improve or refactor our UI over time, so I'd like to (very incrementally) add these over time.\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally", "createdAt": "2020-01-06T17:23:43Z", "url": "https://github.com/all-of-us/workbench/pull/2973", "merged": true, "mergeCommit": {"oid": "899c5c10a7a7a8711e832087fcbb5c2995e7d1c0"}, "closed": true, "closedAt": "2020-01-10T13:46:26Z", "author": {"login": "gjuggler"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb3zV89AFqTMzODg4NTIzMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4-XyVgBqjI5Mzg0NzQ0MDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4ODg1MjMz", "url": "https://github.com/all-of-us/workbench/pull/2973#pullrequestreview-338885233", "createdAt": "2020-01-06T20:47:02Z", "commit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMDo0NzowMlrOFaoyAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMTo0OTo0NlrOFaqQgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ3NTQ1Nw==", "bodyText": "It looks like you're changing the actual checked property here. What happens if you simulate click instead?", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363475457", "createdAt": "2020-01-06T20:47:02Z", "author": {"login": "als364"}, "path": "ui/src/app/components/inputs.spec.tsx", "diffHunk": "@@ -0,0 +1,67 @@\n+import {\n+  EnzymeAdapter,\n+  mount,\n+  ReactWrapper,\n+  shallow,\n+  ShallowWrapper,\n+} from 'enzyme';\n+import * as React from 'react';\n+\n+import {CheckBox} from './inputs';\n+\n+function findInput(wrapper: (ShallowWrapper|ReactWrapper)): (ShallowWrapper|ReactWrapper) {\n+  return wrapper.find('input[type=\"checkbox\"]').first();\n+}\n+\n+function clickCheckbox(wrapper: (ShallowWrapper|ReactWrapper)) {\n+  const currentChecked = findInput(wrapper).prop('checked');\n+  findInput(wrapper).simulate('change', {target: {checked: !currentChecked}});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4NTAwOA==", "bodyText": "Should we file a ticket to deprecate this?", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363485008", "createdAt": "2020-01-06T21:11:54Z", "author": {"login": "als364"}, "path": "ui/src/app/components/inputs.tsx", "diffHunk": "@@ -119,64 +133,87 @@ export const RadioButton = ({ onChange, ...props }) => {\n   />;\n };\n \n-\n-export const CheckBox = ({onChange, ...props}) => {\n-  return <input\n-    type='checkbox'\n-    onChange={onChange ? (e => onChange(e.target.checked)) : undefined}\n-    {...props}\n-  />;\n-};\n-\n-interface LabeledCheckboxProps {\n-  initialValue: boolean;\n+interface CheckBoxProps {\n+  // Whether the checkbox should be checked. If manageOwnState is false, the\n+  // checkbox will always be rendered with the value of this prop. If\n+  // manageOwnState is true, this prop controls only the initial value.\n+  checked?: boolean;\n+  // Whether the checkbox is rendered in a disabled state.\n   disabled?: boolean;\n-  onChange?: Function;\n-  style?: object;\n-  checkboxStyle?: object;\n-  labelStyle?: object;\n-  label: string;\n+  id?: string;\n+  // An optional label to show alongside the input. Can be a plain string or\n+  // any React node.\n+  label?: React.ReactNode;\n+  // Styles to apply to the label element. Only relevant when label is non-null.\n+  labelStyle?: React.CSSProperties;\n+  // Indicates whether the CheckBox should be responsible for managing its own\n+  // state. When false, the HTML input will always be rendered with the value of\n+  // the passed 'checked' prop.\n+  manageOwnState: boolean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5NDE0Ng==", "bodyText": "not props.id ? props.id : uniqueId?", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363494146", "createdAt": "2020-01-06T21:35:28Z", "author": {"login": "als364"}, "path": "ui/src/app/components/inputs.tsx", "diffHunk": "@@ -119,64 +133,87 @@ export const RadioButton = ({ onChange, ...props }) => {\n   />;\n };\n \n-\n-export const CheckBox = ({onChange, ...props}) => {\n-  return <input\n-    type='checkbox'\n-    onChange={onChange ? (e => onChange(e.target.checked)) : undefined}\n-    {...props}\n-  />;\n-};\n-\n-interface LabeledCheckboxProps {\n-  initialValue: boolean;\n+interface CheckBoxProps {\n+  // Whether the checkbox should be checked. If manageOwnState is false, the\n+  // checkbox will always be rendered with the value of this prop. If\n+  // manageOwnState is true, this prop controls only the initial value.\n+  checked?: boolean;\n+  // Whether the checkbox is rendered in a disabled state.\n   disabled?: boolean;\n-  onChange?: Function;\n-  style?: object;\n-  checkboxStyle?: object;\n-  labelStyle?: object;\n-  label: string;\n+  id?: string;\n+  // An optional label to show alongside the input. Can be a plain string or\n+  // any React node.\n+  label?: React.ReactNode;\n+  // Styles to apply to the label element. Only relevant when label is non-null.\n+  labelStyle?: React.CSSProperties;\n+  // Indicates whether the CheckBox should be responsible for managing its own\n+  // state. When false, the HTML input will always be rendered with the value of\n+  // the passed 'checked' prop.\n+  manageOwnState: boolean;\n+  // Callback called when the user clicks the checkbox or label, containing the\n+  // new checked value.\n+  onChange?: (boolean) => void;\n+  // Styles for the <input> checkbox component.\n+  style?: React.CSSProperties;\n+  // If the label is non-empty, styles to be applied to the <span> wrapper.\n+  wrapperStyle?: React.CSSProperties;\n }\n \n-interface LabeledCheckboxState {\n-  value: boolean;\n+interface CheckBoxState {\n+  checked: boolean;\n }\n \n-export class LabeledCheckbox extends React.Component<LabeledCheckboxProps, LabeledCheckboxState> {\n-  constructor(props: any) {\n+export class CheckBox extends React.Component<CheckBoxProps, CheckBoxState> {\n+  constructor(props: CheckBoxProps) {\n     super(props);\n     this.state = {\n-      value: props.initialValue\n+      checked: props.checked\n     };\n   }\n \n-  toggleValue() {\n-    if (!this.props.disabled) {\n-      this.setState(previousState => ({value: !previousState.value}));\n+  static defaultProps: CheckBoxProps = {\n+    checked: false,\n+    manageOwnState: true\n+  };\n+\n+  handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n+    if (this.props.manageOwnState) {\n+      // We only track state internally if props aren't being used to render\n+      // the checkbox value.\n+      this.setState({checked: !this.state.checked});\n+    }\n+    if (this.props.onChange) {\n+      this.props.onChange(e.target.checked);\n     }\n   }\n-\n   render() {\n-    return <div style={this.props.style}>\n-      <CheckBox\n-          style={{...this.props.checkboxStyle, verticalAlign: 'middle'}}\n-          checked={this.state.value}\n-          disabled={this.props.disabled}\n-          onChange={\n-            e => {\n-              if (this.props.onChange) {\n-                this.props.onChange(e);\n-              }\n-            }\n-          }\n-      />\n-      <label\n-          style={this.props.labelStyle}\n-          onClick={() => this.toggleValue()}\n-      >\n-        {this.props.label}\n-      </label>\n-    </div>;\n+    const {\n+      checked, disabled, label, labelStyle, onChange, manageOwnState, style, wrapperStyle,\n+      ...otherProps\n+    } = this.props;\n+    const uniqueId = fp.uniqueId('checkbox');\n+\n+    const maybeDisabledOverrides = disabled ? styles.disabledStyle : {};\n+\n+    const input = <input\n+      id={uniqueId}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5NTEwMA==", "bodyText": "this seems unrelated. Did this miss a linter somewhere?", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363495100", "createdAt": "2020-01-06T21:37:52Z", "author": {"login": "als364"}, "path": "ui/src/app/components/tables.tsx", "diffHunk": "@@ -20,14 +20,14 @@ export const TwoColPaddedTable = ({style = {}, header = false, headerLeft = '',\n   headerRight = '', cellWidth = {left: '50%', right: '50%'}, contentLeft, contentRight}) => {\n   return <FlexColumn style={{...style}}>\n     {header &&\n-      <FlexRow style={{height: '100%'}}>\n-        <PaddedTableCell left={true} leftWidth={cellWidth.left}\n+      <FlexRow key='header' style={{height: '100%'}}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5NTUzMg==", "bodyText": "shouldn't this be checked: !checked?", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363495532", "createdAt": "2020-01-06T21:38:56Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/analysis/confirm-playground-mode-modal.tsx", "diffHunk": "@@ -27,10 +27,9 @@ export class ConfirmPlaygroundModeModal extends React.Component<Props, State> {\n     };\n   }\n \n-  toggleChecked() {\n-    const newState = !this.state.checked;\n-    this.setState({checked: newState});\n-    Cookies.set(ConfirmPlaygroundModeModal.DO_NOT_SHOW_AGAIN, String(newState));\n+  toggleChecked(checked: boolean) {\n+    this.setState({checked: checked});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5NjU5Mg==", "bodyText": "or does this happen after the actual checked state changes? if that's the case we should change the name of this function since it is no longer toggling checked", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363496592", "createdAt": "2020-01-06T21:42:04Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/analysis/confirm-playground-mode-modal.tsx", "diffHunk": "@@ -27,10 +27,9 @@ export class ConfirmPlaygroundModeModal extends React.Component<Props, State> {\n     };\n   }\n \n-  toggleChecked() {\n-    const newState = !this.state.checked;\n-    this.setState({checked: newState});\n-    Cookies.set(ConfirmPlaygroundModeModal.DO_NOT_SHOW_AGAIN, String(newState));\n+  toggleChecked(checked: boolean) {\n+    this.setState({checked: checked});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5NTUzMg=="}, "originalCommit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5NjY3NQ==", "bodyText": "extraneous", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363496675", "createdAt": "2020-01-06T21:42:19Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/login/account-creation/account-creation-survey.tsx", "diffHunk": "@@ -110,6 +102,7 @@ export class AccountCreationSurvey extends React.Component<AccountCreationSurvey\n     // Toggle Includes removes the element if it already exist and adds if not\n     const attributeList = toggleIncludes(value, this.state.profile.demographicSurvey[attribute]);\n     this.setState(fp.set(['profile', 'demographicSurvey', attribute], attributeList));\n+    console.log(this.state);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5ODQwMQ==", "bodyText": "uh oh, what probably hilarious bug made the boolifier necessary?", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363498401", "createdAt": "2020-01-06T21:46:34Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/workspace/workspace-edit.tsx", "diffHunk": "@@ -521,7 +532,7 @@ export const WorkspaceEdit = fp.flow(withRouteConfigData(), withCurrentWorkspace\n     }\n \n     specificPopulationCheckboxSelected(populationEnum): boolean {\n-      return fp.includes(populationEnum, this.state.workspace.researchPurpose.populationDetails);\n+      return !!fp.includes(populationEnum, this.state.workspace.researchPurpose.populationDetails);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5ODg5MQ==", "bodyText": "this results in the same style as the original styling? even with no margins set?", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363498891", "createdAt": "2020-01-06T21:47:55Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/workspace/workspace-edit.tsx", "diffHunk": "@@ -707,13 +718,14 @@ export const WorkspaceEdit = fp.flow(withRouteConfigData(), withCurrentWorkspace\n           </FlexRow>\n         </WorkspaceEditSection>\n         {this.isMode(WorkspaceEditMode.Duplicate) &&\n-        <FlexRow>\n+        <WorkspaceEditSection header='Options for duplicate workspace'\n+          >\n           <CheckBox\n-                 style={{height: '.66667rem', marginRight: '.31667rem', marginTop: '1.2rem'}}\n-          onChange={v => this.setState({cloneUserRole: v})}/>\n-          <WorkspaceEditSection header='Copy Original workspace Collaborators'\n-            description='Share cloned workspace with same collaborators'/>\n-        </FlexRow>\n+            style={styles.checkboxStyle}\n+            label='Share workspace with the same set of collaborators'\n+            labelStyle={styles.text}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5OTIwOA==", "bodyText": "This is better wording, thank you", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363499208", "createdAt": "2020-01-06T21:48:41Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/workspace/workspace-edit.tsx", "diffHunk": "@@ -707,13 +718,14 @@ export const WorkspaceEdit = fp.flow(withRouteConfigData(), withCurrentWorkspace\n           </FlexRow>\n         </WorkspaceEditSection>\n         {this.isMode(WorkspaceEditMode.Duplicate) &&\n-        <FlexRow>\n+        <WorkspaceEditSection header='Options for duplicate workspace'\n+          >\n           <CheckBox\n-                 style={{height: '.66667rem', marginRight: '.31667rem', marginTop: '1.2rem'}}\n-          onChange={v => this.setState({cloneUserRole: v})}/>\n-          <WorkspaceEditSection header='Copy Original workspace Collaborators'\n-            description='Share cloned workspace with same collaborators'/>\n-        </FlexRow>\n+            style={styles.checkboxStyle}\n+            label='Share workspace with the same set of collaborators'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5OTYwOQ==", "bodyText": "indentation is off here.", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363499609", "createdAt": "2020-01-06T21:49:41Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/workspace/workspace-edit.tsx", "diffHunk": "@@ -744,6 +757,7 @@ export const WorkspaceEdit = fp.flow(withRouteConfigData(), withCurrentWorkspace\n                 .map((rp, i) =>\n                   <WorkspaceCategory shortDescription={rp.shortDescription}\n                     longDescription={rp.longDescription} key={i}\n+                                     uniqueId={rp.uniqueId}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5OTY0OQ==", "bodyText": "indentation is off here.", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363499649", "createdAt": "2020-01-06T21:49:46Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/workspace/workspace-edit.tsx", "diffHunk": "@@ -734,6 +746,7 @@ export const WorkspaceEdit = fp.flow(withRouteConfigData(), withCurrentWorkspace\n                 .map((rp, i) =>\n                   <WorkspaceCategory shortDescription={rp.shortDescription} key={i}\n                     longDescription={rp.longDescription}\n+                     uniqueId={rp.uniqueId}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MjQwMDQ4", "url": "https://github.com/all-of-us/workbench/pull/2973#pullrequestreview-339240048", "createdAt": "2020-01-07T13:40:31Z", "commit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxMzo0MDozMVrOFa5now==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMzo1Nzo0NFrOFb2paQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc1MTMzMQ==", "bodyText": "That was my first instinct \u2013 in fact I spent a fair bit of time trying various approaches and Googling to see if I could get that to work. Sad stories like enzymejs/enzyme#952 and https://stackoverflow.com/questions/39892256/checkbox-is-not-checked-after-simulate-change-with-enzyme popped up, and I couldn't find anything other than the 'change' simulation to work reliably here.", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363751331", "createdAt": "2020-01-07T13:40:31Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/components/inputs.spec.tsx", "diffHunk": "@@ -0,0 +1,67 @@\n+import {\n+  EnzymeAdapter,\n+  mount,\n+  ReactWrapper,\n+  shallow,\n+  ShallowWrapper,\n+} from 'enzyme';\n+import * as React from 'react';\n+\n+import {CheckBox} from './inputs';\n+\n+function findInput(wrapper: (ShallowWrapper|ReactWrapper)): (ShallowWrapper|ReactWrapper) {\n+  return wrapper.find('input[type=\"checkbox\"]').first();\n+}\n+\n+function clickCheckbox(wrapper: (ShallowWrapper|ReactWrapper)) {\n+  const currentChecked = findInput(wrapper).prop('checked');\n+  findInput(wrapper).simulate('change', {target: {checked: !currentChecked}});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ3NTQ1Nw=="}, "originalCommit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM4ODAzMQ==", "bodyText": "Good point \u2013 filed https://precisionmedicineinitiative.atlassian.net/browse/RW-4251 for this.", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r364388031", "createdAt": "2020-01-08T18:52:59Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/components/inputs.tsx", "diffHunk": "@@ -119,64 +133,87 @@ export const RadioButton = ({ onChange, ...props }) => {\n   />;\n };\n \n-\n-export const CheckBox = ({onChange, ...props}) => {\n-  return <input\n-    type='checkbox'\n-    onChange={onChange ? (e => onChange(e.target.checked)) : undefined}\n-    {...props}\n-  />;\n-};\n-\n-interface LabeledCheckboxProps {\n-  initialValue: boolean;\n+interface CheckBoxProps {\n+  // Whether the checkbox should be checked. If manageOwnState is false, the\n+  // checkbox will always be rendered with the value of this prop. If\n+  // manageOwnState is true, this prop controls only the initial value.\n+  checked?: boolean;\n+  // Whether the checkbox is rendered in a disabled state.\n   disabled?: boolean;\n-  onChange?: Function;\n-  style?: object;\n-  checkboxStyle?: object;\n-  labelStyle?: object;\n-  label: string;\n+  id?: string;\n+  // An optional label to show alongside the input. Can be a plain string or\n+  // any React node.\n+  label?: React.ReactNode;\n+  // Styles to apply to the label element. Only relevant when label is non-null.\n+  labelStyle?: React.CSSProperties;\n+  // Indicates whether the CheckBox should be responsible for managing its own\n+  // state. When false, the HTML input will always be rendered with the value of\n+  // the passed 'checked' prop.\n+  manageOwnState: boolean;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4NTAwOA=="}, "originalCommit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM4ODE0OQ==", "bodyText": "Sounds sensible \u2013\u00a0done. While in here, I adjusted the logic to only create a new unique ID on component construction, not on every render. I'm not sure if this has a real impact on performance, but if feels cleaner.", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r364388149", "createdAt": "2020-01-08T18:53:11Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/components/inputs.tsx", "diffHunk": "@@ -119,64 +133,87 @@ export const RadioButton = ({ onChange, ...props }) => {\n   />;\n };\n \n-\n-export const CheckBox = ({onChange, ...props}) => {\n-  return <input\n-    type='checkbox'\n-    onChange={onChange ? (e => onChange(e.target.checked)) : undefined}\n-    {...props}\n-  />;\n-};\n-\n-interface LabeledCheckboxProps {\n-  initialValue: boolean;\n+interface CheckBoxProps {\n+  // Whether the checkbox should be checked. If manageOwnState is false, the\n+  // checkbox will always be rendered with the value of this prop. If\n+  // manageOwnState is true, this prop controls only the initial value.\n+  checked?: boolean;\n+  // Whether the checkbox is rendered in a disabled state.\n   disabled?: boolean;\n-  onChange?: Function;\n-  style?: object;\n-  checkboxStyle?: object;\n-  labelStyle?: object;\n-  label: string;\n+  id?: string;\n+  // An optional label to show alongside the input. Can be a plain string or\n+  // any React node.\n+  label?: React.ReactNode;\n+  // Styles to apply to the label element. Only relevant when label is non-null.\n+  labelStyle?: React.CSSProperties;\n+  // Indicates whether the CheckBox should be responsible for managing its own\n+  // state. When false, the HTML input will always be rendered with the value of\n+  // the passed 'checked' prop.\n+  manageOwnState: boolean;\n+  // Callback called when the user clicks the checkbox or label, containing the\n+  // new checked value.\n+  onChange?: (boolean) => void;\n+  // Styles for the <input> checkbox component.\n+  style?: React.CSSProperties;\n+  // If the label is non-empty, styles to be applied to the <span> wrapper.\n+  wrapperStyle?: React.CSSProperties;\n }\n \n-interface LabeledCheckboxState {\n-  value: boolean;\n+interface CheckBoxState {\n+  checked: boolean;\n }\n \n-export class LabeledCheckbox extends React.Component<LabeledCheckboxProps, LabeledCheckboxState> {\n-  constructor(props: any) {\n+export class CheckBox extends React.Component<CheckBoxProps, CheckBoxState> {\n+  constructor(props: CheckBoxProps) {\n     super(props);\n     this.state = {\n-      value: props.initialValue\n+      checked: props.checked\n     };\n   }\n \n-  toggleValue() {\n-    if (!this.props.disabled) {\n-      this.setState(previousState => ({value: !previousState.value}));\n+  static defaultProps: CheckBoxProps = {\n+    checked: false,\n+    manageOwnState: true\n+  };\n+\n+  handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n+    if (this.props.manageOwnState) {\n+      // We only track state internally if props aren't being used to render\n+      // the checkbox value.\n+      this.setState({checked: !this.state.checked});\n+    }\n+    if (this.props.onChange) {\n+      this.props.onChange(e.target.checked);\n     }\n   }\n-\n   render() {\n-    return <div style={this.props.style}>\n-      <CheckBox\n-          style={{...this.props.checkboxStyle, verticalAlign: 'middle'}}\n-          checked={this.state.value}\n-          disabled={this.props.disabled}\n-          onChange={\n-            e => {\n-              if (this.props.onChange) {\n-                this.props.onChange(e);\n-              }\n-            }\n-          }\n-      />\n-      <label\n-          style={this.props.labelStyle}\n-          onClick={() => this.toggleValue()}\n-      >\n-        {this.props.label}\n-      </label>\n-    </div>;\n+    const {\n+      checked, disabled, label, labelStyle, onChange, manageOwnState, style, wrapperStyle,\n+      ...otherProps\n+    } = this.props;\n+    const uniqueId = fp.uniqueId('checkbox');\n+\n+    const maybeDisabledOverrides = disabled ? styles.disabledStyle : {};\n+\n+    const input = <input\n+      id={uniqueId}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5NDE0Ng=="}, "originalCommit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwNDE2MQ==", "bodyText": "Ah, no \u2013 this is unrelated, but I was encountering these React warning log statements about non-unique keys while debugging some of this stuff. I forget where exactly. I'll split out into a separate PR for clarity, done.", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r364404161", "createdAt": "2020-01-08T19:29:16Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/components/tables.tsx", "diffHunk": "@@ -20,14 +20,14 @@ export const TwoColPaddedTable = ({style = {}, header = false, headerLeft = '',\n   headerRight = '', cellWidth = {left: '50%', right: '50%'}, contentLeft, contentRight}) => {\n   return <FlexColumn style={{...style}}>\n     {header &&\n-      <FlexRow style={{height: '100%'}}>\n-        <PaddedTableCell left={true} leftWidth={cellWidth.left}\n+      <FlexRow key='header' style={{height: '100%'}}>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5NTEwMA=="}, "originalCommit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwNDI1MA==", "bodyText": "Function rename sgtm \u2013\u00a0done.", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r364404250", "createdAt": "2020-01-08T19:29:29Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/analysis/confirm-playground-mode-modal.tsx", "diffHunk": "@@ -27,10 +27,9 @@ export class ConfirmPlaygroundModeModal extends React.Component<Props, State> {\n     };\n   }\n \n-  toggleChecked() {\n-    const newState = !this.state.checked;\n-    this.setState({checked: newState});\n-    Cookies.set(ConfirmPlaygroundModeModal.DO_NOT_SHOW_AGAIN, String(newState));\n+  toggleChecked(checked: boolean) {\n+    this.setState({checked: checked});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5NTUzMg=="}, "originalCommit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc0NDExOA==", "bodyText": "Woops \u2013\u00a0thanks", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r364744118", "createdAt": "2020-01-09T13:43:40Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/account-creation/account-creation-survey.tsx", "diffHunk": "@@ -110,6 +102,7 @@ export class AccountCreationSurvey extends React.Component<AccountCreationSurvey\n     // Toggle Includes removes the element if it already exist and adds if not\n     const attributeList = toggleIncludes(value, this.state.profile.demographicSurvey[attribute]);\n     this.setState(fp.set(['profile', 'demographicSurvey', attribute], attributeList));\n+    console.log(this.state);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5NjY3NQ=="}, "originalCommit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc0NzM5Mw==", "bodyText": "Good question, I don't even remember making this change, lemme check on it again...\n[Update] Oh yeah, it was a Typescript error I was seeing in IntelliJ. It doesn't show up as an error in our actual compile though, which is strange. Anyway \u2013\u00a0removed for now. (I might have switched this to be a Boolean() call around the entire expression, which I find more readable than double-bang... but I'd rather just not change this if it's not needed.)", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r364747393", "createdAt": "2020-01-09T13:50:00Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/workspace/workspace-edit.tsx", "diffHunk": "@@ -521,7 +532,7 @@ export const WorkspaceEdit = fp.flow(withRouteConfigData(), withCurrentWorkspace\n     }\n \n     specificPopulationCheckboxSelected(populationEnum): boolean {\n-      return fp.includes(populationEnum, this.state.workspace.researchPurpose.populationDetails);\n+      return !!fp.includes(populationEnum, this.state.workspace.researchPurpose.populationDetails);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5ODQwMQ=="}, "originalCommit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc0NzkyOA==", "bodyText": "Yeah, I'm of a mixed mind about drive-by tweaks like this, but it was bothering me enough I couldn't help but try a bit of wordsmithing.", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r364747928", "createdAt": "2020-01-09T13:51:01Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/workspace/workspace-edit.tsx", "diffHunk": "@@ -707,13 +718,14 @@ export const WorkspaceEdit = fp.flow(withRouteConfigData(), withCurrentWorkspace\n           </FlexRow>\n         </WorkspaceEditSection>\n         {this.isMode(WorkspaceEditMode.Duplicate) &&\n-        <FlexRow>\n+        <WorkspaceEditSection header='Options for duplicate workspace'\n+          >\n           <CheckBox\n-                 style={{height: '.66667rem', marginRight: '.31667rem', marginTop: '1.2rem'}}\n-          onChange={v => this.setState({cloneUserRole: v})}/>\n-          <WorkspaceEditSection header='Copy Original workspace Collaborators'\n-            description='Share cloned workspace with same collaborators'/>\n-        </FlexRow>\n+            style={styles.checkboxStyle}\n+            label='Share workspace with the same set of collaborators'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5OTIwOA=="}, "originalCommit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1MDg0MA==", "bodyText": "Ah \u2013 I forgot I also tried reworking this area a bit. The issue here was that the previous styling had the checkbox wedged into the header section, which didn't fit well with having the checkbox label be clickable. The original wording also felt needlessly repetitive. I tried to reframe this as a form section with options specific to the duplicate action (which I think is what's really going on). As a bonus, I was able to make the checkbox align better with the styling of other checkboxes in this form. LMK what you think.\nBefore:\n\nAfter:", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r364750840", "createdAt": "2020-01-09T13:57:01Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/workspace/workspace-edit.tsx", "diffHunk": "@@ -707,13 +718,14 @@ export const WorkspaceEdit = fp.flow(withRouteConfigData(), withCurrentWorkspace\n           </FlexRow>\n         </WorkspaceEditSection>\n         {this.isMode(WorkspaceEditMode.Duplicate) &&\n-        <FlexRow>\n+        <WorkspaceEditSection header='Options for duplicate workspace'\n+          >\n           <CheckBox\n-                 style={{height: '.66667rem', marginRight: '.31667rem', marginTop: '1.2rem'}}\n-          onChange={v => this.setState({cloneUserRole: v})}/>\n-          <WorkspaceEditSection header='Copy Original workspace Collaborators'\n-            description='Share cloned workspace with same collaborators'/>\n-        </FlexRow>\n+            style={styles.checkboxStyle}\n+            label='Share workspace with the same set of collaborators'\n+            labelStyle={styles.text}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5ODg5MQ=="}, "originalCommit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1MDk0Nw==", "bodyText": "Thanks \u2013\u00a0fixed.", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r364750947", "createdAt": "2020-01-09T13:57:12Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/workspace/workspace-edit.tsx", "diffHunk": "@@ -734,6 +746,7 @@ export const WorkspaceEdit = fp.flow(withRouteConfigData(), withCurrentWorkspace\n                 .map((rp, i) =>\n                   <WorkspaceCategory shortDescription={rp.shortDescription} key={i}\n                     longDescription={rp.longDescription}\n+                     uniqueId={rp.uniqueId}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5OTY0OQ=="}, "originalCommit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1MTIwOQ==", "bodyText": "Fixed", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r364751209", "createdAt": "2020-01-09T13:57:44Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/workspace/workspace-edit.tsx", "diffHunk": "@@ -744,6 +757,7 @@ export const WorkspaceEdit = fp.flow(withRouteConfigData(), withCurrentWorkspace\n                 .map((rp, i) =>\n                   <WorkspaceCategory shortDescription={rp.shortDescription}\n                     longDescription={rp.longDescription} key={i}\n+                                     uniqueId={rp.uniqueId}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5OTYwOQ=="}, "originalCommit": {"oid": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwNTc5ODI0", "url": "https://github.com/all-of-us/workbench/pull/2973#pullrequestreview-340579824", "createdAt": "2020-01-09T14:58:14Z", "commit": {"oid": "c66b0c114a8b82a51c6fe2ff5ceac90c93c84685"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c66b0c114a8b82a51c6fe2ff5ceac90c93c84685", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/c66b0c114a8b82a51c6fe2ff5ceac90c93c84685", "committedDate": "2020-01-09T14:30:35Z", "message": "Merge branch 'gj/checkbox-fix' of github.com:all-of-us/workbench into gj/checkbox-fix"}, "afterCommit": {"oid": "076971af3a7faff43081bda2b105af0c23ac564f", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/076971af3a7faff43081bda2b105af0c23ac564f", "committedDate": "2020-01-09T14:25:34Z", "message": "Fix up a bug with the uniqueId handling in workspace-edit."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwODA4OTI1", "url": "https://github.com/all-of-us/workbench/pull/2973#pullrequestreview-340808925", "createdAt": "2020-01-09T20:56:55Z", "commit": {"oid": "076971af3a7faff43081bda2b105af0c23ac564f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "beac80ca59c1e95fa600485e86fb16b9c02f32ec", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/beac80ca59c1e95fa600485e86fb16b9c02f32ec", "committedDate": "2020-01-10T02:22:11Z", "message": "Checkbox fixes: add label prop, type-safety, and unit tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ba325075eb90327e0c3fec3bd14b4b14256c318", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/4ba325075eb90327e0c3fec3bd14b4b14256c318", "committedDate": "2020-01-10T02:22:11Z", "message": "A couple test fixes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "147c7fbc0c3725db91df9aec7bf46812b8d29e07", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/147c7fbc0c3725db91df9aec7bf46812b8d29e07", "committedDate": "2020-01-10T02:22:11Z", "message": "PR feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f262a20538a141f357064e5aeec03a1bd7923ec6", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/f262a20538a141f357064e5aeec03a1bd7923ec6", "committedDate": "2020-01-10T02:22:11Z", "message": "Remove flex-row key changes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dcad60b8c78c9c4db3c0db5b722eeae6f3dd8f4", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/9dcad60b8c78c9c4db3c0db5b722eeae6f3dd8f4", "committedDate": "2020-01-10T02:22:11Z", "message": "Capitalization fix."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e53f5f3219eeca652cc8144a380b98b1a769fafb", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/e53f5f3219eeca652cc8144a380b98b1a769fafb", "committedDate": "2020-01-10T02:22:11Z", "message": "Fix up a bug with the uniqueId handling in workspace-edit."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1b05f12ad924c2f90ea91881aa2acf617e55d96", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/a1b05f12ad924c2f90ea91881aa2acf617e55d96", "committedDate": "2020-01-10T06:15:17Z", "message": "Fix checkboxes in the account creation survey."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "076971af3a7faff43081bda2b105af0c23ac564f", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/076971af3a7faff43081bda2b105af0c23ac564f", "committedDate": "2020-01-09T14:25:34Z", "message": "Fix up a bug with the uniqueId handling in workspace-edit."}, "afterCommit": {"oid": "a1b05f12ad924c2f90ea91881aa2acf617e55d96", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/a1b05f12ad924c2f90ea91881aa2acf617e55d96", "committedDate": "2020-01-10T06:15:17Z", "message": "Fix checkboxes in the account creation survey."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3822, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}