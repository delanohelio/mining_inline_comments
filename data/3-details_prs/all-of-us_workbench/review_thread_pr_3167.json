{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3OTYwNzA3", "number": 3167, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjowMDowMFrODiYXfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTozMjo1OVrODjnmsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mzc3NDA1OnYy", "diffSide": "RIGHT", "path": "ops/ruby/devops-framework/devops.rb", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjowMDowMFrOFtmBtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjowMDowMFrOFtmBtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM1MzI2OA==", "bodyText": "Options parsing is coming in the next PR.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r383353268", "createdAt": "2020-02-24T16:00:00Z", "author": {"login": "jaycarlton"}, "path": "ops/ruby/devops-framework/devops.rb", "diffHunk": "@@ -0,0 +1,13 @@\n+require 'logger'\n+require_relative 'tasks/count_monitoring_assets.rb'\n+\n+# Single entry point for the devops framework. This is the only true Ruby Script file. The\n+# rest are classes.\n+#\n+# Based on input commands, this script delegates the work to  a task class, which should not need to\n+# know anything about environment variables such as ARGV, the run directory,  etc. Tasks should also avoid\n+# global variables like `logger`, so that we can control logging preferences from the top level.\n+\n+logger = Logger.new(STDOUT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7931e1620905967ddcd3d3d55a9c4cf05a61d4ce"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDgxMDc0OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMToxNDoxNFrOFtwEfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzowMDozOFrOFty_iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxNzgyMQ==", "bodyText": "typos\n(how soon until the keyboard is fixed?)", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r383517821", "createdAt": "2020-02-24T21:14:14Z", "author": {"login": "jmthibault79"}, "path": "README.md", "diffHunk": "@@ -585,6 +585,9 @@ To run tests in IntelliJ, go to your preferences, click plugins, and make sure y\n \n Once you have JUnit installed, go to the test file you want to run, right click on the test file, and select `Run` or `Debug` to run or debug the tests. To run or debug on a specific test class or method, open the file, and test running options should appear as green triangles pointing right on the side bar. Clicking that will open a dialog allowing you to run that specific class or method.\n \n+## DevOps\n+The `devops` frramework is describe [here](ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md). Other", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NTcwNw==", "bodyText": "As soon as the new MacBook drops. If I tried to break my replacement before then, it would look suspicious.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r383565707", "createdAt": "2020-02-24T23:00:38Z", "author": {"login": "jaycarlton"}, "path": "README.md", "diffHunk": "@@ -585,6 +585,9 @@ To run tests in IntelliJ, go to your preferences, click plugins, and make sure y\n \n Once you have JUnit installed, go to the test file you want to run, right click on the test file, and select `Run` or `Debug` to run or debug the tests. To run or debug on a specific test class or method, open the file, and test running options should appear as green triangles pointing right on the side bar. Clicking that will open a dialog allowing you to run that specific class or method.\n \n+## DevOps\n+The `devops` frramework is describe [here](ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md). Other", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxNzgyMQ=="}, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDgxNzA1OnYy", "diffSide": "RIGHT", "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMToxNjoyMVrOFtwIgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMToxNjoyMVrOFtwIgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxODg1MA==", "bodyText": "?", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r383518850", "createdAt": "2020-02-24T21:16:21Z", "author": {"login": "jmthibault79"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are\n+taken in a traceable, repeatable, and consistent way. It operates by  communicating to Google Cloud Platform\n+directly, independently of the existing build, operations, and deployment pipeline(s).\n+\n+## Usage\n+The entry point to all functionality is `devops.rb`, which provides command line and environment\n+loading and dispatches to Task classes (not scripts) that do the real work.\n+`./devops.rb  -t <task_name> -e <env_file> --task-option-1 value1`\n+\n+There is also a dynamically-generated help file from the descriptions given in the options.\n+```\n+$ ruby ./devops.rb  --help\n+Usage: devops [options]\n+    -t, --task [TASK]                Task to be in in each environment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDgxODQyOnYy", "diffSide": "RIGHT", "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMToxNjo0M1rOFtwJTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMjo1NzowOFrOFuqd3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxOTA1NQ==", "bodyText": "Where is the format of this file specified?", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r383519055", "createdAt": "2020-02-24T21:16:43Z", "author": {"login": "jmthibault79"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are\n+taken in a traceable, repeatable, and consistent way. It operates by  communicating to Google Cloud Platform\n+directly, independently of the existing build, operations, and deployment pipeline(s).\n+\n+## Usage\n+The entry point to all functionality is `devops.rb`, which provides command line and environment\n+loading and dispatches to Task classes (not scripts) that do the real work.\n+`./devops.rb  -t <task_name> -e <env_file> --task-option-1 value1`\n+\n+There is also a dynamically-generated help file from the descriptions given in the options.\n+```\n+$ ruby ./devops.rb  --help\n+Usage: devops [options]\n+    -t, --task [TASK]                Task to be in in each environment\n+    -e, --envs-file [ENVS_FILE]      Path to environments JSON file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3NDU5MQ==", "bodyText": "added, thanks", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384474591", "createdAt": "2020-02-26T12:57:08Z", "author": {"login": "jaycarlton"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are\n+taken in a traceable, repeatable, and consistent way. It operates by  communicating to Google Cloud Platform\n+directly, independently of the existing build, operations, and deployment pipeline(s).\n+\n+## Usage\n+The entry point to all functionality is `devops.rb`, which provides command line and environment\n+loading and dispatches to Task classes (not scripts) that do the real work.\n+`./devops.rb  -t <task_name> -e <env_file> --task-option-1 value1`\n+\n+There is also a dynamically-generated help file from the descriptions given in the options.\n+```\n+$ ruby ./devops.rb  --help\n+Usage: devops [options]\n+    -t, --task [TASK]                Task to be in in each environment\n+    -e, --envs-file [ENVS_FILE]      Path to environments JSON file.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxOTA1NQ=="}, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDgyNjAzOnYy", "diffSide": "RIGHT", "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMToxODo1OFrOFtwNxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMToxODo1OFrOFtwNxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUyMDE5OQ==", "bodyText": "sp: standard", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r383520199", "createdAt": "2020-02-24T21:18:58Z", "author": {"login": "jmthibault79"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are\n+taken in a traceable, repeatable, and consistent way. It operates by  communicating to Google Cloud Platform\n+directly, independently of the existing build, operations, and deployment pipeline(s).\n+\n+## Usage\n+The entry point to all functionality is `devops.rb`, which provides command line and environment\n+loading and dispatches to Task classes (not scripts) that do the real work.\n+`./devops.rb  -t <task_name> -e <env_file> --task-option-1 value1`\n+\n+There is also a dynamically-generated help file from the descriptions given in the options.\n+```\n+$ ruby ./devops.rb  --help\n+Usage: devops [options]\n+    -t, --task [TASK]                Task to be in in each environment\n+    -e, --envs-file [ENVS_FILE]      Path to environments JSON file.\n+```\n+\n+##  Installation\n+We need a newish version of Ruby. I'm running 2.6.5 as of this writing, but haven't gone\n+back and tested with older versions. We also currently need the `gcloud` tools and an account with\n+sufficient privilege account to create service account tokens.\n+\n+Additionally, you'll need to install a gem or two. Right now, it's\n+\n+`gem install google-cloud-monitoring` for the monitoring library\n+\n+## Design Decisions\n+I should justify some of the  directions I've taken here, since they're departures to varying\n+degrees from how we've traditionally done things.\n+\n+### A New Ruby Application\n+I wrestled a bit with this actually. I haven't seen anything that Ruby can do that Python can't,\n+for example, and in general the latter language has much more documentation, a more active\n+community, and many more programmers. Ultimately, it would've  been a big reset to change\n+code bases and languages all at once, so I'll continue to write the first  version in Ruby until\n+I get ~~an excuse~~ a requirement to port to Python. One such requirement could come in the form\n+of other teams we depend  on and wish to integrate tightly with using some other language.\n+\n+### Task Classes Instead of Scripts\n+I  decided to make the tasks full  Ruby classes instead of stand-alone scripts for a couple  of reasons.\n+First, it ensures that we can minimize usage of global state (which can get away from you easily\n+in Ruby). Second, we can now configure things  like log levels in one place.\n+\n+### Independence of All Things All of Us\n+There are no dependencies on any AoU application or build/release code, or anything in\n+the utils repository. This allows us to avoid refactoring the legacy Ruby stack, and ensures\n+that this framework can be reused externally. Some notably absent things:\n+* `project.rb` System: This system depends on and is depended on by our  build & release framework, \n+which means we would be in danger of holding up a release if we needed to make a quick change.\n+* `ServiceAccountContext`: This system was a  major source of inspiration  for the new\n+ `ServiceAccountManager`, but had some customizations and legacy assumptions that were not compatible with the goals\n+ of this project.\n+* `Common.rb`: There are a number of useful snippets and  functions in this class, and I decided to steal\n+selectively and adapt rather than try to reuse it. It isn't a standard package, isn't actively maintained,\n+and it's not laid out in such a way that I can only bring in the  pieces I want. Logging  uses the\n+standnard Ruby logger, and I'm re-evaluating how we do subprocesses.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDgyODA5OnYy", "diffSide": "RIGHT", "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMToxOTozN1rOFtwPDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzowMjowMlrOFuqnXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUyMDUyNQ==", "bodyText": "sp: specific", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r383520525", "createdAt": "2020-02-24T21:19:37Z", "author": {"login": "jmthibault79"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are\n+taken in a traceable, repeatable, and consistent way. It operates by  communicating to Google Cloud Platform\n+directly, independently of the existing build, operations, and deployment pipeline(s).\n+\n+## Usage\n+The entry point to all functionality is `devops.rb`, which provides command line and environment\n+loading and dispatches to Task classes (not scripts) that do the real work.\n+`./devops.rb  -t <task_name> -e <env_file> --task-option-1 value1`\n+\n+There is also a dynamically-generated help file from the descriptions given in the options.\n+```\n+$ ruby ./devops.rb  --help\n+Usage: devops [options]\n+    -t, --task [TASK]                Task to be in in each environment\n+    -e, --envs-file [ENVS_FILE]      Path to environments JSON file.\n+```\n+\n+##  Installation\n+We need a newish version of Ruby. I'm running 2.6.5 as of this writing, but haven't gone\n+back and tested with older versions. We also currently need the `gcloud` tools and an account with\n+sufficient privilege account to create service account tokens.\n+\n+Additionally, you'll need to install a gem or two. Right now, it's\n+\n+`gem install google-cloud-monitoring` for the monitoring library\n+\n+## Design Decisions\n+I should justify some of the  directions I've taken here, since they're departures to varying\n+degrees from how we've traditionally done things.\n+\n+### A New Ruby Application\n+I wrestled a bit with this actually. I haven't seen anything that Ruby can do that Python can't,\n+for example, and in general the latter language has much more documentation, a more active\n+community, and many more programmers. Ultimately, it would've  been a big reset to change\n+code bases and languages all at once, so I'll continue to write the first  version in Ruby until\n+I get ~~an excuse~~ a requirement to port to Python. One such requirement could come in the form\n+of other teams we depend  on and wish to integrate tightly with using some other language.\n+\n+### Task Classes Instead of Scripts\n+I  decided to make the tasks full  Ruby classes instead of stand-alone scripts for a couple  of reasons.\n+First, it ensures that we can minimize usage of global state (which can get away from you easily\n+in Ruby). Second, we can now configure things  like log levels in one place.\n+\n+### Independence of All Things All of Us\n+There are no dependencies on any AoU application or build/release code, or anything in\n+the utils repository. This allows us to avoid refactoring the legacy Ruby stack, and ensures\n+that this framework can be reused externally. Some notably absent things:\n+* `project.rb` System: This system depends on and is depended on by our  build & release framework, \n+which means we would be in danger of holding up a release if we needed to make a quick change.\n+* `ServiceAccountContext`: This system was a  major source of inspiration  for the new\n+ `ServiceAccountManager`, but had some customizations and legacy assumptions that were not compatible with the goals\n+ of this project.\n+* `Common.rb`: There are a number of useful snippets and  functions in this class, and I decided to steal\n+selectively and adapt rather than try to reuse it. It isn't a standard package, isn't actively maintained,\n+and it's not laid out in such a way that I can only bring in the  pieces I want. Logging  uses the\n+standnard Ruby logger, and I'm re-evaluating how we do subprocesses.\n+\n+### Use of Google Client Libraries Instead of `gcloud` Tool\n+`gcloud` is certainly a handy and indespensible tool for daily use for one-off tasks,\n+and has the advantage of working in the Cloud Shell. I don't propose to replace it for the\n+semi-manual tasks to which it is well suited.\n+\n+However, I do want to avoid making  system calls just to use `gcloud` when there is an equivalent\n+library method already provided. This will make the framework feel more like an application\n+(which most experienced programmers have an idea how to scale) than a collection of scripts.\n+\n+Ideally, we would not depend on `gcloud` being installed locally at all for someone to use\n+these tools.\n+\n+### Use of a Limited Service Account\n+The framework supports a bring-you-own-service-account model. I.e. any evaluation of permissions\n+is left up to GCP. I requested new  monitoring-speicic service accounts for this framework so", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3NzAyMg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384477022", "createdAt": "2020-02-26T13:02:02Z", "author": {"login": "jaycarlton"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are\n+taken in a traceable, repeatable, and consistent way. It operates by  communicating to Google Cloud Platform\n+directly, independently of the existing build, operations, and deployment pipeline(s).\n+\n+## Usage\n+The entry point to all functionality is `devops.rb`, which provides command line and environment\n+loading and dispatches to Task classes (not scripts) that do the real work.\n+`./devops.rb  -t <task_name> -e <env_file> --task-option-1 value1`\n+\n+There is also a dynamically-generated help file from the descriptions given in the options.\n+```\n+$ ruby ./devops.rb  --help\n+Usage: devops [options]\n+    -t, --task [TASK]                Task to be in in each environment\n+    -e, --envs-file [ENVS_FILE]      Path to environments JSON file.\n+```\n+\n+##  Installation\n+We need a newish version of Ruby. I'm running 2.6.5 as of this writing, but haven't gone\n+back and tested with older versions. We also currently need the `gcloud` tools and an account with\n+sufficient privilege account to create service account tokens.\n+\n+Additionally, you'll need to install a gem or two. Right now, it's\n+\n+`gem install google-cloud-monitoring` for the monitoring library\n+\n+## Design Decisions\n+I should justify some of the  directions I've taken here, since they're departures to varying\n+degrees from how we've traditionally done things.\n+\n+### A New Ruby Application\n+I wrestled a bit with this actually. I haven't seen anything that Ruby can do that Python can't,\n+for example, and in general the latter language has much more documentation, a more active\n+community, and many more programmers. Ultimately, it would've  been a big reset to change\n+code bases and languages all at once, so I'll continue to write the first  version in Ruby until\n+I get ~~an excuse~~ a requirement to port to Python. One such requirement could come in the form\n+of other teams we depend  on and wish to integrate tightly with using some other language.\n+\n+### Task Classes Instead of Scripts\n+I  decided to make the tasks full  Ruby classes instead of stand-alone scripts for a couple  of reasons.\n+First, it ensures that we can minimize usage of global state (which can get away from you easily\n+in Ruby). Second, we can now configure things  like log levels in one place.\n+\n+### Independence of All Things All of Us\n+There are no dependencies on any AoU application or build/release code, or anything in\n+the utils repository. This allows us to avoid refactoring the legacy Ruby stack, and ensures\n+that this framework can be reused externally. Some notably absent things:\n+* `project.rb` System: This system depends on and is depended on by our  build & release framework, \n+which means we would be in danger of holding up a release if we needed to make a quick change.\n+* `ServiceAccountContext`: This system was a  major source of inspiration  for the new\n+ `ServiceAccountManager`, but had some customizations and legacy assumptions that were not compatible with the goals\n+ of this project.\n+* `Common.rb`: There are a number of useful snippets and  functions in this class, and I decided to steal\n+selectively and adapt rather than try to reuse it. It isn't a standard package, isn't actively maintained,\n+and it's not laid out in such a way that I can only bring in the  pieces I want. Logging  uses the\n+standnard Ruby logger, and I'm re-evaluating how we do subprocesses.\n+\n+### Use of Google Client Libraries Instead of `gcloud` Tool\n+`gcloud` is certainly a handy and indespensible tool for daily use for one-off tasks,\n+and has the advantage of working in the Cloud Shell. I don't propose to replace it for the\n+semi-manual tasks to which it is well suited.\n+\n+However, I do want to avoid making  system calls just to use `gcloud` when there is an equivalent\n+library method already provided. This will make the framework feel more like an application\n+(which most experienced programmers have an idea how to scale) than a collection of scripts.\n+\n+Ideally, we would not depend on `gcloud` being installed locally at all for someone to use\n+these tools.\n+\n+### Use of a Limited Service Account\n+The framework supports a bring-you-own-service-account model. I.e. any evaluation of permissions\n+is left up to GCP. I requested new  monitoring-speicic service accounts for this framework so", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUyMDUyNQ=="}, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDg1Njk1OnYy", "diffSide": "RIGHT", "path": "ops/ruby/devops-framework/devops.rb", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMToyODo0NlrOFtwhDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODoxNToyOVrOFu2njQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUyNTEzMw==", "bodyText": "is there a way to do this generically, or error on any missing?", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r383525133", "createdAt": "2020-02-24T21:28:46Z", "author": {"login": "jmthibault79"}, "path": "ops/ruby/devops-framework/devops.rb", "diffHunk": "@@ -0,0 +1,43 @@\n+require 'logger'\n+require 'optparse'\n+require_relative 'tasks/count_monitoring_assets.rb'\n+\n+# Single entry point for the devops framework. This is the only true Ruby Script file. The\n+# rest are classes.\n+#\n+# Based on input commands, this script delegates the work to  a task class, which should not need to\n+# know anything about environment variables such as ARGV, the run directory,  etc. Tasks should also avoid\n+# global variables like `logger`, so that we can control logging preferences from the top level.\n+\n+# TODO(jaycarlton): work out a scheme for task-specific options (i.e. subcommands)\n+def parse_options\n+  options = {}\n+  OptionParser.new do |parser|\n+    parser.on('-t', '--task [TASK]', String, 'Task to be in in each environment')\n+    parser.on('-e', '--envs-file [ENVS]', String, 'Path to environments JSON file.')\n+  end.parse!({into: options})\n+\n+  #Now raise an exception if we have not found a required arg\n+  raise OptionParser::MissingArgument.new('task') if options[:task].nil?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3NzcxMA==", "bodyText": "You would think. There's supposed to be a way to specify required args. This is reworked a good bit in the follow-on PR, and I'll see if I can make it simpler there.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384477710", "createdAt": "2020-02-26T13:03:20Z", "author": {"login": "jaycarlton"}, "path": "ops/ruby/devops-framework/devops.rb", "diffHunk": "@@ -0,0 +1,43 @@\n+require 'logger'\n+require 'optparse'\n+require_relative 'tasks/count_monitoring_assets.rb'\n+\n+# Single entry point for the devops framework. This is the only true Ruby Script file. The\n+# rest are classes.\n+#\n+# Based on input commands, this script delegates the work to  a task class, which should not need to\n+# know anything about environment variables such as ARGV, the run directory,  etc. Tasks should also avoid\n+# global variables like `logger`, so that we can control logging preferences from the top level.\n+\n+# TODO(jaycarlton): work out a scheme for task-specific options (i.e. subcommands)\n+def parse_options\n+  options = {}\n+  OptionParser.new do |parser|\n+    parser.on('-t', '--task [TASK]', String, 'Task to be in in each environment')\n+    parser.on('-e', '--envs-file [ENVS]', String, 'Path to environments JSON file.')\n+  end.parse!({into: options})\n+\n+  #Now raise an exception if we have not found a required arg\n+  raise OptionParser::MissingArgument.new('task') if options[:task].nil?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUyNTEzMw=="}, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY3MzY3Nw==", "bodyText": "There are a ton of ways to do it, but this looks like the least bad. I don't know why nobody has added that in 10+ years.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384673677", "createdAt": "2020-02-26T18:15:29Z", "author": {"login": "jaycarlton"}, "path": "ops/ruby/devops-framework/devops.rb", "diffHunk": "@@ -0,0 +1,43 @@\n+require 'logger'\n+require 'optparse'\n+require_relative 'tasks/count_monitoring_assets.rb'\n+\n+# Single entry point for the devops framework. This is the only true Ruby Script file. The\n+# rest are classes.\n+#\n+# Based on input commands, this script delegates the work to  a task class, which should not need to\n+# know anything about environment variables such as ARGV, the run directory,  etc. Tasks should also avoid\n+# global variables like `logger`, so that we can control logging preferences from the top level.\n+\n+# TODO(jaycarlton): work out a scheme for task-specific options (i.e. subcommands)\n+def parse_options\n+  options = {}\n+  OptionParser.new do |parser|\n+    parser.on('-t', '--task [TASK]', String, 'Task to be in in each environment')\n+    parser.on('-e', '--envs-file [ENVS]', String, 'Path to environments JSON file.')\n+  end.parse!({into: options})\n+\n+  #Now raise an exception if we have not found a required arg\n+  raise OptionParser::MissingArgument.new('task') if options[:task].nil?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUyNTEzMw=="}, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDg2NzA0OnYy", "diffSide": "RIGHT", "path": "ops/ruby/devops-framework/tasks/lib/gcp_environment_info.rb", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTozMjowNlrOFtwnZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTozMjowNlrOFtwnZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUyNjc1Nw==", "bodyText": "rm", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r383526757", "createdAt": "2020-02-24T21:32:06Z", "author": {"login": "jmthibault79"}, "path": "ops/ruby/devops-framework/tasks/lib/gcp_environment_info.rb", "diffHunk": "@@ -0,0 +1,32 @@\n+class GcpEnvironmentInfo\n+  # def initialize(short_name, project_id, project_number, service_account)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDg5MTE1OnYy", "diffSide": "RIGHT", "path": "ops/ruby/devops-framework/tasks/count_monitoring_assets.rb", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTo0MDoxNVrOFtw2bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzowNDozOVrOFuqslQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzMDYwNQ==", "bodyText": "sp: environments", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r383530605", "createdAt": "2020-02-24T21:40:15Z", "author": {"login": "jmthibault79"}, "path": "ops/ruby/devops-framework/tasks/count_monitoring_assets.rb", "diffHunk": "@@ -0,0 +1,66 @@\n+require \"google/cloud/monitoring\"\n+require 'logger'\n+\n+require_relative \"./lib/service_account_manager\"\n+require_relative './lib/gcp_environment_visitor'\n+\n+CUSTOM_METRIC_FILTER = \"metric.type = starts_with(\\\"custom.googleapis.com/\\\")\"\n+LOGS_BASED_METRIC_FILTER = \"metric.type = starts_with(\\\"logging.googleapis.com/\\\")\"\n+USER_LOGS_BASED_METRIC_FILTER = \"metric.type = starts_with(\\\"logging.googleapis.com/user/\\\")\"\n+\n+logger = Logger.new(STDOUT)\n+class MonitoringAssets\n+  def initialize(envrionments_path_json, logger = Logger.new(STDOUT))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3ODM1Nw==", "bodyText": "Thanks. The spelling should get better if I can keep for IJ from marking everything as suspicious.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384478357", "createdAt": "2020-02-26T13:04:39Z", "author": {"login": "jaycarlton"}, "path": "ops/ruby/devops-framework/tasks/count_monitoring_assets.rb", "diffHunk": "@@ -0,0 +1,66 @@\n+require \"google/cloud/monitoring\"\n+require 'logger'\n+\n+require_relative \"./lib/service_account_manager\"\n+require_relative './lib/gcp_environment_visitor'\n+\n+CUSTOM_METRIC_FILTER = \"metric.type = starts_with(\\\"custom.googleapis.com/\\\")\"\n+LOGS_BASED_METRIC_FILTER = \"metric.type = starts_with(\\\"logging.googleapis.com/\\\")\"\n+USER_LOGS_BASED_METRIC_FILTER = \"metric.type = starts_with(\\\"logging.googleapis.com/user/\\\")\"\n+\n+logger = Logger.new(STDOUT)\n+class MonitoringAssets\n+  def initialize(envrionments_path_json, logger = Logger.new(STDOUT))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzMDYwNQ=="}, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDg5NzQ1OnYy", "diffSide": "RIGHT", "path": "ops/ruby/devops-framework/tasks/count_monitoring_assets.rb", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTo0MjowNlrOFtw6Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTo0MjowNlrOFtw6Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzMTUzMQ==", "bodyText": "sp: \"baed\" a few times in this file", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r383531531", "createdAt": "2020-02-24T21:42:06Z", "author": {"login": "jmthibault79"}, "path": "ops/ruby/devops-framework/tasks/count_monitoring_assets.rb", "diffHunk": "@@ -0,0 +1,66 @@\n+require \"google/cloud/monitoring\"\n+require 'logger'\n+\n+require_relative \"./lib/service_account_manager\"\n+require_relative './lib/gcp_environment_visitor'\n+\n+CUSTOM_METRIC_FILTER = \"metric.type = starts_with(\\\"custom.googleapis.com/\\\")\"\n+LOGS_BASED_METRIC_FILTER = \"metric.type = starts_with(\\\"logging.googleapis.com/\\\")\"\n+USER_LOGS_BASED_METRIC_FILTER = \"metric.type = starts_with(\\\"logging.googleapis.com/user/\\\")\"\n+\n+logger = Logger.new(STDOUT)\n+class MonitoringAssets\n+  def initialize(envrionments_path_json, logger = Logger.new(STDOUT))\n+    @visitor = GcpEnvironmentVisitor.new(envrionments_path_json, logger)\n+    @logger = logger\n+  end\n+\n+  # Demonstrate a simple usage of the AouEnvironmentVisitor with a few read-only operations\n+  # on monitoring things in all the environments.\n+  def inventory\n+    @visitor.visit do |env|\n+      counts  = {}\n+      metric_client = Google::Cloud::Monitoring::Metric.new\n+      metric_project_path = Google::Cloud::Monitoring::V3::MetricServiceClient.project_path(env.project_id)\n+\n+      resources = metric_client.list_monitored_resource_descriptors(metric_project_path)\n+      @logger.info(\"found #{resources.count} monitored resources\")\n+      counts['monitored_resources'] = resources.count\n+\n+      all_metrics = metric_client.list_metric_descriptors(metric_project_path)\n+      counts['metric_descriptors'] =  all_metrics.count\n+      @logger.info(\"found #{all_metrics.count} metric descriptors\")\n+\n+      custom_metrics = metric_client.list_metric_descriptors(metric_project_path, {filter: CUSTOM_METRIC_FILTER})\n+      @logger.info(\"found  #{custom_metrics.count} custom metrics\")\n+      counts['custom_metrics'] = custom_metrics.count\n+      custom_metrics.each do |metric|\n+        @logger.info(\"\\t#{metric.name}: #{metric.description}\")\n+      end\n+\n+      user_logs_based_metrics = metric_client.list_metric_descriptors(metric_project_path, {filter: USER_LOGS_BASED_METRIC_FILTER})\n+      counts['user_logs_based_metrics'] = user_logs_based_metrics.count\n+      @logger.info(\"found  #{user_logs_based_metrics.count} user-defined  logs-baed metrics\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDkwODk5OnYy", "diffSide": "RIGHT", "path": "ops/ruby/devops-framework/tasks/lib/service_account_manager.rb", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTo0NTo0M1rOFtxBFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjo1OTo1NFrOFty-bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzMzMzNQ==", "bodyText": "what an interesting pattern", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r383533335", "createdAt": "2020-02-24T21:45:43Z", "author": {"login": "jmthibault79"}, "path": "ops/ruby/devops-framework/tasks/lib/service_account_manager.rb", "diffHunk": "@@ -0,0 +1,81 @@\n+require \"json\"\n+require 'tmpdir'\n+require 'fileutils'\n+require 'logger'\n+\n+# Entering a service account context ensures that a keyfile exists at the given\n+# path for the given service account, and that GOOGLE_APPLICATION_CREDENTIALS is\n+# pointing to it (for application default credentials). Creates this SA key and\n+# file if necessary, and destroys it when leaving the context.\n+#\n+# Nested service account contexts are not supported.\n+class ServiceAccountManager\n+\n+  SERVICE_ACCOUNT_KEY_FILE_NAME = \"sa-key.json\"\n+\n+  def initialize(project, service_account, logger = Logger.new(STDOUT))\n+    @logger = logger\n+    @project = project\n+    @service_account = service_account\n+  end\n+\n+  attr_reader :project\n+  attr_reader :service_account\n+  attr_reader :credentials_path\n+\n+  def run()\n+    @logger.info(\"service_account = #{@service_account}\")\n+    credentials_path = create_credentials_file\n+\n+    @logger.info(\"Setting environment variable GOOGLE_APPLICATION_CREDENTIALS to #{credentials_path}\")\n+    ENV[\"GOOGLE_APPLICATION_CREDENTIALS\"] = credentials_path\n+\n+    begin\n+      yield self", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NTQyMA==", "bodyText": "Yeah, this was the first language I tried to use professionally in like 2007, and it was the wrong choice for me at the time. I couldn't wrap my head around lambdas until years later, and Ruby has half a dozen ways of doing things like this.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r383565420", "createdAt": "2020-02-24T22:59:54Z", "author": {"login": "jaycarlton"}, "path": "ops/ruby/devops-framework/tasks/lib/service_account_manager.rb", "diffHunk": "@@ -0,0 +1,81 @@\n+require \"json\"\n+require 'tmpdir'\n+require 'fileutils'\n+require 'logger'\n+\n+# Entering a service account context ensures that a keyfile exists at the given\n+# path for the given service account, and that GOOGLE_APPLICATION_CREDENTIALS is\n+# pointing to it (for application default credentials). Creates this SA key and\n+# file if necessary, and destroys it when leaving the context.\n+#\n+# Nested service account contexts are not supported.\n+class ServiceAccountManager\n+\n+  SERVICE_ACCOUNT_KEY_FILE_NAME = \"sa-key.json\"\n+\n+  def initialize(project, service_account, logger = Logger.new(STDOUT))\n+    @logger = logger\n+    @project = project\n+    @service_account = service_account\n+  end\n+\n+  attr_reader :project\n+  attr_reader :service_account\n+  attr_reader :credentials_path\n+\n+  def run()\n+    @logger.info(\"service_account = #{@service_account}\")\n+    credentials_path = create_credentials_file\n+\n+    @logger.info(\"Setting environment variable GOOGLE_APPLICATION_CREDENTIALS to #{credentials_path}\")\n+    ENV[\"GOOGLE_APPLICATION_CREDENTIALS\"] = credentials_path\n+\n+    begin\n+      yield self", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzMzMzNQ=="}, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTQ1Mjc4OnYy", "diffSide": "RIGHT", "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTo1ODoxMVrOFt2PNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoyMTo1MlrOFuydcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxODg3MA==", "bodyText": "First attempt: you don't have permission to write to your gems folder\nSecond attempt: install ruby via Homebrew and update paths\nERROR:  Error installing google-cloud-monitoring:\n        The last version of grpc (~> 1.24) to support your Ruby & RubyGems was 1.27.0. Try installing it with `gem install grpc -v 1.27.0` and then running the current command again\n        grpc requires Ruby version >= 2.3, < 2.7.dev. The current ruby version is 2.7.0.0.\n\n$ ruby --version\nruby 2.7.0p0 (2019-12-25 revision 647ee6f091) [x86_64-darwin18]\n\n$ gem install grpc -v 1.27.0\nERROR:  Error installing grpc:\n        The last version of grpc (= 1.27.0) to support your Ruby & RubyGems was 1.27.0. Try installing it with `gem install grpc -v 1.27.0`\n        grpc requires Ruby version >= 2.3, < 2.7.dev. The current ruby version is 2.7.0.0.\n\nThird attempt: downgrade Homebrew ruby to 2.6 ... nope.  not available!  2.5 then.\n$ brew install ruby@2.5\n\nupdate my PATH again\n$ ruby --version\nruby 2.5.5p157 (2019-03-15 revision 67260) [x86_64-darwin18]\n$ gem install google-cloud-monitoring\n\nSuccess, finally.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r383618870", "createdAt": "2020-02-25T01:58:11Z", "author": {"login": "jmthibault79"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are\n+taken in a traceable, repeatable, and consistent way. It operates by  communicating to Google Cloud Platform\n+directly, independently of the existing build, operations, and deployment pipeline(s).\n+\n+## Usage\n+The entry point to all functionality is `devops.rb`, which provides command line and environment\n+loading and dispatches to Task classes (not scripts) that do the real work.\n+`./devops.rb  -t <task_name> -e <env_file> --task-option-1 value1`\n+\n+There is also a dynamically-generated help file from the descriptions given in the options.\n+```\n+$ ruby ./devops.rb  --help\n+Usage: devops [options]\n+    -t, --task [TASK]                Task to be in in each environment\n+    -e, --envs-file [ENVS_FILE]      Path to environments JSON file.\n+```\n+\n+##  Installation\n+We need a newish version of Ruby. I'm running 2.6.5 as of this writing, but haven't gone\n+back and tested with older versions. We also currently need the `gcloud` tools and an account with\n+sufficient privilege account to create service account tokens.\n+\n+Additionally, you'll need to install a gem or two. Right now, it's\n+\n+`gem install google-cloud-monitoring` for the monitoring library", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2NDkyOQ==", "bodyText": "The command given here also failed. This worked for me:\ngem install --user google-cloud-monitoring\n\nWe should probably use a Gemfile if we're going to start requiring gem installation, rather than trying to keep this README up to date.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384064929", "createdAt": "2020-02-25T19:05:22Z", "author": {"login": "calbach"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are\n+taken in a traceable, repeatable, and consistent way. It operates by  communicating to Google Cloud Platform\n+directly, independently of the existing build, operations, and deployment pipeline(s).\n+\n+## Usage\n+The entry point to all functionality is `devops.rb`, which provides command line and environment\n+loading and dispatches to Task classes (not scripts) that do the real work.\n+`./devops.rb  -t <task_name> -e <env_file> --task-option-1 value1`\n+\n+There is also a dynamically-generated help file from the descriptions given in the options.\n+```\n+$ ruby ./devops.rb  --help\n+Usage: devops [options]\n+    -t, --task [TASK]                Task to be in in each environment\n+    -e, --envs-file [ENVS_FILE]      Path to environments JSON file.\n+```\n+\n+##  Installation\n+We need a newish version of Ruby. I'm running 2.6.5 as of this writing, but haven't gone\n+back and tested with older versions. We also currently need the `gcloud` tools and an account with\n+sufficient privilege account to create service account tokens.\n+\n+Additionally, you'll need to install a gem or two. Right now, it's\n+\n+`gem install google-cloud-monitoring` for the monitoring library", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxODg3MA=="}, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3NjMyNQ==", "bodyText": "Sorry about that. We still don't have official instructions for installing and configuring Ruby. Filed. https://precisionmedicineinitiative.atlassian.net/browse/RW-4511 to make this better.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384476325", "createdAt": "2020-02-26T13:00:32Z", "author": {"login": "jaycarlton"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are\n+taken in a traceable, repeatable, and consistent way. It operates by  communicating to Google Cloud Platform\n+directly, independently of the existing build, operations, and deployment pipeline(s).\n+\n+## Usage\n+The entry point to all functionality is `devops.rb`, which provides command line and environment\n+loading and dispatches to Task classes (not scripts) that do the real work.\n+`./devops.rb  -t <task_name> -e <env_file> --task-option-1 value1`\n+\n+There is also a dynamically-generated help file from the descriptions given in the options.\n+```\n+$ ruby ./devops.rb  --help\n+Usage: devops [options]\n+    -t, --task [TASK]                Task to be in in each environment\n+    -e, --envs-file [ENVS_FILE]      Path to environments JSON file.\n+```\n+\n+##  Installation\n+We need a newish version of Ruby. I'm running 2.6.5 as of this writing, but haven't gone\n+back and tested with older versions. We also currently need the `gcloud` tools and an account with\n+sufficient privilege account to create service account tokens.\n+\n+Additionally, you'll need to install a gem or two. Right now, it's\n+\n+`gem install google-cloud-monitoring` for the monitoring library", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxODg3MA=="}, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4ODM1Nw==", "bodyText": "Filed https://precisionmedicineinitiative.atlassian.net/browse/RW-4512 for gemfile. Hopefully it goes quickly, but I don't want to add scope to this PR as there's another one branched off it that's almost ready to go.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384488357", "createdAt": "2020-02-26T13:24:19Z", "author": {"login": "jaycarlton"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are\n+taken in a traceable, repeatable, and consistent way. It operates by  communicating to Google Cloud Platform\n+directly, independently of the existing build, operations, and deployment pipeline(s).\n+\n+## Usage\n+The entry point to all functionality is `devops.rb`, which provides command line and environment\n+loading and dispatches to Task classes (not scripts) that do the real work.\n+`./devops.rb  -t <task_name> -e <env_file> --task-option-1 value1`\n+\n+There is also a dynamically-generated help file from the descriptions given in the options.\n+```\n+$ ruby ./devops.rb  --help\n+Usage: devops [options]\n+    -t, --task [TASK]                Task to be in in each environment\n+    -e, --envs-file [ENVS_FILE]      Path to environments JSON file.\n+```\n+\n+##  Installation\n+We need a newish version of Ruby. I'm running 2.6.5 as of this writing, but haven't gone\n+back and tested with older versions. We also currently need the `gcloud` tools and an account with\n+sufficient privilege account to create service account tokens.\n+\n+Additionally, you'll need to install a gem or two. Right now, it's\n+\n+`gem install google-cloud-monitoring` for the monitoring library", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxODg3MA=="}, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4MjMzMQ==", "bodyText": "Rather than these approaches, my strong preference would be to dockerize this so modifying your local Ruby install is not necessary.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384582331", "createdAt": "2020-02-26T15:49:37Z", "author": {"login": "jmthibault79"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are\n+taken in a traceable, repeatable, and consistent way. It operates by  communicating to Google Cloud Platform\n+directly, independently of the existing build, operations, and deployment pipeline(s).\n+\n+## Usage\n+The entry point to all functionality is `devops.rb`, which provides command line and environment\n+loading and dispatches to Task classes (not scripts) that do the real work.\n+`./devops.rb  -t <task_name> -e <env_file> --task-option-1 value1`\n+\n+There is also a dynamically-generated help file from the descriptions given in the options.\n+```\n+$ ruby ./devops.rb  --help\n+Usage: devops [options]\n+    -t, --task [TASK]                Task to be in in each environment\n+    -e, --envs-file [ENVS_FILE]      Path to environments JSON file.\n+```\n+\n+##  Installation\n+We need a newish version of Ruby. I'm running 2.6.5 as of this writing, but haven't gone\n+back and tested with older versions. We also currently need the `gcloud` tools and an account with\n+sufficient privilege account to create service account tokens.\n+\n+Additionally, you'll need to install a gem or two. Right now, it's\n+\n+`gem install google-cloud-monitoring` for the monitoring library", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxODg3MA=="}, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwNTU1Mw==", "bodyText": "That's interesting. we can do a gemfile first I think. I don't know if I have a dockerization budget; I'm barely going to get away with doing this much.\nWe probably need to document local ruby anyway for build stuff.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384605553", "createdAt": "2020-02-26T16:21:52Z", "author": {"login": "jaycarlton"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are\n+taken in a traceable, repeatable, and consistent way. It operates by  communicating to Google Cloud Platform\n+directly, independently of the existing build, operations, and deployment pipeline(s).\n+\n+## Usage\n+The entry point to all functionality is `devops.rb`, which provides command line and environment\n+loading and dispatches to Task classes (not scripts) that do the real work.\n+`./devops.rb  -t <task_name> -e <env_file> --task-option-1 value1`\n+\n+There is also a dynamically-generated help file from the descriptions given in the options.\n+```\n+$ ruby ./devops.rb  --help\n+Usage: devops [options]\n+    -t, --task [TASK]                Task to be in in each environment\n+    -e, --envs-file [ENVS_FILE]      Path to environments JSON file.\n+```\n+\n+##  Installation\n+We need a newish version of Ruby. I'm running 2.6.5 as of this writing, but haven't gone\n+back and tested with older versions. We also currently need the `gcloud` tools and an account with\n+sufficient privilege account to create service account tokens.\n+\n+Additionally, you'll need to install a gem or two. Right now, it's\n+\n+`gem install google-cloud-monitoring` for the monitoring library", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxODg3MA=="}, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODMxNzIyOnYy", "diffSide": "RIGHT", "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTowMTo1MVrOFuRWjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzowNzoyNlrOFuqx7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2MzExNg==", "bodyText": "nit: Should this file just be called README.md? the file path looks a bit redundant", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384063116", "createdAt": "2020-02-25T19:01:51Z", "author": {"login": "calbach"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3OTcyNA==", "bodyText": "That sounds good for docs that are aimed at an obvious thing in the path. We have (and will have more) cross-cutting topics that don't fit that pattern, such as stuff split off the top README.md.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384479724", "createdAt": "2020-02-26T13:07:26Z", "author": {"login": "jaycarlton"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2MzExNg=="}, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODMzMTExOnYy", "diffSide": "RIGHT", "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTowNjoxMVrOFuRfUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjozNjowM1rOFu-7RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2NTM2Mg==", "bodyText": "What does \"externally\" mean? I'm not sure I understand what you're intending to use this for which you couldn't use the existing framework for.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384065362", "createdAt": "2020-02-25T19:06:11Z", "author": {"login": "calbach"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are\n+taken in a traceable, repeatable, and consistent way. It operates by  communicating to Google Cloud Platform\n+directly, independently of the existing build, operations, and deployment pipeline(s).\n+\n+## Usage\n+The entry point to all functionality is `devops.rb`, which provides command line and environment\n+loading and dispatches to Task classes (not scripts) that do the real work.\n+`./devops.rb  -t <task_name> -e <env_file> --task-option-1 value1`\n+\n+There is also a dynamically-generated help file from the descriptions given in the options.\n+```\n+$ ruby ./devops.rb  --help\n+Usage: devops [options]\n+    -t, --task [TASK]                Task to be in in each environment\n+    -e, --envs-file [ENVS_FILE]      Path to environments JSON file.\n+```\n+\n+##  Installation\n+We need a newish version of Ruby. I'm running 2.6.5 as of this writing, but haven't gone\n+back and tested with older versions. We also currently need the `gcloud` tools and an account with\n+sufficient privilege account to create service account tokens.\n+\n+Additionally, you'll need to install a gem or two. Right now, it's\n+\n+`gem install google-cloud-monitoring` for the monitoring library\n+\n+## Design Decisions\n+I should justify some of the  directions I've taken here, since they're departures to varying\n+degrees from how we've traditionally done things.\n+\n+### A New Ruby Application\n+I wrestled a bit with this actually. I haven't seen anything that Ruby can do that Python can't,\n+for example, and in general the latter language has much more documentation, a more active\n+community, and many more programmers. Ultimately, it would've  been a big reset to change\n+code bases and languages all at once, so I'll continue to write the first  version in Ruby until\n+I get ~~an excuse~~ a requirement to port to Python. One such requirement could come in the form\n+of other teams we depend  on and wish to integrate tightly with using some other language.\n+\n+### Task Classes Instead of Scripts\n+I  decided to make the tasks full  Ruby classes instead of stand-alone scripts for a couple  of reasons.\n+First, it ensures that we can minimize usage of global state (which can get away from you easily\n+in Ruby). Second, we can now configure things  like log levels in one place.\n+\n+### Independence of All Things All of Us\n+There are no dependencies on any AoU application or build/release code, or anything in\n+the utils repository. This allows us to avoid refactoring the legacy Ruby stack, and ensures\n+that this framework can be reused externally. Some notably absent things:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ5MTQ3Mw==", "bodyText": "External means anyone who isn't the AoU Workbench team. I intend for this to work in any GCP environment that has similar needs to what we need. Keeping that separation also means we'll never have to wait on a workbench release in order to make improvements to our devops tools. (We may adopt some other form of versioning discipline, especially for tasks that make changes to the system config).", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384491473", "createdAt": "2020-02-26T13:30:05Z", "author": {"login": "jaycarlton"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are\n+taken in a traceable, repeatable, and consistent way. It operates by  communicating to Google Cloud Platform\n+directly, independently of the existing build, operations, and deployment pipeline(s).\n+\n+## Usage\n+The entry point to all functionality is `devops.rb`, which provides command line and environment\n+loading and dispatches to Task classes (not scripts) that do the real work.\n+`./devops.rb  -t <task_name> -e <env_file> --task-option-1 value1`\n+\n+There is also a dynamically-generated help file from the descriptions given in the options.\n+```\n+$ ruby ./devops.rb  --help\n+Usage: devops [options]\n+    -t, --task [TASK]                Task to be in in each environment\n+    -e, --envs-file [ENVS_FILE]      Path to environments JSON file.\n+```\n+\n+##  Installation\n+We need a newish version of Ruby. I'm running 2.6.5 as of this writing, but haven't gone\n+back and tested with older versions. We also currently need the `gcloud` tools and an account with\n+sufficient privilege account to create service account tokens.\n+\n+Additionally, you'll need to install a gem or two. Right now, it's\n+\n+`gem install google-cloud-monitoring` for the monitoring library\n+\n+## Design Decisions\n+I should justify some of the  directions I've taken here, since they're departures to varying\n+degrees from how we've traditionally done things.\n+\n+### A New Ruby Application\n+I wrestled a bit with this actually. I haven't seen anything that Ruby can do that Python can't,\n+for example, and in general the latter language has much more documentation, a more active\n+community, and many more programmers. Ultimately, it would've  been a big reset to change\n+code bases and languages all at once, so I'll continue to write the first  version in Ruby until\n+I get ~~an excuse~~ a requirement to port to Python. One such requirement could come in the form\n+of other teams we depend  on and wish to integrate tightly with using some other language.\n+\n+### Task Classes Instead of Scripts\n+I  decided to make the tasks full  Ruby classes instead of stand-alone scripts for a couple  of reasons.\n+First, it ensures that we can minimize usage of global state (which can get away from you easily\n+in Ruby). Second, we can now configure things  like log levels in one place.\n+\n+### Independence of All Things All of Us\n+There are no dependencies on any AoU application or build/release code, or anything in\n+the utils repository. This allows us to avoid refactoring the legacy Ruby stack, and ensures\n+that this framework can be reused externally. Some notably absent things:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2NTM2Mg=="}, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwOTc5Ng==", "bodyText": "I think there may be some conflating of different things here. The idea that we would need to \"wait on a workbench release in order to make improvements to our devops tools\" doesn't make sense. Presumably this idea originates from how the deploy tooling works; this has no bearing on oneoff devops tool executions via project.rb today.\nLets discuss tomorrow", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384809796", "createdAt": "2020-02-26T22:36:03Z", "author": {"login": "calbach"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are\n+taken in a traceable, repeatable, and consistent way. It operates by  communicating to Google Cloud Platform\n+directly, independently of the existing build, operations, and deployment pipeline(s).\n+\n+## Usage\n+The entry point to all functionality is `devops.rb`, which provides command line and environment\n+loading and dispatches to Task classes (not scripts) that do the real work.\n+`./devops.rb  -t <task_name> -e <env_file> --task-option-1 value1`\n+\n+There is also a dynamically-generated help file from the descriptions given in the options.\n+```\n+$ ruby ./devops.rb  --help\n+Usage: devops [options]\n+    -t, --task [TASK]                Task to be in in each environment\n+    -e, --envs-file [ENVS_FILE]      Path to environments JSON file.\n+```\n+\n+##  Installation\n+We need a newish version of Ruby. I'm running 2.6.5 as of this writing, but haven't gone\n+back and tested with older versions. We also currently need the `gcloud` tools and an account with\n+sufficient privilege account to create service account tokens.\n+\n+Additionally, you'll need to install a gem or two. Right now, it's\n+\n+`gem install google-cloud-monitoring` for the monitoring library\n+\n+## Design Decisions\n+I should justify some of the  directions I've taken here, since they're departures to varying\n+degrees from how we've traditionally done things.\n+\n+### A New Ruby Application\n+I wrestled a bit with this actually. I haven't seen anything that Ruby can do that Python can't,\n+for example, and in general the latter language has much more documentation, a more active\n+community, and many more programmers. Ultimately, it would've  been a big reset to change\n+code bases and languages all at once, so I'll continue to write the first  version in Ruby until\n+I get ~~an excuse~~ a requirement to port to Python. One such requirement could come in the form\n+of other teams we depend  on and wish to integrate tightly with using some other language.\n+\n+### Task Classes Instead of Scripts\n+I  decided to make the tasks full  Ruby classes instead of stand-alone scripts for a couple  of reasons.\n+First, it ensures that we can minimize usage of global state (which can get away from you easily\n+in Ruby). Second, we can now configure things  like log levels in one place.\n+\n+### Independence of All Things All of Us\n+There are no dependencies on any AoU application or build/release code, or anything in\n+the utils repository. This allows us to avoid refactoring the legacy Ruby stack, and ensures\n+that this framework can be reused externally. Some notably absent things:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2NTM2Mg=="}, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODMzNzk2OnYy", "diffSide": "RIGHT", "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTowODoxOVrOFuRjpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoxMDoxMFrOFuq3BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2NjQ2OQ==", "bodyText": "How does this relate to the workbench-devops repo?", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384066469", "createdAt": "2020-02-25T19:08:19Z", "author": {"login": "calbach"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4MTAyOQ==", "bodyText": "workbench-devops ideally contains config information, tool inputs, and possibly docs that don't belong in a reusable, open source application. I'm hoping we can make these new tools available to either Terra or other DRC teams, as well as anyone using GCP, and even if our own project details aren't strictly private, including them here would clutter things.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384481029", "createdAt": "2020-02-26T13:10:10Z", "author": {"login": "jaycarlton"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2NjQ2OQ=="}, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODMzODk4OnYy", "diffSide": "RIGHT", "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTowODozNFrOFuRkOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoxMjo0M1rOFuq8Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2NjYxNw==", "bodyText": "Is the proposal to move entirely to this new framework, including for our development scripts?", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384066617", "createdAt": "2020-02-25T19:08:34Z", "author": {"login": "calbach"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4MjM1MA==", "bodyText": "I have not made such a proposal, for a couple of reasons. The first is something @gjuggler brought up, which is a general principle to keep build and ops tooling separated. This way the devops stuff can move faster. The second reason is that it's really late in the game to start straightening out some of the build tooling to make it more generic, independent and flexible.\nIf we find we have a clean set of things we want to share (such as a common command/sub-command CLI), then that's another conversation. One thing to look into there is Python CLI.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384482350", "createdAt": "2020-02-26T13:12:43Z", "author": {"login": "jaycarlton"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2NjYxNw=="}, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODM0MzQ5OnYy", "diffSide": "RIGHT", "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToxMDowMlrOFuRnKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoxNToxM1rOFurBKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2NzM2OQ==", "bodyText": "Repeatability and consistency are mentioned here, yet a large divergence between this and the previous system is the lack of docker usage. Was docker considered?", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384067369", "createdAt": "2020-02-25T19:10:02Z", "author": {"login": "calbach"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are\n+taken in a traceable, repeatable, and consistent way. It operates by  communicating to Google Cloud Platform", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4MzYyNA==", "bodyText": "Do you mean, should I install all of this into a container and drive that? I hadn't considered that, but off the top of my head it seems like overkill. It was strongly hinted that I should write the first cut in Ruby.\nIf you mean, should I be running things inside containers, I'll cross that bridge when I come to it. Right now all my use cases are for configuring and exploring things in GCP across several projects, and keeping official operational configuration as consistent as possible across all of them.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384483624", "createdAt": "2020-02-26T13:15:13Z", "author": {"login": "jaycarlton"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are\n+taken in a traceable, repeatable, and consistent way. It operates by  communicating to Google Cloud Platform", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2NzM2OQ=="}, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODM2MjMzOnYy", "diffSide": "RIGHT", "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToxNTo1M1rOFuRy3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoyODowMlrOFurbgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MDM2Nw==", "bodyText": "Was there some kind of consensus that the existing utils stuff is now legacy? Or is this PR the proposal to make this canon?", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384070367", "createdAt": "2020-02-25T19:15:53Z", "author": {"login": "calbach"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are\n+taken in a traceable, repeatable, and consistent way. It operates by  communicating to Google Cloud Platform\n+directly, independently of the existing build, operations, and deployment pipeline(s).\n+\n+## Usage\n+The entry point to all functionality is `devops.rb`, which provides command line and environment\n+loading and dispatches to Task classes (not scripts) that do the real work.\n+`./devops.rb  -t <task_name> -e <env_file> --task-option-1 value1`\n+\n+There is also a dynamically-generated help file from the descriptions given in the options.\n+```\n+$ ruby ./devops.rb  --help\n+Usage: devops [options]\n+    -t, --task [TASK]                Task to be in in each environment\n+    -e, --envs-file [ENVS_FILE]      Path to environments JSON file.\n+```\n+\n+##  Installation\n+We need a newish version of Ruby. I'm running 2.6.5 as of this writing, but haven't gone\n+back and tested with older versions. We also currently need the `gcloud` tools and an account with\n+sufficient privilege account to create service account tokens.\n+\n+Additionally, you'll need to install a gem or two. Right now, it's\n+\n+`gem install google-cloud-monitoring` for the monitoring library\n+\n+## Design Decisions\n+I should justify some of the  directions I've taken here, since they're departures to varying\n+degrees from how we've traditionally done things.\n+\n+### A New Ruby Application\n+I wrestled a bit with this actually. I haven't seen anything that Ruby can do that Python can't,\n+for example, and in general the latter language has much more documentation, a more active\n+community, and many more programmers. Ultimately, it would've  been a big reset to change\n+code bases and languages all at once, so I'll continue to write the first  version in Ruby until\n+I get ~~an excuse~~ a requirement to port to Python. One such requirement could come in the form\n+of other teams we depend  on and wish to integrate tightly with using some other language.\n+\n+### Task Classes Instead of Scripts\n+I  decided to make the tasks full  Ruby classes instead of stand-alone scripts for a couple  of reasons.\n+First, it ensures that we can minimize usage of global state (which can get away from you easily\n+in Ruby). Second, we can now configure things  like log levels in one place.\n+\n+### Independence of All Things All of Us\n+There are no dependencies on any AoU application or build/release code, or anything in\n+the utils repository. This allows us to avoid refactoring the legacy Ruby stack, and ensures", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ5MDM3MA==", "bodyText": "I got the general sense that extending the existing ruby/gradle codebase needs more work than I have the charter to do right now, regardless of my feelings on what I might do differently.\nAs for the utils dir, I started from it, but realized it was pulling in lots of things I didn't need or understand, mostly ~3 years old and largely untouched since then. There may be a case for repackaging some of it in more granular ways. I also didn't want to fiddle with a git submodule, and as I've said, I wan this. whole project to be as standard and reusable as possible.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384490370", "createdAt": "2020-02-26T13:28:02Z", "author": {"login": "jaycarlton"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are\n+taken in a traceable, repeatable, and consistent way. It operates by  communicating to Google Cloud Platform\n+directly, independently of the existing build, operations, and deployment pipeline(s).\n+\n+## Usage\n+The entry point to all functionality is `devops.rb`, which provides command line and environment\n+loading and dispatches to Task classes (not scripts) that do the real work.\n+`./devops.rb  -t <task_name> -e <env_file> --task-option-1 value1`\n+\n+There is also a dynamically-generated help file from the descriptions given in the options.\n+```\n+$ ruby ./devops.rb  --help\n+Usage: devops [options]\n+    -t, --task [TASK]                Task to be in in each environment\n+    -e, --envs-file [ENVS_FILE]      Path to environments JSON file.\n+```\n+\n+##  Installation\n+We need a newish version of Ruby. I'm running 2.6.5 as of this writing, but haven't gone\n+back and tested with older versions. We also currently need the `gcloud` tools and an account with\n+sufficient privilege account to create service account tokens.\n+\n+Additionally, you'll need to install a gem or two. Right now, it's\n+\n+`gem install google-cloud-monitoring` for the monitoring library\n+\n+## Design Decisions\n+I should justify some of the  directions I've taken here, since they're departures to varying\n+degrees from how we've traditionally done things.\n+\n+### A New Ruby Application\n+I wrestled a bit with this actually. I haven't seen anything that Ruby can do that Python can't,\n+for example, and in general the latter language has much more documentation, a more active\n+community, and many more programmers. Ultimately, it would've  been a big reset to change\n+code bases and languages all at once, so I'll continue to write the first  version in Ruby until\n+I get ~~an excuse~~ a requirement to port to Python. One such requirement could come in the form\n+of other teams we depend  on and wish to integrate tightly with using some other language.\n+\n+### Task Classes Instead of Scripts\n+I  decided to make the tasks full  Ruby classes instead of stand-alone scripts for a couple  of reasons.\n+First, it ensures that we can minimize usage of global state (which can get away from you easily\n+in Ruby). Second, we can now configure things  like log levels in one place.\n+\n+### Independence of All Things All of Us\n+There are no dependencies on any AoU application or build/release code, or anything in\n+the utils repository. This allows us to avoid refactoring the legacy Ruby stack, and ensures", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MDM2Nw=="}, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODM4MDY4OnYy", "diffSide": "RIGHT", "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToyMToyMFrOFuR-Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoyMDowMFrOFurK-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MzMwNw==", "bodyText": "I'd have a slight preference for a positional arg rather than a flag for a task/command name, especially if there will be alternate flags for subcommands. This is pretty typical for CLIs with subcommands.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384073307", "createdAt": "2020-02-25T19:21:20Z", "author": {"login": "calbach"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are\n+taken in a traceable, repeatable, and consistent way. It operates by  communicating to Google Cloud Platform\n+directly, independently of the existing build, operations, and deployment pipeline(s).\n+\n+## Usage\n+The entry point to all functionality is `devops.rb`, which provides command line and environment\n+loading and dispatches to Task classes (not scripts) that do the real work.\n+`./devops.rb  -t <task_name> -e <env_file> --task-option-1 value1`\n+\n+There is also a dynamically-generated help file from the descriptions given in the options.\n+```\n+$ ruby ./devops.rb  --help\n+Usage: devops [options]\n+    -t, --task [TASK]                Task to be in in each environment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4NjEzOA==", "bodyText": "Let me see if there's a way to do that with this system. At the moment, I don't have true subcommands, and in the next PR it's just a shared options hash that individual tasks can choose from. I don't want to over-think this piece just yet though.\nI'm trying to find the Python package we saw in that one meeting.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384486138", "createdAt": "2020-02-26T13:20:00Z", "author": {"login": "jaycarlton"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are\n+taken in a traceable, repeatable, and consistent way. It operates by  communicating to Google Cloud Platform\n+directly, independently of the existing build, operations, and deployment pipeline(s).\n+\n+## Usage\n+The entry point to all functionality is `devops.rb`, which provides command line and environment\n+loading and dispatches to Task classes (not scripts) that do the real work.\n+`./devops.rb  -t <task_name> -e <env_file> --task-option-1 value1`\n+\n+There is also a dynamically-generated help file from the descriptions given in the options.\n+```\n+$ ruby ./devops.rb  --help\n+Usage: devops [options]\n+    -t, --task [TASK]                Task to be in in each environment", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MzMwNw=="}, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODQwMjE2OnYy", "diffSide": "RIGHT", "path": "ops/ruby/devops-framework/tasks/count_monitoring_assets.rb", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToyNzozMFrOFuSLTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMToyNTo0N1rOFvhv0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3NjYyMA==", "bodyText": "Not to throw a wrench into things, but did you look at whether Terraform could work for applying these? https://www.terraform.io/docs/providers/google/r/monitoring_group.html\n(surface-level assessment as fine, there would be a lot of questions to answer here such as how we could run it and  how we'd do state tracking)", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384076620", "createdAt": "2020-02-25T19:27:30Z", "author": {"login": "calbach"}, "path": "ops/ruby/devops-framework/tasks/count_monitoring_assets.rb", "diffHunk": "@@ -0,0 +1,66 @@\n+require \"google/cloud/monitoring\"\n+require 'logger'\n+\n+require_relative \"./lib/service_account_manager\"\n+require_relative './lib/gcp_environment_visitor'\n+\n+CUSTOM_METRIC_FILTER = \"metric.type = starts_with(\\\"custom.googleapis.com/\\\")\"\n+LOGS_BASED_METRIC_FILTER = \"metric.type = starts_with(\\\"logging.googleapis.com/\\\")\"\n+USER_LOGS_BASED_METRIC_FILTER = \"metric.type = starts_with(\\\"logging.googleapis.com/user/\\\")\"\n+\n+logger = Logger.new(STDOUT)\n+class MonitoringAssets\n+  def initialize(envrionments_path_json, logger = Logger.new(STDOUT))\n+    @visitor = GcpEnvironmentVisitor.new(envrionments_path_json, logger)\n+    @logger = logger\n+  end\n+\n+  # Demonstrate a simple usage of the AouEnvironmentVisitor with a few read-only operations\n+  # on monitoring things in all the environments.\n+  def inventory\n+    @visitor.visit do |env|\n+      counts  = {}\n+      metric_client = Google::Cloud::Monitoring::Metric.new\n+      metric_project_path = Google::Cloud::Monitoring::V3::MetricServiceClient.project_path(env.project_id)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ5NjE1NQ==", "bodyText": "This inventory task is just listing stuff, so no writes should be happening.\nThat sounds like almost, but not quite, what a stackdriver MonitoredResource is. At the moment, OpenCensus stands up the custom metrics itself (for gauges), and we're faking the rest with logs-based metrics, which I don't see support for. If it has a rich template system, that would be worth looking at, but I'm wondering how much we can pick and choose things here.\nResource groups look nice, but we don't have a use for them yet from what I've seen.\nIf I add a dependency on terraform, am I restricting this toolkit to just Terra apps?\nOne ulterior motive. with starting. from the vanilla Stackdriver client is to continue to provide them more useful feedback.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384496155", "createdAt": "2020-02-26T13:38:37Z", "author": {"login": "jaycarlton"}, "path": "ops/ruby/devops-framework/tasks/count_monitoring_assets.rb", "diffHunk": "@@ -0,0 +1,66 @@\n+require \"google/cloud/monitoring\"\n+require 'logger'\n+\n+require_relative \"./lib/service_account_manager\"\n+require_relative './lib/gcp_environment_visitor'\n+\n+CUSTOM_METRIC_FILTER = \"metric.type = starts_with(\\\"custom.googleapis.com/\\\")\"\n+LOGS_BASED_METRIC_FILTER = \"metric.type = starts_with(\\\"logging.googleapis.com/\\\")\"\n+USER_LOGS_BASED_METRIC_FILTER = \"metric.type = starts_with(\\\"logging.googleapis.com/user/\\\")\"\n+\n+logger = Logger.new(STDOUT)\n+class MonitoringAssets\n+  def initialize(envrionments_path_json, logger = Logger.new(STDOUT))\n+    @visitor = GcpEnvironmentVisitor.new(envrionments_path_json, logger)\n+    @logger = logger\n+  end\n+\n+  # Demonstrate a simple usage of the AouEnvironmentVisitor with a few read-only operations\n+  # on monitoring things in all the environments.\n+  def inventory\n+    @visitor.visit do |env|\n+      counts  = {}\n+      metric_client = Google::Cloud::Monitoring::Metric.new\n+      metric_project_path = Google::Cloud::Monitoring::V3::MetricServiceClient.project_path(env.project_id)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3NjYyMA=="}, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MDMwNg==", "bodyText": "RE log-based metrics:\nThis? https://www.terraform.io/docs/providers/google/r/logging_metric.html\nRE Terraform:\nWhile Terra is technically a prefix of Terraform, and there are usages of Terraform by Terra, it is an entirely independent and unrelated tool: https://www.terraform.io .\nRE Feedback:\nI'm sure the Stackdriver team also has an interest in receiving feedback/usage on their Terraform provider.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r385380306", "createdAt": "2020-02-27T21:25:47Z", "author": {"login": "calbach"}, "path": "ops/ruby/devops-framework/tasks/count_monitoring_assets.rb", "diffHunk": "@@ -0,0 +1,66 @@\n+require \"google/cloud/monitoring\"\n+require 'logger'\n+\n+require_relative \"./lib/service_account_manager\"\n+require_relative './lib/gcp_environment_visitor'\n+\n+CUSTOM_METRIC_FILTER = \"metric.type = starts_with(\\\"custom.googleapis.com/\\\")\"\n+LOGS_BASED_METRIC_FILTER = \"metric.type = starts_with(\\\"logging.googleapis.com/\\\")\"\n+USER_LOGS_BASED_METRIC_FILTER = \"metric.type = starts_with(\\\"logging.googleapis.com/user/\\\")\"\n+\n+logger = Logger.new(STDOUT)\n+class MonitoringAssets\n+  def initialize(envrionments_path_json, logger = Logger.new(STDOUT))\n+    @visitor = GcpEnvironmentVisitor.new(envrionments_path_json, logger)\n+    @logger = logger\n+  end\n+\n+  # Demonstrate a simple usage of the AouEnvironmentVisitor with a few read-only operations\n+  # on monitoring things in all the environments.\n+  def inventory\n+    @visitor.visit do |env|\n+      counts  = {}\n+      metric_client = Google::Cloud::Monitoring::Metric.new\n+      metric_project_path = Google::Cloud::Monitoring::V3::MetricServiceClient.project_path(env.project_id)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3NjYyMA=="}, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODQwOTIzOnYy", "diffSide": "RIGHT", "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToyOTozMlrOFuSPrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoyMToxN1rOFurNhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3Nzc0MA==", "bodyText": "Is this effectively a per-environment config JSON file which is tracked in source?", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384077740", "createdAt": "2020-02-25T19:29:32Z", "author": {"login": "calbach"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are\n+taken in a traceable, repeatable, and consistent way. It operates by  communicating to Google Cloud Platform\n+directly, independently of the existing build, operations, and deployment pipeline(s).\n+\n+## Usage\n+The entry point to all functionality is `devops.rb`, which provides command line and environment\n+loading and dispatches to Task classes (not scripts) that do the real work.\n+`./devops.rb  -t <task_name> -e <env_file> --task-option-1 value1`\n+\n+There is also a dynamically-generated help file from the descriptions given in the options.\n+```\n+$ ruby ./devops.rb  --help\n+Usage: devops [options]\n+    -t, --task [TASK]                Task to be in in each environment\n+    -e, --envs-file [ENVS_FILE]      Path to environments JSON file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4Njc4OQ==", "bodyText": "This project doesn't know or depend on anything in our source tree. The input file can live anywhere, but I don't think it should go in this public repo.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r384486789", "createdAt": "2020-02-26T13:21:17Z", "author": {"login": "jaycarlton"}, "path": "ops/ruby/devops-framework/DEVOPS_FRAMEWORK.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# DevOps Framework\n+\n+## Purpose\n+This is a small but flexible framework for automating DevOps actions and ensuring they are\n+taken in a traceable, repeatable, and consistent way. It operates by  communicating to Google Cloud Platform\n+directly, independently of the existing build, operations, and deployment pipeline(s).\n+\n+## Usage\n+The entry point to all functionality is `devops.rb`, which provides command line and environment\n+loading and dispatches to Task classes (not scripts) that do the real work.\n+`./devops.rb  -t <task_name> -e <env_file> --task-option-1 value1`\n+\n+There is also a dynamically-generated help file from the descriptions given in the options.\n+```\n+$ ruby ./devops.rb  --help\n+Usage: devops [options]\n+    -t, --task [TASK]                Task to be in in each environment\n+    -e, --envs-file [ENVS_FILE]      Path to environments JSON file.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3Nzc0MA=="}, "originalCommit": {"oid": "91172c58e451a63ba540de6ee1fd23aa73198e84"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Njc1NjM0OnYy", "diffSide": "RIGHT", "path": "ops/ruby/devops-framework/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTozMjo1OVrOFvh9Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTozMjo1OVrOFvh9Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4Mzc4Mg==", "bodyText": "Please update this to reflect what we discussed today. My takeaway understanding was:\nThis is an experiment in an approach to a devops framework. The rationale for it coexisting with the other devops tooling is that the current framework has many issues, and it would be a large undertaking to refactor the entirety of the existing system in one go. At a later point we will evaluate whether we want to switch our existing devops tooling to follow this model, or merge these models, or move to a separate third (e.g. non-Ruby) model.", "url": "https://github.com/all-of-us/workbench/pull/3167#discussion_r385383782", "createdAt": "2020-02-27T21:32:59Z", "author": {"login": "calbach"}, "path": "ops/ruby/devops-framework/README.md", "diffHunk": "@@ -0,0 +1,108 @@\n+# DevOps Framework\n+\n+## Purpose", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "538dcfb8e73530e132cd73d34592363de6ea5294"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3384, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}