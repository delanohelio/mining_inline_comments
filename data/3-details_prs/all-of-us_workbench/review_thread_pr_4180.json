{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0OTM5OTM0", "number": 4180, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDozODozN1rOEurQFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjo0Mjo0M1rOEus7mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mzc4NTgyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDozODozN1rOHjPH1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjoxNTowMlrOHkjlwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwOTk3NQ==", "bodyText": "should this not be useState(masterMachineType)?", "url": "https://github.com/all-of-us/workbench/pull/4180#discussion_r506709975", "createdAt": "2020-10-16T20:38:37Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -40,97 +40,171 @@ const styles = reactStyles({\n   presetMenuItem: {\n     color: colors.primary,\n     fontSize: '14px'\n+  },\n+  formGrid: {\n+    display: 'grid',\n+    gridTemplateColumns: '1fr 1fr 1fr 1fr 3rem 1fr',\n+    gridGap: '1rem',\n+    alignItems: 'center'\n+  },\n+  workerConfigLabel: {\n+    fontWeight: 600,\n+    marginBottom: '0.5rem'\n   }\n });\n \n const defaultMachineType = allMachineTypes.find(({name}) => name === 'n1-standard-4');\n+enum ComputeType {\n+  standard = 'Standard VM',\n+  dataproc = 'Dataproc Cluster'\n+}\n \n export interface Props {\n   workspace: WorkspaceData;\n }\n \n-const MachineSelector = ({onChange, updatedMachine, masterMachineType}) => {\n-  const initialMachineType = fp.find(({name}) => name === masterMachineType, allMachineTypes) || defaultMachineType;\n+const MachineSelector = ({onChange, updatedMachine, machineType}) => {\n+  const initialMachineType = fp.find(({name}) => name === machineType, allMachineTypes) || defaultMachineType;\n   const {cpu, memory} = updatedMachine || initialMachineType;\n   const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n \n   return <Fragment>\n-    <div>\n-      <label htmlFor='runtime-cpu'\n-            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <label htmlFor='runtime-cpu' style={{marginRight: '.25rem'}}>CPUs</label>\n       <Dropdown id='runtime-cpu'\n-                options={fp.flow(\n-                  // Show all CPU options.\n-                  fp.map('cpu'),\n-                  // In the event that was remove a machine type from our set of valid\n-                  // configs, we want to continue to allow rendering of the value here.\n-                  // Union also makes the CPU values unique.\n-                  fp.union([cpu]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.sortBy('memory'),\n-                    fp.find({cpu: value}),\n-                    maybeGetMachine,\n-                    onChange)(validLeonardoMachineTypes)\n-                }\n-                value={cpu}/>\n-    </div>\n-    <div>\n-      <label htmlFor='runtime-ram'\n-            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+        options={fp.flow(\n+          // Show all CPU options.\n+          fp.map('cpu'),\n+          // In the event that was remove a machine type from our set of valid\n+          // configs, we want to continue to allow rendering of the value here.\n+          // Union also makes the CPU values unique.\n+          fp.union([cpu]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.sortBy('memory'),\n+            fp.find({cpu: value}),\n+            maybeGetMachine,\n+            onChange)(validLeonardoMachineTypes)\n+        }\n+        value={cpu}/>\n+      <label htmlFor='runtime-ram' style={{marginRight: '.25rem'}}>RAM (GB)</label>\n       <Dropdown id='runtime-ram'\n-                options={fp.flow(\n-                  // Show valid memory options as constrained by the currently selected CPU.\n-                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n-                  fp.map('memory'),\n-                  // See above comment on CPU union.\n-                  fp.union([memory]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.find({cpu, memory: value}),\n-                    // If the selected machine is not different from the current machine return null\n-                    maybeGetMachine,\n-                    onChange\n-                    )(validLeonardoMachineTypes) }\n-                value={memory}\n-                />\n-    </div>\n+        options={fp.flow(\n+          // Show valid memory options as constrained by the currently selected CPU.\n+          fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+          fp.map('memory'),\n+          // See above comment on CPU union.\n+          fp.union([memory]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.find({cpu, memory: value}),\n+            // If the selected machine is not different from the current machine return null\n+            maybeGetMachine,\n+            onChange\n+            )(validLeonardoMachineTypes) }\n+        value={memory}\n+        />\n   </Fragment>;\n };\n \n-const DiskSizeSelection = ({onChange, updatedDiskSize, masterDiskSize}) => {\n-  return <div>\n-    <label htmlFor='runtime-disk'\n-          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n-      <InputNumber id='runtime-disk'\n-                showButtons\n-                decrementButtonClassName='p-button-secondary'\n-                incrementButtonClassName='p-button-secondary'\n-                value={updatedDiskSize || masterDiskSize}\n-                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n-                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n-                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n-  </div>;\n+const DiskSizeSelection = ({onChange, updatedDiskSize, diskSize}) => {\n+  return <Fragment>\n+    <label htmlFor='runtime-disk' style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+    <InputNumber id='runtime-disk'\n+      showButtons\n+      decrementButtonClassName='p-button-secondary'\n+      incrementButtonClassName='p-button-secondary'\n+      value={updatedDiskSize || diskSize}\n+      inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+      onChange={({value}) => onChange(value)}\n+      min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </Fragment>;\n+};\n+\n+const DataProcConfig = ({onChange, dataprocConfig}) => {\n+  const {\n+    workerMachineType = defaultMachineType,\n+    workerDiskSize = 50,\n+    numberOfWorkers = 2,\n+    numberOfPreemptibleWorkers = 0\n+  } = dataprocConfig || {};\n+  const [updatedNumWorkers, setUpdatedNumWorkers] = useState(numberOfWorkers);\n+  const [updatedPreemtible, setUpdatedPreemptible] = useState(numberOfPreemptibleWorkers);\n+  const [updatedWorkerMachine, setUpdatedWorkerMachine] = useState(null);\n+  const [updatedDiskSize, setUpdatedDiskSize] = useState(workerDiskSize);\n+\n+  useEffect(() => {\n+    const machineType = updatedWorkerMachine && updatedWorkerMachine.name;\n+    const dataprocConfigChanged = updatedNumWorkers !== numberOfWorkers ||\n+    updatedPreemtible !== numberOfPreemptibleWorkers ||\n+    updatedDiskSize !== workerDiskSize ||\n+    updatedWorkerMachine ||\n+    !dataprocConfig;\n+\n+    onChange(dataprocConfigChanged ? {\n+      workerMachineType: machineType,\n+      workerDiskSize: updatedDiskSize,\n+      numberOfWorkers: updatedNumWorkers,\n+      numberOfPreemptibleWorkers: updatedPreemtible\n+    } : null);\n+\n+    return () => onChange(null);\n+  }, [updatedNumWorkers, updatedPreemtible, updatedWorkerMachine, updatedDiskSize]);\n+\n+\n+  return <fieldset style={{marginTop: '0.75rem'}}>\n+    <legend style={styles.workerConfigLabel}>Worker Config</legend>\n+    <div style={styles.formGrid}>\n+      <label htmlFor='num-workers' style={{marginRight: '.25rem'}}>Workers</label>\n+      <InputNumber id='num-workers'\n+        showButtons\n+        decrementButtonClassName='p-button-secondary'\n+        incrementButtonClassName='p-button-secondary'\n+        value={updatedNumWorkers}\n+        inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+        onChange={({value}) => {\n+          setUpdatedNumWorkers(value);\n+          if (updatedNumWorkers < updatedPreemtible) {\n+            setUpdatedPreemptible(updatedNumWorkers);\n+          }\n+        }}\n+        min={2}/>\n+      <label htmlFor='num-preemptible' style={{marginRight: '.25rem'}}>Preemptible</label>\n+      <InputNumber id='num-preemptible'\n+        showButtons\n+        decrementButtonClassName='p-button-secondary'\n+        incrementButtonClassName='p-button-secondary'\n+        value={updatedNumWorkers < updatedPreemtible ? updatedNumWorkers : updatedPreemtible}\n+        inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+        onChange={({value}) => setUpdatedPreemptible(value)}\n+        min={0}\n+        max={updatedNumWorkers}/>\n+      <div style={{gridColumnEnd: 'span 2'}}/>\n+      <MachineSelector machineType={workerMachineType} onChange={setUpdatedWorkerMachine} updatedMachine={updatedWorkerMachine}/>\n+      <DiskSizeSelection diskSize={workerDiskSize} onChange={setUpdatedDiskSize} updatedDiskSize={updatedDiskSize} />\n+    </div>\n+  </fieldset>;\n };\n \n export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n-  const [updatedDiskSize, setUpdatedDiskSize] = useState(null);\n-  const [updatedMachine, setUpdatedMachine] = useState(null);\n   const runtimeOps = useStore(runtimeOpsStore);\n   const [currentRuntime, setRequestedRuntime] = useCustomRuntime(workspace.namespace);\n \n   const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n   const {status = RuntimeStatus.Unknown, toolDockerImage = '', dataprocConfig = null, gceConfig = {}} = currentRuntime || {};\n   const masterMachineType = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType;\n   const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize;\n-  const updatedMachineType = updatedMachine && updatedMachine.name;\n \n-  const isDataproc = (currentRuntime && !!currentRuntime.dataprocConfig);\n-  const runtimeChanged = updatedMachine || updatedDiskSize;\n+  const [updatedDiskSize, setUpdatedDiskSize] = useState(masterDiskSize);\n+  const [updatedMachine, setUpdatedMachine] = useState(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c42240e4a505338e2e97aa6e29791d63e290c0d5"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5Mzg5MA==", "bodyText": "Yes, I set this to the machine type and cleaned up the initial values / logic that checks for diffs - thanks!", "url": "https://github.com/all-of-us/workbench/pull/4180#discussion_r508093890", "createdAt": "2020-10-19T22:15:02Z", "author": {"login": "petesantos"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -40,97 +40,171 @@ const styles = reactStyles({\n   presetMenuItem: {\n     color: colors.primary,\n     fontSize: '14px'\n+  },\n+  formGrid: {\n+    display: 'grid',\n+    gridTemplateColumns: '1fr 1fr 1fr 1fr 3rem 1fr',\n+    gridGap: '1rem',\n+    alignItems: 'center'\n+  },\n+  workerConfigLabel: {\n+    fontWeight: 600,\n+    marginBottom: '0.5rem'\n   }\n });\n \n const defaultMachineType = allMachineTypes.find(({name}) => name === 'n1-standard-4');\n+enum ComputeType {\n+  standard = 'Standard VM',\n+  dataproc = 'Dataproc Cluster'\n+}\n \n export interface Props {\n   workspace: WorkspaceData;\n }\n \n-const MachineSelector = ({onChange, updatedMachine, masterMachineType}) => {\n-  const initialMachineType = fp.find(({name}) => name === masterMachineType, allMachineTypes) || defaultMachineType;\n+const MachineSelector = ({onChange, updatedMachine, machineType}) => {\n+  const initialMachineType = fp.find(({name}) => name === machineType, allMachineTypes) || defaultMachineType;\n   const {cpu, memory} = updatedMachine || initialMachineType;\n   const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n \n   return <Fragment>\n-    <div>\n-      <label htmlFor='runtime-cpu'\n-            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <label htmlFor='runtime-cpu' style={{marginRight: '.25rem'}}>CPUs</label>\n       <Dropdown id='runtime-cpu'\n-                options={fp.flow(\n-                  // Show all CPU options.\n-                  fp.map('cpu'),\n-                  // In the event that was remove a machine type from our set of valid\n-                  // configs, we want to continue to allow rendering of the value here.\n-                  // Union also makes the CPU values unique.\n-                  fp.union([cpu]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.sortBy('memory'),\n-                    fp.find({cpu: value}),\n-                    maybeGetMachine,\n-                    onChange)(validLeonardoMachineTypes)\n-                }\n-                value={cpu}/>\n-    </div>\n-    <div>\n-      <label htmlFor='runtime-ram'\n-            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+        options={fp.flow(\n+          // Show all CPU options.\n+          fp.map('cpu'),\n+          // In the event that was remove a machine type from our set of valid\n+          // configs, we want to continue to allow rendering of the value here.\n+          // Union also makes the CPU values unique.\n+          fp.union([cpu]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.sortBy('memory'),\n+            fp.find({cpu: value}),\n+            maybeGetMachine,\n+            onChange)(validLeonardoMachineTypes)\n+        }\n+        value={cpu}/>\n+      <label htmlFor='runtime-ram' style={{marginRight: '.25rem'}}>RAM (GB)</label>\n       <Dropdown id='runtime-ram'\n-                options={fp.flow(\n-                  // Show valid memory options as constrained by the currently selected CPU.\n-                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n-                  fp.map('memory'),\n-                  // See above comment on CPU union.\n-                  fp.union([memory]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.find({cpu, memory: value}),\n-                    // If the selected machine is not different from the current machine return null\n-                    maybeGetMachine,\n-                    onChange\n-                    )(validLeonardoMachineTypes) }\n-                value={memory}\n-                />\n-    </div>\n+        options={fp.flow(\n+          // Show valid memory options as constrained by the currently selected CPU.\n+          fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+          fp.map('memory'),\n+          // See above comment on CPU union.\n+          fp.union([memory]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.find({cpu, memory: value}),\n+            // If the selected machine is not different from the current machine return null\n+            maybeGetMachine,\n+            onChange\n+            )(validLeonardoMachineTypes) }\n+        value={memory}\n+        />\n   </Fragment>;\n };\n \n-const DiskSizeSelection = ({onChange, updatedDiskSize, masterDiskSize}) => {\n-  return <div>\n-    <label htmlFor='runtime-disk'\n-          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n-      <InputNumber id='runtime-disk'\n-                showButtons\n-                decrementButtonClassName='p-button-secondary'\n-                incrementButtonClassName='p-button-secondary'\n-                value={updatedDiskSize || masterDiskSize}\n-                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n-                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n-                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n-  </div>;\n+const DiskSizeSelection = ({onChange, updatedDiskSize, diskSize}) => {\n+  return <Fragment>\n+    <label htmlFor='runtime-disk' style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+    <InputNumber id='runtime-disk'\n+      showButtons\n+      decrementButtonClassName='p-button-secondary'\n+      incrementButtonClassName='p-button-secondary'\n+      value={updatedDiskSize || diskSize}\n+      inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+      onChange={({value}) => onChange(value)}\n+      min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </Fragment>;\n+};\n+\n+const DataProcConfig = ({onChange, dataprocConfig}) => {\n+  const {\n+    workerMachineType = defaultMachineType,\n+    workerDiskSize = 50,\n+    numberOfWorkers = 2,\n+    numberOfPreemptibleWorkers = 0\n+  } = dataprocConfig || {};\n+  const [updatedNumWorkers, setUpdatedNumWorkers] = useState(numberOfWorkers);\n+  const [updatedPreemtible, setUpdatedPreemptible] = useState(numberOfPreemptibleWorkers);\n+  const [updatedWorkerMachine, setUpdatedWorkerMachine] = useState(null);\n+  const [updatedDiskSize, setUpdatedDiskSize] = useState(workerDiskSize);\n+\n+  useEffect(() => {\n+    const machineType = updatedWorkerMachine && updatedWorkerMachine.name;\n+    const dataprocConfigChanged = updatedNumWorkers !== numberOfWorkers ||\n+    updatedPreemtible !== numberOfPreemptibleWorkers ||\n+    updatedDiskSize !== workerDiskSize ||\n+    updatedWorkerMachine ||\n+    !dataprocConfig;\n+\n+    onChange(dataprocConfigChanged ? {\n+      workerMachineType: machineType,\n+      workerDiskSize: updatedDiskSize,\n+      numberOfWorkers: updatedNumWorkers,\n+      numberOfPreemptibleWorkers: updatedPreemtible\n+    } : null);\n+\n+    return () => onChange(null);\n+  }, [updatedNumWorkers, updatedPreemtible, updatedWorkerMachine, updatedDiskSize]);\n+\n+\n+  return <fieldset style={{marginTop: '0.75rem'}}>\n+    <legend style={styles.workerConfigLabel}>Worker Config</legend>\n+    <div style={styles.formGrid}>\n+      <label htmlFor='num-workers' style={{marginRight: '.25rem'}}>Workers</label>\n+      <InputNumber id='num-workers'\n+        showButtons\n+        decrementButtonClassName='p-button-secondary'\n+        incrementButtonClassName='p-button-secondary'\n+        value={updatedNumWorkers}\n+        inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+        onChange={({value}) => {\n+          setUpdatedNumWorkers(value);\n+          if (updatedNumWorkers < updatedPreemtible) {\n+            setUpdatedPreemptible(updatedNumWorkers);\n+          }\n+        }}\n+        min={2}/>\n+      <label htmlFor='num-preemptible' style={{marginRight: '.25rem'}}>Preemptible</label>\n+      <InputNumber id='num-preemptible'\n+        showButtons\n+        decrementButtonClassName='p-button-secondary'\n+        incrementButtonClassName='p-button-secondary'\n+        value={updatedNumWorkers < updatedPreemtible ? updatedNumWorkers : updatedPreemtible}\n+        inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+        onChange={({value}) => setUpdatedPreemptible(value)}\n+        min={0}\n+        max={updatedNumWorkers}/>\n+      <div style={{gridColumnEnd: 'span 2'}}/>\n+      <MachineSelector machineType={workerMachineType} onChange={setUpdatedWorkerMachine} updatedMachine={updatedWorkerMachine}/>\n+      <DiskSizeSelection diskSize={workerDiskSize} onChange={setUpdatedDiskSize} updatedDiskSize={updatedDiskSize} />\n+    </div>\n+  </fieldset>;\n };\n \n export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n-  const [updatedDiskSize, setUpdatedDiskSize] = useState(null);\n-  const [updatedMachine, setUpdatedMachine] = useState(null);\n   const runtimeOps = useStore(runtimeOpsStore);\n   const [currentRuntime, setRequestedRuntime] = useCustomRuntime(workspace.namespace);\n \n   const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n   const {status = RuntimeStatus.Unknown, toolDockerImage = '', dataprocConfig = null, gceConfig = {}} = currentRuntime || {};\n   const masterMachineType = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType;\n   const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize;\n-  const updatedMachineType = updatedMachine && updatedMachine.name;\n \n-  const isDataproc = (currentRuntime && !!currentRuntime.dataprocConfig);\n-  const runtimeChanged = updatedMachine || updatedDiskSize;\n+  const [updatedDiskSize, setUpdatedDiskSize] = useState(masterDiskSize);\n+  const [updatedMachine, setUpdatedMachine] = useState(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwOTk3NQ=="}, "originalCommit": {"oid": "c42240e4a505338e2e97aa6e29791d63e290c0d5"}, "originalPosition": 234}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mzc5MzEwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDo0MToxNlrOHjPMCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDo0MToxNlrOHjPMCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcxMTA0OA==", "bodyText": "Outside of the scope of this ticket, but it would be nice to clean up how we track whether gce config has changed so that it can work the same as what you're doing... on Monday I'll take a look at what tickets we have for the epic and what else we need", "url": "https://github.com/all-of-us/workbench/pull/4180#discussion_r506711048", "createdAt": "2020-10-16T20:41:16Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -40,97 +40,171 @@ const styles = reactStyles({\n   presetMenuItem: {\n     color: colors.primary,\n     fontSize: '14px'\n+  },\n+  formGrid: {\n+    display: 'grid',\n+    gridTemplateColumns: '1fr 1fr 1fr 1fr 3rem 1fr',\n+    gridGap: '1rem',\n+    alignItems: 'center'\n+  },\n+  workerConfigLabel: {\n+    fontWeight: 600,\n+    marginBottom: '0.5rem'\n   }\n });\n \n const defaultMachineType = allMachineTypes.find(({name}) => name === 'n1-standard-4');\n+enum ComputeType {\n+  standard = 'Standard VM',\n+  dataproc = 'Dataproc Cluster'\n+}\n \n export interface Props {\n   workspace: WorkspaceData;\n }\n \n-const MachineSelector = ({onChange, updatedMachine, masterMachineType}) => {\n-  const initialMachineType = fp.find(({name}) => name === masterMachineType, allMachineTypes) || defaultMachineType;\n+const MachineSelector = ({onChange, updatedMachine, machineType}) => {\n+  const initialMachineType = fp.find(({name}) => name === machineType, allMachineTypes) || defaultMachineType;\n   const {cpu, memory} = updatedMachine || initialMachineType;\n   const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n \n   return <Fragment>\n-    <div>\n-      <label htmlFor='runtime-cpu'\n-            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <label htmlFor='runtime-cpu' style={{marginRight: '.25rem'}}>CPUs</label>\n       <Dropdown id='runtime-cpu'\n-                options={fp.flow(\n-                  // Show all CPU options.\n-                  fp.map('cpu'),\n-                  // In the event that was remove a machine type from our set of valid\n-                  // configs, we want to continue to allow rendering of the value here.\n-                  // Union also makes the CPU values unique.\n-                  fp.union([cpu]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.sortBy('memory'),\n-                    fp.find({cpu: value}),\n-                    maybeGetMachine,\n-                    onChange)(validLeonardoMachineTypes)\n-                }\n-                value={cpu}/>\n-    </div>\n-    <div>\n-      <label htmlFor='runtime-ram'\n-            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+        options={fp.flow(\n+          // Show all CPU options.\n+          fp.map('cpu'),\n+          // In the event that was remove a machine type from our set of valid\n+          // configs, we want to continue to allow rendering of the value here.\n+          // Union also makes the CPU values unique.\n+          fp.union([cpu]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.sortBy('memory'),\n+            fp.find({cpu: value}),\n+            maybeGetMachine,\n+            onChange)(validLeonardoMachineTypes)\n+        }\n+        value={cpu}/>\n+      <label htmlFor='runtime-ram' style={{marginRight: '.25rem'}}>RAM (GB)</label>\n       <Dropdown id='runtime-ram'\n-                options={fp.flow(\n-                  // Show valid memory options as constrained by the currently selected CPU.\n-                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n-                  fp.map('memory'),\n-                  // See above comment on CPU union.\n-                  fp.union([memory]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.find({cpu, memory: value}),\n-                    // If the selected machine is not different from the current machine return null\n-                    maybeGetMachine,\n-                    onChange\n-                    )(validLeonardoMachineTypes) }\n-                value={memory}\n-                />\n-    </div>\n+        options={fp.flow(\n+          // Show valid memory options as constrained by the currently selected CPU.\n+          fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+          fp.map('memory'),\n+          // See above comment on CPU union.\n+          fp.union([memory]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.find({cpu, memory: value}),\n+            // If the selected machine is not different from the current machine return null\n+            maybeGetMachine,\n+            onChange\n+            )(validLeonardoMachineTypes) }\n+        value={memory}\n+        />\n   </Fragment>;\n };\n \n-const DiskSizeSelection = ({onChange, updatedDiskSize, masterDiskSize}) => {\n-  return <div>\n-    <label htmlFor='runtime-disk'\n-          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n-      <InputNumber id='runtime-disk'\n-                showButtons\n-                decrementButtonClassName='p-button-secondary'\n-                incrementButtonClassName='p-button-secondary'\n-                value={updatedDiskSize || masterDiskSize}\n-                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n-                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n-                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n-  </div>;\n+const DiskSizeSelection = ({onChange, updatedDiskSize, diskSize}) => {\n+  return <Fragment>\n+    <label htmlFor='runtime-disk' style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+    <InputNumber id='runtime-disk'\n+      showButtons\n+      decrementButtonClassName='p-button-secondary'\n+      incrementButtonClassName='p-button-secondary'\n+      value={updatedDiskSize || diskSize}\n+      inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+      onChange={({value}) => onChange(value)}\n+      min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </Fragment>;\n+};\n+\n+const DataProcConfig = ({onChange, dataprocConfig}) => {\n+  const {\n+    workerMachineType = defaultMachineType,\n+    workerDiskSize = 50,\n+    numberOfWorkers = 2,\n+    numberOfPreemptibleWorkers = 0\n+  } = dataprocConfig || {};\n+  const [updatedNumWorkers, setUpdatedNumWorkers] = useState(numberOfWorkers);\n+  const [updatedPreemtible, setUpdatedPreemptible] = useState(numberOfPreemptibleWorkers);\n+  const [updatedWorkerMachine, setUpdatedWorkerMachine] = useState(null);\n+  const [updatedDiskSize, setUpdatedDiskSize] = useState(workerDiskSize);\n+\n+  useEffect(() => {\n+    const machineType = updatedWorkerMachine && updatedWorkerMachine.name;\n+    const dataprocConfigChanged = updatedNumWorkers !== numberOfWorkers ||\n+    updatedPreemtible !== numberOfPreemptibleWorkers ||\n+    updatedDiskSize !== workerDiskSize ||\n+    updatedWorkerMachine ||\n+    !dataprocConfig;\n+\n+    onChange(dataprocConfigChanged ? {\n+      workerMachineType: machineType,\n+      workerDiskSize: updatedDiskSize,\n+      numberOfWorkers: updatedNumWorkers,\n+      numberOfPreemptibleWorkers: updatedPreemtible\n+    } : null);\n+\n+    return () => onChange(null);\n+  }, [updatedNumWorkers, updatedPreemtible, updatedWorkerMachine, updatedDiskSize]);\n+\n+\n+  return <fieldset style={{marginTop: '0.75rem'}}>\n+    <legend style={styles.workerConfigLabel}>Worker Config</legend>\n+    <div style={styles.formGrid}>\n+      <label htmlFor='num-workers' style={{marginRight: '.25rem'}}>Workers</label>\n+      <InputNumber id='num-workers'\n+        showButtons\n+        decrementButtonClassName='p-button-secondary'\n+        incrementButtonClassName='p-button-secondary'\n+        value={updatedNumWorkers}\n+        inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+        onChange={({value}) => {\n+          setUpdatedNumWorkers(value);\n+          if (updatedNumWorkers < updatedPreemtible) {\n+            setUpdatedPreemptible(updatedNumWorkers);\n+          }\n+        }}\n+        min={2}/>\n+      <label htmlFor='num-preemptible' style={{marginRight: '.25rem'}}>Preemptible</label>\n+      <InputNumber id='num-preemptible'\n+        showButtons\n+        decrementButtonClassName='p-button-secondary'\n+        incrementButtonClassName='p-button-secondary'\n+        value={updatedNumWorkers < updatedPreemtible ? updatedNumWorkers : updatedPreemtible}\n+        inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+        onChange={({value}) => setUpdatedPreemptible(value)}\n+        min={0}\n+        max={updatedNumWorkers}/>\n+      <div style={{gridColumnEnd: 'span 2'}}/>\n+      <MachineSelector machineType={workerMachineType} onChange={setUpdatedWorkerMachine} updatedMachine={updatedWorkerMachine}/>\n+      <DiskSizeSelection diskSize={workerDiskSize} onChange={setUpdatedDiskSize} updatedDiskSize={updatedDiskSize} />\n+    </div>\n+  </fieldset>;\n };\n \n export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n-  const [updatedDiskSize, setUpdatedDiskSize] = useState(null);\n-  const [updatedMachine, setUpdatedMachine] = useState(null);\n   const runtimeOps = useStore(runtimeOpsStore);\n   const [currentRuntime, setRequestedRuntime] = useCustomRuntime(workspace.namespace);\n \n   const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n   const {status = RuntimeStatus.Unknown, toolDockerImage = '', dataprocConfig = null, gceConfig = {}} = currentRuntime || {};\n   const masterMachineType = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType;\n   const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize;\n-  const updatedMachineType = updatedMachine && updatedMachine.name;\n \n-  const isDataproc = (currentRuntime && !!currentRuntime.dataprocConfig);\n-  const runtimeChanged = updatedMachine || updatedDiskSize;\n+  const [updatedDiskSize, setUpdatedDiskSize] = useState(masterDiskSize);\n+  const [updatedMachine, setUpdatedMachine] = useState(null);\n+  const [updatedCompute, setUpdatedCompute] = useState<ComputeType>(dataprocConfig ? ComputeType.dataproc : ComputeType.standard);\n+  const [updatedDataprocConfig, setUpdatedDataprocConfig] = useState();\n+\n+  const updatedMachineType = updatedMachine && updatedMachine.name;\n+  const runtimeChanged = updatedMachine || updatedDiskSize !== masterDiskSize || updatedDataprocConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c42240e4a505338e2e97aa6e29791d63e290c0d5"}, "originalPosition": 239}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mzk3MzAyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMTo1NTo0OVrOHjQ1zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMTo1NTo0OVrOHjQ1zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjczODEyNw==", "bodyText": "nit: We're not consistent in the codebase, but I'd say most commonly we upper camelCase enum values. In a few cases, we  do constant-style uppercase, but that's less common. Full lower case enum values are barely used", "url": "https://github.com/all-of-us/workbench/pull/4180#discussion_r506738127", "createdAt": "2020-10-16T21:55:49Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -40,97 +40,171 @@ const styles = reactStyles({\n   presetMenuItem: {\n     color: colors.primary,\n     fontSize: '14px'\n+  },\n+  formGrid: {\n+    display: 'grid',\n+    gridTemplateColumns: '1fr 1fr 1fr 1fr 3rem 1fr',\n+    gridGap: '1rem',\n+    alignItems: 'center'\n+  },\n+  workerConfigLabel: {\n+    fontWeight: 600,\n+    marginBottom: '0.5rem'\n   }\n });\n \n const defaultMachineType = allMachineTypes.find(({name}) => name === 'n1-standard-4');\n+enum ComputeType {\n+  standard = 'Standard VM',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c42240e4a505338e2e97aa6e29791d63e290c0d5"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mzk4MDUzOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMTo1OToxN1rOHjQ6KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMTo1OToxN1rOHjQ6KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjczOTI0MQ==", "bodyText": "Please type this; consider typing the others as well for clarity, if not obvious from the context (useState<number>(workerDiskSize);)", "url": "https://github.com/all-of-us/workbench/pull/4180#discussion_r506739241", "createdAt": "2020-10-16T21:59:17Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -40,97 +40,171 @@ const styles = reactStyles({\n   presetMenuItem: {\n     color: colors.primary,\n     fontSize: '14px'\n+  },\n+  formGrid: {\n+    display: 'grid',\n+    gridTemplateColumns: '1fr 1fr 1fr 1fr 3rem 1fr',\n+    gridGap: '1rem',\n+    alignItems: 'center'\n+  },\n+  workerConfigLabel: {\n+    fontWeight: 600,\n+    marginBottom: '0.5rem'\n   }\n });\n \n const defaultMachineType = allMachineTypes.find(({name}) => name === 'n1-standard-4');\n+enum ComputeType {\n+  standard = 'Standard VM',\n+  dataproc = 'Dataproc Cluster'\n+}\n \n export interface Props {\n   workspace: WorkspaceData;\n }\n \n-const MachineSelector = ({onChange, updatedMachine, masterMachineType}) => {\n-  const initialMachineType = fp.find(({name}) => name === masterMachineType, allMachineTypes) || defaultMachineType;\n+const MachineSelector = ({onChange, updatedMachine, machineType}) => {\n+  const initialMachineType = fp.find(({name}) => name === machineType, allMachineTypes) || defaultMachineType;\n   const {cpu, memory} = updatedMachine || initialMachineType;\n   const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n \n   return <Fragment>\n-    <div>\n-      <label htmlFor='runtime-cpu'\n-            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <label htmlFor='runtime-cpu' style={{marginRight: '.25rem'}}>CPUs</label>\n       <Dropdown id='runtime-cpu'\n-                options={fp.flow(\n-                  // Show all CPU options.\n-                  fp.map('cpu'),\n-                  // In the event that was remove a machine type from our set of valid\n-                  // configs, we want to continue to allow rendering of the value here.\n-                  // Union also makes the CPU values unique.\n-                  fp.union([cpu]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.sortBy('memory'),\n-                    fp.find({cpu: value}),\n-                    maybeGetMachine,\n-                    onChange)(validLeonardoMachineTypes)\n-                }\n-                value={cpu}/>\n-    </div>\n-    <div>\n-      <label htmlFor='runtime-ram'\n-            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+        options={fp.flow(\n+          // Show all CPU options.\n+          fp.map('cpu'),\n+          // In the event that was remove a machine type from our set of valid\n+          // configs, we want to continue to allow rendering of the value here.\n+          // Union also makes the CPU values unique.\n+          fp.union([cpu]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.sortBy('memory'),\n+            fp.find({cpu: value}),\n+            maybeGetMachine,\n+            onChange)(validLeonardoMachineTypes)\n+        }\n+        value={cpu}/>\n+      <label htmlFor='runtime-ram' style={{marginRight: '.25rem'}}>RAM (GB)</label>\n       <Dropdown id='runtime-ram'\n-                options={fp.flow(\n-                  // Show valid memory options as constrained by the currently selected CPU.\n-                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n-                  fp.map('memory'),\n-                  // See above comment on CPU union.\n-                  fp.union([memory]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.find({cpu, memory: value}),\n-                    // If the selected machine is not different from the current machine return null\n-                    maybeGetMachine,\n-                    onChange\n-                    )(validLeonardoMachineTypes) }\n-                value={memory}\n-                />\n-    </div>\n+        options={fp.flow(\n+          // Show valid memory options as constrained by the currently selected CPU.\n+          fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+          fp.map('memory'),\n+          // See above comment on CPU union.\n+          fp.union([memory]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.find({cpu, memory: value}),\n+            // If the selected machine is not different from the current machine return null\n+            maybeGetMachine,\n+            onChange\n+            )(validLeonardoMachineTypes) }\n+        value={memory}\n+        />\n   </Fragment>;\n };\n \n-const DiskSizeSelection = ({onChange, updatedDiskSize, masterDiskSize}) => {\n-  return <div>\n-    <label htmlFor='runtime-disk'\n-          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n-      <InputNumber id='runtime-disk'\n-                showButtons\n-                decrementButtonClassName='p-button-secondary'\n-                incrementButtonClassName='p-button-secondary'\n-                value={updatedDiskSize || masterDiskSize}\n-                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n-                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n-                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n-  </div>;\n+const DiskSizeSelection = ({onChange, updatedDiskSize, diskSize}) => {\n+  return <Fragment>\n+    <label htmlFor='runtime-disk' style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+    <InputNumber id='runtime-disk'\n+      showButtons\n+      decrementButtonClassName='p-button-secondary'\n+      incrementButtonClassName='p-button-secondary'\n+      value={updatedDiskSize || diskSize}\n+      inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+      onChange={({value}) => onChange(value)}\n+      min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </Fragment>;\n+};\n+\n+const DataProcConfig = ({onChange, dataprocConfig}) => {\n+  const {\n+    workerMachineType = defaultMachineType,\n+    workerDiskSize = 50,\n+    numberOfWorkers = 2,\n+    numberOfPreemptibleWorkers = 0\n+  } = dataprocConfig || {};\n+  const [updatedNumWorkers, setUpdatedNumWorkers] = useState(numberOfWorkers);\n+  const [updatedPreemtible, setUpdatedPreemptible] = useState(numberOfPreemptibleWorkers);\n+  const [updatedWorkerMachine, setUpdatedWorkerMachine] = useState(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c42240e4a505338e2e97aa6e29791d63e290c0d5"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mzk4NTYzOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjowMTo0M1rOHjQ89w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjowMTo0M1rOHjQ89w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjczOTk1OQ==", "bodyText": "Type? Also consistency of initial values: why (presumably) undefined here, and  null elsewhere?", "url": "https://github.com/all-of-us/workbench/pull/4180#discussion_r506739959", "createdAt": "2020-10-16T22:01:43Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -40,97 +40,171 @@ const styles = reactStyles({\n   presetMenuItem: {\n     color: colors.primary,\n     fontSize: '14px'\n+  },\n+  formGrid: {\n+    display: 'grid',\n+    gridTemplateColumns: '1fr 1fr 1fr 1fr 3rem 1fr',\n+    gridGap: '1rem',\n+    alignItems: 'center'\n+  },\n+  workerConfigLabel: {\n+    fontWeight: 600,\n+    marginBottom: '0.5rem'\n   }\n });\n \n const defaultMachineType = allMachineTypes.find(({name}) => name === 'n1-standard-4');\n+enum ComputeType {\n+  standard = 'Standard VM',\n+  dataproc = 'Dataproc Cluster'\n+}\n \n export interface Props {\n   workspace: WorkspaceData;\n }\n \n-const MachineSelector = ({onChange, updatedMachine, masterMachineType}) => {\n-  const initialMachineType = fp.find(({name}) => name === masterMachineType, allMachineTypes) || defaultMachineType;\n+const MachineSelector = ({onChange, updatedMachine, machineType}) => {\n+  const initialMachineType = fp.find(({name}) => name === machineType, allMachineTypes) || defaultMachineType;\n   const {cpu, memory} = updatedMachine || initialMachineType;\n   const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n \n   return <Fragment>\n-    <div>\n-      <label htmlFor='runtime-cpu'\n-            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <label htmlFor='runtime-cpu' style={{marginRight: '.25rem'}}>CPUs</label>\n       <Dropdown id='runtime-cpu'\n-                options={fp.flow(\n-                  // Show all CPU options.\n-                  fp.map('cpu'),\n-                  // In the event that was remove a machine type from our set of valid\n-                  // configs, we want to continue to allow rendering of the value here.\n-                  // Union also makes the CPU values unique.\n-                  fp.union([cpu]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.sortBy('memory'),\n-                    fp.find({cpu: value}),\n-                    maybeGetMachine,\n-                    onChange)(validLeonardoMachineTypes)\n-                }\n-                value={cpu}/>\n-    </div>\n-    <div>\n-      <label htmlFor='runtime-ram'\n-            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+        options={fp.flow(\n+          // Show all CPU options.\n+          fp.map('cpu'),\n+          // In the event that was remove a machine type from our set of valid\n+          // configs, we want to continue to allow rendering of the value here.\n+          // Union also makes the CPU values unique.\n+          fp.union([cpu]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.sortBy('memory'),\n+            fp.find({cpu: value}),\n+            maybeGetMachine,\n+            onChange)(validLeonardoMachineTypes)\n+        }\n+        value={cpu}/>\n+      <label htmlFor='runtime-ram' style={{marginRight: '.25rem'}}>RAM (GB)</label>\n       <Dropdown id='runtime-ram'\n-                options={fp.flow(\n-                  // Show valid memory options as constrained by the currently selected CPU.\n-                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n-                  fp.map('memory'),\n-                  // See above comment on CPU union.\n-                  fp.union([memory]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.find({cpu, memory: value}),\n-                    // If the selected machine is not different from the current machine return null\n-                    maybeGetMachine,\n-                    onChange\n-                    )(validLeonardoMachineTypes) }\n-                value={memory}\n-                />\n-    </div>\n+        options={fp.flow(\n+          // Show valid memory options as constrained by the currently selected CPU.\n+          fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+          fp.map('memory'),\n+          // See above comment on CPU union.\n+          fp.union([memory]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.find({cpu, memory: value}),\n+            // If the selected machine is not different from the current machine return null\n+            maybeGetMachine,\n+            onChange\n+            )(validLeonardoMachineTypes) }\n+        value={memory}\n+        />\n   </Fragment>;\n };\n \n-const DiskSizeSelection = ({onChange, updatedDiskSize, masterDiskSize}) => {\n-  return <div>\n-    <label htmlFor='runtime-disk'\n-          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n-      <InputNumber id='runtime-disk'\n-                showButtons\n-                decrementButtonClassName='p-button-secondary'\n-                incrementButtonClassName='p-button-secondary'\n-                value={updatedDiskSize || masterDiskSize}\n-                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n-                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n-                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n-  </div>;\n+const DiskSizeSelection = ({onChange, updatedDiskSize, diskSize}) => {\n+  return <Fragment>\n+    <label htmlFor='runtime-disk' style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+    <InputNumber id='runtime-disk'\n+      showButtons\n+      decrementButtonClassName='p-button-secondary'\n+      incrementButtonClassName='p-button-secondary'\n+      value={updatedDiskSize || diskSize}\n+      inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+      onChange={({value}) => onChange(value)}\n+      min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </Fragment>;\n+};\n+\n+const DataProcConfig = ({onChange, dataprocConfig}) => {\n+  const {\n+    workerMachineType = defaultMachineType,\n+    workerDiskSize = 50,\n+    numberOfWorkers = 2,\n+    numberOfPreemptibleWorkers = 0\n+  } = dataprocConfig || {};\n+  const [updatedNumWorkers, setUpdatedNumWorkers] = useState(numberOfWorkers);\n+  const [updatedPreemtible, setUpdatedPreemptible] = useState(numberOfPreemptibleWorkers);\n+  const [updatedWorkerMachine, setUpdatedWorkerMachine] = useState(null);\n+  const [updatedDiskSize, setUpdatedDiskSize] = useState(workerDiskSize);\n+\n+  useEffect(() => {\n+    const machineType = updatedWorkerMachine && updatedWorkerMachine.name;\n+    const dataprocConfigChanged = updatedNumWorkers !== numberOfWorkers ||\n+    updatedPreemtible !== numberOfPreemptibleWorkers ||\n+    updatedDiskSize !== workerDiskSize ||\n+    updatedWorkerMachine ||\n+    !dataprocConfig;\n+\n+    onChange(dataprocConfigChanged ? {\n+      workerMachineType: machineType,\n+      workerDiskSize: updatedDiskSize,\n+      numberOfWorkers: updatedNumWorkers,\n+      numberOfPreemptibleWorkers: updatedPreemtible\n+    } : null);\n+\n+    return () => onChange(null);\n+  }, [updatedNumWorkers, updatedPreemtible, updatedWorkerMachine, updatedDiskSize]);\n+\n+\n+  return <fieldset style={{marginTop: '0.75rem'}}>\n+    <legend style={styles.workerConfigLabel}>Worker Config</legend>\n+    <div style={styles.formGrid}>\n+      <label htmlFor='num-workers' style={{marginRight: '.25rem'}}>Workers</label>\n+      <InputNumber id='num-workers'\n+        showButtons\n+        decrementButtonClassName='p-button-secondary'\n+        incrementButtonClassName='p-button-secondary'\n+        value={updatedNumWorkers}\n+        inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+        onChange={({value}) => {\n+          setUpdatedNumWorkers(value);\n+          if (updatedNumWorkers < updatedPreemtible) {\n+            setUpdatedPreemptible(updatedNumWorkers);\n+          }\n+        }}\n+        min={2}/>\n+      <label htmlFor='num-preemptible' style={{marginRight: '.25rem'}}>Preemptible</label>\n+      <InputNumber id='num-preemptible'\n+        showButtons\n+        decrementButtonClassName='p-button-secondary'\n+        incrementButtonClassName='p-button-secondary'\n+        value={updatedNumWorkers < updatedPreemtible ? updatedNumWorkers : updatedPreemtible}\n+        inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+        onChange={({value}) => setUpdatedPreemptible(value)}\n+        min={0}\n+        max={updatedNumWorkers}/>\n+      <div style={{gridColumnEnd: 'span 2'}}/>\n+      <MachineSelector machineType={workerMachineType} onChange={setUpdatedWorkerMachine} updatedMachine={updatedWorkerMachine}/>\n+      <DiskSizeSelection diskSize={workerDiskSize} onChange={setUpdatedDiskSize} updatedDiskSize={updatedDiskSize} />\n+    </div>\n+  </fieldset>;\n };\n \n export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n-  const [updatedDiskSize, setUpdatedDiskSize] = useState(null);\n-  const [updatedMachine, setUpdatedMachine] = useState(null);\n   const runtimeOps = useStore(runtimeOpsStore);\n   const [currentRuntime, setRequestedRuntime] = useCustomRuntime(workspace.namespace);\n \n   const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n   const {status = RuntimeStatus.Unknown, toolDockerImage = '', dataprocConfig = null, gceConfig = {}} = currentRuntime || {};\n   const masterMachineType = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType;\n   const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize;\n-  const updatedMachineType = updatedMachine && updatedMachine.name;\n \n-  const isDataproc = (currentRuntime && !!currentRuntime.dataprocConfig);\n-  const runtimeChanged = updatedMachine || updatedDiskSize;\n+  const [updatedDiskSize, setUpdatedDiskSize] = useState(masterDiskSize);\n+  const [updatedMachine, setUpdatedMachine] = useState(null);\n+  const [updatedCompute, setUpdatedCompute] = useState<ComputeType>(dataprocConfig ? ComputeType.dataproc : ComputeType.standard);\n+  const [updatedDataprocConfig, setUpdatedDataprocConfig] = useState();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c42240e4a505338e2e97aa6e29791d63e290c0d5"}, "originalPosition": 236}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mzk4NjY1OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjowMjowOFrOHjQ9ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTo1MjoyMFrOHkjAMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0MDEwNg==", "bodyText": "Indent (does the linter actually allow this?)", "url": "https://github.com/all-of-us/workbench/pull/4180#discussion_r506740106", "createdAt": "2020-10-16T22:02:08Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -40,97 +40,171 @@ const styles = reactStyles({\n   presetMenuItem: {\n     color: colors.primary,\n     fontSize: '14px'\n+  },\n+  formGrid: {\n+    display: 'grid',\n+    gridTemplateColumns: '1fr 1fr 1fr 1fr 3rem 1fr',\n+    gridGap: '1rem',\n+    alignItems: 'center'\n+  },\n+  workerConfigLabel: {\n+    fontWeight: 600,\n+    marginBottom: '0.5rem'\n   }\n });\n \n const defaultMachineType = allMachineTypes.find(({name}) => name === 'n1-standard-4');\n+enum ComputeType {\n+  standard = 'Standard VM',\n+  dataproc = 'Dataproc Cluster'\n+}\n \n export interface Props {\n   workspace: WorkspaceData;\n }\n \n-const MachineSelector = ({onChange, updatedMachine, masterMachineType}) => {\n-  const initialMachineType = fp.find(({name}) => name === masterMachineType, allMachineTypes) || defaultMachineType;\n+const MachineSelector = ({onChange, updatedMachine, machineType}) => {\n+  const initialMachineType = fp.find(({name}) => name === machineType, allMachineTypes) || defaultMachineType;\n   const {cpu, memory} = updatedMachine || initialMachineType;\n   const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n \n   return <Fragment>\n-    <div>\n-      <label htmlFor='runtime-cpu'\n-            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <label htmlFor='runtime-cpu' style={{marginRight: '.25rem'}}>CPUs</label>\n       <Dropdown id='runtime-cpu'\n-                options={fp.flow(\n-                  // Show all CPU options.\n-                  fp.map('cpu'),\n-                  // In the event that was remove a machine type from our set of valid\n-                  // configs, we want to continue to allow rendering of the value here.\n-                  // Union also makes the CPU values unique.\n-                  fp.union([cpu]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.sortBy('memory'),\n-                    fp.find({cpu: value}),\n-                    maybeGetMachine,\n-                    onChange)(validLeonardoMachineTypes)\n-                }\n-                value={cpu}/>\n-    </div>\n-    <div>\n-      <label htmlFor='runtime-ram'\n-            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+        options={fp.flow(\n+          // Show all CPU options.\n+          fp.map('cpu'),\n+          // In the event that was remove a machine type from our set of valid\n+          // configs, we want to continue to allow rendering of the value here.\n+          // Union also makes the CPU values unique.\n+          fp.union([cpu]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.sortBy('memory'),\n+            fp.find({cpu: value}),\n+            maybeGetMachine,\n+            onChange)(validLeonardoMachineTypes)\n+        }\n+        value={cpu}/>\n+      <label htmlFor='runtime-ram' style={{marginRight: '.25rem'}}>RAM (GB)</label>\n       <Dropdown id='runtime-ram'\n-                options={fp.flow(\n-                  // Show valid memory options as constrained by the currently selected CPU.\n-                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n-                  fp.map('memory'),\n-                  // See above comment on CPU union.\n-                  fp.union([memory]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.find({cpu, memory: value}),\n-                    // If the selected machine is not different from the current machine return null\n-                    maybeGetMachine,\n-                    onChange\n-                    )(validLeonardoMachineTypes) }\n-                value={memory}\n-                />\n-    </div>\n+        options={fp.flow(\n+          // Show valid memory options as constrained by the currently selected CPU.\n+          fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+          fp.map('memory'),\n+          // See above comment on CPU union.\n+          fp.union([memory]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.find({cpu, memory: value}),\n+            // If the selected machine is not different from the current machine return null\n+            maybeGetMachine,\n+            onChange\n+            )(validLeonardoMachineTypes) }\n+        value={memory}\n+        />\n   </Fragment>;\n };\n \n-const DiskSizeSelection = ({onChange, updatedDiskSize, masterDiskSize}) => {\n-  return <div>\n-    <label htmlFor='runtime-disk'\n-          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n-      <InputNumber id='runtime-disk'\n-                showButtons\n-                decrementButtonClassName='p-button-secondary'\n-                incrementButtonClassName='p-button-secondary'\n-                value={updatedDiskSize || masterDiskSize}\n-                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n-                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n-                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n-  </div>;\n+const DiskSizeSelection = ({onChange, updatedDiskSize, diskSize}) => {\n+  return <Fragment>\n+    <label htmlFor='runtime-disk' style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+    <InputNumber id='runtime-disk'\n+      showButtons\n+      decrementButtonClassName='p-button-secondary'\n+      incrementButtonClassName='p-button-secondary'\n+      value={updatedDiskSize || diskSize}\n+      inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+      onChange={({value}) => onChange(value)}\n+      min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </Fragment>;\n+};\n+\n+const DataProcConfig = ({onChange, dataprocConfig}) => {\n+  const {\n+    workerMachineType = defaultMachineType,\n+    workerDiskSize = 50,\n+    numberOfWorkers = 2,\n+    numberOfPreemptibleWorkers = 0\n+  } = dataprocConfig || {};\n+  const [updatedNumWorkers, setUpdatedNumWorkers] = useState(numberOfWorkers);\n+  const [updatedPreemtible, setUpdatedPreemptible] = useState(numberOfPreemptibleWorkers);\n+  const [updatedWorkerMachine, setUpdatedWorkerMachine] = useState(null);\n+  const [updatedDiskSize, setUpdatedDiskSize] = useState(workerDiskSize);\n+\n+  useEffect(() => {\n+    const machineType = updatedWorkerMachine && updatedWorkerMachine.name;\n+    const dataprocConfigChanged = updatedNumWorkers !== numberOfWorkers ||\n+    updatedPreemtible !== numberOfPreemptibleWorkers ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c42240e4a505338e2e97aa6e29791d63e290c0d5"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4NDI3Mg==", "bodyText": "I removed this code as it is no longer needed with the other changes.\nAs a note - the linter did not catch this.", "url": "https://github.com/all-of-us/workbench/pull/4180#discussion_r508084272", "createdAt": "2020-10-19T21:52:20Z", "author": {"login": "petesantos"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -40,97 +40,171 @@ const styles = reactStyles({\n   presetMenuItem: {\n     color: colors.primary,\n     fontSize: '14px'\n+  },\n+  formGrid: {\n+    display: 'grid',\n+    gridTemplateColumns: '1fr 1fr 1fr 1fr 3rem 1fr',\n+    gridGap: '1rem',\n+    alignItems: 'center'\n+  },\n+  workerConfigLabel: {\n+    fontWeight: 600,\n+    marginBottom: '0.5rem'\n   }\n });\n \n const defaultMachineType = allMachineTypes.find(({name}) => name === 'n1-standard-4');\n+enum ComputeType {\n+  standard = 'Standard VM',\n+  dataproc = 'Dataproc Cluster'\n+}\n \n export interface Props {\n   workspace: WorkspaceData;\n }\n \n-const MachineSelector = ({onChange, updatedMachine, masterMachineType}) => {\n-  const initialMachineType = fp.find(({name}) => name === masterMachineType, allMachineTypes) || defaultMachineType;\n+const MachineSelector = ({onChange, updatedMachine, machineType}) => {\n+  const initialMachineType = fp.find(({name}) => name === machineType, allMachineTypes) || defaultMachineType;\n   const {cpu, memory} = updatedMachine || initialMachineType;\n   const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n \n   return <Fragment>\n-    <div>\n-      <label htmlFor='runtime-cpu'\n-            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <label htmlFor='runtime-cpu' style={{marginRight: '.25rem'}}>CPUs</label>\n       <Dropdown id='runtime-cpu'\n-                options={fp.flow(\n-                  // Show all CPU options.\n-                  fp.map('cpu'),\n-                  // In the event that was remove a machine type from our set of valid\n-                  // configs, we want to continue to allow rendering of the value here.\n-                  // Union also makes the CPU values unique.\n-                  fp.union([cpu]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.sortBy('memory'),\n-                    fp.find({cpu: value}),\n-                    maybeGetMachine,\n-                    onChange)(validLeonardoMachineTypes)\n-                }\n-                value={cpu}/>\n-    </div>\n-    <div>\n-      <label htmlFor='runtime-ram'\n-            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+        options={fp.flow(\n+          // Show all CPU options.\n+          fp.map('cpu'),\n+          // In the event that was remove a machine type from our set of valid\n+          // configs, we want to continue to allow rendering of the value here.\n+          // Union also makes the CPU values unique.\n+          fp.union([cpu]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.sortBy('memory'),\n+            fp.find({cpu: value}),\n+            maybeGetMachine,\n+            onChange)(validLeonardoMachineTypes)\n+        }\n+        value={cpu}/>\n+      <label htmlFor='runtime-ram' style={{marginRight: '.25rem'}}>RAM (GB)</label>\n       <Dropdown id='runtime-ram'\n-                options={fp.flow(\n-                  // Show valid memory options as constrained by the currently selected CPU.\n-                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n-                  fp.map('memory'),\n-                  // See above comment on CPU union.\n-                  fp.union([memory]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.find({cpu, memory: value}),\n-                    // If the selected machine is not different from the current machine return null\n-                    maybeGetMachine,\n-                    onChange\n-                    )(validLeonardoMachineTypes) }\n-                value={memory}\n-                />\n-    </div>\n+        options={fp.flow(\n+          // Show valid memory options as constrained by the currently selected CPU.\n+          fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+          fp.map('memory'),\n+          // See above comment on CPU union.\n+          fp.union([memory]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.find({cpu, memory: value}),\n+            // If the selected machine is not different from the current machine return null\n+            maybeGetMachine,\n+            onChange\n+            )(validLeonardoMachineTypes) }\n+        value={memory}\n+        />\n   </Fragment>;\n };\n \n-const DiskSizeSelection = ({onChange, updatedDiskSize, masterDiskSize}) => {\n-  return <div>\n-    <label htmlFor='runtime-disk'\n-          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n-      <InputNumber id='runtime-disk'\n-                showButtons\n-                decrementButtonClassName='p-button-secondary'\n-                incrementButtonClassName='p-button-secondary'\n-                value={updatedDiskSize || masterDiskSize}\n-                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n-                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n-                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n-  </div>;\n+const DiskSizeSelection = ({onChange, updatedDiskSize, diskSize}) => {\n+  return <Fragment>\n+    <label htmlFor='runtime-disk' style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+    <InputNumber id='runtime-disk'\n+      showButtons\n+      decrementButtonClassName='p-button-secondary'\n+      incrementButtonClassName='p-button-secondary'\n+      value={updatedDiskSize || diskSize}\n+      inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+      onChange={({value}) => onChange(value)}\n+      min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </Fragment>;\n+};\n+\n+const DataProcConfig = ({onChange, dataprocConfig}) => {\n+  const {\n+    workerMachineType = defaultMachineType,\n+    workerDiskSize = 50,\n+    numberOfWorkers = 2,\n+    numberOfPreemptibleWorkers = 0\n+  } = dataprocConfig || {};\n+  const [updatedNumWorkers, setUpdatedNumWorkers] = useState(numberOfWorkers);\n+  const [updatedPreemtible, setUpdatedPreemptible] = useState(numberOfPreemptibleWorkers);\n+  const [updatedWorkerMachine, setUpdatedWorkerMachine] = useState(null);\n+  const [updatedDiskSize, setUpdatedDiskSize] = useState(workerDiskSize);\n+\n+  useEffect(() => {\n+    const machineType = updatedWorkerMachine && updatedWorkerMachine.name;\n+    const dataprocConfigChanged = updatedNumWorkers !== numberOfWorkers ||\n+    updatedPreemtible !== numberOfPreemptibleWorkers ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0MDEwNg=="}, "originalCommit": {"oid": "c42240e4a505338e2e97aa6e29791d63e290c0d5"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mzk4OTU0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjowMzo1OVrOHjQ_XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjowMzo1OVrOHjQ_XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0MDU3Mg==", "bodyText": "Can you explain this - possibly via code comment? Why do we want to dispatch an onChange(null) on cleanup? Does this handle the scenario where the user switches the cloud service back to GCE?", "url": "https://github.com/all-of-us/workbench/pull/4180#discussion_r506740572", "createdAt": "2020-10-16T22:03:59Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -40,97 +40,171 @@ const styles = reactStyles({\n   presetMenuItem: {\n     color: colors.primary,\n     fontSize: '14px'\n+  },\n+  formGrid: {\n+    display: 'grid',\n+    gridTemplateColumns: '1fr 1fr 1fr 1fr 3rem 1fr',\n+    gridGap: '1rem',\n+    alignItems: 'center'\n+  },\n+  workerConfigLabel: {\n+    fontWeight: 600,\n+    marginBottom: '0.5rem'\n   }\n });\n \n const defaultMachineType = allMachineTypes.find(({name}) => name === 'n1-standard-4');\n+enum ComputeType {\n+  standard = 'Standard VM',\n+  dataproc = 'Dataproc Cluster'\n+}\n \n export interface Props {\n   workspace: WorkspaceData;\n }\n \n-const MachineSelector = ({onChange, updatedMachine, masterMachineType}) => {\n-  const initialMachineType = fp.find(({name}) => name === masterMachineType, allMachineTypes) || defaultMachineType;\n+const MachineSelector = ({onChange, updatedMachine, machineType}) => {\n+  const initialMachineType = fp.find(({name}) => name === machineType, allMachineTypes) || defaultMachineType;\n   const {cpu, memory} = updatedMachine || initialMachineType;\n   const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n \n   return <Fragment>\n-    <div>\n-      <label htmlFor='runtime-cpu'\n-            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <label htmlFor='runtime-cpu' style={{marginRight: '.25rem'}}>CPUs</label>\n       <Dropdown id='runtime-cpu'\n-                options={fp.flow(\n-                  // Show all CPU options.\n-                  fp.map('cpu'),\n-                  // In the event that was remove a machine type from our set of valid\n-                  // configs, we want to continue to allow rendering of the value here.\n-                  // Union also makes the CPU values unique.\n-                  fp.union([cpu]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.sortBy('memory'),\n-                    fp.find({cpu: value}),\n-                    maybeGetMachine,\n-                    onChange)(validLeonardoMachineTypes)\n-                }\n-                value={cpu}/>\n-    </div>\n-    <div>\n-      <label htmlFor='runtime-ram'\n-            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+        options={fp.flow(\n+          // Show all CPU options.\n+          fp.map('cpu'),\n+          // In the event that was remove a machine type from our set of valid\n+          // configs, we want to continue to allow rendering of the value here.\n+          // Union also makes the CPU values unique.\n+          fp.union([cpu]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.sortBy('memory'),\n+            fp.find({cpu: value}),\n+            maybeGetMachine,\n+            onChange)(validLeonardoMachineTypes)\n+        }\n+        value={cpu}/>\n+      <label htmlFor='runtime-ram' style={{marginRight: '.25rem'}}>RAM (GB)</label>\n       <Dropdown id='runtime-ram'\n-                options={fp.flow(\n-                  // Show valid memory options as constrained by the currently selected CPU.\n-                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n-                  fp.map('memory'),\n-                  // See above comment on CPU union.\n-                  fp.union([memory]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.find({cpu, memory: value}),\n-                    // If the selected machine is not different from the current machine return null\n-                    maybeGetMachine,\n-                    onChange\n-                    )(validLeonardoMachineTypes) }\n-                value={memory}\n-                />\n-    </div>\n+        options={fp.flow(\n+          // Show valid memory options as constrained by the currently selected CPU.\n+          fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+          fp.map('memory'),\n+          // See above comment on CPU union.\n+          fp.union([memory]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.find({cpu, memory: value}),\n+            // If the selected machine is not different from the current machine return null\n+            maybeGetMachine,\n+            onChange\n+            )(validLeonardoMachineTypes) }\n+        value={memory}\n+        />\n   </Fragment>;\n };\n \n-const DiskSizeSelection = ({onChange, updatedDiskSize, masterDiskSize}) => {\n-  return <div>\n-    <label htmlFor='runtime-disk'\n-          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n-      <InputNumber id='runtime-disk'\n-                showButtons\n-                decrementButtonClassName='p-button-secondary'\n-                incrementButtonClassName='p-button-secondary'\n-                value={updatedDiskSize || masterDiskSize}\n-                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n-                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n-                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n-  </div>;\n+const DiskSizeSelection = ({onChange, updatedDiskSize, diskSize}) => {\n+  return <Fragment>\n+    <label htmlFor='runtime-disk' style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+    <InputNumber id='runtime-disk'\n+      showButtons\n+      decrementButtonClassName='p-button-secondary'\n+      incrementButtonClassName='p-button-secondary'\n+      value={updatedDiskSize || diskSize}\n+      inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+      onChange={({value}) => onChange(value)}\n+      min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </Fragment>;\n+};\n+\n+const DataProcConfig = ({onChange, dataprocConfig}) => {\n+  const {\n+    workerMachineType = defaultMachineType,\n+    workerDiskSize = 50,\n+    numberOfWorkers = 2,\n+    numberOfPreemptibleWorkers = 0\n+  } = dataprocConfig || {};\n+  const [updatedNumWorkers, setUpdatedNumWorkers] = useState(numberOfWorkers);\n+  const [updatedPreemtible, setUpdatedPreemptible] = useState(numberOfPreemptibleWorkers);\n+  const [updatedWorkerMachine, setUpdatedWorkerMachine] = useState(null);\n+  const [updatedDiskSize, setUpdatedDiskSize] = useState(workerDiskSize);\n+\n+  useEffect(() => {\n+    const machineType = updatedWorkerMachine && updatedWorkerMachine.name;\n+    const dataprocConfigChanged = updatedNumWorkers !== numberOfWorkers ||\n+    updatedPreemtible !== numberOfPreemptibleWorkers ||\n+    updatedDiskSize !== workerDiskSize ||\n+    updatedWorkerMachine ||\n+    !dataprocConfig;\n+\n+    onChange(dataprocConfigChanged ? {\n+      workerMachineType: machineType,\n+      workerDiskSize: updatedDiskSize,\n+      numberOfWorkers: updatedNumWorkers,\n+      numberOfPreemptibleWorkers: updatedPreemtible\n+    } : null);\n+\n+    return () => onChange(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c42240e4a505338e2e97aa6e29791d63e290c0d5"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mzk5MzQ3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjowNTozM1rOHjRBdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTo1MjoyNFrOHkjATw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0MTExMQ==", "bodyText": "Please document the semantics somewhere. Specifically - onChange(null) as a sentinel to indicate \"no change from current runtime\" requires deep code inspection to understand.", "url": "https://github.com/all-of-us/workbench/pull/4180#discussion_r506741111", "createdAt": "2020-10-16T22:05:33Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -40,97 +40,171 @@ const styles = reactStyles({\n   presetMenuItem: {\n     color: colors.primary,\n     fontSize: '14px'\n+  },\n+  formGrid: {\n+    display: 'grid',\n+    gridTemplateColumns: '1fr 1fr 1fr 1fr 3rem 1fr',\n+    gridGap: '1rem',\n+    alignItems: 'center'\n+  },\n+  workerConfigLabel: {\n+    fontWeight: 600,\n+    marginBottom: '0.5rem'\n   }\n });\n \n const defaultMachineType = allMachineTypes.find(({name}) => name === 'n1-standard-4');\n+enum ComputeType {\n+  standard = 'Standard VM',\n+  dataproc = 'Dataproc Cluster'\n+}\n \n export interface Props {\n   workspace: WorkspaceData;\n }\n \n-const MachineSelector = ({onChange, updatedMachine, masterMachineType}) => {\n-  const initialMachineType = fp.find(({name}) => name === masterMachineType, allMachineTypes) || defaultMachineType;\n+const MachineSelector = ({onChange, updatedMachine, machineType}) => {\n+  const initialMachineType = fp.find(({name}) => name === machineType, allMachineTypes) || defaultMachineType;\n   const {cpu, memory} = updatedMachine || initialMachineType;\n   const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n \n   return <Fragment>\n-    <div>\n-      <label htmlFor='runtime-cpu'\n-            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <label htmlFor='runtime-cpu' style={{marginRight: '.25rem'}}>CPUs</label>\n       <Dropdown id='runtime-cpu'\n-                options={fp.flow(\n-                  // Show all CPU options.\n-                  fp.map('cpu'),\n-                  // In the event that was remove a machine type from our set of valid\n-                  // configs, we want to continue to allow rendering of the value here.\n-                  // Union also makes the CPU values unique.\n-                  fp.union([cpu]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.sortBy('memory'),\n-                    fp.find({cpu: value}),\n-                    maybeGetMachine,\n-                    onChange)(validLeonardoMachineTypes)\n-                }\n-                value={cpu}/>\n-    </div>\n-    <div>\n-      <label htmlFor='runtime-ram'\n-            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+        options={fp.flow(\n+          // Show all CPU options.\n+          fp.map('cpu'),\n+          // In the event that was remove a machine type from our set of valid\n+          // configs, we want to continue to allow rendering of the value here.\n+          // Union also makes the CPU values unique.\n+          fp.union([cpu]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.sortBy('memory'),\n+            fp.find({cpu: value}),\n+            maybeGetMachine,\n+            onChange)(validLeonardoMachineTypes)\n+        }\n+        value={cpu}/>\n+      <label htmlFor='runtime-ram' style={{marginRight: '.25rem'}}>RAM (GB)</label>\n       <Dropdown id='runtime-ram'\n-                options={fp.flow(\n-                  // Show valid memory options as constrained by the currently selected CPU.\n-                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n-                  fp.map('memory'),\n-                  // See above comment on CPU union.\n-                  fp.union([memory]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.find({cpu, memory: value}),\n-                    // If the selected machine is not different from the current machine return null\n-                    maybeGetMachine,\n-                    onChange\n-                    )(validLeonardoMachineTypes) }\n-                value={memory}\n-                />\n-    </div>\n+        options={fp.flow(\n+          // Show valid memory options as constrained by the currently selected CPU.\n+          fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+          fp.map('memory'),\n+          // See above comment on CPU union.\n+          fp.union([memory]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.find({cpu, memory: value}),\n+            // If the selected machine is not different from the current machine return null\n+            maybeGetMachine,\n+            onChange\n+            )(validLeonardoMachineTypes) }\n+        value={memory}\n+        />\n   </Fragment>;\n };\n \n-const DiskSizeSelection = ({onChange, updatedDiskSize, masterDiskSize}) => {\n-  return <div>\n-    <label htmlFor='runtime-disk'\n-          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n-      <InputNumber id='runtime-disk'\n-                showButtons\n-                decrementButtonClassName='p-button-secondary'\n-                incrementButtonClassName='p-button-secondary'\n-                value={updatedDiskSize || masterDiskSize}\n-                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n-                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n-                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n-  </div>;\n+const DiskSizeSelection = ({onChange, updatedDiskSize, diskSize}) => {\n+  return <Fragment>\n+    <label htmlFor='runtime-disk' style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+    <InputNumber id='runtime-disk'\n+      showButtons\n+      decrementButtonClassName='p-button-secondary'\n+      incrementButtonClassName='p-button-secondary'\n+      value={updatedDiskSize || diskSize}\n+      inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+      onChange={({value}) => onChange(value)}\n+      min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </Fragment>;\n+};\n+\n+const DataProcConfig = ({onChange, dataprocConfig}) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c42240e4a505338e2e97aa6e29791d63e290c0d5"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4NDMwMw==", "bodyText": "I changed the code to no longer do this - here and in the other locations.", "url": "https://github.com/all-of-us/workbench/pull/4180#discussion_r508084303", "createdAt": "2020-10-19T21:52:24Z", "author": {"login": "petesantos"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -40,97 +40,171 @@ const styles = reactStyles({\n   presetMenuItem: {\n     color: colors.primary,\n     fontSize: '14px'\n+  },\n+  formGrid: {\n+    display: 'grid',\n+    gridTemplateColumns: '1fr 1fr 1fr 1fr 3rem 1fr',\n+    gridGap: '1rem',\n+    alignItems: 'center'\n+  },\n+  workerConfigLabel: {\n+    fontWeight: 600,\n+    marginBottom: '0.5rem'\n   }\n });\n \n const defaultMachineType = allMachineTypes.find(({name}) => name === 'n1-standard-4');\n+enum ComputeType {\n+  standard = 'Standard VM',\n+  dataproc = 'Dataproc Cluster'\n+}\n \n export interface Props {\n   workspace: WorkspaceData;\n }\n \n-const MachineSelector = ({onChange, updatedMachine, masterMachineType}) => {\n-  const initialMachineType = fp.find(({name}) => name === masterMachineType, allMachineTypes) || defaultMachineType;\n+const MachineSelector = ({onChange, updatedMachine, machineType}) => {\n+  const initialMachineType = fp.find(({name}) => name === machineType, allMachineTypes) || defaultMachineType;\n   const {cpu, memory} = updatedMachine || initialMachineType;\n   const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n \n   return <Fragment>\n-    <div>\n-      <label htmlFor='runtime-cpu'\n-            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <label htmlFor='runtime-cpu' style={{marginRight: '.25rem'}}>CPUs</label>\n       <Dropdown id='runtime-cpu'\n-                options={fp.flow(\n-                  // Show all CPU options.\n-                  fp.map('cpu'),\n-                  // In the event that was remove a machine type from our set of valid\n-                  // configs, we want to continue to allow rendering of the value here.\n-                  // Union also makes the CPU values unique.\n-                  fp.union([cpu]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.sortBy('memory'),\n-                    fp.find({cpu: value}),\n-                    maybeGetMachine,\n-                    onChange)(validLeonardoMachineTypes)\n-                }\n-                value={cpu}/>\n-    </div>\n-    <div>\n-      <label htmlFor='runtime-ram'\n-            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+        options={fp.flow(\n+          // Show all CPU options.\n+          fp.map('cpu'),\n+          // In the event that was remove a machine type from our set of valid\n+          // configs, we want to continue to allow rendering of the value here.\n+          // Union also makes the CPU values unique.\n+          fp.union([cpu]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.sortBy('memory'),\n+            fp.find({cpu: value}),\n+            maybeGetMachine,\n+            onChange)(validLeonardoMachineTypes)\n+        }\n+        value={cpu}/>\n+      <label htmlFor='runtime-ram' style={{marginRight: '.25rem'}}>RAM (GB)</label>\n       <Dropdown id='runtime-ram'\n-                options={fp.flow(\n-                  // Show valid memory options as constrained by the currently selected CPU.\n-                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n-                  fp.map('memory'),\n-                  // See above comment on CPU union.\n-                  fp.union([memory]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.find({cpu, memory: value}),\n-                    // If the selected machine is not different from the current machine return null\n-                    maybeGetMachine,\n-                    onChange\n-                    )(validLeonardoMachineTypes) }\n-                value={memory}\n-                />\n-    </div>\n+        options={fp.flow(\n+          // Show valid memory options as constrained by the currently selected CPU.\n+          fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+          fp.map('memory'),\n+          // See above comment on CPU union.\n+          fp.union([memory]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.find({cpu, memory: value}),\n+            // If the selected machine is not different from the current machine return null\n+            maybeGetMachine,\n+            onChange\n+            )(validLeonardoMachineTypes) }\n+        value={memory}\n+        />\n   </Fragment>;\n };\n \n-const DiskSizeSelection = ({onChange, updatedDiskSize, masterDiskSize}) => {\n-  return <div>\n-    <label htmlFor='runtime-disk'\n-          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n-      <InputNumber id='runtime-disk'\n-                showButtons\n-                decrementButtonClassName='p-button-secondary'\n-                incrementButtonClassName='p-button-secondary'\n-                value={updatedDiskSize || masterDiskSize}\n-                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n-                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n-                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n-  </div>;\n+const DiskSizeSelection = ({onChange, updatedDiskSize, diskSize}) => {\n+  return <Fragment>\n+    <label htmlFor='runtime-disk' style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+    <InputNumber id='runtime-disk'\n+      showButtons\n+      decrementButtonClassName='p-button-secondary'\n+      incrementButtonClassName='p-button-secondary'\n+      value={updatedDiskSize || diskSize}\n+      inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+      onChange={({value}) => onChange(value)}\n+      min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </Fragment>;\n+};\n+\n+const DataProcConfig = ({onChange, dataprocConfig}) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0MTExMQ=="}, "originalCommit": {"oid": "c42240e4a505338e2e97aa6e29791d63e290c0d5"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NDAyMTE4OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjoxOTo1MVrOHjRRog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjowNToxMFrOHkjV4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0NTI1MA==", "bodyText": "Nice. I actually did not think it worked this way (I think later we might need to slightly clarify our UX to make this clearer). I'm asking Leo team to clarify their docs on this, since I actually didn't find a definitive answer (but I assume this is correct, since Terra UI does it this way).", "url": "https://github.com/all-of-us/workbench/pull/4180#discussion_r506745250", "createdAt": "2020-10-16T22:19:51Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -40,97 +40,171 @@ const styles = reactStyles({\n   presetMenuItem: {\n     color: colors.primary,\n     fontSize: '14px'\n+  },\n+  formGrid: {\n+    display: 'grid',\n+    gridTemplateColumns: '1fr 1fr 1fr 1fr 3rem 1fr',\n+    gridGap: '1rem',\n+    alignItems: 'center'\n+  },\n+  workerConfigLabel: {\n+    fontWeight: 600,\n+    marginBottom: '0.5rem'\n   }\n });\n \n const defaultMachineType = allMachineTypes.find(({name}) => name === 'n1-standard-4');\n+enum ComputeType {\n+  standard = 'Standard VM',\n+  dataproc = 'Dataproc Cluster'\n+}\n \n export interface Props {\n   workspace: WorkspaceData;\n }\n \n-const MachineSelector = ({onChange, updatedMachine, masterMachineType}) => {\n-  const initialMachineType = fp.find(({name}) => name === masterMachineType, allMachineTypes) || defaultMachineType;\n+const MachineSelector = ({onChange, updatedMachine, machineType}) => {\n+  const initialMachineType = fp.find(({name}) => name === machineType, allMachineTypes) || defaultMachineType;\n   const {cpu, memory} = updatedMachine || initialMachineType;\n   const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n \n   return <Fragment>\n-    <div>\n-      <label htmlFor='runtime-cpu'\n-            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <label htmlFor='runtime-cpu' style={{marginRight: '.25rem'}}>CPUs</label>\n       <Dropdown id='runtime-cpu'\n-                options={fp.flow(\n-                  // Show all CPU options.\n-                  fp.map('cpu'),\n-                  // In the event that was remove a machine type from our set of valid\n-                  // configs, we want to continue to allow rendering of the value here.\n-                  // Union also makes the CPU values unique.\n-                  fp.union([cpu]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.sortBy('memory'),\n-                    fp.find({cpu: value}),\n-                    maybeGetMachine,\n-                    onChange)(validLeonardoMachineTypes)\n-                }\n-                value={cpu}/>\n-    </div>\n-    <div>\n-      <label htmlFor='runtime-ram'\n-            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+        options={fp.flow(\n+          // Show all CPU options.\n+          fp.map('cpu'),\n+          // In the event that was remove a machine type from our set of valid\n+          // configs, we want to continue to allow rendering of the value here.\n+          // Union also makes the CPU values unique.\n+          fp.union([cpu]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.sortBy('memory'),\n+            fp.find({cpu: value}),\n+            maybeGetMachine,\n+            onChange)(validLeonardoMachineTypes)\n+        }\n+        value={cpu}/>\n+      <label htmlFor='runtime-ram' style={{marginRight: '.25rem'}}>RAM (GB)</label>\n       <Dropdown id='runtime-ram'\n-                options={fp.flow(\n-                  // Show valid memory options as constrained by the currently selected CPU.\n-                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n-                  fp.map('memory'),\n-                  // See above comment on CPU union.\n-                  fp.union([memory]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.find({cpu, memory: value}),\n-                    // If the selected machine is not different from the current machine return null\n-                    maybeGetMachine,\n-                    onChange\n-                    )(validLeonardoMachineTypes) }\n-                value={memory}\n-                />\n-    </div>\n+        options={fp.flow(\n+          // Show valid memory options as constrained by the currently selected CPU.\n+          fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+          fp.map('memory'),\n+          // See above comment on CPU union.\n+          fp.union([memory]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.find({cpu, memory: value}),\n+            // If the selected machine is not different from the current machine return null\n+            maybeGetMachine,\n+            onChange\n+            )(validLeonardoMachineTypes) }\n+        value={memory}\n+        />\n   </Fragment>;\n };\n \n-const DiskSizeSelection = ({onChange, updatedDiskSize, masterDiskSize}) => {\n-  return <div>\n-    <label htmlFor='runtime-disk'\n-          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n-      <InputNumber id='runtime-disk'\n-                showButtons\n-                decrementButtonClassName='p-button-secondary'\n-                incrementButtonClassName='p-button-secondary'\n-                value={updatedDiskSize || masterDiskSize}\n-                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n-                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n-                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n-  </div>;\n+const DiskSizeSelection = ({onChange, updatedDiskSize, diskSize}) => {\n+  return <Fragment>\n+    <label htmlFor='runtime-disk' style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+    <InputNumber id='runtime-disk'\n+      showButtons\n+      decrementButtonClassName='p-button-secondary'\n+      incrementButtonClassName='p-button-secondary'\n+      value={updatedDiskSize || diskSize}\n+      inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+      onChange={({value}) => onChange(value)}\n+      min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </Fragment>;\n+};\n+\n+const DataProcConfig = ({onChange, dataprocConfig}) => {\n+  const {\n+    workerMachineType = defaultMachineType,\n+    workerDiskSize = 50,\n+    numberOfWorkers = 2,\n+    numberOfPreemptibleWorkers = 0\n+  } = dataprocConfig || {};\n+  const [updatedNumWorkers, setUpdatedNumWorkers] = useState(numberOfWorkers);\n+  const [updatedPreemtible, setUpdatedPreemptible] = useState(numberOfPreemptibleWorkers);\n+  const [updatedWorkerMachine, setUpdatedWorkerMachine] = useState(null);\n+  const [updatedDiskSize, setUpdatedDiskSize] = useState(workerDiskSize);\n+\n+  useEffect(() => {\n+    const machineType = updatedWorkerMachine && updatedWorkerMachine.name;\n+    const dataprocConfigChanged = updatedNumWorkers !== numberOfWorkers ||\n+    updatedPreemtible !== numberOfPreemptibleWorkers ||\n+    updatedDiskSize !== workerDiskSize ||\n+    updatedWorkerMachine ||\n+    !dataprocConfig;\n+\n+    onChange(dataprocConfigChanged ? {\n+      workerMachineType: machineType,\n+      workerDiskSize: updatedDiskSize,\n+      numberOfWorkers: updatedNumWorkers,\n+      numberOfPreemptibleWorkers: updatedPreemtible\n+    } : null);\n+\n+    return () => onChange(null);\n+  }, [updatedNumWorkers, updatedPreemtible, updatedWorkerMachine, updatedDiskSize]);\n+\n+\n+  return <fieldset style={{marginTop: '0.75rem'}}>\n+    <legend style={styles.workerConfigLabel}>Worker Config</legend>\n+    <div style={styles.formGrid}>\n+      <label htmlFor='num-workers' style={{marginRight: '.25rem'}}>Workers</label>\n+      <InputNumber id='num-workers'\n+        showButtons\n+        decrementButtonClassName='p-button-secondary'\n+        incrementButtonClassName='p-button-secondary'\n+        value={updatedNumWorkers}\n+        inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+        onChange={({value}) => {\n+          setUpdatedNumWorkers(value);\n+          if (updatedNumWorkers < updatedPreemtible) {\n+            setUpdatedPreemptible(updatedNumWorkers);\n+          }\n+        }}\n+        min={2}/>\n+      <label htmlFor='num-preemptible' style={{marginRight: '.25rem'}}>Preemptible</label>\n+      <InputNumber id='num-preemptible'\n+        showButtons\n+        decrementButtonClassName='p-button-secondary'\n+        incrementButtonClassName='p-button-secondary'\n+        value={updatedNumWorkers < updatedPreemtible ? updatedNumWorkers : updatedPreemtible}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c42240e4a505338e2e97aa6e29791d63e290c0d5"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4OTgyNw==", "bodyText": "Implications per slack updates: just let the preemtible worker count update independently of numWorkers.", "url": "https://github.com/all-of-us/workbench/pull/4180#discussion_r508089827", "createdAt": "2020-10-19T22:05:10Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -40,97 +40,171 @@ const styles = reactStyles({\n   presetMenuItem: {\n     color: colors.primary,\n     fontSize: '14px'\n+  },\n+  formGrid: {\n+    display: 'grid',\n+    gridTemplateColumns: '1fr 1fr 1fr 1fr 3rem 1fr',\n+    gridGap: '1rem',\n+    alignItems: 'center'\n+  },\n+  workerConfigLabel: {\n+    fontWeight: 600,\n+    marginBottom: '0.5rem'\n   }\n });\n \n const defaultMachineType = allMachineTypes.find(({name}) => name === 'n1-standard-4');\n+enum ComputeType {\n+  standard = 'Standard VM',\n+  dataproc = 'Dataproc Cluster'\n+}\n \n export interface Props {\n   workspace: WorkspaceData;\n }\n \n-const MachineSelector = ({onChange, updatedMachine, masterMachineType}) => {\n-  const initialMachineType = fp.find(({name}) => name === masterMachineType, allMachineTypes) || defaultMachineType;\n+const MachineSelector = ({onChange, updatedMachine, machineType}) => {\n+  const initialMachineType = fp.find(({name}) => name === machineType, allMachineTypes) || defaultMachineType;\n   const {cpu, memory} = updatedMachine || initialMachineType;\n   const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n \n   return <Fragment>\n-    <div>\n-      <label htmlFor='runtime-cpu'\n-            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <label htmlFor='runtime-cpu' style={{marginRight: '.25rem'}}>CPUs</label>\n       <Dropdown id='runtime-cpu'\n-                options={fp.flow(\n-                  // Show all CPU options.\n-                  fp.map('cpu'),\n-                  // In the event that was remove a machine type from our set of valid\n-                  // configs, we want to continue to allow rendering of the value here.\n-                  // Union also makes the CPU values unique.\n-                  fp.union([cpu]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.sortBy('memory'),\n-                    fp.find({cpu: value}),\n-                    maybeGetMachine,\n-                    onChange)(validLeonardoMachineTypes)\n-                }\n-                value={cpu}/>\n-    </div>\n-    <div>\n-      <label htmlFor='runtime-ram'\n-            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+        options={fp.flow(\n+          // Show all CPU options.\n+          fp.map('cpu'),\n+          // In the event that was remove a machine type from our set of valid\n+          // configs, we want to continue to allow rendering of the value here.\n+          // Union also makes the CPU values unique.\n+          fp.union([cpu]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.sortBy('memory'),\n+            fp.find({cpu: value}),\n+            maybeGetMachine,\n+            onChange)(validLeonardoMachineTypes)\n+        }\n+        value={cpu}/>\n+      <label htmlFor='runtime-ram' style={{marginRight: '.25rem'}}>RAM (GB)</label>\n       <Dropdown id='runtime-ram'\n-                options={fp.flow(\n-                  // Show valid memory options as constrained by the currently selected CPU.\n-                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n-                  fp.map('memory'),\n-                  // See above comment on CPU union.\n-                  fp.union([memory]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.find({cpu, memory: value}),\n-                    // If the selected machine is not different from the current machine return null\n-                    maybeGetMachine,\n-                    onChange\n-                    )(validLeonardoMachineTypes) }\n-                value={memory}\n-                />\n-    </div>\n+        options={fp.flow(\n+          // Show valid memory options as constrained by the currently selected CPU.\n+          fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+          fp.map('memory'),\n+          // See above comment on CPU union.\n+          fp.union([memory]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.find({cpu, memory: value}),\n+            // If the selected machine is not different from the current machine return null\n+            maybeGetMachine,\n+            onChange\n+            )(validLeonardoMachineTypes) }\n+        value={memory}\n+        />\n   </Fragment>;\n };\n \n-const DiskSizeSelection = ({onChange, updatedDiskSize, masterDiskSize}) => {\n-  return <div>\n-    <label htmlFor='runtime-disk'\n-          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n-      <InputNumber id='runtime-disk'\n-                showButtons\n-                decrementButtonClassName='p-button-secondary'\n-                incrementButtonClassName='p-button-secondary'\n-                value={updatedDiskSize || masterDiskSize}\n-                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n-                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n-                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n-  </div>;\n+const DiskSizeSelection = ({onChange, updatedDiskSize, diskSize}) => {\n+  return <Fragment>\n+    <label htmlFor='runtime-disk' style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+    <InputNumber id='runtime-disk'\n+      showButtons\n+      decrementButtonClassName='p-button-secondary'\n+      incrementButtonClassName='p-button-secondary'\n+      value={updatedDiskSize || diskSize}\n+      inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+      onChange={({value}) => onChange(value)}\n+      min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </Fragment>;\n+};\n+\n+const DataProcConfig = ({onChange, dataprocConfig}) => {\n+  const {\n+    workerMachineType = defaultMachineType,\n+    workerDiskSize = 50,\n+    numberOfWorkers = 2,\n+    numberOfPreemptibleWorkers = 0\n+  } = dataprocConfig || {};\n+  const [updatedNumWorkers, setUpdatedNumWorkers] = useState(numberOfWorkers);\n+  const [updatedPreemtible, setUpdatedPreemptible] = useState(numberOfPreemptibleWorkers);\n+  const [updatedWorkerMachine, setUpdatedWorkerMachine] = useState(null);\n+  const [updatedDiskSize, setUpdatedDiskSize] = useState(workerDiskSize);\n+\n+  useEffect(() => {\n+    const machineType = updatedWorkerMachine && updatedWorkerMachine.name;\n+    const dataprocConfigChanged = updatedNumWorkers !== numberOfWorkers ||\n+    updatedPreemtible !== numberOfPreemptibleWorkers ||\n+    updatedDiskSize !== workerDiskSize ||\n+    updatedWorkerMachine ||\n+    !dataprocConfig;\n+\n+    onChange(dataprocConfigChanged ? {\n+      workerMachineType: machineType,\n+      workerDiskSize: updatedDiskSize,\n+      numberOfWorkers: updatedNumWorkers,\n+      numberOfPreemptibleWorkers: updatedPreemtible\n+    } : null);\n+\n+    return () => onChange(null);\n+  }, [updatedNumWorkers, updatedPreemtible, updatedWorkerMachine, updatedDiskSize]);\n+\n+\n+  return <fieldset style={{marginTop: '0.75rem'}}>\n+    <legend style={styles.workerConfigLabel}>Worker Config</legend>\n+    <div style={styles.formGrid}>\n+      <label htmlFor='num-workers' style={{marginRight: '.25rem'}}>Workers</label>\n+      <InputNumber id='num-workers'\n+        showButtons\n+        decrementButtonClassName='p-button-secondary'\n+        incrementButtonClassName='p-button-secondary'\n+        value={updatedNumWorkers}\n+        inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+        onChange={({value}) => {\n+          setUpdatedNumWorkers(value);\n+          if (updatedNumWorkers < updatedPreemtible) {\n+            setUpdatedPreemptible(updatedNumWorkers);\n+          }\n+        }}\n+        min={2}/>\n+      <label htmlFor='num-preemptible' style={{marginRight: '.25rem'}}>Preemptible</label>\n+      <InputNumber id='num-preemptible'\n+        showButtons\n+        decrementButtonClassName='p-button-secondary'\n+        incrementButtonClassName='p-button-secondary'\n+        value={updatedNumWorkers < updatedPreemtible ? updatedNumWorkers : updatedPreemtible}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0NTI1MA=="}, "originalCommit": {"oid": "c42240e4a505338e2e97aa6e29791d63e290c0d5"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NDAyNjI5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjoyMjo0MFrOHjRUsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjowMzoxNFrOHkjSvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0NjAzMg==", "bodyText": "If it works - I'd like to use 0 as the min here. Note that we decided to deviate from Terra UI in the mocks by not having an option of \"Spark master node\" - this is because it's redundant with just setting workers to 0. The \"2\" requirement is throwing me off - I don't think there's any reason we can't have a 1 worker cluster (though it's not very useful), so I'm not sure why that was the chosen minimum.", "url": "https://github.com/all-of-us/workbench/pull/4180#discussion_r506746032", "createdAt": "2020-10-16T22:22:40Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -40,97 +40,171 @@ const styles = reactStyles({\n   presetMenuItem: {\n     color: colors.primary,\n     fontSize: '14px'\n+  },\n+  formGrid: {\n+    display: 'grid',\n+    gridTemplateColumns: '1fr 1fr 1fr 1fr 3rem 1fr',\n+    gridGap: '1rem',\n+    alignItems: 'center'\n+  },\n+  workerConfigLabel: {\n+    fontWeight: 600,\n+    marginBottom: '0.5rem'\n   }\n });\n \n const defaultMachineType = allMachineTypes.find(({name}) => name === 'n1-standard-4');\n+enum ComputeType {\n+  standard = 'Standard VM',\n+  dataproc = 'Dataproc Cluster'\n+}\n \n export interface Props {\n   workspace: WorkspaceData;\n }\n \n-const MachineSelector = ({onChange, updatedMachine, masterMachineType}) => {\n-  const initialMachineType = fp.find(({name}) => name === masterMachineType, allMachineTypes) || defaultMachineType;\n+const MachineSelector = ({onChange, updatedMachine, machineType}) => {\n+  const initialMachineType = fp.find(({name}) => name === machineType, allMachineTypes) || defaultMachineType;\n   const {cpu, memory} = updatedMachine || initialMachineType;\n   const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n \n   return <Fragment>\n-    <div>\n-      <label htmlFor='runtime-cpu'\n-            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <label htmlFor='runtime-cpu' style={{marginRight: '.25rem'}}>CPUs</label>\n       <Dropdown id='runtime-cpu'\n-                options={fp.flow(\n-                  // Show all CPU options.\n-                  fp.map('cpu'),\n-                  // In the event that was remove a machine type from our set of valid\n-                  // configs, we want to continue to allow rendering of the value here.\n-                  // Union also makes the CPU values unique.\n-                  fp.union([cpu]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.sortBy('memory'),\n-                    fp.find({cpu: value}),\n-                    maybeGetMachine,\n-                    onChange)(validLeonardoMachineTypes)\n-                }\n-                value={cpu}/>\n-    </div>\n-    <div>\n-      <label htmlFor='runtime-ram'\n-            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+        options={fp.flow(\n+          // Show all CPU options.\n+          fp.map('cpu'),\n+          // In the event that was remove a machine type from our set of valid\n+          // configs, we want to continue to allow rendering of the value here.\n+          // Union also makes the CPU values unique.\n+          fp.union([cpu]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.sortBy('memory'),\n+            fp.find({cpu: value}),\n+            maybeGetMachine,\n+            onChange)(validLeonardoMachineTypes)\n+        }\n+        value={cpu}/>\n+      <label htmlFor='runtime-ram' style={{marginRight: '.25rem'}}>RAM (GB)</label>\n       <Dropdown id='runtime-ram'\n-                options={fp.flow(\n-                  // Show valid memory options as constrained by the currently selected CPU.\n-                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n-                  fp.map('memory'),\n-                  // See above comment on CPU union.\n-                  fp.union([memory]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.find({cpu, memory: value}),\n-                    // If the selected machine is not different from the current machine return null\n-                    maybeGetMachine,\n-                    onChange\n-                    )(validLeonardoMachineTypes) }\n-                value={memory}\n-                />\n-    </div>\n+        options={fp.flow(\n+          // Show valid memory options as constrained by the currently selected CPU.\n+          fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+          fp.map('memory'),\n+          // See above comment on CPU union.\n+          fp.union([memory]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.find({cpu, memory: value}),\n+            // If the selected machine is not different from the current machine return null\n+            maybeGetMachine,\n+            onChange\n+            )(validLeonardoMachineTypes) }\n+        value={memory}\n+        />\n   </Fragment>;\n };\n \n-const DiskSizeSelection = ({onChange, updatedDiskSize, masterDiskSize}) => {\n-  return <div>\n-    <label htmlFor='runtime-disk'\n-          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n-      <InputNumber id='runtime-disk'\n-                showButtons\n-                decrementButtonClassName='p-button-secondary'\n-                incrementButtonClassName='p-button-secondary'\n-                value={updatedDiskSize || masterDiskSize}\n-                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n-                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n-                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n-  </div>;\n+const DiskSizeSelection = ({onChange, updatedDiskSize, diskSize}) => {\n+  return <Fragment>\n+    <label htmlFor='runtime-disk' style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+    <InputNumber id='runtime-disk'\n+      showButtons\n+      decrementButtonClassName='p-button-secondary'\n+      incrementButtonClassName='p-button-secondary'\n+      value={updatedDiskSize || diskSize}\n+      inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+      onChange={({value}) => onChange(value)}\n+      min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </Fragment>;\n+};\n+\n+const DataProcConfig = ({onChange, dataprocConfig}) => {\n+  const {\n+    workerMachineType = defaultMachineType,\n+    workerDiskSize = 50,\n+    numberOfWorkers = 2,\n+    numberOfPreemptibleWorkers = 0\n+  } = dataprocConfig || {};\n+  const [updatedNumWorkers, setUpdatedNumWorkers] = useState(numberOfWorkers);\n+  const [updatedPreemtible, setUpdatedPreemptible] = useState(numberOfPreemptibleWorkers);\n+  const [updatedWorkerMachine, setUpdatedWorkerMachine] = useState(null);\n+  const [updatedDiskSize, setUpdatedDiskSize] = useState(workerDiskSize);\n+\n+  useEffect(() => {\n+    const machineType = updatedWorkerMachine && updatedWorkerMachine.name;\n+    const dataprocConfigChanged = updatedNumWorkers !== numberOfWorkers ||\n+    updatedPreemtible !== numberOfPreemptibleWorkers ||\n+    updatedDiskSize !== workerDiskSize ||\n+    updatedWorkerMachine ||\n+    !dataprocConfig;\n+\n+    onChange(dataprocConfigChanged ? {\n+      workerMachineType: machineType,\n+      workerDiskSize: updatedDiskSize,\n+      numberOfWorkers: updatedNumWorkers,\n+      numberOfPreemptibleWorkers: updatedPreemtible\n+    } : null);\n+\n+    return () => onChange(null);\n+  }, [updatedNumWorkers, updatedPreemtible, updatedWorkerMachine, updatedDiskSize]);\n+\n+\n+  return <fieldset style={{marginTop: '0.75rem'}}>\n+    <legend style={styles.workerConfigLabel}>Worker Config</legend>\n+    <div style={styles.formGrid}>\n+      <label htmlFor='num-workers' style={{marginRight: '.25rem'}}>Workers</label>\n+      <InputNumber id='num-workers'\n+        showButtons\n+        decrementButtonClassName='p-button-secondary'\n+        incrementButtonClassName='p-button-secondary'\n+        value={updatedNumWorkers}\n+        inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+        onChange={({value}) => {\n+          setUpdatedNumWorkers(value);\n+          if (updatedNumWorkers < updatedPreemtible) {\n+            setUpdatedPreemptible(updatedNumWorkers);\n+          }\n+        }}\n+        min={2}/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c42240e4a505338e2e97aa6e29791d63e290c0d5"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4OTAyMg==", "bodyText": "Update: lets just go with what you have now (min=2). Apparently the rules are : It\u2019s also not possible to have a cluster with only preemptible nodes in it. You must have at least 3 regular nodes: the master and the first 2 workers.. I don't want to confuse users by offering this edge case third configuration, when we have GCE already available to them as an option.\nIf it gets requested later, probably we can just go with the Terra UI route, and add the \"master only\" version to the dropdown.", "url": "https://github.com/all-of-us/workbench/pull/4180#discussion_r508089022", "createdAt": "2020-10-19T22:03:14Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -40,97 +40,171 @@ const styles = reactStyles({\n   presetMenuItem: {\n     color: colors.primary,\n     fontSize: '14px'\n+  },\n+  formGrid: {\n+    display: 'grid',\n+    gridTemplateColumns: '1fr 1fr 1fr 1fr 3rem 1fr',\n+    gridGap: '1rem',\n+    alignItems: 'center'\n+  },\n+  workerConfigLabel: {\n+    fontWeight: 600,\n+    marginBottom: '0.5rem'\n   }\n });\n \n const defaultMachineType = allMachineTypes.find(({name}) => name === 'n1-standard-4');\n+enum ComputeType {\n+  standard = 'Standard VM',\n+  dataproc = 'Dataproc Cluster'\n+}\n \n export interface Props {\n   workspace: WorkspaceData;\n }\n \n-const MachineSelector = ({onChange, updatedMachine, masterMachineType}) => {\n-  const initialMachineType = fp.find(({name}) => name === masterMachineType, allMachineTypes) || defaultMachineType;\n+const MachineSelector = ({onChange, updatedMachine, machineType}) => {\n+  const initialMachineType = fp.find(({name}) => name === machineType, allMachineTypes) || defaultMachineType;\n   const {cpu, memory} = updatedMachine || initialMachineType;\n   const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n \n   return <Fragment>\n-    <div>\n-      <label htmlFor='runtime-cpu'\n-            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <label htmlFor='runtime-cpu' style={{marginRight: '.25rem'}}>CPUs</label>\n       <Dropdown id='runtime-cpu'\n-                options={fp.flow(\n-                  // Show all CPU options.\n-                  fp.map('cpu'),\n-                  // In the event that was remove a machine type from our set of valid\n-                  // configs, we want to continue to allow rendering of the value here.\n-                  // Union also makes the CPU values unique.\n-                  fp.union([cpu]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.sortBy('memory'),\n-                    fp.find({cpu: value}),\n-                    maybeGetMachine,\n-                    onChange)(validLeonardoMachineTypes)\n-                }\n-                value={cpu}/>\n-    </div>\n-    <div>\n-      <label htmlFor='runtime-ram'\n-            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+        options={fp.flow(\n+          // Show all CPU options.\n+          fp.map('cpu'),\n+          // In the event that was remove a machine type from our set of valid\n+          // configs, we want to continue to allow rendering of the value here.\n+          // Union also makes the CPU values unique.\n+          fp.union([cpu]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.sortBy('memory'),\n+            fp.find({cpu: value}),\n+            maybeGetMachine,\n+            onChange)(validLeonardoMachineTypes)\n+        }\n+        value={cpu}/>\n+      <label htmlFor='runtime-ram' style={{marginRight: '.25rem'}}>RAM (GB)</label>\n       <Dropdown id='runtime-ram'\n-                options={fp.flow(\n-                  // Show valid memory options as constrained by the currently selected CPU.\n-                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n-                  fp.map('memory'),\n-                  // See above comment on CPU union.\n-                  fp.union([memory]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.find({cpu, memory: value}),\n-                    // If the selected machine is not different from the current machine return null\n-                    maybeGetMachine,\n-                    onChange\n-                    )(validLeonardoMachineTypes) }\n-                value={memory}\n-                />\n-    </div>\n+        options={fp.flow(\n+          // Show valid memory options as constrained by the currently selected CPU.\n+          fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+          fp.map('memory'),\n+          // See above comment on CPU union.\n+          fp.union([memory]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.find({cpu, memory: value}),\n+            // If the selected machine is not different from the current machine return null\n+            maybeGetMachine,\n+            onChange\n+            )(validLeonardoMachineTypes) }\n+        value={memory}\n+        />\n   </Fragment>;\n };\n \n-const DiskSizeSelection = ({onChange, updatedDiskSize, masterDiskSize}) => {\n-  return <div>\n-    <label htmlFor='runtime-disk'\n-          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n-      <InputNumber id='runtime-disk'\n-                showButtons\n-                decrementButtonClassName='p-button-secondary'\n-                incrementButtonClassName='p-button-secondary'\n-                value={updatedDiskSize || masterDiskSize}\n-                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n-                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n-                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n-  </div>;\n+const DiskSizeSelection = ({onChange, updatedDiskSize, diskSize}) => {\n+  return <Fragment>\n+    <label htmlFor='runtime-disk' style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+    <InputNumber id='runtime-disk'\n+      showButtons\n+      decrementButtonClassName='p-button-secondary'\n+      incrementButtonClassName='p-button-secondary'\n+      value={updatedDiskSize || diskSize}\n+      inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+      onChange={({value}) => onChange(value)}\n+      min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </Fragment>;\n+};\n+\n+const DataProcConfig = ({onChange, dataprocConfig}) => {\n+  const {\n+    workerMachineType = defaultMachineType,\n+    workerDiskSize = 50,\n+    numberOfWorkers = 2,\n+    numberOfPreemptibleWorkers = 0\n+  } = dataprocConfig || {};\n+  const [updatedNumWorkers, setUpdatedNumWorkers] = useState(numberOfWorkers);\n+  const [updatedPreemtible, setUpdatedPreemptible] = useState(numberOfPreemptibleWorkers);\n+  const [updatedWorkerMachine, setUpdatedWorkerMachine] = useState(null);\n+  const [updatedDiskSize, setUpdatedDiskSize] = useState(workerDiskSize);\n+\n+  useEffect(() => {\n+    const machineType = updatedWorkerMachine && updatedWorkerMachine.name;\n+    const dataprocConfigChanged = updatedNumWorkers !== numberOfWorkers ||\n+    updatedPreemtible !== numberOfPreemptibleWorkers ||\n+    updatedDiskSize !== workerDiskSize ||\n+    updatedWorkerMachine ||\n+    !dataprocConfig;\n+\n+    onChange(dataprocConfigChanged ? {\n+      workerMachineType: machineType,\n+      workerDiskSize: updatedDiskSize,\n+      numberOfWorkers: updatedNumWorkers,\n+      numberOfPreemptibleWorkers: updatedPreemtible\n+    } : null);\n+\n+    return () => onChange(null);\n+  }, [updatedNumWorkers, updatedPreemtible, updatedWorkerMachine, updatedDiskSize]);\n+\n+\n+  return <fieldset style={{marginTop: '0.75rem'}}>\n+    <legend style={styles.workerConfigLabel}>Worker Config</legend>\n+    <div style={styles.formGrid}>\n+      <label htmlFor='num-workers' style={{marginRight: '.25rem'}}>Workers</label>\n+      <InputNumber id='num-workers'\n+        showButtons\n+        decrementButtonClassName='p-button-secondary'\n+        incrementButtonClassName='p-button-secondary'\n+        value={updatedNumWorkers}\n+        inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+        onChange={({value}) => {\n+          setUpdatedNumWorkers(value);\n+          if (updatedNumWorkers < updatedPreemtible) {\n+            setUpdatedPreemptible(updatedNumWorkers);\n+          }\n+        }}\n+        min={2}/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0NjAzMg=="}, "originalCommit": {"oid": "c42240e4a505338e2e97aa6e29791d63e290c0d5"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NDAyOTk5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjoyNDo0OVrOHjRW2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjoyNDo0OVrOHjRW2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0NjU4Ng==", "bodyText": "Nice", "url": "https://github.com/all-of-us/workbench/pull/4180#discussion_r506746586", "createdAt": "2020-10-16T22:24:49Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -40,97 +40,171 @@ const styles = reactStyles({\n   presetMenuItem: {\n     color: colors.primary,\n     fontSize: '14px'\n+  },\n+  formGrid: {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c42240e4a505338e2e97aa6e29791d63e290c0d5"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NDAzMzIwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjoyNjoyNFrOHjRYnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjoyNjoyNFrOHjRYnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0NzAzNg==", "bodyText": "opt_nit: DiskSizeSelector?", "url": "https://github.com/all-of-us/workbench/pull/4180#discussion_r506747036", "createdAt": "2020-10-16T22:26:24Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -40,97 +40,171 @@ const styles = reactStyles({\n   presetMenuItem: {\n     color: colors.primary,\n     fontSize: '14px'\n+  },\n+  formGrid: {\n+    display: 'grid',\n+    gridTemplateColumns: '1fr 1fr 1fr 1fr 3rem 1fr',\n+    gridGap: '1rem',\n+    alignItems: 'center'\n+  },\n+  workerConfigLabel: {\n+    fontWeight: 600,\n+    marginBottom: '0.5rem'\n   }\n });\n \n const defaultMachineType = allMachineTypes.find(({name}) => name === 'n1-standard-4');\n+enum ComputeType {\n+  standard = 'Standard VM',\n+  dataproc = 'Dataproc Cluster'\n+}\n \n export interface Props {\n   workspace: WorkspaceData;\n }\n \n-const MachineSelector = ({onChange, updatedMachine, masterMachineType}) => {\n-  const initialMachineType = fp.find(({name}) => name === masterMachineType, allMachineTypes) || defaultMachineType;\n+const MachineSelector = ({onChange, updatedMachine, machineType}) => {\n+  const initialMachineType = fp.find(({name}) => name === machineType, allMachineTypes) || defaultMachineType;\n   const {cpu, memory} = updatedMachine || initialMachineType;\n   const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n \n   return <Fragment>\n-    <div>\n-      <label htmlFor='runtime-cpu'\n-            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <label htmlFor='runtime-cpu' style={{marginRight: '.25rem'}}>CPUs</label>\n       <Dropdown id='runtime-cpu'\n-                options={fp.flow(\n-                  // Show all CPU options.\n-                  fp.map('cpu'),\n-                  // In the event that was remove a machine type from our set of valid\n-                  // configs, we want to continue to allow rendering of the value here.\n-                  // Union also makes the CPU values unique.\n-                  fp.union([cpu]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.sortBy('memory'),\n-                    fp.find({cpu: value}),\n-                    maybeGetMachine,\n-                    onChange)(validLeonardoMachineTypes)\n-                }\n-                value={cpu}/>\n-    </div>\n-    <div>\n-      <label htmlFor='runtime-ram'\n-            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+        options={fp.flow(\n+          // Show all CPU options.\n+          fp.map('cpu'),\n+          // In the event that was remove a machine type from our set of valid\n+          // configs, we want to continue to allow rendering of the value here.\n+          // Union also makes the CPU values unique.\n+          fp.union([cpu]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.sortBy('memory'),\n+            fp.find({cpu: value}),\n+            maybeGetMachine,\n+            onChange)(validLeonardoMachineTypes)\n+        }\n+        value={cpu}/>\n+      <label htmlFor='runtime-ram' style={{marginRight: '.25rem'}}>RAM (GB)</label>\n       <Dropdown id='runtime-ram'\n-                options={fp.flow(\n-                  // Show valid memory options as constrained by the currently selected CPU.\n-                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n-                  fp.map('memory'),\n-                  // See above comment on CPU union.\n-                  fp.union([memory]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.find({cpu, memory: value}),\n-                    // If the selected machine is not different from the current machine return null\n-                    maybeGetMachine,\n-                    onChange\n-                    )(validLeonardoMachineTypes) }\n-                value={memory}\n-                />\n-    </div>\n+        options={fp.flow(\n+          // Show valid memory options as constrained by the currently selected CPU.\n+          fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+          fp.map('memory'),\n+          // See above comment on CPU union.\n+          fp.union([memory]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.find({cpu, memory: value}),\n+            // If the selected machine is not different from the current machine return null\n+            maybeGetMachine,\n+            onChange\n+            )(validLeonardoMachineTypes) }\n+        value={memory}\n+        />\n   </Fragment>;\n };\n \n-const DiskSizeSelection = ({onChange, updatedDiskSize, masterDiskSize}) => {\n-  return <div>\n-    <label htmlFor='runtime-disk'\n-          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n-      <InputNumber id='runtime-disk'\n-                showButtons\n-                decrementButtonClassName='p-button-secondary'\n-                incrementButtonClassName='p-button-secondary'\n-                value={updatedDiskSize || masterDiskSize}\n-                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n-                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n-                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n-  </div>;\n+const DiskSizeSelection = ({onChange, updatedDiskSize, diskSize}) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c42240e4a505338e2e97aa6e29791d63e290c0d5"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NDA0NTg3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjozMzoyNlrOHjRf6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjozMzoyNlrOHjRf6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0ODkwNQ==", "bodyText": "Reusing this for the worker nodes is nice. This brings up an interesting point, as to whether we need to be as strict about machine types for different scenarios., The case they were definitely worried about with Terra UI was spark master nodes. However, the same hasn't been validated for GCE or worker nodes.\nCould you add a TODO which references this ticket (which I just filed) here? https://precisionmedicineinitiative.atlassian.net/browse/RW-5763", "url": "https://github.com/all-of-us/workbench/pull/4180#discussion_r506748905", "createdAt": "2020-10-16T22:33:26Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -40,97 +40,171 @@ const styles = reactStyles({\n   presetMenuItem: {\n     color: colors.primary,\n     fontSize: '14px'\n+  },\n+  formGrid: {\n+    display: 'grid',\n+    gridTemplateColumns: '1fr 1fr 1fr 1fr 3rem 1fr',\n+    gridGap: '1rem',\n+    alignItems: 'center'\n+  },\n+  workerConfigLabel: {\n+    fontWeight: 600,\n+    marginBottom: '0.5rem'\n   }\n });\n \n const defaultMachineType = allMachineTypes.find(({name}) => name === 'n1-standard-4');\n+enum ComputeType {\n+  standard = 'Standard VM',\n+  dataproc = 'Dataproc Cluster'\n+}\n \n export interface Props {\n   workspace: WorkspaceData;\n }\n \n-const MachineSelector = ({onChange, updatedMachine, masterMachineType}) => {\n-  const initialMachineType = fp.find(({name}) => name === masterMachineType, allMachineTypes) || defaultMachineType;\n+const MachineSelector = ({onChange, updatedMachine, machineType}) => {\n+  const initialMachineType = fp.find(({name}) => name === machineType, allMachineTypes) || defaultMachineType;\n   const {cpu, memory} = updatedMachine || initialMachineType;\n   const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n \n   return <Fragment>\n-    <div>\n-      <label htmlFor='runtime-cpu'\n-            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <label htmlFor='runtime-cpu' style={{marginRight: '.25rem'}}>CPUs</label>\n       <Dropdown id='runtime-cpu'\n-                options={fp.flow(\n-                  // Show all CPU options.\n-                  fp.map('cpu'),\n-                  // In the event that was remove a machine type from our set of valid\n-                  // configs, we want to continue to allow rendering of the value here.\n-                  // Union also makes the CPU values unique.\n-                  fp.union([cpu]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.sortBy('memory'),\n-                    fp.find({cpu: value}),\n-                    maybeGetMachine,\n-                    onChange)(validLeonardoMachineTypes)\n-                }\n-                value={cpu}/>\n-    </div>\n-    <div>\n-      <label htmlFor='runtime-ram'\n-            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+        options={fp.flow(\n+          // Show all CPU options.\n+          fp.map('cpu'),\n+          // In the event that was remove a machine type from our set of valid\n+          // configs, we want to continue to allow rendering of the value here.\n+          // Union also makes the CPU values unique.\n+          fp.union([cpu]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.sortBy('memory'),\n+            fp.find({cpu: value}),\n+            maybeGetMachine,\n+            onChange)(validLeonardoMachineTypes)\n+        }\n+        value={cpu}/>\n+      <label htmlFor='runtime-ram' style={{marginRight: '.25rem'}}>RAM (GB)</label>\n       <Dropdown id='runtime-ram'\n-                options={fp.flow(\n-                  // Show valid memory options as constrained by the currently selected CPU.\n-                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n-                  fp.map('memory'),\n-                  // See above comment on CPU union.\n-                  fp.union([memory]),\n-                  fp.sortBy(fp.identity)\n-                )(validLeonardoMachineTypes)}\n-                onChange={\n-                  ({value}) => fp.flow(\n-                    fp.find({cpu, memory: value}),\n-                    // If the selected machine is not different from the current machine return null\n-                    maybeGetMachine,\n-                    onChange\n-                    )(validLeonardoMachineTypes) }\n-                value={memory}\n-                />\n-    </div>\n+        options={fp.flow(\n+          // Show valid memory options as constrained by the currently selected CPU.\n+          fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+          fp.map('memory'),\n+          // See above comment on CPU union.\n+          fp.union([memory]),\n+          fp.sortBy(fp.identity)\n+        )(validLeonardoMachineTypes)}\n+        onChange={\n+          ({value}) => fp.flow(\n+            fp.find({cpu, memory: value}),\n+            // If the selected machine is not different from the current machine return null\n+            maybeGetMachine,\n+            onChange\n+            )(validLeonardoMachineTypes) }\n+        value={memory}\n+        />\n   </Fragment>;\n };\n \n-const DiskSizeSelection = ({onChange, updatedDiskSize, masterDiskSize}) => {\n-  return <div>\n-    <label htmlFor='runtime-disk'\n-          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n-      <InputNumber id='runtime-disk'\n-                showButtons\n-                decrementButtonClassName='p-button-secondary'\n-                incrementButtonClassName='p-button-secondary'\n-                value={updatedDiskSize || masterDiskSize}\n-                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n-                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n-                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n-  </div>;\n+const DiskSizeSelection = ({onChange, updatedDiskSize, diskSize}) => {\n+  return <Fragment>\n+    <label htmlFor='runtime-disk' style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+    <InputNumber id='runtime-disk'\n+      showButtons\n+      decrementButtonClassName='p-button-secondary'\n+      incrementButtonClassName='p-button-secondary'\n+      value={updatedDiskSize || diskSize}\n+      inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+      onChange={({value}) => onChange(value)}\n+      min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </Fragment>;\n+};\n+\n+const DataProcConfig = ({onChange, dataprocConfig}) => {\n+  const {\n+    workerMachineType = defaultMachineType,\n+    workerDiskSize = 50,\n+    numberOfWorkers = 2,\n+    numberOfPreemptibleWorkers = 0\n+  } = dataprocConfig || {};\n+  const [updatedNumWorkers, setUpdatedNumWorkers] = useState(numberOfWorkers);\n+  const [updatedPreemtible, setUpdatedPreemptible] = useState(numberOfPreemptibleWorkers);\n+  const [updatedWorkerMachine, setUpdatedWorkerMachine] = useState(null);\n+  const [updatedDiskSize, setUpdatedDiskSize] = useState(workerDiskSize);\n+\n+  useEffect(() => {\n+    const machineType = updatedWorkerMachine && updatedWorkerMachine.name;\n+    const dataprocConfigChanged = updatedNumWorkers !== numberOfWorkers ||\n+    updatedPreemtible !== numberOfPreemptibleWorkers ||\n+    updatedDiskSize !== workerDiskSize ||\n+    updatedWorkerMachine ||\n+    !dataprocConfig;\n+\n+    onChange(dataprocConfigChanged ? {\n+      workerMachineType: machineType,\n+      workerDiskSize: updatedDiskSize,\n+      numberOfWorkers: updatedNumWorkers,\n+      numberOfPreemptibleWorkers: updatedPreemtible\n+    } : null);\n+\n+    return () => onChange(null);\n+  }, [updatedNumWorkers, updatedPreemtible, updatedWorkerMachine, updatedDiskSize]);\n+\n+\n+  return <fieldset style={{marginTop: '0.75rem'}}>\n+    <legend style={styles.workerConfigLabel}>Worker Config</legend>\n+    <div style={styles.formGrid}>\n+      <label htmlFor='num-workers' style={{marginRight: '.25rem'}}>Workers</label>\n+      <InputNumber id='num-workers'\n+        showButtons\n+        decrementButtonClassName='p-button-secondary'\n+        incrementButtonClassName='p-button-secondary'\n+        value={updatedNumWorkers}\n+        inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+        onChange={({value}) => {\n+          setUpdatedNumWorkers(value);\n+          if (updatedNumWorkers < updatedPreemtible) {\n+            setUpdatedPreemptible(updatedNumWorkers);\n+          }\n+        }}\n+        min={2}/>\n+      <label htmlFor='num-preemptible' style={{marginRight: '.25rem'}}>Preemptible</label>\n+      <InputNumber id='num-preemptible'\n+        showButtons\n+        decrementButtonClassName='p-button-secondary'\n+        incrementButtonClassName='p-button-secondary'\n+        value={updatedNumWorkers < updatedPreemtible ? updatedNumWorkers : updatedPreemtible}\n+        inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+        onChange={({value}) => setUpdatedPreemptible(value)}\n+        min={0}\n+        max={updatedNumWorkers}/>\n+      <div style={{gridColumnEnd: 'span 2'}}/>\n+      <MachineSelector machineType={workerMachineType} onChange={setUpdatedWorkerMachine} updatedMachine={updatedWorkerMachine}/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c42240e4a505338e2e97aa6e29791d63e290c0d5"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NDA2MTA0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjo0Mjo0M1rOHjRorQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjo0Mjo0M1rOHjRorQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1MTE0OQ==", "bodyText": "Per the ticket AC: dataproc should only be shown for genomics-enabled workspaces.\nHow? A little bit tricky actually, now that I look at it..\n\nuse the withCdrVersions() HOC\njoin this against the current workspace.cdrVersionId\ncheck cdrVersion.hasMicroarrayData\n\nIf that HOC can't be used with RuntimePanel, this could also happen one level up in the help-sidebar. The help-sidebar could then pass allowDataproc (or similar) as a prop here.", "url": "https://github.com/all-of-us/workbench/pull/4180#discussion_r506751149", "createdAt": "2020-10-16T22:42:43Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -175,30 +249,33 @@ export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n                 value={toolDockerImage}/>\n       {/* Runtime customization: change detailed machine configuration options. */}\n       <h3 style={styles.sectionHeader}>Cloud compute profile</h3>\n-      <FlexRow style={{justifyContent: 'space-between'}}>\n-        <MachineSelector updatedMachine={updatedMachine} onChange={setUpdatedMachine} masterMachineType={masterMachineType}/>\n-        <DiskSizeSelection updatedDiskSize={updatedDiskSize} onChange={setUpdatedDiskSize} masterDiskSize={masterDiskSize}/>\n-      </FlexRow>\n+      <div style={styles.formGrid}>\n+        <MachineSelector updatedMachine={updatedMachine} onChange={setUpdatedMachine} machineType={masterMachineType}/>\n+        <DiskSizeSelection updatedDiskSize={updatedDiskSize} onChange={setUpdatedDiskSize} diskSize={masterDiskSize}/>\n+      </div>\n       <FlexColumn style={{marginTop: '1rem'}}>\n         <label htmlFor='runtime-compute'>Compute type</label>\n         <Dropdown id='runtime-compute'\n                   style={{width: '10rem'}}\n-                  disabled={true}\n-                  options={['Dataproc cluster', 'Standard VM']}\n-                  value={isDataproc ? 'Dataproc cluster' : 'Standard VM'}/>\n+                  options={[ComputeType.dataproc, ComputeType.standard]}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c42240e4a505338e2e97aa6e29791d63e290c0d5"}, "originalPosition": 262}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3848, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}