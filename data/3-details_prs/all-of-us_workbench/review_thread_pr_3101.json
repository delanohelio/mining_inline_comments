{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNTM0MzQ0", "number": 3101, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzozODo1NFrODei2Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzo0NTo1NVrODei_4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzU0Nzg3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzozODo1NFrOFnvP8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzozODo1NFrOFnvP8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIxMjkxNQ==", "bodyText": "IYI, MapStruct may be able to help here. It generates the obvious fields and lets your specify the nontrivial stuff.", "url": "https://github.com/all-of-us/workbench/pull/3101#discussion_r377212915", "createdAt": "2020-02-10T17:38:54Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java", "diffHunk": "@@ -436,4 +363,65 @@ private DbConceptSet getDbConceptSet(\n     }\n     return conceptSet;\n   }\n+\n+  public static ConceptSet toClientConceptSet(DbConceptSet dbConceptSet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bb1c20ba7a395e83300028962c1f69695d3d551"}, "originalPosition": 272}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzU1Mjg4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzo0MDoxMVrOFnvSrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzo0MDoxMVrOFnvSrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIxMzYxNA==", "bodyText": "nit: You could do\nOptional.ofNullable(dbConceptSet.getCreator()) .map(Creator::getUsername).orElse(null)", "url": "https://github.com/all-of-us/workbench/pull/3101#discussion_r377213614", "createdAt": "2020-02-10T17:40:11Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java", "diffHunk": "@@ -436,4 +363,65 @@ private DbConceptSet getDbConceptSet(\n     }\n     return conceptSet;\n   }\n+\n+  public static ConceptSet toClientConceptSet(DbConceptSet dbConceptSet) {\n+    return new ConceptSet()\n+        .etag(Etags.fromVersion(dbConceptSet.getVersion()))\n+        .lastModifiedTime(dbConceptSet.getLastModifiedTime().getTime())\n+        .creationTime(dbConceptSet.getCreationTime().getTime())\n+        .description(dbConceptSet.getDescription())\n+        .id(dbConceptSet.getConceptSetId())\n+        .name(dbConceptSet.getName())\n+        .domain(dbConceptSet.getDomainEnum())\n+        .participantCount(dbConceptSet.getParticipantCount())\n+        .survey(dbConceptSet.getSurveysEnum())\n+        .creator(\n+            dbConceptSet.getCreator() != null ? dbConceptSet.getCreator().getUsername() : null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bb1c20ba7a395e83300028962c1f69695d3d551"}, "originalPosition": 284}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzU1ODc3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzo0MTo1N1rOFnvWWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzo0MTo1N1rOFnvWWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIxNDU1NQ==", "bodyText": "Ideally the DbConceptSet should handle finding an empty collection and return an empty Iterable. It makes me a little bit nervous to see the call site have to do basic checks like this.", "url": "https://github.com/all-of-us/workbench/pull/3101#discussion_r377214555", "createdAt": "2020-02-10T17:41:57Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java", "diffHunk": "@@ -436,4 +363,65 @@ private DbConceptSet getDbConceptSet(\n     }\n     return conceptSet;\n   }\n+\n+  public static ConceptSet toClientConceptSet(DbConceptSet dbConceptSet) {\n+    return new ConceptSet()\n+        .etag(Etags.fromVersion(dbConceptSet.getVersion()))\n+        .lastModifiedTime(dbConceptSet.getLastModifiedTime().getTime())\n+        .creationTime(dbConceptSet.getCreationTime().getTime())\n+        .description(dbConceptSet.getDescription())\n+        .id(dbConceptSet.getConceptSetId())\n+        .name(dbConceptSet.getName())\n+        .domain(dbConceptSet.getDomainEnum())\n+        .participantCount(dbConceptSet.getParticipantCount())\n+        .survey(dbConceptSet.getSurveysEnum())\n+        .creator(\n+            dbConceptSet.getCreator() != null ? dbConceptSet.getCreator().getUsername() : null);\n+  }\n+\n+  private ConceptSet toClientConceptSetWithConcepts(DbConceptSet dbConceptSet) {\n+    ConceptSet conceptSet = toClientConceptSet(dbConceptSet);\n+    if (!dbConceptSet.getConceptIds().isEmpty()) {\n+      Iterable<DbConcept> concepts = conceptService.findAll(dbConceptSet.getConceptIds());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bb1c20ba7a395e83300028962c1f69695d3d551"}, "originalPosition": 290}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzU2NDk5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzo0MzozM1rOFnvZ9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzo0MzozM1rOFnvZ9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIxNTQ3Nw==", "bodyText": "nit: you can also do Optional.ofNullable().ifPresent(etag -> setEtagStuff(etag));.", "url": "https://github.com/all-of-us/workbench/pull/3101#discussion_r377215477", "createdAt": "2020-02-10T17:43:33Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java", "diffHunk": "@@ -436,4 +363,65 @@ private DbConceptSet getDbConceptSet(\n     }\n     return conceptSet;\n   }\n+\n+  public static ConceptSet toClientConceptSet(DbConceptSet dbConceptSet) {\n+    return new ConceptSet()\n+        .etag(Etags.fromVersion(dbConceptSet.getVersion()))\n+        .lastModifiedTime(dbConceptSet.getLastModifiedTime().getTime())\n+        .creationTime(dbConceptSet.getCreationTime().getTime())\n+        .description(dbConceptSet.getDescription())\n+        .id(dbConceptSet.getConceptSetId())\n+        .name(dbConceptSet.getName())\n+        .domain(dbConceptSet.getDomainEnum())\n+        .participantCount(dbConceptSet.getParticipantCount())\n+        .survey(dbConceptSet.getSurveysEnum())\n+        .creator(\n+            dbConceptSet.getCreator() != null ? dbConceptSet.getCreator().getUsername() : null);\n+  }\n+\n+  private ConceptSet toClientConceptSetWithConcepts(DbConceptSet dbConceptSet) {\n+    ConceptSet conceptSet = toClientConceptSet(dbConceptSet);\n+    if (!dbConceptSet.getConceptIds().isEmpty()) {\n+      Iterable<DbConcept> concepts = conceptService.findAll(dbConceptSet.getConceptIds());\n+      conceptSet.setConcepts(\n+          Streams.stream(concepts)\n+              .map(ConceptsController::toClientConcept)\n+              .sorted(CONCEPT_NAME_ORDERING)\n+              .collect(Collectors.toList()));\n+    }\n+    return conceptSet;\n+  }\n+\n+  private DbConceptSet fromClientConceptSet(CreateConceptSetRequest request, long workspaceId) {\n+    ConceptSet conceptSet = request.getConceptSet();\n+    Timestamp now = new Timestamp(clock.instant().toEpochMilli());\n+    DbConceptSet dbConceptSet = new DbConceptSet();\n+    dbConceptSet.setDomainEnum(conceptSet.getDomain());\n+    if (conceptSet.getSurvey() != null) {\n+      dbConceptSet.setSurveysEnum(conceptSet.getSurvey());\n+    }\n+    if (dbConceptSet.getDomainEnum() == null) {\n+      throw new BadRequestException(\n+          \"Domain \" + conceptSet.getDomain() + \" is not allowed for concept sets\");\n+    }\n+    if (conceptSet.getEtag() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bb1c20ba7a395e83300028962c1f69695d3d551"}, "originalPosition": 312}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzU2NzE5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/concept/ConceptService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzo0NDoxMlrOFnvbRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzo0NDoxMlrOFnvbRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIxNTgxNQ==", "bodyText": "Yeah, just a little check for empty and return an empty collection.", "url": "https://github.com/all-of-us/workbench/pull/3101#discussion_r377215815", "createdAt": "2020-02-10T17:44:12Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/concept/ConceptService.java", "diffHunk": "@@ -119,6 +120,10 @@ private static String modifyMultipleMatchKeyword(String query) {\n     return query2.toString();\n   }\n \n+  public Iterable<DbConcept> findAll(Collection<Long> conceptIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bb1c20ba7a395e83300028962c1f69695d3d551"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzU3MjgxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/conceptset/ConceptSetService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzo0NTo1NVrOFnveyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzo0NTo1NVrOFnveyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIxNjcxMg==", "bodyText": "Why not return Optional<DbConceptSet> instead of throw when it's not found?", "url": "https://github.com/all-of-us/workbench/pull/3101#discussion_r377216712", "createdAt": "2020-02-10T17:45:55Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/conceptset/ConceptSetService.java", "diffHunk": "@@ -23,6 +23,26 @@ public ConceptSetService(\n     this.conceptBigQueryService = conceptBigQueryService;\n   }\n \n+  public DbConceptSet save(DbConceptSet dbConceptSet) {\n+    return conceptSetDao.save(dbConceptSet);\n+  }\n+\n+  public void delete(Long conceptSetId) {\n+    conceptSetDao.delete(conceptSetId);\n+  }\n+\n+  public DbConceptSet findOne(Long conceptSetId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bb1c20ba7a395e83300028962c1f69695d3d551"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3285, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}