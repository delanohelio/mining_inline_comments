{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNjYxNTEz", "number": 3205, "reviewThreads": {"totalCount": 62, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDo0OToxMVrODkS1gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzowMDozN1rODnEHfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzgzOTM5OnYy", "diffSide": "LEFT", "path": "e2e/tsconfig.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDo0OToxMVrOFwiNkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDo0OToxMVrOFwiNkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQzNjQ5Ng==", "bodyText": "extends doesn't work when I load e2 project independently without ui project.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386436496", "createdAt": "2020-03-02T14:49:11Z", "author": {"login": "aweng98"}, "path": "e2e/tsconfig.json", "diffHunk": "@@ -1,19 +1,30 @@\n {\n-  \"extends\": \"../ui/tsconfig.json\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914e0379b079128a2579019b586a8662338517a9"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mzg0MzM3OnYy", "diffSide": "RIGHT", "path": "e2e/tests/workspace/workspace-ui.spec.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDo1MDowN1rOFwiP_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjo1MTowNVrOFw2tVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQzNzExNg==", "bodyText": "commented out broken tests for now. needs fixing.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386437116", "createdAt": "2020-03-02T14:50:07Z", "author": {"login": "aweng98"}, "path": "e2e/tests/workspace/workspace-ui.spec.ts", "diffHunk": "@@ -18,132 +18,171 @@ describe('Edit Workspace page', () => {\n     await Chrome.teardown();\n   });\n \n-  // Click CreateNewWorkspace link in Home page => Open Create Workspace page\n-  test('Home page: Click link Create-New-Workspace', async () => {\n-    const home = new Home(page);\n-    const link = await home.getCreateNewWorkspaceLink();\n-    expect(await link.boxModel() != null).toBe(true);\n-    await link.click();\n-\n-    const workspace = new WorkspacePage(page);\n-    await workspace.waitUntilPageReady();\n-\n-    // expect Workspace-Name Input text field exists and is NOT readOnly\n-    const nameInput = new AouElement(await workspace.inputTextWorkspaceName());\n-    expect(await nameInput.isVisible()).toBe(true);\n-    expect(await nameInput.isReadOnly()).toBe(false);\n-\n-    // expect DataSet Select field exists\n-    const dataSetSelect = new AouElement(await workspace.select_dataSet());\n-    expect(await dataSetSelect.isVisible()).toBe(true);\n-  }, 60 * 1000);\n-\n-  // Click CreateNewWorkspace link in My Workpsaces page => Open Create Workspace page\n-  test('My Workspaces page: Click link Create-New-Workspace', async () => {\n-    const workspace = new WorkspacePage(page);\n-    await workspace.goURL();\n-    await workspace.click_button_CreateNewWorkspace();\n-    await workspace.waitUntilPageReady();\n-  }, 60 * 1000);\n-\n-  // Checking all fields out-of-box\n-  test('Create Workspace page: Question 1', async () => {\n-    const workspace = new WorkspacePage(page);\n-    await workspace.goURL();\n-    await workspace.click_button_CreateNewWorkspace();\n-    await workspace.waitUntilPageReady();\n-\n-    // expand Disease purpose section if needed\n-    const expandIcon = await workspace.getResearchPurposeExpandIcon();\n-    if (expandIcon !== undefined) {\n-      await (expandIcon[0]).click();\n+  test('Workspace cards have same UI size', async () => {\n+    const workspaceCards = new WorkspaceResourceCard(page);\n+    const cards = await workspaceCards.getAllCardsElements();\n+    let width;\n+    let height;\n+    for (const card of cards) {\n+      const cardElem = new WebElement(page, card.asElementHandle());\n+      expect(await cardElem.isVisible()).toBe(true);\n+      const size = await cardElem.size();\n+      if (width === undefined) {\n+        width = size.width; // Initialize width and height with first card element's size, compare with rest cards\n+        height = size.height;\n+      } else {\n+        expect(size.height).toEqual(height);\n+        expect(size.width).toEqual(width);\n+      }\n     }\n-    // Disease-focused research checkbox\n-    const diseaseName = workspace.diseaseName();\n-    let cbox = (await diseaseName.checkbox());\n-    expect(await cbox.isVisible()).toBe(true);\n-    expect(await cbox.getProp('checked')).toBe(false);\n-    expect(await cbox.getProp('disabled')).toBe(false);\n-    const txtField = await diseaseName.textfield();\n-    expect(await txtField.isVisible()).toBe(true);\n-    expect(await txtField.getProp('disabled')).toBe(true);\n-\n-    // Set the checkbox checked\n-    await page.evaluate(elem => elem.click(), await (await diseaseName.checkbox()).asElement() );\n-    // TODO wait async for checked and disabled checking or test will fail\n+  });\n+\n+  // Click CreateNewWorkspace link on My Workpsaces page => Open Create Workspace page\n+  test('Click Create New Workspace link on My Workspaces page', async () => {\n+    const workspaces = new WorkspacesPage(page);\n+    await workspaces.goToURL();\n+    const workspaceEdit = await workspaces.clickCreateNewWorkspace();\n+    const workspaceNameTextbox = await workspaceEdit.getWorkspaceNameTextbox();\n+    expect(await workspaceNameTextbox.isVisible()).toBe(true);\n+  });\n+\n+\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914e0379b079128a2579019b586a8662338517a9"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNzMwOA==", "bodyText": "Please fix or remove this code before merging", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386737308", "createdAt": "2020-03-03T00:43:26Z", "author": {"login": "calbach"}, "path": "e2e/tests/workspace/workspace-ui.spec.ts", "diffHunk": "@@ -18,132 +18,171 @@ describe('Edit Workspace page', () => {\n     await Chrome.teardown();\n   });\n \n-  // Click CreateNewWorkspace link in Home page => Open Create Workspace page\n-  test('Home page: Click link Create-New-Workspace', async () => {\n-    const home = new Home(page);\n-    const link = await home.getCreateNewWorkspaceLink();\n-    expect(await link.boxModel() != null).toBe(true);\n-    await link.click();\n-\n-    const workspace = new WorkspacePage(page);\n-    await workspace.waitUntilPageReady();\n-\n-    // expect Workspace-Name Input text field exists and is NOT readOnly\n-    const nameInput = new AouElement(await workspace.inputTextWorkspaceName());\n-    expect(await nameInput.isVisible()).toBe(true);\n-    expect(await nameInput.isReadOnly()).toBe(false);\n-\n-    // expect DataSet Select field exists\n-    const dataSetSelect = new AouElement(await workspace.select_dataSet());\n-    expect(await dataSetSelect.isVisible()).toBe(true);\n-  }, 60 * 1000);\n-\n-  // Click CreateNewWorkspace link in My Workpsaces page => Open Create Workspace page\n-  test('My Workspaces page: Click link Create-New-Workspace', async () => {\n-    const workspace = new WorkspacePage(page);\n-    await workspace.goURL();\n-    await workspace.click_button_CreateNewWorkspace();\n-    await workspace.waitUntilPageReady();\n-  }, 60 * 1000);\n-\n-  // Checking all fields out-of-box\n-  test('Create Workspace page: Question 1', async () => {\n-    const workspace = new WorkspacePage(page);\n-    await workspace.goURL();\n-    await workspace.click_button_CreateNewWorkspace();\n-    await workspace.waitUntilPageReady();\n-\n-    // expand Disease purpose section if needed\n-    const expandIcon = await workspace.getResearchPurposeExpandIcon();\n-    if (expandIcon !== undefined) {\n-      await (expandIcon[0]).click();\n+  test('Workspace cards have same UI size', async () => {\n+    const workspaceCards = new WorkspaceResourceCard(page);\n+    const cards = await workspaceCards.getAllCardsElements();\n+    let width;\n+    let height;\n+    for (const card of cards) {\n+      const cardElem = new WebElement(page, card.asElementHandle());\n+      expect(await cardElem.isVisible()).toBe(true);\n+      const size = await cardElem.size();\n+      if (width === undefined) {\n+        width = size.width; // Initialize width and height with first card element's size, compare with rest cards\n+        height = size.height;\n+      } else {\n+        expect(size.height).toEqual(height);\n+        expect(size.width).toEqual(width);\n+      }\n     }\n-    // Disease-focused research checkbox\n-    const diseaseName = workspace.diseaseName();\n-    let cbox = (await diseaseName.checkbox());\n-    expect(await cbox.isVisible()).toBe(true);\n-    expect(await cbox.getProp('checked')).toBe(false);\n-    expect(await cbox.getProp('disabled')).toBe(false);\n-    const txtField = await diseaseName.textfield();\n-    expect(await txtField.isVisible()).toBe(true);\n-    expect(await txtField.getProp('disabled')).toBe(true);\n-\n-    // Set the checkbox checked\n-    await page.evaluate(elem => elem.click(), await (await diseaseName.checkbox()).asElement() );\n-    // TODO wait async for checked and disabled checking or test will fail\n+  });\n+\n+  // Click CreateNewWorkspace link on My Workpsaces page => Open Create Workspace page\n+  test('Click Create New Workspace link on My Workspaces page', async () => {\n+    const workspaces = new WorkspacesPage(page);\n+    await workspaces.goToURL();\n+    const workspaceEdit = await workspaces.clickCreateNewWorkspace();\n+    const workspaceNameTextbox = await workspaceEdit.getWorkspaceNameTextbox();\n+    expect(await workspaceNameTextbox.isVisible()).toBe(true);\n+  });\n+\n+\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQzNzExNg=="}, "originalCommit": {"oid": "914e0379b079128a2579019b586a8662338517a9"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc3MjMxMA==", "bodyText": "created https://precisionmedicineinitiative.atlassian.net/browse/RW-4531 to keep track of code that need to fix. commented out code removed here.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386772310", "createdAt": "2020-03-03T02:51:05Z", "author": {"login": "aweng98"}, "path": "e2e/tests/workspace/workspace-ui.spec.ts", "diffHunk": "@@ -18,132 +18,171 @@ describe('Edit Workspace page', () => {\n     await Chrome.teardown();\n   });\n \n-  // Click CreateNewWorkspace link in Home page => Open Create Workspace page\n-  test('Home page: Click link Create-New-Workspace', async () => {\n-    const home = new Home(page);\n-    const link = await home.getCreateNewWorkspaceLink();\n-    expect(await link.boxModel() != null).toBe(true);\n-    await link.click();\n-\n-    const workspace = new WorkspacePage(page);\n-    await workspace.waitUntilPageReady();\n-\n-    // expect Workspace-Name Input text field exists and is NOT readOnly\n-    const nameInput = new AouElement(await workspace.inputTextWorkspaceName());\n-    expect(await nameInput.isVisible()).toBe(true);\n-    expect(await nameInput.isReadOnly()).toBe(false);\n-\n-    // expect DataSet Select field exists\n-    const dataSetSelect = new AouElement(await workspace.select_dataSet());\n-    expect(await dataSetSelect.isVisible()).toBe(true);\n-  }, 60 * 1000);\n-\n-  // Click CreateNewWorkspace link in My Workpsaces page => Open Create Workspace page\n-  test('My Workspaces page: Click link Create-New-Workspace', async () => {\n-    const workspace = new WorkspacePage(page);\n-    await workspace.goURL();\n-    await workspace.click_button_CreateNewWorkspace();\n-    await workspace.waitUntilPageReady();\n-  }, 60 * 1000);\n-\n-  // Checking all fields out-of-box\n-  test('Create Workspace page: Question 1', async () => {\n-    const workspace = new WorkspacePage(page);\n-    await workspace.goURL();\n-    await workspace.click_button_CreateNewWorkspace();\n-    await workspace.waitUntilPageReady();\n-\n-    // expand Disease purpose section if needed\n-    const expandIcon = await workspace.getResearchPurposeExpandIcon();\n-    if (expandIcon !== undefined) {\n-      await (expandIcon[0]).click();\n+  test('Workspace cards have same UI size', async () => {\n+    const workspaceCards = new WorkspaceResourceCard(page);\n+    const cards = await workspaceCards.getAllCardsElements();\n+    let width;\n+    let height;\n+    for (const card of cards) {\n+      const cardElem = new WebElement(page, card.asElementHandle());\n+      expect(await cardElem.isVisible()).toBe(true);\n+      const size = await cardElem.size();\n+      if (width === undefined) {\n+        width = size.width; // Initialize width and height with first card element's size, compare with rest cards\n+        height = size.height;\n+      } else {\n+        expect(size.height).toEqual(height);\n+        expect(size.width).toEqual(width);\n+      }\n     }\n-    // Disease-focused research checkbox\n-    const diseaseName = workspace.diseaseName();\n-    let cbox = (await diseaseName.checkbox());\n-    expect(await cbox.isVisible()).toBe(true);\n-    expect(await cbox.getProp('checked')).toBe(false);\n-    expect(await cbox.getProp('disabled')).toBe(false);\n-    const txtField = await diseaseName.textfield();\n-    expect(await txtField.isVisible()).toBe(true);\n-    expect(await txtField.getProp('disabled')).toBe(true);\n-\n-    // Set the checkbox checked\n-    await page.evaluate(elem => elem.click(), await (await diseaseName.checkbox()).asElement() );\n-    // TODO wait async for checked and disabled checking or test will fail\n+  });\n+\n+  // Click CreateNewWorkspace link on My Workpsaces page => Open Create Workspace page\n+  test('Click Create New Workspace link on My Workspaces page', async () => {\n+    const workspaces = new WorkspacesPage(page);\n+    await workspaces.goToURL();\n+    const workspaceEdit = await workspaces.clickCreateNewWorkspace();\n+    const workspaceNameTextbox = await workspaceEdit.getWorkspaceNameTextbox();\n+    expect(await workspaceNameTextbox.isVisible()).toBe(true);\n+  });\n+\n+\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQzNzExNg=="}, "originalCommit": {"oid": "914e0379b079128a2579019b586a8662338517a9"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mzg1NzYwOnYy", "diffSide": "RIGHT", "path": "e2e/app/aou-elements/xpath-defaults.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDo1Mzo0MFrOFwiYww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDo1Mzo0MFrOFwiYww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQzOTM2Mw==", "bodyText": "best practice: standardized and centralize xpaths selectors in xpath-defaults.ts.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386439363", "createdAt": "2020-03-02T14:53:40Z", "author": {"login": "aweng98"}, "path": "e2e/app/aou-elements/xpath-defaults.ts", "diffHunk": "@@ -0,0 +1,128 @@\n+import TextOptions from './TextOptions';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914e0379b079128a2579019b586a8662338517a9"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mzg2MDc1OnYy", "diffSide": "RIGHT", "path": "e2e/app/aou-elements/WebElement.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDo1NDozMVrOFwiatA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDo1NDozMVrOFwiatA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQzOTg2MA==", "bodyText": "best practice: centralize useful wrapper or/and custom functions in one file. namely, WebElement.ts.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386439860", "createdAt": "2020-03-02T14:54:31Z", "author": {"login": "aweng98"}, "path": "e2e/app/aou-elements/WebElement.ts", "diffHunk": "@@ -0,0 +1,192 @@\n+import {ClickOptions, ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import {ElementInterface} from './ElementInterface';\n+\n+export default class WebElement implements ElementInterface {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914e0379b079128a2579019b586a8662338517a9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzkwMTk1OnYy", "diffSide": "RIGHT", "path": "e2e/app/CreateAccountPage.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTowNTowN1rOFwi07g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTowNTowN1rOFwi07g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0NjU3NA==", "bodyText": "best practice: externalize hardcoded strings outside of functions.\nSame pattern are used in many page objects.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386446574", "createdAt": "2020-03-02T15:05:07Z", "author": {"login": "aweng98"}, "path": "e2e/app/CreateAccountPage.ts", "diffHunk": "@@ -0,0 +1,218 @@\n+import {ElementHandle} from 'puppeteer';\n+import Button from './aou-elements/Button';\n+import CheckBox from './aou-elements/CheckBox';\n+import ClrIconLink from './aou-elements/ClrIconLink';\n+import Label from './aou-elements/Label';\n+import RadioButton from './aou-elements/RadioButton';\n+import SelectComponent from './aou-elements/SelectComponent';\n+import TextArea from './aou-elements/TextArea';\n+import TextBox from './aou-elements/TextBox';\n+import BasePage from './page-mixin/BasePage';\n+\n+import {defaultFieldValues} from '../resources/data/user-registration-fields';\n+\n+const faker = require('faker/locale/en_US');\n+\n+export const INSTITUTION_AFFILIATION = {\n+  EARLY_CAREER_TENURE_TRACK_RESEARCHER: 'Early career tenure-track researcher',\n+  UNDERGRADUATE_STUDENT: 'Undergraduate (Bachelor level) student',\n+  INDUSTRY: 'Industry',\n+};\n+\n+export const EDUCATION_LEVEL = {\n+  DOCTORATE: 'Doctorate',\n+};\n+\n+export const FIELD_LABEL = {\n+  READ_UNDERSTAND_PRIVACY_STATEMENT: 'I have read and understand the All of Us Research Program Privacy Statement',\n+  READ_UNDERSTAND_TERMS_OF_USE: 'I have read and understand the All of Us Research Program Terms of Use described above',\n+  INSTITUTION_NAME: 'Institution Name',\n+  ARE_YOU_AFFILIATED: 'Are you affiliated with an Academic Research Institution',\n+  RESEARCH_BACKGROUND: 'Please describe your research background, experience and research interests',\n+  EDUCATION_LEVEL: 'Highest Level of Education Completed',\n+  YEAR_OF_BIRTH: 'Year of Birth',\n+};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "645fe7cceb7e19c4272aab3dc7d056119c0b7ecd"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTY5NTQ0OnYy", "diffSide": "RIGHT", "path": "e2e/app/CreateAccountPage.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDoxNDo1MVrOFw0DFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjo0OToyOVrOFw2rvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyODcyNQ==", "bodyText": "These kinds of selectors look really brittle. I think I'd prefer to inject a test ID into the code to make the dependency explicit.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386728725", "createdAt": "2020-03-03T00:14:51Z", "author": {"login": "calbach"}, "path": "e2e/app/CreateAccountPage.ts", "diffHunk": "@@ -0,0 +1,218 @@\n+import {ElementHandle} from 'puppeteer';\n+import Button from './aou-elements/Button';\n+import CheckBox from './aou-elements/CheckBox';\n+import ClrIconLink from './aou-elements/ClrIconLink';\n+import Label from './aou-elements/Label';\n+import RadioButton from './aou-elements/RadioButton';\n+import SelectComponent from './aou-elements/SelectComponent';\n+import TextArea from './aou-elements/TextArea';\n+import TextBox from './aou-elements/TextBox';\n+import BasePage from './page-mixin/BasePage';\n+\n+import {defaultFieldValues} from '../resources/data/user-registration-fields';\n+\n+const faker = require('faker/locale/en_US');\n+\n+export const INSTITUTION_AFFILIATION = {\n+  EARLY_CAREER_TENURE_TRACK_RESEARCHER: 'Early career tenure-track researcher',\n+  UNDERGRADUATE_STUDENT: 'Undergraduate (Bachelor level) student',\n+  INDUSTRY: 'Industry',\n+};\n+\n+export const EDUCATION_LEVEL = {\n+  DOCTORATE: 'Doctorate',\n+};\n+\n+export const FIELD_LABEL = {\n+  READ_UNDERSTAND_PRIVACY_STATEMENT: 'I have read and understand the All of Us Research Program Privacy Statement',\n+  READ_UNDERSTAND_TERMS_OF_USE: 'I have read and understand the All of Us Research Program Terms of Use described above',\n+  INSTITUTION_NAME: 'Institution Name',\n+  ARE_YOU_AFFILIATED: 'Are you affiliated with an Academic Research Institution',\n+  RESEARCH_BACKGROUND: 'Please describe your research background, experience and research interests',\n+  EDUCATION_LEVEL: 'Highest Level of Education Completed',\n+  YEAR_OF_BIRTH: 'Year of Birth',\n+};\n+\n+export default class CreateAccountPage extends BasePage {\n+\n+  public async getInvitationKeyInput(): Promise<TextBox> {\n+    const textbox = new TextBox(this.puppeteerPage);\n+    await textbox.withCss('#invitationKey');\n+    return textbox;\n+  }\n+\n+  public async getSubmitButton(): Promise<Button> {\n+    const button = new Button(this.puppeteerPage);\n+    await button.withLabel({text: 'Submit'});\n+    return button;\n+  }\n+\n+  public async getNextButton(): Promise<Button> {\n+    const button = new Button(this.puppeteerPage);\n+    await button.withLabel({text: 'Next'});\n+    return button;\n+  }\n+\n+  public async scrollToNthPdfPage(nth: number): Promise<ElementHandle> {\n+    const selector = `.react-pdf__Document :nth-child(${nth}).react-pdf__Page.tos-pdf-page`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06636809d39562d5c137813005723f41dfae253c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc3MTkwMg==", "bodyText": "a test-id attribute is desirable.  https://precisionmedicineinitiative.atlassian.net/browse/RW-4532 to keep track.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386771902", "createdAt": "2020-03-03T02:49:29Z", "author": {"login": "aweng98"}, "path": "e2e/app/CreateAccountPage.ts", "diffHunk": "@@ -0,0 +1,218 @@\n+import {ElementHandle} from 'puppeteer';\n+import Button from './aou-elements/Button';\n+import CheckBox from './aou-elements/CheckBox';\n+import ClrIconLink from './aou-elements/ClrIconLink';\n+import Label from './aou-elements/Label';\n+import RadioButton from './aou-elements/RadioButton';\n+import SelectComponent from './aou-elements/SelectComponent';\n+import TextArea from './aou-elements/TextArea';\n+import TextBox from './aou-elements/TextBox';\n+import BasePage from './page-mixin/BasePage';\n+\n+import {defaultFieldValues} from '../resources/data/user-registration-fields';\n+\n+const faker = require('faker/locale/en_US');\n+\n+export const INSTITUTION_AFFILIATION = {\n+  EARLY_CAREER_TENURE_TRACK_RESEARCHER: 'Early career tenure-track researcher',\n+  UNDERGRADUATE_STUDENT: 'Undergraduate (Bachelor level) student',\n+  INDUSTRY: 'Industry',\n+};\n+\n+export const EDUCATION_LEVEL = {\n+  DOCTORATE: 'Doctorate',\n+};\n+\n+export const FIELD_LABEL = {\n+  READ_UNDERSTAND_PRIVACY_STATEMENT: 'I have read and understand the All of Us Research Program Privacy Statement',\n+  READ_UNDERSTAND_TERMS_OF_USE: 'I have read and understand the All of Us Research Program Terms of Use described above',\n+  INSTITUTION_NAME: 'Institution Name',\n+  ARE_YOU_AFFILIATED: 'Are you affiliated with an Academic Research Institution',\n+  RESEARCH_BACKGROUND: 'Please describe your research background, experience and research interests',\n+  EDUCATION_LEVEL: 'Highest Level of Education Completed',\n+  YEAR_OF_BIRTH: 'Year of Birth',\n+};\n+\n+export default class CreateAccountPage extends BasePage {\n+\n+  public async getInvitationKeyInput(): Promise<TextBox> {\n+    const textbox = new TextBox(this.puppeteerPage);\n+    await textbox.withCss('#invitationKey');\n+    return textbox;\n+  }\n+\n+  public async getSubmitButton(): Promise<Button> {\n+    const button = new Button(this.puppeteerPage);\n+    await button.withLabel({text: 'Submit'});\n+    return button;\n+  }\n+\n+  public async getNextButton(): Promise<Button> {\n+    const button = new Button(this.puppeteerPage);\n+    await button.withLabel({text: 'Next'});\n+    return button;\n+  }\n+\n+  public async scrollToNthPdfPage(nth: number): Promise<ElementHandle> {\n+    const selector = `.react-pdf__Document :nth-child(${nth}).react-pdf__Page.tos-pdf-page`;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyODcyNQ=="}, "originalCommit": {"oid": "06636809d39562d5c137813005723f41dfae253c"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTY5NzgwOnYy", "diffSide": "RIGHT", "path": "e2e/app/CreateAccountPage.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDoxNjowOFrOFw0Emw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDoxNjowOFrOFw0Emw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyOTExNQ==", "bodyText": "By policy, I would either eliminate these or if it's unavoidable - always have a comment which explains why the sleep is needed. Arbitrary sleeps generally end in flakiness, in my experience.\nDo we have something more targeted here, e.g. which can just wait for outstanding network requests to complete?", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386729115", "createdAt": "2020-03-03T00:16:08Z", "author": {"login": "calbach"}, "path": "e2e/app/CreateAccountPage.ts", "diffHunk": "@@ -0,0 +1,218 @@\n+import {ElementHandle} from 'puppeteer';\n+import Button from './aou-elements/Button';\n+import CheckBox from './aou-elements/CheckBox';\n+import ClrIconLink from './aou-elements/ClrIconLink';\n+import Label from './aou-elements/Label';\n+import RadioButton from './aou-elements/RadioButton';\n+import SelectComponent from './aou-elements/SelectComponent';\n+import TextArea from './aou-elements/TextArea';\n+import TextBox from './aou-elements/TextBox';\n+import BasePage from './page-mixin/BasePage';\n+\n+import {defaultFieldValues} from '../resources/data/user-registration-fields';\n+\n+const faker = require('faker/locale/en_US');\n+\n+export const INSTITUTION_AFFILIATION = {\n+  EARLY_CAREER_TENURE_TRACK_RESEARCHER: 'Early career tenure-track researcher',\n+  UNDERGRADUATE_STUDENT: 'Undergraduate (Bachelor level) student',\n+  INDUSTRY: 'Industry',\n+};\n+\n+export const EDUCATION_LEVEL = {\n+  DOCTORATE: 'Doctorate',\n+};\n+\n+export const FIELD_LABEL = {\n+  READ_UNDERSTAND_PRIVACY_STATEMENT: 'I have read and understand the All of Us Research Program Privacy Statement',\n+  READ_UNDERSTAND_TERMS_OF_USE: 'I have read and understand the All of Us Research Program Terms of Use described above',\n+  INSTITUTION_NAME: 'Institution Name',\n+  ARE_YOU_AFFILIATED: 'Are you affiliated with an Academic Research Institution',\n+  RESEARCH_BACKGROUND: 'Please describe your research background, experience and research interests',\n+  EDUCATION_LEVEL: 'Highest Level of Education Completed',\n+  YEAR_OF_BIRTH: 'Year of Birth',\n+};\n+\n+export default class CreateAccountPage extends BasePage {\n+\n+  public async getInvitationKeyInput(): Promise<TextBox> {\n+    const textbox = new TextBox(this.puppeteerPage);\n+    await textbox.withCss('#invitationKey');\n+    return textbox;\n+  }\n+\n+  public async getSubmitButton(): Promise<Button> {\n+    const button = new Button(this.puppeteerPage);\n+    await button.withLabel({text: 'Submit'});\n+    return button;\n+  }\n+\n+  public async getNextButton(): Promise<Button> {\n+    const button = new Button(this.puppeteerPage);\n+    await button.withLabel({text: 'Next'});\n+    return button;\n+  }\n+\n+  public async scrollToNthPdfPage(nth: number): Promise<ElementHandle> {\n+    const selector = `.react-pdf__Document :nth-child(${nth}).react-pdf__Page.tos-pdf-page`;\n+    const pdfPage = await this.puppeteerPage.waitForSelector(selector);\n+    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n+    await this.puppeteerPage.waitFor(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06636809d39562d5c137813005723f41dfae253c"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTY5OTc0OnYy", "diffSide": "RIGHT", "path": "e2e/app/CreateAccountPage.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDoxNzoxNFrOFw0F4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMzowMDo1MVrOFw22xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyOTQ0Mg==", "bodyText": "Please remove commented out code", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386729442", "createdAt": "2020-03-03T00:17:14Z", "author": {"login": "calbach"}, "path": "e2e/app/CreateAccountPage.ts", "diffHunk": "@@ -0,0 +1,218 @@\n+import {ElementHandle} from 'puppeteer';\n+import Button from './aou-elements/Button';\n+import CheckBox from './aou-elements/CheckBox';\n+import ClrIconLink from './aou-elements/ClrIconLink';\n+import Label from './aou-elements/Label';\n+import RadioButton from './aou-elements/RadioButton';\n+import SelectComponent from './aou-elements/SelectComponent';\n+import TextArea from './aou-elements/TextArea';\n+import TextBox from './aou-elements/TextBox';\n+import BasePage from './page-mixin/BasePage';\n+\n+import {defaultFieldValues} from '../resources/data/user-registration-fields';\n+\n+const faker = require('faker/locale/en_US');\n+\n+export const INSTITUTION_AFFILIATION = {\n+  EARLY_CAREER_TENURE_TRACK_RESEARCHER: 'Early career tenure-track researcher',\n+  UNDERGRADUATE_STUDENT: 'Undergraduate (Bachelor level) student',\n+  INDUSTRY: 'Industry',\n+};\n+\n+export const EDUCATION_LEVEL = {\n+  DOCTORATE: 'Doctorate',\n+};\n+\n+export const FIELD_LABEL = {\n+  READ_UNDERSTAND_PRIVACY_STATEMENT: 'I have read and understand the All of Us Research Program Privacy Statement',\n+  READ_UNDERSTAND_TERMS_OF_USE: 'I have read and understand the All of Us Research Program Terms of Use described above',\n+  INSTITUTION_NAME: 'Institution Name',\n+  ARE_YOU_AFFILIATED: 'Are you affiliated with an Academic Research Institution',\n+  RESEARCH_BACKGROUND: 'Please describe your research background, experience and research interests',\n+  EDUCATION_LEVEL: 'Highest Level of Education Completed',\n+  YEAR_OF_BIRTH: 'Year of Birth',\n+};\n+\n+export default class CreateAccountPage extends BasePage {\n+\n+  public async getInvitationKeyInput(): Promise<TextBox> {\n+    const textbox = new TextBox(this.puppeteerPage);\n+    await textbox.withCss('#invitationKey');\n+    return textbox;\n+  }\n+\n+  public async getSubmitButton(): Promise<Button> {\n+    const button = new Button(this.puppeteerPage);\n+    await button.withLabel({text: 'Submit'});\n+    return button;\n+  }\n+\n+  public async getNextButton(): Promise<Button> {\n+    const button = new Button(this.puppeteerPage);\n+    await button.withLabel({text: 'Next'});\n+    return button;\n+  }\n+\n+  public async scrollToNthPdfPage(nth: number): Promise<ElementHandle> {\n+    const selector = `.react-pdf__Document :nth-child(${nth}).react-pdf__Page.tos-pdf-page`;\n+    const pdfPage = await this.puppeteerPage.waitForSelector(selector);\n+    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n+    await this.puppeteerPage.waitFor(1000);\n+    return pdfPage;\n+  }\n+\n+  public async scrollToLastPdfPage(): Promise<ElementHandle> {\n+    const selector = '.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page';\n+    const pdfPage = await this.puppeteerPage.waitForSelector(selector);\n+    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n+    await this.puppeteerPage.waitFor(1000);\n+    return pdfPage;\n+  }\n+\n+  public async getPrivacyStatementCheckbox(): Promise<CheckBox> {\n+    const checkbox = new CheckBox(this.puppeteerPage);\n+    await checkbox.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT});\n+    return checkbox;\n+  }\n+\n+  public async getTermsOfUseCheckbox(): Promise<CheckBox> {\n+    const checkbox = new CheckBox(this.puppeteerPage);\n+    await checkbox.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_TERMS_OF_USE});\n+    return checkbox;\n+  }\n+\n+\n+  public async getPrivacyStatementLabel(): Promise<Label> {\n+    const label = new Label(this.puppeteerPage);\n+    await label.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT});\n+    return label;\n+    // return this.getCheckboxLabel(FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06636809d39562d5c137813005723f41dfae253c"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc3NDcyNg==", "bodyText": "Done. Also, looked elsewhere for commented out and removed them as well.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386774726", "createdAt": "2020-03-03T03:00:51Z", "author": {"login": "aweng98"}, "path": "e2e/app/CreateAccountPage.ts", "diffHunk": "@@ -0,0 +1,218 @@\n+import {ElementHandle} from 'puppeteer';\n+import Button from './aou-elements/Button';\n+import CheckBox from './aou-elements/CheckBox';\n+import ClrIconLink from './aou-elements/ClrIconLink';\n+import Label from './aou-elements/Label';\n+import RadioButton from './aou-elements/RadioButton';\n+import SelectComponent from './aou-elements/SelectComponent';\n+import TextArea from './aou-elements/TextArea';\n+import TextBox from './aou-elements/TextBox';\n+import BasePage from './page-mixin/BasePage';\n+\n+import {defaultFieldValues} from '../resources/data/user-registration-fields';\n+\n+const faker = require('faker/locale/en_US');\n+\n+export const INSTITUTION_AFFILIATION = {\n+  EARLY_CAREER_TENURE_TRACK_RESEARCHER: 'Early career tenure-track researcher',\n+  UNDERGRADUATE_STUDENT: 'Undergraduate (Bachelor level) student',\n+  INDUSTRY: 'Industry',\n+};\n+\n+export const EDUCATION_LEVEL = {\n+  DOCTORATE: 'Doctorate',\n+};\n+\n+export const FIELD_LABEL = {\n+  READ_UNDERSTAND_PRIVACY_STATEMENT: 'I have read and understand the All of Us Research Program Privacy Statement',\n+  READ_UNDERSTAND_TERMS_OF_USE: 'I have read and understand the All of Us Research Program Terms of Use described above',\n+  INSTITUTION_NAME: 'Institution Name',\n+  ARE_YOU_AFFILIATED: 'Are you affiliated with an Academic Research Institution',\n+  RESEARCH_BACKGROUND: 'Please describe your research background, experience and research interests',\n+  EDUCATION_LEVEL: 'Highest Level of Education Completed',\n+  YEAR_OF_BIRTH: 'Year of Birth',\n+};\n+\n+export default class CreateAccountPage extends BasePage {\n+\n+  public async getInvitationKeyInput(): Promise<TextBox> {\n+    const textbox = new TextBox(this.puppeteerPage);\n+    await textbox.withCss('#invitationKey');\n+    return textbox;\n+  }\n+\n+  public async getSubmitButton(): Promise<Button> {\n+    const button = new Button(this.puppeteerPage);\n+    await button.withLabel({text: 'Submit'});\n+    return button;\n+  }\n+\n+  public async getNextButton(): Promise<Button> {\n+    const button = new Button(this.puppeteerPage);\n+    await button.withLabel({text: 'Next'});\n+    return button;\n+  }\n+\n+  public async scrollToNthPdfPage(nth: number): Promise<ElementHandle> {\n+    const selector = `.react-pdf__Document :nth-child(${nth}).react-pdf__Page.tos-pdf-page`;\n+    const pdfPage = await this.puppeteerPage.waitForSelector(selector);\n+    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n+    await this.puppeteerPage.waitFor(1000);\n+    return pdfPage;\n+  }\n+\n+  public async scrollToLastPdfPage(): Promise<ElementHandle> {\n+    const selector = '.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page';\n+    const pdfPage = await this.puppeteerPage.waitForSelector(selector);\n+    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n+    await this.puppeteerPage.waitFor(1000);\n+    return pdfPage;\n+  }\n+\n+  public async getPrivacyStatementCheckbox(): Promise<CheckBox> {\n+    const checkbox = new CheckBox(this.puppeteerPage);\n+    await checkbox.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT});\n+    return checkbox;\n+  }\n+\n+  public async getTermsOfUseCheckbox(): Promise<CheckBox> {\n+    const checkbox = new CheckBox(this.puppeteerPage);\n+    await checkbox.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_TERMS_OF_USE});\n+    return checkbox;\n+  }\n+\n+\n+  public async getPrivacyStatementLabel(): Promise<Label> {\n+    const label = new Label(this.puppeteerPage);\n+    await label.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT});\n+    return label;\n+    // return this.getCheckboxLabel(FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyOTQ0Mg=="}, "originalCommit": {"oid": "06636809d39562d5c137813005723f41dfae253c"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTcwNTMxOnYy", "diffSide": "RIGHT", "path": "e2e/app/CreateAccountPage.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDoyMDowNVrOFw0JNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMzowMjozNVrOFw24Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczMDI5Mg==", "bodyText": "spelling", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386730292", "createdAt": "2020-03-03T00:20:05Z", "author": {"login": "calbach"}, "path": "e2e/app/CreateAccountPage.ts", "diffHunk": "@@ -0,0 +1,218 @@\n+import {ElementHandle} from 'puppeteer';\n+import Button from './aou-elements/Button';\n+import CheckBox from './aou-elements/CheckBox';\n+import ClrIconLink from './aou-elements/ClrIconLink';\n+import Label from './aou-elements/Label';\n+import RadioButton from './aou-elements/RadioButton';\n+import SelectComponent from './aou-elements/SelectComponent';\n+import TextArea from './aou-elements/TextArea';\n+import TextBox from './aou-elements/TextBox';\n+import BasePage from './page-mixin/BasePage';\n+\n+import {defaultFieldValues} from '../resources/data/user-registration-fields';\n+\n+const faker = require('faker/locale/en_US');\n+\n+export const INSTITUTION_AFFILIATION = {\n+  EARLY_CAREER_TENURE_TRACK_RESEARCHER: 'Early career tenure-track researcher',\n+  UNDERGRADUATE_STUDENT: 'Undergraduate (Bachelor level) student',\n+  INDUSTRY: 'Industry',\n+};\n+\n+export const EDUCATION_LEVEL = {\n+  DOCTORATE: 'Doctorate',\n+};\n+\n+export const FIELD_LABEL = {\n+  READ_UNDERSTAND_PRIVACY_STATEMENT: 'I have read and understand the All of Us Research Program Privacy Statement',\n+  READ_UNDERSTAND_TERMS_OF_USE: 'I have read and understand the All of Us Research Program Terms of Use described above',\n+  INSTITUTION_NAME: 'Institution Name',\n+  ARE_YOU_AFFILIATED: 'Are you affiliated with an Academic Research Institution',\n+  RESEARCH_BACKGROUND: 'Please describe your research background, experience and research interests',\n+  EDUCATION_LEVEL: 'Highest Level of Education Completed',\n+  YEAR_OF_BIRTH: 'Year of Birth',\n+};\n+\n+export default class CreateAccountPage extends BasePage {\n+\n+  public async getInvitationKeyInput(): Promise<TextBox> {\n+    const textbox = new TextBox(this.puppeteerPage);\n+    await textbox.withCss('#invitationKey');\n+    return textbox;\n+  }\n+\n+  public async getSubmitButton(): Promise<Button> {\n+    const button = new Button(this.puppeteerPage);\n+    await button.withLabel({text: 'Submit'});\n+    return button;\n+  }\n+\n+  public async getNextButton(): Promise<Button> {\n+    const button = new Button(this.puppeteerPage);\n+    await button.withLabel({text: 'Next'});\n+    return button;\n+  }\n+\n+  public async scrollToNthPdfPage(nth: number): Promise<ElementHandle> {\n+    const selector = `.react-pdf__Document :nth-child(${nth}).react-pdf__Page.tos-pdf-page`;\n+    const pdfPage = await this.puppeteerPage.waitForSelector(selector);\n+    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n+    await this.puppeteerPage.waitFor(1000);\n+    return pdfPage;\n+  }\n+\n+  public async scrollToLastPdfPage(): Promise<ElementHandle> {\n+    const selector = '.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page';\n+    const pdfPage = await this.puppeteerPage.waitForSelector(selector);\n+    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n+    await this.puppeteerPage.waitFor(1000);\n+    return pdfPage;\n+  }\n+\n+  public async getPrivacyStatementCheckbox(): Promise<CheckBox> {\n+    const checkbox = new CheckBox(this.puppeteerPage);\n+    await checkbox.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT});\n+    return checkbox;\n+  }\n+\n+  public async getTermsOfUseCheckbox(): Promise<CheckBox> {\n+    const checkbox = new CheckBox(this.puppeteerPage);\n+    await checkbox.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_TERMS_OF_USE});\n+    return checkbox;\n+  }\n+\n+\n+  public async getPrivacyStatementLabel(): Promise<Label> {\n+    const label = new Label(this.puppeteerPage);\n+    await label.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT});\n+    return label;\n+    // return this.getCheckboxLabel(FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT);\n+  }\n+\n+  public async getTermsOfUseLabel(): Promise<Label> {\n+    const label = new Label(this.puppeteerPage);\n+    await label.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_TERMS_OF_USE});\n+    return label;\n+    // return this.getCheckboxLabel(FIELD_LABEL.READ_UNDERSTAND_TERMS_OF_USE);\n+  }\n+\n+  public async getInstitutionNameInput(): Promise<TextBox> {\n+    const textbox = new TextBox(this.puppeteerPage);\n+    await textbox.withLabel({text: FIELD_LABEL.INSTITUTION_NAME});\n+    return textbox;\n+  }\n+\n+  // true for Yes radiobutton. false for No.\n+  public async areYouAffiliatedRadioButton(yesOrNo: boolean): Promise<RadioButton> {\n+    let selector;\n+    if (yesOrNo) {\n+      selector = '//input[@id=\"show-institution-yes\"]';\n+    } else {\n+      selector = '//input[@id=\"show-institution-no\"]';\n+    }\n+    const radio = new RadioButton(this.puppeteerPage);\n+    await radio.withXpath(selector);\n+    return radio;\n+  }\n+\n+  public async getResearchBackgroundTextarea(): Promise<TextArea> {\n+    const textarea = new TextArea(this.puppeteerPage);\n+    await textarea.withLabel({text: FIELD_LABEL.RESEARCH_BACKGROUND});\n+    return textarea;\n+  }\n+\n+  public async getUsernameDomain(): Promise<unknown> {\n+    const elem = await this.puppeteerPage.waitForXPath('//*[input[@id=\"username\"]]/i');\n+    return await (await elem.getProperty('innerText')).jsonValue();\n+  }\n+\n+  public async fillInFormFields(fields: Array<{ label: string; value: string; }>): Promise<string> {\n+    let newUserName;\n+    for (const field of fields) {\n+      const textbox = new TextBox(this.puppeteerPage);\n+      await textbox.withLabel({text: field.label});\n+      await textbox.type(field.value);\n+      await textbox.pressKeyboard('Tab', { delay: 100 });\n+      if (field.label === 'New Username') {\n+        await new ClrIconLink(this.puppeteerPage).withLabel('New Username', 'success-standard');\n+        newUserName = field.value; // store new username for return\n+      }\n+    }\n+    return newUserName;\n+  }\n+\n+  // select Institution Affiliation from a dropdown\n+  public async selectInstitution(selectTextValue: string) {\n+    const dropdown = new SelectComponent(this.puppeteerPage);\n+    await dropdown.select(selectTextValue);\n+  }\n+\n+  public async getInstitutionValue() {\n+    const dropdown = new SelectComponent(this.puppeteerPage);\n+    return await dropdown.getSelectedValue();\n+  }\n+\n+  // select Education Level from a dropdown\n+  public async selectEducationLevel(selectTextValue: string) {\n+    const dropdown = new SelectComponent(this.puppeteerPage, FIELD_LABEL.EDUCATION_LEVEL);\n+    await dropdown.select(selectTextValue);\n+  }\n+\n+  // select Year of Birth from a dropdown\n+  public async selectYearOfBirth(year: string) {\n+    const dropdown = new SelectComponent(this.puppeteerPage, FIELD_LABEL.YEAR_OF_BIRTH);\n+    await dropdown.select(year);\n+  }\n+\n+  // Combined steps to make test code cleaner and shorter\n+\n+  // Step 1: Enter Invitation key\n+  public async fillOutInvitationKey(invitationKey: string) {\n+    await this.getInvitationKeyInput()\n+    .then(invitationKeyInput => invitationKeyInput.type(invitationKey))\n+    .then(() => this.getNextButton())\n+    .then(submitButton => submitButton.click());\n+  }\n+\n+  // Step 2: Accepting Terms of Use and Privacy statement.\n+  public async acceptTermsOfUseAgreement() {\n+    await this.getPrivacyStatementCheckbox();\n+    await this.getTermsOfUseCheckbox();\n+    await this.getNextButton();\n+\n+    await this.scrollToLastPdfPage();\n+\n+    // check by click on label works\n+    await (await this.getPrivacyStatementLabel()).click();\n+    await (await this.getTermsOfUseLabel()).click();\n+  }\n+\n+  // Step 3: Enter user default information\n+  public async fillOutUserInformation() {\n+    const newUserName = await this.fillInFormFields(defaultFieldValues);\n+    await (await this.getResearchBackgroundTextarea()).type(faker.lorem.word());\n+    // a different dropdown selection depending on Yes or No radiobutton was selected\n+    await (await this.areYouAffiliatedRadioButton(true)).click();\n+    await (await this.getInstitutionNameInput()).type(faker.company.companyName());\n+    await this.selectInstitution(INSTITUTION_AFFILIATION.EARLY_CAREER_TENURE_TRACK_RESEARCHER);\n+    await this.puppeteerPage.waitFor(1000);\n+    return newUserName;\n+  }\n+\n+  // Step 4: Enter demographic survey default information (All Survey Fields are optional)\n+  public async fillOutDemographicSurvey() {\n+    // Find and check on all checkboxes with same label: Prefer not to answer\n+    const targetXpath = '//*[normalize-space(text())=\"Prefer not to answer\"]/ancestor::node()[1]/input[@type=\"checkbox\"]';\n+    await this.puppeteerPage.waitForXPath(targetXpath, { visible: true });\n+    const checkboxs = await this.puppeteerPage.$x(targetXpath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06636809d39562d5c137813005723f41dfae253c"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc3NTEyNw==", "bodyText": "corrected", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386775127", "createdAt": "2020-03-03T03:02:35Z", "author": {"login": "aweng98"}, "path": "e2e/app/CreateAccountPage.ts", "diffHunk": "@@ -0,0 +1,218 @@\n+import {ElementHandle} from 'puppeteer';\n+import Button from './aou-elements/Button';\n+import CheckBox from './aou-elements/CheckBox';\n+import ClrIconLink from './aou-elements/ClrIconLink';\n+import Label from './aou-elements/Label';\n+import RadioButton from './aou-elements/RadioButton';\n+import SelectComponent from './aou-elements/SelectComponent';\n+import TextArea from './aou-elements/TextArea';\n+import TextBox from './aou-elements/TextBox';\n+import BasePage from './page-mixin/BasePage';\n+\n+import {defaultFieldValues} from '../resources/data/user-registration-fields';\n+\n+const faker = require('faker/locale/en_US');\n+\n+export const INSTITUTION_AFFILIATION = {\n+  EARLY_CAREER_TENURE_TRACK_RESEARCHER: 'Early career tenure-track researcher',\n+  UNDERGRADUATE_STUDENT: 'Undergraduate (Bachelor level) student',\n+  INDUSTRY: 'Industry',\n+};\n+\n+export const EDUCATION_LEVEL = {\n+  DOCTORATE: 'Doctorate',\n+};\n+\n+export const FIELD_LABEL = {\n+  READ_UNDERSTAND_PRIVACY_STATEMENT: 'I have read and understand the All of Us Research Program Privacy Statement',\n+  READ_UNDERSTAND_TERMS_OF_USE: 'I have read and understand the All of Us Research Program Terms of Use described above',\n+  INSTITUTION_NAME: 'Institution Name',\n+  ARE_YOU_AFFILIATED: 'Are you affiliated with an Academic Research Institution',\n+  RESEARCH_BACKGROUND: 'Please describe your research background, experience and research interests',\n+  EDUCATION_LEVEL: 'Highest Level of Education Completed',\n+  YEAR_OF_BIRTH: 'Year of Birth',\n+};\n+\n+export default class CreateAccountPage extends BasePage {\n+\n+  public async getInvitationKeyInput(): Promise<TextBox> {\n+    const textbox = new TextBox(this.puppeteerPage);\n+    await textbox.withCss('#invitationKey');\n+    return textbox;\n+  }\n+\n+  public async getSubmitButton(): Promise<Button> {\n+    const button = new Button(this.puppeteerPage);\n+    await button.withLabel({text: 'Submit'});\n+    return button;\n+  }\n+\n+  public async getNextButton(): Promise<Button> {\n+    const button = new Button(this.puppeteerPage);\n+    await button.withLabel({text: 'Next'});\n+    return button;\n+  }\n+\n+  public async scrollToNthPdfPage(nth: number): Promise<ElementHandle> {\n+    const selector = `.react-pdf__Document :nth-child(${nth}).react-pdf__Page.tos-pdf-page`;\n+    const pdfPage = await this.puppeteerPage.waitForSelector(selector);\n+    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n+    await this.puppeteerPage.waitFor(1000);\n+    return pdfPage;\n+  }\n+\n+  public async scrollToLastPdfPage(): Promise<ElementHandle> {\n+    const selector = '.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page';\n+    const pdfPage = await this.puppeteerPage.waitForSelector(selector);\n+    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n+    await this.puppeteerPage.waitFor(1000);\n+    return pdfPage;\n+  }\n+\n+  public async getPrivacyStatementCheckbox(): Promise<CheckBox> {\n+    const checkbox = new CheckBox(this.puppeteerPage);\n+    await checkbox.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT});\n+    return checkbox;\n+  }\n+\n+  public async getTermsOfUseCheckbox(): Promise<CheckBox> {\n+    const checkbox = new CheckBox(this.puppeteerPage);\n+    await checkbox.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_TERMS_OF_USE});\n+    return checkbox;\n+  }\n+\n+\n+  public async getPrivacyStatementLabel(): Promise<Label> {\n+    const label = new Label(this.puppeteerPage);\n+    await label.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT});\n+    return label;\n+    // return this.getCheckboxLabel(FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT);\n+  }\n+\n+  public async getTermsOfUseLabel(): Promise<Label> {\n+    const label = new Label(this.puppeteerPage);\n+    await label.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_TERMS_OF_USE});\n+    return label;\n+    // return this.getCheckboxLabel(FIELD_LABEL.READ_UNDERSTAND_TERMS_OF_USE);\n+  }\n+\n+  public async getInstitutionNameInput(): Promise<TextBox> {\n+    const textbox = new TextBox(this.puppeteerPage);\n+    await textbox.withLabel({text: FIELD_LABEL.INSTITUTION_NAME});\n+    return textbox;\n+  }\n+\n+  // true for Yes radiobutton. false for No.\n+  public async areYouAffiliatedRadioButton(yesOrNo: boolean): Promise<RadioButton> {\n+    let selector;\n+    if (yesOrNo) {\n+      selector = '//input[@id=\"show-institution-yes\"]';\n+    } else {\n+      selector = '//input[@id=\"show-institution-no\"]';\n+    }\n+    const radio = new RadioButton(this.puppeteerPage);\n+    await radio.withXpath(selector);\n+    return radio;\n+  }\n+\n+  public async getResearchBackgroundTextarea(): Promise<TextArea> {\n+    const textarea = new TextArea(this.puppeteerPage);\n+    await textarea.withLabel({text: FIELD_LABEL.RESEARCH_BACKGROUND});\n+    return textarea;\n+  }\n+\n+  public async getUsernameDomain(): Promise<unknown> {\n+    const elem = await this.puppeteerPage.waitForXPath('//*[input[@id=\"username\"]]/i');\n+    return await (await elem.getProperty('innerText')).jsonValue();\n+  }\n+\n+  public async fillInFormFields(fields: Array<{ label: string; value: string; }>): Promise<string> {\n+    let newUserName;\n+    for (const field of fields) {\n+      const textbox = new TextBox(this.puppeteerPage);\n+      await textbox.withLabel({text: field.label});\n+      await textbox.type(field.value);\n+      await textbox.pressKeyboard('Tab', { delay: 100 });\n+      if (field.label === 'New Username') {\n+        await new ClrIconLink(this.puppeteerPage).withLabel('New Username', 'success-standard');\n+        newUserName = field.value; // store new username for return\n+      }\n+    }\n+    return newUserName;\n+  }\n+\n+  // select Institution Affiliation from a dropdown\n+  public async selectInstitution(selectTextValue: string) {\n+    const dropdown = new SelectComponent(this.puppeteerPage);\n+    await dropdown.select(selectTextValue);\n+  }\n+\n+  public async getInstitutionValue() {\n+    const dropdown = new SelectComponent(this.puppeteerPage);\n+    return await dropdown.getSelectedValue();\n+  }\n+\n+  // select Education Level from a dropdown\n+  public async selectEducationLevel(selectTextValue: string) {\n+    const dropdown = new SelectComponent(this.puppeteerPage, FIELD_LABEL.EDUCATION_LEVEL);\n+    await dropdown.select(selectTextValue);\n+  }\n+\n+  // select Year of Birth from a dropdown\n+  public async selectYearOfBirth(year: string) {\n+    const dropdown = new SelectComponent(this.puppeteerPage, FIELD_LABEL.YEAR_OF_BIRTH);\n+    await dropdown.select(year);\n+  }\n+\n+  // Combined steps to make test code cleaner and shorter\n+\n+  // Step 1: Enter Invitation key\n+  public async fillOutInvitationKey(invitationKey: string) {\n+    await this.getInvitationKeyInput()\n+    .then(invitationKeyInput => invitationKeyInput.type(invitationKey))\n+    .then(() => this.getNextButton())\n+    .then(submitButton => submitButton.click());\n+  }\n+\n+  // Step 2: Accepting Terms of Use and Privacy statement.\n+  public async acceptTermsOfUseAgreement() {\n+    await this.getPrivacyStatementCheckbox();\n+    await this.getTermsOfUseCheckbox();\n+    await this.getNextButton();\n+\n+    await this.scrollToLastPdfPage();\n+\n+    // check by click on label works\n+    await (await this.getPrivacyStatementLabel()).click();\n+    await (await this.getTermsOfUseLabel()).click();\n+  }\n+\n+  // Step 3: Enter user default information\n+  public async fillOutUserInformation() {\n+    const newUserName = await this.fillInFormFields(defaultFieldValues);\n+    await (await this.getResearchBackgroundTextarea()).type(faker.lorem.word());\n+    // a different dropdown selection depending on Yes or No radiobutton was selected\n+    await (await this.areYouAffiliatedRadioButton(true)).click();\n+    await (await this.getInstitutionNameInput()).type(faker.company.companyName());\n+    await this.selectInstitution(INSTITUTION_AFFILIATION.EARLY_CAREER_TENURE_TRACK_RESEARCHER);\n+    await this.puppeteerPage.waitFor(1000);\n+    return newUserName;\n+  }\n+\n+  // Step 4: Enter demographic survey default information (All Survey Fields are optional)\n+  public async fillOutDemographicSurvey() {\n+    // Find and check on all checkboxes with same label: Prefer not to answer\n+    const targetXpath = '//*[normalize-space(text())=\"Prefer not to answer\"]/ancestor::node()[1]/input[@type=\"checkbox\"]';\n+    await this.puppeteerPage.waitForXPath(targetXpath, { visible: true });\n+    const checkboxs = await this.puppeteerPage.$x(targetXpath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczMDI5Mg=="}, "originalCommit": {"oid": "06636809d39562d5c137813005723f41dfae253c"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTcwODYyOnYy", "diffSide": "RIGHT", "path": "e2e/app/CreateAccountPage.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDoyMTozOFrOFw0LOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMzowMjo0OFrOFw24jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczMDgwOA==", "bodyText": "nit: I would remove this kind of comment (here and below). This is just restating what the next line of code is doing, which I could have learned just as easily by reading the code. I would use comments for higher level information - or alternatively to explain \"why\" we are doing something. The comment 10 lines above is fine because the code is pretty hairy and difficult to read (arguably, you could alternatively eliminate the comment and breakup the xpath selection to be easier to read).", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386730808", "createdAt": "2020-03-03T00:21:38Z", "author": {"login": "calbach"}, "path": "e2e/app/CreateAccountPage.ts", "diffHunk": "@@ -0,0 +1,218 @@\n+import {ElementHandle} from 'puppeteer';\n+import Button from './aou-elements/Button';\n+import CheckBox from './aou-elements/CheckBox';\n+import ClrIconLink from './aou-elements/ClrIconLink';\n+import Label from './aou-elements/Label';\n+import RadioButton from './aou-elements/RadioButton';\n+import SelectComponent from './aou-elements/SelectComponent';\n+import TextArea from './aou-elements/TextArea';\n+import TextBox from './aou-elements/TextBox';\n+import BasePage from './page-mixin/BasePage';\n+\n+import {defaultFieldValues} from '../resources/data/user-registration-fields';\n+\n+const faker = require('faker/locale/en_US');\n+\n+export const INSTITUTION_AFFILIATION = {\n+  EARLY_CAREER_TENURE_TRACK_RESEARCHER: 'Early career tenure-track researcher',\n+  UNDERGRADUATE_STUDENT: 'Undergraduate (Bachelor level) student',\n+  INDUSTRY: 'Industry',\n+};\n+\n+export const EDUCATION_LEVEL = {\n+  DOCTORATE: 'Doctorate',\n+};\n+\n+export const FIELD_LABEL = {\n+  READ_UNDERSTAND_PRIVACY_STATEMENT: 'I have read and understand the All of Us Research Program Privacy Statement',\n+  READ_UNDERSTAND_TERMS_OF_USE: 'I have read and understand the All of Us Research Program Terms of Use described above',\n+  INSTITUTION_NAME: 'Institution Name',\n+  ARE_YOU_AFFILIATED: 'Are you affiliated with an Academic Research Institution',\n+  RESEARCH_BACKGROUND: 'Please describe your research background, experience and research interests',\n+  EDUCATION_LEVEL: 'Highest Level of Education Completed',\n+  YEAR_OF_BIRTH: 'Year of Birth',\n+};\n+\n+export default class CreateAccountPage extends BasePage {\n+\n+  public async getInvitationKeyInput(): Promise<TextBox> {\n+    const textbox = new TextBox(this.puppeteerPage);\n+    await textbox.withCss('#invitationKey');\n+    return textbox;\n+  }\n+\n+  public async getSubmitButton(): Promise<Button> {\n+    const button = new Button(this.puppeteerPage);\n+    await button.withLabel({text: 'Submit'});\n+    return button;\n+  }\n+\n+  public async getNextButton(): Promise<Button> {\n+    const button = new Button(this.puppeteerPage);\n+    await button.withLabel({text: 'Next'});\n+    return button;\n+  }\n+\n+  public async scrollToNthPdfPage(nth: number): Promise<ElementHandle> {\n+    const selector = `.react-pdf__Document :nth-child(${nth}).react-pdf__Page.tos-pdf-page`;\n+    const pdfPage = await this.puppeteerPage.waitForSelector(selector);\n+    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n+    await this.puppeteerPage.waitFor(1000);\n+    return pdfPage;\n+  }\n+\n+  public async scrollToLastPdfPage(): Promise<ElementHandle> {\n+    const selector = '.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page';\n+    const pdfPage = await this.puppeteerPage.waitForSelector(selector);\n+    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n+    await this.puppeteerPage.waitFor(1000);\n+    return pdfPage;\n+  }\n+\n+  public async getPrivacyStatementCheckbox(): Promise<CheckBox> {\n+    const checkbox = new CheckBox(this.puppeteerPage);\n+    await checkbox.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT});\n+    return checkbox;\n+  }\n+\n+  public async getTermsOfUseCheckbox(): Promise<CheckBox> {\n+    const checkbox = new CheckBox(this.puppeteerPage);\n+    await checkbox.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_TERMS_OF_USE});\n+    return checkbox;\n+  }\n+\n+\n+  public async getPrivacyStatementLabel(): Promise<Label> {\n+    const label = new Label(this.puppeteerPage);\n+    await label.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT});\n+    return label;\n+    // return this.getCheckboxLabel(FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT);\n+  }\n+\n+  public async getTermsOfUseLabel(): Promise<Label> {\n+    const label = new Label(this.puppeteerPage);\n+    await label.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_TERMS_OF_USE});\n+    return label;\n+    // return this.getCheckboxLabel(FIELD_LABEL.READ_UNDERSTAND_TERMS_OF_USE);\n+  }\n+\n+  public async getInstitutionNameInput(): Promise<TextBox> {\n+    const textbox = new TextBox(this.puppeteerPage);\n+    await textbox.withLabel({text: FIELD_LABEL.INSTITUTION_NAME});\n+    return textbox;\n+  }\n+\n+  // true for Yes radiobutton. false for No.\n+  public async areYouAffiliatedRadioButton(yesOrNo: boolean): Promise<RadioButton> {\n+    let selector;\n+    if (yesOrNo) {\n+      selector = '//input[@id=\"show-institution-yes\"]';\n+    } else {\n+      selector = '//input[@id=\"show-institution-no\"]';\n+    }\n+    const radio = new RadioButton(this.puppeteerPage);\n+    await radio.withXpath(selector);\n+    return radio;\n+  }\n+\n+  public async getResearchBackgroundTextarea(): Promise<TextArea> {\n+    const textarea = new TextArea(this.puppeteerPage);\n+    await textarea.withLabel({text: FIELD_LABEL.RESEARCH_BACKGROUND});\n+    return textarea;\n+  }\n+\n+  public async getUsernameDomain(): Promise<unknown> {\n+    const elem = await this.puppeteerPage.waitForXPath('//*[input[@id=\"username\"]]/i');\n+    return await (await elem.getProperty('innerText')).jsonValue();\n+  }\n+\n+  public async fillInFormFields(fields: Array<{ label: string; value: string; }>): Promise<string> {\n+    let newUserName;\n+    for (const field of fields) {\n+      const textbox = new TextBox(this.puppeteerPage);\n+      await textbox.withLabel({text: field.label});\n+      await textbox.type(field.value);\n+      await textbox.pressKeyboard('Tab', { delay: 100 });\n+      if (field.label === 'New Username') {\n+        await new ClrIconLink(this.puppeteerPage).withLabel('New Username', 'success-standard');\n+        newUserName = field.value; // store new username for return\n+      }\n+    }\n+    return newUserName;\n+  }\n+\n+  // select Institution Affiliation from a dropdown\n+  public async selectInstitution(selectTextValue: string) {\n+    const dropdown = new SelectComponent(this.puppeteerPage);\n+    await dropdown.select(selectTextValue);\n+  }\n+\n+  public async getInstitutionValue() {\n+    const dropdown = new SelectComponent(this.puppeteerPage);\n+    return await dropdown.getSelectedValue();\n+  }\n+\n+  // select Education Level from a dropdown\n+  public async selectEducationLevel(selectTextValue: string) {\n+    const dropdown = new SelectComponent(this.puppeteerPage, FIELD_LABEL.EDUCATION_LEVEL);\n+    await dropdown.select(selectTextValue);\n+  }\n+\n+  // select Year of Birth from a dropdown\n+  public async selectYearOfBirth(year: string) {\n+    const dropdown = new SelectComponent(this.puppeteerPage, FIELD_LABEL.YEAR_OF_BIRTH);\n+    await dropdown.select(year);\n+  }\n+\n+  // Combined steps to make test code cleaner and shorter\n+\n+  // Step 1: Enter Invitation key\n+  public async fillOutInvitationKey(invitationKey: string) {\n+    await this.getInvitationKeyInput()\n+    .then(invitationKeyInput => invitationKeyInput.type(invitationKey))\n+    .then(() => this.getNextButton())\n+    .then(submitButton => submitButton.click());\n+  }\n+\n+  // Step 2: Accepting Terms of Use and Privacy statement.\n+  public async acceptTermsOfUseAgreement() {\n+    await this.getPrivacyStatementCheckbox();\n+    await this.getTermsOfUseCheckbox();\n+    await this.getNextButton();\n+\n+    await this.scrollToLastPdfPage();\n+\n+    // check by click on label works\n+    await (await this.getPrivacyStatementLabel()).click();\n+    await (await this.getTermsOfUseLabel()).click();\n+  }\n+\n+  // Step 3: Enter user default information\n+  public async fillOutUserInformation() {\n+    const newUserName = await this.fillInFormFields(defaultFieldValues);\n+    await (await this.getResearchBackgroundTextarea()).type(faker.lorem.word());\n+    // a different dropdown selection depending on Yes or No radiobutton was selected\n+    await (await this.areYouAffiliatedRadioButton(true)).click();\n+    await (await this.getInstitutionNameInput()).type(faker.company.companyName());\n+    await this.selectInstitution(INSTITUTION_AFFILIATION.EARLY_CAREER_TENURE_TRACK_RESEARCHER);\n+    await this.puppeteerPage.waitFor(1000);\n+    return newUserName;\n+  }\n+\n+  // Step 4: Enter demographic survey default information (All Survey Fields are optional)\n+  public async fillOutDemographicSurvey() {\n+    // Find and check on all checkboxes with same label: Prefer not to answer\n+    const targetXpath = '//*[normalize-space(text())=\"Prefer not to answer\"]/ancestor::node()[1]/input[@type=\"checkbox\"]';\n+    await this.puppeteerPage.waitForXPath(targetXpath, { visible: true });\n+    const checkboxs = await this.puppeteerPage.$x(targetXpath);\n+    for (const ck of checkboxs) {\n+      await ck.click();\n+    }\n+    // Select year of birth 1955", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06636809d39562d5c137813005723f41dfae253c"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc3NTE4MQ==", "bodyText": "removed.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386775181", "createdAt": "2020-03-03T03:02:48Z", "author": {"login": "aweng98"}, "path": "e2e/app/CreateAccountPage.ts", "diffHunk": "@@ -0,0 +1,218 @@\n+import {ElementHandle} from 'puppeteer';\n+import Button from './aou-elements/Button';\n+import CheckBox from './aou-elements/CheckBox';\n+import ClrIconLink from './aou-elements/ClrIconLink';\n+import Label from './aou-elements/Label';\n+import RadioButton from './aou-elements/RadioButton';\n+import SelectComponent from './aou-elements/SelectComponent';\n+import TextArea from './aou-elements/TextArea';\n+import TextBox from './aou-elements/TextBox';\n+import BasePage from './page-mixin/BasePage';\n+\n+import {defaultFieldValues} from '../resources/data/user-registration-fields';\n+\n+const faker = require('faker/locale/en_US');\n+\n+export const INSTITUTION_AFFILIATION = {\n+  EARLY_CAREER_TENURE_TRACK_RESEARCHER: 'Early career tenure-track researcher',\n+  UNDERGRADUATE_STUDENT: 'Undergraduate (Bachelor level) student',\n+  INDUSTRY: 'Industry',\n+};\n+\n+export const EDUCATION_LEVEL = {\n+  DOCTORATE: 'Doctorate',\n+};\n+\n+export const FIELD_LABEL = {\n+  READ_UNDERSTAND_PRIVACY_STATEMENT: 'I have read and understand the All of Us Research Program Privacy Statement',\n+  READ_UNDERSTAND_TERMS_OF_USE: 'I have read and understand the All of Us Research Program Terms of Use described above',\n+  INSTITUTION_NAME: 'Institution Name',\n+  ARE_YOU_AFFILIATED: 'Are you affiliated with an Academic Research Institution',\n+  RESEARCH_BACKGROUND: 'Please describe your research background, experience and research interests',\n+  EDUCATION_LEVEL: 'Highest Level of Education Completed',\n+  YEAR_OF_BIRTH: 'Year of Birth',\n+};\n+\n+export default class CreateAccountPage extends BasePage {\n+\n+  public async getInvitationKeyInput(): Promise<TextBox> {\n+    const textbox = new TextBox(this.puppeteerPage);\n+    await textbox.withCss('#invitationKey');\n+    return textbox;\n+  }\n+\n+  public async getSubmitButton(): Promise<Button> {\n+    const button = new Button(this.puppeteerPage);\n+    await button.withLabel({text: 'Submit'});\n+    return button;\n+  }\n+\n+  public async getNextButton(): Promise<Button> {\n+    const button = new Button(this.puppeteerPage);\n+    await button.withLabel({text: 'Next'});\n+    return button;\n+  }\n+\n+  public async scrollToNthPdfPage(nth: number): Promise<ElementHandle> {\n+    const selector = `.react-pdf__Document :nth-child(${nth}).react-pdf__Page.tos-pdf-page`;\n+    const pdfPage = await this.puppeteerPage.waitForSelector(selector);\n+    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n+    await this.puppeteerPage.waitFor(1000);\n+    return pdfPage;\n+  }\n+\n+  public async scrollToLastPdfPage(): Promise<ElementHandle> {\n+    const selector = '.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page';\n+    const pdfPage = await this.puppeteerPage.waitForSelector(selector);\n+    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n+    await this.puppeteerPage.waitFor(1000);\n+    return pdfPage;\n+  }\n+\n+  public async getPrivacyStatementCheckbox(): Promise<CheckBox> {\n+    const checkbox = new CheckBox(this.puppeteerPage);\n+    await checkbox.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT});\n+    return checkbox;\n+  }\n+\n+  public async getTermsOfUseCheckbox(): Promise<CheckBox> {\n+    const checkbox = new CheckBox(this.puppeteerPage);\n+    await checkbox.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_TERMS_OF_USE});\n+    return checkbox;\n+  }\n+\n+\n+  public async getPrivacyStatementLabel(): Promise<Label> {\n+    const label = new Label(this.puppeteerPage);\n+    await label.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT});\n+    return label;\n+    // return this.getCheckboxLabel(FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT);\n+  }\n+\n+  public async getTermsOfUseLabel(): Promise<Label> {\n+    const label = new Label(this.puppeteerPage);\n+    await label.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_TERMS_OF_USE});\n+    return label;\n+    // return this.getCheckboxLabel(FIELD_LABEL.READ_UNDERSTAND_TERMS_OF_USE);\n+  }\n+\n+  public async getInstitutionNameInput(): Promise<TextBox> {\n+    const textbox = new TextBox(this.puppeteerPage);\n+    await textbox.withLabel({text: FIELD_LABEL.INSTITUTION_NAME});\n+    return textbox;\n+  }\n+\n+  // true for Yes radiobutton. false for No.\n+  public async areYouAffiliatedRadioButton(yesOrNo: boolean): Promise<RadioButton> {\n+    let selector;\n+    if (yesOrNo) {\n+      selector = '//input[@id=\"show-institution-yes\"]';\n+    } else {\n+      selector = '//input[@id=\"show-institution-no\"]';\n+    }\n+    const radio = new RadioButton(this.puppeteerPage);\n+    await radio.withXpath(selector);\n+    return radio;\n+  }\n+\n+  public async getResearchBackgroundTextarea(): Promise<TextArea> {\n+    const textarea = new TextArea(this.puppeteerPage);\n+    await textarea.withLabel({text: FIELD_LABEL.RESEARCH_BACKGROUND});\n+    return textarea;\n+  }\n+\n+  public async getUsernameDomain(): Promise<unknown> {\n+    const elem = await this.puppeteerPage.waitForXPath('//*[input[@id=\"username\"]]/i');\n+    return await (await elem.getProperty('innerText')).jsonValue();\n+  }\n+\n+  public async fillInFormFields(fields: Array<{ label: string; value: string; }>): Promise<string> {\n+    let newUserName;\n+    for (const field of fields) {\n+      const textbox = new TextBox(this.puppeteerPage);\n+      await textbox.withLabel({text: field.label});\n+      await textbox.type(field.value);\n+      await textbox.pressKeyboard('Tab', { delay: 100 });\n+      if (field.label === 'New Username') {\n+        await new ClrIconLink(this.puppeteerPage).withLabel('New Username', 'success-standard');\n+        newUserName = field.value; // store new username for return\n+      }\n+    }\n+    return newUserName;\n+  }\n+\n+  // select Institution Affiliation from a dropdown\n+  public async selectInstitution(selectTextValue: string) {\n+    const dropdown = new SelectComponent(this.puppeteerPage);\n+    await dropdown.select(selectTextValue);\n+  }\n+\n+  public async getInstitutionValue() {\n+    const dropdown = new SelectComponent(this.puppeteerPage);\n+    return await dropdown.getSelectedValue();\n+  }\n+\n+  // select Education Level from a dropdown\n+  public async selectEducationLevel(selectTextValue: string) {\n+    const dropdown = new SelectComponent(this.puppeteerPage, FIELD_LABEL.EDUCATION_LEVEL);\n+    await dropdown.select(selectTextValue);\n+  }\n+\n+  // select Year of Birth from a dropdown\n+  public async selectYearOfBirth(year: string) {\n+    const dropdown = new SelectComponent(this.puppeteerPage, FIELD_LABEL.YEAR_OF_BIRTH);\n+    await dropdown.select(year);\n+  }\n+\n+  // Combined steps to make test code cleaner and shorter\n+\n+  // Step 1: Enter Invitation key\n+  public async fillOutInvitationKey(invitationKey: string) {\n+    await this.getInvitationKeyInput()\n+    .then(invitationKeyInput => invitationKeyInput.type(invitationKey))\n+    .then(() => this.getNextButton())\n+    .then(submitButton => submitButton.click());\n+  }\n+\n+  // Step 2: Accepting Terms of Use and Privacy statement.\n+  public async acceptTermsOfUseAgreement() {\n+    await this.getPrivacyStatementCheckbox();\n+    await this.getTermsOfUseCheckbox();\n+    await this.getNextButton();\n+\n+    await this.scrollToLastPdfPage();\n+\n+    // check by click on label works\n+    await (await this.getPrivacyStatementLabel()).click();\n+    await (await this.getTermsOfUseLabel()).click();\n+  }\n+\n+  // Step 3: Enter user default information\n+  public async fillOutUserInformation() {\n+    const newUserName = await this.fillInFormFields(defaultFieldValues);\n+    await (await this.getResearchBackgroundTextarea()).type(faker.lorem.word());\n+    // a different dropdown selection depending on Yes or No radiobutton was selected\n+    await (await this.areYouAffiliatedRadioButton(true)).click();\n+    await (await this.getInstitutionNameInput()).type(faker.company.companyName());\n+    await this.selectInstitution(INSTITUTION_AFFILIATION.EARLY_CAREER_TENURE_TRACK_RESEARCHER);\n+    await this.puppeteerPage.waitFor(1000);\n+    return newUserName;\n+  }\n+\n+  // Step 4: Enter demographic survey default information (All Survey Fields are optional)\n+  public async fillOutDemographicSurvey() {\n+    // Find and check on all checkboxes with same label: Prefer not to answer\n+    const targetXpath = '//*[normalize-space(text())=\"Prefer not to answer\"]/ancestor::node()[1]/input[@type=\"checkbox\"]';\n+    await this.puppeteerPage.waitForXPath(targetXpath, { visible: true });\n+    const checkboxs = await this.puppeteerPage.$x(targetXpath);\n+    for (const ck of checkboxs) {\n+      await ck.click();\n+    }\n+    // Select year of birth 1955", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczMDgwOA=="}, "originalCommit": {"oid": "06636809d39562d5c137813005723f41dfae253c"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTcyMzI5OnYy", "diffSide": "RIGHT", "path": "e2e/app/page-mixin/PageNavigation.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDoyOTowNFrOFw0UIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDoyOTowNFrOFw0UIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczMzA5MA==", "bodyText": "Are these really mixins? Aren't they just base classes? Mixin implies I could include multiple of these into a page - I don't see how you would be able to do that in the current inheritance model.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386733090", "createdAt": "2020-03-03T00:29:04Z", "author": {"login": "calbach"}, "path": "e2e/app/page-mixin/PageNavigation.ts", "diffHunk": "@@ -0,0 +1,95 @@\n+import {Page} from 'puppeteer';\n+import {iconXpath} from '../aou-elements/xpath-defaults';\n+import {findIcon} from '../aou-elements/xpath-finder';\n+\n+\n+export const LINK = {\n+  HOME: 'Home',\n+  ADMIN: 'Admin',\n+  USER_ADMIN: 'User Admin',\n+  PROFILE: 'Profile',\n+  SIGN_OUT: 'Sign Out',\n+  CONTACT_US: 'Contact Us',\n+  USER_SUPPORT: 'User Support',\n+  YOUR_WORKSPACES: 'Your Workspaces',\n+  FEATURED_WORKSPACES: 'Featured Workspaces',\n+};\n+\n+export const LINK_ICON = {\n+  HOME: 'home',\n+  ADMIN: 'user',\n+  CONTACT_US: 'envelope',\n+  USER_SUPPORT: 'help',\n+  YOUR_WORKSPACES: 'applications',\n+  FEATURED_WORKSPACES: 'star',\n+};\n+\n+\n+export default class PageNavigation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06636809d39562d5c137813005723f41dfae253c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTcyOTcwOnYy", "diffSide": "RIGHT", "path": "e2e/app/page-mixin/PageNavigation.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDozMjozM1rOFw0YEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDozMjozM1rOFw0YEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNDA5Nw==", "bodyText": "Are all of these actively used? Or is this just trying to be exhaustive?\nIf you haven't had it already, I think we should have a discussion about how we should think about keeping these things in sync with the application, especially if the goal is to have 100% UI coverage of the different elements.\nFor example, if we're depending on text labels like this, it might be more maintainable to export specific values/labels from our React components. This will result in a quick compile-time issue, rather than a runtime integration test failure, which might take a very long time to manifest.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386734097", "createdAt": "2020-03-03T00:32:33Z", "author": {"login": "calbach"}, "path": "e2e/app/page-mixin/PageNavigation.ts", "diffHunk": "@@ -0,0 +1,95 @@\n+import {Page} from 'puppeteer';\n+import {iconXpath} from '../aou-elements/xpath-defaults';\n+import {findIcon} from '../aou-elements/xpath-finder';\n+\n+\n+export const LINK = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06636809d39562d5c137813005723f41dfae253c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTc0MzI4OnYy", "diffSide": "RIGHT", "path": "e2e/tests/aou-elements-verify.spec.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDozODo1M1rOFw0fmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjoxOToyM1rOFzMBvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNjAyNg==", "bodyText": "This looks like multiple test cases to me. Depending on how expensive a single test case setup is, I would split this out into at least a few targets categories of tests.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386736026", "createdAt": "2020-03-03T00:38:53Z", "author": {"login": "calbach"}, "path": "e2e/tests/aou-elements-verify.spec.ts", "diffHunk": "@@ -0,0 +1,96 @@\n+import {Browser, Page} from 'puppeteer';\n+import NewClrIconLink from '../app/aou-elements/ClrIconLink';\n+import GoogleLoginPage from '../app/GoogleLoginPage';\n+import HomePage, {FIELD_LABEL} from '../app/HomePage';\n+import PageNavigation, {LINK} from '../app/page-mixin/PageNavigation';\n+import ProfilePage from '../app/ProfilePage';\n+import WorkspaceCard from '../app/WorkspaceCard';\n+import WorkspacesPage from '../app/WorkspacesPage';\n+import launchBrowser from '../driver/puppeteer-launch';\n+\n+const configs = require('../resources/workbench-config');\n+\n+jest.setTimeout(60 * 1000);\n+\n+describe.skip('aou-elements', () => {\n+\n+  let browser: Browser;\n+  let page: Page;\n+\n+  beforeAll(async () => {\n+    browser = await launchBrowser();\n+  });\n+\n+  afterAll(async () => {\n+    await browser.close();\n+  });\n+\n+  beforeEach(async () => {\n+    const incognitoContext = await browser.createIncognitoBrowserContext();\n+    page = await incognitoContext.newPage();\n+    await page.setUserAgent(configs.puppeteerUserAgent);\n+    const loginPage = new GoogleLoginPage(page);\n+    await loginPage.login();\n+  });\n+\n+  afterEach(async () => {\n+    await page.close();\n+    await page.waitFor(1000);\n+  });\n+\n+  test('Workspace card', async () => {\n+    const home = new HomePage(page);\n+    await home.waitForReady();\n+\n+    await WorkspaceCard.getAllCards(page);\n+    await WorkspaceCard.getAnyCard(page);\n+\n+    await PageNavigation.goTo(page, LINK.YOUR_WORKSPACES);\n+    await new WorkspacesPage(page).waitForReady();\n+\n+    const n = 'aoutest-70-1583167646';\n+    const myCard = await WorkspaceCard.findCard(page, n);\n+    const myCardName = await myCard.getResourceCardName();\n+    expect(myCardName).toEqual(n);\n+    expect(await myCard.getEllipsisIcon()).toBeTruthy();\n+\n+    const linTexts = await myCard.getPopupLinkTextsArray();\n+    expect(linTexts).toEqual(expect.arrayContaining(['Share', 'Edit', 'Duplicate', 'Delete']));\n+  });\n+\n+  /**\n+   * This is not a Puppeteer test for AoU application. It is for framework functions testing.\n+   * If you make any change in aou-elements classes, you want to run this test to verify changes.\n+   */\n+  test('Click on Create New Workspace link on Home page', async () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06636809d39562d5c137813005723f41dfae253c"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc3NjQ3NA==", "bodyText": "I didn't pay too much attention to this test's organization and structure because it's used to test new or/and modified functions. I think there should be functions unit test cases to ensure functions don't break. I just haven't put in time to think it through more thoroughly. I need time to make a plan.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386776474", "createdAt": "2020-03-03T03:08:34Z", "author": {"login": "aweng98"}, "path": "e2e/tests/aou-elements-verify.spec.ts", "diffHunk": "@@ -0,0 +1,96 @@\n+import {Browser, Page} from 'puppeteer';\n+import NewClrIconLink from '../app/aou-elements/ClrIconLink';\n+import GoogleLoginPage from '../app/GoogleLoginPage';\n+import HomePage, {FIELD_LABEL} from '../app/HomePage';\n+import PageNavigation, {LINK} from '../app/page-mixin/PageNavigation';\n+import ProfilePage from '../app/ProfilePage';\n+import WorkspaceCard from '../app/WorkspaceCard';\n+import WorkspacesPage from '../app/WorkspacesPage';\n+import launchBrowser from '../driver/puppeteer-launch';\n+\n+const configs = require('../resources/workbench-config');\n+\n+jest.setTimeout(60 * 1000);\n+\n+describe.skip('aou-elements', () => {\n+\n+  let browser: Browser;\n+  let page: Page;\n+\n+  beforeAll(async () => {\n+    browser = await launchBrowser();\n+  });\n+\n+  afterAll(async () => {\n+    await browser.close();\n+  });\n+\n+  beforeEach(async () => {\n+    const incognitoContext = await browser.createIncognitoBrowserContext();\n+    page = await incognitoContext.newPage();\n+    await page.setUserAgent(configs.puppeteerUserAgent);\n+    const loginPage = new GoogleLoginPage(page);\n+    await loginPage.login();\n+  });\n+\n+  afterEach(async () => {\n+    await page.close();\n+    await page.waitFor(1000);\n+  });\n+\n+  test('Workspace card', async () => {\n+    const home = new HomePage(page);\n+    await home.waitForReady();\n+\n+    await WorkspaceCard.getAllCards(page);\n+    await WorkspaceCard.getAnyCard(page);\n+\n+    await PageNavigation.goTo(page, LINK.YOUR_WORKSPACES);\n+    await new WorkspacesPage(page).waitForReady();\n+\n+    const n = 'aoutest-70-1583167646';\n+    const myCard = await WorkspaceCard.findCard(page, n);\n+    const myCardName = await myCard.getResourceCardName();\n+    expect(myCardName).toEqual(n);\n+    expect(await myCard.getEllipsisIcon()).toBeTruthy();\n+\n+    const linTexts = await myCard.getPopupLinkTextsArray();\n+    expect(linTexts).toEqual(expect.arrayContaining(['Share', 'Edit', 'Duplicate', 'Delete']));\n+  });\n+\n+  /**\n+   * This is not a Puppeteer test for AoU application. It is for framework functions testing.\n+   * If you make any change in aou-elements classes, you want to run this test to verify changes.\n+   */\n+  test('Click on Create New Workspace link on Home page', async () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNjAyNg=="}, "originalCommit": {"oid": "06636809d39562d5c137813005723f41dfae253c"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxODc1MQ==", "bodyText": "removed aou-elements-verify.spec.ts", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389218751", "createdAt": "2020-03-07T02:19:23Z", "author": {"login": "aweng98"}, "path": "e2e/tests/aou-elements-verify.spec.ts", "diffHunk": "@@ -0,0 +1,96 @@\n+import {Browser, Page} from 'puppeteer';\n+import NewClrIconLink from '../app/aou-elements/ClrIconLink';\n+import GoogleLoginPage from '../app/GoogleLoginPage';\n+import HomePage, {FIELD_LABEL} from '../app/HomePage';\n+import PageNavigation, {LINK} from '../app/page-mixin/PageNavigation';\n+import ProfilePage from '../app/ProfilePage';\n+import WorkspaceCard from '../app/WorkspaceCard';\n+import WorkspacesPage from '../app/WorkspacesPage';\n+import launchBrowser from '../driver/puppeteer-launch';\n+\n+const configs = require('../resources/workbench-config');\n+\n+jest.setTimeout(60 * 1000);\n+\n+describe.skip('aou-elements', () => {\n+\n+  let browser: Browser;\n+  let page: Page;\n+\n+  beforeAll(async () => {\n+    browser = await launchBrowser();\n+  });\n+\n+  afterAll(async () => {\n+    await browser.close();\n+  });\n+\n+  beforeEach(async () => {\n+    const incognitoContext = await browser.createIncognitoBrowserContext();\n+    page = await incognitoContext.newPage();\n+    await page.setUserAgent(configs.puppeteerUserAgent);\n+    const loginPage = new GoogleLoginPage(page);\n+    await loginPage.login();\n+  });\n+\n+  afterEach(async () => {\n+    await page.close();\n+    await page.waitFor(1000);\n+  });\n+\n+  test('Workspace card', async () => {\n+    const home = new HomePage(page);\n+    await home.waitForReady();\n+\n+    await WorkspaceCard.getAllCards(page);\n+    await WorkspaceCard.getAnyCard(page);\n+\n+    await PageNavigation.goTo(page, LINK.YOUR_WORKSPACES);\n+    await new WorkspacesPage(page).waitForReady();\n+\n+    const n = 'aoutest-70-1583167646';\n+    const myCard = await WorkspaceCard.findCard(page, n);\n+    const myCardName = await myCard.getResourceCardName();\n+    expect(myCardName).toEqual(n);\n+    expect(await myCard.getEllipsisIcon()).toBeTruthy();\n+\n+    const linTexts = await myCard.getPopupLinkTextsArray();\n+    expect(linTexts).toEqual(expect.arrayContaining(['Share', 'Edit', 'Duplicate', 'Delete']));\n+  });\n+\n+  /**\n+   * This is not a Puppeteer test for AoU application. It is for framework functions testing.\n+   * If you make any change in aou-elements classes, you want to run this test to verify changes.\n+   */\n+  test('Click on Create New Workspace link on Home page', async () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNjAyNg=="}, "originalCommit": {"oid": "06636809d39562d5c137813005723f41dfae253c"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTc0NTE3OnYy", "diffSide": "RIGHT", "path": "e2e/tests/home/homepage.spec.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDozOTo1OFrOFw0gtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzowNjoyNlrOFx14TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNjMxMQ==", "bodyText": "What's the rationale for checking this? Isn't this a bit of a blackbox implementation detail? I would think in an integration test we would prefer to just check whether everything got rendered.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386736311", "createdAt": "2020-03-03T00:39:58Z", "author": {"login": "calbach"}, "path": "e2e/tests/home/homepage.spec.ts", "diffHunk": "@@ -1,51 +1,142 @@\n-import GoogleLoginPage from '../../app/google-login';\n-import Home from '../../app/home';\n-import WorkspacePage from '../../app/workspace-page';\n-import PuppeteerLaunch from '../../services/puppeteer-launch';\n+import Link from '../../app/aou-elements/Link';\n+import WebElement from '../../app/aou-elements/WebElement';\n+import GoogleLoginPage from '../../app/GoogleLoginPage';\n+import HomePage, {FIELD_LABEL as editPageFieldLabel} from '../../app/HomePage';\n+import WorkspaceCard from '../../app/WorkspaceCard';\n+import WorkspaceEditPage from '../../app/WorkspaceEditPage';\n+import WorkspacesPage from '../../app/WorkspacesPage';\n+import launchBrowser from '../../driver/puppeteer-launch';\n \n jest.setTimeout(60 * 1000);\n \n-const configs = require('../../resources/config');\n+const configs = require('../../resources/workbench-config');\n \n-describe.skip('Home page tests:', () => {\n+describe('Home', () => {\n   let browser;\n   let page;\n-  let cookies;\n \n   beforeAll(async () => {\n-    browser = await PuppeteerLaunch();\n+    browser = await launchBrowser();\n   });\n \n   beforeEach(async () => {\n     page = await browser.newPage();\n     await page.setUserAgent(configs.puppeteerUserAgent);\n-    await page.setDefaultNavigationTimeout(60000);\n   });\n \n   afterEach(async () => {\n     await page.close();\n+    await page.waitFor(1000);\n   });\n \n   afterAll(async () => {\n     await browser.close();\n   });\n \n-  test('Homepage is the landing page after sign in', async () => {\n+  test('Homepage is the landing page after Sign In', async () => {\n+    // Enable networks requests inspection\n+    await page.setRequestInterception(true);\n+\n+    // Following network requests expected to happen\n+    const targetRequestsUrls = [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06636809d39562d5c137813005723f41dfae253c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc3NDAxMg==", "bodyText": "couple reasons. first, I wanted to try out code to learn how to intercept network requests in test. second, I want to grab workspaces found in response json and verify against displayed workspaces loaded in UI. I haven't been able to find time now to implement part two to make this test do more, but I will.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386774012", "createdAt": "2020-03-03T02:57:56Z", "author": {"login": "aweng98"}, "path": "e2e/tests/home/homepage.spec.ts", "diffHunk": "@@ -1,51 +1,142 @@\n-import GoogleLoginPage from '../../app/google-login';\n-import Home from '../../app/home';\n-import WorkspacePage from '../../app/workspace-page';\n-import PuppeteerLaunch from '../../services/puppeteer-launch';\n+import Link from '../../app/aou-elements/Link';\n+import WebElement from '../../app/aou-elements/WebElement';\n+import GoogleLoginPage from '../../app/GoogleLoginPage';\n+import HomePage, {FIELD_LABEL as editPageFieldLabel} from '../../app/HomePage';\n+import WorkspaceCard from '../../app/WorkspaceCard';\n+import WorkspaceEditPage from '../../app/WorkspaceEditPage';\n+import WorkspacesPage from '../../app/WorkspacesPage';\n+import launchBrowser from '../../driver/puppeteer-launch';\n \n jest.setTimeout(60 * 1000);\n \n-const configs = require('../../resources/config');\n+const configs = require('../../resources/workbench-config');\n \n-describe.skip('Home page tests:', () => {\n+describe('Home', () => {\n   let browser;\n   let page;\n-  let cookies;\n \n   beforeAll(async () => {\n-    browser = await PuppeteerLaunch();\n+    browser = await launchBrowser();\n   });\n \n   beforeEach(async () => {\n     page = await browser.newPage();\n     await page.setUserAgent(configs.puppeteerUserAgent);\n-    await page.setDefaultNavigationTimeout(60000);\n   });\n \n   afterEach(async () => {\n     await page.close();\n+    await page.waitFor(1000);\n   });\n \n   afterAll(async () => {\n     await browser.close();\n   });\n \n-  test('Homepage is the landing page after sign in', async () => {\n+  test('Homepage is the landing page after Sign In', async () => {\n+    // Enable networks requests inspection\n+    await page.setRequestInterception(true);\n+\n+    // Following network requests expected to happen\n+    const targetRequestsUrls = [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNjMxMQ=="}, "originalCommit": {"oid": "06636809d39562d5c137813005723f41dfae253c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwNzMwOA==", "bodyText": "I second CH's comment \u2013\u00a0it's an interesting capability from a pure tech pespective, but solidly not in scope for this test infrastructure. What matters \u2013\u00a0especially for end-to-end tests \u2013\u00a0is how the user interacts with the page. We should aggressively avoid inspecting internal state or flows that users won't be able to see.\nOne application where I could see some of this network-interception functionality to be useful would be this: if we wanted to check, for example, that the UI responded in a reasonable way to a 500 error on user account creation (something that I know we do very poorly at today), you might want to have a test which short-circuits a certain request to return a 500 status code, in order to evaluate the UI's ability to gracefully handle such an error. But even then, I might argue that this is more appropriately the domain of unit tests, since it's even easier for us to mock out error responses there.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387807308", "createdAt": "2020-03-04T17:06:26Z", "author": {"login": "gjuggler"}, "path": "e2e/tests/home/homepage.spec.ts", "diffHunk": "@@ -1,51 +1,142 @@\n-import GoogleLoginPage from '../../app/google-login';\n-import Home from '../../app/home';\n-import WorkspacePage from '../../app/workspace-page';\n-import PuppeteerLaunch from '../../services/puppeteer-launch';\n+import Link from '../../app/aou-elements/Link';\n+import WebElement from '../../app/aou-elements/WebElement';\n+import GoogleLoginPage from '../../app/GoogleLoginPage';\n+import HomePage, {FIELD_LABEL as editPageFieldLabel} from '../../app/HomePage';\n+import WorkspaceCard from '../../app/WorkspaceCard';\n+import WorkspaceEditPage from '../../app/WorkspaceEditPage';\n+import WorkspacesPage from '../../app/WorkspacesPage';\n+import launchBrowser from '../../driver/puppeteer-launch';\n \n jest.setTimeout(60 * 1000);\n \n-const configs = require('../../resources/config');\n+const configs = require('../../resources/workbench-config');\n \n-describe.skip('Home page tests:', () => {\n+describe('Home', () => {\n   let browser;\n   let page;\n-  let cookies;\n \n   beforeAll(async () => {\n-    browser = await PuppeteerLaunch();\n+    browser = await launchBrowser();\n   });\n \n   beforeEach(async () => {\n     page = await browser.newPage();\n     await page.setUserAgent(configs.puppeteerUserAgent);\n-    await page.setDefaultNavigationTimeout(60000);\n   });\n \n   afterEach(async () => {\n     await page.close();\n+    await page.waitFor(1000);\n   });\n \n   afterAll(async () => {\n     await browser.close();\n   });\n \n-  test('Homepage is the landing page after sign in', async () => {\n+  test('Homepage is the landing page after Sign In', async () => {\n+    // Enable networks requests inspection\n+    await page.setRequestInterception(true);\n+\n+    // Following network requests expected to happen\n+    const targetRequestsUrls = [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNjMxMQ=="}, "originalCommit": {"oid": "06636809d39562d5c137813005723f41dfae253c"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTc0OTc0OnYy", "diffSide": "RIGHT", "path": "e2e/tests/misc/page-navigation.spec.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDo0MjoyMlrOFw0jeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjo1OToxNVrOFw21cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNzAxNw==", "bodyText": "Probably at least /login. Better is to check the end of the path", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386737017", "createdAt": "2020-03-03T00:42:22Z", "author": {"login": "calbach"}, "path": "e2e/tests/misc/page-navigation.spec.ts", "diffHunk": "@@ -0,0 +1,131 @@\n+import Button from '../../app/aou-elements/Button';\n+import GoogleLoginPage from '../../app/GoogleLoginPage';\n+import HomePage from '../../app/HomePage';\n+import PageNavigation, {LINK} from '../../app/page-mixin/PageNavigation';\n+import ProfilePage from '../../app/ProfilePage';\n+import WorkspacesPage from '../../app/WorkspacesPage';\n+import launchBrowser from '../../driver/puppeteer-launch';\n+\n+jest.setTimeout(60 * 1000);\n+\n+const configs = require('../../resources/workbench-config');\n+\n+export const HELP_DESK = {\n+  ASK_QUESTION: 'Ask a question about the Researcher Workbench',\n+  REPORT_DATA_PRIVACY_CONCERN: 'Report a data privacy concern',\n+  TELL_US_ABOUT_PUBLICATION: 'Tell us about an upcoming publication',\n+  REQUEST_ADDITIONAL_BILLING_CREDITS: 'Request additional billing credits',\n+};\n+\n+describe('Navigation', () => {\n+\n+  let browser;\n+  let page;\n+\n+  beforeAll(async () => {\n+    browser = await launchBrowser();\n+  });\n+\n+  beforeEach(async () => {\n+    page = await browser.newPage();\n+    await page.setUserAgent(configs.puppeteerUserAgent);\n+  });\n+\n+  afterEach(async () => {\n+    await page.close();\n+    await page.waitFor(1000);\n+  });\n+\n+  afterAll(async () => {\n+    await browser.close();\n+  });\n+\n+\n+  test('App navigation links work', async () => {\n+\n+    const loginPage = new GoogleLoginPage(page);\n+    await loginPage.login();\n+\n+    const homePage = new HomePage(page);\n+    await homePage.waitForReady();\n+    expect(await homePage.isLoaded()).toBe(true);\n+\n+    // Select Profile link\n+    await PageNavigation.goTo(page, LINK.PROFILE);\n+    const profilePage = new ProfilePage(page);\n+    await profilePage.waitForReady();\n+    expect(await profilePage.isLoaded()).toBe(true);\n+\n+    // check user name in dropdown matches names on Profile page\n+    const fname = await (await profilePage.getFirstName()).getValue();\n+    const lname = await (await profilePage.getLastName()).getValue();\n+    await PageNavigation.openDropdown(page);\n+    const displayedUsername = await PageNavigation.getUserName(page);\n+    expect(displayedUsername).toBe(`${fname} ${lname}`);\n+\n+    // Select Your Workspaces link\n+    await PageNavigation.goTo(page, LINK.YOUR_WORKSPACES);\n+    const workspacesPage = new WorkspacesPage(page);\n+    await workspacesPage.waitForReady();\n+    expect(await workspacesPage.isLoaded()).toBe(true);\n+\n+    // Select Home link\n+    await PageNavigation.goTo(page, LINK.HOME);\n+    await homePage.waitForReady();\n+    expect(await homePage.isLoaded()).toBe(true);\n+    \n+  });\n+\n+  test('Check Contact Us form', async () => {\n+\n+    const home = new HomePage(page);\n+    await home.goToURL();\n+\n+    const iframeTitle = 'Find more information here';\n+    let iframeHandle = await page.$(`iframe[title='${iframeTitle}']`);\n+\n+    // Select Contact Us\n+    await PageNavigation.goTo(page, LINK.CONTACT_US);\n+\n+    iframeHandle = await page.waitForSelector(`iframe[title='${iframeTitle}']`);\n+    const newIframe = await iframeHandle.contentFrame();\n+\n+    const askQuestionAboutButton = new Button(newIframe);\n+    await askQuestionAboutButton.withLabel({text: HELP_DESK.ASK_QUESTION});\n+    expect(await askQuestionAboutButton.isVisible()).toBe(true);\n+\n+    const reportConcernButton = new Button(newIframe);\n+    await reportConcernButton.withLabel({text: HELP_DESK.REPORT_DATA_PRIVACY_CONCERN});\n+    expect(await reportConcernButton.isVisible()).toBe(true);\n+    await reportConcernButton.dispose();\n+\n+    const tellAboutPublicationButton = new Button(newIframe);\n+    await tellAboutPublicationButton.withLabel({text: HELP_DESK.TELL_US_ABOUT_PUBLICATION});\n+    expect(await tellAboutPublicationButton.isVisible()).toBe(true);\n+    await tellAboutPublicationButton.dispose();\n+\n+    const requestBillingCreditsButton = new Button(newIframe);\n+    await requestBillingCreditsButton.withLabel({text: HELP_DESK.REQUEST_ADDITIONAL_BILLING_CREDITS});\n+    expect(await requestBillingCreditsButton.isVisible()).toBe(true);\n+    await requestBillingCreditsButton.dispose();\n+\n+    const minimizeButton = await newIframe.$('button[aria-label=\\'Minimize widget\\']');\n+    await minimizeButton.click();\n+\n+    expect(await askQuestionAboutButton.isVisible()).toBe(false);\n+    await askQuestionAboutButton.dispose();\n+\n+  });\n+\n+  test('Sign Out', async () => {\n+\n+    const home = new HomePage(page);\n+    await home.goToURL();\n+\n+    // Select Sign Out link\n+    await PageNavigation.goTo(page, LINK.SIGN_OUT);\n+    expect(await page.url()).toContain('login');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06636809d39562d5c137813005723f41dfae253c"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc3NDM4Nw==", "bodyText": "\ud83d\udc4dgood call.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386774387", "createdAt": "2020-03-03T02:59:15Z", "author": {"login": "aweng98"}, "path": "e2e/tests/misc/page-navigation.spec.ts", "diffHunk": "@@ -0,0 +1,131 @@\n+import Button from '../../app/aou-elements/Button';\n+import GoogleLoginPage from '../../app/GoogleLoginPage';\n+import HomePage from '../../app/HomePage';\n+import PageNavigation, {LINK} from '../../app/page-mixin/PageNavigation';\n+import ProfilePage from '../../app/ProfilePage';\n+import WorkspacesPage from '../../app/WorkspacesPage';\n+import launchBrowser from '../../driver/puppeteer-launch';\n+\n+jest.setTimeout(60 * 1000);\n+\n+const configs = require('../../resources/workbench-config');\n+\n+export const HELP_DESK = {\n+  ASK_QUESTION: 'Ask a question about the Researcher Workbench',\n+  REPORT_DATA_PRIVACY_CONCERN: 'Report a data privacy concern',\n+  TELL_US_ABOUT_PUBLICATION: 'Tell us about an upcoming publication',\n+  REQUEST_ADDITIONAL_BILLING_CREDITS: 'Request additional billing credits',\n+};\n+\n+describe('Navigation', () => {\n+\n+  let browser;\n+  let page;\n+\n+  beforeAll(async () => {\n+    browser = await launchBrowser();\n+  });\n+\n+  beforeEach(async () => {\n+    page = await browser.newPage();\n+    await page.setUserAgent(configs.puppeteerUserAgent);\n+  });\n+\n+  afterEach(async () => {\n+    await page.close();\n+    await page.waitFor(1000);\n+  });\n+\n+  afterAll(async () => {\n+    await browser.close();\n+  });\n+\n+\n+  test('App navigation links work', async () => {\n+\n+    const loginPage = new GoogleLoginPage(page);\n+    await loginPage.login();\n+\n+    const homePage = new HomePage(page);\n+    await homePage.waitForReady();\n+    expect(await homePage.isLoaded()).toBe(true);\n+\n+    // Select Profile link\n+    await PageNavigation.goTo(page, LINK.PROFILE);\n+    const profilePage = new ProfilePage(page);\n+    await profilePage.waitForReady();\n+    expect(await profilePage.isLoaded()).toBe(true);\n+\n+    // check user name in dropdown matches names on Profile page\n+    const fname = await (await profilePage.getFirstName()).getValue();\n+    const lname = await (await profilePage.getLastName()).getValue();\n+    await PageNavigation.openDropdown(page);\n+    const displayedUsername = await PageNavigation.getUserName(page);\n+    expect(displayedUsername).toBe(`${fname} ${lname}`);\n+\n+    // Select Your Workspaces link\n+    await PageNavigation.goTo(page, LINK.YOUR_WORKSPACES);\n+    const workspacesPage = new WorkspacesPage(page);\n+    await workspacesPage.waitForReady();\n+    expect(await workspacesPage.isLoaded()).toBe(true);\n+\n+    // Select Home link\n+    await PageNavigation.goTo(page, LINK.HOME);\n+    await homePage.waitForReady();\n+    expect(await homePage.isLoaded()).toBe(true);\n+    \n+  });\n+\n+  test('Check Contact Us form', async () => {\n+\n+    const home = new HomePage(page);\n+    await home.goToURL();\n+\n+    const iframeTitle = 'Find more information here';\n+    let iframeHandle = await page.$(`iframe[title='${iframeTitle}']`);\n+\n+    // Select Contact Us\n+    await PageNavigation.goTo(page, LINK.CONTACT_US);\n+\n+    iframeHandle = await page.waitForSelector(`iframe[title='${iframeTitle}']`);\n+    const newIframe = await iframeHandle.contentFrame();\n+\n+    const askQuestionAboutButton = new Button(newIframe);\n+    await askQuestionAboutButton.withLabel({text: HELP_DESK.ASK_QUESTION});\n+    expect(await askQuestionAboutButton.isVisible()).toBe(true);\n+\n+    const reportConcernButton = new Button(newIframe);\n+    await reportConcernButton.withLabel({text: HELP_DESK.REPORT_DATA_PRIVACY_CONCERN});\n+    expect(await reportConcernButton.isVisible()).toBe(true);\n+    await reportConcernButton.dispose();\n+\n+    const tellAboutPublicationButton = new Button(newIframe);\n+    await tellAboutPublicationButton.withLabel({text: HELP_DESK.TELL_US_ABOUT_PUBLICATION});\n+    expect(await tellAboutPublicationButton.isVisible()).toBe(true);\n+    await tellAboutPublicationButton.dispose();\n+\n+    const requestBillingCreditsButton = new Button(newIframe);\n+    await requestBillingCreditsButton.withLabel({text: HELP_DESK.REQUEST_ADDITIONAL_BILLING_CREDITS});\n+    expect(await requestBillingCreditsButton.isVisible()).toBe(true);\n+    await requestBillingCreditsButton.dispose();\n+\n+    const minimizeButton = await newIframe.$('button[aria-label=\\'Minimize widget\\']');\n+    await minimizeButton.click();\n+\n+    expect(await askQuestionAboutButton.isVisible()).toBe(false);\n+    await askQuestionAboutButton.dispose();\n+\n+  });\n+\n+  test('Sign Out', async () => {\n+\n+    const home = new HomePage(page);\n+    await home.goToURL();\n+\n+    // Select Sign Out link\n+    await PageNavigation.goTo(page, LINK.SIGN_OUT);\n+    expect(await page.url()).toContain('login');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNzAxNw=="}, "originalCommit": {"oid": "06636809d39562d5c137813005723f41dfae253c"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTc1NjkxOnYy", "diffSide": "RIGHT", "path": "e2e/app/aou-elements/xpath-defaults.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDo0NjoxMVrOFw0n1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjoyMTowNlrOFzMCXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczODEzMg==", "bodyText": "Most of these functions seem very boilerplate-y, and seem like things that could live in any project. I believe I made this comment in the past but I don't remember the resolution. Can you add a comment here or maybe a README that explains why this layer is necessary in our application, and what goes here?", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r386738132", "createdAt": "2020-03-03T00:46:11Z", "author": {"login": "calbach"}, "path": "e2e/app/aou-elements/xpath-defaults.ts", "diffHunk": "@@ -0,0 +1,128 @@\n+import TextOptions from './TextOptions';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06636809d39562d5c137813005723f41dfae253c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxODkwOQ==", "bodyText": "reworked xpath-defaults. almost no boilplate duplicate code.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389218909", "createdAt": "2020-03-07T02:21:06Z", "author": {"login": "aweng98"}, "path": "e2e/app/aou-elements/xpath-defaults.ts", "diffHunk": "@@ -0,0 +1,128 @@\n+import TextOptions from './TextOptions';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczODEzMg=="}, "originalCommit": {"oid": "06636809d39562d5c137813005723f41dfae253c"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDUzMDczOnYy", "diffSide": "RIGHT", "path": "e2e/app/page-mixin/SideNav.ts", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzoxMDo0NVrOFxiDYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjo0MjoxOVrOFzMIgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MjQ2Nw==", "bodyText": "I don't think this mixin pattern is going to work well in Typescript as is and I'm not sure it's buying much. I would suggest using a composition based approach instead.\nclass Data extends AuthenticatedPage {\n  public sidenav: SideNav;\n}\n\n...\n\ntest() {\n  dataPage.sidenav.goTo(...)\n}\n\nIf all authenticated pages have a side nav, move it to the base class instead", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387482467", "createdAt": "2020-03-04T07:10:45Z", "author": {"login": "calbach"}, "path": "e2e/app/page-mixin/SideNav.ts", "diffHunk": "@@ -0,0 +1,83 @@\n+import {Page} from 'puppeteer';\n+import {iconXpath} from '../aou-elements/xpath-defaults';\n+import {findIcon} from '../aou-elements/xpath-finder';\n+\n+export interface PuppeteerPage {\n+  page: Page;\n+}\n+\n+type Constructor<T> = new(...args: any[]) => T;\n+\n+// @ts-ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyNDM4NQ==", "bodyText": "+1, I agree the mixin pattern is challenging with TypeScript, doesn't have an analogue in our app codebase, and could just as easily be solved with composition (or by taking the approach of PageNavigation, with static methods that take a Page instance as an argument).", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387824385", "createdAt": "2020-03-04T17:36:38Z", "author": {"login": "gjuggler"}, "path": "e2e/app/page-mixin/SideNav.ts", "diffHunk": "@@ -0,0 +1,83 @@\n+import {Page} from 'puppeteer';\n+import {iconXpath} from '../aou-elements/xpath-defaults';\n+import {findIcon} from '../aou-elements/xpath-finder';\n+\n+export interface PuppeteerPage {\n+  page: Page;\n+}\n+\n+type Constructor<T> = new(...args: any[]) => T;\n+\n+// @ts-ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MjQ2Nw=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxODk2NA==", "bodyText": "mixin is gone. functions moved to BasePage", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389218964", "createdAt": "2020-03-07T02:21:43Z", "author": {"login": "aweng98"}, "path": "e2e/app/page-mixin/SideNav.ts", "diffHunk": "@@ -0,0 +1,83 @@\n+import {Page} from 'puppeteer';\n+import {iconXpath} from '../aou-elements/xpath-defaults';\n+import {findIcon} from '../aou-elements/xpath-finder';\n+\n+export interface PuppeteerPage {\n+  page: Page;\n+}\n+\n+type Constructor<T> = new(...args: any[]) => T;\n+\n+// @ts-ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MjQ2Nw=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMDQ4MA==", "bodyText": "felt satisfying write very confusing and challenging JS code. \ud83d\ude09", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389220480", "createdAt": "2020-03-07T02:42:19Z", "author": {"login": "aweng98"}, "path": "e2e/app/page-mixin/SideNav.ts", "diffHunk": "@@ -0,0 +1,83 @@\n+import {Page} from 'puppeteer';\n+import {iconXpath} from '../aou-elements/xpath-defaults';\n+import {findIcon} from '../aou-elements/xpath-finder';\n+\n+export interface PuppeteerPage {\n+  page: Page;\n+}\n+\n+type Constructor<T> = new(...args: any[]) => T;\n+\n+// @ts-ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MjQ2Nw=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDU2NTM3OnYy", "diffSide": "RIGHT", "path": "e2e/app/aou-elements/WebElement.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzoyNjoyOVrOFxiXsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjozODo1M1rOFzMHnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4NzY2NQ==", "bodyText": "After reviewing more deeply, I see the potential use for the xpath utilities. However, I'm not convinced about the \"WebElement / AouElement\". Can you summarize in the PR description, or a doc, or a README the high level design of this framework?\nHere's I'm seeing, and here's my current thinking:\n\nWe have a \"Page\" concept, which wraps standard functionality / higher level page interactions. I buy the need for this.\nWe have a low level xpath utility library for easier xpath creation. I think I buy the need for this if we're using xpath prolifically (using data-test-id more heavily reduces the need). xpath is maybe still fine for some things like picking out display strings.\nLastly we have this WebElement / AoUElement. From what I can tell, this is effectively wrapping functionality found in ElementHandle or Page. Why are we not just directly using ElementHandle, which is the interface provided by Puppeteer? If there is common functionality we want to reuse, it may be sufficient to just use static utility helpers, rather creating an intermediate wrapper over the Puppeteer model. The advantage of using a standard API is that is a fair amount of existing documentation / support material for using it.\n\nThere are a lot of lines of code here, and a lot of things to maintain / keep in sync. I also don't want to add unnecessary wrapping / boilerplate when we can use standard interfaces. The cost might be justified in certain cases, but we want to document when/why we're making those decisions. I think a high level README.md would help here. If you're basing this off a pattern in another web testing framework, please make that clear.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387487665", "createdAt": "2020-03-04T07:26:29Z", "author": {"login": "calbach"}, "path": "e2e/app/aou-elements/WebElement.ts", "diffHunk": "@@ -0,0 +1,175 @@\n+import {ClickOptions, ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import {ElementInterface} from './ElementInterface';\n+\n+export default class WebElement implements ElementInterface {\n+\n+  public static asWebElement(page: Page, elem: ElementHandle): WebElement {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMDI1Mw==", "bodyText": "explanation and reasons in JIRA ticket hopefully answer some of your questions here. The main reason for wrapper WebElement is I want to use the dot . notation to access useful functions instead import static functions. I've used this pattern in two separate test frameworks before, in Broad and IBM with WebDriver.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389220253", "createdAt": "2020-03-07T02:38:53Z", "author": {"login": "aweng98"}, "path": "e2e/app/aou-elements/WebElement.ts", "diffHunk": "@@ -0,0 +1,175 @@\n+import {ClickOptions, ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import {ElementInterface} from './ElementInterface';\n+\n+export default class WebElement implements ElementInterface {\n+\n+  public static asWebElement(page: Page, elem: ElementHandle): WebElement {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4NzY2NQ=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjQ1MDEzOnYy", "diffSide": "RIGHT", "path": "e2e/tslint.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjozMjoxMFrOFx0kpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMjo0MTowNVrOFyEs5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4NTg5Mw==", "bodyText": "nit: prefer making this consistent with the main UI tslint (which is inherited via common-ui/tslint), where we're at 140 chars limit", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387785893", "createdAt": "2020-03-04T16:32:10Z", "author": {"login": "gjuggler"}, "path": "e2e/tslint.json", "diffHunk": "@@ -27,7 +27,7 @@\n         \"max-classes-per-file\": true,\n         \"max-line-length\": [true,\n             {\n-                \"limit\": 120,\n+                \"limit\": 130,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA1MDE1MA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r388050150", "createdAt": "2020-03-05T02:41:05Z", "author": {"login": "aweng98"}, "path": "e2e/tslint.json", "diffHunk": "@@ -27,7 +27,7 @@\n         \"max-classes-per-file\": true,\n         \"max-line-length\": [true,\n             {\n-                \"limit\": 120,\n+                \"limit\": 130,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4NTg5Mw=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjQ2Mzc1OnYy", "diffSide": "RIGHT", "path": "e2e/tests/workspace/workspace-ui.spec.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjozNTozM1rOFx0tXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjozNDo1MVrOFzMGLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4ODEyNg==", "bodyText": "It would be useful to add some jsdoc or comments above each of these test harnesses describing what exactly the scope of these tests should be. In unit-testing land, it's pretty clear that we should have 1-to-1 correspondence between components and test files. But over here it's less clear, and I think we need to be aggressive about communicating to future maintainers what the intended scope of each file is.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387788126", "createdAt": "2020-03-04T16:35:33Z", "author": {"login": "gjuggler"}, "path": "e2e/tests/workspace/workspace-ui.spec.ts", "diffHunk": "@@ -1,12 +1,12 @@\n import {Page} from 'puppeteer';\n-import Home from '../../app/home';\n-import WorkspacePage from '../../app/workspace-page';\n-import AouElement from '../../driver/AouElement';\n+import WebElement from '../../app/aou-elements/WebElement';\n+import WorkspaceCard from '../../app/page-mixin/WorkspaceCard';\n+import {WorkspacesPage} from '../../app/WorkspacesPage';\n \n const Chrome = require('../../driver/ChromeDriver');\n jest.setTimeout(60 * 1000);\n \n-describe('Edit Workspace page', () => {\n+describe('Workspace', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxOTg4Nw==", "bodyText": "TBD test jsdoc needs to be added.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389219887", "createdAt": "2020-03-07T02:34:51Z", "author": {"login": "aweng98"}, "path": "e2e/tests/workspace/workspace-ui.spec.ts", "diffHunk": "@@ -1,12 +1,12 @@\n import {Page} from 'puppeteer';\n-import Home from '../../app/home';\n-import WorkspacePage from '../../app/workspace-page';\n-import AouElement from '../../driver/AouElement';\n+import WebElement from '../../app/aou-elements/WebElement';\n+import WorkspaceCard from '../../app/page-mixin/WorkspaceCard';\n+import {WorkspacesPage} from '../../app/WorkspacesPage';\n \n const Chrome = require('../../driver/ChromeDriver');\n jest.setTimeout(60 * 1000);\n \n-describe('Edit Workspace page', () => {\n+describe('Workspace', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4ODEyNg=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjQ4NDAwOnYy", "diffSide": "RIGHT", "path": "e2e/tests/workspace/workspace-create.spec.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjo0MDozNVrOFx052g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjoyMzowMlrOFzMC1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5MTMyMg==", "bodyText": "Yikes \u2013\u00a0do we really need that long of a timeout? Please add a comment clarifying why we might need to wait 5 minutes for a successful run. I would have expected maybe 1 minute, max.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387791322", "createdAt": "2020-03-04T16:40:35Z", "author": {"login": "gjuggler"}, "path": "e2e/tests/workspace/workspace-create.spec.ts", "diffHunk": "@@ -1,12 +1,8 @@\n-import DataPage from '../../app/data-page';\n-import Home from '../../app/home';\n-import WorkspacePage from '../../app/workspace-page';\n-import { getCursorValue } from '../../driver/elementHandle-util'\n+import {WorkspacesPage} from '../../app/WorkspacesPage';\n \n const Chrome = require('../../driver/ChromeDriver');\n-const faker = require('faker/locale/en_US');\n \n-jest.setTimeout(300000);\n+jest.setTimeout(5 * 60 * 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxOTAzMQ==", "bodyText": "no, test don't need be that long. changed all tests to be 2 min long max.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389219031", "createdAt": "2020-03-07T02:23:02Z", "author": {"login": "aweng98"}, "path": "e2e/tests/workspace/workspace-create.spec.ts", "diffHunk": "@@ -1,12 +1,8 @@\n-import DataPage from '../../app/data-page';\n-import Home from '../../app/home';\n-import WorkspacePage from '../../app/workspace-page';\n-import { getCursorValue } from '../../driver/elementHandle-util'\n+import {WorkspacesPage} from '../../app/WorkspacesPage';\n \n const Chrome = require('../../driver/ChromeDriver');\n-const faker = require('faker/locale/en_US');\n \n-jest.setTimeout(300000);\n+jest.setTimeout(5 * 60 * 1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5MTMyMg=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjU0Mjc5OnYy", "diffSide": "RIGHT", "path": "e2e/tests/workspace/workspace-create.spec.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjo1NTo0MlrOFx1fCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjoyMzo0OVrOFzMDDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwMDg0MA==", "bodyText": "It feels awkward to me to have a test case like this with zero assertions and only one line of code.\n(I think I mentioned something similar in a comment on the registration test PR.)\nThere's a risk of going too far in the direction of pushing actual test code into a single helper function outside of the test file. This can have the end result of obfuscating the actual code under test, and placing an unnecessary burden on the reader to jump around to non-test files in order to understand what's actually being tested, and/or to add assertions where necessary.\nFurthermore, this approach prevents future maintainers from flexibly adding new assertions or code under test. Let's say I wanted to add a test to ensure there is appropriate bounds-checking on the workspace description fields (concrete example! This is what Helen ran into yesteday). With the current structure, this test file gives me no help in figuring out how to write a new, somewhat simple assertion. I would have to jump over to WorkspacesPage, grok the ~80-line method over there, and then make a decision on whether my new test should become a new method on WorkspacesPage, or whether it should be added to the monolithic method in WorkspacesPage, etc.\nI think a simple resolution would be to bump the body of the 'createWorkspace' method back into this file, as I think we should truly treat that as test code rather than a method on the page object.\n[Update: coming back to this comment after reviewing the rest of the PR. I actually think the user registration page object handles this in a nice way: we have a set of reasonably-short, well-defined helper methods that either fetch a named page element, or fill data into the form. I'd be happy if the Workspace page object were eventually adapted to fit more of that paradigm. I wouldn't block this PR on that improvement.]", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387800840", "createdAt": "2020-03-04T16:55:42Z", "author": {"login": "gjuggler"}, "path": "e2e/tests/workspace/workspace-create.spec.ts", "diffHunk": "@@ -20,91 +16,12 @@ describe('Workspace create:', () => {\n     await Chrome.teardown();\n   });\n \n-  test('Create new workspace with default values', async () => {\n-\n-    const home = new Home(page);\n-    const link = await home.getCreateNewWorkspaceLink();\n-    await link.click();\n-\n-    const workspace = new WorkspacePage(page);\n-    await workspace.waitUntilPageReady();\n-\n-    // wait for auto-selected value in Select billing account\n-    await page.waitForXPath('//label[contains(normalize-space(text()),\"Use All of Us free credits\")]', {visible: true});\n-\n-    // CREATE WORKSPACE button should be disabled\n-    const createButton = await workspace.createWorkspaceButton();\n-    let cursor = await getCursorValue(page, createButton);\n-    expect(cursor).toEqual('not-allowed');\n-\n+  test('Create simple workspace with default values', async () => {\n     const workspaceName = `aoutest-${Math.floor(Math.random() * 1000)}-${Math.floor(Date.now() / 1000)}`;\n-    await (await workspace.inputTextWorkspaceName()).type(workspaceName);\n-    await (await workspace.inputTextWorkspaceName()).press('Tab', { delay: 100 }); // tab out\n-\n-    // CREATE WORKSPACE button should be disabled\n-    cursor = await getCursorValue(page, createButton);\n-    expect(cursor).toEqual('not-allowed');\n-\n-    // Enter value in 'Disease-focused research'\n-    const diseaseName = workspace.diseaseName();\n-    await (await diseaseName.label()).click(); // click on text to set toggle checkbox\n-    await (await diseaseName.textfield()).type('diabetes');\n-    await (await diseaseName.textfield()).press('Tab');\n-\n-    // CREATE WORKSPACE button should be disabled\n-    cursor = await getCursorValue(page, createButton);\n-    expect(cursor).toEqual('not-allowed');\n-\n-    const drugTherapeuticsDevelopment = workspace.question1DrugTherapeuticsDevelopment();\n-    await (await drugTherapeuticsDevelopment.label()).click();\n-\n-    // CREATE WORKSPACE button should be disabled\n-    cursor = await getCursorValue(page, createButton);\n-    expect(cursor).toEqual('not-allowed');\n-\n-    const words = faker.lorem.word();\n-    const q2 = await workspace.question2ScientificReason();\n-    await q2.type(words);\n+    const workspacesPage = new WorkspacesPage(page);\n+    await workspacesPage.createWorkspace(workspaceName, 'Use All of Us free credits',);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxOTA4NQ==", "bodyText": "okay \ud83d\udc4d", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389219085", "createdAt": "2020-03-07T02:23:49Z", "author": {"login": "aweng98"}, "path": "e2e/tests/workspace/workspace-create.spec.ts", "diffHunk": "@@ -20,91 +16,12 @@ describe('Workspace create:', () => {\n     await Chrome.teardown();\n   });\n \n-  test('Create new workspace with default values', async () => {\n-\n-    const home = new Home(page);\n-    const link = await home.getCreateNewWorkspaceLink();\n-    await link.click();\n-\n-    const workspace = new WorkspacePage(page);\n-    await workspace.waitUntilPageReady();\n-\n-    // wait for auto-selected value in Select billing account\n-    await page.waitForXPath('//label[contains(normalize-space(text()),\"Use All of Us free credits\")]', {visible: true});\n-\n-    // CREATE WORKSPACE button should be disabled\n-    const createButton = await workspace.createWorkspaceButton();\n-    let cursor = await getCursorValue(page, createButton);\n-    expect(cursor).toEqual('not-allowed');\n-\n+  test('Create simple workspace with default values', async () => {\n     const workspaceName = `aoutest-${Math.floor(Math.random() * 1000)}-${Math.floor(Date.now() / 1000)}`;\n-    await (await workspace.inputTextWorkspaceName()).type(workspaceName);\n-    await (await workspace.inputTextWorkspaceName()).press('Tab', { delay: 100 }); // tab out\n-\n-    // CREATE WORKSPACE button should be disabled\n-    cursor = await getCursorValue(page, createButton);\n-    expect(cursor).toEqual('not-allowed');\n-\n-    // Enter value in 'Disease-focused research'\n-    const diseaseName = workspace.diseaseName();\n-    await (await diseaseName.label()).click(); // click on text to set toggle checkbox\n-    await (await diseaseName.textfield()).type('diabetes');\n-    await (await diseaseName.textfield()).press('Tab');\n-\n-    // CREATE WORKSPACE button should be disabled\n-    cursor = await getCursorValue(page, createButton);\n-    expect(cursor).toEqual('not-allowed');\n-\n-    const drugTherapeuticsDevelopment = workspace.question1DrugTherapeuticsDevelopment();\n-    await (await drugTherapeuticsDevelopment.label()).click();\n-\n-    // CREATE WORKSPACE button should be disabled\n-    cursor = await getCursorValue(page, createButton);\n-    expect(cursor).toEqual('not-allowed');\n-\n-    const words = faker.lorem.word();\n-    const q2 = await workspace.question2ScientificReason();\n-    await q2.type(words);\n+    const workspacesPage = new WorkspacesPage(page);\n+    await workspacesPage.createWorkspace(workspaceName, 'Use All of Us free credits',);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwMDg0MA=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjU1MjAyOnYy", "diffSide": "RIGHT", "path": "e2e/tests/user/registration.spec.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjo1ODoxMFrOFx1k_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjoyMzo1OFrOFzMDIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwMjM2Nw==", "bodyText": "nitpick: unnecessary local variable, just inline 'Congratulations' into the next line.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387802367", "createdAt": "2020-03-04T16:58:10Z", "author": {"login": "gjuggler"}, "path": "e2e/tests/user/registration.spec.ts", "diffHunk": "@@ -72,44 +71,20 @@ describe('User registration tests:', () => {\n \n     // Step 4: Enter demographic survey (All Survey Fields are optional)\n     // Should be on Demongraphic Survey page\n-    const demograpicsPageHeader = 'Demographics Survey (All Survey Fields are optional)';\n-    expect(await waitForText(page, 'h3', demograpicsPageHeader)).toBeTruthy();\n-\n     await createAccountPage.fillOutDemographicSurvey();\n+    await page.waitFor(3000);\n+\n     const submitButton = await createAccountPage.getSubmitButton();\n     await submitButton.click();\n-    await page.waitFor(1000);\n+    await page.waitFor(2000);\n \n     // Step 5: New account created successfully page.\n-    const congratHeader = 'Congratulations!';\n-    await page.waitForSelector('h1', { visible: true });\n-\n-    const h4List = [];\n-    const h4Headers: ElementHandle[] = await page.$$('h4');\n-    for (const h4Header of h4Headers) {\n-      const txt = await (await h4Header.getProperty('innerText')).jsonValue();\n-      h4List.push(txt);\n-    }\n-    const expectedH4Headers = [\n-      'Your All of Us research account has been created!',\n-      'Check your contact email for instructions on getting started.',\n-      `Your contact email is: ${process.env.CONTACT_EMAIL}`\n-    ];\n-    expect(h4List).toEqual(expectedH4Headers);\n-\n-    const resendButton = await page.waitForXPath('//button[.=\"Resend Instructions\"]');\n-    expect(resendButton).toBeTruthy();\n+    const congratMessage = 'Congratulations!';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxOTEwNg==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389219106", "createdAt": "2020-03-07T02:23:58Z", "author": {"login": "aweng98"}, "path": "e2e/tests/user/registration.spec.ts", "diffHunk": "@@ -72,44 +71,20 @@ describe('User registration tests:', () => {\n \n     // Step 4: Enter demographic survey (All Survey Fields are optional)\n     // Should be on Demongraphic Survey page\n-    const demograpicsPageHeader = 'Demographics Survey (All Survey Fields are optional)';\n-    expect(await waitForText(page, 'h3', demograpicsPageHeader)).toBeTruthy();\n-\n     await createAccountPage.fillOutDemographicSurvey();\n+    await page.waitFor(3000);\n+\n     const submitButton = await createAccountPage.getSubmitButton();\n     await submitButton.click();\n-    await page.waitFor(1000);\n+    await page.waitFor(2000);\n \n     // Step 5: New account created successfully page.\n-    const congratHeader = 'Congratulations!';\n-    await page.waitForSelector('h1', { visible: true });\n-\n-    const h4List = [];\n-    const h4Headers: ElementHandle[] = await page.$$('h4');\n-    for (const h4Header of h4Headers) {\n-      const txt = await (await h4Header.getProperty('innerText')).jsonValue();\n-      h4List.push(txt);\n-    }\n-    const expectedH4Headers = [\n-      'Your All of Us research account has been created!',\n-      'Check your contact email for instructions on getting started.',\n-      `Your contact email is: ${process.env.CONTACT_EMAIL}`\n-    ];\n-    expect(h4List).toEqual(expectedH4Headers);\n-\n-    const resendButton = await page.waitForXPath('//button[.=\"Resend Instructions\"]');\n-    expect(resendButton).toBeTruthy();\n+    const congratMessage = 'Congratulations!';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwMjM2Nw=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjU1NjU2OnYy", "diffSide": "RIGHT", "path": "e2e/tests/user/registration.spec.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjo1OToyMVrOFx1n8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjo0NjowOVrOFzMJkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwMzEyMA==", "bodyText": "Echoing CH's comment, please add a note justifying / explaining the length of each delay in this test. In almost all cases, it would probably be better to wait for the next anticipated page or component to appear (but I totally understand how that might be difficult and/or better suited as follow-up work).", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387803120", "createdAt": "2020-03-04T16:59:21Z", "author": {"login": "gjuggler"}, "path": "e2e/tests/user/registration.spec.ts", "diffHunk": "@@ -72,44 +71,20 @@ describe('User registration tests:', () => {\n \n     // Step 4: Enter demographic survey (All Survey Fields are optional)\n     // Should be on Demongraphic Survey page\n-    const demograpicsPageHeader = 'Demographics Survey (All Survey Fields are optional)';\n-    expect(await waitForText(page, 'h3', demograpicsPageHeader)).toBeTruthy();\n-\n     await createAccountPage.fillOutDemographicSurvey();\n+    await page.waitFor(3000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMDc1NQ==", "bodyText": "removed some sleeps except few that I need is needed to make tests run less flaky.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389220755", "createdAt": "2020-03-07T02:46:09Z", "author": {"login": "aweng98"}, "path": "e2e/tests/user/registration.spec.ts", "diffHunk": "@@ -72,44 +71,20 @@ describe('User registration tests:', () => {\n \n     // Step 4: Enter demographic survey (All Survey Fields are optional)\n     // Should be on Demongraphic Survey page\n-    const demograpicsPageHeader = 'Demographics Survey (All Survey Fields are optional)';\n-    expect(await waitForText(page, 'h3', demograpicsPageHeader)).toBeTruthy();\n-\n     await createAccountPage.fillOutDemographicSurvey();\n+    await page.waitFor(3000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwMzEyMA=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjU3MTIyOnYy", "diffSide": "RIGHT", "path": "e2e/tests/misc/sidenav.spec.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzowMzoyM1rOFx1xRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzowMzoyM1rOFx1xRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwNTUwOA==", "bodyText": "Nit: this test is useful, but probably belongs in a separate file from \"sidenav\". I wouldn't have expected the sidenav test to cover the Zendesk widget interactions.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387805508", "createdAt": "2020-03-04T17:03:23Z", "author": {"login": "gjuggler"}, "path": "e2e/tests/misc/sidenav.spec.ts", "diffHunk": "@@ -0,0 +1,125 @@\n+import Button from '../../app/aou-elements/Button';\n+import GoogleLoginPage from '../../app/GoogleLoginPage';\n+import {HomePage} from '../../app/HomePage';\n+import {LINK} from '../../app/page-mixin/PageNavigation';\n+import Profile from '../../app/ProfilePage';\n+import {WorkspacesPage} from '../../app/WorkspacesPage';\n+import launchBrowser from '../../driver/puppeteer-launch';\n+\n+jest.setTimeout(60 * 1000);\n+\n+const configs = require('../../resources/workbench-config');\n+\n+export const HELP_DESK = {\n+  ASK_QUESTION: 'Ask a question about the Researcher Workbench',\n+  REPORT_DATA_PRIVACY_CONCERN: 'Report a data privacy concern',\n+  TELL_US_ABOUT_PUBLICATION: 'Tell us about an upcoming publication',\n+  REQUEST_ADDITIONAL_BILLING_CREDITS: 'Request additional billing credits',\n+};\n+\n+describe('Navigation', () => {\n+\n+  let browser;\n+  let page;\n+\n+  beforeAll(async () => {\n+    browser = await launchBrowser();\n+  });\n+\n+  beforeEach(async () => {\n+    page = await browser.newPage();\n+    await page.setUserAgent(configs.puppeteerUserAgent);\n+  });\n+\n+  afterEach(async () => {\n+    await page.close();\n+    await page.waitFor(1000);\n+  });\n+\n+  afterAll(async () => {\n+    await browser.close();\n+  });\n+\n+\n+  test('App navigation links work', async () => {\n+    const loginPage = new GoogleLoginPage(page);\n+    await loginPage.login();\n+\n+    const homePage = new HomePage(page);\n+    await homePage.waitForReady();\n+    expect(await homePage.isLoaded()).toBe(true);\n+\n+    // Select Profile link\n+    await homePage.goTo(LINK.PROFILE);\n+    const profilePage = new Profile(page);\n+    await profilePage.waitForReady();\n+    expect(await profilePage.isLoaded()).toBe(true);\n+\n+    // check user name in dropdown matches names on Profile page\n+    const fname = await (await profilePage.getFirstName()).getValue();\n+    const lname = await (await profilePage.getLastName()).getValue();\n+    await homePage.openDropdown();\n+    const displayedUsername = await homePage.getUserName();\n+    expect(displayedUsername).toBe(`${fname} ${lname}`);\n+\n+    // Select Your Workspaces link\n+    await homePage.goTo(LINK.YOUR_WORKSPACES);\n+    const workspacesPage = new WorkspacesPage(page);\n+    await workspacesPage.waitForReady();\n+    expect(await workspacesPage.isLoaded()).toBe(true);\n+\n+    // Select Home link\n+    await homePage.goTo(LINK.HOME);\n+    await homePage.waitForReady();\n+    expect(await homePage.isLoaded()).toBe(true);\n+  });\n+\n+  test('Check Contact Us form', async () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjU3NzAxOnYy", "diffSide": "RIGHT", "path": "e2e/tests/home/homepage.spec.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzowNTowMlrOFx11Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjo0OToxNFrOFzMKXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwNjQ4Ng==", "bodyText": "I don't dispute the correctness of this test, but what is its value to our overall QA story? Are we truly worried about cards having unequal widths or heights? Or was this written with more of an eye towards demonstrating the framework functionality? (If the latter is true, then please clarify that with a comment at the top of the test, so future maintainers know the purpose of this case.)", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387806486", "createdAt": "2020-03-04T17:05:02Z", "author": {"login": "gjuggler"}, "path": "e2e/tests/home/homepage.spec.ts", "diffHunk": "@@ -1,51 +1,142 @@\n-import GoogleLoginPage from '../../app/google-login';\n-import Home from '../../app/home';\n-import WorkspacePage from '../../app/workspace-page';\n-import PuppeteerLaunch from '../../services/puppeteer-launch';\n+import Link from '../../app/aou-elements/Link';\n+import WebElement from '../../app/aou-elements/WebElement';\n+import GoogleLoginPage from '../../app/GoogleLoginPage';\n+import {FIELD_LABEL as editPageFieldLabel, HomePage} from '../../app/HomePage';\n+import WorkspaceCard from '../../app/page-mixin/WorkspaceCard';\n+import WorkspaceEditPage from '../../app/WorkspaceEditPage';\n+import {WorkspacesPage} from '../../app/WorkspacesPage';\n+import launchBrowser from '../../driver/puppeteer-launch';\n \n jest.setTimeout(60 * 1000);\n \n-const configs = require('../../resources/config');\n+const configs = require('../../resources/workbench-config');\n \n-describe.skip('Home page tests:', () => {\n+describe('Home', () => {\n   let browser;\n   let page;\n-  let cookies;\n \n   beforeAll(async () => {\n-    browser = await PuppeteerLaunch();\n+    browser = await launchBrowser();\n   });\n \n   beforeEach(async () => {\n     page = await browser.newPage();\n     await page.setUserAgent(configs.puppeteerUserAgent);\n-    await page.setDefaultNavigationTimeout(60000);\n   });\n \n   afterEach(async () => {\n     await page.close();\n+    await page.waitFor(1000);\n   });\n \n   afterAll(async () => {\n     await browser.close();\n   });\n \n-  test('Homepage is the landing page after sign in', async () => {\n+  test('Homepage is the landing page after Sign In', async () => {\n+    // Enable networks requests inspection\n+    await page.setRequestInterception(true);\n+\n+    // Following network requests expected to happen\n+    const targetRequestsUrls = [\n+      configs.apiBaseUrl+'/status-alert',\n+      configs.apiBaseUrl+'/config',\n+      configs.apiBaseUrl+'/profile',\n+      configs.apiBaseUrl+'/workspaces',\n+      configs.apiBaseUrl+'/cdrVersions',\n+      configs.apiBaseUrl+'/workspaces/user-recent-workspaces',\n+      configs.apiBaseUrl+'/workspaces/user-recent-resources',\n+    ];\n+    const requestsUrls = [];\n+    const requestsFailed = [];\n+    const pageErrors = [];\n+\n+    page.on('request', request => {\n+      request.continue();\n+    });\n+\n+    // Catch console log errors\n+    page.on('pageerror', err => {\n+      pageErrors.push(`${err.toString()}`);\n+    });\n+\n+    page.on('response', response => {\n+      const request = response.request();\n+      const url = request.url().split('?')[0].split('#')[0];\n+      const status = response.status();\n+      if (targetRequestsUrls.includes(url)) {\n+        requestsUrls.push(request.url());\n+        // console.log('response url:', url, 'status:', status);\n+        if (status !== 200) {\n+          requestsFailed.push(request.url());\n+        }\n+      }\n+    });\n+\n     const loginPage = new GoogleLoginPage(page);\n     await loginPage.login();\n-    const homePage = new Home(page);\n-    await homePage.waitForReady();\n+\n+    const home = new HomePage(page);\n+    await home.waitForReady();\n     const title = await page.title();\n     expect(title).toMatch('Homepage');\n-    cookies = await page.cookies();\n+\n+    // Check targeted api succeeded\n+    expect(requestsUrls).toEqual(expect.arrayContaining(targetRequestsUrls));\n+    // Expect zero request fail\n+    expect(requestsFailed.length).toEqual(0);\n+    // Expect zero page error\n+    expect(pageErrors.length).toEqual(0);\n   });\n \n-  test('Sign in with cookies', async () => {\n-    await page.setCookie(...cookies);\n-    const workspaces = new WorkspacePage(page);\n-    await workspaces.goURL();\n+  test('Workspace cards have same UI size', async () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMDk1Ng==", "bodyText": "if workspace card were ever not rendered correctly, say size == 0, this test would fail immediately.\nalso I was planning to add tests to check access-level, timestamp, names.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389220956", "createdAt": "2020-03-07T02:49:14Z", "author": {"login": "aweng98"}, "path": "e2e/tests/home/homepage.spec.ts", "diffHunk": "@@ -1,51 +1,142 @@\n-import GoogleLoginPage from '../../app/google-login';\n-import Home from '../../app/home';\n-import WorkspacePage from '../../app/workspace-page';\n-import PuppeteerLaunch from '../../services/puppeteer-launch';\n+import Link from '../../app/aou-elements/Link';\n+import WebElement from '../../app/aou-elements/WebElement';\n+import GoogleLoginPage from '../../app/GoogleLoginPage';\n+import {FIELD_LABEL as editPageFieldLabel, HomePage} from '../../app/HomePage';\n+import WorkspaceCard from '../../app/page-mixin/WorkspaceCard';\n+import WorkspaceEditPage from '../../app/WorkspaceEditPage';\n+import {WorkspacesPage} from '../../app/WorkspacesPage';\n+import launchBrowser from '../../driver/puppeteer-launch';\n \n jest.setTimeout(60 * 1000);\n \n-const configs = require('../../resources/config');\n+const configs = require('../../resources/workbench-config');\n \n-describe.skip('Home page tests:', () => {\n+describe('Home', () => {\n   let browser;\n   let page;\n-  let cookies;\n \n   beforeAll(async () => {\n-    browser = await PuppeteerLaunch();\n+    browser = await launchBrowser();\n   });\n \n   beforeEach(async () => {\n     page = await browser.newPage();\n     await page.setUserAgent(configs.puppeteerUserAgent);\n-    await page.setDefaultNavigationTimeout(60000);\n   });\n \n   afterEach(async () => {\n     await page.close();\n+    await page.waitFor(1000);\n   });\n \n   afterAll(async () => {\n     await browser.close();\n   });\n \n-  test('Homepage is the landing page after sign in', async () => {\n+  test('Homepage is the landing page after Sign In', async () => {\n+    // Enable networks requests inspection\n+    await page.setRequestInterception(true);\n+\n+    // Following network requests expected to happen\n+    const targetRequestsUrls = [\n+      configs.apiBaseUrl+'/status-alert',\n+      configs.apiBaseUrl+'/config',\n+      configs.apiBaseUrl+'/profile',\n+      configs.apiBaseUrl+'/workspaces',\n+      configs.apiBaseUrl+'/cdrVersions',\n+      configs.apiBaseUrl+'/workspaces/user-recent-workspaces',\n+      configs.apiBaseUrl+'/workspaces/user-recent-resources',\n+    ];\n+    const requestsUrls = [];\n+    const requestsFailed = [];\n+    const pageErrors = [];\n+\n+    page.on('request', request => {\n+      request.continue();\n+    });\n+\n+    // Catch console log errors\n+    page.on('pageerror', err => {\n+      pageErrors.push(`${err.toString()}`);\n+    });\n+\n+    page.on('response', response => {\n+      const request = response.request();\n+      const url = request.url().split('?')[0].split('#')[0];\n+      const status = response.status();\n+      if (targetRequestsUrls.includes(url)) {\n+        requestsUrls.push(request.url());\n+        // console.log('response url:', url, 'status:', status);\n+        if (status !== 200) {\n+          requestsFailed.push(request.url());\n+        }\n+      }\n+    });\n+\n     const loginPage = new GoogleLoginPage(page);\n     await loginPage.login();\n-    const homePage = new Home(page);\n-    await homePage.waitForReady();\n+\n+    const home = new HomePage(page);\n+    await home.waitForReady();\n     const title = await page.title();\n     expect(title).toMatch('Homepage');\n-    cookies = await page.cookies();\n+\n+    // Check targeted api succeeded\n+    expect(requestsUrls).toEqual(expect.arrayContaining(targetRequestsUrls));\n+    // Expect zero request fail\n+    expect(requestsFailed.length).toEqual(0);\n+    // Expect zero page error\n+    expect(pageErrors.length).toEqual(0);\n   });\n \n-  test('Sign in with cookies', async () => {\n-    await page.setCookie(...cookies);\n-    const workspaces = new WorkspacePage(page);\n-    await workspaces.goURL();\n+  test('Workspace cards have same UI size', async () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwNjQ4Ng=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjY0MDIxOnYy", "diffSide": "RIGHT", "path": "e2e/tests/aou-elements-verify.spec.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzoyMjozOVrOFx2chQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzoyMjozOVrOFx2chQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgxNjU4MQ==", "bodyText": "Please add a comment describing the intended use and scope of these tests. It's definitely \"surprising\" to see test code that is explicitly skipped. If this is truly not ready for inclusion in our CI test suite, then why does this belong in the codebase at all? There may well be a good reason, but this goes against convention and requires justification.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387816581", "createdAt": "2020-03-04T17:22:39Z", "author": {"login": "gjuggler"}, "path": "e2e/tests/aou-elements-verify.spec.ts", "diffHunk": "@@ -0,0 +1,96 @@\n+import {Browser, Page} from 'puppeteer';\n+import NewClrIconLink from '../app/aou-elements/ClrIconLink';\n+import GoogleLoginPage from '../app/GoogleLoginPage';\n+import {FIELD_LABEL, HomePage} from '../app/HomePage';\n+import PageNavigation, {LINK} from '../app/page-mixin/PageNavigation';\n+import WorkspaceCard from '../app/page-mixin/WorkspaceCard';\n+import Profile from '../app/ProfilePage';\n+import {WorkspacesPage} from '../app/WorkspacesPage';\n+import launchBrowser from '../driver/puppeteer-launch';\n+\n+const configs = require('../resources/workbench-config');\n+\n+jest.setTimeout(60 * 1000);\n+\n+describe.skip('aou-elements', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjY0NDA2OnYy", "diffSide": "RIGHT", "path": "e2e/resources/data/user-registration-fields.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzoyMzo0OVrOFx2fDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjo0OTo0NVrOFzMKeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgxNzIyOQ==", "bodyText": "General comment: we should prefer a .ts extension over .js for all files where possible, even where you don't actively use any typescript annotations.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387817229", "createdAt": "2020-03-04T17:23:49Z", "author": {"login": "gjuggler"}, "path": "e2e/resources/data/user-registration-fields.js", "diffHunk": "@@ -1,9 +1,9 @@\n const faker = require('faker/locale/en_US');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMDk4NA==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389220984", "createdAt": "2020-03-07T02:49:45Z", "author": {"login": "aweng98"}, "path": "e2e/resources/data/user-registration-fields.js", "diffHunk": "@@ -1,9 +1,9 @@\n const faker = require('faker/locale/en_US');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgxNzIyOQ=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjY1MTkwOnYy", "diffSide": "RIGHT", "path": "e2e/app/CreateAccountPage.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzoyNTo1OVrOFx2j1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzoyNTo1OVrOFx2j1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgxODQ1NA==", "bodyText": "This method is nice! I remember not being 100% certain how one might tackle this form-filling challenge when we were pairing on this, and I think you came up with an elegant solution here.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387818454", "createdAt": "2020-03-04T17:25:59Z", "author": {"login": "gjuggler"}, "path": "e2e/app/CreateAccountPage.ts", "diffHunk": "@@ -0,0 +1,226 @@\n+import {ElementHandle, Page} from 'puppeteer';\n+import {waitUntilFindTexts} from '../driver/waitFuncs';\n+import Button from './aou-elements/Button';\n+import CheckBox from './aou-elements/CheckBox';\n+import ClrIconLink from './aou-elements/ClrIconLink';\n+import Label from './aou-elements/Label';\n+import RadioButton from './aou-elements/RadioButton';\n+import SelectComponent from './aou-elements/SelectComponent';\n+import TextArea from './aou-elements/TextArea';\n+import TextBox from './aou-elements/TextBox';\n+import BasePage from './page-mixin/BasePage';\n+\n+import {defaultFieldValues} from '../resources/data/user-registration-fields';\n+import {SideNav} from './page-mixin/SideNav';\n+\n+const faker = require('faker/locale/en_US');\n+\n+export const INSTITUTION_AFFILIATION = {\n+  EARLY_CAREER_TENURE_TRACK_RESEARCHER: 'Early career tenure-track researcher',\n+  UNDERGRADUATE_STUDENT: 'Undergraduate (Bachelor level) student',\n+  INDUSTRY: 'Industry',\n+};\n+\n+export const EDUCATION_LEVEL = {\n+  DOCTORATE: 'Doctorate',\n+};\n+\n+export const FIELD_LABEL = {\n+  READ_UNDERSTAND_PRIVACY_STATEMENT: 'I have read and understand the All of Us Research Program Privacy Statement',\n+  READ_UNDERSTAND_TERMS_OF_USE: 'I have read and understand the All of Us Research Program Terms of Use described above',\n+  INSTITUTION_NAME: 'Institution Name',\n+  ARE_YOU_AFFILIATED: 'Are you affiliated with an Academic Research Institution',\n+  RESEARCH_BACKGROUND: 'describe your research background, experience, and research interests',\n+  EDUCATION_LEVEL: 'Highest Level of Education Completed', // Highest Level of Education Completed\n+  YEAR_OF_BIRTH: 'Year of Birth',\n+};\n+\n+export default class CreateAccount extends BasePage {\n+\n+  public page: Page;\n+  constructor(page: Page) {\n+    super(page);\n+    this.page = page;\n+  }\n+\n+  public async getInvitationKeyInput(): Promise<TextBox> {\n+    const textbox = new TextBox(this.puppeteerPage);\n+    await textbox.withCss('#invitationKey');\n+    return textbox;\n+  }\n+\n+  public async getSubmitButton(): Promise<Button> {\n+    const button = new Button(this.puppeteerPage);\n+    await button.withLabel({text: 'Submit'});\n+    return button;\n+  }\n+\n+  public async getNextButton(): Promise<Button> {\n+    const button = new Button(this.puppeteerPage);\n+    await button.withLabel({text: 'Next'});\n+    return button;\n+  }\n+\n+  public async scrollToNthPdfPage(nth: number): Promise<ElementHandle> {\n+    const selector = `.react-pdf__Document :nth-child(${nth}).react-pdf__Page.tos-pdf-page`;\n+    const pdfPage = await this.puppeteerPage.waitForSelector(selector);\n+    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n+    await this.puppeteerPage.waitFor(1000);\n+    return pdfPage;\n+  }\n+\n+  public async scrollToLastPdfPage(): Promise<ElementHandle> {\n+    const selector = '.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page';\n+    const pdfPage = await this.puppeteerPage.waitForSelector(selector);\n+    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n+    await this.puppeteerPage.waitFor(1000);\n+    return pdfPage;\n+  }\n+\n+  public async getPrivacyStatementCheckbox(): Promise<CheckBox> {\n+    const checkbox = new CheckBox(this.puppeteerPage);\n+    await checkbox.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT});\n+    return checkbox;\n+  }\n+\n+  public async getTermsOfUseCheckbox(): Promise<CheckBox> {\n+    const checkbox = new CheckBox(this.puppeteerPage);\n+    await checkbox.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_TERMS_OF_USE});\n+    return checkbox;\n+  }\n+\n+\n+  public async getPrivacyStatementLabel(): Promise<Label> {\n+    const label = new Label(this.puppeteerPage);\n+    await label.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT});\n+    return label;\n+  }\n+\n+  public async getTermsOfUseLabel(): Promise<Label> {\n+    const label = new Label(this.puppeteerPage);\n+    await label.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_TERMS_OF_USE});\n+    return label;\n+  }\n+\n+  public async getInstitutionNameInput(): Promise<TextBox> {\n+    const textbox = new TextBox(this.puppeteerPage);\n+    await textbox.withLabel({text: FIELD_LABEL.INSTITUTION_NAME});\n+    return textbox;\n+  }\n+\n+  // true for select Yes radiobutton. false for select No radiobutton.\n+  public async areYouAffiliatedRadioButton(yesOrNo: boolean): Promise<RadioButton> {\n+    let selector;\n+    if (yesOrNo) {\n+      selector = '//input[@id=\"show-institution-yes\"]';\n+    } else {\n+      selector = '//input[@id=\"show-institution-no\"]';\n+    }\n+    const radio = new RadioButton(this.puppeteerPage);\n+    await radio.withXpath(selector);\n+    return radio;\n+  }\n+\n+  public async getResearchBackgroundTextarea(): Promise<TextArea> {\n+    const textarea = new TextArea(this.puppeteerPage);\n+    await textarea.withLabel({normalizeSpace: FIELD_LABEL.RESEARCH_BACKGROUND});\n+    return textarea;\n+  }\n+\n+  public async getUsernameDomain(): Promise<unknown> {\n+    const elem = await this.puppeteerPage.waitForXPath('//*[input[@id=\"username\"]]/i');\n+    return await (await elem.getProperty('innerText')).jsonValue();\n+  }\n+\n+  public async fillInFormFields(fields: Array<{ label: string; value: string; }>): Promise<string> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjY2MTUyOnYy", "diffSide": "RIGHT", "path": "e2e/app/page-mixin/SideNav.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzoyODo0NFrOFx2p9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjo0OTo1NVrOFzMKgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyMDAyMg==", "bodyText": "nit: remove all console.log statements before merging.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387820022", "createdAt": "2020-03-04T17:28:44Z", "author": {"login": "gjuggler"}, "path": "e2e/app/page-mixin/SideNav.ts", "diffHunk": "@@ -0,0 +1,83 @@\n+import {Page} from 'puppeteer';\n+import {iconXpath} from '../aou-elements/xpath-defaults';\n+import {findIcon} from '../aou-elements/xpath-finder';\n+\n+export interface PuppeteerPage {\n+  page: Page;\n+}\n+\n+type Constructor<T> = new(...args: any[]) => T;\n+\n+// @ts-ignore\n+export function SideNav<T extends Constructor<PuppeteerPage>>(Base: T) {\n+\n+  return class extends Base {\n+\n+    public angleIconXpath = iconXpath('', 'angle');\n+\n+    constructor(...args: any[]) {\n+      super(...args);\n+    }\n+\n+      /**\n+       * Go to application page.\n+       * @param page\n+       * @param app\n+       */\n+    public async goTo(app: string) {\n+      await this.openDropdown();\n+      const appLinkXpath = `//*[@role=\"button\" and @tabindex=\"0\"]//span[contains(., \"${app}\")]`;\n+      const [applink] = await this.page.$x(appLinkXpath);\n+      if (!applink) {\n+        const [username, admin] = await this.page.$x(this.angleIconXpath);\n+        if (app === 'Profile' || app === 'Sign Out') {\n+           // Open User submenu if needed\n+          if (!applink) {\n+            await username.click();\n+          }\n+        } else if (app === 'User Admin') {\n+           // Open Admin submenu if needed\n+          if (!applink) {\n+            await admin.click();\n+          }\n+        }\n+      }\n+      const link = await this.page.waitForXPath(appLinkXpath, {timeout: 2000});\n+      await link.click();\n+      await this.page.waitFor(1000);\n+    }\n+\n+    public async isOpen(): Promise<boolean> {\n+      try {\n+        await findIcon(this.page, 'Home', 'home', {visible: true, timeout: 1000});\n+        return true;\n+      } catch(err) {\n+        return false;\n+      }\n+    }\n+\n+      /**\n+       * Open dropdown.\n+       */\n+    public async openDropdown() {\n+      const is = await this.isOpen();\n+      if (!is) {\n+            // click bars icon to open dropdown\n+        const icon = await findIcon(this.page, '', 'bars');\n+        await icon.click();\n+        await this.page.waitForXPath(this.angleIconXpath, {timeout: 2000});\n+      }\n+    }\n+\n+    public async getUserName(): Promise<unknown> {\n+      const xpath = `//*[child::clr-icon[@shape=\"angle\"]/*[@role=\"img\"]]`;\n+      const username = (await this.page.$x(xpath))[0];\n+      const p = await username.getProperty('innerText');\n+      const value = await p.jsonValue();\n+      console.log('p value = ' + value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMDk5NA==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389220994", "createdAt": "2020-03-07T02:49:55Z", "author": {"login": "aweng98"}, "path": "e2e/app/page-mixin/SideNav.ts", "diffHunk": "@@ -0,0 +1,83 @@\n+import {Page} from 'puppeteer';\n+import {iconXpath} from '../aou-elements/xpath-defaults';\n+import {findIcon} from '../aou-elements/xpath-finder';\n+\n+export interface PuppeteerPage {\n+  page: Page;\n+}\n+\n+type Constructor<T> = new(...args: any[]) => T;\n+\n+// @ts-ignore\n+export function SideNav<T extends Constructor<PuppeteerPage>>(Base: T) {\n+\n+  return class extends Base {\n+\n+    public angleIconXpath = iconXpath('', 'angle');\n+\n+    constructor(...args: any[]) {\n+      super(...args);\n+    }\n+\n+      /**\n+       * Go to application page.\n+       * @param page\n+       * @param app\n+       */\n+    public async goTo(app: string) {\n+      await this.openDropdown();\n+      const appLinkXpath = `//*[@role=\"button\" and @tabindex=\"0\"]//span[contains(., \"${app}\")]`;\n+      const [applink] = await this.page.$x(appLinkXpath);\n+      if (!applink) {\n+        const [username, admin] = await this.page.$x(this.angleIconXpath);\n+        if (app === 'Profile' || app === 'Sign Out') {\n+           // Open User submenu if needed\n+          if (!applink) {\n+            await username.click();\n+          }\n+        } else if (app === 'User Admin') {\n+           // Open Admin submenu if needed\n+          if (!applink) {\n+            await admin.click();\n+          }\n+        }\n+      }\n+      const link = await this.page.waitForXPath(appLinkXpath, {timeout: 2000});\n+      await link.click();\n+      await this.page.waitFor(1000);\n+    }\n+\n+    public async isOpen(): Promise<boolean> {\n+      try {\n+        await findIcon(this.page, 'Home', 'home', {visible: true, timeout: 1000});\n+        return true;\n+      } catch(err) {\n+        return false;\n+      }\n+    }\n+\n+      /**\n+       * Open dropdown.\n+       */\n+    public async openDropdown() {\n+      const is = await this.isOpen();\n+      if (!is) {\n+            // click bars icon to open dropdown\n+        const icon = await findIcon(this.page, '', 'bars');\n+        await icon.click();\n+        await this.page.waitForXPath(this.angleIconXpath, {timeout: 2000});\n+      }\n+    }\n+\n+    public async getUserName(): Promise<unknown> {\n+      const xpath = `//*[child::clr-icon[@shape=\"angle\"]/*[@role=\"img\"]]`;\n+      const username = (await this.page.$x(xpath))[0];\n+      const p = await username.getProperty('innerText');\n+      const value = await p.jsonValue();\n+      console.log('p value = ' + value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyMDAyMg=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjY2ODMyOnYy", "diffSide": "RIGHT", "path": "e2e/app/HomePage.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzozMDo0MlrOFx2uHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjo1MDowMVrOFzMKiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyMTA4NA==", "bodyText": "[capitalization nitpick] Please correct camelCase here: should be 'goToUrl'", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387821084", "createdAt": "2020-03-04T17:30:42Z", "author": {"login": "gjuggler"}, "path": "e2e/app/HomePage.ts", "diffHunk": "@@ -0,0 +1,55 @@\n+import {ElementHandle, Page} from 'puppeteer';\n+import {waitUntilFindTexts} from '../driver/waitFuncs';\n+import Link from './aou-elements/Link';\n+import {findIcon} from './aou-elements/xpath-finder';\n+import AuthenticatedPage from './page-mixin/AuthenticatedPage';\n+import {SideNav} from './page-mixin/SideNav';\n+\n+const configs = require('../resources/workbench-config.js');\n+\n+export const FIELD_LABEL = {\n+  TITLE: 'Homepage',\n+  HEADER: 'Workspaces',\n+  SEE_ALL_WORKSPACES: 'See all Workspaces',\n+  CREATE_NEW_WORKSPACE: 'Workspaces',\n+};\n+\n+\n+class Home extends AuthenticatedPage {\n+\n+  public page: Page;\n+  constructor(page: Page) {\n+    super(page);\n+    this.page = page;\n+  }\n+\n+  public async isLoaded(): Promise<boolean> {\n+    await super.isLoaded(FIELD_LABEL.TITLE);\n+    await new Link(this.puppeteerPage).withLabel(FIELD_LABEL.SEE_ALL_WORKSPACES);\n+    await waitUntilFindTexts(this.puppeteerPage, FIELD_LABEL.HEADER);\n+    return true;\n+  }\n+\n+  public async waitForReady(): Promise<Home> {\n+    await this.isLoaded();\n+    await this.waitForSpinner();\n+    return this;\n+  }\n+\n+  /**\n+   * navigate to Home page URL\n+   */\n+  public async goToURL(): Promise<void> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMTAwMQ==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389221001", "createdAt": "2020-03-07T02:50:01Z", "author": {"login": "aweng98"}, "path": "e2e/app/HomePage.ts", "diffHunk": "@@ -0,0 +1,55 @@\n+import {ElementHandle, Page} from 'puppeteer';\n+import {waitUntilFindTexts} from '../driver/waitFuncs';\n+import Link from './aou-elements/Link';\n+import {findIcon} from './aou-elements/xpath-finder';\n+import AuthenticatedPage from './page-mixin/AuthenticatedPage';\n+import {SideNav} from './page-mixin/SideNav';\n+\n+const configs = require('../resources/workbench-config.js');\n+\n+export const FIELD_LABEL = {\n+  TITLE: 'Homepage',\n+  HEADER: 'Workspaces',\n+  SEE_ALL_WORKSPACES: 'See all Workspaces',\n+  CREATE_NEW_WORKSPACE: 'Workspaces',\n+};\n+\n+\n+class Home extends AuthenticatedPage {\n+\n+  public page: Page;\n+  constructor(page: Page) {\n+    super(page);\n+    this.page = page;\n+  }\n+\n+  public async isLoaded(): Promise<boolean> {\n+    await super.isLoaded(FIELD_LABEL.TITLE);\n+    await new Link(this.puppeteerPage).withLabel(FIELD_LABEL.SEE_ALL_WORKSPACES);\n+    await waitUntilFindTexts(this.puppeteerPage, FIELD_LABEL.HEADER);\n+    return true;\n+  }\n+\n+  public async waitForReady(): Promise<Home> {\n+    await this.isLoaded();\n+    await this.waitForSpinner();\n+    return this;\n+  }\n+\n+  /**\n+   * navigate to Home page URL\n+   */\n+  public async goToURL(): Promise<void> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyMTA4NA=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjY2OTkyOnYy", "diffSide": "RIGHT", "path": "e2e/app/UserAdminPage.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzozMTowNlrOFx2vEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzozMTowNlrOFx2vEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyMTMyOA==", "bodyText": "Please correct camel-case here, should be goToUrl", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387821328", "createdAt": "2020-03-04T17:31:06Z", "author": {"login": "gjuggler"}, "path": "e2e/app/UserAdminPage.ts", "diffHunk": "@@ -0,0 +1,40 @@\n+import {Page} from 'puppeteer';\n+import AuthenticatedPage from './page-mixin/AuthenticatedPage';\n+import {SideNav} from './page-mixin/SideNav';\n+const configs = require('../resources/workbench-config.js');\n+\n+export const FIELD_LABEL = {\n+  TITLE: 'User Admin Table',\n+};\n+\n+export default class UserAdmin extends AuthenticatedPage {\n+\n+  public page: Page;\n+  constructor(page: Page) {\n+    super(page);\n+    this.page = page;\n+  }\n+\n+  public async isLoaded(): Promise<boolean> {\n+    await super.isLoaded(FIELD_LABEL.TITLE);\n+    return true;\n+  }\n+\n+  public async waitForReady(): Promise<UserAdmin> {\n+    await this.isLoaded();\n+    await this.waitForSpinner();\n+    return this;\n+  }\n+\n+  /**\n+   * navigate to User Admin URL\n+   */\n+  public async goToURL(): Promise<void> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjY3MzE3OnYy", "diffSide": "RIGHT", "path": "e2e/app/WorkspacesPage.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzozMjowMlrOFx2xIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjo1MToxMlrOFzMK2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyMTg1Ng==", "bodyText": "Please correct camelCase here: goToUrl\n(Also... I'm seeing this goToURL method implemented ~3 times in different pages. Should this be a method on the base AuthenticatedPage class?)", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387821856", "createdAt": "2020-03-04T17:32:02Z", "author": {"login": "gjuggler"}, "path": "e2e/app/WorkspacesPage.ts", "diffHunk": "@@ -0,0 +1,150 @@\n+import {Page} from 'puppeteer';\n+import {waitUntilFindTexts, waitUntilTitleMatch} from '../driver/waitFuncs';\n+import Link from './aou-elements/Link';\n+import select from './aou-elements/Select';\n+import {findButton} from './aou-elements/xpath-finder';\n+import {DataPage} from './DataPage';\n+import AuthenticatedPage from './page-mixin/AuthenticatedPage';\n+import {SideNav} from './page-mixin/SideNav';\n+import WorkspaceEditPage, {FIELD_LABEL as EditPageFieldLabel} from './WorkspaceEditPage';\n+const configs = require('../resources/workbench-config.js');\n+const faker = require('faker/locale/en_US');\n+\n+export const FIELD_LABEL = {\n+  TITLE: 'View Workspaces',\n+  CREATE_NEW_WORKSPACE: 'Create a New Workspace',\n+};\n+\n+class Workspaces extends AuthenticatedPage {\n+\n+  public page: Page;\n+  constructor(page: Page) {\n+    super(page);\n+    this.page = page;\n+  }\n+\n+   /**\n+    * navigate to My Workspaces URL\n+    */\n+  public async goToURL(): Promise<void> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMTA4MA==", "bodyText": "I think I missed this in my latest commit. I'll check on this to be sure it is not 3 times.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389221080", "createdAt": "2020-03-07T02:51:12Z", "author": {"login": "aweng98"}, "path": "e2e/app/WorkspacesPage.ts", "diffHunk": "@@ -0,0 +1,150 @@\n+import {Page} from 'puppeteer';\n+import {waitUntilFindTexts, waitUntilTitleMatch} from '../driver/waitFuncs';\n+import Link from './aou-elements/Link';\n+import select from './aou-elements/Select';\n+import {findButton} from './aou-elements/xpath-finder';\n+import {DataPage} from './DataPage';\n+import AuthenticatedPage from './page-mixin/AuthenticatedPage';\n+import {SideNav} from './page-mixin/SideNav';\n+import WorkspaceEditPage, {FIELD_LABEL as EditPageFieldLabel} from './WorkspaceEditPage';\n+const configs = require('../resources/workbench-config.js');\n+const faker = require('faker/locale/en_US');\n+\n+export const FIELD_LABEL = {\n+  TITLE: 'View Workspaces',\n+  CREATE_NEW_WORKSPACE: 'Create a New Workspace',\n+};\n+\n+class Workspaces extends AuthenticatedPage {\n+\n+  public page: Page;\n+  constructor(page: Page) {\n+    super(page);\n+    this.page = page;\n+  }\n+\n+   /**\n+    * navigate to My Workspaces URL\n+    */\n+  public async goToURL(): Promise<void> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyMTg1Ng=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjY3NzU3OnYy", "diffSide": "RIGHT", "path": "e2e/app/page-mixin/PageNavigation.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzozMzoxOVrOFx2z8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzozMzoxOVrOFx2z8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyMjU3Nw==", "bodyText": "I'm having a hard time distinguishing this function from SideNav.goTo. They seem like virtual copies of each other. Is there a meaningful difference between the two, or should they be consolidated somehow?\nThe same concern applies to the getUsername method. It feels like both of these classes are handling very similar, if not identical, use cases.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387822577", "createdAt": "2020-03-04T17:33:19Z", "author": {"login": "gjuggler"}, "path": "e2e/app/page-mixin/PageNavigation.ts", "diffHunk": "@@ -0,0 +1,95 @@\n+import {Page} from 'puppeteer';\n+import {iconXpath} from '../aou-elements/xpath-defaults';\n+import {findIcon} from '../aou-elements/xpath-finder';\n+\n+\n+export const LINK = {\n+  HOME: 'Home',\n+  ADMIN: 'Admin',\n+  USER_ADMIN: 'User Admin',\n+  PROFILE: 'Profile',\n+  SIGN_OUT: 'Sign Out',\n+  CONTACT_US: 'Contact Us',\n+  USER_SUPPORT: 'User Support',\n+  YOUR_WORKSPACES: 'Your Workspaces',\n+  FEATURED_WORKSPACES: 'Featured Workspaces',\n+};\n+\n+export const LINK_ICON = {\n+  HOME: 'home',\n+  ADMIN: 'user',\n+  CONTACT_US: 'envelope',\n+  USER_SUPPORT: 'help',\n+  YOUR_WORKSPACES: 'applications',\n+  FEATURED_WORKSPACES: 'star',\n+};\n+\n+\n+export default class PageNavigation {\n+\n+  /**\n+   * Is nav menu dropdown open or closed?\n+   * @param page\n+   */\n+  public static async isOpen(page: Page): Promise<boolean> {\n+    try {\n+      // look for Home icon. If exception is thrown, means not found, dropdown is not open.\n+      await findIcon(page, 'Home', 'home', {visible: true, timeout: 1000});\n+      return true;\n+    } catch(err) {\n+      return false;\n+    }\n+  }\n+\n+   /**\n+    * Open dropdown.\n+    */\n+  public static async openDropdown(page: Page) {\n+    const is = await PageNavigation.isOpen(page);\n+    if (!is) {\n+      // click bars icon to open dropdown\n+      const icon = await findIcon(page, '', 'bars');\n+      await icon.click();\n+      await page.waitForXPath(PageNavigation.angleIconXpath, {timeout: 2000});\n+    }\n+  }\n+\n+  /**\n+   * Go to application page.\n+   * @param page\n+   * @param app\n+   */\n+  public static async goTo(page: Page, app: string) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjcwMDU3OnYy", "diffSide": "RIGHT", "path": "e2e/app/CreateAccountPage.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzo0MDoxMFrOFx3CrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjo1MTo1NVrOFzMLUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyNjM0OA==", "bodyText": "Naming question: there seems to have been a switch from kebab-case filenames to UpperCamelCase. Was there a motivation behind that change? Where possible, we should prefer consistency with our app codebase, which exclusively uses kebab-case.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387826348", "createdAt": "2020-03-04T17:40:10Z", "author": {"login": "gjuggler"}, "path": "e2e/app/CreateAccountPage.ts", "diffHunk": "@@ -0,0 +1,226 @@\n+import {ElementHandle, Page} from 'puppeteer';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMTIwMQ==", "bodyText": "kebab-case is good. I added rule to enforce it now\n\"rules\": {\n        \"file-name-casing\": [\n            true,\n            \"kebab-case\"\n        ]", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389221201", "createdAt": "2020-03-07T02:51:55Z", "author": {"login": "aweng98"}, "path": "e2e/app/CreateAccountPage.ts", "diffHunk": "@@ -0,0 +1,226 @@\n+import {ElementHandle, Page} from 'puppeteer';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyNjM0OA=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjk0ODExOnYy", "diffSide": "RIGHT", "path": "e2e/app/CreateAccountPage.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODo1NTowMlrOFx5f_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjo1MjoyMlrOFzMLbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2NjYyMA==", "bodyText": "[non-opt] This looks like an unnecessary extra reference to the Page object. The BasePage class already stores and exposes a public member variable, 'puppeteerPage'.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387866620", "createdAt": "2020-03-04T18:55:02Z", "author": {"login": "gjuggler"}, "path": "e2e/app/CreateAccountPage.ts", "diffHunk": "@@ -0,0 +1,226 @@\n+import {ElementHandle, Page} from 'puppeteer';\n+import {waitUntilFindTexts} from '../driver/waitFuncs';\n+import Button from './aou-elements/Button';\n+import CheckBox from './aou-elements/CheckBox';\n+import ClrIconLink from './aou-elements/ClrIconLink';\n+import Label from './aou-elements/Label';\n+import RadioButton from './aou-elements/RadioButton';\n+import SelectComponent from './aou-elements/SelectComponent';\n+import TextArea from './aou-elements/TextArea';\n+import TextBox from './aou-elements/TextBox';\n+import BasePage from './page-mixin/BasePage';\n+\n+import {defaultFieldValues} from '../resources/data/user-registration-fields';\n+import {SideNav} from './page-mixin/SideNav';\n+\n+const faker = require('faker/locale/en_US');\n+\n+export const INSTITUTION_AFFILIATION = {\n+  EARLY_CAREER_TENURE_TRACK_RESEARCHER: 'Early career tenure-track researcher',\n+  UNDERGRADUATE_STUDENT: 'Undergraduate (Bachelor level) student',\n+  INDUSTRY: 'Industry',\n+};\n+\n+export const EDUCATION_LEVEL = {\n+  DOCTORATE: 'Doctorate',\n+};\n+\n+export const FIELD_LABEL = {\n+  READ_UNDERSTAND_PRIVACY_STATEMENT: 'I have read and understand the All of Us Research Program Privacy Statement',\n+  READ_UNDERSTAND_TERMS_OF_USE: 'I have read and understand the All of Us Research Program Terms of Use described above',\n+  INSTITUTION_NAME: 'Institution Name',\n+  ARE_YOU_AFFILIATED: 'Are you affiliated with an Academic Research Institution',\n+  RESEARCH_BACKGROUND: 'describe your research background, experience, and research interests',\n+  EDUCATION_LEVEL: 'Highest Level of Education Completed', // Highest Level of Education Completed\n+  YEAR_OF_BIRTH: 'Year of Birth',\n+};\n+\n+export default class CreateAccount extends BasePage {\n+\n+  public page: Page;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMTIzMQ==", "bodyText": "Gone. side-effect of mixin SideNav", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389221231", "createdAt": "2020-03-07T02:52:22Z", "author": {"login": "aweng98"}, "path": "e2e/app/CreateAccountPage.ts", "diffHunk": "@@ -0,0 +1,226 @@\n+import {ElementHandle, Page} from 'puppeteer';\n+import {waitUntilFindTexts} from '../driver/waitFuncs';\n+import Button from './aou-elements/Button';\n+import CheckBox from './aou-elements/CheckBox';\n+import ClrIconLink from './aou-elements/ClrIconLink';\n+import Label from './aou-elements/Label';\n+import RadioButton from './aou-elements/RadioButton';\n+import SelectComponent from './aou-elements/SelectComponent';\n+import TextArea from './aou-elements/TextArea';\n+import TextBox from './aou-elements/TextBox';\n+import BasePage from './page-mixin/BasePage';\n+\n+import {defaultFieldValues} from '../resources/data/user-registration-fields';\n+import {SideNav} from './page-mixin/SideNav';\n+\n+const faker = require('faker/locale/en_US');\n+\n+export const INSTITUTION_AFFILIATION = {\n+  EARLY_CAREER_TENURE_TRACK_RESEARCHER: 'Early career tenure-track researcher',\n+  UNDERGRADUATE_STUDENT: 'Undergraduate (Bachelor level) student',\n+  INDUSTRY: 'Industry',\n+};\n+\n+export const EDUCATION_LEVEL = {\n+  DOCTORATE: 'Doctorate',\n+};\n+\n+export const FIELD_LABEL = {\n+  READ_UNDERSTAND_PRIVACY_STATEMENT: 'I have read and understand the All of Us Research Program Privacy Statement',\n+  READ_UNDERSTAND_TERMS_OF_USE: 'I have read and understand the All of Us Research Program Terms of Use described above',\n+  INSTITUTION_NAME: 'Institution Name',\n+  ARE_YOU_AFFILIATED: 'Are you affiliated with an Academic Research Institution',\n+  RESEARCH_BACKGROUND: 'describe your research background, experience, and research interests',\n+  EDUCATION_LEVEL: 'Highest Level of Education Completed', // Highest Level of Education Completed\n+  YEAR_OF_BIRTH: 'Year of Birth',\n+};\n+\n+export default class CreateAccount extends BasePage {\n+\n+  public page: Page;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2NjYyMA=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjk1NjM4OnYy", "diffSide": "RIGHT", "path": "e2e/app/FeaturedWorkspacesPage.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODo1NzoyNlrOFx5lTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODo1NzoyNlrOFx5lTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2Nzk4MQ==", "bodyText": "Another unnecessary reference to the Page object. Prefer removing this and using this.puppeteerPage instead.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387867981", "createdAt": "2020-03-04T18:57:26Z", "author": {"login": "gjuggler"}, "path": "e2e/app/FeaturedWorkspacesPage.ts", "diffHunk": "@@ -0,0 +1,34 @@\n+import {Page} from 'puppeteer';\n+import {waitUntilFindTexts} from '../driver/waitFuncs';\n+import AuthenticatedPage from './page-mixin/AuthenticatedPage';\n+import {SideNav} from './page-mixin/SideNav';\n+\n+export const FIELD_LABEL = {\n+  TITLE: 'Workspace Library',\n+  HEADER: 'Researcher Workbench Workspace Library',\n+};\n+\n+export default class FeaturedWorkspaces extends AuthenticatedPage {\n+\n+  public page: Page;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjk1OTI3OnYy", "diffSide": "RIGHT", "path": "e2e/app/DataPage.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODo1ODoxOFrOFx5nLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjoyNDoyNlrOFzMDQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2ODQ2MQ==", "bodyText": "I think I know the answer, but just to confirm: would removing the use of mixins make it so this SideNav wrapper around all of these components can be removed? It does feel like an awkward pattern to see here, so I'll be happy if that goes away.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387868461", "createdAt": "2020-03-04T18:58:18Z", "author": {"login": "gjuggler"}, "path": "e2e/app/DataPage.ts", "diffHunk": "@@ -1,21 +1,30 @@\n+import {Page} from 'puppeteer';\n import {waitUntilTitleMatch} from '../driver/waitFuncs';\n-import authenticatedpage from './mixin/authenticatedpage';\n+import AuthenticatedPage from './page-mixin/AuthenticatedPage';\n+import {SideNav} from './page-mixin/SideNav';\n \n-const tabsSelector = {\n+export const TAB_SELECTOR = {\n   cohortsTab: '//*[@role=\"button\"][(text()=\"Cohorts\")]',\n   dataSetsTab: '//*[@role=\"button\"][(text()=\"Datasets\")]',\n   cohortReviewsTab: '//*[@role=\"button\"][(text()=\"Cohort Reviews\")]',\n   conceptSetsTab: '//*[@role=\"button\"][(text()=\"Concept Sets\")]',\n   showAllTab: '//*[@role=\"button\"][(text()=\"Show All\")]',\n };\n \n+class Data extends AuthenticatedPage {\n \n-export default class DataPage extends authenticatedpage {\n+  public page: Page;\n+  constructor(page: Page) {\n+    super(page);\n+    this.page = page;\n+  }\n \n   public async waitUntilPageReady() {\n     await waitUntilTitleMatch(this.puppeteerPage, 'Data Page');\n-    await this.puppeteerPage.waitForXPath(tabsSelector.showAllTab, {visible: true});\n+    await this.puppeteerPage.waitForXPath(TAB_SELECTOR.showAllTab, {visible: true});\n     await this.waitForSpinner();\n   }\n \n }\n+\n+export const DataPage = SideNav(Data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxOTEzNg==", "bodyText": "Yes. now mixin is no more.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389219136", "createdAt": "2020-03-07T02:24:26Z", "author": {"login": "aweng98"}, "path": "e2e/app/DataPage.ts", "diffHunk": "@@ -1,21 +1,30 @@\n+import {Page} from 'puppeteer';\n import {waitUntilTitleMatch} from '../driver/waitFuncs';\n-import authenticatedpage from './mixin/authenticatedpage';\n+import AuthenticatedPage from './page-mixin/AuthenticatedPage';\n+import {SideNav} from './page-mixin/SideNav';\n \n-const tabsSelector = {\n+export const TAB_SELECTOR = {\n   cohortsTab: '//*[@role=\"button\"][(text()=\"Cohorts\")]',\n   dataSetsTab: '//*[@role=\"button\"][(text()=\"Datasets\")]',\n   cohortReviewsTab: '//*[@role=\"button\"][(text()=\"Cohort Reviews\")]',\n   conceptSetsTab: '//*[@role=\"button\"][(text()=\"Concept Sets\")]',\n   showAllTab: '//*[@role=\"button\"][(text()=\"Show All\")]',\n };\n \n+class Data extends AuthenticatedPage {\n \n-export default class DataPage extends authenticatedpage {\n+  public page: Page;\n+  constructor(page: Page) {\n+    super(page);\n+    this.page = page;\n+  }\n \n   public async waitUntilPageReady() {\n     await waitUntilTitleMatch(this.puppeteerPage, 'Data Page');\n-    await this.puppeteerPage.waitForXPath(tabsSelector.showAllTab, {visible: true});\n+    await this.puppeteerPage.waitForXPath(TAB_SELECTOR.showAllTab, {visible: true});\n     await this.waitForSpinner();\n   }\n \n }\n+\n+export const DataPage = SideNav(Data);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2ODQ2MQ=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjk4OTgwOnYy", "diffSide": "RIGHT", "path": "e2e/app/FeaturedWorkspacesPage.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTowNzo1MVrOFx57RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjoyNTo0NVrOFzv07g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3MzYwNA==", "bodyText": "[Potential improvement / follow-up] I see many nearly-identical implementations of this waitForReady method. This should probably be a method implemented on the base class.\nMaybe the reason you didn't do it that way was because of the desire to have a specific type of component in the returned promise?\nI think you can get around this in Typescript with this (pun intended): https://www.typescriptlang.org/docs/handbook/advanced-types.html#polymorphic-this-types\nexport class BasePage {\n  public async waitForReady(): Promise<this> {\n    await this.isLoaded();\n    await this.waitForSpinner();\n    return this;\n  }\n}\n\n(Disclaimer: I haven't actually tested the above.)", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387873604", "createdAt": "2020-03-04T19:07:51Z", "author": {"login": "gjuggler"}, "path": "e2e/app/FeaturedWorkspacesPage.ts", "diffHunk": "@@ -0,0 +1,34 @@\n+import {Page} from 'puppeteer';\n+import {waitUntilFindTexts} from '../driver/waitFuncs';\n+import AuthenticatedPage from './page-mixin/AuthenticatedPage';\n+import {SideNav} from './page-mixin/SideNav';\n+\n+export const FIELD_LABEL = {\n+  TITLE: 'Workspace Library',\n+  HEADER: 'Researcher Workbench Workspace Library',\n+};\n+\n+export default class FeaturedWorkspaces extends AuthenticatedPage {\n+\n+  public page: Page;\n+  constructor(page: Page) {\n+    super(page);\n+    this.page = page;\n+  }\n+\n+  public async isLoaded(): Promise<boolean> {\n+    await super.isLoaded(FIELD_LABEL.TITLE);\n+    await waitUntilFindTexts(this.puppeteerPage, FIELD_LABEL.HEADER);\n+    return true;\n+  }\n+\n+  public async waitForReady(): Promise<FeaturedWorkspaces> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxOTE2Mw==", "bodyText": "\ud83d\udc4d Done per suggestion", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389219163", "createdAt": "2020-03-07T02:25:00Z", "author": {"login": "aweng98"}, "path": "e2e/app/FeaturedWorkspacesPage.ts", "diffHunk": "@@ -0,0 +1,34 @@\n+import {Page} from 'puppeteer';\n+import {waitUntilFindTexts} from '../driver/waitFuncs';\n+import AuthenticatedPage from './page-mixin/AuthenticatedPage';\n+import {SideNav} from './page-mixin/SideNav';\n+\n+export const FIELD_LABEL = {\n+  TITLE: 'Workspace Library',\n+  HEADER: 'Researcher Workbench Workspace Library',\n+};\n+\n+export default class FeaturedWorkspaces extends AuthenticatedPage {\n+\n+  public page: Page;\n+  constructor(page: Page) {\n+    super(page);\n+    this.page = page;\n+  }\n+\n+  public async isLoaded(): Promise<boolean> {\n+    await super.isLoaded(FIELD_LABEL.TITLE);\n+    await waitUntilFindTexts(this.puppeteerPage, FIELD_LABEL.HEADER);\n+    return true;\n+  }\n+\n+  public async waitForReady(): Promise<FeaturedWorkspaces> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3MzYwNA=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgwNTI5NA==", "bodyText": "this is in authenticated-page.ts now.\nabstract async isLoaded(): Promise<boolean>\n\nasync waitForLoad(): Promise<this> {\n    await this.isLoaded();\n    await this.waitUntilNoSpinner();\n    return this;\n  }\n\nAll extending classes implement its own version of isLoaded().", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389805294", "createdAt": "2020-03-09T16:25:45Z", "author": {"login": "aweng98"}, "path": "e2e/app/FeaturedWorkspacesPage.ts", "diffHunk": "@@ -0,0 +1,34 @@\n+import {Page} from 'puppeteer';\n+import {waitUntilFindTexts} from '../driver/waitFuncs';\n+import AuthenticatedPage from './page-mixin/AuthenticatedPage';\n+import {SideNav} from './page-mixin/SideNav';\n+\n+export const FIELD_LABEL = {\n+  TITLE: 'Workspace Library',\n+  HEADER: 'Researcher Workbench Workspace Library',\n+};\n+\n+export default class FeaturedWorkspaces extends AuthenticatedPage {\n+\n+  public page: Page;\n+  constructor(page: Page) {\n+    super(page);\n+    this.page = page;\n+  }\n+\n+  public async isLoaded(): Promise<boolean> {\n+    await super.isLoaded(FIELD_LABEL.TITLE);\n+    await waitUntilFindTexts(this.puppeteerPage, FIELD_LABEL.HEADER);\n+    return true;\n+  }\n+\n+  public async waitForReady(): Promise<FeaturedWorkspaces> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3MzYwNA=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjk5ODgxOnYy", "diffSide": "RIGHT", "path": "e2e/app/HomePage.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxMDo0NlrOFx6BNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjozOTo0NFrOFzwY4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3NTEyNA==", "bodyText": "I'm not sure that this method really fits in alongside the other methods. I think the purpose here is to wait for the page to fully load, but the name \"isLoaded\" suggests that it would be checking whether the page is currently loaded \u2013 which is definitely not the case.\nFor example: is there ever any scenario where this.isLoaded will resolve with a false value? If not, then I think it's meaningless to be resolving with a boolean at all.\nProposal: rename to waitForLoad, for more accurate name and consistency with other methods on the BasePage subclasses.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387875124", "createdAt": "2020-03-04T19:10:46Z", "author": {"login": "gjuggler"}, "path": "e2e/app/HomePage.ts", "diffHunk": "@@ -0,0 +1,55 @@\n+import {ElementHandle, Page} from 'puppeteer';\n+import {waitUntilFindTexts} from '../driver/waitFuncs';\n+import Link from './aou-elements/Link';\n+import {findIcon} from './aou-elements/xpath-finder';\n+import AuthenticatedPage from './page-mixin/AuthenticatedPage';\n+import {SideNav} from './page-mixin/SideNav';\n+\n+const configs = require('../resources/workbench-config.js');\n+\n+export const FIELD_LABEL = {\n+  TITLE: 'Homepage',\n+  HEADER: 'Workspaces',\n+  SEE_ALL_WORKSPACES: 'See all Workspaces',\n+  CREATE_NEW_WORKSPACE: 'Workspaces',\n+};\n+\n+\n+class Home extends AuthenticatedPage {\n+\n+  public page: Page;\n+  constructor(page: Page) {\n+    super(page);\n+    this.page = page;\n+  }\n+\n+  public async isLoaded(): Promise<boolean> {\n+    await super.isLoaded(FIELD_LABEL.TITLE);\n+    await new Link(this.puppeteerPage).withLabel(FIELD_LABEL.SEE_ALL_WORKSPACES);\n+    await waitUntilFindTexts(this.puppeteerPage, FIELD_LABEL.HEADER);\n+    return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxOTU1NA==", "bodyText": "isLoaded and waitForReady serve different purposes. isLoaded returns true if target page is indeed the right DOM, as domIsLoaded. but it doesn't mean page is ready, it doesn't check spinner, readiness or page rendering. Updated isLoaded and waitForReady.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389219554", "createdAt": "2020-03-07T02:30:03Z", "author": {"login": "aweng98"}, "path": "e2e/app/HomePage.ts", "diffHunk": "@@ -0,0 +1,55 @@\n+import {ElementHandle, Page} from 'puppeteer';\n+import {waitUntilFindTexts} from '../driver/waitFuncs';\n+import Link from './aou-elements/Link';\n+import {findIcon} from './aou-elements/xpath-finder';\n+import AuthenticatedPage from './page-mixin/AuthenticatedPage';\n+import {SideNav} from './page-mixin/SideNav';\n+\n+const configs = require('../resources/workbench-config.js');\n+\n+export const FIELD_LABEL = {\n+  TITLE: 'Homepage',\n+  HEADER: 'Workspaces',\n+  SEE_ALL_WORKSPACES: 'See all Workspaces',\n+  CREATE_NEW_WORKSPACE: 'Workspaces',\n+};\n+\n+\n+class Home extends AuthenticatedPage {\n+\n+  public page: Page;\n+  constructor(page: Page) {\n+    super(page);\n+    this.page = page;\n+  }\n+\n+  public async isLoaded(): Promise<boolean> {\n+    await super.isLoaded(FIELD_LABEL.TITLE);\n+    await new Link(this.puppeteerPage).withLabel(FIELD_LABEL.SEE_ALL_WORKSPACES);\n+    await waitUntilFindTexts(this.puppeteerPage, FIELD_LABEL.HEADER);\n+    return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3NTEyNA=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxNDQ5OQ==", "bodyText": "forgot, but I shall rename waitForReady to waitForLoad in next commit while I address new feedback on latest commit.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389814499", "createdAt": "2020-03-09T16:39:44Z", "author": {"login": "aweng98"}, "path": "e2e/app/HomePage.ts", "diffHunk": "@@ -0,0 +1,55 @@\n+import {ElementHandle, Page} from 'puppeteer';\n+import {waitUntilFindTexts} from '../driver/waitFuncs';\n+import Link from './aou-elements/Link';\n+import {findIcon} from './aou-elements/xpath-finder';\n+import AuthenticatedPage from './page-mixin/AuthenticatedPage';\n+import {SideNav} from './page-mixin/SideNav';\n+\n+const configs = require('../resources/workbench-config.js');\n+\n+export const FIELD_LABEL = {\n+  TITLE: 'Homepage',\n+  HEADER: 'Workspaces',\n+  SEE_ALL_WORKSPACES: 'See all Workspaces',\n+  CREATE_NEW_WORKSPACE: 'Workspaces',\n+};\n+\n+\n+class Home extends AuthenticatedPage {\n+\n+  public page: Page;\n+  constructor(page: Page) {\n+    super(page);\n+    this.page = page;\n+  }\n+\n+  public async isLoaded(): Promise<boolean> {\n+    await super.isLoaded(FIELD_LABEL.TITLE);\n+    await new Link(this.puppeteerPage).withLabel(FIELD_LABEL.SEE_ALL_WORKSPACES);\n+    await waitUntilFindTexts(this.puppeteerPage, FIELD_LABEL.HEADER);\n+    return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3NTEyNA=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzAwNjg1OnYy", "diffSide": "RIGHT", "path": "e2e/app/ProfilePage.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxMzoyMFrOFx6GXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjozMDozNVrOFzMFCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3NjQ0Nw==", "bodyText": "Another unnecessary reference to Page object \u2013\u00a0remove in favor of this.puppeteerPage.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387876447", "createdAt": "2020-03-04T19:13:20Z", "author": {"login": "gjuggler"}, "path": "e2e/app/ProfilePage.ts", "diffHunk": "@@ -0,0 +1,58 @@\n+import {Page} from 'puppeteer';\n+import {waitUntilFindTexts} from '../driver/waitFuncs';\n+import TextBox from './aou-elements/TextBox';\n+import AuthenticatedPage from './page-mixin/AuthenticatedPage';\n+import {SideNav} from './page-mixin/SideNav';\n+\n+\n+export const FIELD_LABEL = {\n+  TITLE: 'Profile',\n+  FIRST_NAME: 'First Name',\n+  LAST_NAME: 'Last Name',\n+  CONTACT_EMAIL: 'Contact Email',\n+  CURRENT_POSITION: 'Your Current Position',\n+  ORGANIZATION: 'Your Organization',\n+  CURRENT_RESEARCH_WORK: 'Current Research Work',\n+  ABOUT_YOU: 'About You',\n+  INSTITUTION: 'Institution',\n+  ROLE: 'Role',\n+  DISCARD_CHANGES: 'Discard Changes',\n+  SAVE_PROFILE: 'Save Profile',\n+};\n+\n+export default class Profile extends AuthenticatedPage {\n+\n+  public page: Page;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxOTU5Mw==", "bodyText": "side-effect of mixin. it is all being removed.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389219593", "createdAt": "2020-03-07T02:30:35Z", "author": {"login": "aweng98"}, "path": "e2e/app/ProfilePage.ts", "diffHunk": "@@ -0,0 +1,58 @@\n+import {Page} from 'puppeteer';\n+import {waitUntilFindTexts} from '../driver/waitFuncs';\n+import TextBox from './aou-elements/TextBox';\n+import AuthenticatedPage from './page-mixin/AuthenticatedPage';\n+import {SideNav} from './page-mixin/SideNav';\n+\n+\n+export const FIELD_LABEL = {\n+  TITLE: 'Profile',\n+  FIRST_NAME: 'First Name',\n+  LAST_NAME: 'Last Name',\n+  CONTACT_EMAIL: 'Contact Email',\n+  CURRENT_POSITION: 'Your Current Position',\n+  ORGANIZATION: 'Your Organization',\n+  CURRENT_RESEARCH_WORK: 'Current Research Work',\n+  ABOUT_YOU: 'About You',\n+  INSTITUTION: 'Institution',\n+  ROLE: 'Role',\n+  DISCARD_CHANGES: 'Discard Changes',\n+  SAVE_PROFILE: 'Save Profile',\n+};\n+\n+export default class Profile extends AuthenticatedPage {\n+\n+  public page: Page;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3NjQ0Nw=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzAwODQ0OnYy", "diffSide": "RIGHT", "path": "e2e/app/UserAdminPage.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxMzo0OVrOFx6HXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjozMjozMFrOFzMFlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3NjcwMg==", "bodyText": "Remove extra reference to Page object.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r387876702", "createdAt": "2020-03-04T19:13:49Z", "author": {"login": "gjuggler"}, "path": "e2e/app/UserAdminPage.ts", "diffHunk": "@@ -0,0 +1,40 @@\n+import {Page} from 'puppeteer';\n+import AuthenticatedPage from './page-mixin/AuthenticatedPage';\n+import {SideNav} from './page-mixin/SideNav';\n+const configs = require('../resources/workbench-config.js');\n+\n+export const FIELD_LABEL = {\n+  TITLE: 'User Admin Table',\n+};\n+\n+export default class UserAdmin extends AuthenticatedPage {\n+\n+  public page: Page;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxOTczNA==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389219734", "createdAt": "2020-03-07T02:32:30Z", "author": {"login": "aweng98"}, "path": "e2e/app/UserAdminPage.ts", "diffHunk": "@@ -0,0 +1,40 @@\n+import {Page} from 'puppeteer';\n+import AuthenticatedPage from './page-mixin/AuthenticatedPage';\n+import {SideNav} from './page-mixin/SideNav';\n+const configs = require('../resources/workbench-config.js');\n+\n+export const FIELD_LABEL = {\n+  TITLE: 'User Admin Table',\n+};\n+\n+export default class UserAdmin extends AuthenticatedPage {\n+\n+  public page: Page;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3NjcwMg=="}, "originalCommit": {"oid": "53572ac7631ea5b670f2e2157cefcda1768a1161"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTgyNTIzOnYy", "diffSide": "RIGHT", "path": "e2e/app/admin-page.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzoyMzoxM1rOFzyD6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTozNjozOVrOF0h6Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg0MTg5OQ==", "bodyText": "nit: there is a separate workspace admin page, so this is more accurately \"UserAdminPage\"", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389841899", "createdAt": "2020-03-09T17:23:13Z", "author": {"login": "gjuggler"}, "path": "e2e/app/admin-page.ts", "diffHunk": "@@ -0,0 +1,24 @@\n+import {Page} from 'puppeteer';\n+import AuthenticatedPage from './authenticated-page';\n+\n+export const PAGE = {\n+  TITLE: 'User Admin Table',\n+};\n+\n+export default class AdminPage extends AuthenticatedPage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11de2036a67868147767b77202571bd55e52e17e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyNTgzNA==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390625834", "createdAt": "2020-03-10T21:36:39Z", "author": {"login": "aweng98"}, "path": "e2e/app/admin-page.ts", "diffHunk": "@@ -0,0 +1,24 @@\n+import {Page} from 'puppeteer';\n+import AuthenticatedPage from './authenticated-page';\n+\n+export const PAGE = {\n+  TITLE: 'User Admin Table',\n+};\n+\n+export default class AdminPage extends AuthenticatedPage {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg0MTg5OQ=="}, "originalCommit": {"oid": "11de2036a67868147767b77202571bd55e52e17e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTg4MDUxOnYy", "diffSide": "RIGHT", "path": "e2e/app/aou-elements/xpath-finder.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzozNjo0OFrOFzyl7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1NDoyMlrOF01o2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1MDYwNw==", "bodyText": "Opts is a nullable argument. If it is null, this will cause an exception. Maybe opts shouldn't be nullable if we're requiring it to exist?\n(This applies to this and all methods below with 'opts' as an argument)", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389850607", "createdAt": "2020-03-09T17:36:48Z", "author": {"login": "gjuggler"}, "path": "e2e/app/aou-elements/xpath-finder.ts", "diffHunk": "@@ -0,0 +1,114 @@\n+import {ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import TextOptions from './text-options';\n+import * as widgetxpath from './xpath-defaults';\n+\n+/**\n+ * Find a LINK or BUTTON element with a specified label.\n+ * @param {string} label\n+ */\n+export async function findClickable(page: Page, label: string, options?: WaitForSelectorOptions): Promise<ElementHandle> {\n+  const selector = widgetxpath.clickableXpath(label);\n+  return page.waitForXPath(selector, options);\n+}\n+\n+/**\n+ * Find SELECT element with a specified label.\n+ * @param {string} label\n+ */\n+export async function findSelect(page: Page, opts?: TextOptions, waitOptions?: WaitForSelectorOptions): Promise<ElementHandle> {\n+  if (opts.ancestorNodeLevel === undefined) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11de2036a67868147767b77202571bd55e52e17e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyNTc1Mg==", "bodyText": "I changed so it is required for all TextOptions param.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390625752", "createdAt": "2020-03-10T21:36:29Z", "author": {"login": "aweng98"}, "path": "e2e/app/aou-elements/xpath-finder.ts", "diffHunk": "@@ -0,0 +1,114 @@\n+import {ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import TextOptions from './text-options';\n+import * as widgetxpath from './xpath-defaults';\n+\n+/**\n+ * Find a LINK or BUTTON element with a specified label.\n+ * @param {string} label\n+ */\n+export async function findClickable(page: Page, label: string, options?: WaitForSelectorOptions): Promise<ElementHandle> {\n+  const selector = widgetxpath.clickableXpath(label);\n+  return page.waitForXPath(selector, options);\n+}\n+\n+/**\n+ * Find SELECT element with a specified label.\n+ * @param {string} label\n+ */\n+export async function findSelect(page: Page, opts?: TextOptions, waitOptions?: WaitForSelectorOptions): Promise<ElementHandle> {\n+  if (opts.ancestorNodeLevel === undefined) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1MDYwNw=="}, "originalCommit": {"oid": "11de2036a67868147767b77202571bd55e52e17e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0OTA4Mg==", "bodyText": "Thanks.\nSmall follow-up / no action required: an alternative approach here, especially if you wanted to have 'ancestorNodeLevel' default to 2 for most methods, would be to use a default value for the parameter (nice feature from Typescript):\nasync function findSelect(page: Page, opts: TextOptions = { ancestorNodeLevel: 2 }, ...)\nDefault param values are powerful but can be overused to negative effect, so I tend to avoid them unless it's obviously the right thing to do.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390949082", "createdAt": "2020-03-11T12:54:22Z", "author": {"login": "gjuggler"}, "path": "e2e/app/aou-elements/xpath-finder.ts", "diffHunk": "@@ -0,0 +1,114 @@\n+import {ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import TextOptions from './text-options';\n+import * as widgetxpath from './xpath-defaults';\n+\n+/**\n+ * Find a LINK or BUTTON element with a specified label.\n+ * @param {string} label\n+ */\n+export async function findClickable(page: Page, label: string, options?: WaitForSelectorOptions): Promise<ElementHandle> {\n+  const selector = widgetxpath.clickableXpath(label);\n+  return page.waitForXPath(selector, options);\n+}\n+\n+/**\n+ * Find SELECT element with a specified label.\n+ * @param {string} label\n+ */\n+export async function findSelect(page: Page, opts?: TextOptions, waitOptions?: WaitForSelectorOptions): Promise<ElementHandle> {\n+  if (opts.ancestorNodeLevel === undefined) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1MDYwNw=="}, "originalCommit": {"oid": "11de2036a67868147767b77202571bd55e52e17e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTg4OTU4OnYy", "diffSide": "RIGHT", "path": "e2e/app/aou-elements/web-component.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzozOToyMVrOFzyrog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTozNTozOVrOF0h4Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1MjA2Ng==", "bodyText": "I'm confused \u2013\u00a0the field name is label but its type is TextOptions. Please aim for consistency between class and field names for the sake of readers \u2013\u00a0e.g. 'labelTextOptions' or something like that.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r389852066", "createdAt": "2020-03-09T17:39:21Z", "author": {"login": "gjuggler"}, "path": "e2e/app/aou-elements/web-component.ts", "diffHunk": "@@ -0,0 +1,70 @@\n+import {Page} from 'puppeteer';\n+import Button from './button';\n+import Checkbox from './checkbox';\n+import Label from './label';\n+import Link from './link';\n+import RadioButton from './radiobutton';\n+import Select from './select';\n+import TextOptions from './text-options';\n+import Textarea from './textarea';\n+import Textbox from './textbox';\n+\n+export default class WebComponent {\n+\n+  private readonly label: TextOptions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11de2036a67868147767b77202571bd55e52e17e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyNTMxOQ==", "bodyText": "agree. I renamed it to labelTextOptions.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390625319", "createdAt": "2020-03-10T21:35:39Z", "author": {"login": "aweng98"}, "path": "e2e/app/aou-elements/web-component.ts", "diffHunk": "@@ -0,0 +1,70 @@\n+import {Page} from 'puppeteer';\n+import Button from './button';\n+import Checkbox from './checkbox';\n+import Label from './label';\n+import Link from './link';\n+import RadioButton from './radiobutton';\n+import Select from './select';\n+import TextOptions from './text-options';\n+import Textarea from './textarea';\n+import Textbox from './textbox';\n+\n+export default class WebComponent {\n+\n+  private readonly label: TextOptions;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1MjA2Ng=="}, "originalCommit": {"oid": "11de2036a67868147767b77202571bd55e52e17e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTcwNzc1OnYy", "diffSide": "RIGHT", "path": "e2e/app/aou-elements/web-component.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjozNjoyMFrOF0XP_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1ODoyMlrOF01w-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1MTE5Ng==", "bodyText": "opt naming nit (discussed in person): consider renaming this to BaseComponent, for consistency w/ the BasePage naming scheme. Even if there is a slight difference, since BasePage is absract, I think the parallel would be helpful.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390451196", "createdAt": "2020-03-10T16:36:20Z", "author": {"login": "gjuggler"}, "path": "e2e/app/aou-elements/web-component.ts", "diffHunk": "@@ -0,0 +1,70 @@\n+import {Page} from 'puppeteer';\n+import Button from './button';\n+import Checkbox from './checkbox';\n+import Label from './label';\n+import Link from './link';\n+import RadioButton from './radiobutton';\n+import Select from './select';\n+import TextOptions from './text-options';\n+import Textarea from './textarea';\n+import Textbox from './textbox';\n+\n+export default class WebComponent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11de2036a67868147767b77202571bd55e52e17e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyNTA2NA==", "bodyText": "I think you meant WebElement, right? I've renamed it to BaseElement.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390625064", "createdAt": "2020-03-10T21:35:07Z", "author": {"login": "aweng98"}, "path": "e2e/app/aou-elements/web-component.ts", "diffHunk": "@@ -0,0 +1,70 @@\n+import {Page} from 'puppeteer';\n+import Button from './button';\n+import Checkbox from './checkbox';\n+import Label from './label';\n+import Link from './link';\n+import RadioButton from './radiobutton';\n+import Select from './select';\n+import TextOptions from './text-options';\n+import Textarea from './textarea';\n+import Textbox from './textbox';\n+\n+export default class WebComponent {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1MTE5Ng=="}, "originalCommit": {"oid": "11de2036a67868147767b77202571bd55e52e17e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MTE2MA==", "bodyText": "I did mean WebElement, thanks.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390951160", "createdAt": "2020-03-11T12:58:22Z", "author": {"login": "gjuggler"}, "path": "e2e/app/aou-elements/web-component.ts", "diffHunk": "@@ -0,0 +1,70 @@\n+import {Page} from 'puppeteer';\n+import Button from './button';\n+import Checkbox from './checkbox';\n+import Label from './label';\n+import Link from './link';\n+import RadioButton from './radiobutton';\n+import Select from './select';\n+import TextOptions from './text-options';\n+import Textarea from './textarea';\n+import Textbox from './textbox';\n+\n+export default class WebComponent {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1MTE5Ng=="}, "originalCommit": {"oid": "11de2036a67868147767b77202571bd55e52e17e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTAyMjg3OnYy", "diffSide": "RIGHT", "path": "e2e/app/create-account-page.ts", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzowNjo0NlrOF0kFKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjozODoyMVrOF1Lq5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2MTQxNw==", "bodyText": "Per my previous comment, I would really like that we eliminate any arbitrary sleeps in the tests, or else have clear comments about why they are absolutely necessary.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390661417", "createdAt": "2020-03-10T23:06:46Z", "author": {"login": "calbach"}, "path": "e2e/app/create-account-page.ts", "diffHunk": "@@ -1,187 +1,206 @@\n-import {ElementHandle} from 'puppeteer';\n-import * as widgetXpath from './elements/widgetxpath';\n-import BasePage from './mixin/basepage';\n-import DropdownSelect from './mixin/dropdown-list-select';\n+import {ElementHandle, Page} from 'puppeteer';\n+import {defaultFieldValues} from '../resources/data/user-registration-fields';\n+import Button from './aou-elements/button';\n+import Checkbox from './aou-elements/checkbox';\n+import ClrIconLink from './aou-elements/clr-icon-link';\n+import RadioButton from './aou-elements/radiobutton';\n+import SelectComponent from './aou-elements/select-component';\n+import Textarea from './aou-elements/textarea';\n+import Textbox from './aou-elements/textbox';\n+import BasePage from './base-page';\n+\n \n-const registrationFields = require('../resources/data/user-registration-fields');\n const faker = require('faker/locale/en_US');\n \n+export const PAGE = {\n+  TITLE: 'Sign In',\n+};\n+\n+export const INSTITUTION_AFFILIATION = {\n+  EARLY_CAREER_TENURE_TRACK_RESEARCHER: 'Early career tenure-track researcher',\n+  UNDERGRADUATE_STUDENT: 'Undergraduate (Bachelor level) student',\n+  INDUSTRY: 'Industry',\n+};\n+\n+export const EDUCATION_LEVEL = {\n+  DOCTORATE: 'Doctorate',\n+};\n+\n+export const FIELD_LABEL = {\n+  READ_UNDERSTAND_PRIVACY_STATEMENT: 'I have read and understand the All of Us Research Program Privacy Statement',\n+  READ_UNDERSTAND_TERMS_OF_USE: 'I have read and understand the All of Us Research Program Terms of Use',\n+  INSTITUTION_NAME: 'Institution Name',\n+  ARE_YOU_AFFILIATED: 'Are you affiliated with an Academic Research Institution',\n+  RESEARCH_BACKGROUND: 'describe your research background, experience, and research interests',\n+  EDUCATION_LEVEL: 'Highest Level of Education Completed', // Highest Level of Education Completed\n+  YEAR_OF_BIRTH: 'Year of Birth',\n+};\n+\n export default class CreateAccountPage extends BasePage {\n-  public async getInvitationKeyInput(): Promise<ElementHandle> {\n-    return await this.puppeteerPage.waitForSelector('#invitationKey');\n+\n+  constructor(page: Page) {\n+    super(page);\n   }\n \n-  public async getSubmitButton(): Promise<ElementHandle> {\n-    const xpath = widgetXpath.button('Submit');\n-    return await this.puppeteerPage.waitForXPath(xpath, {visible:true})\n+  async isLoaded(): Promise<boolean> {\n+    await this.waitForTextExists(PAGE.TITLE);\n+    return true;\n   }\n \n-  public async getNextButton(): Promise<ElementHandle> {\n-    const xpath = widgetXpath.button('Next');\n-    return await this.puppeteerPage.waitForXPath(xpath, {visible:true})\n+  async getInvitationKeyInput(): Promise<Textbox> {\n+    const textbox = new Textbox(this.page);\n+    await textbox.withCss('#invitationKey');\n+    return textbox;\n   }\n \n-  public async scrollToLastPdfPage(): Promise<ElementHandle> {\n-    const selectr = '.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page';\n-    const pdfPage = await this.puppeteerPage.waitForSelector('.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page');\n-    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n-    await this.puppeteerPage.waitFor(1000);\n-    return pdfPage;\n+  async getSubmitButton(): Promise<Button> {\n+    const button = new Button(this.page);\n+    await button.withLabel({text: 'Submit'});\n+    return button;\n   }\n \n-  // find the second checkbox. it should be for the privacy statement\n-  public async getPrivacyStatementCheckbox(): Promise<ElementHandle> {\n-    const label = 'I have read and understand the All of Us Research Program Privacy Statement.';\n-    const selector = '[type=\"checkbox\"]';\n-    const element = await this.puppeteerPage.waitForSelector(selector, {visible: true});\n-    return element;\n+  async getNextButton(): Promise<Button> {\n+    const button = new Button(this.page);\n+    await button.withLabel({text: 'Next'});\n+    return button;\n   }\n \n-  public async getPrivacyStatementLabel(): Promise<ElementHandle> {\n-    const label = 'I have read and understand the All of Us Research Program Privacy Statement.';\n-    return this.getCheckboxLabel(label);\n+  async scrollToLastPdfPage(): Promise<ElementHandle> {\n+    const selector = '.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page';\n+    const pdfPage = await this.page.waitForSelector(selector);\n+    await this.page.evaluate(el => el.scrollIntoView(), pdfPage);\n+    return pdfPage;\n   }\n \n-  // find the second checkbox\n-  public async getTermsOfUseCheckbox(): Promise<ElementHandle> {\n-    const label = 'I have read and understand the All of Us Research Program Terms of Use described above.';\n-    const selector = '[type=\"checkbox\"]';\n-    const element = await this.puppeteerPage.waitForSelector(selector, {visible: true});\n-    return element;\n+  async getPrivacyStatementCheckbox(): Promise<Checkbox> {\n+    const checkbox = new Checkbox(this.page);\n+    await checkbox.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT});\n+    return checkbox;\n   }\n \n-  public async getTermsOfUseLabel(): Promise<ElementHandle> {\n-    const label = 'I have read and understand the All of Us Research Program Terms of Use described above.';\n-    return this.getCheckboxLabel(label);\n+  async getTermsOfUseCheckbox(): Promise<Checkbox> {\n+    const checkbox = new Checkbox(this.page);\n+    await checkbox.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_TERMS_OF_USE});\n+    return checkbox;\n   }\n \n-  // find checkbox label by matching label\n-  public async getCheckboxLabel(checkboxLabel: string): Promise<ElementHandle> {\n-    const selector = '[type=\"checkbox\"] + label';\n-    await this.puppeteerPage.waitForSelector(selector);\n-    const elements = await this.puppeteerPage.$$(selector);\n-    for (const element of elements) {\n-      const innerTxt  = await (await element.getProperty('innerText')).jsonValue();\n-      if (innerTxt === checkboxLabel) {\n-        return element;\n-      }\n-    }\n+  async getInstitutionNameInput(): Promise<Textbox> {\n+    const textbox = new Textbox(this.page);\n+    await textbox.withLabel({text: FIELD_LABEL.INSTITUTION_NAME});\n+    return textbox;\n   }\n \n-  public async getInstitutionNameInput(): Promise<ElementHandle> {\n-    return await this.puppeteerPage.waitForXPath('//input[@placeholder=\"Institution Name\"]');\n+  // true for select Yes radiobutton. false for select No radiobutton.\n+  async areYouAffiliatedRadioButton(yesOrNo: boolean): Promise<RadioButton> {\n+    let selector;\n+    if (yesOrNo) {\n+      selector = '//input[@id=\"show-institution-yes\"]';\n+    } else {\n+      selector = '//input[@id=\"show-institution-no\"]';\n+    }\n+    const radio = new RadioButton(this.page);\n+    await radio.withXpath(selector);\n+    return radio;\n   }\n \n-  public async getResearchBackgroundTextarea(): Promise<ElementHandle> {\n-    const label = 'Please describe your research background, experience and research interests';\n-    return await this.puppeteerPage.waitForXPath(`//label[contains(normalize-space(.),'${label}')]/parent::*//textarea`)\n+  async getResearchBackgroundTextarea(): Promise<Textarea> {\n+    const textarea = new Textarea(this.page);\n+    await textarea.withLabel({normalizeSpace: FIELD_LABEL.RESEARCH_BACKGROUND});\n+    return textarea;\n   }\n \n-  public async getUsernameDomain(): Promise<unknown> {\n-    const elem = await this.puppeteerPage.waitForXPath('//*[input[@id=\"username\"]]/i');\n+  async getUsernameDomain(): Promise<unknown> {\n+    const elem = await this.page.waitForXPath('//*[input[@id=\"username\"]]/i');\n     return await (await elem.getProperty('innerText')).jsonValue();\n   }\n \n-  public async fillInFormFields(fields: Array<{ label: string; value: string; }>): Promise<string> {\n+  async fillInFormFields(fields: { label: string; value: string; }[]): Promise<string> {\n     let newUserName;\n-\n-    function formFieldXpathHelper(aLabel: string): string {\n-      return `//label[contains(normalize-space(.),'${aLabel}')]/parent::*//input[@type='text']`;\n-    }\n-\n     for (const field of fields) {\n-      const selector = formFieldXpathHelper(field.label);\n-      const e = await this.puppeteerPage.waitForXPath(selector, {visible: true});\n-      await e.focus();\n-      await e.type(field.value);\n-      await e.press('Tab', { delay: 100 }); // tab out\n+      const textbox = new Textbox(this.page);\n+      await textbox.withLabel({text: field.label});\n+      await textbox.type(field.value);\n+      await textbox.pressKeyboard('Tab', { delay: 100 });\n       if (field.label === 'New Username') {\n-        await this.puppeteerPage.waitForSelector('clr-icon.is-solid[shape=\"success-standard\"]', {visible: true});\n-        newUserName = field.value;\n+        await new ClrIconLink(this.page).withLabel('New Username', 'success-standard');\n+        newUserName = field.value; // store new username for return\n       }\n     }\n     return newUserName;\n   }\n \n   // select Institution Affiliation from a dropdown\n-  public async selectInstitution(selectTextValue: string) {\n-    const dropdown = new DropdownSelect(this.puppeteerPage);\n+  async selectInstitution(selectTextValue: string) {\n+    const dropdown = new SelectComponent(this.page);\n     await dropdown.select(selectTextValue);\n   }\n \n-  public async getInstitutionValue() {\n-    const dropdown = new DropdownSelect(this.puppeteerPage);\n-    return await dropdown.displayedValue();\n+  async getInstitutionValue() {\n+    const dropdown = new SelectComponent(this.page);\n+    return await dropdown.getSelectedValue();\n   }\n \n-  // select Institution Affiliation from a dropdown\n-  public async selectEducationLevel(selectTextValue: string) {\n-    const dropdown = new DropdownSelect(this.puppeteerPage, 'Highest Level of Education Completed');\n+  // select Education Level from a dropdown\n+  async selectEducationLevel(selectTextValue: string) {\n+    const dropdown = new SelectComponent(this.page, FIELD_LABEL.EDUCATION_LEVEL);\n     await dropdown.select(selectTextValue);\n   }\n \n   // select Year of Birth from a dropdown\n-  public async selectYearOfBirth(year: string) {\n-    const dropdown = new DropdownSelect(this.puppeteerPage, 'Year of Birth');\n+  async selectYearOfBirth(year: string) {\n+    const dropdown = new SelectComponent(this.page, FIELD_LABEL.YEAR_OF_BIRTH);\n     await dropdown.select(year);\n   }\n \n   // Combined steps to make test code cleaner and shorter\n \n   // Step 1: Enter Invitation key\n-  public async fillOutInvitationKey(invitationKey: string) {\n+  async fillOutInvitationKey(invitationKey: string) {\n     await this.getInvitationKeyInput()\n     .then(invitationKeyInput => invitationKeyInput.type(invitationKey))\n     .then(() => this.getNextButton())\n     .then(submitButton => submitButton.click());\n   }\n \n   // Step 2: Accepting Terms of Use and Privacy statement.\n-  public async acceptTermsOfUseAgreement() {\n-    const privacyStatementCheckbox = await this.getPrivacyStatementCheckbox();\n-    const termsOfUseCheckbox = await this.getTermsOfUseCheckbox();\n-    const nextButton = await this.getNextButton();\n+  async acceptTermsOfUseAgreement() {\n+    await this.getPrivacyStatementCheckbox();\n+    await this.getTermsOfUseCheckbox();\n+    await this.getNextButton();\n \n     await this.scrollToLastPdfPage();\n \n     // check by click on label works\n-    await (await this.getPrivacyStatementLabel()).click();\n-    await (await this.getTermsOfUseLabel()).click();\n-\n-    // TODO uncomment after bug fixed https://precisionmedicineinitiative.atlassian.net/browse/RW-4487\n-    // uncheck a checkbox to ensure NEXT button becomes disabled\n-    // await page.evaluate(e => e.click(), await createAccountPage.getTermsOfUseLabel());\n-    // back to check on\n-    // await page.evaluate(e => e.click(), await createAccountPage.getTermsOfUseLabel());\n+    await (await this.getPrivacyStatementCheckbox()).check();\n+    await (await this.getTermsOfUseCheckbox()).check();\n   }\n \n   // Step 3: Enter user default information\n-  public async fillOutUserInformation() {\n-    const newUserName = await this.fillInFormFields(registrationFields.inputFieldsValues);\n+  async fillOutUserInformation() {\n+    const newUserName = await this.fillInFormFields(defaultFieldValues);\n     await (await this.getResearchBackgroundTextarea()).type(faker.lorem.word());\n+    // a different dropdown selection depending on Yes or No radiobutton was selected\n+    await (await this.areYouAffiliatedRadioButton(true)).click();\n     await (await this.getInstitutionNameInput()).type(faker.company.companyName());\n-    await this.selectInstitution(registrationFields.institutionAffiliation.EARLY_CAREER_TENURE_TRACK_RESEARCHER);\n-    await this.puppeteerPage.waitFor(1000);\n+    await this.selectInstitution(INSTITUTION_AFFILIATION.EARLY_CAREER_TENURE_TRACK_RESEARCHER);\n+    await this.page.waitFor(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 281}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NDUwOQ==", "bodyText": "1 second pause is needed, else test becomes flaky because Puppeteer is very fast. I added a comment.\n// need pause 1 second for dropdown to disappear, so it is not blocking click on elements below.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390694509", "createdAt": "2020-03-11T01:04:58Z", "author": {"login": "aweng98"}, "path": "e2e/app/create-account-page.ts", "diffHunk": "@@ -1,187 +1,206 @@\n-import {ElementHandle} from 'puppeteer';\n-import * as widgetXpath from './elements/widgetxpath';\n-import BasePage from './mixin/basepage';\n-import DropdownSelect from './mixin/dropdown-list-select';\n+import {ElementHandle, Page} from 'puppeteer';\n+import {defaultFieldValues} from '../resources/data/user-registration-fields';\n+import Button from './aou-elements/button';\n+import Checkbox from './aou-elements/checkbox';\n+import ClrIconLink from './aou-elements/clr-icon-link';\n+import RadioButton from './aou-elements/radiobutton';\n+import SelectComponent from './aou-elements/select-component';\n+import Textarea from './aou-elements/textarea';\n+import Textbox from './aou-elements/textbox';\n+import BasePage from './base-page';\n+\n \n-const registrationFields = require('../resources/data/user-registration-fields');\n const faker = require('faker/locale/en_US');\n \n+export const PAGE = {\n+  TITLE: 'Sign In',\n+};\n+\n+export const INSTITUTION_AFFILIATION = {\n+  EARLY_CAREER_TENURE_TRACK_RESEARCHER: 'Early career tenure-track researcher',\n+  UNDERGRADUATE_STUDENT: 'Undergraduate (Bachelor level) student',\n+  INDUSTRY: 'Industry',\n+};\n+\n+export const EDUCATION_LEVEL = {\n+  DOCTORATE: 'Doctorate',\n+};\n+\n+export const FIELD_LABEL = {\n+  READ_UNDERSTAND_PRIVACY_STATEMENT: 'I have read and understand the All of Us Research Program Privacy Statement',\n+  READ_UNDERSTAND_TERMS_OF_USE: 'I have read and understand the All of Us Research Program Terms of Use',\n+  INSTITUTION_NAME: 'Institution Name',\n+  ARE_YOU_AFFILIATED: 'Are you affiliated with an Academic Research Institution',\n+  RESEARCH_BACKGROUND: 'describe your research background, experience, and research interests',\n+  EDUCATION_LEVEL: 'Highest Level of Education Completed', // Highest Level of Education Completed\n+  YEAR_OF_BIRTH: 'Year of Birth',\n+};\n+\n export default class CreateAccountPage extends BasePage {\n-  public async getInvitationKeyInput(): Promise<ElementHandle> {\n-    return await this.puppeteerPage.waitForSelector('#invitationKey');\n+\n+  constructor(page: Page) {\n+    super(page);\n   }\n \n-  public async getSubmitButton(): Promise<ElementHandle> {\n-    const xpath = widgetXpath.button('Submit');\n-    return await this.puppeteerPage.waitForXPath(xpath, {visible:true})\n+  async isLoaded(): Promise<boolean> {\n+    await this.waitForTextExists(PAGE.TITLE);\n+    return true;\n   }\n \n-  public async getNextButton(): Promise<ElementHandle> {\n-    const xpath = widgetXpath.button('Next');\n-    return await this.puppeteerPage.waitForXPath(xpath, {visible:true})\n+  async getInvitationKeyInput(): Promise<Textbox> {\n+    const textbox = new Textbox(this.page);\n+    await textbox.withCss('#invitationKey');\n+    return textbox;\n   }\n \n-  public async scrollToLastPdfPage(): Promise<ElementHandle> {\n-    const selectr = '.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page';\n-    const pdfPage = await this.puppeteerPage.waitForSelector('.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page');\n-    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n-    await this.puppeteerPage.waitFor(1000);\n-    return pdfPage;\n+  async getSubmitButton(): Promise<Button> {\n+    const button = new Button(this.page);\n+    await button.withLabel({text: 'Submit'});\n+    return button;\n   }\n \n-  // find the second checkbox. it should be for the privacy statement\n-  public async getPrivacyStatementCheckbox(): Promise<ElementHandle> {\n-    const label = 'I have read and understand the All of Us Research Program Privacy Statement.';\n-    const selector = '[type=\"checkbox\"]';\n-    const element = await this.puppeteerPage.waitForSelector(selector, {visible: true});\n-    return element;\n+  async getNextButton(): Promise<Button> {\n+    const button = new Button(this.page);\n+    await button.withLabel({text: 'Next'});\n+    return button;\n   }\n \n-  public async getPrivacyStatementLabel(): Promise<ElementHandle> {\n-    const label = 'I have read and understand the All of Us Research Program Privacy Statement.';\n-    return this.getCheckboxLabel(label);\n+  async scrollToLastPdfPage(): Promise<ElementHandle> {\n+    const selector = '.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page';\n+    const pdfPage = await this.page.waitForSelector(selector);\n+    await this.page.evaluate(el => el.scrollIntoView(), pdfPage);\n+    return pdfPage;\n   }\n \n-  // find the second checkbox\n-  public async getTermsOfUseCheckbox(): Promise<ElementHandle> {\n-    const label = 'I have read and understand the All of Us Research Program Terms of Use described above.';\n-    const selector = '[type=\"checkbox\"]';\n-    const element = await this.puppeteerPage.waitForSelector(selector, {visible: true});\n-    return element;\n+  async getPrivacyStatementCheckbox(): Promise<Checkbox> {\n+    const checkbox = new Checkbox(this.page);\n+    await checkbox.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT});\n+    return checkbox;\n   }\n \n-  public async getTermsOfUseLabel(): Promise<ElementHandle> {\n-    const label = 'I have read and understand the All of Us Research Program Terms of Use described above.';\n-    return this.getCheckboxLabel(label);\n+  async getTermsOfUseCheckbox(): Promise<Checkbox> {\n+    const checkbox = new Checkbox(this.page);\n+    await checkbox.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_TERMS_OF_USE});\n+    return checkbox;\n   }\n \n-  // find checkbox label by matching label\n-  public async getCheckboxLabel(checkboxLabel: string): Promise<ElementHandle> {\n-    const selector = '[type=\"checkbox\"] + label';\n-    await this.puppeteerPage.waitForSelector(selector);\n-    const elements = await this.puppeteerPage.$$(selector);\n-    for (const element of elements) {\n-      const innerTxt  = await (await element.getProperty('innerText')).jsonValue();\n-      if (innerTxt === checkboxLabel) {\n-        return element;\n-      }\n-    }\n+  async getInstitutionNameInput(): Promise<Textbox> {\n+    const textbox = new Textbox(this.page);\n+    await textbox.withLabel({text: FIELD_LABEL.INSTITUTION_NAME});\n+    return textbox;\n   }\n \n-  public async getInstitutionNameInput(): Promise<ElementHandle> {\n-    return await this.puppeteerPage.waitForXPath('//input[@placeholder=\"Institution Name\"]');\n+  // true for select Yes radiobutton. false for select No radiobutton.\n+  async areYouAffiliatedRadioButton(yesOrNo: boolean): Promise<RadioButton> {\n+    let selector;\n+    if (yesOrNo) {\n+      selector = '//input[@id=\"show-institution-yes\"]';\n+    } else {\n+      selector = '//input[@id=\"show-institution-no\"]';\n+    }\n+    const radio = new RadioButton(this.page);\n+    await radio.withXpath(selector);\n+    return radio;\n   }\n \n-  public async getResearchBackgroundTextarea(): Promise<ElementHandle> {\n-    const label = 'Please describe your research background, experience and research interests';\n-    return await this.puppeteerPage.waitForXPath(`//label[contains(normalize-space(.),'${label}')]/parent::*//textarea`)\n+  async getResearchBackgroundTextarea(): Promise<Textarea> {\n+    const textarea = new Textarea(this.page);\n+    await textarea.withLabel({normalizeSpace: FIELD_LABEL.RESEARCH_BACKGROUND});\n+    return textarea;\n   }\n \n-  public async getUsernameDomain(): Promise<unknown> {\n-    const elem = await this.puppeteerPage.waitForXPath('//*[input[@id=\"username\"]]/i');\n+  async getUsernameDomain(): Promise<unknown> {\n+    const elem = await this.page.waitForXPath('//*[input[@id=\"username\"]]/i');\n     return await (await elem.getProperty('innerText')).jsonValue();\n   }\n \n-  public async fillInFormFields(fields: Array<{ label: string; value: string; }>): Promise<string> {\n+  async fillInFormFields(fields: { label: string; value: string; }[]): Promise<string> {\n     let newUserName;\n-\n-    function formFieldXpathHelper(aLabel: string): string {\n-      return `//label[contains(normalize-space(.),'${aLabel}')]/parent::*//input[@type='text']`;\n-    }\n-\n     for (const field of fields) {\n-      const selector = formFieldXpathHelper(field.label);\n-      const e = await this.puppeteerPage.waitForXPath(selector, {visible: true});\n-      await e.focus();\n-      await e.type(field.value);\n-      await e.press('Tab', { delay: 100 }); // tab out\n+      const textbox = new Textbox(this.page);\n+      await textbox.withLabel({text: field.label});\n+      await textbox.type(field.value);\n+      await textbox.pressKeyboard('Tab', { delay: 100 });\n       if (field.label === 'New Username') {\n-        await this.puppeteerPage.waitForSelector('clr-icon.is-solid[shape=\"success-standard\"]', {visible: true});\n-        newUserName = field.value;\n+        await new ClrIconLink(this.page).withLabel('New Username', 'success-standard');\n+        newUserName = field.value; // store new username for return\n       }\n     }\n     return newUserName;\n   }\n \n   // select Institution Affiliation from a dropdown\n-  public async selectInstitution(selectTextValue: string) {\n-    const dropdown = new DropdownSelect(this.puppeteerPage);\n+  async selectInstitution(selectTextValue: string) {\n+    const dropdown = new SelectComponent(this.page);\n     await dropdown.select(selectTextValue);\n   }\n \n-  public async getInstitutionValue() {\n-    const dropdown = new DropdownSelect(this.puppeteerPage);\n-    return await dropdown.displayedValue();\n+  async getInstitutionValue() {\n+    const dropdown = new SelectComponent(this.page);\n+    return await dropdown.getSelectedValue();\n   }\n \n-  // select Institution Affiliation from a dropdown\n-  public async selectEducationLevel(selectTextValue: string) {\n-    const dropdown = new DropdownSelect(this.puppeteerPage, 'Highest Level of Education Completed');\n+  // select Education Level from a dropdown\n+  async selectEducationLevel(selectTextValue: string) {\n+    const dropdown = new SelectComponent(this.page, FIELD_LABEL.EDUCATION_LEVEL);\n     await dropdown.select(selectTextValue);\n   }\n \n   // select Year of Birth from a dropdown\n-  public async selectYearOfBirth(year: string) {\n-    const dropdown = new DropdownSelect(this.puppeteerPage, 'Year of Birth');\n+  async selectYearOfBirth(year: string) {\n+    const dropdown = new SelectComponent(this.page, FIELD_LABEL.YEAR_OF_BIRTH);\n     await dropdown.select(year);\n   }\n \n   // Combined steps to make test code cleaner and shorter\n \n   // Step 1: Enter Invitation key\n-  public async fillOutInvitationKey(invitationKey: string) {\n+  async fillOutInvitationKey(invitationKey: string) {\n     await this.getInvitationKeyInput()\n     .then(invitationKeyInput => invitationKeyInput.type(invitationKey))\n     .then(() => this.getNextButton())\n     .then(submitButton => submitButton.click());\n   }\n \n   // Step 2: Accepting Terms of Use and Privacy statement.\n-  public async acceptTermsOfUseAgreement() {\n-    const privacyStatementCheckbox = await this.getPrivacyStatementCheckbox();\n-    const termsOfUseCheckbox = await this.getTermsOfUseCheckbox();\n-    const nextButton = await this.getNextButton();\n+  async acceptTermsOfUseAgreement() {\n+    await this.getPrivacyStatementCheckbox();\n+    await this.getTermsOfUseCheckbox();\n+    await this.getNextButton();\n \n     await this.scrollToLastPdfPage();\n \n     // check by click on label works\n-    await (await this.getPrivacyStatementLabel()).click();\n-    await (await this.getTermsOfUseLabel()).click();\n-\n-    // TODO uncomment after bug fixed https://precisionmedicineinitiative.atlassian.net/browse/RW-4487\n-    // uncheck a checkbox to ensure NEXT button becomes disabled\n-    // await page.evaluate(e => e.click(), await createAccountPage.getTermsOfUseLabel());\n-    // back to check on\n-    // await page.evaluate(e => e.click(), await createAccountPage.getTermsOfUseLabel());\n+    await (await this.getPrivacyStatementCheckbox()).check();\n+    await (await this.getTermsOfUseCheckbox()).check();\n   }\n \n   // Step 3: Enter user default information\n-  public async fillOutUserInformation() {\n-    const newUserName = await this.fillInFormFields(registrationFields.inputFieldsValues);\n+  async fillOutUserInformation() {\n+    const newUserName = await this.fillInFormFields(defaultFieldValues);\n     await (await this.getResearchBackgroundTextarea()).type(faker.lorem.word());\n+    // a different dropdown selection depending on Yes or No radiobutton was selected\n+    await (await this.areYouAffiliatedRadioButton(true)).click();\n     await (await this.getInstitutionNameInput()).type(faker.company.companyName());\n-    await this.selectInstitution(registrationFields.institutionAffiliation.EARLY_CAREER_TENURE_TRACK_RESEARCHER);\n-    await this.puppeteerPage.waitFor(1000);\n+    await this.selectInstitution(INSTITUTION_AFFILIATION.EARLY_CAREER_TENURE_TRACK_RESEARCHER);\n+    await this.page.waitFor(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2MTQxNw=="}, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 281}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc1ODE2Mg==", "bodyText": "For example, in this case - could we instead block until the dropdown element is no longer visible, rather than sleeping?", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390758162", "createdAt": "2020-03-11T05:52:41Z", "author": {"login": "calbach"}, "path": "e2e/app/create-account-page.ts", "diffHunk": "@@ -1,187 +1,206 @@\n-import {ElementHandle} from 'puppeteer';\n-import * as widgetXpath from './elements/widgetxpath';\n-import BasePage from './mixin/basepage';\n-import DropdownSelect from './mixin/dropdown-list-select';\n+import {ElementHandle, Page} from 'puppeteer';\n+import {defaultFieldValues} from '../resources/data/user-registration-fields';\n+import Button from './aou-elements/button';\n+import Checkbox from './aou-elements/checkbox';\n+import ClrIconLink from './aou-elements/clr-icon-link';\n+import RadioButton from './aou-elements/radiobutton';\n+import SelectComponent from './aou-elements/select-component';\n+import Textarea from './aou-elements/textarea';\n+import Textbox from './aou-elements/textbox';\n+import BasePage from './base-page';\n+\n \n-const registrationFields = require('../resources/data/user-registration-fields');\n const faker = require('faker/locale/en_US');\n \n+export const PAGE = {\n+  TITLE: 'Sign In',\n+};\n+\n+export const INSTITUTION_AFFILIATION = {\n+  EARLY_CAREER_TENURE_TRACK_RESEARCHER: 'Early career tenure-track researcher',\n+  UNDERGRADUATE_STUDENT: 'Undergraduate (Bachelor level) student',\n+  INDUSTRY: 'Industry',\n+};\n+\n+export const EDUCATION_LEVEL = {\n+  DOCTORATE: 'Doctorate',\n+};\n+\n+export const FIELD_LABEL = {\n+  READ_UNDERSTAND_PRIVACY_STATEMENT: 'I have read and understand the All of Us Research Program Privacy Statement',\n+  READ_UNDERSTAND_TERMS_OF_USE: 'I have read and understand the All of Us Research Program Terms of Use',\n+  INSTITUTION_NAME: 'Institution Name',\n+  ARE_YOU_AFFILIATED: 'Are you affiliated with an Academic Research Institution',\n+  RESEARCH_BACKGROUND: 'describe your research background, experience, and research interests',\n+  EDUCATION_LEVEL: 'Highest Level of Education Completed', // Highest Level of Education Completed\n+  YEAR_OF_BIRTH: 'Year of Birth',\n+};\n+\n export default class CreateAccountPage extends BasePage {\n-  public async getInvitationKeyInput(): Promise<ElementHandle> {\n-    return await this.puppeteerPage.waitForSelector('#invitationKey');\n+\n+  constructor(page: Page) {\n+    super(page);\n   }\n \n-  public async getSubmitButton(): Promise<ElementHandle> {\n-    const xpath = widgetXpath.button('Submit');\n-    return await this.puppeteerPage.waitForXPath(xpath, {visible:true})\n+  async isLoaded(): Promise<boolean> {\n+    await this.waitForTextExists(PAGE.TITLE);\n+    return true;\n   }\n \n-  public async getNextButton(): Promise<ElementHandle> {\n-    const xpath = widgetXpath.button('Next');\n-    return await this.puppeteerPage.waitForXPath(xpath, {visible:true})\n+  async getInvitationKeyInput(): Promise<Textbox> {\n+    const textbox = new Textbox(this.page);\n+    await textbox.withCss('#invitationKey');\n+    return textbox;\n   }\n \n-  public async scrollToLastPdfPage(): Promise<ElementHandle> {\n-    const selectr = '.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page';\n-    const pdfPage = await this.puppeteerPage.waitForSelector('.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page');\n-    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n-    await this.puppeteerPage.waitFor(1000);\n-    return pdfPage;\n+  async getSubmitButton(): Promise<Button> {\n+    const button = new Button(this.page);\n+    await button.withLabel({text: 'Submit'});\n+    return button;\n   }\n \n-  // find the second checkbox. it should be for the privacy statement\n-  public async getPrivacyStatementCheckbox(): Promise<ElementHandle> {\n-    const label = 'I have read and understand the All of Us Research Program Privacy Statement.';\n-    const selector = '[type=\"checkbox\"]';\n-    const element = await this.puppeteerPage.waitForSelector(selector, {visible: true});\n-    return element;\n+  async getNextButton(): Promise<Button> {\n+    const button = new Button(this.page);\n+    await button.withLabel({text: 'Next'});\n+    return button;\n   }\n \n-  public async getPrivacyStatementLabel(): Promise<ElementHandle> {\n-    const label = 'I have read and understand the All of Us Research Program Privacy Statement.';\n-    return this.getCheckboxLabel(label);\n+  async scrollToLastPdfPage(): Promise<ElementHandle> {\n+    const selector = '.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page';\n+    const pdfPage = await this.page.waitForSelector(selector);\n+    await this.page.evaluate(el => el.scrollIntoView(), pdfPage);\n+    return pdfPage;\n   }\n \n-  // find the second checkbox\n-  public async getTermsOfUseCheckbox(): Promise<ElementHandle> {\n-    const label = 'I have read and understand the All of Us Research Program Terms of Use described above.';\n-    const selector = '[type=\"checkbox\"]';\n-    const element = await this.puppeteerPage.waitForSelector(selector, {visible: true});\n-    return element;\n+  async getPrivacyStatementCheckbox(): Promise<Checkbox> {\n+    const checkbox = new Checkbox(this.page);\n+    await checkbox.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT});\n+    return checkbox;\n   }\n \n-  public async getTermsOfUseLabel(): Promise<ElementHandle> {\n-    const label = 'I have read and understand the All of Us Research Program Terms of Use described above.';\n-    return this.getCheckboxLabel(label);\n+  async getTermsOfUseCheckbox(): Promise<Checkbox> {\n+    const checkbox = new Checkbox(this.page);\n+    await checkbox.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_TERMS_OF_USE});\n+    return checkbox;\n   }\n \n-  // find checkbox label by matching label\n-  public async getCheckboxLabel(checkboxLabel: string): Promise<ElementHandle> {\n-    const selector = '[type=\"checkbox\"] + label';\n-    await this.puppeteerPage.waitForSelector(selector);\n-    const elements = await this.puppeteerPage.$$(selector);\n-    for (const element of elements) {\n-      const innerTxt  = await (await element.getProperty('innerText')).jsonValue();\n-      if (innerTxt === checkboxLabel) {\n-        return element;\n-      }\n-    }\n+  async getInstitutionNameInput(): Promise<Textbox> {\n+    const textbox = new Textbox(this.page);\n+    await textbox.withLabel({text: FIELD_LABEL.INSTITUTION_NAME});\n+    return textbox;\n   }\n \n-  public async getInstitutionNameInput(): Promise<ElementHandle> {\n-    return await this.puppeteerPage.waitForXPath('//input[@placeholder=\"Institution Name\"]');\n+  // true for select Yes radiobutton. false for select No radiobutton.\n+  async areYouAffiliatedRadioButton(yesOrNo: boolean): Promise<RadioButton> {\n+    let selector;\n+    if (yesOrNo) {\n+      selector = '//input[@id=\"show-institution-yes\"]';\n+    } else {\n+      selector = '//input[@id=\"show-institution-no\"]';\n+    }\n+    const radio = new RadioButton(this.page);\n+    await radio.withXpath(selector);\n+    return radio;\n   }\n \n-  public async getResearchBackgroundTextarea(): Promise<ElementHandle> {\n-    const label = 'Please describe your research background, experience and research interests';\n-    return await this.puppeteerPage.waitForXPath(`//label[contains(normalize-space(.),'${label}')]/parent::*//textarea`)\n+  async getResearchBackgroundTextarea(): Promise<Textarea> {\n+    const textarea = new Textarea(this.page);\n+    await textarea.withLabel({normalizeSpace: FIELD_LABEL.RESEARCH_BACKGROUND});\n+    return textarea;\n   }\n \n-  public async getUsernameDomain(): Promise<unknown> {\n-    const elem = await this.puppeteerPage.waitForXPath('//*[input[@id=\"username\"]]/i');\n+  async getUsernameDomain(): Promise<unknown> {\n+    const elem = await this.page.waitForXPath('//*[input[@id=\"username\"]]/i');\n     return await (await elem.getProperty('innerText')).jsonValue();\n   }\n \n-  public async fillInFormFields(fields: Array<{ label: string; value: string; }>): Promise<string> {\n+  async fillInFormFields(fields: { label: string; value: string; }[]): Promise<string> {\n     let newUserName;\n-\n-    function formFieldXpathHelper(aLabel: string): string {\n-      return `//label[contains(normalize-space(.),'${aLabel}')]/parent::*//input[@type='text']`;\n-    }\n-\n     for (const field of fields) {\n-      const selector = formFieldXpathHelper(field.label);\n-      const e = await this.puppeteerPage.waitForXPath(selector, {visible: true});\n-      await e.focus();\n-      await e.type(field.value);\n-      await e.press('Tab', { delay: 100 }); // tab out\n+      const textbox = new Textbox(this.page);\n+      await textbox.withLabel({text: field.label});\n+      await textbox.type(field.value);\n+      await textbox.pressKeyboard('Tab', { delay: 100 });\n       if (field.label === 'New Username') {\n-        await this.puppeteerPage.waitForSelector('clr-icon.is-solid[shape=\"success-standard\"]', {visible: true});\n-        newUserName = field.value;\n+        await new ClrIconLink(this.page).withLabel('New Username', 'success-standard');\n+        newUserName = field.value; // store new username for return\n       }\n     }\n     return newUserName;\n   }\n \n   // select Institution Affiliation from a dropdown\n-  public async selectInstitution(selectTextValue: string) {\n-    const dropdown = new DropdownSelect(this.puppeteerPage);\n+  async selectInstitution(selectTextValue: string) {\n+    const dropdown = new SelectComponent(this.page);\n     await dropdown.select(selectTextValue);\n   }\n \n-  public async getInstitutionValue() {\n-    const dropdown = new DropdownSelect(this.puppeteerPage);\n-    return await dropdown.displayedValue();\n+  async getInstitutionValue() {\n+    const dropdown = new SelectComponent(this.page);\n+    return await dropdown.getSelectedValue();\n   }\n \n-  // select Institution Affiliation from a dropdown\n-  public async selectEducationLevel(selectTextValue: string) {\n-    const dropdown = new DropdownSelect(this.puppeteerPage, 'Highest Level of Education Completed');\n+  // select Education Level from a dropdown\n+  async selectEducationLevel(selectTextValue: string) {\n+    const dropdown = new SelectComponent(this.page, FIELD_LABEL.EDUCATION_LEVEL);\n     await dropdown.select(selectTextValue);\n   }\n \n   // select Year of Birth from a dropdown\n-  public async selectYearOfBirth(year: string) {\n-    const dropdown = new DropdownSelect(this.puppeteerPage, 'Year of Birth');\n+  async selectYearOfBirth(year: string) {\n+    const dropdown = new SelectComponent(this.page, FIELD_LABEL.YEAR_OF_BIRTH);\n     await dropdown.select(year);\n   }\n \n   // Combined steps to make test code cleaner and shorter\n \n   // Step 1: Enter Invitation key\n-  public async fillOutInvitationKey(invitationKey: string) {\n+  async fillOutInvitationKey(invitationKey: string) {\n     await this.getInvitationKeyInput()\n     .then(invitationKeyInput => invitationKeyInput.type(invitationKey))\n     .then(() => this.getNextButton())\n     .then(submitButton => submitButton.click());\n   }\n \n   // Step 2: Accepting Terms of Use and Privacy statement.\n-  public async acceptTermsOfUseAgreement() {\n-    const privacyStatementCheckbox = await this.getPrivacyStatementCheckbox();\n-    const termsOfUseCheckbox = await this.getTermsOfUseCheckbox();\n-    const nextButton = await this.getNextButton();\n+  async acceptTermsOfUseAgreement() {\n+    await this.getPrivacyStatementCheckbox();\n+    await this.getTermsOfUseCheckbox();\n+    await this.getNextButton();\n \n     await this.scrollToLastPdfPage();\n \n     // check by click on label works\n-    await (await this.getPrivacyStatementLabel()).click();\n-    await (await this.getTermsOfUseLabel()).click();\n-\n-    // TODO uncomment after bug fixed https://precisionmedicineinitiative.atlassian.net/browse/RW-4487\n-    // uncheck a checkbox to ensure NEXT button becomes disabled\n-    // await page.evaluate(e => e.click(), await createAccountPage.getTermsOfUseLabel());\n-    // back to check on\n-    // await page.evaluate(e => e.click(), await createAccountPage.getTermsOfUseLabel());\n+    await (await this.getPrivacyStatementCheckbox()).check();\n+    await (await this.getTermsOfUseCheckbox()).check();\n   }\n \n   // Step 3: Enter user default information\n-  public async fillOutUserInformation() {\n-    const newUserName = await this.fillInFormFields(registrationFields.inputFieldsValues);\n+  async fillOutUserInformation() {\n+    const newUserName = await this.fillInFormFields(defaultFieldValues);\n     await (await this.getResearchBackgroundTextarea()).type(faker.lorem.word());\n+    // a different dropdown selection depending on Yes or No radiobutton was selected\n+    await (await this.areYouAffiliatedRadioButton(true)).click();\n     await (await this.getInstitutionNameInput()).type(faker.company.companyName());\n-    await this.selectInstitution(registrationFields.institutionAffiliation.EARLY_CAREER_TENURE_TRACK_RESEARCHER);\n-    await this.puppeteerPage.waitFor(1000);\n+    await this.selectInstitution(INSTITUTION_AFFILIATION.EARLY_CAREER_TENURE_TRACK_RESEARCHER);\n+    await this.page.waitFor(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2MTQxNw=="}, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 281}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxMDA1NA==", "bodyText": "occurrences of sleep after select are removed. Replaced by a function that waits until dropdown is no longer in DOM.\nprivate async waitUntilDropdownClosed() {\n    const xpath = this.componentXpath() + '/*[contains(normalize-space(@class), \"p-input-overlay-visible\")]';\n    await this.page.waitForXPath(xpath, {hidden: true}).catch((err) => {\n      console.error('Select dropdown is not closed.');\n      throw err;\n    })\n  }", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r391310054", "createdAt": "2020-03-11T22:38:21Z", "author": {"login": "aweng98"}, "path": "e2e/app/create-account-page.ts", "diffHunk": "@@ -1,187 +1,206 @@\n-import {ElementHandle} from 'puppeteer';\n-import * as widgetXpath from './elements/widgetxpath';\n-import BasePage from './mixin/basepage';\n-import DropdownSelect from './mixin/dropdown-list-select';\n+import {ElementHandle, Page} from 'puppeteer';\n+import {defaultFieldValues} from '../resources/data/user-registration-fields';\n+import Button from './aou-elements/button';\n+import Checkbox from './aou-elements/checkbox';\n+import ClrIconLink from './aou-elements/clr-icon-link';\n+import RadioButton from './aou-elements/radiobutton';\n+import SelectComponent from './aou-elements/select-component';\n+import Textarea from './aou-elements/textarea';\n+import Textbox from './aou-elements/textbox';\n+import BasePage from './base-page';\n+\n \n-const registrationFields = require('../resources/data/user-registration-fields');\n const faker = require('faker/locale/en_US');\n \n+export const PAGE = {\n+  TITLE: 'Sign In',\n+};\n+\n+export const INSTITUTION_AFFILIATION = {\n+  EARLY_CAREER_TENURE_TRACK_RESEARCHER: 'Early career tenure-track researcher',\n+  UNDERGRADUATE_STUDENT: 'Undergraduate (Bachelor level) student',\n+  INDUSTRY: 'Industry',\n+};\n+\n+export const EDUCATION_LEVEL = {\n+  DOCTORATE: 'Doctorate',\n+};\n+\n+export const FIELD_LABEL = {\n+  READ_UNDERSTAND_PRIVACY_STATEMENT: 'I have read and understand the All of Us Research Program Privacy Statement',\n+  READ_UNDERSTAND_TERMS_OF_USE: 'I have read and understand the All of Us Research Program Terms of Use',\n+  INSTITUTION_NAME: 'Institution Name',\n+  ARE_YOU_AFFILIATED: 'Are you affiliated with an Academic Research Institution',\n+  RESEARCH_BACKGROUND: 'describe your research background, experience, and research interests',\n+  EDUCATION_LEVEL: 'Highest Level of Education Completed', // Highest Level of Education Completed\n+  YEAR_OF_BIRTH: 'Year of Birth',\n+};\n+\n export default class CreateAccountPage extends BasePage {\n-  public async getInvitationKeyInput(): Promise<ElementHandle> {\n-    return await this.puppeteerPage.waitForSelector('#invitationKey');\n+\n+  constructor(page: Page) {\n+    super(page);\n   }\n \n-  public async getSubmitButton(): Promise<ElementHandle> {\n-    const xpath = widgetXpath.button('Submit');\n-    return await this.puppeteerPage.waitForXPath(xpath, {visible:true})\n+  async isLoaded(): Promise<boolean> {\n+    await this.waitForTextExists(PAGE.TITLE);\n+    return true;\n   }\n \n-  public async getNextButton(): Promise<ElementHandle> {\n-    const xpath = widgetXpath.button('Next');\n-    return await this.puppeteerPage.waitForXPath(xpath, {visible:true})\n+  async getInvitationKeyInput(): Promise<Textbox> {\n+    const textbox = new Textbox(this.page);\n+    await textbox.withCss('#invitationKey');\n+    return textbox;\n   }\n \n-  public async scrollToLastPdfPage(): Promise<ElementHandle> {\n-    const selectr = '.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page';\n-    const pdfPage = await this.puppeteerPage.waitForSelector('.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page');\n-    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n-    await this.puppeteerPage.waitFor(1000);\n-    return pdfPage;\n+  async getSubmitButton(): Promise<Button> {\n+    const button = new Button(this.page);\n+    await button.withLabel({text: 'Submit'});\n+    return button;\n   }\n \n-  // find the second checkbox. it should be for the privacy statement\n-  public async getPrivacyStatementCheckbox(): Promise<ElementHandle> {\n-    const label = 'I have read and understand the All of Us Research Program Privacy Statement.';\n-    const selector = '[type=\"checkbox\"]';\n-    const element = await this.puppeteerPage.waitForSelector(selector, {visible: true});\n-    return element;\n+  async getNextButton(): Promise<Button> {\n+    const button = new Button(this.page);\n+    await button.withLabel({text: 'Next'});\n+    return button;\n   }\n \n-  public async getPrivacyStatementLabel(): Promise<ElementHandle> {\n-    const label = 'I have read and understand the All of Us Research Program Privacy Statement.';\n-    return this.getCheckboxLabel(label);\n+  async scrollToLastPdfPage(): Promise<ElementHandle> {\n+    const selector = '.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page';\n+    const pdfPage = await this.page.waitForSelector(selector);\n+    await this.page.evaluate(el => el.scrollIntoView(), pdfPage);\n+    return pdfPage;\n   }\n \n-  // find the second checkbox\n-  public async getTermsOfUseCheckbox(): Promise<ElementHandle> {\n-    const label = 'I have read and understand the All of Us Research Program Terms of Use described above.';\n-    const selector = '[type=\"checkbox\"]';\n-    const element = await this.puppeteerPage.waitForSelector(selector, {visible: true});\n-    return element;\n+  async getPrivacyStatementCheckbox(): Promise<Checkbox> {\n+    const checkbox = new Checkbox(this.page);\n+    await checkbox.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_PRIVACY_STATEMENT});\n+    return checkbox;\n   }\n \n-  public async getTermsOfUseLabel(): Promise<ElementHandle> {\n-    const label = 'I have read and understand the All of Us Research Program Terms of Use described above.';\n-    return this.getCheckboxLabel(label);\n+  async getTermsOfUseCheckbox(): Promise<Checkbox> {\n+    const checkbox = new Checkbox(this.page);\n+    await checkbox.withLabel({normalizeSpace: FIELD_LABEL.READ_UNDERSTAND_TERMS_OF_USE});\n+    return checkbox;\n   }\n \n-  // find checkbox label by matching label\n-  public async getCheckboxLabel(checkboxLabel: string): Promise<ElementHandle> {\n-    const selector = '[type=\"checkbox\"] + label';\n-    await this.puppeteerPage.waitForSelector(selector);\n-    const elements = await this.puppeteerPage.$$(selector);\n-    for (const element of elements) {\n-      const innerTxt  = await (await element.getProperty('innerText')).jsonValue();\n-      if (innerTxt === checkboxLabel) {\n-        return element;\n-      }\n-    }\n+  async getInstitutionNameInput(): Promise<Textbox> {\n+    const textbox = new Textbox(this.page);\n+    await textbox.withLabel({text: FIELD_LABEL.INSTITUTION_NAME});\n+    return textbox;\n   }\n \n-  public async getInstitutionNameInput(): Promise<ElementHandle> {\n-    return await this.puppeteerPage.waitForXPath('//input[@placeholder=\"Institution Name\"]');\n+  // true for select Yes radiobutton. false for select No radiobutton.\n+  async areYouAffiliatedRadioButton(yesOrNo: boolean): Promise<RadioButton> {\n+    let selector;\n+    if (yesOrNo) {\n+      selector = '//input[@id=\"show-institution-yes\"]';\n+    } else {\n+      selector = '//input[@id=\"show-institution-no\"]';\n+    }\n+    const radio = new RadioButton(this.page);\n+    await radio.withXpath(selector);\n+    return radio;\n   }\n \n-  public async getResearchBackgroundTextarea(): Promise<ElementHandle> {\n-    const label = 'Please describe your research background, experience and research interests';\n-    return await this.puppeteerPage.waitForXPath(`//label[contains(normalize-space(.),'${label}')]/parent::*//textarea`)\n+  async getResearchBackgroundTextarea(): Promise<Textarea> {\n+    const textarea = new Textarea(this.page);\n+    await textarea.withLabel({normalizeSpace: FIELD_LABEL.RESEARCH_BACKGROUND});\n+    return textarea;\n   }\n \n-  public async getUsernameDomain(): Promise<unknown> {\n-    const elem = await this.puppeteerPage.waitForXPath('//*[input[@id=\"username\"]]/i');\n+  async getUsernameDomain(): Promise<unknown> {\n+    const elem = await this.page.waitForXPath('//*[input[@id=\"username\"]]/i');\n     return await (await elem.getProperty('innerText')).jsonValue();\n   }\n \n-  public async fillInFormFields(fields: Array<{ label: string; value: string; }>): Promise<string> {\n+  async fillInFormFields(fields: { label: string; value: string; }[]): Promise<string> {\n     let newUserName;\n-\n-    function formFieldXpathHelper(aLabel: string): string {\n-      return `//label[contains(normalize-space(.),'${aLabel}')]/parent::*//input[@type='text']`;\n-    }\n-\n     for (const field of fields) {\n-      const selector = formFieldXpathHelper(field.label);\n-      const e = await this.puppeteerPage.waitForXPath(selector, {visible: true});\n-      await e.focus();\n-      await e.type(field.value);\n-      await e.press('Tab', { delay: 100 }); // tab out\n+      const textbox = new Textbox(this.page);\n+      await textbox.withLabel({text: field.label});\n+      await textbox.type(field.value);\n+      await textbox.pressKeyboard('Tab', { delay: 100 });\n       if (field.label === 'New Username') {\n-        await this.puppeteerPage.waitForSelector('clr-icon.is-solid[shape=\"success-standard\"]', {visible: true});\n-        newUserName = field.value;\n+        await new ClrIconLink(this.page).withLabel('New Username', 'success-standard');\n+        newUserName = field.value; // store new username for return\n       }\n     }\n     return newUserName;\n   }\n \n   // select Institution Affiliation from a dropdown\n-  public async selectInstitution(selectTextValue: string) {\n-    const dropdown = new DropdownSelect(this.puppeteerPage);\n+  async selectInstitution(selectTextValue: string) {\n+    const dropdown = new SelectComponent(this.page);\n     await dropdown.select(selectTextValue);\n   }\n \n-  public async getInstitutionValue() {\n-    const dropdown = new DropdownSelect(this.puppeteerPage);\n-    return await dropdown.displayedValue();\n+  async getInstitutionValue() {\n+    const dropdown = new SelectComponent(this.page);\n+    return await dropdown.getSelectedValue();\n   }\n \n-  // select Institution Affiliation from a dropdown\n-  public async selectEducationLevel(selectTextValue: string) {\n-    const dropdown = new DropdownSelect(this.puppeteerPage, 'Highest Level of Education Completed');\n+  // select Education Level from a dropdown\n+  async selectEducationLevel(selectTextValue: string) {\n+    const dropdown = new SelectComponent(this.page, FIELD_LABEL.EDUCATION_LEVEL);\n     await dropdown.select(selectTextValue);\n   }\n \n   // select Year of Birth from a dropdown\n-  public async selectYearOfBirth(year: string) {\n-    const dropdown = new DropdownSelect(this.puppeteerPage, 'Year of Birth');\n+  async selectYearOfBirth(year: string) {\n+    const dropdown = new SelectComponent(this.page, FIELD_LABEL.YEAR_OF_BIRTH);\n     await dropdown.select(year);\n   }\n \n   // Combined steps to make test code cleaner and shorter\n \n   // Step 1: Enter Invitation key\n-  public async fillOutInvitationKey(invitationKey: string) {\n+  async fillOutInvitationKey(invitationKey: string) {\n     await this.getInvitationKeyInput()\n     .then(invitationKeyInput => invitationKeyInput.type(invitationKey))\n     .then(() => this.getNextButton())\n     .then(submitButton => submitButton.click());\n   }\n \n   // Step 2: Accepting Terms of Use and Privacy statement.\n-  public async acceptTermsOfUseAgreement() {\n-    const privacyStatementCheckbox = await this.getPrivacyStatementCheckbox();\n-    const termsOfUseCheckbox = await this.getTermsOfUseCheckbox();\n-    const nextButton = await this.getNextButton();\n+  async acceptTermsOfUseAgreement() {\n+    await this.getPrivacyStatementCheckbox();\n+    await this.getTermsOfUseCheckbox();\n+    await this.getNextButton();\n \n     await this.scrollToLastPdfPage();\n \n     // check by click on label works\n-    await (await this.getPrivacyStatementLabel()).click();\n-    await (await this.getTermsOfUseLabel()).click();\n-\n-    // TODO uncomment after bug fixed https://precisionmedicineinitiative.atlassian.net/browse/RW-4487\n-    // uncheck a checkbox to ensure NEXT button becomes disabled\n-    // await page.evaluate(e => e.click(), await createAccountPage.getTermsOfUseLabel());\n-    // back to check on\n-    // await page.evaluate(e => e.click(), await createAccountPage.getTermsOfUseLabel());\n+    await (await this.getPrivacyStatementCheckbox()).check();\n+    await (await this.getTermsOfUseCheckbox()).check();\n   }\n \n   // Step 3: Enter user default information\n-  public async fillOutUserInformation() {\n-    const newUserName = await this.fillInFormFields(registrationFields.inputFieldsValues);\n+  async fillOutUserInformation() {\n+    const newUserName = await this.fillInFormFields(defaultFieldValues);\n     await (await this.getResearchBackgroundTextarea()).type(faker.lorem.word());\n+    // a different dropdown selection depending on Yes or No radiobutton was selected\n+    await (await this.areYouAffiliatedRadioButton(true)).click();\n     await (await this.getInstitutionNameInput()).type(faker.company.companyName());\n-    await this.selectInstitution(registrationFields.institutionAffiliation.EARLY_CAREER_TENURE_TRACK_RESEARCHER);\n-    await this.puppeteerPage.waitFor(1000);\n+    await this.selectInstitution(INSTITUTION_AFFILIATION.EARLY_CAREER_TENURE_TRACK_RESEARCHER);\n+    await this.page.waitFor(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2MTQxNw=="}, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 281}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTAyODAyOnYy", "diffSide": "RIGHT", "path": "e2e/app/aou-elements/xpath-finder.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzowOToyNFrOF0kIWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMTowNToxMVrOF0mGmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2MjIzNA==", "bodyText": "Per prior comment - this seems arbitrary, please add a comment explaining why this would default to 2", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390662234", "createdAt": "2020-03-10T23:09:24Z", "author": {"login": "calbach"}, "path": "e2e/app/aou-elements/xpath-finder.ts", "diffHunk": "@@ -0,0 +1,114 @@\n+import {ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import TextOptions from './text-options';\n+import * as xpathDefaults from './xpath-defaults';\n+\n+/**\n+ * Find a LINK or BUTTON element with a specified label.\n+ * @param {string} label\n+ */\n+export async function findClickable(page: Page, label: string, options?: WaitForSelectorOptions): Promise<ElementHandle> {\n+  const selector = xpathDefaults.clickableXpath(label);\n+  return page.waitForXPath(selector, options);\n+}\n+\n+/**\n+ * Find SELECT element with a specified label.\n+ * @param {string} label\n+ */\n+export async function findSelect(page: Page, textOptions: TextOptions, waitOptions?: WaitForSelectorOptions): Promise<ElementHandle> {\n+  if (textOptions.ancestorNodeLevel === undefined) {\n+    textOptions.ancestorNodeLevel = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NDU1NQ==", "bodyText": "\ud83d\udc4d I added comment. 2 is chosen because it is the majority of cases.\n// ancestor node level is used to find the closest common parent for the label element and input element.\n// For most cases, closest parent element is two level up from label. Thus for the default value 2.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390694555", "createdAt": "2020-03-11T01:05:11Z", "author": {"login": "aweng98"}, "path": "e2e/app/aou-elements/xpath-finder.ts", "diffHunk": "@@ -0,0 +1,114 @@\n+import {ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import TextOptions from './text-options';\n+import * as xpathDefaults from './xpath-defaults';\n+\n+/**\n+ * Find a LINK or BUTTON element with a specified label.\n+ * @param {string} label\n+ */\n+export async function findClickable(page: Page, label: string, options?: WaitForSelectorOptions): Promise<ElementHandle> {\n+  const selector = xpathDefaults.clickableXpath(label);\n+  return page.waitForXPath(selector, options);\n+}\n+\n+/**\n+ * Find SELECT element with a specified label.\n+ * @param {string} label\n+ */\n+export async function findSelect(page: Page, textOptions: TextOptions, waitOptions?: WaitForSelectorOptions): Promise<ElementHandle> {\n+  if (textOptions.ancestorNodeLevel === undefined) {\n+    textOptions.ancestorNodeLevel = 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2MjIzNA=="}, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTAzMTUzOnYy", "diffSide": "RIGHT", "path": "e2e/app/aou-elements/xpath-defaults.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzoxMTowMVrOF0kKdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMTowNToyOVrOF0mG2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2Mjc3NQ==", "bodyText": "nit: this local var isn't really needed, you could just return directly inline", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390662775", "createdAt": "2020-03-10T23:11:01Z", "author": {"login": "calbach"}, "path": "e2e/app/aou-elements/xpath-defaults.ts", "diffHunk": "@@ -0,0 +1,70 @@\n+import TextOptions from './text-options';\n+\n+function textXpathHelper(opts: TextOptions) {\n+  let txt;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NDYxNw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390694617", "createdAt": "2020-03-11T01:05:29Z", "author": {"login": "aweng98"}, "path": "e2e/app/aou-elements/xpath-defaults.ts", "diffHunk": "@@ -0,0 +1,70 @@\n+import TextOptions from './text-options';\n+\n+function textXpathHelper(opts: TextOptions) {\n+  let txt;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2Mjc3NQ=="}, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTAzMTc1OnYy", "diffSide": "RIGHT", "path": "e2e/app/aou-elements/xpath-defaults.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzoxMTowN1rOF0kKmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNTo0ODoyMVrOF0p7Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2MjgwOA==", "bodyText": "nit: else throw an error?", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390662808", "createdAt": "2020-03-10T23:11:07Z", "author": {"login": "calbach"}, "path": "e2e/app/aou-elements/xpath-defaults.ts", "diffHunk": "@@ -0,0 +1,70 @@\n+import TextOptions from './text-options';\n+\n+function textXpathHelper(opts: TextOptions) {\n+  let txt;\n+  if (opts.text) {\n+    txt = `text()=\"${opts.text}\" or @aria-label=\"${opts.text}\" or @placeholder=\"${opts.text}\"`;\n+  } else if (opts.textContains) {\n+    txt = `contains(text(),\"${opts.textContains}\") or contains(@aria-label,\"${opts.textContains}\") or contains(@placeholder,\"${opts.textContains}\")`;\n+  } else if (opts.normalizeSpace) {\n+    txt = `contains(normalize-space(), \"${opts.normalizeSpace}\")`;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NDU4MA==", "bodyText": "not needed because textOptions are predefined, use un-predefined string leads to compile error.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390694580", "createdAt": "2020-03-11T01:05:21Z", "author": {"login": "aweng98"}, "path": "e2e/app/aou-elements/xpath-defaults.ts", "diffHunk": "@@ -0,0 +1,70 @@\n+import TextOptions from './text-options';\n+\n+function textXpathHelper(opts: TextOptions) {\n+  let txt;\n+  if (opts.text) {\n+    txt = `text()=\"${opts.text}\" or @aria-label=\"${opts.text}\" or @placeholder=\"${opts.text}\"`;\n+  } else if (opts.textContains) {\n+    txt = `contains(text(),\"${opts.textContains}\") or contains(@aria-label,\"${opts.textContains}\") or contains(@placeholder,\"${opts.textContains}\")`;\n+  } else if (opts.normalizeSpace) {\n+    txt = `contains(normalize-space(), \"${opts.normalizeSpace}\")`;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2MjgwOA=="}, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc1NzEzOQ==", "bodyText": "I don't totally follow what you're saying, but I don't think this is correct. Clearly I could pass an empty TextOptions here. The compiler would not fail.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390757139", "createdAt": "2020-03-11T05:48:21Z", "author": {"login": "calbach"}, "path": "e2e/app/aou-elements/xpath-defaults.ts", "diffHunk": "@@ -0,0 +1,70 @@\n+import TextOptions from './text-options';\n+\n+function textXpathHelper(opts: TextOptions) {\n+  let txt;\n+  if (opts.text) {\n+    txt = `text()=\"${opts.text}\" or @aria-label=\"${opts.text}\" or @placeholder=\"${opts.text}\"`;\n+  } else if (opts.textContains) {\n+    txt = `contains(text(),\"${opts.textContains}\") or contains(@aria-label,\"${opts.textContains}\") or contains(@placeholder,\"${opts.textContains}\")`;\n+  } else if (opts.normalizeSpace) {\n+    txt = `contains(normalize-space(), \"${opts.normalizeSpace}\")`;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2MjgwOA=="}, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTAzNDk5OnYy", "diffSide": "RIGHT", "path": "e2e/app/aou-elements/select-component.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzoxMjoxN1rOF0kMew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMTowODo1M1rOF0mJ8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2MzI5MQ==", "bodyText": "nit: local var doesn't really do anything, just return?", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390663291", "createdAt": "2020-03-10T23:12:17Z", "author": {"login": "calbach"}, "path": "e2e/app/aou-elements/select-component.ts", "diffHunk": "@@ -0,0 +1,69 @@\n+import {Page} from 'puppeteer';\n+\n+export default class SelectComponent {\n+\n+  private readonly page: Page;\n+  private readonly name: string;\n+\n+  constructor(page: Page, name?: string) {\n+    this.page = page;\n+    this.name = name || undefined;\n+  }\n+\n+  async select(textValue: string) {\n+    await this.open(2);\n+    const selector = this.componentXpath() + `//li[@class='p-dropdown-item'][normalize-space(.)=\"${textValue}\"]`;\n+    const selectValue = await this.page.waitForXPath(selector, { visible: true });\n+    await selectValue.click();\n+  }\n+\n+  async getSelectedValue(): Promise<unknown> {\n+    const selector = this.componentXpath() + '/label';\n+    const displayedValue = await this.page.waitForXPath(selector, { visible: true });\n+    const jValue = await (await displayedValue.getProperty('innerText')).jsonValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NTQwOA==", "bodyText": "removed. made two lines of code to make clear.\nconst innerText = await displayedValue.getProperty('innerText');\nreturn await innerText.jsonValue();", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390695408", "createdAt": "2020-03-11T01:08:53Z", "author": {"login": "aweng98"}, "path": "e2e/app/aou-elements/select-component.ts", "diffHunk": "@@ -0,0 +1,69 @@\n+import {Page} from 'puppeteer';\n+\n+export default class SelectComponent {\n+\n+  private readonly page: Page;\n+  private readonly name: string;\n+\n+  constructor(page: Page, name?: string) {\n+    this.page = page;\n+    this.name = name || undefined;\n+  }\n+\n+  async select(textValue: string) {\n+    await this.open(2);\n+    const selector = this.componentXpath() + `//li[@class='p-dropdown-item'][normalize-space(.)=\"${textValue}\"]`;\n+    const selectValue = await this.page.waitForXPath(selector, { visible: true });\n+    await selectValue.click();\n+  }\n+\n+  async getSelectedValue(): Promise<unknown> {\n+    const selector = this.componentXpath() + '/label';\n+    const displayedValue = await this.page.waitForXPath(selector, { visible: true });\n+    const jValue = await (await displayedValue.getProperty('innerText')).jsonValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2MzI5MQ=="}, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTAzODU3OnYy", "diffSide": "RIGHT", "path": "e2e/app/aou-elements/select-component.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzoxMzo1M1rOF0kOpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMTowOTowNVrOF0mKHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2Mzg0NA==", "bodyText": "Typescript constructors can be written like this:\nconstructor(\n  private readonly page: Page,\n  private readonly name?: string) {}\n\nThen you can also remove the above type declarataions as well", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390663844", "createdAt": "2020-03-10T23:13:53Z", "author": {"login": "calbach"}, "path": "e2e/app/aou-elements/select-component.ts", "diffHunk": "@@ -0,0 +1,69 @@\n+import {Page} from 'puppeteer';\n+\n+export default class SelectComponent {\n+\n+  private readonly page: Page;\n+  private readonly name: string;\n+\n+  constructor(page: Page, name?: string) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NTQ1NA==", "bodyText": "cool!", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390695454", "createdAt": "2020-03-11T01:09:05Z", "author": {"login": "aweng98"}, "path": "e2e/app/aou-elements/select-component.ts", "diffHunk": "@@ -0,0 +1,69 @@\n+import {Page} from 'puppeteer';\n+\n+export default class SelectComponent {\n+\n+  private readonly page: Page;\n+  private readonly name: string;\n+\n+  constructor(page: Page, name?: string) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2Mzg0NA=="}, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTA0MjU2OnYy", "diffSide": "RIGHT", "path": "e2e/app/aou-elements/select-component.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzoxNTozOVrOF0kRBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMTowNjoyMFrOF0mHnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2NDQ1NA==", "bodyText": "nit: --?", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390664454", "createdAt": "2020-03-10T23:15:39Z", "author": {"login": "calbach"}, "path": "e2e/app/aou-elements/select-component.ts", "diffHunk": "@@ -0,0 +1,69 @@\n+import {Page} from 'puppeteer';\n+\n+export default class SelectComponent {\n+\n+  private readonly page: Page;\n+  private readonly name: string;\n+\n+  constructor(page: Page, name?: string) {\n+    this.page = page;\n+    this.name = name || undefined;\n+  }\n+\n+  async select(textValue: string) {\n+    await this.open(2);\n+    const selector = this.componentXpath() + `//li[@class='p-dropdown-item'][normalize-space(.)=\"${textValue}\"]`;\n+    const selectValue = await this.page.waitForXPath(selector, { visible: true });\n+    await selectValue.click();\n+  }\n+\n+  async getSelectedValue(): Promise<unknown> {\n+    const selector = this.componentXpath() + '/label';\n+    const displayedValue = await this.page.waitForXPath(selector, { visible: true });\n+    const jValue = await (await displayedValue.getProperty('innerText')).jsonValue();\n+    return jValue;\n+  }\n+\n+  // open Select dropdown with retries\n+  async open(retries: number): Promise<void> {\n+    const click = async () => {\n+      const is = await this.isOpen();\n+      if (!is) {\n+        await this.toggleOpenClose();\n+      } else {\n+        return;\n+      }\n+      if (retries < 0) {\n+        return;\n+      }\n+      retries -= 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NDgxMw==", "bodyText": "sure", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390694813", "createdAt": "2020-03-11T01:06:20Z", "author": {"login": "aweng98"}, "path": "e2e/app/aou-elements/select-component.ts", "diffHunk": "@@ -0,0 +1,69 @@\n+import {Page} from 'puppeteer';\n+\n+export default class SelectComponent {\n+\n+  private readonly page: Page;\n+  private readonly name: string;\n+\n+  constructor(page: Page, name?: string) {\n+    this.page = page;\n+    this.name = name || undefined;\n+  }\n+\n+  async select(textValue: string) {\n+    await this.open(2);\n+    const selector = this.componentXpath() + `//li[@class='p-dropdown-item'][normalize-space(.)=\"${textValue}\"]`;\n+    const selectValue = await this.page.waitForXPath(selector, { visible: true });\n+    await selectValue.click();\n+  }\n+\n+  async getSelectedValue(): Promise<unknown> {\n+    const selector = this.componentXpath() + '/label';\n+    const displayedValue = await this.page.waitForXPath(selector, { visible: true });\n+    const jValue = await (await displayedValue.getProperty('innerText')).jsonValue();\n+    return jValue;\n+  }\n+\n+  // open Select dropdown with retries\n+  async open(retries: number): Promise<void> {\n+    const click = async () => {\n+      const is = await this.isOpen();\n+      if (!is) {\n+        await this.toggleOpenClose();\n+      } else {\n+        return;\n+      }\n+      if (retries < 0) {\n+        return;\n+      }\n+      retries -= 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2NDQ1NA=="}, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTA1MTI4OnYy", "diffSide": "RIGHT", "path": "e2e/app/aou-elements/link.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzoxODo1MFrOF0kV-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMTozODoxM1rOF0mj9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2NTcyMg==", "bodyText": "nit: can use a param default above instead:\n... , throwErr = true) ... {", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390665722", "createdAt": "2020-03-10T23:18:50Z", "author": {"login": "calbach"}, "path": "e2e/app/aou-elements/link.ts", "diffHunk": "@@ -0,0 +1,26 @@\n+import {ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import BaseElement from './base-element';\n+import {findClickable} from './xpath-finder';\n+\n+export default class Link extends BaseElement {\n+\n+  constructor(aPage: Page) {\n+    super(aPage);\n+  }\n+   \n+  async withLabel(aElementName: string, options?: WaitForSelectorOptions, throwErr?: boolean): Promise<ElementHandle> {\n+    throwErr = throwErr || true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcwMjA3MA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390702070", "createdAt": "2020-03-11T01:38:13Z", "author": {"login": "aweng98"}, "path": "e2e/app/aou-elements/link.ts", "diffHunk": "@@ -0,0 +1,26 @@\n+import {ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import BaseElement from './base-element';\n+import {findClickable} from './xpath-finder';\n+\n+export default class Link extends BaseElement {\n+\n+  constructor(aPage: Page) {\n+    super(aPage);\n+  }\n+   \n+  async withLabel(aElementName: string, options?: WaitForSelectorOptions, throwErr?: boolean): Promise<ElementHandle> {\n+    throwErr = throwErr || true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2NTcyMg=="}, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTA1Njc5OnYy", "diffSide": "RIGHT", "path": "e2e/app/aou-elements/textarea.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzoyMTowN1rOF0kZRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNTo0NTozMFrOF0p4ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2NjU2Ng==", "bodyText": "I'm confused by the pattern here. Is there a reason we want to allow someone to create a Textarea instance before connecting it to an actual element? i.e. should this be a static helper and this.element be a required constructor param?", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390666566", "createdAt": "2020-03-10T23:21:07Z", "author": {"login": "calbach"}, "path": "e2e/app/aou-elements/textarea.ts", "diffHunk": "@@ -0,0 +1,26 @@\n+import {ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import TextOptions from './text-options';\n+import BaseElement from './base-element';\n+import {findTextarea} from './xpath-finder';\n+\n+export default class Textarea extends BaseElement {\n+\n+  constructor(aPage: Page) {\n+    super(aPage);\n+  }\n+   \n+  async withLabel(textOptions: TextOptions, waitOptions?: WaitForSelectorOptions, throwErr?: boolean): Promise<ElementHandle> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcwMzkwMA==", "bodyText": "let textarea = new Textarea(this.page);\nconst element1 = await textarea.withLabel({normalizeSpace: FIELD_LABEL.SCIENTIFIC_APPROACHES});\n\nIn same block or function scope,  can reuse variable name textarea without creating a new instance.\n\nconst element2 = await textarea.withLabel({normalizeSpace: FIELD_LABEL.ANTICIPATED_FINDINGS});", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390703900", "createdAt": "2020-03-11T01:45:59Z", "author": {"login": "aweng98"}, "path": "e2e/app/aou-elements/textarea.ts", "diffHunk": "@@ -0,0 +1,26 @@\n+import {ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import TextOptions from './text-options';\n+import BaseElement from './base-element';\n+import {findTextarea} from './xpath-finder';\n+\n+export default class Textarea extends BaseElement {\n+\n+  constructor(aPage: Page) {\n+    super(aPage);\n+  }\n+   \n+  async withLabel(textOptions: TextOptions, waitOptions?: WaitForSelectorOptions, throwErr?: boolean): Promise<ElementHandle> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2NjU2Ng=="}, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc1NjUxNQ==", "bodyText": "I don't think reusing the variable is helping with readability at all. This seems clearer to me:\nconst element1 = await TextArea.forLabel(this,page, {{normalizeSpace: FIELD_LABEL.SCIENTIFIC_APPROACHES});\nconst element2 = await TextArea.forLabel(this,page, {{normalizeSpace: FIELD_LABEL.ANTICIPATED_FINDINGS});", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390756515", "createdAt": "2020-03-11T05:45:30Z", "author": {"login": "calbach"}, "path": "e2e/app/aou-elements/textarea.ts", "diffHunk": "@@ -0,0 +1,26 @@\n+import {ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import TextOptions from './text-options';\n+import BaseElement from './base-element';\n+import {findTextarea} from './xpath-finder';\n+\n+export default class Textarea extends BaseElement {\n+\n+  constructor(aPage: Page) {\n+    super(aPage);\n+  }\n+   \n+  async withLabel(textOptions: TextOptions, waitOptions?: WaitForSelectorOptions, throwErr?: boolean): Promise<ElementHandle> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2NjU2Ng=="}, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTA2MTgxOnYy", "diffSide": "RIGHT", "path": "e2e/app/aou-elements/base-element.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzoyMzozM1rOF0kcUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMToyNTozMlrOF0mY5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2NzM0NQ==", "bodyText": "opt_nit: In general I would not recommend 1-line if statements AND brackets. I'd do one or the other (usually in the codebase we use:\n if (...) {\n ...\n}", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390667345", "createdAt": "2020-03-10T23:23:33Z", "author": {"login": "calbach"}, "path": "e2e/app/aou-elements/base-element.ts", "diffHunk": "@@ -0,0 +1,229 @@\n+import {ClickOptions, ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import {BaseElementInterface} from './base-element-interface';\n+\n+/**\n+ * BaseElement represents a web element in the DOM.\n+ * It implements useful methods for querying and interacting with this element.\n+ */\n+export default class BaseElement implements BaseElementInterface {\n+\n+  static asBaseElement(page: Page, elem: ElementHandle): BaseElement {\n+    return new BaseElement(page, elem);\n+  }\n+\n+  protected readonly page: Page;\n+  protected css: string;\n+  protected xpath: string;\n+  protected element: ElementHandle;\n+\n+  constructor(aPage: Page, aElement?: ElementHandle) {\n+    this.page = aPage;\n+    this.element = aElement || undefined;\n+  }\n+\n+  async withCss(cssSelector: string, options?: WaitForSelectorOptions): Promise<ElementHandle> {\n+    this.css = cssSelector;\n+    this.element = await this.page.waitForSelector(this.css, options);\n+    return this.element;\n+  }\n+\n+  async withXpath(xpathSelector: string, options?: WaitForSelectorOptions): Promise<ElementHandle> {\n+    this.xpath = xpathSelector;\n+    this.element = await this.page.waitForXPath(this.xpath, options);\n+    return this.element;\n+  }\n+\n+   /**\n+    * Find first element without wait for.\n+    */\n+  async findByCss(cssSelector: string,): Promise<ElementHandle | null> {\n+    this.css = cssSelector;\n+    this.element = await this.page.$(this.css);\n+    return this.element;\n+  }\n+\n+   /**\n+    * Find first element without wait for.\n+    */\n+  async findByXpath(xpathSelector: string): Promise<ElementHandle | null> {\n+    this.xpath = xpathSelector;\n+    const found = await this.page.$x(this.xpath);\n+    if (found.length > 0) {\n+      this.element = found[0];\n+    } else {\n+      this.element = null;\n+    }\n+    return this.element;\n+  }\n+\n+  /**\n+   * Finds the value of a property for this element.\n+   *\n+   * Alternative:\n+   *  const handle = await page.evaluateHandle((elem, prop) => {\n+   *    return elem[prop];\n+   *  }, element, property);\n+   *  return await handle.jsonValue();\n+   */\n+  async getProperty(propertyName: string): Promise<unknown> {\n+    if (this.element == null) { throw new Error('The element is undefined.'); }\n+    const p = await this.element.asElement().getProperty(propertyName);\n+    return await p.jsonValue();\n+  }\n+\n+  /**\n+   * Finds the value of an attribute\n+   * @param attribute name\n+   */\n+  async getAttribute(attributeName: string): Promise<string | null> {\n+    if (this.element == null) { throw new Error('The element is undefined.'); }\n+    const elem = this.element.asElement();\n+    const attributeValue = await this.page.evaluate(\n+       (link, attr) => link.getAttribute(attr), elem, attributeName);\n+    return attributeValue;\n+  }\n+\n+  /*\n+  const handle = await page.evaluateHandle((elem, attr) => {\n+    return elem.getAttribute(attr);\n+  }, element, attribute);\n+  return await handle.jsonValue();\n+   */\n+\n+  /**\n+   * Does attribute exists for this element?\n+   *\n+   * @param attribute name\n+   */\n+  async hasAttribute(attributeName: string): Promise<boolean> {\n+    if (this.element == null) { throw new Error('The element is undefined.'); }\n+    const value = await this.getAttribute(attributeName);\n+    return value !== null;\n+  }\n+\n+  /**\n+   * Is element disabled or readonly?\n+   * Disabled means element has `disabled` attribute.\n+   */\n+  async isDisabled(): Promise<boolean> {\n+    const disabled = await this.getProperty('disabled');\n+    return !!disabled;\n+  }\n+\n+  /**\n+   * <pre>\n+   *  Check if the element is visible\n+   * </pre>\n+   * @param {Page} page\n+   * @param {ElementHandle} element\n+   */\n+  async isVisible(): Promise<boolean> {\n+    const boxModel = await this.element.boxModel();\n+    return boxModel !== null;\n+  }\n+\n+  /**\n+   * Check both boxModel and style for visibility.\n+   */\n+  async isDisplayed() {\n+    const isVisibleHandle = await this.page.evaluateHandle((e) =>\n+    {\n+      const style = window.getComputedStyle(e);\n+      return (style && style.display !== 'none' &&\n+         style.visibility !== 'hidden' && style.opacity !== '0');\n+    }, this.element);\n+    const jValue = await isVisibleHandle.jsonValue();\n+    const boxModelValue = await this.element.boxModel();\n+    if (jValue && boxModelValue) {\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  async click(options?: ClickOptions): Promise<void> {\n+    await this.element.asElement().click(options);\n+  }\n+\n+  async type(text: string, options?: { delay: number }): Promise<void> {\n+    await this.focus();\n+    await this.element.asElement().type(text, options);\n+  }\n+\n+  async pressKeyboard(key: string, options?: { text?: string, delay?: number }): Promise<void> {\n+    await this.element.asElement().press(key, options);\n+  }\n+\n+  /**\n+   * Calling focus() and hover() together.\n+   */\n+  async focus(): Promise<void> {\n+    const handle = this.element.asElement();\n+    await Promise.all([\n+      handle.focus(),\n+      handle.hover()\n+    ]);\n+  }\n+\n+  /**\n+   * <pre>\n+   * Get the textContent property value for a element.\n+   * </pre>\n+   */\n+  async getTextContent(): Promise<string> {\n+    const handle = await this.element.asElement();\n+    return await handle.evaluate(\n+       (element: HTMLElement) => (element.textContent ? element.textContent.trim() : ''), this.element,\n+    );\n+  }\n+\n+  /**\n+   * Get the value of property 'value' for this element.\n+   * Alternative: await page.evaluate(elem => elem.value, element);\n+   */\n+  async getValue(): Promise<unknown> {\n+    return await this.getProperty('value');\n+  }\n+\n+  async getComputedStyle(styleName: string): Promise<unknown> {\n+    const handle = this.element.asElement();\n+    const attrStyle = await handle.evaluateHandle((e) => {\n+      const style = window.getComputedStyle(e);\n+      return style;\n+    }, this.element);\n+\n+    return (await attrStyle.getProperty(styleName)).jsonValue()\n+  }\n+\n+  /**\n+   * Determine if cursor is disabled (= not-allowed) by checking style attribute 'cursor'.\n+   */\n+  async isCursorNotAllowed(): Promise<boolean> {\n+    const cursor = await this.getComputedStyle('cursor');\n+    return cursor === 'not-allowed';\n+  }\n+\n+  /**\n+   * Finds element's size.\n+   */\n+  async size(): Promise<{ width: number; height: number }> {\n+    const box = await this.element.boundingBox();\n+    if (!box) { return { width: 0, height: 0 }; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5OTIzNw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390699237", "createdAt": "2020-03-11T01:25:32Z", "author": {"login": "aweng98"}, "path": "e2e/app/aou-elements/base-element.ts", "diffHunk": "@@ -0,0 +1,229 @@\n+import {ClickOptions, ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import {BaseElementInterface} from './base-element-interface';\n+\n+/**\n+ * BaseElement represents a web element in the DOM.\n+ * It implements useful methods for querying and interacting with this element.\n+ */\n+export default class BaseElement implements BaseElementInterface {\n+\n+  static asBaseElement(page: Page, elem: ElementHandle): BaseElement {\n+    return new BaseElement(page, elem);\n+  }\n+\n+  protected readonly page: Page;\n+  protected css: string;\n+  protected xpath: string;\n+  protected element: ElementHandle;\n+\n+  constructor(aPage: Page, aElement?: ElementHandle) {\n+    this.page = aPage;\n+    this.element = aElement || undefined;\n+  }\n+\n+  async withCss(cssSelector: string, options?: WaitForSelectorOptions): Promise<ElementHandle> {\n+    this.css = cssSelector;\n+    this.element = await this.page.waitForSelector(this.css, options);\n+    return this.element;\n+  }\n+\n+  async withXpath(xpathSelector: string, options?: WaitForSelectorOptions): Promise<ElementHandle> {\n+    this.xpath = xpathSelector;\n+    this.element = await this.page.waitForXPath(this.xpath, options);\n+    return this.element;\n+  }\n+\n+   /**\n+    * Find first element without wait for.\n+    */\n+  async findByCss(cssSelector: string,): Promise<ElementHandle | null> {\n+    this.css = cssSelector;\n+    this.element = await this.page.$(this.css);\n+    return this.element;\n+  }\n+\n+   /**\n+    * Find first element without wait for.\n+    */\n+  async findByXpath(xpathSelector: string): Promise<ElementHandle | null> {\n+    this.xpath = xpathSelector;\n+    const found = await this.page.$x(this.xpath);\n+    if (found.length > 0) {\n+      this.element = found[0];\n+    } else {\n+      this.element = null;\n+    }\n+    return this.element;\n+  }\n+\n+  /**\n+   * Finds the value of a property for this element.\n+   *\n+   * Alternative:\n+   *  const handle = await page.evaluateHandle((elem, prop) => {\n+   *    return elem[prop];\n+   *  }, element, property);\n+   *  return await handle.jsonValue();\n+   */\n+  async getProperty(propertyName: string): Promise<unknown> {\n+    if (this.element == null) { throw new Error('The element is undefined.'); }\n+    const p = await this.element.asElement().getProperty(propertyName);\n+    return await p.jsonValue();\n+  }\n+\n+  /**\n+   * Finds the value of an attribute\n+   * @param attribute name\n+   */\n+  async getAttribute(attributeName: string): Promise<string | null> {\n+    if (this.element == null) { throw new Error('The element is undefined.'); }\n+    const elem = this.element.asElement();\n+    const attributeValue = await this.page.evaluate(\n+       (link, attr) => link.getAttribute(attr), elem, attributeName);\n+    return attributeValue;\n+  }\n+\n+  /*\n+  const handle = await page.evaluateHandle((elem, attr) => {\n+    return elem.getAttribute(attr);\n+  }, element, attribute);\n+  return await handle.jsonValue();\n+   */\n+\n+  /**\n+   * Does attribute exists for this element?\n+   *\n+   * @param attribute name\n+   */\n+  async hasAttribute(attributeName: string): Promise<boolean> {\n+    if (this.element == null) { throw new Error('The element is undefined.'); }\n+    const value = await this.getAttribute(attributeName);\n+    return value !== null;\n+  }\n+\n+  /**\n+   * Is element disabled or readonly?\n+   * Disabled means element has `disabled` attribute.\n+   */\n+  async isDisabled(): Promise<boolean> {\n+    const disabled = await this.getProperty('disabled');\n+    return !!disabled;\n+  }\n+\n+  /**\n+   * <pre>\n+   *  Check if the element is visible\n+   * </pre>\n+   * @param {Page} page\n+   * @param {ElementHandle} element\n+   */\n+  async isVisible(): Promise<boolean> {\n+    const boxModel = await this.element.boxModel();\n+    return boxModel !== null;\n+  }\n+\n+  /**\n+   * Check both boxModel and style for visibility.\n+   */\n+  async isDisplayed() {\n+    const isVisibleHandle = await this.page.evaluateHandle((e) =>\n+    {\n+      const style = window.getComputedStyle(e);\n+      return (style && style.display !== 'none' &&\n+         style.visibility !== 'hidden' && style.opacity !== '0');\n+    }, this.element);\n+    const jValue = await isVisibleHandle.jsonValue();\n+    const boxModelValue = await this.element.boxModel();\n+    if (jValue && boxModelValue) {\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  async click(options?: ClickOptions): Promise<void> {\n+    await this.element.asElement().click(options);\n+  }\n+\n+  async type(text: string, options?: { delay: number }): Promise<void> {\n+    await this.focus();\n+    await this.element.asElement().type(text, options);\n+  }\n+\n+  async pressKeyboard(key: string, options?: { text?: string, delay?: number }): Promise<void> {\n+    await this.element.asElement().press(key, options);\n+  }\n+\n+  /**\n+   * Calling focus() and hover() together.\n+   */\n+  async focus(): Promise<void> {\n+    const handle = this.element.asElement();\n+    await Promise.all([\n+      handle.focus(),\n+      handle.hover()\n+    ]);\n+  }\n+\n+  /**\n+   * <pre>\n+   * Get the textContent property value for a element.\n+   * </pre>\n+   */\n+  async getTextContent(): Promise<string> {\n+    const handle = await this.element.asElement();\n+    return await handle.evaluate(\n+       (element: HTMLElement) => (element.textContent ? element.textContent.trim() : ''), this.element,\n+    );\n+  }\n+\n+  /**\n+   * Get the value of property 'value' for this element.\n+   * Alternative: await page.evaluate(elem => elem.value, element);\n+   */\n+  async getValue(): Promise<unknown> {\n+    return await this.getProperty('value');\n+  }\n+\n+  async getComputedStyle(styleName: string): Promise<unknown> {\n+    const handle = this.element.asElement();\n+    const attrStyle = await handle.evaluateHandle((e) => {\n+      const style = window.getComputedStyle(e);\n+      return style;\n+    }, this.element);\n+\n+    return (await attrStyle.getProperty(styleName)).jsonValue()\n+  }\n+\n+  /**\n+   * Determine if cursor is disabled (= not-allowed) by checking style attribute 'cursor'.\n+   */\n+  async isCursorNotAllowed(): Promise<boolean> {\n+    const cursor = await this.getComputedStyle('cursor');\n+    return cursor === 'not-allowed';\n+  }\n+\n+  /**\n+   * Finds element's size.\n+   */\n+  async size(): Promise<{ width: number; height: number }> {\n+    const box = await this.element.boundingBox();\n+    if (!box) { return { width: 0, height: 0 }; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2NzM0NQ=="}, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTA2Mjk5OnYy", "diffSide": "RIGHT", "path": "e2e/app/aou-elements/base-element.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzoyMzo1NFrOF0kc6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMToyMTo1MFrOF0mVpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2NzQ5OQ==", "bodyText": "Please remove commented out code", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390667499", "createdAt": "2020-03-10T23:23:54Z", "author": {"login": "calbach"}, "path": "e2e/app/aou-elements/base-element.ts", "diffHunk": "@@ -0,0 +1,229 @@\n+import {ClickOptions, ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import {BaseElementInterface} from './base-element-interface';\n+\n+/**\n+ * BaseElement represents a web element in the DOM.\n+ * It implements useful methods for querying and interacting with this element.\n+ */\n+export default class BaseElement implements BaseElementInterface {\n+\n+  static asBaseElement(page: Page, elem: ElementHandle): BaseElement {\n+    return new BaseElement(page, elem);\n+  }\n+\n+  protected readonly page: Page;\n+  protected css: string;\n+  protected xpath: string;\n+  protected element: ElementHandle;\n+\n+  constructor(aPage: Page, aElement?: ElementHandle) {\n+    this.page = aPage;\n+    this.element = aElement || undefined;\n+  }\n+\n+  async withCss(cssSelector: string, options?: WaitForSelectorOptions): Promise<ElementHandle> {\n+    this.css = cssSelector;\n+    this.element = await this.page.waitForSelector(this.css, options);\n+    return this.element;\n+  }\n+\n+  async withXpath(xpathSelector: string, options?: WaitForSelectorOptions): Promise<ElementHandle> {\n+    this.xpath = xpathSelector;\n+    this.element = await this.page.waitForXPath(this.xpath, options);\n+    return this.element;\n+  }\n+\n+   /**\n+    * Find first element without wait for.\n+    */\n+  async findByCss(cssSelector: string,): Promise<ElementHandle | null> {\n+    this.css = cssSelector;\n+    this.element = await this.page.$(this.css);\n+    return this.element;\n+  }\n+\n+   /**\n+    * Find first element without wait for.\n+    */\n+  async findByXpath(xpathSelector: string): Promise<ElementHandle | null> {\n+    this.xpath = xpathSelector;\n+    const found = await this.page.$x(this.xpath);\n+    if (found.length > 0) {\n+      this.element = found[0];\n+    } else {\n+      this.element = null;\n+    }\n+    return this.element;\n+  }\n+\n+  /**\n+   * Finds the value of a property for this element.\n+   *\n+   * Alternative:\n+   *  const handle = await page.evaluateHandle((elem, prop) => {\n+   *    return elem[prop];\n+   *  }, element, property);\n+   *  return await handle.jsonValue();\n+   */\n+  async getProperty(propertyName: string): Promise<unknown> {\n+    if (this.element == null) { throw new Error('The element is undefined.'); }\n+    const p = await this.element.asElement().getProperty(propertyName);\n+    return await p.jsonValue();\n+  }\n+\n+  /**\n+   * Finds the value of an attribute\n+   * @param attribute name\n+   */\n+  async getAttribute(attributeName: string): Promise<string | null> {\n+    if (this.element == null) { throw new Error('The element is undefined.'); }\n+    const elem = this.element.asElement();\n+    const attributeValue = await this.page.evaluate(\n+       (link, attr) => link.getAttribute(attr), elem, attributeName);\n+    return attributeValue;\n+  }\n+\n+  /*\n+  const handle = await page.evaluateHandle((elem, attr) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5ODQwNQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390698405", "createdAt": "2020-03-11T01:21:50Z", "author": {"login": "aweng98"}, "path": "e2e/app/aou-elements/base-element.ts", "diffHunk": "@@ -0,0 +1,229 @@\n+import {ClickOptions, ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import {BaseElementInterface} from './base-element-interface';\n+\n+/**\n+ * BaseElement represents a web element in the DOM.\n+ * It implements useful methods for querying and interacting with this element.\n+ */\n+export default class BaseElement implements BaseElementInterface {\n+\n+  static asBaseElement(page: Page, elem: ElementHandle): BaseElement {\n+    return new BaseElement(page, elem);\n+  }\n+\n+  protected readonly page: Page;\n+  protected css: string;\n+  protected xpath: string;\n+  protected element: ElementHandle;\n+\n+  constructor(aPage: Page, aElement?: ElementHandle) {\n+    this.page = aPage;\n+    this.element = aElement || undefined;\n+  }\n+\n+  async withCss(cssSelector: string, options?: WaitForSelectorOptions): Promise<ElementHandle> {\n+    this.css = cssSelector;\n+    this.element = await this.page.waitForSelector(this.css, options);\n+    return this.element;\n+  }\n+\n+  async withXpath(xpathSelector: string, options?: WaitForSelectorOptions): Promise<ElementHandle> {\n+    this.xpath = xpathSelector;\n+    this.element = await this.page.waitForXPath(this.xpath, options);\n+    return this.element;\n+  }\n+\n+   /**\n+    * Find first element without wait for.\n+    */\n+  async findByCss(cssSelector: string,): Promise<ElementHandle | null> {\n+    this.css = cssSelector;\n+    this.element = await this.page.$(this.css);\n+    return this.element;\n+  }\n+\n+   /**\n+    * Find first element without wait for.\n+    */\n+  async findByXpath(xpathSelector: string): Promise<ElementHandle | null> {\n+    this.xpath = xpathSelector;\n+    const found = await this.page.$x(this.xpath);\n+    if (found.length > 0) {\n+      this.element = found[0];\n+    } else {\n+      this.element = null;\n+    }\n+    return this.element;\n+  }\n+\n+  /**\n+   * Finds the value of a property for this element.\n+   *\n+   * Alternative:\n+   *  const handle = await page.evaluateHandle((elem, prop) => {\n+   *    return elem[prop];\n+   *  }, element, property);\n+   *  return await handle.jsonValue();\n+   */\n+  async getProperty(propertyName: string): Promise<unknown> {\n+    if (this.element == null) { throw new Error('The element is undefined.'); }\n+    const p = await this.element.asElement().getProperty(propertyName);\n+    return await p.jsonValue();\n+  }\n+\n+  /**\n+   * Finds the value of an attribute\n+   * @param attribute name\n+   */\n+  async getAttribute(attributeName: string): Promise<string | null> {\n+    if (this.element == null) { throw new Error('The element is undefined.'); }\n+    const elem = this.element.asElement();\n+    const attributeValue = await this.page.evaluate(\n+       (link, attr) => link.getAttribute(attr), elem, attributeName);\n+    return attributeValue;\n+  }\n+\n+  /*\n+  const handle = await page.evaluateHandle((elem, attr) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2NzQ5OQ=="}, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTA2NDcxOnYy", "diffSide": "RIGHT", "path": "e2e/app/aou-elements/base-element-interface.ts", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzoyNDo0OFrOF0kd-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjo1NjozMVrOF1MD_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2Nzc3MA==", "bodyText": "Maybe I missed some discussion of this - but is there a reason to separate this interface from the base class? Will this be used independently somehow?", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390667770", "createdAt": "2020-03-10T23:24:48Z", "author": {"login": "calbach"}, "path": "e2e/app/aou-elements/base-element-interface.ts", "diffHunk": "@@ -0,0 +1,30 @@\n+import {ClickOptions, ElementHandle, WaitForSelectorOptions} from 'puppeteer';\n+\n+export interface BaseElementInterface {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5Nzk5OQ==", "bodyText": "It was created for something else which has changed, so it is used only by BaseElement for now. I kept it in case it becomes useful in future. I don't have any strong feeling about keep or remove. either works.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390697999", "createdAt": "2020-03-11T01:20:13Z", "author": {"login": "aweng98"}, "path": "e2e/app/aou-elements/base-element-interface.ts", "diffHunk": "@@ -0,0 +1,30 @@\n+import {ClickOptions, ElementHandle, WaitForSelectorOptions} from 'puppeteer';\n+\n+export interface BaseElementInterface {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2Nzc3MA=="}, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0Njc3Mw==", "bodyText": "+1, I also wrinkled my nose at this but forgot to comment. In general, \"in case it becomes useful for the future\" is a personal warning flag for https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it. Asking myself that is often a really good gut-check to make sure I'm not over-thinking something, or building functionality that will later die on the vine.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390946773", "createdAt": "2020-03-11T12:50:01Z", "author": {"login": "gjuggler"}, "path": "e2e/app/aou-elements/base-element-interface.ts", "diffHunk": "@@ -0,0 +1,30 @@\n+import {ClickOptions, ElementHandle, WaitForSelectorOptions} from 'puppeteer';\n+\n+export interface BaseElementInterface {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2Nzc3MA=="}, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNjQ3Nw==", "bodyText": "no problem. base-element-interface is removed.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r391316477", "createdAt": "2020-03-11T22:56:31Z", "author": {"login": "aweng98"}, "path": "e2e/app/aou-elements/base-element-interface.ts", "diffHunk": "@@ -0,0 +1,30 @@\n+import {ClickOptions, ElementHandle, WaitForSelectorOptions} from 'puppeteer';\n+\n+export interface BaseElementInterface {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2Nzc3MA=="}, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTA2OTU3OnYy", "diffSide": "RIGHT", "path": "e2e/tests/misc/sidenav.spec.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzoyNzowNlrOF0kg0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMTowNDoyNVrOF0mGAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2ODQ5Ng==", "bodyText": "Does this affect other test cases? Add a comment?", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390668496", "createdAt": "2020-03-10T23:27:06Z", "author": {"login": "calbach"}, "path": "e2e/tests/misc/sidenav.spec.ts", "diffHunk": "@@ -0,0 +1,107 @@\n+import Button from '../../app/aou-elements/button';\n+import {SideNavLink} from '../../app/authenticated-page';\n+import GoogleLoginPage from '../../app/google-login';\n+import ProfilePage from '../../app/profile-page';\n+import WorkspacesPage from '../../app/workspaces-page';\n+import launchBrowser from '../../driver/puppeteer-launch';\n+import {waitForExists} from '../../driver/xpath-util';\n+\n+const configs = require('../../resources/workbench-config');\n+\n+export const HELP_DESK = {\n+  ASK_QUESTION: 'Ask a question about the Researcher Workbench',\n+  REPORT_DATA_PRIVACY_CONCERN: 'Report a data privacy concern',\n+  TELL_US_ABOUT_PUBLICATION: 'Tell us about an upcoming publication',\n+  REQUEST_ADDITIONAL_BILLING_CREDITS: 'Request additional billing credits',\n+};\n+\n+jest.setTimeout(2 * 60 * 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NDQwMw==", "bodyText": "Added this comment in all .spec.ts file. As new tests are added in future in same suite, timeout should be increased.\n// set timeout globally per suite, not per test.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390694403", "createdAt": "2020-03-11T01:04:25Z", "author": {"login": "aweng98"}, "path": "e2e/tests/misc/sidenav.spec.ts", "diffHunk": "@@ -0,0 +1,107 @@\n+import Button from '../../app/aou-elements/button';\n+import {SideNavLink} from '../../app/authenticated-page';\n+import GoogleLoginPage from '../../app/google-login';\n+import ProfilePage from '../../app/profile-page';\n+import WorkspacesPage from '../../app/workspaces-page';\n+import launchBrowser from '../../driver/puppeteer-launch';\n+import {waitForExists} from '../../driver/xpath-util';\n+\n+const configs = require('../../resources/workbench-config');\n+\n+export const HELP_DESK = {\n+  ASK_QUESTION: 'Ask a question about the Researcher Workbench',\n+  REPORT_DATA_PRIVACY_CONCERN: 'Report a data privacy concern',\n+  TELL_US_ABOUT_PUBLICATION: 'Tell us about an upcoming publication',\n+  REQUEST_ADDITIONAL_BILLING_CREDITS: 'Request additional billing credits',\n+};\n+\n+jest.setTimeout(2 * 60 * 1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2ODQ5Ng=="}, "originalCommit": {"oid": "a533f572ec2ca2fea3ed8461b53a0000a82cb6cc"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg3MDM5OnYy", "diffSide": "RIGHT", "path": "e2e/app/aou-elements/base-element.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1NjoxNFrOF01shQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDo0NjowMFrOF1N9Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MDAyMQ==", "bodyText": "Just reading through more of the implementation here, I'm not convinced that css or xpath are necessary member variables. Can you convince me otherwise?\ne.g. in the 'withCss' method, you could just refer to the cssSelector argument rather than assign it to this.css. I can't find it being used by any subclasses on first glance, but maybe I'm missing somewhere else where this is used?", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390950021", "createdAt": "2020-03-11T12:56:14Z", "author": {"login": "gjuggler"}, "path": "e2e/app/aou-elements/base-element.ts", "diffHunk": "@@ -0,0 +1,231 @@\n+import {ClickOptions, ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import {BaseElementInterface} from './base-element-interface';\n+\n+/**\n+ * BaseElement represents a web element in the DOM.\n+ * It implements useful methods for querying and interacting with this element.\n+ */\n+export default class BaseElement implements BaseElementInterface {\n+\n+  static asBaseElement(page: Page, elem: ElementHandle): BaseElement {\n+    return new BaseElement(page, elem);\n+  }\n+\n+  protected readonly page: Page;\n+  protected css: string;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4b0bb8f1f1534f25f3f0aab3d7dda0e72f63205"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0NzUwMw==", "bodyText": "\ud83d\ude0f missing a method I wanted to implement. it is available now.\nasync retryFindElement(): Promise<ElementHandle | null> {\n    if (this.xpath != null) {\n      return this.findByXpath(this.xpath);\n    } else if (this.css != null) {\n      return this.findByCss(this.css);\n    }\n    return null;\n  }", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r391347503", "createdAt": "2020-03-12T00:46:00Z", "author": {"login": "aweng98"}, "path": "e2e/app/aou-elements/base-element.ts", "diffHunk": "@@ -0,0 +1,231 @@\n+import {ClickOptions, ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import {BaseElementInterface} from './base-element-interface';\n+\n+/**\n+ * BaseElement represents a web element in the DOM.\n+ * It implements useful methods for querying and interacting with this element.\n+ */\n+export default class BaseElement implements BaseElementInterface {\n+\n+  static asBaseElement(page: Page, elem: ElementHandle): BaseElement {\n+    return new BaseElement(page, elem);\n+  }\n+\n+  protected readonly page: Page;\n+  protected css: string;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MDAyMQ=="}, "originalCommit": {"oid": "e4b0bb8f1f1534f25f3f0aab3d7dda0e72f63205"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg3NTI2OnYy", "diffSide": "RIGHT", "path": "e2e/app/aou-elements/base-element.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1NzozN1rOF01vkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDoyMzo0MFrOF1NnWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MDgwMQ==", "bodyText": "naming nit: this should be getSize, for consistency with other getFoo methods in this class.", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390950801", "createdAt": "2020-03-11T12:57:37Z", "author": {"login": "gjuggler"}, "path": "e2e/app/aou-elements/base-element.ts", "diffHunk": "@@ -0,0 +1,231 @@\n+import {ClickOptions, ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import {BaseElementInterface} from './base-element-interface';\n+\n+/**\n+ * BaseElement represents a web element in the DOM.\n+ * It implements useful methods for querying and interacting with this element.\n+ */\n+export default class BaseElement implements BaseElementInterface {\n+\n+  static asBaseElement(page: Page, elem: ElementHandle): BaseElement {\n+    return new BaseElement(page, elem);\n+  }\n+\n+  protected readonly page: Page;\n+  protected css: string;\n+  protected xpath: string;\n+  protected element: ElementHandle;\n+\n+  constructor(aPage: Page, aElement?: ElementHandle) {\n+    this.page = aPage;\n+    this.element = aElement || undefined;\n+  }\n+\n+  async withCss(cssSelector: string, options?: WaitForSelectorOptions): Promise<ElementHandle> {\n+    this.css = cssSelector;\n+    this.element = await this.page.waitForSelector(this.css, options);\n+    return this.element;\n+  }\n+\n+  async withXpath(xpathSelector: string, options?: WaitForSelectorOptions): Promise<ElementHandle> {\n+    this.xpath = xpathSelector;\n+    this.element = await this.page.waitForXPath(this.xpath, options);\n+    return this.element;\n+  }\n+\n+   /**\n+    * Find first element without wait for.\n+    */\n+  async findByCss(cssSelector: string,): Promise<ElementHandle | null> {\n+    this.css = cssSelector;\n+    this.element = await this.page.$(this.css);\n+    return this.element;\n+  }\n+\n+   /**\n+    * Find first element without wait for.\n+    */\n+  async findByXpath(xpathSelector: string): Promise<ElementHandle | null> {\n+    this.xpath = xpathSelector;\n+    const found = await this.page.$x(this.xpath);\n+    if (found.length > 0) {\n+      this.element = found[0];\n+    } else {\n+      this.element = null;\n+    }\n+    return this.element;\n+  }\n+\n+  /**\n+   * Finds the value of a property for this element.\n+   *\n+   * Alternative:\n+   *  const handle = await page.evaluateHandle((elem, prop) => {\n+   *    return elem[prop];\n+   *  }, element, property);\n+   *  return await handle.jsonValue();\n+   */\n+  async getProperty(propertyName: string): Promise<unknown> {\n+    if (this.element == null) {\n+      throw new Error('The element is undefined.');\n+    }\n+    const p = await this.element.asElement().getProperty(propertyName);\n+    return await p.jsonValue();\n+  }\n+\n+  /**\n+   * Finds the value of an attribute\n+   * @param attribute name\n+   */\n+  async getAttribute(attributeName: string): Promise<string | null> {\n+    if (this.element == null) {\n+      throw new Error('The element is undefined.');\n+    }\n+    const elem = this.element.asElement();\n+    const attributeValue = await this.page.evaluate(\n+       (link, attr) => link.getAttribute(attr), elem, attributeName);\n+    return attributeValue;\n+  }\n+\n+  /**\n+   * Does attribute exists for this element?\n+   *\n+   * @param attribute name\n+   */\n+  async hasAttribute(attributeName: string): Promise<boolean> {\n+    if (this.element == null) {\n+      throw new Error('The element is undefined.');\n+    }\n+    const value = await this.getAttribute(attributeName);\n+    return value !== null;\n+  }\n+\n+  /**\n+   * Is element disabled or readonly?\n+   * Disabled means element has `disabled` attribute.\n+   */\n+  async isDisabled(): Promise<boolean> {\n+    const disabled = await this.getProperty('disabled');\n+    return !!disabled;\n+  }\n+\n+  /**\n+   * <pre>\n+   *  Check if the element is visible\n+   * </pre>\n+   * @param {Page} page\n+   * @param {ElementHandle} element\n+   */\n+  async isVisible(): Promise<boolean> {\n+    const boxModel = await this.element.boxModel();\n+    return boxModel !== null;\n+  }\n+\n+  /**\n+   * Check both boxModel and style for visibility.\n+   */\n+  async isDisplayed() {\n+    const isVisibleHandle = await this.page.evaluateHandle((e) =>\n+    {\n+      const style = window.getComputedStyle(e);\n+      return (style && style.display !== 'none' &&\n+         style.visibility !== 'hidden' && style.opacity !== '0');\n+    }, this.element);\n+    const jValue = await isVisibleHandle.jsonValue();\n+    const boxModelValue = await this.element.boxModel();\n+    if (jValue && boxModelValue) {\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  async click(options?: ClickOptions): Promise<void> {\n+    await this.element.asElement().click(options);\n+  }\n+\n+  async type(text: string, options?: { delay: number }): Promise<void> {\n+    await this.focus();\n+    await this.element.asElement().type(text, options);\n+  }\n+\n+  async pressKeyboard(key: string, options?: { text?: string, delay?: number }): Promise<void> {\n+    await this.element.asElement().press(key, options);\n+  }\n+\n+  /**\n+   * Calling focus() and hover() together.\n+   */\n+  async focus(): Promise<void> {\n+    const handle = this.element.asElement();\n+    await Promise.all([\n+      handle.focus(),\n+      handle.hover()\n+    ]);\n+  }\n+\n+  /**\n+   * <pre>\n+   * Get the textContent property value for a element.\n+   * </pre>\n+   */\n+  async getTextContent(): Promise<string> {\n+    const handle = await this.element.asElement();\n+    return await handle.evaluate(\n+       (element: HTMLElement) => (element.textContent ? element.textContent.trim() : ''), this.element,\n+    );\n+  }\n+\n+  /**\n+   * Get the value of property 'value' for this element.\n+   * Alternative: await page.evaluate(elem => elem.value, element);\n+   */\n+  async getValue(): Promise<unknown> {\n+    return await this.getProperty('value');\n+  }\n+\n+  async getComputedStyle(styleName: string): Promise<unknown> {\n+    const handle = this.element.asElement();\n+    const attrStyle = await handle.evaluateHandle((e) => {\n+      const style = window.getComputedStyle(e);\n+      return style;\n+    }, this.element);\n+\n+    return (await attrStyle.getProperty(styleName)).jsonValue()\n+  }\n+\n+  /**\n+   * Determine if cursor is disabled (= not-allowed) by checking style attribute 'cursor'.\n+   */\n+  async isCursorNotAllowed(): Promise<boolean> {\n+    const cursor = await this.getComputedStyle('cursor');\n+    return cursor === 'not-allowed';\n+  }\n+\n+  /**\n+   * Finds element's size.\n+   */\n+  async size(): Promise<{ width: number; height: number }> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4b0bb8f1f1534f25f3f0aab3d7dda0e72f63205"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0MTkxMw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r391341913", "createdAt": "2020-03-12T00:23:40Z", "author": {"login": "aweng98"}, "path": "e2e/app/aou-elements/base-element.ts", "diffHunk": "@@ -0,0 +1,231 @@\n+import {ClickOptions, ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import {BaseElementInterface} from './base-element-interface';\n+\n+/**\n+ * BaseElement represents a web element in the DOM.\n+ * It implements useful methods for querying and interacting with this element.\n+ */\n+export default class BaseElement implements BaseElementInterface {\n+\n+  static asBaseElement(page: Page, elem: ElementHandle): BaseElement {\n+    return new BaseElement(page, elem);\n+  }\n+\n+  protected readonly page: Page;\n+  protected css: string;\n+  protected xpath: string;\n+  protected element: ElementHandle;\n+\n+  constructor(aPage: Page, aElement?: ElementHandle) {\n+    this.page = aPage;\n+    this.element = aElement || undefined;\n+  }\n+\n+  async withCss(cssSelector: string, options?: WaitForSelectorOptions): Promise<ElementHandle> {\n+    this.css = cssSelector;\n+    this.element = await this.page.waitForSelector(this.css, options);\n+    return this.element;\n+  }\n+\n+  async withXpath(xpathSelector: string, options?: WaitForSelectorOptions): Promise<ElementHandle> {\n+    this.xpath = xpathSelector;\n+    this.element = await this.page.waitForXPath(this.xpath, options);\n+    return this.element;\n+  }\n+\n+   /**\n+    * Find first element without wait for.\n+    */\n+  async findByCss(cssSelector: string,): Promise<ElementHandle | null> {\n+    this.css = cssSelector;\n+    this.element = await this.page.$(this.css);\n+    return this.element;\n+  }\n+\n+   /**\n+    * Find first element without wait for.\n+    */\n+  async findByXpath(xpathSelector: string): Promise<ElementHandle | null> {\n+    this.xpath = xpathSelector;\n+    const found = await this.page.$x(this.xpath);\n+    if (found.length > 0) {\n+      this.element = found[0];\n+    } else {\n+      this.element = null;\n+    }\n+    return this.element;\n+  }\n+\n+  /**\n+   * Finds the value of a property for this element.\n+   *\n+   * Alternative:\n+   *  const handle = await page.evaluateHandle((elem, prop) => {\n+   *    return elem[prop];\n+   *  }, element, property);\n+   *  return await handle.jsonValue();\n+   */\n+  async getProperty(propertyName: string): Promise<unknown> {\n+    if (this.element == null) {\n+      throw new Error('The element is undefined.');\n+    }\n+    const p = await this.element.asElement().getProperty(propertyName);\n+    return await p.jsonValue();\n+  }\n+\n+  /**\n+   * Finds the value of an attribute\n+   * @param attribute name\n+   */\n+  async getAttribute(attributeName: string): Promise<string | null> {\n+    if (this.element == null) {\n+      throw new Error('The element is undefined.');\n+    }\n+    const elem = this.element.asElement();\n+    const attributeValue = await this.page.evaluate(\n+       (link, attr) => link.getAttribute(attr), elem, attributeName);\n+    return attributeValue;\n+  }\n+\n+  /**\n+   * Does attribute exists for this element?\n+   *\n+   * @param attribute name\n+   */\n+  async hasAttribute(attributeName: string): Promise<boolean> {\n+    if (this.element == null) {\n+      throw new Error('The element is undefined.');\n+    }\n+    const value = await this.getAttribute(attributeName);\n+    return value !== null;\n+  }\n+\n+  /**\n+   * Is element disabled or readonly?\n+   * Disabled means element has `disabled` attribute.\n+   */\n+  async isDisabled(): Promise<boolean> {\n+    const disabled = await this.getProperty('disabled');\n+    return !!disabled;\n+  }\n+\n+  /**\n+   * <pre>\n+   *  Check if the element is visible\n+   * </pre>\n+   * @param {Page} page\n+   * @param {ElementHandle} element\n+   */\n+  async isVisible(): Promise<boolean> {\n+    const boxModel = await this.element.boxModel();\n+    return boxModel !== null;\n+  }\n+\n+  /**\n+   * Check both boxModel and style for visibility.\n+   */\n+  async isDisplayed() {\n+    const isVisibleHandle = await this.page.evaluateHandle((e) =>\n+    {\n+      const style = window.getComputedStyle(e);\n+      return (style && style.display !== 'none' &&\n+         style.visibility !== 'hidden' && style.opacity !== '0');\n+    }, this.element);\n+    const jValue = await isVisibleHandle.jsonValue();\n+    const boxModelValue = await this.element.boxModel();\n+    if (jValue && boxModelValue) {\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  async click(options?: ClickOptions): Promise<void> {\n+    await this.element.asElement().click(options);\n+  }\n+\n+  async type(text: string, options?: { delay: number }): Promise<void> {\n+    await this.focus();\n+    await this.element.asElement().type(text, options);\n+  }\n+\n+  async pressKeyboard(key: string, options?: { text?: string, delay?: number }): Promise<void> {\n+    await this.element.asElement().press(key, options);\n+  }\n+\n+  /**\n+   * Calling focus() and hover() together.\n+   */\n+  async focus(): Promise<void> {\n+    const handle = this.element.asElement();\n+    await Promise.all([\n+      handle.focus(),\n+      handle.hover()\n+    ]);\n+  }\n+\n+  /**\n+   * <pre>\n+   * Get the textContent property value for a element.\n+   * </pre>\n+   */\n+  async getTextContent(): Promise<string> {\n+    const handle = await this.element.asElement();\n+    return await handle.evaluate(\n+       (element: HTMLElement) => (element.textContent ? element.textContent.trim() : ''), this.element,\n+    );\n+  }\n+\n+  /**\n+   * Get the value of property 'value' for this element.\n+   * Alternative: await page.evaluate(elem => elem.value, element);\n+   */\n+  async getValue(): Promise<unknown> {\n+    return await this.getProperty('value');\n+  }\n+\n+  async getComputedStyle(styleName: string): Promise<unknown> {\n+    const handle = this.element.asElement();\n+    const attrStyle = await handle.evaluateHandle((e) => {\n+      const style = window.getComputedStyle(e);\n+      return style;\n+    }, this.element);\n+\n+    return (await attrStyle.getProperty(styleName)).jsonValue()\n+  }\n+\n+  /**\n+   * Determine if cursor is disabled (= not-allowed) by checking style attribute 'cursor'.\n+   */\n+  async isCursorNotAllowed(): Promise<boolean> {\n+    const cursor = await this.getComputedStyle('cursor');\n+    return cursor === 'not-allowed';\n+  }\n+\n+  /**\n+   * Finds element's size.\n+   */\n+  async size(): Promise<{ width: number; height: number }> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MDgwMQ=="}, "originalCommit": {"oid": "e4b0bb8f1f1534f25f3f0aab3d7dda0e72f63205"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg4NTA5OnYy", "diffSide": "RIGHT", "path": "e2e/app/base-page.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzowMDozOFrOF011xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDozNTo0M1rOF1NzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MjM4OQ==", "bodyText": "[action required] As discussed offline, please add some class-level comments to this base class. It really does help a lot!", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r390952389", "createdAt": "2020-03-11T13:00:38Z", "author": {"login": "gjuggler"}, "path": "e2e/app/base-page.ts", "diffHunk": "@@ -0,0 +1,220 @@\n+import {ElementHandle, Page, Response} from 'puppeteer';\n+\n+export default abstract class BasePage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4b0bb8f1f1534f25f3f0aab3d7dda0e72f63205"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0NDk0OA==", "bodyText": "I missed this one. just added this now.\n/**\n * All Page Object classes will extends the BasePage.\n * Contains common functions/actions that help with tests creation.\n */", "url": "https://github.com/all-of-us/workbench/pull/3205#discussion_r391344948", "createdAt": "2020-03-12T00:35:43Z", "author": {"login": "aweng98"}, "path": "e2e/app/base-page.ts", "diffHunk": "@@ -0,0 +1,220 @@\n+import {ElementHandle, Page, Response} from 'puppeteer';\n+\n+export default abstract class BasePage {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MjM4OQ=="}, "originalCommit": {"oid": "e4b0bb8f1f1534f25f3f0aab3d7dda0e72f63205"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3183, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}