{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NTYyMTY0", "number": 3054, "title": "[RW-4159][risk=no] Terms of service data model and API", "bodyText": "This PR introduces a new user_terms_of_service table modeled loosely on the user_data_use_agreement table. Although the intent here is likely to implement TOS as a full access module, the initial requirement for Beta launch is to record TOS acknowledgement events for new users, but not require it for existing users. (See comments in RW-4159 for more detail.)\nThe goal here is to be as backwards-compatible as possible. There should be no impact of an API server rollback on the database (the new table simply won't be used by a prior version) or on the API. Feature-flagging isn't necessary here, since the new API parameter is optional.\nThings I learned:\n\nIt's often considered best practice to use bidirectional relationship mappings in JPA to define parent-child relationships like this. When the number of children is known to be small, this works well.\nThe application is responsible for maintaining the bidirectional link when modifying data entity classes directly. See the comment in the DbUserTermsOfService class \u2013\u00a0I was pulling my hair out trying to get the controller tests working, when I realized that dbUser.getTermsOfServiceRows was still empty because I hadn't been correctly updating the in-memory model classes.\nOur codebase is very inconsistent with how DB relations are modeled and used. For example, look at Authorities which is done very differently. There's definitely some room for cleanup over time here.\n\n\nPR checklist\n\n[NO] This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n[NO] I have run and tested this change locally\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers", "createdAt": "2020-01-29T13:39:51Z", "url": "https://github.com/all-of-us/workbench/pull/3054", "merged": true, "mergeCommit": {"oid": "7b9977bafc740f0cd4a30cdefa005ffcd93c99bb"}, "closed": true, "closedAt": "2020-02-03T18:48:38Z", "author": {"login": "gjuggler"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_JbQ6gBqjI5OTA0Mjk4NTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcAwKPvgH2gAyMzY4NTYyMTY0OjYxOTUyZjIxN2JlYmQ3YTIwNjg1MTBiM2MxZWJmODY4ODk0Mzc2ZmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "167868d34eedcdeb434992113fbb32d230cc0ad9", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/167868d34eedcdeb434992113fbb32d230cc0ad9", "committedDate": "2020-01-29T17:26:58Z", "message": "Fix code to work with set instead of list."}, "afterCommit": {"oid": "91d39e5397d53346b9c6de364f6e9ed177933e13", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/91d39e5397d53346b9c6de364f6e9ed177933e13", "committedDate": "2020-01-29T17:30:31Z", "message": "Add a user_terms_of_service table and associated DB / API paraphernalia"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMjk5ODI1", "url": "https://github.com/all-of-us/workbench/pull/3054#pullrequestreview-350299825", "createdAt": "2020-01-29T17:43:03Z", "commit": {"oid": "91d39e5397d53346b9c6de364f6e9ed177933e13"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNzo0MzowNFrOFjRjSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNzo1ODozMFrOFjSCQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzMjA0MQ==", "bodyText": "with UserTermsOfServiceDao, we should be able to find this more efficiently with findTopByTosVersionAndUser() or some variation on that.", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r372532041", "createdAt": "2020-01-29T17:43:04Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ProfileService.java", "diffHunk": "@@ -207,6 +210,16 @@ public Profile getProfile(DbUser user) {\n     profile.setFreeTierUsage(freeTierBillingService.getUserCachedFreeTierUsage(user));\n     profile.setFreeTierDollarQuota(freeTierBillingService.getUserFreeTierDollarLimit(user));\n \n+    Optional<DbUserTermsOfService> latestTermsOfServiceMaybe =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91d39e5397d53346b9c6de364f6e9ed177933e13"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzMjk0MQ==", "bodyText": "are we intentionally allowing users to be created w/o a ToS?", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r372532941", "createdAt": "2020-01-29T17:44:42Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -361,6 +361,10 @@ private DbUser initializeUserIfNeeded() {\n                 .map(FROM_CLIENT_INSTITUTIONAL_AFFILIATION)\n                 .collect(Collectors.toList()));\n \n+    if (request.getTermsOfServiceVersion() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91d39e5397d53346b9c6de364f6e9ed177933e13"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzNDc0MA==", "bodyText": "I believe you can use @CreationTimestamp to leave this work to Hibernate\nhttps://thoughts-on-java.org/persist-creation-update-timestamps-hibernate/", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r372534740", "createdAt": "2020-01-29T17:48:16Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -412,6 +417,21 @@ public void setDataUseAgreementNameOutOfDate(String newGivenName, String newFami\n     userDataUseAgreementDao.save(dataUseAgreements);\n   }\n \n+  @Override\n+  @Transactional\n+  public void submitTermsOfService(DbUser dbUser, Integer tosVersion) {\n+    if (tosVersion != CURRENT_TERMS_OF_SERVICE_VERSION) {\n+      throw new BadRequestException(\"Terms of Service version is not up to date\");\n+    }\n+    final Timestamp timestamp = new Timestamp(clock.instant().toEpochMilli());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a550570727d239f6cb19459bdbe87fba259fa51"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzNTI5Ng==", "bodyText": "Noting that this means we cannot roll back the UI/API independently when we have ToS updates. Should be fine since I imagine these updates are rare but it may be good to note in our rollback doc.", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r372535296", "createdAt": "2020-01-29T17:49:20Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -412,6 +417,21 @@ public void setDataUseAgreementNameOutOfDate(String newGivenName, String newFami\n     userDataUseAgreementDao.save(dataUseAgreements);\n   }\n \n+  @Override\n+  @Transactional\n+  public void submitTermsOfService(DbUser dbUser, Integer tosVersion) {\n+    if (tosVersion != CURRENT_TERMS_OF_SERVICE_VERSION) {\n+      throw new BadRequestException(\"Terms of Service version is not up to date\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a550570727d239f6cb19459bdbe87fba259fa51"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzOTk2OQ==", "bodyText": "I think we can actually make do without these fields if we make the change to the TosDao above. We can leave the management of the Tos objects purely to the Tos model/dao and not maintain the bidirectional mapping.\nIt might seem a little weird that a field that we're returning on the API object does not live on the DB model but I've found this pattern of having API objects being constructed from several sources work well for me in the past. It allows the data model to fit the most natural access patterns instead of being constrained by the API requirements", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r372539969", "createdAt": "2020-01-29T17:58:30Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbUser.java", "diffHunk": "@@ -710,4 +711,17 @@ public DbAddress getAddress() {\n   public void setAddress(DbAddress address) {\n     this.address = address;\n   }\n+\n+  @OneToMany(fetch = FetchType.LAZY, mappedBy = \"user\")\n+  public Set<DbUserTermsOfService> getTermsOfServiceRows() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a550570727d239f6cb19459bdbe87fba259fa51"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzMzNjU5", "url": "https://github.com/all-of-us/workbench/pull/3054#pullrequestreview-350333659", "createdAt": "2020-01-29T18:36:11Z", "commit": {"oid": "8a550570727d239f6cb19459bdbe87fba259fa51"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxODozNjoxMVrOFjTLmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo0Nzo1OFrOFjYr6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1ODc0Nw==", "bodyText": "Yes \u2013\u00a0at least until the TOS UI is implemented (that will be PR 2 of 2 for this ticket). In the UI PR, I'll probably update this to require a TOS version when featureFlags.enableNewAccountCreation is true. (I think we're just bundling all account creation flow changes into that flag for simplicity's sake.)", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r372558747", "createdAt": "2020-01-29T18:36:11Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -361,6 +361,10 @@ private DbUser initializeUserIfNeeded() {\n                 .map(FROM_CLIENT_INSTITUTIONAL_AFFILIATION)\n                 .collect(Collectors.toList()));\n \n+    if (request.getTermsOfServiceVersion() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzMjk0MQ=="}, "originalCommit": {"oid": "91d39e5397d53346b9c6de364f6e9ed177933e13"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1OTAyNQ==", "bodyText": "Lemme see if that works \u2013 I read about that and it would be great, but I didn't find any existing usage so I wasn't sure whether we'd evaluated and rejected that option before.", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r372559025", "createdAt": "2020-01-29T18:36:45Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -412,6 +417,21 @@ public void setDataUseAgreementNameOutOfDate(String newGivenName, String newFami\n     userDataUseAgreementDao.save(dataUseAgreements);\n   }\n \n+  @Override\n+  @Transactional\n+  public void submitTermsOfService(DbUser dbUser, Integer tosVersion) {\n+    if (tosVersion != CURRENT_TERMS_OF_SERVICE_VERSION) {\n+      throw new BadRequestException(\"Terms of Service version is not up to date\");\n+    }\n+    final Timestamp timestamp = new Timestamp(clock.instant().toEpochMilli());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzNDc0MA=="}, "originalCommit": {"oid": "8a550570727d239f6cb19459bdbe87fba259fa51"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU2MDEzMw==", "bodyText": "Yeah \u2013 I used this hokey pattern for consistency with our setup for DUA. In both places, we're pretty blatantly kicking the can to deal with this issue more comprehensively once we actually need to bump the version.\nActually though, your comment is making me realize that having a more permissive backend is likely the right answer. Having an old client log a tos acknowledgement for an older agreement version is a non-issue, as far as the data model is concerned. How exactly we enforce what happens when a user hasn't signed the most-recent version is more interesting, and will require some further thought.", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r372560133", "createdAt": "2020-01-29T18:38:57Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -412,6 +417,21 @@ public void setDataUseAgreementNameOutOfDate(String newGivenName, String newFami\n     userDataUseAgreementDao.save(dataUseAgreements);\n   }\n \n+  @Override\n+  @Transactional\n+  public void submitTermsOfService(DbUser dbUser, Integer tosVersion) {\n+    if (tosVersion != CURRENT_TERMS_OF_SERVICE_VERSION) {\n+      throw new BadRequestException(\"Terms of Service version is not up to date\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzNTI5Ng=="}, "originalCommit": {"oid": "8a550570727d239f6cb19459bdbe87fba259fa51"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwMTA4MA==", "bodyText": "Thanks for the comment \u2013\u00a0I struggled with this question when working through this PR. We discussed offline and I was well-enough convinced to give the \"access to child tables happens through separate DAOs\" approach a try.", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r372601080", "createdAt": "2020-01-29T20:00:57Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbUser.java", "diffHunk": "@@ -710,4 +711,17 @@ public DbAddress getAddress() {\n   public void setAddress(DbAddress address) {\n     this.address = address;\n   }\n+\n+  @OneToMany(fetch = FetchType.LAZY, mappedBy = \"user\")\n+  public Set<DbUserTermsOfService> getTermsOfServiceRows() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzOTk2OQ=="}, "originalCommit": {"oid": "8a550570727d239f6cb19459bdbe87fba259fa51"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0ODkzNg==", "bodyText": "Done \u2013\u00a0see my response below summarizing our offline discussion and reasons why I'm trying out the model where data access for \"child\" tables is done through the child table DAO.", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r372648936", "createdAt": "2020-01-29T21:47:58Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ProfileService.java", "diffHunk": "@@ -207,6 +210,16 @@ public Profile getProfile(DbUser user) {\n     profile.setFreeTierUsage(freeTierBillingService.getUserCachedFreeTierUsage(user));\n     profile.setFreeTierDollarQuota(freeTierBillingService.getUserFreeTierDollarLimit(user));\n \n+    Optional<DbUserTermsOfService> latestTermsOfServiceMaybe =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzMjA0MQ=="}, "originalCommit": {"oid": "91d39e5397d53346b9c6de364f6e9ed177933e13"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76620fc39eb09c856e70eb5ecad49169a9a44dde", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/76620fc39eb09c856e70eb5ecad49169a9a44dde", "committedDate": "2020-01-30T21:51:40Z", "message": "Add action audit event logging and UserServiceTest test."}, "afterCommit": {"oid": "35ec4111ed1213072e0b97413686c6dab3d86c73", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/35ec4111ed1213072e0b97413686c6dab3d86c73", "committedDate": "2020-01-30T22:24:29Z", "message": "Add action audit event logging and UserServiceTest test."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNzEyMDU3", "url": "https://github.com/all-of-us/workbench/pull/3054#pullrequestreview-351712057", "createdAt": "2020-01-31T19:03:32Z", "commit": {"oid": "35ec4111ed1213072e0b97413686c6dab3d86c73"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxOTowMzozMlrOFkU71A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxOTowMzo1N1rOFkU8iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzNjA1Mg==", "bodyText": "Was it necessary to change the User model to a long? At some point, we should decide which access pattern we want to standardize on. I think there's good arguments for both approaches.", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373636052", "createdAt": "2020-01-31T19:03:32Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbUserTermsOfService.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.pmiops.workbench.db.model;\n+\n+import java.sql.Timestamp;\n+import java.util.Objects;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import org.hibernate.annotations.CreationTimestamp;\n+\n+@Entity\n+@Table(name = \"user_terms_of_service\")\n+public class DbUserTermsOfService {\n+  private long userTermsOfServiceId;\n+  private long userId;\n+  private int tosVersion;\n+  private Timestamp agreementTime;\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"user_terms_of_service_id\")\n+  public long getUserTermsOfServiceId() {\n+    return userTermsOfServiceId;\n+  }\n+\n+  public void setUserTermsOfServiceId(long userTermsOfServiceId) {\n+    this.userTermsOfServiceId = userTermsOfServiceId;\n+  }\n+\n+  @Column(name = \"user_id\", nullable = false)\n+  public long getUserId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35ec4111ed1213072e0b97413686c6dab3d86c73"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzNjIzMg==", "bodyText": "Also curious about the nullable annotation. Is it for documentation or does it affect our code somehow?", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373636232", "createdAt": "2020-01-31T19:03:57Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbUserTermsOfService.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.pmiops.workbench.db.model;\n+\n+import java.sql.Timestamp;\n+import java.util.Objects;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import org.hibernate.annotations.CreationTimestamp;\n+\n+@Entity\n+@Table(name = \"user_terms_of_service\")\n+public class DbUserTermsOfService {\n+  private long userTermsOfServiceId;\n+  private long userId;\n+  private int tosVersion;\n+  private Timestamp agreementTime;\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"user_terms_of_service_id\")\n+  public long getUserTermsOfServiceId() {\n+    return userTermsOfServiceId;\n+  }\n+\n+  public void setUserTermsOfServiceId(long userTermsOfServiceId) {\n+    this.userTermsOfServiceId = userTermsOfServiceId;\n+  }\n+\n+  @Column(name = \"user_id\", nullable = false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35ec4111ed1213072e0b97413686c6dab3d86c73"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTEyNzUz", "url": "https://github.com/all-of-us/workbench/pull/3054#pullrequestreview-351912753", "createdAt": "2020-02-02T01:04:18Z", "commit": {"oid": "35ec4111ed1213072e0b97413686c6dab3d86c73"}, "state": "APPROVED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwMTowNDoxOFrOFkfpvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwMToxOTozNlrOFkfr0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMTY0NA==", "bodyText": "If you don't mind, please tag me on PRs with new audit log entries, since we don't have a great migration story there.\nThe main thing I see here is that the action and target don't feel quite right: at the moment compliance docs and compliance acceptance aren't first-class concepts in the audit system. It would be slightly more idiomatic (and potentially help with audit queries), if you had something like\nAgentType.USER\nActionType.ACCEPT\nTargetType.COMPLIANCE_DOCUMENT\n\n// 2 property fields:\nDocumentTargetProperty.VERSION,\nDocumentTargetProperty.NAME,\n\nThen the log entry for DUA acceptance would be almost identical to this code (and in fact we could bust out a separate ComplianceDocumentAuditor when we're ready to do that.", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373811644", "createdAt": "2020-02-02T01:04:18Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/UserServiceAuditAdapterImpl.java", "diffHunk": "@@ -76,4 +76,21 @@ public void fireAdministrativeBypassTime(\n \n     actionAuditService.send(eventBuilder.build());\n   }\n+\n+  @Override\n+  public void fireAcknowledgeTermsOfService(DbUser targetUser, Integer termsOfServiceVersion) {\n+    actionAuditService.send(\n+        ActionAuditEvent.builder()\n+            .timestamp(clock.millis())\n+            .agentType(AgentType.USER)\n+            .agentId(dbUserProvider.get().getUserId())\n+            .agentEmailMaybe(dbUserProvider.get().getUsername())\n+            .actionId(actionIdProvider.get())\n+            .actionType(ActionType.EDIT)\n+            .targetType(TargetType.ACCOUNT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35ec4111ed1213072e0b97413686c6dab3d86c73"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMTY4MQ==", "bodyText": "Please add a comment about why you use the provider here and the passed-in user below if that's intentional.", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373811681", "createdAt": "2020-02-02T01:05:38Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/UserServiceAuditAdapterImpl.java", "diffHunk": "@@ -76,4 +76,21 @@ public void fireAdministrativeBypassTime(\n \n     actionAuditService.send(eventBuilder.build());\n   }\n+\n+  @Override\n+  public void fireAcknowledgeTermsOfService(DbUser targetUser, Integer termsOfServiceVersion) {\n+    actionAuditService.send(\n+        ActionAuditEvent.builder()\n+            .timestamp(clock.millis())\n+            .agentType(AgentType.USER)\n+            .agentId(dbUserProvider.get().getUserId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35ec4111ed1213072e0b97413686c6dab3d86c73"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMjAwNw==", "bodyText": "nit: one pattern that's kinda nice is to do:\nlatestTermsOfServiceMaybe.ifPresent(profile::setTermsOfServiceFields)\n\nwhere setTermsOfServiceFields is a helper method that sets both these things.", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373812007", "createdAt": "2020-02-02T01:14:57Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ProfileService.java", "diffHunk": "@@ -207,6 +215,14 @@ public Profile getProfile(DbUser user) {\n     profile.setFreeTierUsage(freeTierBillingService.getUserCachedFreeTierUsage(user));\n     profile.setFreeTierDollarQuota(freeTierBillingService.getUserFreeTierDollarLimit(user));\n \n+    Optional<DbUserTermsOfService> latestTermsOfServiceMaybe =\n+        userTermsOfServiceDao.findFirstByUserIdOrderByTosVersionDesc(user.getUserId());\n+    if (latestTermsOfServiceMaybe.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35ec4111ed1213072e0b97413686c6dab3d86c73"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMjAxNg==", "bodyText": "nit: I'd name this recordTermsOfServiceAcceptance()", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373812016", "createdAt": "2020-02-02T01:15:28Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserService.java", "diffHunk": "@@ -43,6 +43,9 @@ DbUser createUser(\n   DbUser submitDataUseAgreement(\n       DbUser user, Integer dataUseAgreementSignedVersion, String initials);\n \n+  // Registers that a user has agreed to a given version of the Terms of Service.\n+  void submitTermsOfService(DbUser dbUser, Integer tosVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35ec4111ed1213072e0b97413686c6dab3d86c73"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMjA4NA==", "bodyText": "+1 the lifecycles on all these compliance checks are really adding up, and we have to deal with combinatoric effects of some of them not being done, with overlapping grace periods, etc. It's worth thinking about the migration story if we want to keep things super simple up front.", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373812084", "createdAt": "2020-02-02T01:17:06Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -412,6 +417,21 @@ public void setDataUseAgreementNameOutOfDate(String newGivenName, String newFami\n     userDataUseAgreementDao.save(dataUseAgreements);\n   }\n \n+  @Override\n+  @Transactional\n+  public void submitTermsOfService(DbUser dbUser, Integer tosVersion) {\n+    if (tosVersion != CURRENT_TERMS_OF_SERVICE_VERSION) {\n+      throw new BadRequestException(\"Terms of Service version is not up to date\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzNTI5Ng=="}, "originalCommit": {"oid": "8a550570727d239f6cb19459bdbe87fba259fa51"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMjA5MQ==", "bodyText": "This would be a good spot to make a builder and an immutable class I think.", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373812091", "createdAt": "2020-02-02T01:17:26Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -414,6 +419,21 @@ public void setDataUseAgreementNameOutOfDate(String newGivenName, String newFami\n     userDataUseAgreementDao.save(dataUseAgreements);\n   }\n \n+  @Override\n+  @Transactional\n+  public void submitTermsOfService(DbUser dbUser, Integer tosVersion) {\n+    if (tosVersion != CURRENT_TERMS_OF_SERVICE_VERSION) {\n+      throw new BadRequestException(\"Terms of Service version is not up to date\");\n+    }\n+\n+    DbUserTermsOfService userTermsOfService = new DbUserTermsOfService();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35ec4111ed1213072e0b97413686c6dab3d86c73"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMjEyNA==", "bodyText": "Spring can use this to talk to the database in a more intelligent way. +1 for readable annotations instead of comments; -1 that we have to specify this stuff multiple places.", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373812124", "createdAt": "2020-02-02T01:18:14Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbUserTermsOfService.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.pmiops.workbench.db.model;\n+\n+import java.sql.Timestamp;\n+import java.util.Objects;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import org.hibernate.annotations.CreationTimestamp;\n+\n+@Entity\n+@Table(name = \"user_terms_of_service\")\n+public class DbUserTermsOfService {\n+  private long userTermsOfServiceId;\n+  private long userId;\n+  private int tosVersion;\n+  private Timestamp agreementTime;\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"user_terms_of_service_id\")\n+  public long getUserTermsOfServiceId() {\n+    return userTermsOfServiceId;\n+  }\n+\n+  public void setUserTermsOfServiceId(long userTermsOfServiceId) {\n+    this.userTermsOfServiceId = userTermsOfServiceId;\n+  }\n+\n+  @Column(name = \"user_id\", nullable = false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzNjIzMg=="}, "originalCommit": {"oid": "35ec4111ed1213072e0b97413686c6dab3d86c73"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMjE3OQ==", "bodyText": "aside: how hard would it be to merge the data model and services, etc, for the TOS and DUA. I think only a little business logic separates them, right?", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373812179", "createdAt": "2020-02-02T01:19:36Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbUserTermsOfService.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.pmiops.workbench.db.model;\n+\n+import java.sql.Timestamp;\n+import java.util.Objects;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import org.hibernate.annotations.CreationTimestamp;\n+\n+@Entity\n+@Table(name = \"user_terms_of_service\")\n+public class DbUserTermsOfService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35ec4111ed1213072e0b97413686c6dab3d86c73"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dc05d3e8992552a98fbb89f98f38105ef5ba27b", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/6dc05d3e8992552a98fbb89f98f38105ef5ba27b", "committedDate": "2020-02-03T17:09:09Z", "message": "Add a user_terms_of_service table and associated DB / API paraphernalia"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9aef1d0cabfc57d73fc11d7dc4a568a64527334", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/a9aef1d0cabfc57d73fc11d7dc4a568a64527334", "committedDate": "2020-02-03T17:09:09Z", "message": "Switch from list to set in test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a476277a7e2b2a07c03e0d2e3b8e4b11657b163", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/1a476277a7e2b2a07c03e0d2e3b8e4b11657b163", "committedDate": "2020-02-03T17:09:09Z", "message": "PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01515da86ca8afe8198176b75b95a78516590f11", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/01515da86ca8afe8198176b75b95a78516590f11", "committedDate": "2020-02-03T17:09:09Z", "message": "Add action audit event logging and UserServiceTest test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc078f6cfcce8fc7cecf931d751a8ad256c387cf", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/bc078f6cfcce8fc7cecf931d751a8ad256c387cf", "committedDate": "2020-02-03T17:09:09Z", "message": "Fix a bug in TOS audit events and add some comments on nullability in DbUserTermsOfService."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "35ec4111ed1213072e0b97413686c6dab3d86c73", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/35ec4111ed1213072e0b97413686c6dab3d86c73", "committedDate": "2020-01-30T22:24:29Z", "message": "Add action audit event logging and UserServiceTest test."}, "afterCommit": {"oid": "bc078f6cfcce8fc7cecf931d751a8ad256c387cf", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/bc078f6cfcce8fc7cecf931d751a8ad256c387cf", "committedDate": "2020-02-03T17:09:09Z", "message": "Fix a bug in TOS audit events and add some comments on nullability in DbUserTermsOfService."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61952f217bebd7a2068510b3c1ebf868894376fc", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/61952f217bebd7a2068510b3c1ebf868894376fc", "committedDate": "2020-02-03T17:12:43Z", "message": "Remove changes to aou-utils"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3760, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}