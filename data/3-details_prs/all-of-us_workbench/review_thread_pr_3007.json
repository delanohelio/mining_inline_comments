{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzODQ5MDg3", "number": 3007, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTowNTowMFrODY2GzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjowMzo1MlrODY3SMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Mzc4ODkzOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/data/concept/concept-add-modal.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTowNTowMFrOFe7zDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjowNjoyNlrOFe9vsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk4MTMyNw==", "bodyText": "Will, does PM still have a separate bucket at the bottom of the UI?", "url": "https://github.com/all-of-us/workbench/pull/3007#discussion_r367981327", "createdAt": "2020-01-17T15:05:00Z", "author": {"login": "freemabd"}, "path": "ui/src/app/pages/data/concept/concept-add-modal.tsx", "diffHunk": "@@ -31,6 +25,16 @@ const styles = reactStyles({\n   }\n });\n \n+const filterConcepts = (concepts: any[], domain: Domain) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cda16421e0d478b29c4b16c6a78a72898c116c0d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxMzIzNA==", "bodyText": "Yes, the code is there but is currently feature flagged. Should only appear in local and test environments", "url": "https://github.com/all-of-us/workbench/pull/3007#discussion_r368013234", "createdAt": "2020-01-17T16:06:26Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/pages/data/concept/concept-add-modal.tsx", "diffHunk": "@@ -31,6 +25,16 @@ const styles = reactStyles({\n   }\n });\n \n+const filterConcepts = (concepts: any[], domain: Domain) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk4MTMyNw=="}, "originalCommit": {"oid": "cda16421e0d478b29c4b16c6a78a72898c116c0d"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzgwNDcyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/data/concept/concept-homepage.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNToxMDoxMVrOFe78oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjoxNTowOVrOFe-ASg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk4Mzc3Ng==", "bodyText": "Is it easier to separate domain counts api calls from data api calls from a UI perspective? Seems like it would simplify logic/responsibility of the api call.", "url": "https://github.com/all-of-us/workbench/pull/3007#discussion_r367983776", "createdAt": "2020-01-17T15:10:11Z", "author": {"login": "freemabd"}, "path": "ui/src/app/pages/data/concept/concept-homepage.tsx", "diffHunk": "@@ -348,49 +342,51 @@ export const ConceptHomepage = withCurrentWorkspace()(\n           maxResults: this.MAX_CONCEPT_FETCH\n         });\n         completedDomainSearches.push(cacheItem.domain);\n-        cacheItem.items = resp.items;\n+        cacheItem.items = cacheItem.domain === Domain.SURVEY ? resp.questions || [] : resp.items;\n         this.setState({completedDomainSearches: completedDomainSearches});\n         if (activeTabSearch) {\n-          const conceptDomainCounts = environment.enableNewConceptTabs ? [...resp.domainCounts]\n-            : resp.domainCounts.filter(item => item.domain !== Domain.PHYSICALMEASUREMENT);\n+          const conceptDomainCounts = environment.enableNewConceptTabs ? resp.domainCounts\n+            : resp.domainCounts.filter(item => ![Domain.PHYSICALMEASUREMENT, Domain.SURVEY].includes(item.domain));\n           this.setState({\n             searchLoading: false,\n             conceptDomainCounts: conceptDomainCounts,\n-            selectedDomain: resp.domainCounts\n-              .find(domainCount => domainCount.domain === cacheItem.domain)});\n+            selectedDomain: resp.domainCounts.find(domainCount => domainCount.domain === cacheItem.domain)\n+          });\n           this.setConceptsAndVocabularies();\n         }\n       });\n       this.setState({selectedConceptDomainMap: selectedConceptDomainMap});\n     }\n \n-    selectConcepts(concepts: Concept[]) {\n-      const {selectedDomain, selectedConceptDomainMap} = this.state;\n-      selectedConceptDomainMap[selectedDomain.domain] = concepts.filter(concept => {\n-        return concept.domainId.toLowerCase() === selectedDomain.domain.toString().toLowerCase();\n-      });\n+    selectConcepts(concepts: any[]) {\n+      const {selectedDomain: {domain}, selectedConceptDomainMap} = this.state;\n+      if (domain === Domain.PHYSICALMEASUREMENT) {\n+        selectedConceptDomainMap[domain] = concepts.filter(concept =>\n+          concept.domainId.toLowerCase() === Domain[Domain.MEASUREMENT].toLowerCase()\n+            && concept.vocabularyId === CriteriaType[CriteriaType.PPI]\n+        );\n+      } else if (domain === Domain.SURVEY) {\n+        selectedConceptDomainMap[domain] = concepts.filter(concept => !!concept.question);\n+      } else {\n+        selectedConceptDomainMap[domain] = concepts.filter(concept => concept.domainId.toLowerCase() === Domain[domain].toLowerCase());\n+      }\n       this.setState({selectedConceptDomainMap: selectedConceptDomainMap});\n     }\n \n     clearSearch() {\n       this.setState({\n+        currentInputString: '',\n         currentSearchString: '',\n         showSearchError: false,\n         searching: false // reset the search result table to show browse/domain cards instead\n       });\n     }\n \n-    browseDomain(domain: DomainInfo) {\n+    browseDomain(domain?: DomainInfo) {\n       const {conceptDomainCounts} = this.state;\n-      this.setState({browsingSurvey: false, currentSearchString: '',\n-        selectedDomain: conceptDomainCounts\n-          .find(domainCount => domainCount.domain === domain.domain)},\n-        this.searchConcepts);\n-    }\n-\n-    browseSurvey(surveyName) {\n-      this.setState({browsingSurvey: true,\n-        selectedSurvey: surveyName});\n+      const selectedDomain = !domain ? {domain: Domain.SURVEY, name: 'Surveys', conceptCount: 0}\n+        : conceptDomainCounts.find(domainCount => domainCount.domain === domain.domain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cda16421e0d478b29c4b16c6a78a72898c116c0d"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxNzQ4Mg==", "bodyText": "Yes, that would actually make it simpler on the UI also.", "url": "https://github.com/all-of-us/workbench/pull/3007#discussion_r368017482", "createdAt": "2020-01-17T16:15:09Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/pages/data/concept/concept-homepage.tsx", "diffHunk": "@@ -348,49 +342,51 @@ export const ConceptHomepage = withCurrentWorkspace()(\n           maxResults: this.MAX_CONCEPT_FETCH\n         });\n         completedDomainSearches.push(cacheItem.domain);\n-        cacheItem.items = resp.items;\n+        cacheItem.items = cacheItem.domain === Domain.SURVEY ? resp.questions || [] : resp.items;\n         this.setState({completedDomainSearches: completedDomainSearches});\n         if (activeTabSearch) {\n-          const conceptDomainCounts = environment.enableNewConceptTabs ? [...resp.domainCounts]\n-            : resp.domainCounts.filter(item => item.domain !== Domain.PHYSICALMEASUREMENT);\n+          const conceptDomainCounts = environment.enableNewConceptTabs ? resp.domainCounts\n+            : resp.domainCounts.filter(item => ![Domain.PHYSICALMEASUREMENT, Domain.SURVEY].includes(item.domain));\n           this.setState({\n             searchLoading: false,\n             conceptDomainCounts: conceptDomainCounts,\n-            selectedDomain: resp.domainCounts\n-              .find(domainCount => domainCount.domain === cacheItem.domain)});\n+            selectedDomain: resp.domainCounts.find(domainCount => domainCount.domain === cacheItem.domain)\n+          });\n           this.setConceptsAndVocabularies();\n         }\n       });\n       this.setState({selectedConceptDomainMap: selectedConceptDomainMap});\n     }\n \n-    selectConcepts(concepts: Concept[]) {\n-      const {selectedDomain, selectedConceptDomainMap} = this.state;\n-      selectedConceptDomainMap[selectedDomain.domain] = concepts.filter(concept => {\n-        return concept.domainId.toLowerCase() === selectedDomain.domain.toString().toLowerCase();\n-      });\n+    selectConcepts(concepts: any[]) {\n+      const {selectedDomain: {domain}, selectedConceptDomainMap} = this.state;\n+      if (domain === Domain.PHYSICALMEASUREMENT) {\n+        selectedConceptDomainMap[domain] = concepts.filter(concept =>\n+          concept.domainId.toLowerCase() === Domain[Domain.MEASUREMENT].toLowerCase()\n+            && concept.vocabularyId === CriteriaType[CriteriaType.PPI]\n+        );\n+      } else if (domain === Domain.SURVEY) {\n+        selectedConceptDomainMap[domain] = concepts.filter(concept => !!concept.question);\n+      } else {\n+        selectedConceptDomainMap[domain] = concepts.filter(concept => concept.domainId.toLowerCase() === Domain[domain].toLowerCase());\n+      }\n       this.setState({selectedConceptDomainMap: selectedConceptDomainMap});\n     }\n \n     clearSearch() {\n       this.setState({\n+        currentInputString: '',\n         currentSearchString: '',\n         showSearchError: false,\n         searching: false // reset the search result table to show browse/domain cards instead\n       });\n     }\n \n-    browseDomain(domain: DomainInfo) {\n+    browseDomain(domain?: DomainInfo) {\n       const {conceptDomainCounts} = this.state;\n-      this.setState({browsingSurvey: false, currentSearchString: '',\n-        selectedDomain: conceptDomainCounts\n-          .find(domainCount => domainCount.domain === domain.domain)},\n-        this.searchConcepts);\n-    }\n-\n-    browseSurvey(surveyName) {\n-      this.setState({browsingSurvey: true,\n-        selectedSurvey: surveyName});\n+      const selectedDomain = !domain ? {domain: Domain.SURVEY, name: 'Surveys', conceptCount: 0}\n+        : conceptDomainCounts.find(domainCount => domainCount.domain === domain.domain);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk4Mzc3Ng=="}, "originalCommit": {"oid": "cda16421e0d478b29c4b16c6a78a72898c116c0d"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzgxMTQ5OnYy", "diffSide": "LEFT", "path": "ui/src/app/pages/data/concept/concept-homepage.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNToxMjowNVrOFe8Ang==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjoxNjozMlrOFe-CwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk4NDc5OA==", "bodyText": "Does the api need a call the get survey answers? Or is that obsolete now?", "url": "https://github.com/all-of-us/workbench/pull/3007#discussion_r367984798", "createdAt": "2020-01-17T15:12:05Z", "author": {"login": "freemabd"}, "path": "ui/src/app/pages/data/concept/concept-homepage.tsx", "diffHunk": "@@ -411,23 +407,11 @@ export const ConceptHomepage = withCurrentWorkspace()(\n       return selectedConceptDomainMap[selectedDomain.domain].length;\n     }\n \n-    selectedQuestion(selectedQues) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cda16421e0d478b29c4b16c6a78a72898c116c0d"}, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxODExMw==", "bodyText": "We've removed the answers since they're not selectable. It's possible we may need them in the future though", "url": "https://github.com/all-of-us/workbench/pull/3007#discussion_r368018113", "createdAt": "2020-01-17T16:16:32Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/pages/data/concept/concept-homepage.tsx", "diffHunk": "@@ -411,23 +407,11 @@ export const ConceptHomepage = withCurrentWorkspace()(\n       return selectedConceptDomainMap[selectedDomain.domain].length;\n     }\n \n-    selectedQuestion(selectedQues) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk4NDc5OA=="}, "originalCommit": {"oid": "cda16421e0d478b29c4b16c6a78a72898c116c0d"}, "originalPosition": 252}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzgxNTE0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/data/concept/concept-table.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNToxMzoxMlrOFe8C4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjoxMDo1NlrOFe94XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk4NTM3OQ==", "bodyText": "Did we change this to any because it can also be PM?", "url": "https://github.com/all-of-us/workbench/pull/3007#discussion_r367985379", "createdAt": "2020-01-17T15:13:12Z", "author": {"login": "freemabd"}, "path": "ui/src/app/pages/data/concept/concept-table.tsx", "diffHunk": "@@ -107,23 +158,24 @@ export class SynonymsObject extends React.Component<{}, SynonymsObjectState> {\n }\n \n interface Props {\n-  concepts: Concept[];\n+  concepts: any[];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cda16421e0d478b29c4b16c6a78a72898c116c0d"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxNTQ1Mg==", "bodyText": "Actually changed so surveys could be included. We used to use a separate component but now we use the same one for all domains", "url": "https://github.com/all-of-us/workbench/pull/3007#discussion_r368015452", "createdAt": "2020-01-17T16:10:56Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/pages/data/concept/concept-table.tsx", "diffHunk": "@@ -107,23 +158,24 @@ export class SynonymsObject extends React.Component<{}, SynonymsObjectState> {\n }\n \n interface Props {\n-  concepts: Concept[];\n+  concepts: any[];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk4NTM3OQ=="}, "originalCommit": {"oid": "cda16421e0d478b29c4b16c6a78a72898c116c0d"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Mzk0NTY3OnYy", "diffSide": "RIGHT", "path": "common-api/src/main/java/org/pmiops/workbench/cdr/dao/ConceptDao.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo1Mjo1M1rOFe9T9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo0MTo0M1rOFe-zRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwNjEzNA==", "bodyText": "Here we select concepts from DbConcept and above we get the concept counts from DbCriteria.  Is it possible to get these from the same source?", "url": "https://github.com/all-of-us/workbench/pull/3007#discussion_r368006134", "createdAt": "2020-01-17T15:52:53Z", "author": {"login": "dolbeew"}, "path": "common-api/src/main/java/org/pmiops/workbench/cdr/dao/ConceptDao.java", "diffHunk": "@@ -42,5 +43,59 @@\n               + \"where (c.countValue > 0 or c.sourceCountValue > 0) \"\n               + \"and c.standardConcept IN (?1) \"\n               + \"and c.domainId in (?2)\")\n-  Page<DbConcept> findConcepts(List<String> conceptTypes, List<String> domainIds, Pageable page);\n+  Page<DbConcept> findConcepts(\n+      ImmutableList<String> conceptTypes, List<String> domainIds, Pageable page);\n+\n+  /**\n+   * Return standard or all concepts in each vocabulary for the specified domain matching the\n+   * specified expression, matching concept name, synonym, ID, or code.\n+   *\n+   * @param matchExp SQL MATCH expression to match concept name or synonym\n+   * @param conceptTypes can be 'S', 'C' or ''\n+   * @param domainIds domain IDs to use when filtering concepts\n+   * @param vocabularyId vocabulary id type to search\n+   * @param conceptClassId concept class id type to search\n+   * @return per-vocabulary concept counts\n+   */\n+  @Query(\n+      value =\n+          \"select distinct c from DbConcept c \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cda16421e0d478b29c4b16c6a78a72898c116c0d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzMDUzMg==", "bodyText": "It is, but we query from the db_criteria table for surveys. This allows us to get the questions in order, which we cannot do when querying from concept table.", "url": "https://github.com/all-of-us/workbench/pull/3007#discussion_r368030532", "createdAt": "2020-01-17T16:41:43Z", "author": {"login": "freemabd"}, "path": "common-api/src/main/java/org/pmiops/workbench/cdr/dao/ConceptDao.java", "diffHunk": "@@ -42,5 +43,59 @@\n               + \"where (c.countValue > 0 or c.sourceCountValue > 0) \"\n               + \"and c.standardConcept IN (?1) \"\n               + \"and c.domainId in (?2)\")\n-  Page<DbConcept> findConcepts(List<String> conceptTypes, List<String> domainIds, Pageable page);\n+  Page<DbConcept> findConcepts(\n+      ImmutableList<String> conceptTypes, List<String> domainIds, Pageable page);\n+\n+  /**\n+   * Return standard or all concepts in each vocabulary for the specified domain matching the\n+   * specified expression, matching concept name, synonym, ID, or code.\n+   *\n+   * @param matchExp SQL MATCH expression to match concept name or synonym\n+   * @param conceptTypes can be 'S', 'C' or ''\n+   * @param domainIds domain IDs to use when filtering concepts\n+   * @param vocabularyId vocabulary id type to search\n+   * @param conceptClassId concept class id type to search\n+   * @return per-vocabulary concept counts\n+   */\n+  @Query(\n+      value =\n+          \"select distinct c from DbConcept c \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwNjEzNA=="}, "originalCommit": {"oid": "cda16421e0d478b29c4b16c6a78a72898c116c0d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Mzk4MTkzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/api/ConceptsController.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjowMzo1MlrOFe9q6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo0Mzo1MFrOFe-3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxMjAwOA==", "bodyText": "Do surveys have to use this structure or can it be modified to add properties (possibly survey name)? Not needed now, just asking for future reference.", "url": "https://github.com/all-of-us/workbench/pull/3007#discussion_r368012008", "createdAt": "2020-01-17T16:03:52Z", "author": {"login": "dolbeew"}, "path": "api/src/main/java/org/pmiops/workbench/api/ConceptsController.java", "diffHunk": "@@ -195,12 +192,34 @@ private void addDomainCounts(SearchConceptsRequest request, ConceptListResponse\n               (request.getPageNumber() == null) ? 0 : request.getPageNumber());\n       if (concepts != null) {\n         response.setItems(\n-            concepts.getContent().stream().map(TO_CLIENT_CONCEPT).collect(Collectors.toList()));\n+            concepts.getContent().stream()\n+                .map(ConceptsController::toClientConcept)\n+                .collect(Collectors.toList()));\n       }\n     }\n \n     // TODO: consider doing these queries in parallel\n     addDomainCounts(request, response);\n     return ResponseEntity.ok(response);\n   }\n+\n+  public static Concept toClientConcept(DbConcept concept) {\n+    return new Concept()\n+        .conceptClassId(concept.getConceptClassId())\n+        .conceptCode(concept.getConceptCode())\n+        .conceptName(concept.getConceptName())\n+        .conceptId(concept.getConceptId())\n+        .countValue(concept.getCountValue())\n+        .domainId(concept.getDomainId())\n+        .prevalence(concept.getPrevalence())\n+        .standardConcept(ConceptService.STANDARD_CONCEPT_CODE.equals(concept.getStandardConcept()))\n+        .vocabularyId(concept.getVocabularyId())\n+        .conceptSynonyms(concept.getSynonyms());\n+  }\n+\n+  private SurveyQuestions toClientSurveyQuestions(DbCriteria dbCriteria) {\n+    return new SurveyQuestions()\n+        .conceptId(dbCriteria.getLongConceptId())\n+        .question(dbCriteria.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cda16421e0d478b29c4b16c6a78a72898c116c0d"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzMDc2NA==", "bodyText": "Yes, we can definitely add survey name to this model", "url": "https://github.com/all-of-us/workbench/pull/3007#discussion_r368030764", "createdAt": "2020-01-17T16:42:16Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/api/ConceptsController.java", "diffHunk": "@@ -195,12 +192,34 @@ private void addDomainCounts(SearchConceptsRequest request, ConceptListResponse\n               (request.getPageNumber() == null) ? 0 : request.getPageNumber());\n       if (concepts != null) {\n         response.setItems(\n-            concepts.getContent().stream().map(TO_CLIENT_CONCEPT).collect(Collectors.toList()));\n+            concepts.getContent().stream()\n+                .map(ConceptsController::toClientConcept)\n+                .collect(Collectors.toList()));\n       }\n     }\n \n     // TODO: consider doing these queries in parallel\n     addDomainCounts(request, response);\n     return ResponseEntity.ok(response);\n   }\n+\n+  public static Concept toClientConcept(DbConcept concept) {\n+    return new Concept()\n+        .conceptClassId(concept.getConceptClassId())\n+        .conceptCode(concept.getConceptCode())\n+        .conceptName(concept.getConceptName())\n+        .conceptId(concept.getConceptId())\n+        .countValue(concept.getCountValue())\n+        .domainId(concept.getDomainId())\n+        .prevalence(concept.getPrevalence())\n+        .standardConcept(ConceptService.STANDARD_CONCEPT_CODE.equals(concept.getStandardConcept()))\n+        .vocabularyId(concept.getVocabularyId())\n+        .conceptSynonyms(concept.getSynonyms());\n+  }\n+\n+  private SurveyQuestions toClientSurveyQuestions(DbCriteria dbCriteria) {\n+    return new SurveyQuestions()\n+        .conceptId(dbCriteria.getLongConceptId())\n+        .question(dbCriteria.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxMjAwOA=="}, "originalCommit": {"oid": "cda16421e0d478b29c4b16c6a78a72898c116c0d"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzMTUzNg==", "bodyText": "Yes, survey name can definitely be added to the model.", "url": "https://github.com/all-of-us/workbench/pull/3007#discussion_r368031536", "createdAt": "2020-01-17T16:43:50Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/api/ConceptsController.java", "diffHunk": "@@ -195,12 +192,34 @@ private void addDomainCounts(SearchConceptsRequest request, ConceptListResponse\n               (request.getPageNumber() == null) ? 0 : request.getPageNumber());\n       if (concepts != null) {\n         response.setItems(\n-            concepts.getContent().stream().map(TO_CLIENT_CONCEPT).collect(Collectors.toList()));\n+            concepts.getContent().stream()\n+                .map(ConceptsController::toClientConcept)\n+                .collect(Collectors.toList()));\n       }\n     }\n \n     // TODO: consider doing these queries in parallel\n     addDomainCounts(request, response);\n     return ResponseEntity.ok(response);\n   }\n+\n+  public static Concept toClientConcept(DbConcept concept) {\n+    return new Concept()\n+        .conceptClassId(concept.getConceptClassId())\n+        .conceptCode(concept.getConceptCode())\n+        .conceptName(concept.getConceptName())\n+        .conceptId(concept.getConceptId())\n+        .countValue(concept.getCountValue())\n+        .domainId(concept.getDomainId())\n+        .prevalence(concept.getPrevalence())\n+        .standardConcept(ConceptService.STANDARD_CONCEPT_CODE.equals(concept.getStandardConcept()))\n+        .vocabularyId(concept.getVocabularyId())\n+        .conceptSynonyms(concept.getSynonyms());\n+  }\n+\n+  private SurveyQuestions toClientSurveyQuestions(DbCriteria dbCriteria) {\n+    return new SurveyQuestions()\n+        .conceptId(dbCriteria.getLongConceptId())\n+        .question(dbCriteria.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxMjAwOA=="}, "originalCommit": {"oid": "cda16421e0d478b29c4b16c6a78a72898c116c0d"}, "originalPosition": 142}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3441, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}