{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NzAxNjk2", "number": 4012, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjoxMzoyNFrOEkQiZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODo1Mjo0M1rOElFLng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDU1MTQzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/api/RuntimeController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjoxMzoyNFrOHTGAyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjoxMzoyNFrOHTGAyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4MzQ5OA==", "bodyText": "Nice to have: can this endpoint accept the absence of a body Runtime payload? This would ensure that older UI clients don't break when this goes out.", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489783498", "createdAt": "2020-09-16T22:13:24Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/api/RuntimeController.java", "diffHunk": "@@ -180,14 +180,16 @@ private DbWorkspace lookupWorkspace(String workspaceNamespace) throws NotFoundEx\n   }\n \n   @Override\n-  public ResponseEntity<EmptyResponse> createRuntime(String workspaceNamespace) {\n+  public ResponseEntity<EmptyResponse> createRuntime(String workspaceNamespace, Runtime runtime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDU1NTU2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjoxNToxOVrOHTGDOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMDoyMzo1OVrOHTIfmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NDEyMw==", "bodyText": "There are more values in the enum. Maybe just map the enum string value directly here for now; or else have a separate enum/map here that converts these into value strings (this avoids unexpected breakages if we decide to rename any of these enum values)", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489784123", "createdAt": "2020-09-16T22:15:19Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -97,39 +101,51 @@ private LeonardoCreateRuntimeRequest buildCreateRuntimeRequest(\n     nbExtensions.put(\n         \"aou-upload-policy-extension\", assetsBaseUrl + \"/aou-upload-policy-extension.js\");\n \n-    return new LeonardoCreateRuntimeRequest()\n-        .labels(ImmutableMap.of(RUNTIME_LABEL_AOU, \"true\", RUNTIME_LABEL_CREATED_BY, userEmail))\n-        .defaultClientId(config.server.oauthClientId)\n-        // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n-        .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n-        .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n-        .userJupyterExtensionConfig(\n-            new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n-        // Matches Terra UI's scopes, see RW-3531 for rationale.\n-        .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n-        .runtimeConfig(\n-            new LeonardoMachineConfig()\n-                .cloudService(CloudServiceEnum.DATAPROC)\n-                .masterDiskSize(\n-                    Optional.ofNullable(clusterOverride.masterDiskSize)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))\n-                .masterMachineType(\n-                    Optional.ofNullable(clusterOverride.machineType)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultMachineType)))\n-        .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n-        .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n-        .customEnvironmentVariables(customEnvironmentVariables);\n+    LeonardoCreateRuntimeRequest request =\n+        new LeonardoCreateRuntimeRequest()\n+            .labels(\n+                ImmutableMap.of(\n+                    RUNTIME_LABEL_AOU,\n+                    \"true\",\n+                    RUNTIME_LABEL_CREATED_BY,\n+                    userEmail,\n+                    RUNTIME_LABEL_AOU_CONFIG,\n+                    RuntimeConfigurationType.USEROVERRIDE.equals(runtime.getConfigurationType())\n+                        ? \"user-override\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgyMjYxNw==", "bodyText": "oh ok, I only saw \"default\" in the ticket so I thought we were collapsing the default/gce config into that.", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489822617", "createdAt": "2020-09-17T00:18:11Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -97,39 +101,51 @@ private LeonardoCreateRuntimeRequest buildCreateRuntimeRequest(\n     nbExtensions.put(\n         \"aou-upload-policy-extension\", assetsBaseUrl + \"/aou-upload-policy-extension.js\");\n \n-    return new LeonardoCreateRuntimeRequest()\n-        .labels(ImmutableMap.of(RUNTIME_LABEL_AOU, \"true\", RUNTIME_LABEL_CREATED_BY, userEmail))\n-        .defaultClientId(config.server.oauthClientId)\n-        // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n-        .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n-        .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n-        .userJupyterExtensionConfig(\n-            new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n-        // Matches Terra UI's scopes, see RW-3531 for rationale.\n-        .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n-        .runtimeConfig(\n-            new LeonardoMachineConfig()\n-                .cloudService(CloudServiceEnum.DATAPROC)\n-                .masterDiskSize(\n-                    Optional.ofNullable(clusterOverride.masterDiskSize)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))\n-                .masterMachineType(\n-                    Optional.ofNullable(clusterOverride.machineType)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultMachineType)))\n-        .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n-        .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n-        .customEnvironmentVariables(customEnvironmentVariables);\n+    LeonardoCreateRuntimeRequest request =\n+        new LeonardoCreateRuntimeRequest()\n+            .labels(\n+                ImmutableMap.of(\n+                    RUNTIME_LABEL_AOU,\n+                    \"true\",\n+                    RUNTIME_LABEL_CREATED_BY,\n+                    userEmail,\n+                    RUNTIME_LABEL_AOU_CONFIG,\n+                    RuntimeConfigurationType.USEROVERRIDE.equals(runtime.getConfigurationType())\n+                        ? \"user-override\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NDEyMw=="}, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgyNDE1Mw==", "bodyText": "Sorry that was written before we had two preset options", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489824153", "createdAt": "2020-09-17T00:23:59Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -97,39 +101,51 @@ private LeonardoCreateRuntimeRequest buildCreateRuntimeRequest(\n     nbExtensions.put(\n         \"aou-upload-policy-extension\", assetsBaseUrl + \"/aou-upload-policy-extension.js\");\n \n-    return new LeonardoCreateRuntimeRequest()\n-        .labels(ImmutableMap.of(RUNTIME_LABEL_AOU, \"true\", RUNTIME_LABEL_CREATED_BY, userEmail))\n-        .defaultClientId(config.server.oauthClientId)\n-        // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n-        .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n-        .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n-        .userJupyterExtensionConfig(\n-            new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n-        // Matches Terra UI's scopes, see RW-3531 for rationale.\n-        .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n-        .runtimeConfig(\n-            new LeonardoMachineConfig()\n-                .cloudService(CloudServiceEnum.DATAPROC)\n-                .masterDiskSize(\n-                    Optional.ofNullable(clusterOverride.masterDiskSize)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))\n-                .masterMachineType(\n-                    Optional.ofNullable(clusterOverride.machineType)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultMachineType)))\n-        .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n-        .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n-        .customEnvironmentVariables(customEnvironmentVariables);\n+    LeonardoCreateRuntimeRequest request =\n+        new LeonardoCreateRuntimeRequest()\n+            .labels(\n+                ImmutableMap.of(\n+                    RUNTIME_LABEL_AOU,\n+                    \"true\",\n+                    RUNTIME_LABEL_CREATED_BY,\n+                    userEmail,\n+                    RUNTIME_LABEL_AOU_CONFIG,\n+                    RuntimeConfigurationType.USEROVERRIDE.equals(runtime.getConfigurationType())\n+                        ? \"user-override\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NDEyMw=="}, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDU1OTc3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjoxNzoxMlrOHTGF1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMToxNTo1MFrOHTJ59A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NDc5MQ==", "bodyText": "Sorry, this was not super clearly written in the ticket AC, but the main point of the ticket is to actually plumb through the values supplied by the client to create the runtime instance: machine type and disk size. That hasn't been done here. This should also only happen if the flag is enabled - otherwise we shouldn't expect to receive a runtime payload in the create request.", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489784791", "createdAt": "2020-09-16T22:17:12Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -97,39 +101,51 @@ private LeonardoCreateRuntimeRequest buildCreateRuntimeRequest(\n     nbExtensions.put(\n         \"aou-upload-policy-extension\", assetsBaseUrl + \"/aou-upload-policy-extension.js\");\n \n-    return new LeonardoCreateRuntimeRequest()\n-        .labels(ImmutableMap.of(RUNTIME_LABEL_AOU, \"true\", RUNTIME_LABEL_CREATED_BY, userEmail))\n-        .defaultClientId(config.server.oauthClientId)\n-        // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n-        .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n-        .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n-        .userJupyterExtensionConfig(\n-            new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n-        // Matches Terra UI's scopes, see RW-3531 for rationale.\n-        .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n-        .runtimeConfig(\n-            new LeonardoMachineConfig()\n-                .cloudService(CloudServiceEnum.DATAPROC)\n-                .masterDiskSize(\n-                    Optional.ofNullable(clusterOverride.masterDiskSize)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))\n-                .masterMachineType(\n-                    Optional.ofNullable(clusterOverride.machineType)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultMachineType)))\n-        .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n-        .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n-        .customEnvironmentVariables(customEnvironmentVariables);\n+    LeonardoCreateRuntimeRequest request =\n+        new LeonardoCreateRuntimeRequest()\n+            .labels(\n+                ImmutableMap.of(\n+                    RUNTIME_LABEL_AOU,\n+                    \"true\",\n+                    RUNTIME_LABEL_CREATED_BY,\n+                    userEmail,\n+                    RUNTIME_LABEL_AOU_CONFIG,\n+                    RuntimeConfigurationType.USEROVERRIDE.equals(runtime.getConfigurationType())\n+                        ? \"user-override\"\n+                        : \"default\"))\n+            .defaultClientId(config.server.oauthClientId)\n+            // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n+            .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n+            .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n+            .userJupyterExtensionConfig(\n+                new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n+            // Matches Terra UI's scopes, see RW-3531 for rationale.\n+            .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n+            .runtimeConfig(\n+                new LeonardoMachineConfig()\n+                    .cloudService(CloudServiceEnum.DATAPROC)\n+                    .masterDiskSize(\n+                        Optional.ofNullable(clusterOverride.masterDiskSize)\n+                            .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgyMzA3Ng==", "bodyText": "where am I getting the machine type and disk size from? Do we have the UI for that already?", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489823076", "createdAt": "2020-09-17T00:19:55Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -97,39 +101,51 @@ private LeonardoCreateRuntimeRequest buildCreateRuntimeRequest(\n     nbExtensions.put(\n         \"aou-upload-policy-extension\", assetsBaseUrl + \"/aou-upload-policy-extension.js\");\n \n-    return new LeonardoCreateRuntimeRequest()\n-        .labels(ImmutableMap.of(RUNTIME_LABEL_AOU, \"true\", RUNTIME_LABEL_CREATED_BY, userEmail))\n-        .defaultClientId(config.server.oauthClientId)\n-        // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n-        .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n-        .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n-        .userJupyterExtensionConfig(\n-            new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n-        // Matches Terra UI's scopes, see RW-3531 for rationale.\n-        .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n-        .runtimeConfig(\n-            new LeonardoMachineConfig()\n-                .cloudService(CloudServiceEnum.DATAPROC)\n-                .masterDiskSize(\n-                    Optional.ofNullable(clusterOverride.masterDiskSize)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))\n-                .masterMachineType(\n-                    Optional.ofNullable(clusterOverride.machineType)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultMachineType)))\n-        .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n-        .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n-        .customEnvironmentVariables(customEnvironmentVariables);\n+    LeonardoCreateRuntimeRequest request =\n+        new LeonardoCreateRuntimeRequest()\n+            .labels(\n+                ImmutableMap.of(\n+                    RUNTIME_LABEL_AOU,\n+                    \"true\",\n+                    RUNTIME_LABEL_CREATED_BY,\n+                    userEmail,\n+                    RUNTIME_LABEL_AOU_CONFIG,\n+                    RuntimeConfigurationType.USEROVERRIDE.equals(runtime.getConfigurationType())\n+                        ? \"user-override\"\n+                        : \"default\"))\n+            .defaultClientId(config.server.oauthClientId)\n+            // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n+            .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n+            .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n+            .userJupyterExtensionConfig(\n+                new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n+            // Matches Terra UI's scopes, see RW-3531 for rationale.\n+            .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n+            .runtimeConfig(\n+                new LeonardoMachineConfig()\n+                    .cloudService(CloudServiceEnum.DATAPROC)\n+                    .masterDiskSize(\n+                        Optional.ofNullable(clusterOverride.masterDiskSize)\n+                            .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NDc5MQ=="}, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgyNDAyMw==", "bodyText": "We don't have it yet: https://precisionmedicineinitiative.atlassian.net/browse/RW-5410", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489824023", "createdAt": "2020-09-17T00:23:28Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -97,39 +101,51 @@ private LeonardoCreateRuntimeRequest buildCreateRuntimeRequest(\n     nbExtensions.put(\n         \"aou-upload-policy-extension\", assetsBaseUrl + \"/aou-upload-policy-extension.js\");\n \n-    return new LeonardoCreateRuntimeRequest()\n-        .labels(ImmutableMap.of(RUNTIME_LABEL_AOU, \"true\", RUNTIME_LABEL_CREATED_BY, userEmail))\n-        .defaultClientId(config.server.oauthClientId)\n-        // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n-        .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n-        .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n-        .userJupyterExtensionConfig(\n-            new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n-        // Matches Terra UI's scopes, see RW-3531 for rationale.\n-        .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n-        .runtimeConfig(\n-            new LeonardoMachineConfig()\n-                .cloudService(CloudServiceEnum.DATAPROC)\n-                .masterDiskSize(\n-                    Optional.ofNullable(clusterOverride.masterDiskSize)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))\n-                .masterMachineType(\n-                    Optional.ofNullable(clusterOverride.machineType)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultMachineType)))\n-        .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n-        .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n-        .customEnvironmentVariables(customEnvironmentVariables);\n+    LeonardoCreateRuntimeRequest request =\n+        new LeonardoCreateRuntimeRequest()\n+            .labels(\n+                ImmutableMap.of(\n+                    RUNTIME_LABEL_AOU,\n+                    \"true\",\n+                    RUNTIME_LABEL_CREATED_BY,\n+                    userEmail,\n+                    RUNTIME_LABEL_AOU_CONFIG,\n+                    RuntimeConfigurationType.USEROVERRIDE.equals(runtime.getConfigurationType())\n+                        ? \"user-override\"\n+                        : \"default\"))\n+            .defaultClientId(config.server.oauthClientId)\n+            // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n+            .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n+            .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n+            .userJupyterExtensionConfig(\n+                new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n+            // Matches Terra UI's scopes, see RW-3531 for rationale.\n+            .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n+            .runtimeConfig(\n+                new LeonardoMachineConfig()\n+                    .cloudService(CloudServiceEnum.DATAPROC)\n+                    .masterDiskSize(\n+                        Optional.ofNullable(clusterOverride.masterDiskSize)\n+                            .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NDc5MQ=="}, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg0NzI4NA==", "bodyText": "should I just send over the firecloud config defaults for now then? The values we're currently using in the backend call.", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489847284", "createdAt": "2020-09-17T01:15:50Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -97,39 +101,51 @@ private LeonardoCreateRuntimeRequest buildCreateRuntimeRequest(\n     nbExtensions.put(\n         \"aou-upload-policy-extension\", assetsBaseUrl + \"/aou-upload-policy-extension.js\");\n \n-    return new LeonardoCreateRuntimeRequest()\n-        .labels(ImmutableMap.of(RUNTIME_LABEL_AOU, \"true\", RUNTIME_LABEL_CREATED_BY, userEmail))\n-        .defaultClientId(config.server.oauthClientId)\n-        // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n-        .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n-        .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n-        .userJupyterExtensionConfig(\n-            new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n-        // Matches Terra UI's scopes, see RW-3531 for rationale.\n-        .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n-        .runtimeConfig(\n-            new LeonardoMachineConfig()\n-                .cloudService(CloudServiceEnum.DATAPROC)\n-                .masterDiskSize(\n-                    Optional.ofNullable(clusterOverride.masterDiskSize)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))\n-                .masterMachineType(\n-                    Optional.ofNullable(clusterOverride.machineType)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultMachineType)))\n-        .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n-        .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n-        .customEnvironmentVariables(customEnvironmentVariables);\n+    LeonardoCreateRuntimeRequest request =\n+        new LeonardoCreateRuntimeRequest()\n+            .labels(\n+                ImmutableMap.of(\n+                    RUNTIME_LABEL_AOU,\n+                    \"true\",\n+                    RUNTIME_LABEL_CREATED_BY,\n+                    userEmail,\n+                    RUNTIME_LABEL_AOU_CONFIG,\n+                    RuntimeConfigurationType.USEROVERRIDE.equals(runtime.getConfigurationType())\n+                        ? \"user-override\"\n+                        : \"default\"))\n+            .defaultClientId(config.server.oauthClientId)\n+            // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n+            .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n+            .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n+            .userJupyterExtensionConfig(\n+                new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n+            // Matches Terra UI's scopes, see RW-3531 for rationale.\n+            .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n+            .runtimeConfig(\n+                new LeonardoMachineConfig()\n+                    .cloudService(CloudServiceEnum.DATAPROC)\n+                    .masterDiskSize(\n+                        Optional.ofNullable(clusterOverride.masterDiskSize)\n+                            .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NDc5MQ=="}, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDU2MzA5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjoxODozNVrOHTGHzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMDoyNTowOFrOHTIg1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NTI5NA==", "bodyText": "The client does not get to control this. We should continue to set this according to our own logic", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489785294", "createdAt": "2020-09-16T22:18:35Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -143,10 +159,13 @@ public void createRuntime(\n     leonardoRetryHandler.run(\n         (context) -> {\n           runtimesApi.createRuntime(\n-              googleProject,\n-              runtimeName,\n+              runtime.getGoogleProject(),\n+              runtime.getRuntimeName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgyMzczOQ==", "bodyText": "It's a little hacky but the behavior is still the same because I override the client's values at the beginning of RuntimeController.createRuntime. I can move the overriding here.", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489823739", "createdAt": "2020-09-17T00:22:19Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -143,10 +159,13 @@ public void createRuntime(\n     leonardoRetryHandler.run(\n         (context) -> {\n           runtimesApi.createRuntime(\n-              googleProject,\n-              runtimeName,\n+              runtime.getGoogleProject(),\n+              runtime.getRuntimeName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NTI5NA=="}, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgyNDQ3MQ==", "bodyText": "Ah, sorry - I missed that. This is fine", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489824471", "createdAt": "2020-09-17T00:25:08Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -143,10 +159,13 @@ public void createRuntime(\n     leonardoRetryHandler.run(\n         (context) -> {\n           runtimesApi.createRuntime(\n-              googleProject,\n-              runtimeName,\n+              runtime.getGoogleProject(),\n+              runtime.getRuntimeName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NTI5NA=="}, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDU2MzU5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjoxODo1MFrOHTGIJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjoxODo1MFrOHTGIJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NTM4MQ==", "bodyText": "If we're getting the project value here, we should also be rejecting requests where this does not matching the URL workspaceaNamespace. However, it may be cleaner just to ignore the value that's in the runtime payload.", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489785381", "createdAt": "2020-09-16T22:18:50Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -143,10 +159,13 @@ public void createRuntime(\n     leonardoRetryHandler.run(\n         (context) -> {\n           runtimesApi.createRuntime(\n-              googleProject,\n-              runtimeName,\n+              runtime.getGoogleProject(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDU2NzczOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjoyMDozM1rOHTGKew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjoyOTowMlrOHTriJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NTk3OQ==", "bodyText": "This code still needs to function without the new feature flag enabled. In this current version, I don't think it will function either way.", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489785979", "createdAt": "2020-09-16T22:20:33Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -143,10 +159,13 @@ public void createRuntime(\n     leonardoRetryHandler.run(\n         (context) -> {\n           runtimesApi.createRuntime(\n-              googleProject,\n-              runtimeName,\n+              runtime.getGoogleProject(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgyNDY0NA==", "bodyText": "I can add switches for the feature flag but it does work as is. I updated the UI's API call to send over default-dataproc as the configuration type.", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489824644", "createdAt": "2020-09-17T00:25:51Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -143,10 +159,13 @@ public void createRuntime(\n     leonardoRetryHandler.run(\n         (context) -> {\n           runtimesApi.createRuntime(\n-              googleProject,\n-              runtimeName,\n+              runtime.getGoogleProject(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NTk3OQ=="}, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgzMDMxNw==", "bodyText": "ack - this is obsolete, this was also because I missed the logic in RuntimeController", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489830317", "createdAt": "2020-09-17T00:47:00Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -143,10 +159,13 @@ public void createRuntime(\n     leonardoRetryHandler.run(\n         (context) -> {\n           runtimesApi.createRuntime(\n-              googleProject,\n-              runtimeName,\n+              runtime.getGoogleProject(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NTk3OQ=="}, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg1MTQwNw==", "bodyText": "hm, in that case, is it OK to not feature flag this? We would be losing out on the ability to toggle it off if there's a bug but functionality wise, it should be the same if its on or off.", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489851407", "createdAt": "2020-09-17T01:22:28Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -143,10 +159,13 @@ public void createRuntime(\n     leonardoRetryHandler.run(\n         (context) -> {\n           runtimesApi.createRuntime(\n-              googleProject,\n-              runtimeName,\n+              runtime.getGoogleProject(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NTk3OQ=="}, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0MjgzNw==", "bodyText": "Yeah I suppose machine type and disk size could be hardcoded on the ui instead with this change. The feature flag could then just control whether to look at the clusteroverride", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r490042837", "createdAt": "2020-09-17T07:52:46Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -143,10 +159,13 @@ public void createRuntime(\n     leonardoRetryHandler.run(\n         (context) -> {\n           runtimesApi.createRuntime(\n-              googleProject,\n-              runtimeName,\n+              runtime.getGoogleProject(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NTk3OQ=="}, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM5ODI0Ng==", "bodyText": "Or else, just fallback to the previous config value if the client does not supply a runtime config; should be required with the new flag though. I'm not sure which will be easier here.", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r490398246", "createdAt": "2020-09-17T16:29:02Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -143,10 +159,13 @@ public void createRuntime(\n     leonardoRetryHandler.run(\n         (context) -> {\n           runtimesApi.createRuntime(\n-              googleProject,\n-              runtimeName,\n+              runtime.getGoogleProject(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NTk3OQ=="}, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDU4MjE1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjoyNjoxNVrOHTGSwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjoyNjoxNVrOHTGSwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4ODA5Ng==", "bodyText": "nit: perhaps this was changed for debugging, but definitely prefer how this was previously written - assigning to a variable only to immediately return it on the next line is a bit of a pet peeve of mine", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r489788096", "createdAt": "2020-09-16T22:26:15Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -97,39 +101,51 @@ private LeonardoCreateRuntimeRequest buildCreateRuntimeRequest(\n     nbExtensions.put(\n         \"aou-upload-policy-extension\", assetsBaseUrl + \"/aou-upload-policy-extension.js\");\n \n-    return new LeonardoCreateRuntimeRequest()\n-        .labels(ImmutableMap.of(RUNTIME_LABEL_AOU, \"true\", RUNTIME_LABEL_CREATED_BY, userEmail))\n-        .defaultClientId(config.server.oauthClientId)\n-        // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n-        .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n-        .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n-        .userJupyterExtensionConfig(\n-            new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n-        // Matches Terra UI's scopes, see RW-3531 for rationale.\n-        .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n-        .runtimeConfig(\n-            new LeonardoMachineConfig()\n-                .cloudService(CloudServiceEnum.DATAPROC)\n-                .masterDiskSize(\n-                    Optional.ofNullable(clusterOverride.masterDiskSize)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))\n-                .masterMachineType(\n-                    Optional.ofNullable(clusterOverride.machineType)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultMachineType)))\n-        .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n-        .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n-        .customEnvironmentVariables(customEnvironmentVariables);\n+    LeonardoCreateRuntimeRequest request =\n+        new LeonardoCreateRuntimeRequest()\n+            .labels(\n+                ImmutableMap.of(\n+                    RUNTIME_LABEL_AOU,\n+                    \"true\",\n+                    RUNTIME_LABEL_CREATED_BY,\n+                    userEmail,\n+                    RUNTIME_LABEL_AOU_CONFIG,\n+                    RuntimeConfigurationType.USEROVERRIDE.equals(runtime.getConfigurationType())\n+                        ? \"user-override\"\n+                        : \"default\"))\n+            .defaultClientId(config.server.oauthClientId)\n+            // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n+            .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n+            .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n+            .userJupyterExtensionConfig(\n+                new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n+            // Matches Terra UI's scopes, see RW-3531 for rationale.\n+            .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n+            .runtimeConfig(\n+                new LeonardoMachineConfig()\n+                    .cloudService(CloudServiceEnum.DATAPROC)\n+                    .masterDiskSize(\n+                        Optional.ofNullable(clusterOverride.masterDiskSize)\n+                            .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))\n+                    .masterMachineType(\n+                        Optional.ofNullable(clusterOverride.machineType)\n+                            .orElse(config.firecloud.notebookRuntimeDefaultMachineType)))\n+            .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n+            .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n+            .customEnvironmentVariables(customEnvironmentVariables);\n+\n+    return request;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5127336d28533428d77a1998da718b3149275"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTUzNjUyOnYy", "diffSide": "LEFT", "path": "api/src/main/resources/workbench-api.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTozMzoxNFrOHT2THg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTozMzoxNFrOHT2THg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3NDYyMg==", "bodyText": "nit: leave TODO to add these back after next release", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r490574622", "createdAt": "2020-09-17T21:33:14Z", "author": {"login": "calbach"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -5336,13 +5341,19 @@ definitions:\n     - Deleting\n     - Deleted\n     - Unknown\n+  RuntimeConfigurationType:\n+    description: >\n+      The configuration type for this runtime. Namely, whether there was a user\n+      override of a specific cloud service type, or whether one of the preset\n+      system defaults was used. This distinction is meaningful for display\n+      purposes, and allows the user to pickup natural upgrades to the default\n+      configuration.\n+    type: string\n+    enum:\n+      - UserOverride\n+      - DefaultGce\n+      - DefaultDataproc\n   Runtime:\n-    required:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b3fc77fb5ae22650bf507900a246d2eb972c3d9"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTU0NjQ3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/api/RuntimeControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTozNjo0MVrOHT2ZCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTozNjo0MVrOHT2ZCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3NjEzNg==", "bodyText": "Would be good to validate that the machine type and disk are actually getting plumbed in a test case", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r490576136", "createdAt": "2020-09-17T21:36:41Z", "author": {"login": "calbach"}, "path": "api/src/test/java/org/pmiops/workbench/api/RuntimeControllerTest.java", "diffHunk": "@@ -454,24 +480,95 @@ public void testDeleteRuntimesInProject_NullRuntimesList() {\n   }\n \n   @Test\n-  public void testCreateRuntime() {\n-    when(mockLeoNotebooksClient.getRuntime(BILLING_PROJECT_ID, getRuntimeName()))\n+  public void testCreateRuntime() throws ApiException {\n+    when(userRuntimesApi.getRuntime(BILLING_PROJECT_ID, getRuntimeName()))\n         .thenThrow(new NotFoundException());\n     stubGetWorkspace(WORKSPACE_NS, WORKSPACE_ID, \"test\");\n \n-    runtimeController.createRuntime(BILLING_PROJECT_ID);\n-    verify(mockLeoNotebooksClient)\n-        .createRuntime(eq(BILLING_PROJECT_ID), eq(getRuntimeName()), eq(WORKSPACE_ID));\n+    runtimeController.createRuntime(BILLING_PROJECT_ID, new Runtime());\n+    verify(userRuntimesApi).createRuntime(eq(BILLING_PROJECT_ID), eq(getRuntimeName()), any());\n   }\n \n   @Test\n-  public void testDeleteRuntime() {\n+  public void testCreateRuntime_nullRuntime() throws ApiException {\n+    when(userRuntimesApi.getRuntime(BILLING_PROJECT_ID, getRuntimeName()))\n+        .thenThrow(new NotFoundException());\n+    stubGetWorkspace(WORKSPACE_NS, WORKSPACE_ID, \"test\");\n+\n+    runtimeController.createRuntime(BILLING_PROJECT_ID, null);\n+    verify(userRuntimesApi).createRuntime(eq(BILLING_PROJECT_ID), eq(getRuntimeName()), any());\n+  }\n+\n+  @Test\n+  public void testCreateRuntime_emptyRuntime() throws ApiException {\n+    when(userRuntimesApi.getRuntime(BILLING_PROJECT_ID, getRuntimeName()))\n+        .thenThrow(new NotFoundException());\n+    stubGetWorkspace(WORKSPACE_NS, WORKSPACE_ID, \"test\");\n+\n+    runtimeController.createRuntime(BILLING_PROJECT_ID, new Runtime());\n+    verify(userRuntimesApi).createRuntime(eq(BILLING_PROJECT_ID), eq(getRuntimeName()), any());\n+  }\n+\n+  @Test\n+  public void testCreateRuntime_defaultLabel_dataproc() throws ApiException {\n+    when(userRuntimesApi.getRuntime(BILLING_PROJECT_ID, getRuntimeName()))\n+        .thenThrow(new NotFoundException());\n+    stubGetWorkspace(WORKSPACE_NS, WORKSPACE_ID, \"test\");\n+\n+    runtimeController.createRuntime(\n+        BILLING_PROJECT_ID,\n+        new Runtime().configurationType(RuntimeConfigurationType.DEFAULTDATAPROC));\n+    verify(userRuntimesApi)\n+        .createRuntime(\n+            eq(BILLING_PROJECT_ID), eq(getRuntimeName()), createRuntimeRequestCaptor.capture());\n+\n+    LeonardoCreateRuntimeRequest createRuntimeRequest = createRuntimeRequestCaptor.getValue();\n+    assertThat(((Map<String, String>) createRuntimeRequest.getLabels()).get(\"all-of-us-config\"))\n+        .isEqualTo(\"default-dataproc\");\n+  }\n+\n+  @Test\n+  public void testCreateRuntime_defaultLabel_gce() throws ApiException {\n+    when(userRuntimesApi.getRuntime(BILLING_PROJECT_ID, getRuntimeName()))\n+        .thenThrow(new NotFoundException());\n+    stubGetWorkspace(WORKSPACE_NS, WORKSPACE_ID, \"test\");\n+\n+    runtimeController.createRuntime(\n+        BILLING_PROJECT_ID, new Runtime().configurationType(RuntimeConfigurationType.DEFAULTGCE));\n+    verify(userRuntimesApi)\n+        .createRuntime(\n+            eq(BILLING_PROJECT_ID), eq(getRuntimeName()), createRuntimeRequestCaptor.capture());\n+\n+    LeonardoCreateRuntimeRequest createRuntimeRequest = createRuntimeRequestCaptor.getValue();\n+    assertThat(((Map<String, String>) createRuntimeRequest.getLabels()).get(\"all-of-us-config\"))\n+        .isEqualTo(\"default-gce\");\n+  }\n+\n+  @Test\n+  public void testCreateRuntime_overrideLabel() throws ApiException {\n+    when(userRuntimesApi.getRuntime(BILLING_PROJECT_ID, getRuntimeName()))\n+        .thenThrow(new NotFoundException());\n+    stubGetWorkspace(WORKSPACE_NS, WORKSPACE_ID, \"test\");\n+\n+    runtimeController.createRuntime(\n+        BILLING_PROJECT_ID, new Runtime().configurationType(RuntimeConfigurationType.USEROVERRIDE));\n+    verify(userRuntimesApi)\n+        .createRuntime(\n+            eq(BILLING_PROJECT_ID), eq(getRuntimeName()), createRuntimeRequestCaptor.capture());\n+\n+    LeonardoCreateRuntimeRequest createRuntimeRequest = createRuntimeRequestCaptor.getValue();\n+    assertThat(((Map<String, String>) createRuntimeRequest.getLabels()).get(\"all-of-us-config\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b3fc77fb5ae22650bf507900a246d2eb972c3d9"}, "originalPosition": 329}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTU2MDI5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo0MTozMVrOHT2hUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNTo0Mzo1NFrOHUScRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3ODI1OA==", "bodyText": "The machineType and masterDisk size are still not being passed through on L135-140. The logic should be as follows:\n\nIf Runtime is provided, prefer the masterMachineType and masterDiskSize from the client-specified values.\nElse if !enableCustomRuntimes && clusterOverride != null, prefer that (with current fallback logic for either type or disk)\nelse use the default from config.firecloud.*\n\nOptionally: require a runtime payload be provided if enableCustomRuntimes; potentially this mitigates the need for bullet (2) above", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r490578258", "createdAt": "2020-09-17T21:41:31Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -97,8 +107,18 @@ private LeonardoCreateRuntimeRequest buildCreateRuntimeRequest(\n     nbExtensions.put(\n         \"aou-upload-policy-extension\", assetsBaseUrl + \"/aou-upload-policy-extension.js\");\n \n+    Map<String, String> runtimeLabels = new HashMap<>();\n+    runtimeLabels.put(RUNTIME_LABEL_AOU, \"true\");\n+    runtimeLabels.put(RUNTIME_LABEL_CREATED_BY, userEmail);\n+\n+    if (runtime.getConfigurationType() != null) {\n+      runtimeLabels.put(\n+          RUNTIME_LABEL_AOU_CONFIG,\n+          RUNTIME_CONFIGURATION_TYPE_ENUM_TO_STORAGE_MAP.get(runtime.getConfigurationType()));\n+    }\n+\n     return new LeonardoCreateRuntimeRequest()\n-        .labels(ImmutableMap.of(RUNTIME_LABEL_AOU, \"true\", RUNTIME_LABEL_CREATED_BY, userEmail))\n+        .labels(runtimeLabels)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b3fc77fb5ae22650bf507900a246d2eb972c3d9"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzNTcxOA==", "bodyText": "I thought we said that there isn't too much value in shuttling the default values from the API to the UI just for it to come back. Given that the upcoming UI work will be overwriting that bit of code anyways.\nI'll make the changes but I really don't think either version will block or hamper the upcoming tickets in the sprint, ones I cannot work on ATM until this merges.", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r491035718", "createdAt": "2020-09-18T15:43:54Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -97,8 +107,18 @@ private LeonardoCreateRuntimeRequest buildCreateRuntimeRequest(\n     nbExtensions.put(\n         \"aou-upload-policy-extension\", assetsBaseUrl + \"/aou-upload-policy-extension.js\");\n \n+    Map<String, String> runtimeLabels = new HashMap<>();\n+    runtimeLabels.put(RUNTIME_LABEL_AOU, \"true\");\n+    runtimeLabels.put(RUNTIME_LABEL_CREATED_BY, userEmail);\n+\n+    if (runtime.getConfigurationType() != null) {\n+      runtimeLabels.put(\n+          RUNTIME_LABEL_AOU_CONFIG,\n+          RUNTIME_CONFIGURATION_TYPE_ENUM_TO_STORAGE_MAP.get(runtime.getConfigurationType()));\n+    }\n+\n     return new LeonardoCreateRuntimeRequest()\n-        .labels(ImmutableMap.of(RUNTIME_LABEL_AOU, \"true\", RUNTIME_LABEL_CREATED_BY, userEmail))\n+        .labels(runtimeLabels)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3ODI1OA=="}, "originalCommit": {"oid": "8b3fc77fb5ae22650bf507900a246d2eb972c3d9"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzE2NTc1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODo0ODo1MVrOHUYRtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODo1NzoxM1rOHUYglQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzMTMxNw==", "bodyText": "nit: BadRequestException", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r491131317", "createdAt": "2020-09-18T18:48:51Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -97,39 +112,72 @@ private LeonardoCreateRuntimeRequest buildCreateRuntimeRequest(\n     nbExtensions.put(\n         \"aou-upload-policy-extension\", assetsBaseUrl + \"/aou-upload-policy-extension.js\");\n \n-    return new LeonardoCreateRuntimeRequest()\n-        .labels(ImmutableMap.of(RUNTIME_LABEL_AOU, \"true\", RUNTIME_LABEL_CREATED_BY, userEmail))\n-        .defaultClientId(config.server.oauthClientId)\n-        // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n-        .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n-        .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n-        .userJupyterExtensionConfig(\n-            new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n-        // Matches Terra UI's scopes, see RW-3531 for rationale.\n-        .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n-        .runtimeConfig(\n-            new LeonardoMachineConfig()\n-                .cloudService(CloudServiceEnum.DATAPROC)\n-                .masterDiskSize(\n-                    Optional.ofNullable(clusterOverride.masterDiskSize)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))\n-                .masterMachineType(\n-                    Optional.ofNullable(clusterOverride.machineType)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultMachineType)))\n-        .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n-        .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n-        .customEnvironmentVariables(customEnvironmentVariables);\n+    Map<String, String> runtimeLabels = new HashMap<>();\n+    runtimeLabels.put(RUNTIME_LABEL_AOU, \"true\");\n+    runtimeLabels.put(RUNTIME_LABEL_CREATED_BY, userEmail);\n+\n+    if (runtime.getConfigurationType() != null) {\n+      runtimeLabels.put(\n+          RUNTIME_LABEL_AOU_CONFIG,\n+          RUNTIME_CONFIGURATION_TYPE_ENUM_TO_STORAGE_MAP.get(runtime.getConfigurationType()));\n+    }\n+\n+    LeonardoCreateRuntimeRequest request =\n+        new LeonardoCreateRuntimeRequest()\n+            .labels(runtimeLabels)\n+            .defaultClientId(config.server.oauthClientId)\n+            // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n+            .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n+            .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n+            .userJupyterExtensionConfig(\n+                new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n+            // Matches Terra UI's scopes, see RW-3531 for rationale.\n+            .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n+            .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n+            .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n+            .customEnvironmentVariables(customEnvironmentVariables);\n+\n+    if (workbenchConfigProvider.get().featureFlags.enableCustomRuntimes) {\n+      if (runtime.getGceConfig() == null && runtime.getDataprocConfig() == null) {\n+        // There's probably a code smell here where I'm throwing an exception that we're only\n+        // expecting to handle as a response from Leo but this was the quickest path forward for now.\n+        throw new ApiException(400, \"Either a GceConfig or DataprocConfig must be provided\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34d03341f61b0b24b6edc33fc2c637818cfc223e"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzNTEyNQ==", "bodyText": "Tried that first but it doesn't work because the LeoRetryHandler tries to cast it into an ApiException. I think the problem here is that LeoRetryHandler has the assumption that its basically just a shim for calls to Leo APIs but we've added enough logic here that we can throw our own exceptions.", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r491135125", "createdAt": "2020-09-18T18:57:13Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -97,39 +112,72 @@ private LeonardoCreateRuntimeRequest buildCreateRuntimeRequest(\n     nbExtensions.put(\n         \"aou-upload-policy-extension\", assetsBaseUrl + \"/aou-upload-policy-extension.js\");\n \n-    return new LeonardoCreateRuntimeRequest()\n-        .labels(ImmutableMap.of(RUNTIME_LABEL_AOU, \"true\", RUNTIME_LABEL_CREATED_BY, userEmail))\n-        .defaultClientId(config.server.oauthClientId)\n-        // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n-        .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n-        .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n-        .userJupyterExtensionConfig(\n-            new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n-        // Matches Terra UI's scopes, see RW-3531 for rationale.\n-        .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n-        .runtimeConfig(\n-            new LeonardoMachineConfig()\n-                .cloudService(CloudServiceEnum.DATAPROC)\n-                .masterDiskSize(\n-                    Optional.ofNullable(clusterOverride.masterDiskSize)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))\n-                .masterMachineType(\n-                    Optional.ofNullable(clusterOverride.machineType)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultMachineType)))\n-        .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n-        .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n-        .customEnvironmentVariables(customEnvironmentVariables);\n+    Map<String, String> runtimeLabels = new HashMap<>();\n+    runtimeLabels.put(RUNTIME_LABEL_AOU, \"true\");\n+    runtimeLabels.put(RUNTIME_LABEL_CREATED_BY, userEmail);\n+\n+    if (runtime.getConfigurationType() != null) {\n+      runtimeLabels.put(\n+          RUNTIME_LABEL_AOU_CONFIG,\n+          RUNTIME_CONFIGURATION_TYPE_ENUM_TO_STORAGE_MAP.get(runtime.getConfigurationType()));\n+    }\n+\n+    LeonardoCreateRuntimeRequest request =\n+        new LeonardoCreateRuntimeRequest()\n+            .labels(runtimeLabels)\n+            .defaultClientId(config.server.oauthClientId)\n+            // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n+            .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n+            .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n+            .userJupyterExtensionConfig(\n+                new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n+            // Matches Terra UI's scopes, see RW-3531 for rationale.\n+            .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n+            .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n+            .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n+            .customEnvironmentVariables(customEnvironmentVariables);\n+\n+    if (workbenchConfigProvider.get().featureFlags.enableCustomRuntimes) {\n+      if (runtime.getGceConfig() == null && runtime.getDataprocConfig() == null) {\n+        // There's probably a code smell here where I'm throwing an exception that we're only\n+        // expecting to handle as a response from Leo but this was the quickest path forward for now.\n+        throw new ApiException(400, \"Either a GceConfig or DataprocConfig must be provided\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzMTMxNw=="}, "originalCommit": {"oid": "34d03341f61b0b24b6edc33fc2c637818cfc223e"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzE2ODQzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODo0OTo0MlrOHUYTWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOTowOTowNVrOHUY1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzMTczNg==", "bodyText": "opt: Ideally I would probably move this validation logic to the controller method. This could also wait for some of the dust to settle as well", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r491131736", "createdAt": "2020-09-18T18:49:42Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -97,39 +112,72 @@ private LeonardoCreateRuntimeRequest buildCreateRuntimeRequest(\n     nbExtensions.put(\n         \"aou-upload-policy-extension\", assetsBaseUrl + \"/aou-upload-policy-extension.js\");\n \n-    return new LeonardoCreateRuntimeRequest()\n-        .labels(ImmutableMap.of(RUNTIME_LABEL_AOU, \"true\", RUNTIME_LABEL_CREATED_BY, userEmail))\n-        .defaultClientId(config.server.oauthClientId)\n-        // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n-        .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n-        .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n-        .userJupyterExtensionConfig(\n-            new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n-        // Matches Terra UI's scopes, see RW-3531 for rationale.\n-        .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n-        .runtimeConfig(\n-            new LeonardoMachineConfig()\n-                .cloudService(CloudServiceEnum.DATAPROC)\n-                .masterDiskSize(\n-                    Optional.ofNullable(clusterOverride.masterDiskSize)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))\n-                .masterMachineType(\n-                    Optional.ofNullable(clusterOverride.machineType)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultMachineType)))\n-        .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n-        .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n-        .customEnvironmentVariables(customEnvironmentVariables);\n+    Map<String, String> runtimeLabels = new HashMap<>();\n+    runtimeLabels.put(RUNTIME_LABEL_AOU, \"true\");\n+    runtimeLabels.put(RUNTIME_LABEL_CREATED_BY, userEmail);\n+\n+    if (runtime.getConfigurationType() != null) {\n+      runtimeLabels.put(\n+          RUNTIME_LABEL_AOU_CONFIG,\n+          RUNTIME_CONFIGURATION_TYPE_ENUM_TO_STORAGE_MAP.get(runtime.getConfigurationType()));\n+    }\n+\n+    LeonardoCreateRuntimeRequest request =\n+        new LeonardoCreateRuntimeRequest()\n+            .labels(runtimeLabels)\n+            .defaultClientId(config.server.oauthClientId)\n+            // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n+            .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n+            .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n+            .userJupyterExtensionConfig(\n+                new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n+            // Matches Terra UI's scopes, see RW-3531 for rationale.\n+            .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n+            .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n+            .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n+            .customEnvironmentVariables(customEnvironmentVariables);\n+\n+    if (workbenchConfigProvider.get().featureFlags.enableCustomRuntimes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34d03341f61b0b24b6edc33fc2c637818cfc223e"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0MDQwMw==", "bodyText": "oh actually, that would fix the ApiException issue too. I'll do that.", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r491140403", "createdAt": "2020-09-18T19:09:05Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClientImpl.java", "diffHunk": "@@ -97,39 +112,72 @@ private LeonardoCreateRuntimeRequest buildCreateRuntimeRequest(\n     nbExtensions.put(\n         \"aou-upload-policy-extension\", assetsBaseUrl + \"/aou-upload-policy-extension.js\");\n \n-    return new LeonardoCreateRuntimeRequest()\n-        .labels(ImmutableMap.of(RUNTIME_LABEL_AOU, \"true\", RUNTIME_LABEL_CREATED_BY, userEmail))\n-        .defaultClientId(config.server.oauthClientId)\n-        // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n-        .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n-        .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n-        .userJupyterExtensionConfig(\n-            new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n-        // Matches Terra UI's scopes, see RW-3531 for rationale.\n-        .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n-        .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n-        .runtimeConfig(\n-            new LeonardoMachineConfig()\n-                .cloudService(CloudServiceEnum.DATAPROC)\n-                .masterDiskSize(\n-                    Optional.ofNullable(clusterOverride.masterDiskSize)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultDiskSizeGb))\n-                .masterMachineType(\n-                    Optional.ofNullable(clusterOverride.machineType)\n-                        .orElse(config.firecloud.notebookRuntimeDefaultMachineType)))\n-        .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n-        .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n-        .customEnvironmentVariables(customEnvironmentVariables);\n+    Map<String, String> runtimeLabels = new HashMap<>();\n+    runtimeLabels.put(RUNTIME_LABEL_AOU, \"true\");\n+    runtimeLabels.put(RUNTIME_LABEL_CREATED_BY, userEmail);\n+\n+    if (runtime.getConfigurationType() != null) {\n+      runtimeLabels.put(\n+          RUNTIME_LABEL_AOU_CONFIG,\n+          RUNTIME_CONFIGURATION_TYPE_ENUM_TO_STORAGE_MAP.get(runtime.getConfigurationType()));\n+    }\n+\n+    LeonardoCreateRuntimeRequest request =\n+        new LeonardoCreateRuntimeRequest()\n+            .labels(runtimeLabels)\n+            .defaultClientId(config.server.oauthClientId)\n+            // Note: Filenames must be kept in sync with files in api/src/main/webapp/static.\n+            .jupyterUserScriptUri(assetsBaseUrl + \"/initialize_notebook_runtime.sh\")\n+            .jupyterStartUserScriptUri(assetsBaseUrl + \"/start_notebook_runtime.sh\")\n+            .userJupyterExtensionConfig(\n+                new LeonardoUserJupyterExtensionConfig().nbExtensions(nbExtensions))\n+            // Matches Terra UI's scopes, see RW-3531 for rationale.\n+            .addScopesItem(\"https://www.googleapis.com/auth/cloud-platform\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.email\")\n+            .addScopesItem(\"https://www.googleapis.com/auth/userinfo.profile\")\n+            .toolDockerImage(workbenchConfigProvider.get().firecloud.jupyterDockerImage)\n+            .welderDockerImage(workbenchConfigProvider.get().firecloud.welderDockerImage)\n+            .customEnvironmentVariables(customEnvironmentVariables);\n+\n+    if (workbenchConfigProvider.get().featureFlags.enableCustomRuntimes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzMTczNg=="}, "originalCommit": {"oid": "34d03341f61b0b24b6edc33fc2c637818cfc223e"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzE3NjYyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/LeonardoMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODo1Mjo0M1rOHUYYdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODo1OTowOFrOHUYj3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzMzA0NA==", "bodyText": "Would @aftermapping + ignore be cleaner here?", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r491133044", "createdAt": "2020-09-18T18:52:43Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/LeonardoMapper.java", "diffHunk": "@@ -25,8 +25,23 @@\n \n   DataprocConfig toDataprocConfig(LeonardoMachineConfig leonardoMachineConfig);\n \n+  @Mapping(\n+      target = \"cloudService\",\n+      // I wanted to use constant/defaultValue here but MapStruct will only accept a static string,\n+      // not an Enum value. This is a problem because we have 3 definitions of `CloudServiceEnum`\n+      // and MapStruct doesn't know that this mapper should use the one from LeonardoMachineConfig\n+      // while the mapper for LeonardoGceConfig should use its own `CloudServiceEnum` class.\n+      // This `expression` field feels kind of hacky since I'm expressing code as a string but", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34d03341f61b0b24b6edc33fc2c637818cfc223e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzNTk2NQ==", "bodyText": "Hmm, I went with this because its more concise but I can switch over since it would allow for code inspection.", "url": "https://github.com/all-of-us/workbench/pull/4012#discussion_r491135965", "createdAt": "2020-09-18T18:59:08Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/LeonardoMapper.java", "diffHunk": "@@ -25,8 +25,23 @@\n \n   DataprocConfig toDataprocConfig(LeonardoMachineConfig leonardoMachineConfig);\n \n+  @Mapping(\n+      target = \"cloudService\",\n+      // I wanted to use constant/defaultValue here but MapStruct will only accept a static string,\n+      // not an Enum value. This is a problem because we have 3 definitions of `CloudServiceEnum`\n+      // and MapStruct doesn't know that this mapper should use the one from LeonardoMachineConfig\n+      // while the mapper for LeonardoGceConfig should use its own `CloudServiceEnum` class.\n+      // This `expression` field feels kind of hacky since I'm expressing code as a string but", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzMzA0NA=="}, "originalCommit": {"oid": "34d03341f61b0b24b6edc33fc2c637818cfc223e"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4099, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}