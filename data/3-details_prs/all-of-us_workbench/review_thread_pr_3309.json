{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NzkwMzcw", "number": 3309, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjo1OTozOVrODsJskQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzo0NDoxM1rODsyJzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjIyODAxOnYy", "diffSide": "RIGHT", "path": "api/config/config_perf.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjo1OTozOVrOF86Chw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzoyMjo1MFrOF865lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwOTc5OQ==", "bodyText": "Will this cause issues for the load tests? or does the test captcha always pass?", "url": "https://github.com/all-of-us/workbench/pull/3309#discussion_r399409799", "createdAt": "2020-03-27T16:59:39Z", "author": {"login": "calbach"}, "path": "api/config/config_perf.json", "diffHunk": "@@ -113,6 +113,6 @@\n     \"exportObjectsPerTask\": 10\n   },\n   \"captcha\": {\n-    \"enableCaptcha\": false\n+    \"enableCaptcha\": true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de693d21e800cf55b84296097d5f86930639f11c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyMzg5NQ==", "bodyText": "https://developers.google.com/recaptcha/docs/faq#id-like-to-run-automated-tests-with-recaptcha.-what-should-i-do", "url": "https://github.com/all-of-us/workbench/pull/3309#discussion_r399423895", "createdAt": "2020-03-27T17:22:50Z", "author": {"login": "NehaBroad"}, "path": "api/config/config_perf.json", "diffHunk": "@@ -113,6 +113,6 @@\n     \"exportObjectsPerTask\": 10\n   },\n   \"captcha\": {\n-    \"enableCaptcha\": false\n+    \"enableCaptcha\": true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwOTc5OQ=="}, "originalCommit": {"oid": "de693d21e800cf55b84296097d5f86930639f11c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjIzNTQzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/captcha/CaptchaVerificationServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzowMTozMFrOF86HTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzo1NDoyMlrOF88DzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQxMTAyMQ==", "bodyText": "I would rather drive this from a config value per environment, unless there's something I'm missing. This list approach seems brittle to me.", "url": "https://github.com/all-of-us/workbench/pull/3309#discussion_r399411021", "createdAt": "2020-03-27T17:01:30Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/captcha/CaptchaVerificationServiceImpl.java", "diffHunk": "@@ -17,7 +21,21 @@\n \n   final String urlPattern = \"https://%s/login\";\n \n-  final String localHostUrlPattern = \"http://%s:4200/login\";\n+  final List<String> nonTestCaptchaURLs =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de693d21e800cf55b84296097d5f86930639f11c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0Mjg5Mw==", "bodyText": "I was not sure if just checking google test key should be enough for test/staging/perf and local. Normally for captcha verification we would check site key + host matches the url (the way we are doing it for prod and staable). But again since i am checking url against the config entry i can just create a new entry to test if the environment is using testCaptcha", "url": "https://github.com/all-of-us/workbench/pull/3309#discussion_r399442893", "createdAt": "2020-03-27T17:54:22Z", "author": {"login": "NehaBroad"}, "path": "api/src/main/java/org/pmiops/workbench/captcha/CaptchaVerificationServiceImpl.java", "diffHunk": "@@ -17,7 +21,21 @@\n \n   final String urlPattern = \"https://%s/login\";\n \n-  final String localHostUrlPattern = \"http://%s:4200/login\";\n+  final List<String> nonTestCaptchaURLs =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQxMTAyMQ=="}, "originalCommit": {"oid": "de693d21e800cf55b84296097d5f86930639f11c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjI0ODI5OnYy", "diffSide": "RIGHT", "path": "ui/src/environments/environment.prod.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzowNDozOVrOF86PRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzo1ODo1OVrOF9E6pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQxMzA2MA==", "bodyText": "Existing issue, but it looks like this is redefining a value that's set in the server-side config. Probably better to pass this from the server. Fine as a follow-up if this is large, or maybe we could just wait to delete this, depending on how long we think the flag will stay around.", "url": "https://github.com/all-of-us/workbench/pull/3309#discussion_r399413060", "createdAt": "2020-03-27T17:04:39Z", "author": {"login": "calbach"}, "path": "ui/src/environments/environment.prod.ts", "diffHunk": "@@ -19,7 +19,7 @@ export const environment: Environment = {\n   trainingUrl: 'https://aou.nnlm.gov',\n   inactivityTimeoutSeconds: 30 * 60,\n   inactivityWarningBeforeSeconds: 5 * 60,\n-  enableCaptcha: false,\n+  enableCaptcha: true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de693d21e800cf55b84296097d5f86930639f11c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUxNzU0OQ==", "bodyText": "hmm since it will be part of next weeks release, i can have a clean up PR ready for next week?", "url": "https://github.com/all-of-us/workbench/pull/3309#discussion_r399517549", "createdAt": "2020-03-27T20:19:51Z", "author": {"login": "NehaBroad"}, "path": "ui/src/environments/environment.prod.ts", "diffHunk": "@@ -19,7 +19,7 @@ export const environment: Environment = {\n   trainingUrl: 'https://aou.nnlm.gov',\n   inactivityTimeoutSeconds: 30 * 60,\n   inactivityWarningBeforeSeconds: 5 * 60,\n-  enableCaptcha: false,\n+  enableCaptcha: true,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQxMzA2MA=="}, "originalCommit": {"oid": "de693d21e800cf55b84296097d5f86930639f11c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4ODAwNg==", "bodyText": "Sorry, forgot to reply ehre - yes that's fine", "url": "https://github.com/all-of-us/workbench/pull/3309#discussion_r399588006", "createdAt": "2020-03-27T23:58:59Z", "author": {"login": "calbach"}, "path": "ui/src/environments/environment.prod.ts", "diffHunk": "@@ -19,7 +19,7 @@ export const environment: Environment = {\n   trainingUrl: 'https://aou.nnlm.gov',\n   inactivityTimeoutSeconds: 30 * 60,\n   inactivityWarningBeforeSeconds: 5 * 60,\n-  enableCaptcha: false,\n+  enableCaptcha: true,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQxMzA2MA=="}, "originalCommit": {"oid": "de693d21e800cf55b84296097d5f86930639f11c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjI1Mzk5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/captcha/CaptchaVerificationServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzowNjoxNFrOF86S9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzowNjoxNFrOF86S9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQxNDAwNg==", "bodyText": "I would just add throws Exception to the unit test method definition throughout and remove these catches, I don't think the approach here offers any benefit over that", "url": "https://github.com/all-of-us/workbench/pull/3309#discussion_r399414006", "createdAt": "2020-03-27T17:06:14Z", "author": {"login": "calbach"}, "path": "api/src/test/java/org/pmiops/workbench/captcha/CaptchaVerificationServiceTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package org.pmiops.workbench.captcha;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import java.io.IOException;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.pmiops.workbench.api.BaseControllerTest;\n+import org.pmiops.workbench.captcha.api.CaptchaApi;\n+import org.pmiops.workbench.captcha.model.CaptchaVerificationResponse;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Import;\n+\n+public class CaptchaVerificationServiceTest extends BaseControllerTest {\n+\n+  final String prodAllOfUsUrl = \"https://workbench.researchallofus.org/login\";\n+  final String testAllOfUsUrl = \"https://all-of-us-workbench-test.appspot.com\";\n+  final String responseToken = \"responseToken\";\n+\n+  @MockBean private CloudStorageService cloudStorageService;\n+  @MockBean private WorkbenchConfig configProvider;\n+  @MockBean private CaptchaApi captchaApiProvider;\n+\n+  @MockBean private WorkbenchConfig.AdminConfig adminConfig;\n+  @Autowired private CaptchaVerificationServiceImpl captchaVerificationService;\n+\n+  @TestConfiguration\n+  @Import({CaptchaVerificationServiceImpl.class, CaptchaApi.class})\n+  static class Configuration {}\n+\n+  @Before\n+  @Override\n+  public void setUp() throws IOException {\n+    super.setUp();\n+    Mockito.when(cloudStorageService.getCaptchaServerKey()).thenReturn(\"key\");\n+    mockCaptchaResponse(\"hostName\", true);\n+  }\n+\n+  private void mockCaptchaResponse(String hostName, boolean success) {\n+    CaptchaVerificationResponse response = new CaptchaVerificationResponse();\n+    response.setHostname(hostName);\n+    response.setSuccess(true);\n+    try {\n+      Mockito.when(captchaApiProvider.verify(\"key\", responseToken)).thenReturn(response);\n+    } catch (ApiException ex) {\n+\n+    }\n+  }\n+\n+  @Test\n+  public void testCreateAccount_invalidHostName() {\n+    try {\n+      // This should return false since the host name can either be google test hostname or one of\n+      // AllOfUs urls\n+      captchaVerificationService.mockLoginUrl(\"hostname\");\n+      boolean captchaSuccess = captchaVerificationService.verifyCaptcha(responseToken);\n+      assertThat(captchaSuccess).isFalse();\n+    } catch (ApiException e) {\n+      e.printStackTrace();\n+      assertThat(false);\n+    }\n+  }\n+\n+  /**\n+   * For any of the AllOfUs urls not using captcha test keys, the hostName should match exactly with\n+   * that send by google Captcha server\n+   */\n+  @Test\n+  public void testCreateAccount_nonCaptchaTestHosts() {\n+    try {\n+      mockCaptchaResponse(\"workbench.researchallofus.org\", true);\n+      captchaVerificationService.mockLoginUrl(prodAllOfUsUrl);\n+      boolean captchaSuccess = captchaVerificationService.verifyCaptcha(responseToken);\n+      assertThat(captchaSuccess).isTrue();\n+    } catch (ApiException e) {\n+      e.printStackTrace();\n+      assertThat(false);\n+    }\n+  }\n+\n+  @Test\n+  public void testCreateAccount_googleTestKey() {\n+    try {\n+      // AllOfUs prod url should not be using google test captcha keys\n+      mockCaptchaResponse(\"testkey.google.com\", true);\n+      captchaVerificationService.mockLoginUrl(prodAllOfUsUrl);\n+      boolean captchaSuccess = captchaVerificationService.verifyCaptcha(responseToken);\n+      assertThat(captchaSuccess).isFalse();\n+\n+      // AllOfUs test url should be using google test captcha keys\n+      captchaVerificationService.mockLoginUrl(testAllOfUsUrl);\n+      captchaSuccess = captchaVerificationService.verifyCaptcha(responseToken);\n+      assertThat(captchaSuccess).isTrue();\n+    } catch (ApiException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de693d21e800cf55b84296097d5f86930639f11c"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjI1OTg5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/captcha/CaptchaVerificationServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzowNzo0MVrOF86WpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzowNzo0MVrOF86WpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQxNDk0OQ==", "bodyText": "again, I'd just add the throws", "url": "https://github.com/all-of-us/workbench/pull/3309#discussion_r399414949", "createdAt": "2020-03-27T17:07:41Z", "author": {"login": "calbach"}, "path": "api/src/test/java/org/pmiops/workbench/captcha/CaptchaVerificationServiceTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package org.pmiops.workbench.captcha;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import java.io.IOException;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.pmiops.workbench.api.BaseControllerTest;\n+import org.pmiops.workbench.captcha.api.CaptchaApi;\n+import org.pmiops.workbench.captcha.model.CaptchaVerificationResponse;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Import;\n+\n+public class CaptchaVerificationServiceTest extends BaseControllerTest {\n+\n+  final String prodAllOfUsUrl = \"https://workbench.researchallofus.org/login\";\n+  final String testAllOfUsUrl = \"https://all-of-us-workbench-test.appspot.com\";\n+  final String responseToken = \"responseToken\";\n+\n+  @MockBean private CloudStorageService cloudStorageService;\n+  @MockBean private WorkbenchConfig configProvider;\n+  @MockBean private CaptchaApi captchaApiProvider;\n+\n+  @MockBean private WorkbenchConfig.AdminConfig adminConfig;\n+  @Autowired private CaptchaVerificationServiceImpl captchaVerificationService;\n+\n+  @TestConfiguration\n+  @Import({CaptchaVerificationServiceImpl.class, CaptchaApi.class})\n+  static class Configuration {}\n+\n+  @Before\n+  @Override\n+  public void setUp() throws IOException {\n+    super.setUp();\n+    Mockito.when(cloudStorageService.getCaptchaServerKey()).thenReturn(\"key\");\n+    mockCaptchaResponse(\"hostName\", true);\n+  }\n+\n+  private void mockCaptchaResponse(String hostName, boolean success) {\n+    CaptchaVerificationResponse response = new CaptchaVerificationResponse();\n+    response.setHostname(hostName);\n+    response.setSuccess(true);\n+    try {\n+      Mockito.when(captchaApiProvider.verify(\"key\", responseToken)).thenReturn(response);\n+    } catch (ApiException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de693d21e800cf55b84296097d5f86930639f11c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjI3MzI4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/captcha/CaptchaVerificationServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzoxMToyNFrOF86fGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzoxMToyNFrOF86fGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQxNzExMw==", "bodyText": "Could you add some comments that indicate what the behavior is for a \"test captcha\"? Are these just two separate keys,  or does it just allow any captcha input to pass?", "url": "https://github.com/all-of-us/workbench/pull/3309#discussion_r399417113", "createdAt": "2020-03-27T17:11:24Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/captcha/CaptchaVerificationServiceImpl.java", "diffHunk": "@@ -17,7 +21,21 @@\n \n   final String urlPattern = \"https://%s/login\";\n \n-  final String localHostUrlPattern = \"http://%s:4200/login\";\n+  final List<String> nonTestCaptchaURLs =\n+      new ArrayList<String>(\n+          Arrays.asList(\n+              \"https://workbench.researchallofus.org/login\",\n+              \"https://all-of-us-rw-stable.appspot.com/login\"));\n+\n+  final List<String> testCaptchaURLs =\n+      new ArrayList<String>(\n+          Arrays.asList(\n+              \"http://localhost:4200/login\",\n+              \"https://all-of-us-workbench-test.appspot.com\",\n+              \"https://all-of-us-rw-staging.appspot.com/login\",\n+              \"https://all-of-us-rw-perf.appspot.com/login\"));\n+\n+  final String googleTestHost = \"testkey.google.com\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de693d21e800cf55b84296097d5f86930639f11c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzAwNjI4OnYy", "diffSide": "RIGHT", "path": "api/config/config_stable.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo1ODo1OVrOF9Bqiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo1ODo1OVrOF9Bqiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzNDczMQ==", "bodyText": "stable should be the same as prod here", "url": "https://github.com/all-of-us/workbench/pull/3309#discussion_r399534731", "createdAt": "2020-03-27T20:58:59Z", "author": {"login": "calbach"}, "path": "api/config/config_stable.json", "diffHunk": "@@ -107,6 +107,7 @@\n     \"exportObjectsPerTask\" : 10\n   },\n   \"captcha\": {\n-    \"enableCaptcha\": false\n+    \"enableCaptcha\": true,\n+    \"useTestCaptcha\": true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f354964cf032cb3a438419974211b40bdeb1e3e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzAwOTYzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/captcha/CaptchaVerificationServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMTowMDoxNVrOF9Bsqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMTowMDoxNVrOF9Bsqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzNTI3NA==", "bodyText": "This isn't a controller, not sure it should be extending BaseControllerTest", "url": "https://github.com/all-of-us/workbench/pull/3309#discussion_r399535274", "createdAt": "2020-03-27T21:00:15Z", "author": {"login": "calbach"}, "path": "api/src/test/java/org/pmiops/workbench/captcha/CaptchaVerificationServiceTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package org.pmiops.workbench.captcha;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import java.io.IOException;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.pmiops.workbench.api.BaseControllerTest;\n+import org.pmiops.workbench.captcha.api.CaptchaApi;\n+import org.pmiops.workbench.captcha.model.CaptchaVerificationResponse;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Import;\n+\n+public class CaptchaVerificationServiceTest extends BaseControllerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f354964cf032cb3a438419974211b40bdeb1e3e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzAxNzE4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/captcha/CaptchaVerificationServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMTowMzoxMFrOF9BxZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMTowMzoxMFrOF9BxZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzNjQ4Ng==", "bodyText": "This is not ideal, should just remove these and use the same approach that is used in this test case (define a static WorkbenchConfig, then provide a prorotype scoped bean of it): \n  \n    \n      workbench/api/src/test/java/org/pmiops/workbench/api/SumoLogicControllerTest.java\n    \n    \n         Line 42\n      in\n      6103697\n    \n    \n    \n    \n\n        \n          \n           private static WorkbenchConfig config; \n        \n    \n  \n\n\nIn the individual test cases, override the values directly on the static config with the config you want.", "url": "https://github.com/all-of-us/workbench/pull/3309#discussion_r399536486", "createdAt": "2020-03-27T21:03:10Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/captcha/CaptchaVerificationServiceImpl.java", "diffHunk": "@@ -36,6 +41,21 @@ public CaptchaVerificationServiceImpl(\n     this.captchaApiProvider = captchaApiProvider;\n   }\n \n+  @VisibleForTesting\n+  public void mockLoginUrl(String loginUrl) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f354964cf032cb3a438419974211b40bdeb1e3e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzA5NTMzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/captcha/CaptchaVerificationServiceImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMTozNDoyNFrOF9ChWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzoxNTozN1rOF9EWQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0ODc2Mg==", "bodyText": "Should you just compare this to config.server.uiBaseUrl, or at least - extract the host from there ?", "url": "https://github.com/all-of-us/workbench/pull/3309#discussion_r399548762", "createdAt": "2020-03-27T21:34:24Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/captcha/CaptchaVerificationServiceImpl.java", "diffHunk": "@@ -60,11 +80,17 @@ public boolean verifyCaptcha(String responseToken) throws ApiException {\n     }\n     String captchaHostname = response.getHostname();\n     String uiUrl = configProvider.get().admin.loginUrl;\n+    boolean usingTestCaptcha = configProvider.get().captcha.useTestCaptcha;\n+    boolean captchaHostNameMatchUI = false;\n \n-    // check if the UI URL has the host as send by Captcha Response\n-    boolean captchaHostNameMatchUI =\n-        String.format(urlPattern, captchaHostname).equals(uiUrl)\n-            || String.format(localHostUrlPattern, captchaHostname).equals(uiUrl);\n+    // Production/Stable should  not use google test Key and the domainName should match with the\n+    // one return from Captcha Response\n+    if (!usingTestCaptcha) {\n+      // check if the UI URL has the host as send by Captcha Response\n+      captchaHostNameMatchUI = String.format(urlPattern, captchaHostname).equals(uiUrl);\n+    } else {\n+      captchaHostNameMatchUI = captchaHostname.equals(googleTestHost);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f354964cf032cb3a438419974211b40bdeb1e3e"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3NzM5MQ==", "bodyText": "i was initially checking the config.loginUrl to be one of test/login/stable but since it was basically checking just the config variable to constants i was not sure if it was adding anything.", "url": "https://github.com/all-of-us/workbench/pull/3309#discussion_r399577391", "createdAt": "2020-03-27T23:10:00Z", "author": {"login": "NehaBroad"}, "path": "api/src/main/java/org/pmiops/workbench/captcha/CaptchaVerificationServiceImpl.java", "diffHunk": "@@ -60,11 +80,17 @@ public boolean verifyCaptcha(String responseToken) throws ApiException {\n     }\n     String captchaHostname = response.getHostname();\n     String uiUrl = configProvider.get().admin.loginUrl;\n+    boolean usingTestCaptcha = configProvider.get().captcha.useTestCaptcha;\n+    boolean captchaHostNameMatchUI = false;\n \n-    // check if the UI URL has the host as send by Captcha Response\n-    boolean captchaHostNameMatchUI =\n-        String.format(urlPattern, captchaHostname).equals(uiUrl)\n-            || String.format(localHostUrlPattern, captchaHostname).equals(uiUrl);\n+    // Production/Stable should  not use google test Key and the domainName should match with the\n+    // one return from Captcha Response\n+    if (!usingTestCaptcha) {\n+      // check if the UI URL has the host as send by Captcha Response\n+      captchaHostNameMatchUI = String.format(urlPattern, captchaHostname).equals(uiUrl);\n+    } else {\n+      captchaHostNameMatchUI = captchaHostname.equals(googleTestHost);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0ODc2Mg=="}, "originalCommit": {"oid": "9f354964cf032cb3a438419974211b40bdeb1e3e"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3ODY5MA==", "bodyText": "https://github.com/all-of-us/workbench/blob/fd85f5755b299cfa8ac1f092dc9752ca87ba4d44/api/src/main/java/org/pmiops/workbench/captcha/CaptchaVerificationServiceImpl.java L100", "url": "https://github.com/all-of-us/workbench/pull/3309#discussion_r399578690", "createdAt": "2020-03-27T23:15:37Z", "author": {"login": "NehaBroad"}, "path": "api/src/main/java/org/pmiops/workbench/captcha/CaptchaVerificationServiceImpl.java", "diffHunk": "@@ -60,11 +80,17 @@ public boolean verifyCaptcha(String responseToken) throws ApiException {\n     }\n     String captchaHostname = response.getHostname();\n     String uiUrl = configProvider.get().admin.loginUrl;\n+    boolean usingTestCaptcha = configProvider.get().captcha.useTestCaptcha;\n+    boolean captchaHostNameMatchUI = false;\n \n-    // check if the UI URL has the host as send by Captcha Response\n-    boolean captchaHostNameMatchUI =\n-        String.format(urlPattern, captchaHostname).equals(uiUrl)\n-            || String.format(localHostUrlPattern, captchaHostname).equals(uiUrl);\n+    // Production/Stable should  not use google test Key and the domainName should match with the\n+    // one return from Captcha Response\n+    if (!usingTestCaptcha) {\n+      // check if the UI URL has the host as send by Captcha Response\n+      captchaHostNameMatchUI = String.format(urlPattern, captchaHostname).equals(uiUrl);\n+    } else {\n+      captchaHostNameMatchUI = captchaHostname.equals(googleTestHost);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0ODc2Mg=="}, "originalCommit": {"oid": "9f354964cf032cb3a438419974211b40bdeb1e3e"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTgxNzgwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/captcha/CaptchaVerificationServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMjo0OToxNVrOF9YB5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzowMToxM1rOF9b-_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwMTE1Ng==", "bodyText": "i have added the logic again for testing the urls that are using test google captha. Since the host from the captcha service will always be testkey.google.com, check if the ui url will be one of the environment using test captcha test/local/staging and perf. Let me know if this makes sense/ is there any other check that i can add.", "url": "https://github.com/all-of-us/workbench/pull/3309#discussion_r399901156", "createdAt": "2020-03-30T02:49:15Z", "author": {"login": "NehaBroad"}, "path": "api/src/main/java/org/pmiops/workbench/captcha/CaptchaVerificationServiceImpl.java", "diffHunk": "@@ -60,11 +91,20 @@ public boolean verifyCaptcha(String responseToken) throws ApiException {\n     }\n     String captchaHostname = response.getHostname();\n     String uiUrl = configProvider.get().admin.loginUrl;\n+    boolean usingTestCaptcha = configProvider.get().captcha.useTestCaptcha;\n+    boolean captchaHostNameMatchUI = false;\n \n-    // check if the UI URL has the host as send by Captcha Response\n-    boolean captchaHostNameMatchUI =\n-        String.format(urlPattern, captchaHostname).equals(uiUrl)\n-            || String.format(localHostUrlPattern, captchaHostname).equals(uiUrl);\n+    // Production/Stable should  not use google test Key and the domainName should match with the\n+    // one return from Captcha Response\n+    if (!usingTestCaptcha) {\n+      // check if the UI URL has the host as send by Captcha Response\n+      captchaHostNameMatchUI = String.format(urlPattern, captchaHostname).equals(uiUrl);\n+    } else {\n+      // If URL is using google test key hence the host return will always be testkey.google.com\n+      // hence check if the UI url in config matches one of AllOfUs urls(local/test/staging/perf)\n+      captchaHostNameMatchUI =\n+          captchaHostname.equals(googleTestHost) && testCaptchaURLs.contains(uiUrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2644e457cc3dc108b7b476c3fba1b50a172dedea"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2NTk1MA==", "bodyText": "Sorry, I still don't understand why you need to hardcode a list of URLs here. Can you not use the combination of config.server.uiBaseUrl with usingTestCaptcha to make the determination?", "url": "https://github.com/all-of-us/workbench/pull/3309#discussion_r399965950", "createdAt": "2020-03-30T07:01:13Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/captcha/CaptchaVerificationServiceImpl.java", "diffHunk": "@@ -60,11 +91,20 @@ public boolean verifyCaptcha(String responseToken) throws ApiException {\n     }\n     String captchaHostname = response.getHostname();\n     String uiUrl = configProvider.get().admin.loginUrl;\n+    boolean usingTestCaptcha = configProvider.get().captcha.useTestCaptcha;\n+    boolean captchaHostNameMatchUI = false;\n \n-    // check if the UI URL has the host as send by Captcha Response\n-    boolean captchaHostNameMatchUI =\n-        String.format(urlPattern, captchaHostname).equals(uiUrl)\n-            || String.format(localHostUrlPattern, captchaHostname).equals(uiUrl);\n+    // Production/Stable should  not use google test Key and the domainName should match with the\n+    // one return from Captcha Response\n+    if (!usingTestCaptcha) {\n+      // check if the UI URL has the host as send by Captcha Response\n+      captchaHostNameMatchUI = String.format(urlPattern, captchaHostname).equals(uiUrl);\n+    } else {\n+      // If URL is using google test key hence the host return will always be testkey.google.com\n+      // hence check if the UI url in config matches one of AllOfUs urls(local/test/staging/perf)\n+      captchaHostNameMatchUI =\n+          captchaHostname.equals(googleTestHost) && testCaptchaURLs.contains(uiUrl);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwMTE1Ng=="}, "originalCommit": {"oid": "2644e457cc3dc108b7b476c3fba1b50a172dedea"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mjg1NjQ2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/captcha/CaptchaVerificationServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzo0NDoxM1rOF91E0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzo0NDoxM1rOF91E0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3NzA0MA==", "bodyText": "This catch should no longer be necessary", "url": "https://github.com/all-of-us/workbench/pull/3309#discussion_r400377040", "createdAt": "2020-03-30T17:44:13Z", "author": {"login": "calbach"}, "path": "api/src/test/java/org/pmiops/workbench/captcha/CaptchaVerificationServiceTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.pmiops.workbench.captcha;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import java.io.IOException;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.pmiops.workbench.captcha.api.CaptchaApi;\n+import org.pmiops.workbench.captcha.model.CaptchaVerificationResponse;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class CaptchaVerificationServiceTest {\n+\n+  final String prodAllOfUsUrl = \"https://workbench.researchallofus.org/login\";\n+  final String testUrl = \"testkey.google.com\";\n+  final String responseToken = \"responseToken\";\n+\n+  @MockBean private CloudStorageService cloudStorageService;\n+  @MockBean private CaptchaApi captchaApiProvider;\n+\n+  @Autowired private CaptchaVerificationServiceImpl captchaVerificationService;\n+\n+  private static WorkbenchConfig config;\n+\n+  @TestConfiguration\n+  @Import({CaptchaVerificationServiceImpl.class, CaptchaApi.class})\n+  static class Configuration {\n+    @Bean\n+    @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+    public WorkbenchConfig workbenchConfig() {\n+      return config;\n+    }\n+  }\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    config = WorkbenchConfig.createEmptyConfig();\n+    config.admin.loginUrl = \"hostname\";\n+    Mockito.when(cloudStorageService.getCaptchaServerKey()).thenReturn(\"key\");\n+    try {\n+      mockCaptchaResponse(\"hostName\", true);\n+    } catch (ApiException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "053c937e925e1bf62b8229b57876598c4d6c645e"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3079, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}