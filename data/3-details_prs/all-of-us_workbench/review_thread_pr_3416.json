{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MDA5ODQz", "number": 3416, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyNTozNVrODyRBDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMTozNToyMlrODzDUow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDM0MTkwOnYy", "diffSide": "RIGHT", "path": "api/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyNTozNVrOGGNwSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzoyNToyMVrOGGlJGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE2OTk5Mw==", "bodyText": "I don't disagree that this is probably the ideal end state, but I would not attempt to go down this path without first restructuring the codebase holistically to be more modular with cleaner dependencies. Originally, tools were a separate gradle file. This worked to a certain point and then completely broke down as more service dependencies were pulled in. In the end we wound up merging that into this file: https://precisionmedicineinitiative.atlassian.net/browse/RW-2172", "url": "https://github.com/all-of-us/workbench/pull/3416#discussion_r409169993", "createdAt": "2020-04-15T22:25:35Z", "author": {"login": "calbach"}, "path": "api/build.gradle", "diffHunk": "@@ -628,15 +684,15 @@ version = '0.1.0'          // Version in generated output\n sourceCompatibility = 1.8\n targetCompatibility = 1.8\n \n-task incrementalHotSwap(type: IncrementalHotSwapTask) {\n+task incrementalHotSwap(type: IncrementalHotSwapTask, dependsOn: 'compileJava') {\n     inputDir = sourceSets.main.java.outputDir\n }\n \n-incrementalHotSwap.dependsOn compileJava\n-\n task listProjectAPIs(type: GenerateAPIListingTask)\n \n \n+// TODO(jaycarlton) move tools-related stuff to its own Gradle project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aec133f7a317bc4e6f82657ac8aad3cf7b720097"}, "originalPosition": 674}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1MzE3Ng==", "bodyText": "Definitely good to know. I'm pulling a few of the TODOs out as they're mostly too prescriptive and the world may have changed before we get to them.\nThis will be an interesting thing to consider as I'm looking at the structural evolution of some of these things.", "url": "https://github.com/all-of-us/workbench/pull/3416#discussion_r409553176", "createdAt": "2020-04-16T13:25:21Z", "author": {"login": "jaycarlton"}, "path": "api/build.gradle", "diffHunk": "@@ -628,15 +684,15 @@ version = '0.1.0'          // Version in generated output\n sourceCompatibility = 1.8\n targetCompatibility = 1.8\n \n-task incrementalHotSwap(type: IncrementalHotSwapTask) {\n+task incrementalHotSwap(type: IncrementalHotSwapTask, dependsOn: 'compileJava') {\n     inputDir = sourceSets.main.java.outputDir\n }\n \n-incrementalHotSwap.dependsOn compileJava\n-\n task listProjectAPIs(type: GenerateAPIListingTask)\n \n \n+// TODO(jaycarlton) move tools-related stuff to its own Gradle project", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE2OTk5Mw=="}, "originalCommit": {"oid": "aec133f7a317bc4e6f82657ac8aad3cf7b720097"}, "originalPosition": 674}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDM1NDAxOnYy", "diffSide": "RIGHT", "path": "api/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjozMDozN1rOGGN3oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzozMDowN1rOGGlWIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3MTg3Mw==", "bodyText": "Why the change to omit curly brackets? I'm surprised this is legal", "url": "https://github.com/all-of-us/workbench/pull/3416#discussion_r409171873", "createdAt": "2020-04-15T22:30:37Z", "author": {"login": "calbach"}, "path": "api/build.gradle", "diffHunk": "@@ -402,36 +464,36 @@ dependencies {\n   compile 'mysql:mysql-connector-java:8.0.16'\n   compile 'com.google.cloud.sql:mysql-socket-factory:1.0.10'\n \n-  compile \"com.google.appengine:appengine:${GAE_VERSION}\"\n-  compile \"com.google.appengine:appengine-api-1.0-sdk:${GAE_VERSION}\"\n+  compile \"com.google.appengine:appengine:$project.ext.GAE_VERSION\"\n+  compile \"com.google.appengine:appengine-api-1.0-sdk:$project.ext.GAE_VERSION\"\n \n-  compile(\"org.springframework.boot:spring-boot-starter-web:${SPRING_BOOT_VERSION}\") {\n+  compile(\"org.springframework.boot:spring-boot-starter-web:$project.ext.SPRING_BOOT_VERSION\") {\n     exclude module: 'spring-boot-starter-tomcat'\n     exclude group: 'org.slf4j', module: 'jul-to-slf4j'\n   }\n-  compile(\"org.springframework.boot:spring-boot-starter-data-jpa:${SPRING_BOOT_VERSION}\") {\n+  compile(\"org.springframework.boot:spring-boot-starter-data-jpa:$project.ext.SPRING_BOOT_VERSION\") {\n     exclude module: 'spring-boot-starter-tomcat'\n     exclude group: 'org.slf4j', module: 'jul-to-slf4j'\n   }\n-  compile(\"org.springframework.boot:spring-boot-starter-actuator:${SPRING_BOOT_VERSION}\") {\n+  compile(\"org.springframework.boot:spring-boot-starter-actuator:$project.ext.SPRING_BOOT_VERSION\") {\n     exclude module: 'spring-boot-starter-tomcat'\n     exclude group: 'org.slf4j', module: 'jul-to-slf4j'\n   }\n \n   compile 'ch.qos.logback:logback-classic:1.2.3'\n \n   compile 'org.springframework.security:spring-security-web:4.2.13.RELEASE'\n-  compile \"org.hibernate:hibernate-core:${HIBERNATE_VERSION}\"\n+  compile \"org.hibernate:hibernate-core:$project.ext.HIBERNATE_VERSION\"\n \n   // Force the Kotlin version, otherwise the Kotlin plugin conflicts with Jackson's\n   // Kotlin dep, resulting in massive logspam.\n-  compile \"org.jetbrains.kotlin:kotlin-reflect:${KOTLIN_VERSION}\"\n+  compile \"org.jetbrains.kotlin:kotlin-reflect:$project.ext.KOTLIN_VERSION\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aec133f7a317bc4e6f82657ac8aad3cf7b720097"}, "originalPosition": 454}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NjUxMg==", "bodyText": "IntelliJ suggests that they're redundant and asks to elide them for me.\n\nFrom the docs\n\nIn addition to ${} placeholders, we can also use a lone $ sign prefixing a dotted expression:\ndef person = [name: 'Guillaume', age: 36]\nassert \"$person.name is $person.age years old\" == 'Guillaume is 36 years old'\nBut only dotted expressions of the form a.b, a.b.c, etc, are valid. Expressions containing parentheses like method calls, curly braces for closures, dots which aren\u2019t part of a property expression or arithmetic operators would be invalid.", "url": "https://github.com/all-of-us/workbench/pull/3416#discussion_r409556512", "createdAt": "2020-04-16T13:30:07Z", "author": {"login": "jaycarlton"}, "path": "api/build.gradle", "diffHunk": "@@ -402,36 +464,36 @@ dependencies {\n   compile 'mysql:mysql-connector-java:8.0.16'\n   compile 'com.google.cloud.sql:mysql-socket-factory:1.0.10'\n \n-  compile \"com.google.appengine:appengine:${GAE_VERSION}\"\n-  compile \"com.google.appengine:appengine-api-1.0-sdk:${GAE_VERSION}\"\n+  compile \"com.google.appengine:appengine:$project.ext.GAE_VERSION\"\n+  compile \"com.google.appengine:appengine-api-1.0-sdk:$project.ext.GAE_VERSION\"\n \n-  compile(\"org.springframework.boot:spring-boot-starter-web:${SPRING_BOOT_VERSION}\") {\n+  compile(\"org.springframework.boot:spring-boot-starter-web:$project.ext.SPRING_BOOT_VERSION\") {\n     exclude module: 'spring-boot-starter-tomcat'\n     exclude group: 'org.slf4j', module: 'jul-to-slf4j'\n   }\n-  compile(\"org.springframework.boot:spring-boot-starter-data-jpa:${SPRING_BOOT_VERSION}\") {\n+  compile(\"org.springframework.boot:spring-boot-starter-data-jpa:$project.ext.SPRING_BOOT_VERSION\") {\n     exclude module: 'spring-boot-starter-tomcat'\n     exclude group: 'org.slf4j', module: 'jul-to-slf4j'\n   }\n-  compile(\"org.springframework.boot:spring-boot-starter-actuator:${SPRING_BOOT_VERSION}\") {\n+  compile(\"org.springframework.boot:spring-boot-starter-actuator:$project.ext.SPRING_BOOT_VERSION\") {\n     exclude module: 'spring-boot-starter-tomcat'\n     exclude group: 'org.slf4j', module: 'jul-to-slf4j'\n   }\n \n   compile 'ch.qos.logback:logback-classic:1.2.3'\n \n   compile 'org.springframework.security:spring-security-web:4.2.13.RELEASE'\n-  compile \"org.hibernate:hibernate-core:${HIBERNATE_VERSION}\"\n+  compile \"org.hibernate:hibernate-core:$project.ext.HIBERNATE_VERSION\"\n \n   // Force the Kotlin version, otherwise the Kotlin plugin conflicts with Jackson's\n   // Kotlin dep, resulting in massive logspam.\n-  compile \"org.jetbrains.kotlin:kotlin-reflect:${KOTLIN_VERSION}\"\n+  compile \"org.jetbrains.kotlin:kotlin-reflect:$project.ext.KOTLIN_VERSION\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3MTg3Mw=="}, "originalCommit": {"oid": "aec133f7a317bc4e6f82657ac8aad3cf7b720097"}, "originalPosition": 454}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDM2MTg5OnYy", "diffSide": "RIGHT", "path": "api/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjozMzo0NlrOGGN8WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzozNjoyOFrOGGloNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3MzA4MA==", "bodyText": "nit: Not that I don't like reading this, but I'd save the editorialized first person narration for the PR review and just leave the essentials in the code itself.", "url": "https://github.com/all-of-us/workbench/pull/3416#discussion_r409173080", "createdAt": "2020-04-15T22:33:46Z", "author": {"login": "calbach"}, "path": "api/build.gradle", "diffHunk": "@@ -316,7 +346,38 @@ sourceSets {\n     compileClasspath += generated.output\n     runtimeClasspath += generated.output\n   }\n-  integration {\n+\n+  //\n+  // Custom SourceSets\n+  //\n+  // Sometimes, in order to fight the clean code war, you have to get dirty in a battle.\n+  // Here we use a naming convention with __ word boundaries at start and end\n+  // to avoid confusion. For example, the plugin may define a __tools__Compile configuration\n+  // or a compile__tools__Java task. This \"shields up\" approach makes it obvious where there's\n+  // a dynamically defined symbol name, so usages stick out and it's easier to identify the\n+  // constituent parts. Why four underscores where two might do? Groovy is making me miss C++", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aec133f7a317bc4e6f82657ac8aad3cf7b720097"}, "originalPosition": 279}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MTE0MQ==", "bodyText": "Yeah, people finding their afternoon taking a detour into the build script generally aren't in the most jocular mood.\nBy the way, IntelliJ annotates the directories associated with the source sets in the project pane:", "url": "https://github.com/all-of-us/workbench/pull/3416#discussion_r409561141", "createdAt": "2020-04-16T13:36:28Z", "author": {"login": "jaycarlton"}, "path": "api/build.gradle", "diffHunk": "@@ -316,7 +346,38 @@ sourceSets {\n     compileClasspath += generated.output\n     runtimeClasspath += generated.output\n   }\n-  integration {\n+\n+  //\n+  // Custom SourceSets\n+  //\n+  // Sometimes, in order to fight the clean code war, you have to get dirty in a battle.\n+  // Here we use a naming convention with __ word boundaries at start and end\n+  // to avoid confusion. For example, the plugin may define a __tools__Compile configuration\n+  // or a compile__tools__Java task. This \"shields up\" approach makes it obvious where there's\n+  // a dynamically defined symbol name, so usages stick out and it's easier to identify the\n+  // constituent parts. Why four underscores where two might do? Groovy is making me miss C++", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3MzA4MA=="}, "originalCommit": {"oid": "aec133f7a317bc4e6f82657ac8aad3cf7b720097"}, "originalPosition": 279}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDM2OTkxOnYy", "diffSide": "RIGHT", "path": "api/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjozNjozNlrOGGOA5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjozNjozNlrOGGOA5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3NDI0Ng==", "bodyText": "s/RW0/RW/", "url": "https://github.com/all-of-us/workbench/pull/3416#discussion_r409174246", "createdAt": "2020-04-15T22:36:36Z", "author": {"login": "calbach"}, "path": "api/build.gradle", "diffHunk": "@@ -3,13 +3,82 @@ import io.swagger.codegen.DefaultGenerator\n import org.pmiops.workbench.tooling.GenerateAPIListingTask\n import org.pmiops.workbench.tooling.IncrementalHotSwapTask\n \n+// Runs before all tasks. Mainly sets up properties and dependencies.\n+buildscript {\n+  // Project-wide constants.\n+  ext {\n+    ELASTICSEARCH_VERSION = '6.8.3'\n+    GAE_VERSION = '1.9.64'\n+    GSON_VERSION = '2.8.5'\n+    HIBERNATE_VERSION = '5.2.10.Final'\n+    JACKSON_DATABIND_VERSION = '2.9.10.1'\n+    JACKSON_VERSION = '2.9.10'\n+    JODA_VERSION = '2.10'\n+    KOTLIN_VERSION = '1.3.50'\n+    MAPSTRUCT_VERSION = '1.3.1.Final'\n+    MOCKITO_KOTLIN_VERSION = '2.2.0'\n+    OKHTTP_VERSION = '2.7.5'\n+    OPENCENSUS_VERSION = '0.23.0'\n+    SPRINGFOX_VERSION = '2.6.1'\n+    SPRING_BOOT_VERSION = '1.5.22.RELEASE'\n+    SWAGGER_CODEGEN_VERSION = '2.2.3'\n+  }\n+\n+  repositories {\n+    // Bintray's repository - a fast Maven Central mirror & more\n+    jcenter()\n+    maven {\n+      url \"https://plugins.gradle.org/m2/\"\n+    }\n+  }\n+\n+  // Top-level Gradle project dependencies\n+  dependencies {\n+    classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.23.0'\n+    classpath 'com.google.cloud.tools:appengine-gradle-plugin:1.3.5'\n+    classpath 'gradle.plugin.org.hidetake:gradle-swagger-generator-plugin:2.12.0'\n+    // Note: if you plan to upgrade the version of swagger-codegen beyond 2.2.3, be aware of two\n+    // implicit dependencies: (1) the set of \"generatedCompile\" Gradle dependencies need to be updated\n+    // to match the modules imported by the Swagger codegen templates, and (2) some template files\n+    // are overridden with forked templates within this repo; they will likely need to be re-copied from\n+    // the newer release version and have AoU-specific modifications re-applied.\n+    classpath \"io.swagger:swagger-codegen:$project.ext.SWAGGER_CODEGEN_VERSION\"\n+    classpath 'net.ltgt.gradle:gradle-apt-plugin:0.21'\n+    classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$project.ext.KOTLIN_VERSION\"\n+    classpath \"org.jetbrains.kotlin:kotlin-noarg:$project.ext.KOTLIN_VERSION\"\n+    classpath 'org.owasp:dependency-check-gradle:5.1.0'\n+    classpath \"org.springframework.boot:spring-boot-gradle-plugin:$project.ext.SPRING_BOOT_VERSION\"\n+  }\n+}\n+\n+project.ext['hibernate.version'] = project.ext.HIBERNATE_VERSION\n+\n+// TODO(jaycarlton): migrate to new plugin DSL (RW0-4772)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aec133f7a317bc4e6f82657ac8aad3cf7b720097"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDM3MDg3OnYy", "diffSide": "RIGHT", "path": "api/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjozNjo1OFrOGGOBaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzozOTozNVrOGGlxkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3NDM3OQ==", "bodyText": "Is there a reason not to do this now? Or are you waiting on the new plugin DSL to enable this?", "url": "https://github.com/all-of-us/workbench/pull/3416#discussion_r409174379", "createdAt": "2020-04-15T22:36:58Z", "author": {"login": "calbach"}, "path": "api/build.gradle", "diffHunk": "@@ -3,13 +3,82 @@ import io.swagger.codegen.DefaultGenerator\n import org.pmiops.workbench.tooling.GenerateAPIListingTask\n import org.pmiops.workbench.tooling.IncrementalHotSwapTask\n \n+// Runs before all tasks. Mainly sets up properties and dependencies.\n+buildscript {\n+  // Project-wide constants.\n+  ext {\n+    ELASTICSEARCH_VERSION = '6.8.3'\n+    GAE_VERSION = '1.9.64'\n+    GSON_VERSION = '2.8.5'\n+    HIBERNATE_VERSION = '5.2.10.Final'\n+    JACKSON_DATABIND_VERSION = '2.9.10.1'\n+    JACKSON_VERSION = '2.9.10'\n+    JODA_VERSION = '2.10'\n+    KOTLIN_VERSION = '1.3.50'\n+    MAPSTRUCT_VERSION = '1.3.1.Final'\n+    MOCKITO_KOTLIN_VERSION = '2.2.0'\n+    OKHTTP_VERSION = '2.7.5'\n+    OPENCENSUS_VERSION = '0.23.0'\n+    SPRINGFOX_VERSION = '2.6.1'\n+    SPRING_BOOT_VERSION = '1.5.22.RELEASE'\n+    SWAGGER_CODEGEN_VERSION = '2.2.3'\n+  }\n+\n+  repositories {\n+    // Bintray's repository - a fast Maven Central mirror & more\n+    jcenter()\n+    maven {\n+      url \"https://plugins.gradle.org/m2/\"\n+    }\n+  }\n+\n+  // Top-level Gradle project dependencies\n+  dependencies {\n+    classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.23.0'\n+    classpath 'com.google.cloud.tools:appengine-gradle-plugin:1.3.5'\n+    classpath 'gradle.plugin.org.hidetake:gradle-swagger-generator-plugin:2.12.0'\n+    // Note: if you plan to upgrade the version of swagger-codegen beyond 2.2.3, be aware of two\n+    // implicit dependencies: (1) the set of \"generatedCompile\" Gradle dependencies need to be updated\n+    // to match the modules imported by the Swagger codegen templates, and (2) some template files\n+    // are overridden with forked templates within this repo; they will likely need to be re-copied from\n+    // the newer release version and have AoU-specific modifications re-applied.\n+    classpath \"io.swagger:swagger-codegen:$project.ext.SWAGGER_CODEGEN_VERSION\"\n+    classpath 'net.ltgt.gradle:gradle-apt-plugin:0.21'\n+    classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$project.ext.KOTLIN_VERSION\"\n+    classpath \"org.jetbrains.kotlin:kotlin-noarg:$project.ext.KOTLIN_VERSION\"\n+    classpath 'org.owasp:dependency-check-gradle:5.1.0'\n+    classpath \"org.springframework.boot:spring-boot-gradle-plugin:$project.ext.SPRING_BOOT_VERSION\"\n+  }\n+}\n+\n+project.ext['hibernate.version'] = project.ext.HIBERNATE_VERSION\n+\n+// TODO(jaycarlton): migrate to new plugin DSL (RW0-4772)\n+// TODO(jaycarlton): move the plugin apply statements closer to configuration blocks for the plugins", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aec133f7a317bc4e6f82657ac8aad3cf7b720097"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MzUzNw==", "bodyText": "The DSL seems to recommend all of them together in a plugins block, so doing this wouldn't help with the transition. Killing this one as it's more of a note to self.", "url": "https://github.com/all-of-us/workbench/pull/3416#discussion_r409563537", "createdAt": "2020-04-16T13:39:35Z", "author": {"login": "jaycarlton"}, "path": "api/build.gradle", "diffHunk": "@@ -3,13 +3,82 @@ import io.swagger.codegen.DefaultGenerator\n import org.pmiops.workbench.tooling.GenerateAPIListingTask\n import org.pmiops.workbench.tooling.IncrementalHotSwapTask\n \n+// Runs before all tasks. Mainly sets up properties and dependencies.\n+buildscript {\n+  // Project-wide constants.\n+  ext {\n+    ELASTICSEARCH_VERSION = '6.8.3'\n+    GAE_VERSION = '1.9.64'\n+    GSON_VERSION = '2.8.5'\n+    HIBERNATE_VERSION = '5.2.10.Final'\n+    JACKSON_DATABIND_VERSION = '2.9.10.1'\n+    JACKSON_VERSION = '2.9.10'\n+    JODA_VERSION = '2.10'\n+    KOTLIN_VERSION = '1.3.50'\n+    MAPSTRUCT_VERSION = '1.3.1.Final'\n+    MOCKITO_KOTLIN_VERSION = '2.2.0'\n+    OKHTTP_VERSION = '2.7.5'\n+    OPENCENSUS_VERSION = '0.23.0'\n+    SPRINGFOX_VERSION = '2.6.1'\n+    SPRING_BOOT_VERSION = '1.5.22.RELEASE'\n+    SWAGGER_CODEGEN_VERSION = '2.2.3'\n+  }\n+\n+  repositories {\n+    // Bintray's repository - a fast Maven Central mirror & more\n+    jcenter()\n+    maven {\n+      url \"https://plugins.gradle.org/m2/\"\n+    }\n+  }\n+\n+  // Top-level Gradle project dependencies\n+  dependencies {\n+    classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.23.0'\n+    classpath 'com.google.cloud.tools:appengine-gradle-plugin:1.3.5'\n+    classpath 'gradle.plugin.org.hidetake:gradle-swagger-generator-plugin:2.12.0'\n+    // Note: if you plan to upgrade the version of swagger-codegen beyond 2.2.3, be aware of two\n+    // implicit dependencies: (1) the set of \"generatedCompile\" Gradle dependencies need to be updated\n+    // to match the modules imported by the Swagger codegen templates, and (2) some template files\n+    // are overridden with forked templates within this repo; they will likely need to be re-copied from\n+    // the newer release version and have AoU-specific modifications re-applied.\n+    classpath \"io.swagger:swagger-codegen:$project.ext.SWAGGER_CODEGEN_VERSION\"\n+    classpath 'net.ltgt.gradle:gradle-apt-plugin:0.21'\n+    classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$project.ext.KOTLIN_VERSION\"\n+    classpath \"org.jetbrains.kotlin:kotlin-noarg:$project.ext.KOTLIN_VERSION\"\n+    classpath 'org.owasp:dependency-check-gradle:5.1.0'\n+    classpath \"org.springframework.boot:spring-boot-gradle-plugin:$project.ext.SPRING_BOOT_VERSION\"\n+  }\n+}\n+\n+project.ext['hibernate.version'] = project.ext.HIBERNATE_VERSION\n+\n+// TODO(jaycarlton): migrate to new plugin DSL (RW0-4772)\n+// TODO(jaycarlton): move the plugin apply statements closer to configuration blocks for the plugins", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3NDM3OQ=="}, "originalCommit": {"oid": "aec133f7a317bc4e6f82657ac8aad3cf7b720097"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzcxOTQ5OnYy", "diffSide": "RIGHT", "path": "api/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjo0NjoyM1rOGGuNXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo1NjozNFrOGGw2iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcwMTcyNQ==", "bodyText": "I'm a little confused about the idea of scoping. Further down in this buildscript section, you describe the repositories as \"buildscript-scoped repositories\". But here we describe \"project-wide constants\". Is there a difference, or are the comments just inconsistent with each other?", "url": "https://github.com/all-of-us/workbench/pull/3416#discussion_r409701725", "createdAt": "2020-04-16T16:46:23Z", "author": {"login": "gjuggler"}, "path": "api/build.gradle", "diffHunk": "@@ -3,13 +3,83 @@ import io.swagger.codegen.DefaultGenerator\n import org.pmiops.workbench.tooling.GenerateAPIListingTask\n import org.pmiops.workbench.tooling.IncrementalHotSwapTask\n \n+// Runs before all tasks. Sets up properties and dependencies for the build\n+// process itself.\n+buildscript {\n+  // Project-wide constants.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8d4ee843c83099bd2f049d05bb820398ccbd9e7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0NTAzMg==", "bodyText": "I'm confused too. I don't think it makes sense to have an ext block inside a buildscript.\nFor example, when I do ./gradlew properties, these are at the top level with the others:\njaycarlton~/repos/workbench/api (jaycarlton/cleanGradle) $ ./gradlew properties\n\n> Task :properties \n\n------------------------------------------------------------\nRoot project\n------------------------------------------------------------\n\nBootRepackage: class org.springframework.boot.gradle.repackage.RepackageTask\nELASTICSEARCH_VERSION: 6.8.3\nGAE_VERSION: 1.9.64\nGSON_VERSION: 2.8.5\nGenerateReDoc: class org.hidetake.gradle.swagger.generator.GenerateReDoc\nGenerateSwaggerCode: class org.hidetake.gradle.swagger.generator.GenerateSwaggerCode\nGenerateSwaggerUI: class org.hidetake.gradle.swagger.generator.GenerateSwaggerUI\nHIBERNATE_VERSION: 5.2.10.Final\nJACKSON_DATABIND_VERSION: 2.9.10.1\nJACKSON_VERSION: 2.9.10\nJODA_VERSION: 2.10\nKOTLIN_VERSION: 1.3.50\nMAPSTRUCT_VERSION: 1.3.1.Final\nMOCKITO_KOTLIN_VERSION: 2.2.0\nOKHTTP_VERSION: 2.7.5\nOPENCENSUS_VERSION: 0.23.0\nSPRINGFOX_VERSION: 2.6.1\nSPRING_BOOT_VERSION: 1.5.22.RELEASE\nSWAGGER_CODEGEN_VERSION: 2.2.3\n# ...\n\nHowever, when you move this ext closure after the buildscript, the values aren't available yet when the buildscript is parsed. (It's always first I think).", "url": "https://github.com/all-of-us/workbench/pull/3416#discussion_r409745032", "createdAt": "2020-04-16T17:56:34Z", "author": {"login": "jaycarlton"}, "path": "api/build.gradle", "diffHunk": "@@ -3,13 +3,83 @@ import io.swagger.codegen.DefaultGenerator\n import org.pmiops.workbench.tooling.GenerateAPIListingTask\n import org.pmiops.workbench.tooling.IncrementalHotSwapTask\n \n+// Runs before all tasks. Sets up properties and dependencies for the build\n+// process itself.\n+buildscript {\n+  // Project-wide constants.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcwMTcyNQ=="}, "originalCommit": {"oid": "e8d4ee843c83099bd2f049d05bb820398ccbd9e7"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mzc5NjI2OnYy", "diffSide": "RIGHT", "path": "api/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzowNjozM1rOGGu-cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxODowMTo1OVrOGGxDtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcxNDI4OA==", "bodyText": "How does this relate to buildscript.ext.HIBERNATE_VERSION? If you have a clear idea of what this line is doing / why it exists, a short comment here might help.", "url": "https://github.com/all-of-us/workbench/pull/3416#discussion_r409714288", "createdAt": "2020-04-16T17:06:33Z", "author": {"login": "gjuggler"}, "path": "api/build.gradle", "diffHunk": "@@ -3,13 +3,83 @@ import io.swagger.codegen.DefaultGenerator\n import org.pmiops.workbench.tooling.GenerateAPIListingTask\n import org.pmiops.workbench.tooling.IncrementalHotSwapTask\n \n+// Runs before all tasks. Sets up properties and dependencies for the build\n+// process itself.\n+buildscript {\n+  // Project-wide constants.\n+  ext {\n+    ELASTICSEARCH_VERSION = '6.8.3'\n+    GAE_VERSION = '1.9.64'\n+    GSON_VERSION = '2.8.5'\n+    HIBERNATE_VERSION = '5.2.10.Final'\n+    JACKSON_DATABIND_VERSION = '2.9.10.1'\n+    JACKSON_VERSION = '2.9.10'\n+    JODA_VERSION = '2.10'\n+    KOTLIN_VERSION = '1.3.50'\n+    MAPSTRUCT_VERSION = '1.3.1.Final'\n+    MOCKITO_KOTLIN_VERSION = '2.2.0'\n+    OKHTTP_VERSION = '2.7.5'\n+    OPENCENSUS_VERSION = '0.23.0'\n+    SPRINGFOX_VERSION = '2.6.1'\n+    SPRING_BOOT_VERSION = '1.5.22.RELEASE'\n+    SWAGGER_CODEGEN_VERSION = '2.2.3'\n+  }\n+\n+  repositories {\n+    // Bintray's repository - a fast Maven Central mirror & more\n+    jcenter()\n+    maven {\n+      url \"https://plugins.gradle.org/m2/\"\n+    }\n+  }\n+\n+  // Buildscript-specific dependencies (uses buildscript-scoped repositories). This\n+  // closure ensures allows the buildscript dependencies (e.g. for plgins) to be managed\n+  // independently from the main project's application code's dependencies\n+  dependencies {\n+    classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.23.0'\n+    classpath 'com.google.cloud.tools:appengine-gradle-plugin:1.3.5'\n+    classpath 'gradle.plugin.org.hidetake:gradle-swagger-generator-plugin:2.12.0'\n+    // Note: if you plan to upgrade the version of swagger-codegen beyond 2.2.3, be aware of two\n+    // implicit dependencies: (1) the set of \"generatedCompile\" Gradle dependencies need to be updated\n+    // to match the modules imported by the Swagger codegen templates, and (2) some template files\n+    // are overridden with forked templates within this repo; they will likely need to be re-copied from\n+    // the newer release version and have AoU-specific modifications re-applied.\n+    classpath \"io.swagger:swagger-codegen:$project.ext.SWAGGER_CODEGEN_VERSION\"\n+    classpath 'net.ltgt.gradle:gradle-apt-plugin:0.21'\n+    classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$project.ext.KOTLIN_VERSION\"\n+    classpath \"org.jetbrains.kotlin:kotlin-noarg:$project.ext.KOTLIN_VERSION\"\n+    classpath 'org.owasp:dependency-check-gradle:5.1.0'\n+    classpath \"org.springframework.boot:spring-boot-gradle-plugin:$project.ext.SPRING_BOOT_VERSION\"\n+  }\n+}\n+\n+project.ext['hibernate.version'] = project.ext.HIBERNATE_VERSION", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8d4ee843c83099bd2f049d05bb820398ccbd9e7"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0ODQwNw==", "bodyText": "They're both properties on the Root Project's extra properties container ext, which is provided by the ExtraPropertiesExtension. From ./gradlew properties you get\nhibernate.version: 5.2.10.Final\nHIBERNATE_VERSION: 5.2.10.Final.\nI'll see if I can kill the latter one by referring to the former one. Still no idea why/if it needs to be named this way.", "url": "https://github.com/all-of-us/workbench/pull/3416#discussion_r409748407", "createdAt": "2020-04-16T18:01:59Z", "author": {"login": "jaycarlton"}, "path": "api/build.gradle", "diffHunk": "@@ -3,13 +3,83 @@ import io.swagger.codegen.DefaultGenerator\n import org.pmiops.workbench.tooling.GenerateAPIListingTask\n import org.pmiops.workbench.tooling.IncrementalHotSwapTask\n \n+// Runs before all tasks. Sets up properties and dependencies for the build\n+// process itself.\n+buildscript {\n+  // Project-wide constants.\n+  ext {\n+    ELASTICSEARCH_VERSION = '6.8.3'\n+    GAE_VERSION = '1.9.64'\n+    GSON_VERSION = '2.8.5'\n+    HIBERNATE_VERSION = '5.2.10.Final'\n+    JACKSON_DATABIND_VERSION = '2.9.10.1'\n+    JACKSON_VERSION = '2.9.10'\n+    JODA_VERSION = '2.10'\n+    KOTLIN_VERSION = '1.3.50'\n+    MAPSTRUCT_VERSION = '1.3.1.Final'\n+    MOCKITO_KOTLIN_VERSION = '2.2.0'\n+    OKHTTP_VERSION = '2.7.5'\n+    OPENCENSUS_VERSION = '0.23.0'\n+    SPRINGFOX_VERSION = '2.6.1'\n+    SPRING_BOOT_VERSION = '1.5.22.RELEASE'\n+    SWAGGER_CODEGEN_VERSION = '2.2.3'\n+  }\n+\n+  repositories {\n+    // Bintray's repository - a fast Maven Central mirror & more\n+    jcenter()\n+    maven {\n+      url \"https://plugins.gradle.org/m2/\"\n+    }\n+  }\n+\n+  // Buildscript-specific dependencies (uses buildscript-scoped repositories). This\n+  // closure ensures allows the buildscript dependencies (e.g. for plgins) to be managed\n+  // independently from the main project's application code's dependencies\n+  dependencies {\n+    classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.23.0'\n+    classpath 'com.google.cloud.tools:appengine-gradle-plugin:1.3.5'\n+    classpath 'gradle.plugin.org.hidetake:gradle-swagger-generator-plugin:2.12.0'\n+    // Note: if you plan to upgrade the version of swagger-codegen beyond 2.2.3, be aware of two\n+    // implicit dependencies: (1) the set of \"generatedCompile\" Gradle dependencies need to be updated\n+    // to match the modules imported by the Swagger codegen templates, and (2) some template files\n+    // are overridden with forked templates within this repo; they will likely need to be re-copied from\n+    // the newer release version and have AoU-specific modifications re-applied.\n+    classpath \"io.swagger:swagger-codegen:$project.ext.SWAGGER_CODEGEN_VERSION\"\n+    classpath 'net.ltgt.gradle:gradle-apt-plugin:0.21'\n+    classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$project.ext.KOTLIN_VERSION\"\n+    classpath \"org.jetbrains.kotlin:kotlin-noarg:$project.ext.KOTLIN_VERSION\"\n+    classpath 'org.owasp:dependency-check-gradle:5.1.0'\n+    classpath \"org.springframework.boot:spring-boot-gradle-plugin:$project.ext.SPRING_BOOT_VERSION\"\n+  }\n+}\n+\n+project.ext['hibernate.version'] = project.ext.HIBERNATE_VERSION", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcxNDI4OA=="}, "originalCommit": {"oid": "e8d4ee843c83099bd2f049d05bb820398ccbd9e7"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzgwMDk4OnYy", "diffSide": "RIGHT", "path": "api/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzowNzo0N1rOGGvBZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzowNzo0N1rOGGvBZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcxNTA0Ng==", "bodyText": "Nice comment \u2013\u00a0thanks for taking the time to make this clear.", "url": "https://github.com/all-of-us/workbench/pull/3416#discussion_r409715046", "createdAt": "2020-04-16T17:07:47Z", "author": {"login": "gjuggler"}, "path": "api/build.gradle", "diffHunk": "@@ -316,7 +347,36 @@ sourceSets {\n     compileClasspath += generated.output\n     runtimeClasspath += generated.output\n   }\n-  integration {\n+\n+  //\n+  // Custom SourceSets\n+  //\n+  // Here we use a naming convention with __ word boundaries at start and end", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8d4ee843c83099bd2f049d05bb820398ccbd9e7"}, "originalPosition": 276}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzgyNDYxOnYy", "diffSide": "RIGHT", "path": "api/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzoxNDoyMFrOGGvQRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzoxNDoyMFrOGGvQRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcxODg1NQ==", "bodyText": "s/movre/more/", "url": "https://github.com/all-of-us/workbench/pull/3416#discussion_r409718855", "createdAt": "2020-04-16T17:14:20Z", "author": {"login": "calbach"}, "path": "api/build.gradle", "diffHunk": "@@ -316,7 +347,36 @@ sourceSets {\n     compileClasspath += generated.output\n     runtimeClasspath += generated.output\n   }\n-  integration {\n+\n+  //\n+  // Custom SourceSets\n+  //\n+  // Here we use a naming convention with __ word boundaries at start and end\n+  // to avoid confusion. For example, the plugin may define a __tools__Compile configuration\n+  // or a compile__tools__Java task. This approach makes it movre obvious where there's", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8d4ee843c83099bd2f049d05bb820398ccbd9e7"}, "originalPosition": 278}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODU4NDAzOnYy", "diffSide": "RIGHT", "path": "api/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMTozNToyMlrOGHdyMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMzoxMToxNVrOGHfh_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4MTIwMg==", "bodyText": "contextual placement of this comment was lost here, since it now seems to refer to all following. Delete if you don't intend to maintain a semantic grouping of dependencies", "url": "https://github.com/all-of-us/workbench/pull/3416#discussion_r410481202", "createdAt": "2020-04-17T21:35:22Z", "author": {"login": "calbach"}, "path": "api/build.gradle", "diffHunk": "@@ -337,219 +398,223 @@ sourceSets {\n       srcDirs = ['tools/src/main/java']\n     }\n   }\n-  bigQueryTest {\n-    resources {\n-      srcDir \"bigquerytest/resources\"\n-      srcDir \"config/\"\n-      include \"bigquery/**\"\n-      include \"cdm/**\"\n-    }\n-    java {\n-      compileClasspath += main.output + test.output + generated.output\n-      runtimeClasspath += main.output + test.output + generated.output\n-      srcDir file('src/bigquerytest/java')\n-    }\n+}\n+\n+// Artifact configurations derived from base configs. Configuration names\n+// are concatenated by the Java plugin.\n+// https://docs.gradle.org/current/userguide/java_plugin.html#java_source_set_configurations\n+configurations {\n+  __bigQueryTest__Compile.extendsFrom testCompile\n+  __bigQueryTest__Runtime.extendsFrom testRuntime\n+\n+  __integration__Compile.extendsFrom testCompile\n+  __integration__Runtime.extendsFrom testRuntime\n+\n+  __tools__Implementation.extendsFrom implementation\n+  __tools__RuntimeOnly.extendsFrom runtimeOnly\n+\n+  generatedCompile {\n+    exclude group: 'com.google.guava', module:'guava-jdk5'\n   }\n }\n \n-generateApi.dependsOn validateSwagger\n-ideaModule.dependsOn generateApi\n-compileGeneratedJava.dependsOn generateApi\n-ideaModule.dependsOn generateFireCloudClient\n-compileGeneratedJava.dependsOn generateFireCloudClient\n-ideaModule.dependsOn generateNotebooksClient\n-compileGeneratedJava.dependsOn generateNotebooksClient\n-ideaModule.dependsOn generateJiraClient\n-compileGeneratedJava.dependsOn generateJiraClient\n-ideaModule.dependsOn generateMandrillClient\n-compileGeneratedJava.dependsOn generateMandrillClient\n-ideaModule.dependsOn generateMoodleClient\n-compileGeneratedJava.dependsOn generateMoodleClient\n-ideaModule.dependsOn generateRdrClient\n-compileGeneratedJava.dependsOn generateRdrClient\n-ideaModule.dependsOn generateCaptchaClient\n-compileGeneratedJava.dependsOn generateCaptchaClient\n-classes.dependsOn generatedClasses\n-compileJava.dependsOn compileGeneratedJava\n-\n-war.dependsOn compileGeneratedJava\n-war.dependsOn generate_appengine_web_xml\n-war.dependsOn generate_appengine_cron_yaml\n+// Add dependencies to the classes builtin task from the  Java plugin.\n+// \"This is an aggregate task that just depends on other tasks.\n+// Other plugins may attach additional compilation tasks to it.\"\n+// https://docs.gradle.org/current/userguide/java_plugin.html\n+classes.dependsOn 'generatedClasses'\n+\n+def swaggerCodegenTasks = ['generateWorkbenchApi', 'generateFireCloudClient', 'generateNotebooksClient',\n+                           'generateJiraClient', 'generateMandrillClient', 'generateMoodleClient',\n+                           'generateRdrClient', 'generateCaptchaClient']\n \n+// The IDEA plugin generates files that assist the IntelliJ IDE in opening Gradle-defined projects.\n+// https://docs.gradle.org/current/userguide/idea_plugin.html\n+project.tasks.ideaModule.dependsOn(swaggerCodegenTasks)\n+\n+// Java plugin's Generated Source Set gives us the compileGeneratedJava task.\n+// We need to provide it with the swagger-codegen tasks that excrete Java.\n+project.tasks.compileGeneratedJava.dependsOn(swaggerCodegenTasks)\n+\n+project.tasks.war.dependsOn(['compileGeneratedJava', 'generate_appengine_web_xml',\n+        'generate_appengine_cron_yaml'])\n+\n+// Clear out generated Java sorces before cleaning the project.\n clean.doFirst {\n   delete(\"${projectDir}/$swaggerTargetFolder\")\n }\n \n-repositories {   // repositories for Jar's you access in your code\n+repositories {\n   jcenter()\n }\n \n-ext {\n-  mapstructVersion = '1.3.1.Final'\n-}\n-\n+// TODO(jaycarlton): see if there's a way to subdivide this block for readability\n+// To show the dependency tree, try: ./project.rb gradle dependencies --configuration compile\n dependencies {\n+  annotationProcessor \"org.mapstruct:mapstruct-processor:$project.ext.MAPSTRUCT_VERSION\"\n \n-  // To show the dependency tree, try: ./project.rb gradle dependencies --configuration compile\n+  compile \"ch.qos.logback:logback-classic:1.2.3\"\n+  // Force these dependencies to safe versions, Zendesk client depends on this.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a4f97d622cadc4c7bc73745b8059bfba183f362"}, "originalPosition": 416}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwOTgyMQ==", "bodyText": "I made three copies, but, yeah. I don't think it'll be missed.", "url": "https://github.com/all-of-us/workbench/pull/3416#discussion_r410509821", "createdAt": "2020-04-17T23:11:15Z", "author": {"login": "jaycarlton"}, "path": "api/build.gradle", "diffHunk": "@@ -337,219 +398,223 @@ sourceSets {\n       srcDirs = ['tools/src/main/java']\n     }\n   }\n-  bigQueryTest {\n-    resources {\n-      srcDir \"bigquerytest/resources\"\n-      srcDir \"config/\"\n-      include \"bigquery/**\"\n-      include \"cdm/**\"\n-    }\n-    java {\n-      compileClasspath += main.output + test.output + generated.output\n-      runtimeClasspath += main.output + test.output + generated.output\n-      srcDir file('src/bigquerytest/java')\n-    }\n+}\n+\n+// Artifact configurations derived from base configs. Configuration names\n+// are concatenated by the Java plugin.\n+// https://docs.gradle.org/current/userguide/java_plugin.html#java_source_set_configurations\n+configurations {\n+  __bigQueryTest__Compile.extendsFrom testCompile\n+  __bigQueryTest__Runtime.extendsFrom testRuntime\n+\n+  __integration__Compile.extendsFrom testCompile\n+  __integration__Runtime.extendsFrom testRuntime\n+\n+  __tools__Implementation.extendsFrom implementation\n+  __tools__RuntimeOnly.extendsFrom runtimeOnly\n+\n+  generatedCompile {\n+    exclude group: 'com.google.guava', module:'guava-jdk5'\n   }\n }\n \n-generateApi.dependsOn validateSwagger\n-ideaModule.dependsOn generateApi\n-compileGeneratedJava.dependsOn generateApi\n-ideaModule.dependsOn generateFireCloudClient\n-compileGeneratedJava.dependsOn generateFireCloudClient\n-ideaModule.dependsOn generateNotebooksClient\n-compileGeneratedJava.dependsOn generateNotebooksClient\n-ideaModule.dependsOn generateJiraClient\n-compileGeneratedJava.dependsOn generateJiraClient\n-ideaModule.dependsOn generateMandrillClient\n-compileGeneratedJava.dependsOn generateMandrillClient\n-ideaModule.dependsOn generateMoodleClient\n-compileGeneratedJava.dependsOn generateMoodleClient\n-ideaModule.dependsOn generateRdrClient\n-compileGeneratedJava.dependsOn generateRdrClient\n-ideaModule.dependsOn generateCaptchaClient\n-compileGeneratedJava.dependsOn generateCaptchaClient\n-classes.dependsOn generatedClasses\n-compileJava.dependsOn compileGeneratedJava\n-\n-war.dependsOn compileGeneratedJava\n-war.dependsOn generate_appengine_web_xml\n-war.dependsOn generate_appengine_cron_yaml\n+// Add dependencies to the classes builtin task from the  Java plugin.\n+// \"This is an aggregate task that just depends on other tasks.\n+// Other plugins may attach additional compilation tasks to it.\"\n+// https://docs.gradle.org/current/userguide/java_plugin.html\n+classes.dependsOn 'generatedClasses'\n+\n+def swaggerCodegenTasks = ['generateWorkbenchApi', 'generateFireCloudClient', 'generateNotebooksClient',\n+                           'generateJiraClient', 'generateMandrillClient', 'generateMoodleClient',\n+                           'generateRdrClient', 'generateCaptchaClient']\n \n+// The IDEA plugin generates files that assist the IntelliJ IDE in opening Gradle-defined projects.\n+// https://docs.gradle.org/current/userguide/idea_plugin.html\n+project.tasks.ideaModule.dependsOn(swaggerCodegenTasks)\n+\n+// Java plugin's Generated Source Set gives us the compileGeneratedJava task.\n+// We need to provide it with the swagger-codegen tasks that excrete Java.\n+project.tasks.compileGeneratedJava.dependsOn(swaggerCodegenTasks)\n+\n+project.tasks.war.dependsOn(['compileGeneratedJava', 'generate_appengine_web_xml',\n+        'generate_appengine_cron_yaml'])\n+\n+// Clear out generated Java sorces before cleaning the project.\n clean.doFirst {\n   delete(\"${projectDir}/$swaggerTargetFolder\")\n }\n \n-repositories {   // repositories for Jar's you access in your code\n+repositories {\n   jcenter()\n }\n \n-ext {\n-  mapstructVersion = '1.3.1.Final'\n-}\n-\n+// TODO(jaycarlton): see if there's a way to subdivide this block for readability\n+// To show the dependency tree, try: ./project.rb gradle dependencies --configuration compile\n dependencies {\n+  annotationProcessor \"org.mapstruct:mapstruct-processor:$project.ext.MAPSTRUCT_VERSION\"\n \n-  // To show the dependency tree, try: ./project.rb gradle dependencies --configuration compile\n+  compile \"ch.qos.logback:logback-classic:1.2.3\"\n+  // Force these dependencies to safe versions, Zendesk client depends on this.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4MTIwMg=="}, "originalCommit": {"oid": "3a4f97d622cadc4c7bc73745b8059bfba183f362"}, "originalPosition": 416}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2967, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}