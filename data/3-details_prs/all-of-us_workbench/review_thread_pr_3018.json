{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NDYxNjMw", "number": 3018, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTowNjoyMFrODZmpYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo0Nzo0N1rODZpa4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTc0MTc3OnYy", "diffSide": "RIGHT", "path": "api/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTowNjoyMFrOFgFbGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTowNjoyMFrOFgFbGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE4NzYxMA==", "bodyText": "Includes StringSubstitutor which replaces the deprecated StrSubstitutor", "url": "https://github.com/all-of-us/workbench/pull/3018#discussion_r369187610", "createdAt": "2020-01-21T19:06:20Z", "author": {"login": "jmthibault79"}, "path": "api/build.gradle", "diffHunk": "@@ -436,6 +436,7 @@ dependencies {\n   compile 'javax.inject:javax.inject:1'\n   compile 'io.swagger:swagger-annotations:1.5.16'\n   compile 'org.apache.commons:commons-lang3:3.6'\n+  compile 'org.apache.commons:commons-text:1.8'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "270f296cd61fa70ec2dc37f5a15c70b547c416bc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTc1MjI4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToxMDowMlrOFgFh_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToxMDowMlrOFgFh_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE4OTM3Mw==", "bodyText": "This is a change: previously we would run this cost check for users with null registration times.\nHowever it is not very meaningful because any user who actually logs into the system will not have a null registration time.\nI decided to make this change because it makes the logic a little simpler.", "url": "https://github.com/all-of-us/workbench/pull/3018#discussion_r369189373", "createdAt": "2020-01-21T19:10:02Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -110,8 +110,13 @@ public void checkFreeTierBillingUsage() {\n       deactivateUserWorkspaces(user);\n     }\n \n-    sendAlertsForCostThresholds(previousUserCosts, userCosts, currentExpiredUsers);\n-    sendAlertsForTimeThresholds(userCosts, currentExpiredUsers);\n+    final Set<DbUser> usersWithNonNullRegistration =\n+        userDao.findByFirstRegistrationCompletionTimeNotNull();\n+    final Set<DbUser> usersToThresholdCheck =\n+        Sets.difference(usersWithNonNullRegistration, currentExpiredUsers);\n+\n+    sendAlertsForCostThresholds(usersToThresholdCheck, previousUserCosts, userCosts);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "270f296cd61fa70ec2dc37f5a15c70b547c416bc"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTc1NDc0OnYy", "diffSide": "LEFT", "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToxMDo1MlrOFgFjjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToxMDo1MlrOFgFjjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE4OTc3NA==", "bodyText": "this was deprecated", "url": "https://github.com/all-of-us/workbench/pull/3018#discussion_r369189774", "createdAt": "2020-01-21T19:10:52Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "diffHunk": "@@ -13,8 +13,8 @@\n import javax.mail.MessagingException;\n import javax.mail.internet.AddressException;\n import javax.mail.internet.InternetAddress;\n-import org.apache.commons.lang3.text.StrSubstitutor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "270f296cd61fa70ec2dc37f5a15c70b547c416bc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTc2MDQyOnYy", "diffSide": "LEFT", "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToxMjo0MVrOFgFnAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToxMjo0MVrOFgFnAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5MDY1Nw==", "bodyText": "There was a lot of duplication in the buildXMessage and buildXHtml methods, so I made this process more generic.  I'll need to add 3 more of these for RW-3661.", "url": "https://github.com/all-of-us/workbench/pull/3018#discussion_r369190657", "createdAt": "2020-01-21T19:12:41Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "diffHunk": "@@ -69,29 +69,89 @@ public void sendBetaAccessRequestEmail(String userName) throws MessagingExceptio\n   }\n \n   @Override\n-  public void sendWelcomeEmail(String contactEmail, String password, User user)\n+  public void sendWelcomeEmail(final String contactEmail, final String password, final User user)\n       throws MessagingException {\n-    try {\n-      InternetAddress email = new InternetAddress(contactEmail);\n-      email.validate();\n-    } catch (AddressException e) {\n-      throw new MessagingException(\"Email: \" + contactEmail + \" is invalid.\");\n-    }\n-    MandrillMessage msg = buildWelcomeMessage(contactEmail, password, user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "270f296cd61fa70ec2dc37f5a15c70b547c416bc"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTc2MjQyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToxMzoyNlrOFgFoTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToxMzoyNlrOFgFoTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5MDk5MQ==", "bodyText": "new method to replace some common validation logic", "url": "https://github.com/all-of-us/workbench/pull/3018#discussion_r369190991", "createdAt": "2020-01-21T19:13:26Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "diffHunk": "@@ -69,29 +69,89 @@ public void sendBetaAccessRequestEmail(String userName) throws MessagingExceptio\n   }\n \n   @Override\n-  public void sendWelcomeEmail(String contactEmail, String password, User user)\n+  public void sendWelcomeEmail(final String contactEmail, final String password, final User user)\n       throws MessagingException {\n-    try {\n-      InternetAddress email = new InternetAddress(contactEmail);\n-      email.validate();\n-    } catch (AddressException e) {\n-      throw new MessagingException(\"Email: \" + contactEmail + \" is invalid.\");\n-    }\n-    MandrillMessage msg = buildWelcomeMessage(contactEmail, password, user);\n+    final String msgHtml =\n+        buildHtml(WELCOME_RESOURCE, welcomeMessageSubstitutionMap(password, user));\n+    final MandrillMessage msg = buildMessage(contactEmail, msgHtml, \"Your new All of Us Account\");\n     sendWithRetries(msg, String.format(\"Welcome for %s\", user.getName()));\n   }\n \n   @Override\n-  public void sendBetaAccessCompleteEmail(String contactEmail, String username)\n+  public void sendBetaAccessCompleteEmail(final String contactEmail, final String username)\n       throws MessagingException {\n+    final String msgHtml = buildHtml(BETA_ACCESS_RESOURCE, betaAccessSubstitutionMap(username));\n+    final MandrillMessage msg =\n+        buildMessage(contactEmail, msgHtml, \"All of Us ID Verification Complete\");\n+    sendWithRetries(msg, String.format(\"BetaAccess Complete for %s\", contactEmail));\n+  }\n+\n+  private ImmutableMap<String, String> welcomeMessageSubstitutionMap(\n+      final String password, final User user) {\n+    final CloudStorageService cloudStorageService = cloudStorageServiceProvider.get();\n+    return new ImmutableMap.Builder<String, String>()\n+        .put(\"USERNAME\", user.getPrimaryEmail())\n+        .put(\"PASSWORD\", password)\n+        .put(\"URL\", workbenchConfigProvider.get().admin.loginUrl)\n+        .put(\"HEADER_IMG\", cloudStorageService.getImageUrl(\"all_of_us_logo.png\"))\n+        .put(\"BULLET_1\", cloudStorageService.getImageUrl(\"bullet_1.png\"))\n+        .put(\"BULLET_2\", cloudStorageService.getImageUrl(\"bullet_2.png\"))\n+        .build();\n+  }\n+\n+  private ImmutableMap<String, String> betaAccessSubstitutionMap(final String username) {\n+    final CloudStorageService cloudStorageService = cloudStorageServiceProvider.get();\n+\n+    final String action =\n+        \"login to the workbench via <a class=\\\"link\\\" href=\\\"\"\n+            + workbenchConfigProvider.get().admin.loginUrl\n+            + \"\\\">\"\n+            + workbenchConfigProvider.get().admin.loginUrl\n+            + \"</a>\";\n+\n+    return new ImmutableMap.Builder<String, String>()\n+        .put(\"ACTION\", action)\n+        .put(\"BETA_ACCESS_REPORT\", \"approved for use\")\n+        .put(\"HEADER_IMG\", cloudStorageService.getImageUrl(\"all_of_us_logo.png\"))\n+        .put(\"USERNAME\", username)\n+        .build();\n+  }\n+\n+  private String buildHtml(final String resource, final ImmutableMap<String, String> replacementMap)\n+      throws MessagingException {\n+    final URL emailContent = Resources.getResource(resource);\n+    final StringBuilder contentBuilder = new StringBuilder();\n+\n+    try {\n+      Resources.readLines(emailContent, StandardCharsets.UTF_8)\n+          .forEach(s -> contentBuilder.append(s).append(\"\\n\"));\n+    } catch (IOException e) {\n+      throw new MessagingException(\"Error reading in email\");\n+    }\n+\n+    return new StringSubstitutor(replacementMap).replace(contentBuilder.toString());\n+  }\n+\n+  private MandrillMessage buildMessage(\n+      final String contactEmail, final String msgHtml, final String subject)\n+      throws MessagingException {\n+    return new MandrillMessage()\n+        .to(Collections.singletonList(validatedRecipient(contactEmail)))\n+        .html(msgHtml)\n+        .subject(subject)\n+        .fromEmail(workbenchConfigProvider.get().mandrill.fromEmail);\n+  }\n+\n+  private RecipientAddress validatedRecipient(final String contactEmail) throws MessagingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "270f296cd61fa70ec2dc37f5a15c70b547c416bc"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTc2NDEzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/billing/FreeTierBillingServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToxMzo1OVrOFgFpWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToxMzo1OVrOFgFpWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5MTI1OA==", "bodyText": "set some defaults for tests", "url": "https://github.com/all-of-us/workbench/pull/3018#discussion_r369191258", "createdAt": "2020-01-21T19:13:59Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/billing/FreeTierBillingServiceTest.java", "diffHunk": "@@ -104,6 +104,11 @@ public void setUp() {\n     workbenchConfig = WorkbenchConfig.createEmptyConfig();\n     workbenchConfig.billing.freeTierCostAlertThresholds = new ArrayList<>(Doubles.asList(.5, .75));\n     workbenchConfig.billing.freeTierTimeAlertThresholds = new ArrayList<>(Doubles.asList(.5, .75));\n+    workbenchConfig.billing.defaultFreeCreditsDollarLimit = 1000.0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "270f296cd61fa70ec2dc37f5a15c70b547c416bc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTc2NTY3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/billing/FreeTierBillingServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToxNDozMlrOFgFqZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTozMDowMFrOFgGH7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5MTUyNA==", "bodyText": "since we now only check if the user has a valid registration time", "url": "https://github.com/all-of-us/workbench/pull/3018#discussion_r369191524", "createdAt": "2020-01-21T19:14:32Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/billing/FreeTierBillingServiceTest.java", "diffHunk": "@@ -936,6 +933,7 @@ private void assertSingleWorkspaceTestDbState(\n   private DbUser createUser(String email) {\n     DbUser user = new DbUser();\n     user.setUsername(email);\n+    user.setFirstRegistrationCompletionTime(Timestamp.from(START_INSTANT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "270f296cd61fa70ec2dc37f5a15c70b547c416bc"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5OTA4NQ==", "bodyText": "aside: We ought to revisit the user data model. We could have a separate registration table that holds . the start, end, repeat count, etc. This is a couple of degrees removed from the actual user's core state.", "url": "https://github.com/all-of-us/workbench/pull/3018#discussion_r369199085", "createdAt": "2020-01-21T19:30:00Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/billing/FreeTierBillingServiceTest.java", "diffHunk": "@@ -936,6 +933,7 @@ private void assertSingleWorkspaceTestDbState(\n   private DbUser createUser(String email) {\n     DbUser user = new DbUser();\n     user.setUsername(email);\n+    user.setFirstRegistrationCompletionTime(Timestamp.from(START_INSTANT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5MTUyNA=="}, "originalCommit": {"oid": "270f296cd61fa70ec2dc37f5a15c70b547c416bc"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTc4OTA3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToyMjozNFrOFgF5oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToyMjozNFrOFgF5oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5NTQyNQ==", "bodyText": "Can you define these string constants in an Enum like EmailTemplateKey.USERNAME?", "url": "https://github.com/all-of-us/workbench/pull/3018#discussion_r369195425", "createdAt": "2020-01-21T19:22:34Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "diffHunk": "@@ -69,29 +69,89 @@ public void sendBetaAccessRequestEmail(String userName) throws MessagingExceptio\n   }\n \n   @Override\n-  public void sendWelcomeEmail(String contactEmail, String password, User user)\n+  public void sendWelcomeEmail(final String contactEmail, final String password, final User user)\n       throws MessagingException {\n-    try {\n-      InternetAddress email = new InternetAddress(contactEmail);\n-      email.validate();\n-    } catch (AddressException e) {\n-      throw new MessagingException(\"Email: \" + contactEmail + \" is invalid.\");\n-    }\n-    MandrillMessage msg = buildWelcomeMessage(contactEmail, password, user);\n+    final String msgHtml =\n+        buildHtml(WELCOME_RESOURCE, welcomeMessageSubstitutionMap(password, user));\n+    final MandrillMessage msg = buildMessage(contactEmail, msgHtml, \"Your new All of Us Account\");\n     sendWithRetries(msg, String.format(\"Welcome for %s\", user.getName()));\n   }\n \n   @Override\n-  public void sendBetaAccessCompleteEmail(String contactEmail, String username)\n+  public void sendBetaAccessCompleteEmail(final String contactEmail, final String username)\n       throws MessagingException {\n+    final String msgHtml = buildHtml(BETA_ACCESS_RESOURCE, betaAccessSubstitutionMap(username));\n+    final MandrillMessage msg =\n+        buildMessage(contactEmail, msgHtml, \"All of Us ID Verification Complete\");\n+    sendWithRetries(msg, String.format(\"BetaAccess Complete for %s\", contactEmail));\n+  }\n+\n+  private ImmutableMap<String, String> welcomeMessageSubstitutionMap(\n+      final String password, final User user) {\n+    final CloudStorageService cloudStorageService = cloudStorageServiceProvider.get();\n+    return new ImmutableMap.Builder<String, String>()\n+        .put(\"USERNAME\", user.getPrimaryEmail())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "270f296cd61fa70ec2dc37f5a15c70b547c416bc"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTc5Mzc3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToyNDowNFrOFgF8iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToyNDowNFrOFgF8iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5NjE2OQ==", "bodyText": "This is getting close to content management in a Java file. Ideally we'd allow authors and graphic designers a more accessible place to compose content.", "url": "https://github.com/all-of-us/workbench/pull/3018#discussion_r369196169", "createdAt": "2020-01-21T19:24:04Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "diffHunk": "@@ -69,29 +69,89 @@ public void sendBetaAccessRequestEmail(String userName) throws MessagingExceptio\n   }\n \n   @Override\n-  public void sendWelcomeEmail(String contactEmail, String password, User user)\n+  public void sendWelcomeEmail(final String contactEmail, final String password, final User user)\n       throws MessagingException {\n-    try {\n-      InternetAddress email = new InternetAddress(contactEmail);\n-      email.validate();\n-    } catch (AddressException e) {\n-      throw new MessagingException(\"Email: \" + contactEmail + \" is invalid.\");\n-    }\n-    MandrillMessage msg = buildWelcomeMessage(contactEmail, password, user);\n+    final String msgHtml =\n+        buildHtml(WELCOME_RESOURCE, welcomeMessageSubstitutionMap(password, user));\n+    final MandrillMessage msg = buildMessage(contactEmail, msgHtml, \"Your new All of Us Account\");\n     sendWithRetries(msg, String.format(\"Welcome for %s\", user.getName()));\n   }\n \n   @Override\n-  public void sendBetaAccessCompleteEmail(String contactEmail, String username)\n+  public void sendBetaAccessCompleteEmail(final String contactEmail, final String username)\n       throws MessagingException {\n+    final String msgHtml = buildHtml(BETA_ACCESS_RESOURCE, betaAccessSubstitutionMap(username));\n+    final MandrillMessage msg =\n+        buildMessage(contactEmail, msgHtml, \"All of Us ID Verification Complete\");\n+    sendWithRetries(msg, String.format(\"BetaAccess Complete for %s\", contactEmail));\n+  }\n+\n+  private ImmutableMap<String, String> welcomeMessageSubstitutionMap(\n+      final String password, final User user) {\n+    final CloudStorageService cloudStorageService = cloudStorageServiceProvider.get();\n+    return new ImmutableMap.Builder<String, String>()\n+        .put(\"USERNAME\", user.getPrimaryEmail())\n+        .put(\"PASSWORD\", password)\n+        .put(\"URL\", workbenchConfigProvider.get().admin.loginUrl)\n+        .put(\"HEADER_IMG\", cloudStorageService.getImageUrl(\"all_of_us_logo.png\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "270f296cd61fa70ec2dc37f5a15c70b547c416bc"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTc5NjQzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToyNDo1OFrOFgF-PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToyNDo1OFrOFgF-PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5NjYwNA==", "bodyText": "nit: for private methods this is OK, but generally the guidance is to declare your function to return Map (for compatibility), even when using an ImmutableMap under the hood. Which seems scary.", "url": "https://github.com/all-of-us/workbench/pull/3018#discussion_r369196604", "createdAt": "2020-01-21T19:24:58Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "diffHunk": "@@ -69,29 +69,89 @@ public void sendBetaAccessRequestEmail(String userName) throws MessagingExceptio\n   }\n \n   @Override\n-  public void sendWelcomeEmail(String contactEmail, String password, User user)\n+  public void sendWelcomeEmail(final String contactEmail, final String password, final User user)\n       throws MessagingException {\n-    try {\n-      InternetAddress email = new InternetAddress(contactEmail);\n-      email.validate();\n-    } catch (AddressException e) {\n-      throw new MessagingException(\"Email: \" + contactEmail + \" is invalid.\");\n-    }\n-    MandrillMessage msg = buildWelcomeMessage(contactEmail, password, user);\n+    final String msgHtml =\n+        buildHtml(WELCOME_RESOURCE, welcomeMessageSubstitutionMap(password, user));\n+    final MandrillMessage msg = buildMessage(contactEmail, msgHtml, \"Your new All of Us Account\");\n     sendWithRetries(msg, String.format(\"Welcome for %s\", user.getName()));\n   }\n \n   @Override\n-  public void sendBetaAccessCompleteEmail(String contactEmail, String username)\n+  public void sendBetaAccessCompleteEmail(final String contactEmail, final String username)\n       throws MessagingException {\n+    final String msgHtml = buildHtml(BETA_ACCESS_RESOURCE, betaAccessSubstitutionMap(username));\n+    final MandrillMessage msg =\n+        buildMessage(contactEmail, msgHtml, \"All of Us ID Verification Complete\");\n+    sendWithRetries(msg, String.format(\"BetaAccess Complete for %s\", contactEmail));\n+  }\n+\n+  private ImmutableMap<String, String> welcomeMessageSubstitutionMap(\n+      final String password, final User user) {\n+    final CloudStorageService cloudStorageService = cloudStorageServiceProvider.get();\n+    return new ImmutableMap.Builder<String, String>()\n+        .put(\"USERNAME\", user.getPrimaryEmail())\n+        .put(\"PASSWORD\", password)\n+        .put(\"URL\", workbenchConfigProvider.get().admin.loginUrl)\n+        .put(\"HEADER_IMG\", cloudStorageService.getImageUrl(\"all_of_us_logo.png\"))\n+        .put(\"BULLET_1\", cloudStorageService.getImageUrl(\"bullet_1.png\"))\n+        .put(\"BULLET_2\", cloudStorageService.getImageUrl(\"bullet_2.png\"))\n+        .build();\n+  }\n+\n+  private ImmutableMap<String, String> betaAccessSubstitutionMap(final String username) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "270f296cd61fa70ec2dc37f5a15c70b547c416bc"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTc5ODgwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToyNTo0NlrOFgF_vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo0OTowNFrOFgJ68w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5Njk4OQ==", "bodyText": "You can just close the <a/> if you don't want to give separate anchor text from the href.", "url": "https://github.com/all-of-us/workbench/pull/3018#discussion_r369196989", "createdAt": "2020-01-21T19:25:46Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "diffHunk": "@@ -69,29 +69,89 @@ public void sendBetaAccessRequestEmail(String userName) throws MessagingExceptio\n   }\n \n   @Override\n-  public void sendWelcomeEmail(String contactEmail, String password, User user)\n+  public void sendWelcomeEmail(final String contactEmail, final String password, final User user)\n       throws MessagingException {\n-    try {\n-      InternetAddress email = new InternetAddress(contactEmail);\n-      email.validate();\n-    } catch (AddressException e) {\n-      throw new MessagingException(\"Email: \" + contactEmail + \" is invalid.\");\n-    }\n-    MandrillMessage msg = buildWelcomeMessage(contactEmail, password, user);\n+    final String msgHtml =\n+        buildHtml(WELCOME_RESOURCE, welcomeMessageSubstitutionMap(password, user));\n+    final MandrillMessage msg = buildMessage(contactEmail, msgHtml, \"Your new All of Us Account\");\n     sendWithRetries(msg, String.format(\"Welcome for %s\", user.getName()));\n   }\n \n   @Override\n-  public void sendBetaAccessCompleteEmail(String contactEmail, String username)\n+  public void sendBetaAccessCompleteEmail(final String contactEmail, final String username)\n       throws MessagingException {\n+    final String msgHtml = buildHtml(BETA_ACCESS_RESOURCE, betaAccessSubstitutionMap(username));\n+    final MandrillMessage msg =\n+        buildMessage(contactEmail, msgHtml, \"All of Us ID Verification Complete\");\n+    sendWithRetries(msg, String.format(\"BetaAccess Complete for %s\", contactEmail));\n+  }\n+\n+  private ImmutableMap<String, String> welcomeMessageSubstitutionMap(\n+      final String password, final User user) {\n+    final CloudStorageService cloudStorageService = cloudStorageServiceProvider.get();\n+    return new ImmutableMap.Builder<String, String>()\n+        .put(\"USERNAME\", user.getPrimaryEmail())\n+        .put(\"PASSWORD\", password)\n+        .put(\"URL\", workbenchConfigProvider.get().admin.loginUrl)\n+        .put(\"HEADER_IMG\", cloudStorageService.getImageUrl(\"all_of_us_logo.png\"))\n+        .put(\"BULLET_1\", cloudStorageService.getImageUrl(\"bullet_1.png\"))\n+        .put(\"BULLET_2\", cloudStorageService.getImageUrl(\"bullet_2.png\"))\n+        .build();\n+  }\n+\n+  private ImmutableMap<String, String> betaAccessSubstitutionMap(final String username) {\n+    final CloudStorageService cloudStorageService = cloudStorageServiceProvider.get();\n+\n+    final String action =\n+        \"login to the workbench via <a class=\\\"link\\\" href=\\\"\"\n+            + workbenchConfigProvider.get().admin.loginUrl\n+            + \"\\\">\"\n+            + workbenchConfigProvider.get().admin.loginUrl", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "270f296cd61fa70ec2dc37f5a15c70b547c416bc"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2MTI5OQ==", "bodyText": "This is not mine - I'm not going to modify this.", "url": "https://github.com/all-of-us/workbench/pull/3018#discussion_r369261299", "createdAt": "2020-01-21T21:49:04Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "diffHunk": "@@ -69,29 +69,89 @@ public void sendBetaAccessRequestEmail(String userName) throws MessagingExceptio\n   }\n \n   @Override\n-  public void sendWelcomeEmail(String contactEmail, String password, User user)\n+  public void sendWelcomeEmail(final String contactEmail, final String password, final User user)\n       throws MessagingException {\n-    try {\n-      InternetAddress email = new InternetAddress(contactEmail);\n-      email.validate();\n-    } catch (AddressException e) {\n-      throw new MessagingException(\"Email: \" + contactEmail + \" is invalid.\");\n-    }\n-    MandrillMessage msg = buildWelcomeMessage(contactEmail, password, user);\n+    final String msgHtml =\n+        buildHtml(WELCOME_RESOURCE, welcomeMessageSubstitutionMap(password, user));\n+    final MandrillMessage msg = buildMessage(contactEmail, msgHtml, \"Your new All of Us Account\");\n     sendWithRetries(msg, String.format(\"Welcome for %s\", user.getName()));\n   }\n \n   @Override\n-  public void sendBetaAccessCompleteEmail(String contactEmail, String username)\n+  public void sendBetaAccessCompleteEmail(final String contactEmail, final String username)\n       throws MessagingException {\n+    final String msgHtml = buildHtml(BETA_ACCESS_RESOURCE, betaAccessSubstitutionMap(username));\n+    final MandrillMessage msg =\n+        buildMessage(contactEmail, msgHtml, \"All of Us ID Verification Complete\");\n+    sendWithRetries(msg, String.format(\"BetaAccess Complete for %s\", contactEmail));\n+  }\n+\n+  private ImmutableMap<String, String> welcomeMessageSubstitutionMap(\n+      final String password, final User user) {\n+    final CloudStorageService cloudStorageService = cloudStorageServiceProvider.get();\n+    return new ImmutableMap.Builder<String, String>()\n+        .put(\"USERNAME\", user.getPrimaryEmail())\n+        .put(\"PASSWORD\", password)\n+        .put(\"URL\", workbenchConfigProvider.get().admin.loginUrl)\n+        .put(\"HEADER_IMG\", cloudStorageService.getImageUrl(\"all_of_us_logo.png\"))\n+        .put(\"BULLET_1\", cloudStorageService.getImageUrl(\"bullet_1.png\"))\n+        .put(\"BULLET_2\", cloudStorageService.getImageUrl(\"bullet_2.png\"))\n+        .build();\n+  }\n+\n+  private ImmutableMap<String, String> betaAccessSubstitutionMap(final String username) {\n+    final CloudStorageService cloudStorageService = cloudStorageServiceProvider.get();\n+\n+    final String action =\n+        \"login to the workbench via <a class=\\\"link\\\" href=\\\"\"\n+            + workbenchConfigProvider.get().admin.loginUrl\n+            + \"\\\">\"\n+            + workbenchConfigProvider.get().admin.loginUrl", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5Njk4OQ=="}, "originalCommit": {"oid": "270f296cd61fa70ec2dc37f5a15c70b547c416bc"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTgwMzY3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToyNzoyMFrOFgGC1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToyNzoyMFrOFgGC1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5Nzc4MQ==", "bodyText": "I'd name this contactInternetAddress", "url": "https://github.com/all-of-us/workbench/pull/3018#discussion_r369197781", "createdAt": "2020-01-21T19:27:20Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "diffHunk": "@@ -69,29 +69,89 @@ public void sendBetaAccessRequestEmail(String userName) throws MessagingExceptio\n   }\n \n   @Override\n-  public void sendWelcomeEmail(String contactEmail, String password, User user)\n+  public void sendWelcomeEmail(final String contactEmail, final String password, final User user)\n       throws MessagingException {\n-    try {\n-      InternetAddress email = new InternetAddress(contactEmail);\n-      email.validate();\n-    } catch (AddressException e) {\n-      throw new MessagingException(\"Email: \" + contactEmail + \" is invalid.\");\n-    }\n-    MandrillMessage msg = buildWelcomeMessage(contactEmail, password, user);\n+    final String msgHtml =\n+        buildHtml(WELCOME_RESOURCE, welcomeMessageSubstitutionMap(password, user));\n+    final MandrillMessage msg = buildMessage(contactEmail, msgHtml, \"Your new All of Us Account\");\n     sendWithRetries(msg, String.format(\"Welcome for %s\", user.getName()));\n   }\n \n   @Override\n-  public void sendBetaAccessCompleteEmail(String contactEmail, String username)\n+  public void sendBetaAccessCompleteEmail(final String contactEmail, final String username)\n       throws MessagingException {\n+    final String msgHtml = buildHtml(BETA_ACCESS_RESOURCE, betaAccessSubstitutionMap(username));\n+    final MandrillMessage msg =\n+        buildMessage(contactEmail, msgHtml, \"All of Us ID Verification Complete\");\n+    sendWithRetries(msg, String.format(\"BetaAccess Complete for %s\", contactEmail));\n+  }\n+\n+  private ImmutableMap<String, String> welcomeMessageSubstitutionMap(\n+      final String password, final User user) {\n+    final CloudStorageService cloudStorageService = cloudStorageServiceProvider.get();\n+    return new ImmutableMap.Builder<String, String>()\n+        .put(\"USERNAME\", user.getPrimaryEmail())\n+        .put(\"PASSWORD\", password)\n+        .put(\"URL\", workbenchConfigProvider.get().admin.loginUrl)\n+        .put(\"HEADER_IMG\", cloudStorageService.getImageUrl(\"all_of_us_logo.png\"))\n+        .put(\"BULLET_1\", cloudStorageService.getImageUrl(\"bullet_1.png\"))\n+        .put(\"BULLET_2\", cloudStorageService.getImageUrl(\"bullet_2.png\"))\n+        .build();\n+  }\n+\n+  private ImmutableMap<String, String> betaAccessSubstitutionMap(final String username) {\n+    final CloudStorageService cloudStorageService = cloudStorageServiceProvider.get();\n+\n+    final String action =\n+        \"login to the workbench via <a class=\\\"link\\\" href=\\\"\"\n+            + workbenchConfigProvider.get().admin.loginUrl\n+            + \"\\\">\"\n+            + workbenchConfigProvider.get().admin.loginUrl\n+            + \"</a>\";\n+\n+    return new ImmutableMap.Builder<String, String>()\n+        .put(\"ACTION\", action)\n+        .put(\"BETA_ACCESS_REPORT\", \"approved for use\")\n+        .put(\"HEADER_IMG\", cloudStorageService.getImageUrl(\"all_of_us_logo.png\"))\n+        .put(\"USERNAME\", username)\n+        .build();\n+  }\n+\n+  private String buildHtml(final String resource, final ImmutableMap<String, String> replacementMap)\n+      throws MessagingException {\n+    final URL emailContent = Resources.getResource(resource);\n+    final StringBuilder contentBuilder = new StringBuilder();\n+\n+    try {\n+      Resources.readLines(emailContent, StandardCharsets.UTF_8)\n+          .forEach(s -> contentBuilder.append(s).append(\"\\n\"));\n+    } catch (IOException e) {\n+      throw new MessagingException(\"Error reading in email\");\n+    }\n+\n+    return new StringSubstitutor(replacementMap).replace(contentBuilder.toString());\n+  }\n+\n+  private MandrillMessage buildMessage(\n+      final String contactEmail, final String msgHtml, final String subject)\n+      throws MessagingException {\n+    return new MandrillMessage()\n+        .to(Collections.singletonList(validatedRecipient(contactEmail)))\n+        .html(msgHtml)\n+        .subject(subject)\n+        .fromEmail(workbenchConfigProvider.get().mandrill.fromEmail);\n+  }\n+\n+  private RecipientAddress validatedRecipient(final String contactEmail) throws MessagingException {\n     try {\n-      InternetAddress email = new InternetAddress(contactEmail);\n+      final InternetAddress email = new InternetAddress(contactEmail);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "270f296cd61fa70ec2dc37f5a15c70b547c416bc"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE0NTUzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToyOToxOFrOFgJY-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToyOToxOFrOFgJY-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MjYwMA==", "bodyText": "mega nit: I feel like subject, body parameter order is more intuitive than body, subject", "url": "https://github.com/all-of-us/workbench/pull/3018#discussion_r369252600", "createdAt": "2020-01-21T21:29:18Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "diffHunk": "@@ -69,29 +69,89 @@ public void sendBetaAccessRequestEmail(String userName) throws MessagingExceptio\n   }\n \n   @Override\n-  public void sendWelcomeEmail(String contactEmail, String password, User user)\n+  public void sendWelcomeEmail(final String contactEmail, final String password, final User user)\n       throws MessagingException {\n-    try {\n-      InternetAddress email = new InternetAddress(contactEmail);\n-      email.validate();\n-    } catch (AddressException e) {\n-      throw new MessagingException(\"Email: \" + contactEmail + \" is invalid.\");\n-    }\n-    MandrillMessage msg = buildWelcomeMessage(contactEmail, password, user);\n+    final String msgHtml =\n+        buildHtml(WELCOME_RESOURCE, welcomeMessageSubstitutionMap(password, user));\n+    final MandrillMessage msg = buildMessage(contactEmail, msgHtml, \"Your new All of Us Account\");\n     sendWithRetries(msg, String.format(\"Welcome for %s\", user.getName()));\n   }\n \n   @Override\n-  public void sendBetaAccessCompleteEmail(String contactEmail, String username)\n+  public void sendBetaAccessCompleteEmail(final String contactEmail, final String username)\n       throws MessagingException {\n+    final String msgHtml = buildHtml(BETA_ACCESS_RESOURCE, betaAccessSubstitutionMap(username));\n+    final MandrillMessage msg =\n+        buildMessage(contactEmail, msgHtml, \"All of Us ID Verification Complete\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "270f296cd61fa70ec2dc37f5a15c70b547c416bc"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE0NTk2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToyOToyN1rOFgJZPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo1MzozMlrOFgKCwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MjY2OQ==", "bodyText": "Beta Access?", "url": "https://github.com/all-of-us/workbench/pull/3018#discussion_r369252669", "createdAt": "2020-01-21T21:29:27Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "diffHunk": "@@ -69,29 +69,89 @@ public void sendBetaAccessRequestEmail(String userName) throws MessagingExceptio\n   }\n \n   @Override\n-  public void sendWelcomeEmail(String contactEmail, String password, User user)\n+  public void sendWelcomeEmail(final String contactEmail, final String password, final User user)\n       throws MessagingException {\n-    try {\n-      InternetAddress email = new InternetAddress(contactEmail);\n-      email.validate();\n-    } catch (AddressException e) {\n-      throw new MessagingException(\"Email: \" + contactEmail + \" is invalid.\");\n-    }\n-    MandrillMessage msg = buildWelcomeMessage(contactEmail, password, user);\n+    final String msgHtml =\n+        buildHtml(WELCOME_RESOURCE, welcomeMessageSubstitutionMap(password, user));\n+    final MandrillMessage msg = buildMessage(contactEmail, msgHtml, \"Your new All of Us Account\");\n     sendWithRetries(msg, String.format(\"Welcome for %s\", user.getName()));\n   }\n \n   @Override\n-  public void sendBetaAccessCompleteEmail(String contactEmail, String username)\n+  public void sendBetaAccessCompleteEmail(final String contactEmail, final String username)\n       throws MessagingException {\n+    final String msgHtml = buildHtml(BETA_ACCESS_RESOURCE, betaAccessSubstitutionMap(username));\n+    final MandrillMessage msg =\n+        buildMessage(contactEmail, msgHtml, \"All of Us ID Verification Complete\");\n+    sendWithRetries(msg, String.format(\"BetaAccess Complete for %s\", contactEmail));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "270f296cd61fa70ec2dc37f5a15c70b547c416bc"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2MzI5Nw==", "bodyText": "This is not mine so I'm not going to change it", "url": "https://github.com/all-of-us/workbench/pull/3018#discussion_r369263297", "createdAt": "2020-01-21T21:53:32Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "diffHunk": "@@ -69,29 +69,89 @@ public void sendBetaAccessRequestEmail(String userName) throws MessagingExceptio\n   }\n \n   @Override\n-  public void sendWelcomeEmail(String contactEmail, String password, User user)\n+  public void sendWelcomeEmail(final String contactEmail, final String password, final User user)\n       throws MessagingException {\n-    try {\n-      InternetAddress email = new InternetAddress(contactEmail);\n-      email.validate();\n-    } catch (AddressException e) {\n-      throw new MessagingException(\"Email: \" + contactEmail + \" is invalid.\");\n-    }\n-    MandrillMessage msg = buildWelcomeMessage(contactEmail, password, user);\n+    final String msgHtml =\n+        buildHtml(WELCOME_RESOURCE, welcomeMessageSubstitutionMap(password, user));\n+    final MandrillMessage msg = buildMessage(contactEmail, msgHtml, \"Your new All of Us Account\");\n     sendWithRetries(msg, String.format(\"Welcome for %s\", user.getName()));\n   }\n \n   @Override\n-  public void sendBetaAccessCompleteEmail(String contactEmail, String username)\n+  public void sendBetaAccessCompleteEmail(final String contactEmail, final String username)\n       throws MessagingException {\n+    final String msgHtml = buildHtml(BETA_ACCESS_RESOURCE, betaAccessSubstitutionMap(username));\n+    final MandrillMessage msg =\n+        buildMessage(contactEmail, msgHtml, \"All of Us ID Verification Complete\");\n+    sendWithRetries(msg, String.format(\"BetaAccess Complete for %s\", contactEmail));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MjY2OQ=="}, "originalCommit": {"oid": "270f296cd61fa70ec2dc37f5a15c70b547c416bc"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE2NDY3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTozNjoxMlrOFgJk0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTozNjoxMlrOFgJk0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NTYzNQ==", "bodyText": "nit: I like to relax the type for arguments down to the superclass that has the interface that I need. In this case, I'm guessing a Map<String, String> will do.", "url": "https://github.com/all-of-us/workbench/pull/3018#discussion_r369255635", "createdAt": "2020-01-21T21:36:12Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "diffHunk": "@@ -69,29 +69,89 @@ public void sendBetaAccessRequestEmail(String userName) throws MessagingExceptio\n   }\n \n   @Override\n-  public void sendWelcomeEmail(String contactEmail, String password, User user)\n+  public void sendWelcomeEmail(final String contactEmail, final String password, final User user)\n       throws MessagingException {\n-    try {\n-      InternetAddress email = new InternetAddress(contactEmail);\n-      email.validate();\n-    } catch (AddressException e) {\n-      throw new MessagingException(\"Email: \" + contactEmail + \" is invalid.\");\n-    }\n-    MandrillMessage msg = buildWelcomeMessage(contactEmail, password, user);\n+    final String msgHtml =\n+        buildHtml(WELCOME_RESOURCE, welcomeMessageSubstitutionMap(password, user));\n+    final MandrillMessage msg = buildMessage(contactEmail, msgHtml, \"Your new All of Us Account\");\n     sendWithRetries(msg, String.format(\"Welcome for %s\", user.getName()));\n   }\n \n   @Override\n-  public void sendBetaAccessCompleteEmail(String contactEmail, String username)\n+  public void sendBetaAccessCompleteEmail(final String contactEmail, final String username)\n       throws MessagingException {\n+    final String msgHtml = buildHtml(BETA_ACCESS_RESOURCE, betaAccessSubstitutionMap(username));\n+    final MandrillMessage msg =\n+        buildMessage(contactEmail, msgHtml, \"All of Us ID Verification Complete\");\n+    sendWithRetries(msg, String.format(\"BetaAccess Complete for %s\", contactEmail));\n+  }\n+\n+  private ImmutableMap<String, String> welcomeMessageSubstitutionMap(\n+      final String password, final User user) {\n+    final CloudStorageService cloudStorageService = cloudStorageServiceProvider.get();\n+    return new ImmutableMap.Builder<String, String>()\n+        .put(\"USERNAME\", user.getPrimaryEmail())\n+        .put(\"PASSWORD\", password)\n+        .put(\"URL\", workbenchConfigProvider.get().admin.loginUrl)\n+        .put(\"HEADER_IMG\", cloudStorageService.getImageUrl(\"all_of_us_logo.png\"))\n+        .put(\"BULLET_1\", cloudStorageService.getImageUrl(\"bullet_1.png\"))\n+        .put(\"BULLET_2\", cloudStorageService.getImageUrl(\"bullet_2.png\"))\n+        .build();\n+  }\n+\n+  private ImmutableMap<String, String> betaAccessSubstitutionMap(final String username) {\n+    final CloudStorageService cloudStorageService = cloudStorageServiceProvider.get();\n+\n+    final String action =\n+        \"login to the workbench via <a class=\\\"link\\\" href=\\\"\"\n+            + workbenchConfigProvider.get().admin.loginUrl\n+            + \"\\\">\"\n+            + workbenchConfigProvider.get().admin.loginUrl\n+            + \"</a>\";\n+\n+    return new ImmutableMap.Builder<String, String>()\n+        .put(\"ACTION\", action)\n+        .put(\"BETA_ACCESS_REPORT\", \"approved for use\")\n+        .put(\"HEADER_IMG\", cloudStorageService.getImageUrl(\"all_of_us_logo.png\"))\n+        .put(\"USERNAME\", username)\n+        .build();\n+  }\n+\n+  private String buildHtml(final String resource, final ImmutableMap<String, String> replacementMap)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "270f296cd61fa70ec2dc37f5a15c70b547c416bc"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE2OTY5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTozODowNVrOFgJn-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTozODowNVrOFgJn-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NjQ0Mg==", "bodyText": "nit: my first thought on reading emailContent as a name was that it contained the email data.", "url": "https://github.com/all-of-us/workbench/pull/3018#discussion_r369256442", "createdAt": "2020-01-21T21:38:05Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "diffHunk": "@@ -69,29 +69,89 @@ public void sendBetaAccessRequestEmail(String userName) throws MessagingExceptio\n   }\n \n   @Override\n-  public void sendWelcomeEmail(String contactEmail, String password, User user)\n+  public void sendWelcomeEmail(final String contactEmail, final String password, final User user)\n       throws MessagingException {\n-    try {\n-      InternetAddress email = new InternetAddress(contactEmail);\n-      email.validate();\n-    } catch (AddressException e) {\n-      throw new MessagingException(\"Email: \" + contactEmail + \" is invalid.\");\n-    }\n-    MandrillMessage msg = buildWelcomeMessage(contactEmail, password, user);\n+    final String msgHtml =\n+        buildHtml(WELCOME_RESOURCE, welcomeMessageSubstitutionMap(password, user));\n+    final MandrillMessage msg = buildMessage(contactEmail, msgHtml, \"Your new All of Us Account\");\n     sendWithRetries(msg, String.format(\"Welcome for %s\", user.getName()));\n   }\n \n   @Override\n-  public void sendBetaAccessCompleteEmail(String contactEmail, String username)\n+  public void sendBetaAccessCompleteEmail(final String contactEmail, final String username)\n       throws MessagingException {\n+    final String msgHtml = buildHtml(BETA_ACCESS_RESOURCE, betaAccessSubstitutionMap(username));\n+    final MandrillMessage msg =\n+        buildMessage(contactEmail, msgHtml, \"All of Us ID Verification Complete\");\n+    sendWithRetries(msg, String.format(\"BetaAccess Complete for %s\", contactEmail));\n+  }\n+\n+  private ImmutableMap<String, String> welcomeMessageSubstitutionMap(\n+      final String password, final User user) {\n+    final CloudStorageService cloudStorageService = cloudStorageServiceProvider.get();\n+    return new ImmutableMap.Builder<String, String>()\n+        .put(\"USERNAME\", user.getPrimaryEmail())\n+        .put(\"PASSWORD\", password)\n+        .put(\"URL\", workbenchConfigProvider.get().admin.loginUrl)\n+        .put(\"HEADER_IMG\", cloudStorageService.getImageUrl(\"all_of_us_logo.png\"))\n+        .put(\"BULLET_1\", cloudStorageService.getImageUrl(\"bullet_1.png\"))\n+        .put(\"BULLET_2\", cloudStorageService.getImageUrl(\"bullet_2.png\"))\n+        .build();\n+  }\n+\n+  private ImmutableMap<String, String> betaAccessSubstitutionMap(final String username) {\n+    final CloudStorageService cloudStorageService = cloudStorageServiceProvider.get();\n+\n+    final String action =\n+        \"login to the workbench via <a class=\\\"link\\\" href=\\\"\"\n+            + workbenchConfigProvider.get().admin.loginUrl\n+            + \"\\\">\"\n+            + workbenchConfigProvider.get().admin.loginUrl\n+            + \"</a>\";\n+\n+    return new ImmutableMap.Builder<String, String>()\n+        .put(\"ACTION\", action)\n+        .put(\"BETA_ACCESS_REPORT\", \"approved for use\")\n+        .put(\"HEADER_IMG\", cloudStorageService.getImageUrl(\"all_of_us_logo.png\"))\n+        .put(\"USERNAME\", username)\n+        .build();\n+  }\n+\n+  private String buildHtml(final String resource, final ImmutableMap<String, String> replacementMap)\n+      throws MessagingException {\n+    final URL emailContent = Resources.getResource(resource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "270f296cd61fa70ec2dc37f5a15c70b547c416bc"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE4MzAwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo0MzowNFrOFgJwhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo0MzowNFrOFgJwhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1ODYzMQ==", "bodyText": "nit: I think we can 1 line this with something like\n    return new StringSubstitutor(replacementMap)\n        .replace(Resources.readLines(null, StandardCharsets.UTF_8)\n            .stream()\n            .collect(Collectors.joining(\"\\n\")));\n\nTBD if that's actually more readable but maybe there's something in the middle that you like.", "url": "https://github.com/all-of-us/workbench/pull/3018#discussion_r369258631", "createdAt": "2020-01-21T21:43:04Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "diffHunk": "@@ -69,29 +69,89 @@ public void sendBetaAccessRequestEmail(String userName) throws MessagingExceptio\n   }\n \n   @Override\n-  public void sendWelcomeEmail(String contactEmail, String password, User user)\n+  public void sendWelcomeEmail(final String contactEmail, final String password, final User user)\n       throws MessagingException {\n-    try {\n-      InternetAddress email = new InternetAddress(contactEmail);\n-      email.validate();\n-    } catch (AddressException e) {\n-      throw new MessagingException(\"Email: \" + contactEmail + \" is invalid.\");\n-    }\n-    MandrillMessage msg = buildWelcomeMessage(contactEmail, password, user);\n+    final String msgHtml =\n+        buildHtml(WELCOME_RESOURCE, welcomeMessageSubstitutionMap(password, user));\n+    final MandrillMessage msg = buildMessage(contactEmail, msgHtml, \"Your new All of Us Account\");\n     sendWithRetries(msg, String.format(\"Welcome for %s\", user.getName()));\n   }\n \n   @Override\n-  public void sendBetaAccessCompleteEmail(String contactEmail, String username)\n+  public void sendBetaAccessCompleteEmail(final String contactEmail, final String username)\n       throws MessagingException {\n+    final String msgHtml = buildHtml(BETA_ACCESS_RESOURCE, betaAccessSubstitutionMap(username));\n+    final MandrillMessage msg =\n+        buildMessage(contactEmail, msgHtml, \"All of Us ID Verification Complete\");\n+    sendWithRetries(msg, String.format(\"BetaAccess Complete for %s\", contactEmail));\n+  }\n+\n+  private ImmutableMap<String, String> welcomeMessageSubstitutionMap(\n+      final String password, final User user) {\n+    final CloudStorageService cloudStorageService = cloudStorageServiceProvider.get();\n+    return new ImmutableMap.Builder<String, String>()\n+        .put(\"USERNAME\", user.getPrimaryEmail())\n+        .put(\"PASSWORD\", password)\n+        .put(\"URL\", workbenchConfigProvider.get().admin.loginUrl)\n+        .put(\"HEADER_IMG\", cloudStorageService.getImageUrl(\"all_of_us_logo.png\"))\n+        .put(\"BULLET_1\", cloudStorageService.getImageUrl(\"bullet_1.png\"))\n+        .put(\"BULLET_2\", cloudStorageService.getImageUrl(\"bullet_2.png\"))\n+        .build();\n+  }\n+\n+  private ImmutableMap<String, String> betaAccessSubstitutionMap(final String username) {\n+    final CloudStorageService cloudStorageService = cloudStorageServiceProvider.get();\n+\n+    final String action =\n+        \"login to the workbench via <a class=\\\"link\\\" href=\\\"\"\n+            + workbenchConfigProvider.get().admin.loginUrl\n+            + \"\\\">\"\n+            + workbenchConfigProvider.get().admin.loginUrl\n+            + \"</a>\";\n+\n+    return new ImmutableMap.Builder<String, String>()\n+        .put(\"ACTION\", action)\n+        .put(\"BETA_ACCESS_REPORT\", \"approved for use\")\n+        .put(\"HEADER_IMG\", cloudStorageService.getImageUrl(\"all_of_us_logo.png\"))\n+        .put(\"USERNAME\", username)\n+        .build();\n+  }\n+\n+  private String buildHtml(final String resource, final ImmutableMap<String, String> replacementMap)\n+      throws MessagingException {\n+    final URL emailContent = Resources.getResource(resource);\n+    final StringBuilder contentBuilder = new StringBuilder();\n+\n+    try {\n+      Resources.readLines(emailContent, StandardCharsets.UTF_8)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "270f296cd61fa70ec2dc37f5a15c70b547c416bc"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE5NjE5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo0Nzo0N1rOFgJ4ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo0Nzo0N1rOFgJ4ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2MDY4Mg==", "bodyText": "nit: I actually find it easier to just read the implementation of this function. There isn't too much abstraction here and if anything, I need to jump to a definition to find out what the arguments of buildMessage do. The implementation has it declared in a fairly succinct and readable way.", "url": "https://github.com/all-of-us/workbench/pull/3018#discussion_r369260682", "createdAt": "2020-01-21T21:47:47Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/mail/MailServiceImpl.java", "diffHunk": "@@ -69,29 +69,89 @@ public void sendBetaAccessRequestEmail(String userName) throws MessagingExceptio\n   }\n \n   @Override\n-  public void sendWelcomeEmail(String contactEmail, String password, User user)\n+  public void sendWelcomeEmail(final String contactEmail, final String password, final User user)\n       throws MessagingException {\n-    try {\n-      InternetAddress email = new InternetAddress(contactEmail);\n-      email.validate();\n-    } catch (AddressException e) {\n-      throw new MessagingException(\"Email: \" + contactEmail + \" is invalid.\");\n-    }\n-    MandrillMessage msg = buildWelcomeMessage(contactEmail, password, user);\n+    final String msgHtml =\n+        buildHtml(WELCOME_RESOURCE, welcomeMessageSubstitutionMap(password, user));\n+    final MandrillMessage msg = buildMessage(contactEmail, msgHtml, \"Your new All of Us Account\");\n     sendWithRetries(msg, String.format(\"Welcome for %s\", user.getName()));\n   }\n \n   @Override\n-  public void sendBetaAccessCompleteEmail(String contactEmail, String username)\n+  public void sendBetaAccessCompleteEmail(final String contactEmail, final String username)\n       throws MessagingException {\n+    final String msgHtml = buildHtml(BETA_ACCESS_RESOURCE, betaAccessSubstitutionMap(username));\n+    final MandrillMessage msg =\n+        buildMessage(contactEmail, msgHtml, \"All of Us ID Verification Complete\");\n+    sendWithRetries(msg, String.format(\"BetaAccess Complete for %s\", contactEmail));\n+  }\n+\n+  private ImmutableMap<String, String> welcomeMessageSubstitutionMap(\n+      final String password, final User user) {\n+    final CloudStorageService cloudStorageService = cloudStorageServiceProvider.get();\n+    return new ImmutableMap.Builder<String, String>()\n+        .put(\"USERNAME\", user.getPrimaryEmail())\n+        .put(\"PASSWORD\", password)\n+        .put(\"URL\", workbenchConfigProvider.get().admin.loginUrl)\n+        .put(\"HEADER_IMG\", cloudStorageService.getImageUrl(\"all_of_us_logo.png\"))\n+        .put(\"BULLET_1\", cloudStorageService.getImageUrl(\"bullet_1.png\"))\n+        .put(\"BULLET_2\", cloudStorageService.getImageUrl(\"bullet_2.png\"))\n+        .build();\n+  }\n+\n+  private ImmutableMap<String, String> betaAccessSubstitutionMap(final String username) {\n+    final CloudStorageService cloudStorageService = cloudStorageServiceProvider.get();\n+\n+    final String action =\n+        \"login to the workbench via <a class=\\\"link\\\" href=\\\"\"\n+            + workbenchConfigProvider.get().admin.loginUrl\n+            + \"\\\">\"\n+            + workbenchConfigProvider.get().admin.loginUrl\n+            + \"</a>\";\n+\n+    return new ImmutableMap.Builder<String, String>()\n+        .put(\"ACTION\", action)\n+        .put(\"BETA_ACCESS_REPORT\", \"approved for use\")\n+        .put(\"HEADER_IMG\", cloudStorageService.getImageUrl(\"all_of_us_logo.png\"))\n+        .put(\"USERNAME\", username)\n+        .build();\n+  }\n+\n+  private String buildHtml(final String resource, final ImmutableMap<String, String> replacementMap)\n+      throws MessagingException {\n+    final URL emailContent = Resources.getResource(resource);\n+    final StringBuilder contentBuilder = new StringBuilder();\n+\n+    try {\n+      Resources.readLines(emailContent, StandardCharsets.UTF_8)\n+          .forEach(s -> contentBuilder.append(s).append(\"\\n\"));\n+    } catch (IOException e) {\n+      throw new MessagingException(\"Error reading in email\");\n+    }\n+\n+    return new StringSubstitutor(replacementMap).replace(contentBuilder.toString());\n+  }\n+\n+  private MandrillMessage buildMessage(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "270f296cd61fa70ec2dc37f5a15c70b547c416bc"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3464, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}